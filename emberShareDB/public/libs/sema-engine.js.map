{"version":3,"file":"sema-engine.js","sources":["../node_modules/ringbuf.js/js/ringbuf.js","../src/engine/maximilian.util.js","../src/common/event.js","../src/common/dispatcher.js","../node_modules/assertion-error/index.js","../node_modules/pathval/index.js","../node_modules/chai/lib/chai/utils/flag.js","../node_modules/chai/lib/chai/utils/test.js","../node_modules/type-detect/type-detect.js","../node_modules/chai/lib/chai/utils/expectTypes.js","../node_modules/chai/lib/chai/utils/getActual.js","../node_modules/get-func-name/index.js","../node_modules/chai/lib/chai/utils/getProperties.js","../node_modules/chai/lib/chai/utils/getEnumerableProperties.js","../node_modules/chai/lib/chai/config.js","../node_modules/chai/lib/chai/utils/inspect.js","../node_modules/chai/lib/chai/utils/objDisplay.js","../node_modules/chai/lib/chai/utils/getMessage.js","../node_modules/chai/lib/chai/utils/transferFlags.js","../node_modules/deep-eql/index.js","../node_modules/chai/lib/chai/utils/isProxyEnabled.js","../node_modules/chai/lib/chai/utils/addProperty.js","../node_modules/chai/lib/chai/utils/addLengthGuard.js","../node_modules/chai/lib/chai/utils/proxify.js","../node_modules/chai/lib/chai/utils/addMethod.js","../node_modules/chai/lib/chai/utils/overwriteProperty.js","../node_modules/chai/lib/chai/utils/overwriteMethod.js","../node_modules/chai/lib/chai/utils/addChainableMethod.js","../node_modules/chai/lib/chai/utils/overwriteChainableMethod.js","../node_modules/chai/lib/chai/utils/compareByInspect.js","../node_modules/chai/lib/chai/utils/getOwnEnumerablePropertySymbols.js","../node_modules/chai/lib/chai/utils/getOwnEnumerableProperties.js","../node_modules/check-error/index.js","../node_modules/chai/lib/chai/utils/isNaN.js","../node_modules/chai/lib/chai/utils/getOperator.js","../node_modules/chai/lib/chai/utils/index.js","../node_modules/chai/lib/chai/assertion.js","../node_modules/chai/lib/chai/core/assertions.js","../node_modules/chai/lib/chai/interface/expect.js","../node_modules/chai/lib/chai/interface/should.js","../node_modules/chai/lib/chai/interface/assert.js","../node_modules/chai/lib/chai.js","../node_modules/chai/index.js","../node_modules/chai/index.mjs","../src/engine/engine.js","../node_modules/nearley/lib/nearley.js","../node_modules/moo/moo.js","../node_modules/nearley/lib/nearley-language-bootstrapped.js","../src/compiler/compiler-low-level.js","../node_modules/nearley/lib/generate.js","../node_modules/nearley/lib/lint.js","../src/compiler/IR.js","../src/compiler/sema.js","../src/compiler/compiler.js","../src/learner/learner.js","../src/common/blockTracker.js","../src/index.js"],"sourcesContent":["// A Single Producer - Single Consumer thread-safe wait-free ring buffer.\n//\n// The producer and the consumer can be separate thread, but cannot change role,\n// except with external synchronization.\n\nexport class RingBuffer {\n  static getStorageForCapacity(capacity, type) {\n    if (!type.BYTES_PER_ELEMENT) {\n      throw \"Pass in a ArrayBuffer subclass\";\n    }\n    var bytes = 8 + (capacity + 1) * type.BYTES_PER_ELEMENT;\n    return new SharedArrayBuffer(bytes);\n  }\n  // `sab` is a SharedArrayBuffer with a capacity calculated by calling\n  // `getStorageForCapacity` with the desired capacity.\n  constructor(sab, type) {\n    if (!ArrayBuffer.__proto__.isPrototypeOf(type) &&\n      type.BYTES_PER_ELEMENT !== undefined) {\n      throw \"Pass a concrete typed array class as second argument\";\n    }\n\n    // Maximum usable size is 1<<32 - type.BYTES_PER_ELEMENT bytes in the ring\n    // buffer for this version, easily changeable.\n    // -4 for the write ptr (uint32_t offsets)\n    // -4 for the read ptr (uint32_t offsets)\n    // capacity counts the empty slot to distinguish between full and empty.\n    this._type = type;\n    this.capacity = (sab.byteLength - 8) / type.BYTES_PER_ELEMENT;\n    this.buf = sab;\n    this.write_ptr = new Uint32Array(this.buf, 0, 1);\n    this.read_ptr = new Uint32Array(this.buf, 4, 1);\n    this.storage = new type(this.buf, 8, this.capacity);\n  }\n  // Returns the type of the underlying ArrayBuffer for this RingBuffer. This\n  // allows implementing crude type checking.\n  type() {\n    return this._type.name;\n  }\n  // Push bytes to the ring buffer. `bytes` is an typed array of the same type\n  // as passed in the ctor, to be written to the queue.\n  // Returns the number of elements written to the queue.\n  push(elements) {\n    var rd = Atomics.load(this.read_ptr, 0);\n    var wr = Atomics.load(this.write_ptr, 0);\n\n    if ((wr + 1) % this._storage_capacity() == rd) {\n      // full\n      return 0;\n    }\n\n    let to_write = Math.min(this._available_write(rd, wr), elements.length);\n    let first_part = Math.min(this._storage_capacity() - wr, to_write);\n    let second_part = to_write - first_part;\n\n    this._copy(elements, 0, this.storage, wr, first_part);\n    this._copy(elements, first_part, this.storage, 0, second_part);\n\n    // publish the enqueued data to the other side\n    Atomics.store(\n      this.write_ptr,\n      0,\n      (wr + to_write) % this._storage_capacity()\n    );\n\n    return to_write;\n  }\n  // Read `elements.length` elements from the ring buffer. `elements` is a typed\n  // array of the same type as passed in the ctor.\n  // Returns the number of elements read from the queue, they are placed at the\n  // beginning of the array passed as parameter.\n  pop(elements) {\n    var rd = Atomics.load(this.read_ptr, 0);\n    var wr = Atomics.load(this.write_ptr, 0);\n\n    if (wr == rd) {\n      return 0;\n    }\n\n    let to_read = Math.min(this._available_read(rd, wr), elements.length);\n\n    let first_part = Math.min(this._storage_capacity() - rd, elements.length);\n    let second_part = to_read - first_part;\n\n    this._copy(this.storage, rd, elements, 0, first_part);\n    this._copy(this.storage, 0, elements, first_part, second_part);\n\n    Atomics.store(this.read_ptr, 0, (rd + to_read) % this._storage_capacity());\n\n    return to_read;\n  }\n\n  // True if the ring buffer is empty false otherwise. This can be late on the\n  // reader side: it can return true even if something has just been pushed.\n  empty() {\n    var rd = Atomics.load(this.read_ptr, 0);\n    var wr = Atomics.load(this.write_ptr, 0);\n\n    return wr == rd;\n  }\n\n  // True if the ring buffer is full, false otherwise. This can be late on the\n  // write side: it can return true when something has just been poped.\n  full() {\n    var rd = Atomics.load(this.read_ptr, 0);\n    var wr = Atomics.load(this.write_ptr, 0);\n\n    return (wr + 1) % this.capacity != rd;\n  }\n\n  // The usable capacity for the ring buffer: the number of elements that can be\n  // stored.\n  capacity() {\n    return this.capacity - 1;\n  }\n\n  // Number of elements available for reading. This can be late, and report less\n  // elements that is actually in the queue, when something has just been\n  // enqueued.\n  available_read() {\n    var rd = Atomics.load(this.read_ptr, 0);\n    var wr = Atomics.load(this.write_ptr, 0);\n    return this._available_read(rd, wr);\n  }\n\n  // Number of elements available for writing. This can be late, and report less\n  // elemtns that is actually available for writing, when something has just\n  // been dequeued.\n  available_write() {\n    var rd = Atomics.load(this.read_ptr, 0);\n    var wr = Atomics.load(this.write_ptr, 0);\n    return this._available_write(rd, wr);\n  }\n\n  // private methods //\n\n  // Number of elements available for reading, given a read and write pointer..\n  _available_read(rd, wr) {\n    if (wr > rd) {\n      return wr - rd;\n    } else {\n      return wr + this._storage_capacity() - rd;\n    }\n  }\n\n  // Number of elements available from writing, given a read and write pointer.\n  _available_write(rd, wr) {\n    let rv = rd - wr - 1;\n    if (wr >= rd) {\n      rv += this._storage_capacity();\n    }\n    return rv;\n  }\n\n  // The size of the storage for elements not accounting the space for the index.\n  _storage_capacity() {\n    return this.capacity;\n  }\n\n  // Copy `size` elements from `input`, starting at offset `offset_input`, to\n  // `output`, starting at offset `offset_output`.\n  _copy(input, offset_input, output, offset_output, size) {\n    for (var i = 0; i < size; i++) {\n      output[offset_output + i] = input[offset_input + i];\n    }\n  }\n}\n","export const getArrayAsVectorDbl = (arrayIn) => {\n  var vecOut = new exports.VectorDouble();\n  for (var i = 0; i < arrayIn.length; i++) {\n    vecOut.push_back(arrayIn[i]);\n  }\n  return vecOut;\n};\n\nexport const getBase64 = (str) => {\n  //check if the string is a data URI\n  if (str.indexOf(';base64,') !== -1) {\n    //see where the actual data begins\n    var dataStart = str.indexOf(';base64,') + 8;\n    //check if the data is base64-encoded, if yes, return it\n    // taken from\n    // http://stackoverflow.com/a/8571649\n    return str.slice(dataStart).match(/^([A-Za-z0-9+\\/]{4})*([A-Za-z0-9+\\/]{4}|[A-Za-z0-9+\\/]{3}=|[A-Za-z0-9+\\/]{2}==)$/) ? str.slice(dataStart) : false;\n  } else return false;\n};\n\nexport const _keyStr = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n\nexport const removePaddingFromBase64 = (input) => {\n  var lkey = Module.maxiTools._keyStr.indexOf(input.charAt(input.length - 1));\n  if (lkey === 64) {\n    return input.substring(0, input.length - 1);\n  }\n  return input;\n};\n\n\nexport const loadSampleToArray = (audioContext, sampleObjectName, url, audioWorkletNode) => {\n  var data = [];\n\n  var context = audioContext;\n\n  //check if url is actually a base64-encoded string\n  var b64 = getBase64(url);\n  if (b64) {\n    //convert to arraybuffer\n    //modified version of this:\n    // https://github.com/danguer/blog-examples/blob/master/js/base64-binary.js\n    var ab_bytes = (b64.length / 4) * 3;\n    var arrayBuffer = new ArrayBuffer(ab_bytes);\n\n    b64 = removePaddingFromBase64(removePaddingFromBase64(b64));\n\n    var bytes = parseInt((b64.length / 4) * 3, 10);\n\n    var uarray;\n    var chr1, chr2, chr3;\n    var enc1, enc2, enc3, enc4;\n    var i = 0;\n    var j = 0;\n\n    uarray = new Uint8Array(arrayBuffer);\n\n    b64 = b64.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\n\n    for (i = 0; i < bytes; i += 3) {\n      //get the 3 octects in 4 ascii chars\n      enc1 = _keyStr.indexOf(b64.charAt(j++));\n      enc2 = _keyStr.indexOf(b64.charAt(j++));\n      enc3 = _keyStr.indexOf(b64.charAt(j++));\n      enc4 = _keyStr.indexOf(b64.charAt(j++));\n\n      chr1 = (enc1 << 2) | (enc2 >> 4);\n      chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n      chr3 = ((enc3 & 3) << 6) | enc4;\n\n      uarray[i] = chr1;\n      if (enc3 !== 64) {\n        uarray[i + 1] = chr2;\n      }\n      if (enc4 !== 64) {\n        uarray[i + 2] = chr3;\n      }\n    }\n\n    // https://webaudio.github.io/web-audio-api/#dom-baseaudiocontext-decodeaudiodata\n    // Asynchronously decodes the audio file data contained in the ArrayBuffer.\n    audioContext.decodeAudioData(\n      arrayBuffer, // has its content-type determined by sniffing\n      function (buffer) { // successCallback, argument is an AudioBuffer representing the decoded PCM audio data.\n        // source.buffer = buffer;\n        // source.loop = true;\n        // source.start(0);\n        let float32ArrayBuffer = buffer.getChannelData(0);\n        if (data !== undefined && audioWorkletNode !== undefined) {\n          // console.log('f32array: ' + float32Array);\n          audioWorkletNode.port.postMessage({\n            \"sample\":sampleObjectName,\n            \"buffer\": float32ArrayBuffer,\n          });\n        }\n      },\n      function (buffer) { // errorCallback\n        console.log(\"Error decoding source!\");\n      }\n    );\n  } else {\n    // Load asynchronously\n    // NOTE: This is giving me an error\n    // Uncaught ReferenceError: XMLHttpRequest is not defined (index):97 MaxiProcessor Error detected: undefined\n    // NOTE: followed the trail to the wasmmodule.js\n    // when loading on if (typeof XMLHttpRequest !== 'undefined') {\n    // throw new Error(\"Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers.\n    // Use --embed-file or --preload-file in emcc on the main thread.\");\n    var request = new XMLHttpRequest();\n    request.addEventListener(\"load\", () =>\n\t\t\tconsole.info(`loading sample '${sampleObjectName}'`)\n\t\t);\n    request.open(\"GET\", url, true);\n    request.responseType = \"arraybuffer\";\n    request.onload = function () {\n      audioContext.decodeAudioData(\n        request.response,\n        function (buffer) {\n          let float32ArrayBuffer = buffer.getChannelData(0);\n          if (data !== undefined && audioWorkletNode !== undefined) {\n            // console.log('f32array: ' + float32Array);\n            audioWorkletNode.port.postMessage({\n              \"sample\":sampleObjectName,\n              \"buffer\": float32ArrayBuffer,\n            });\n          }\n        },\n        function (buffer) {\n          console.log(\"Error decoding source!\");\n        }\n      );\n    };\n    request.send();\n  }\n  return \"Loading module\";\n};\n\n/**\n * @buildWorkletStringForBlob\n */\nexport const buildWorkletStringForBlob = (userDefinedFunction) => {\n\t// let = \"\";\n\t// switch (expression % 2) {\n\t// \tcase 0:\n\t// \t\tuserDefinedFunction = `Math.random() * 2`;\n\t// \t\tbreak;\n\t// \tcase 1:\n\t// \t\tuserDefinedFunction = `(Math.sin(400) + 0.4)`;\n\t// \t\tbreak;\n\t// \tdefault:\n\t// \t\tuserDefinedFunction = `(Math.sin(440) + 0.4)`;\n\t// }\n\n\t// We get an \"Error on loading worklet:  DOMException\" with the following import:\n\t// import Module from './maximilian.wasmmodule.js';\n\treturn `\n      import Module from './maximilian.wasmmodule.js';\n      cwlass CustomProcessor extends AudioWorkletProcessor {\n        static get parameterDescriptors() {\n          return [{\n            name: 'gain',\n            defaultValue: 0.1\n          }];\n        }\n        constructor() {\n          super();\n          this.sampleRate = 44100;\n\n          this.port.onmessage = (event) => {\n            console.log(event.data);\n          };\n\n        }\n        process(inputs, outputs, parameters) {\n\n          const outputsLength = outputs.length;\n          for (let outputId = 0; outputId < outputsLength; ++outputId) {\n            let output = outputs[outputId];\n            const channelLenght = output.length;\n\n            for (let channelId = 0; channelId < channelLenght; ++channelId) {\n              const gain = parameters.gain;\n              const isConstant = gain.length === 1\n              let outputChannel = output[channelId];\n\n              for (let i = 0; i < outputChannel.length; ++i) {\n                const amp = isConstant ? gain[0] : gain[i]\n                outputChannel[i] = ${userDefinedFunction} * amp;\n              }\n            }\n          }\n          return true;\n        }\n      }`;\n};\n\n/**\n * @createAndRegisterCustomProcessorCode\n */\nexport const createAndRegisterCustomProcessorCode = (il2pCode, processorName) => {\n\n  return `${il2pCode}\n\n    registerProcessor(\"${processorName}\", CustomProcessor);`;\n}\n\n/**\n * @buildWorkletStringForBlob\n */\nexport const buildWorkletFromBlob = () => {\n  // console.log('processorCount: ' + this.processorCount);\n  // // const userCode = editor.getDoc().getValue();\n  // const processorName = `processor-${this.processorCount}`;\n\n  // this.il2pCode = this.translateIntermediateLanguageToProcessorCode(this.processorCount);\n\n  // const code = this.createAndRegisterCustomProcessorCode(this.il2pCode, processorName);\n\n  // console.log(code);\n\n  // const blob = new Blob([code], {\n  //   type: \"application/javascript; charset=utf-8\",\n  // });\n\n  return blob;\n}\n\n/**\n * TODO: Check for memory leaks\n * @runProcessorCode\n */\n// export const runProcessorCode = () => {\n//   // TODO: Check for memory leaks\n//   // URL.revokeObjectURL()\n//   const workletUrl = window.URL.createObjectURL(blob);\n\n//   // Set custom processor in audio worklet\n//   this.audioContext.audioWorklet.addModule(workletUrl).then(() => {\n//     this.stop();\n//     this.customNode = new CustomAudioNode(this.audioContext, processorName);\n//     this.customNode.port.onmessage = (event) => {\n//       //  data from the processor.\n//       console.log(\"from processor: \" + event.data);\n//     };\n//     this.customNode.connect(this.audioContext.destination);\n//   }).catch(e => console.log(\"Error on loading worklet: \", e));\n// }\n\n\nexport const generateNoiseBuffer = (length) => {\n  var bufferData = new Module.VectorDouble();\n  for (var n = 0; n < length; n++) {\n    bufferData.push_back(Math.random(1));\n  }\n  return bufferData;\n}\n\n\nexport const translateBlobToBuffer = (blob) => {\n\n  let arrayBuffer = null;\n  let float32Array = null;\n  var fileReader = new FileReader();\n  fileReader.onload = function (event) {\n    arrayBuffer = event.target.result;\n    float32Array = new Float32Array(arrayBuffer);\n  };\n  fileReader.readAsArrayBuffer(blob);\n  let audioFloat32Array = fileReader.result;\n  var maxiSampleBufferData = new Module.VectorDouble();\n  for (var i = 0; i < audioFloat32Array.length; i++) {\n    maxiSampleBufferData.push_back(audioFloat32Array[i]);\n  }\n  return maxiSampleBufferData;\n}\n","export default class Event {\n\tconstructor(eventName) {\n\t\tthis.eventName = eventName;\n\t\tthis.callbacks = [];\n\t}\n\n\tregisterCallback(callback) {\n    this.callbacks.push(callback);\n\t}\n\n\tunregisterCallback(callback) {\n    const index = this.callbacks.indexOf(callback);\n\t\tif (index > -1) {\n\t\t\tthis.callbacks.splice(index, 1);\n\t\t}\n\t}\n\n\temit(data) {\n    const callbacks = this.callbacks.slice(0);\n\t\tcallbacks.forEach( callback => {\n\t\t\tcallback(data);\n\t\t});\n\t}\n}\n","import Event from './event.js';\n\nexport default class Dispatcher {\n\n  constructor() {\n\t\tthis.events = {};\n\t}\n\n\tdispatch(eventName, data) {\n\t\tconst event = this.events[eventName];\n\t\tif (event) {\n\t\t\tevent.emit(data);\n\t\t}\n\t}\n\n\taddEventListener(eventName, callback) {\n\t\tlet event = this.events[eventName];\n\t\tif (!event) {\n\t\t\tevent = new Event(eventName);\n\t\t\tthis.events[eventName] = event;\n\t\t}\n\t\tevent.registerCallback(callback);\n\t}\n\n\tremoveEventListener(eventName, callback) {\n\t\tconst event = this.events[eventName];\n\t\tif (event && event.callbacks.indexOf(callback) > -1) {\n\t\t\tevent.unregisterCallback(callback);\n\t\t\tif (event.callbacks.length === 0) {\n\t\t\t\tdelete this.events[eventName];\n\t\t\t}\n\t\t}\n\t}\n}\n","/*!\n * assertion-error\n * Copyright(c) 2013 Jake Luer <jake@qualiancy.com>\n * MIT Licensed\n */\n\n/*!\n * Return a function that will copy properties from\n * one object to another excluding any originally\n * listed. Returned function will create a new `{}`.\n *\n * @param {String} excluded properties ...\n * @return {Function}\n */\n\nfunction exclude () {\n  var excludes = [].slice.call(arguments);\n\n  function excludeProps (res, obj) {\n    Object.keys(obj).forEach(function (key) {\n      if (!~excludes.indexOf(key)) res[key] = obj[key];\n    });\n  }\n\n  return function extendExclude () {\n    var args = [].slice.call(arguments)\n      , i = 0\n      , res = {};\n\n    for (; i < args.length; i++) {\n      excludeProps(res, args[i]);\n    }\n\n    return res;\n  };\n};\n\n/*!\n * Primary Exports\n */\n\nmodule.exports = AssertionError;\n\n/**\n * ### AssertionError\n *\n * An extension of the JavaScript `Error` constructor for\n * assertion and validation scenarios.\n *\n * @param {String} message\n * @param {Object} properties to include (optional)\n * @param {callee} start stack function (optional)\n */\n\nfunction AssertionError (message, _props, ssf) {\n  var extend = exclude('name', 'message', 'stack', 'constructor', 'toJSON')\n    , props = extend(_props || {});\n\n  // default values\n  this.message = message || 'Unspecified AssertionError';\n  this.showDiff = false;\n\n  // copy from properties\n  for (var key in props) {\n    this[key] = props[key];\n  }\n\n  // capture stack trace\n  ssf = ssf || AssertionError;\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, ssf);\n  } else {\n    try {\n      throw new Error();\n    } catch(e) {\n      this.stack = e.stack;\n    }\n  }\n}\n\n/*!\n * Inherit from Error.prototype\n */\n\nAssertionError.prototype = Object.create(Error.prototype);\n\n/*!\n * Statically set name\n */\n\nAssertionError.prototype.name = 'AssertionError';\n\n/*!\n * Ensure correct constructor\n */\n\nAssertionError.prototype.constructor = AssertionError;\n\n/**\n * Allow errors to be converted to JSON for static transfer.\n *\n * @param {Boolean} include stack (default: `true`)\n * @return {Object} object that can be `JSON.stringify`\n */\n\nAssertionError.prototype.toJSON = function (stack) {\n  var extend = exclude('constructor', 'toJSON', 'stack')\n    , props = extend({ name: this.name }, this);\n\n  // include stack if exists and not turned off\n  if (false !== stack && this.stack) {\n    props.stack = this.stack;\n  }\n\n  return props;\n};\n","'use strict';\n\n/* !\n * Chai - pathval utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * @see https://github.com/logicalparadox/filtr\n * MIT Licensed\n */\n\n/**\n * ### .hasProperty(object, name)\n *\n * This allows checking whether an object has own\n * or inherited from prototype chain named property.\n *\n * Basically does the same thing as the `in`\n * operator but works properly with null/undefined values\n * and other primitives.\n *\n *     var obj = {\n *         arr: ['a', 'b', 'c']\n *       , str: 'Hello'\n *     }\n *\n * The following would be the results.\n *\n *     hasProperty(obj, 'str');  // true\n *     hasProperty(obj, 'constructor');  // true\n *     hasProperty(obj, 'bar');  // false\n *\n *     hasProperty(obj.str, 'length'); // true\n *     hasProperty(obj.str, 1);  // true\n *     hasProperty(obj.str, 5);  // false\n *\n *     hasProperty(obj.arr, 'length');  // true\n *     hasProperty(obj.arr, 2);  // true\n *     hasProperty(obj.arr, 3);  // false\n *\n * @param {Object} object\n * @param {String|Symbol} name\n * @returns {Boolean} whether it exists\n * @namespace Utils\n * @name hasProperty\n * @api public\n */\n\nfunction hasProperty(obj, name) {\n  if (typeof obj === 'undefined' || obj === null) {\n    return false;\n  }\n\n  // The `in` operator does not work with primitives.\n  return name in Object(obj);\n}\n\n/* !\n * ## parsePath(path)\n *\n * Helper function used to parse string object\n * paths. Use in conjunction with `internalGetPathValue`.\n *\n *      var parsed = parsePath('myobject.property.subprop');\n *\n * ### Paths:\n *\n * * Can be infinitely deep and nested.\n * * Arrays are also valid using the formal `myobject.document[3].property`.\n * * Literal dots and brackets (not delimiter) must be backslash-escaped.\n *\n * @param {String} path\n * @returns {Object} parsed\n * @api private\n */\n\nfunction parsePath(path) {\n  var str = path.replace(/([^\\\\])\\[/g, '$1.[');\n  var parts = str.match(/(\\\\\\.|[^.]+?)+/g);\n  return parts.map(function mapMatches(value) {\n    if (\n      value === 'constructor' ||\n      value === '__proto__' ||\n      value === 'prototype'\n    ) {\n      return {};\n    }\n    var regexp = /^\\[(\\d+)\\]$/;\n    var mArr = regexp.exec(value);\n    var parsed = null;\n    if (mArr) {\n      parsed = { i: parseFloat(mArr[1]) };\n    } else {\n      parsed = { p: value.replace(/\\\\([.[\\]])/g, '$1') };\n    }\n\n    return parsed;\n  });\n}\n\n/* !\n * ## internalGetPathValue(obj, parsed[, pathDepth])\n *\n * Helper companion function for `.parsePath` that returns\n * the value located at the parsed address.\n *\n *      var value = getPathValue(obj, parsed);\n *\n * @param {Object} object to search against\n * @param {Object} parsed definition from `parsePath`.\n * @param {Number} depth (nesting level) of the property we want to retrieve\n * @returns {Object|Undefined} value\n * @api private\n */\n\nfunction internalGetPathValue(obj, parsed, pathDepth) {\n  var temporaryValue = obj;\n  var res = null;\n  pathDepth = typeof pathDepth === 'undefined' ? parsed.length : pathDepth;\n\n  for (var i = 0; i < pathDepth; i++) {\n    var part = parsed[i];\n    if (temporaryValue) {\n      if (typeof part.p === 'undefined') {\n        temporaryValue = temporaryValue[part.i];\n      } else {\n        temporaryValue = temporaryValue[part.p];\n      }\n\n      if (i === pathDepth - 1) {\n        res = temporaryValue;\n      }\n    }\n  }\n\n  return res;\n}\n\n/* !\n * ## internalSetPathValue(obj, value, parsed)\n *\n * Companion function for `parsePath` that sets\n * the value located at a parsed address.\n *\n *  internalSetPathValue(obj, 'value', parsed);\n *\n * @param {Object} object to search and define on\n * @param {*} value to use upon set\n * @param {Object} parsed definition from `parsePath`\n * @api private\n */\n\nfunction internalSetPathValue(obj, val, parsed) {\n  var tempObj = obj;\n  var pathDepth = parsed.length;\n  var part = null;\n  // Here we iterate through every part of the path\n  for (var i = 0; i < pathDepth; i++) {\n    var propName = null;\n    var propVal = null;\n    part = parsed[i];\n\n    // If it's the last part of the path, we set the 'propName' value with the property name\n    if (i === pathDepth - 1) {\n      propName = typeof part.p === 'undefined' ? part.i : part.p;\n      // Now we set the property with the name held by 'propName' on object with the desired val\n      tempObj[propName] = val;\n    } else if (typeof part.p !== 'undefined' && tempObj[part.p]) {\n      tempObj = tempObj[part.p];\n    } else if (typeof part.i !== 'undefined' && tempObj[part.i]) {\n      tempObj = tempObj[part.i];\n    } else {\n      // If the obj doesn't have the property we create one with that name to define it\n      var next = parsed[i + 1];\n      // Here we set the name of the property which will be defined\n      propName = typeof part.p === 'undefined' ? part.i : part.p;\n      // Here we decide if this property will be an array or a new object\n      propVal = typeof next.p === 'undefined' ? [] : {};\n      tempObj[propName] = propVal;\n      tempObj = tempObj[propName];\n    }\n  }\n}\n\n/**\n * ### .getPathInfo(object, path)\n *\n * This allows the retrieval of property info in an\n * object given a string path.\n *\n * The path info consists of an object with the\n * following properties:\n *\n * * parent - The parent object of the property referenced by `path`\n * * name - The name of the final property, a number if it was an array indexer\n * * value - The value of the property, if it exists, otherwise `undefined`\n * * exists - Whether the property exists or not\n *\n * @param {Object} object\n * @param {String} path\n * @returns {Object} info\n * @namespace Utils\n * @name getPathInfo\n * @api public\n */\n\nfunction getPathInfo(obj, path) {\n  var parsed = parsePath(path);\n  var last = parsed[parsed.length - 1];\n  var info = {\n    parent:\n      parsed.length > 1 ?\n        internalGetPathValue(obj, parsed, parsed.length - 1) :\n        obj,\n    name: last.p || last.i,\n    value: internalGetPathValue(obj, parsed),\n  };\n  info.exists = hasProperty(info.parent, info.name);\n\n  return info;\n}\n\n/**\n * ### .getPathValue(object, path)\n *\n * This allows the retrieval of values in an\n * object given a string path.\n *\n *     var obj = {\n *         prop1: {\n *             arr: ['a', 'b', 'c']\n *           , str: 'Hello'\n *         }\n *       , prop2: {\n *             arr: [ { nested: 'Universe' } ]\n *           , str: 'Hello again!'\n *         }\n *     }\n *\n * The following would be the results.\n *\n *     getPathValue(obj, 'prop1.str'); // Hello\n *     getPathValue(obj, 'prop1.att[2]'); // b\n *     getPathValue(obj, 'prop2.arr[0].nested'); // Universe\n *\n * @param {Object} object\n * @param {String} path\n * @returns {Object} value or `undefined`\n * @namespace Utils\n * @name getPathValue\n * @api public\n */\n\nfunction getPathValue(obj, path) {\n  var info = getPathInfo(obj, path);\n  return info.value;\n}\n\n/**\n * ### .setPathValue(object, path, value)\n *\n * Define the value in an object at a given string path.\n *\n * ```js\n * var obj = {\n *     prop1: {\n *         arr: ['a', 'b', 'c']\n *       , str: 'Hello'\n *     }\n *   , prop2: {\n *         arr: [ { nested: 'Universe' } ]\n *       , str: 'Hello again!'\n *     }\n * };\n * ```\n *\n * The following would be acceptable.\n *\n * ```js\n * var properties = require('tea-properties');\n * properties.set(obj, 'prop1.str', 'Hello Universe!');\n * properties.set(obj, 'prop1.arr[2]', 'B');\n * properties.set(obj, 'prop2.arr[0].nested.value', { hello: 'universe' });\n * ```\n *\n * @param {Object} object\n * @param {String} path\n * @param {Mixed} value\n * @api private\n */\n\nfunction setPathValue(obj, path, val) {\n  var parsed = parsePath(path);\n  internalSetPathValue(obj, val, parsed);\n  return obj;\n}\n\nmodule.exports = {\n  hasProperty: hasProperty,\n  getPathInfo: getPathInfo,\n  getPathValue: getPathValue,\n  setPathValue: setPathValue,\n};\n","/*!\n * Chai - flag utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .flag(object, key, [value])\n *\n * Get or set a flag value on an object. If a\n * value is provided it will be set, else it will\n * return the currently set value or `undefined` if\n * the value is not set.\n *\n *     utils.flag(this, 'foo', 'bar'); // setter\n *     utils.flag(this, 'foo'); // getter, returns `bar`\n *\n * @param {Object} object constructed Assertion\n * @param {String} key\n * @param {Mixed} value (optional)\n * @namespace Utils\n * @name flag\n * @api private\n */\n\nmodule.exports = function flag(obj, key, value) {\n  var flags = obj.__flags || (obj.__flags = Object.create(null));\n  if (arguments.length === 3) {\n    flags[key] = value;\n  } else {\n    return flags[key];\n  }\n};\n","/*!\n * Chai - test utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependencies\n */\n\nvar flag = require('./flag');\n\n/**\n * ### .test(object, expression)\n *\n * Test and object for expression.\n *\n * @param {Object} object (constructed Assertion)\n * @param {Arguments} chai.Assertion.prototype.assert arguments\n * @namespace Utils\n * @name test\n */\n\nmodule.exports = function test(obj, args) {\n  var negate = flag(obj, 'negate')\n    , expr = args[0];\n  return negate ? !expr : expr;\n};\n","(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n\ttypeof define === 'function' && define.amd ? define(factory) :\n\t(global.typeDetect = factory());\n}(this, (function () { 'use strict';\n\n/* !\n * type-detect\n * Copyright(c) 2013 jake luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\nvar promiseExists = typeof Promise === 'function';\n\n/* eslint-disable no-undef */\nvar globalObject = typeof self === 'object' ? self : global; // eslint-disable-line id-blacklist\n\nvar symbolExists = typeof Symbol !== 'undefined';\nvar mapExists = typeof Map !== 'undefined';\nvar setExists = typeof Set !== 'undefined';\nvar weakMapExists = typeof WeakMap !== 'undefined';\nvar weakSetExists = typeof WeakSet !== 'undefined';\nvar dataViewExists = typeof DataView !== 'undefined';\nvar symbolIteratorExists = symbolExists && typeof Symbol.iterator !== 'undefined';\nvar symbolToStringTagExists = symbolExists && typeof Symbol.toStringTag !== 'undefined';\nvar setEntriesExists = setExists && typeof Set.prototype.entries === 'function';\nvar mapEntriesExists = mapExists && typeof Map.prototype.entries === 'function';\nvar setIteratorPrototype = setEntriesExists && Object.getPrototypeOf(new Set().entries());\nvar mapIteratorPrototype = mapEntriesExists && Object.getPrototypeOf(new Map().entries());\nvar arrayIteratorExists = symbolIteratorExists && typeof Array.prototype[Symbol.iterator] === 'function';\nvar arrayIteratorPrototype = arrayIteratorExists && Object.getPrototypeOf([][Symbol.iterator]());\nvar stringIteratorExists = symbolIteratorExists && typeof String.prototype[Symbol.iterator] === 'function';\nvar stringIteratorPrototype = stringIteratorExists && Object.getPrototypeOf(''[Symbol.iterator]());\nvar toStringLeftSliceLength = 8;\nvar toStringRightSliceLength = -1;\n/**\n * ### typeOf (obj)\n *\n * Uses `Object.prototype.toString` to determine the type of an object,\n * normalising behaviour across engine versions & well optimised.\n *\n * @param {Mixed} object\n * @return {String} object type\n * @api public\n */\nfunction typeDetect(obj) {\n  /* ! Speed optimisation\n   * Pre:\n   *   string literal     x 3,039,035 ops/sec ±1.62% (78 runs sampled)\n   *   boolean literal    x 1,424,138 ops/sec ±4.54% (75 runs sampled)\n   *   number literal     x 1,653,153 ops/sec ±1.91% (82 runs sampled)\n   *   undefined          x 9,978,660 ops/sec ±1.92% (75 runs sampled)\n   *   function           x 2,556,769 ops/sec ±1.73% (77 runs sampled)\n   * Post:\n   *   string literal     x 38,564,796 ops/sec ±1.15% (79 runs sampled)\n   *   boolean literal    x 31,148,940 ops/sec ±1.10% (79 runs sampled)\n   *   number literal     x 32,679,330 ops/sec ±1.90% (78 runs sampled)\n   *   undefined          x 32,363,368 ops/sec ±1.07% (82 runs sampled)\n   *   function           x 31,296,870 ops/sec ±0.96% (83 runs sampled)\n   */\n  var typeofObj = typeof obj;\n  if (typeofObj !== 'object') {\n    return typeofObj;\n  }\n\n  /* ! Speed optimisation\n   * Pre:\n   *   null               x 28,645,765 ops/sec ±1.17% (82 runs sampled)\n   * Post:\n   *   null               x 36,428,962 ops/sec ±1.37% (84 runs sampled)\n   */\n  if (obj === null) {\n    return 'null';\n  }\n\n  /* ! Spec Conformance\n   * Test: `Object.prototype.toString.call(window)``\n   *  - Node === \"[object global]\"\n   *  - Chrome === \"[object global]\"\n   *  - Firefox === \"[object Window]\"\n   *  - PhantomJS === \"[object Window]\"\n   *  - Safari === \"[object Window]\"\n   *  - IE 11 === \"[object Window]\"\n   *  - IE Edge === \"[object Window]\"\n   * Test: `Object.prototype.toString.call(this)``\n   *  - Chrome Worker === \"[object global]\"\n   *  - Firefox Worker === \"[object DedicatedWorkerGlobalScope]\"\n   *  - Safari Worker === \"[object DedicatedWorkerGlobalScope]\"\n   *  - IE 11 Worker === \"[object WorkerGlobalScope]\"\n   *  - IE Edge Worker === \"[object WorkerGlobalScope]\"\n   */\n  if (obj === globalObject) {\n    return 'global';\n  }\n\n  /* ! Speed optimisation\n   * Pre:\n   *   array literal      x 2,888,352 ops/sec ±0.67% (82 runs sampled)\n   * Post:\n   *   array literal      x 22,479,650 ops/sec ±0.96% (81 runs sampled)\n   */\n  if (\n    Array.isArray(obj) &&\n    (symbolToStringTagExists === false || !(Symbol.toStringTag in obj))\n  ) {\n    return 'Array';\n  }\n\n  // Not caching existence of `window` and related properties due to potential\n  // for `window` to be unset before tests in quasi-browser environments.\n  if (typeof window === 'object' && window !== null) {\n    /* ! Spec Conformance\n     * (https://html.spec.whatwg.org/multipage/browsers.html#location)\n     * WhatWG HTML$7.7.3 - The `Location` interface\n     * Test: `Object.prototype.toString.call(window.location)``\n     *  - IE <=11 === \"[object Object]\"\n     *  - IE Edge <=13 === \"[object Object]\"\n     */\n    if (typeof window.location === 'object' && obj === window.location) {\n      return 'Location';\n    }\n\n    /* ! Spec Conformance\n     * (https://html.spec.whatwg.org/#document)\n     * WhatWG HTML$3.1.1 - The `Document` object\n     * Note: Most browsers currently adher to the W3C DOM Level 2 spec\n     *       (https://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-26809268)\n     *       which suggests that browsers should use HTMLTableCellElement for\n     *       both TD and TH elements. WhatWG separates these.\n     *       WhatWG HTML states:\n     *         > For historical reasons, Window objects must also have a\n     *         > writable, configurable, non-enumerable property named\n     *         > HTMLDocument whose value is the Document interface object.\n     * Test: `Object.prototype.toString.call(document)``\n     *  - Chrome === \"[object HTMLDocument]\"\n     *  - Firefox === \"[object HTMLDocument]\"\n     *  - Safari === \"[object HTMLDocument]\"\n     *  - IE <=10 === \"[object Document]\"\n     *  - IE 11 === \"[object HTMLDocument]\"\n     *  - IE Edge <=13 === \"[object HTMLDocument]\"\n     */\n    if (typeof window.document === 'object' && obj === window.document) {\n      return 'Document';\n    }\n\n    if (typeof window.navigator === 'object') {\n      /* ! Spec Conformance\n       * (https://html.spec.whatwg.org/multipage/webappapis.html#mimetypearray)\n       * WhatWG HTML$8.6.1.5 - Plugins - Interface MimeTypeArray\n       * Test: `Object.prototype.toString.call(navigator.mimeTypes)``\n       *  - IE <=10 === \"[object MSMimeTypesCollection]\"\n       */\n      if (typeof window.navigator.mimeTypes === 'object' &&\n          obj === window.navigator.mimeTypes) {\n        return 'MimeTypeArray';\n      }\n\n      /* ! Spec Conformance\n       * (https://html.spec.whatwg.org/multipage/webappapis.html#pluginarray)\n       * WhatWG HTML$8.6.1.5 - Plugins - Interface PluginArray\n       * Test: `Object.prototype.toString.call(navigator.plugins)``\n       *  - IE <=10 === \"[object MSPluginsCollection]\"\n       */\n      if (typeof window.navigator.plugins === 'object' &&\n          obj === window.navigator.plugins) {\n        return 'PluginArray';\n      }\n    }\n\n    if ((typeof window.HTMLElement === 'function' ||\n        typeof window.HTMLElement === 'object') &&\n        obj instanceof window.HTMLElement) {\n      /* ! Spec Conformance\n      * (https://html.spec.whatwg.org/multipage/webappapis.html#pluginarray)\n      * WhatWG HTML$4.4.4 - The `blockquote` element - Interface `HTMLQuoteElement`\n      * Test: `Object.prototype.toString.call(document.createElement('blockquote'))``\n      *  - IE <=10 === \"[object HTMLBlockElement]\"\n      */\n      if (obj.tagName === 'BLOCKQUOTE') {\n        return 'HTMLQuoteElement';\n      }\n\n      /* ! Spec Conformance\n       * (https://html.spec.whatwg.org/#htmltabledatacellelement)\n       * WhatWG HTML$4.9.9 - The `td` element - Interface `HTMLTableDataCellElement`\n       * Note: Most browsers currently adher to the W3C DOM Level 2 spec\n       *       (https://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-82915075)\n       *       which suggests that browsers should use HTMLTableCellElement for\n       *       both TD and TH elements. WhatWG separates these.\n       * Test: Object.prototype.toString.call(document.createElement('td'))\n       *  - Chrome === \"[object HTMLTableCellElement]\"\n       *  - Firefox === \"[object HTMLTableCellElement]\"\n       *  - Safari === \"[object HTMLTableCellElement]\"\n       */\n      if (obj.tagName === 'TD') {\n        return 'HTMLTableDataCellElement';\n      }\n\n      /* ! Spec Conformance\n       * (https://html.spec.whatwg.org/#htmltableheadercellelement)\n       * WhatWG HTML$4.9.9 - The `td` element - Interface `HTMLTableHeaderCellElement`\n       * Note: Most browsers currently adher to the W3C DOM Level 2 spec\n       *       (https://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-82915075)\n       *       which suggests that browsers should use HTMLTableCellElement for\n       *       both TD and TH elements. WhatWG separates these.\n       * Test: Object.prototype.toString.call(document.createElement('th'))\n       *  - Chrome === \"[object HTMLTableCellElement]\"\n       *  - Firefox === \"[object HTMLTableCellElement]\"\n       *  - Safari === \"[object HTMLTableCellElement]\"\n       */\n      if (obj.tagName === 'TH') {\n        return 'HTMLTableHeaderCellElement';\n      }\n    }\n  }\n\n  /* ! Speed optimisation\n  * Pre:\n  *   Float64Array       x 625,644 ops/sec ±1.58% (80 runs sampled)\n  *   Float32Array       x 1,279,852 ops/sec ±2.91% (77 runs sampled)\n  *   Uint32Array        x 1,178,185 ops/sec ±1.95% (83 runs sampled)\n  *   Uint16Array        x 1,008,380 ops/sec ±2.25% (80 runs sampled)\n  *   Uint8Array         x 1,128,040 ops/sec ±2.11% (81 runs sampled)\n  *   Int32Array         x 1,170,119 ops/sec ±2.88% (80 runs sampled)\n  *   Int16Array         x 1,176,348 ops/sec ±5.79% (86 runs sampled)\n  *   Int8Array          x 1,058,707 ops/sec ±4.94% (77 runs sampled)\n  *   Uint8ClampedArray  x 1,110,633 ops/sec ±4.20% (80 runs sampled)\n  * Post:\n  *   Float64Array       x 7,105,671 ops/sec ±13.47% (64 runs sampled)\n  *   Float32Array       x 5,887,912 ops/sec ±1.46% (82 runs sampled)\n  *   Uint32Array        x 6,491,661 ops/sec ±1.76% (79 runs sampled)\n  *   Uint16Array        x 6,559,795 ops/sec ±1.67% (82 runs sampled)\n  *   Uint8Array         x 6,463,966 ops/sec ±1.43% (85 runs sampled)\n  *   Int32Array         x 5,641,841 ops/sec ±3.49% (81 runs sampled)\n  *   Int16Array         x 6,583,511 ops/sec ±1.98% (80 runs sampled)\n  *   Int8Array          x 6,606,078 ops/sec ±1.74% (81 runs sampled)\n  *   Uint8ClampedArray  x 6,602,224 ops/sec ±1.77% (83 runs sampled)\n  */\n  var stringTag = (symbolToStringTagExists && obj[Symbol.toStringTag]);\n  if (typeof stringTag === 'string') {\n    return stringTag;\n  }\n\n  var objPrototype = Object.getPrototypeOf(obj);\n  /* ! Speed optimisation\n  * Pre:\n  *   regex literal      x 1,772,385 ops/sec ±1.85% (77 runs sampled)\n  *   regex constructor  x 2,143,634 ops/sec ±2.46% (78 runs sampled)\n  * Post:\n  *   regex literal      x 3,928,009 ops/sec ±0.65% (78 runs sampled)\n  *   regex constructor  x 3,931,108 ops/sec ±0.58% (84 runs sampled)\n  */\n  if (objPrototype === RegExp.prototype) {\n    return 'RegExp';\n  }\n\n  /* ! Speed optimisation\n  * Pre:\n  *   date               x 2,130,074 ops/sec ±4.42% (68 runs sampled)\n  * Post:\n  *   date               x 3,953,779 ops/sec ±1.35% (77 runs sampled)\n  */\n  if (objPrototype === Date.prototype) {\n    return 'Date';\n  }\n\n  /* ! Spec Conformance\n   * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-promise.prototype-@@tostringtag)\n   * ES6$25.4.5.4 - Promise.prototype[@@toStringTag] should be \"Promise\":\n   * Test: `Object.prototype.toString.call(Promise.resolve())``\n   *  - Chrome <=47 === \"[object Object]\"\n   *  - Edge <=20 === \"[object Object]\"\n   *  - Firefox 29-Latest === \"[object Promise]\"\n   *  - Safari 7.1-Latest === \"[object Promise]\"\n   */\n  if (promiseExists && objPrototype === Promise.prototype) {\n    return 'Promise';\n  }\n\n  /* ! Speed optimisation\n  * Pre:\n  *   set                x 2,222,186 ops/sec ±1.31% (82 runs sampled)\n  * Post:\n  *   set                x 4,545,879 ops/sec ±1.13% (83 runs sampled)\n  */\n  if (setExists && objPrototype === Set.prototype) {\n    return 'Set';\n  }\n\n  /* ! Speed optimisation\n  * Pre:\n  *   map                x 2,396,842 ops/sec ±1.59% (81 runs sampled)\n  * Post:\n  *   map                x 4,183,945 ops/sec ±6.59% (82 runs sampled)\n  */\n  if (mapExists && objPrototype === Map.prototype) {\n    return 'Map';\n  }\n\n  /* ! Speed optimisation\n  * Pre:\n  *   weakset            x 1,323,220 ops/sec ±2.17% (76 runs sampled)\n  * Post:\n  *   weakset            x 4,237,510 ops/sec ±2.01% (77 runs sampled)\n  */\n  if (weakSetExists && objPrototype === WeakSet.prototype) {\n    return 'WeakSet';\n  }\n\n  /* ! Speed optimisation\n  * Pre:\n  *   weakmap            x 1,500,260 ops/sec ±2.02% (78 runs sampled)\n  * Post:\n  *   weakmap            x 3,881,384 ops/sec ±1.45% (82 runs sampled)\n  */\n  if (weakMapExists && objPrototype === WeakMap.prototype) {\n    return 'WeakMap';\n  }\n\n  /* ! Spec Conformance\n   * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-dataview.prototype-@@tostringtag)\n   * ES6$24.2.4.21 - DataView.prototype[@@toStringTag] should be \"DataView\":\n   * Test: `Object.prototype.toString.call(new DataView(new ArrayBuffer(1)))``\n   *  - Edge <=13 === \"[object Object]\"\n   */\n  if (dataViewExists && objPrototype === DataView.prototype) {\n    return 'DataView';\n  }\n\n  /* ! Spec Conformance\n   * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-%mapiteratorprototype%-@@tostringtag)\n   * ES6$23.1.5.2.2 - %MapIteratorPrototype%[@@toStringTag] should be \"Map Iterator\":\n   * Test: `Object.prototype.toString.call(new Map().entries())``\n   *  - Edge <=13 === \"[object Object]\"\n   */\n  if (mapExists && objPrototype === mapIteratorPrototype) {\n    return 'Map Iterator';\n  }\n\n  /* ! Spec Conformance\n   * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-%setiteratorprototype%-@@tostringtag)\n   * ES6$23.2.5.2.2 - %SetIteratorPrototype%[@@toStringTag] should be \"Set Iterator\":\n   * Test: `Object.prototype.toString.call(new Set().entries())``\n   *  - Edge <=13 === \"[object Object]\"\n   */\n  if (setExists && objPrototype === setIteratorPrototype) {\n    return 'Set Iterator';\n  }\n\n  /* ! Spec Conformance\n   * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-%arrayiteratorprototype%-@@tostringtag)\n   * ES6$22.1.5.2.2 - %ArrayIteratorPrototype%[@@toStringTag] should be \"Array Iterator\":\n   * Test: `Object.prototype.toString.call([][Symbol.iterator]())``\n   *  - Edge <=13 === \"[object Object]\"\n   */\n  if (arrayIteratorExists && objPrototype === arrayIteratorPrototype) {\n    return 'Array Iterator';\n  }\n\n  /* ! Spec Conformance\n   * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-%stringiteratorprototype%-@@tostringtag)\n   * ES6$21.1.5.2.2 - %StringIteratorPrototype%[@@toStringTag] should be \"String Iterator\":\n   * Test: `Object.prototype.toString.call(''[Symbol.iterator]())``\n   *  - Edge <=13 === \"[object Object]\"\n   */\n  if (stringIteratorExists && objPrototype === stringIteratorPrototype) {\n    return 'String Iterator';\n  }\n\n  /* ! Speed optimisation\n  * Pre:\n  *   object from null   x 2,424,320 ops/sec ±1.67% (76 runs sampled)\n  * Post:\n  *   object from null   x 5,838,000 ops/sec ±0.99% (84 runs sampled)\n  */\n  if (objPrototype === null) {\n    return 'Object';\n  }\n\n  return Object\n    .prototype\n    .toString\n    .call(obj)\n    .slice(toStringLeftSliceLength, toStringRightSliceLength);\n}\n\nreturn typeDetect;\n\n})));\n","/*!\n * Chai - expectTypes utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .expectTypes(obj, types)\n *\n * Ensures that the object being tested against is of a valid type.\n *\n *     utils.expectTypes(this, ['array', 'object', 'string']);\n *\n * @param {Mixed} obj constructed Assertion\n * @param {Array} type A list of allowed types for this assertion\n * @namespace Utils\n * @name expectTypes\n * @api public\n */\n\nvar AssertionError = require('assertion-error');\nvar flag = require('./flag');\nvar type = require('type-detect');\n\nmodule.exports = function expectTypes(obj, types) {\n  var flagMsg = flag(obj, 'message');\n  var ssfi = flag(obj, 'ssfi');\n\n  flagMsg = flagMsg ? flagMsg + ': ' : '';\n\n  obj = flag(obj, 'object');\n  types = types.map(function (t) { return t.toLowerCase(); });\n  types.sort();\n\n  // Transforms ['lorem', 'ipsum'] into 'a lorem, or an ipsum'\n  var str = types.map(function (t, index) {\n    var art = ~[ 'a', 'e', 'i', 'o', 'u' ].indexOf(t.charAt(0)) ? 'an' : 'a';\n    var or = types.length > 1 && index === types.length - 1 ? 'or ' : '';\n    return or + art + ' ' + t;\n  }).join(', ');\n\n  var objType = type(obj).toLowerCase();\n\n  if (!types.some(function (expected) { return objType === expected; })) {\n    throw new AssertionError(\n      flagMsg + 'object tested must be ' + str + ', but ' + objType + ' given',\n      undefined,\n      ssfi\n    );\n  }\n};\n","/*!\n * Chai - getActual utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .getActual(object, [actual])\n *\n * Returns the `actual` value for an Assertion.\n *\n * @param {Object} object (constructed Assertion)\n * @param {Arguments} chai.Assertion.prototype.assert arguments\n * @namespace Utils\n * @name getActual\n */\n\nmodule.exports = function getActual(obj, args) {\n  return args.length > 4 ? args[4] : obj._obj;\n};\n","'use strict';\n\n/* !\n * Chai - getFuncName utility\n * Copyright(c) 2012-2016 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .getFuncName(constructorFn)\n *\n * Returns the name of a function.\n * When a non-function instance is passed, returns `null`.\n * This also includes a polyfill function if `aFunc.name` is not defined.\n *\n * @name getFuncName\n * @param {Function} funct\n * @namespace Utils\n * @api public\n */\n\nvar toString = Function.prototype.toString;\nvar functionNameMatch = /\\s*function(?:\\s|\\s*\\/\\*[^(?:*\\/)]+\\*\\/\\s*)*([^\\s\\(\\/]+)/;\nfunction getFuncName(aFunc) {\n  if (typeof aFunc !== 'function') {\n    return null;\n  }\n\n  var name = '';\n  if (typeof Function.prototype.name === 'undefined' && typeof aFunc.name === 'undefined') {\n    // Here we run a polyfill if Function does not support the `name` property and if aFunc.name is not defined\n    var match = toString.call(aFunc).match(functionNameMatch);\n    if (match) {\n      name = match[1];\n    }\n  } else {\n    // If we've got a `name` property we just use it\n    name = aFunc.name;\n  }\n\n  return name;\n}\n\nmodule.exports = getFuncName;\n","/*!\n * Chai - getProperties utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .getProperties(object)\n *\n * This allows the retrieval of property names of an object, enumerable or not,\n * inherited or not.\n *\n * @param {Object} object\n * @returns {Array}\n * @namespace Utils\n * @name getProperties\n * @api public\n */\n\nmodule.exports = function getProperties(object) {\n  var result = Object.getOwnPropertyNames(object);\n\n  function addProperty(property) {\n    if (result.indexOf(property) === -1) {\n      result.push(property);\n    }\n  }\n\n  var proto = Object.getPrototypeOf(object);\n  while (proto !== null) {\n    Object.getOwnPropertyNames(proto).forEach(addProperty);\n    proto = Object.getPrototypeOf(proto);\n  }\n\n  return result;\n};\n","/*!\n * Chai - getEnumerableProperties utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .getEnumerableProperties(object)\n *\n * This allows the retrieval of enumerable property names of an object,\n * inherited or not.\n *\n * @param {Object} object\n * @returns {Array}\n * @namespace Utils\n * @name getEnumerableProperties\n * @api public\n */\n\nmodule.exports = function getEnumerableProperties(object) {\n  var result = [];\n  for (var name in object) {\n    result.push(name);\n  }\n  return result;\n};\n","module.exports = {\n\n  /**\n   * ### config.includeStack\n   *\n   * User configurable property, influences whether stack trace\n   * is included in Assertion error message. Default of false\n   * suppresses stack trace in the error message.\n   *\n   *     chai.config.includeStack = true;  // enable stack on error\n   *\n   * @param {Boolean}\n   * @api public\n   */\n\n  includeStack: false,\n\n  /**\n   * ### config.showDiff\n   *\n   * User configurable property, influences whether or not\n   * the `showDiff` flag should be included in the thrown\n   * AssertionErrors. `false` will always be `false`; `true`\n   * will be true when the assertion has requested a diff\n   * be shown.\n   *\n   * @param {Boolean}\n   * @api public\n   */\n\n  showDiff: true,\n\n  /**\n   * ### config.truncateThreshold\n   *\n   * User configurable property, sets length threshold for actual and\n   * expected values in assertion errors. If this threshold is exceeded, for\n   * example for large data structures, the value is replaced with something\n   * like `[ Array(3) ]` or `{ Object (prop1, prop2) }`.\n   *\n   * Set it to zero if you want to disable truncating altogether.\n   *\n   * This is especially userful when doing assertions on arrays: having this\n   * set to a reasonable large value makes the failure messages readily\n   * inspectable.\n   *\n   *     chai.config.truncateThreshold = 0;  // disable truncating\n   *\n   * @param {Number}\n   * @api public\n   */\n\n  truncateThreshold: 40,\n\n  /**\n   * ### config.useProxy\n   *\n   * User configurable property, defines if chai will use a Proxy to throw\n   * an error when a non-existent property is read, which protects users\n   * from typos when using property-based assertions.\n   *\n   * Set it to false if you want to disable this feature.\n   *\n   *     chai.config.useProxy = false;  // disable use of Proxy\n   *\n   * This feature is automatically disabled regardless of this config value\n   * in environments that don't support proxies.\n   *\n   * @param {Boolean}\n   * @api public\n   */\n\n  useProxy: true,\n\n  /**\n   * ### config.proxyExcludedKeys\n   *\n   * User configurable property, defines which properties should be ignored\n   * instead of throwing an error if they do not exist on the assertion.\n   * This is only applied if the environment Chai is running in supports proxies and\n   * if the `useProxy` configuration setting is enabled.\n   * By default, `then` and `inspect` will not throw an error if they do not exist on the\n   * assertion object because the `.inspect` property is read by `util.inspect` (for example, when\n   * using `console.log` on the assertion object) and `.then` is necessary for promise type-checking.\n   *\n   *     // By default these keys will not throw an error if they do not exist on the assertion object\n   *     chai.config.proxyExcludedKeys = ['then', 'inspect'];\n   *\n   * @param {Array}\n   * @api public\n   */\n\n  proxyExcludedKeys: ['then', 'catch', 'inspect', 'toJSON']\n};\n","// This is (almost) directly from Node.js utils\n// https://github.com/joyent/node/blob/f8c335d0caf47f16d31413f89aa28eda3878e3aa/lib/util.js\n\nvar getName = require('get-func-name');\nvar getProperties = require('./getProperties');\nvar getEnumerableProperties = require('./getEnumerableProperties');\nvar config = require('../config');\n\nmodule.exports = inspect;\n\n/**\n * ### .inspect(obj, [showHidden], [depth], [colors])\n *\n * Echoes the value of a value. Tries to print the value out\n * in the best way possible given the different types.\n *\n * @param {Object} obj The object to print out.\n * @param {Boolean} showHidden Flag that shows hidden (not enumerable)\n *    properties of objects. Default is false.\n * @param {Number} depth Depth in which to descend in object. Default is 2.\n * @param {Boolean} colors Flag to turn on ANSI escape codes to color the\n *    output. Default is false (no coloring).\n * @namespace Utils\n * @name inspect\n */\nfunction inspect(obj, showHidden, depth, colors) {\n  var ctx = {\n    showHidden: showHidden,\n    seen: [],\n    stylize: function (str) { return str; }\n  };\n  return formatValue(ctx, obj, (typeof depth === 'undefined' ? 2 : depth));\n}\n\n// Returns true if object is a DOM element.\nvar isDOMElement = function (object) {\n  if (typeof HTMLElement === 'object') {\n    return object instanceof HTMLElement;\n  } else {\n    return object &&\n      typeof object === 'object' &&\n      'nodeType' in object &&\n      object.nodeType === 1 &&\n      typeof object.nodeName === 'string';\n  }\n};\n\nfunction formatValue(ctx, value, recurseTimes) {\n  // Provide a hook for user-specified inspect functions.\n  // Check that value is an object with an inspect function on it\n  if (value && typeof value.inspect === 'function' &&\n      // Filter out the util module, it's inspect function is special\n      value.inspect !== exports.inspect &&\n      // Also filter out any prototype objects using the circular check.\n      !(value.constructor && value.constructor.prototype === value)) {\n    var ret = value.inspect(recurseTimes, ctx);\n    if (typeof ret !== 'string') {\n      ret = formatValue(ctx, ret, recurseTimes);\n    }\n    return ret;\n  }\n\n  // Primitive types cannot have properties\n  var primitive = formatPrimitive(ctx, value);\n  if (primitive) {\n    return primitive;\n  }\n\n  // If this is a DOM element, try to get the outer HTML.\n  if (isDOMElement(value)) {\n    if ('outerHTML' in value) {\n      return value.outerHTML;\n      // This value does not have an outerHTML attribute,\n      //   it could still be an XML element\n    } else {\n      // Attempt to serialize it\n      try {\n        if (document.xmlVersion) {\n          var xmlSerializer = new XMLSerializer();\n          return xmlSerializer.serializeToString(value);\n        } else {\n          // Firefox 11- do not support outerHTML\n          //   It does, however, support innerHTML\n          //   Use the following to render the element\n          var ns = \"http://www.w3.org/1999/xhtml\";\n          var container = document.createElementNS(ns, '_');\n\n          container.appendChild(value.cloneNode(false));\n          var html = container.innerHTML\n            .replace('><', '>' + value.innerHTML + '<');\n          container.innerHTML = '';\n          return html;\n        }\n      } catch (err) {\n        // This could be a non-native DOM implementation,\n        //   continue with the normal flow:\n        //   printing the element as if it is an object.\n      }\n    }\n  }\n\n  // Look up the keys of the object.\n  var visibleKeys = getEnumerableProperties(value);\n  var keys = ctx.showHidden ? getProperties(value) : visibleKeys;\n\n  var name, nameSuffix;\n\n  // Some type of object without properties can be shortcut.\n  // In IE, errors have a single `stack` property, or if they are vanilla `Error`,\n  // a `stack` plus `description` property; ignore those for consistency.\n  if (keys.length === 0 || (isError(value) && (\n      (keys.length === 1 && keys[0] === 'stack') ||\n      (keys.length === 2 && keys[0] === 'description' && keys[1] === 'stack')\n     ))) {\n    if (typeof value === 'function') {\n      name = getName(value);\n      nameSuffix = name ? ': ' + name : '';\n      return ctx.stylize('[Function' + nameSuffix + ']', 'special');\n    }\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    }\n    if (isDate(value)) {\n      return ctx.stylize(Date.prototype.toUTCString.call(value), 'date');\n    }\n    if (isError(value)) {\n      return formatError(value);\n    }\n  }\n\n  var base = ''\n    , array = false\n    , typedArray = false\n    , braces = ['{', '}'];\n\n  if (isTypedArray(value)) {\n    typedArray = true;\n    braces = ['[', ']'];\n  }\n\n  // Make Array say that they are Array\n  if (isArray(value)) {\n    array = true;\n    braces = ['[', ']'];\n  }\n\n  // Make functions say that they are functions\n  if (typeof value === 'function') {\n    name = getName(value);\n    nameSuffix = name ? ': ' + name : '';\n    base = ' [Function' + nameSuffix + ']';\n  }\n\n  // Make RegExps say that they are RegExps\n  if (isRegExp(value)) {\n    base = ' ' + RegExp.prototype.toString.call(value);\n  }\n\n  // Make dates with properties first say the date\n  if (isDate(value)) {\n    base = ' ' + Date.prototype.toUTCString.call(value);\n  }\n\n  // Make error with message first say the error\n  if (isError(value)) {\n    return formatError(value);\n  }\n\n  if (keys.length === 0 && (!array || value.length == 0)) {\n    return braces[0] + base + braces[1];\n  }\n\n  if (recurseTimes < 0) {\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    } else {\n      return ctx.stylize('[Object]', 'special');\n    }\n  }\n\n  ctx.seen.push(value);\n\n  var output;\n  if (array) {\n    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n  } else if (typedArray) {\n    return formatTypedArray(value);\n  } else {\n    output = keys.map(function(key) {\n      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n    });\n  }\n\n  ctx.seen.pop();\n\n  return reduceToSingleString(output, base, braces);\n}\n\nfunction formatPrimitive(ctx, value) {\n  switch (typeof value) {\n    case 'undefined':\n      return ctx.stylize('undefined', 'undefined');\n\n    case 'string':\n      var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '')\n                                               .replace(/'/g, \"\\\\'\")\n                                               .replace(/\\\\\"/g, '\"') + '\\'';\n      return ctx.stylize(simple, 'string');\n\n    case 'number':\n      if (value === 0 && (1/value) === -Infinity) {\n        return ctx.stylize('-0', 'number');\n      }\n      return ctx.stylize('' + value, 'number');\n\n    case 'boolean':\n      return ctx.stylize('' + value, 'boolean');\n\n    case 'symbol':\n      return ctx.stylize(value.toString(), 'symbol');\n\n    case 'bigint':\n      return ctx.stylize(value.toString() + 'n', 'bigint');\n  }\n  // For some reason typeof null is \"object\", so special case here.\n  if (value === null) {\n    return ctx.stylize('null', 'null');\n  }\n}\n\nfunction formatError(value) {\n  return '[' + Error.prototype.toString.call(value) + ']';\n}\n\nfunction formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n  var output = [];\n  for (var i = 0, l = value.length; i < l; ++i) {\n    if (Object.prototype.hasOwnProperty.call(value, String(i))) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          String(i), true));\n    } else {\n      output.push('');\n    }\n  }\n\n  keys.forEach(function(key) {\n    if (!key.match(/^\\d+$/)) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          key, true));\n    }\n  });\n  return output;\n}\n\nfunction formatTypedArray(value) {\n  var str = '[ ';\n\n  for (var i = 0; i < value.length; ++i) {\n    if (str.length >= config.truncateThreshold - 7) {\n      str += '...';\n      break;\n    }\n    str += value[i] + ', ';\n  }\n  str += ' ]';\n\n  // Removing trailing `, ` if the array was not truncated\n  if (str.indexOf(',  ]') !== -1) {\n    str = str.replace(',  ]', ' ]');\n  }\n\n  return str;\n}\n\nfunction formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n  var name;\n  var propDescriptor = Object.getOwnPropertyDescriptor(value, key);\n  var str;\n\n  if (propDescriptor) {\n    if (propDescriptor.get) {\n      if (propDescriptor.set) {\n        str = ctx.stylize('[Getter/Setter]', 'special');\n      } else {\n        str = ctx.stylize('[Getter]', 'special');\n      }\n    } else {\n      if (propDescriptor.set) {\n        str = ctx.stylize('[Setter]', 'special');\n      }\n    }\n  }\n  if (visibleKeys.indexOf(key) < 0) {\n    name = '[' + key + ']';\n  }\n  if (!str) {\n    if (ctx.seen.indexOf(value[key]) < 0) {\n      if (recurseTimes === null) {\n        str = formatValue(ctx, value[key], null);\n      } else {\n        str = formatValue(ctx, value[key], recurseTimes - 1);\n      }\n      if (str.indexOf('\\n') > -1) {\n        if (array) {\n          str = str.split('\\n').map(function(line) {\n            return '  ' + line;\n          }).join('\\n').substr(2);\n        } else {\n          str = '\\n' + str.split('\\n').map(function(line) {\n            return '   ' + line;\n          }).join('\\n');\n        }\n      }\n    } else {\n      str = ctx.stylize('[Circular]', 'special');\n    }\n  }\n  if (typeof name === 'undefined') {\n    if (array && key.match(/^\\d+$/)) {\n      return str;\n    }\n    name = JSON.stringify('' + key);\n    if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n      name = name.substr(1, name.length - 2);\n      name = ctx.stylize(name, 'name');\n    } else {\n      name = name.replace(/'/g, \"\\\\'\")\n                 .replace(/\\\\\"/g, '\"')\n                 .replace(/(^\"|\"$)/g, \"'\");\n      name = ctx.stylize(name, 'string');\n    }\n  }\n\n  return name + ': ' + str;\n}\n\nfunction reduceToSingleString(output, base, braces) {\n  var length = output.reduce(function(prev, cur) {\n    return prev + cur.length + 1;\n  }, 0);\n\n  if (length > 60) {\n    return braces[0] +\n           (base === '' ? '' : base + '\\n ') +\n           ' ' +\n           output.join(',\\n  ') +\n           ' ' +\n           braces[1];\n  }\n\n  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];\n}\n\nfunction isTypedArray(ar) {\n  // Unfortunately there's no way to check if an object is a TypedArray\n  // We have to check if it's one of these types\n  return (typeof ar === 'object' && /\\w+Array]$/.test(objectToString(ar)));\n}\n\nfunction isArray(ar) {\n  return Array.isArray(ar) ||\n         (typeof ar === 'object' && objectToString(ar) === '[object Array]');\n}\n\nfunction isRegExp(re) {\n  return typeof re === 'object' && objectToString(re) === '[object RegExp]';\n}\n\nfunction isDate(d) {\n  return typeof d === 'object' && objectToString(d) === '[object Date]';\n}\n\nfunction isError(e) {\n  return typeof e === 'object' && objectToString(e) === '[object Error]';\n}\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n","/*!\n * Chai - flag utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependencies\n */\n\nvar inspect = require('./inspect');\nvar config = require('../config');\n\n/**\n * ### .objDisplay(object)\n *\n * Determines if an object or an array matches\n * criteria to be inspected in-line for error\n * messages or should be truncated.\n *\n * @param {Mixed} javascript object to inspect\n * @name objDisplay\n * @namespace Utils\n * @api public\n */\n\nmodule.exports = function objDisplay(obj) {\n  var str = inspect(obj)\n    , type = Object.prototype.toString.call(obj);\n\n  if (config.truncateThreshold && str.length >= config.truncateThreshold) {\n    if (type === '[object Function]') {\n      return !obj.name || obj.name === ''\n        ? '[Function]'\n        : '[Function: ' + obj.name + ']';\n    } else if (type === '[object Array]') {\n      return '[ Array(' + obj.length + ') ]';\n    } else if (type === '[object Object]') {\n      var keys = Object.keys(obj)\n        , kstr = keys.length > 2\n          ? keys.splice(0, 2).join(', ') + ', ...'\n          : keys.join(', ');\n      return '{ Object (' + kstr + ') }';\n    } else {\n      return str;\n    }\n  } else {\n    return str;\n  }\n};\n","/*!\n * Chai - message composition utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependencies\n */\n\nvar flag = require('./flag')\n  , getActual = require('./getActual')\n  , objDisplay = require('./objDisplay');\n\n/**\n * ### .getMessage(object, message, negateMessage)\n *\n * Construct the error message based on flags\n * and template tags. Template tags will return\n * a stringified inspection of the object referenced.\n *\n * Message template tags:\n * - `#{this}` current asserted object\n * - `#{act}` actual value\n * - `#{exp}` expected value\n *\n * @param {Object} object (constructed Assertion)\n * @param {Arguments} chai.Assertion.prototype.assert arguments\n * @namespace Utils\n * @name getMessage\n * @api public\n */\n\nmodule.exports = function getMessage(obj, args) {\n  var negate = flag(obj, 'negate')\n    , val = flag(obj, 'object')\n    , expected = args[3]\n    , actual = getActual(obj, args)\n    , msg = negate ? args[2] : args[1]\n    , flagMsg = flag(obj, 'message');\n\n  if(typeof msg === \"function\") msg = msg();\n  msg = msg || '';\n  msg = msg\n    .replace(/#\\{this\\}/g, function () { return objDisplay(val); })\n    .replace(/#\\{act\\}/g, function () { return objDisplay(actual); })\n    .replace(/#\\{exp\\}/g, function () { return objDisplay(expected); });\n\n  return flagMsg ? flagMsg + ': ' + msg : msg;\n};\n","/*!\n * Chai - transferFlags utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .transferFlags(assertion, object, includeAll = true)\n *\n * Transfer all the flags for `assertion` to `object`. If\n * `includeAll` is set to `false`, then the base Chai\n * assertion flags (namely `object`, `ssfi`, `lockSsfi`,\n * and `message`) will not be transferred.\n *\n *\n *     var newAssertion = new Assertion();\n *     utils.transferFlags(assertion, newAssertion);\n *\n *     var anotherAssertion = new Assertion(myObj);\n *     utils.transferFlags(assertion, anotherAssertion, false);\n *\n * @param {Assertion} assertion the assertion to transfer the flags from\n * @param {Object} object the object to transfer the flags to; usually a new assertion\n * @param {Boolean} includeAll\n * @namespace Utils\n * @name transferFlags\n * @api private\n */\n\nmodule.exports = function transferFlags(assertion, object, includeAll) {\n  var flags = assertion.__flags || (assertion.__flags = Object.create(null));\n\n  if (!object.__flags) {\n    object.__flags = Object.create(null);\n  }\n\n  includeAll = arguments.length === 3 ? includeAll : true;\n\n  for (var flag in flags) {\n    if (includeAll ||\n        (flag !== 'object' && flag !== 'ssfi' && flag !== 'lockSsfi' && flag != 'message')) {\n      object.__flags[flag] = flags[flag];\n    }\n  }\n};\n","'use strict';\n/* globals Symbol: false, Uint8Array: false, WeakMap: false */\n/*!\n * deep-eql\n * Copyright(c) 2013 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar type = require('type-detect');\nfunction FakeMap() {\n  this._key = 'chai/deep-eql__' + Math.random() + Date.now();\n}\n\nFakeMap.prototype = {\n  get: function getMap(key) {\n    return key[this._key];\n  },\n  set: function setMap(key, value) {\n    if (Object.isExtensible(key)) {\n      Object.defineProperty(key, this._key, {\n        value: value,\n        configurable: true,\n      });\n    }\n  },\n};\n\nvar MemoizeMap = typeof WeakMap === 'function' ? WeakMap : FakeMap;\n/*!\n * Check to see if the MemoizeMap has recorded a result of the two operands\n *\n * @param {Mixed} leftHandOperand\n * @param {Mixed} rightHandOperand\n * @param {MemoizeMap} memoizeMap\n * @returns {Boolean|null} result\n*/\nfunction memoizeCompare(leftHandOperand, rightHandOperand, memoizeMap) {\n  // Technically, WeakMap keys can *only* be objects, not primitives.\n  if (!memoizeMap || isPrimitive(leftHandOperand) || isPrimitive(rightHandOperand)) {\n    return null;\n  }\n  var leftHandMap = memoizeMap.get(leftHandOperand);\n  if (leftHandMap) {\n    var result = leftHandMap.get(rightHandOperand);\n    if (typeof result === 'boolean') {\n      return result;\n    }\n  }\n  return null;\n}\n\n/*!\n * Set the result of the equality into the MemoizeMap\n *\n * @param {Mixed} leftHandOperand\n * @param {Mixed} rightHandOperand\n * @param {MemoizeMap} memoizeMap\n * @param {Boolean} result\n*/\nfunction memoizeSet(leftHandOperand, rightHandOperand, memoizeMap, result) {\n  // Technically, WeakMap keys can *only* be objects, not primitives.\n  if (!memoizeMap || isPrimitive(leftHandOperand) || isPrimitive(rightHandOperand)) {\n    return;\n  }\n  var leftHandMap = memoizeMap.get(leftHandOperand);\n  if (leftHandMap) {\n    leftHandMap.set(rightHandOperand, result);\n  } else {\n    leftHandMap = new MemoizeMap();\n    leftHandMap.set(rightHandOperand, result);\n    memoizeMap.set(leftHandOperand, leftHandMap);\n  }\n}\n\n/*!\n * Primary Export\n */\n\nmodule.exports = deepEqual;\nmodule.exports.MemoizeMap = MemoizeMap;\n\n/**\n * Assert deeply nested sameValue equality between two objects of any type.\n *\n * @param {Mixed} leftHandOperand\n * @param {Mixed} rightHandOperand\n * @param {Object} [options] (optional) Additional options\n * @param {Array} [options.comparator] (optional) Override default algorithm, determining custom equality.\n * @param {Array} [options.memoize] (optional) Provide a custom memoization object which will cache the results of\n    complex objects for a speed boost. By passing `false` you can disable memoization, but this will cause circular\n    references to blow the stack.\n * @return {Boolean} equal match\n */\nfunction deepEqual(leftHandOperand, rightHandOperand, options) {\n  // If we have a comparator, we can't assume anything; so bail to its check first.\n  if (options && options.comparator) {\n    return extensiveDeepEqual(leftHandOperand, rightHandOperand, options);\n  }\n\n  var simpleResult = simpleEqual(leftHandOperand, rightHandOperand);\n  if (simpleResult !== null) {\n    return simpleResult;\n  }\n\n  // Deeper comparisons are pushed through to a larger function\n  return extensiveDeepEqual(leftHandOperand, rightHandOperand, options);\n}\n\n/**\n * Many comparisons can be canceled out early via simple equality or primitive checks.\n * @param {Mixed} leftHandOperand\n * @param {Mixed} rightHandOperand\n * @return {Boolean|null} equal match\n */\nfunction simpleEqual(leftHandOperand, rightHandOperand) {\n  // Equal references (except for Numbers) can be returned early\n  if (leftHandOperand === rightHandOperand) {\n    // Handle +-0 cases\n    return leftHandOperand !== 0 || 1 / leftHandOperand === 1 / rightHandOperand;\n  }\n\n  // handle NaN cases\n  if (\n    leftHandOperand !== leftHandOperand && // eslint-disable-line no-self-compare\n    rightHandOperand !== rightHandOperand // eslint-disable-line no-self-compare\n  ) {\n    return true;\n  }\n\n  // Anything that is not an 'object', i.e. symbols, functions, booleans, numbers,\n  // strings, and undefined, can be compared by reference.\n  if (isPrimitive(leftHandOperand) || isPrimitive(rightHandOperand)) {\n    // Easy out b/c it would have passed the first equality check\n    return false;\n  }\n  return null;\n}\n\n/*!\n * The main logic of the `deepEqual` function.\n *\n * @param {Mixed} leftHandOperand\n * @param {Mixed} rightHandOperand\n * @param {Object} [options] (optional) Additional options\n * @param {Array} [options.comparator] (optional) Override default algorithm, determining custom equality.\n * @param {Array} [options.memoize] (optional) Provide a custom memoization object which will cache the results of\n    complex objects for a speed boost. By passing `false` you can disable memoization, but this will cause circular\n    references to blow the stack.\n * @return {Boolean} equal match\n*/\nfunction extensiveDeepEqual(leftHandOperand, rightHandOperand, options) {\n  options = options || {};\n  options.memoize = options.memoize === false ? false : options.memoize || new MemoizeMap();\n  var comparator = options && options.comparator;\n\n  // Check if a memoized result exists.\n  var memoizeResultLeft = memoizeCompare(leftHandOperand, rightHandOperand, options.memoize);\n  if (memoizeResultLeft !== null) {\n    return memoizeResultLeft;\n  }\n  var memoizeResultRight = memoizeCompare(rightHandOperand, leftHandOperand, options.memoize);\n  if (memoizeResultRight !== null) {\n    return memoizeResultRight;\n  }\n\n  // If a comparator is present, use it.\n  if (comparator) {\n    var comparatorResult = comparator(leftHandOperand, rightHandOperand);\n    // Comparators may return null, in which case we want to go back to default behavior.\n    if (comparatorResult === false || comparatorResult === true) {\n      memoizeSet(leftHandOperand, rightHandOperand, options.memoize, comparatorResult);\n      return comparatorResult;\n    }\n    // To allow comparators to override *any* behavior, we ran them first. Since it didn't decide\n    // what to do, we need to make sure to return the basic tests first before we move on.\n    var simpleResult = simpleEqual(leftHandOperand, rightHandOperand);\n    if (simpleResult !== null) {\n      // Don't memoize this, it takes longer to set/retrieve than to just compare.\n      return simpleResult;\n    }\n  }\n\n  var leftHandType = type(leftHandOperand);\n  if (leftHandType !== type(rightHandOperand)) {\n    memoizeSet(leftHandOperand, rightHandOperand, options.memoize, false);\n    return false;\n  }\n\n  // Temporarily set the operands in the memoize object to prevent blowing the stack\n  memoizeSet(leftHandOperand, rightHandOperand, options.memoize, true);\n\n  var result = extensiveDeepEqualByType(leftHandOperand, rightHandOperand, leftHandType, options);\n  memoizeSet(leftHandOperand, rightHandOperand, options.memoize, result);\n  return result;\n}\n\nfunction extensiveDeepEqualByType(leftHandOperand, rightHandOperand, leftHandType, options) {\n  switch (leftHandType) {\n    case 'String':\n    case 'Number':\n    case 'Boolean':\n    case 'Date':\n      // If these types are their instance types (e.g. `new Number`) then re-deepEqual against their values\n      return deepEqual(leftHandOperand.valueOf(), rightHandOperand.valueOf());\n    case 'Promise':\n    case 'Symbol':\n    case 'function':\n    case 'WeakMap':\n    case 'WeakSet':\n    case 'Error':\n      return leftHandOperand === rightHandOperand;\n    case 'Arguments':\n    case 'Int8Array':\n    case 'Uint8Array':\n    case 'Uint8ClampedArray':\n    case 'Int16Array':\n    case 'Uint16Array':\n    case 'Int32Array':\n    case 'Uint32Array':\n    case 'Float32Array':\n    case 'Float64Array':\n    case 'Array':\n      return iterableEqual(leftHandOperand, rightHandOperand, options);\n    case 'RegExp':\n      return regexpEqual(leftHandOperand, rightHandOperand);\n    case 'Generator':\n      return generatorEqual(leftHandOperand, rightHandOperand, options);\n    case 'DataView':\n      return iterableEqual(new Uint8Array(leftHandOperand.buffer), new Uint8Array(rightHandOperand.buffer), options);\n    case 'ArrayBuffer':\n      return iterableEqual(new Uint8Array(leftHandOperand), new Uint8Array(rightHandOperand), options);\n    case 'Set':\n      return entriesEqual(leftHandOperand, rightHandOperand, options);\n    case 'Map':\n      return entriesEqual(leftHandOperand, rightHandOperand, options);\n    default:\n      return objectEqual(leftHandOperand, rightHandOperand, options);\n  }\n}\n\n/*!\n * Compare two Regular Expressions for equality.\n *\n * @param {RegExp} leftHandOperand\n * @param {RegExp} rightHandOperand\n * @return {Boolean} result\n */\n\nfunction regexpEqual(leftHandOperand, rightHandOperand) {\n  return leftHandOperand.toString() === rightHandOperand.toString();\n}\n\n/*!\n * Compare two Sets/Maps for equality. Faster than other equality functions.\n *\n * @param {Set} leftHandOperand\n * @param {Set} rightHandOperand\n * @param {Object} [options] (Optional)\n * @return {Boolean} result\n */\n\nfunction entriesEqual(leftHandOperand, rightHandOperand, options) {\n  // IE11 doesn't support Set#entries or Set#@@iterator, so we need manually populate using Set#forEach\n  if (leftHandOperand.size !== rightHandOperand.size) {\n    return false;\n  }\n  if (leftHandOperand.size === 0) {\n    return true;\n  }\n  var leftHandItems = [];\n  var rightHandItems = [];\n  leftHandOperand.forEach(function gatherEntries(key, value) {\n    leftHandItems.push([ key, value ]);\n  });\n  rightHandOperand.forEach(function gatherEntries(key, value) {\n    rightHandItems.push([ key, value ]);\n  });\n  return iterableEqual(leftHandItems.sort(), rightHandItems.sort(), options);\n}\n\n/*!\n * Simple equality for flat iterable objects such as Arrays, TypedArrays or Node.js buffers.\n *\n * @param {Iterable} leftHandOperand\n * @param {Iterable} rightHandOperand\n * @param {Object} [options] (Optional)\n * @return {Boolean} result\n */\n\nfunction iterableEqual(leftHandOperand, rightHandOperand, options) {\n  var length = leftHandOperand.length;\n  if (length !== rightHandOperand.length) {\n    return false;\n  }\n  if (length === 0) {\n    return true;\n  }\n  var index = -1;\n  while (++index < length) {\n    if (deepEqual(leftHandOperand[index], rightHandOperand[index], options) === false) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/*!\n * Simple equality for generator objects such as those returned by generator functions.\n *\n * @param {Iterable} leftHandOperand\n * @param {Iterable} rightHandOperand\n * @param {Object} [options] (Optional)\n * @return {Boolean} result\n */\n\nfunction generatorEqual(leftHandOperand, rightHandOperand, options) {\n  return iterableEqual(getGeneratorEntries(leftHandOperand), getGeneratorEntries(rightHandOperand), options);\n}\n\n/*!\n * Determine if the given object has an @@iterator function.\n *\n * @param {Object} target\n * @return {Boolean} `true` if the object has an @@iterator function.\n */\nfunction hasIteratorFunction(target) {\n  return typeof Symbol !== 'undefined' &&\n    typeof target === 'object' &&\n    typeof Symbol.iterator !== 'undefined' &&\n    typeof target[Symbol.iterator] === 'function';\n}\n\n/*!\n * Gets all iterator entries from the given Object. If the Object has no @@iterator function, returns an empty array.\n * This will consume the iterator - which could have side effects depending on the @@iterator implementation.\n *\n * @param {Object} target\n * @returns {Array} an array of entries from the @@iterator function\n */\nfunction getIteratorEntries(target) {\n  if (hasIteratorFunction(target)) {\n    try {\n      return getGeneratorEntries(target[Symbol.iterator]());\n    } catch (iteratorError) {\n      return [];\n    }\n  }\n  return [];\n}\n\n/*!\n * Gets all entries from a Generator. This will consume the generator - which could have side effects.\n *\n * @param {Generator} target\n * @returns {Array} an array of entries from the Generator.\n */\nfunction getGeneratorEntries(generator) {\n  var generatorResult = generator.next();\n  var accumulator = [ generatorResult.value ];\n  while (generatorResult.done === false) {\n    generatorResult = generator.next();\n    accumulator.push(generatorResult.value);\n  }\n  return accumulator;\n}\n\n/*!\n * Gets all own and inherited enumerable keys from a target.\n *\n * @param {Object} target\n * @returns {Array} an array of own and inherited enumerable keys from the target.\n */\nfunction getEnumerableKeys(target) {\n  var keys = [];\n  for (var key in target) {\n    keys.push(key);\n  }\n  return keys;\n}\n\n/*!\n * Determines if two objects have matching values, given a set of keys. Defers to deepEqual for the equality check of\n * each key. If any value of the given key is not equal, the function will return false (early).\n *\n * @param {Mixed} leftHandOperand\n * @param {Mixed} rightHandOperand\n * @param {Array} keys An array of keys to compare the values of leftHandOperand and rightHandOperand against\n * @param {Object} [options] (Optional)\n * @return {Boolean} result\n */\nfunction keysEqual(leftHandOperand, rightHandOperand, keys, options) {\n  var length = keys.length;\n  if (length === 0) {\n    return true;\n  }\n  for (var i = 0; i < length; i += 1) {\n    if (deepEqual(leftHandOperand[keys[i]], rightHandOperand[keys[i]], options) === false) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/*!\n * Recursively check the equality of two Objects. Once basic sameness has been established it will defer to `deepEqual`\n * for each enumerable key in the object.\n *\n * @param {Mixed} leftHandOperand\n * @param {Mixed} rightHandOperand\n * @param {Object} [options] (Optional)\n * @return {Boolean} result\n */\n\nfunction objectEqual(leftHandOperand, rightHandOperand, options) {\n  var leftHandKeys = getEnumerableKeys(leftHandOperand);\n  var rightHandKeys = getEnumerableKeys(rightHandOperand);\n  if (leftHandKeys.length && leftHandKeys.length === rightHandKeys.length) {\n    leftHandKeys.sort();\n    rightHandKeys.sort();\n    if (iterableEqual(leftHandKeys, rightHandKeys) === false) {\n      return false;\n    }\n    return keysEqual(leftHandOperand, rightHandOperand, leftHandKeys, options);\n  }\n\n  var leftHandEntries = getIteratorEntries(leftHandOperand);\n  var rightHandEntries = getIteratorEntries(rightHandOperand);\n  if (leftHandEntries.length && leftHandEntries.length === rightHandEntries.length) {\n    leftHandEntries.sort();\n    rightHandEntries.sort();\n    return iterableEqual(leftHandEntries, rightHandEntries, options);\n  }\n\n  if (leftHandKeys.length === 0 &&\n      leftHandEntries.length === 0 &&\n      rightHandKeys.length === 0 &&\n      rightHandEntries.length === 0) {\n    return true;\n  }\n\n  return false;\n}\n\n/*!\n * Returns true if the argument is a primitive.\n *\n * This intentionally returns true for all objects that can be compared by reference,\n * including functions and symbols.\n *\n * @param {Mixed} value\n * @return {Boolean} result\n */\nfunction isPrimitive(value) {\n  return value === null || typeof value !== 'object';\n}\n","var config = require('../config');\n\n/*!\n * Chai - isProxyEnabled helper\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .isProxyEnabled()\n *\n * Helper function to check if Chai's proxy protection feature is enabled. If\n * proxies are unsupported or disabled via the user's Chai config, then return\n * false. Otherwise, return true.\n *\n * @namespace Utils\n * @name isProxyEnabled\n */\n\nmodule.exports = function isProxyEnabled() {\n  return config.useProxy &&\n    typeof Proxy !== 'undefined' &&\n    typeof Reflect !== 'undefined';\n};\n","/*!\n * Chai - addProperty utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar chai = require('../../chai');\nvar flag = require('./flag');\nvar isProxyEnabled = require('./isProxyEnabled');\nvar transferFlags = require('./transferFlags');\n\n/**\n * ### .addProperty(ctx, name, getter)\n *\n * Adds a property to the prototype of an object.\n *\n *     utils.addProperty(chai.Assertion.prototype, 'foo', function () {\n *       var obj = utils.flag(this, 'object');\n *       new chai.Assertion(obj).to.be.instanceof(Foo);\n *     });\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.addProperty('foo', fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(myFoo).to.be.foo;\n *\n * @param {Object} ctx object to which the property is added\n * @param {String} name of property to add\n * @param {Function} getter function to be used for name\n * @namespace Utils\n * @name addProperty\n * @api public\n */\n\nmodule.exports = function addProperty(ctx, name, getter) {\n  getter = getter === undefined ? function () {} : getter;\n\n  Object.defineProperty(ctx, name,\n    { get: function propertyGetter() {\n        // Setting the `ssfi` flag to `propertyGetter` causes this function to\n        // be the starting point for removing implementation frames from the\n        // stack trace of a failed assertion.\n        //\n        // However, we only want to use this function as the starting point if\n        // the `lockSsfi` flag isn't set and proxy protection is disabled.\n        //\n        // If the `lockSsfi` flag is set, then either this assertion has been\n        // overwritten by another assertion, or this assertion is being invoked\n        // from inside of another assertion. In the first case, the `ssfi` flag\n        // has already been set by the overwriting assertion. In the second\n        // case, the `ssfi` flag has already been set by the outer assertion.\n        //\n        // If proxy protection is enabled, then the `ssfi` flag has already been\n        // set by the proxy getter.\n        if (!isProxyEnabled() && !flag(this, 'lockSsfi')) {\n          flag(this, 'ssfi', propertyGetter);\n        }\n\n        var result = getter.call(this);\n        if (result !== undefined)\n          return result;\n\n        var newAssertion = new chai.Assertion();\n        transferFlags(this, newAssertion);\n        return newAssertion;\n      }\n    , configurable: true\n  });\n};\n","var fnLengthDesc = Object.getOwnPropertyDescriptor(function () {}, 'length');\n\n/*!\n * Chai - addLengthGuard utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .addLengthGuard(fn, assertionName, isChainable)\n *\n * Define `length` as a getter on the given uninvoked method assertion. The\n * getter acts as a guard against chaining `length` directly off of an uninvoked\n * method assertion, which is a problem because it references `function`'s\n * built-in `length` property instead of Chai's `length` assertion. When the\n * getter catches the user making this mistake, it throws an error with a\n * helpful message.\n *\n * There are two ways in which this mistake can be made. The first way is by\n * chaining the `length` assertion directly off of an uninvoked chainable\n * method. In this case, Chai suggests that the user use `lengthOf` instead. The\n * second way is by chaining the `length` assertion directly off of an uninvoked\n * non-chainable method. Non-chainable methods must be invoked prior to\n * chaining. In this case, Chai suggests that the user consult the docs for the\n * given assertion.\n *\n * If the `length` property of functions is unconfigurable, then return `fn`\n * without modification.\n *\n * Note that in ES6, the function's `length` property is configurable, so once\n * support for legacy environments is dropped, Chai's `length` property can\n * replace the built-in function's `length` property, and this length guard will\n * no longer be necessary. In the mean time, maintaining consistency across all\n * environments is the priority.\n *\n * @param {Function} fn\n * @param {String} assertionName\n * @param {Boolean} isChainable\n * @namespace Utils\n * @name addLengthGuard\n */\n\nmodule.exports = function addLengthGuard (fn, assertionName, isChainable) {\n  if (!fnLengthDesc.configurable) return fn;\n\n  Object.defineProperty(fn, 'length', {\n    get: function () {\n      if (isChainable) {\n        throw Error('Invalid Chai property: ' + assertionName + '.length. Due' +\n          ' to a compatibility issue, \"length\" cannot directly follow \"' +\n          assertionName + '\". Use \"' + assertionName + '.lengthOf\" instead.');\n      }\n\n      throw Error('Invalid Chai property: ' + assertionName + '.length. See' +\n        ' docs for proper usage of \"' + assertionName + '\".');\n    }\n  });\n\n  return fn;\n};\n","var config = require('../config');\nvar flag = require('./flag');\nvar getProperties = require('./getProperties');\nvar isProxyEnabled = require('./isProxyEnabled');\n\n/*!\n * Chai - proxify utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .proxify(object)\n *\n * Return a proxy of given object that throws an error when a non-existent\n * property is read. By default, the root cause is assumed to be a misspelled\n * property, and thus an attempt is made to offer a reasonable suggestion from\n * the list of existing properties. However, if a nonChainableMethodName is\n * provided, then the root cause is instead a failure to invoke a non-chainable\n * method prior to reading the non-existent property.\n *\n * If proxies are unsupported or disabled via the user's Chai config, then\n * return object without modification.\n *\n * @param {Object} obj\n * @param {String} nonChainableMethodName\n * @namespace Utils\n * @name proxify\n */\n\nvar builtins = ['__flags', '__methods', '_obj', 'assert'];\n\nmodule.exports = function proxify(obj, nonChainableMethodName) {\n  if (!isProxyEnabled()) return obj;\n\n  return new Proxy(obj, {\n    get: function proxyGetter(target, property) {\n      // This check is here because we should not throw errors on Symbol properties\n      // such as `Symbol.toStringTag`.\n      // The values for which an error should be thrown can be configured using\n      // the `config.proxyExcludedKeys` setting.\n      if (typeof property === 'string' &&\n          config.proxyExcludedKeys.indexOf(property) === -1 &&\n          !Reflect.has(target, property)) {\n        // Special message for invalid property access of non-chainable methods.\n        if (nonChainableMethodName) {\n          throw Error('Invalid Chai property: ' + nonChainableMethodName + '.' +\n            property + '. See docs for proper usage of \"' +\n            nonChainableMethodName + '\".');\n        }\n\n        // If the property is reasonably close to an existing Chai property,\n        // suggest that property to the user. Only suggest properties with a\n        // distance less than 4.\n        var suggestion = null;\n        var suggestionDistance = 4;\n        getProperties(target).forEach(function(prop) {\n          if (\n            !Object.prototype.hasOwnProperty(prop) &&\n            builtins.indexOf(prop) === -1\n          ) {\n            var dist = stringDistanceCapped(\n              property,\n              prop,\n              suggestionDistance\n            );\n            if (dist < suggestionDistance) {\n              suggestion = prop;\n              suggestionDistance = dist;\n            }\n          }\n        });\n\n        if (suggestion !== null) {\n          throw Error('Invalid Chai property: ' + property +\n            '. Did you mean \"' + suggestion + '\"?');\n        } else {\n          throw Error('Invalid Chai property: ' + property);\n        }\n      }\n\n      // Use this proxy getter as the starting point for removing implementation\n      // frames from the stack trace of a failed assertion. For property\n      // assertions, this prevents the proxy getter from showing up in the stack\n      // trace since it's invoked before the property getter. For method and\n      // chainable method assertions, this flag will end up getting changed to\n      // the method wrapper, which is good since this frame will no longer be in\n      // the stack once the method is invoked. Note that Chai builtin assertion\n      // properties such as `__flags` are skipped since this is only meant to\n      // capture the starting point of an assertion. This step is also skipped\n      // if the `lockSsfi` flag is set, thus indicating that this assertion is\n      // being called from within another assertion. In that case, the `ssfi`\n      // flag is already set to the outer assertion's starting point.\n      if (builtins.indexOf(property) === -1 && !flag(target, 'lockSsfi')) {\n        flag(target, 'ssfi', proxyGetter);\n      }\n\n      return Reflect.get(target, property);\n    }\n  });\n};\n\n/**\n * # stringDistanceCapped(strA, strB, cap)\n * Return the Levenshtein distance between two strings, but no more than cap.\n * @param {string} strA\n * @param {string} strB\n * @param {number} number\n * @return {number} min(string distance between strA and strB, cap)\n * @api private\n */\n\nfunction stringDistanceCapped(strA, strB, cap) {\n  if (Math.abs(strA.length - strB.length) >= cap) {\n    return cap;\n  }\n\n  var memo = [];\n  // `memo` is a two-dimensional array containing distances.\n  // memo[i][j] is the distance between strA.slice(0, i) and\n  // strB.slice(0, j).\n  for (var i = 0; i <= strA.length; i++) {\n    memo[i] = Array(strB.length + 1).fill(0);\n    memo[i][0] = i;\n  }\n  for (var j = 0; j < strB.length; j++) {\n    memo[0][j] = j;\n  }\n\n  for (var i = 1; i <= strA.length; i++) {\n    var ch = strA.charCodeAt(i - 1);\n    for (var j = 1; j <= strB.length; j++) {\n      if (Math.abs(i - j) >= cap) {\n        memo[i][j] = cap;\n        continue;\n      }\n      memo[i][j] = Math.min(\n        memo[i - 1][j] + 1,\n        memo[i][j - 1] + 1,\n        memo[i - 1][j - 1] +\n          (ch === strB.charCodeAt(j - 1) ? 0 : 1)\n      );\n    }\n  }\n\n  return memo[strA.length][strB.length];\n}\n","/*!\n * Chai - addMethod utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar addLengthGuard = require('./addLengthGuard');\nvar chai = require('../../chai');\nvar flag = require('./flag');\nvar proxify = require('./proxify');\nvar transferFlags = require('./transferFlags');\n\n/**\n * ### .addMethod(ctx, name, method)\n *\n * Adds a method to the prototype of an object.\n *\n *     utils.addMethod(chai.Assertion.prototype, 'foo', function (str) {\n *       var obj = utils.flag(this, 'object');\n *       new chai.Assertion(obj).to.be.equal(str);\n *     });\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.addMethod('foo', fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(fooStr).to.be.foo('bar');\n *\n * @param {Object} ctx object to which the method is added\n * @param {String} name of method to add\n * @param {Function} method function to be used for name\n * @namespace Utils\n * @name addMethod\n * @api public\n */\n\nmodule.exports = function addMethod(ctx, name, method) {\n  var methodWrapper = function () {\n    // Setting the `ssfi` flag to `methodWrapper` causes this function to be the\n    // starting point for removing implementation frames from the stack trace of\n    // a failed assertion.\n    //\n    // However, we only want to use this function as the starting point if the\n    // `lockSsfi` flag isn't set.\n    //\n    // If the `lockSsfi` flag is set, then either this assertion has been\n    // overwritten by another assertion, or this assertion is being invoked from\n    // inside of another assertion. In the first case, the `ssfi` flag has\n    // already been set by the overwriting assertion. In the second case, the\n    // `ssfi` flag has already been set by the outer assertion.\n    if (!flag(this, 'lockSsfi')) {\n      flag(this, 'ssfi', methodWrapper);\n    }\n\n    var result = method.apply(this, arguments);\n    if (result !== undefined)\n      return result;\n\n    var newAssertion = new chai.Assertion();\n    transferFlags(this, newAssertion);\n    return newAssertion;\n  };\n\n  addLengthGuard(methodWrapper, name, false);\n  ctx[name] = proxify(methodWrapper, name);\n};\n","/*!\n * Chai - overwriteProperty utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar chai = require('../../chai');\nvar flag = require('./flag');\nvar isProxyEnabled = require('./isProxyEnabled');\nvar transferFlags = require('./transferFlags');\n\n/**\n * ### .overwriteProperty(ctx, name, fn)\n *\n * Overwrites an already existing property getter and provides\n * access to previous value. Must return function to use as getter.\n *\n *     utils.overwriteProperty(chai.Assertion.prototype, 'ok', function (_super) {\n *       return function () {\n *         var obj = utils.flag(this, 'object');\n *         if (obj instanceof Foo) {\n *           new chai.Assertion(obj.name).to.equal('bar');\n *         } else {\n *           _super.call(this);\n *         }\n *       }\n *     });\n *\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.overwriteProperty('foo', fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(myFoo).to.be.ok;\n *\n * @param {Object} ctx object whose property is to be overwritten\n * @param {String} name of property to overwrite\n * @param {Function} getter function that returns a getter function to be used for name\n * @namespace Utils\n * @name overwriteProperty\n * @api public\n */\n\nmodule.exports = function overwriteProperty(ctx, name, getter) {\n  var _get = Object.getOwnPropertyDescriptor(ctx, name)\n    , _super = function () {};\n\n  if (_get && 'function' === typeof _get.get)\n    _super = _get.get\n\n  Object.defineProperty(ctx, name,\n    { get: function overwritingPropertyGetter() {\n        // Setting the `ssfi` flag to `overwritingPropertyGetter` causes this\n        // function to be the starting point for removing implementation frames\n        // from the stack trace of a failed assertion.\n        //\n        // However, we only want to use this function as the starting point if\n        // the `lockSsfi` flag isn't set and proxy protection is disabled.\n        //\n        // If the `lockSsfi` flag is set, then either this assertion has been\n        // overwritten by another assertion, or this assertion is being invoked\n        // from inside of another assertion. In the first case, the `ssfi` flag\n        // has already been set by the overwriting assertion. In the second\n        // case, the `ssfi` flag has already been set by the outer assertion.\n        //\n        // If proxy protection is enabled, then the `ssfi` flag has already been\n        // set by the proxy getter.\n        if (!isProxyEnabled() && !flag(this, 'lockSsfi')) {\n          flag(this, 'ssfi', overwritingPropertyGetter);\n        }\n\n        // Setting the `lockSsfi` flag to `true` prevents the overwritten\n        // assertion from changing the `ssfi` flag. By this point, the `ssfi`\n        // flag is already set to the correct starting point for this assertion.\n        var origLockSsfi = flag(this, 'lockSsfi');\n        flag(this, 'lockSsfi', true);\n        var result = getter(_super).call(this);\n        flag(this, 'lockSsfi', origLockSsfi);\n\n        if (result !== undefined) {\n          return result;\n        }\n\n        var newAssertion = new chai.Assertion();\n        transferFlags(this, newAssertion);\n        return newAssertion;\n      }\n    , configurable: true\n  });\n};\n","/*!\n * Chai - overwriteMethod utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar addLengthGuard = require('./addLengthGuard');\nvar chai = require('../../chai');\nvar flag = require('./flag');\nvar proxify = require('./proxify');\nvar transferFlags = require('./transferFlags');\n\n/**\n * ### .overwriteMethod(ctx, name, fn)\n *\n * Overwrites an already existing method and provides\n * access to previous function. Must return function\n * to be used for name.\n *\n *     utils.overwriteMethod(chai.Assertion.prototype, 'equal', function (_super) {\n *       return function (str) {\n *         var obj = utils.flag(this, 'object');\n *         if (obj instanceof Foo) {\n *           new chai.Assertion(obj.value).to.equal(str);\n *         } else {\n *           _super.apply(this, arguments);\n *         }\n *       }\n *     });\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.overwriteMethod('foo', fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(myFoo).to.equal('bar');\n *\n * @param {Object} ctx object whose method is to be overwritten\n * @param {String} name of method to overwrite\n * @param {Function} method function that returns a function to be used for name\n * @namespace Utils\n * @name overwriteMethod\n * @api public\n */\n\nmodule.exports = function overwriteMethod(ctx, name, method) {\n  var _method = ctx[name]\n    , _super = function () {\n      throw new Error(name + ' is not a function');\n    };\n\n  if (_method && 'function' === typeof _method)\n    _super = _method;\n\n  var overwritingMethodWrapper = function () {\n    // Setting the `ssfi` flag to `overwritingMethodWrapper` causes this\n    // function to be the starting point for removing implementation frames from\n    // the stack trace of a failed assertion.\n    //\n    // However, we only want to use this function as the starting point if the\n    // `lockSsfi` flag isn't set.\n    //\n    // If the `lockSsfi` flag is set, then either this assertion has been\n    // overwritten by another assertion, or this assertion is being invoked from\n    // inside of another assertion. In the first case, the `ssfi` flag has\n    // already been set by the overwriting assertion. In the second case, the\n    // `ssfi` flag has already been set by the outer assertion.\n    if (!flag(this, 'lockSsfi')) {\n      flag(this, 'ssfi', overwritingMethodWrapper);\n    }\n\n    // Setting the `lockSsfi` flag to `true` prevents the overwritten assertion\n    // from changing the `ssfi` flag. By this point, the `ssfi` flag is already\n    // set to the correct starting point for this assertion.\n    var origLockSsfi = flag(this, 'lockSsfi');\n    flag(this, 'lockSsfi', true);\n    var result = method(_super).apply(this, arguments);\n    flag(this, 'lockSsfi', origLockSsfi);\n\n    if (result !== undefined) {\n      return result;\n    }\n\n    var newAssertion = new chai.Assertion();\n    transferFlags(this, newAssertion);\n    return newAssertion;\n  }\n\n  addLengthGuard(overwritingMethodWrapper, name, false);\n  ctx[name] = proxify(overwritingMethodWrapper, name);\n};\n","/*!\n * Chai - addChainingMethod utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependencies\n */\n\nvar addLengthGuard = require('./addLengthGuard');\nvar chai = require('../../chai');\nvar flag = require('./flag');\nvar proxify = require('./proxify');\nvar transferFlags = require('./transferFlags');\n\n/*!\n * Module variables\n */\n\n// Check whether `Object.setPrototypeOf` is supported\nvar canSetPrototype = typeof Object.setPrototypeOf === 'function';\n\n// Without `Object.setPrototypeOf` support, this module will need to add properties to a function.\n// However, some of functions' own props are not configurable and should be skipped.\nvar testFn = function() {};\nvar excludeNames = Object.getOwnPropertyNames(testFn).filter(function(name) {\n  var propDesc = Object.getOwnPropertyDescriptor(testFn, name);\n\n  // Note: PhantomJS 1.x includes `callee` as one of `testFn`'s own properties,\n  // but then returns `undefined` as the property descriptor for `callee`. As a\n  // workaround, we perform an otherwise unnecessary type-check for `propDesc`,\n  // and then filter it out if it's not an object as it should be.\n  if (typeof propDesc !== 'object')\n    return true;\n\n  return !propDesc.configurable;\n});\n\n// Cache `Function` properties\nvar call  = Function.prototype.call,\n    apply = Function.prototype.apply;\n\n/**\n * ### .addChainableMethod(ctx, name, method, chainingBehavior)\n *\n * Adds a method to an object, such that the method can also be chained.\n *\n *     utils.addChainableMethod(chai.Assertion.prototype, 'foo', function (str) {\n *       var obj = utils.flag(this, 'object');\n *       new chai.Assertion(obj).to.be.equal(str);\n *     });\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.addChainableMethod('foo', fn, chainingBehavior);\n *\n * The result can then be used as both a method assertion, executing both `method` and\n * `chainingBehavior`, or as a language chain, which only executes `chainingBehavior`.\n *\n *     expect(fooStr).to.be.foo('bar');\n *     expect(fooStr).to.be.foo.equal('foo');\n *\n * @param {Object} ctx object to which the method is added\n * @param {String} name of method to add\n * @param {Function} method function to be used for `name`, when called\n * @param {Function} chainingBehavior function to be called every time the property is accessed\n * @namespace Utils\n * @name addChainableMethod\n * @api public\n */\n\nmodule.exports = function addChainableMethod(ctx, name, method, chainingBehavior) {\n  if (typeof chainingBehavior !== 'function') {\n    chainingBehavior = function () { };\n  }\n\n  var chainableBehavior = {\n      method: method\n    , chainingBehavior: chainingBehavior\n  };\n\n  // save the methods so we can overwrite them later, if we need to.\n  if (!ctx.__methods) {\n    ctx.__methods = {};\n  }\n  ctx.__methods[name] = chainableBehavior;\n\n  Object.defineProperty(ctx, name,\n    { get: function chainableMethodGetter() {\n        chainableBehavior.chainingBehavior.call(this);\n\n        var chainableMethodWrapper = function () {\n          // Setting the `ssfi` flag to `chainableMethodWrapper` causes this\n          // function to be the starting point for removing implementation\n          // frames from the stack trace of a failed assertion.\n          //\n          // However, we only want to use this function as the starting point if\n          // the `lockSsfi` flag isn't set.\n          //\n          // If the `lockSsfi` flag is set, then this assertion is being\n          // invoked from inside of another assertion. In this case, the `ssfi`\n          // flag has already been set by the outer assertion.\n          //\n          // Note that overwriting a chainable method merely replaces the saved\n          // methods in `ctx.__methods` instead of completely replacing the\n          // overwritten assertion. Therefore, an overwriting assertion won't\n          // set the `ssfi` or `lockSsfi` flags.\n          if (!flag(this, 'lockSsfi')) {\n            flag(this, 'ssfi', chainableMethodWrapper);\n          }\n\n          var result = chainableBehavior.method.apply(this, arguments);\n          if (result !== undefined) {\n            return result;\n          }\n\n          var newAssertion = new chai.Assertion();\n          transferFlags(this, newAssertion);\n          return newAssertion;\n        };\n\n        addLengthGuard(chainableMethodWrapper, name, true);\n\n        // Use `Object.setPrototypeOf` if available\n        if (canSetPrototype) {\n          // Inherit all properties from the object by replacing the `Function` prototype\n          var prototype = Object.create(this);\n          // Restore the `call` and `apply` methods from `Function`\n          prototype.call = call;\n          prototype.apply = apply;\n          Object.setPrototypeOf(chainableMethodWrapper, prototype);\n        }\n        // Otherwise, redefine all properties (slow!)\n        else {\n          var asserterNames = Object.getOwnPropertyNames(ctx);\n          asserterNames.forEach(function (asserterName) {\n            if (excludeNames.indexOf(asserterName) !== -1) {\n              return;\n            }\n\n            var pd = Object.getOwnPropertyDescriptor(ctx, asserterName);\n            Object.defineProperty(chainableMethodWrapper, asserterName, pd);\n          });\n        }\n\n        transferFlags(this, chainableMethodWrapper);\n        return proxify(chainableMethodWrapper);\n      }\n    , configurable: true\n  });\n};\n","/*!\n * Chai - overwriteChainableMethod utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar chai = require('../../chai');\nvar transferFlags = require('./transferFlags');\n\n/**\n * ### .overwriteChainableMethod(ctx, name, method, chainingBehavior)\n *\n * Overwrites an already existing chainable method\n * and provides access to the previous function or\n * property.  Must return functions to be used for\n * name.\n *\n *     utils.overwriteChainableMethod(chai.Assertion.prototype, 'lengthOf',\n *       function (_super) {\n *       }\n *     , function (_super) {\n *       }\n *     );\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.overwriteChainableMethod('foo', fn, fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(myFoo).to.have.lengthOf(3);\n *     expect(myFoo).to.have.lengthOf.above(3);\n *\n * @param {Object} ctx object whose method / property is to be overwritten\n * @param {String} name of method / property to overwrite\n * @param {Function} method function that returns a function to be used for name\n * @param {Function} chainingBehavior function that returns a function to be used for property\n * @namespace Utils\n * @name overwriteChainableMethod\n * @api public\n */\n\nmodule.exports = function overwriteChainableMethod(ctx, name, method, chainingBehavior) {\n  var chainableBehavior = ctx.__methods[name];\n\n  var _chainingBehavior = chainableBehavior.chainingBehavior;\n  chainableBehavior.chainingBehavior = function overwritingChainableMethodGetter() {\n    var result = chainingBehavior(_chainingBehavior).call(this);\n    if (result !== undefined) {\n      return result;\n    }\n\n    var newAssertion = new chai.Assertion();\n    transferFlags(this, newAssertion);\n    return newAssertion;\n  };\n\n  var _method = chainableBehavior.method;\n  chainableBehavior.method = function overwritingChainableMethodWrapper() {\n    var result = method(_method).apply(this, arguments);\n    if (result !== undefined) {\n      return result;\n    }\n\n    var newAssertion = new chai.Assertion();\n    transferFlags(this, newAssertion);\n    return newAssertion;\n  };\n};\n","/*!\n * Chai - compareByInspect utility\n * Copyright(c) 2011-2016 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependencies\n */\n\nvar inspect = require('./inspect');\n\n/**\n * ### .compareByInspect(mixed, mixed)\n *\n * To be used as a compareFunction with Array.prototype.sort. Compares elements\n * using inspect instead of default behavior of using toString so that Symbols\n * and objects with irregular/missing toString can still be sorted without a\n * TypeError.\n *\n * @param {Mixed} first element to compare\n * @param {Mixed} second element to compare\n * @returns {Number} -1 if 'a' should come before 'b'; otherwise 1\n * @name compareByInspect\n * @namespace Utils\n * @api public\n */\n\nmodule.exports = function compareByInspect(a, b) {\n  return inspect(a) < inspect(b) ? -1 : 1;\n};\n","/*!\n * Chai - getOwnEnumerablePropertySymbols utility\n * Copyright(c) 2011-2016 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .getOwnEnumerablePropertySymbols(object)\n *\n * This allows the retrieval of directly-owned enumerable property symbols of an\n * object. This function is necessary because Object.getOwnPropertySymbols\n * returns both enumerable and non-enumerable property symbols.\n *\n * @param {Object} object\n * @returns {Array}\n * @namespace Utils\n * @name getOwnEnumerablePropertySymbols\n * @api public\n */\n\nmodule.exports = function getOwnEnumerablePropertySymbols(obj) {\n  if (typeof Object.getOwnPropertySymbols !== 'function') return [];\n\n  return Object.getOwnPropertySymbols(obj).filter(function (sym) {\n    return Object.getOwnPropertyDescriptor(obj, sym).enumerable;\n  });\n};\n","/*!\n * Chai - getOwnEnumerableProperties utility\n * Copyright(c) 2011-2016 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependencies\n */\n\nvar getOwnEnumerablePropertySymbols = require('./getOwnEnumerablePropertySymbols');\n\n/**\n * ### .getOwnEnumerableProperties(object)\n *\n * This allows the retrieval of directly-owned enumerable property names and\n * symbols of an object. This function is necessary because Object.keys only\n * returns enumerable property names, not enumerable property symbols.\n *\n * @param {Object} object\n * @returns {Array}\n * @namespace Utils\n * @name getOwnEnumerableProperties\n * @api public\n */\n\nmodule.exports = function getOwnEnumerableProperties(obj) {\n  return Object.keys(obj).concat(getOwnEnumerablePropertySymbols(obj));\n};\n","'use strict';\n\n/* !\n * Chai - checkError utility\n * Copyright(c) 2012-2016 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .checkError\n *\n * Checks that an error conforms to a given set of criteria and/or retrieves information about it.\n *\n * @api public\n */\n\n/**\n * ### .compatibleInstance(thrown, errorLike)\n *\n * Checks if two instances are compatible (strict equal).\n * Returns false if errorLike is not an instance of Error, because instances\n * can only be compatible if they're both error instances.\n *\n * @name compatibleInstance\n * @param {Error} thrown error\n * @param {Error|ErrorConstructor} errorLike object to compare against\n * @namespace Utils\n * @api public\n */\n\nfunction compatibleInstance(thrown, errorLike) {\n  return errorLike instanceof Error && thrown === errorLike;\n}\n\n/**\n * ### .compatibleConstructor(thrown, errorLike)\n *\n * Checks if two constructors are compatible.\n * This function can receive either an error constructor or\n * an error instance as the `errorLike` argument.\n * Constructors are compatible if they're the same or if one is\n * an instance of another.\n *\n * @name compatibleConstructor\n * @param {Error} thrown error\n * @param {Error|ErrorConstructor} errorLike object to compare against\n * @namespace Utils\n * @api public\n */\n\nfunction compatibleConstructor(thrown, errorLike) {\n  if (errorLike instanceof Error) {\n    // If `errorLike` is an instance of any error we compare their constructors\n    return thrown.constructor === errorLike.constructor || thrown instanceof errorLike.constructor;\n  } else if (errorLike.prototype instanceof Error || errorLike === Error) {\n    // If `errorLike` is a constructor that inherits from Error, we compare `thrown` to `errorLike` directly\n    return thrown.constructor === errorLike || thrown instanceof errorLike;\n  }\n\n  return false;\n}\n\n/**\n * ### .compatibleMessage(thrown, errMatcher)\n *\n * Checks if an error's message is compatible with a matcher (String or RegExp).\n * If the message contains the String or passes the RegExp test,\n * it is considered compatible.\n *\n * @name compatibleMessage\n * @param {Error} thrown error\n * @param {String|RegExp} errMatcher to look for into the message\n * @namespace Utils\n * @api public\n */\n\nfunction compatibleMessage(thrown, errMatcher) {\n  var comparisonString = typeof thrown === 'string' ? thrown : thrown.message;\n  if (errMatcher instanceof RegExp) {\n    return errMatcher.test(comparisonString);\n  } else if (typeof errMatcher === 'string') {\n    return comparisonString.indexOf(errMatcher) !== -1; // eslint-disable-line no-magic-numbers\n  }\n\n  return false;\n}\n\n/**\n * ### .getFunctionName(constructorFn)\n *\n * Returns the name of a function.\n * This also includes a polyfill function if `constructorFn.name` is not defined.\n *\n * @name getFunctionName\n * @param {Function} constructorFn\n * @namespace Utils\n * @api private\n */\n\nvar functionNameMatch = /\\s*function(?:\\s|\\s*\\/\\*[^(?:*\\/)]+\\*\\/\\s*)*([^\\(\\/]+)/;\nfunction getFunctionName(constructorFn) {\n  var name = '';\n  if (typeof constructorFn.name === 'undefined') {\n    // Here we run a polyfill if constructorFn.name is not defined\n    var match = String(constructorFn).match(functionNameMatch);\n    if (match) {\n      name = match[1];\n    }\n  } else {\n    name = constructorFn.name;\n  }\n\n  return name;\n}\n\n/**\n * ### .getConstructorName(errorLike)\n *\n * Gets the constructor name for an Error instance or constructor itself.\n *\n * @name getConstructorName\n * @param {Error|ErrorConstructor} errorLike\n * @namespace Utils\n * @api public\n */\n\nfunction getConstructorName(errorLike) {\n  var constructorName = errorLike;\n  if (errorLike instanceof Error) {\n    constructorName = getFunctionName(errorLike.constructor);\n  } else if (typeof errorLike === 'function') {\n    // If `err` is not an instance of Error it is an error constructor itself or another function.\n    // If we've got a common function we get its name, otherwise we may need to create a new instance\n    // of the error just in case it's a poorly-constructed error. Please see chaijs/chai/issues/45 to know more.\n    constructorName = getFunctionName(errorLike).trim() ||\n        getFunctionName(new errorLike()); // eslint-disable-line new-cap\n  }\n\n  return constructorName;\n}\n\n/**\n * ### .getMessage(errorLike)\n *\n * Gets the error message from an error.\n * If `err` is a String itself, we return it.\n * If the error has no message, we return an empty string.\n *\n * @name getMessage\n * @param {Error|String} errorLike\n * @namespace Utils\n * @api public\n */\n\nfunction getMessage(errorLike) {\n  var msg = '';\n  if (errorLike && errorLike.message) {\n    msg = errorLike.message;\n  } else if (typeof errorLike === 'string') {\n    msg = errorLike;\n  }\n\n  return msg;\n}\n\nmodule.exports = {\n  compatibleInstance: compatibleInstance,\n  compatibleConstructor: compatibleConstructor,\n  compatibleMessage: compatibleMessage,\n  getMessage: getMessage,\n  getConstructorName: getConstructorName,\n};\n","/*!\n * Chai - isNaN utility\n * Copyright(c) 2012-2015 Sakthipriyan Vairamani <thechargingvolcano@gmail.com>\n * MIT Licensed\n */\n\n/**\n * ### .isNaN(value)\n *\n * Checks if the given value is NaN or not.\n *\n *     utils.isNaN(NaN); // true\n *\n * @param {Value} The value which has to be checked if it is NaN\n * @name isNaN\n * @api private\n */\n\nfunction isNaN(value) {\n  // Refer http://www.ecma-international.org/ecma-262/6.0/#sec-isnan-number\n  // section's NOTE.\n  return value !== value;\n}\n\n// If ECMAScript 6's Number.isNaN is present, prefer that.\nmodule.exports = Number.isNaN || isNaN;\n","var type = require('type-detect');\n\nvar flag = require('./flag');\n\nfunction isObjectType(obj) {\n  var objectType = type(obj);\n  var objectTypes = ['Array', 'Object', 'function'];\n\n  return objectTypes.indexOf(objectType) !== -1;\n}\n\n/**\n * ### .getOperator(message)\n *\n * Extract the operator from error message.\n * Operator defined is based on below link\n * https://nodejs.org/api/assert.html#assert_assert.\n *\n * Returns the `operator` or `undefined` value for an Assertion.\n *\n * @param {Object} object (constructed Assertion)\n * @param {Arguments} chai.Assertion.prototype.assert arguments\n * @namespace Utils\n * @name getOperator\n * @api public\n */\n\nmodule.exports = function getOperator(obj, args) {\n  var operator = flag(obj, 'operator');\n  var negate = flag(obj, 'negate');\n  var expected = args[3];\n  var msg = negate ? args[2] : args[1];\n\n  if (operator) {\n    return operator;\n  }\n\n  if (typeof msg === 'function') msg = msg();\n\n  msg = msg || '';\n  if (!msg) {\n    return undefined;\n  }\n\n  if (/\\shave\\s/.test(msg)) {\n    return undefined;\n  }\n\n  var isObject = isObjectType(expected);\n  if (/\\snot\\s/.test(msg)) {\n    return isObject ? 'notDeepStrictEqual' : 'notStrictEqual';\n  }\n\n  return isObject ? 'deepStrictEqual' : 'strictEqual';\n};\n","/*!\n * chai\n * Copyright(c) 2011 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Dependencies that are used for multiple exports are required here only once\n */\n\nvar pathval = require('pathval');\n\n/*!\n * test utility\n */\n\nexports.test = require('./test');\n\n/*!\n * type utility\n */\n\nexports.type = require('type-detect');\n\n/*!\n * expectTypes utility\n */\nexports.expectTypes = require('./expectTypes');\n\n/*!\n * message utility\n */\n\nexports.getMessage = require('./getMessage');\n\n/*!\n * actual utility\n */\n\nexports.getActual = require('./getActual');\n\n/*!\n * Inspect util\n */\n\nexports.inspect = require('./inspect');\n\n/*!\n * Object Display util\n */\n\nexports.objDisplay = require('./objDisplay');\n\n/*!\n * Flag utility\n */\n\nexports.flag = require('./flag');\n\n/*!\n * Flag transferring utility\n */\n\nexports.transferFlags = require('./transferFlags');\n\n/*!\n * Deep equal utility\n */\n\nexports.eql = require('deep-eql');\n\n/*!\n * Deep path info\n */\n\nexports.getPathInfo = pathval.getPathInfo;\n\n/*!\n * Check if a property exists\n */\n\nexports.hasProperty = pathval.hasProperty;\n\n/*!\n * Function name\n */\n\nexports.getName = require('get-func-name');\n\n/*!\n * add Property\n */\n\nexports.addProperty = require('./addProperty');\n\n/*!\n * add Method\n */\n\nexports.addMethod = require('./addMethod');\n\n/*!\n * overwrite Property\n */\n\nexports.overwriteProperty = require('./overwriteProperty');\n\n/*!\n * overwrite Method\n */\n\nexports.overwriteMethod = require('./overwriteMethod');\n\n/*!\n * Add a chainable method\n */\n\nexports.addChainableMethod = require('./addChainableMethod');\n\n/*!\n * Overwrite chainable method\n */\n\nexports.overwriteChainableMethod = require('./overwriteChainableMethod');\n\n/*!\n * Compare by inspect method\n */\n\nexports.compareByInspect = require('./compareByInspect');\n\n/*!\n * Get own enumerable property symbols method\n */\n\nexports.getOwnEnumerablePropertySymbols = require('./getOwnEnumerablePropertySymbols');\n\n/*!\n * Get own enumerable properties method\n */\n\nexports.getOwnEnumerableProperties = require('./getOwnEnumerableProperties');\n\n/*!\n * Checks error against a given set of criteria\n */\n\nexports.checkError = require('check-error');\n\n/*!\n * Proxify util\n */\n\nexports.proxify = require('./proxify');\n\n/*!\n * addLengthGuard util\n */\n\nexports.addLengthGuard = require('./addLengthGuard');\n\n/*!\n * isProxyEnabled helper\n */\n\nexports.isProxyEnabled = require('./isProxyEnabled');\n\n/*!\n * isNaN method\n */\n\nexports.isNaN = require('./isNaN');\n\n/*!\n * getOperator method\n */\n\nexports.getOperator = require('./getOperator');","/*!\n * chai\n * http://chaijs.com\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar config = require('./config');\n\nmodule.exports = function (_chai, util) {\n  /*!\n   * Module dependencies.\n   */\n\n  var AssertionError = _chai.AssertionError\n    , flag = util.flag;\n\n  /*!\n   * Module export.\n   */\n\n  _chai.Assertion = Assertion;\n\n  /*!\n   * Assertion Constructor\n   *\n   * Creates object for chaining.\n   *\n   * `Assertion` objects contain metadata in the form of flags. Three flags can\n   * be assigned during instantiation by passing arguments to this constructor:\n   *\n   * - `object`: This flag contains the target of the assertion. For example, in\n   *   the assertion `expect(numKittens).to.equal(7);`, the `object` flag will\n   *   contain `numKittens` so that the `equal` assertion can reference it when\n   *   needed.\n   *\n   * - `message`: This flag contains an optional custom error message to be\n   *   prepended to the error message that's generated by the assertion when it\n   *   fails.\n   *\n   * - `ssfi`: This flag stands for \"start stack function indicator\". It\n   *   contains a function reference that serves as the starting point for\n   *   removing frames from the stack trace of the error that's created by the\n   *   assertion when it fails. The goal is to provide a cleaner stack trace to\n   *   end users by removing Chai's internal functions. Note that it only works\n   *   in environments that support `Error.captureStackTrace`, and only when\n   *   `Chai.config.includeStack` hasn't been set to `false`.\n   *\n   * - `lockSsfi`: This flag controls whether or not the given `ssfi` flag\n   *   should retain its current value, even as assertions are chained off of\n   *   this object. This is usually set to `true` when creating a new assertion\n   *   from within another assertion. It's also temporarily set to `true` before\n   *   an overwritten assertion gets called by the overwriting assertion.\n   *\n   * @param {Mixed} obj target of the assertion\n   * @param {String} msg (optional) custom error message\n   * @param {Function} ssfi (optional) starting point for removing stack frames\n   * @param {Boolean} lockSsfi (optional) whether or not the ssfi flag is locked\n   * @api private\n   */\n\n  function Assertion (obj, msg, ssfi, lockSsfi) {\n    flag(this, 'ssfi', ssfi || Assertion);\n    flag(this, 'lockSsfi', lockSsfi);\n    flag(this, 'object', obj);\n    flag(this, 'message', msg);\n\n    return util.proxify(this);\n  }\n\n  Object.defineProperty(Assertion, 'includeStack', {\n    get: function() {\n      console.warn('Assertion.includeStack is deprecated, use chai.config.includeStack instead.');\n      return config.includeStack;\n    },\n    set: function(value) {\n      console.warn('Assertion.includeStack is deprecated, use chai.config.includeStack instead.');\n      config.includeStack = value;\n    }\n  });\n\n  Object.defineProperty(Assertion, 'showDiff', {\n    get: function() {\n      console.warn('Assertion.showDiff is deprecated, use chai.config.showDiff instead.');\n      return config.showDiff;\n    },\n    set: function(value) {\n      console.warn('Assertion.showDiff is deprecated, use chai.config.showDiff instead.');\n      config.showDiff = value;\n    }\n  });\n\n  Assertion.addProperty = function (name, fn) {\n    util.addProperty(this.prototype, name, fn);\n  };\n\n  Assertion.addMethod = function (name, fn) {\n    util.addMethod(this.prototype, name, fn);\n  };\n\n  Assertion.addChainableMethod = function (name, fn, chainingBehavior) {\n    util.addChainableMethod(this.prototype, name, fn, chainingBehavior);\n  };\n\n  Assertion.overwriteProperty = function (name, fn) {\n    util.overwriteProperty(this.prototype, name, fn);\n  };\n\n  Assertion.overwriteMethod = function (name, fn) {\n    util.overwriteMethod(this.prototype, name, fn);\n  };\n\n  Assertion.overwriteChainableMethod = function (name, fn, chainingBehavior) {\n    util.overwriteChainableMethod(this.prototype, name, fn, chainingBehavior);\n  };\n\n  /**\n   * ### .assert(expression, message, negateMessage, expected, actual, showDiff)\n   *\n   * Executes an expression and check expectations. Throws AssertionError for reporting if test doesn't pass.\n   *\n   * @name assert\n   * @param {Philosophical} expression to be tested\n   * @param {String|Function} message or function that returns message to display if expression fails\n   * @param {String|Function} negatedMessage or function that returns negatedMessage to display if negated expression fails\n   * @param {Mixed} expected value (remember to check for negation)\n   * @param {Mixed} actual (optional) will default to `this.obj`\n   * @param {Boolean} showDiff (optional) when set to `true`, assert will display a diff in addition to the message if expression fails\n   * @api private\n   */\n\n  Assertion.prototype.assert = function (expr, msg, negateMsg, expected, _actual, showDiff) {\n    var ok = util.test(this, arguments);\n    if (false !== showDiff) showDiff = true;\n    if (undefined === expected && undefined === _actual) showDiff = false;\n    if (true !== config.showDiff) showDiff = false;\n\n    if (!ok) {\n      msg = util.getMessage(this, arguments);\n      var actual = util.getActual(this, arguments);\n      var assertionErrorObjectProperties = {\n          actual: actual\n        , expected: expected\n        , showDiff: showDiff\n      };\n\n      var operator = util.getOperator(this, arguments);\n      if (operator) {\n        assertionErrorObjectProperties.operator = operator;\n      }\n\n      throw new AssertionError(\n        msg,\n        assertionErrorObjectProperties,\n        (config.includeStack) ? this.assert : flag(this, 'ssfi'));\n    }\n  };\n\n  /*!\n   * ### ._obj\n   *\n   * Quick reference to stored `actual` value for plugin developers.\n   *\n   * @api private\n   */\n\n  Object.defineProperty(Assertion.prototype, '_obj',\n    { get: function () {\n        return flag(this, 'object');\n      }\n    , set: function (val) {\n        flag(this, 'object', val);\n      }\n  });\n};\n","/*!\n * chai\n * http://chaijs.com\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nmodule.exports = function (chai, _) {\n  var Assertion = chai.Assertion\n    , AssertionError = chai.AssertionError\n    , flag = _.flag;\n\n  /**\n   * ### Language Chains\n   *\n   * The following are provided as chainable getters to improve the readability\n   * of your assertions.\n   *\n   * **Chains**\n   *\n   * - to\n   * - be\n   * - been\n   * - is\n   * - that\n   * - which\n   * - and\n   * - has\n   * - have\n   * - with\n   * - at\n   * - of\n   * - same\n   * - but\n   * - does\n   * - still\n   * - also\n   *\n   * @name language chains\n   * @namespace BDD\n   * @api public\n   */\n\n  [ 'to', 'be', 'been', 'is'\n  , 'and', 'has', 'have', 'with'\n  , 'that', 'which', 'at', 'of'\n  , 'same', 'but', 'does', 'still', \"also\" ].forEach(function (chain) {\n    Assertion.addProperty(chain);\n  });\n\n  /**\n   * ### .not\n   *\n   * Negates all assertions that follow in the chain.\n   *\n   *     expect(function () {}).to.not.throw();\n   *     expect({a: 1}).to.not.have.property('b');\n   *     expect([1, 2]).to.be.an('array').that.does.not.include(3);\n   *\n   * Just because you can negate any assertion with `.not` doesn't mean you\n   * should. With great power comes great responsibility. It's often best to\n   * assert that the one expected output was produced, rather than asserting\n   * that one of countless unexpected outputs wasn't produced. See individual\n   * assertions for specific guidance.\n   *\n   *     expect(2).to.equal(2); // Recommended\n   *     expect(2).to.not.equal(1); // Not recommended\n   *\n   * @name not\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('not', function () {\n    flag(this, 'negate', true);\n  });\n\n  /**\n   * ### .deep\n   *\n   * Causes all `.equal`, `.include`, `.members`, `.keys`, and `.property`\n   * assertions that follow in the chain to use deep equality instead of strict\n   * (`===`) equality. See the `deep-eql` project page for info on the deep\n   * equality algorithm: https://github.com/chaijs/deep-eql.\n   *\n   *     // Target object deeply (but not strictly) equals `{a: 1}`\n   *     expect({a: 1}).to.deep.equal({a: 1});\n   *     expect({a: 1}).to.not.equal({a: 1});\n   *\n   *     // Target array deeply (but not strictly) includes `{a: 1}`\n   *     expect([{a: 1}]).to.deep.include({a: 1});\n   *     expect([{a: 1}]).to.not.include({a: 1});\n   *\n   *     // Target object deeply (but not strictly) includes `x: {a: 1}`\n   *     expect({x: {a: 1}}).to.deep.include({x: {a: 1}});\n   *     expect({x: {a: 1}}).to.not.include({x: {a: 1}});\n   *\n   *     // Target array deeply (but not strictly) has member `{a: 1}`\n   *     expect([{a: 1}]).to.have.deep.members([{a: 1}]);\n   *     expect([{a: 1}]).to.not.have.members([{a: 1}]);\n   *\n   *     // Target set deeply (but not strictly) has key `{a: 1}`\n   *     expect(new Set([{a: 1}])).to.have.deep.keys([{a: 1}]);\n   *     expect(new Set([{a: 1}])).to.not.have.keys([{a: 1}]);\n   *\n   *     // Target object deeply (but not strictly) has property `x: {a: 1}`\n   *     expect({x: {a: 1}}).to.have.deep.property('x', {a: 1});\n   *     expect({x: {a: 1}}).to.not.have.property('x', {a: 1});\n   *\n   * @name deep\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('deep', function () {\n    flag(this, 'deep', true);\n  });\n\n  /**\n   * ### .nested\n   *\n   * Enables dot- and bracket-notation in all `.property` and `.include`\n   * assertions that follow in the chain.\n   *\n   *     expect({a: {b: ['x', 'y']}}).to.have.nested.property('a.b[1]');\n   *     expect({a: {b: ['x', 'y']}}).to.nested.include({'a.b[1]': 'y'});\n   *\n   * If `.` or `[]` are part of an actual property name, they can be escaped by\n   * adding two backslashes before them.\n   *\n   *     expect({'.a': {'[b]': 'x'}}).to.have.nested.property('\\\\.a.\\\\[b\\\\]');\n   *     expect({'.a': {'[b]': 'x'}}).to.nested.include({'\\\\.a.\\\\[b\\\\]': 'x'});\n   *\n   * `.nested` cannot be combined with `.own`.\n   *\n   * @name nested\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('nested', function () {\n    flag(this, 'nested', true);\n  });\n\n  /**\n   * ### .own\n   *\n   * Causes all `.property` and `.include` assertions that follow in the chain\n   * to ignore inherited properties.\n   *\n   *     Object.prototype.b = 2;\n   *\n   *     expect({a: 1}).to.have.own.property('a');\n   *     expect({a: 1}).to.have.property('b');\n   *     expect({a: 1}).to.not.have.own.property('b');\n   *\n   *     expect({a: 1}).to.own.include({a: 1});\n   *     expect({a: 1}).to.include({b: 2}).but.not.own.include({b: 2});\n   *\n   * `.own` cannot be combined with `.nested`.\n   *\n   * @name own\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('own', function () {\n    flag(this, 'own', true);\n  });\n\n  /**\n   * ### .ordered\n   *\n   * Causes all `.members` assertions that follow in the chain to require that\n   * members be in the same order.\n   *\n   *     expect([1, 2]).to.have.ordered.members([1, 2])\n   *       .but.not.have.ordered.members([2, 1]);\n   *\n   * When `.include` and `.ordered` are combined, the ordering begins at the\n   * start of both arrays.\n   *\n   *     expect([1, 2, 3]).to.include.ordered.members([1, 2])\n   *       .but.not.include.ordered.members([2, 3]);\n   *\n   * @name ordered\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('ordered', function () {\n    flag(this, 'ordered', true);\n  });\n\n  /**\n   * ### .any\n   *\n   * Causes all `.keys` assertions that follow in the chain to only require that\n   * the target have at least one of the given keys. This is the opposite of\n   * `.all`, which requires that the target have all of the given keys.\n   *\n   *     expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\n   *\n   * See the `.keys` doc for guidance on when to use `.any` or `.all`.\n   *\n   * @name any\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('any', function () {\n    flag(this, 'any', true);\n    flag(this, 'all', false);\n  });\n\n  /**\n   * ### .all\n   *\n   * Causes all `.keys` assertions that follow in the chain to require that the\n   * target have all of the given keys. This is the opposite of `.any`, which\n   * only requires that the target have at least one of the given keys.\n   *\n   *     expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\n   *\n   * Note that `.all` is used by default when neither `.all` nor `.any` are\n   * added earlier in the chain. However, it's often best to add `.all` anyway\n   * because it improves readability.\n   *\n   * See the `.keys` doc for guidance on when to use `.any` or `.all`.\n   *\n   * @name all\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('all', function () {\n    flag(this, 'all', true);\n    flag(this, 'any', false);\n  });\n\n  /**\n   * ### .a(type[, msg])\n   *\n   * Asserts that the target's type is equal to the given string `type`. Types\n   * are case insensitive. See the `type-detect` project page for info on the\n   * type detection algorithm: https://github.com/chaijs/type-detect.\n   *\n   *     expect('foo').to.be.a('string');\n   *     expect({a: 1}).to.be.an('object');\n   *     expect(null).to.be.a('null');\n   *     expect(undefined).to.be.an('undefined');\n   *     expect(new Error).to.be.an('error');\n   *     expect(Promise.resolve()).to.be.a('promise');\n   *     expect(new Float32Array).to.be.a('float32array');\n   *     expect(Symbol()).to.be.a('symbol');\n   *\n   * `.a` supports objects that have a custom type set via `Symbol.toStringTag`.\n   *\n   *     var myObj = {\n   *       [Symbol.toStringTag]: 'myCustomType'\n   *     };\n   *\n   *     expect(myObj).to.be.a('myCustomType').but.not.an('object');\n   *\n   * It's often best to use `.a` to check a target's type before making more\n   * assertions on the same target. That way, you avoid unexpected behavior from\n   * any assertion that does different things based on the target's type.\n   *\n   *     expect([1, 2, 3]).to.be.an('array').that.includes(2);\n   *     expect([]).to.be.an('array').that.is.empty;\n   *\n   * Add `.not` earlier in the chain to negate `.a`. However, it's often best to\n   * assert that the target is the expected type, rather than asserting that it\n   * isn't one of many unexpected types.\n   *\n   *     expect('foo').to.be.a('string'); // Recommended\n   *     expect('foo').to.not.be.an('array'); // Not recommended\n   *\n   * `.a` accepts an optional `msg` argument which is a custom error message to\n   * show when the assertion fails. The message can also be given as the second\n   * argument to `expect`.\n   *\n   *     expect(1).to.be.a('string', 'nooo why fail??');\n   *     expect(1, 'nooo why fail??').to.be.a('string');\n   *\n   * `.a` can also be used as a language chain to improve the readability of\n   * your assertions.\n   *\n   *     expect({b: 2}).to.have.a.property('b');\n   *\n   * The alias `.an` can be used interchangeably with `.a`.\n   *\n   * @name a\n   * @alias an\n   * @param {String} type\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function an (type, msg) {\n    if (msg) flag(this, 'message', msg);\n    type = type.toLowerCase();\n    var obj = flag(this, 'object')\n      , article = ~[ 'a', 'e', 'i', 'o', 'u' ].indexOf(type.charAt(0)) ? 'an ' : 'a ';\n\n    this.assert(\n        type === _.type(obj).toLowerCase()\n      , 'expected #{this} to be ' + article + type\n      , 'expected #{this} not to be ' + article + type\n    );\n  }\n\n  Assertion.addChainableMethod('an', an);\n  Assertion.addChainableMethod('a', an);\n\n  /**\n   * ### .include(val[, msg])\n   *\n   * When the target is a string, `.include` asserts that the given string `val`\n   * is a substring of the target.\n   *\n   *     expect('foobar').to.include('foo');\n   *\n   * When the target is an array, `.include` asserts that the given `val` is a\n   * member of the target.\n   *\n   *     expect([1, 2, 3]).to.include(2);\n   *\n   * When the target is an object, `.include` asserts that the given object\n   * `val`'s properties are a subset of the target's properties.\n   *\n   *     expect({a: 1, b: 2, c: 3}).to.include({a: 1, b: 2});\n   *\n   * When the target is a Set or WeakSet, `.include` asserts that the given `val` is a\n   * member of the target. SameValueZero equality algorithm is used.\n   *\n   *     expect(new Set([1, 2])).to.include(2);\n   *\n   * When the target is a Map, `.include` asserts that the given `val` is one of\n   * the values of the target. SameValueZero equality algorithm is used.\n   *\n   *     expect(new Map([['a', 1], ['b', 2]])).to.include(2);\n   *\n   * Because `.include` does different things based on the target's type, it's\n   * important to check the target's type before using `.include`. See the `.a`\n   * doc for info on testing a target's type.\n   *\n   *     expect([1, 2, 3]).to.be.an('array').that.includes(2);\n   *\n   * By default, strict (`===`) equality is used to compare array members and\n   * object properties. Add `.deep` earlier in the chain to use deep equality\n   * instead (WeakSet targets are not supported). See the `deep-eql` project\n   * page for info on the deep equality algorithm: https://github.com/chaijs/deep-eql.\n   *\n   *     // Target array deeply (but not strictly) includes `{a: 1}`\n   *     expect([{a: 1}]).to.deep.include({a: 1});\n   *     expect([{a: 1}]).to.not.include({a: 1});\n   *\n   *     // Target object deeply (but not strictly) includes `x: {a: 1}`\n   *     expect({x: {a: 1}}).to.deep.include({x: {a: 1}});\n   *     expect({x: {a: 1}}).to.not.include({x: {a: 1}});\n   *\n   * By default, all of the target's properties are searched when working with\n   * objects. This includes properties that are inherited and/or non-enumerable.\n   * Add `.own` earlier in the chain to exclude the target's inherited\n   * properties from the search.\n   *\n   *     Object.prototype.b = 2;\n   *\n   *     expect({a: 1}).to.own.include({a: 1});\n   *     expect({a: 1}).to.include({b: 2}).but.not.own.include({b: 2});\n   *\n   * Note that a target object is always only searched for `val`'s own\n   * enumerable properties.\n   *\n   * `.deep` and `.own` can be combined.\n   *\n   *     expect({a: {b: 2}}).to.deep.own.include({a: {b: 2}});\n   *\n   * Add `.nested` earlier in the chain to enable dot- and bracket-notation when\n   * referencing nested properties.\n   *\n   *     expect({a: {b: ['x', 'y']}}).to.nested.include({'a.b[1]': 'y'});\n   *\n   * If `.` or `[]` are part of an actual property name, they can be escaped by\n   * adding two backslashes before them.\n   *\n   *     expect({'.a': {'[b]': 2}}).to.nested.include({'\\\\.a.\\\\[b\\\\]': 2});\n   *\n   * `.deep` and `.nested` can be combined.\n   *\n   *     expect({a: {b: [{c: 3}]}}).to.deep.nested.include({'a.b[0]': {c: 3}});\n   *\n   * `.own` and `.nested` cannot be combined.\n   *\n   * Add `.not` earlier in the chain to negate `.include`.\n   *\n   *     expect('foobar').to.not.include('taco');\n   *     expect([1, 2, 3]).to.not.include(4);\n   *\n   * However, it's dangerous to negate `.include` when the target is an object.\n   * The problem is that it creates uncertain expectations by asserting that the\n   * target object doesn't have all of `val`'s key/value pairs but may or may\n   * not have some of them. It's often best to identify the exact output that's\n   * expected, and then write an assertion that only accepts that exact output.\n   *\n   * When the target object isn't even expected to have `val`'s keys, it's\n   * often best to assert exactly that.\n   *\n   *     expect({c: 3}).to.not.have.any.keys('a', 'b'); // Recommended\n   *     expect({c: 3}).to.not.include({a: 1, b: 2}); // Not recommended\n   *\n   * When the target object is expected to have `val`'s keys, it's often best to\n   * assert that each of the properties has its expected value, rather than\n   * asserting that each property doesn't have one of many unexpected values.\n   *\n   *     expect({a: 3, b: 4}).to.include({a: 3, b: 4}); // Recommended\n   *     expect({a: 3, b: 4}).to.not.include({a: 1, b: 2}); // Not recommended\n   *\n   * `.include` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect([1, 2, 3]).to.include(4, 'nooo why fail??');\n   *     expect([1, 2, 3], 'nooo why fail??').to.include(4);\n   *\n   * `.include` can also be used as a language chain, causing all `.members` and\n   * `.keys` assertions that follow in the chain to require the target to be a\n   * superset of the expected set, rather than an identical set. Note that\n   * `.members` ignores duplicates in the subset when `.include` is added.\n   *\n   *     // Target object's keys are a superset of ['a', 'b'] but not identical\n   *     expect({a: 1, b: 2, c: 3}).to.include.all.keys('a', 'b');\n   *     expect({a: 1, b: 2, c: 3}).to.not.have.all.keys('a', 'b');\n   *\n   *     // Target array is a superset of [1, 2] but not identical\n   *     expect([1, 2, 3]).to.include.members([1, 2]);\n   *     expect([1, 2, 3]).to.not.have.members([1, 2]);\n   *\n   *     // Duplicates in the subset are ignored\n   *     expect([1, 2, 3]).to.include.members([1, 2, 2, 2]);\n   *\n   * Note that adding `.any` earlier in the chain causes the `.keys` assertion\n   * to ignore `.include`.\n   *\n   *     // Both assertions are identical\n   *     expect({a: 1}).to.include.any.keys('a', 'b');\n   *     expect({a: 1}).to.have.any.keys('a', 'b');\n   *\n   * The aliases `.includes`, `.contain`, and `.contains` can be used\n   * interchangeably with `.include`.\n   *\n   * @name include\n   * @alias contain\n   * @alias includes\n   * @alias contains\n   * @param {Mixed} val\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function SameValueZero(a, b) {\n    return (_.isNaN(a) && _.isNaN(b)) || a === b;\n  }\n\n  function includeChainingBehavior () {\n    flag(this, 'contains', true);\n  }\n\n  function include (val, msg) {\n    if (msg) flag(this, 'message', msg);\n\n    var obj = flag(this, 'object')\n      , objType = _.type(obj).toLowerCase()\n      , flagMsg = flag(this, 'message')\n      , negate = flag(this, 'negate')\n      , ssfi = flag(this, 'ssfi')\n      , isDeep = flag(this, 'deep')\n      , descriptor = isDeep ? 'deep ' : '';\n\n    flagMsg = flagMsg ? flagMsg + ': ' : '';\n\n    var included = false;\n\n    switch (objType) {\n      case 'string':\n        included = obj.indexOf(val) !== -1;\n        break;\n\n      case 'weakset':\n        if (isDeep) {\n          throw new AssertionError(\n            flagMsg + 'unable to use .deep.include with WeakSet',\n            undefined,\n            ssfi\n          );\n        }\n\n        included = obj.has(val);\n        break;\n\n      case 'map':\n        var isEql = isDeep ? _.eql : SameValueZero;\n        obj.forEach(function (item) {\n          included = included || isEql(item, val);\n        });\n        break;\n\n      case 'set':\n        if (isDeep) {\n          obj.forEach(function (item) {\n            included = included || _.eql(item, val);\n          });\n        } else {\n          included = obj.has(val);\n        }\n        break;\n\n      case 'array':\n        if (isDeep) {\n          included = obj.some(function (item) {\n            return _.eql(item, val);\n          })\n        } else {\n          included = obj.indexOf(val) !== -1;\n        }\n        break;\n\n      default:\n        // This block is for asserting a subset of properties in an object.\n        // `_.expectTypes` isn't used here because `.include` should work with\n        // objects with a custom `@@toStringTag`.\n        if (val !== Object(val)) {\n          throw new AssertionError(\n            flagMsg + 'the given combination of arguments ('\n            + objType + ' and '\n            + _.type(val).toLowerCase() + ')'\n            + ' is invalid for this assertion. '\n            + 'You can use an array, a map, an object, a set, a string, '\n            + 'or a weakset instead of a '\n            + _.type(val).toLowerCase(),\n            undefined,\n            ssfi\n          );\n        }\n\n        var props = Object.keys(val)\n          , firstErr = null\n          , numErrs = 0;\n\n        props.forEach(function (prop) {\n          var propAssertion = new Assertion(obj);\n          _.transferFlags(this, propAssertion, true);\n          flag(propAssertion, 'lockSsfi', true);\n\n          if (!negate || props.length === 1) {\n            propAssertion.property(prop, val[prop]);\n            return;\n          }\n\n          try {\n            propAssertion.property(prop, val[prop]);\n          } catch (err) {\n            if (!_.checkError.compatibleConstructor(err, AssertionError)) {\n              throw err;\n            }\n            if (firstErr === null) firstErr = err;\n            numErrs++;\n          }\n        }, this);\n\n        // When validating .not.include with multiple properties, we only want\n        // to throw an assertion error if all of the properties are included,\n        // in which case we throw the first property assertion error that we\n        // encountered.\n        if (negate && props.length > 1 && numErrs === props.length) {\n          throw firstErr;\n        }\n        return;\n    }\n\n    // Assert inclusion in collection or substring in a string.\n    this.assert(\n      included\n      , 'expected #{this} to ' + descriptor + 'include ' + _.inspect(val)\n      , 'expected #{this} to not ' + descriptor + 'include ' + _.inspect(val));\n  }\n\n  Assertion.addChainableMethod('include', include, includeChainingBehavior);\n  Assertion.addChainableMethod('contain', include, includeChainingBehavior);\n  Assertion.addChainableMethod('contains', include, includeChainingBehavior);\n  Assertion.addChainableMethod('includes', include, includeChainingBehavior);\n\n  /**\n   * ### .ok\n   *\n   * Asserts that the target is a truthy value (considered `true` in boolean context).\n   * However, it's often best to assert that the target is strictly (`===`) or\n   * deeply equal to its expected value.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.be.ok; // Not recommended\n   *\n   *     expect(true).to.be.true; // Recommended\n   *     expect(true).to.be.ok; // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.ok`.\n   *\n   *     expect(0).to.equal(0); // Recommended\n   *     expect(0).to.not.be.ok; // Not recommended\n   *\n   *     expect(false).to.be.false; // Recommended\n   *     expect(false).to.not.be.ok; // Not recommended\n   *\n   *     expect(null).to.be.null; // Recommended\n   *     expect(null).to.not.be.ok; // Not recommended\n   *\n   *     expect(undefined).to.be.undefined; // Recommended\n   *     expect(undefined).to.not.be.ok; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect(false, 'nooo why fail??').to.be.ok;\n   *\n   * @name ok\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('ok', function () {\n    this.assert(\n        flag(this, 'object')\n      , 'expected #{this} to be truthy'\n      , 'expected #{this} to be falsy');\n  });\n\n  /**\n   * ### .true\n   *\n   * Asserts that the target is strictly (`===`) equal to `true`.\n   *\n   *     expect(true).to.be.true;\n   *\n   * Add `.not` earlier in the chain to negate `.true`. However, it's often best\n   * to assert that the target is equal to its expected value, rather than not\n   * equal to `true`.\n   *\n   *     expect(false).to.be.false; // Recommended\n   *     expect(false).to.not.be.true; // Not recommended\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.not.be.true; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect(false, 'nooo why fail??').to.be.true;\n   *\n   * @name true\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('true', function () {\n    this.assert(\n        true === flag(this, 'object')\n      , 'expected #{this} to be true'\n      , 'expected #{this} to be false'\n      , flag(this, 'negate') ? false : true\n    );\n  });\n\n  /**\n   * ### .false\n   *\n   * Asserts that the target is strictly (`===`) equal to `false`.\n   *\n   *     expect(false).to.be.false;\n   *\n   * Add `.not` earlier in the chain to negate `.false`. However, it's often\n   * best to assert that the target is equal to its expected value, rather than\n   * not equal to `false`.\n   *\n   *     expect(true).to.be.true; // Recommended\n   *     expect(true).to.not.be.false; // Not recommended\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.not.be.false; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect(true, 'nooo why fail??').to.be.false;\n   *\n   * @name false\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('false', function () {\n    this.assert(\n        false === flag(this, 'object')\n      , 'expected #{this} to be false'\n      , 'expected #{this} to be true'\n      , flag(this, 'negate') ? true : false\n    );\n  });\n\n  /**\n   * ### .null\n   *\n   * Asserts that the target is strictly (`===`) equal to `null`.\n   *\n   *     expect(null).to.be.null;\n   *\n   * Add `.not` earlier in the chain to negate `.null`. However, it's often best\n   * to assert that the target is equal to its expected value, rather than not\n   * equal to `null`.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.not.be.null; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect(42, 'nooo why fail??').to.be.null;\n   *\n   * @name null\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('null', function () {\n    this.assert(\n        null === flag(this, 'object')\n      , 'expected #{this} to be null'\n      , 'expected #{this} not to be null'\n    );\n  });\n\n  /**\n   * ### .undefined\n   *\n   * Asserts that the target is strictly (`===`) equal to `undefined`.\n   *\n   *     expect(undefined).to.be.undefined;\n   *\n   * Add `.not` earlier in the chain to negate `.undefined`. However, it's often\n   * best to assert that the target is equal to its expected value, rather than\n   * not equal to `undefined`.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.not.be.undefined; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect(42, 'nooo why fail??').to.be.undefined;\n   *\n   * @name undefined\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('undefined', function () {\n    this.assert(\n        undefined === flag(this, 'object')\n      , 'expected #{this} to be undefined'\n      , 'expected #{this} not to be undefined'\n    );\n  });\n\n  /**\n   * ### .NaN\n   *\n   * Asserts that the target is exactly `NaN`.\n   *\n   *     expect(NaN).to.be.NaN;\n   *\n   * Add `.not` earlier in the chain to negate `.NaN`. However, it's often best\n   * to assert that the target is equal to its expected value, rather than not\n   * equal to `NaN`.\n   *\n   *     expect('foo').to.equal('foo'); // Recommended\n   *     expect('foo').to.not.be.NaN; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect(42, 'nooo why fail??').to.be.NaN;\n   *\n   * @name NaN\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('NaN', function () {\n    this.assert(\n        _.isNaN(flag(this, 'object'))\n        , 'expected #{this} to be NaN'\n        , 'expected #{this} not to be NaN'\n    );\n  });\n\n  /**\n   * ### .exist\n   *\n   * Asserts that the target is not strictly (`===`) equal to either `null` or\n   * `undefined`. However, it's often best to assert that the target is equal to\n   * its expected value.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.exist; // Not recommended\n   *\n   *     expect(0).to.equal(0); // Recommended\n   *     expect(0).to.exist; // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.exist`.\n   *\n   *     expect(null).to.be.null; // Recommended\n   *     expect(null).to.not.exist; // Not recommended\n   *\n   *     expect(undefined).to.be.undefined; // Recommended\n   *     expect(undefined).to.not.exist; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect(null, 'nooo why fail??').to.exist;\n   *\n   * The alias `.exists` can be used interchangeably with `.exist`.\n   *\n   * @name exist\n   * @alias exists\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertExist () {\n    var val = flag(this, 'object');\n    this.assert(\n        val !== null && val !== undefined\n      , 'expected #{this} to exist'\n      , 'expected #{this} to not exist'\n    );\n  }\n\n  Assertion.addProperty('exist', assertExist);\n  Assertion.addProperty('exists', assertExist);\n\n  /**\n   * ### .empty\n   *\n   * When the target is a string or array, `.empty` asserts that the target's\n   * `length` property is strictly (`===`) equal to `0`.\n   *\n   *     expect([]).to.be.empty;\n   *     expect('').to.be.empty;\n   *\n   * When the target is a map or set, `.empty` asserts that the target's `size`\n   * property is strictly equal to `0`.\n   *\n   *     expect(new Set()).to.be.empty;\n   *     expect(new Map()).to.be.empty;\n   *\n   * When the target is a non-function object, `.empty` asserts that the target\n   * doesn't have any own enumerable properties. Properties with Symbol-based\n   * keys are excluded from the count.\n   *\n   *     expect({}).to.be.empty;\n   *\n   * Because `.empty` does different things based on the target's type, it's\n   * important to check the target's type before using `.empty`. See the `.a`\n   * doc for info on testing a target's type.\n   *\n   *     expect([]).to.be.an('array').that.is.empty;\n   *\n   * Add `.not` earlier in the chain to negate `.empty`. However, it's often\n   * best to assert that the target contains its expected number of values,\n   * rather than asserting that it's not empty.\n   *\n   *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended\n   *     expect([1, 2, 3]).to.not.be.empty; // Not recommended\n   *\n   *     expect(new Set([1, 2, 3])).to.have.property('size', 3); // Recommended\n   *     expect(new Set([1, 2, 3])).to.not.be.empty; // Not recommended\n   *\n   *     expect(Object.keys({a: 1})).to.have.lengthOf(1); // Recommended\n   *     expect({a: 1}).to.not.be.empty; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect([1, 2, 3], 'nooo why fail??').to.be.empty;\n   *\n   * @name empty\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('empty', function () {\n    var val = flag(this, 'object')\n      , ssfi = flag(this, 'ssfi')\n      , flagMsg = flag(this, 'message')\n      , itemsCount;\n\n    flagMsg = flagMsg ? flagMsg + ': ' : '';\n\n    switch (_.type(val).toLowerCase()) {\n      case 'array':\n      case 'string':\n        itemsCount = val.length;\n        break;\n      case 'map':\n      case 'set':\n        itemsCount = val.size;\n        break;\n      case 'weakmap':\n      case 'weakset':\n        throw new AssertionError(\n          flagMsg + '.empty was passed a weak collection',\n          undefined,\n          ssfi\n        );\n      case 'function':\n        var msg = flagMsg + '.empty was passed a function ' + _.getName(val);\n        throw new AssertionError(msg.trim(), undefined, ssfi);\n      default:\n        if (val !== Object(val)) {\n          throw new AssertionError(\n            flagMsg + '.empty was passed non-string primitive ' + _.inspect(val),\n            undefined,\n            ssfi\n          );\n        }\n        itemsCount = Object.keys(val).length;\n    }\n\n    this.assert(\n        0 === itemsCount\n      , 'expected #{this} to be empty'\n      , 'expected #{this} not to be empty'\n    );\n  });\n\n  /**\n   * ### .arguments\n   *\n   * Asserts that the target is an `arguments` object.\n   *\n   *     function test () {\n   *       expect(arguments).to.be.arguments;\n   *     }\n   *\n   *     test();\n   *\n   * Add `.not` earlier in the chain to negate `.arguments`. However, it's often\n   * best to assert which type the target is expected to be, rather than\n   * asserting that it’s not an `arguments` object.\n   *\n   *     expect('foo').to.be.a('string'); // Recommended\n   *     expect('foo').to.not.be.arguments; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect({}, 'nooo why fail??').to.be.arguments;\n   *\n   * The alias `.Arguments` can be used interchangeably with `.arguments`.\n   *\n   * @name arguments\n   * @alias Arguments\n   * @namespace BDD\n   * @api public\n   */\n\n  function checkArguments () {\n    var obj = flag(this, 'object')\n      , type = _.type(obj);\n    this.assert(\n        'Arguments' === type\n      , 'expected #{this} to be arguments but got ' + type\n      , 'expected #{this} to not be arguments'\n    );\n  }\n\n  Assertion.addProperty('arguments', checkArguments);\n  Assertion.addProperty('Arguments', checkArguments);\n\n  /**\n   * ### .equal(val[, msg])\n   *\n   * Asserts that the target is strictly (`===`) equal to the given `val`.\n   *\n   *     expect(1).to.equal(1);\n   *     expect('foo').to.equal('foo');\n   *\n   * Add `.deep` earlier in the chain to use deep equality instead. See the\n   * `deep-eql` project page for info on the deep equality algorithm:\n   * https://github.com/chaijs/deep-eql.\n   *\n   *     // Target object deeply (but not strictly) equals `{a: 1}`\n   *     expect({a: 1}).to.deep.equal({a: 1});\n   *     expect({a: 1}).to.not.equal({a: 1});\n   *\n   *     // Target array deeply (but not strictly) equals `[1, 2]`\n   *     expect([1, 2]).to.deep.equal([1, 2]);\n   *     expect([1, 2]).to.not.equal([1, 2]);\n   *\n   * Add `.not` earlier in the chain to negate `.equal`. However, it's often\n   * best to assert that the target is equal to its expected value, rather than\n   * not equal to one of countless unexpected values.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.not.equal(2); // Not recommended\n   *\n   * `.equal` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`.\n   *\n   *     expect(1).to.equal(2, 'nooo why fail??');\n   *     expect(1, 'nooo why fail??').to.equal(2);\n   *\n   * The aliases `.equals` and `eq` can be used interchangeably with `.equal`.\n   *\n   * @name equal\n   * @alias equals\n   * @alias eq\n   * @param {Mixed} val\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertEqual (val, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    if (flag(this, 'deep')) {\n      var prevLockSsfi = flag(this, 'lockSsfi');\n      flag(this, 'lockSsfi', true);\n      this.eql(val);\n      flag(this, 'lockSsfi', prevLockSsfi);\n    } else {\n      this.assert(\n          val === obj\n        , 'expected #{this} to equal #{exp}'\n        , 'expected #{this} to not equal #{exp}'\n        , val\n        , this._obj\n        , true\n      );\n    }\n  }\n\n  Assertion.addMethod('equal', assertEqual);\n  Assertion.addMethod('equals', assertEqual);\n  Assertion.addMethod('eq', assertEqual);\n\n  /**\n   * ### .eql(obj[, msg])\n   *\n   * Asserts that the target is deeply equal to the given `obj`. See the\n   * `deep-eql` project page for info on the deep equality algorithm:\n   * https://github.com/chaijs/deep-eql.\n   *\n   *     // Target object is deeply (but not strictly) equal to {a: 1}\n   *     expect({a: 1}).to.eql({a: 1}).but.not.equal({a: 1});\n   *\n   *     // Target array is deeply (but not strictly) equal to [1, 2]\n   *     expect([1, 2]).to.eql([1, 2]).but.not.equal([1, 2]);\n   *\n   * Add `.not` earlier in the chain to negate `.eql`. However, it's often best\n   * to assert that the target is deeply equal to its expected value, rather\n   * than not deeply equal to one of countless unexpected values.\n   *\n   *     expect({a: 1}).to.eql({a: 1}); // Recommended\n   *     expect({a: 1}).to.not.eql({b: 2}); // Not recommended\n   *\n   * `.eql` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`.\n   *\n   *     expect({a: 1}).to.eql({b: 2}, 'nooo why fail??');\n   *     expect({a: 1}, 'nooo why fail??').to.eql({b: 2});\n   *\n   * The alias `.eqls` can be used interchangeably with `.eql`.\n   *\n   * The `.deep.equal` assertion is almost identical to `.eql` but with one\n   * difference: `.deep.equal` causes deep equality comparisons to also be used\n   * for any other assertions that follow in the chain.\n   *\n   * @name eql\n   * @alias eqls\n   * @param {Mixed} obj\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertEql(obj, msg) {\n    if (msg) flag(this, 'message', msg);\n    this.assert(\n        _.eql(obj, flag(this, 'object'))\n      , 'expected #{this} to deeply equal #{exp}'\n      , 'expected #{this} to not deeply equal #{exp}'\n      , obj\n      , this._obj\n      , true\n    );\n  }\n\n  Assertion.addMethod('eql', assertEql);\n  Assertion.addMethod('eqls', assertEql);\n\n  /**\n   * ### .above(n[, msg])\n   *\n   * Asserts that the target is a number or a date greater than the given number or date `n` respectively.\n   * However, it's often best to assert that the target is equal to its expected\n   * value.\n   *\n   *     expect(2).to.equal(2); // Recommended\n   *     expect(2).to.be.above(1); // Not recommended\n   *\n   * Add `.lengthOf` earlier in the chain to assert that the target's `length`\n   * or `size` is greater than the given number `n`.\n   *\n   *     expect('foo').to.have.lengthOf(3); // Recommended\n   *     expect('foo').to.have.lengthOf.above(2); // Not recommended\n   *\n   *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended\n   *     expect([1, 2, 3]).to.have.lengthOf.above(2); // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.above`.\n   *\n   *     expect(2).to.equal(2); // Recommended\n   *     expect(1).to.not.be.above(2); // Not recommended\n   *\n   * `.above` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`.\n   *\n   *     expect(1).to.be.above(2, 'nooo why fail??');\n   *     expect(1, 'nooo why fail??').to.be.above(2);\n   *\n   * The aliases `.gt` and `.greaterThan` can be used interchangeably with\n   * `.above`.\n   *\n   * @name above\n   * @alias gt\n   * @alias greaterThan\n   * @param {Number} n\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertAbove (n, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , doLength = flag(this, 'doLength')\n      , flagMsg = flag(this, 'message')\n      , msgPrefix = ((flagMsg) ? flagMsg + ': ' : '')\n      , ssfi = flag(this, 'ssfi')\n      , objType = _.type(obj).toLowerCase()\n      , nType = _.type(n).toLowerCase()\n      , errorMessage\n      , shouldThrow = true;\n\n    if (doLength && objType !== 'map' && objType !== 'set') {\n      new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');\n    }\n\n    if (!doLength && (objType === 'date' && nType !== 'date')) {\n      errorMessage = msgPrefix + 'the argument to above must be a date';\n    } else if (nType !== 'number' && (doLength || objType === 'number')) {\n      errorMessage = msgPrefix + 'the argument to above must be a number';\n    } else if (!doLength && (objType !== 'date' && objType !== 'number')) {\n      var printObj = (objType === 'string') ? \"'\" + obj + \"'\" : obj;\n      errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';\n    } else {\n      shouldThrow = false;\n    }\n\n    if (shouldThrow) {\n      throw new AssertionError(errorMessage, undefined, ssfi);\n    }\n\n    if (doLength) {\n      var descriptor = 'length'\n        , itemsCount;\n      if (objType === 'map' || objType === 'set') {\n        descriptor = 'size';\n        itemsCount = obj.size;\n      } else {\n        itemsCount = obj.length;\n      }\n      this.assert(\n          itemsCount > n\n        , 'expected #{this} to have a ' + descriptor + ' above #{exp} but got #{act}'\n        , 'expected #{this} to not have a ' + descriptor + ' above #{exp}'\n        , n\n        , itemsCount\n      );\n    } else {\n      this.assert(\n          obj > n\n        , 'expected #{this} to be above #{exp}'\n        , 'expected #{this} to be at most #{exp}'\n        , n\n      );\n    }\n  }\n\n  Assertion.addMethod('above', assertAbove);\n  Assertion.addMethod('gt', assertAbove);\n  Assertion.addMethod('greaterThan', assertAbove);\n\n  /**\n   * ### .least(n[, msg])\n   *\n   * Asserts that the target is a number or a date greater than or equal to the given\n   * number or date `n` respectively. However, it's often best to assert that the target is equal to\n   * its expected value.\n   *\n   *     expect(2).to.equal(2); // Recommended\n   *     expect(2).to.be.at.least(1); // Not recommended\n   *     expect(2).to.be.at.least(2); // Not recommended\n   *\n   * Add `.lengthOf` earlier in the chain to assert that the target's `length`\n   * or `size` is greater than or equal to the given number `n`.\n   *\n   *     expect('foo').to.have.lengthOf(3); // Recommended\n   *     expect('foo').to.have.lengthOf.at.least(2); // Not recommended\n   *\n   *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended\n   *     expect([1, 2, 3]).to.have.lengthOf.at.least(2); // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.least`.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.not.be.at.least(2); // Not recommended\n   *\n   * `.least` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`.\n   *\n   *     expect(1).to.be.at.least(2, 'nooo why fail??');\n   *     expect(1, 'nooo why fail??').to.be.at.least(2);\n   *\n   * The aliases `.gte` and `.greaterThanOrEqual` can be used interchangeably with\n   * `.least`.\n   *\n   * @name least\n   * @alias gte\n   * @alias greaterThanOrEqual\n   * @param {Number} n\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertLeast (n, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , doLength = flag(this, 'doLength')\n      , flagMsg = flag(this, 'message')\n      , msgPrefix = ((flagMsg) ? flagMsg + ': ' : '')\n      , ssfi = flag(this, 'ssfi')\n      , objType = _.type(obj).toLowerCase()\n      , nType = _.type(n).toLowerCase()\n      , errorMessage\n      , shouldThrow = true;\n\n    if (doLength && objType !== 'map' && objType !== 'set') {\n      new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');\n    }\n\n    if (!doLength && (objType === 'date' && nType !== 'date')) {\n      errorMessage = msgPrefix + 'the argument to least must be a date';\n    } else if (nType !== 'number' && (doLength || objType === 'number')) {\n      errorMessage = msgPrefix + 'the argument to least must be a number';\n    } else if (!doLength && (objType !== 'date' && objType !== 'number')) {\n      var printObj = (objType === 'string') ? \"'\" + obj + \"'\" : obj;\n      errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';\n    } else {\n      shouldThrow = false;\n    }\n\n    if (shouldThrow) {\n      throw new AssertionError(errorMessage, undefined, ssfi);\n    }\n\n    if (doLength) {\n      var descriptor = 'length'\n        , itemsCount;\n      if (objType === 'map' || objType === 'set') {\n        descriptor = 'size';\n        itemsCount = obj.size;\n      } else {\n        itemsCount = obj.length;\n      }\n      this.assert(\n          itemsCount >= n\n        , 'expected #{this} to have a ' + descriptor + ' at least #{exp} but got #{act}'\n        , 'expected #{this} to have a ' + descriptor + ' below #{exp}'\n        , n\n        , itemsCount\n      );\n    } else {\n      this.assert(\n          obj >= n\n        , 'expected #{this} to be at least #{exp}'\n        , 'expected #{this} to be below #{exp}'\n        , n\n      );\n    }\n  }\n\n  Assertion.addMethod('least', assertLeast);\n  Assertion.addMethod('gte', assertLeast);\n  Assertion.addMethod('greaterThanOrEqual', assertLeast);\n\n  /**\n   * ### .below(n[, msg])\n   *\n   * Asserts that the target is a number or a date less than the given number or date `n` respectively.\n   * However, it's often best to assert that the target is equal to its expected\n   * value.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.be.below(2); // Not recommended\n   *\n   * Add `.lengthOf` earlier in the chain to assert that the target's `length`\n   * or `size` is less than the given number `n`.\n   *\n   *     expect('foo').to.have.lengthOf(3); // Recommended\n   *     expect('foo').to.have.lengthOf.below(4); // Not recommended\n   *\n   *     expect([1, 2, 3]).to.have.length(3); // Recommended\n   *     expect([1, 2, 3]).to.have.lengthOf.below(4); // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.below`.\n   *\n   *     expect(2).to.equal(2); // Recommended\n   *     expect(2).to.not.be.below(1); // Not recommended\n   *\n   * `.below` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`.\n   *\n   *     expect(2).to.be.below(1, 'nooo why fail??');\n   *     expect(2, 'nooo why fail??').to.be.below(1);\n   *\n   * The aliases `.lt` and `.lessThan` can be used interchangeably with\n   * `.below`.\n   *\n   * @name below\n   * @alias lt\n   * @alias lessThan\n   * @param {Number} n\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertBelow (n, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , doLength = flag(this, 'doLength')\n      , flagMsg = flag(this, 'message')\n      , msgPrefix = ((flagMsg) ? flagMsg + ': ' : '')\n      , ssfi = flag(this, 'ssfi')\n      , objType = _.type(obj).toLowerCase()\n      , nType = _.type(n).toLowerCase()\n      , errorMessage\n      , shouldThrow = true;\n\n    if (doLength && objType !== 'map' && objType !== 'set') {\n      new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');\n    }\n\n    if (!doLength && (objType === 'date' && nType !== 'date')) {\n      errorMessage = msgPrefix + 'the argument to below must be a date';\n    } else if (nType !== 'number' && (doLength || objType === 'number')) {\n      errorMessage = msgPrefix + 'the argument to below must be a number';\n    } else if (!doLength && (objType !== 'date' && objType !== 'number')) {\n      var printObj = (objType === 'string') ? \"'\" + obj + \"'\" : obj;\n      errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';\n    } else {\n      shouldThrow = false;\n    }\n\n    if (shouldThrow) {\n      throw new AssertionError(errorMessage, undefined, ssfi);\n    }\n\n    if (doLength) {\n      var descriptor = 'length'\n        , itemsCount;\n      if (objType === 'map' || objType === 'set') {\n        descriptor = 'size';\n        itemsCount = obj.size;\n      } else {\n        itemsCount = obj.length;\n      }\n      this.assert(\n          itemsCount < n\n        , 'expected #{this} to have a ' + descriptor + ' below #{exp} but got #{act}'\n        , 'expected #{this} to not have a ' + descriptor + ' below #{exp}'\n        , n\n        , itemsCount\n      );\n    } else {\n      this.assert(\n          obj < n\n        , 'expected #{this} to be below #{exp}'\n        , 'expected #{this} to be at least #{exp}'\n        , n\n      );\n    }\n  }\n\n  Assertion.addMethod('below', assertBelow);\n  Assertion.addMethod('lt', assertBelow);\n  Assertion.addMethod('lessThan', assertBelow);\n\n  /**\n   * ### .most(n[, msg])\n   *\n   * Asserts that the target is a number or a date less than or equal to the given number\n   * or date `n` respectively. However, it's often best to assert that the target is equal to its\n   * expected value.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.be.at.most(2); // Not recommended\n   *     expect(1).to.be.at.most(1); // Not recommended\n   *\n   * Add `.lengthOf` earlier in the chain to assert that the target's `length`\n   * or `size` is less than or equal to the given number `n`.\n   *\n   *     expect('foo').to.have.lengthOf(3); // Recommended\n   *     expect('foo').to.have.lengthOf.at.most(4); // Not recommended\n   *\n   *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended\n   *     expect([1, 2, 3]).to.have.lengthOf.at.most(4); // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.most`.\n   *\n   *     expect(2).to.equal(2); // Recommended\n   *     expect(2).to.not.be.at.most(1); // Not recommended\n   *\n   * `.most` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`.\n   *\n   *     expect(2).to.be.at.most(1, 'nooo why fail??');\n   *     expect(2, 'nooo why fail??').to.be.at.most(1);\n   *\n   * The aliases `.lte` and `.lessThanOrEqual` can be used interchangeably with\n   * `.most`.\n   *\n   * @name most\n   * @alias lte\n   * @alias lessThanOrEqual\n   * @param {Number} n\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertMost (n, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , doLength = flag(this, 'doLength')\n      , flagMsg = flag(this, 'message')\n      , msgPrefix = ((flagMsg) ? flagMsg + ': ' : '')\n      , ssfi = flag(this, 'ssfi')\n      , objType = _.type(obj).toLowerCase()\n      , nType = _.type(n).toLowerCase()\n      , errorMessage\n      , shouldThrow = true;\n\n    if (doLength && objType !== 'map' && objType !== 'set') {\n      new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');\n    }\n\n    if (!doLength && (objType === 'date' && nType !== 'date')) {\n      errorMessage = msgPrefix + 'the argument to most must be a date';\n    } else if (nType !== 'number' && (doLength || objType === 'number')) {\n      errorMessage = msgPrefix + 'the argument to most must be a number';\n    } else if (!doLength && (objType !== 'date' && objType !== 'number')) {\n      var printObj = (objType === 'string') ? \"'\" + obj + \"'\" : obj;\n      errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';\n    } else {\n      shouldThrow = false;\n    }\n\n    if (shouldThrow) {\n      throw new AssertionError(errorMessage, undefined, ssfi);\n    }\n\n    if (doLength) {\n      var descriptor = 'length'\n        , itemsCount;\n      if (objType === 'map' || objType === 'set') {\n        descriptor = 'size';\n        itemsCount = obj.size;\n      } else {\n        itemsCount = obj.length;\n      }\n      this.assert(\n          itemsCount <= n\n        , 'expected #{this} to have a ' + descriptor + ' at most #{exp} but got #{act}'\n        , 'expected #{this} to have a ' + descriptor + ' above #{exp}'\n        , n\n        , itemsCount\n      );\n    } else {\n      this.assert(\n          obj <= n\n        , 'expected #{this} to be at most #{exp}'\n        , 'expected #{this} to be above #{exp}'\n        , n\n      );\n    }\n  }\n\n  Assertion.addMethod('most', assertMost);\n  Assertion.addMethod('lte', assertMost);\n  Assertion.addMethod('lessThanOrEqual', assertMost);\n\n  /**\n   * ### .within(start, finish[, msg])\n   *\n   * Asserts that the target is a number or a date greater than or equal to the given\n   * number or date `start`, and less than or equal to the given number or date `finish` respectively.\n   * However, it's often best to assert that the target is equal to its expected\n   * value.\n   *\n   *     expect(2).to.equal(2); // Recommended\n   *     expect(2).to.be.within(1, 3); // Not recommended\n   *     expect(2).to.be.within(2, 3); // Not recommended\n   *     expect(2).to.be.within(1, 2); // Not recommended\n   *\n   * Add `.lengthOf` earlier in the chain to assert that the target's `length`\n   * or `size` is greater than or equal to the given number `start`, and less\n   * than or equal to the given number `finish`.\n   *\n   *     expect('foo').to.have.lengthOf(3); // Recommended\n   *     expect('foo').to.have.lengthOf.within(2, 4); // Not recommended\n   *\n   *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended\n   *     expect([1, 2, 3]).to.have.lengthOf.within(2, 4); // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.within`.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.not.be.within(2, 4); // Not recommended\n   *\n   * `.within` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect(4).to.be.within(1, 3, 'nooo why fail??');\n   *     expect(4, 'nooo why fail??').to.be.within(1, 3);\n   *\n   * @name within\n   * @param {Number} start lower bound inclusive\n   * @param {Number} finish upper bound inclusive\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addMethod('within', function (start, finish, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , doLength = flag(this, 'doLength')\n      , flagMsg = flag(this, 'message')\n      , msgPrefix = ((flagMsg) ? flagMsg + ': ' : '')\n      , ssfi = flag(this, 'ssfi')\n      , objType = _.type(obj).toLowerCase()\n      , startType = _.type(start).toLowerCase()\n      , finishType = _.type(finish).toLowerCase()\n      , errorMessage\n      , shouldThrow = true\n      , range = (startType === 'date' && finishType === 'date')\n          ? start.toUTCString() + '..' + finish.toUTCString()\n          : start + '..' + finish;\n\n    if (doLength && objType !== 'map' && objType !== 'set') {\n      new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');\n    }\n\n    if (!doLength && (objType === 'date' && (startType !== 'date' || finishType !== 'date'))) {\n      errorMessage = msgPrefix + 'the arguments to within must be dates';\n    } else if ((startType !== 'number' || finishType !== 'number') && (doLength || objType === 'number')) {\n      errorMessage = msgPrefix + 'the arguments to within must be numbers';\n    } else if (!doLength && (objType !== 'date' && objType !== 'number')) {\n      var printObj = (objType === 'string') ? \"'\" + obj + \"'\" : obj;\n      errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';\n    } else {\n      shouldThrow = false;\n    }\n\n    if (shouldThrow) {\n      throw new AssertionError(errorMessage, undefined, ssfi);\n    }\n\n    if (doLength) {\n      var descriptor = 'length'\n        , itemsCount;\n      if (objType === 'map' || objType === 'set') {\n        descriptor = 'size';\n        itemsCount = obj.size;\n      } else {\n        itemsCount = obj.length;\n      }\n      this.assert(\n          itemsCount >= start && itemsCount <= finish\n        , 'expected #{this} to have a ' + descriptor + ' within ' + range\n        , 'expected #{this} to not have a ' + descriptor + ' within ' + range\n      );\n    } else {\n      this.assert(\n          obj >= start && obj <= finish\n        , 'expected #{this} to be within ' + range\n        , 'expected #{this} to not be within ' + range\n      );\n    }\n  });\n\n  /**\n   * ### .instanceof(constructor[, msg])\n   *\n   * Asserts that the target is an instance of the given `constructor`.\n   *\n   *     function Cat () { }\n   *\n   *     expect(new Cat()).to.be.an.instanceof(Cat);\n   *     expect([1, 2]).to.be.an.instanceof(Array);\n   *\n   * Add `.not` earlier in the chain to negate `.instanceof`.\n   *\n   *     expect({a: 1}).to.not.be.an.instanceof(Array);\n   *\n   * `.instanceof` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect(1).to.be.an.instanceof(Array, 'nooo why fail??');\n   *     expect(1, 'nooo why fail??').to.be.an.instanceof(Array);\n   *\n   * Due to limitations in ES5, `.instanceof` may not always work as expected\n   * when using a transpiler such as Babel or TypeScript. In particular, it may\n   * produce unexpected results when subclassing built-in object such as\n   * `Array`, `Error`, and `Map`. See your transpiler's docs for details:\n   *\n   * - ([Babel](https://babeljs.io/docs/usage/caveats/#classes))\n   * - ([TypeScript](https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work))\n   *\n   * The alias `.instanceOf` can be used interchangeably with `.instanceof`.\n   *\n   * @name instanceof\n   * @param {Constructor} constructor\n   * @param {String} msg _optional_\n   * @alias instanceOf\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertInstanceOf (constructor, msg) {\n    if (msg) flag(this, 'message', msg);\n\n    var target = flag(this, 'object')\n    var ssfi = flag(this, 'ssfi');\n    var flagMsg = flag(this, 'message');\n\n    try {\n      var isInstanceOf = target instanceof constructor;\n    } catch (err) {\n      if (err instanceof TypeError) {\n        flagMsg = flagMsg ? flagMsg + ': ' : '';\n        throw new AssertionError(\n          flagMsg + 'The instanceof assertion needs a constructor but '\n            + _.type(constructor) + ' was given.',\n          undefined,\n          ssfi\n        );\n      }\n      throw err;\n    }\n\n    var name = _.getName(constructor);\n    if (name === null) {\n      name = 'an unnamed constructor';\n    }\n\n    this.assert(\n        isInstanceOf\n      , 'expected #{this} to be an instance of ' + name\n      , 'expected #{this} to not be an instance of ' + name\n    );\n  };\n\n  Assertion.addMethod('instanceof', assertInstanceOf);\n  Assertion.addMethod('instanceOf', assertInstanceOf);\n\n  /**\n   * ### .property(name[, val[, msg]])\n   *\n   * Asserts that the target has a property with the given key `name`.\n   *\n   *     expect({a: 1}).to.have.property('a');\n   *\n   * When `val` is provided, `.property` also asserts that the property's value\n   * is equal to the given `val`.\n   *\n   *     expect({a: 1}).to.have.property('a', 1);\n   *\n   * By default, strict (`===`) equality is used. Add `.deep` earlier in the\n   * chain to use deep equality instead. See the `deep-eql` project page for\n   * info on the deep equality algorithm: https://github.com/chaijs/deep-eql.\n   *\n   *     // Target object deeply (but not strictly) has property `x: {a: 1}`\n   *     expect({x: {a: 1}}).to.have.deep.property('x', {a: 1});\n   *     expect({x: {a: 1}}).to.not.have.property('x', {a: 1});\n   *\n   * The target's enumerable and non-enumerable properties are always included\n   * in the search. By default, both own and inherited properties are included.\n   * Add `.own` earlier in the chain to exclude inherited properties from the\n   * search.\n   *\n   *     Object.prototype.b = 2;\n   *\n   *     expect({a: 1}).to.have.own.property('a');\n   *     expect({a: 1}).to.have.own.property('a', 1);\n   *     expect({a: 1}).to.have.property('b');\n   *     expect({a: 1}).to.not.have.own.property('b');\n   *\n   * `.deep` and `.own` can be combined.\n   *\n   *     expect({x: {a: 1}}).to.have.deep.own.property('x', {a: 1});\n   *\n   * Add `.nested` earlier in the chain to enable dot- and bracket-notation when\n   * referencing nested properties.\n   *\n   *     expect({a: {b: ['x', 'y']}}).to.have.nested.property('a.b[1]');\n   *     expect({a: {b: ['x', 'y']}}).to.have.nested.property('a.b[1]', 'y');\n   *\n   * If `.` or `[]` are part of an actual property name, they can be escaped by\n   * adding two backslashes before them.\n   *\n   *     expect({'.a': {'[b]': 'x'}}).to.have.nested.property('\\\\.a.\\\\[b\\\\]');\n   *\n   * `.deep` and `.nested` can be combined.\n   *\n   *     expect({a: {b: [{c: 3}]}})\n   *       .to.have.deep.nested.property('a.b[0]', {c: 3});\n   *\n   * `.own` and `.nested` cannot be combined.\n   *\n   * Add `.not` earlier in the chain to negate `.property`.\n   *\n   *     expect({a: 1}).to.not.have.property('b');\n   *\n   * However, it's dangerous to negate `.property` when providing `val`. The\n   * problem is that it creates uncertain expectations by asserting that the\n   * target either doesn't have a property with the given key `name`, or that it\n   * does have a property with the given key `name` but its value isn't equal to\n   * the given `val`. It's often best to identify the exact output that's\n   * expected, and then write an assertion that only accepts that exact output.\n   *\n   * When the target isn't expected to have a property with the given key\n   * `name`, it's often best to assert exactly that.\n   *\n   *     expect({b: 2}).to.not.have.property('a'); // Recommended\n   *     expect({b: 2}).to.not.have.property('a', 1); // Not recommended\n   *\n   * When the target is expected to have a property with the given key `name`,\n   * it's often best to assert that the property has its expected value, rather\n   * than asserting that it doesn't have one of many unexpected values.\n   *\n   *     expect({a: 3}).to.have.property('a', 3); // Recommended\n   *     expect({a: 3}).to.not.have.property('a', 1); // Not recommended\n   *\n   * `.property` changes the target of any assertions that follow in the chain\n   * to be the value of the property from the original target object.\n   *\n   *     expect({a: 1}).to.have.property('a').that.is.a('number');\n   *\n   * `.property` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`. When not providing `val`, only use the\n   * second form.\n   *\n   *     // Recommended\n   *     expect({a: 1}).to.have.property('a', 2, 'nooo why fail??');\n   *     expect({a: 1}, 'nooo why fail??').to.have.property('a', 2);\n   *     expect({a: 1}, 'nooo why fail??').to.have.property('b');\n   *\n   *     // Not recommended\n   *     expect({a: 1}).to.have.property('b', undefined, 'nooo why fail??');\n   *\n   * The above assertion isn't the same thing as not providing `val`. Instead,\n   * it's asserting that the target object has a `b` property that's equal to\n   * `undefined`.\n   *\n   * The assertions `.ownProperty` and `.haveOwnProperty` can be used\n   * interchangeably with `.own.property`.\n   *\n   * @name property\n   * @param {String} name\n   * @param {Mixed} val (optional)\n   * @param {String} msg _optional_\n   * @returns value of property for chaining\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertProperty (name, val, msg) {\n    if (msg) flag(this, 'message', msg);\n\n    var isNested = flag(this, 'nested')\n      , isOwn = flag(this, 'own')\n      , flagMsg = flag(this, 'message')\n      , obj = flag(this, 'object')\n      , ssfi = flag(this, 'ssfi')\n      , nameType = typeof name;\n\n    flagMsg = flagMsg ? flagMsg + ': ' : '';\n\n    if (isNested) {\n      if (nameType !== 'string') {\n        throw new AssertionError(\n          flagMsg + 'the argument to property must be a string when using nested syntax',\n          undefined,\n          ssfi\n        );\n      }\n    } else {\n      if (nameType !== 'string' && nameType !== 'number' && nameType !== 'symbol') {\n        throw new AssertionError(\n          flagMsg + 'the argument to property must be a string, number, or symbol',\n          undefined,\n          ssfi\n        );\n      }\n    }\n\n    if (isNested && isOwn) {\n      throw new AssertionError(\n        flagMsg + 'The \"nested\" and \"own\" flags cannot be combined.',\n        undefined,\n        ssfi\n      );\n    }\n\n    if (obj === null || obj === undefined) {\n      throw new AssertionError(\n        flagMsg + 'Target cannot be null or undefined.',\n        undefined,\n        ssfi\n      );\n    }\n\n    var isDeep = flag(this, 'deep')\n      , negate = flag(this, 'negate')\n      , pathInfo = isNested ? _.getPathInfo(obj, name) : null\n      , value = isNested ? pathInfo.value : obj[name];\n\n    var descriptor = '';\n    if (isDeep) descriptor += 'deep ';\n    if (isOwn) descriptor += 'own ';\n    if (isNested) descriptor += 'nested ';\n    descriptor += 'property ';\n\n    var hasProperty;\n    if (isOwn) hasProperty = Object.prototype.hasOwnProperty.call(obj, name);\n    else if (isNested) hasProperty = pathInfo.exists;\n    else hasProperty = _.hasProperty(obj, name);\n\n    // When performing a negated assertion for both name and val, merely having\n    // a property with the given name isn't enough to cause the assertion to\n    // fail. It must both have a property with the given name, and the value of\n    // that property must equal the given val. Therefore, skip this assertion in\n    // favor of the next.\n    if (!negate || arguments.length === 1) {\n      this.assert(\n          hasProperty\n        , 'expected #{this} to have ' + descriptor + _.inspect(name)\n        , 'expected #{this} to not have ' + descriptor + _.inspect(name));\n    }\n\n    if (arguments.length > 1) {\n      this.assert(\n          hasProperty && (isDeep ? _.eql(val, value) : val === value)\n        , 'expected #{this} to have ' + descriptor + _.inspect(name) + ' of #{exp}, but got #{act}'\n        , 'expected #{this} to not have ' + descriptor + _.inspect(name) + ' of #{act}'\n        , val\n        , value\n      );\n    }\n\n    flag(this, 'object', value);\n  }\n\n  Assertion.addMethod('property', assertProperty);\n\n  function assertOwnProperty (name, value, msg) {\n    flag(this, 'own', true);\n    assertProperty.apply(this, arguments);\n  }\n\n  Assertion.addMethod('ownProperty', assertOwnProperty);\n  Assertion.addMethod('haveOwnProperty', assertOwnProperty);\n\n  /**\n   * ### .ownPropertyDescriptor(name[, descriptor[, msg]])\n   *\n   * Asserts that the target has its own property descriptor with the given key\n   * `name`. Enumerable and non-enumerable properties are included in the\n   * search.\n   *\n   *     expect({a: 1}).to.have.ownPropertyDescriptor('a');\n   *\n   * When `descriptor` is provided, `.ownPropertyDescriptor` also asserts that\n   * the property's descriptor is deeply equal to the given `descriptor`. See\n   * the `deep-eql` project page for info on the deep equality algorithm:\n   * https://github.com/chaijs/deep-eql.\n   *\n   *     expect({a: 1}).to.have.ownPropertyDescriptor('a', {\n   *       configurable: true,\n   *       enumerable: true,\n   *       writable: true,\n   *       value: 1,\n   *     });\n   *\n   * Add `.not` earlier in the chain to negate `.ownPropertyDescriptor`.\n   *\n   *     expect({a: 1}).to.not.have.ownPropertyDescriptor('b');\n   *\n   * However, it's dangerous to negate `.ownPropertyDescriptor` when providing\n   * a `descriptor`. The problem is that it creates uncertain expectations by\n   * asserting that the target either doesn't have a property descriptor with\n   * the given key `name`, or that it does have a property descriptor with the\n   * given key `name` but it’s not deeply equal to the given `descriptor`. It's\n   * often best to identify the exact output that's expected, and then write an\n   * assertion that only accepts that exact output.\n   *\n   * When the target isn't expected to have a property descriptor with the given\n   * key `name`, it's often best to assert exactly that.\n   *\n   *     // Recommended\n   *     expect({b: 2}).to.not.have.ownPropertyDescriptor('a');\n   *\n   *     // Not recommended\n   *     expect({b: 2}).to.not.have.ownPropertyDescriptor('a', {\n   *       configurable: true,\n   *       enumerable: true,\n   *       writable: true,\n   *       value: 1,\n   *     });\n   *\n   * When the target is expected to have a property descriptor with the given\n   * key `name`, it's often best to assert that the property has its expected\n   * descriptor, rather than asserting that it doesn't have one of many\n   * unexpected descriptors.\n   *\n   *     // Recommended\n   *     expect({a: 3}).to.have.ownPropertyDescriptor('a', {\n   *       configurable: true,\n   *       enumerable: true,\n   *       writable: true,\n   *       value: 3,\n   *     });\n   *\n   *     // Not recommended\n   *     expect({a: 3}).to.not.have.ownPropertyDescriptor('a', {\n   *       configurable: true,\n   *       enumerable: true,\n   *       writable: true,\n   *       value: 1,\n   *     });\n   *\n   * `.ownPropertyDescriptor` changes the target of any assertions that follow\n   * in the chain to be the value of the property descriptor from the original\n   * target object.\n   *\n   *     expect({a: 1}).to.have.ownPropertyDescriptor('a')\n   *       .that.has.property('enumerable', true);\n   *\n   * `.ownPropertyDescriptor` accepts an optional `msg` argument which is a\n   * custom error message to show when the assertion fails. The message can also\n   * be given as the second argument to `expect`. When not providing\n   * `descriptor`, only use the second form.\n   *\n   *     // Recommended\n   *     expect({a: 1}).to.have.ownPropertyDescriptor('a', {\n   *       configurable: true,\n   *       enumerable: true,\n   *       writable: true,\n   *       value: 2,\n   *     }, 'nooo why fail??');\n   *\n   *     // Recommended\n   *     expect({a: 1}, 'nooo why fail??').to.have.ownPropertyDescriptor('a', {\n   *       configurable: true,\n   *       enumerable: true,\n   *       writable: true,\n   *       value: 2,\n   *     });\n   *\n   *     // Recommended\n   *     expect({a: 1}, 'nooo why fail??').to.have.ownPropertyDescriptor('b');\n   *\n   *     // Not recommended\n   *     expect({a: 1})\n   *       .to.have.ownPropertyDescriptor('b', undefined, 'nooo why fail??');\n   *\n   * The above assertion isn't the same thing as not providing `descriptor`.\n   * Instead, it's asserting that the target object has a `b` property\n   * descriptor that's deeply equal to `undefined`.\n   *\n   * The alias `.haveOwnPropertyDescriptor` can be used interchangeably with\n   * `.ownPropertyDescriptor`.\n   *\n   * @name ownPropertyDescriptor\n   * @alias haveOwnPropertyDescriptor\n   * @param {String} name\n   * @param {Object} descriptor _optional_\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertOwnPropertyDescriptor (name, descriptor, msg) {\n    if (typeof descriptor === 'string') {\n      msg = descriptor;\n      descriptor = null;\n    }\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    var actualDescriptor = Object.getOwnPropertyDescriptor(Object(obj), name);\n    if (actualDescriptor && descriptor) {\n      this.assert(\n          _.eql(descriptor, actualDescriptor)\n        , 'expected the own property descriptor for ' + _.inspect(name) + ' on #{this} to match ' + _.inspect(descriptor) + ', got ' + _.inspect(actualDescriptor)\n        , 'expected the own property descriptor for ' + _.inspect(name) + ' on #{this} to not match ' + _.inspect(descriptor)\n        , descriptor\n        , actualDescriptor\n        , true\n      );\n    } else {\n      this.assert(\n          actualDescriptor\n        , 'expected #{this} to have an own property descriptor for ' + _.inspect(name)\n        , 'expected #{this} to not have an own property descriptor for ' + _.inspect(name)\n      );\n    }\n    flag(this, 'object', actualDescriptor);\n  }\n\n  Assertion.addMethod('ownPropertyDescriptor', assertOwnPropertyDescriptor);\n  Assertion.addMethod('haveOwnPropertyDescriptor', assertOwnPropertyDescriptor);\n\n  /**\n   * ### .lengthOf(n[, msg])\n   *\n   * Asserts that the target's `length` or `size` is equal to the given number\n   * `n`.\n   *\n   *     expect([1, 2, 3]).to.have.lengthOf(3);\n   *     expect('foo').to.have.lengthOf(3);\n   *     expect(new Set([1, 2, 3])).to.have.lengthOf(3);\n   *     expect(new Map([['a', 1], ['b', 2], ['c', 3]])).to.have.lengthOf(3);\n   *\n   * Add `.not` earlier in the chain to negate `.lengthOf`. However, it's often\n   * best to assert that the target's `length` property is equal to its expected\n   * value, rather than not equal to one of many unexpected values.\n   *\n   *     expect('foo').to.have.lengthOf(3); // Recommended\n   *     expect('foo').to.not.have.lengthOf(4); // Not recommended\n   *\n   * `.lengthOf` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect([1, 2, 3]).to.have.lengthOf(2, 'nooo why fail??');\n   *     expect([1, 2, 3], 'nooo why fail??').to.have.lengthOf(2);\n   *\n   * `.lengthOf` can also be used as a language chain, causing all `.above`,\n   * `.below`, `.least`, `.most`, and `.within` assertions that follow in the\n   * chain to use the target's `length` property as the target. However, it's\n   * often best to assert that the target's `length` property is equal to its\n   * expected length, rather than asserting that its `length` property falls\n   * within some range of values.\n   *\n   *     // Recommended\n   *     expect([1, 2, 3]).to.have.lengthOf(3);\n   *\n   *     // Not recommended\n   *     expect([1, 2, 3]).to.have.lengthOf.above(2);\n   *     expect([1, 2, 3]).to.have.lengthOf.below(4);\n   *     expect([1, 2, 3]).to.have.lengthOf.at.least(3);\n   *     expect([1, 2, 3]).to.have.lengthOf.at.most(3);\n   *     expect([1, 2, 3]).to.have.lengthOf.within(2,4);\n   *\n   * Due to a compatibility issue, the alias `.length` can't be chained directly\n   * off of an uninvoked method such as `.a`. Therefore, `.length` can't be used\n   * interchangeably with `.lengthOf` in every situation. It's recommended to\n   * always use `.lengthOf` instead of `.length`.\n   *\n   *     expect([1, 2, 3]).to.have.a.length(3); // incompatible; throws error\n   *     expect([1, 2, 3]).to.have.a.lengthOf(3);  // passes as expected\n   *\n   * @name lengthOf\n   * @alias length\n   * @param {Number} n\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertLengthChain () {\n    flag(this, 'doLength', true);\n  }\n\n  function assertLength (n, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , objType = _.type(obj).toLowerCase()\n      , flagMsg = flag(this, 'message')\n      , ssfi = flag(this, 'ssfi')\n      , descriptor = 'length'\n      , itemsCount;\n\n    switch (objType) {\n      case 'map':\n      case 'set':\n        descriptor = 'size';\n        itemsCount = obj.size;\n        break;\n      default:\n        new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');\n        itemsCount = obj.length;\n    }\n\n    this.assert(\n        itemsCount == n\n      , 'expected #{this} to have a ' + descriptor + ' of #{exp} but got #{act}'\n      , 'expected #{this} to not have a ' + descriptor + ' of #{act}'\n      , n\n      , itemsCount\n    );\n  }\n\n  Assertion.addChainableMethod('length', assertLength, assertLengthChain);\n  Assertion.addChainableMethod('lengthOf', assertLength, assertLengthChain);\n\n  /**\n   * ### .match(re[, msg])\n   *\n   * Asserts that the target matches the given regular expression `re`.\n   *\n   *     expect('foobar').to.match(/^foo/);\n   *\n   * Add `.not` earlier in the chain to negate `.match`.\n   *\n   *     expect('foobar').to.not.match(/taco/);\n   *\n   * `.match` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`.\n   *\n   *     expect('foobar').to.match(/taco/, 'nooo why fail??');\n   *     expect('foobar', 'nooo why fail??').to.match(/taco/);\n   *\n   * The alias `.matches` can be used interchangeably with `.match`.\n   *\n   * @name match\n   * @alias matches\n   * @param {RegExp} re\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n  function assertMatch(re, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    this.assert(\n        re.exec(obj)\n      , 'expected #{this} to match ' + re\n      , 'expected #{this} not to match ' + re\n    );\n  }\n\n  Assertion.addMethod('match', assertMatch);\n  Assertion.addMethod('matches', assertMatch);\n\n  /**\n   * ### .string(str[, msg])\n   *\n   * Asserts that the target string contains the given substring `str`.\n   *\n   *     expect('foobar').to.have.string('bar');\n   *\n   * Add `.not` earlier in the chain to negate `.string`.\n   *\n   *     expect('foobar').to.not.have.string('taco');\n   *\n   * `.string` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect('foobar').to.have.string('taco', 'nooo why fail??');\n   *     expect('foobar', 'nooo why fail??').to.have.string('taco');\n   *\n   * @name string\n   * @param {String} str\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addMethod('string', function (str, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , flagMsg = flag(this, 'message')\n      , ssfi = flag(this, 'ssfi');\n    new Assertion(obj, flagMsg, ssfi, true).is.a('string');\n\n    this.assert(\n        ~obj.indexOf(str)\n      , 'expected #{this} to contain ' + _.inspect(str)\n      , 'expected #{this} to not contain ' + _.inspect(str)\n    );\n  });\n\n  /**\n   * ### .keys(key1[, key2[, ...]])\n   *\n   * Asserts that the target object, array, map, or set has the given keys. Only\n   * the target's own inherited properties are included in the search.\n   *\n   * When the target is an object or array, keys can be provided as one or more\n   * string arguments, a single array argument, or a single object argument. In\n   * the latter case, only the keys in the given object matter; the values are\n   * ignored.\n   *\n   *     expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\n   *     expect(['x', 'y']).to.have.all.keys(0, 1);\n   *\n   *     expect({a: 1, b: 2}).to.have.all.keys(['a', 'b']);\n   *     expect(['x', 'y']).to.have.all.keys([0, 1]);\n   *\n   *     expect({a: 1, b: 2}).to.have.all.keys({a: 4, b: 5}); // ignore 4 and 5\n   *     expect(['x', 'y']).to.have.all.keys({0: 4, 1: 5}); // ignore 4 and 5\n   *\n   * When the target is a map or set, each key must be provided as a separate\n   * argument.\n   *\n   *     expect(new Map([['a', 1], ['b', 2]])).to.have.all.keys('a', 'b');\n   *     expect(new Set(['a', 'b'])).to.have.all.keys('a', 'b');\n   *\n   * Because `.keys` does different things based on the target's type, it's\n   * important to check the target's type before using `.keys`. See the `.a` doc\n   * for info on testing a target's type.\n   *\n   *     expect({a: 1, b: 2}).to.be.an('object').that.has.all.keys('a', 'b');\n   *\n   * By default, strict (`===`) equality is used to compare keys of maps and\n   * sets. Add `.deep` earlier in the chain to use deep equality instead. See\n   * the `deep-eql` project page for info on the deep equality algorithm:\n   * https://github.com/chaijs/deep-eql.\n   *\n   *     // Target set deeply (but not strictly) has key `{a: 1}`\n   *     expect(new Set([{a: 1}])).to.have.all.deep.keys([{a: 1}]);\n   *     expect(new Set([{a: 1}])).to.not.have.all.keys([{a: 1}]);\n   *\n   * By default, the target must have all of the given keys and no more. Add\n   * `.any` earlier in the chain to only require that the target have at least\n   * one of the given keys. Also, add `.not` earlier in the chain to negate\n   * `.keys`. It's often best to add `.any` when negating `.keys`, and to use\n   * `.all` when asserting `.keys` without negation.\n   *\n   * When negating `.keys`, `.any` is preferred because `.not.any.keys` asserts\n   * exactly what's expected of the output, whereas `.not.all.keys` creates\n   * uncertain expectations.\n   *\n   *     // Recommended; asserts that target doesn't have any of the given keys\n   *     expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\n   *\n   *     // Not recommended; asserts that target doesn't have all of the given\n   *     // keys but may or may not have some of them\n   *     expect({a: 1, b: 2}).to.not.have.all.keys('c', 'd');\n   *\n   * When asserting `.keys` without negation, `.all` is preferred because\n   * `.all.keys` asserts exactly what's expected of the output, whereas\n   * `.any.keys` creates uncertain expectations.\n   *\n   *     // Recommended; asserts that target has all the given keys\n   *     expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\n   *\n   *     // Not recommended; asserts that target has at least one of the given\n   *     // keys but may or may not have more of them\n   *     expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\n   *\n   * Note that `.all` is used by default when neither `.all` nor `.any` appear\n   * earlier in the chain. However, it's often best to add `.all` anyway because\n   * it improves readability.\n   *\n   *     // Both assertions are identical\n   *     expect({a: 1, b: 2}).to.have.all.keys('a', 'b'); // Recommended\n   *     expect({a: 1, b: 2}).to.have.keys('a', 'b'); // Not recommended\n   *\n   * Add `.include` earlier in the chain to require that the target's keys be a\n   * superset of the expected keys, rather than identical sets.\n   *\n   *     // Target object's keys are a superset of ['a', 'b'] but not identical\n   *     expect({a: 1, b: 2, c: 3}).to.include.all.keys('a', 'b');\n   *     expect({a: 1, b: 2, c: 3}).to.not.have.all.keys('a', 'b');\n   *\n   * However, if `.any` and `.include` are combined, only the `.any` takes\n   * effect. The `.include` is ignored in this case.\n   *\n   *     // Both assertions are identical\n   *     expect({a: 1}).to.have.any.keys('a', 'b');\n   *     expect({a: 1}).to.include.any.keys('a', 'b');\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect({a: 1}, 'nooo why fail??').to.have.key('b');\n   *\n   * The alias `.key` can be used interchangeably with `.keys`.\n   *\n   * @name keys\n   * @alias key\n   * @param {...String|Array|Object} keys\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertKeys (keys) {\n    var obj = flag(this, 'object')\n      , objType = _.type(obj)\n      , keysType = _.type(keys)\n      , ssfi = flag(this, 'ssfi')\n      , isDeep = flag(this, 'deep')\n      , str\n      , deepStr = ''\n      , actual\n      , ok = true\n      , flagMsg = flag(this, 'message');\n\n    flagMsg = flagMsg ? flagMsg + ': ' : '';\n    var mixedArgsMsg = flagMsg + 'when testing keys against an object or an array you must give a single Array|Object|String argument or multiple String arguments';\n\n    if (objType === 'Map' || objType === 'Set') {\n      deepStr = isDeep ? 'deeply ' : '';\n      actual = [];\n\n      // Map and Set '.keys' aren't supported in IE 11. Therefore, use .forEach.\n      obj.forEach(function (val, key) { actual.push(key) });\n\n      if (keysType !== 'Array') {\n        keys = Array.prototype.slice.call(arguments);\n      }\n    } else {\n      actual = _.getOwnEnumerableProperties(obj);\n\n      switch (keysType) {\n        case 'Array':\n          if (arguments.length > 1) {\n            throw new AssertionError(mixedArgsMsg, undefined, ssfi);\n          }\n          break;\n        case 'Object':\n          if (arguments.length > 1) {\n            throw new AssertionError(mixedArgsMsg, undefined, ssfi);\n          }\n          keys = Object.keys(keys);\n          break;\n        default:\n          keys = Array.prototype.slice.call(arguments);\n      }\n\n      // Only stringify non-Symbols because Symbols would become \"Symbol()\"\n      keys = keys.map(function (val) {\n        return typeof val === 'symbol' ? val : String(val);\n      });\n    }\n\n    if (!keys.length) {\n      throw new AssertionError(flagMsg + 'keys required', undefined, ssfi);\n    }\n\n    var len = keys.length\n      , any = flag(this, 'any')\n      , all = flag(this, 'all')\n      , expected = keys;\n\n    if (!any && !all) {\n      all = true;\n    }\n\n    // Has any\n    if (any) {\n      ok = expected.some(function(expectedKey) {\n        return actual.some(function(actualKey) {\n          if (isDeep) {\n            return _.eql(expectedKey, actualKey);\n          } else {\n            return expectedKey === actualKey;\n          }\n        });\n      });\n    }\n\n    // Has all\n    if (all) {\n      ok = expected.every(function(expectedKey) {\n        return actual.some(function(actualKey) {\n          if (isDeep) {\n            return _.eql(expectedKey, actualKey);\n          } else {\n            return expectedKey === actualKey;\n          }\n        });\n      });\n\n      if (!flag(this, 'contains')) {\n        ok = ok && keys.length == actual.length;\n      }\n    }\n\n    // Key string\n    if (len > 1) {\n      keys = keys.map(function(key) {\n        return _.inspect(key);\n      });\n      var last = keys.pop();\n      if (all) {\n        str = keys.join(', ') + ', and ' + last;\n      }\n      if (any) {\n        str = keys.join(', ') + ', or ' + last;\n      }\n    } else {\n      str = _.inspect(keys[0]);\n    }\n\n    // Form\n    str = (len > 1 ? 'keys ' : 'key ') + str;\n\n    // Have / include\n    str = (flag(this, 'contains') ? 'contain ' : 'have ') + str;\n\n    // Assertion\n    this.assert(\n        ok\n      , 'expected #{this} to ' + deepStr + str\n      , 'expected #{this} to not ' + deepStr + str\n      , expected.slice(0).sort(_.compareByInspect)\n      , actual.sort(_.compareByInspect)\n      , true\n    );\n  }\n\n  Assertion.addMethod('keys', assertKeys);\n  Assertion.addMethod('key', assertKeys);\n\n  /**\n   * ### .throw([errorLike], [errMsgMatcher], [msg])\n   *\n   * When no arguments are provided, `.throw` invokes the target function and\n   * asserts that an error is thrown.\n   *\n   *     var badFn = function () { throw new TypeError('Illegal salmon!'); };\n   *\n   *     expect(badFn).to.throw();\n   *\n   * When one argument is provided, and it's an error constructor, `.throw`\n   * invokes the target function and asserts that an error is thrown that's an\n   * instance of that error constructor.\n   *\n   *     var badFn = function () { throw new TypeError('Illegal salmon!'); };\n   *\n   *     expect(badFn).to.throw(TypeError);\n   *\n   * When one argument is provided, and it's an error instance, `.throw` invokes\n   * the target function and asserts that an error is thrown that's strictly\n   * (`===`) equal to that error instance.\n   *\n   *     var err = new TypeError('Illegal salmon!');\n   *     var badFn = function () { throw err; };\n   *\n   *     expect(badFn).to.throw(err);\n   *\n   * When one argument is provided, and it's a string, `.throw` invokes the\n   * target function and asserts that an error is thrown with a message that\n   * contains that string.\n   *\n   *     var badFn = function () { throw new TypeError('Illegal salmon!'); };\n   *\n   *     expect(badFn).to.throw('salmon');\n   *\n   * When one argument is provided, and it's a regular expression, `.throw`\n   * invokes the target function and asserts that an error is thrown with a\n   * message that matches that regular expression.\n   *\n   *     var badFn = function () { throw new TypeError('Illegal salmon!'); };\n   *\n   *     expect(badFn).to.throw(/salmon/);\n   *\n   * When two arguments are provided, and the first is an error instance or\n   * constructor, and the second is a string or regular expression, `.throw`\n   * invokes the function and asserts that an error is thrown that fulfills both\n   * conditions as described above.\n   *\n   *     var err = new TypeError('Illegal salmon!');\n   *     var badFn = function () { throw err; };\n   *\n   *     expect(badFn).to.throw(TypeError, 'salmon');\n   *     expect(badFn).to.throw(TypeError, /salmon/);\n   *     expect(badFn).to.throw(err, 'salmon');\n   *     expect(badFn).to.throw(err, /salmon/);\n   *\n   * Add `.not` earlier in the chain to negate `.throw`.\n   *\n   *     var goodFn = function () {};\n   *\n   *     expect(goodFn).to.not.throw();\n   *\n   * However, it's dangerous to negate `.throw` when providing any arguments.\n   * The problem is that it creates uncertain expectations by asserting that the\n   * target either doesn't throw an error, or that it throws an error but of a\n   * different type than the given type, or that it throws an error of the given\n   * type but with a message that doesn't include the given string. It's often\n   * best to identify the exact output that's expected, and then write an\n   * assertion that only accepts that exact output.\n   *\n   * When the target isn't expected to throw an error, it's often best to assert\n   * exactly that.\n   *\n   *     var goodFn = function () {};\n   *\n   *     expect(goodFn).to.not.throw(); // Recommended\n   *     expect(goodFn).to.not.throw(ReferenceError, 'x'); // Not recommended\n   *\n   * When the target is expected to throw an error, it's often best to assert\n   * that the error is of its expected type, and has a message that includes an\n   * expected string, rather than asserting that it doesn't have one of many\n   * unexpected types, and doesn't have a message that includes some string.\n   *\n   *     var badFn = function () { throw new TypeError('Illegal salmon!'); };\n   *\n   *     expect(badFn).to.throw(TypeError, 'salmon'); // Recommended\n   *     expect(badFn).to.not.throw(ReferenceError, 'x'); // Not recommended\n   *\n   * `.throw` changes the target of any assertions that follow in the chain to\n   * be the error object that's thrown.\n   *\n   *     var err = new TypeError('Illegal salmon!');\n   *     err.code = 42;\n   *     var badFn = function () { throw err; };\n   *\n   *     expect(badFn).to.throw(TypeError).with.property('code', 42);\n   *\n   * `.throw` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`. When not providing two arguments, always use\n   * the second form.\n   *\n   *     var goodFn = function () {};\n   *\n   *     expect(goodFn).to.throw(TypeError, 'x', 'nooo why fail??');\n   *     expect(goodFn, 'nooo why fail??').to.throw();\n   *\n   * Due to limitations in ES5, `.throw` may not always work as expected when\n   * using a transpiler such as Babel or TypeScript. In particular, it may\n   * produce unexpected results when subclassing the built-in `Error` object and\n   * then passing the subclassed constructor to `.throw`. See your transpiler's\n   * docs for details:\n   *\n   * - ([Babel](https://babeljs.io/docs/usage/caveats/#classes))\n   * - ([TypeScript](https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work))\n   *\n   * Beware of some common mistakes when using the `throw` assertion. One common\n   * mistake is to accidentally invoke the function yourself instead of letting\n   * the `throw` assertion invoke the function for you. For example, when\n   * testing if a function named `fn` throws, provide `fn` instead of `fn()` as\n   * the target for the assertion.\n   *\n   *     expect(fn).to.throw();     // Good! Tests `fn` as desired\n   *     expect(fn()).to.throw();   // Bad! Tests result of `fn()`, not `fn`\n   *\n   * If you need to assert that your function `fn` throws when passed certain\n   * arguments, then wrap a call to `fn` inside of another function.\n   *\n   *     expect(function () { fn(42); }).to.throw();  // Function expression\n   *     expect(() => fn(42)).to.throw();             // ES6 arrow function\n   *\n   * Another common mistake is to provide an object method (or any stand-alone\n   * function that relies on `this`) as the target of the assertion. Doing so is\n   * problematic because the `this` context will be lost when the function is\n   * invoked by `.throw`; there's no way for it to know what `this` is supposed\n   * to be. There are two ways around this problem. One solution is to wrap the\n   * method or function call inside of another function. Another solution is to\n   * use `bind`.\n   *\n   *     expect(function () { cat.meow(); }).to.throw();  // Function expression\n   *     expect(() => cat.meow()).to.throw();             // ES6 arrow function\n   *     expect(cat.meow.bind(cat)).to.throw();           // Bind\n   *\n   * Finally, it's worth mentioning that it's a best practice in JavaScript to\n   * only throw `Error` and derivatives of `Error` such as `ReferenceError`,\n   * `TypeError`, and user-defined objects that extend `Error`. No other type of\n   * value will generate a stack trace when initialized. With that said, the\n   * `throw` assertion does technically support any type of value being thrown,\n   * not just `Error` and its derivatives.\n   *\n   * The aliases `.throws` and `.Throw` can be used interchangeably with\n   * `.throw`.\n   *\n   * @name throw\n   * @alias throws\n   * @alias Throw\n   * @param {Error|ErrorConstructor} errorLike\n   * @param {String|RegExp} errMsgMatcher error message\n   * @param {String} msg _optional_\n   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n   * @returns error for chaining (null if no error)\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertThrows (errorLike, errMsgMatcher, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , ssfi = flag(this, 'ssfi')\n      , flagMsg = flag(this, 'message')\n      , negate = flag(this, 'negate') || false;\n    new Assertion(obj, flagMsg, ssfi, true).is.a('function');\n\n    if (errorLike instanceof RegExp || typeof errorLike === 'string') {\n      errMsgMatcher = errorLike;\n      errorLike = null;\n    }\n\n    var caughtErr;\n    try {\n      obj();\n    } catch (err) {\n      caughtErr = err;\n    }\n\n    // If we have the negate flag enabled and at least one valid argument it means we do expect an error\n    // but we want it to match a given set of criteria\n    var everyArgIsUndefined = errorLike === undefined && errMsgMatcher === undefined;\n\n    // If we've got the negate flag enabled and both args, we should only fail if both aren't compatible\n    // See Issue #551 and PR #683@GitHub\n    var everyArgIsDefined = Boolean(errorLike && errMsgMatcher);\n    var errorLikeFail = false;\n    var errMsgMatcherFail = false;\n\n    // Checking if error was thrown\n    if (everyArgIsUndefined || !everyArgIsUndefined && !negate) {\n      // We need this to display results correctly according to their types\n      var errorLikeString = 'an error';\n      if (errorLike instanceof Error) {\n        errorLikeString = '#{exp}';\n      } else if (errorLike) {\n        errorLikeString = _.checkError.getConstructorName(errorLike);\n      }\n\n      this.assert(\n          caughtErr\n        , 'expected #{this} to throw ' + errorLikeString\n        , 'expected #{this} to not throw an error but #{act} was thrown'\n        , errorLike && errorLike.toString()\n        , (caughtErr instanceof Error ?\n            caughtErr.toString() : (typeof caughtErr === 'string' ? caughtErr : caughtErr &&\n                                    _.checkError.getConstructorName(caughtErr)))\n      );\n    }\n\n    if (errorLike && caughtErr) {\n      // We should compare instances only if `errorLike` is an instance of `Error`\n      if (errorLike instanceof Error) {\n        var isCompatibleInstance = _.checkError.compatibleInstance(caughtErr, errorLike);\n\n        if (isCompatibleInstance === negate) {\n          // These checks were created to ensure we won't fail too soon when we've got both args and a negate\n          // See Issue #551 and PR #683@GitHub\n          if (everyArgIsDefined && negate) {\n            errorLikeFail = true;\n          } else {\n            this.assert(\n                negate\n              , 'expected #{this} to throw #{exp} but #{act} was thrown'\n              , 'expected #{this} to not throw #{exp}' + (caughtErr && !negate ? ' but #{act} was thrown' : '')\n              , errorLike.toString()\n              , caughtErr.toString()\n            );\n          }\n        }\n      }\n\n      var isCompatibleConstructor = _.checkError.compatibleConstructor(caughtErr, errorLike);\n      if (isCompatibleConstructor === negate) {\n        if (everyArgIsDefined && negate) {\n            errorLikeFail = true;\n        } else {\n          this.assert(\n              negate\n            , 'expected #{this} to throw #{exp} but #{act} was thrown'\n            , 'expected #{this} to not throw #{exp}' + (caughtErr ? ' but #{act} was thrown' : '')\n            , (errorLike instanceof Error ? errorLike.toString() : errorLike && _.checkError.getConstructorName(errorLike))\n            , (caughtErr instanceof Error ? caughtErr.toString() : caughtErr && _.checkError.getConstructorName(caughtErr))\n          );\n        }\n      }\n    }\n\n    if (caughtErr && errMsgMatcher !== undefined && errMsgMatcher !== null) {\n      // Here we check compatible messages\n      var placeholder = 'including';\n      if (errMsgMatcher instanceof RegExp) {\n        placeholder = 'matching'\n      }\n\n      var isCompatibleMessage = _.checkError.compatibleMessage(caughtErr, errMsgMatcher);\n      if (isCompatibleMessage === negate) {\n        if (everyArgIsDefined && negate) {\n            errMsgMatcherFail = true;\n        } else {\n          this.assert(\n            negate\n            , 'expected #{this} to throw error ' + placeholder + ' #{exp} but got #{act}'\n            , 'expected #{this} to throw error not ' + placeholder + ' #{exp}'\n            ,  errMsgMatcher\n            ,  _.checkError.getMessage(caughtErr)\n          );\n        }\n      }\n    }\n\n    // If both assertions failed and both should've matched we throw an error\n    if (errorLikeFail && errMsgMatcherFail) {\n      this.assert(\n        negate\n        , 'expected #{this} to throw #{exp} but #{act} was thrown'\n        , 'expected #{this} to not throw #{exp}' + (caughtErr ? ' but #{act} was thrown' : '')\n        , (errorLike instanceof Error ? errorLike.toString() : errorLike && _.checkError.getConstructorName(errorLike))\n        , (caughtErr instanceof Error ? caughtErr.toString() : caughtErr && _.checkError.getConstructorName(caughtErr))\n      );\n    }\n\n    flag(this, 'object', caughtErr);\n  };\n\n  Assertion.addMethod('throw', assertThrows);\n  Assertion.addMethod('throws', assertThrows);\n  Assertion.addMethod('Throw', assertThrows);\n\n  /**\n   * ### .respondTo(method[, msg])\n   *\n   * When the target is a non-function object, `.respondTo` asserts that the\n   * target has a method with the given name `method`. The method can be own or\n   * inherited, and it can be enumerable or non-enumerable.\n   *\n   *     function Cat () {}\n   *     Cat.prototype.meow = function () {};\n   *\n   *     expect(new Cat()).to.respondTo('meow');\n   *\n   * When the target is a function, `.respondTo` asserts that the target's\n   * `prototype` property has a method with the given name `method`. Again, the\n   * method can be own or inherited, and it can be enumerable or non-enumerable.\n   *\n   *     function Cat () {}\n   *     Cat.prototype.meow = function () {};\n   *\n   *     expect(Cat).to.respondTo('meow');\n   *\n   * Add `.itself` earlier in the chain to force `.respondTo` to treat the\n   * target as a non-function object, even if it's a function. Thus, it asserts\n   * that the target has a method with the given name `method`, rather than\n   * asserting that the target's `prototype` property has a method with the\n   * given name `method`.\n   *\n   *     function Cat () {}\n   *     Cat.prototype.meow = function () {};\n   *     Cat.hiss = function () {};\n   *\n   *     expect(Cat).itself.to.respondTo('hiss').but.not.respondTo('meow');\n   *\n   * When not adding `.itself`, it's important to check the target's type before\n   * using `.respondTo`. See the `.a` doc for info on checking a target's type.\n   *\n   *     function Cat () {}\n   *     Cat.prototype.meow = function () {};\n   *\n   *     expect(new Cat()).to.be.an('object').that.respondsTo('meow');\n   *\n   * Add `.not` earlier in the chain to negate `.respondTo`.\n   *\n   *     function Dog () {}\n   *     Dog.prototype.bark = function () {};\n   *\n   *     expect(new Dog()).to.not.respondTo('meow');\n   *\n   * `.respondTo` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect({}).to.respondTo('meow', 'nooo why fail??');\n   *     expect({}, 'nooo why fail??').to.respondTo('meow');\n   *\n   * The alias `.respondsTo` can be used interchangeably with `.respondTo`.\n   *\n   * @name respondTo\n   * @alias respondsTo\n   * @param {String} method\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function respondTo (method, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , itself = flag(this, 'itself')\n      , context = ('function' === typeof obj && !itself)\n        ? obj.prototype[method]\n        : obj[method];\n\n    this.assert(\n        'function' === typeof context\n      , 'expected #{this} to respond to ' + _.inspect(method)\n      , 'expected #{this} to not respond to ' + _.inspect(method)\n    );\n  }\n\n  Assertion.addMethod('respondTo', respondTo);\n  Assertion.addMethod('respondsTo', respondTo);\n\n  /**\n   * ### .itself\n   *\n   * Forces all `.respondTo` assertions that follow in the chain to behave as if\n   * the target is a non-function object, even if it's a function. Thus, it\n   * causes `.respondTo` to assert that the target has a method with the given\n   * name, rather than asserting that the target's `prototype` property has a\n   * method with the given name.\n   *\n   *     function Cat () {}\n   *     Cat.prototype.meow = function () {};\n   *     Cat.hiss = function () {};\n   *\n   *     expect(Cat).itself.to.respondTo('hiss').but.not.respondTo('meow');\n   *\n   * @name itself\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('itself', function () {\n    flag(this, 'itself', true);\n  });\n\n  /**\n   * ### .satisfy(matcher[, msg])\n   *\n   * Invokes the given `matcher` function with the target being passed as the\n   * first argument, and asserts that the value returned is truthy.\n   *\n   *     expect(1).to.satisfy(function(num) {\n   *       return num > 0;\n   *     });\n   *\n   * Add `.not` earlier in the chain to negate `.satisfy`.\n   *\n   *     expect(1).to.not.satisfy(function(num) {\n   *       return num > 2;\n   *     });\n   *\n   * `.satisfy` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect(1).to.satisfy(function(num) {\n   *       return num > 2;\n   *     }, 'nooo why fail??');\n   *\n   *     expect(1, 'nooo why fail??').to.satisfy(function(num) {\n   *       return num > 2;\n   *     });\n   *\n   * The alias `.satisfies` can be used interchangeably with `.satisfy`.\n   *\n   * @name satisfy\n   * @alias satisfies\n   * @param {Function} matcher\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function satisfy (matcher, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    var result = matcher(obj);\n    this.assert(\n        result\n      , 'expected #{this} to satisfy ' + _.objDisplay(matcher)\n      , 'expected #{this} to not satisfy' + _.objDisplay(matcher)\n      , flag(this, 'negate') ? false : true\n      , result\n    );\n  }\n\n  Assertion.addMethod('satisfy', satisfy);\n  Assertion.addMethod('satisfies', satisfy);\n\n  /**\n   * ### .closeTo(expected, delta[, msg])\n   *\n   * Asserts that the target is a number that's within a given +/- `delta` range\n   * of the given number `expected`. However, it's often best to assert that the\n   * target is equal to its expected value.\n   *\n   *     // Recommended\n   *     expect(1.5).to.equal(1.5);\n   *\n   *     // Not recommended\n   *     expect(1.5).to.be.closeTo(1, 0.5);\n   *     expect(1.5).to.be.closeTo(2, 0.5);\n   *     expect(1.5).to.be.closeTo(1, 1);\n   *\n   * Add `.not` earlier in the chain to negate `.closeTo`.\n   *\n   *     expect(1.5).to.equal(1.5); // Recommended\n   *     expect(1.5).to.not.be.closeTo(3, 1); // Not recommended\n   *\n   * `.closeTo` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect(1.5).to.be.closeTo(3, 1, 'nooo why fail??');\n   *     expect(1.5, 'nooo why fail??').to.be.closeTo(3, 1);\n   *\n   * The alias `.approximately` can be used interchangeably with `.closeTo`.\n   *\n   * @name closeTo\n   * @alias approximately\n   * @param {Number} expected\n   * @param {Number} delta\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function closeTo(expected, delta, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , flagMsg = flag(this, 'message')\n      , ssfi = flag(this, 'ssfi');\n\n    new Assertion(obj, flagMsg, ssfi, true).is.a('number');\n    if (typeof expected !== 'number' || typeof delta !== 'number') {\n      flagMsg = flagMsg ? flagMsg + ': ' : '';\n      var deltaMessage = delta === undefined ? \", and a delta is required\" : \"\";\n      throw new AssertionError(\n          flagMsg + 'the arguments to closeTo or approximately must be numbers' + deltaMessage,\n          undefined,\n          ssfi\n      );\n    }\n\n    this.assert(\n        Math.abs(obj - expected) <= delta\n      , 'expected #{this} to be close to ' + expected + ' +/- ' + delta\n      , 'expected #{this} not to be close to ' + expected + ' +/- ' + delta\n    );\n  }\n\n  Assertion.addMethod('closeTo', closeTo);\n  Assertion.addMethod('approximately', closeTo);\n\n  // Note: Duplicates are ignored if testing for inclusion instead of sameness.\n  function isSubsetOf(subset, superset, cmp, contains, ordered) {\n    if (!contains) {\n      if (subset.length !== superset.length) return false;\n      superset = superset.slice();\n    }\n\n    return subset.every(function(elem, idx) {\n      if (ordered) return cmp ? cmp(elem, superset[idx]) : elem === superset[idx];\n\n      if (!cmp) {\n        var matchIdx = superset.indexOf(elem);\n        if (matchIdx === -1) return false;\n\n        // Remove match from superset so not counted twice if duplicate in subset.\n        if (!contains) superset.splice(matchIdx, 1);\n        return true;\n      }\n\n      return superset.some(function(elem2, matchIdx) {\n        if (!cmp(elem, elem2)) return false;\n\n        // Remove match from superset so not counted twice if duplicate in subset.\n        if (!contains) superset.splice(matchIdx, 1);\n        return true;\n      });\n    });\n  }\n\n  /**\n   * ### .members(set[, msg])\n   *\n   * Asserts that the target array has the same members as the given array\n   * `set`.\n   *\n   *     expect([1, 2, 3]).to.have.members([2, 1, 3]);\n   *     expect([1, 2, 2]).to.have.members([2, 1, 2]);\n   *\n   * By default, members are compared using strict (`===`) equality. Add `.deep`\n   * earlier in the chain to use deep equality instead. See the `deep-eql`\n   * project page for info on the deep equality algorithm:\n   * https://github.com/chaijs/deep-eql.\n   *\n   *     // Target array deeply (but not strictly) has member `{a: 1}`\n   *     expect([{a: 1}]).to.have.deep.members([{a: 1}]);\n   *     expect([{a: 1}]).to.not.have.members([{a: 1}]);\n   *\n   * By default, order doesn't matter. Add `.ordered` earlier in the chain to\n   * require that members appear in the same order.\n   *\n   *     expect([1, 2, 3]).to.have.ordered.members([1, 2, 3]);\n   *     expect([1, 2, 3]).to.have.members([2, 1, 3])\n   *       .but.not.ordered.members([2, 1, 3]);\n   *\n   * By default, both arrays must be the same size. Add `.include` earlier in\n   * the chain to require that the target's members be a superset of the\n   * expected members. Note that duplicates are ignored in the subset when\n   * `.include` is added.\n   *\n   *     // Target array is a superset of [1, 2] but not identical\n   *     expect([1, 2, 3]).to.include.members([1, 2]);\n   *     expect([1, 2, 3]).to.not.have.members([1, 2]);\n   *\n   *     // Duplicates in the subset are ignored\n   *     expect([1, 2, 3]).to.include.members([1, 2, 2, 2]);\n   *\n   * `.deep`, `.ordered`, and `.include` can all be combined. However, if\n   * `.include` and `.ordered` are combined, the ordering begins at the start of\n   * both arrays.\n   *\n   *     expect([{a: 1}, {b: 2}, {c: 3}])\n   *       .to.include.deep.ordered.members([{a: 1}, {b: 2}])\n   *       .but.not.include.deep.ordered.members([{b: 2}, {c: 3}]);\n   *\n   * Add `.not` earlier in the chain to negate `.members`. However, it's\n   * dangerous to do so. The problem is that it creates uncertain expectations\n   * by asserting that the target array doesn't have all of the same members as\n   * the given array `set` but may or may not have some of them. It's often best\n   * to identify the exact output that's expected, and then write an assertion\n   * that only accepts that exact output.\n   *\n   *     expect([1, 2]).to.not.include(3).and.not.include(4); // Recommended\n   *     expect([1, 2]).to.not.have.members([3, 4]); // Not recommended\n   *\n   * `.members` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect([1, 2]).to.have.members([1, 2, 3], 'nooo why fail??');\n   *     expect([1, 2], 'nooo why fail??').to.have.members([1, 2, 3]);\n   *\n   * @name members\n   * @param {Array} set\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addMethod('members', function (subset, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , flagMsg = flag(this, 'message')\n      , ssfi = flag(this, 'ssfi');\n\n    new Assertion(obj, flagMsg, ssfi, true).to.be.an('array');\n    new Assertion(subset, flagMsg, ssfi, true).to.be.an('array');\n\n    var contains = flag(this, 'contains');\n    var ordered = flag(this, 'ordered');\n\n    var subject, failMsg, failNegateMsg;\n\n    if (contains) {\n      subject = ordered ? 'an ordered superset' : 'a superset';\n      failMsg = 'expected #{this} to be ' + subject + ' of #{exp}';\n      failNegateMsg = 'expected #{this} to not be ' + subject + ' of #{exp}';\n    } else {\n      subject = ordered ? 'ordered members' : 'members';\n      failMsg = 'expected #{this} to have the same ' + subject + ' as #{exp}';\n      failNegateMsg = 'expected #{this} to not have the same ' + subject + ' as #{exp}';\n    }\n\n    var cmp = flag(this, 'deep') ? _.eql : undefined;\n\n    this.assert(\n        isSubsetOf(subset, obj, cmp, contains, ordered)\n      , failMsg\n      , failNegateMsg\n      , subset\n      , obj\n      , true\n    );\n  });\n\n  /**\n   * ### .oneOf(list[, msg])\n   *\n   * Asserts that the target is a member of the given array `list`. However,\n   * it's often best to assert that the target is equal to its expected value.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.be.oneOf([1, 2, 3]); // Not recommended\n   *\n   * Comparisons are performed using strict (`===`) equality.\n   *\n   * Add `.not` earlier in the chain to negate `.oneOf`.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.not.be.oneOf([2, 3, 4]); // Not recommended\n   *\n   * It can also be chained with `.contain` or `.include`, which will work with\n   * both arrays and strings:\n   *\n   *     expect('Today is sunny').to.contain.oneOf(['sunny', 'cloudy'])\n   *     expect('Today is rainy').to.not.contain.oneOf(['sunny', 'cloudy'])\n   *     expect([1,2,3]).to.contain.oneOf([3,4,5])\n   *     expect([1,2,3]).to.not.contain.oneOf([4,5,6])\n   *\n   * `.oneOf` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`.\n   *\n   *     expect(1).to.be.oneOf([2, 3, 4], 'nooo why fail??');\n   *     expect(1, 'nooo why fail??').to.be.oneOf([2, 3, 4]);\n   *\n   * @name oneOf\n   * @param {Array<*>} list\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function oneOf (list, msg) {\n    if (msg) flag(this, 'message', msg);\n    var expected = flag(this, 'object')\n      , flagMsg = flag(this, 'message')\n      , ssfi = flag(this, 'ssfi')\n      , contains = flag(this, 'contains')\n      , isDeep = flag(this, 'deep');\n    new Assertion(list, flagMsg, ssfi, true).to.be.an('array');\n\n    if (contains) {\n      this.assert(\n        list.some(function(possibility) { return expected.indexOf(possibility) > -1 })\n        , 'expected #{this} to contain one of #{exp}'\n        , 'expected #{this} to not contain one of #{exp}'\n        , list\n        , expected\n      );\n    } else {\n      if (isDeep) {\n        this.assert(\n          list.some(function(possibility) { return _.eql(expected, possibility) })\n          , 'expected #{this} to deeply equal one of #{exp}'\n          , 'expected #{this} to deeply equal one of #{exp}'\n          , list\n          , expected\n        );\n      } else {\n        this.assert(\n          list.indexOf(expected) > -1\n          , 'expected #{this} to be one of #{exp}'\n          , 'expected #{this} to not be one of #{exp}'\n          , list\n          , expected\n        );\n      }\n    }\n  }\n\n  Assertion.addMethod('oneOf', oneOf);\n\n  /**\n   * ### .change(subject[, prop[, msg]])\n   *\n   * When one argument is provided, `.change` asserts that the given function\n   * `subject` returns a different value when it's invoked before the target\n   * function compared to when it's invoked afterward. However, it's often best\n   * to assert that `subject` is equal to its expected value.\n   *\n   *     var dots = ''\n   *       , addDot = function () { dots += '.'; }\n   *       , getDots = function () { return dots; };\n   *\n   *     // Recommended\n   *     expect(getDots()).to.equal('');\n   *     addDot();\n   *     expect(getDots()).to.equal('.');\n   *\n   *     // Not recommended\n   *     expect(addDot).to.change(getDots);\n   *\n   * When two arguments are provided, `.change` asserts that the value of the\n   * given object `subject`'s `prop` property is different before invoking the\n   * target function compared to afterward.\n   *\n   *     var myObj = {dots: ''}\n   *       , addDot = function () { myObj.dots += '.'; };\n   *\n   *     // Recommended\n   *     expect(myObj).to.have.property('dots', '');\n   *     addDot();\n   *     expect(myObj).to.have.property('dots', '.');\n   *\n   *     // Not recommended\n   *     expect(addDot).to.change(myObj, 'dots');\n   *\n   * Strict (`===`) equality is used to compare before and after values.\n   *\n   * Add `.not` earlier in the chain to negate `.change`.\n   *\n   *     var dots = ''\n   *       , noop = function () {}\n   *       , getDots = function () { return dots; };\n   *\n   *     expect(noop).to.not.change(getDots);\n   *\n   *     var myObj = {dots: ''}\n   *       , noop = function () {};\n   *\n   *     expect(noop).to.not.change(myObj, 'dots');\n   *\n   * `.change` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`. When not providing two arguments, always\n   * use the second form.\n   *\n   *     var myObj = {dots: ''}\n   *       , addDot = function () { myObj.dots += '.'; };\n   *\n   *     expect(addDot).to.not.change(myObj, 'dots', 'nooo why fail??');\n   *\n   *     var dots = ''\n   *       , addDot = function () { dots += '.'; }\n   *       , getDots = function () { return dots; };\n   *\n   *     expect(addDot, 'nooo why fail??').to.not.change(getDots);\n   *\n   * `.change` also causes all `.by` assertions that follow in the chain to\n   * assert how much a numeric subject was increased or decreased by. However,\n   * it's dangerous to use `.change.by`. The problem is that it creates\n   * uncertain expectations by asserting that the subject either increases by\n   * the given delta, or that it decreases by the given delta. It's often best\n   * to identify the exact output that's expected, and then write an assertion\n   * that only accepts that exact output.\n   *\n   *     var myObj = {val: 1}\n   *       , addTwo = function () { myObj.val += 2; }\n   *       , subtractTwo = function () { myObj.val -= 2; };\n   *\n   *     expect(addTwo).to.increase(myObj, 'val').by(2); // Recommended\n   *     expect(addTwo).to.change(myObj, 'val').by(2); // Not recommended\n   *\n   *     expect(subtractTwo).to.decrease(myObj, 'val').by(2); // Recommended\n   *     expect(subtractTwo).to.change(myObj, 'val').by(2); // Not recommended\n   *\n   * The alias `.changes` can be used interchangeably with `.change`.\n   *\n   * @name change\n   * @alias changes\n   * @param {String} subject\n   * @param {String} prop name _optional_\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertChanges (subject, prop, msg) {\n    if (msg) flag(this, 'message', msg);\n    var fn = flag(this, 'object')\n      , flagMsg = flag(this, 'message')\n      , ssfi = flag(this, 'ssfi');\n    new Assertion(fn, flagMsg, ssfi, true).is.a('function');\n\n    var initial;\n    if (!prop) {\n      new Assertion(subject, flagMsg, ssfi, true).is.a('function');\n      initial = subject();\n    } else {\n      new Assertion(subject, flagMsg, ssfi, true).to.have.property(prop);\n      initial = subject[prop];\n    }\n\n    fn();\n\n    var final = prop === undefined || prop === null ? subject() : subject[prop];\n    var msgObj = prop === undefined || prop === null ? initial : '.' + prop;\n\n    // This gets flagged because of the .by(delta) assertion\n    flag(this, 'deltaMsgObj', msgObj);\n    flag(this, 'initialDeltaValue', initial);\n    flag(this, 'finalDeltaValue', final);\n    flag(this, 'deltaBehavior', 'change');\n    flag(this, 'realDelta', final !== initial);\n\n    this.assert(\n      initial !== final\n      , 'expected ' + msgObj + ' to change'\n      , 'expected ' + msgObj + ' to not change'\n    );\n  }\n\n  Assertion.addMethod('change', assertChanges);\n  Assertion.addMethod('changes', assertChanges);\n\n  /**\n   * ### .increase(subject[, prop[, msg]])\n   *\n   * When one argument is provided, `.increase` asserts that the given function\n   * `subject` returns a greater number when it's invoked after invoking the\n   * target function compared to when it's invoked beforehand. `.increase` also\n   * causes all `.by` assertions that follow in the chain to assert how much\n   * greater of a number is returned. It's often best to assert that the return\n   * value increased by the expected amount, rather than asserting it increased\n   * by any amount.\n   *\n   *     var val = 1\n   *       , addTwo = function () { val += 2; }\n   *       , getVal = function () { return val; };\n   *\n   *     expect(addTwo).to.increase(getVal).by(2); // Recommended\n   *     expect(addTwo).to.increase(getVal); // Not recommended\n   *\n   * When two arguments are provided, `.increase` asserts that the value of the\n   * given object `subject`'s `prop` property is greater after invoking the\n   * target function compared to beforehand.\n   *\n   *     var myObj = {val: 1}\n   *       , addTwo = function () { myObj.val += 2; };\n   *\n   *     expect(addTwo).to.increase(myObj, 'val').by(2); // Recommended\n   *     expect(addTwo).to.increase(myObj, 'val'); // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.increase`. However, it's\n   * dangerous to do so. The problem is that it creates uncertain expectations\n   * by asserting that the subject either decreases, or that it stays the same.\n   * It's often best to identify the exact output that's expected, and then\n   * write an assertion that only accepts that exact output.\n   *\n   * When the subject is expected to decrease, it's often best to assert that it\n   * decreased by the expected amount.\n   *\n   *     var myObj = {val: 1}\n   *       , subtractTwo = function () { myObj.val -= 2; };\n   *\n   *     expect(subtractTwo).to.decrease(myObj, 'val').by(2); // Recommended\n   *     expect(subtractTwo).to.not.increase(myObj, 'val'); // Not recommended\n   *\n   * When the subject is expected to stay the same, it's often best to assert\n   * exactly that.\n   *\n   *     var myObj = {val: 1}\n   *       , noop = function () {};\n   *\n   *     expect(noop).to.not.change(myObj, 'val'); // Recommended\n   *     expect(noop).to.not.increase(myObj, 'val'); // Not recommended\n   *\n   * `.increase` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`. When not providing two arguments, always\n   * use the second form.\n   *\n   *     var myObj = {val: 1}\n   *       , noop = function () {};\n   *\n   *     expect(noop).to.increase(myObj, 'val', 'nooo why fail??');\n   *\n   *     var val = 1\n   *       , noop = function () {}\n   *       , getVal = function () { return val; };\n   *\n   *     expect(noop, 'nooo why fail??').to.increase(getVal);\n   *\n   * The alias `.increases` can be used interchangeably with `.increase`.\n   *\n   * @name increase\n   * @alias increases\n   * @param {String|Function} subject\n   * @param {String} prop name _optional_\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertIncreases (subject, prop, msg) {\n    if (msg) flag(this, 'message', msg);\n    var fn = flag(this, 'object')\n      , flagMsg = flag(this, 'message')\n      , ssfi = flag(this, 'ssfi');\n    new Assertion(fn, flagMsg, ssfi, true).is.a('function');\n\n    var initial;\n    if (!prop) {\n      new Assertion(subject, flagMsg, ssfi, true).is.a('function');\n      initial = subject();\n    } else {\n      new Assertion(subject, flagMsg, ssfi, true).to.have.property(prop);\n      initial = subject[prop];\n    }\n\n    // Make sure that the target is a number\n    new Assertion(initial, flagMsg, ssfi, true).is.a('number');\n\n    fn();\n\n    var final = prop === undefined || prop === null ? subject() : subject[prop];\n    var msgObj = prop === undefined || prop === null ? initial : '.' + prop;\n\n    flag(this, 'deltaMsgObj', msgObj);\n    flag(this, 'initialDeltaValue', initial);\n    flag(this, 'finalDeltaValue', final);\n    flag(this, 'deltaBehavior', 'increase');\n    flag(this, 'realDelta', final - initial);\n\n    this.assert(\n      final - initial > 0\n      , 'expected ' + msgObj + ' to increase'\n      , 'expected ' + msgObj + ' to not increase'\n    );\n  }\n\n  Assertion.addMethod('increase', assertIncreases);\n  Assertion.addMethod('increases', assertIncreases);\n\n  /**\n   * ### .decrease(subject[, prop[, msg]])\n   *\n   * When one argument is provided, `.decrease` asserts that the given function\n   * `subject` returns a lesser number when it's invoked after invoking the\n   * target function compared to when it's invoked beforehand. `.decrease` also\n   * causes all `.by` assertions that follow in the chain to assert how much\n   * lesser of a number is returned. It's often best to assert that the return\n   * value decreased by the expected amount, rather than asserting it decreased\n   * by any amount.\n   *\n   *     var val = 1\n   *       , subtractTwo = function () { val -= 2; }\n   *       , getVal = function () { return val; };\n   *\n   *     expect(subtractTwo).to.decrease(getVal).by(2); // Recommended\n   *     expect(subtractTwo).to.decrease(getVal); // Not recommended\n   *\n   * When two arguments are provided, `.decrease` asserts that the value of the\n   * given object `subject`'s `prop` property is lesser after invoking the\n   * target function compared to beforehand.\n   *\n   *     var myObj = {val: 1}\n   *       , subtractTwo = function () { myObj.val -= 2; };\n   *\n   *     expect(subtractTwo).to.decrease(myObj, 'val').by(2); // Recommended\n   *     expect(subtractTwo).to.decrease(myObj, 'val'); // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.decrease`. However, it's\n   * dangerous to do so. The problem is that it creates uncertain expectations\n   * by asserting that the subject either increases, or that it stays the same.\n   * It's often best to identify the exact output that's expected, and then\n   * write an assertion that only accepts that exact output.\n   *\n   * When the subject is expected to increase, it's often best to assert that it\n   * increased by the expected amount.\n   *\n   *     var myObj = {val: 1}\n   *       , addTwo = function () { myObj.val += 2; };\n   *\n   *     expect(addTwo).to.increase(myObj, 'val').by(2); // Recommended\n   *     expect(addTwo).to.not.decrease(myObj, 'val'); // Not recommended\n   *\n   * When the subject is expected to stay the same, it's often best to assert\n   * exactly that.\n   *\n   *     var myObj = {val: 1}\n   *       , noop = function () {};\n   *\n   *     expect(noop).to.not.change(myObj, 'val'); // Recommended\n   *     expect(noop).to.not.decrease(myObj, 'val'); // Not recommended\n   *\n   * `.decrease` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`. When not providing two arguments, always\n   * use the second form.\n   *\n   *     var myObj = {val: 1}\n   *       , noop = function () {};\n   *\n   *     expect(noop).to.decrease(myObj, 'val', 'nooo why fail??');\n   *\n   *     var val = 1\n   *       , noop = function () {}\n   *       , getVal = function () { return val; };\n   *\n   *     expect(noop, 'nooo why fail??').to.decrease(getVal);\n   *\n   * The alias `.decreases` can be used interchangeably with `.decrease`.\n   *\n   * @name decrease\n   * @alias decreases\n   * @param {String|Function} subject\n   * @param {String} prop name _optional_\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertDecreases (subject, prop, msg) {\n    if (msg) flag(this, 'message', msg);\n    var fn = flag(this, 'object')\n      , flagMsg = flag(this, 'message')\n      , ssfi = flag(this, 'ssfi');\n    new Assertion(fn, flagMsg, ssfi, true).is.a('function');\n\n    var initial;\n    if (!prop) {\n      new Assertion(subject, flagMsg, ssfi, true).is.a('function');\n      initial = subject();\n    } else {\n      new Assertion(subject, flagMsg, ssfi, true).to.have.property(prop);\n      initial = subject[prop];\n    }\n\n    // Make sure that the target is a number\n    new Assertion(initial, flagMsg, ssfi, true).is.a('number');\n\n    fn();\n\n    var final = prop === undefined || prop === null ? subject() : subject[prop];\n    var msgObj = prop === undefined || prop === null ? initial : '.' + prop;\n\n    flag(this, 'deltaMsgObj', msgObj);\n    flag(this, 'initialDeltaValue', initial);\n    flag(this, 'finalDeltaValue', final);\n    flag(this, 'deltaBehavior', 'decrease');\n    flag(this, 'realDelta', initial - final);\n\n    this.assert(\n      final - initial < 0\n      , 'expected ' + msgObj + ' to decrease'\n      , 'expected ' + msgObj + ' to not decrease'\n    );\n  }\n\n  Assertion.addMethod('decrease', assertDecreases);\n  Assertion.addMethod('decreases', assertDecreases);\n\n  /**\n   * ### .by(delta[, msg])\n   *\n   * When following an `.increase` assertion in the chain, `.by` asserts that\n   * the subject of the `.increase` assertion increased by the given `delta`.\n   *\n   *     var myObj = {val: 1}\n   *       , addTwo = function () { myObj.val += 2; };\n   *\n   *     expect(addTwo).to.increase(myObj, 'val').by(2);\n   *\n   * When following a `.decrease` assertion in the chain, `.by` asserts that the\n   * subject of the `.decrease` assertion decreased by the given `delta`.\n   *\n   *     var myObj = {val: 1}\n   *       , subtractTwo = function () { myObj.val -= 2; };\n   *\n   *     expect(subtractTwo).to.decrease(myObj, 'val').by(2);\n   *\n   * When following a `.change` assertion in the chain, `.by` asserts that the\n   * subject of the `.change` assertion either increased or decreased by the\n   * given `delta`. However, it's dangerous to use `.change.by`. The problem is\n   * that it creates uncertain expectations. It's often best to identify the\n   * exact output that's expected, and then write an assertion that only accepts\n   * that exact output.\n   *\n   *     var myObj = {val: 1}\n   *       , addTwo = function () { myObj.val += 2; }\n   *       , subtractTwo = function () { myObj.val -= 2; };\n   *\n   *     expect(addTwo).to.increase(myObj, 'val').by(2); // Recommended\n   *     expect(addTwo).to.change(myObj, 'val').by(2); // Not recommended\n   *\n   *     expect(subtractTwo).to.decrease(myObj, 'val').by(2); // Recommended\n   *     expect(subtractTwo).to.change(myObj, 'val').by(2); // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.by`. However, it's often best\n   * to assert that the subject changed by its expected delta, rather than\n   * asserting that it didn't change by one of countless unexpected deltas.\n   *\n   *     var myObj = {val: 1}\n   *       , addTwo = function () { myObj.val += 2; };\n   *\n   *     // Recommended\n   *     expect(addTwo).to.increase(myObj, 'val').by(2);\n   *\n   *     // Not recommended\n   *     expect(addTwo).to.increase(myObj, 'val').but.not.by(3);\n   *\n   * `.by` accepts an optional `msg` argument which is a custom error message to\n   * show when the assertion fails. The message can also be given as the second\n   * argument to `expect`.\n   *\n   *     var myObj = {val: 1}\n   *       , addTwo = function () { myObj.val += 2; };\n   *\n   *     expect(addTwo).to.increase(myObj, 'val').by(3, 'nooo why fail??');\n   *     expect(addTwo, 'nooo why fail??').to.increase(myObj, 'val').by(3);\n   *\n   * @name by\n   * @param {Number} delta\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertDelta(delta, msg) {\n    if (msg) flag(this, 'message', msg);\n\n    var msgObj = flag(this, 'deltaMsgObj');\n    var initial = flag(this, 'initialDeltaValue');\n    var final = flag(this, 'finalDeltaValue');\n    var behavior = flag(this, 'deltaBehavior');\n    var realDelta = flag(this, 'realDelta');\n\n    var expression;\n    if (behavior === 'change') {\n      expression = Math.abs(final - initial) === Math.abs(delta);\n    } else {\n      expression = realDelta === Math.abs(delta);\n    }\n\n    this.assert(\n      expression\n      , 'expected ' + msgObj + ' to ' + behavior + ' by ' + delta\n      , 'expected ' + msgObj + ' to not ' + behavior + ' by ' + delta\n    );\n  }\n\n  Assertion.addMethod('by', assertDelta);\n\n  /**\n   * ### .extensible\n   *\n   * Asserts that the target is extensible, which means that new properties can\n   * be added to it. Primitives are never extensible.\n   *\n   *     expect({a: 1}).to.be.extensible;\n   *\n   * Add `.not` earlier in the chain to negate `.extensible`.\n   *\n   *     var nonExtensibleObject = Object.preventExtensions({})\n   *       , sealedObject = Object.seal({})\n   *       , frozenObject = Object.freeze({});\n   *\n   *     expect(nonExtensibleObject).to.not.be.extensible;\n   *     expect(sealedObject).to.not.be.extensible;\n   *     expect(frozenObject).to.not.be.extensible;\n   *     expect(1).to.not.be.extensible;\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect(1, 'nooo why fail??').to.be.extensible;\n   *\n   * @name extensible\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('extensible', function() {\n    var obj = flag(this, 'object');\n\n    // In ES5, if the argument to this method is a primitive, then it will cause a TypeError.\n    // In ES6, a non-object argument will be treated as if it was a non-extensible ordinary object, simply return false.\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isExtensible\n    // The following provides ES6 behavior for ES5 environments.\n\n    var isExtensible = obj === Object(obj) && Object.isExtensible(obj);\n\n    this.assert(\n      isExtensible\n      , 'expected #{this} to be extensible'\n      , 'expected #{this} to not be extensible'\n    );\n  });\n\n  /**\n   * ### .sealed\n   *\n   * Asserts that the target is sealed, which means that new properties can't be\n   * added to it, and its existing properties can't be reconfigured or deleted.\n   * However, it's possible that its existing properties can still be reassigned\n   * to different values. Primitives are always sealed.\n   *\n   *     var sealedObject = Object.seal({});\n   *     var frozenObject = Object.freeze({});\n   *\n   *     expect(sealedObject).to.be.sealed;\n   *     expect(frozenObject).to.be.sealed;\n   *     expect(1).to.be.sealed;\n   *\n   * Add `.not` earlier in the chain to negate `.sealed`.\n   *\n   *     expect({a: 1}).to.not.be.sealed;\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect({a: 1}, 'nooo why fail??').to.be.sealed;\n   *\n   * @name sealed\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('sealed', function() {\n    var obj = flag(this, 'object');\n\n    // In ES5, if the argument to this method is a primitive, then it will cause a TypeError.\n    // In ES6, a non-object argument will be treated as if it was a sealed ordinary object, simply return true.\n    // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isSealed\n    // The following provides ES6 behavior for ES5 environments.\n\n    var isSealed = obj === Object(obj) ? Object.isSealed(obj) : true;\n\n    this.assert(\n      isSealed\n      , 'expected #{this} to be sealed'\n      , 'expected #{this} to not be sealed'\n    );\n  });\n\n  /**\n   * ### .frozen\n   *\n   * Asserts that the target is frozen, which means that new properties can't be\n   * added to it, and its existing properties can't be reassigned to different\n   * values, reconfigured, or deleted. Primitives are always frozen.\n   *\n   *     var frozenObject = Object.freeze({});\n   *\n   *     expect(frozenObject).to.be.frozen;\n   *     expect(1).to.be.frozen;\n   *\n   * Add `.not` earlier in the chain to negate `.frozen`.\n   *\n   *     expect({a: 1}).to.not.be.frozen;\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect({a: 1}, 'nooo why fail??').to.be.frozen;\n   *\n   * @name frozen\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('frozen', function() {\n    var obj = flag(this, 'object');\n\n    // In ES5, if the argument to this method is a primitive, then it will cause a TypeError.\n    // In ES6, a non-object argument will be treated as if it was a frozen ordinary object, simply return true.\n    // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isFrozen\n    // The following provides ES6 behavior for ES5 environments.\n\n    var isFrozen = obj === Object(obj) ? Object.isFrozen(obj) : true;\n\n    this.assert(\n      isFrozen\n      , 'expected #{this} to be frozen'\n      , 'expected #{this} to not be frozen'\n    );\n  });\n\n  /**\n   * ### .finite\n   *\n   * Asserts that the target is a number, and isn't `NaN` or positive/negative\n   * `Infinity`.\n   *\n   *     expect(1).to.be.finite;\n   *\n   * Add `.not` earlier in the chain to negate `.finite`. However, it's\n   * dangerous to do so. The problem is that it creates uncertain expectations\n   * by asserting that the subject either isn't a number, or that it's `NaN`, or\n   * that it's positive `Infinity`, or that it's negative `Infinity`. It's often\n   * best to identify the exact output that's expected, and then write an\n   * assertion that only accepts that exact output.\n   *\n   * When the target isn't expected to be a number, it's often best to assert\n   * that it's the expected type, rather than asserting that it isn't one of\n   * many unexpected types.\n   *\n   *     expect('foo').to.be.a('string'); // Recommended\n   *     expect('foo').to.not.be.finite; // Not recommended\n   *\n   * When the target is expected to be `NaN`, it's often best to assert exactly\n   * that.\n   *\n   *     expect(NaN).to.be.NaN; // Recommended\n   *     expect(NaN).to.not.be.finite; // Not recommended\n   *\n   * When the target is expected to be positive infinity, it's often best to\n   * assert exactly that.\n   *\n   *     expect(Infinity).to.equal(Infinity); // Recommended\n   *     expect(Infinity).to.not.be.finite; // Not recommended\n   *\n   * When the target is expected to be negative infinity, it's often best to\n   * assert exactly that.\n   *\n   *     expect(-Infinity).to.equal(-Infinity); // Recommended\n   *     expect(-Infinity).to.not.be.finite; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect('foo', 'nooo why fail??').to.be.finite;\n   *\n   * @name finite\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('finite', function(msg) {\n    var obj = flag(this, 'object');\n\n    this.assert(\n        typeof obj === 'number' && isFinite(obj)\n      , 'expected #{this} to be a finite number'\n      , 'expected #{this} to not be a finite number'\n    );\n  });\n};\n","/*!\n * chai\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nmodule.exports = function (chai, util) {\n  chai.expect = function (val, message) {\n    return new chai.Assertion(val, message);\n  };\n\n  /**\n   * ### .fail([message])\n   * ### .fail(actual, expected, [message], [operator])\n   *\n   * Throw a failure.\n   *\n   *     expect.fail();\n   *     expect.fail(\"custom error message\");\n   *     expect.fail(1, 2);\n   *     expect.fail(1, 2, \"custom error message\");\n   *     expect.fail(1, 2, \"custom error message\", \">\");\n   *     expect.fail(1, 2, undefined, \">\");\n   *\n   * @name fail\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @param {String} operator\n   * @namespace BDD\n   * @api public\n   */\n\n  chai.expect.fail = function (actual, expected, message, operator) {\n    if (arguments.length < 2) {\n        message = actual;\n        actual = undefined;\n    }\n\n    message = message || 'expect.fail()';\n    throw new chai.AssertionError(message, {\n        actual: actual\n      , expected: expected\n      , operator: operator\n    }, chai.expect.fail);\n  };\n};\n","/*!\n * chai\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nmodule.exports = function (chai, util) {\n  var Assertion = chai.Assertion;\n\n  function loadShould () {\n    // explicitly define this method as function as to have it's name to include as `ssfi`\n    function shouldGetter() {\n      if (this instanceof String\n          || this instanceof Number\n          || this instanceof Boolean\n          || typeof Symbol === 'function' && this instanceof Symbol\n          || typeof BigInt === 'function' && this instanceof BigInt) {\n        return new Assertion(this.valueOf(), null, shouldGetter);\n      }\n      return new Assertion(this, null, shouldGetter);\n    }\n    function shouldSetter(value) {\n      // See https://github.com/chaijs/chai/issues/86: this makes\n      // `whatever.should = someValue` actually set `someValue`, which is\n      // especially useful for `global.should = require('chai').should()`.\n      //\n      // Note that we have to use [[DefineProperty]] instead of [[Put]]\n      // since otherwise we would trigger this very setter!\n      Object.defineProperty(this, 'should', {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n      });\n    }\n    // modify Object.prototype to have `should`\n    Object.defineProperty(Object.prototype, 'should', {\n      set: shouldSetter\n      , get: shouldGetter\n      , configurable: true\n    });\n\n    var should = {};\n\n    /**\n     * ### .fail([message])\n     * ### .fail(actual, expected, [message], [operator])\n     *\n     * Throw a failure.\n     *\n     *     should.fail();\n     *     should.fail(\"custom error message\");\n     *     should.fail(1, 2);\n     *     should.fail(1, 2, \"custom error message\");\n     *     should.fail(1, 2, \"custom error message\", \">\");\n     *     should.fail(1, 2, undefined, \">\");\n     *\n     *\n     * @name fail\n     * @param {Mixed} actual\n     * @param {Mixed} expected\n     * @param {String} message\n     * @param {String} operator\n     * @namespace BDD\n     * @api public\n     */\n\n    should.fail = function (actual, expected, message, operator) {\n      if (arguments.length < 2) {\n          message = actual;\n          actual = undefined;\n      }\n\n      message = message || 'should.fail()';\n      throw new chai.AssertionError(message, {\n          actual: actual\n        , expected: expected\n        , operator: operator\n      }, should.fail);\n    };\n\n    /**\n     * ### .equal(actual, expected, [message])\n     *\n     * Asserts non-strict equality (`==`) of `actual` and `expected`.\n     *\n     *     should.equal(3, '3', '== coerces values to strings');\n     *\n     * @name equal\n     * @param {Mixed} actual\n     * @param {Mixed} expected\n     * @param {String} message\n     * @namespace Should\n     * @api public\n     */\n\n    should.equal = function (val1, val2, msg) {\n      new Assertion(val1, msg).to.equal(val2);\n    };\n\n    /**\n     * ### .throw(function, [constructor/string/regexp], [string/regexp], [message])\n     *\n     * Asserts that `function` will throw an error that is an instance of\n     * `constructor`, or alternately that it will throw an error with message\n     * matching `regexp`.\n     *\n     *     should.throw(fn, 'function throws a reference error');\n     *     should.throw(fn, /function throws a reference error/);\n     *     should.throw(fn, ReferenceError);\n     *     should.throw(fn, ReferenceError, 'function throws a reference error');\n     *     should.throw(fn, ReferenceError, /function throws a reference error/);\n     *\n     * @name throw\n     * @alias Throw\n     * @param {Function} function\n     * @param {ErrorConstructor} constructor\n     * @param {RegExp} regexp\n     * @param {String} message\n     * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n     * @namespace Should\n     * @api public\n     */\n\n    should.Throw = function (fn, errt, errs, msg) {\n      new Assertion(fn, msg).to.Throw(errt, errs);\n    };\n\n    /**\n     * ### .exist\n     *\n     * Asserts that the target is neither `null` nor `undefined`.\n     *\n     *     var foo = 'hi';\n     *\n     *     should.exist(foo, 'foo exists');\n     *\n     * @name exist\n     * @namespace Should\n     * @api public\n     */\n\n    should.exist = function (val, msg) {\n      new Assertion(val, msg).to.exist;\n    }\n\n    // negation\n    should.not = {}\n\n    /**\n     * ### .not.equal(actual, expected, [message])\n     *\n     * Asserts non-strict inequality (`!=`) of `actual` and `expected`.\n     *\n     *     should.not.equal(3, 4, 'these numbers are not equal');\n     *\n     * @name not.equal\n     * @param {Mixed} actual\n     * @param {Mixed} expected\n     * @param {String} message\n     * @namespace Should\n     * @api public\n     */\n\n    should.not.equal = function (val1, val2, msg) {\n      new Assertion(val1, msg).to.not.equal(val2);\n    };\n\n    /**\n     * ### .throw(function, [constructor/regexp], [message])\n     *\n     * Asserts that `function` will _not_ throw an error that is an instance of\n     * `constructor`, or alternately that it will not throw an error with message\n     * matching `regexp`.\n     *\n     *     should.not.throw(fn, Error, 'function does not throw');\n     *\n     * @name not.throw\n     * @alias not.Throw\n     * @param {Function} function\n     * @param {ErrorConstructor} constructor\n     * @param {RegExp} regexp\n     * @param {String} message\n     * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n     * @namespace Should\n     * @api public\n     */\n\n    should.not.Throw = function (fn, errt, errs, msg) {\n      new Assertion(fn, msg).to.not.Throw(errt, errs);\n    };\n\n    /**\n     * ### .not.exist\n     *\n     * Asserts that the target is neither `null` nor `undefined`.\n     *\n     *     var bar = null;\n     *\n     *     should.not.exist(bar, 'bar does not exist');\n     *\n     * @name not.exist\n     * @namespace Should\n     * @api public\n     */\n\n    should.not.exist = function (val, msg) {\n      new Assertion(val, msg).to.not.exist;\n    }\n\n    should['throw'] = should['Throw'];\n    should.not['throw'] = should.not['Throw'];\n\n    return should;\n  };\n\n  chai.should = loadShould;\n  chai.Should = loadShould;\n};\n","/*!\n * chai\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nmodule.exports = function (chai, util) {\n  /*!\n   * Chai dependencies.\n   */\n\n  var Assertion = chai.Assertion\n    , flag = util.flag;\n\n  /*!\n   * Module export.\n   */\n\n  /**\n   * ### assert(expression, message)\n   *\n   * Write your own test expressions.\n   *\n   *     assert('foo' !== 'bar', 'foo is not bar');\n   *     assert(Array.isArray([]), 'empty arrays are arrays');\n   *\n   * @param {Mixed} expression to test for truthiness\n   * @param {String} message to display on error\n   * @name assert\n   * @namespace Assert\n   * @api public\n   */\n\n  var assert = chai.assert = function (express, errmsg) {\n    var test = new Assertion(null, null, chai.assert, true);\n    test.assert(\n        express\n      , errmsg\n      , '[ negation message unavailable ]'\n    );\n  };\n\n  /**\n   * ### .fail([message])\n   * ### .fail(actual, expected, [message], [operator])\n   *\n   * Throw a failure. Node.js `assert` module-compatible.\n   *\n   *     assert.fail();\n   *     assert.fail(\"custom error message\");\n   *     assert.fail(1, 2);\n   *     assert.fail(1, 2, \"custom error message\");\n   *     assert.fail(1, 2, \"custom error message\", \">\");\n   *     assert.fail(1, 2, undefined, \">\");\n   *\n   * @name fail\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @param {String} operator\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.fail = function (actual, expected, message, operator) {\n    if (arguments.length < 2) {\n        // Comply with Node's fail([message]) interface\n\n        message = actual;\n        actual = undefined;\n    }\n\n    message = message || 'assert.fail()';\n    throw new chai.AssertionError(message, {\n        actual: actual\n      , expected: expected\n      , operator: operator\n    }, assert.fail);\n  };\n\n  /**\n   * ### .isOk(object, [message])\n   *\n   * Asserts that `object` is truthy.\n   *\n   *     assert.isOk('everything', 'everything is ok');\n   *     assert.isOk(false, 'this will fail');\n   *\n   * @name isOk\n   * @alias ok\n   * @param {Mixed} object to test\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isOk = function (val, msg) {\n    new Assertion(val, msg, assert.isOk, true).is.ok;\n  };\n\n  /**\n   * ### .isNotOk(object, [message])\n   *\n   * Asserts that `object` is falsy.\n   *\n   *     assert.isNotOk('everything', 'this will fail');\n   *     assert.isNotOk(false, 'this will pass');\n   *\n   * @name isNotOk\n   * @alias notOk\n   * @param {Mixed} object to test\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotOk = function (val, msg) {\n    new Assertion(val, msg, assert.isNotOk, true).is.not.ok;\n  };\n\n  /**\n   * ### .equal(actual, expected, [message])\n   *\n   * Asserts non-strict equality (`==`) of `actual` and `expected`.\n   *\n   *     assert.equal(3, '3', '== coerces values to strings');\n   *\n   * @name equal\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.equal = function (act, exp, msg) {\n    var test = new Assertion(act, msg, assert.equal, true);\n\n    test.assert(\n        exp == flag(test, 'object')\n      , 'expected #{this} to equal #{exp}'\n      , 'expected #{this} to not equal #{act}'\n      , exp\n      , act\n      , true\n    );\n  };\n\n  /**\n   * ### .notEqual(actual, expected, [message])\n   *\n   * Asserts non-strict inequality (`!=`) of `actual` and `expected`.\n   *\n   *     assert.notEqual(3, 4, 'these numbers are not equal');\n   *\n   * @name notEqual\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notEqual = function (act, exp, msg) {\n    var test = new Assertion(act, msg, assert.notEqual, true);\n\n    test.assert(\n        exp != flag(test, 'object')\n      , 'expected #{this} to not equal #{exp}'\n      , 'expected #{this} to equal #{act}'\n      , exp\n      , act\n      , true\n    );\n  };\n\n  /**\n   * ### .strictEqual(actual, expected, [message])\n   *\n   * Asserts strict equality (`===`) of `actual` and `expected`.\n   *\n   *     assert.strictEqual(true, true, 'these booleans are strictly equal');\n   *\n   * @name strictEqual\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.strictEqual = function (act, exp, msg) {\n    new Assertion(act, msg, assert.strictEqual, true).to.equal(exp);\n  };\n\n  /**\n   * ### .notStrictEqual(actual, expected, [message])\n   *\n   * Asserts strict inequality (`!==`) of `actual` and `expected`.\n   *\n   *     assert.notStrictEqual(3, '3', 'no coercion for strict equality');\n   *\n   * @name notStrictEqual\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notStrictEqual = function (act, exp, msg) {\n    new Assertion(act, msg, assert.notStrictEqual, true).to.not.equal(exp);\n  };\n\n  /**\n   * ### .deepEqual(actual, expected, [message])\n   *\n   * Asserts that `actual` is deeply equal to `expected`.\n   *\n   *     assert.deepEqual({ tea: 'green' }, { tea: 'green' });\n   *\n   * @name deepEqual\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @alias deepStrictEqual\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.deepEqual = assert.deepStrictEqual = function (act, exp, msg) {\n    new Assertion(act, msg, assert.deepEqual, true).to.eql(exp);\n  };\n\n  /**\n   * ### .notDeepEqual(actual, expected, [message])\n   *\n   * Assert that `actual` is not deeply equal to `expected`.\n   *\n   *     assert.notDeepEqual({ tea: 'green' }, { tea: 'jasmine' });\n   *\n   * @name notDeepEqual\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notDeepEqual = function (act, exp, msg) {\n    new Assertion(act, msg, assert.notDeepEqual, true).to.not.eql(exp);\n  };\n\n   /**\n   * ### .isAbove(valueToCheck, valueToBeAbove, [message])\n   *\n   * Asserts `valueToCheck` is strictly greater than (>) `valueToBeAbove`.\n   *\n   *     assert.isAbove(5, 2, '5 is strictly greater than 2');\n   *\n   * @name isAbove\n   * @param {Mixed} valueToCheck\n   * @param {Mixed} valueToBeAbove\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isAbove = function (val, abv, msg) {\n    new Assertion(val, msg, assert.isAbove, true).to.be.above(abv);\n  };\n\n   /**\n   * ### .isAtLeast(valueToCheck, valueToBeAtLeast, [message])\n   *\n   * Asserts `valueToCheck` is greater than or equal to (>=) `valueToBeAtLeast`.\n   *\n   *     assert.isAtLeast(5, 2, '5 is greater or equal to 2');\n   *     assert.isAtLeast(3, 3, '3 is greater or equal to 3');\n   *\n   * @name isAtLeast\n   * @param {Mixed} valueToCheck\n   * @param {Mixed} valueToBeAtLeast\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isAtLeast = function (val, atlst, msg) {\n    new Assertion(val, msg, assert.isAtLeast, true).to.be.least(atlst);\n  };\n\n   /**\n   * ### .isBelow(valueToCheck, valueToBeBelow, [message])\n   *\n   * Asserts `valueToCheck` is strictly less than (<) `valueToBeBelow`.\n   *\n   *     assert.isBelow(3, 6, '3 is strictly less than 6');\n   *\n   * @name isBelow\n   * @param {Mixed} valueToCheck\n   * @param {Mixed} valueToBeBelow\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isBelow = function (val, blw, msg) {\n    new Assertion(val, msg, assert.isBelow, true).to.be.below(blw);\n  };\n\n   /**\n   * ### .isAtMost(valueToCheck, valueToBeAtMost, [message])\n   *\n   * Asserts `valueToCheck` is less than or equal to (<=) `valueToBeAtMost`.\n   *\n   *     assert.isAtMost(3, 6, '3 is less than or equal to 6');\n   *     assert.isAtMost(4, 4, '4 is less than or equal to 4');\n   *\n   * @name isAtMost\n   * @param {Mixed} valueToCheck\n   * @param {Mixed} valueToBeAtMost\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isAtMost = function (val, atmst, msg) {\n    new Assertion(val, msg, assert.isAtMost, true).to.be.most(atmst);\n  };\n\n  /**\n   * ### .isTrue(value, [message])\n   *\n   * Asserts that `value` is true.\n   *\n   *     var teaServed = true;\n   *     assert.isTrue(teaServed, 'the tea has been served');\n   *\n   * @name isTrue\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isTrue = function (val, msg) {\n    new Assertion(val, msg, assert.isTrue, true).is['true'];\n  };\n\n  /**\n   * ### .isNotTrue(value, [message])\n   *\n   * Asserts that `value` is not true.\n   *\n   *     var tea = 'tasty chai';\n   *     assert.isNotTrue(tea, 'great, time for tea!');\n   *\n   * @name isNotTrue\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotTrue = function (val, msg) {\n    new Assertion(val, msg, assert.isNotTrue, true).to.not.equal(true);\n  };\n\n  /**\n   * ### .isFalse(value, [message])\n   *\n   * Asserts that `value` is false.\n   *\n   *     var teaServed = false;\n   *     assert.isFalse(teaServed, 'no tea yet? hmm...');\n   *\n   * @name isFalse\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isFalse = function (val, msg) {\n    new Assertion(val, msg, assert.isFalse, true).is['false'];\n  };\n\n  /**\n   * ### .isNotFalse(value, [message])\n   *\n   * Asserts that `value` is not false.\n   *\n   *     var tea = 'tasty chai';\n   *     assert.isNotFalse(tea, 'great, time for tea!');\n   *\n   * @name isNotFalse\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotFalse = function (val, msg) {\n    new Assertion(val, msg, assert.isNotFalse, true).to.not.equal(false);\n  };\n\n  /**\n   * ### .isNull(value, [message])\n   *\n   * Asserts that `value` is null.\n   *\n   *     assert.isNull(err, 'there was no error');\n   *\n   * @name isNull\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNull = function (val, msg) {\n    new Assertion(val, msg, assert.isNull, true).to.equal(null);\n  };\n\n  /**\n   * ### .isNotNull(value, [message])\n   *\n   * Asserts that `value` is not null.\n   *\n   *     var tea = 'tasty chai';\n   *     assert.isNotNull(tea, 'great, time for tea!');\n   *\n   * @name isNotNull\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotNull = function (val, msg) {\n    new Assertion(val, msg, assert.isNotNull, true).to.not.equal(null);\n  };\n\n  /**\n   * ### .isNaN\n   *\n   * Asserts that value is NaN.\n   *\n   *     assert.isNaN(NaN, 'NaN is NaN');\n   *\n   * @name isNaN\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNaN = function (val, msg) {\n    new Assertion(val, msg, assert.isNaN, true).to.be.NaN;\n  };\n\n  /**\n   * ### .isNotNaN\n   *\n   * Asserts that value is not NaN.\n   *\n   *     assert.isNotNaN(4, '4 is not NaN');\n   *\n   * @name isNotNaN\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n  assert.isNotNaN = function (val, msg) {\n    new Assertion(val, msg, assert.isNotNaN, true).not.to.be.NaN;\n  };\n\n  /**\n   * ### .exists\n   *\n   * Asserts that the target is neither `null` nor `undefined`.\n   *\n   *     var foo = 'hi';\n   *\n   *     assert.exists(foo, 'foo is neither `null` nor `undefined`');\n   *\n   * @name exists\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.exists = function (val, msg) {\n    new Assertion(val, msg, assert.exists, true).to.exist;\n  };\n\n  /**\n   * ### .notExists\n   *\n   * Asserts that the target is either `null` or `undefined`.\n   *\n   *     var bar = null\n   *       , baz;\n   *\n   *     assert.notExists(bar);\n   *     assert.notExists(baz, 'baz is either null or undefined');\n   *\n   * @name notExists\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notExists = function (val, msg) {\n    new Assertion(val, msg, assert.notExists, true).to.not.exist;\n  };\n\n  /**\n   * ### .isUndefined(value, [message])\n   *\n   * Asserts that `value` is `undefined`.\n   *\n   *     var tea;\n   *     assert.isUndefined(tea, 'no tea defined');\n   *\n   * @name isUndefined\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isUndefined = function (val, msg) {\n    new Assertion(val, msg, assert.isUndefined, true).to.equal(undefined);\n  };\n\n  /**\n   * ### .isDefined(value, [message])\n   *\n   * Asserts that `value` is not `undefined`.\n   *\n   *     var tea = 'cup of chai';\n   *     assert.isDefined(tea, 'tea has been defined');\n   *\n   * @name isDefined\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isDefined = function (val, msg) {\n    new Assertion(val, msg, assert.isDefined, true).to.not.equal(undefined);\n  };\n\n  /**\n   * ### .isFunction(value, [message])\n   *\n   * Asserts that `value` is a function.\n   *\n   *     function serveTea() { return 'cup of tea'; };\n   *     assert.isFunction(serveTea, 'great, we can have tea now');\n   *\n   * @name isFunction\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isFunction = function (val, msg) {\n    new Assertion(val, msg, assert.isFunction, true).to.be.a('function');\n  };\n\n  /**\n   * ### .isNotFunction(value, [message])\n   *\n   * Asserts that `value` is _not_ a function.\n   *\n   *     var serveTea = [ 'heat', 'pour', 'sip' ];\n   *     assert.isNotFunction(serveTea, 'great, we have listed the steps');\n   *\n   * @name isNotFunction\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotFunction = function (val, msg) {\n    new Assertion(val, msg, assert.isNotFunction, true).to.not.be.a('function');\n  };\n\n  /**\n   * ### .isObject(value, [message])\n   *\n   * Asserts that `value` is an object of type 'Object' (as revealed by `Object.prototype.toString`).\n   * _The assertion does not match subclassed objects._\n   *\n   *     var selection = { name: 'Chai', serve: 'with spices' };\n   *     assert.isObject(selection, 'tea selection is an object');\n   *\n   * @name isObject\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isObject = function (val, msg) {\n    new Assertion(val, msg, assert.isObject, true).to.be.a('object');\n  };\n\n  /**\n   * ### .isNotObject(value, [message])\n   *\n   * Asserts that `value` is _not_ an object of type 'Object' (as revealed by `Object.prototype.toString`).\n   *\n   *     var selection = 'chai'\n   *     assert.isNotObject(selection, 'tea selection is not an object');\n   *     assert.isNotObject(null, 'null is not an object');\n   *\n   * @name isNotObject\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotObject = function (val, msg) {\n    new Assertion(val, msg, assert.isNotObject, true).to.not.be.a('object');\n  };\n\n  /**\n   * ### .isArray(value, [message])\n   *\n   * Asserts that `value` is an array.\n   *\n   *     var menu = [ 'green', 'chai', 'oolong' ];\n   *     assert.isArray(menu, 'what kind of tea do we want?');\n   *\n   * @name isArray\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isArray = function (val, msg) {\n    new Assertion(val, msg, assert.isArray, true).to.be.an('array');\n  };\n\n  /**\n   * ### .isNotArray(value, [message])\n   *\n   * Asserts that `value` is _not_ an array.\n   *\n   *     var menu = 'green|chai|oolong';\n   *     assert.isNotArray(menu, 'what kind of tea do we want?');\n   *\n   * @name isNotArray\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotArray = function (val, msg) {\n    new Assertion(val, msg, assert.isNotArray, true).to.not.be.an('array');\n  };\n\n  /**\n   * ### .isString(value, [message])\n   *\n   * Asserts that `value` is a string.\n   *\n   *     var teaOrder = 'chai';\n   *     assert.isString(teaOrder, 'order placed');\n   *\n   * @name isString\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isString = function (val, msg) {\n    new Assertion(val, msg, assert.isString, true).to.be.a('string');\n  };\n\n  /**\n   * ### .isNotString(value, [message])\n   *\n   * Asserts that `value` is _not_ a string.\n   *\n   *     var teaOrder = 4;\n   *     assert.isNotString(teaOrder, 'order placed');\n   *\n   * @name isNotString\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotString = function (val, msg) {\n    new Assertion(val, msg, assert.isNotString, true).to.not.be.a('string');\n  };\n\n  /**\n   * ### .isNumber(value, [message])\n   *\n   * Asserts that `value` is a number.\n   *\n   *     var cups = 2;\n   *     assert.isNumber(cups, 'how many cups');\n   *\n   * @name isNumber\n   * @param {Number} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNumber = function (val, msg) {\n    new Assertion(val, msg, assert.isNumber, true).to.be.a('number');\n  };\n\n  /**\n   * ### .isNotNumber(value, [message])\n   *\n   * Asserts that `value` is _not_ a number.\n   *\n   *     var cups = '2 cups please';\n   *     assert.isNotNumber(cups, 'how many cups');\n   *\n   * @name isNotNumber\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotNumber = function (val, msg) {\n    new Assertion(val, msg, assert.isNotNumber, true).to.not.be.a('number');\n  };\n\n   /**\n   * ### .isFinite(value, [message])\n   *\n   * Asserts that `value` is a finite number. Unlike `.isNumber`, this will fail for `NaN` and `Infinity`.\n   *\n   *     var cups = 2;\n   *     assert.isFinite(cups, 'how many cups');\n   *\n   *     assert.isFinite(NaN); // throws\n   *\n   * @name isFinite\n   * @param {Number} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isFinite = function (val, msg) {\n    new Assertion(val, msg, assert.isFinite, true).to.be.finite;\n  };\n\n  /**\n   * ### .isBoolean(value, [message])\n   *\n   * Asserts that `value` is a boolean.\n   *\n   *     var teaReady = true\n   *       , teaServed = false;\n   *\n   *     assert.isBoolean(teaReady, 'is the tea ready');\n   *     assert.isBoolean(teaServed, 'has tea been served');\n   *\n   * @name isBoolean\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isBoolean = function (val, msg) {\n    new Assertion(val, msg, assert.isBoolean, true).to.be.a('boolean');\n  };\n\n  /**\n   * ### .isNotBoolean(value, [message])\n   *\n   * Asserts that `value` is _not_ a boolean.\n   *\n   *     var teaReady = 'yep'\n   *       , teaServed = 'nope';\n   *\n   *     assert.isNotBoolean(teaReady, 'is the tea ready');\n   *     assert.isNotBoolean(teaServed, 'has tea been served');\n   *\n   * @name isNotBoolean\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotBoolean = function (val, msg) {\n    new Assertion(val, msg, assert.isNotBoolean, true).to.not.be.a('boolean');\n  };\n\n  /**\n   * ### .typeOf(value, name, [message])\n   *\n   * Asserts that `value`'s type is `name`, as determined by\n   * `Object.prototype.toString`.\n   *\n   *     assert.typeOf({ tea: 'chai' }, 'object', 'we have an object');\n   *     assert.typeOf(['chai', 'jasmine'], 'array', 'we have an array');\n   *     assert.typeOf('tea', 'string', 'we have a string');\n   *     assert.typeOf(/tea/, 'regexp', 'we have a regular expression');\n   *     assert.typeOf(null, 'null', 'we have a null');\n   *     assert.typeOf(undefined, 'undefined', 'we have an undefined');\n   *\n   * @name typeOf\n   * @param {Mixed} value\n   * @param {String} name\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.typeOf = function (val, type, msg) {\n    new Assertion(val, msg, assert.typeOf, true).to.be.a(type);\n  };\n\n  /**\n   * ### .notTypeOf(value, name, [message])\n   *\n   * Asserts that `value`'s type is _not_ `name`, as determined by\n   * `Object.prototype.toString`.\n   *\n   *     assert.notTypeOf('tea', 'number', 'strings are not numbers');\n   *\n   * @name notTypeOf\n   * @param {Mixed} value\n   * @param {String} typeof name\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notTypeOf = function (val, type, msg) {\n    new Assertion(val, msg, assert.notTypeOf, true).to.not.be.a(type);\n  };\n\n  /**\n   * ### .instanceOf(object, constructor, [message])\n   *\n   * Asserts that `value` is an instance of `constructor`.\n   *\n   *     var Tea = function (name) { this.name = name; }\n   *       , chai = new Tea('chai');\n   *\n   *     assert.instanceOf(chai, Tea, 'chai is an instance of tea');\n   *\n   * @name instanceOf\n   * @param {Object} object\n   * @param {Constructor} constructor\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.instanceOf = function (val, type, msg) {\n    new Assertion(val, msg, assert.instanceOf, true).to.be.instanceOf(type);\n  };\n\n  /**\n   * ### .notInstanceOf(object, constructor, [message])\n   *\n   * Asserts `value` is not an instance of `constructor`.\n   *\n   *     var Tea = function (name) { this.name = name; }\n   *       , chai = new String('chai');\n   *\n   *     assert.notInstanceOf(chai, Tea, 'chai is not an instance of tea');\n   *\n   * @name notInstanceOf\n   * @param {Object} object\n   * @param {Constructor} constructor\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notInstanceOf = function (val, type, msg) {\n    new Assertion(val, msg, assert.notInstanceOf, true)\n      .to.not.be.instanceOf(type);\n  };\n\n  /**\n   * ### .include(haystack, needle, [message])\n   *\n   * Asserts that `haystack` includes `needle`. Can be used to assert the\n   * inclusion of a value in an array, a substring in a string, or a subset of\n   * properties in an object.\n   *\n   *     assert.include([1,2,3], 2, 'array contains value');\n   *     assert.include('foobar', 'foo', 'string contains substring');\n   *     assert.include({ foo: 'bar', hello: 'universe' }, { foo: 'bar' }, 'object contains property');\n   *\n   * Strict equality (===) is used. When asserting the inclusion of a value in\n   * an array, the array is searched for an element that's strictly equal to the\n   * given value. When asserting a subset of properties in an object, the object\n   * is searched for the given property keys, checking that each one is present\n   * and strictly equal to the given property value. For instance:\n   *\n   *     var obj1 = {a: 1}\n   *       , obj2 = {b: 2};\n   *     assert.include([obj1, obj2], obj1);\n   *     assert.include({foo: obj1, bar: obj2}, {foo: obj1});\n   *     assert.include({foo: obj1, bar: obj2}, {foo: obj1, bar: obj2});\n   *\n   * @name include\n   * @param {Array|String} haystack\n   * @param {Mixed} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.include = function (exp, inc, msg) {\n    new Assertion(exp, msg, assert.include, true).include(inc);\n  };\n\n  /**\n   * ### .notInclude(haystack, needle, [message])\n   *\n   * Asserts that `haystack` does not include `needle`. Can be used to assert\n   * the absence of a value in an array, a substring in a string, or a subset of\n   * properties in an object.\n   *\n   *     assert.notInclude([1,2,3], 4, \"array doesn't contain value\");\n   *     assert.notInclude('foobar', 'baz', \"string doesn't contain substring\");\n   *     assert.notInclude({ foo: 'bar', hello: 'universe' }, { foo: 'baz' }, 'object doesn't contain property');\n   *\n   * Strict equality (===) is used. When asserting the absence of a value in an\n   * array, the array is searched to confirm the absence of an element that's\n   * strictly equal to the given value. When asserting a subset of properties in\n   * an object, the object is searched to confirm that at least one of the given\n   * property keys is either not present or not strictly equal to the given\n   * property value. For instance:\n   *\n   *     var obj1 = {a: 1}\n   *       , obj2 = {b: 2};\n   *     assert.notInclude([obj1, obj2], {a: 1});\n   *     assert.notInclude({foo: obj1, bar: obj2}, {foo: {a: 1}});\n   *     assert.notInclude({foo: obj1, bar: obj2}, {foo: obj1, bar: {b: 2}});\n   *\n   * @name notInclude\n   * @param {Array|String} haystack\n   * @param {Mixed} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notInclude = function (exp, inc, msg) {\n    new Assertion(exp, msg, assert.notInclude, true).not.include(inc);\n  };\n\n  /**\n   * ### .deepInclude(haystack, needle, [message])\n   *\n   * Asserts that `haystack` includes `needle`. Can be used to assert the\n   * inclusion of a value in an array or a subset of properties in an object.\n   * Deep equality is used.\n   *\n   *     var obj1 = {a: 1}\n   *       , obj2 = {b: 2};\n   *     assert.deepInclude([obj1, obj2], {a: 1});\n   *     assert.deepInclude({foo: obj1, bar: obj2}, {foo: {a: 1}});\n   *     assert.deepInclude({foo: obj1, bar: obj2}, {foo: {a: 1}, bar: {b: 2}});\n   *\n   * @name deepInclude\n   * @param {Array|String} haystack\n   * @param {Mixed} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.deepInclude = function (exp, inc, msg) {\n    new Assertion(exp, msg, assert.deepInclude, true).deep.include(inc);\n  };\n\n  /**\n   * ### .notDeepInclude(haystack, needle, [message])\n   *\n   * Asserts that `haystack` does not include `needle`. Can be used to assert\n   * the absence of a value in an array or a subset of properties in an object.\n   * Deep equality is used.\n   *\n   *     var obj1 = {a: 1}\n   *       , obj2 = {b: 2};\n   *     assert.notDeepInclude([obj1, obj2], {a: 9});\n   *     assert.notDeepInclude({foo: obj1, bar: obj2}, {foo: {a: 9}});\n   *     assert.notDeepInclude({foo: obj1, bar: obj2}, {foo: {a: 1}, bar: {b: 9}});\n   *\n   * @name notDeepInclude\n   * @param {Array|String} haystack\n   * @param {Mixed} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notDeepInclude = function (exp, inc, msg) {\n    new Assertion(exp, msg, assert.notDeepInclude, true).not.deep.include(inc);\n  };\n\n  /**\n   * ### .nestedInclude(haystack, needle, [message])\n   *\n   * Asserts that 'haystack' includes 'needle'.\n   * Can be used to assert the inclusion of a subset of properties in an\n   * object.\n   * Enables the use of dot- and bracket-notation for referencing nested\n   * properties.\n   * '[]' and '.' in property names can be escaped using double backslashes.\n   *\n   *     assert.nestedInclude({'.a': {'b': 'x'}}, {'\\\\.a.[b]': 'x'});\n   *     assert.nestedInclude({'a': {'[b]': 'x'}}, {'a.\\\\[b\\\\]': 'x'});\n   *\n   * @name nestedInclude\n   * @param {Object} haystack\n   * @param {Object} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.nestedInclude = function (exp, inc, msg) {\n    new Assertion(exp, msg, assert.nestedInclude, true).nested.include(inc);\n  };\n\n  /**\n   * ### .notNestedInclude(haystack, needle, [message])\n   *\n   * Asserts that 'haystack' does not include 'needle'.\n   * Can be used to assert the absence of a subset of properties in an\n   * object.\n   * Enables the use of dot- and bracket-notation for referencing nested\n   * properties.\n   * '[]' and '.' in property names can be escaped using double backslashes.\n   *\n   *     assert.notNestedInclude({'.a': {'b': 'x'}}, {'\\\\.a.b': 'y'});\n   *     assert.notNestedInclude({'a': {'[b]': 'x'}}, {'a.\\\\[b\\\\]': 'y'});\n   *\n   * @name notNestedInclude\n   * @param {Object} haystack\n   * @param {Object} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notNestedInclude = function (exp, inc, msg) {\n    new Assertion(exp, msg, assert.notNestedInclude, true)\n      .not.nested.include(inc);\n  };\n\n  /**\n   * ### .deepNestedInclude(haystack, needle, [message])\n   *\n   * Asserts that 'haystack' includes 'needle'.\n   * Can be used to assert the inclusion of a subset of properties in an\n   * object while checking for deep equality.\n   * Enables the use of dot- and bracket-notation for referencing nested\n   * properties.\n   * '[]' and '.' in property names can be escaped using double backslashes.\n   *\n   *     assert.deepNestedInclude({a: {b: [{x: 1}]}}, {'a.b[0]': {x: 1}});\n   *     assert.deepNestedInclude({'.a': {'[b]': {x: 1}}}, {'\\\\.a.\\\\[b\\\\]': {x: 1}});\n   *\n   * @name deepNestedInclude\n   * @param {Object} haystack\n   * @param {Object} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.deepNestedInclude = function(exp, inc, msg) {\n    new Assertion(exp, msg, assert.deepNestedInclude, true)\n      .deep.nested.include(inc);\n  };\n\n  /**\n   * ### .notDeepNestedInclude(haystack, needle, [message])\n   *\n   * Asserts that 'haystack' does not include 'needle'.\n   * Can be used to assert the absence of a subset of properties in an\n   * object while checking for deep equality.\n   * Enables the use of dot- and bracket-notation for referencing nested\n   * properties.\n   * '[]' and '.' in property names can be escaped using double backslashes.\n   *\n   *     assert.notDeepNestedInclude({a: {b: [{x: 1}]}}, {'a.b[0]': {y: 1}})\n   *     assert.notDeepNestedInclude({'.a': {'[b]': {x: 1}}}, {'\\\\.a.\\\\[b\\\\]': {y: 2}});\n   *\n   * @name notDeepNestedInclude\n   * @param {Object} haystack\n   * @param {Object} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notDeepNestedInclude = function(exp, inc, msg) {\n    new Assertion(exp, msg, assert.notDeepNestedInclude, true)\n      .not.deep.nested.include(inc);\n  };\n\n  /**\n   * ### .ownInclude(haystack, needle, [message])\n   *\n   * Asserts that 'haystack' includes 'needle'.\n   * Can be used to assert the inclusion of a subset of properties in an\n   * object while ignoring inherited properties.\n   *\n   *     assert.ownInclude({ a: 1 }, { a: 1 });\n   *\n   * @name ownInclude\n   * @param {Object} haystack\n   * @param {Object} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.ownInclude = function(exp, inc, msg) {\n    new Assertion(exp, msg, assert.ownInclude, true).own.include(inc);\n  };\n\n  /**\n   * ### .notOwnInclude(haystack, needle, [message])\n   *\n   * Asserts that 'haystack' includes 'needle'.\n   * Can be used to assert the absence of a subset of properties in an\n   * object while ignoring inherited properties.\n   *\n   *     Object.prototype.b = 2;\n   *\n   *     assert.notOwnInclude({ a: 1 }, { b: 2 });\n   *\n   * @name notOwnInclude\n   * @param {Object} haystack\n   * @param {Object} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notOwnInclude = function(exp, inc, msg) {\n    new Assertion(exp, msg, assert.notOwnInclude, true).not.own.include(inc);\n  };\n\n  /**\n   * ### .deepOwnInclude(haystack, needle, [message])\n   *\n   * Asserts that 'haystack' includes 'needle'.\n   * Can be used to assert the inclusion of a subset of properties in an\n   * object while ignoring inherited properties and checking for deep equality.\n   *\n   *      assert.deepOwnInclude({a: {b: 2}}, {a: {b: 2}});\n   *\n   * @name deepOwnInclude\n   * @param {Object} haystack\n   * @param {Object} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.deepOwnInclude = function(exp, inc, msg) {\n    new Assertion(exp, msg, assert.deepOwnInclude, true)\n      .deep.own.include(inc);\n  };\n\n   /**\n   * ### .notDeepOwnInclude(haystack, needle, [message])\n   *\n   * Asserts that 'haystack' includes 'needle'.\n   * Can be used to assert the absence of a subset of properties in an\n   * object while ignoring inherited properties and checking for deep equality.\n   *\n   *      assert.notDeepOwnInclude({a: {b: 2}}, {a: {c: 3}});\n   *\n   * @name notDeepOwnInclude\n   * @param {Object} haystack\n   * @param {Object} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notDeepOwnInclude = function(exp, inc, msg) {\n    new Assertion(exp, msg, assert.notDeepOwnInclude, true)\n      .not.deep.own.include(inc);\n  };\n\n  /**\n   * ### .match(value, regexp, [message])\n   *\n   * Asserts that `value` matches the regular expression `regexp`.\n   *\n   *     assert.match('foobar', /^foo/, 'regexp matches');\n   *\n   * @name match\n   * @param {Mixed} value\n   * @param {RegExp} regexp\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.match = function (exp, re, msg) {\n    new Assertion(exp, msg, assert.match, true).to.match(re);\n  };\n\n  /**\n   * ### .notMatch(value, regexp, [message])\n   *\n   * Asserts that `value` does not match the regular expression `regexp`.\n   *\n   *     assert.notMatch('foobar', /^foo/, 'regexp does not match');\n   *\n   * @name notMatch\n   * @param {Mixed} value\n   * @param {RegExp} regexp\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notMatch = function (exp, re, msg) {\n    new Assertion(exp, msg, assert.notMatch, true).to.not.match(re);\n  };\n\n  /**\n   * ### .property(object, property, [message])\n   *\n   * Asserts that `object` has a direct or inherited property named by\n   * `property`.\n   *\n   *     assert.property({ tea: { green: 'matcha' }}, 'tea');\n   *     assert.property({ tea: { green: 'matcha' }}, 'toString');\n   *\n   * @name property\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.property = function (obj, prop, msg) {\n    new Assertion(obj, msg, assert.property, true).to.have.property(prop);\n  };\n\n  /**\n   * ### .notProperty(object, property, [message])\n   *\n   * Asserts that `object` does _not_ have a direct or inherited property named\n   * by `property`.\n   *\n   *     assert.notProperty({ tea: { green: 'matcha' }}, 'coffee');\n   *\n   * @name notProperty\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notProperty = function (obj, prop, msg) {\n    new Assertion(obj, msg, assert.notProperty, true)\n      .to.not.have.property(prop);\n  };\n\n  /**\n   * ### .propertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a direct or inherited property named by\n   * `property` with a value given by `value`. Uses a strict equality check\n   * (===).\n   *\n   *     assert.propertyVal({ tea: 'is good' }, 'tea', 'is good');\n   *\n   * @name propertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.propertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg, assert.propertyVal, true)\n      .to.have.property(prop, val);\n  };\n\n  /**\n   * ### .notPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` does _not_ have a direct or inherited property named\n   * by `property` with value given by `value`. Uses a strict equality check\n   * (===).\n   *\n   *     assert.notPropertyVal({ tea: 'is good' }, 'tea', 'is bad');\n   *     assert.notPropertyVal({ tea: 'is good' }, 'coffee', 'is good');\n   *\n   * @name notPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notPropertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg, assert.notPropertyVal, true)\n      .to.not.have.property(prop, val);\n  };\n\n  /**\n   * ### .deepPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a direct or inherited property named by\n   * `property` with a value given by `value`. Uses a deep equality check.\n   *\n   *     assert.deepPropertyVal({ tea: { green: 'matcha' } }, 'tea', { green: 'matcha' });\n   *\n   * @name deepPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.deepPropertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg, assert.deepPropertyVal, true)\n      .to.have.deep.property(prop, val);\n  };\n\n  /**\n   * ### .notDeepPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` does _not_ have a direct or inherited property named\n   * by `property` with value given by `value`. Uses a deep equality check.\n   *\n   *     assert.notDeepPropertyVal({ tea: { green: 'matcha' } }, 'tea', { black: 'matcha' });\n   *     assert.notDeepPropertyVal({ tea: { green: 'matcha' } }, 'tea', { green: 'oolong' });\n   *     assert.notDeepPropertyVal({ tea: { green: 'matcha' } }, 'coffee', { green: 'matcha' });\n   *\n   * @name notDeepPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notDeepPropertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg, assert.notDeepPropertyVal, true)\n      .to.not.have.deep.property(prop, val);\n  };\n\n  /**\n   * ### .ownProperty(object, property, [message])\n   *\n   * Asserts that `object` has a direct property named by `property`. Inherited\n   * properties aren't checked.\n   *\n   *     assert.ownProperty({ tea: { green: 'matcha' }}, 'tea');\n   *\n   * @name ownProperty\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @api public\n   */\n\n  assert.ownProperty = function (obj, prop, msg) {\n    new Assertion(obj, msg, assert.ownProperty, true)\n      .to.have.own.property(prop);\n  };\n\n  /**\n   * ### .notOwnProperty(object, property, [message])\n   *\n   * Asserts that `object` does _not_ have a direct property named by\n   * `property`. Inherited properties aren't checked.\n   *\n   *     assert.notOwnProperty({ tea: { green: 'matcha' }}, 'coffee');\n   *     assert.notOwnProperty({}, 'toString');\n   *\n   * @name notOwnProperty\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @api public\n   */\n\n  assert.notOwnProperty = function (obj, prop, msg) {\n    new Assertion(obj, msg, assert.notOwnProperty, true)\n      .to.not.have.own.property(prop);\n  };\n\n  /**\n   * ### .ownPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a direct property named by `property` and a value\n   * equal to the provided `value`. Uses a strict equality check (===).\n   * Inherited properties aren't checked.\n   *\n   *     assert.ownPropertyVal({ coffee: 'is good'}, 'coffee', 'is good');\n   *\n   * @name ownPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @api public\n   */\n\n  assert.ownPropertyVal = function (obj, prop, value, msg) {\n    new Assertion(obj, msg, assert.ownPropertyVal, true)\n      .to.have.own.property(prop, value);\n  };\n\n  /**\n   * ### .notOwnPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` does _not_ have a direct property named by `property`\n   * with a value equal to the provided `value`. Uses a strict equality check\n   * (===). Inherited properties aren't checked.\n   *\n   *     assert.notOwnPropertyVal({ tea: 'is better'}, 'tea', 'is worse');\n   *     assert.notOwnPropertyVal({}, 'toString', Object.prototype.toString);\n   *\n   * @name notOwnPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @api public\n   */\n\n  assert.notOwnPropertyVal = function (obj, prop, value, msg) {\n    new Assertion(obj, msg, assert.notOwnPropertyVal, true)\n      .to.not.have.own.property(prop, value);\n  };\n\n  /**\n   * ### .deepOwnPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a direct property named by `property` and a value\n   * equal to the provided `value`. Uses a deep equality check. Inherited\n   * properties aren't checked.\n   *\n   *     assert.deepOwnPropertyVal({ tea: { green: 'matcha' } }, 'tea', { green: 'matcha' });\n   *\n   * @name deepOwnPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @api public\n   */\n\n  assert.deepOwnPropertyVal = function (obj, prop, value, msg) {\n    new Assertion(obj, msg, assert.deepOwnPropertyVal, true)\n      .to.have.deep.own.property(prop, value);\n  };\n\n  /**\n   * ### .notDeepOwnPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` does _not_ have a direct property named by `property`\n   * with a value equal to the provided `value`. Uses a deep equality check.\n   * Inherited properties aren't checked.\n   *\n   *     assert.notDeepOwnPropertyVal({ tea: { green: 'matcha' } }, 'tea', { black: 'matcha' });\n   *     assert.notDeepOwnPropertyVal({ tea: { green: 'matcha' } }, 'tea', { green: 'oolong' });\n   *     assert.notDeepOwnPropertyVal({ tea: { green: 'matcha' } }, 'coffee', { green: 'matcha' });\n   *     assert.notDeepOwnPropertyVal({}, 'toString', Object.prototype.toString);\n   *\n   * @name notDeepOwnPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @api public\n   */\n\n  assert.notDeepOwnPropertyVal = function (obj, prop, value, msg) {\n    new Assertion(obj, msg, assert.notDeepOwnPropertyVal, true)\n      .to.not.have.deep.own.property(prop, value);\n  };\n\n  /**\n   * ### .nestedProperty(object, property, [message])\n   *\n   * Asserts that `object` has a direct or inherited property named by\n   * `property`, which can be a string using dot- and bracket-notation for\n   * nested reference.\n   *\n   *     assert.nestedProperty({ tea: { green: 'matcha' }}, 'tea.green');\n   *\n   * @name nestedProperty\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.nestedProperty = function (obj, prop, msg) {\n    new Assertion(obj, msg, assert.nestedProperty, true)\n      .to.have.nested.property(prop);\n  };\n\n  /**\n   * ### .notNestedProperty(object, property, [message])\n   *\n   * Asserts that `object` does _not_ have a property named by `property`, which\n   * can be a string using dot- and bracket-notation for nested reference. The\n   * property cannot exist on the object nor anywhere in its prototype chain.\n   *\n   *     assert.notNestedProperty({ tea: { green: 'matcha' }}, 'tea.oolong');\n   *\n   * @name notNestedProperty\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notNestedProperty = function (obj, prop, msg) {\n    new Assertion(obj, msg, assert.notNestedProperty, true)\n      .to.not.have.nested.property(prop);\n  };\n\n  /**\n   * ### .nestedPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a property named by `property` with value given\n   * by `value`. `property` can use dot- and bracket-notation for nested\n   * reference. Uses a strict equality check (===).\n   *\n   *     assert.nestedPropertyVal({ tea: { green: 'matcha' }}, 'tea.green', 'matcha');\n   *\n   * @name nestedPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.nestedPropertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg, assert.nestedPropertyVal, true)\n      .to.have.nested.property(prop, val);\n  };\n\n  /**\n   * ### .notNestedPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` does _not_ have a property named by `property` with\n   * value given by `value`. `property` can use dot- and bracket-notation for\n   * nested reference. Uses a strict equality check (===).\n   *\n   *     assert.notNestedPropertyVal({ tea: { green: 'matcha' }}, 'tea.green', 'konacha');\n   *     assert.notNestedPropertyVal({ tea: { green: 'matcha' }}, 'coffee.green', 'matcha');\n   *\n   * @name notNestedPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notNestedPropertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg, assert.notNestedPropertyVal, true)\n      .to.not.have.nested.property(prop, val);\n  };\n\n  /**\n   * ### .deepNestedPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a property named by `property` with a value given\n   * by `value`. `property` can use dot- and bracket-notation for nested\n   * reference. Uses a deep equality check.\n   *\n   *     assert.deepNestedPropertyVal({ tea: { green: { matcha: 'yum' } } }, 'tea.green', { matcha: 'yum' });\n   *\n   * @name deepNestedPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.deepNestedPropertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg, assert.deepNestedPropertyVal, true)\n      .to.have.deep.nested.property(prop, val);\n  };\n\n  /**\n   * ### .notDeepNestedPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` does _not_ have a property named by `property` with\n   * value given by `value`. `property` can use dot- and bracket-notation for\n   * nested reference. Uses a deep equality check.\n   *\n   *     assert.notDeepNestedPropertyVal({ tea: { green: { matcha: 'yum' } } }, 'tea.green', { oolong: 'yum' });\n   *     assert.notDeepNestedPropertyVal({ tea: { green: { matcha: 'yum' } } }, 'tea.green', { matcha: 'yuck' });\n   *     assert.notDeepNestedPropertyVal({ tea: { green: { matcha: 'yum' } } }, 'tea.black', { matcha: 'yum' });\n   *\n   * @name notDeepNestedPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notDeepNestedPropertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg, assert.notDeepNestedPropertyVal, true)\n      .to.not.have.deep.nested.property(prop, val);\n  }\n\n  /**\n   * ### .lengthOf(object, length, [message])\n   *\n   * Asserts that `object` has a `length` or `size` with the expected value.\n   *\n   *     assert.lengthOf([1,2,3], 3, 'array has length of 3');\n   *     assert.lengthOf('foobar', 6, 'string has length of 6');\n   *     assert.lengthOf(new Set([1,2,3]), 3, 'set has size of 3');\n   *     assert.lengthOf(new Map([['a',1],['b',2],['c',3]]), 3, 'map has size of 3');\n   *\n   * @name lengthOf\n   * @param {Mixed} object\n   * @param {Number} length\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.lengthOf = function (exp, len, msg) {\n    new Assertion(exp, msg, assert.lengthOf, true).to.have.lengthOf(len);\n  };\n\n  /**\n   * ### .hasAnyKeys(object, [keys], [message])\n   *\n   * Asserts that `object` has at least one of the `keys` provided.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.hasAnyKeys({foo: 1, bar: 2, baz: 3}, ['foo', 'iDontExist', 'baz']);\n   *     assert.hasAnyKeys({foo: 1, bar: 2, baz: 3}, {foo: 30, iDontExist: 99, baz: 1337});\n   *     assert.hasAnyKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{foo: 1}, 'key']);\n   *     assert.hasAnyKeys(new Set([{foo: 'bar'}, 'anotherKey']), [{foo: 'bar'}, 'anotherKey']);\n   *\n   * @name hasAnyKeys\n   * @param {Mixed} object\n   * @param {Array|Object} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.hasAnyKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.hasAnyKeys, true).to.have.any.keys(keys);\n  }\n\n  /**\n   * ### .hasAllKeys(object, [keys], [message])\n   *\n   * Asserts that `object` has all and only all of the `keys` provided.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.hasAllKeys({foo: 1, bar: 2, baz: 3}, ['foo', 'bar', 'baz']);\n   *     assert.hasAllKeys({foo: 1, bar: 2, baz: 3}, {foo: 30, bar: 99, baz: 1337]);\n   *     assert.hasAllKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{foo: 1}, 'key']);\n   *     assert.hasAllKeys(new Set([{foo: 'bar'}, 'anotherKey'], [{foo: 'bar'}, 'anotherKey']);\n   *\n   * @name hasAllKeys\n   * @param {Mixed} object\n   * @param {String[]} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.hasAllKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.hasAllKeys, true).to.have.all.keys(keys);\n  }\n\n  /**\n   * ### .containsAllKeys(object, [keys], [message])\n   *\n   * Asserts that `object` has all of the `keys` provided but may have more keys not listed.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.containsAllKeys({foo: 1, bar: 2, baz: 3}, ['foo', 'baz']);\n   *     assert.containsAllKeys({foo: 1, bar: 2, baz: 3}, ['foo', 'bar', 'baz']);\n   *     assert.containsAllKeys({foo: 1, bar: 2, baz: 3}, {foo: 30, baz: 1337});\n   *     assert.containsAllKeys({foo: 1, bar: 2, baz: 3}, {foo: 30, bar: 99, baz: 1337});\n   *     assert.containsAllKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{foo: 1}]);\n   *     assert.containsAllKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{foo: 1}, 'key']);\n   *     assert.containsAllKeys(new Set([{foo: 'bar'}, 'anotherKey'], [{foo: 'bar'}]);\n   *     assert.containsAllKeys(new Set([{foo: 'bar'}, 'anotherKey'], [{foo: 'bar'}, 'anotherKey']);\n   *\n   * @name containsAllKeys\n   * @param {Mixed} object\n   * @param {String[]} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.containsAllKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.containsAllKeys, true)\n      .to.contain.all.keys(keys);\n  }\n\n  /**\n   * ### .doesNotHaveAnyKeys(object, [keys], [message])\n   *\n   * Asserts that `object` has none of the `keys` provided.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.doesNotHaveAnyKeys({foo: 1, bar: 2, baz: 3}, ['one', 'two', 'example']);\n   *     assert.doesNotHaveAnyKeys({foo: 1, bar: 2, baz: 3}, {one: 1, two: 2, example: 'foo'});\n   *     assert.doesNotHaveAnyKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{one: 'two'}, 'example']);\n   *     assert.doesNotHaveAnyKeys(new Set([{foo: 'bar'}, 'anotherKey'], [{one: 'two'}, 'example']);\n   *\n   * @name doesNotHaveAnyKeys\n   * @param {Mixed} object\n   * @param {String[]} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotHaveAnyKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.doesNotHaveAnyKeys, true)\n      .to.not.have.any.keys(keys);\n  }\n\n  /**\n   * ### .doesNotHaveAllKeys(object, [keys], [message])\n   *\n   * Asserts that `object` does not have at least one of the `keys` provided.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.doesNotHaveAllKeys({foo: 1, bar: 2, baz: 3}, ['one', 'two', 'example']);\n   *     assert.doesNotHaveAllKeys({foo: 1, bar: 2, baz: 3}, {one: 1, two: 2, example: 'foo'});\n   *     assert.doesNotHaveAllKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{one: 'two'}, 'example']);\n   *     assert.doesNotHaveAllKeys(new Set([{foo: 'bar'}, 'anotherKey'], [{one: 'two'}, 'example']);\n   *\n   * @name doesNotHaveAllKeys\n   * @param {Mixed} object\n   * @param {String[]} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotHaveAllKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.doesNotHaveAllKeys, true)\n      .to.not.have.all.keys(keys);\n  }\n\n  /**\n   * ### .hasAnyDeepKeys(object, [keys], [message])\n   *\n   * Asserts that `object` has at least one of the `keys` provided.\n   * Since Sets and Maps can have objects as keys you can use this assertion to perform\n   * a deep comparison.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.hasAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), {one: 'one'});\n   *     assert.hasAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), [{one: 'one'}, {two: 'two'}]);\n   *     assert.hasAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{one: 'one'}, {two: 'two'}]);\n   *     assert.hasAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), {one: 'one'});\n   *     assert.hasAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {three: 'three'}]);\n   *     assert.hasAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {two: 'two'}]);\n   *\n   * @name hasAnyDeepKeys\n   * @param {Mixed} object\n   * @param {Array|Object} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.hasAnyDeepKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.hasAnyDeepKeys, true)\n      .to.have.any.deep.keys(keys);\n  }\n\n /**\n   * ### .hasAllDeepKeys(object, [keys], [message])\n   *\n   * Asserts that `object` has all and only all of the `keys` provided.\n   * Since Sets and Maps can have objects as keys you can use this assertion to perform\n   * a deep comparison.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.hasAllDeepKeys(new Map([[{one: 'one'}, 'valueOne']]), {one: 'one'});\n   *     assert.hasAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{one: 'one'}, {two: 'two'}]);\n   *     assert.hasAllDeepKeys(new Set([{one: 'one'}]), {one: 'one'});\n   *     assert.hasAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {two: 'two'}]);\n   *\n   * @name hasAllDeepKeys\n   * @param {Mixed} object\n   * @param {Array|Object} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.hasAllDeepKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.hasAllDeepKeys, true)\n      .to.have.all.deep.keys(keys);\n  }\n\n /**\n   * ### .containsAllDeepKeys(object, [keys], [message])\n   *\n   * Asserts that `object` contains all of the `keys` provided.\n   * Since Sets and Maps can have objects as keys you can use this assertion to perform\n   * a deep comparison.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.containsAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), {one: 'one'});\n   *     assert.containsAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{one: 'one'}, {two: 'two'}]);\n   *     assert.containsAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), {one: 'one'});\n   *     assert.containsAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {two: 'two'}]);\n   *\n   * @name containsAllDeepKeys\n   * @param {Mixed} object\n   * @param {Array|Object} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.containsAllDeepKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.containsAllDeepKeys, true)\n      .to.contain.all.deep.keys(keys);\n  }\n\n /**\n   * ### .doesNotHaveAnyDeepKeys(object, [keys], [message])\n   *\n   * Asserts that `object` has none of the `keys` provided.\n   * Since Sets and Maps can have objects as keys you can use this assertion to perform\n   * a deep comparison.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.doesNotHaveAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), {thisDoesNot: 'exist'});\n   *     assert.doesNotHaveAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{twenty: 'twenty'}, {fifty: 'fifty'}]);\n   *     assert.doesNotHaveAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), {twenty: 'twenty'});\n   *     assert.doesNotHaveAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{twenty: 'twenty'}, {fifty: 'fifty'}]);\n   *\n   * @name doesNotHaveAnyDeepKeys\n   * @param {Mixed} object\n   * @param {Array|Object} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotHaveAnyDeepKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.doesNotHaveAnyDeepKeys, true)\n      .to.not.have.any.deep.keys(keys);\n  }\n\n /**\n   * ### .doesNotHaveAllDeepKeys(object, [keys], [message])\n   *\n   * Asserts that `object` does not have at least one of the `keys` provided.\n   * Since Sets and Maps can have objects as keys you can use this assertion to perform\n   * a deep comparison.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.doesNotHaveAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), {thisDoesNot: 'exist'});\n   *     assert.doesNotHaveAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{twenty: 'twenty'}, {one: 'one'}]);\n   *     assert.doesNotHaveAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), {twenty: 'twenty'});\n   *     assert.doesNotHaveAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {fifty: 'fifty'}]);\n   *\n   * @name doesNotHaveAllDeepKeys\n   * @param {Mixed} object\n   * @param {Array|Object} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotHaveAllDeepKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.doesNotHaveAllDeepKeys, true)\n      .to.not.have.all.deep.keys(keys);\n  }\n\n /**\n   * ### .throws(fn, [errorLike/string/regexp], [string/regexp], [message])\n   *\n   * If `errorLike` is an `Error` constructor, asserts that `fn` will throw an error that is an\n   * instance of `errorLike`.\n   * If `errorLike` is an `Error` instance, asserts that the error thrown is the same\n   * instance as `errorLike`.\n   * If `errMsgMatcher` is provided, it also asserts that the error thrown will have a\n   * message matching `errMsgMatcher`.\n   *\n   *     assert.throws(fn, 'Error thrown must have this msg');\n   *     assert.throws(fn, /Error thrown must have a msg that matches this/);\n   *     assert.throws(fn, ReferenceError);\n   *     assert.throws(fn, errorInstance);\n   *     assert.throws(fn, ReferenceError, 'Error thrown must be a ReferenceError and have this msg');\n   *     assert.throws(fn, errorInstance, 'Error thrown must be the same errorInstance and have this msg');\n   *     assert.throws(fn, ReferenceError, /Error thrown must be a ReferenceError and match this/);\n   *     assert.throws(fn, errorInstance, /Error thrown must be the same errorInstance and match this/);\n   *\n   * @name throws\n   * @alias throw\n   * @alias Throw\n   * @param {Function} fn\n   * @param {ErrorConstructor|Error} errorLike\n   * @param {RegExp|String} errMsgMatcher\n   * @param {String} message\n   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.throws = function (fn, errorLike, errMsgMatcher, msg) {\n    if ('string' === typeof errorLike || errorLike instanceof RegExp) {\n      errMsgMatcher = errorLike;\n      errorLike = null;\n    }\n\n    var assertErr = new Assertion(fn, msg, assert.throws, true)\n      .to.throw(errorLike, errMsgMatcher);\n    return flag(assertErr, 'object');\n  };\n\n  /**\n   * ### .doesNotThrow(fn, [errorLike/string/regexp], [string/regexp], [message])\n   *\n   * If `errorLike` is an `Error` constructor, asserts that `fn` will _not_ throw an error that is an\n   * instance of `errorLike`.\n   * If `errorLike` is an `Error` instance, asserts that the error thrown is _not_ the same\n   * instance as `errorLike`.\n   * If `errMsgMatcher` is provided, it also asserts that the error thrown will _not_ have a\n   * message matching `errMsgMatcher`.\n   *\n   *     assert.doesNotThrow(fn, 'Any Error thrown must not have this message');\n   *     assert.doesNotThrow(fn, /Any Error thrown must not match this/);\n   *     assert.doesNotThrow(fn, Error);\n   *     assert.doesNotThrow(fn, errorInstance);\n   *     assert.doesNotThrow(fn, Error, 'Error must not have this message');\n   *     assert.doesNotThrow(fn, errorInstance, 'Error must not have this message');\n   *     assert.doesNotThrow(fn, Error, /Error must not match this/);\n   *     assert.doesNotThrow(fn, errorInstance, /Error must not match this/);\n   *\n   * @name doesNotThrow\n   * @param {Function} fn\n   * @param {ErrorConstructor} errorLike\n   * @param {RegExp|String} errMsgMatcher\n   * @param {String} message\n   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotThrow = function (fn, errorLike, errMsgMatcher, msg) {\n    if ('string' === typeof errorLike || errorLike instanceof RegExp) {\n      errMsgMatcher = errorLike;\n      errorLike = null;\n    }\n\n    new Assertion(fn, msg, assert.doesNotThrow, true)\n      .to.not.throw(errorLike, errMsgMatcher);\n  };\n\n  /**\n   * ### .operator(val1, operator, val2, [message])\n   *\n   * Compares two values using `operator`.\n   *\n   *     assert.operator(1, '<', 2, 'everything is ok');\n   *     assert.operator(1, '>', 2, 'this will fail');\n   *\n   * @name operator\n   * @param {Mixed} val1\n   * @param {String} operator\n   * @param {Mixed} val2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.operator = function (val, operator, val2, msg) {\n    var ok;\n    switch(operator) {\n      case '==':\n        ok = val == val2;\n        break;\n      case '===':\n        ok = val === val2;\n        break;\n      case '>':\n        ok = val > val2;\n        break;\n      case '>=':\n        ok = val >= val2;\n        break;\n      case '<':\n        ok = val < val2;\n        break;\n      case '<=':\n        ok = val <= val2;\n        break;\n      case '!=':\n        ok = val != val2;\n        break;\n      case '!==':\n        ok = val !== val2;\n        break;\n      default:\n        msg = msg ? msg + ': ' : msg;\n        throw new chai.AssertionError(\n          msg + 'Invalid operator \"' + operator + '\"',\n          undefined,\n          assert.operator\n        );\n    }\n    var test = new Assertion(ok, msg, assert.operator, true);\n    test.assert(\n        true === flag(test, 'object')\n      , 'expected ' + util.inspect(val) + ' to be ' + operator + ' ' + util.inspect(val2)\n      , 'expected ' + util.inspect(val) + ' to not be ' + operator + ' ' + util.inspect(val2) );\n  };\n\n  /**\n   * ### .closeTo(actual, expected, delta, [message])\n   *\n   * Asserts that the target is equal `expected`, to within a +/- `delta` range.\n   *\n   *     assert.closeTo(1.5, 1, 0.5, 'numbers are close');\n   *\n   * @name closeTo\n   * @param {Number} actual\n   * @param {Number} expected\n   * @param {Number} delta\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.closeTo = function (act, exp, delta, msg) {\n    new Assertion(act, msg, assert.closeTo, true).to.be.closeTo(exp, delta);\n  };\n\n  /**\n   * ### .approximately(actual, expected, delta, [message])\n   *\n   * Asserts that the target is equal `expected`, to within a +/- `delta` range.\n   *\n   *     assert.approximately(1.5, 1, 0.5, 'numbers are close');\n   *\n   * @name approximately\n   * @param {Number} actual\n   * @param {Number} expected\n   * @param {Number} delta\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.approximately = function (act, exp, delta, msg) {\n    new Assertion(act, msg, assert.approximately, true)\n      .to.be.approximately(exp, delta);\n  };\n\n  /**\n   * ### .sameMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` have the same members in any order. Uses a\n   * strict equality check (===).\n   *\n   *     assert.sameMembers([ 1, 2, 3 ], [ 2, 1, 3 ], 'same members');\n   *\n   * @name sameMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.sameMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg, assert.sameMembers, true)\n      .to.have.same.members(set2);\n  }\n\n  /**\n   * ### .notSameMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` don't have the same members in any order.\n   * Uses a strict equality check (===).\n   *\n   *     assert.notSameMembers([ 1, 2, 3 ], [ 5, 1, 3 ], 'not same members');\n   *\n   * @name notSameMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notSameMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg, assert.notSameMembers, true)\n      .to.not.have.same.members(set2);\n  }\n\n  /**\n   * ### .sameDeepMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` have the same members in any order. Uses a\n   * deep equality check.\n   *\n   *     assert.sameDeepMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [{ b: 2 }, { a: 1 }, { c: 3 }], 'same deep members');\n   *\n   * @name sameDeepMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.sameDeepMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg, assert.sameDeepMembers, true)\n      .to.have.same.deep.members(set2);\n  }\n\n  /**\n   * ### .notSameDeepMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` don't have the same members in any order.\n   * Uses a deep equality check.\n   *\n   *     assert.notSameDeepMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [{ b: 2 }, { a: 1 }, { f: 5 }], 'not same deep members');\n   *\n   * @name notSameDeepMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notSameDeepMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg, assert.notSameDeepMembers, true)\n      .to.not.have.same.deep.members(set2);\n  }\n\n  /**\n   * ### .sameOrderedMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` have the same members in the same order.\n   * Uses a strict equality check (===).\n   *\n   *     assert.sameOrderedMembers([ 1, 2, 3 ], [ 1, 2, 3 ], 'same ordered members');\n   *\n   * @name sameOrderedMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.sameOrderedMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg, assert.sameOrderedMembers, true)\n      .to.have.same.ordered.members(set2);\n  }\n\n  /**\n   * ### .notSameOrderedMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` don't have the same members in the same\n   * order. Uses a strict equality check (===).\n   *\n   *     assert.notSameOrderedMembers([ 1, 2, 3 ], [ 2, 1, 3 ], 'not same ordered members');\n   *\n   * @name notSameOrderedMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notSameOrderedMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg, assert.notSameOrderedMembers, true)\n      .to.not.have.same.ordered.members(set2);\n  }\n\n  /**\n   * ### .sameDeepOrderedMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` have the same members in the same order.\n   * Uses a deep equality check.\n   *\n   *     assert.sameDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { a: 1 }, { b: 2 }, { c: 3 } ], 'same deep ordered members');\n   *\n   * @name sameDeepOrderedMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.sameDeepOrderedMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg, assert.sameDeepOrderedMembers, true)\n      .to.have.same.deep.ordered.members(set2);\n  }\n\n  /**\n   * ### .notSameDeepOrderedMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` don't have the same members in the same\n   * order. Uses a deep equality check.\n   *\n   *     assert.notSameDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { a: 1 }, { b: 2 }, { z: 5 } ], 'not same deep ordered members');\n   *     assert.notSameDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { a: 1 }, { c: 3 } ], 'not same deep ordered members');\n   *\n   * @name notSameDeepOrderedMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notSameDeepOrderedMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg, assert.notSameDeepOrderedMembers, true)\n      .to.not.have.same.deep.ordered.members(set2);\n  }\n\n  /**\n   * ### .includeMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` is included in `superset` in any order. Uses a\n   * strict equality check (===). Duplicates are ignored.\n   *\n   *     assert.includeMembers([ 1, 2, 3 ], [ 2, 1, 2 ], 'include members');\n   *\n   * @name includeMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.includeMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg, assert.includeMembers, true)\n      .to.include.members(subset);\n  }\n\n  /**\n   * ### .notIncludeMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` isn't included in `superset` in any order. Uses a\n   * strict equality check (===). Duplicates are ignored.\n   *\n   *     assert.notIncludeMembers([ 1, 2, 3 ], [ 5, 1 ], 'not include members');\n   *\n   * @name notIncludeMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notIncludeMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg, assert.notIncludeMembers, true)\n      .to.not.include.members(subset);\n  }\n\n  /**\n   * ### .includeDeepMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` is included in `superset` in any order. Uses a deep\n   * equality check. Duplicates are ignored.\n   *\n   *     assert.includeDeepMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { a: 1 }, { b: 2 } ], 'include deep members');\n   *\n   * @name includeDeepMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.includeDeepMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg, assert.includeDeepMembers, true)\n      .to.include.deep.members(subset);\n  }\n\n  /**\n   * ### .notIncludeDeepMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` isn't included in `superset` in any order. Uses a\n   * deep equality check. Duplicates are ignored.\n   *\n   *     assert.notIncludeDeepMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { f: 5 } ], 'not include deep members');\n   *\n   * @name notIncludeDeepMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notIncludeDeepMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg, assert.notIncludeDeepMembers, true)\n      .to.not.include.deep.members(subset);\n  }\n\n  /**\n   * ### .includeOrderedMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` is included in `superset` in the same order\n   * beginning with the first element in `superset`. Uses a strict equality\n   * check (===).\n   *\n   *     assert.includeOrderedMembers([ 1, 2, 3 ], [ 1, 2 ], 'include ordered members');\n   *\n   * @name includeOrderedMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.includeOrderedMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg, assert.includeOrderedMembers, true)\n      .to.include.ordered.members(subset);\n  }\n\n  /**\n   * ### .notIncludeOrderedMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` isn't included in `superset` in the same order\n   * beginning with the first element in `superset`. Uses a strict equality\n   * check (===).\n   *\n   *     assert.notIncludeOrderedMembers([ 1, 2, 3 ], [ 2, 1 ], 'not include ordered members');\n   *     assert.notIncludeOrderedMembers([ 1, 2, 3 ], [ 2, 3 ], 'not include ordered members');\n   *\n   * @name notIncludeOrderedMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notIncludeOrderedMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg, assert.notIncludeOrderedMembers, true)\n      .to.not.include.ordered.members(subset);\n  }\n\n  /**\n   * ### .includeDeepOrderedMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` is included in `superset` in the same order\n   * beginning with the first element in `superset`. Uses a deep equality\n   * check.\n   *\n   *     assert.includeDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { a: 1 }, { b: 2 } ], 'include deep ordered members');\n   *\n   * @name includeDeepOrderedMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.includeDeepOrderedMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg, assert.includeDeepOrderedMembers, true)\n      .to.include.deep.ordered.members(subset);\n  }\n\n  /**\n   * ### .notIncludeDeepOrderedMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` isn't included in `superset` in the same order\n   * beginning with the first element in `superset`. Uses a deep equality\n   * check.\n   *\n   *     assert.notIncludeDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { a: 1 }, { f: 5 } ], 'not include deep ordered members');\n   *     assert.notIncludeDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { a: 1 } ], 'not include deep ordered members');\n   *     assert.notIncludeDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { c: 3 } ], 'not include deep ordered members');\n   *\n   * @name notIncludeDeepOrderedMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notIncludeDeepOrderedMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg, assert.notIncludeDeepOrderedMembers, true)\n      .to.not.include.deep.ordered.members(subset);\n  }\n\n  /**\n   * ### .oneOf(inList, list, [message])\n   *\n   * Asserts that non-object, non-array value `inList` appears in the flat array `list`.\n   *\n   *     assert.oneOf(1, [ 2, 1 ], 'Not found in list');\n   *\n   * @name oneOf\n   * @param {*} inList\n   * @param {Array<*>} list\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.oneOf = function (inList, list, msg) {\n    new Assertion(inList, msg, assert.oneOf, true).to.be.oneOf(list);\n  }\n\n  /**\n   * ### .changes(function, object, property, [message])\n   *\n   * Asserts that a function changes the value of a property.\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 22 };\n   *     assert.changes(fn, obj, 'val');\n   *\n   * @name changes\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.changes = function (fn, obj, prop, msg) {\n    if (arguments.length === 3 && typeof obj === 'function') {\n      msg = prop;\n      prop = null;\n    }\n\n    new Assertion(fn, msg, assert.changes, true).to.change(obj, prop);\n  }\n\n   /**\n   * ### .changesBy(function, object, property, delta, [message])\n   *\n   * Asserts that a function changes the value of a property by an amount (delta).\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val += 2 };\n   *     assert.changesBy(fn, obj, 'val', 2);\n   *\n   * @name changesBy\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {Number} change amount (delta)\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.changesBy = function (fn, obj, prop, delta, msg) {\n    if (arguments.length === 4 && typeof obj === 'function') {\n      var tmpMsg = delta;\n      delta = prop;\n      msg = tmpMsg;\n    } else if (arguments.length === 3) {\n      delta = prop;\n      prop = null;\n    }\n\n    new Assertion(fn, msg, assert.changesBy, true)\n      .to.change(obj, prop).by(delta);\n  }\n\n   /**\n   * ### .doesNotChange(function, object, property, [message])\n   *\n   * Asserts that a function does not change the value of a property.\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { console.log('foo'); };\n   *     assert.doesNotChange(fn, obj, 'val');\n   *\n   * @name doesNotChange\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotChange = function (fn, obj, prop, msg) {\n    if (arguments.length === 3 && typeof obj === 'function') {\n      msg = prop;\n      prop = null;\n    }\n\n    return new Assertion(fn, msg, assert.doesNotChange, true)\n      .to.not.change(obj, prop);\n  }\n\n  /**\n   * ### .changesButNotBy(function, object, property, delta, [message])\n   *\n   * Asserts that a function does not change the value of a property or of a function's return value by an amount (delta)\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val += 10 };\n   *     assert.changesButNotBy(fn, obj, 'val', 5);\n   *\n   * @name changesButNotBy\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {Number} change amount (delta)\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.changesButNotBy = function (fn, obj, prop, delta, msg) {\n    if (arguments.length === 4 && typeof obj === 'function') {\n      var tmpMsg = delta;\n      delta = prop;\n      msg = tmpMsg;\n    } else if (arguments.length === 3) {\n      delta = prop;\n      prop = null;\n    }\n\n    new Assertion(fn, msg, assert.changesButNotBy, true)\n      .to.change(obj, prop).but.not.by(delta);\n  }\n\n  /**\n   * ### .increases(function, object, property, [message])\n   *\n   * Asserts that a function increases a numeric object property.\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 13 };\n   *     assert.increases(fn, obj, 'val');\n   *\n   * @name increases\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.increases = function (fn, obj, prop, msg) {\n    if (arguments.length === 3 && typeof obj === 'function') {\n      msg = prop;\n      prop = null;\n    }\n\n    return new Assertion(fn, msg, assert.increases, true)\n      .to.increase(obj, prop);\n  }\n\n  /**\n   * ### .increasesBy(function, object, property, delta, [message])\n   *\n   * Asserts that a function increases a numeric object property or a function's return value by an amount (delta).\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val += 10 };\n   *     assert.increasesBy(fn, obj, 'val', 10);\n   *\n   * @name increasesBy\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {Number} change amount (delta)\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.increasesBy = function (fn, obj, prop, delta, msg) {\n    if (arguments.length === 4 && typeof obj === 'function') {\n      var tmpMsg = delta;\n      delta = prop;\n      msg = tmpMsg;\n    } else if (arguments.length === 3) {\n      delta = prop;\n      prop = null;\n    }\n\n    new Assertion(fn, msg, assert.increasesBy, true)\n      .to.increase(obj, prop).by(delta);\n  }\n\n  /**\n   * ### .doesNotIncrease(function, object, property, [message])\n   *\n   * Asserts that a function does not increase a numeric object property.\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 8 };\n   *     assert.doesNotIncrease(fn, obj, 'val');\n   *\n   * @name doesNotIncrease\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotIncrease = function (fn, obj, prop, msg) {\n    if (arguments.length === 3 && typeof obj === 'function') {\n      msg = prop;\n      prop = null;\n    }\n\n    return new Assertion(fn, msg, assert.doesNotIncrease, true)\n      .to.not.increase(obj, prop);\n  }\n\n  /**\n   * ### .increasesButNotBy(function, object, property, delta, [message])\n   *\n   * Asserts that a function does not increase a numeric object property or function's return value by an amount (delta).\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 15 };\n   *     assert.increasesButNotBy(fn, obj, 'val', 10);\n   *\n   * @name increasesButNotBy\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {Number} change amount (delta)\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.increasesButNotBy = function (fn, obj, prop, delta, msg) {\n    if (arguments.length === 4 && typeof obj === 'function') {\n      var tmpMsg = delta;\n      delta = prop;\n      msg = tmpMsg;\n    } else if (arguments.length === 3) {\n      delta = prop;\n      prop = null;\n    }\n\n    new Assertion(fn, msg, assert.increasesButNotBy, true)\n      .to.increase(obj, prop).but.not.by(delta);\n  }\n\n  /**\n   * ### .decreases(function, object, property, [message])\n   *\n   * Asserts that a function decreases a numeric object property.\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 5 };\n   *     assert.decreases(fn, obj, 'val');\n   *\n   * @name decreases\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.decreases = function (fn, obj, prop, msg) {\n    if (arguments.length === 3 && typeof obj === 'function') {\n      msg = prop;\n      prop = null;\n    }\n\n    return new Assertion(fn, msg, assert.decreases, true)\n      .to.decrease(obj, prop);\n  }\n\n  /**\n   * ### .decreasesBy(function, object, property, delta, [message])\n   *\n   * Asserts that a function decreases a numeric object property or a function's return value by an amount (delta)\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val -= 5 };\n   *     assert.decreasesBy(fn, obj, 'val', 5);\n   *\n   * @name decreasesBy\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {Number} change amount (delta)\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.decreasesBy = function (fn, obj, prop, delta, msg) {\n    if (arguments.length === 4 && typeof obj === 'function') {\n      var tmpMsg = delta;\n      delta = prop;\n      msg = tmpMsg;\n    } else if (arguments.length === 3) {\n      delta = prop;\n      prop = null;\n    }\n\n    new Assertion(fn, msg, assert.decreasesBy, true)\n      .to.decrease(obj, prop).by(delta);\n  }\n\n  /**\n   * ### .doesNotDecrease(function, object, property, [message])\n   *\n   * Asserts that a function does not decreases a numeric object property.\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 15 };\n   *     assert.doesNotDecrease(fn, obj, 'val');\n   *\n   * @name doesNotDecrease\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotDecrease = function (fn, obj, prop, msg) {\n    if (arguments.length === 3 && typeof obj === 'function') {\n      msg = prop;\n      prop = null;\n    }\n\n    return new Assertion(fn, msg, assert.doesNotDecrease, true)\n      .to.not.decrease(obj, prop);\n  }\n\n  /**\n   * ### .doesNotDecreaseBy(function, object, property, delta, [message])\n   *\n   * Asserts that a function does not decreases a numeric object property or a function's return value by an amount (delta)\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 5 };\n   *     assert.doesNotDecreaseBy(fn, obj, 'val', 1);\n   *\n   * @name doesNotDecreaseBy\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {Number} change amount (delta)\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotDecreaseBy = function (fn, obj, prop, delta, msg) {\n    if (arguments.length === 4 && typeof obj === 'function') {\n      var tmpMsg = delta;\n      delta = prop;\n      msg = tmpMsg;\n    } else if (arguments.length === 3) {\n      delta = prop;\n      prop = null;\n    }\n\n    return new Assertion(fn, msg, assert.doesNotDecreaseBy, true)\n      .to.not.decrease(obj, prop).by(delta);\n  }\n\n  /**\n   * ### .decreasesButNotBy(function, object, property, delta, [message])\n   *\n   * Asserts that a function does not decreases a numeric object property or a function's return value by an amount (delta)\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 5 };\n   *     assert.decreasesButNotBy(fn, obj, 'val', 1);\n   *\n   * @name decreasesButNotBy\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {Number} change amount (delta)\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.decreasesButNotBy = function (fn, obj, prop, delta, msg) {\n    if (arguments.length === 4 && typeof obj === 'function') {\n      var tmpMsg = delta;\n      delta = prop;\n      msg = tmpMsg;\n    } else if (arguments.length === 3) {\n      delta = prop;\n      prop = null;\n    }\n\n    new Assertion(fn, msg, assert.decreasesButNotBy, true)\n      .to.decrease(obj, prop).but.not.by(delta);\n  }\n\n  /*!\n   * ### .ifError(object)\n   *\n   * Asserts if value is not a false value, and throws if it is a true value.\n   * This is added to allow for chai to be a drop-in replacement for Node's\n   * assert class.\n   *\n   *     var err = new Error('I am a custom error');\n   *     assert.ifError(err); // Rethrows err!\n   *\n   * @name ifError\n   * @param {Object} object\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.ifError = function (val) {\n    if (val) {\n      throw(val);\n    }\n  };\n\n  /**\n   * ### .isExtensible(object)\n   *\n   * Asserts that `object` is extensible (can have new properties added to it).\n   *\n   *     assert.isExtensible({});\n   *\n   * @name isExtensible\n   * @alias extensible\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isExtensible = function (obj, msg) {\n    new Assertion(obj, msg, assert.isExtensible, true).to.be.extensible;\n  };\n\n  /**\n   * ### .isNotExtensible(object)\n   *\n   * Asserts that `object` is _not_ extensible.\n   *\n   *     var nonExtensibleObject = Object.preventExtensions({});\n   *     var sealedObject = Object.seal({});\n   *     var frozenObject = Object.freeze({});\n   *\n   *     assert.isNotExtensible(nonExtensibleObject);\n   *     assert.isNotExtensible(sealedObject);\n   *     assert.isNotExtensible(frozenObject);\n   *\n   * @name isNotExtensible\n   * @alias notExtensible\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotExtensible = function (obj, msg) {\n    new Assertion(obj, msg, assert.isNotExtensible, true).to.not.be.extensible;\n  };\n\n  /**\n   * ### .isSealed(object)\n   *\n   * Asserts that `object` is sealed (cannot have new properties added to it\n   * and its existing properties cannot be removed).\n   *\n   *     var sealedObject = Object.seal({});\n   *     var frozenObject = Object.seal({});\n   *\n   *     assert.isSealed(sealedObject);\n   *     assert.isSealed(frozenObject);\n   *\n   * @name isSealed\n   * @alias sealed\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isSealed = function (obj, msg) {\n    new Assertion(obj, msg, assert.isSealed, true).to.be.sealed;\n  };\n\n  /**\n   * ### .isNotSealed(object)\n   *\n   * Asserts that `object` is _not_ sealed.\n   *\n   *     assert.isNotSealed({});\n   *\n   * @name isNotSealed\n   * @alias notSealed\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotSealed = function (obj, msg) {\n    new Assertion(obj, msg, assert.isNotSealed, true).to.not.be.sealed;\n  };\n\n  /**\n   * ### .isFrozen(object)\n   *\n   * Asserts that `object` is frozen (cannot have new properties added to it\n   * and its existing properties cannot be modified).\n   *\n   *     var frozenObject = Object.freeze({});\n   *     assert.frozen(frozenObject);\n   *\n   * @name isFrozen\n   * @alias frozen\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isFrozen = function (obj, msg) {\n    new Assertion(obj, msg, assert.isFrozen, true).to.be.frozen;\n  };\n\n  /**\n   * ### .isNotFrozen(object)\n   *\n   * Asserts that `object` is _not_ frozen.\n   *\n   *     assert.isNotFrozen({});\n   *\n   * @name isNotFrozen\n   * @alias notFrozen\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotFrozen = function (obj, msg) {\n    new Assertion(obj, msg, assert.isNotFrozen, true).to.not.be.frozen;\n  };\n\n  /**\n   * ### .isEmpty(target)\n   *\n   * Asserts that the target does not contain any values.\n   * For arrays and strings, it checks the `length` property.\n   * For `Map` and `Set` instances, it checks the `size` property.\n   * For non-function objects, it gets the count of own\n   * enumerable string keys.\n   *\n   *     assert.isEmpty([]);\n   *     assert.isEmpty('');\n   *     assert.isEmpty(new Map);\n   *     assert.isEmpty({});\n   *\n   * @name isEmpty\n   * @alias empty\n   * @param {Object|Array|String|Map|Set} target\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isEmpty = function(val, msg) {\n    new Assertion(val, msg, assert.isEmpty, true).to.be.empty;\n  };\n\n  /**\n   * ### .isNotEmpty(target)\n   *\n   * Asserts that the target contains values.\n   * For arrays and strings, it checks the `length` property.\n   * For `Map` and `Set` instances, it checks the `size` property.\n   * For non-function objects, it gets the count of own\n   * enumerable string keys.\n   *\n   *     assert.isNotEmpty([1, 2]);\n   *     assert.isNotEmpty('34');\n   *     assert.isNotEmpty(new Set([5, 6]));\n   *     assert.isNotEmpty({ key: 7 });\n   *\n   * @name isNotEmpty\n   * @alias notEmpty\n   * @param {Object|Array|String|Map|Set} target\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotEmpty = function(val, msg) {\n    new Assertion(val, msg, assert.isNotEmpty, true).to.not.be.empty;\n  };\n\n  /*!\n   * Aliases.\n   */\n\n  (function alias(name, as){\n    assert[as] = assert[name];\n    return alias;\n  })\n  ('isOk', 'ok')\n  ('isNotOk', 'notOk')\n  ('throws', 'throw')\n  ('throws', 'Throw')\n  ('isExtensible', 'extensible')\n  ('isNotExtensible', 'notExtensible')\n  ('isSealed', 'sealed')\n  ('isNotSealed', 'notSealed')\n  ('isFrozen', 'frozen')\n  ('isNotFrozen', 'notFrozen')\n  ('isEmpty', 'empty')\n  ('isNotEmpty', 'notEmpty');\n};\n","/*!\n * chai\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar used = [];\n\n/*!\n * Chai version\n */\n\nexports.version = '4.3.3';\n\n/*!\n * Assertion Error\n */\n\nexports.AssertionError = require('assertion-error');\n\n/*!\n * Utils for plugins (not exported)\n */\n\nvar util = require('./chai/utils');\n\n/**\n * # .use(function)\n *\n * Provides a way to extend the internals of Chai.\n *\n * @param {Function}\n * @returns {this} for chaining\n * @api public\n */\n\nexports.use = function (fn) {\n  if (!~used.indexOf(fn)) {\n    fn(exports, util);\n    used.push(fn);\n  }\n\n  return exports;\n};\n\n/*!\n * Utility Functions\n */\n\nexports.util = util;\n\n/*!\n * Configuration\n */\n\nvar config = require('./chai/config');\nexports.config = config;\n\n/*!\n * Primary `Assertion` prototype\n */\n\nvar assertion = require('./chai/assertion');\nexports.use(assertion);\n\n/*!\n * Core Assertions\n */\n\nvar core = require('./chai/core/assertions');\nexports.use(core);\n\n/*!\n * Expect interface\n */\n\nvar expect = require('./chai/interface/expect');\nexports.use(expect);\n\n/*!\n * Should interface\n */\n\nvar should = require('./chai/interface/should');\nexports.use(should);\n\n/*!\n * Assert interface\n */\n\nvar assert = require('./chai/interface/assert');\nexports.use(assert);\n","module.exports = require('./lib/chai');\n","import chai from './index.js';\n\nexport const expect = chai.expect;\nexport const version = chai.version;\nexport const Assertion = chai.Assertion;\nexport const AssertionError = chai.AssertionError;\nexport const util = chai.util;\nexport const config = chai.config;\nexport const use = chai.use;\nexport const should = chai.should;\nexport const assert = chai.assert;\nexport const core = chai.core;\n\nexport default chai;\n","// NOTE: this imports RingBuffer directly from node_modules\n// which is different from maxi-processor that\n// dynamically loads from the adjacent ringBuf.js file\nimport { RingBuffer } from 'ringbuf.js'; //thanks padenot\n\nimport {\n  loadSampleToArray\n} from './maximilian.util.js';\n\nimport Dispatcher from '../common/dispatcher.js';\nimport { expect } from 'chai';\n// import { isThisTypeNode } from 'typescript';\n// import {\n//   kuramotoNetClock\n// } from './interfaces/clockInterface.js';\n// import {\n//   PeerStreaming\n// } from '../interfaces/peerStreaming.js';\n\n/**\n * The CustomMaxiNode is a class that extends AudioWorkletNode\n * to hold an Custom Audio Worklet Processor and connect to Web Audio graph\n * @class CustomMaxiNode\n * @extends AudioWorkletNode\n */\n// if(true){\nclass CustomMaxiNode extends AudioWorkletNode {\n  constructor(audioContext, processorName) {\n    // super(audioContext, processorName);\n    console.log();\n    let options = {\n      numberOfInputs: 1,\n      numberOfOutputs: 1,\n      outputChannelCount: [audioContext.destination.maxChannelCount]\n    };\n    super(audioContext, processorName, options);\n  }\n}\n// }\n\n/**\n * The Engine is a singleton class that encapsulates the AudioContext\n * and all WASM and Maximilian -powered Audio Worklet Processor\n * @class AudioEngine\n * TODO more error handling\n * TODO more checking of arguments passed to methods\n * TODO optimise performance, especially on analysers which are pumping data continuously\n */\nexport class Engine {\n\t/**\n\t * @constructor\n\t */\n\tconstructor() {\n\t\tif (Engine.instance) {\n\t\t\treturn Engine.instance; // Singleton pattern\n\t\t}\n\t\tEngine.instance = this;\n\n\t\tthis.origin = \"\";\n\n\t\tthis.learners = {};\n\n\t\t// Hash of on-demand analysers (e.g. spectrogram, oscilloscope)\n\t\t// NOTE: analysers serialized to localStorage are de-serialized\n\t\t// and loaded from localStorage before user-triggered audioContext init\n\t\tthis.analysers = {};\n\n\t\tthis.mediaStreamSource = {};\n\t\tthis.mediaStream = {};\n\n\t\t// Shared array buffers for sharing client side data to the audio engine- e.g. mouse coords\n\t\tthis.sharedArrayBuffers = {};\n\n\t\t// Event emitter that should be subscribed by SAB receivers\n\t\tthis.dispatcher = new Dispatcher();\n\n\t\tthis.samplesLoaded = false;\n    this.isHushed = false;\n\t}\n\n\t/**\n\t * Add learner instance\n\t */\n\tasync addLearner(id, learner) {\n\t\tif (learner) {\n\t\t\ttry {\n\t\t\t\t// `this` is the scope that will\n\t\t\t\tawait learner.init(this.origin);\n\n\t\t\t\tthis.addEventListener(\"onSharedBuffer\", (e) => {\n          console.log(\"engine received onSharedBuffer\", e)\n          // if(this.sharedArrayBuffers[e.channelID] === undefined)\n          // {\n          //   let ringbuf = new RingBuffer(e.sab, Float64Array);\n          //\n  \t\t\t\t// \tthis.sharedArrayBuffers[e.channelID] = {\n  \t\t\t\t// \t\tsab: e.sab,\n  \t\t\t\t// \t\trb: ringbuf,\n          //     blocksize: e.blocksize\n  \t\t\t\t// \t};\n          // }\n\t\t\t\t\tlearner.addSharedBuffer(e)\n\t\t\t\t}); // Engine's SAB emissions subscribed by Learner\n\n\t\t\t\tlearner.addEventListener(\"onSharedBuffer\", (e) => {\n          console.log(\"learner received onSharedBuffer\", e)\n\t\t\t\t\tthis.addSharedBuffer(e)\n\t\t\t\t}); // Learner's SAB emissions subscribed by Engine\n\n\t\t\t\tthis.learners[id] = learner;\n\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error(\"Error adding Learner to Engine: \", error);\n\t\t\t}\n\t\t} else throw new Error(\"Error adding Learner instance to Engine\");\n\t}\n\n\tremoveLearner(id) {\n\t\tif (id){\n\t\t\tif (this.learners && ( id in this.learners ) ) {\n\t\t\t\tlet learner = this.learners[id];\n\t\t\t\tlearner.removeEventListener(\"onSharedBuffer\", (e) =>\n\t\t\t\t\tthis.addSharedBuffer(e)\n\t\t\t\t);\n\t\t\t\tlearner = null;\n\t\t\t\tdelete this.learners[id];\n\t\t\t}\n\t\t\t// else throw new Error(\"Error removing Learner from Engine: \");\n\t\t} else throw new Error(\"Error with learner ID when removing Learner from Engine\");\n\t}\n\n\t/**\n\t * Engine's event subscription\n\t * @addEventListener\n\t * @param {*} event\n\t * @param {*} callback\n\t */\n\taddEventListener(event, callback) {\n\t\tif (this.dispatcher && event && callback)\n\t\t\tthis.dispatcher.addEventListener(event, callback);\n\t\telse throw new Error(\"Error adding event listener to Engine\");\n\t}\n\n\t/* #region SharedBuffers */\n\n\t/**\n\t * Create a shared array buffer for communicating with the audio engine\n\t * @param channelId\n\t * @param ttype\n\t * @param blocksize\n\t */\n\tcreateSharedBuffer(channelId, ttype, blocksize) {\n\t\tlet sab = RingBuffer.getStorageForCapacity(32 * blocksize, Float64Array);\n\t\tlet ringbuf = new RingBuffer(sab, Float64Array);\n\n\t\tthis.audioWorkletNode.port.postMessage({\n\t\t\tfunc: \"sab\",\n\t\t\tvalue: sab,\n\t\t\tttype: ttype,\n\t\t\tchannelID: channelId,\n\t\t\tblocksize: blocksize,\n\t\t});\n\n\t\tthis.sharedArrayBuffers[channelId] = {\n\t\t\tsab: sab, // TODO: this is redundant, you can access the sab from the rb,\n\t\t\t// TODO change hashmap name it is confusing and induces error\n\t\t\trb: ringbuf,\n      blocksize: blocksize\n\t\t};\n\n\t\treturn sab;\n\t}\n\n\t/**\n\t * Push data to shared array buffer for communicating with\" the audio engine and ML worker\n\t * @param {*} e\n\t */\n\taddSharedBuffer(e) {\n    console.log(\"addSharedBuffer engine.js\", e)\n\t\tif (e) {\n\t\t\tif (e.sab && e.sab instanceof SharedArrayBuffer) {\n\t\t\t\ttry {\n\t\t\t\t\tlet ringbuf = new RingBuffer(e.sab, Float64Array);\n\t\t\t\t\tthis.audioWorkletNode.port.postMessage({\n\t\t\t\t\t\tfunc: \"sab\",\n\t\t\t\t\t\tvalue: e.sab,\n\t\t\t\t\t\tttype: e.ttype,\n\t\t\t\t\t\tchannelID: e.channelID,\n\t\t\t\t\t\tblocksize: e.blocksize,\n\t\t\t\t\t});\n\n\t\t\t\t\tthis.sharedArrayBuffers[e.channelID] = {\n\t\t\t\t\t\tsab: e.sab, // TODO this is redundant, you can access the sab from the rb,\n\t\t\t\t\t\t// TODO also change hashmap name it is confusing and induces error\n\t\t\t\t\t\trb: ringbuf,\n            blocksize: e.blocksize\n\t\t\t\t\t};\n\t\t\t\t} catch (err) {\n\t\t\t\t\tconsole.error(\"Error pushing SharedBuffer to engine\");\n\t\t\t\t}\n\t\t\t} else if (e.name && e.data) {\n\t\t\t\tthis.audioWorkletNode.port.postMessage({\n\t\t\t\t\tfunc: \"sendbuf\",\n\t\t\t\t\tname: e.name,\n\t\t\t\t\tdata: e.data,\n\t\t\t\t});\n\t\t\t}\n\t\t} else throw new Error(\"Error with onSharedBuffer event\");\n\t}\n\n\t/**\n\t * Push data to shared array buffer for communicating with the audio engine and ML worker\n\t * @param {*} e\n\t * @param {*} channelId\n\t */\n\tpushDataToSharedBuffer(channelId, data) {\n\t\tif (channelId && data && typeof Array.isArray(data)) {\n\t\t\tif (this.sharedArrayBuffers && this.sharedArrayBuffers[channelId]) {\n\t\t\t\tthis.sharedArrayBuffers[channelId].rb.push(data);\n\t\t\t}\n\t\t} else throw new Error(\"Error in function parameters\");\n\t}\n\n\t/* #region Analysers */\n\n\t/**\n\t * Polls data from connected WAAPI analyser return structured object with data and time data in arrays\n\t * @param {*} analyser\n\t */\n\tpollAnalyserData(analyser) {\n\t\tif (analyser !== undefined) {\n\t\t\tconst timeDataArray = new Uint8Array(analyser.fftSize); // Uint8Array should be the same length as the fftSize\n\t\t\tconst frequencyDataArray = new Uint8Array(analyser.fftSize);\n\n\t\t\tanalyser.getByteTimeDomainData(timeDataArray);\n\t\t\tanalyser.getByteFrequencyData(frequencyDataArray);\n\n\t\t\treturn {\n\t\t\t\tsmoothingTimeConstant: analyser.smoothingTimeConstant,\n\t\t\t\tfftSize: analyser.fftSize,\n\t\t\t\tfrequencyDataArray: frequencyDataArray,\n\t\t\t\ttimeDataArray: timeDataArray,\n\t\t\t};\n\t\t}\n\t}\n\n\t/**\n\t * Creates a WAAPI analyser node\n\t * @todo configuration object as argumen\n\t * @createAnalyser\n\t */\n\tcreateAnalyser(analyserID, callback) {\n\t\t// If Analyser creation happens after AudioContext intialization, create and connect WAAPI analyser\n\t\tif (analyserID && callback){\n      if(this.audioContext && this.audioWorkletNode ) {\n\n        let analyser = this.audioContext.createAnalyser();\n        analyser.smoothingTimeConstant = 0.25;\n        analyser.fftSize = 256; // default 2048;\n        analyser.minDecibels = -90; // default\n        analyser.maxDecibels = -0; // default -10; max 0\n        this.audioWorkletNode.connect(analyser);\n\n        let analyserFrameId = -1,\n            analyserData = {};\n\n        this.analysers[analyserID] = {\n          analyser,\n          analyserFrameId,\n          callback,\n        };\n\n        /**\n         * Creates requestAnimationFrame loop for polling data and publishing\n         * Returns Analyser Frame ID for adding to Analysers hash\n         * and cancelling animation frame\n         */\n        const analyserPollingLoop = () => {\n          analyserData = this.pollAnalyserData(\n            this.analysers[analyserID].analyser\n          );\n          this.analysers[analyserID].callback(analyserData); // Invoke callback that carries\n          // This will guarantee feeding poll request at steady animation framerate\n          this.analysers[analyserID].analyserFrameId = requestAnimationFrame(\n            analyserPollingLoop\n          );\n          return analyserFrameId;\n        };\n\n        analyserPollingLoop();\n\n\t\t\t// Other if AudioContext is NOT created yet (after app load, before splashScreen click)\n      } else {\n        this.analysers[analyserID] = { callback };\n      }\n    } else throw new Error('Parameters to createAnalyser incorrect')\n\t}\n\n\t/**\n\t * Connects WAAPI analyser nodes to the main audio worklet for visualisation.\n\t * @connectAnalysers\n\t */\n\tconnectAnalysers() {\n\t\tObject.keys(this.analysers).map((id) =>\n\t\t\tthis.createAnalyser(id, this.analysers[id].callback)\n\t\t);\n\t}\n\n\t/**\n\t * Removes a WAAPI analyser node, disconnects graph, cancels animation frame, deletes from hash\n\t * @removeAnalyser\n\t */\n\tremoveAnalyser(event) {\n\t\tif ( this.audioContext && this.audioWorkletNode ) {\n\t\t\tlet analyser = this.analysers[event.id];\n\t\t\tif (analyser !== undefined) {\n\t\t\t\tcancelAnimationFrame(this.analysers[event.id].analyserFrameId);\n\t\t\t\tdelete this.analysers[event.id];\n\t\t\t\t// this.audioWorkletNode.disconnect(analyser);\n\t\t\t}\n\t\t}\n\t}\n\n\t/* #endregion */\n\n\t/**\n\t * Initialises audio context and sets worklet processor code\n\t * @play\n\t */\n\tasync init(origin) {\n\t\tif (origin && new URL(origin)) {\n\n      let isWorkletProcessorLoaded;\n\n      try{\n        // AudioContext needs lazy loading to workaround the Chrome warning\n        // Audio Engine first play() call, triggered by user, prevents the warning\n        // by setting this.audioContext = new AudioContext();\n        this.audioContext;\n        this.origin = origin;\n        this.audioWorkletName = \"maxi-processor\";\n        this.audioWorkletUrl = origin + \"/\" + this.audioWorkletName + \".js\";\n\n        if (this.audioContext === undefined) {\n          this.audioContext = new AudioContext({\n            // create audio context with latency optimally configured for playback\n            latencyHint: \"playback\",\n            // latencyHint: 32/44100,  //this doesn't work below 512 on chrome (?)\n            // sampleRate: 44100\n          });\n        }\n\n        isWorkletProcessorLoaded = await this.loadWorkletProcessorCode();\n      }\n      catch(err){\n        return false;\n      }\n\n\t\t\tif (isWorkletProcessorLoaded) {\n\t\t\t\tthis.connectWorkletNode();\n\t\t\t\treturn true;\n\t\t\t} else return false;\n\n\t\t\t// No need to inject the callback here, messaging is built in KuraClock\n\t\t\t// this.kuraClock = new kuramotoNetClock((phase, idx) => {\n\t\t\t//   // console.log( `DEBUG:AudioEngine:sendPeersMyClockPhase:phase:${phase}:id:${idx}`);\n\t\t\t//   // This requires an initialised audio worklet\n\t\t\t//   this.audioWorkletNode.port.postMessage({ phase: phase, i: idx });\n\t\t\t// });\n\t\t\t// if (this.kuraClock.connected()) {\n\t\t\t// \tthis.kuraClock.queryPeers(async numClockPeers => {\n\t\t\t// \t\tconsole.log(`DEBUG:AudioEngine:init:numClockPeers: ${numClockPeers}`);\n\t\t\t// \t});\n\t\t\t// }\n\t\t} else {\n\t\t\tthrow new Error(\"Name and valid URL required for AudioWorklet processor\");\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * Initialises audio context and sets worklet processor code\n\t * or re-starts audio playback by stopping and running the latest Audio Worklet Processor code\n\t * @play\n\t */\n\tplay() {\n\t\tif (this.audioContext !== undefined) {\n\t\t\tif (this.audioContext.state === \"suspended\") {\n\t\t\t\tthis.audioContext.resume();\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\tthis.hush();\n\t\t\t\t// this.stop();\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Suspends AudioContext (Pause)\n\t * @stop\n\t */\n\tstop() {\n\t\tif (this.audioWorkletNode !== undefined) {\n\t\t\tthis.hush();\n\t\t\t// this.audioContext.suspend();\n\t\t}\n\t}\n\n\t/**\n\t * Stops audio by disconnecting AudioNode with AudioWorkletProcessor code\n\t * from Web Audio graph TODO Investigate when it is best to just STOP the graph exectution\n\t * @stop\n\t */\n\tstopAndRelease() {\n\t\tif (this.audioWorkletNode !== undefined) {\n\t\t\tthis.audioWorkletNode.disconnect(this.audioContext.destination);\n\t\t\tthis.audioWorkletNode = undefined;\n\t\t}\n\t}\n\n\tsetGain(gain) {\n\t\tif (this.audioWorkletNode !== undefined && gain >= 0 && gain <= 1) {\n\t\t\tconst gainParam = this.audioWorkletNode.parameters.get(\"gain\");\n\t\t\tgainParam.value = gain;\n\t\t\tconsole.log(gainParam.value); // DEBUG\n\t\t\treturn true;\n\t\t} else return false;\n\t}\n\n\tmore() {\n\t\tif (this.audioWorkletNode !== undefined) {\n\t\t\tconst gainParam = this.audioWorkletNode.parameters.get(\"gain\");\n\t\t\tgainParam.value += 0.05;\n\t\t\tconsole.info(gainParam.value); // DEBUG\n\t\t\treturn gainParam.value;\n\t\t} else throw new Error(\"error increasing sound level\");\n\t}\n\n\tless() {\n\t\tif (this.audioWorkletNode !== undefined) {\n\t\t\tconst gainParam = this.audioWorkletNode.parameters.get(\"gain\");\n\t\t\tgainParam.value -= 0.05;\n\t\t\tconsole.info(gainParam.value); // DEBUG\n\t\t\treturn gainParam.value;\n\t\t} else throw new Error(\"error decreasing sound level\");\n\t}\n\n\thush() {\n\t\tif (this.audioWorkletNode !== undefined) {\n\t\t\tthis.audioWorkletNode.port.postMessage({\n\t\t\t\thush: 1,\n\t\t\t});\n      this.isHushed = true;\n\t\t\treturn true;\n\t\t} else return false;\n\t}\n\n\tunHush() {\n\t\tif (this.audioWorkletNode !== undefined) {\n\t\t\tthis.audioWorkletNode.port.postMessage({\n\t\t\t\tunhush: 1,\n\t\t\t});\n      this.isHushed = false;\n\t\t\treturn true;\n\t\t} else return false;\n\t}\n\n\teval(dspFunction) {\n\t\tif (this.audioWorkletNode && this.audioWorkletNode.port) {\n\t\t\tif (this.audioContext.state === \"suspended\") {\n\t\t\t\tthis.audioContext.resume();\n\t\t\t}\n\t\t\tthis.audioWorkletNode.port.postMessage({\n\t\t\t\teval: 1,\n\t\t\t\tsetup: dspFunction.setup,\n\t\t\t\tloop: dspFunction.loop,\n\t\t\t});\n      this.isHushed = false;\n\t\t\treturn true;\n\t\t} else return false;\n\t}\n\n\t/**\n\t * Handler of the Pub/Sub message events\n\t * whose topics are subscribed to in the audio engine constructor\n\t * @asyncPostToProcessor\n\t * @param {*} event\n\t */\n\tasyncPostToProcessor(event) {\n\t\tif (event && this.audioWorkletNode && this.audioWorkletNode.port) {\n\t\t\t// Receive notification from 'model-output-data' topic\n\t\t\tconsole.log(\"DEBUG:AudioEngine:onMessagingEventHandler:\");\n\t\t\tconsole.log(event);\n\t\t\tthis.audioWorkletNode.port.postMessage(event);\n\t\t} else throw new Error(\"Error async posting to processor\");\n\t}\n\n\tsendClockPhase(phase, idx) {\n\t\tif (this.audioWorkletNode !== undefined) {\n\t\t\tthis.audioWorkletNode.port.postMessage({\n\t\t\t\tphase: phase,\n\t\t\t\ti: idx,\n\t\t\t});\n\t\t}\n\t}\n\n\tonAudioInputInit(stream) {\n    try {\n      this.mediaStreamSource = this.audioContext.createMediaStreamSource(stream);\n      this.mediaStreamSource.connect(this.audioWorkletNode);\n      this.mediaStream = stream;\n      this.mediaStreamSourceConnected = true;\n    } catch (error) {\n      console.error(error);\n    }\n\t}\n\n\tonAudioInputFail(error) {\n\t\tthis.mediaStreamSourceConnected = false;\n\t\tconsole.error(\n\t\t\t`ERROR:Engine:AudioInputFail: ${error.message} ${error.name}`\n\t\t);\n\t}\n\n\tonAudioInputDisconnect() {\n\n\t}\n\n\t/**\n\t * Sets up an AudioIn WAAPI sub-graph\n\t * @connectMediaStreamSourceInput\n\t */\n\tasync connectMediaStream() {\n\t\tconst constraints = ( window.constraints = {\n      audio: {\n        latency: 0.02,\n        echoCancellation: false,\n        mozNoiseSuppression: false,\n        mozAutoGainControl: false\n      },\n\t\t\tvideo: false,\n\t\t});\n    // onAudioInputDisconnect();\n\t\tawait navigator.mediaDevices\n\t\t\t.getUserMedia(constraints)\n\t\t\t.then( s => this.onAudioInputInit(s) )\n\t\t\t.catch(this.onAudioInputFail);\n\n\t\treturn this.mediaStreamSourceConnected;\n\t}\n\n\t/**\n\t * Breaks up an AudioIn WAAPI sub-graph\n\t * @disconnectMediaStreamSourceInput\n\t */\n\tasync disconnectMediaStream() {\n\n    try {\n\t\t\tthis.mediaStreamSource.disconnect(this.audioWorkletNode);\n\t\t\tthis.mediaStream.getAudioTracks().forEach((at) => at.stop());\n\t\t\tthis.mediaStreamSource = null;\n\t\t\tthis.mediaStreamSourceConnected = false;\n\t\t} catch (error) {\n\t\t\tconsole.error(error);\n\t\t}\n    finally {\n      return this.mediaStreamSourceConnected;\n    }\n\t\t// await navigator.mediaDevices\n\t\t// \t.getUserMedia(constraints)\n\t\t// \t.then((s) => this.onAudioInputDisconnect(s))\n\t\t// \t.catch(this.onAudioInputFail);\n\n\n\t}\n\n\t/**\n\t * Loads audioWorklet processor code into a worklet,\n\t * setups up all handlers (errors, async messaging, etc),\n\t * connects the worklet processor to the WAAPI graph\n\t */\n\tasync loadWorkletProcessorCode() {\n\t\tif (this.audioContext !== undefined) {\n\t\t\ttry {\n\t\t\t\tawait this.audioContext.audioWorklet.addModule(this.audioWorkletUrl);\n\t\t\t} catch (err) {\n\t\t\t\tconsole.error(\n\t\t\t\t\t\"ERROR:Engine:loadWorkletProcessorCode: AudioWorklet not supported in this browser: \",\n\t\t\t\t\terr.message\n\t\t\t\t);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\ttry {\n\t\t\t\t// Custom node constructor with required parameters\n\t\t\t\t// this.audioWorkletNode = new CustomMaxiNode(\n\t\t\t\tthis.audioWorkletNode = new AudioWorkletNode(\n\t\t\t\t\tthis.audioContext,\n\t\t\t\t\tthis.audioWorkletName\n\t\t\t\t);\n\n\t\t\t\tthis.audioWorkletNode.channelInterpretation = \"discrete\";\n\t\t\t\tthis.audioWorkletNode.channelCountMode = \"explicit\";\n\t\t\t\tthis.audioWorkletNode.channelCount = this.audioContext.destination.maxChannelCount;\n\n\t\t\t\treturn true;\n\t\t\t} catch (err) {\n\t\t\t\tconsole.error(\"Error loading worklet processor code: \", err);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * connects all error event handlers and default processor message callback\n\t */\n\tconnectWorkletNode() {\n\t\tif (this.audioWorkletNode !== undefined) {\n\t\t\ttry {\n\t\t\t\tthis.audioContext.destination.channelInterpretation = \"discrete\";\n\t\t\t\tthis.audioContext.destination.channelCountMode = \"explicit\";\n\t\t\t\tthis.audioContext.destination.channelCount = this.audioContext.destination.maxChannelCount;\n\n\t\t\t\t// Connect the worklet node to the audio graph\n\t\t\t\tthis.audioWorkletNode.connect(this.audioContext.destination);\n\n\t\t\t\t// All possible error event handlers subscribed\n\t\t\t\tthis.audioWorkletNode.onprocessorerror = (e) =>\n\t\t\t\t\t// Errors from the processor\n\t\t\t\t\tconsole.error(`Engine processor error detected`, e);\n\n\t\t\t\t// Subscribe state changes in the audio worklet processor\n\t\t\t\tthis.audioWorkletNode.onprocessorstatechange = (e) =>\n\t\t\t\t\tconsole.info(\n\t\t\t\t\t\t`Engine processor state change: ` + audioWorkletNode.processorState\n\t\t\t\t\t);\n\n\t\t\t\t// Subscribe errors from the processor port\n\t\t\t\tthis.audioWorkletNode.port.onmessageerror = (e) =>\n\t\t\t\t\tconsole.error(`Engine processor port error: ` + e);\n\n\t\t\t\t// Default worklet processor message handler\n\t\t\t\t// gets replaced by user callback with 'subscribeAsyncMessage'\n\t\t\t\tthis.audioWorkletNode.port.onmessage = (e) =>\n\t\t\t\t\tthis.onProcessorMessageHandler(e);\n\n\t\t\t} catch (err) {\n\t\t\t\tconsole.error(\"Error connecting WorkletNode: \", err);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Default worklet processor message handler\n\t * gets replaced by user-supplied callback through 'subscribeProcessorMessage'\n\t * @param {*} event\n\t */\n\tonProcessorMessageHandler(event) {\n    console.log(\"onProcessorMessageHandler\", event)\n\t\tif (event && event.data) {\n\t\t\tif (event.data.rq && event.data.rq === \"send\") {\n\t\t\t\tswitch (event.data.ttype) {\n\t\t\t\t\tcase \"ML\":\n\t\t\t\t\t\t// this.messaging.publish(\"model-input-data\", {\n\t\t\t\t\t\t//   type: \"model-input-data\",\n\t\t\t\t\t\t//   value: event.data.value,\n\t\t\t\t\t\t//   ch: event.data.ch\n\t\t\t\t\t\t// });\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"NET\":\n\t\t\t\t\t\tthis.peerNet.send(\n\t\t\t\t\t\t\tevent.data.ch[0],\n\t\t\t\t\t\t\tevent.data.value,\n\t\t\t\t\t\t\tevent.data.ch[1]\n\t\t\t\t\t\t);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else if (event.data.rq && event.data.rq === \"buf\") {\n\t\t\t\tswitch (event.data.ttype) {\n\t\t\t\t\tcase \"ML\":\n            console.log(\"ML\", event.data)\n\t\t\t\t\t\tthis.dispatcher.dispatch(\"onSharedBuffer\", {\n\t\t\t\t\t\t\tsab: event.data.value,\n\t\t\t\t\t\t\tchannelID: event.data.channelID, //channel ID\n\t\t\t\t\t\t\tblocksize: event.data.blocksize,\n\t\t\t\t\t\t});\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"scope\":\n\t\t\t\t\t\t// this.dispatcher.dispatch(\"onSharedBuffer\", {\n\t\t\t\t\t\t// \tsab: event.data.value,\n\t\t\t\t\t\t// \tchannelID: event.data.channelID, //channel ID\n\t\t\t\t\t\t// \tblocksize: event.data.blocksize,\n\t\t\t\t\t\t// });\n\n\t\t\t\t\t\tlet ringbuf = new RingBuffer(event.data.value, Float64Array);\n\n\t\t\t\t\t\tthis.sharedArrayBuffers[event.data.channelID] = {\n\t\t\t\t\t\t\tsab: event.data.value, // TODO: this is redundant, you can access the sab from the rb,\n\t\t\t\t\t\t\t// TODO change hashmap name it is confusing and induces error\n\t\t\t\t\t\t\trb: ringbuf,\n\t\t\t\t\t\t\tttype: event.data.ttype,\n\t\t\t\t\t\t\tchannelID: event.data.channelID, //channel ID\n\t\t\t\t\t\t\tblocksize: event.data.blocksize,\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else if (event.data.rq && event.data.rq === \"rts\") { // ready to suspend\n\t\t  \tthis.audioContext.suspend();\n        this.isHushed = true;\n\t\t  }\n      else if (event.data instanceof Error){\n        // TODO use a logger to inject error\n        console.error(`On Processor Message ${event.data}`);\n      }\n\t\t}\n\t}\n\n\t/**\n\t * Public method for subscribing async messaging from the Audio Worklet Processor scope\n\t * @param callback\n\t */\n\tsubscribeProcessorMessage(callback) {\n\t\tif (callback && this.audioWorkletNode)\n\t\t\tthis.audioWorkletNode.port.onmessage = callback;\n\t\telse throw new Error(\"Error subscribing processor message\");\n\t}\n\n\t/**\n\t * Load individual audio sample, assuming an origin URL with which the engine\n\t * is initialised\n\t * @param {*} objectName name of the sample\n\t * @param {*} url relative URL to the origin URL, startgin with `/`\n\t */\n\tloadSample(objectName, url) {\n\t\tif (this.audioContext && this.audioWorkletNode) {\n\t\t\tif (\n\t\t\t\turl &&\n\t\t\t\turl.length !== 0 &&\n\t\t\t\tthis.origin &&\n\t\t\t\tthis.origin.length !== 0 &&\n\t\t\t\tnew URL(this.origin + url)\n\t\t\t) {\n\t\t\t\ttry {\n\t\t\t\t\tloadSampleToArray(\n\t\t\t\t\t\tthis.audioContext,\n\t\t\t\t\t\tobjectName,\n\t\t\t\t\t\tthis.origin + url,\n\t\t\t\t\t\tthis.audioWorkletNode\n\t\t\t\t\t);\n\t\t\t\t} catch (error) {\n\t\t\t\t\tconsole.error(\n\t\t\t\t\t\t`Error loading sample ${objectName} from ${url}: `,\n\t\t\t\t\t\terror\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t} else throw \"Problem with sample relative URL\";\n\t\t} else throw \"Engine is not initialised!\";\n\t}\n}\n","(function(root, factory) {\n    if (typeof module === 'object' && module.exports) {\n        module.exports = factory();\n    } else {\n        root.nearley = factory();\n    }\n}(this, function() {\n\n    function Rule(name, symbols, postprocess) {\n        this.id = ++Rule.highestId;\n        this.name = name;\n        this.symbols = symbols;        // a list of literal | regex class | nonterminal\n        this.postprocess = postprocess;\n        return this;\n    }\n    Rule.highestId = 0;\n\n    Rule.prototype.toString = function(withCursorAt) {\n        var symbolSequence = (typeof withCursorAt === \"undefined\")\n                             ? this.symbols.map(getSymbolShortDisplay).join(' ')\n                             : (   this.symbols.slice(0, withCursorAt).map(getSymbolShortDisplay).join(' ')\n                                 + \" ● \"\n                                 + this.symbols.slice(withCursorAt).map(getSymbolShortDisplay).join(' ')     );\n        return this.name + \" → \" + symbolSequence;\n    }\n\n\n    // a State is a rule at a position from a given starting point in the input stream (reference)\n    function State(rule, dot, reference, wantedBy) {\n        this.rule = rule;\n        this.dot = dot;\n        this.reference = reference;\n        this.data = [];\n        this.wantedBy = wantedBy;\n        this.isComplete = this.dot === rule.symbols.length;\n    }\n\n    State.prototype.toString = function() {\n        return \"{\" + this.rule.toString(this.dot) + \"}, from: \" + (this.reference || 0);\n    };\n\n    State.prototype.nextState = function(child) {\n        var state = new State(this.rule, this.dot + 1, this.reference, this.wantedBy);\n        state.left = this;\n        state.right = child;\n        if (state.isComplete) {\n            state.data = state.build();\n            // Having right set here will prevent the right state and its children\n            // form being garbage collected\n            state.right = undefined;\n        }\n        return state;\n    };\n\n    State.prototype.build = function() {\n        var children = [];\n        var node = this;\n        do {\n            children.push(node.right.data);\n            node = node.left;\n        } while (node.left);\n        children.reverse();\n        return children;\n    };\n\n    State.prototype.finish = function() {\n        if (this.rule.postprocess) {\n            this.data = this.rule.postprocess(this.data, this.reference, Parser.fail);\n        }\n    };\n\n\n    function Column(grammar, index) {\n        this.grammar = grammar;\n        this.index = index;\n        this.states = [];\n        this.wants = {}; // states indexed by the non-terminal they expect\n        this.scannable = []; // list of states that expect a token\n        this.completed = {}; // states that are nullable\n    }\n\n\n    Column.prototype.process = function(nextColumn) {\n        var states = this.states;\n        var wants = this.wants;\n        var completed = this.completed;\n\n        for (var w = 0; w < states.length; w++) { // nb. we push() during iteration\n            var state = states[w];\n\n            if (state.isComplete) {\n                state.finish();\n                if (state.data !== Parser.fail) {\n                    // complete\n                    var wantedBy = state.wantedBy;\n                    for (var i = wantedBy.length; i--; ) { // this line is hot\n                        var left = wantedBy[i];\n                        this.complete(left, state);\n                    }\n\n                    // special-case nullables\n                    if (state.reference === this.index) {\n                        // make sure future predictors of this rule get completed.\n                        var exp = state.rule.name;\n                        (this.completed[exp] = this.completed[exp] || []).push(state);\n                    }\n                }\n\n            } else {\n                // queue scannable states\n                var exp = state.rule.symbols[state.dot];\n                if (typeof exp !== 'string') {\n                    this.scannable.push(state);\n                    continue;\n                }\n\n                // predict\n                if (wants[exp]) {\n                    wants[exp].push(state);\n\n                    if (completed.hasOwnProperty(exp)) {\n                        var nulls = completed[exp];\n                        for (var i = 0; i < nulls.length; i++) {\n                            var right = nulls[i];\n                            this.complete(state, right);\n                        }\n                    }\n                } else {\n                    wants[exp] = [state];\n                    this.predict(exp);\n                }\n            }\n        }\n    }\n\n    Column.prototype.predict = function(exp) {\n        var rules = this.grammar.byName[exp] || [];\n\n        for (var i = 0; i < rules.length; i++) {\n            var r = rules[i];\n            var wantedBy = this.wants[exp];\n            var s = new State(r, 0, this.index, wantedBy);\n            this.states.push(s);\n        }\n    }\n\n    Column.prototype.complete = function(left, right) {\n        var copy = left.nextState(right);\n        this.states.push(copy);\n    }\n\n\n    function Grammar(rules, start) {\n        this.rules = rules;\n        this.start = start || this.rules[0].name;\n        var byName = this.byName = {};\n        this.rules.forEach(function(rule) {\n            if (!byName.hasOwnProperty(rule.name)) {\n                byName[rule.name] = [];\n            }\n            byName[rule.name].push(rule);\n        });\n    }\n\n    // So we can allow passing (rules, start) directly to Parser for backwards compatibility\n    Grammar.fromCompiled = function(rules, start) {\n        var lexer = rules.Lexer;\n        if (rules.ParserStart) {\n          start = rules.ParserStart;\n          rules = rules.ParserRules;\n        }\n        var rules = rules.map(function (r) { return (new Rule(r.name, r.symbols, r.postprocess)); });\n        var g = new Grammar(rules, start);\n        g.lexer = lexer; // nb. storing lexer on Grammar is iffy, but unavoidable\n        return g;\n    }\n\n\n    function StreamLexer() {\n      this.reset(\"\");\n    }\n\n    StreamLexer.prototype.reset = function(data, state) {\n        this.buffer = data;\n        this.index = 0;\n        this.line = state ? state.line : 1;\n        this.lastLineBreak = state ? -state.col : 0;\n    }\n\n    StreamLexer.prototype.next = function() {\n        if (this.index < this.buffer.length) {\n            var ch = this.buffer[this.index++];\n            if (ch === '\\n') {\n              this.line += 1;\n              this.lastLineBreak = this.index;\n            }\n            return {value: ch};\n        }\n    }\n\n    StreamLexer.prototype.save = function() {\n      return {\n        line: this.line,\n        col: this.index - this.lastLineBreak,\n      }\n    }\n\n    StreamLexer.prototype.formatError = function(token, message) {\n        // nb. this gets called after consuming the offending token,\n        // so the culprit is index-1\n        var buffer = this.buffer;\n        if (typeof buffer === 'string') {\n            var lines = buffer\n                .split(\"\\n\")\n                .slice(\n                    Math.max(0, this.line - 5), \n                    this.line\n                );\n\n            var nextLineBreak = buffer.indexOf('\\n', this.index);\n            if (nextLineBreak === -1) nextLineBreak = buffer.length;\n            var col = this.index - this.lastLineBreak;\n            var lastLineDigits = String(this.line).length;\n            message += \" at line \" + this.line + \" col \" + col + \":\\n\\n\";\n            message += lines\n                .map(function(line, i) {\n                    return pad(this.line - lines.length + i + 1, lastLineDigits) + \" \" + line;\n                }, this)\n                .join(\"\\n\");\n            message += \"\\n\" + pad(\"\", lastLineDigits + col) + \"^\\n\";\n            return message;\n        } else {\n            return message + \" at index \" + (this.index - 1);\n        }\n\n        function pad(n, length) {\n            var s = String(n);\n            return Array(length - s.length + 1).join(\" \") + s;\n        }\n    }\n\n    function Parser(rules, start, options) {\n        if (rules instanceof Grammar) {\n            var grammar = rules;\n            var options = start;\n        } else {\n            var grammar = Grammar.fromCompiled(rules, start);\n        }\n        this.grammar = grammar;\n\n        // Read options\n        this.options = {\n            keepHistory: false,\n            lexer: grammar.lexer || new StreamLexer,\n        };\n        for (var key in (options || {})) {\n            this.options[key] = options[key];\n        }\n\n        // Setup lexer\n        this.lexer = this.options.lexer;\n        this.lexerState = undefined;\n\n        // Setup a table\n        var column = new Column(grammar, 0);\n        var table = this.table = [column];\n\n        // I could be expecting anything.\n        column.wants[grammar.start] = [];\n        column.predict(grammar.start);\n        // TODO what if start rule is nullable?\n        column.process();\n        this.current = 0; // token index\n    }\n\n    // create a reserved token for indicating a parse fail\n    Parser.fail = {};\n\n    Parser.prototype.feed = function(chunk) {\n        var lexer = this.lexer;\n        lexer.reset(chunk, this.lexerState);\n\n        var token;\n        while (true) {\n            try {\n                token = lexer.next();\n                if (!token) {\n                    break;\n                }\n            } catch (e) {\n                // Create the next column so that the error reporter\n                // can display the correctly predicted states.\n                var nextColumn = new Column(this.grammar, this.current + 1);\n                this.table.push(nextColumn);\n                var err = new Error(this.reportLexerError(e));\n                err.offset = this.current;\n                err.token = e.token;\n                throw err;\n            }\n            // We add new states to table[current+1]\n            var column = this.table[this.current];\n\n            // GC unused states\n            if (!this.options.keepHistory) {\n                delete this.table[this.current - 1];\n            }\n\n            var n = this.current + 1;\n            var nextColumn = new Column(this.grammar, n);\n            this.table.push(nextColumn);\n\n            // Advance all tokens that expect the symbol\n            var literal = token.text !== undefined ? token.text : token.value;\n            var value = lexer.constructor === StreamLexer ? token.value : token;\n            var scannable = column.scannable;\n            for (var w = scannable.length; w--; ) {\n                var state = scannable[w];\n                var expect = state.rule.symbols[state.dot];\n                // Try to consume the token\n                // either regex or literal\n                if (expect.test ? expect.test(value) :\n                    expect.type ? expect.type === token.type\n                                : expect.literal === literal) {\n                    // Add it\n                    var next = state.nextState({data: value, token: token, isToken: true, reference: n - 1});\n                    nextColumn.states.push(next);\n                }\n            }\n\n            // Next, for each of the rules, we either\n            // (a) complete it, and try to see if the reference row expected that\n            //     rule\n            // (b) predict the next nonterminal it expects by adding that\n            //     nonterminal's start state\n            // To prevent duplication, we also keep track of rules we have already\n            // added\n\n            nextColumn.process();\n\n            // If needed, throw an error:\n            if (nextColumn.states.length === 0) {\n                // No states at all! This is not good.\n                var err = new Error(this.reportError(token));\n                err.offset = this.current;\n                err.token = token;\n                throw err;\n            }\n\n            // maybe save lexer state\n            if (this.options.keepHistory) {\n              column.lexerState = lexer.save()\n            }\n\n            this.current++;\n        }\n        if (column) {\n          this.lexerState = lexer.save()\n        }\n\n        // Incrementally keep track of results\n        this.results = this.finish();\n\n        // Allow chaining, for whatever it's worth\n        return this;\n    };\n\n    Parser.prototype.reportLexerError = function(lexerError) {\n        var tokenDisplay, lexerMessage;\n        // Planning to add a token property to moo's thrown error\n        // even on erroring tokens to be used in error display below\n        var token = lexerError.token;\n        if (token) {\n            tokenDisplay = \"input \" + JSON.stringify(token.text[0]) + \" (lexer error)\";\n            lexerMessage = this.lexer.formatError(token, \"Syntax error\");\n        } else {\n            tokenDisplay = \"input (lexer error)\";\n            lexerMessage = lexerError.message;\n        }\n        return this.reportErrorCommon(lexerMessage, tokenDisplay);\n    };\n\n    Parser.prototype.reportError = function(token) {\n        var tokenDisplay = (token.type ? token.type + \" token: \" : \"\") + JSON.stringify(token.value !== undefined ? token.value : token);\n        var lexerMessage = this.lexer.formatError(token, \"Syntax error\");\n        return this.reportErrorCommon(lexerMessage, tokenDisplay);\n    };\n\n    Parser.prototype.reportErrorCommon = function(lexerMessage, tokenDisplay) {\n        var lines = [];\n        lines.push(lexerMessage);\n        var lastColumnIndex = this.table.length - 2;\n        var lastColumn = this.table[lastColumnIndex];\n        var expectantStates = lastColumn.states\n            .filter(function(state) {\n                var nextSymbol = state.rule.symbols[state.dot];\n                return nextSymbol && typeof nextSymbol !== \"string\";\n            });\n\n        if (expectantStates.length === 0) {\n            lines.push('Unexpected ' + tokenDisplay + '. I did not expect any more input. Here is the state of my parse table:\\n');\n            this.displayStateStack(lastColumn.states, lines);\n        } else {\n            lines.push('Unexpected ' + tokenDisplay + '. Instead, I was expecting to see one of the following:\\n');\n            // Display a \"state stack\" for each expectant state\n            // - which shows you how this state came to be, step by step.\n            // If there is more than one derivation, we only display the first one.\n            var stateStacks = expectantStates\n                .map(function(state) {\n                    return this.buildFirstStateStack(state, []) || [state];\n                }, this);\n            // Display each state that is expecting a terminal symbol next.\n            stateStacks.forEach(function(stateStack) {\n                var state = stateStack[0];\n                var nextSymbol = state.rule.symbols[state.dot];\n                var symbolDisplay = this.getSymbolDisplay(nextSymbol);\n                lines.push('A ' + symbolDisplay + ' based on:');\n                this.displayStateStack(stateStack, lines);\n            }, this);\n        }\n        lines.push(\"\");\n        return lines.join(\"\\n\");\n    }\n    \n    Parser.prototype.displayStateStack = function(stateStack, lines) {\n        var lastDisplay;\n        var sameDisplayCount = 0;\n        for (var j = 0; j < stateStack.length; j++) {\n            var state = stateStack[j];\n            var display = state.rule.toString(state.dot);\n            if (display === lastDisplay) {\n                sameDisplayCount++;\n            } else {\n                if (sameDisplayCount > 0) {\n                    lines.push('    ^ ' + sameDisplayCount + ' more lines identical to this');\n                }\n                sameDisplayCount = 0;\n                lines.push('    ' + display);\n            }\n            lastDisplay = display;\n        }\n    };\n\n    Parser.prototype.getSymbolDisplay = function(symbol) {\n        return getSymbolLongDisplay(symbol);\n    };\n\n    /*\n    Builds a the first state stack. You can think of a state stack as the call stack\n    of the recursive-descent parser which the Nearley parse algorithm simulates.\n    A state stack is represented as an array of state objects. Within a\n    state stack, the first item of the array will be the starting\n    state, with each successive item in the array going further back into history.\n\n    This function needs to be given a starting state and an empty array representing\n    the visited states, and it returns an single state stack.\n\n    */\n    Parser.prototype.buildFirstStateStack = function(state, visited) {\n        if (visited.indexOf(state) !== -1) {\n            // Found cycle, return null\n            // to eliminate this path from the results, because\n            // we don't know how to display it meaningfully\n            return null;\n        }\n        if (state.wantedBy.length === 0) {\n            return [state];\n        }\n        var prevState = state.wantedBy[0];\n        var childVisited = [state].concat(visited);\n        var childResult = this.buildFirstStateStack(prevState, childVisited);\n        if (childResult === null) {\n            return null;\n        }\n        return [state].concat(childResult);\n    };\n\n    Parser.prototype.save = function() {\n        var column = this.table[this.current];\n        column.lexerState = this.lexerState;\n        return column;\n    };\n\n    Parser.prototype.restore = function(column) {\n        var index = column.index;\n        this.current = index;\n        this.table[index] = column;\n        this.table.splice(index + 1);\n        this.lexerState = column.lexerState;\n\n        // Incrementally keep track of results\n        this.results = this.finish();\n    };\n\n    // nb. deprecated: use save/restore instead!\n    Parser.prototype.rewind = function(index) {\n        if (!this.options.keepHistory) {\n            throw new Error('set option `keepHistory` to enable rewinding')\n        }\n        // nb. recall column (table) indicies fall between token indicies.\n        //        col 0   --   token 0   --   col 1\n        this.restore(this.table[index]);\n    };\n\n    Parser.prototype.finish = function() {\n        // Return the possible parsings\n        var considerations = [];\n        var start = this.grammar.start;\n        var column = this.table[this.table.length - 1]\n        column.states.forEach(function (t) {\n            if (t.rule.name === start\n                    && t.dot === t.rule.symbols.length\n                    && t.reference === 0\n                    && t.data !== Parser.fail) {\n                considerations.push(t);\n            }\n        });\n        return considerations.map(function(c) {return c.data; });\n    };\n\n    function getSymbolLongDisplay(symbol) {\n        var type = typeof symbol;\n        if (type === \"string\") {\n            return symbol;\n        } else if (type === \"object\") {\n            if (symbol.literal) {\n                return JSON.stringify(symbol.literal);\n            } else if (symbol instanceof RegExp) {\n                return 'character matching ' + symbol;\n            } else if (symbol.type) {\n                return symbol.type + ' token';\n            } else if (symbol.test) {\n                return 'token matching ' + String(symbol.test);\n            } else {\n                throw new Error('Unknown symbol type: ' + symbol);\n            }\n        }\n    }\n\n    function getSymbolShortDisplay(symbol) {\n        var type = typeof symbol;\n        if (type === \"string\") {\n            return symbol;\n        } else if (type === \"object\") {\n            if (symbol.literal) {\n                return JSON.stringify(symbol.literal);\n            } else if (symbol instanceof RegExp) {\n                return symbol.toString();\n            } else if (symbol.type) {\n                return '%' + symbol.type;\n            } else if (symbol.test) {\n                return '<' + String(symbol.test) + '>';\n            } else {\n                throw new Error('Unknown symbol type: ' + symbol);\n            }\n        }\n    }\n\n    return {\n        Parser: Parser,\n        Grammar: Grammar,\n        Rule: Rule,\n    };\n\n}));\n","(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define([], factory) /* global define */\n  } else if (typeof module === 'object' && module.exports) {\n    module.exports = factory()\n  } else {\n    root.moo = factory()\n  }\n}(this, function() {\n  'use strict';\n\n  var hasOwnProperty = Object.prototype.hasOwnProperty\n  var toString = Object.prototype.toString\n  var hasSticky = typeof new RegExp().sticky === 'boolean'\n\n  /***************************************************************************/\n\n  function isRegExp(o) { return o && toString.call(o) === '[object RegExp]' }\n  function isObject(o) { return o && typeof o === 'object' && !isRegExp(o) && !Array.isArray(o) }\n\n  function reEscape(s) {\n    return s.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&')\n  }\n  function reGroups(s) {\n    var re = new RegExp('|' + s)\n    return re.exec('').length - 1\n  }\n  function reCapture(s) {\n    return '(' + s + ')'\n  }\n  function reUnion(regexps) {\n    if (!regexps.length) return '(?!)'\n    var source =  regexps.map(function(s) {\n      return \"(?:\" + s + \")\"\n    }).join('|')\n    return \"(?:\" + source + \")\"\n  }\n\n  function regexpOrLiteral(obj) {\n    if (typeof obj === 'string') {\n      return '(?:' + reEscape(obj) + ')'\n\n    } else if (isRegExp(obj)) {\n      // TODO: consider /u support\n      if (obj.ignoreCase) throw new Error('RegExp /i flag not allowed')\n      if (obj.global) throw new Error('RegExp /g flag is implied')\n      if (obj.sticky) throw new Error('RegExp /y flag is implied')\n      if (obj.multiline) throw new Error('RegExp /m flag is implied')\n      return obj.source\n\n    } else {\n      throw new Error('Not a pattern: ' + obj)\n    }\n  }\n\n  function objectToRules(object) {\n    var keys = Object.getOwnPropertyNames(object)\n    var result = []\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i]\n      var thing = object[key]\n      var rules = [].concat(thing)\n      if (key === 'include') {\n        for (var j = 0; j < rules.length; j++) {\n          result.push({include: rules[j]})\n        }\n        continue\n      }\n      var match = []\n      rules.forEach(function(rule) {\n        if (isObject(rule)) {\n          if (match.length) result.push(ruleOptions(key, match))\n          result.push(ruleOptions(key, rule))\n          match = []\n        } else {\n          match.push(rule)\n        }\n      })\n      if (match.length) result.push(ruleOptions(key, match))\n    }\n    return result\n  }\n\n  function arrayToRules(array) {\n    var result = []\n    for (var i = 0; i < array.length; i++) {\n      var obj = array[i]\n      if (obj.include) {\n        var include = [].concat(obj.include)\n        for (var j = 0; j < include.length; j++) {\n          result.push({include: include[j]})\n        }\n        continue\n      }\n      if (!obj.type) {\n        throw new Error('Rule has no type: ' + JSON.stringify(obj))\n      }\n      result.push(ruleOptions(obj.type, obj))\n    }\n    return result\n  }\n\n  function ruleOptions(type, obj) {\n    if (!isObject(obj)) {\n      obj = { match: obj }\n    }\n    if (obj.include) {\n      throw new Error('Matching rules cannot also include states')\n    }\n\n    // nb. error and fallback imply lineBreaks\n    var options = {\n      defaultType: type,\n      lineBreaks: !!obj.error || !!obj.fallback,\n      pop: false,\n      next: null,\n      push: null,\n      error: false,\n      fallback: false,\n      value: null,\n      type: null,\n      shouldThrow: false,\n    }\n\n    // Avoid Object.assign(), so we support IE9+\n    for (var key in obj) {\n      if (hasOwnProperty.call(obj, key)) {\n        options[key] = obj[key]\n      }\n    }\n\n    // type transform cannot be a string\n    if (typeof options.type === 'string' && type !== options.type) {\n      throw new Error(\"Type transform cannot be a string (type '\" + options.type + \"' for token '\" + type + \"')\")\n    }\n\n    // convert to array\n    var match = options.match\n    options.match = Array.isArray(match) ? match : match ? [match] : []\n    options.match.sort(function(a, b) {\n      return isRegExp(a) && isRegExp(b) ? 0\n           : isRegExp(b) ? -1 : isRegExp(a) ? +1 : b.length - a.length\n    })\n    return options\n  }\n\n  function toRules(spec) {\n    return Array.isArray(spec) ? arrayToRules(spec) : objectToRules(spec)\n  }\n\n  var defaultErrorRule = ruleOptions('error', {lineBreaks: true, shouldThrow: true})\n  function compileRules(rules, hasStates) {\n    var errorRule = null\n    var fast = Object.create(null)\n    var fastAllowed = true\n    var unicodeFlag = null\n    var groups = []\n    var parts = []\n\n    // If there is a fallback rule, then disable fast matching\n    for (var i = 0; i < rules.length; i++) {\n      if (rules[i].fallback) {\n        fastAllowed = false\n      }\n    }\n\n    for (var i = 0; i < rules.length; i++) {\n      var options = rules[i]\n\n      if (options.include) {\n        // all valid inclusions are removed by states() preprocessor\n        throw new Error('Inheritance is not allowed in stateless lexers')\n      }\n\n      if (options.error || options.fallback) {\n        // errorRule can only be set once\n        if (errorRule) {\n          if (!options.fallback === !errorRule.fallback) {\n            throw new Error(\"Multiple \" + (options.fallback ? \"fallback\" : \"error\") + \" rules not allowed (for token '\" + options.defaultType + \"')\")\n          } else {\n            throw new Error(\"fallback and error are mutually exclusive (for token '\" + options.defaultType + \"')\")\n          }\n        }\n        errorRule = options\n      }\n\n      var match = options.match.slice()\n      if (fastAllowed) {\n        while (match.length && typeof match[0] === 'string' && match[0].length === 1) {\n          var word = match.shift()\n          fast[word.charCodeAt(0)] = options\n        }\n      }\n\n      // Warn about inappropriate state-switching options\n      if (options.pop || options.push || options.next) {\n        if (!hasStates) {\n          throw new Error(\"State-switching options are not allowed in stateless lexers (for token '\" + options.defaultType + \"')\")\n        }\n        if (options.fallback) {\n          throw new Error(\"State-switching options are not allowed on fallback tokens (for token '\" + options.defaultType + \"')\")\n        }\n      }\n\n      // Only rules with a .match are included in the RegExp\n      if (match.length === 0) {\n        continue\n      }\n      fastAllowed = false\n\n      groups.push(options)\n\n      // Check unicode flag is used everywhere or nowhere\n      for (var j = 0; j < match.length; j++) {\n        var obj = match[j]\n        if (!isRegExp(obj)) {\n          continue\n        }\n\n        if (unicodeFlag === null) {\n          unicodeFlag = obj.unicode\n        } else if (unicodeFlag !== obj.unicode && options.fallback === false) {\n          throw new Error('If one rule is /u then all must be')\n        }\n      }\n\n      // convert to RegExp\n      var pat = reUnion(match.map(regexpOrLiteral))\n\n      // validate\n      var regexp = new RegExp(pat)\n      if (regexp.test(\"\")) {\n        throw new Error(\"RegExp matches empty string: \" + regexp)\n      }\n      var groupCount = reGroups(pat)\n      if (groupCount > 0) {\n        throw new Error(\"RegExp has capture groups: \" + regexp + \"\\nUse (?: … ) instead\")\n      }\n\n      // try and detect rules matching newlines\n      if (!options.lineBreaks && regexp.test('\\n')) {\n        throw new Error('Rule should declare lineBreaks: ' + regexp)\n      }\n\n      // store regex\n      parts.push(reCapture(pat))\n    }\n\n\n    // If there's no fallback rule, use the sticky flag so we only look for\n    // matches at the current index.\n    //\n    // If we don't support the sticky flag, then fake it using an irrefutable\n    // match (i.e. an empty pattern).\n    var fallbackRule = errorRule && errorRule.fallback\n    var flags = hasSticky && !fallbackRule ? 'ym' : 'gm'\n    var suffix = hasSticky || fallbackRule ? '' : '|'\n\n    if (unicodeFlag === true) flags += \"u\"\n    var combined = new RegExp(reUnion(parts) + suffix, flags)\n    return {regexp: combined, groups: groups, fast: fast, error: errorRule || defaultErrorRule}\n  }\n\n  function compile(rules) {\n    var result = compileRules(toRules(rules))\n    return new Lexer({start: result}, 'start')\n  }\n\n  function checkStateGroup(g, name, map) {\n    var state = g && (g.push || g.next)\n    if (state && !map[state]) {\n      throw new Error(\"Missing state '\" + state + \"' (in token '\" + g.defaultType + \"' of state '\" + name + \"')\")\n    }\n    if (g && g.pop && +g.pop !== 1) {\n      throw new Error(\"pop must be 1 (in token '\" + g.defaultType + \"' of state '\" + name + \"')\")\n    }\n  }\n  function compileStates(states, start) {\n    var all = states.$all ? toRules(states.$all) : []\n    delete states.$all\n\n    var keys = Object.getOwnPropertyNames(states)\n    if (!start) start = keys[0]\n\n    var ruleMap = Object.create(null)\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i]\n      ruleMap[key] = toRules(states[key]).concat(all)\n    }\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i]\n      var rules = ruleMap[key]\n      var included = Object.create(null)\n      for (var j = 0; j < rules.length; j++) {\n        var rule = rules[j]\n        if (!rule.include) continue\n        var splice = [j, 1]\n        if (rule.include !== key && !included[rule.include]) {\n          included[rule.include] = true\n          var newRules = ruleMap[rule.include]\n          if (!newRules) {\n            throw new Error(\"Cannot include nonexistent state '\" + rule.include + \"' (in state '\" + key + \"')\")\n          }\n          for (var k = 0; k < newRules.length; k++) {\n            var newRule = newRules[k]\n            if (rules.indexOf(newRule) !== -1) continue\n            splice.push(newRule)\n          }\n        }\n        rules.splice.apply(rules, splice)\n        j--\n      }\n    }\n\n    var map = Object.create(null)\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i]\n      map[key] = compileRules(ruleMap[key], true)\n    }\n\n    for (var i = 0; i < keys.length; i++) {\n      var name = keys[i]\n      var state = map[name]\n      var groups = state.groups\n      for (var j = 0; j < groups.length; j++) {\n        checkStateGroup(groups[j], name, map)\n      }\n      var fastKeys = Object.getOwnPropertyNames(state.fast)\n      for (var j = 0; j < fastKeys.length; j++) {\n        checkStateGroup(state.fast[fastKeys[j]], name, map)\n      }\n    }\n\n    return new Lexer(map, start)\n  }\n\n  function keywordTransform(map) {\n    var reverseMap = Object.create(null)\n    var byLength = Object.create(null)\n    var types = Object.getOwnPropertyNames(map)\n    for (var i = 0; i < types.length; i++) {\n      var tokenType = types[i]\n      var item = map[tokenType]\n      var keywordList = Array.isArray(item) ? item : [item]\n      keywordList.forEach(function(keyword) {\n        (byLength[keyword.length] = byLength[keyword.length] || []).push(keyword)\n        if (typeof keyword !== 'string') {\n          throw new Error(\"keyword must be string (in keyword '\" + tokenType + \"')\")\n        }\n        reverseMap[keyword] = tokenType\n      })\n    }\n\n    // fast string lookup\n    // https://jsperf.com/string-lookups\n    function str(x) { return JSON.stringify(x) }\n    var source = ''\n    source += 'switch (value.length) {\\n'\n    for (var length in byLength) {\n      var keywords = byLength[length]\n      source += 'case ' + length + ':\\n'\n      source += 'switch (value) {\\n'\n      keywords.forEach(function(keyword) {\n        var tokenType = reverseMap[keyword]\n        source += 'case ' + str(keyword) + ': return ' + str(tokenType) + '\\n'\n      })\n      source += '}\\n'\n    }\n    source += '}\\n'\n    return Function('value', source) // type\n  }\n\n  /***************************************************************************/\n\n  var Lexer = function(states, state) {\n    this.startState = state\n    this.states = states\n    this.buffer = ''\n    this.stack = []\n    this.reset()\n  }\n\n  Lexer.prototype.reset = function(data, info) {\n    this.buffer = data || ''\n    this.index = 0\n    this.line = info ? info.line : 1\n    this.col = info ? info.col : 1\n    this.queuedToken = info ? info.queuedToken : null\n    this.queuedThrow = info ? info.queuedThrow : null\n    this.setState(info ? info.state : this.startState)\n    this.stack = info && info.stack ? info.stack.slice() : []\n    return this\n  }\n\n  Lexer.prototype.save = function() {\n    return {\n      line: this.line,\n      col: this.col,\n      state: this.state,\n      stack: this.stack.slice(),\n      queuedToken: this.queuedToken,\n      queuedThrow: this.queuedThrow,\n    }\n  }\n\n  Lexer.prototype.setState = function(state) {\n    if (!state || this.state === state) return\n    this.state = state\n    var info = this.states[state]\n    this.groups = info.groups\n    this.error = info.error\n    this.re = info.regexp\n    this.fast = info.fast\n  }\n\n  Lexer.prototype.popState = function() {\n    this.setState(this.stack.pop())\n  }\n\n  Lexer.prototype.pushState = function(state) {\n    this.stack.push(this.state)\n    this.setState(state)\n  }\n\n  var eat = hasSticky ? function(re, buffer) { // assume re is /y\n    return re.exec(buffer)\n  } : function(re, buffer) { // assume re is /g\n    var match = re.exec(buffer)\n    // will always match, since we used the |(?:) trick\n    if (match[0].length === 0) {\n      return null\n    }\n    return match\n  }\n\n  Lexer.prototype._getGroup = function(match) {\n    var groupCount = this.groups.length\n    for (var i = 0; i < groupCount; i++) {\n      if (match[i + 1] !== undefined) {\n        return this.groups[i]\n      }\n    }\n    throw new Error('Cannot find token type for matched text')\n  }\n\n  function tokenToString() {\n    return this.value\n  }\n\n  Lexer.prototype.next = function() {\n    var index = this.index\n\n    // If a fallback token matched, we don't need to re-run the RegExp\n    if (this.queuedGroup) {\n      var token = this._token(this.queuedGroup, this.queuedText, index)\n      this.queuedGroup = null\n      this.queuedText = \"\"\n      return token\n    }\n\n    var buffer = this.buffer\n    if (index === buffer.length) {\n      return // EOF\n    }\n\n    // Fast matching for single characters\n    var group = this.fast[buffer.charCodeAt(index)]\n    if (group) {\n      return this._token(group, buffer.charAt(index), index)\n    }\n\n    // Execute RegExp\n    var re = this.re\n    re.lastIndex = index\n    var match = eat(re, buffer)\n\n    // Error tokens match the remaining buffer\n    var error = this.error\n    if (match == null) {\n      return this._token(error, buffer.slice(index, buffer.length), index)\n    }\n\n    var group = this._getGroup(match)\n    var text = match[0]\n\n    if (error.fallback && match.index !== index) {\n      this.queuedGroup = group\n      this.queuedText = text\n\n      // Fallback tokens contain the unmatched portion of the buffer\n      return this._token(error, buffer.slice(index, match.index), index)\n    }\n\n    return this._token(group, text, index)\n  }\n\n  Lexer.prototype._token = function(group, text, offset) {\n    // count line breaks\n    var lineBreaks = 0\n    if (group.lineBreaks) {\n      var matchNL = /\\n/g\n      var nl = 1\n      if (text === '\\n') {\n        lineBreaks = 1\n      } else {\n        while (matchNL.exec(text)) { lineBreaks++; nl = matchNL.lastIndex }\n      }\n    }\n\n    var token = {\n      type: (typeof group.type === 'function' && group.type(text)) || group.defaultType,\n      value: typeof group.value === 'function' ? group.value(text) : text,\n      text: text,\n      toString: tokenToString,\n      offset: offset,\n      lineBreaks: lineBreaks,\n      line: this.line,\n      col: this.col,\n    }\n    // nb. adding more props to token object will make V8 sad!\n\n    var size = text.length\n    this.index += size\n    this.line += lineBreaks\n    if (lineBreaks !== 0) {\n      this.col = size - nl + 1\n    } else {\n      this.col += size\n    }\n\n    // throw, if no rule with {error: true}\n    if (group.shouldThrow) {\n      throw new Error(this.formatError(token, \"invalid syntax\"))\n    }\n\n    if (group.pop) this.popState()\n    else if (group.push) this.pushState(group.push)\n    else if (group.next) this.setState(group.next)\n\n    return token\n  }\n\n  if (typeof Symbol !== 'undefined' && Symbol.iterator) {\n    var LexerIterator = function(lexer) {\n      this.lexer = lexer\n    }\n\n    LexerIterator.prototype.next = function() {\n      var token = this.lexer.next()\n      return {value: token, done: !token}\n    }\n\n    LexerIterator.prototype[Symbol.iterator] = function() {\n      return this\n    }\n\n    Lexer.prototype[Symbol.iterator] = function() {\n      return new LexerIterator(this)\n    }\n  }\n\n  Lexer.prototype.formatError = function(token, message) {\n    if (token == null) {\n      // An undefined token indicates EOF\n      var text = this.buffer.slice(this.index)\n      var token = {\n        text: text,\n        offset: this.index,\n        lineBreaks: text.indexOf('\\n') === -1 ? 0 : 1,\n        line: this.line,\n        col: this.col,\n      }\n    }\n    var start = Math.max(0, token.offset - token.col + 1)\n    var eol = token.lineBreaks ? token.text.indexOf('\\n') : token.text.length\n    var firstLine = this.buffer.substring(start, token.offset + eol)\n    message += \" at line \" + token.line + \" col \" + token.col + \":\\n\\n\"\n    message += \"  \" + firstLine + \"\\n\"\n    message += \"  \" + Array(token.col).join(\" \") + \"^\"\n    return message\n  }\n\n  Lexer.prototype.clone = function() {\n    return new Lexer(this.states, this.state)\n  }\n\n  Lexer.prototype.has = function(tokenType) {\n    return true\n  }\n\n\n  return {\n    compile: compile,\n    states: compileStates,\n    error: Object.freeze({error: true}),\n    fallback: Object.freeze({fallback: true}),\n    keywords: keywordTransform,\n  }\n\n}));\n","// Generated automatically by nearley, version 2.19.5\n// http://github.com/Hardmath123/nearley\n(function () {\nfunction id(x) { return x[0]; }\n\nfunction getValue(d) {\n    return d[0].value\n}\n\nfunction literals(list) {\n    var rules = {}\n    for (var lit of list) {\n        rules[lit] = {match: lit, next: 'main'}\n    }\n    return rules\n}\n\nvar moo = require('moo')\nvar rules = Object.assign({\n    ws: {match: /\\s+/, lineBreaks: true, next: 'main'},\n    comment: /\\#.*/,\n    arrow: {match: /[=-]+\\>/, next: 'main'},\n    js: {\n        match: /\\{\\%(?:[^%]|\\%[^}])*\\%\\}/,\n        value: x => x.slice(2, -2),\n        lineBreaks: true,\n    },\n    word: {match: /[\\w\\?\\+]+/, next: 'afterWord'},\n    string: {\n        match: /\"(?:[^\\\\\"\\n]|\\\\[\"\\\\/bfnrt]|\\\\u[a-fA-F0-9]{4})*\"/,\n        value: x => JSON.parse(x),\n        next: 'main',\n    },\n    btstring: {\n        match: /`[^`]*`/,\n        value: x => x.slice(1, -1),\n        next: 'main',\n        lineBreaks: true,\n    },\n}, literals([\n    \",\", \"|\", \"$\", \"%\", \"(\", \")\",\n    \":?\", \":*\", \":+\",\n    \"@include\", \"@builtin\", \"@\",\n    \"]\",\n]))\n\nvar lexer = moo.states({\n    main: Object.assign({}, rules, {\n        charclass: {\n            match: /\\.|\\[(?:\\\\.|[^\\\\\\n])+?\\]/,\n            value: x => new RegExp(x),\n        },\n    }),\n    // Both macro arguments and charclasses are both enclosed in [ ].\n    // We disambiguate based on whether the previous token was a `word`.\n    afterWord: Object.assign({}, rules, {\n        \"[\": {match: \"[\", next: 'main'},\n    }),\n})\n\nfunction insensitive(sl) {\n    var s = sl.literal;\n    var result = [];\n    for (var i=0; i<s.length; i++) {\n        var c = s.charAt(i);\n        if (c.toUpperCase() !== c || c.toLowerCase() !== c) {\n            result.push(new RegExp(\"[\" + c.toLowerCase() + c.toUpperCase() + \"]\"));\n            } else {\n            result.push({literal: c});\n        }\n    }\n    return {subexpression: [{tokens: result, postprocess: function(d) {return d.join(\"\"); }}]};\n}\n\nvar grammar = {\n    Lexer: lexer,\n    ParserRules: [\n    {\"name\": \"final$ebnf$1\", \"symbols\": [(lexer.has(\"ws\") ? {type: \"ws\"} : ws)], \"postprocess\": id},\n    {\"name\": \"final$ebnf$1\", \"symbols\": [], \"postprocess\": function(d) {return null;}},\n    {\"name\": \"final\", \"symbols\": [\"_\", \"prog\", \"_\", \"final$ebnf$1\"], \"postprocess\": function(d) { return d[1]; }},\n    {\"name\": \"prog\", \"symbols\": [\"prod\"], \"postprocess\": function(d) { return [d[0]]; }},\n    {\"name\": \"prog\", \"symbols\": [\"prod\", \"ws\", \"prog\"], \"postprocess\": function(d) { return [d[0]].concat(d[2]); }},\n    {\"name\": \"prod\", \"symbols\": [\"word\", \"_\", (lexer.has(\"arrow\") ? {type: \"arrow\"} : arrow), \"_\", \"expression+\"], \"postprocess\": function(d) { return {name: d[0], rules: d[4]}; }},\n    {\"name\": \"prod\", \"symbols\": [\"word\", {\"literal\":\"[\"}, \"_\", \"wordlist\", \"_\", {\"literal\":\"]\"}, \"_\", (lexer.has(\"arrow\") ? {type: \"arrow\"} : arrow), \"_\", \"expression+\"], \"postprocess\": function(d) {return {macro: d[0], args: d[3], exprs: d[9]}}},\n    {\"name\": \"prod\", \"symbols\": [{\"literal\":\"@\"}, \"_\", \"js\"], \"postprocess\": function(d) { return {body: d[2]}; }},\n    {\"name\": \"prod\", \"symbols\": [{\"literal\":\"@\"}, \"word\", \"ws\", \"word\"], \"postprocess\": function(d) { return {config: d[1], value: d[3]}; }},\n    {\"name\": \"prod\", \"symbols\": [{\"literal\":\"@include\"}, \"_\", \"string\"], \"postprocess\": function(d) {return {include: d[2].literal, builtin: false}}},\n    {\"name\": \"prod\", \"symbols\": [{\"literal\":\"@builtin\"}, \"_\", \"string\"], \"postprocess\": function(d) {return {include: d[2].literal, builtin: true }}},\n    {\"name\": \"expression+\", \"symbols\": [\"completeexpression\"]},\n    {\"name\": \"expression+\", \"symbols\": [\"expression+\", \"_\", {\"literal\":\"|\"}, \"_\", \"completeexpression\"], \"postprocess\": function(d) { return d[0].concat([d[4]]); }},\n    {\"name\": \"expressionlist\", \"symbols\": [\"completeexpression\"]},\n    {\"name\": \"expressionlist\", \"symbols\": [\"expressionlist\", \"_\", {\"literal\":\",\"}, \"_\", \"completeexpression\"], \"postprocess\": function(d) { return d[0].concat([d[4]]); }},\n    {\"name\": \"wordlist\", \"symbols\": [\"word\"]},\n    {\"name\": \"wordlist\", \"symbols\": [\"wordlist\", \"_\", {\"literal\":\",\"}, \"_\", \"word\"], \"postprocess\": function(d) { return d[0].concat([d[4]]); }},\n    {\"name\": \"completeexpression\", \"symbols\": [\"expr\"], \"postprocess\": function(d) { return {tokens: d[0]}; }},\n    {\"name\": \"completeexpression\", \"symbols\": [\"expr\", \"_\", \"js\"], \"postprocess\": function(d) { return {tokens: d[0], postprocess: d[2]}; }},\n    {\"name\": \"expr_member\", \"symbols\": [\"word\"], \"postprocess\": id},\n    {\"name\": \"expr_member\", \"symbols\": [{\"literal\":\"$\"}, \"word\"], \"postprocess\": function(d) {return {mixin: d[1]}}},\n    {\"name\": \"expr_member\", \"symbols\": [\"word\", {\"literal\":\"[\"}, \"_\", \"expressionlist\", \"_\", {\"literal\":\"]\"}], \"postprocess\": function(d) {return {macrocall: d[0], args: d[3]}}},\n    {\"name\": \"expr_member$ebnf$1\", \"symbols\": [{\"literal\":\"i\"}], \"postprocess\": id},\n    {\"name\": \"expr_member$ebnf$1\", \"symbols\": [], \"postprocess\": function(d) {return null;}},\n    {\"name\": \"expr_member\", \"symbols\": [\"string\", \"expr_member$ebnf$1\"], \"postprocess\": function(d) { if (d[1]) {return insensitive(d[0]); } else {return d[0]; } }},\n    {\"name\": \"expr_member\", \"symbols\": [{\"literal\":\"%\"}, \"word\"], \"postprocess\": function(d) {return {token: d[1]}}},\n    {\"name\": \"expr_member\", \"symbols\": [\"charclass\"], \"postprocess\": id},\n    {\"name\": \"expr_member\", \"symbols\": [{\"literal\":\"(\"}, \"_\", \"expression+\", \"_\", {\"literal\":\")\"}], \"postprocess\": function(d) {return {'subexpression': d[2]} ;}},\n    {\"name\": \"expr_member\", \"symbols\": [\"expr_member\", \"_\", \"ebnf_modifier\"], \"postprocess\": function(d) {return {'ebnf': d[0], 'modifier': d[2]}; }},\n    {\"name\": \"ebnf_modifier\", \"symbols\": [{\"literal\":\":+\"}], \"postprocess\": getValue},\n    {\"name\": \"ebnf_modifier\", \"symbols\": [{\"literal\":\":*\"}], \"postprocess\": getValue},\n    {\"name\": \"ebnf_modifier\", \"symbols\": [{\"literal\":\":?\"}], \"postprocess\": getValue},\n    {\"name\": \"expr\", \"symbols\": [\"expr_member\"]},\n    {\"name\": \"expr\", \"symbols\": [\"expr\", \"ws\", \"expr_member\"], \"postprocess\": function(d){ return d[0].concat([d[2]]); }},\n    {\"name\": \"word\", \"symbols\": [(lexer.has(\"word\") ? {type: \"word\"} : word)], \"postprocess\": getValue},\n    {\"name\": \"string\", \"symbols\": [(lexer.has(\"string\") ? {type: \"string\"} : string)], \"postprocess\": d => ({literal: d[0].value})},\n    {\"name\": \"string\", \"symbols\": [(lexer.has(\"btstring\") ? {type: \"btstring\"} : btstring)], \"postprocess\": d => ({literal: d[0].value})},\n    {\"name\": \"charclass\", \"symbols\": [(lexer.has(\"charclass\") ? {type: \"charclass\"} : charclass)], \"postprocess\": getValue},\n    {\"name\": \"js\", \"symbols\": [(lexer.has(\"js\") ? {type: \"js\"} : js)], \"postprocess\": getValue},\n    {\"name\": \"_$ebnf$1\", \"symbols\": [\"ws\"], \"postprocess\": id},\n    {\"name\": \"_$ebnf$1\", \"symbols\": [], \"postprocess\": function(d) {return null;}},\n    {\"name\": \"_\", \"symbols\": [\"_$ebnf$1\"]},\n    {\"name\": \"ws\", \"symbols\": [(lexer.has(\"ws\") ? {type: \"ws\"} : ws)]},\n    {\"name\": \"ws$ebnf$1\", \"symbols\": [(lexer.has(\"ws\") ? {type: \"ws\"} : ws)], \"postprocess\": id},\n    {\"name\": \"ws$ebnf$1\", \"symbols\": [], \"postprocess\": function(d) {return null;}},\n    {\"name\": \"ws\", \"symbols\": [\"ws$ebnf$1\", (lexer.has(\"comment\") ? {type: \"comment\"} : comment), \"_\"]}\n]\n  , ParserStart: \"final\"\n}\nif (typeof module !== 'undefined'&& typeof module.exports !== 'undefined') {\n   module.exports = grammar;\n} else {\n   window.grammar = grammar;\n}\n})();\n","/*\n  MIT License\n  Copyright (c) 2019 Guillermo Webster\n  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\n// import nearley from \"nearley\";\nimport nearley from \"../../node_modules/nearley/lib/nearley.js\";\n\n// import bootstraped from \"nearley/lib/nearley-language-bootstrapped\";\nimport bootstraped from \"../../node_modules/nearley/lib/nearley-language-bootstrapped.js\";\n\nexport default function compileLowLevel(structure, opts) {\n\tvar unique = uniquer();\n\tif (!opts.alreadycompiled) {\n\t\topts.alreadycompiled = [];\n\t}\n\n\tvar result = {\n\t\trules: [],\n\t\tbody: [], // @directives list\n\t\tconfig: {}, // @config value\n\t\tcustomTokens: [], // %tokens\n\t\tmacros: {},\n\t\tstart: \"\"\n\t};\n\n\tfor (var i = 0; i < structure.length; i++) {\n\t\tvar productionRule = structure[i];\n\t\tmarkRange(\n\t\t\tproductionRule.name,\n\t\t\tproductionRule.pos,\n\t\t\tproductionRule.name && productionRule.name.length\n\t\t);\n\n\t\tif (productionRule.body) {\n\t\t\t// This isn't a rule, it's an @directive.\n\t\t\tif (!opts.nojs) {\n\t\t\t\tresult.body.push(productionRule.body);\n\t\t\t}\n\t\t} else if (productionRule.include) {\n\t\t\t// Include file\n\t\t\tvar path;\n\t\t\tif (!productionRule.builtin) {\n\t\t\t\tpath = require(\"path\").resolve(\n\t\t\t\t\topts.file ? require(\"path\").dirname(opts.file) : process.cwd(),\n\t\t\t\t\tproductionRule.include\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tpath = productionRule.include;\n\t\t\t}\n\t\t\tif (opts.alreadycompiled.indexOf(path) === -1) {\n\t\t\t\topts.alreadycompiled.push(path);\n\t\t\t\tif (path === \"postprocessors.ne\") {\n\t\t\t\t\tvar f = require(\"nearley/builtin/postprocessors.ne\");\n\t\t\t\t} else if (path === \"whitespace.ne\") {\n\t\t\t\t\tvar f = require(\"nearley/builtin/whitespace.ne\");\n\t\t\t\t} else if (path === \"string.ne\") {\n\t\t\t\t\tvar f = require(\"nearley/builtin/string.ne\");\n\t\t\t\t} else if (path === \"number.ne\") {\n\t\t\t\t\tvar f = require(\"nearley/builtin/number.ne\");\n\t\t\t\t} else if (path === \"cow.ne\") {\n\t\t\t\t\tvar f = require(\"nearley/builtin/cow.ne\");\n\t\t\t\t}\n\n\t\t\t\tvar parserGrammar = nearley.Grammar.fromCompiled(bootstraped);\n\t\t\t\tvar parser = new nearley.Parser(parserGrammar);\n\t\t\t\tparser.feed(f);\n\t\t\t\tvar c = Compile(parser.results[0], {\n\t\t\t\t\tfile: path,\n\t\t\t\t\t__proto__: opts\n\t\t\t\t});\n\n\t\t\t\tresult.rules = result.rules.concat(c.rules);\n\t\t\t\tresult.body = result.body.concat(c.body);\n\t\t\t\t// result.customTokens = result.customTokens.concat(c.customTokens);\n\t\t\t\tObject.keys(c.config).forEach(function(k) {\n\t\t\t\t\tresult.config[k] = c.config[k];\n\t\t\t\t});\n\t\t\t\tObject.keys(c.macros).forEach(function(k) {\n\t\t\t\t\tresult.macros[k] = c.macros[k];\n\t\t\t\t});\n\t\t\t}\n\t\t} else if (productionRule.macro) {\n\t\t\tresult.macros[productionRule.macro] = {\n\t\t\t\targs: productionRule.args,\n\t\t\t\texprs: productionRule.exprs\n\t\t\t};\n\t\t} else if (productionRule.config) {\n\t\t\t// This isn't a rule, it's an @config.\n\t\t\tresult.config[productionRule.config] = productionRule.value;\n\t\t} else {\n\t\t\tproduceRules(productionRule.name, productionRule.rules, {});\n\t\t\tif (!result.start) {\n\t\t\t\tresult.start = productionRule.name;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn result;\n\n\tfunction markRange(name, start, length) {\n\t\t// console.log(name, [start, start + length])\n\t\tif (opts.rangeCallback) {\n\t\t\topts.rangeCallback(name, start, start + length);\n\t\t}\n\t}\n\n\tfunction produceRules(name, rules, env) {\n\t\tfor (var i = 0; i < rules.length; i++) {\n\t\t\tvar rule = buildRule(name, rules[i], env);\n\t\t\tif (opts.nojs) {\n\t\t\t\trule.postprocess = null;\n\t\t\t}\n\t\t\tresult.rules.push(rule);\n\t\t}\n\t}\n\n\tfunction buildRule(ruleName, rule, env) {\n\t\tvar tokens = [];\n\t\tfor (var i = 0; i < rule.tokens.length; i++) {\n\t\t\tvar token = buildToken(ruleName, rule.tokens[i], env);\n\t\t\tif (token !== null) {\n\t\t\t\ttokens.push(token);\n\t\t\t}\n\t\t}\n\t\treturn new nearley.Rule(ruleName, tokens, rule.postprocess);\n\t}\n\n\tfunction buildToken(ruleName, token, env) {\n\t\tif (typeof token === \"string\") {\n\t\t\tif (token === \"null\") {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn token;\n\t\t}\n\n\t\tif (token instanceof RegExp) {\n\t\t\treturn token;\n\t\t}\n\n\t\tif (token.literal) {\n\t\t\tif (!token.literal.length) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tif (token.literal.length === 1 || result.config.lexer) {\n\t\t\t\treturn token;\n\t\t\t}\n\t\t\treturn buildStringToken(ruleName, token, env);\n\t\t}\n\t\tif (token.token) {\n\t\t\tif (result.config.lexer) {\n\t\t\t\tvar name = token.token;\n\t\t\t\tif (result.customTokens.indexOf(name) === -1) {\n\t\t\t\t\tresult.customTokens.push(name);\n\t\t\t\t}\n\t\t\t\tvar expr =\n\t\t\t\t\tresult.config.lexer +\n\t\t\t\t\t\".has(\" +\n\t\t\t\t\tJSON.stringify(name) +\n\t\t\t\t\t\") ? {type: \" +\n\t\t\t\t\tJSON.stringify(name) +\n\t\t\t\t\t\"} : \" +\n\t\t\t\t\tname;\n\t\t\t\treturn { token: \"(\" + expr + \")\" };\n\t\t\t}\n\n\t\t\treturn token;\n\t\t}\n\n\t\tif (token.subexpression) {\n\t\t\treturn buildSubExpressionToken(ruleName, token, env);\n\t\t}\n\n\t\tif (token.ebnf) {\n\t\t\treturn buildEBNFToken(ruleName, token, env);\n\t\t}\n\n\t\tif (token.macrocall) {\n\t\t\treturn buildMacroCallToken(ruleName, token, env);\n\t\t}\n\n\t\tif (token.mixin) {\n\t\t\tif (env[token.mixin]) {\n\t\t\t\treturn buildToken(ruleName, env[token.mixin], env);\n\t\t\t} else {\n\t\t\t\tthrow new Error(\"Unbound variable: \" + token.mixin);\n\t\t\t}\n\t\t}\n\n\t\tthrow new Error(\"unrecognized token: \" + JSON.stringify(token));\n\t}\n\n\tfunction buildStringToken(ruleName, token, env) {\n\t\tvar newname = unique(ruleName + \"$string\");\n\t\tmarkRange(newname, token.pos, JSON.stringify(token.literal).length);\n\n\t\tproduceRules(\n\t\t\tnewname,\n\t\t\t[\n\t\t\t\t{\n\t\t\t\t\ttokens: token.literal.split(\"\").map(function charLiteral(d) {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tliteral: d\n\t\t\t\t\t\t};\n\t\t\t\t\t}),\n\t\t\t\t\tpostprocess: { builtin: \"joiner\" }\n\t\t\t\t}\n\t\t\t],\n\t\t\tenv\n\t\t);\n\t\treturn newname;\n\t}\n\n\tfunction buildSubExpressionToken(ruleName, token, env) {\n\t\tvar data = token.subexpression;\n\t\tvar name = unique(ruleName + \"$subexpression\");\n\t\t//structure.push({\"name\": name, \"rules\": data});\n\t\tproduceRules(name, data, env);\n\t\treturn name;\n\t}\n\n\tfunction buildEBNFToken(ruleName, token, env) {\n\t\tswitch (token.modifier) {\n\t\t\tcase \":+\":\n\t\t\t\treturn buildEBNFPlus(ruleName, token, env);\n\t\t\tcase \":*\":\n\t\t\t\treturn buildEBNFStar(ruleName, token, env);\n\t\t\tcase \":?\":\n\t\t\t\treturn buildEBNFOpt(ruleName, token, env);\n\t\t}\n\t}\n\n\tfunction buildEBNFPlus(ruleName, token, env) {\n\t\tvar name = unique(ruleName + \"$ebnf\");\n\t\t/*\n        structure.push({\n            name: name,\n            rules: [{\n                tokens: [token.ebnf],\n            }, {\n                tokens: [token.ebnf, name],\n                postprocess: {builtin: \"arrconcat\"}\n            }]\n        });\n        */\n\t\tproduceRules(\n\t\t\tname,\n\t\t\t[\n\t\t\t\t{\n\t\t\t\t\ttokens: [token.ebnf]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttokens: [token.ebnf, name],\n\t\t\t\t\tpostprocess: { builtin: \"arrconcat\" }\n\t\t\t\t}\n\t\t\t],\n\t\t\tenv\n\t\t);\n\t\treturn name;\n\t}\n\n\tfunction buildEBNFStar(ruleName, token, env) {\n\t\tvar name = unique(ruleName + \"$ebnf\");\n\t\t/*\n        structure.push({\n            name: name,\n            rules: [{\n                tokens: [],\n            }, {\n                tokens: [token.ebnf, name],\n                postprocess: {builtin: \"arrconcat\"}\n            }]\n        });\n        */\n\t\tproduceRules(\n\t\t\tname,\n\t\t\t[\n\t\t\t\t{\n\t\t\t\t\ttokens: []\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttokens: [token.ebnf, name],\n\t\t\t\t\tpostprocess: { builtin: \"arrconcat\" }\n\t\t\t\t}\n\t\t\t],\n\t\t\tenv\n\t\t);\n\t\treturn name;\n\t}\n\n\tfunction buildEBNFOpt(ruleName, token, env) {\n\t\tvar name = unique(ruleName + \"$ebnf\");\n\t\t/*\n        structure.push({\n            name: name,\n            rules: [{\n                tokens: [token.ebnf],\n                postprocess: {builtin: \"id\"}\n            }, {\n                tokens: [],\n                postprocess: {builtin: \"nuller\"}\n            }]\n        });\n        */\n\t\tproduceRules(\n\t\t\tname,\n\t\t\t[\n\t\t\t\t{\n\t\t\t\t\ttokens: [token.ebnf],\n\t\t\t\t\tpostprocess: { builtin: \"id\" }\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttokens: [],\n\t\t\t\t\tpostprocess: { builtin: \"nuller\" }\n\t\t\t\t}\n\t\t\t],\n\t\t\tenv\n\t\t);\n\t\treturn name;\n\t}\n\n\tfunction buildMacroCallToken(ruleName, token, env) {\n\t\tvar name = unique(ruleName + \"$macrocall\");\n\t\tvar macro = result.macros[token.macrocall];\n\t\tif (!macro) {\n\t\t\tthrow new Error(\"Unkown macro: \" + token.macrocall);\n\t\t}\n\t\tif (macro.args.length !== token.args.length) {\n\t\t\tthrow new Error(\"Argument count mismatch.\");\n\t\t}\n\t\tvar newenv = { __proto__: env };\n\t\tfor (var i = 0; i < macro.args.length; i++) {\n\t\t\tvar argrulename = unique(ruleName + \"$macrocall\");\n\t\t\tnewenv[macro.args[i]] = argrulename;\n\t\t\tproduceRules(argrulename, [token.args[i]], env);\n\t\t\t//structure.push({\"name\": argrulename, \"rules\":[token.args[i]]});\n\t\t\t//buildRule(name, token.args[i], env);\n\t\t}\n\t\tproduceRules(name, macro.exprs, newenv);\n\t\treturn name;\n\t}\n}\n\nfunction uniquer() {\n\tvar uns = {};\n\treturn unique;\n\tfunction unique(name) {\n\t\tvar un = (uns[name] = (uns[name] || 0) + 1);\n\t\treturn name + \"$\" + un;\n\t}\n}\n","(function(root, factory) {\n    if (typeof module === 'object' && module.exports) {\n        module.exports = factory(require('./nearley'));\n    } else {\n        root.generate = factory(root.nearley);\n    }\n}(this, function(nearley) {\n\n    function serializeRules(rules, builtinPostprocessors, extraIndent) {\n        if (extraIndent == null) {\n            extraIndent = ''\n        }\n\n        return '[\\n    ' + rules.map(function(rule) {\n            return serializeRule(rule, builtinPostprocessors);\n        }).join(',\\n    ') + '\\n' + extraIndent + ']';\n    }\n\n    function dedentFunc(func) {\n        var lines = func.toString().split(/\\n/);\n\n        if (lines.length === 1) {\n            return [lines[0].replace(/^\\s+|\\s+$/g, '')];\n        }\n\n        var indent = null;\n        var tail = lines.slice(1);\n        for (var i = 0; i < tail.length; i++) {\n            var match = /^\\s*/.exec(tail[i]);\n            if (match && match[0].length !== tail[i].length) {\n                if (indent === null ||\n                    match[0].length < indent.length) {\n                    indent = match[0];\n                }\n            }\n        }\n\n        if (indent === null) {\n            return lines;\n        }\n\n        return lines.map(function dedent(line) {\n            if (line.slice(0, indent.length) === indent) {\n                return line.slice(indent.length);\n            }\n            return line;\n        });\n    }\n\n    function tabulateString(string, indent, options) {\n        var lines;\n        if(Array.isArray(string)) {\n          lines = string;\n        } else {\n          lines = string.toString().split('\\n');\n        }\n\n        options = options || {};\n        var tabulated = lines.map(function addIndent(line, i) {\n            var shouldIndent = true;\n\n            if(i == 0 && !options.indentFirst) {\n              shouldIndent = false;\n            }\n\n            if(shouldIndent) {\n                return indent + line;\n            } else {\n                return line;\n            }\n        }).join('\\n');\n\n        return tabulated;\n    }\n\n    function serializeSymbol(s) {\n        if (s instanceof RegExp) {\n            return s.toString();\n        } else if (s.token) {\n            return s.token;\n        } else {\n            return JSON.stringify(s);\n        }\n    }\n\n    function serializeRule(rule, builtinPostprocessors) {\n        var ret = '{';\n        ret += '\"name\": ' + JSON.stringify(rule.name);\n        ret += ', \"symbols\": [' + rule.symbols.map(serializeSymbol).join(', ') + ']';\n        if (rule.postprocess) {\n            if(rule.postprocess.builtin) {\n                rule.postprocess = builtinPostprocessors[rule.postprocess.builtin];\n            }\n            ret += ', \"postprocess\": ' + tabulateString(dedentFunc(rule.postprocess), '        ', {indentFirst: false});\n        }\n        ret += '}';\n        return ret;\n    }\n\n    var generate = function (parser, exportName) {\n        if(!parser.config.preprocessor) {\n            parser.config.preprocessor = \"_default\";\n        }\n\n        if(!generate[parser.config.preprocessor]) {\n            throw new Error(\"No such preprocessor: \" + parser.config.preprocessor)\n        }\n\n        return generate[parser.config.preprocessor](parser, exportName);\n    };\n\n    generate.js = generate._default = generate.javascript = function (parser, exportName) {\n        var output = \"// Generated automatically by nearley, version \" + parser.version + \"\\n\";\n        output +=  \"// http://github.com/Hardmath123/nearley\\n\";\n        output += \"(function () {\\n\";\n        output += \"function id(x) { return x[0]; }\\n\";\n        output += parser.body.join('\\n');\n        output += \"var grammar = {\\n\";\n        output += \"    Lexer: \" + parser.config.lexer + \",\\n\";\n        output += \"    ParserRules: \" +\n            serializeRules(parser.rules, generate.javascript.builtinPostprocessors)\n            + \"\\n\";\n        output += \"  , ParserStart: \" + JSON.stringify(parser.start) + \"\\n\";\n        output += \"}\\n\";\n        output += \"if (typeof module !== 'undefined'\"\n            + \"&& typeof module.exports !== 'undefined') {\\n\";\n        output += \"   module.exports = grammar;\\n\";\n        output += \"} else {\\n\";\n        output += \"   window.\" + exportName + \" = grammar;\\n\";\n        output += \"}\\n\";\n        output += \"})();\\n\";\n        return output;\n    };\n\n    generate.javascript.builtinPostprocessors = {\n        \"joiner\": \"function joiner(d) {return d.join('');}\",\n        \"arrconcat\": \"function arrconcat(d) {return [d[0]].concat(d[1]);}\",\n        \"arrpush\": \"function arrpush(d) {return d[0].concat([d[1]]);}\",\n        \"nuller\": \"function(d) {return null;}\",\n        \"id\": \"id\"\n    }\n\n    generate.module = generate.esmodule = function (parser, exportName) {\n        var output = \"// Generated automatically by nearley, version \" + parser.version + \"\\n\";\n        output +=  \"// http://github.com/Hardmath123/nearley\\n\";\n        output += \"function id(x) { return x[0]; }\\n\";\n        output += parser.body.join('\\n');\n        output += \"let Lexer = \" + parser.config.lexer + \";\\n\";\n        output += \"let ParserRules = \" + serializeRules(parser.rules, generate.javascript.builtinPostprocessors) + \";\\n\";\n        output += \"let ParserStart = \" + JSON.stringify(parser.start) + \";\\n\";\n        output += \"export default { Lexer, ParserRules, ParserStart };\\n\";\n        return output;\n    };\n\n    generate.cs = generate.coffee = generate.coffeescript = function (parser, exportName) {\n        var output = \"# Generated automatically by nearley, version \" + parser.version + \"\\n\";\n        output +=  \"# http://github.com/Hardmath123/nearley\\n\";\n        output += \"do ->\\n\";\n        output += \"  id = (d) -> d[0]\\n\";\n        output += tabulateString(dedentFunc(parser.body.join('\\n')), '  ') + '\\n';\n        output += \"  grammar = {\\n\";\n        output += \"    Lexer: \" + parser.config.lexer + \",\\n\";\n        output += \"    ParserRules: \" +\n            tabulateString(\n                    serializeRules(parser.rules, generate.coffeescript.builtinPostprocessors),\n                    '      ',\n                    {indentFirst: false})\n        + \",\\n\";\n        output += \"    ParserStart: \" + JSON.stringify(parser.start) + \"\\n\";\n        output += \"  }\\n\";\n        output += \"  if typeof module != 'undefined' \"\n            + \"&& typeof module.exports != 'undefined'\\n\";\n        output += \"    module.exports = grammar;\\n\";\n        output += \"  else\\n\";\n        output += \"    window.\" + exportName + \" = grammar;\\n\";\n        return output;\n    };\n\n    generate.coffeescript.builtinPostprocessors = {\n        \"joiner\": \"(d) -> d.join('')\",\n        \"arrconcat\": \"(d) -> [d[0]].concat(d[1])\",\n        \"arrpush\": \"(d) -> d[0].concat([d[1]])\",\n        \"nuller\": \"() -> null\",\n        \"id\": \"id\"\n    };\n\n    generate.ts = generate.typescript = function (parser, exportName) {\n        var output = \"// Generated automatically by nearley, version \" + parser.version + \"\\n\";\n        output +=  \"// http://github.com/Hardmath123/nearley\\n\";\n        output +=  \"// Bypasses TS6133. Allow declared but unused functions.\\n\";\n        output +=  \"// @ts-ignore\\n\";\n        output += \"function id(d: any[]): any { return d[0]; }\\n\";\n        output += parser.customTokens.map(function (token) { return \"declare var \" + token + \": any;\\n\" }).join(\"\")\n        output += parser.body.join('\\n');\n        output += \"\\n\";\n        output += \"interface NearleyToken {\\n\";\n        output += \"  value: any;\\n\";\n        output += \"  [key: string]: any;\\n\";\n        output += \"};\\n\";\n        output += \"\\n\";\n        output += \"interface NearleyLexer {\\n\";\n        output += \"  reset: (chunk: string, info: any) => void;\\n\";\n        output += \"  next: () => NearleyToken | undefined;\\n\";\n        output += \"  save: () => any;\\n\";\n        output += \"  formatError: (token: never) => string;\\n\";\n        output += \"  has: (tokenType: string) => boolean;\\n\";\n        output += \"};\\n\";\n        output += \"\\n\";\n        output += \"interface NearleyRule {\\n\";\n        output += \"  name: string;\\n\";\n        output += \"  symbols: NearleySymbol[];\\n\";\n        output += \"  postprocess?: (d: any[], loc?: number, reject?: {}) => any;\\n\";\n        output += \"};\\n\";\n        output += \"\\n\";\n        output += \"type NearleySymbol = string | { literal: any } | { test: (token: any) => boolean };\\n\";\n        output += \"\\n\";\n        output += \"interface Grammar {\\n\";\n        output += \"  Lexer: NearleyLexer | undefined;\\n\";\n        output += \"  ParserRules: NearleyRule[];\\n\";\n        output += \"  ParserStart: string;\\n\";\n        output += \"};\\n\";\n        output += \"\\n\";\n        output += \"const grammar: Grammar = {\\n\";\n        output += \"  Lexer: \" + parser.config.lexer + \",\\n\";\n        output += \"  ParserRules: \" + serializeRules(parser.rules, generate.typescript.builtinPostprocessors, \"  \") + \",\\n\";\n        output += \"  ParserStart: \" + JSON.stringify(parser.start) + \",\\n\";\n        output += \"};\\n\";\n        output += \"\\n\";\n        output += \"export default grammar;\\n\";\n\n        return output;\n    };\n\n    generate.typescript.builtinPostprocessors = {\n        \"joiner\": \"(d) => d.join('')\",\n        \"arrconcat\": \"(d) => [d[0]].concat(d[1])\",\n        \"arrpush\": \"(d) => d[0].concat([d[1]])\",\n        \"nuller\": \"() => null\",\n        \"id\": \"id\"\n    };\n\n    return generate;\n\n}));\n","// Node-only\n\nvar warn = function (opts, str) {\n    opts.out.write(\"WARN\"+\"\\t\" + str + \"\\n\");\n}\n\nfunction lintNames(grm, opts) {\n    var all = [];\n    grm.rules.forEach(function(rule) {\n        all.push(rule.name);\n    });\n    grm.rules.forEach(function(rule) {\n        rule.symbols.forEach(function(symbol) {\n            if (!symbol.literal && !symbol.token && symbol.constructor !== RegExp) {\n                if (all.indexOf(symbol) === -1) {\n                    warn(opts,\"Undefined symbol `\" + symbol + \"` used.\");\n                }\n            }\n        });\n    });\n}\n\nfunction lint(grm, opts) {\n    if (!opts.out) opts.out = process.stderr;\n    lintNames(grm, opts);\n}\n\nmodule.exports = lint;\n","\n\nvar objectID = 0;\n\nvar vars = {};\n\nvar jsFuncMap = {\n\tsaw: {\n\t\tsetup: (o, p) => `${o} = new Maximilian.maxiOsc();\n                      ${o}.phaseReset(${p.length > 1 ? p[1].loop : 0.0});`,\n\t\tloop: (o, p) => `${o}.saw(${p[0].loop})`,\n\t},\n\tsin: {\n\t\tsetup: (o, p) => `${o} = new Maximilian.maxiOsc();\n                      ${o}.phaseReset(${p.length > 1 ? p[1].loop : 0.0});`,\n\t\tloop: (o, p) => `${o}.sinewave(${p[0].loop})`,\n\t},\n\ttri: {\n\t\tsetup: (o, p) => `${o} = new Maximilian.maxiOsc();\n                      ${o}.phaseReset(${p.length > 1 ? p[1].loop : 0.0});`,\n\t\tloop: (o, p) => `${o}.triangle(${p[0].loop})`,\n\t},\n\tpha: {\n\t\tsetup: (o, p) => `${o} = new Maximilian.maxiOsc();\n                      ${o}.phaseReset(${p.length > 1 ? p[1].loop : 0.0});`,\n\t\tloop: (o, p) => `${o}.phasor(${p[0].loop})`,\n\t},\n\tph2: {\n\t\tsetup: (o, p) => `${o} = new Maximilian.maxiOsc();\n                      ${o}.phaseReset(${p.length > 3 ? p[3].loop : 0.0});`,\n\t\tloop: (o, p) =>\n\t\t\t`${o}.phasorBetween(${p[0].loop},${p[1].loop},${p[2].loop})`,\n\t},\n\tsqr: {\n\t\tsetup: (o, p) => `${o} = new Maximilian.maxiOsc();\n                      ${o}.phaseReset(${p.length > 1 ? p[1].loop : 0.0});`,\n\t\tloop: (o, p) => `${o}.square(${p[0].loop})`,\n\t},\n\tpul: {\n\t\tsetup: (o, p) => `${o} = new Maximilian.maxiOsc();\n                      ${o}.phaseReset(${p.length > 2 ? p[2].loop : 0.0});`,\n\t\tloop: (o, p) => `${o}.pulse(${p[0].loop},${p[1].loop})`,\n\t},\n\timp: {\n\t\tsetup: (o, p) => `${o} = new Maximilian.maxiOsc();\n                      ${o}.phaseReset(${p.length > 1 ? p[1].loop : 0.0});`,\n\t\tloop: (o, p) => `${o}.impulse(${p[0].loop})`,\n\t},\n\tsawn: {\n\t\tsetup: (o, p) => `${o} = new Maximilian.maxiOsc();\n                      ${o}.phaseReset(${p.length > 1 ? p[1].loop : 0.0});`,\n\t\tloop: (o, p) => `${o}.sawn(${p[0].loop})`,\n\t},\n\tnoiz: {\n\t\tsetup: (o, p) => `${o} = new Maximilian.maxiOsc()`,\n\t\tloop: (o, p) => `${o}.noise()*${p[0].loop}`,\n\t},\n\tgt: {\n\t\tsetup: (o, p) => \"\",\n\t\tloop: (o, p) => `((${p[0].loop} > ${p[1].loop}) ? 1 : 0)`,\n\t},\n\tlt: {\n\t\tsetup: (o, p) => \"\",\n\t\tloop: (o, p) => `((${p[0].loop} < ${p[1].loop}) ? 1 : 0)`,\n\t},\n\tmod: {\n\t\tsetup: (o, p) => \"\",\n\t\tloop: (o, p) => `(${p[0].loop} % ${p[1].loop})`,\n\t},\n\tadd: {\n\t\tsetup: (o, p) => \"\",\n\t\tloop: (o, p) => `(${p[0].loop} + ${p[1].loop})`,\n\t},\n\tmul: {\n\t\tsetup: (o, p) => \"\",\n\t\tloop: (o, p) => `(${p[0].loop} * ${p[1].loop})`,\n\t},\n\tsub: {\n\t\tsetup: (o, p) => \"\",\n\t\tloop: (o, p) => `(${p[0].loop} - ${p[1].loop})`,\n\t},\n\tdiv: {\n\t\tsetup: (o, p) => \"\",\n\t\tloop: (o, p) => `(${p[1].loop} != 0 ? ${p[0].loop}/${p[1].loop} : 0)`,\n\t},\n\tpow: {\n\t\tsetup: (o, p) => \"\",\n\t\tloop: (o, p) => `Math.pow(${p[0].loop},${p[1].loop})`,\n\t},\n\tabs: {\n\t\tsetup: (o, p) => \"\",\n\t\tloop: (o, p) => `Math.abs(${p[0].loop})`,\n\t},\n\tenv: {\n\t\tsetup: (o, p) => `${o} = new Maximilian.maxiEnv();\n                      ${o}.setAttack(${p[1].loop});\n                      ${o}.setDecay(${p[2].loop});\n                      ${o}.setSustain(${p[3].loop});\n                      ${o}.setRelease(${p[4].loop})`,\n\t\tloop: (o, p) => `${o}.adsr(1,${p[0].loop})`,\n\t},\n\tsum: {\n\t\tsetup: (o, p) => \"\",\n\t\tloop: (o, p) => {\n\t\t\tlet s = `(${p[0].loop}`;\n\t\t\tfor (let i = 1; i < p.length; i++) s += `+${p[i].loop}`;\n\t\t\treturn s + \")\";\n\t\t},\n\t},\n\tmix: {\n\t\tsetup: (o, p) => \"\",\n\t\tloop: (o, p) => {\n\t\t\tlet s = `((${p[0].loop}`;\n\t\t\tfor (let i = 1; i < p.length; i++) s += `+${p[i].loop}`;\n\t\t\treturn s + `)/${p.length})`;\n\t\t},\n\t},\n\tprod: {\n\t\tsetup: (o, p) => \"\",\n\t\tloop: (o, p) => {\n\t\t\tlet s = `(${p[0].loop}`;\n\t\t\tfor (let i = 1; i < p.length; i++) s += `*${p[i].loop}`;\n\t\t\treturn s + \")\";\n\t\t},\n\t},\n\tblin: {\n\t\tsetup: (o, p) => \"\",\n\t\tloop: (o, p) =>\n\t\t\t`Maximilian.maxiMap.linlin(${p[0].loop}, -1, 1, ${p[1].loop}, ${p[2].loop})`,\n\t},\n\tulin: {\n\t\tsetup: (o, p) => \"\",\n\t\tloop: (o, p) =>\n\t\t\t`Maximilian.maxiMap.linlin(${p[0].loop}, 0, 1, ${p[1].loop}, ${p[2].loop})`,\n\t},\n\tbexp: {\n\t\tsetup: (o, p) => \"\",\n\t\tloop: (o, p) =>\n\t\t\t`Maximilian.maxiMap.linexp(${p[0].loop}, -1, 1, ${p[1].loop}, ${p[2].loop})`,\n\t},\n\tuexp: {\n\t\tsetup: (o, p) => \"\",\n\t\tloop: (o, p) =>\n\t\t\t`Maximilian.maxiMap.linexp(${p[0].loop}, 0.0000001, 1, ${p[1].loop}, ${p[2].loop})`,\n\t},\n\tlinlin: {\n\t\tsetup: (o, p) => \"\",\n\t\tloop: (o, p) =>\n\t\t\t`Maximilian.maxiMap.linlin(${p[0].loop}, ${p[1].loop}, ${p[2].loop},${p[3].loop}, ${p[4].loop})`,\n\t},\n\tlinexp: {\n\t\tsetup: (o, p) => \"\",\n\t\tloop: (o, p) =>\n\t\t\t`Maximilian.maxiMap.linexp(${p[0].loop}, ${p[1].loop}, ${p[2].loop}, ${p[3].loop}, ${p[4].loop})`,\n\t},\n\tdist: {\n\t\tsetup: (o, p) => `${o} = new Maximilian.maxiNonlinearity()`,\n\t\tloop: (o, p) => `${o}.atanDist(${p[0].loop},${p[1].loop})`,\n\t},\n\tsoftclip: {\n\t\tsetup: (o, p) => `${o} = new Maximilian.maxiNonlinearity()`,\n\t\tloop: (o, p) => `${o}.softclip(${p[0].loop})`,\n\t},\n\thardclip: {\n\t\tsetup: (o, p) => `${o} = new Maximilian.maxiNonlinearity()`,\n\t\tloop: (o, p) => `${o}.hardclip(${p[0].loop})`,\n\t},\n\tasymclip: {\n\t\tsetup: (o, p) => `${o} = new Maximilian.maxiNonlinearity()`,\n\t\tloop: (o, p) => `${o}.asymclip(${p[0].loop},${p[1].loop},${p[2].loop})`,\n\t},\n\tflange: {\n\t\tsetup: (o, p) => `${o} = new Maximilian.maxiFlanger()`,\n\t\tloop: (o, p) =>\n\t\t\t`${o}.flange(${p[0].loop},${p[1].loop},${p[2].loop},${p[3].loop},${p[4].loop})`,\n\t},\n\tchor: {\n\t\tsetup: (o, p) => `${o} = new Maximilian.maxiChorus()`,\n\t\tloop: (o, p) =>\n\t\t\t`${o}.chorus(${p[0].loop},${p[1].loop},${p[2].loop},${p[3].loop},${p[4].loop})`,\n\t},\n\tdl: {\n\t\tsetup: (o, p) => `${o} = new Maximilian.maxiDelayline()`,\n\t\tloop: (o, p) => `${o}.dl(${p[0].loop},${p[1].loop},${p[2].loop})`,\n\t},\n\tlpf: {\n\t\tsetup: (o, p) => `${o} = new Maximilian.maxiFilter()`,\n\t\tloop: (o, p) => `${o}.lopass(${p[0].loop},${p[1].loop})`,\n\t},\n\thpf: {\n\t\tsetup: (o, p) => `${o} = new Maximilian.maxiFilter()`,\n\t\tloop: (o, p) => `${o}.hipass(${p[0].loop},${p[1].loop})`,\n\t},\n\tlpz: {\n\t\tsetup: (o, p) => `${o} = new Maximilian.maxiFilter()`,\n\t\tloop: (o, p) => `${o}.lores(${p[0].loop},${p[1].loop},${p[2].loop})`,\n\t},\n\thpz: {\n\t\tsetup: (o, p) => `${o} = new Maximilian.maxiFilter()`,\n\t\tloop: (o, p) => `${o}.hires(${p[0].loop},${p[1].loop},${p[2].loop})`,\n\t},\n\n\t// `toJS`: { //freq, data, channel\n\t// \tsetup: (o, p) => `${o} = this.createMLOutputTransducer(${p[0].loop})`,\n\t// \tloop:  (o, p) => `${o}.send(${p[1].loop}, ${p[2].loop})`\n\t// },\n\tscop: {\n\t\t//freq, data, channel, [blocksize]\n\t\tsetup: (o, p) =>\n\t\t\t`${o} = new SABOutputTransducer(outputSABs,\n                                      this.port,\n                                      'scope',\n                                      ${p[1].loop},\n                                      this.currentSample,\n                                      ${p.length == 3 ? 1 : p[3].loop})`,\n\t\tloop: (o, p) => `${o}.send(${p[0].loop}, ${p[2].loop})`,\n\t},\n\n\ttoJS: {\n\t\t//freq, data, channel, [blocksize]\n\t\tsetup: (o, p) =>\n\t\t\t`${o} = new SABOutputTransducer(outputSABs,\n                                      this.port,\n                                      'ML',\n                                      ${p[1].loop},\n                                      this.currentSample,\n                                      ${p.length == 3 ? 1 : p[3].loop})`,\n\t\tloop: (o, p) => `${o}.send(${p[0].loop}, ${p[2].loop})`,\n\t},\n\tfromJS: {\n\t\t//channel\n\t\t// setup: (o, p) => `${o} = this.registerInputTransducer('ML', ${p[0].loop})`,\n\t\t// loop:  (o, p) => `${o}.getValue()`\n\t\tsetup: (o, p) =>\n\t\t\t`${o} = new SABInputTransducer(${p[0].loop}, ${p.length == 2 ? 1 : 0})`,\n\t\tloop: (o, p) =>\n\t\t\t`${o}.getSABValue(inputSABs, ${p.length == 2 ? p[1].loop : 0})`,\n\t},\n\tmouseX: {\n\t\tsetup: (o, p) => ``,\n\t\tloop: (o, p) => `this.getSABValue('mxy')[0]`,\n\t},\n\tmouseY: {\n\t\tsetup: (o, p) => ``,\n\t\tloop: (o, p) => `this.getSABValue('mxy')[1]`,\n\t},\n\tat: {\n\t\tsetup: (o, p) => ``,\n\t\tloop: (o, p) =>\n\t\t\t`${p[0].loop}[Math.min(${p[1].loop}, ${p[0].loop}.length-1)]`,\n\t},\n\n\t// toPeer: { //value, dest, channel, frequency\n\t//   setup: (o, p) => `${o} = this.createNetOutputTransducer(${p[3].loop})`,\n\t// \tloop:  (o, p) => `${o}.send(${p[0].loop},[${p[1].loop},${p[2].loop}])`\n\t// },\n\t// fromPeer: { //source, channel\n\t// \tsetup: (o, p) => `${o} = this.registerInputTransducer('NET', [${p[0].loop}, ${p[1].loop}])`,\n\t// \tloop:  (o, p) => `${o}.getValue()`\n\t// },\n\n\t// oscin: {\n\t// \tsetup: (o, p) => \"\",\n\t// \tloop:  (o, p) => `this.OSCTransducer(${p[0].loop},${p[1].loop})`\n\t// },\n\t// oscout: {\n\t// \tsetup: (o, p) => \"\",\n\t// \tloop:  (o, p) => `this.OSCTransducer(${p[0].loop},${p[1].loop})`\n\t// },\n\n\tsah: {\n\t\tsetup: (o, p) => `${o} = new Maximilian.maxiSampleAndHold();`,\n\t\tloop: (o, p) => `${o}.sah(${p[0].loop},${p[1].loop})`,\n\t},\n\tstretch: {\n\t\tsetup: (o, p) => `${o} = new Maximilian.maxiSample();\n                      ${o}.setSample(this.getSampleBuffer(${p[4].loop}));\n                      ${o}stretch = new Maximilian.maxiStretch();\n                      ${o}stretch.setSample(${o});`,\n\t\tloop: (o, p) =>\n\t\t\t`(${o}.isReady() ? ${o}stretch.play(${p[0].loop},${p[1].loop},${p[2].loop},${p[3].loop},0.0) : 0.0)`,\n\t},\n\t// 'adc': {\"setup\":(o,p)=>\"\", \"loop\":(o,p)=>`inputs[${p[0].loop}]`},\n\tadc: { setup: (o, p) => \"\", loop: (o, p) => `(inputs * ${p[0].loop})` },\n\tsampler: {\n\t\tsetup: (o, p) => `${o} = new Maximilian.maxiSample();\n                      ${o}.setSample(this.getSampleBuffer(${\n\t\t\tp[p.length - 1].loop\n\t\t}));`,\n\t\tloop: (o, p) => {\n\t\t\tlet playArgs = `${p[0].loop}`;\n\t\t\tif (p.length == 3) {\n\t\t\t\tplayArgs += `,${p[1].loop}`;\n\t\t\t} else if (p.length == 4) {\n\t\t\t\tplayArgs += `,${p[1].loop},${p[2].loop}`;\n\t\t\t}\n\t\t\treturn `(${o}.isReady() ? ${o}.playOnZX(${playArgs}) : 0.0)`;\n\t\t},\n\t},\n\tloop: {\n\t\tsetup: (o, p) => `${o} = new Maximilian.maxiSample();\n                      ${o}.setSample(this.getSampleBuffer(${p[1].loop}));`,\n\t\tloop: (o, p) => `(${o}.isReady() ? ${o}.play(${p[0].loop}) : 0.0)`,\n\t},\n\tslice: {\n\t\tsetup: (o, p) => `${o} = new Maximilian.maxiSample();\n                      ${o}.setSample(this.getSampleBuffer(${p[2].loop}));`,\n\t\tloop: (o, p) =>\n\t\t\t`(${o}.isReady() ? ${o}.loopSetPosOnZX(${p[0].loop},${p[1].loop}) : 0.0)`,\n\t},\n\toscin: {\n\t\tsetup: (o, p) => \"\",\n\t\tloop: (o, p) => `this.OSCTransducer(${p[0].loop},${p[1].loop})`,\n\t},\n\toscout: {\n\t\tsetup: (o, p) => \"\",\n\t\tloop: (o, p) => `this.OSCTransducer(${p[0].loop},${p[1].loop})`,\n\t},\n\tsah: {\n\t\tsetup: (o, p) => `${o} = new Maximilian.maxiSampleAndHold();`,\n\t\tloop: (o, p) => `${o}.sah(${p[0].loop},${p[1].loop})`,\n\t},\n\tstretch: {\n\t\tsetup: (o, p) => `${o} = new Maximilian.maxiSample();\n                      ${o}.setSample(this.getSampleBuffer(${p[4].loop}));\n                      ${o}stretch = new Maximilian.maxiStretch();\n                      ${o}stretch.setSample(${o});`,\n\t\tloop: (o, p) =>\n\t\t\t`(${o}.isReady() ? ${o}stretch.play(${p[0].loop},${p[1].loop},${p[2].loop},${p[3].loop},0.0) : 0.0)`,\n\t},\n\tbitToSig: {\n\t\tsetup: (o, p) => \"\",\n\t\tloop: (o, p) => `Maximilian.maxiBits.toSignal(${p[0].loop})`,\n\t},\n\tbitToTrigSig: {\n\t\tsetup: (o, p) => \"\",\n\t\tloop: (o, p) => `Maximilian.maxiBits.toTrigSignal(${p[0].loop})`,\n\t},\n\tbitNeg: {\n\t\tsetup: (o, p) => \"\",\n\t\tloop: (o, p) => `Maximilian.maxiBits.neg(${p[0].loop})`,\n\t},\n\tbitInc: {\n\t\tsetup: (o, p) => \"\",\n\t\tloop: (o, p) => `Maximilian.maxiBits.inc(${p[0].loop})`,\n\t},\n\tbitDec: {\n\t\tsetup: (o, p) => \"\",\n\t\tloop: (o, p) => `Maximilian.maxiBits.dec(${p[0].loop})`,\n\t},\n\tbitAnd: {\n\t\tsetup: (o, p) => \"\",\n\t\tloop: (o, p) => `Maximilian.maxiBits.land(${p[0].loop},${p[1].loop})`,\n\t},\n\tbitOr: {\n\t\tsetup: (o, p) => \"\",\n\t\tloop: (o, p) => `Maximilian.maxiBits.lor(${p[0].loop},${p[1].loop})`,\n\t},\n\tbitXor: {\n\t\tsetup: (o, p) => \"\",\n\t\tloop: (o, p) => `Maximilian.maxiBits.lxor(${p[0].loop},${p[1].loop})`,\n\t},\n\tbitShl: {\n\t\tsetup: (o, p) => \"\",\n\t\tloop: (o, p) => `Maximilian.maxiBits.shl(${p[0].loop},${p[1].loop})`,\n\t},\n\tbitShr: {\n\t\tsetup: (o, p) => \"\",\n\t\tloop: (o, p) => `Maximilian.maxiBits.shr(${p[0].loop},${p[1].loop})`,\n\t},\n\tbitAt: {\n\t\tsetup: (o, p) => \"\",\n\t\tloop: (o, p) => `Maximilian.maxiBits.at(${p[0].loop},${p[1].loop})`,\n\t},\n\tbitAdd: {\n\t\tsetup: (o, p) => \"\",\n\t\tloop: (o, p) => `Maximilian.maxiBits.add(${p[0].loop},${p[1].loop})`,\n\t},\n\tbitSub: {\n\t\tsetup: (o, p) => \"\",\n\t\tloop: (o, p) => `Maximilian.maxiBits.sub(${p[0].loop},${p[1].loop})`,\n\t},\n\tbitMul: {\n\t\tsetup: (o, p) => \"\",\n\t\tloop: (o, p) => `Maximilian.maxiBits.mul(${p[0].loop},${p[1].loop})`,\n\t},\n\tbitEq: {\n\t\tsetup: (o, p) => \"\",\n\t\tloop: (o, p) => `Maximilian.maxiBits.eq(${p[0].loop},${p[1].loop})`,\n\t},\n\tbitGt: {\n\t\tsetup: (o, p) => \"\",\n\t\tloop: (o, p) => `Maximilian.maxiBits.gt(${p[0].loop},${p[1].loop})`,\n\t},\n\tbitGte: {\n\t\tsetup: (o, p) => \"\",\n\t\tloop: (o, p) => `Maximilian.maxiBits.gte(${p[0].loop},${p[1].loop})`,\n\t},\n\tbitLte: {\n\t\tsetup: (o, p) => \"\",\n\t\tloop: (o, p) => `Maximilian.maxiBits.lte(${p[0].loop},${p[1].loop})`,\n\t},\n\tbitLt: {\n\t\tsetup: (o, p) => \"\",\n\t\tloop: (o, p) => `Maximilian.maxiBits.lt(${p[0].loop},${p[1].loop})`,\n\t},\n\tsetup: (o, p) => \"\",\n\tbitDiv: {\n\t\tloop: (o, p) => `Maximilian.maxiBits.div(${p[0].loop},${p[1].loop})`,\n\t},\n\tbitr: {\n\t\tsetup: (o, p) => \"\",\n\t\tloop: (o, p) =>\n\t\t\t`Maximilian.maxiBits.at(${p[0].loop},${p[1].loop},${p[2].loop})`,\n\t},\n\tbitnoise: {\n\t\tsetup: (o, p) => \"\",\n\t\tloop: (o, p) => `Maximilian.maxiBits.noise()`,\n\t},\n\tbtime: {\n\t\tsetup: (o, p) => ``,\n\t\tloop: (o, p) => `this.bitTime`,\n\t},\n\tbitFromSig: {\n\t\tsetup: (o, p) => \"\",\n\t\tloop: (o, p) => `Maximilian.maxiBits.fromSignal(${p[0].loop})`,\n\t},\n\t//basic clock functions\n\tclp: {\n\t\tsetup: (o, p) => \"\",\n\t\tloop: (o, p) =>\n\t\t\t`this.clockPhase(${p[0].loop},${p.length > 1 ? p[1].loop : 0})`,\n\t},\n\tclt: {\n\t\tsetup: (o, p) => \"\",\n\t\tloop: (o, p) =>\n\t\t\t`this.clockTrig(${p[0].loop},${p.length > 1 ? p[1].loop : 0})`,\n\t},\n\t//clock meta\n\tclk: {\n\t\tsetup: (o, p) => \"\",\n\t\tloop: (o, p) =>\n\t\t\t`(()=>{this.setBPM(${p[0].loop}); this.setBeatsPerBar(${p[1].loop});})()`,\n\t},\n\t/*quantise code evaluations to the bar. \n\tvalues from maxiProcessor\n\t\tthis.codeQuantModes = {\n\t\t\tQUANTISE_TO_BAR: 0,\n\t\t\tDONTQUANTISE:1 \n\t\t};\n*/\n\tquantise: {\n\t\tsetup: (o, p) => `this.setCodeQuantiseMode(${p[0].loop > 0 ? 0 : 1})`,\n\t\tloop: (o, p) =>\n\t\t\t\"\",\n\t},\n\n\n\tonzx: {\n\t\tsetup: (o, p) => `${o} = new Maximilian.maxiTrigger();`,\n\t\tloop: (o, p) => `${o}.onZX(${p[0].loop})`,\n\t},\n\tonchange: {\n\t\tsetup: (o, p) => `${o} = new Maximilian.maxiTrigger();`,\n\t\tloop: (o, p) => `${o}.onChanged(${p[0].loop},${p[1].loop})`,\n\t},\n\tcount: {\n\t\tsetup: (o, p) => `${o} = new Maximilian.maxiCounter();`,\n\t\tloop: (o, p) => `${o}.count(${p[0].loop},${p[1].loop})`,\n\t},\n\tidx: {\n\t\tsetup: (o, p) => `${o} = new Maximilian.maxiIndex();`,\n\t\tloop: (o, p) => `${o}.pull(${p[0].loop},${p[1].loop},${p[2].loop})`,\n\t},\n\tsvf: {\n\t\t//set cutoff and resonance only when params change to save CPU\n\t\tsetup: (o, p) => `${o} = new Maximilian.maxiSVF();\n                      ${o}_p1 = new Maximilian.maxiTrigger();\n                      ${o}_p2 = new Maximilian.maxiTrigger();`,\n\t\tloop: (o, p) => `( () => { ${o}_cutoff = ${p[1].loop};\n                                if (${o}_p1.onChanged(${o}_cutoff, 1e-5)) {${o}.setCutoff(${o}_cutoff)};\n                                ${o}_res = ${p[2].loop};\n                                if (${o}_p2.onChanged(${o}_res, 1e-5)) {${o}.setResonance(${o}_res)};\n                                return ${o}.play(${p[0].loop},${p[3].loop},${p[4].loop},${p[5].loop},${p[6].loop})})()`,\n\t},\n\tbitclock: {\n\t\tsetup: (o, p) => \"\",\n\t\tloop: (o, p) => `this.bitclock`,\n\t},\n\tpvshift: {\n\t\tsetup: (o, p) => `${o} = new pvshift();`,\n\t\tloop: (o, p) => `${o}.play(${p[0].loop},${p[1].loop})`,\n\t},\n\n\trsq: {\n\t\tsetup: (o, p) => `${o} = new Maximilian.maxiRatioSeq();`,\n\t\tloop: (o, p) => {\n\t\t\treturn p.length == 2\n\t\t\t\t? `${o}.playTrig(${p[0].loop},${p[1].loop})`\n\t\t\t\t: `${o}.playValues(${p[0].loop},${p[1].loop},${p[2].loop})`;\n\t\t},\n\t},\n\to303: {\n\t\tsetup: (o, p) => `${o} = new Open303.Open303();\n                      ${o}.setSampleRate(sampleRate);\n                      ${o}_tnote = new Maximilian.maxiTrigger();\n                      ${o}_twf = new Maximilian.maxiTrigger();\n                      ${o}_tcut = new Maximilian.maxiTrigger();\n                      ${o}_tres = new Maximilian.maxiTrigger();\n                      ${o}_tenvm = new Maximilian.maxiTrigger();\n                      ${o}_tdec = new Maximilian.maxiTrigger();\n                      ${o}_tnoteoff = new Maximilian.maxiTrigger();\n                      ${o}_tatt = new Maximilian.maxiTrigger();`,\n\t\tloop: (o, p) => `(()=>{\n\t\t\tlet newNote = ${o}_tnote.onZX(${p[0].loop});\n\t\t\tlet accent = ${p[3].loop};\n\t\t\tif (newNote) {\n\t\t\t\tif (${p[2].loop}>0) {\n\t\t\t\t\t${o}.slideToNote(${p[1].loop},accent);\n\t\t\t\t}else{\n\t\t\t\t\t${o}.triggerNote(${p[1].loop},accent);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tif (${o}_tnoteoff.onChanged(${p[4].loop}, 1e-5)) {${o}.allNotesOff()};\n\t\t\tif (${o}_twf.onChanged(${p[5].loop}, 1e-5)) {${o}.setWaveform(${p[5].loop})};\n\t\t\tif (${o}_tcut.onChanged(${p[6].loop}, 1e-5)) {${o}.setCutoff(${p[6].loop})};\n\t\t\tif (${o}_tres.onChanged(${p[7].loop}, 1e-5)) {${o}.setResonance(${p[7].loop})};\n\t\t\tif (${o}_tenvm.onChanged(${p[8].loop}, 1e-5)) {${o}.setEnvMod(${p[8].loop})};\n\t\t\tif (${o}_tatt.onChanged(${p[9].loop}, 1e-5)) {${o}.setNormalAttack(${p[9].loop})};\n\t\t\tif (${o}_tdec.onChanged(${p[10].loop}, 1e-5)) {${o}.setDecay(${p[10].loop})};\n\t\t\t${o}.setAccent(${p[11].loop});\n\t\t\treturn ${o}.play();})()`,\n\t},\n\tfreeverb: {\n\t\tsetup: (o, p) => `${o} = new Maximilian.maxiFreeVerb();`,\n\t\tloop: (o, p) => `${o}.play(${p[0].loop},${p[1].loop},${p[2].loop})`,\n\t},\n\tline: {\n\t\t//creates a triggered line from 0-1 - use other functions to shape the line\n\t\tsetup: (o, p) =>\n\t\t\t`${o} = new Maximilian.maxiLine(); ${o}.prepare(0,1,${p[1].loop}, false); ${o}.triggerEnable(1);`,\n\t\tloop: (o, p) => `${o}.play(${p[0].loop})`,\n\t},\n\tconst: {\n\t\tsetup: (o, p) => ``,\n\t\tloop: (o, p) => `${p[0].loop}`,\n\t},\n\tpoll: {\n\t\tsetup: (o, p) => `${o} = new poll()`,\n\t\tloop: (o, p) => `${o}.play(${p[0].loop})`,\n\t},\n\tdac: {\n\t\tsetup: (o, p) => ``,\n\t\tloop: (o, p) => {\n\t\t\tif (p.length == 1) {\n\t\t\t\treturn `this.dacOutAll(${p[0].loop})`;\n\t\t\t} else {\n\t\t\t\treturn `this.dacOut(${p[0].loop},${p[1].loop})`;\n\t\t\t}\n\t\t},\n\t},\n\tfft: {\n\t\tsetup: (o, p) => `${o} = new fft(${p[1].loop}, ${p[2].loop})`,\n\t\tloop: (o, p) => `${o}.play(${p[0].loop})`,\n\t},\n\tifft: {\n\t\tsetup: (o, p) => `${o} = new ifft(${p[3].loop}, ${p[4].loop})`,\n\t\tloop: (o, p) => `${o}.play(${p[0].loop}, ${p[1].loop}, ${p[2].loop})`,\n\t},\n\tmfcc: {\n\t\tsetup: (o, p) =>\n\t\t\t`${o} = new mfcc(${p[1].loop}, ${p[2].loop}, ${p[3].loop})`,\n\t\tloop: (o, p) => `${o}.play(${p[0].loop})`,\n\t},\n};\n\n// if (${o}_twf.onChanged(${p[2].loop}, 1e-5)) {${o}.setWaveform(${p[2].loop})};\n// if (${o}_tcut.onChanged(${p[3].loop}, 1e-5)) {${o}.setCutoff(${p[3].loop})};\n// if (${o}_tres.onChanged(${p[4].loop}, 1e-5)) {${o}.setResonance(${p[4].loop})};\n// if (${o}_tenvm.onChanged(${p[5].loop}, 1e-5)) {${o}.setEnvMod(${p[5].loop})};\n// if (${o}_tdec.onChanged(${p[6].loop}, 1e-5)) {${o}.setDecay(${p[6].loop})};\n// if (newPitch || newVel) {${o}.noteOn(${p[0].loop},${p[1].loop})};\n\nexport default class ASTreeToJavascript {\n\n  static getNextID() {\n    objectID = objectID > 9999 ? 0 : ++objectID;\n    return objectID;\n  }\n\n  static emptyCode() {\n    return {\n      \"setup\": \"\",\n      \"loop\": \"\",\n      \"paramMarkers\": []\n    };\n  }\n\n  static traverseTree(t, code, level, vars, blockIdx) {\n    // console.log(`DEBUG:IR:traverseTree:level: ${level}`);\n    // console.log(`DEBUG:IR:traverseTree:vars:`);\n    // console.log(vars);\n    let attribMap = {\n      '@lang': (ccode, el) => {\n        let statements = [];\n        el.map((langEl) => {\n          let statementCode = ASTreeToJavascript.traverseTree(langEl, ASTreeToJavascript.emptyCode(), level, vars, blockIdx);\n          // console.log(\"@lang: \" + statementCode.loop);\n          ccode.setup += statementCode.setup;\n          ccode.loop += statementCode.loop;\n          // ccode.paramMarkers\n        });\n        return ccode;\n      },\n      // '@sigOut': (ccode, el) => {\n      //   ccode = ASTreeToJavascript.traverseTree(el, ccode, level, vars, blockIdx);\n      //   ccode.loop = `q.sigOut = ${ccode.loop};`;\n      //   return ccode;\n      // },\n      '@spawn': (ccode, el) => {\n        ccode = ASTreeToJavascript.traverseTree(el, ccode, level, vars, blockIdx);\n        ccode.loop += \";\";\n        return ccode;\n      },\n      '@sigp': (ccode, el) => {\n        let paramMarkers = [{\"s\":el['paramBegin'], \"e\":el['paramEnd'], \"l\":level}]\n        ccode.paramMarkers = ccode.paramMarkers.concat(paramMarkers);\n\n        let functionName = el['@func'].value;\n        let funcInfo = jsFuncMap[functionName];\n        let objName = \"q.b\" + blockIdx + \"u\" + ASTreeToJavascript.getNextID();\n\n        let allParams=[];\n\n        for (let p = 0; p < el['@params'].length; p++) {\n          let params = ASTreeToJavascript.emptyCode();\n          params = ASTreeToJavascript.traverseTree(el['@params'][p], params, level+1, vars, blockIdx);\n          // console.log(params);\n          allParams[p] = params;\n        }\n        // console.log(allParams);\n        let setupCode = \"\";\n        for (let param in allParams) {\n          setupCode += allParams[param].setup;\n          ccode.paramMarkers = ccode.paramMarkers.concat(allParams[param].paramMarkers);\n        }\n        ccode.setup += `${setupCode} ${funcInfo.setup(objName, allParams)};`;\n        ccode.loop += `${funcInfo.loop(objName, allParams)}`;\n        return ccode;\n      },\n      '@setvar': (ccode, el) => {\n        // console.log(\"DEBUG:traverseTree:@setvar\");\n        // console.log(vars);\n        // console.log(el['@varname']);\n        let variableName = el['@varname'];\n        // console.log(variableName);\n        let memIdx = vars[variableName];\n        // console.log(memIdx);\n        if (memIdx == undefined) {\n          // console.log(\"var not found\");\n          memIdx = Object.keys(vars).length;\n          vars[variableName] = memIdx;\n          // console.log(memIdx);\n        }\n        let varValueCode = ASTreeToJavascript.traverseTree(el['@varvalue'], ASTreeToJavascript.emptyCode(), level+1, vars, blockIdx);\n        ccode.setup += varValueCode.setup;\n        // ccode.loop = `this.setvar(q, '${el['@varname']}', ${varValueCode.loop})`;\n        ccode.loop = `(mem[${memIdx}] = ${varValueCode.loop})`;\n        return ccode;\n      },\n      '@getvar': (ccode, el) => {\n        let memIdx = vars[el];\n        if (memIdx == undefined) {\n\t\t\t\t\tmemIdx = Object.keys(vars).length;\n          vars[el] = memIdx;\n        }\n        // ccode.loop += `this.getvar(q, '${el.value}')`;\n        ccode.loop += `(mem[${memIdx}] != undefined ? mem[${memIdx}] : 0)`;\n        return ccode;\n      },\n      '@string': (ccode, el) => {\n        // console.log(el.value);\n        if (typeof el === 'string' || el instanceof String) {\n          ccode.loop += `'${el}'`;\n        }\n        // else {\n        //   ccode = ASTreeToJavascript.traverseTree(el, ccode, level, vars, blockIdx);\n        // }\n        return ccode;\n      },\n      '@num': (ccode, el) => {\n        if (el.value != undefined) {\n          ccode.loop += `${el.value}`;\n        }\n        //  else {\n        //   ccode = ASTreeToJavascript.traverseTree(el, ccode, level);\n        // }\n        return ccode;\n      },\n      '@list': (ccode, el) => {\n        //a list can be static and/or dynamic\n        //create a vector for the list\n        let objName = \"q.b\" + blockIdx + \"l\" + ASTreeToJavascript.getNextID();\n\t\t\t\t// ccode.setup += `${objName} = new Maximilian.VectorDouble();`;\n        // ccode.setup += `${objName}.resize(${el.length},0);`;\n\t\t\t\tccode.setup += `${objName} = new Float64Array(${el.length});`;\n\n        //in the loop, we create a function that returns the list. It might also update dynamic elements of the list\n        ccode.loop += `(()=>{`;\n        let extraSetupCode = \"\";\n\n        for(let i_list=0; i_list < el.length; i_list++) {\n          //if the element is a static number, set this element once in the setup code\n          let element =  ASTreeToJavascript.traverseTree(el[i_list], ASTreeToJavascript.emptyCode(), level, vars, blockIdx);\n          if(Object.keys(el[i_list])[0] == '@num') {\n\t\t\t\t\t\t// ccode.setup += `${objName}.set(${i_list}, ${element.loop});`;\n\t\t\t\t\t\tccode.setup += `${objName}[${i_list}] = ${element.loop};`;\n          }else{\n              //if the element not a number, set this element each update before returning the list\n              extraSetupCode += element.setup;\n              ccode.loop += `${objName}[${i_list}] = ${element.loop};`;\n          }\n        }\n\n        ccode.loop += `return ${objName}})()`;\n        ccode.setup += extraSetupCode;\n        // ccode.loop+=`${objName}`;\n        // console.log(ccode);\n        return ccode;\n      }\n    }\n\n    if (Array.isArray(t)) {\n      t.map((el) => {\n        Object.keys(el).map((k) => {\n          // console.log(\"DEBUG:traverseTree:@ARRAYAttribMap\");\n          // console.log(k);\n          code = attribMap[k](code, el[k]);\n        });\n      })\n    } else {\n      Object.keys(t).map((k) => {\n        // console.log(\"DEBUG:traverseTree:@OBJECTAttribMap\");\n        // console.log(k);\n        code = attribMap[k](code, t[k]);\n      });\n    }\n    return code;\n  }\n\n  static treeToCode(tree, blockIdx=0) {\n    // console.log(tree);\n    vars = {};\n    let code = ASTreeToJavascript.traverseTree(tree, ASTreeToJavascript.emptyCode(), 0, vars, blockIdx);\n    // console.log(vars);\n\t\t// code.setup = `() => {let q=this.newq(); q.sigOut=0; ${code.setup}; return q;}`;\n    // code.loop = `(q, inputs, mem) => {${code.loop} return q.sigOut;}`\n\t\tcode.setup = `() => {let q=this.newq(); ${code.setup}; return q;}`;\n    code.loop = `(q, inputs, mem) => {${code.loop}}`\n    // console.log(\"DEBUG:treeToCode\");\n\t\t// console.log(code.setup);\n\t\t// console.log(code.loop);\n    return code;\n  }\n}\n\n","(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define([], factory) /* global define */\n  } else if (typeof module === 'object' && module.exports) {\n    module.exports = factory()\n  } else {\n    root.sema = factory()\n  }\n}(this, function() {\n  'use strict';\n\n\n  // create the tree structure for a number\n  function num(val) {\n    return { \"@num\": { value: val } };\n  }\n\n  // create the tree structure for a string - useful for naming samples\n  function str(val) {\n    return { \"@string\": val };\n  }\n\n  // create the tree structure for a DSP function\n  function synth(functionName, params) {\n    let branch = {\n      \"@sigp\": { \"@params\": params, \"@func\": { value: functionName } }\n    };\n    return branch;\n  }\n\n  // create the tree structure for setting a variable\n  function setvar(name, value) {\n    return { \"@setvar\": { \"@varname\": name, \"@varvalue\": value } };\n  }\n\n  // create the tree structure for reading a variable\n  function getvar(name) {\n    return { \"@getvar\": name };\n  }\n\n  return {\n\t\tnum: num,\n\t\tstr: str,\n\t\tsynth: synth,\n\t\tsetvar: setvar,\n\t\tgetvar: getvar\n\t}\n\n}));","\n\n\nimport nearley from \"../../node_modules/nearley/lib/nearley.js\";\nimport compileLowLevel from \"./compiler-low-level.js\";\nimport {\n\tParserRules,\n\tParserStart,\n\tLexer\n} from \"../../node_modules/nearley/lib/nearley-language-bootstrapped.js\";\nimport generate from \"../../node_modules/nearley/lib/generate.js\";\nimport lint from \"../../node_modules/nearley/lib/lint.js\";\n\nimport ASTreeToJavascript from \"./IR.js\";\nimport mooo from \"../../node_modules/moo/moo.js\";\nimport semaa from \"./sema.js\";\n\n// import compilerWorker from \"web-worker:./worker.js\";\n\nexport function getModuleExports(source) {\n\tlet moo = mooo; //  `let` local scope, works with eval – does NOT work with Geval\n\tlet sema = semaa; // does NOT work with Geval, works with eval\n\tsema.num(\"3\"); // hack to force the module to load before eval\n\tlet module = { exports: \"\" };\n\tconst encodedJs = encodeURIComponent(source);\n\tconst dataUri = \"data:text/javascript;charset=utf-8,\" + encodedJs;\n\timport(dataUri);\n\treturn module.exports;\n}\n\n\nexport function evalToGlobalScope(source) {\n\t// let moo = mooo; //  `let` local scope, works with eval – does NOT work with Geval\n\twindow.moo = mooo; //  global scope, works with Geval\n\t// let sema = semaa; // does NOT work with Geval, works with eval\n\twindow.sema = semaa; // global scope, works with Geval\n\tsema.num(\"3\"); // hack to force the module to load before eval\n\tlet module = { exports: \"\" };\n\t// eval(source);\n\tvar geval = eval; // eval in the global scope, avoiding rollup warning - https://rollupjs.org/guide/en/#avoiding-eval\n\tgeval(source); // does NOT work with geval – ReferenceError: moo is not defined\n  // inject parser in window.grammar\n}\n\n/**\n * Loads the modules dependencies in the compiled parser source code (moo, sema)\n * before dynamically loading it with eval\n * @param {*} source\n * * sema.num('3') is a hack to force the module to load before eval,\n * TODO need to check how the module is built differently from moo\n */\nexport function getParserModuleExports(source) {\n\tlet moo = mooo; //  `let` local scope, works with eval – does NOT work with Geval\n\tlet sema = semaa; // does NOT work with Geval, works with eval\n\tsema.num(\"3\"); // hack to force the module to load before eval\n\tlet module = { exports: \"\" };\n\teval(source); // works but gets flagged by Rollup!\n\treturn module.exports;\n}\n\n\n/**\n * Given a livecode's grammar source code, compile a livecode's source\n * @param {*} grammarSource\n * @param {*} livecodeSource\n */\nexport function compile(grammarSource, livecodeSource) {\n  try {\n\t\tlet dspCode;\n\t\tlet sema = semaa;\n\n\t\tconst { errors, output } = compileGrammar(grammarSource);\n\n\t\t// const grammar = getModuleExports(output);\n\n\t\t// evalToGlobalScope(output); // FAILS in unit testing, `ReferenceError: window is not defined`\n\t\t// const compiledParser = new nearley.Parser(window.grammar);\n\n\t\tconst grammar = getParserModuleExports(output);\n\t\tconst compiledParser = new nearley.Parser(grammar);\n\n\t\t// let worker = new compilerWorker();\n\t\t// worker.postMessage({ livecodeSource, grammarSource });\n\n\t\tif (!errors && compiledParser) {\n\t\t\tconst livecodeParseTree = compiledParser.feed(livecodeSource);\n\t\t\tif (livecodeParseTree) {\n\t\t\t\tdspCode = ASTreeToJavascript.treeToCode(livecodeParseTree.results, 0);\n\t\t\t}\n\t\t}\n\t\treturn { dspCode };\n\t} catch (error) {\n \t\treturn { errors: error };\n  }\n}\n\n/**\n * Given a livecode's grammar source code, compile a livecode's source\n * @param {*} grammarSource\n * @param {*} livecodeSource\n */\nexport function parse(grammarSource, livecodeSource) {\n  try {\n\t\tlet dspCode;\n\t\tlet sema = semaa;\n\n\t\tconst { errors, output } = compileGrammar(grammarSource);\n\n\t\t// const grammar = getModuleExports(output);\n\n\t\t// evalToGlobalScope(output); // FAILS in unit testing, `ReferenceError: window is not defined`\n\t\t// const compiledParser = new nearley.Parser(window.grammar);\n\n\t\tconst grammar = getParserModuleExports(output);\n\t\tconst compiledParser = new nearley.Parser(grammar);\n\n\t\t// let worker = new compilerWorker();\n\t\t// worker.postMessage({ livecodeSource, grammarSource });\n\n\t\tif (!errors && compiledParser) {\n\t\t\tconst livecodeParseTree = compiledParser.feed(livecodeSource).results;\n\t\t\treturn { livecodeParseTree }\n\t\t}\n\t\telse return { errors };\n\t} catch (error) {\n \t\treturn { errors: error };\n  }\n}\n\n/**\n * Given an abstract syntax tree, generate Javascript DSP code\n * @param {*} liveCodeParseTree\n */\nexport function ASTreeToDSPcode(livecodeParseTree) {\n\tif (livecodeParseTree) {\n    try {\n\t\t\tconst dspCode = ASTreeToJavascript.treeToCode(livecodeParseTree, 0);\n      return { dspCode };\n    }\n    catch (error) {\n      return { errors: error };\n    }\n  }\n  else throw new Error('Problem with livecodeParseTree argument passed to ASTreeToDSPCode');\n}\n\n/*\n  MIT License\n  Copyright (c) 2019 Guillermo Webster\n  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\nfunction stream() {\n\tlet out = \"\";\n\treturn {\n\t\twrite(str) {\n\t\t\tout += str;\n\t\t},\n\t\tdump() {\n\t\t\treturn out;\n\t\t}\n\t};\n}\n\nfunction AnnotatePositions(rules) {\n\treturn rules.map(\n\t\trule =>\n\t\t\tnew nearley.Rule(\n\t\t\t\trule.name,\n\t\t\t\trule.symbols,\n\t\t\t\trule.postprocess &&\n\t\t\t\t\t((data, ref, reject) => {\n\t\t\t\t\t\tvar orig = rule.postprocess(data, ref, reject);\n\t\t\t\t\t\tif (orig === null) return null;\n\t\t\t\t\t\tif (typeof orig == \"object\" && !orig.slice) {\n\t\t\t\t\t\t\torig.pos = ref;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn orig;\n\t\t\t\t\t})\n\t\t\t)\n\t);\n}\n\nexport function compileGrammar(grammar) {\n\n\tlet parser = new nearley.Parser( AnnotatePositions(ParserRules), ParserStart, { lexer: Lexer } );\n\n\tlet errors = stream();\n\tlet output = \"\";\n\tlet positions = {};\n\n\ttry {\n\t\tparser.feed(grammar);\n\t\tif (parser.results[0]) {\n\t\t\tfunction rangeCallback(name, start, end) {\n\t\t\t\tpositions[name] = [start, end];\n\t\t\t}\n\t\t\tvar c = compileLowLevel(parser.results[0], {\n\t\t\t\trangeCallback: rangeCallback\n\t\t\t});\n\t\t\tlint(c, { out: errors });\n\n\t\t\toutput = generate(c, \"grammar\");\n\t\t}\n\t} catch (e) {\n\t\terrors.write(e);\n\t}\n\n\treturn {\n\t\terrors: errors.dump(),\n\t\tpositions,\n\t\toutput\n\t};\n}\n","\nimport Dispatcher from \"../common/dispatcher.js\";\n\n// here we use the default pattern but any RegEx can be configured\nimport mlworker from 'web-worker:./worker.js';\n\n/**\n * The Learner class encapsulates a worker thread\n * and does async initialization and manages all async communication with it\n * @class Learner\n * TODO more error handling\n * TODO more checking of arguments passed to methods\n */\nexport class Learner {\n\t/**\n\t * @constructor\n\t */\n\tconstructor() {\n\t\t// Manager of events subscrition and emission, that should be subscribed by SAB receivers\n\t\tthis.dispatcher = new Dispatcher();\n\t}\n\n\t/**\n\t * Learner's event subscription\n\t * @addEventListener\n\t * @param {*} event\n\t * @param {*} callback\n\t */\n\taddEventListener(event, callback) {\n\t\tif (this.dispatcher && event && callback)\n\t\t\tthis.dispatcher.addEventListener(event, callback);\n\t\telse throw new Error(\"Error adding event listener to Learner\");\n\t}\n\n\tremoveEventListener(event, callback) {\n\t\tif (this.dispatcher && event && callback)\n\t\t\tthis.dispatcher.removeEventListener(event, callback);\n\t\telse throw new Error(\"Error removing event listener to Learner\");\n\t}\n\n\t/**\n\t * Initialises worker with origin URL\n\t * @param {*} url\n\t * @param {*} sab\n\t */\n\tasync init(url) {\n\t\t// this.dispatcher = new Dispatcher();\n\t\tthis.worker = new mlworker();\n\n\t\treturn new Promise( (resolve, reject) => {\n\t\t\tlet result = {};\n\t\t\tif (this.worker && new URL(url)) {\n\n\t\t\t\tthis.worker.postMessage({ url });\n\n\t\t\t\tthis.worker.onerror = e => {\n\t\t\t\t\tconsole.log(\"onError\");\n          reject(e);\n        };\n\n\t\t\t\tthis.worker.onmessage = e => {\n\t\t\t\t\tresult = e.data.init;\n\t\t\t\t\tconsole.info(\"running Learner\");\n\t\t\t\t\tresolve(result);\n\t\t\t\t\t// this.worker.onmessage = this.onMessageHandler;\n\t\t\t\t\tthis.worker.onmessage = this.onMessageHandler.bind(this);\n\t\t\t\t};\n\n\t\t\t}\n\t\t});\n\t}\n\n\tonMessageHandler(m){\n\n\t\tif ( m && m.data && m.data.func ) {\n\n\t\t\tlet responders = {\n\n\t\t\t\tsab: (data) => {\n\t\t\t\t\t// Publish data to audio engine\n\t\t\t\t\tthis.dispatcher.dispatch(\"onSharedBuffer\", data);\n\t\t\t\t},\n\t\t\t\tsendbuf: (data) => {\n\t\t\t\t\t// Publish data to audio engine\n\t\t\t\t\tthis.dispatcher.dispatch(\"onSharedBuffer\", data);\n\t\t\t\t},\n\t\t\t\tsave: (data) => {\n\t\t\t\t\t// console.log(\"save\");\n\t\t\t\t\twindow.localStorage.setItem(data.name, data.val);\n\t\t\t\t},\n\t\t\t\tload: (data) => {\n\t\t\t\t\t// console.log(\"load\");\n\t\t\t\t\tlet msg = {\n\t\t\t\t\t\tname: data.name,\n\t\t\t\t\t\tval: window.localStorage.getItem(data.name),\n\t\t\t\t\t};\n\t\t\t\t\tmodelWorker.postMessage(msg);\n\t\t\t\t},\n\t\t\t\tdownload: (data) => {\n\t\t\t\t\t// console.log(\"download\");\n\t\t\t\t\tlet downloadData = window.localStorage.getItem(data.name);\n\t\t\t\t\tlet blob = new Blob([downloadData], {\n\t\t\t\t\t\ttype: \"text/plain;charset=utf-8\",\n\t\t\t\t\t});\n\t\t\t\t\tsaveData(blob, `${data.name}.data`);\n\t\t\t\t},\n\t\t\t\tsendcode: (data) => {\n\t\t\t\t\t// console.log(data);\n\t\t\t\t},\n        // DEPRECATED\n        data: () => {\n\t\t\t\t\t// Publish data to audio engine\n\t\t\t\t\t// messaging.publish(\"model-output-data\", data);\n\t\t\t\t},\n\t\t\t\tpbcopy: (data) => {\n\t\t\t\t\tcopyToPasteBuffer(data.msg);\n\t\t\t\t\t// let copyField=document.getElementById(\"hiddenCopyField\");\n\t\t\t\t\t// copyField.value = data.msg;\n\t\t\t\t\t// copyField.select();\n\t\t\t\t\t// document.execCommand(\"Copy\");\n\t\t\t\t},\n\t\t\t\tenvsave: (data) => {\n\t\t\t\t\tmessaging.publish(\"env-save\", data);\n\t\t\t\t},\n\t\t\t\tenvload: (data) => {\n\t\t\t\t\tmessaging.publish(\"env-load\", data);\n\t\t\t\t},\n\t\t\t\tdomeval: (data) => {\n\t\t\t\t\tevalDOMCode(data.code);\n\t\t\t\t},\n\t\t\t\tpeerinfo: (data) => {\n\t\t\t\t\tmessaging.publish(\"peerinfo-request\", {});\n\t\t\t\t},\n\t\t\t};\n\n\t\t\tresponders[m.data.func](m.data);\n\n    } else if (m.data !== undefined && m.data.length != 0) {\n\t\t\tres(m.data);\n\t\t}\n\t\t// clearTimeout(timeout);\n\t};\n\n\t// onMessageHandler = (e) => {\n\t// \tthis.dispatcher.dispatch(\"onSharedBuffer\", e.data);\n\t// \t// console.info(\"sending shared buffer\");\n\t// \t// console.log(e);\n\t// };\n\n\n\t/**\n\t *\n\t */\n\teval(expression) {\n\t\tif (this.worker && expression)\n\t\t\tthis.worker.postMessage({ eval: expression });\n\t\t//console.log(\"DEBUG:ModelEditor:evalModelEditorExpression: \" + code);\n\t\t// window.localStorage.setItem(\"modelEditorValue\", codeMirror.getValue());\n\t\t// addToHistory(\"model-history-\", modelCode);\n\t}\n\n\t/**\n\t *\n\t * @param {*} sab\n\t * @param {*} blocksize\n\t * @param {*} channelID\n\t */\n\taddSharedBuffer(e) {\n    console.log(\"addSharedBuffer leaner.js\", e)\n\t\tif (this.worker && e && e.sab && e.sab instanceof SharedArrayBuffer) {\n\t\t\tthis.worker.postMessage({\n\t\t\t\tsab: e.sab,\n\t\t\t\tblocksize: e.blocksize,\n\t\t\t\tchannelID: e.channelID,\n\t\t\t});\n\t\t} else throw new Error(\"Error pushing SharedBuffer in Learner\");\n\t}\n\n\tevalBlock(block) {\n\t\t// let modelCode = codeMirror.getBlock();\n\t\t// console.log(modelCode);\n\t\tlet linebreakPos = block.indexOf(\"\\n\");\n\t\tlet firstLine = block.substr(0, linebreakPos);\n\t\t// console.log(firstLine);\n\t\tif (firstLine == \"//--DOM\") {\n\t\t\tblock = block.substr(linebreakPos);\n\t\t\tevalDomCode(block);\n\t\t\taddToHistory(\"dom-history-\", block);\n\t\t} else {\n\t\t\tthis.worker.postMessage({ eval: block });\n\t\t\t// console.log(\"DEBUG:ModelEditor:evalModelEditorExpressionBlock: \" + code);\n\t\t\twindow.localStorage.setItem(\"modelEditorValue\", codeMirror.getValue());\n\t\t\taddToHistory(\"model-history-\", block);\n\t\t}\n\t}\n\n\t/**\n\t *\n\t */\n\tterminate() {\n\t\tthis.worker.onmessage = null; // remove event handler subscription\n\t\tthis.worker.terminate();\n\t\tthis.worker = null; // make sure it is deleted by GC\n\t}\n}\n","/**\n * Find code between dividers,\n * const divider = \"__________\";\n */\nexport function getBlock(editor) {\n\tif (editor) {\n\t\tlet cursorInfo = editor.getCursor();\n\t\t//find post divider\n\t\tlet line = cursorInfo.line;\n\t\tlet linePost = editor.lastLine();\n\n\t\twhile (line < linePost) {\n\t\t\tif (/___+/.test(editor.getLine(line))) {\n\t\t\t\t// Test RegEx at least 3 underscores\n\t\t\t\tlinePost = line - 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tline++;\n\t\t}\n\n\t\tline = cursorInfo.line;\n\t\tlet linePre = -1;\n\t\twhile (line >= 0) {\n\t\t\t// console.log(editor2.getLine(line));\n\t\t\tif (/___+/.test(editor.getLine(line))) {\n\t\t\t\tlinePre = line;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tline--;\n\t\t}\n\t\tif (linePre > -1) {\n\t\t\tlinePre++;\n\t\t}\n\t\tlet code = editor.getRange(\n\t\t\t{\n\t\t\t\tline: linePre,\n\t\t\t\tch: 0,\n\t\t\t},\n\t\t\t{\n\t\t\t\tline: linePost + 1,\n\t\t\t\tch: 0,\n\t\t\t}\n\t\t);\n\n\t\treturn code;\n\t}\n}\n","/**\n * sema-engine library interface\n * * exports the Engine class and all its public methods\n * @Engine\n */\nexport {\n  Engine\n  } from './engine/engine.js';\n\n/**\n * * exports high-level and more granular compiler utilities\n * @compile\n */\nexport {\n\tcompile,\n\tcompileGrammar,\n\tgetParserModuleExports,\n\tASTreeToDSPcode,\n\tparse\n} from \"./compiler/compiler.js\";\n// import compileGrammar from './compiler/compiler.js';\nexport * as ASTreeToJavascript from \"./compiler/IR.js\";\nexport { nearley } from \"../node_modules/nearley/lib/nearley.js\";\nexport { mooo } from \"../node_modules/moo/moo.js\";\nexport { semaa } from \"./compiler/sema.js\";\n\n/**\n * sema-engine library interface\n * * exports the Learner class and all of its public methods\n * @Learner\n */\nexport { Learner } from \"./learner/learner.js\";\n\nexport { getBlock } from \"./common/blockTracker.js\";\n\n\nexport function takeOverConsole(f) {\n\n\tif(f){\n\t\ttry {\n\t\t\tvar original = window.console;\n\n\t\t\tfunction handle(method, args) {\n\t\t\t\tvar message = Array.prototype.slice.apply(args).join(\" \");\n\t\t\t\tif (original) original[method](\"> \" + message);\n\t\t\t}\n\n\t\t\twindow.console = {\n\t\t\t\tlog: function () {\n\t\t\t\t\thandle(\"log\", arguments);\n\t\t\t\t},\n\t\t\t\twarn: function () {\n\t\t\t\t\thandle(\"warn\", arguments);\n\t\t\t\t},\n\t\t\t\terror: function () {\n\t\t\t\t\thandle(\"error\", arguments);\n\t\t\t\t},\n\t\t\t\tinfo: function () {\n\t\t\t\t\thandle(\"info\", arguments);\n\t\t\t\t},\n\t\t\t};\n\t\t} catch (error) {\n\t\t\tconsole.error(error);\n\t\t}\n\t}\n\n}"],"names":["RingBuffer","[object Object]","capacity","type","BYTES_PER_ELEMENT","bytes","SharedArrayBuffer","sab","ArrayBuffer","__proto__","isPrototypeOf","undefined","this","_type","byteLength","buf","write_ptr","Uint32Array","read_ptr","storage","name","elements","rd","Atomics","load","wr","_storage_capacity","to_write","Math","min","_available_write","length","first_part","second_part","_copy","store","to_read","_available_read","rv","input","offset_input","output","offset_output","size","i","getBase64","str","indexOf","dataStart","slice","match","_keyStr","removePaddingFromBase64","Module","maxiTools","charAt","substring","loadSampleToArray","audioContext","sampleObjectName","url","audioWorkletNode","data","b64","ab_bytes","arrayBuffer","uarray","chr1","chr2","chr3","enc2","enc3","enc4","parseInt","j","Uint8Array","replace","decodeAudioData","buffer","float32ArrayBuffer","getChannelData","port","postMessage","sample","console","log","request","XMLHttpRequest","addEventListener","info","open","responseType","onload","response","send","Event","eventName","callbacks","callback","push","index","splice","forEach","Dispatcher","events","event","emit","registerCallback","unregisterCallback","exclude","excludes","call","arguments","excludeProps","res","obj","Object","keys","key","args","AssertionError","message","_props","ssf","props","extend","showDiff","Error","captureStackTrace","e","stack","hasProperty","parsePath","path","map","value","mArr","exec","parseFloat","p","internalGetPathValue","parsed","pathDepth","temporaryValue","part","internalSetPathValue","val","tempObj","propName","propVal","next","getPathInfo","last","parent","exists","getPathValue","setPathValue","prototype","create","constructor","toJSON","flags","__flags","negate","flag","expr","module","promiseExists","Promise","globalObject","self","global","symbolExists","Symbol","mapExists","Map","setExists","Set","weakMapExists","WeakMap","weakSetExists","WeakSet","dataViewExists","DataView","symbolIteratorExists","iterator","symbolToStringTagExists","toStringTag","setEntriesExists","entries","mapEntriesExists","setIteratorPrototype","getPrototypeOf","mapIteratorPrototype","arrayIteratorExists","Array","arrayIteratorPrototype","stringIteratorExists","String","stringIteratorPrototype","toStringLeftSliceLength","toStringRightSliceLength","typeDetect","typeofObj","isArray","window","location","document","navigator","mimeTypes","plugins","HTMLElement","tagName","stringTag","objPrototype","RegExp","Date","toString","factory","types","flagMsg","ssfi","t","toLowerCase","sort","art","join","objType","some","expected","_obj","Function","functionNameMatch","getFuncName","aFunc","object","result","getOwnPropertyNames","addProperty","property","proto","includeStack","truncateThreshold","useProxy","proxyExcludedKeys","showHidden","depth","colors","formatValue","seen","stylize","ctx","recurseTimes","inspect","exports","ret","primitive","simple","JSON","stringify","Infinity","formatPrimitive","nodeType","nodeName","outerHTML","xmlVersion","XMLSerializer","serializeToString","container","createElementNS","appendChild","cloneNode","html","innerHTML","err","nameSuffix","visibleKeys","getEnumerableProperties","getProperties","isError","getName","isRegExp","isDate","toUTCString","formatError","ar","base","array","typedArray","braces","test","objectToString","l","hasOwnProperty","formatProperty","formatArray","config","formatTypedArray","pop","reduce","prev","cur","reduceToSingleString","propDescriptor","getOwnPropertyDescriptor","get","set","split","line","substr","re","d","o","actual","getActual","msg","objDisplay","assertion","includeAll","FakeMap","_key","random","now","isExtensible","defineProperty","configurable","MemoizeMap","memoizeCompare","leftHandOperand","rightHandOperand","memoizeMap","isPrimitive","leftHandMap","memoizeSet","deepEqual","options","comparator","extensiveDeepEqual","simpleResult","simpleEqual","memoize","memoizeResultLeft","memoizeResultRight","comparatorResult","leftHandType","extensiveDeepEqualByType","valueOf","iterableEqual","regexpEqual","generatorEqual","entriesEqual","objectEqual","leftHandItems","rightHandItems","getGeneratorEntries","hasIteratorFunction","target","getIteratorEntries","iteratorError","generator","generatorResult","accumulator","done","getEnumerableKeys","keysEqual","leftHandKeys","rightHandKeys","leftHandEntries","rightHandEntries","Proxy","Reflect","getter","propertyGetter","isProxyEnabled","newAssertion","chai","Assertion","transferFlags","fnLengthDesc","fn","assertionName","isChainable","builtins","nonChainableMethodName","proxyGetter","has","suggestion","suggestionDistance","prop","dist","stringDistanceCapped","strA","strB","cap","abs","memo","fill","ch","charCodeAt","method","methodWrapper","apply","addLengthGuard","proxify","_get","_super","overwritingPropertyGetter","origLockSsfi","_method","overwritingMethodWrapper","canSetPrototype","setPrototypeOf","testFn","excludeNames","filter","propDesc","chainingBehavior","chainableBehavior","__methods","chainableMethodWrapper","asserterName","pd","_chainingBehavior","a","b","getOwnPropertySymbols","sym","enumerable","concat","getOwnEnumerablePropertySymbols","compatibleInstance","thrown","errorLike","compatibleConstructor","compatibleMessage","errMatcher","comparisonString","getFunctionName","constructorFn","getConstructorName","constructorName","trim","getMessage","isNaN","Number","isObjectType","objectType","operator","isObject","require$$0","require$$1","require$$2","require$$3","require$$4","require$$5","require$$6","require$$7","require$$8","require$$9","pathval","require$$10","require$$11","require$$12","require$$13","require$$14","require$$15","require$$16","require$$17","require$$18","require$$19","require$$20","require$$21","require$$22","require$$23","require$$24","require$$25","_chai","util","lockSsfi","warn","addMethod","addChainableMethod","overwriteProperty","overwriteMethod","overwriteChainableMethod","assert","negateMsg","_actual","ok","assertionErrorObjectProperties","getOperator","_","an","article","SameValueZero","includeChainingBehavior","include","isDeep","descriptor","included","isEql","eql","item","firstErr","numErrs","propAssertion","checkError","assertExist","checkArguments","assertEqual","prevLockSsfi","assertEql","assertAbove","n","errorMessage","doLength","msgPrefix","nType","shouldThrow","to","have","itemsCount","assertLeast","assertBelow","assertMost","assertInstanceOf","isInstanceOf","TypeError","assertProperty","isNested","isOwn","nameType","pathInfo","assertOwnProperty","assertOwnPropertyDescriptor","actualDescriptor","assertLengthChain","assertLength","assertMatch","assertKeys","keysType","deepStr","mixedArgsMsg","getOwnEnumerableProperties","len","any","all","expectedKey","actualKey","every","compareByInspect","assertThrows","errMsgMatcher","caughtErr","is","everyArgIsUndefined","everyArgIsDefined","Boolean","errorLikeFail","errMsgMatcherFail","errorLikeString","placeholder","respondTo","itself","context","satisfy","matcher","closeTo","delta","assertChanges","subject","initial","final","msgObj","assertIncreases","assertDecreases","chain","start","finish","startType","finishType","range","subset","be","failMsg","failNegateMsg","contains","ordered","cmp","superset","elem","idx","matchIdx","elem2","isSubsetOf","list","possibility","expression","behavior","realDelta","isSealed","isFrozen","isFinite","expect","fail","loadShould","writable","shouldGetter","BigInt","should","equal","val1","val2","Throw","errt","errs","exist","not","Should","express","errmsg","isOk","isNotOk","act","exp","notEqual","strictEqual","notStrictEqual","deepStrictEqual","notDeepEqual","isAbove","abv","above","isAtLeast","atlst","least","isBelow","blw","below","isAtMost","atmst","most","isTrue","isNotTrue","isFalse","isNotFalse","isNull","isNotNull","NaN","isNotNaN","notExists","isUndefined","isDefined","isFunction","isNotFunction","isNotObject","isNotArray","isString","isNotString","isNumber","isNotNumber","finite","isBoolean","isNotBoolean","typeOf","notTypeOf","instanceOf","notInstanceOf","inc","notInclude","deepInclude","deep","notDeepInclude","nestedInclude","nested","notNestedInclude","deepNestedInclude","notDeepNestedInclude","ownInclude","own","notOwnInclude","deepOwnInclude","notDeepOwnInclude","notMatch","notProperty","propertyVal","notPropertyVal","deepPropertyVal","notDeepPropertyVal","ownProperty","notOwnProperty","ownPropertyVal","notOwnPropertyVal","deepOwnPropertyVal","notDeepOwnPropertyVal","nestedProperty","notNestedProperty","nestedPropertyVal","notNestedPropertyVal","deepNestedPropertyVal","notDeepNestedPropertyVal","lengthOf","hasAnyKeys","hasAllKeys","containsAllKeys","contain","doesNotHaveAnyKeys","doesNotHaveAllKeys","hasAnyDeepKeys","hasAllDeepKeys","containsAllDeepKeys","doesNotHaveAnyDeepKeys","doesNotHaveAllDeepKeys","throws","assertErr","throw","doesNotThrow","approximately","sameMembers","set1","set2","same","members","notSameMembers","sameDeepMembers","notSameDeepMembers","sameOrderedMembers","notSameOrderedMembers","sameDeepOrderedMembers","notSameDeepOrderedMembers","includeMembers","notIncludeMembers","includeDeepMembers","notIncludeDeepMembers","includeOrderedMembers","notIncludeOrderedMembers","includeDeepOrderedMembers","notIncludeDeepOrderedMembers","oneOf","inList","changes","change","changesBy","tmpMsg","by","doesNotChange","changesButNotBy","but","increases","increase","increasesBy","doesNotIncrease","increasesButNotBy","decreases","decrease","decreasesBy","doesNotDecrease","doesNotDecreaseBy","decreasesButNotBy","ifError","extensible","isNotExtensible","sealed","isNotSealed","frozen","isNotFrozen","isEmpty","empty","isNotEmpty","alias","as","used","use","core","version","Engine","instance","origin","learners","analysers","mediaStreamSource","mediaStream","sharedArrayBuffers","dispatcher","samplesLoaded","isHushed","id","learner","init","addSharedBuffer","error","removeEventListener","channelId","ttype","blocksize","getStorageForCapacity","Float64Array","ringbuf","func","channelID","rb","analyser","timeDataArray","fftSize","frequencyDataArray","getByteTimeDomainData","getByteFrequencyData","smoothingTimeConstant","analyserID","createAnalyser","minDecibels","maxDecibels","connect","analyserFrameId","analyserData","analyserPollingLoop","pollAnalyserData","requestAnimationFrame","cancelAnimationFrame","URL","isWorkletProcessorLoaded","audioWorkletName","audioWorkletUrl","AudioContext","latencyHint","loadWorkletProcessorCode","connectWorkletNode","state","resume","hush","disconnect","destination","gain","gainParam","parameters","unhush","dspFunction","eval","setup","loop","phase","stream","createMediaStreamSource","mediaStreamSourceConnected","constraints","audio","latency","echoCancellation","mozNoiseSuppression","mozAutoGainControl","video","mediaDevices","getUserMedia","then","s","onAudioInputInit","catch","onAudioInputFail","getAudioTracks","at","stop","audioWorklet","addModule","AudioWorkletNode","channelInterpretation","channelCountMode","channelCount","maxChannelCount","onprocessorerror","onprocessorstatechange","processorState","onmessageerror","onmessage","onProcessorMessageHandler","rq","peerNet","dispatch","suspend","objectName","root","Rule","symbols","postprocess","highestId","State","rule","dot","reference","wantedBy","isComplete","Column","grammar","states","wants","scannable","completed","Grammar","rules","byName","StreamLexer","reset","Parser","fromCompiled","keepHistory","lexer","lexerState","column","table","predict","process","current","getSymbolShortDisplay","symbol","literal","withCursorAt","symbolSequence","nextState","child","left","right","build","children","node","reverse","nextColumn","w","complete","nulls","r","copy","Lexer","ParserStart","ParserRules","g","lastLineBreak","col","save","token","lines","max","lastLineDigits","pad","feed","chunk","reportLexerError","offset","text","isToken","reportError","results","lexerError","tokenDisplay","lexerMessage","reportErrorCommon","lastColumnIndex","lastColumn","expectantStates","nextSymbol","displayStateStack","buildFirstStateStack","stateStack","symbolDisplay","getSymbolDisplay","lastDisplay","sameDisplayCount","display","getSymbolLongDisplay","visited","prevState","childVisited","childResult","restore","rewind","considerations","c","nearley","hasSticky","sticky","reCapture","reUnion","regexps","regexpOrLiteral","ignoreCase","multiline","source","ruleOptions","defaultType","lineBreaks","fallback","toRules","spec","arrayToRules","thing","objectToRules","defaultErrorRule","compileRules","hasStates","errorRule","fast","fastAllowed","unicodeFlag","groups","parts","shift","unicode","pat","regexp","fallbackRule","suffix","checkStateGroup","startState","queuedToken","queuedThrow","setState","popState","pushState","eat","tokenToString","_getGroup","groupCount","queuedGroup","_token","queuedText","group","lastIndex","matchNL","nl","LexerIterator","eol","firstLine","clone","tokenType","compile","$all","ruleMap","newRules","k","newRule","fastKeys","freeze","keywords","reverseMap","byLength","keyword","x","moo","getValue","assign","ws","comment","arrow","js","word","string","parse","btstring","lit","literals","main","charclass","afterWord","[","macro","exprs","body","builtin","tokens","mixin","macrocall","sl","toUpperCase","subexpression","insensitive","ebnf","modifier","compileLowLevel","structure","opts","unique","uniquer","alreadycompiled","customTokens","macros","productionRule","markRange","pos","nojs","require","resolve","file","dirname","cwd","f","parserGrammar","bootstraped","parser","Compile","produceRules","rangeCallback","env","buildRule","ruleName","buildToken","newname","buildStringToken","buildSubExpressionToken","buildEBNFPlus","buildEBNFStar","buildEBNFOpt","buildEBNFToken","newenv","argrulename","buildMacroCallToken","uns","un","serializeRules","builtinPostprocessors","extraIndent","serializeSymbol","tabulateString","dedentFunc","indentFirst","serializeRule","indent","tail","shouldIndent","generate","exportName","preprocessor","_default","javascript","joiner","arrconcat","arrpush","nuller","esmodule","cs","coffee","coffeescript","ts","typescript","out","write","lintNames","grm","lint","stderr","objectID","vars","jsFuncMap","saw","sin","tri","pha","ph2","sqr","pul","imp","sawn","noiz","gt","lt","mod","add","mul","sub","div","pow","sum","mix","prod","blin","ulin","bexp","uexp","linlin","linexp","softclip","hardclip","asymclip","flange","chor","dl","lpf","hpf","lpz","hpz","scop","toJS","fromJS","mouseX","mouseY","sah","stretch","adc","sampler","playArgs","oscin","oscout","bitToSig","bitToTrigSig","bitNeg","bitInc","bitDec","bitAnd","bitOr","bitXor","bitShl","bitShr","bitAt","bitAdd","bitSub","bitMul","bitEq","bitGt","bitGte","bitLte","bitLt","bitDiv","bitr","bitnoise","btime","bitFromSig","clp","clt","clk","quantise","onzx","onchange","count","svf","bitclock","pvshift","rsq","o303","freeverb","const","poll","dac","fft","ifft","mfcc","ASTreeToJavascript","paramMarkers","code","level","blockIdx","attribMap","@lang","ccode","el","langEl","statementCode","traverseTree","emptyCode","@spawn","@sigp","functionName","funcInfo","objName","getNextID","allParams","params","setupCode","param","@setvar","variableName","memIdx","varValueCode","@getvar","@string","@num","@list","extraSetupCode","i_list","element","tree","num","synth","@params","@func","setvar","@varname","@varvalue","getvar","sema","getParserModuleExports","semaa","grammarSource","livecodeSource","dspCode","errors","compileGrammar","compiledParser","livecodeParseTree","treeToCode","ASTreeToDSPcode","dump","AnnotatePositions","ref","reject","orig","positions","end","Learner","worker","mlworker","onerror","onMessageHandler","bind","m","sendbuf","localStorage","setItem","getItem","modelWorker","download","downloadData","blob","Blob","saveData","sendcode","pbcopy","copyToPasteBuffer","envsave","messaging","publish","envload","domeval","evalDOMCode","peerinfo","block","linebreakPos","evalDomCode","addToHistory","codeMirror","terminate","getBlock","editor","cursorInfo","getCursor","linePost","lastLine","getLine","linePre","getRange","takeOverConsole","original","handle"],"mappings":"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"}