
var maximilian = (function() {
  var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;
  if (typeof __filename !== 'undefined') _scriptDir = _scriptDir || __filename;
  return (
function(maximilian) {
  maximilian = maximilian || {};

// Copyright 2010 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof maximilian !== 'undefined' ? maximilian : {};

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)


// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
var key;
for (key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

var arguments_ = [];
var thisProgram = './this.program';
var quit_ = function(status, toThrow) {
  throw toThrow;
};

// Determine the runtime environment we are in. You can customize this by
// setting the ENVIRONMENT setting at compile time (see settings.js).

var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;
ENVIRONMENT_IS_WEB = typeof window === 'object';
ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
// N.b. Electron.js environment is simultaneously a NODE-environment, but
// also a web environment.
ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof process.versions === 'object' && typeof process.versions.node === 'string';
ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (Module['ENVIRONMENT']) {
  throw new Error('Module.ENVIRONMENT has been deprecated. To force the environment, use the ENVIRONMENT compile-time option (for example, -s ENVIRONMENT=web or -s ENVIRONMENT=node)');
}



// `/` should be present at the end if `scriptDirectory` is not empty
var scriptDirectory = '';
function locateFile(path) {
  if (Module['locateFile']) {
    return Module['locateFile'](path, scriptDirectory);
  }
  return scriptDirectory + path;
}

// Hooks that are implemented differently in different runtime environments.
var read_,
    readAsync,
    readBinary,
    setWindowTitle;

var nodeFS;
var nodePath;

if (ENVIRONMENT_IS_NODE) {
  if (ENVIRONMENT_IS_WORKER) {
    scriptDirectory = require('path').dirname(scriptDirectory) + '/';
  } else {
    scriptDirectory = __dirname + '/';
  }


  read_ = function shell_read(filename, binary) {
    var ret = tryParseAsDataURI(filename);
    if (ret) {
      return binary ? ret : ret.toString();
    }
    if (!nodeFS) nodeFS = require('fs');
    if (!nodePath) nodePath = require('path');
    filename = nodePath['normalize'](filename);
    return nodeFS['readFileSync'](filename, binary ? null : 'utf8');
  };

  readBinary = function readBinary(filename) {
    var ret = read_(filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };




  if (process['argv'].length > 1) {
    thisProgram = process['argv'][1].replace(/\\/g, '/');
  }

  arguments_ = process['argv'].slice(2);

  // MODULARIZE will export the module in the proper place outside, we don't need to export here

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  process['on']('unhandledRejection', abort);

  quit_ = function(status) {
    process['exit'](status);
  };

  Module['inspect'] = function () { return '[Emscripten Module object]'; };



} else
if (ENVIRONMENT_IS_SHELL) {


  if (typeof read != 'undefined') {
    read_ = function shell_read(f) {
      var data = tryParseAsDataURI(f);
      if (data) {
        return intArrayToString(data);
      }
      return read(f);
    };
  }

  readBinary = function readBinary(f) {
    var data;
    data = tryParseAsDataURI(f);
    if (data) {
      return data;
    }
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    arguments_ = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    arguments_ = arguments;
  }

  if (typeof quit === 'function') {
    quit_ = function(status) {
      quit(status);
    };
  }

  if (typeof print !== 'undefined') {
    // Prefer to use print/printErr where they exist, as they usually work better.
    if (typeof console === 'undefined') console = /** @type{!Console} */({});
    console.log = /** @type{!function(this:Console, ...*): undefined} */ (print);
    console.warn = console.error = /** @type{!function(this:Console, ...*): undefined} */ (typeof printErr !== 'undefined' ? printErr : print);
  }


} else

// Note that this includes Node.js workers when relevant (pthreads is enabled).
// Node.js workers are detected as a combination of ENVIRONMENT_IS_WORKER and
// ENVIRONMENT_IS_NODE.
if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  if (ENVIRONMENT_IS_WORKER) { // Check worker, not web, since window could be polyfilled
    scriptDirectory = self.location.href;
  } else if (document.currentScript) { // web
    scriptDirectory = document.currentScript.src;
  }
  // When MODULARIZE (and not _INSTANCE), this JS may be executed later, after document.currentScript
  // is gone, so we saved it, and we use it here instead of any other info.
  if (_scriptDir) {
    scriptDirectory = _scriptDir;
  }
  // blob urls look like blob:http://site.com/etc/etc and we cannot infer anything from them.
  // otherwise, slice off the final part of the url to find the script directory.
  // if scriptDirectory does not contain a slash, lastIndexOf will return -1,
  // and scriptDirectory will correctly be replaced with an empty string.
  if (scriptDirectory.indexOf('blob:') !== 0) {
    scriptDirectory = scriptDirectory.substr(0, scriptDirectory.lastIndexOf('/')+1);
  } else {
    scriptDirectory = '';
  }


  // Differentiate the Web Worker from the Node Worker case, as reading must
  // be done differently.
  {


  read_ = function shell_read(url) {
    try {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
    } catch (err) {
      var data = tryParseAsDataURI(url);
      if (data) {
        return intArrayToString(data);
      }
      throw err;
    }
  };

  if (ENVIRONMENT_IS_WORKER) {
    readBinary = function readBinary(url) {
      try {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(/** @type{!ArrayBuffer} */(xhr.response));
      } catch (err) {
        var data = tryParseAsDataURI(url);
        if (data) {
          return data;
        }
        throw err;
      }
    };
  }

  readAsync = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      var data = tryParseAsDataURI(url);
      if (data) {
        onload(data.buffer);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };




  }

  setWindowTitle = function(title) { document.title = title };
} else
{
  throw new Error('environment detection error');
}


// Set up the out() and err() hooks, which are how we can print to stdout or
// stderr, respectively.
var out = Module['print'] || console.log.bind(console);
var err = Module['printErr'] || console.warn.bind(console);

// Merge back in the overrides
for (key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = null;

// Emit code to handle expected values on the Module object. This applies Module.x
// to the proper local x. This has two benefits: first, we only emit it if it is
// expected to arrive, and second, by using a local everywhere else that can be
// minified.
if (Module['arguments']) arguments_ = Module['arguments'];if (!Object.getOwnPropertyDescriptor(Module, 'arguments')) Object.defineProperty(Module, 'arguments', { configurable: true, get: function() { abort('Module.arguments has been replaced with plain arguments_') } });
if (Module['thisProgram']) thisProgram = Module['thisProgram'];if (!Object.getOwnPropertyDescriptor(Module, 'thisProgram')) Object.defineProperty(Module, 'thisProgram', { configurable: true, get: function() { abort('Module.thisProgram has been replaced with plain thisProgram') } });
if (Module['quit']) quit_ = Module['quit'];if (!Object.getOwnPropertyDescriptor(Module, 'quit')) Object.defineProperty(Module, 'quit', { configurable: true, get: function() { abort('Module.quit has been replaced with plain quit_') } });

// perform assertions in shell.js after we set up out() and err(), as otherwise if an assertion fails it cannot print the message
// Assertions on removed incoming Module JS APIs.
assert(typeof Module['memoryInitializerPrefixURL'] === 'undefined', 'Module.memoryInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['pthreadMainPrefixURL'] === 'undefined', 'Module.pthreadMainPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['cdInitializerPrefixURL'] === 'undefined', 'Module.cdInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['filePackagePrefixURL'] === 'undefined', 'Module.filePackagePrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['read'] === 'undefined', 'Module.read option was removed (modify read_ in JS)');
assert(typeof Module['readAsync'] === 'undefined', 'Module.readAsync option was removed (modify readAsync in JS)');
assert(typeof Module['readBinary'] === 'undefined', 'Module.readBinary option was removed (modify readBinary in JS)');
assert(typeof Module['setWindowTitle'] === 'undefined', 'Module.setWindowTitle option was removed (modify setWindowTitle in JS)');
assert(typeof Module['TOTAL_MEMORY'] === 'undefined', 'Module.TOTAL_MEMORY has been renamed Module.INITIAL_MEMORY');
if (!Object.getOwnPropertyDescriptor(Module, 'read')) Object.defineProperty(Module, 'read', { configurable: true, get: function() { abort('Module.read has been replaced with plain read_') } });
if (!Object.getOwnPropertyDescriptor(Module, 'readAsync')) Object.defineProperty(Module, 'readAsync', { configurable: true, get: function() { abort('Module.readAsync has been replaced with plain readAsync') } });
if (!Object.getOwnPropertyDescriptor(Module, 'readBinary')) Object.defineProperty(Module, 'readBinary', { configurable: true, get: function() { abort('Module.readBinary has been replaced with plain readBinary') } });
// TODO: add when SDL2 is fixed if (!Object.getOwnPropertyDescriptor(Module, 'setWindowTitle')) Object.defineProperty(Module, 'setWindowTitle', { configurable: true, get: function() { abort('Module.setWindowTitle has been replaced with plain setWindowTitle') } });
var IDBFS = 'IDBFS is no longer included by default; build with -lidbfs.js';
var PROXYFS = 'PROXYFS is no longer included by default; build with -lproxyfs.js';
var WORKERFS = 'WORKERFS is no longer included by default; build with -lworkerfs.js';
var NODEFS = 'NODEFS is no longer included by default; build with -lnodefs.js';


// TODO remove when SDL2 is fixed (also see above)



// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// {{PREAMBLE_ADDITIONS}}

var STACK_ALIGN = 16;

// stack management, and other functionality that is provided by the compiled code,
// should not be used before it is ready

/** @suppress{duplicate} */
var stackSave;
/** @suppress{duplicate} */
var stackRestore;
/** @suppress{duplicate} */
var stackAlloc;

stackSave = stackRestore = stackAlloc = function() {
  abort('cannot use the stack before compiled code is ready to run, and has provided stack access');
};

function staticAlloc(size) {
  abort('staticAlloc is no longer available at runtime; instead, perform static allocations at compile time (using makeStaticAlloc)');
}

function dynamicAlloc(size) {
  assert(DYNAMICTOP_PTR);
  var ret = HEAP32[DYNAMICTOP_PTR>>2];
  var end = (ret + size + 15) & -16;
  assert(end <= HEAP8.length, 'failure to dynamicAlloc - memory growth etc. is not supported there, call malloc/sbrk directly');
  HEAP32[DYNAMICTOP_PTR>>2] = end;
  return ret;
}

function alignMemory(size, factor) {
  if (!factor) factor = STACK_ALIGN; // stack alignment (16-byte) by default
  return Math.ceil(size / factor) * factor;
}

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': return 1;
    case 'i16': return 2;
    case 'i32': return 4;
    case 'i64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length-1] === '*') {
        return 4; // A pointer
      } else if (type[0] === 'i') {
        var bits = Number(type.substr(1));
        assert(bits % 8 === 0, 'getNativeTypeSize invalid bits ' + bits + ', type ' + type);
        return bits / 8;
      } else {
        return 0;
      }
    }
  }
}

function warnOnce(text) {
  if (!warnOnce.shown) warnOnce.shown = {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    err(text);
  }
}






// Wraps a JS function as a wasm function with a given signature.
function convertJsFunctionToWasm(func, sig) {
  return func;
}

var freeTableIndexes = [];

// Add a wasm function to the table.
function addFunctionWasm(func, sig) {
  var table = wasmTable;
  var ret;
  // Reuse a free index if there is one, otherwise grow.
  if (freeTableIndexes.length) {
    ret = freeTableIndexes.pop();
  } else {
    ret = table.length;
    // Grow the table
    try {
      table.grow(1);
    } catch (err) {
      if (!(err instanceof RangeError)) {
        throw err;
      }
      throw 'Unable to grow wasm table. Set ALLOW_TABLE_GROWTH.';
    }
  }

  // Set the new value.
  try {
    // Attempting to call this with JS function will cause of table.set() to fail
    table.set(ret, func);
  } catch (err) {
    if (!(err instanceof TypeError)) {
      throw err;
    }
    assert(typeof sig !== 'undefined', 'Missing signature argument to addFunction');
    var wrapped = convertJsFunctionToWasm(func, sig);
    table.set(ret, wrapped);
  }

  return ret;
}

function removeFunctionWasm(index) {
  freeTableIndexes.push(index);
}

// 'sig' parameter is required for the llvm backend but only when func is not
// already a WebAssembly function.
function addFunction(func, sig) {
  assert(typeof func !== 'undefined');

  return addFunctionWasm(func, sig);
}

function removeFunction(index) {
  removeFunctionWasm(index);
}



var funcWrappers = {};

function getFuncWrapper(func, sig) {
  if (!func) return; // on null pointer, return undefined
  assert(sig);
  if (!funcWrappers[sig]) {
    funcWrappers[sig] = {};
  }
  var sigCache = funcWrappers[sig];
  if (!sigCache[func]) {
    // optimize away arguments usage in common cases
    if (sig.length === 1) {
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func);
      };
    } else if (sig.length === 2) {
      sigCache[func] = function dynCall_wrapper(arg) {
        return dynCall(sig, func, [arg]);
      };
    } else {
      // general case
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func, Array.prototype.slice.call(arguments));
      };
    }
  }
  return sigCache[func];
}





function makeBigInt(low, high, unsigned) {
  return unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0));
}

/** @param {Array=} args */
function dynCall(sig, ptr, args) {
  if (args && args.length) {
    // j (64-bit integer) must be passed in as two numbers [low 32, high 32].
    assert(args.length === sig.substring(1).replace(/j/g, '--').length);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
  } else {
    assert(sig.length == 1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].call(null, ptr);
  }
}

var tempRet0 = 0;

var setTempRet0 = function(value) {
  tempRet0 = value;
};

var getTempRet0 = function() {
  return tempRet0;
};

function getCompilerSetting(name) {
  throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for getCompilerSetting or emscripten_get_compiler_setting to work';
}

var Runtime = {
  // helpful errors
  getTempRet0: function() { abort('getTempRet0() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  staticAlloc: function() { abort('staticAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  stackAlloc: function() { abort('stackAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
};

// The address globals begin at. Very low in memory, for code size and optimization opportunities.
// Above 0 is static memory, starting with globals.
// Then the stack.
// Then 'dynamic' memory for sbrk.
var GLOBAL_BASE = 1024;




// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html


var wasmBinary;if (Module['wasmBinary']) wasmBinary = Module['wasmBinary'];if (!Object.getOwnPropertyDescriptor(Module, 'wasmBinary')) Object.defineProperty(Module, 'wasmBinary', { configurable: true, get: function() { abort('Module.wasmBinary has been replaced with plain wasmBinary') } });
var noExitRuntime;if (Module['noExitRuntime']) noExitRuntime = Module['noExitRuntime'];if (!Object.getOwnPropertyDescriptor(Module, 'noExitRuntime')) Object.defineProperty(Module, 'noExitRuntime', { configurable: true, get: function() { abort('Module.noExitRuntime has been replaced with plain noExitRuntime') } });


// wasm2js.js - enough of a polyfill for the WebAssembly object so that we can load
// wasm2js code that way.


// Emit "var WebAssembly" if definitely using wasm2js. Otherwise, in MAYBE_WASM2JS
// mode, we can't use a "var" since it would prevent normal wasm from working.
/** @suppress{const} */
var
WebAssembly = {
  Memory: /** @constructor */ function(opts) {
    return {
      buffer: new ArrayBuffer(opts['initial'] * 65536),
      grow: function(amount) {
        var oldBuffer = this.buffer;
        var ret = __growWasmMemory(amount);
        assert(this.buffer !== oldBuffer); // the call should have updated us
        return ret;
      }
    };
  },

  Table: function(opts) {
    var ret = new Array(opts['initial']);
    ret.grow = function(by) {
      if (ret.length >= 2116 + 0) {
        abort('Unable to grow wasm table. Use a higher value for RESERVED_FUNCTION_POINTERS or set ALLOW_TABLE_GROWTH.')
      }
      ret.push(null);
    };
    ret.set = function(i, func) {
      ret[i] = func;
    };
    ret.get = function(i) {
      return ret[i];
    };
    return ret;
  },

  Module: function(binary) {
    // TODO: use the binary and info somehow - right now the wasm2js output is embedded in
    // the main JS
    return {};
  },

  Instance: function(module, info) {
    // TODO: use the module and info somehow - right now the wasm2js output is embedded in
    // the main JS
    // This will be replaced by the actual wasm2js code.
    var exports = (
function instantiate(asmLibraryArg, wasmMemory, wasmTable) {


  var scratchBuffer = new ArrayBuffer(8);
  var i32ScratchView = new Int32Array(scratchBuffer);
  var f32ScratchView = new Float32Array(scratchBuffer);
  var f64ScratchView = new Float64Array(scratchBuffer);
  
  function wasm2js_scratch_load_i32(index) {
    return i32ScratchView[index];
  }
      
  function wasm2js_scratch_store_i32(index, value) {
    i32ScratchView[index] = value;
  }
      
  function wasm2js_scratch_load_f64() {
    return f64ScratchView[0];
  }
      
  function wasm2js_scratch_store_f64(value) {
    f64ScratchView[0] = value;
  }
      
  function legalimport$wasm2js_scratch_store_i64(low, high) {
    i32ScratchView[0] = low;
    i32ScratchView[1] = high;
  }
      
  function wasm2js_scratch_store_f32(value) {
    f32ScratchView[0] = value;
  }
      
  function wasm2js_scratch_load_f32() {
    return f32ScratchView[0];
  }
      
function asmFunc(global, env, buffer) {
 var memory = env.memory;
 var FUNCTION_TABLE = wasmTable;
 var HEAP8 = new global.Int8Array(buffer);
 var HEAP16 = new global.Int16Array(buffer);
 var HEAP32 = new global.Int32Array(buffer);
 var HEAPU8 = new global.Uint8Array(buffer);
 var HEAPU16 = new global.Uint16Array(buffer);
 var HEAPU32 = new global.Uint32Array(buffer);
 var HEAPF32 = new global.Float32Array(buffer);
 var HEAPF64 = new global.Float64Array(buffer);
 var Math_imul = global.Math.imul;
 var Math_fround = global.Math.fround;
 var Math_abs = global.Math.abs;
 var Math_clz32 = global.Math.clz32;
 var Math_min = global.Math.min;
 var Math_max = global.Math.max;
 var Math_floor = global.Math.floor;
 var Math_ceil = global.Math.ceil;
 var Math_sqrt = global.Math.sqrt;
 var abort = env.abort;
 var nan = global.NaN;
 var infinity = global.Infinity;
 var __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_ = env.invoke_iii;
 var __invoke_i1___22class_std____2__basic_ifstream_22_ = env.invoke_ii;
 var __invoke___22class_std____2__basic_istream_22____22class_std____2__basic_istream_22__i8__i32 = env.invoke_iiii;
 var __invoke_void___22class_std____2__vector_13_22__i32 = env.invoke_vii;
 var __invoke_void___22class_std____2__basic_ifstream_22_ = env.invoke_vi;
 var __cxa_find_matching_catch_2 = env.__cxa_find_matching_catch_2;
 var getTempRet0 = env.getTempRet0;
 var __resumeException = env.__resumeException;
 var __cxa_find_matching_catch_3 = env.__cxa_find_matching_catch_3;
 var round = env.round;
 var __cxa_begin_catch = env.__cxa_begin_catch;
 var __cxa_end_catch = env.__cxa_end_catch;
 var __invoke_void = env.invoke_v;
 var __cxa_allocate_exception = env.__cxa_allocate_exception;
 var __cxa_throw = env.__cxa_throw;
 var __invoke_void_i8__i32_i32 = env.invoke_viii;
 var __cxa_free_exception = env.__cxa_free_exception;
 var __invoke___22class_std____2__basic_streambuf_22____22class_std____2__basic_streambuf_22__i8__i8__i8____22class_std____2__ios_base_22__i8 = env.invoke_iiiiiii;
 var _embind_register_class = env._embind_register_class;
 var _embind_register_class_class_function = env._embind_register_class_class_function;
 var _embind_register_class_property = env._embind_register_class_property;
 var _embind_register_smart_ptr = env._embind_register_smart_ptr;
 var _embind_register_class_constructor = env._embind_register_class_constructor;
 var __invoke_void___22class_std____2__vector_22____22class_std____2__vector_22____22class_std____2__vector_22__double = env.invoke_viiid;
 var _embind_register_enum = env._embind_register_enum;
 var _embind_register_enum_value = env._embind_register_enum_value;
 var __invoke__class_maxiGrain___class_maxiGrain___class_maxiSample__double_double_double__class_maxiGrainWindowCache_ = env.invoke_iiidddi;
 var __invoke_double__class_maxiRatioSeq__double___22class_std____2__vector_22_ = env.invoke_didi;
 var __invoke_void___22class_std____2__vector_22__double__double__i32 = env.invoke_viiii;
 var _embind_register_class_function = env._embind_register_class_function;
 var _emval_incref = env._emval_incref;
 var _emval_decref = env._emval_decref;
 var _emval_take_value = env._emval_take_value;
 var __invoke___22class_std____2__shared_ptr_22____22class_std____2__shared_ptr_22___class_maxiOsc____22class_emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc____val_deleter_22__i32 = env.invoke_iiiii;
 var __cxa_rethrow = env.__cxa_rethrow;
 var _emval_call = env._emval_call;
 var __invoke_double__class_maxiKuramotoOscillator__double_double___22class_std____2__vector_22_ = env.invoke_diddi;
 var __invoke_double__class_maxiRatioSeq__double___22class_std____2__vector_22____22class_std____2__vector_22_ = env.invoke_didii;
 var exit = env.exit;
 var __invoke_void___22class_std____2__valarray_22__i32_double = env.invoke_viid;
 var __assert_fail = env.__assert_fail;
 var __syscall5 = env.__syscall5;
 var __wasi_fd_close = env.fd_close;
 var __wasi_fd_write = env.fd_write;
 var __syscall221 = env.__syscall221;
 var __syscall54 = env.__syscall54;
 var __wasi_fd_read = env.fd_read;
 var __cxa_uncaught_exceptions = env.__cxa_uncaught_exceptions;
 var __invoke___22class_std____2__basic_streambuf_22____22class_std____2__num_put_22____22class_std____2__basic_streambuf_22____22class_std____2__ios_base_22__i8_i32 = env.invoke_iiiiii;
 var __invoke___22class_std____2__basic_string_22____22class_std____2__istreambuf_iterator_22____22class_std____2__basic_streambuf_22____22class_std____2__basic_string_22____22class_std____2__basic_string_22____22class_std____2__ctype_22__i32__i1 = env.invoke_iiiiiiii;
 var __invoke_i32_i8_i32_i8__i8___i32__i8___22class_std____2__basic_string_22__i32__i32___i8_ = env.invoke_iiiiiiiiiii;
 var __invoke_i32_i8_i8__i8__i8__i8___i8_i8___22class_std____2__basic_string_22__i32__i32___i32__i8_ = env.invoke_iiiiiiiiiiiii;
 var __invoke_float_i8__i8__i32_ = env.invoke_fiii;
 var __invoke_double_i8__i8__i32_ = env.invoke_diii;
 var __invoke__struct___locale_struct_ = env.invoke_i;
 var __wasi_environ_sizes_get = env.environ_sizes_get;
 var __wasi_environ_get = env.environ_get;
 var __map_file = env.__map_file;
 var __syscall91 = env.__syscall91;
 var __invoke_void_i8__i8__i8__i8__i8___i8_____22class_std____2__locale_22_ = env.invoke_viiiiiii;
 var strftime_l = env.strftime_l;
 var __invoke_i1___22class_std____2__istreambuf_iterator_22____22class_std____2__basic_streambuf_22__i1___22class_std____2__locale_22__i32_i32__i8____22class_std____2__ctype_22____22class_std____2__unique_ptr_22__i8___i8_ = env.invoke_iiiiiiiiiiii;
 var __invoke_void_i1___22class_std____2__locale_22____22struct_std____2__money_base__pattern_22__i8__i8____22class_std____2__basic_string_22____22class_std____2__basic_string_22____22class_std____2__basic_string_22____22class_std____2__basic_string_22__i32_ = env.invoke_viiiiiiiiii;
 var __invoke_void_i8__i8___i8___i32_i8__i8____22class_std____2__ctype_22__i1___22struct_std____2__money_base__pattern_22__i8_i8___22class_std____2__basic_string_22____22class_std____2__basic_string_22____22class_std____2__basic_string_22__i32 = env.invoke_viiiiiiiiiiiiiii;
 var abort = env.abort;
 var _embind_register_void = env._embind_register_void;
 var _embind_register_bool = env._embind_register_bool;
 var _embind_register_std_string = env._embind_register_std_string;
 var _embind_register_std_wstring = env._embind_register_std_wstring;
 var _embind_register_emval = env._embind_register_emval;
 var _embind_register_integer = env._embind_register_integer;
 var _embind_register_float = env._embind_register_float;
 var _embind_register_memory_view = env._embind_register_memory_view;
 var emscripten_resize_heap = env.emscripten_resize_heap;
 var emscripten_memcpy_big = env.emscripten_memcpy_big;
 var __handle_stack_overflow = env.__handle_stack_overflow;
 var setTempRet0 = env.setTempRet0;
 var legalimport$__invoke___22class_std____2__basic_istream_22____22class_std____2__basic_istream_22__i64_i32 = env.invoke_iiji;
 var legalimport$__invoke_void___22class_std____2__fpos_22____22class_std____2__basic_streambuf_22__i64_i32_i32 = env.invoke_viijii;
 var legalimport$__wasi_fd_seek = env.fd_seek;
 var legalimport$__invoke_i64_i8__i8__i32__i32 = env.invoke_jiiii;
 var global$0 = 5315056;
 var global$1 = 72172;
 var global$2 = 0;
 var i64toi32_i32$HIGH_BITS = 0;
 // EMSCRIPTEN_START_FUNCS
;
 function __wasm_call_ctors() {
  __emscripten_environ_constructor();
  std____2__ios_base__Init__Init_28_29();
  EmscriptenBindingInitializer_my_module__EmscriptenBindingInitializer_my_module_28_29();
  EmscriptenBindingInitializer_my_module_maxiGrains__EmscriptenBindingInitializer_my_module_maxiGrains_28_29();
  EmscriptenBindingInitializer_my_module_maxibits__EmscriptenBindingInitializer_my_module_maxibits_28_29();
  EmscriptenBindingInitializer_maxiTrigger__EmscriptenBindingInitializer_maxiTrigger_28_29();
  EmscriptenBindingInitializer_maxiCounter__EmscriptenBindingInitializer_maxiCounter_28_29();
  EmscriptenBindingInitializer_maxiIndex__EmscriptenBindingInitializer_maxiIndex_28_29();
  EmscriptenBindingInitializer_maxiRatioSeq__EmscriptenBindingInitializer_maxiRatioSeq_28_29();
  EmscriptenBindingInitializer_maxiVerb__EmscriptenBindingInitializer_maxiVerb_28_29();
  FUNCTION_TABLE[2115](71672) | 0;
 }
 
 function maxiOsc__maxiOsc_28_29($0) {
  HEAP32[$0 + 8 >> 2] = 0;
  HEAP32[$0 + 12 >> 2] = 0;
 }
 
 function maxiOsc__noise_28_29($0) {
  $0 = $0 | 0;
  var $1 = Math_fround(0), $2 = 0.0;
  $1 = Math_fround(Math_fround(rand() | 0) * Math_fround(4.656612873077393e-10));
  $2 = +Math_fround(Math_fround($1 + $1) + Math_fround(-1.0));
  HEAPF64[$0 + 32 >> 3] = $2;
  return +$2;
 }
 
 function maxiOsc__phaseReset_28double_29($0, $1) {
  $0 = $0 | 0;
  $1 = +$1;
  HEAPF64[$0 + 8 >> 3] = $1;
 }
 
 function maxiOsc__sinewave_28double_29($0, $1) {
  $0 = $0 | 0;
  $1 = +$1;
  var $2 = 0.0, $3 = 0.0;
  $2 = HEAPF64[$0 + 8 >> 3];
  $3 = sin($2 * 6.283185307179586);
  HEAPF64[$0 + 32 >> 3] = $3;
  if (!!($2 >= 1.0)) {
   HEAPF64[$0 + 8 >> 3] = $2 + -1.0
  }
  HEAPF64[$0 + 8 >> 3] = HEAPF64[$0 + 8 >> 3] + 1.0 / (+HEAP32[12865] / $1);
  return +$3;
 }
 
 function maxiOsc__sinebuf4_28double_29($0, $1) {
  $0 = $0 | 0;
  $1 = +$1;
  var $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0;
  $1 = HEAPF64[$0 + 8 >> 3] + 512.0 / (+HEAP32[12865] / $1);
  $1 = $1 >= 511.0 ? $1 + -512.0 : $1;
  HEAPF64[$0 + 8 >> 3] = $1;
  $6 = $0;
  if (Math_abs($1) < 2147483648.0) {
   $0 = ~~$1
  } else {
   $0 = -2147483648
  }
  $0 = $0 << 3;
  $3 = HEAPF64[$0 + 51472 >> 3];
  $4 = $1 - Math_floor($1);
  $2 = HEAPF64[$0 + 51480 >> 3];
  $1 = HEAPF64[($1 == 0.0 ? 55568 : $0 + 51464 | 0) >> 3];
  $5 = HEAPF64[$0 + 51488 >> 3];
  $1 = $3 + $4 * (($2 - $1) * .5 + $4 * ($1 + $3 * -2.5 + ($2 + $2) - $5 * .5 + $4 * (($3 - $2) * 1.5 + ($5 - $1) * .5)));
  HEAPF64[$6 + 32 >> 3] = $1;
  return +$1;
 }
 
 function maxiOsc__sinebuf_28double_29($0, $1) {
  $0 = $0 | 0;
  $1 = +$1;
  var $2 = 0.0, $3 = 0.0, $4 = 0;
  $1 = HEAPF64[$0 + 8 >> 3] + 512.0 / (+HEAP32[12865] / (+HEAPF32[12864] * $1));
  $1 = $1 >= 511.0 ? $1 + -512.0 : $1;
  HEAPF64[$0 + 8 >> 3] = $1;
  $2 = $1 - Math_floor($1);
  $3 = 1.0 - $2;
  $4 = $0;
  if (Math_abs($1) < 2147483648.0) {
   $0 = ~~$1
  } else {
   $0 = -2147483648
  }
  $0 = $0 << 3;
  $1 = HEAPF64[$0 + 51488 >> 3] * $2 + HEAPF64[$0 + 51480 >> 3] * $3;
  HEAPF64[$4 + 32 >> 3] = $1;
  return +$1;
 }
 
 function maxiOsc__coswave_28double_29($0, $1) {
  $0 = $0 | 0;
  $1 = +$1;
  var $2 = 0.0, $3 = 0.0;
  $2 = HEAPF64[$0 + 8 >> 3];
  $3 = cos($2 * 6.283185307179586);
  HEAPF64[$0 + 32 >> 3] = $3;
  if (!!($2 >= 1.0)) {
   HEAPF64[$0 + 8 >> 3] = $2 + -1.0
  }
  HEAPF64[$0 + 8 >> 3] = HEAPF64[$0 + 8 >> 3] + 1.0 / (+HEAP32[12865] / $1);
  return +$3;
 }
 
 function maxiOsc__phasor_28double_29($0, $1) {
  $0 = $0 | 0;
  $1 = +$1;
  var $2 = 0, $3 = 0, $4 = 0.0;
  $2 = HEAP32[$0 + 12 >> 2];
  $3 = HEAP32[$0 + 8 >> 2];
  HEAP32[$0 + 32 >> 2] = $3;
  HEAP32[$0 + 36 >> 2] = $2;
  wasm2js_scratch_store_i32(0, $3 | 0);
  wasm2js_scratch_store_i32(1, $2 | 0);
  $4 = +wasm2js_scratch_load_f64();
  if (!!($4 >= 1.0)) {
   HEAPF64[$0 + 8 >> 3] = $4 + -1.0
  }
  HEAPF64[$0 + 8 >> 3] = HEAPF64[$0 + 8 >> 3] + 1.0 / (+HEAP32[12865] / $1);
  return +HEAPF64[$0 + 32 >> 3];
 }
 
 function maxiOsc__square_28double_29($0, $1) {
  $0 = $0 | 0;
  $1 = +$1;
  var $2 = 0.0;
  $2 = HEAPF64[$0 + 8 >> 3];
  if (!!($2 < .5)) {
   HEAP32[$0 + 32 >> 2] = 0;
   HEAP32[$0 + 36 >> 2] = -1074790400;
  }
  if (!!($2 > .5)) {
   HEAP32[$0 + 32 >> 2] = 0;
   HEAP32[$0 + 36 >> 2] = 1072693248;
  }
  if (!!($2 >= 1.0)) {
   HEAPF64[$0 + 8 >> 3] = $2 + -1.0
  }
  HEAPF64[$0 + 8 >> 3] = HEAPF64[$0 + 8 >> 3] + 1.0 / (+HEAP32[12865] / $1);
  return +HEAPF64[$0 + 32 >> 3];
 }
 
 function maxiOsc__pulse_28double_2c_20double_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = +$2;
  var $3 = 0.0;
  $2 = Math_min(Math_max($2, 0.0), 1.0);
  $3 = HEAPF64[$0 + 8 >> 3];
  if (!!($3 >= 1.0)) {
   HEAPF64[$0 + 8 >> 3] = $3 + -1.0
  }
  $1 = HEAPF64[$0 + 8 >> 3] + 1.0 / (+HEAP32[12865] / $1);
  HEAPF64[$0 + 8 >> 3] = $1;
  if (!!($1 < $2)) {
   HEAP32[$0 + 32 >> 2] = 0;
   HEAP32[$0 + 36 >> 2] = -1074790400;
  }
  if (!!($1 > $2)) {
   HEAP32[$0 + 32 >> 2] = 0;
   HEAP32[$0 + 36 >> 2] = 1072693248;
  }
  return +HEAPF64[$0 + 32 >> 3];
 }
 
 function maxiOsc__impulse_28double_29($0, $1) {
  $0 = $0 | 0;
  $1 = +$1;
  var $2 = 0.0;
  $2 = HEAPF64[$0 + 8 >> 3];
  if (!!($2 >= 1.0)) {
   HEAPF64[$0 + 8 >> 3] = $2 + -1.0
  }
  $2 = HEAPF64[$0 + 8 >> 3];
  $1 = 1.0 / (+HEAP32[12865] / $1);
  HEAPF64[$0 + 8 >> 3] = $2 + $1;
  return +($2 < $1 ? 1.0 : 0.0);
 }
 
 function maxiOsc__phasor_28double_2c_20double_2c_20double_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = +$2;
  $3 = +$3;
  var $4 = 0, $5 = 0;
  $4 = HEAP32[$0 + 12 >> 2];
  $5 = HEAP32[$0 + 8 >> 2];
  HEAP32[$0 + 32 >> 2] = $5;
  HEAP32[$0 + 36 >> 2] = $4;
  wasm2js_scratch_store_i32(0, $5 | 0);
  wasm2js_scratch_store_i32(1, $4 | 0);
  if (!!(+wasm2js_scratch_load_f64() < $2)) {
   HEAPF64[$0 + 8 >> 3] = $2
  }
  if (!!(HEAPF64[$0 + 8 >> 3] >= $3)) {
   HEAPF64[$0 + 8 >> 3] = $2
  }
  HEAPF64[$0 + 8 >> 3] = HEAPF64[$0 + 8 >> 3] + ($3 - $2) / (+HEAP32[12865] / $1);
  return +HEAPF64[$0 + 32 >> 3];
 }
 
 function maxiOsc__saw_28double_29($0, $1) {
  $0 = $0 | 0;
  $1 = +$1;
  var $2 = 0, $3 = 0, $4 = 0.0;
  $2 = HEAP32[$0 + 12 >> 2];
  $3 = HEAP32[$0 + 8 >> 2];
  HEAP32[$0 + 32 >> 2] = $3;
  HEAP32[$0 + 36 >> 2] = $2;
  wasm2js_scratch_store_i32(0, $3 | 0);
  wasm2js_scratch_store_i32(1, $2 | 0);
  $4 = +wasm2js_scratch_load_f64();
  if (!!($4 >= 1.0)) {
   HEAPF64[$0 + 8 >> 3] = $4 + -2.0
  }
  $1 = 1.0 / (+HEAP32[12865] / $1);
  HEAPF64[$0 + 8 >> 3] = HEAPF64[$0 + 8 >> 3] + ($1 + $1);
  return +HEAPF64[$0 + 32 >> 3];
 }
 
 function maxiOsc__sawn_28double_29($0, $1) {
  $0 = $0 | 0;
  $1 = +$1;
  var $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0;
  $2 = HEAPF64[$0 + 8 >> 3];
  if (!!($2 >= .5)) {
   HEAPF64[$0 + 8 >> 3] = $2 + -1.0
  }
  $2 = HEAPF64[$0 + 8 >> 3] + 1.0 / (+HEAP32[12865] / $1);
  HEAPF64[$0 + 8 >> 3] = $2;
  $1 = Math_min(Math_max(8820.22 / $1 * $2, -.5), .5) * 1.0e3 + 500.0;
  $3 = $1 - Math_floor($1);
  $4 = 1.0 - $3;
  $5 = $0;
  if (Math_abs($1) < 2147483648.0) {
   $0 = ~~$1
  } else {
   $0 = -2147483648
  }
  $0 = $0 << 3;
  $1 = HEAPF64[$0 + 55592 >> 3] * $3 + HEAPF64[$0 + 55584 >> 3] * $4 - $2;
  HEAPF64[$5 + 32 >> 3] = $1;
  return +$1;
 }
 
 function maxiOsc__triangle_28double_29($0, $1) {
  $0 = $0 | 0;
  $1 = +$1;
  var $2 = 0.0;
  $2 = HEAPF64[$0 + 8 >> 3];
  if (!!($2 >= 1.0)) {
   HEAPF64[$0 + 8 >> 3] = $2 + -1.0
  }
  $1 = HEAPF64[$0 + 8 >> 3] + 1.0 / (+HEAP32[12865] / $1);
  HEAPF64[$0 + 8 >> 3] = $1;
  $1 = (($1 <= .5 ? $1 : 1.0 - $1) + -.25) * 4.0;
  HEAPF64[$0 + 32 >> 3] = $1;
  return +$1;
 }
 
 function maxiEnvelope__line_28int_2c_20std____2__vector_double_2c_20std____2__allocator_double__20___29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0;
  if (HEAP32[$0 + 40 >> 2] == 1) {
   HEAPF64[$0 >> 3] = 4.0 / (HEAPF64[std____2__vector_double_2c_20std____2__allocator_double__20___operator_5b_5d_28unsigned_20long_29($2, HEAP32[$0 + 44 >> 2] + 1 | 0) >> 3] * .0044);
   $5 = std____2__vector_double_2c_20std____2__allocator_double__20___operator_5b_5d_28unsigned_20long_29($2, HEAP32[$0 + 44 >> 2] + 2 | 0);
   $7 = HEAP32[$5 + 4 >> 2];
   HEAP32[$0 + 32 >> 2] = HEAP32[$5 >> 2];
   HEAP32[$0 + 36 >> 2] = $7;
   $3 = HEAPF64[std____2__vector_double_2c_20std____2__allocator_double__20___operator_5b_5d_28unsigned_20long_29($2, HEAP32[$0 + 44 >> 2]) >> 3];
   HEAPF64[$0 + 24 >> 3] = $3;
   $4 = HEAPF64[$0 + 48 >> 3];
   $6 = $3 - $4;
   label$2 : {
    if (!($6 > 1.0e-07 ^ 1 | HEAP32[$0 + 44 >> 2] >= ($1 | 0))) {
     HEAPF64[$0 + 48 >> 3] = $4 + ($3 - HEAPF64[$0 + 16 >> 3]) / (+HEAP32[12865] / HEAPF64[$0 >> 3]);
     break label$2;
    }
    if (!($6 < -1.0e-07 ^ 1 | HEAP32[$0 + 44 >> 2] >= ($1 | 0))) {
     HEAPF64[$0 + 48 >> 3] = $4 + ($3 - HEAPF64[$0 + 16 >> 3]) / (+HEAP32[12865] / HEAPF64[$0 >> 3]);
     break label$2;
    }
    $2 = HEAP32[$0 + 44 >> 2];
    if (($2 | 0) >= ($1 | 0)) {
     HEAP32[$0 + 44 >> 2] = $1 + -2;
     break label$2;
    }
    HEAP32[$0 + 44 >> 2] = $2 + 2;
    $1 = HEAP32[$0 + 28 >> 2];
    HEAP32[$0 + 16 >> 2] = HEAP32[$0 + 24 >> 2];
    HEAP32[$0 + 20 >> 2] = $1;
   }
   $1 = HEAP32[$0 + 52 >> 2];
   HEAP32[$0 + 8 >> 2] = HEAP32[$0 + 48 >> 2];
   HEAP32[$0 + 12 >> 2] = $1;
   return +HEAPF64[$0 + 8 >> 3];
  }
  HEAP32[$0 + 8 >> 2] = 0;
  HEAP32[$0 + 12 >> 2] = 0;
  return +HEAPF64[$0 + 8 >> 3];
 }
 
 function std____2__vector_double_2c_20std____2__allocator_double__20___operator_5b_5d_28unsigned_20long_29($0, $1) {
  return HEAP32[$0 >> 2] + ($1 << 3) | 0;
 }
 
 function maxiEnvelope__trigger_28int_2c_20double_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = +$2;
  HEAPF64[$0 + 48 >> 3] = $2;
  HEAP32[$0 + 44 >> 2] = $1;
  HEAP32[$0 + 40 >> 2] = 1;
 }
 
 function maxiDelayline__maxiDelayline_28_29($0) {
  memset($0 + 40 | 0, 0, 705600);
 }
 
 function maxiDelayline__dl_28double_2c_20int_2c_20double_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = $2 | 0;
  $3 = +$3;
  var $4 = 0, $5 = 0;
  if (HEAP32[$0 + 8 >> 2] >= ($2 | 0)) {
   HEAP32[$0 + 8 >> 2] = 0
  }
  $4 = HEAP32[$0 + 8 >> 2];
  $2 = (($4 << 3) + $0 | 0) + 40 | 0;
  $5 = HEAP32[$2 + 4 >> 2];
  HEAP32[$0 + 32 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$0 + 36 >> 2] = $5;
  HEAPF64[$2 >> 3] = $1 * $3 * .5 + HEAPF64[$2 >> 3] * $3;
  HEAP32[$0 + 8 >> 2] = $4 + 1;
  return +HEAPF64[$0 + 32 >> 3];
 }
 
 function maxiDelayline__dl_28double_2c_20int_2c_20double_2c_20int_29($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = $2 | 0;
  $3 = +$3;
  $4 = $4 | 0;
  var $5 = 0;
  if (HEAP32[$0 + 8 >> 2] >= ($2 | 0)) {
   HEAP32[$0 + 8 >> 2] = 0
  }
  $5 = $0 + 40 | 0;
  $2 = $5 + ((($4 | 0) < ($2 | 0) ? $4 : 0) << 3) | 0;
  $4 = HEAP32[$2 + 4 >> 2];
  HEAP32[$0 + 32 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$0 + 36 >> 2] = $4;
  $2 = HEAP32[$0 + 8 >> 2];
  $4 = ($2 << 3) + $5 | 0;
  HEAPF64[$4 >> 3] = HEAPF64[$4 >> 3] * $3 + $1 * $3 * +HEAPF32[12864];
  HEAP32[$0 + 8 >> 2] = $2 + 1;
  return +HEAPF64[$0 + 32 >> 3];
 }
 
 function maxiFilter__lopass_28double_2c_20double_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = +$2;
  var $3 = 0.0;
  $3 = HEAPF64[$0 + 104 >> 3];
  $1 = $3 + ($1 - $3) * $2;
  HEAPF64[$0 + 104 >> 3] = $1;
  HEAPF64[$0 + 16 >> 3] = $1;
  return +$1;
 }
 
 function maxiFilter__hipass_28double_2c_20double_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = +$2;
  var $3 = 0.0;
  $3 = HEAPF64[$0 + 104 >> 3];
  $1 = $1 - ($3 + ($1 - $3) * $2);
  HEAPF64[$0 + 104 >> 3] = $1;
  HEAPF64[$0 + 16 >> 3] = $1;
  return +$1;
 }
 
 function maxiFilter__lores_28double_2c_20double_2c_20double_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = +$2;
  $3 = +$3;
  var $4 = 0.0, $5 = 0.0;
  $2 = Math_max($2, 10.0);
  HEAPF64[$0 + 224 >> 3] = $2;
  $4 = $2;
  $2 = +HEAP32[12865];
  if (!!($4 > $2)) {
   HEAPF64[$0 + 224 >> 3] = $2
  }
  $2 = cos(HEAPF64[$0 + 224 >> 3] * 6.283185307179586 / $2);
  HEAPF64[$0 + 208 >> 3] = $2;
  $5 = 2.0 - ($2 + $2);
  HEAPF64[$0 + 216 >> 3] = $5;
  $4 = HEAPF64[$0 + 200 >> 3];
  $1 = HEAPF64[$0 + 192 >> 3] + ($1 - $4) * $5;
  $5 = $4 + $1;
  HEAPF64[$0 + 200 >> 3] = $5;
  HEAPF64[$0 + 16 >> 3] = $5;
  $4 = $1;
  $1 = $2 + -1.0;
  $2 = Math_max($3, 1.0) * $1;
  HEAPF64[$0 + 192 >> 3] = $4 * (($2 + Math_sqrt(-pow($1, 3.0)) * 1.4142135623730951) / $2);
  return +$5;
 }
 
 function maxiFilter__hires_28double_2c_20double_2c_20double_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = +$2;
  $3 = +$3;
  var $4 = 0.0, $5 = 0.0;
  $2 = Math_max($2, 10.0);
  HEAPF64[$0 + 224 >> 3] = $2;
  $4 = $2;
  $2 = +HEAP32[12865];
  if (!!($4 > $2)) {
   HEAPF64[$0 + 224 >> 3] = $2
  }
  $2 = cos(HEAPF64[$0 + 224 >> 3] * 6.283185307179586 / $2);
  HEAPF64[$0 + 208 >> 3] = $2;
  $4 = 2.0 - ($2 + $2);
  HEAPF64[$0 + 216 >> 3] = $4;
  $5 = HEAPF64[$0 + 200 >> 3];
  $4 = HEAPF64[$0 + 192 >> 3] + ($1 - $5) * $4;
  $5 = $5 + $4;
  HEAPF64[$0 + 200 >> 3] = $5;
  $1 = $1 - $5;
  HEAPF64[$0 + 16 >> 3] = $1;
  $2 = $2 + -1.0;
  $3 = Math_max($3, 1.0) * $2;
  HEAPF64[$0 + 192 >> 3] = $4 * (($3 + Math_sqrt(-pow($2, 3.0)) * 1.4142135623730951) / $3);
  return +$1;
 }
 
 function maxiFilter__bandpass_28double_2c_20double_2c_20double_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = +$2;
  $3 = +$3;
  var $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0;
  HEAPF64[$0 + 224 >> 3] = $2;
  $6 = +HEAP32[12865];
  $7 = $6 * .5;
  if (!!($7 < $2)) {
   HEAPF64[$0 + 224 >> 3] = $7
  }
  $2 = cos(HEAPF64[$0 + 224 >> 3] * 6.283185307179586 / $6);
  HEAPF64[$0 + 208 >> 3] = $2;
  $8 = $0 + 32 | 0;
  $3 = $3 >= 1.0 ? .999999 : $3;
  HEAPF64[$8 >> 3] = $3 * ($2 + $2);
  HEAPF64[$0 + 24 >> 3] = (1.0 - $3) * Math_sqrt($3 * ($3 + $2 * $2 * -4.0 + 2.0) + 1.0);
  $2 = std____2___MetaBase__28std__is_arithmetic_double___value_29_20___20_28std__is_arithmetic_int___value_29____EnableIfImpl_std____2____promote_double_2c_20int_2c_20void__20___type_20pow_double_2c_20int__28double_2c_20int_29(-$3, 2);
  HEAPF64[$0 + 40 >> 3] = $2;
  $5 = $0 + 120 | 0;
  $3 = HEAPF64[$5 >> 3];
  $4 = $0 + 112 | 0;
  $9 = HEAP32[$4 + 4 >> 2];
  HEAP32[$5 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$5 + 4 >> 2] = $9;
  $1 = HEAPF64[$0 + 24 >> 3] * $1 + HEAPF64[$8 >> 3] * HEAPF64[$4 >> 3] + $2 * $3;
  HEAPF64[$4 >> 3] = $1;
  HEAPF64[$0 + 16 >> 3] = $1;
  return +$1;
 }
 
 function std____2___MetaBase__28std__is_arithmetic_double___value_29_20___20_28std__is_arithmetic_int___value_29____EnableIfImpl_std____2____promote_double_2c_20int_2c_20void__20___type_20pow_double_2c_20int__28double_2c_20int_29($0, $1) {
  return pow($0, +($1 | 0));
 }
 
 function maxiMix__stereo_28double_2c_20std____2__vector_double_2c_20std____2__allocator_double__20___2c_20double_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = $2 | 0;
  $3 = +$3;
  $0 = std____2__vector_double_2c_20std____2__allocator_double__20___operator_5b_5d_28unsigned_20long_29($2, 0);
  $3 = Math_max(Math_min($3, 1.0), 0.0);
  HEAPF64[$0 >> 3] = Math_sqrt(1.0 - $3) * $1;
  HEAPF64[std____2__vector_double_2c_20std____2__allocator_double__20___operator_5b_5d_28unsigned_20long_29($2, 1) >> 3] = Math_sqrt($3) * $1;
 }
 
 function maxiMix__quad_28double_2c_20std____2__vector_double_2c_20std____2__allocator_double__20___2c_20double_2c_20double_29($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = $2 | 0;
  $3 = +$3;
  $4 = +$4;
  var $5 = 0.0, $6 = 0.0;
  $0 = std____2__vector_double_2c_20std____2__allocator_double__20___operator_5b_5d_28unsigned_20long_29($2, 0);
  $3 = Math_max(Math_min($3, 1.0), 0.0);
  $5 = 1.0 - $3;
  $4 = Math_max(Math_min($4, 1.0), 0.0);
  HEAPF64[$0 >> 3] = Math_sqrt($5 * $4) * $1;
  $0 = std____2__vector_double_2c_20std____2__allocator_double__20___operator_5b_5d_28unsigned_20long_29($2, 1);
  $6 = $5;
  $5 = 1.0 - $4;
  HEAPF64[$0 >> 3] = Math_sqrt($6 * $5) * $1;
  HEAPF64[std____2__vector_double_2c_20std____2__allocator_double__20___operator_5b_5d_28unsigned_20long_29($2, 2) >> 3] = Math_sqrt($3 * $4) * $1;
  HEAPF64[std____2__vector_double_2c_20std____2__allocator_double__20___operator_5b_5d_28unsigned_20long_29($2, 3) >> 3] = Math_sqrt($3 * $5) * $1;
 }
 
 function maxiMix__ambisonic_28double_2c_20std____2__vector_double_2c_20std____2__allocator_double__20___2c_20double_2c_20double_2c_20double_29($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = $2 | 0;
  $3 = +$3;
  $4 = +$4;
  $5 = +$5;
  var $6 = 0.0, $7 = 0.0, $8 = 0.0;
  $0 = std____2__vector_double_2c_20std____2__allocator_double__20___operator_5b_5d_28unsigned_20long_29($2, 0);
  $3 = Math_max(Math_min($3, 1.0), 0.0);
  $6 = 1.0 - $3;
  $4 = $5 < 0.0 ? 0.0 : $5 > 1.0 ? 1.0 : Math_max(Math_min($4, 1.0), 0.0);
  $8 = Math_sqrt($6 * $4);
  HEAPF64[$0 >> 3] = ($8 - $5) * $1;
  $0 = std____2__vector_double_2c_20std____2__allocator_double__20___operator_5b_5d_28unsigned_20long_29($2, 1);
  $7 = $6;
  $6 = 1.0 - $4;
  $7 = Math_sqrt($7 * $6);
  HEAPF64[$0 >> 3] = ($7 - $5) * $1;
  $0 = std____2__vector_double_2c_20std____2__allocator_double__20___operator_5b_5d_28unsigned_20long_29($2, 2);
  $4 = $3 * $4;
  HEAPF64[$0 >> 3] = (Math_sqrt($4) - $5) * $1;
  $0 = std____2__vector_double_2c_20std____2__allocator_double__20___operator_5b_5d_28unsigned_20long_29($2, 3);
  $3 = $3 * $6;
  HEAPF64[$0 >> 3] = (Math_sqrt($3) - $5) * $1;
  HEAPF64[std____2__vector_double_2c_20std____2__allocator_double__20___operator_5b_5d_28unsigned_20long_29($2, 4) >> 3] = $8 * $5 * $1;
  HEAPF64[std____2__vector_double_2c_20std____2__allocator_double__20___operator_5b_5d_28unsigned_20long_29($2, 5) >> 3] = $7 * $5 * $1;
  HEAPF64[std____2__vector_double_2c_20std____2__allocator_double__20___operator_5b_5d_28unsigned_20long_29($2, 6) >> 3] = Math_sqrt($4 * $5) * $1;
  HEAPF64[std____2__vector_double_2c_20std____2__allocator_double__20___operator_5b_5d_28unsigned_20long_29($2, 7) >> 3] = Math_sqrt($3 * $5) * $1;
 }
 
 function maxiSample__load_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20int_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = $0;
  if (($1 | 0) != ($0 | 0)) {
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___assign_28char_20const__2c_20unsigned_20long_29($3, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_pointer_28_29_20const($1), std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($1))
  }
  HEAP32[$0 + 20 >> 2] = $2;
  return maxiSample__read_28_29($0) | 0;
 }
 
 function maxiSample__read_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  $5 = global$0 - 224 | 0;
  $4 = $5;
  if ($4 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  $4 = std____2__basic_ifstream_char_2c_20std____2__char_traits_char__20___basic_ifstream_28char_20const__2c_20unsigned_20int_29($5 + 32 | 0, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_pointer_28_29_20const($0));
  HEAP32[16874] = 0;
  $1 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1, 68728, 1051) | 0;
  $2 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      label$6 : {
       label$7 : {
        label$8 : {
         label$9 : {
          if (($2 | 0) == 1) {
           break label$9
          }
          HEAP32[16874] = 0;
          $1 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(2, $1 | 0, $0 | 0) | 0;
          $2 = HEAP32[16874];
          HEAP32[16874] = 0;
          if (($2 | 0) == 1) {
           break label$9
          }
          HEAP32[16874] = 0;
          __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(3, $1 | 0, 4) | 0;
          $1 = HEAP32[16874];
          HEAP32[16874] = 0;
          if (($1 | 0) == 1) {
           break label$9
          }
          HEAP32[16874] = 0;
          $8 = std____2__basic_ifstream_char_2c_20std____2__char_traits_char__20___is_open_28_29_20const($4);
          $1 = HEAP32[16874];
          HEAP32[16874] = 0;
          if (($1 | 0) == 1) {
           break label$9
          }
          if (!$8) {
           break label$6
          }
          HEAP32[16874] = 0;
          legalfunc$__invoke___22class_std____2__basic_istream_22____22class_std____2__basic_istream_22__i64_i32($4, 4, 0);
          $1 = HEAP32[16874];
          HEAP32[16874] = 0;
          if (($1 | 0) == 1) {
           break label$4
          }
          HEAP32[16874] = 0;
          __invoke___22class_std____2__basic_istream_22____22class_std____2__basic_istream_22__i8__i32(7, $4 | 0, $0 + 12 | 0, 4) | 0;
          $1 = HEAP32[16874];
          HEAP32[16874] = 0;
          if (($1 | 0) == 1) {
           break label$4
          }
          HEAP32[16874] = 0;
          legalfunc$__invoke___22class_std____2__basic_istream_22____22class_std____2__basic_istream_22__i64_i32($4, 16, 0);
          $1 = HEAP32[16874];
          HEAP32[16874] = 0;
          if (($1 | 0) == 1) {
           break label$4
          }
          HEAP32[16874] = 0;
          $1 = $0 + 16 | 0;
          __invoke___22class_std____2__basic_istream_22____22class_std____2__basic_istream_22__i8__i32(7, $4 | 0, $1 | 0, 4) | 0;
          $2 = HEAP32[16874];
          HEAP32[16874] = 0;
          if (($2 | 0) == 1) {
           break label$4
          }
          HEAP32[16874] = 0;
          __invoke___22class_std____2__basic_istream_22____22class_std____2__basic_istream_22__i8__i32(7, $4 | 0, $0 + 24 | 0, 2) | 0;
          $2 = HEAP32[16874];
          HEAP32[16874] = 0;
          if (($2 | 0) == 1) {
           break label$4
          }
          HEAP32[16874] = 0;
          $7 = $0 + 96 | 0;
          __invoke___22class_std____2__basic_istream_22____22class_std____2__basic_istream_22__i8__i32(7, $4 | 0, $7 | 0, 2) | 0;
          $2 = HEAP32[16874];
          HEAP32[16874] = 0;
          if (($2 | 0) == 1) {
           break label$4
          }
          HEAP32[16874] = 0;
          __invoke___22class_std____2__basic_istream_22____22class_std____2__basic_istream_22__i8__i32(7, $4 | 0, $0 + 100 | 0, 4) | 0;
          $2 = HEAP32[16874];
          HEAP32[16874] = 0;
          if (($2 | 0) == 1) {
           break label$4
          }
          HEAP32[16874] = 0;
          __invoke___22class_std____2__basic_istream_22____22class_std____2__basic_istream_22__i8__i32(7, $4 | 0, $0 + 28 | 0, 4) | 0;
          $2 = HEAP32[16874];
          HEAP32[16874] = 0;
          if (($2 | 0) == 1) {
           break label$4
          }
          HEAP32[16874] = 0;
          __invoke___22class_std____2__basic_istream_22____22class_std____2__basic_istream_22__i8__i32(7, $4 | 0, $0 + 32 | 0, 2) | 0;
          $2 = HEAP32[16874];
          HEAP32[16874] = 0;
          if (($2 | 0) == 1) {
           break label$4
          }
          HEAP32[16874] = 0;
          __invoke___22class_std____2__basic_istream_22____22class_std____2__basic_istream_22__i8__i32(7, $4 | 0, $0 + 104 | 0, 2) | 0;
          $2 = HEAP32[16874];
          HEAP32[16874] = 0;
          if (($2 | 0) == 1) {
           break label$4
          }
          HEAP8[$5 + 24 | 0] = 0;
          HEAP32[$5 + 20 >> 2] = 0;
          $1 = HEAP32[$1 >> 2] + 20 | 0;
          $2 = 0;
          while (1) {
           $3 = HEAP32[HEAP32[$4 >> 2] + -12 >> 2];
           HEAP32[16874] = 0;
           $3 = std____2__ios_base__eof_28_29_20const($3 + ($5 + 32 | 0) | 0);
           $6 = HEAP32[16874];
           HEAP32[16874] = 0;
           if (($6 | 0) == 1) {
            break label$8
           }
           if (!$3) {
            HEAP32[16874] = 0;
            legalfunc$__invoke___22class_std____2__basic_istream_22____22class_std____2__basic_istream_22__i64_i32($4, $1, $1 >> 31);
            $3 = HEAP32[16874];
            HEAP32[16874] = 0;
            if (($3 | 0) == 1) {
             break label$8
            }
            HEAP32[16874] = 0;
            __invoke___22class_std____2__basic_istream_22____22class_std____2__basic_istream_22__i8__i32(7, $4 | 0, $5 + 20 | 0, 4) | 0;
            $3 = HEAP32[16874];
            HEAP32[16874] = 0;
            if (($3 | 0) == 1) {
             break label$8
            }
            HEAP32[16874] = 0;
            $3 = $1 + 4 | 0;
            legalfunc$__invoke___22class_std____2__basic_istream_22____22class_std____2__basic_istream_22__i64_i32($4, $3, $3 >> 31);
            $3 = HEAP32[16874];
            HEAP32[16874] = 0;
            if (($3 | 0) == 1) {
             break label$8
            }
            HEAP32[16874] = 0;
            __invoke___22class_std____2__basic_istream_22____22class_std____2__basic_istream_22__i8__i32(7, $4 | 0, $5 + 28 | 0, 4) | 0;
            $3 = HEAP32[16874];
            HEAP32[16874] = 0;
            if (($3 | 0) == 1) {
             break label$8
            }
            $6 = HEAP32[$5 + 28 >> 2];
            $3 = memcmp($5 + 20 | 0, 1061, 5);
            $1 = (($3 ? $6 : 0) + $1 | 0) + 8 | 0;
            $2 = !$3 | $2;
            if (!($2 & 1)) {
             continue
            }
           }
           break;
          };
          $2 = std____2__vector_short_2c_20std____2__allocator_short__20___vector_28_29($5 + 8 | 0);
          HEAP32[16874] = 0;
          __invoke_void___22class_std____2__vector_13_22__i32(9, $2 | 0, HEAP32[$5 + 28 >> 2] / 2 | 0);
          $3 = HEAP32[16874];
          HEAP32[16874] = 0;
          if (($3 | 0) == 1) {
           break label$3
          }
          HEAP32[16874] = 0;
          legalfunc$__invoke___22class_std____2__basic_istream_22____22class_std____2__basic_istream_22__i64_i32($4, $1, $1 >> 31);
          $1 = HEAP32[16874];
          HEAP32[16874] = 0;
          if (($1 | 0) == 1) {
           break label$3
          }
          $1 = HEAP32[$2 >> 2];
          HEAP32[16874] = 0;
          __invoke___22class_std____2__basic_istream_22____22class_std____2__basic_istream_22__i8__i32(7, $4 | 0, $1 | 0, HEAP32[$5 + 28 >> 2]) | 0;
          $1 = HEAP32[16874];
          HEAP32[16874] = 0;
          if (($1 | 0) == 1) {
           break label$3
          }
          HEAP32[16874] = 0;
          __invoke_void___22class_std____2__basic_ifstream_22_(10, $4 | 0);
          $1 = HEAP32[16874];
          HEAP32[16874] = 0;
          if (($1 | 0) == 1) {
           break label$3
          }
          label$12 : {
           if (HEAP16[$7 >> 1] < 2) {
            break label$12
           }
           $1 = HEAP32[$0 + 20 >> 2] << 1;
           if (($1 | 0) >= (HEAP32[$5 + 28 >> 2] + 6 | 0)) {
            break label$12
           }
           $3 = 0;
           while (1) {
            $6 = HEAPU16[std____2__vector_short_2c_20std____2__allocator_short__20___operator_5b_5d_28unsigned_20long_29($2, $1) >> 1];
            HEAP16[std____2__vector_short_2c_20std____2__allocator_short__20___operator_5b_5d_28unsigned_20long_29($2, $3) >> 1] = $6;
            $3 = $3 + 1 | 0;
            $1 = (HEAP16[$7 >> 1] << 1) + $1 | 0;
            if (($1 | 0) < (HEAP32[$5 + 28 >> 2] + 6 | 0)) {
             continue
            }
            break;
           };
          }
          $1 = 0;
          $6 = std____2__vector_short_2c_20std____2__allocator_short__20___size_28_29_20const($2);
          HEAP32[16874] = 0;
          $3 = $0 + 108 | 0;
          __invoke_void___22class_std____2__vector_13_22__i32(11, $3 | 0, $6 | 0);
          $6 = HEAP32[16874];
          HEAP32[16874] = 0;
          if (($6 | 0) == 1) {
           break label$3
          }
          if (std____2__vector_short_2c_20std____2__allocator_short__20___size_28_29_20const($2)) {
           while (1) {
            $6 = HEAP16[std____2__vector_short_2c_20std____2__allocator_short__20___operator_5b_5d_28unsigned_20long_29($2, $1) >> 1];
            HEAPF64[std____2__vector_double_2c_20std____2__allocator_double__20___operator_5b_5d_28unsigned_20long_29($3, $1) >> 3] = +($6 | 0) / 32767.0;
            $1 = $1 + 1 | 0;
            if ($1 >>> 0 < std____2__vector_short_2c_20std____2__allocator_short__20___size_28_29_20const($2) >>> 0) {
             continue
            }
            break;
           }
          }
          HEAPF64[$0 + 40 >> 3] = std____2__vector_double_2c_20std____2__allocator_double__20___size_28_29_20const($3) >>> 0;
          HEAP32[16874] = 0;
          $0 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1, 68728, 1066) | 0;
          $1 = HEAP32[16874];
          HEAP32[16874] = 0;
          if (($1 | 0) != 1) {
           break label$7
          }
          break label$3;
         }
         $0 = __cxa_find_matching_catch_2() | 0;
         getTempRet0() | 0;
         break label$2;
        }
        $0 = __cxa_find_matching_catch_2() | 0;
        getTempRet0() | 0;
        break label$2;
       }
       $1 = HEAP16[$7 >> 1];
       HEAP32[16874] = 0;
       $0 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(12, $0 | 0, $1 | 0) | 0;
       $1 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($1 | 0) == 1) {
        break label$3
       }
       HEAP32[16874] = 0;
       $0 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1, $0 | 0, 1071) | 0;
       $1 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($1 | 0) == 1) {
        break label$3
       }
       $1 = std____2__vector_double_2c_20std____2__allocator_double__20___size_28_29_20const($3);
       HEAP32[16874] = 0;
       $0 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(13, $0 | 0, $1 | 0) | 0;
       $1 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($1 | 0) == 1) {
        break label$3
       }
       HEAP32[16874] = 0;
       __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(3, $0 | 0, 4) | 0;
       $0 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($0 | 0) == 1) {
        break label$3
       }
       std____2__vector_short_2c_20std____2__allocator_short__20____vector_28_29($2);
       break label$5;
      }
      iprintf(1079, 0);
     }
     std____2__basic_ifstream_char_2c_20std____2__char_traits_char__20____basic_ifstream_28_29($4);
     $0 = $5 + 224 | 0;
     if ($0 >>> 0 < global$2 >>> 0) {
      __handle_stack_overflow()
     }
     global$0 = $0;
     return $8 | 0;
    }
    $0 = __cxa_find_matching_catch_2() | 0;
    getTempRet0() | 0;
    break label$2;
   }
   $0 = __cxa_find_matching_catch_2() | 0;
   getTempRet0() | 0;
   std____2__vector_short_2c_20std____2__allocator_short__20____vector_28_29($2);
  }
  std____2__basic_ifstream_char_2c_20std____2__char_traits_char__20____basic_ifstream_28_29($4);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2__basic_ifstream_char_2c_20std____2__char_traits_char__20___basic_ifstream_28char_20const__2c_20unsigned_20int_29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0;
  $4 = std____2__basic_ios_char_2c_20std____2__char_traits_char__20___basic_ios_28_29($0 + 108 | 0);
  HEAP32[$0 >> 2] = 1148;
  HEAP32[$4 >> 2] = 1168;
  HEAP32[16874] = 0;
  $2 = $0 + 8 | 0;
  __invoke___22class_std____2__basic_istream_22____22class_std____2__basic_istream_22__i8__i32(14, $0 | 0, 1180, $2 | 0) | 0;
  $3 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$1 : {
   label$3 : {
    label$4 : {
     if (($3 | 0) != 1) {
      HEAP32[$0 >> 2] = 1148;
      HEAP32[$4 >> 2] = 1168;
      HEAP32[16874] = 0;
      $2 = __invoke_i1___22class_std____2__basic_ifstream_22_(15, $2 | 0) | 0;
      $3 = HEAP32[16874];
      HEAP32[16874] = 0;
      if (($3 | 0) == 1) {
       break label$3
      }
      HEAP32[16874] = 0;
      $1 = __invoke___22class_std____2__basic_istream_22____22class_std____2__basic_istream_22__i8__i32(16, $2 | 0, $1 | 0, 12) | 0;
      $3 = HEAP32[16874];
      HEAP32[16874] = 0;
      if (($3 | 0) != 1) {
       if ($1) {
        break label$4
       }
       $1 = HEAP32[HEAP32[$0 >> 2] + -12 >> 2];
       HEAP32[16874] = 0;
       __invoke_void___22class_std____2__vector_13_22__i32(17, $0 + $1 | 0, 4);
       $1 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($1 | 0) != 1) {
        break label$4
       }
      }
      $0 = __cxa_find_matching_catch_2() | 0;
      getTempRet0() | 0;
      std____2__basic_filebuf_char_2c_20std____2__char_traits_char__20____basic_filebuf_28_29($2);
      break label$1;
     }
     $0 = __cxa_find_matching_catch_2() | 0;
     getTempRet0() | 0;
     break label$1;
    }
    return $0;
   }
   $0 = __cxa_find_matching_catch_2() | 0;
   getTempRet0() | 0;
  }
  std____2__basic_ios_char_2c_20std____2__char_traits_char__20____basic_ios_28_29($4);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29($0, $1, strlen($1)) | 0;
 }
 
 function std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29($0, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_pointer_28_29_20const($1), std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($1)) | 0;
 }
 
 function std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20_28__29_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___29_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return FUNCTION_TABLE[$1]($0) | 0;
 }
 
 function std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__endl_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___29($0) {
  $0 = $0 | 0;
  std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___put_28char_29($0, std____2__basic_ios_char_2c_20std____2__char_traits_char__20___widen_28char_29_20const(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0, 10));
  std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___flush_28_29($0);
  return $0 | 0;
 }
 
 function std____2__basic_ifstream_char_2c_20std____2__char_traits_char__20___is_open_28_29_20const($0) {
  $0 = $0 | 0;
  return HEAP32[($0 + 8 | 0) + 64 >> 2] != 0 | 0;
 }
 
 function std____2__basic_ios_char_2c_20std____2__char_traits_char__20___eof_28_29_20const($0) {
  $0 = $0 | 0;
  return std____2__ios_base__eof_28_29_20const($0) | 0;
 }
 
 function std____2__vector_short_2c_20std____2__allocator_short__20___vector_28_29($0) {
  std____2____vector_base_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20_____vector_base_28_29($0);
  return $0;
 }
 
 function std____2__vector_short_2c_20std____2__allocator_short__20___resize_28unsigned_20long_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = std____2__vector_short_2c_20std____2__allocator_short__20___size_28_29_20const($0);
  if ($2 >>> 0 < $1 >>> 0) {
   std____2__vector_short_2c_20std____2__allocator_short__20_____append_28unsigned_20long_29($0, $1 - $2 | 0);
   return;
  }
  if ($2 >>> 0 > $1 >>> 0) {
   $1 = HEAP32[$0 >> 2] + ($1 << 1) | 0;
   std____2__vector_short_2c_20std____2__allocator_short__20___size_28_29_20const($0);
   std____2____vector_base_short_2c_20std____2__allocator_short__20_____destruct_at_end_28short__29($0, $1);
   std____2____vector_base_short_2c_20std____2__allocator_short__20___capacity_28_29_20const($0);
   std____2__vector_short_2c_20std____2__allocator_short__20___size_28_29_20const($0);
  }
 }
 
 function std____2__basic_ifstream_char_2c_20std____2__char_traits_char__20___close_28_29($0) {
  $0 = $0 | 0;
  if (!std____2__basic_filebuf_char_2c_20std____2__char_traits_char__20___close_28_29($0 + 8 | 0)) {
   std____2__basic_ios_char_2c_20std____2__char_traits_char__20___setstate_28unsigned_20int_29(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0, 4)
  }
 }
 
 function std____2__vector_short_2c_20std____2__allocator_short__20___operator_5b_5d_28unsigned_20long_29($0, $1) {
  return HEAP32[$0 >> 2] + ($1 << 1) | 0;
 }
 
 function std____2__vector_short_2c_20std____2__allocator_short__20___size_28_29_20const($0) {
  return HEAP32[$0 + 4 >> 2] - HEAP32[$0 >> 2] >> 1;
 }
 
 function std____2__vector_double_2c_20std____2__allocator_double__20___resize_28unsigned_20long_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = std____2__vector_double_2c_20std____2__allocator_double__20___size_28_29_20const($0);
  if ($2 >>> 0 < $1 >>> 0) {
   std____2__vector_double_2c_20std____2__allocator_double__20_____append_28unsigned_20long_29($0, $1 - $2 | 0);
   return;
  }
  if ($2 >>> 0 > $1 >>> 0) {
   std____2__vector_double_2c_20std____2__allocator_double__20_____destruct_at_end_28double__29($0, HEAP32[$0 >> 2] + ($1 << 3) | 0)
  }
 }
 
 function std____2__vector_double_2c_20std____2__allocator_double__20___size_28_29_20const($0) {
  $0 = $0 | 0;
  return HEAP32[$0 + 4 >> 2] - HEAP32[$0 >> 2] >> 3;
 }
 
 function std____2__vector_short_2c_20std____2__allocator_short__20____vector_28_29($0) {
  var $1 = 0;
  HEAP32[16874] = 0;
  std____2__vector_short_2c_20std____2__allocator_short__20_____annotate_delete_28_29_20const($0);
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($1 | 0) != 1) {
   std____2____vector_base_short_2c_20std____2__allocator_short__20______vector_base_28_29($0);
   return;
  }
  $1 = __cxa_find_matching_catch_3(0) | 0;
  getTempRet0() | 0;
  std____2____vector_base_short_2c_20std____2__allocator_short__20______vector_base_28_29($0);
  __clang_call_terminate($1);
  abort();
 }
 
 function std____2__basic_ifstream_char_2c_20std____2__char_traits_char__20____basic_ifstream_28_29($0) {
  $0 = $0 | 0;
  $0 = std____2__basic_ifstream_char_2c_20std____2__char_traits_char__20____basic_ifstream_28_29_1($0);
  std____2__basic_ios_char_2c_20std____2__char_traits_char__20____basic_ios_28_29($0 + 108 | 0);
  return $0 | 0;
 }
 
 function std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___istreambuf_iterator_28std____2__basic_istream_char_2c_20std____2__char_traits_char__20___29($0, $1) {
  var $2 = 0;
  $2 = HEAP32[HEAP32[$1 >> 2] + -12 >> 2];
  HEAP32[16874] = 0;
  $1 = HEAP32[($1 + $2 | 0) + 24 >> 2];
  $2 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($2 | 0) != 1) {
   HEAP32[$0 >> 2] = $1;
   return $0;
  }
  $0 = __cxa_find_matching_catch_3(0) | 0;
  getTempRet0() | 0;
  __clang_call_terminate($0);
  abort();
 }
 
 function maxiSample__setSampleFromOggBlob_28std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20___2c_20int_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
  $3 = global$0 - 16 | 0;
  $4 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  HEAP32[$0 + 20 >> 2] = $2;
  $4 = stb_vorbis_decode_memory(HEAP32[$1 >> 2], std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20___size_28_29_20const($1), $3 + 12 | 0, $3 + 8 | 0);
  HEAP32[$3 + 4 >> 2] = $4;
  HEAP32[$3 >> 2] = HEAP32[$3 + 12 >> 2];
  iprintf(1024, $3);
  fputc(HEAP32[7598]);
  $1 = HEAP32[$3 + 12 >> 2];
  HEAP32[$0 + 100 >> 2] = 44100;
  HEAP16[$0 + 96 >> 1] = $1;
  $5 = $0 + 108 | 0;
  std____2__vector_double_2c_20std____2__allocator_double__20___resize_28unsigned_20long_29($5, $4);
  label$2 : {
   if (HEAP16[$0 + 96 >> 1] <= 1) {
    $1 = 0;
    if (($4 | 0) <= 0) {
     break label$2
    }
    while (1) {
     $0 = HEAP16[HEAP32[$3 + 8 >> 2] + ($1 << 1) >> 1];
     HEAPF64[std____2__vector_double_2c_20std____2__allocator_double__20___operator_5b_5d_28unsigned_20long_29($5, $1) >> 3] = +($0 | 0) / 32767.0;
     $1 = $1 + 1 | 0;
     if (($4 | 0) != ($1 | 0)) {
      continue
     }
     break;
    };
    break label$2;
   }
   $1 = HEAP32[$0 + 20 >> 2];
   $6 = $4 << 1;
   if (($1 | 0) >= ($6 | 0)) {
    break label$2
   }
   $2 = 0;
   while (1) {
    $7 = HEAP16[HEAP32[$3 + 8 >> 2] + ($1 << 1) >> 1];
    HEAPF64[std____2__vector_double_2c_20std____2__allocator_double__20___operator_5b_5d_28unsigned_20long_29($5, $2) >> 3] = +($7 | 0) / 32767.0;
    $2 = $2 + 1 | 0;
    $1 = HEAP16[$0 + 96 >> 1] + $1 | 0;
    if (($1 | 0) < ($6 | 0)) {
     continue
    }
    break;
   };
  }
  dlfree(HEAP32[$3 + 8 >> 2]);
  $0 = $3 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
  return ($4 | 0) > 0 | 0;
 }
 
 function std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20____vector_28_29($0) {
  var $1 = 0;
  HEAP32[16874] = 0;
  std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20_____annotate_delete_28_29_20const($0);
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($1 | 0) != 1) {
   std____2____vector_base_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20______vector_base_28_29($0);
   return $0;
  }
  $1 = __cxa_find_matching_catch_3(0) | 0;
  getTempRet0() | 0;
  std____2____vector_base_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20______vector_base_28_29($0);
  __clang_call_terminate($1);
  abort();
 }
 
 function std____2__basic_ios_char_2c_20std____2__char_traits_char__20___basic_ios_28_29($0) {
  std____2__ios_base__ios_base_28_29($0);
  HEAP32[$0 >> 2] = 34116;
  return $0;
 }
 
 function std____2__basic_istream_char_2c_20std____2__char_traits_char__20___basic_istream_28std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = HEAP32[$1 >> 2];
  HEAP32[$0 >> 2] = $3;
  HEAP32[HEAP32[$3 + -12 >> 2] + $0 >> 2] = HEAP32[$1 + 4 >> 2];
  HEAP32[$0 + 4 >> 2] = 0;
  std____2__basic_ios_char_2c_20std____2__char_traits_char__20___init_28std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___29(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0, $2);
  return $0 | 0;
 }
 
 function std____2__basic_filebuf_char_2c_20std____2__char_traits_char__20___basic_filebuf_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
  $1 = global$0 - 16 | 0;
  $3 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  $3 = std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___basic_streambuf_28_29($0);
  HEAP32[$0 + 52 >> 2] = 0;
  HEAP32[$0 + 56 >> 2] = 0;
  HEAP32[$0 + 40 >> 2] = 0;
  HEAP32[$0 + 32 >> 2] = 0;
  HEAP32[$0 + 36 >> 2] = 0;
  HEAP32[$0 >> 2] = 1300;
  HEAP32[$0 + 60 >> 2] = 0;
  HEAP32[$0 + 64 >> 2] = 0;
  HEAP32[$0 + 68 >> 2] = 0;
  HEAP32[$0 + 72 >> 2] = 0;
  HEAP32[$0 + 76 >> 2] = 0;
  HEAP32[$0 + 80 >> 2] = 0;
  HEAP32[$0 + 84 >> 2] = 0;
  HEAP32[$0 + 88 >> 2] = 0;
  HEAP8[$0 + 91 | 0] = 0;
  HEAP8[$0 + 92 | 0] = 0;
  HEAP8[$0 + 93 | 0] = 0;
  HEAP8[$0 + 94 | 0] = 0;
  HEAP8[$0 + 95 | 0] = 0;
  HEAP8[$0 + 96 | 0] = 0;
  HEAP8[$0 + 97 | 0] = 0;
  HEAP8[$0 + 98 | 0] = 0;
  std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___getloc_28_29_20const($1 + 8 | 0, $3);
  $2 = bool_20std____2__has_facet_std____2__codecvt_char_2c_20char_2c_20__mbstate_t__20__28std____2__locale_20const__29($1 + 8 | 0);
  std____2__locale___locale_28_29($1 + 8 | 0);
  label$2 : {
   label$3 : {
    label$4 : {
     if ($2) {
      std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___getloc_28_29_20const($1, $3);
      HEAP32[16874] = 0;
      $2 = __invoke_i1___22class_std____2__basic_ifstream_22_(21, $1 | 0) | 0;
      $4 = HEAP32[16874];
      HEAP32[16874] = 0;
      if (($4 | 0) == 1) {
       break label$4
      }
      HEAP32[$0 + 68 >> 2] = $2;
      std____2__locale___locale_28_29($1);
      HEAP8[$0 + 98 | 0] = std____2__codecvt_char_2c_20char_2c_20__mbstate_t___always_noconv_28_29_20const(HEAP32[$0 + 68 >> 2]);
     }
     $2 = HEAP32[HEAP32[$0 >> 2] + 12 >> 2];
     HEAP32[16874] = 0;
     __invoke___22class_std____2__basic_istream_22____22class_std____2__basic_istream_22__i8__i32($2 | 0, $0 | 0, 0, 4096) | 0;
     $2 = HEAP32[16874];
     HEAP32[16874] = 0;
     if (($2 | 0) != 1) {
      break label$3
     }
     $0 = __cxa_find_matching_catch_2() | 0;
     getTempRet0() | 0;
     break label$2;
    }
    $0 = __cxa_find_matching_catch_2() | 0;
    getTempRet0() | 0;
    std____2__locale___locale_28_29($1);
    break label$2;
   }
   $1 = $1 + 16 | 0;
   if ($1 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $1;
   return $0 | 0;
  }
  std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20____basic_streambuf_28_29($3);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2__basic_ios_char_2c_20std____2__char_traits_char__20___setstate_28unsigned_20int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  std____2__ios_base__clear_28unsigned_20int_29($0, HEAP32[$0 + 16 >> 2] | $1);
 }
 
 function std____2__basic_filebuf_char_2c_20std____2__char_traits_char__20____basic_filebuf_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  HEAP32[$0 >> 2] = 1300;
  HEAP32[16874] = 0;
  __invoke_i1___22class_std____2__basic_ifstream_22_(22, $0 | 0) | 0;
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$1 : {
   if (($1 | 0) == 1) {
    $1 = __cxa_find_matching_catch_3(0) | 0;
    getTempRet0() | 0;
    __cxa_begin_catch($1 | 0) | 0;
    HEAP32[16874] = 0;
    __invoke_void(23);
    $1 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($1 | 0) == 1) {
     break label$1
    }
   }
   label$3 : {
    if (!HEAPU8[$0 + 96 | 0]) {
     break label$3
    }
    $1 = HEAP32[$0 + 32 >> 2];
    if (!$1) {
     break label$3
    }
    dlfree($1);
   }
   label$4 : {
    if (!HEAPU8[$0 + 97 | 0]) {
     break label$4
    }
    $1 = HEAP32[$0 + 56 >> 2];
    if (!$1) {
     break label$4
    }
    dlfree($1);
   }
   std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20____basic_streambuf_28_29($0);
   return $0 | 0;
  }
  $1 = __cxa_find_matching_catch_3(0) | 0;
  getTempRet0() | 0;
  std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20____basic_streambuf_28_29($0);
  __clang_call_terminate($1);
  abort();
 }
 
 function std____2__basic_ios_char_2c_20std____2__char_traits_char__20___rdbuf_28_29_20const($0) {
  $0 = $0 | 0;
  return HEAP32[$0 + 24 >> 2];
 }
 
 function __clang_call_terminate($0) {
  __cxa_begin_catch($0 | 0) | 0;
  std__terminate_28_29();
  abort();
 }
 
 function std____2____vector_base_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20_____vector_base_28_29($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[16874] = 0;
  HEAP32[$1 + 12 >> 2] = 0;
  std____2____compressed_pair_unsigned_20char__2c_20std____2__allocator_unsigned_20char__20_____compressed_pair_std__nullptr_t_2c_20true__28std__nullptr_t___29($0 + 8 | 0, $1 + 12 | 0);
  $0 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($0 | 0) != 1) {
   $0 = $1 + 16 | 0;
   if ($0 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $0;
   return;
  }
  $0 = __cxa_find_matching_catch_3(0) | 0;
  getTempRet0() | 0;
  __clang_call_terminate($0);
  abort();
 }
 
 function bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___equal_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29_20const($0, $1) ^ 1;
 }
 
 function std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator__28_29_20const($0) {
  $0 = $0 | 0;
  return std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___sgetc_28_29(HEAP32[$0 >> 2]) << 24 >> 24;
 }
 
 function std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator___28_29($0) {
  $0 = $0 | 0;
  std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___sbumpc_28_29(HEAP32[$0 >> 2]);
  return $0 | 0;
 }
 
 function std____2____vector_base_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20______vector_base_28_29($0) {
  if (HEAP32[$0 >> 2]) {
   std____2____vector_base_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20_____destruct_at_end_28unsigned_20char__29($0, HEAP32[$0 >> 2]);
   std____2__allocator_traits_std____2__allocator_char__20___deallocate_28std____2__allocator_char___2c_20char__2c_20unsigned_20long_29(std____2____vector_base_double_2c_20std____2__allocator_double__20_____alloc_28_29($0), HEAP32[$0 >> 2], std____2____vector_base_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20___capacity_28_29_20const($0));
  }
 }
 
 function std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20___size_28_29_20const($0) {
  $0 = $0 | 0;
  return HEAP32[$0 + 4 >> 2] - HEAP32[$0 >> 2] | 0;
 }
 
 function std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20_____annotate_delete_28_29_20const($0) {
  $0 = $0 | 0;
  std____2____vector_base_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20___capacity_28_29_20const($0);
  std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20___size_28_29_20const($0);
  std____2____vector_base_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20___capacity_28_29_20const($0);
 }
 
 function std____2__basic_ifstream_char_2c_20std____2__char_traits_char__20____basic_ifstream_28_29_1($0) {
  var $1 = 0;
  $1 = HEAP32[294];
  HEAP32[$0 >> 2] = $1;
  HEAP32[HEAP32[$1 + -12 >> 2] + $0 >> 2] = HEAP32[297];
  std____2__basic_filebuf_char_2c_20std____2__char_traits_char__20____basic_filebuf_28_29($0 + 8 | 0);
  return $0;
 }
 
 function unsigned_20char__20std____2____to_raw_pointer_unsigned_20char__28unsigned_20char__29($0) {
  $0 = $0 | 0;
  return $0 | 0;
 }
 
 function std____2__vector_double_2c_20std____2__allocator_double__20_____append_28unsigned_20long_29($0, $1) {
  var $2 = 0, $3 = 0;
  $3 = global$0 - 32 | 0;
  $2 = $3;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  label$2 : {
   label$3 : {
    if (HEAP32[std____2____vector_base_double_2c_20std____2__allocator_double__20_____alloc_28_29($0) >> 2] - HEAP32[$0 + 4 >> 2] >> 3 >>> 0 >= $1 >>> 0) {
     std____2__vector_double_2c_20std____2__allocator_double__20_____construct_at_end_28unsigned_20long_29($0, $1);
     break label$3;
    }
    $2 = std____2____vector_base_double_2c_20std____2__allocator_double__20_____alloc_28_29($0);
    $2 = std____2____split_buffer_double_2c_20std____2__allocator_double_______split_buffer_28unsigned_20long_2c_20unsigned_20long_2c_20std____2__allocator_double___29($3 + 8 | 0, std____2__vector_double_2c_20std____2__allocator_double__20_____recommend_28unsigned_20long_29_20const($0, std____2__vector_double_2c_20std____2__allocator_double__20___size_28_29_20const($0) + $1 | 0), std____2__vector_double_2c_20std____2__allocator_double__20___size_28_29_20const($0), $2);
    HEAP32[16874] = 0;
    std____2____split_buffer_double_2c_20std____2__allocator_double_______construct_at_end_28unsigned_20long_29($2, $1);
    $1 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($1 | 0) == 1) {
     break label$2
    }
    HEAP32[16874] = 0;
    __invoke_void___22class_std____2__vector_13_22__i32(26, $0 | 0, $2 | 0);
    $0 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($0 | 0) == 1) {
     break label$2
    }
    std____2____split_buffer_double_2c_20std____2__allocator_double________split_buffer_28_29($2);
   }
   $0 = $3 + 32 | 0;
   if ($0 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $0;
   return;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2____split_buffer_double_2c_20std____2__allocator_double________split_buffer_28_29($2);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2__vector_double_2c_20std____2__allocator_double__20_____destruct_at_end_28double__29($0, $1) {
  var $2 = 0;
  $2 = std____2__vector_double_2c_20std____2__allocator_double__20___size_28_29_20const($0);
  std____2____vector_base_double_2c_20std____2__allocator_double__20_____destruct_at_end_28double__29($0, $1);
  std____2__vector_double_2c_20std____2__allocator_double__20_____annotate_shrink_28unsigned_20long_29_20const($0, $2);
 }
 
 function maxiSample__isReady_28_29($0) {
  $0 = $0 | 0;
  return (std____2__vector_double_2c_20std____2__allocator_double__20___size_28_29_20const($0 + 108 | 0) | 0) != 0 | 0;
 }
 
 function maxiSample__setSample_28std____2__vector_double_2c_20std____2__allocator_double__20___29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = $0 + 108 | 0;
  std____2__vector_double_2c_20std____2__allocator_double__20___operator__28std____2__vector_double_2c_20std____2__allocator_double__20__20const__29($2, $1);
  HEAP32[$0 + 100 >> 2] = 44100;
  HEAPF64[$0 + 40 >> 3] = std____2__vector_double_2c_20std____2__allocator_double__20___size_28_29_20const($2) + -1 >>> 0;
 }
 
 function std____2__vector_double_2c_20std____2__allocator_double__20___operator__28std____2__vector_double_2c_20std____2__allocator_double__20__20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  if (($0 | 0) != ($1 | 0)) {
   std____2__enable_if__28__is_forward_iterator_double____value_29_20___20_28is_constructible_double_2c_20std____2__iterator_traits_double____reference___value_29_2c_20void___type_20std____2__vector_double_2c_20std____2__allocator_double__20___assign_double___28double__2c_20double__29($0, HEAP32[$1 >> 2], HEAP32[$1 + 4 >> 2])
  }
  return $0 | 0;
 }
 
 function std____2____vector_base_double_2c_20std____2__allocator_double__20_____copy_assign_alloc_28std____2____vector_base_double_2c_20std____2__allocator_double__20__20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
 }
 
 function std____2__enable_if__28__is_forward_iterator_double____value_29_20___20_28is_constructible_double_2c_20std____2__iterator_traits_double____reference___value_29_2c_20void___type_20std____2__vector_double_2c_20std____2__allocator_double__20___assign_double___28double__2c_20double__29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $3 = global$0 - 16 | 0;
  $4 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  $4 = $2 - $1 >> 3;
  label$2 : {
   if ($4 >>> 0 <= std____2____vector_base_double_2c_20std____2__allocator_double__20___capacity_28_29_20const($0) >>> 0) {
    HEAP32[$3 + 12 >> 2] = $2;
    if ($4 >>> 0 > std____2__vector_double_2c_20std____2__allocator_double__20___size_28_29_20const($0) >>> 0) {
     HEAP32[$3 + 12 >> 2] = $1;
     $5 = $3 + 12 | 0;
     $6 = std____2__vector_double_2c_20std____2__allocator_double__20___size_28_29_20const($0);
     HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + ($6 << 3);
     $5 = 1;
    }
    $1 = std____2__enable_if__28is_same_std____2__remove_const_double___type_2c_20double___value_29_20___20_28is_trivially_copy_assignable_double___value_29_2c_20double____type_20std____2____copy_double_2c_20double__28double__2c_20double__2c_20double__29($1, HEAP32[$3 + 12 >> 2], HEAP32[$0 >> 2]);
    if ($5) {
     std____2__enable_if___is_forward_iterator_double____value_2c_20void___type_20std____2__vector_double_2c_20std____2__allocator_double__20_____construct_at_end_double___28double__2c_20double__2c_20unsigned_20long_29($0, HEAP32[$3 + 12 >> 2], $2, $4 - std____2__vector_double_2c_20std____2__allocator_double__20___size_28_29_20const($0) | 0);
     break label$2;
    }
    std____2__vector_double_2c_20std____2__allocator_double__20_____destruct_at_end_28double__29($0, $1);
    break label$2;
   }
   std____2__vector_double_2c_20std____2__allocator_double__20_____vdeallocate_28_29($0);
   std____2__vector_double_2c_20std____2__allocator_double__20_____vallocate_28unsigned_20long_29($0, std____2__vector_double_2c_20std____2__allocator_double__20_____recommend_28unsigned_20long_29_20const($0, $4));
   std____2__enable_if___is_forward_iterator_double____value_2c_20void___type_20std____2__vector_double_2c_20std____2__allocator_double__20_____construct_at_end_double___28double__2c_20double__2c_20unsigned_20long_29($0, $1, $2, $4);
  }
  $0 = $3 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function maxiSample__setSample_28std____2__vector_double_2c_20std____2__allocator_double__20___2c_20int_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  maxiSample__setSample_28std____2__vector_double_2c_20std____2__allocator_double__20___29($0, $1);
  HEAP32[$0 + 100 >> 2] = $2;
 }
 
 function maxiSample__trigger_28_29($0) {
  $0 = $0 | 0;
  HEAP32[$0 + 40 >> 2] = 0;
  HEAP32[$0 + 44 >> 2] = 0;
  HEAP32[$0 + 48 >> 2] = 0;
  HEAP32[$0 + 52 >> 2] = 0;
 }
 
 function std____2__basic_filebuf_char_2c_20std____2__char_traits_char__20___open_28char_20const__2c_20unsigned_20int_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  label$1 : {
   if (HEAP32[$0 + 64 >> 2]) {
    break label$1
   }
   $3 = std____2__basic_filebuf_char_2c_20std____2__char_traits_char__20_____make_mdstring_28unsigned_20int_29($2);
   if (!$3) {
    break label$1
   }
   $1 = fopen($1, $3);
   HEAP32[$0 + 64 >> 2] = $1;
   if (!$1) {
    break label$1
   }
   HEAP32[$0 + 88 >> 2] = $2;
   if (!($2 & 2)) {
    return $0 | 0
   }
   if (!fseek($1, 0, 2)) {
    return $0 | 0
   }
   fclose(HEAP32[$0 + 64 >> 2]);
   HEAP32[$0 + 64 >> 2] = 0;
  }
  return 0;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($0) {
  if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____is_long_28_29_20const($0)) {
   return HEAP32[$0 + 4 >> 2]
  }
  return HEAPU8[$0 + 11 | 0];
 }
 
 function std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2____put_character_sequence_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__2c_20unsigned_20long_29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
  $3 = global$0 - 32 | 0;
  $4 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  HEAP32[16874] = 0;
  $4 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(27, $3 + 24 | 0, $0 | 0) | 0;
  $5 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    label$4 : {
     if (($5 | 0) != 1) {
      label$6 : {
       label$8 : {
        if (!HEAPU8[$4 | 0]) {
         break label$8
        }
        $5 = std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___istreambuf_iterator_28std____2__basic_istream_char_2c_20std____2__char_traits_char__20___29($3 + 8 | 0, $0);
        $7 = HEAP32[(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0) + 4 >> 2];
        $6 = HEAP32[HEAP32[$0 >> 2] + -12 >> 2];
        HEAP32[16874] = 0;
        $6 = $0 + $6 | 0;
        $8 = __invoke_i1___22class_std____2__basic_ifstream_22_(28, $6 | 0) | 0;
        $9 = HEAP32[16874];
        HEAP32[16874] = 0;
        if (($9 | 0) == 1) {
         break label$6
        }
        $5 = HEAP32[$5 >> 2];
        HEAP32[16874] = 0;
        $2 = $1 + $2 | 0;
        $1 = __invoke___22class_std____2__basic_streambuf_22____22class_std____2__basic_streambuf_22__i8__i8__i8____22class_std____2__ios_base_22__i8(29, $5 | 0, $1 | 0, (($7 & 176) == 32 ? $2 : $1) | 0, $2 | 0, $6 | 0, $8 | 0) | 0;
        $2 = HEAP32[16874];
        HEAP32[16874] = 0;
        if (($2 | 0) == 1) {
         break label$6
        }
        HEAP32[$3 + 16 >> 2] = $1;
        if (!std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20___failed_28_29_20const($3 + 16 | 0)) {
         break label$8
        }
        $1 = HEAP32[HEAP32[$0 >> 2] + -12 >> 2];
        HEAP32[16874] = 0;
        __invoke_void___22class_std____2__vector_13_22__i32(17, $0 + $1 | 0, 5);
        $1 = HEAP32[16874];
        HEAP32[16874] = 0;
        if (($1 | 0) != 1) {
         break label$8
        }
        break label$6;
       }
       std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___sentry___sentry_28_29($4);
       break label$3;
      }
      $1 = __cxa_find_matching_catch_3(0) | 0;
      getTempRet0() | 0;
      std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___sentry___sentry_28_29($4);
      break label$4;
     }
     $1 = __cxa_find_matching_catch_3(0) | 0;
     getTempRet0() | 0;
    }
    __cxa_begin_catch($1 | 0) | 0;
    $1 = HEAP32[HEAP32[$0 >> 2] + -12 >> 2];
    HEAP32[16874] = 0;
    __invoke_void___22class_std____2__basic_ifstream_22_(30, $0 + $1 | 0);
    $1 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($1 | 0) == 1) {
     break label$2
    }
    __cxa_end_catch();
   }
   $1 = $3 + 32 | 0;
   if ($1 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $1;
   return $0;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  HEAP32[16874] = 0;
  __invoke_void(23);
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($1 | 0) == 1) {
   $0 = __cxa_find_matching_catch_3(0) | 0;
   getTempRet0() | 0;
   __clang_call_terminate($0);
   abort();
  }
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2__basic_ios_char_2c_20std____2__char_traits_char__20___widen_28char_29_20const($0, $1) {
  var $2 = 0, $3 = 0;
  $2 = global$0 - 16 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  std____2__ios_base__getloc_28_29_20const($2 + 8 | 0, $0);
  HEAP32[16874] = 0;
  $0 = __invoke_i1___22class_std____2__basic_ifstream_22_(31, $2 + 8 | 0) | 0;
  $3 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   if (($3 | 0) == 1) {
    break label$2
   }
   HEAP32[16874] = 0;
   $0 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(32, $0 | 0, $1 | 0) | 0;
   $1 = HEAP32[16874];
   HEAP32[16874] = 0;
   if (($1 | 0) == 1) {
    break label$2
   }
   std____2__locale___locale_28_29($2 + 8 | 0);
   $1 = $2 + 16 | 0;
   if ($1 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $1;
   return $0;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__locale___locale_28_29($2 + 8 | 0);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2__ios_base__eof_28_29_20const($0) {
  return (HEAPU8[$0 + 16 | 0] & 2) >>> 1 | 0;
 }
 
 function std____2__vector_short_2c_20std____2__allocator_short__20_____append_28unsigned_20long_29($0, $1) {
  var $2 = 0, $3 = 0;
  $3 = global$0 - 32 | 0;
  $2 = $3;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  label$2 : {
   label$3 : {
    if (HEAP32[std____2____vector_base_double_2c_20std____2__allocator_double__20_____alloc_28_29($0) >> 2] - HEAP32[$0 + 4 >> 2] >> 1 >>> 0 >= $1 >>> 0) {
     std____2__vector_short_2c_20std____2__allocator_short__20_____construct_at_end_28unsigned_20long_29($0, $1);
     break label$3;
    }
    $2 = std____2____vector_base_double_2c_20std____2__allocator_double__20_____alloc_28_29($0);
    $2 = std____2____split_buffer_short_2c_20std____2__allocator_short_______split_buffer_28unsigned_20long_2c_20unsigned_20long_2c_20std____2__allocator_short___29($3 + 8 | 0, std____2__vector_short_2c_20std____2__allocator_short__20_____recommend_28unsigned_20long_29_20const($0, std____2__vector_short_2c_20std____2__allocator_short__20___size_28_29_20const($0) + $1 | 0), std____2__vector_short_2c_20std____2__allocator_short__20___size_28_29_20const($0), $2);
    HEAP32[16874] = 0;
    std____2____split_buffer_short_2c_20std____2__allocator_short_______construct_at_end_28unsigned_20long_29($2, $1);
    $1 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($1 | 0) == 1) {
     break label$2
    }
    HEAP32[16874] = 0;
    __invoke_void___22class_std____2__vector_13_22__i32(35, $0 | 0, $2 | 0);
    $0 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($0 | 0) == 1) {
     break label$2
    }
    std____2____split_buffer_short_2c_20std____2__allocator_short________split_buffer_28_29($2);
   }
   $0 = $3 + 32 | 0;
   if ($0 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $0;
   return;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2____split_buffer_short_2c_20std____2__allocator_short________split_buffer_28_29($2);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2__basic_filebuf_char_2c_20std____2__char_traits_char__20___close_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  $2 = global$0 - 16 | 0;
  $1 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  label$2 : {
   $1 = HEAP32[$0 + 64 >> 2];
   label$3 : {
    if (!$1) {
     $1 = 0;
     break label$3;
    }
    HEAP32[$2 + 4 >> 2] = 36;
    $4 = std____2__unique_ptr__IO_FILE_2c_20int_20_28__29_28_IO_FILE__29___unique_ptr_true_2c_20void__28_IO_FILE__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_int_20_28__29_28_IO_FILE__29__2c_20true_____good_rval_ref_type_29($2 + 8 | 0, $1, $2 + 4 | 0);
    $3 = HEAP32[HEAP32[$0 >> 2] + 24 >> 2];
    $1 = 0;
    HEAP32[16874] = 0;
    $3 = __invoke_i1___22class_std____2__basic_ifstream_22_($3 | 0, $0 | 0) | 0;
    $5 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($5 | 0) == 1) {
     break label$2
    }
    if (!fclose(std____2__unique_ptr__IO_FILE_2c_20int_20_28__29_28_IO_FILE__29___release_28_29($4))) {
     HEAP32[$0 + 64 >> 2] = 0;
     $1 = $3 ? 0 : $0;
    }
    $3 = HEAP32[HEAP32[$0 >> 2] + 12 >> 2];
    HEAP32[16874] = 0;
    __invoke___22class_std____2__basic_istream_22____22class_std____2__basic_istream_22__i8__i32($3 | 0, $0 | 0, 0, 0) | 0;
    $0 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($0 | 0) == 1) {
     break label$2
    }
    std____2__unique_ptr__IO_FILE_2c_20int_20_28__29_28_IO_FILE__29___reset_28_IO_FILE__29($4);
   }
   $0 = $2 + 16 | 0;
   if ($0 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $0;
   return $1 | 0;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__unique_ptr__IO_FILE_2c_20int_20_28__29_28_IO_FILE__29___reset_28_IO_FILE__29($4);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2__vector_short_2c_20std____2__allocator_short__20_____annotate_delete_28_29_20const($0) {
  $0 = $0 | 0;
  std____2____vector_base_short_2c_20std____2__allocator_short__20___capacity_28_29_20const($0);
  std____2__vector_short_2c_20std____2__allocator_short__20___size_28_29_20const($0);
  std____2____vector_base_short_2c_20std____2__allocator_short__20___capacity_28_29_20const($0);
 }
 
 function std____2____vector_base_short_2c_20std____2__allocator_short__20______vector_base_28_29($0) {
  if (HEAP32[$0 >> 2]) {
   std____2____vector_base_short_2c_20std____2__allocator_short__20_____destruct_at_end_28short__29($0, HEAP32[$0 >> 2]);
   std____2__allocator_traits_std____2__allocator_char__20___deallocate_28std____2__allocator_char___2c_20char__2c_20unsigned_20long_29(std____2____vector_base_double_2c_20std____2__allocator_double__20_____alloc_28_29($0), HEAP32[$0 >> 2], std____2____vector_base_short_2c_20std____2__allocator_short__20___capacity_28_29_20const($0));
  }
 }
 
 function maxiSample__play_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0.0, $2 = 0, $3 = 0;
  $1 = HEAPF64[$0 + 40 >> 3] + 1.0;
  HEAPF64[$0 + 40 >> 3] = $1;
  if (Math_abs($1) < 2147483648.0) {
   $2 = ~~$1
  } else {
   $2 = -2147483648
  }
  $3 = $0 + 108 | 0;
  if (std____2__vector_double_2c_20std____2__allocator_double__20___size_28_29_20const($3) >>> 0 <= $2 >>> 0) {
   HEAP32[$0 + 40 >> 2] = 0;
   HEAP32[$0 + 44 >> 2] = 0;
  }
  $2 = $0;
  $1 = HEAPF64[$0 + 40 >> 3];
  label$4 : {
   if (Math_abs($1) < 2147483648.0) {
    $0 = ~~$1;
    break label$4;
   }
   $0 = -2147483648;
  }
  $1 = HEAPF64[std____2__vector_double_2c_20std____2__allocator_double__20___operator_5b_5d_28unsigned_20long_29($3, $0) >> 3];
  HEAPF64[$2 + 64 >> 3] = $1;
  return +$1;
 }
 
 function maxiSample__setPosition_28double_29($0, $1) {
  $0 = $0 | 0;
  $1 = +$1;
  HEAPF64[$0 + 40 >> 3] = double_20maxiMap__clamp_double__28double_2c_20double_2c_20double_29($1, 0.0, 1.0) * +(std____2__vector_double_2c_20std____2__allocator_double__20___size_28_29_20const($0 + 108 | 0) >>> 0);
 }
 
 function double_20maxiMap__clamp_double__28double_2c_20double_2c_20double_29($0, $1, $2) {
  $0 = +$0;
  $1 = +$1;
  $2 = +$2;
  label$1 : {
   if ($0 > $2) {
    break label$1
   }
   $2 = $0;
   if (!($0 < $1)) {
    break label$1
   }
   $2 = $1;
  }
  return +$2;
 }
 
 function std____2__vector_short_2c_20std____2__allocator_short__20_____construct_at_end_28unsigned_20long_29($0, $1) {
  var $2 = 0, $3 = 0;
  $2 = global$0 - 16 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  std____2____vector_base_double_2c_20std____2__allocator_double__20_____alloc_28_29($0);
  while (1) {
   void_20std____2__allocator_traits_std____2__allocator_short__20_____construct_short__28std____2__integral_constant_bool_2c_20true__2c_20std____2__allocator_short___2c_20short__29(HEAP32[$0 + 4 >> 2]);
   HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + 2;
   $1 = $1 + -1 | 0;
   if ($1) {
    continue
   }
   break;
  };
  $0 = $2 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___pubseekoff_28long_20long_2c_20std____2__ios_base__seekdir_2c_20unsigned_20int_29($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 16 >> 2]]($0, $1, $2, $3, $4, $5);
 }
 
 function std____2__fpos___mbstate_t___fpos_28long_20long_29($0, $1, $2) {
  HEAP32[$0 + 8 >> 2] = $1;
  HEAP32[$0 + 12 >> 2] = $2;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  return $0;
 }
 
 function bool_20std____2__operator_____mbstate_t__28std____2__fpos___mbstate_t__20const__2c_20std____2__fpos___mbstate_t__20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $0 = std____2__fpos___mbstate_t___operator_20long_20long_28_29_20const($0);
  $2 = i64toi32_i32$HIGH_BITS;
  return (std____2__fpos___mbstate_t___operator_20long_20long_28_29_20const($1) | 0) == ($0 | 0) & (i64toi32_i32$HIGH_BITS | 0) == ($2 | 0);
 }
 
 function maxiSample__play_28double_2c_20double_2c_20double_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = +$2;
  $3 = +$3;
  return +maxiSample__play_28double_2c_20double_2c_20double_2c_20double__29($0, $1, $2, $3, $0 + 40 | 0);
 }
 
 function maxiSample__play_28double_2c_20double_2c_20double_2c_20double__29($0, $1, $2, $3, $4) {
  var $5 = 0, $6 = 0;
  $5 = $0 + 108 | 0;
  if (!!(+(std____2__vector_double_2c_20std____2__allocator_double__20___size_28_29_20const($5) >>> 0) <= $3)) {
   $3 = +(std____2__vector_double_2c_20std____2__allocator_double__20___size_28_29_20const($5) + -1 >>> 0)
  }
  label$2 : {
   if (!!($1 > 0.0)) {
    if (!!(HEAPF64[$4 >> 3] < $2)) {
     HEAPF64[$4 >> 3] = $2
    }
    if (!!(HEAPF64[$4 >> 3] >= $3)) {
     HEAPF64[$4 >> 3] = $2
    }
    $1 = HEAPF64[$4 >> 3] + ($3 - $2) / (+HEAP32[12865] / (+HEAPF32[12864] * $1));
    HEAPF64[$4 >> 3] = $1;
    $2 = Math_floor($1);
    label$6 : {
     if (Math_abs($2) < 2147483648.0) {
      $4 = ~~$2;
      break label$6;
     }
     $4 = -2147483648;
    }
    $6 = $4 + 1 | 0;
    $6 = $6 >>> 0 < std____2__vector_double_2c_20std____2__allocator_double__20___size_28_29_20const($5) >>> 0 ? $6 : $4 + -1 | 0;
    $1 = $1 - $2;
    $4 = $4 + 2 | 0;
    if ($4 >>> 0 >= std____2__vector_double_2c_20std____2__allocator_double__20___size_28_29_20const($5) >>> 0) {
     $4 = std____2__vector_double_2c_20std____2__allocator_double__20___size_28_29_20const($5) + -1 | 0
    }
    $3 = (1.0 - $1) * HEAPF64[std____2__vector_double_2c_20std____2__allocator_double__20___operator_5b_5d_28unsigned_20long_29($5, $6) >> 3];
    $2 = $1 * HEAPF64[std____2__vector_double_2c_20std____2__allocator_double__20___operator_5b_5d_28unsigned_20long_29($5, $4) >> 3];
    break label$2;
   }
   $1 = -$1;
   if (!!(HEAPF64[$4 >> 3] <= $2)) {
    HEAPF64[$4 >> 3] = $3
   }
   $1 = HEAPF64[$4 >> 3] - ($3 - $2) / (+HEAP32[12865] / ($1 * +HEAPF32[12864]));
   HEAPF64[$4 >> 3] = $1;
   $2 = $1;
   $1 = Math_floor($1);
   $3 = $2 - $1;
   $2 = -1.0 - $3;
   $6 = $5;
   if (Math_abs($1) < 2147483648.0) {
    $4 = ~~$1
   } else {
    $4 = -2147483648
   }
   $2 = HEAPF64[std____2__vector_double_2c_20std____2__allocator_double__20___operator_5b_5d_28unsigned_20long_29($6, ($4 | 0) > 0 ? $4 + -1 | 0 : 0) >> 3] * $2;
   $3 = HEAPF64[std____2__vector_double_2c_20std____2__allocator_double__20___operator_5b_5d_28unsigned_20long_29($5, ($4 | 0) > 1 ? $4 + -2 | 0 : 0) >> 3] * $3;
  }
  $1 = $3 + $2;
  HEAPF64[$0 + 64 >> 3] = $1;
  return $1;
 }
 
 function maxiSample__play4_28double_2c_20double_2c_20double_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = +$2;
  $3 = +$3;
  var $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0;
  if (!!($1 > 0.0)) {
   if (!!(HEAPF64[$0 + 40 >> 3] < $2)) {
    HEAPF64[$0 + 40 >> 3] = $2
   }
   if (!!(HEAPF64[$0 + 40 >> 3] >= $3)) {
    HEAPF64[$0 + 40 >> 3] = $2
   }
   $1 = HEAPF64[$0 + 40 >> 3] + ($3 - $2) / (+HEAP32[12865] / (+HEAPF32[12864] * $1));
   HEAPF64[$0 + 40 >> 3] = $1;
   $4 = $1 > 0.0;
   $7 = $0 + 108 | 0;
   $6 = $7;
   $2 = Math_floor($1);
   label$4 : {
    if (Math_abs($2) < 2147483648.0) {
     $8 = ~~$2;
     break label$4;
    }
    $8 = -2147483648;
   }
   $10 = HEAPF64[std____2__vector_double_2c_20std____2__allocator_double__20___operator_5b_5d_28unsigned_20long_29($6, $4 ? $8 + -1 | 0 : 0) >> 3];
   $9 = $3 + -2.0;
   $6 = $7;
   $5 = HEAPF64[$0 + 40 >> 3];
   label$6 : {
    if (Math_abs($5) < 2147483648.0) {
     $4 = ~~$5;
     break label$6;
    }
    $4 = -2147483648;
   }
   $4 = std____2__vector_double_2c_20std____2__allocator_double__20___operator_5b_5d_28unsigned_20long_29($6, $4);
   $5 = HEAPF64[$0 + 40 >> 3];
   $8 = $5 < $9;
   $1 = $1 - $2;
   $2 = HEAPF64[$4 >> 3];
   $6 = $7;
   if (Math_abs($5) < 2147483648.0) {
    $4 = ~~$5
   } else {
    $4 = -2147483648
   }
   $5 = HEAPF64[std____2__vector_double_2c_20std____2__allocator_double__20___operator_5b_5d_28unsigned_20long_29($6, $8 ? $4 + 1 | 0 : 0) >> 3];
   $9 = HEAPF64[$0 + 40 >> 3];
   $4 = $9 < $3 + -3.0;
   $11 = $2;
   $12 = $1;
   $13 = ($5 - $10) * .5;
   $14 = $1;
   $15 = $10 + $2 * -2.5 + ($5 + $5);
   if (Math_abs($9) < 2147483648.0) {
    $6 = ~~$9
   } else {
    $6 = -2147483648
   }
   $3 = HEAPF64[std____2__vector_double_2c_20std____2__allocator_double__20___operator_5b_5d_28unsigned_20long_29($7, $4 ? $6 + 2 | 0 : 0) >> 3];
   $1 = $11 + $12 * ($13 + $14 * ($15 - $3 * .5 + $1 * (($2 - $5) * 1.5 + ($3 - $10) * .5)));
   HEAPF64[$0 + 64 >> 3] = $1;
   return +$1;
  }
  $1 = -$1;
  if (!!(HEAPF64[$0 + 40 >> 3] <= $2)) {
   HEAPF64[$0 + 40 >> 3] = $3
  }
  $1 = HEAPF64[$0 + 40 >> 3] - ($3 - $2) / (+HEAP32[12865] / ($1 * +HEAPF32[12864]));
  HEAPF64[$0 + 40 >> 3] = $1;
  $4 = $1 < $3 + -1.0;
  $7 = $0 + 108 | 0;
  $6 = $7;
  if (Math_abs($1) < 2147483648.0) {
   $8 = ~~$1
  } else {
   $8 = -2147483648
  }
  $10 = HEAPF64[std____2__vector_double_2c_20std____2__allocator_double__20___operator_5b_5d_28unsigned_20long_29($6, $1 > $2 ? ($4 ? $8 + 1 | 0 : 0) : 0) >> 3];
  $3 = Math_floor($1);
  $6 = $7;
  $5 = HEAPF64[$0 + 40 >> 3];
  label$15 : {
   if (Math_abs($5) < 2147483648.0) {
    $4 = ~~$5;
    break label$15;
   }
   $4 = -2147483648;
  }
  $4 = std____2__vector_double_2c_20std____2__allocator_double__20___operator_5b_5d_28unsigned_20long_29($6, $4);
  $5 = HEAPF64[$0 + 40 >> 3];
  $8 = $5 > $2;
  $1 = $1 - $3;
  $3 = HEAPF64[$4 >> 3];
  $6 = $7;
  if (Math_abs($5) < 2147483648.0) {
   $4 = ~~$5
  } else {
   $4 = -2147483648
  }
  $5 = HEAPF64[std____2__vector_double_2c_20std____2__allocator_double__20___operator_5b_5d_28unsigned_20long_29($6, $8 ? $4 + -1 | 0 : 0) >> 3];
  $9 = HEAPF64[$0 + 40 >> 3];
  $4 = $9 > $2 + 1.0;
  $2 = $3;
  $11 = $2;
  $12 = $1;
  $13 = ($5 - $10) * .5;
  $14 = $1;
  $15 = $10 + $2 * -2.5 + ($5 + $5);
  if (Math_abs($9) < 2147483648.0) {
   $6 = ~~$9
  } else {
   $6 = -2147483648
  }
  $2 = HEAPF64[std____2__vector_double_2c_20std____2__allocator_double__20___operator_5b_5d_28unsigned_20long_29($7, $4 ? $6 + -2 | 0 : 0) >> 3];
  $1 = $11 - $12 * ($13 - $14 * ($15 - $2 * .5 + $1 * (($3 - $5) * 1.5 + ($2 - $10) * .5)));
  HEAPF64[$0 + 64 >> 3] = $1;
  return +$1;
 }
 
 function maxiSample__playUntil_28double_2c_20double_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = +$2;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0;
  $6 = HEAPF64[$0 + 40 >> 3];
  $3 = $0 + 108 | 0;
  $2 = +(std____2__vector_double_2c_20std____2__allocator_double__20___size_28_29_20const($3) >>> 0) * $2;
  if (Math_abs($6) < 2147483648.0) {
   $4 = ~~$6
  } else {
   $4 = -2147483648
  }
  label$1 : {
   if (!!($2 > +($4 | 0))) {
    $7 = $0;
    $4 = $0;
    $2 = HEAPF64[$0 + 40 >> 3];
    label$5 : {
     if (Math_abs($2) < 2147483648.0) {
      $5 = ~~$2;
      break label$5;
     }
     $5 = -2147483648;
    }
    $3 = std____2__vector_double_2c_20std____2__allocator_double__20___operator_5b_5d_28unsigned_20long_29($3, $5);
    $5 = HEAP32[$3 + 4 >> 2];
    HEAP32[$4 + 64 >> 2] = HEAP32[$3 >> 2];
    HEAP32[$7 + 68 >> 2] = $5;
    break label$1;
   }
   HEAP32[$0 + 64 >> 2] = 0;
   HEAP32[$0 + 68 >> 2] = 0;
  }
  HEAPF64[$0 + 40 >> 3] = HEAPF64[$0 + 40 >> 3] + +HEAPF32[12864] * $1 / +(HEAP32[12865] / HEAP32[$0 + 100 >> 2] | 0);
  return +HEAPF64[$0 + 64 >> 3];
 }
 
 function maxiSample__playOnce_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  $3 = $0 + 108 | 0;
  $1 = HEAPF64[$0 + 40 >> 3];
  label$1 : {
   if (Math_abs($1) < 2147483648.0) {
    $4 = ~~$1;
    break label$1;
   }
   $4 = -2147483648;
  }
  label$3 : {
   if (std____2__vector_double_2c_20std____2__allocator_double__20___size_28_29_20const($3) >>> 0 > $4 >>> 0) {
    $4 = $0;
    $5 = $0;
    $1 = HEAPF64[$0 + 40 >> 3];
    label$5 : {
     if (Math_abs($1) < 2147483648.0) {
      $2 = ~~$1;
      break label$5;
     }
     $2 = -2147483648;
    }
    $2 = std____2__vector_double_2c_20std____2__allocator_double__20___operator_5b_5d_28unsigned_20long_29($3, $2);
    $3 = HEAP32[$2 + 4 >> 2];
    HEAP32[$5 + 64 >> 2] = HEAP32[$2 >> 2];
    HEAP32[$4 + 68 >> 2] = $3;
    break label$3;
   }
   HEAP32[$0 + 64 >> 2] = 0;
   HEAP32[$0 + 68 >> 2] = 0;
  }
  HEAPF64[$0 + 40 >> 3] = HEAPF64[$0 + 40 >> 3] + 1.0;
  return +HEAPF64[$0 + 64 >> 3];
 }
 
 function maxiSample__playOnZX_28double_29($0, $1) {
  $0 = $0 | 0;
  $1 = +$1;
  if (maxiTrigger__onZX_28double_29($0 + 120 | 0, $1) != 0.0) {
   maxiSample__trigger_28_29($0)
  }
  return +maxiSample__playOnce_28_29($0);
 }
 
 function maxiTrigger__onZX_28double_29($0, $1) {
  $0 = $0 | 0;
  $1 = +$1;
  var $2 = 0.0;
  label$1 : {
   label$2 : {
    if (!(HEAPF64[$0 >> 3] <= 0.0)) {
     if (!($1 > 0.0)) {
      break label$1
     }
     if (HEAPU8[$0 + 8 | 0]) {
      break label$2
     }
     break label$1;
    }
    if (!($1 > 0.0)) {
     break label$1
    }
   }
   $2 = 1.0;
  }
  HEAP8[$0 + 8 | 0] = 0;
  HEAPF64[$0 >> 3] = $1;
  return +$2;
 }
 
 function maxiSample__playOnZX_28double_2c_20double_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = +$2;
  if (maxiTrigger__onZX_28double_29($0 + 120 | 0, $1) != 0.0) {
   maxiSample__trigger_28_29($0)
  }
  return +maxiSample__playOnce_28double_29($0, $2);
 }
 
 function maxiSample__playOnce_28double_29($0, $1) {
  $0 = $0 | 0;
  $1 = +$1;
  var $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0;
  $4 = HEAPF64[$0 + 40 >> 3];
  label$1 : {
   if (Math_abs($4) < 2147483648.0) {
    $2 = ~~$4;
    break label$1;
   }
   $2 = -2147483648;
  }
  $5 = $0 + 108 | 0;
  if (std____2__vector_double_2c_20std____2__allocator_double__20___size_28_29_20const($5) >>> 0 > $2 >>> 0) {
   $4 = $4 - +($2 | 0);
   $6 = 1.0 - $4;
   $2 = $5;
   $3 = HEAPF64[$0 + 40 >> 3];
   label$4 : {
    if (Math_abs($3) < 2147483648.0) {
     $7 = ~~$3;
     break label$4;
    }
    $7 = -2147483648;
   }
   $6 = $6 * HEAPF64[std____2__vector_double_2c_20std____2__allocator_double__20___operator_5b_5d_28unsigned_20long_29($2, $7 + 1 | 0) >> 3];
   $3 = HEAPF64[$0 + 40 >> 3];
   label$6 : {
    if (Math_abs($3) < 2147483648.0) {
     $2 = ~~$3;
     break label$6;
    }
    $2 = -2147483648;
   }
   $3 = $6 + $4 * HEAPF64[std____2__vector_double_2c_20std____2__allocator_double__20___operator_5b_5d_28unsigned_20long_29($5, $2 + 2 | 0) >> 3];
  }
  HEAPF64[$0 + 64 >> 3] = $3;
  HEAPF64[$0 + 40 >> 3] = HEAPF64[$0 + 40 >> 3] + +HEAPF32[12864] * $1 / +(HEAP32[12865] / HEAP32[$0 + 100 >> 2] | 0);
  return +$3;
 }
 
 function maxiSample__playOnZX_28double_2c_20double_2c_20double_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = +$2;
  $3 = +$3;
  if (maxiTrigger__onZX_28double_29($0 + 120 | 0, $1) != 0.0) {
   maxiSample__trigger_28_29($0);
   HEAPF64[$0 + 40 >> 3] = +(std____2__vector_double_2c_20std____2__allocator_double__20___size_28_29_20const($0 + 108 | 0) >>> 0) * $3;
  }
  return +maxiSample__playOnce_28double_29($0, $2);
 }
 
 function maxiSample__loopSetPosOnZX_28double_2c_20double_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = +$2;
  if (maxiTrigger__onZX_28double_29($0 + 120 | 0, $1) != 0.0) {
   maxiSample__setPosition_28double_29($0, $2)
  }
  return +maxiSample__play_28_29($0);
 }
 
 function maxiSample__play_28double_29($0, $1) {
  $0 = $0 | 0;
  $1 = +$1;
  var $2 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0;
  $2 = HEAPF64[$0 + 40 >> 3] + +HEAPF32[12864] * $1 / +(HEAP32[12865] / HEAP32[$0 + 100 >> 2] | 0);
  HEAPF64[$0 + 40 >> 3] = $2;
  if (Math_abs($2) < 2147483648.0) {
   $3 = ~~$2
  } else {
   $3 = -2147483648
  }
  label$3 : {
   if (!!($1 >= 0.0)) {
    $4 = $0 + 108 | 0;
    if (std____2__vector_double_2c_20std____2__allocator_double__20___size_28_29_20const($4) + -1 >>> 0 <= $3 >>> 0) {
     HEAP32[$0 + 40 >> 2] = 0;
     HEAP32[$0 + 44 >> 2] = 1072693248;
    }
    $1 = HEAPF64[$0 + 40 >> 3];
    $2 = Math_floor($1);
    label$6 : {
     if (!!($1 + 1.0 < +(std____2__vector_double_2c_20std____2__allocator_double__20___size_28_29_20const($4) >>> 0))) {
      $6 = HEAPF64[$0 + 40 >> 3] + 1.0;
      if (Math_abs($6) < 2147483648.0) {
       $3 = ~~$6;
       break label$6;
      }
      $3 = -2147483648;
      break label$6;
     }
     $3 = std____2__vector_double_2c_20std____2__allocator_double__20___size_28_29_20const($4) + -1 | 0;
    }
    $1 = $1 - $2;
    label$9 : {
     if (!!(HEAPF64[$0 + 40 >> 3] + 2.0 < +(std____2__vector_double_2c_20std____2__allocator_double__20___size_28_29_20const($4) >>> 0))) {
      $2 = HEAPF64[$0 + 40 >> 3] + 2.0;
      if (Math_abs($2) < 2147483648.0) {
       $5 = ~~$2;
       break label$9;
      }
      $5 = -2147483648;
      break label$9;
     }
     $5 = std____2__vector_double_2c_20std____2__allocator_double__20___size_28_29_20const($4) + -1 | 0;
    }
    $2 = (1.0 - $1) * HEAPF64[std____2__vector_double_2c_20std____2__allocator_double__20___operator_5b_5d_28unsigned_20long_29($4, $3) >> 3];
    $3 = std____2__vector_double_2c_20std____2__allocator_double__20___operator_5b_5d_28unsigned_20long_29($4, $5);
    break label$3;
   }
   if (($3 | 0) <= -1) {
    HEAPF64[$0 + 40 >> 3] = std____2__vector_double_2c_20std____2__allocator_double__20___size_28_29_20const($0 + 108 | 0) >>> 0
   }
   $4 = $0 + 108 | 0;
   $3 = $4;
   $2 = HEAPF64[$0 + 40 >> 3];
   $1 = $2 + -1.0;
   $1 = $1 > 0.0 ? $1 : 0.0;
   label$13 : {
    if (Math_abs($1) < 2147483648.0) {
     $5 = ~~$1;
     break label$13;
    }
    $5 = -2147483648;
   }
   $6 = HEAPF64[std____2__vector_double_2c_20std____2__allocator_double__20___operator_5b_5d_28unsigned_20long_29($3, $5) >> 3];
   $1 = $2 - Math_floor($2);
   $7 = -1.0 - $1;
   $2 = $2 + -2.0;
   $2 = $2 > 0.0 ? $2 : 0.0;
   label$15 : {
    if (Math_abs($2) < 2147483648.0) {
     $3 = ~~$2;
     break label$15;
    }
    $3 = -2147483648;
   }
   $2 = $6 * $7;
   $3 = std____2__vector_double_2c_20std____2__allocator_double__20___operator_5b_5d_28unsigned_20long_29($4, $3);
  }
  $1 = $2 + $1 * HEAPF64[$3 >> 3];
  HEAPF64[$0 + 64 >> 3] = $1;
  return +$1;
 }
 
 function maxiSample__normalise_28double_29($0, $1) {
  $0 = $0 | 0;
  $1 = +$1;
  var $2 = 0, $3 = 0.0;
  $2 = $0 + 108 | 0;
  if (std____2__vector_double_2c_20std____2__allocator_double__20___size_28_29_20const($2)) {
   $0 = 0;
   while (1) {
    if (!!(Math_abs(HEAPF64[std____2__vector_double_2c_20std____2__allocator_double__20___operator_5b_5d_28unsigned_20long_29($2, $0) >> 3]) > $3)) {
     $3 = Math_abs(HEAPF64[std____2__vector_double_2c_20std____2__allocator_double__20___operator_5b_5d_28unsigned_20long_29($2, $0) >> 3])
    }
    $0 = $0 + 1 | 0;
    if ($0 >>> 0 < std____2__vector_double_2c_20std____2__allocator_double__20___size_28_29_20const($2) >>> 0) {
     continue
    }
    break;
   };
  }
  if (std____2__vector_double_2c_20std____2__allocator_double__20___size_28_29_20const($2)) {
   $1 = +Math_fround($1 / $3);
   $0 = 0;
   while (1) {
    $3 = +round(+(HEAPF64[std____2__vector_double_2c_20std____2__allocator_double__20___operator_5b_5d_28unsigned_20long_29($2, $0) >> 3] * $1));
    HEAPF64[std____2__vector_double_2c_20std____2__allocator_double__20___operator_5b_5d_28unsigned_20long_29($2, $0) >> 3] = $3;
    $0 = $0 + 1 | 0;
    if ($0 >>> 0 < std____2__vector_double_2c_20std____2__allocator_double__20___size_28_29_20const($2) >>> 0) {
     continue
    }
    break;
   };
  }
 }
 
 function abs_28double_29($0) {
  $0 = +$0;
  return +Math_abs($0);
 }
 
 function maxiSample__autoTrim_28float_2c_20float_2c_20bool_2c_20bool_29($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = Math_fround($1);
  $2 = Math_fround($2);
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0;
  $8 = global$0 - 32 | 0;
  $5 = $8;
  if ($5 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $5;
  label$2 : {
   if (!$3) {
    break label$2
   }
   $3 = $8 + 8 | 0;
   maxiLagExp_double___init_28double_2c_20double_29($3, +$1, 0.0);
   $5 = $0 + 108 | 0;
   if (!std____2__vector_double_2c_20std____2__allocator_double__20___size_28_29_20const($5)) {
    break label$2
   }
   $11 = +$2;
   while (1) {
    maxiLagExp_double___addSample_28double_29($3, Math_abs(HEAPF64[std____2__vector_double_2c_20std____2__allocator_double__20___operator_5b_5d_28unsigned_20long_29($5, $7) >> 3]));
    if (HEAPF64[$3 + 16 >> 3] > $11) {
     break label$2
    }
    $7 = $7 + 1 | 0;
    if ($7 >>> 0 < std____2__vector_double_2c_20std____2__allocator_double__20___size_28_29_20const($5) >>> 0) {
     continue
    }
    break;
   };
  }
  $6 = $0 + 108 | 0;
  $3 = std____2__vector_double_2c_20std____2__allocator_double__20___size_28_29_20const($6) + -1 | 0;
  label$5 : {
   if (!$4) {
    break label$5
   }
   $4 = $8 + 8 | 0;
   $5 = $4;
   HEAPF32[$5 + 8 >> 2] = 0;
   HEAPF32[$5 >> 2] = $1;
   HEAPF32[$5 + 4 >> 2] = Math_fround(1.0) - $1;
   if (($3 | 0) < 1) {
    break label$5
   }
   while (1) {
    $5 = $4;
    $1 = Math_fround(Math_abs(HEAPF64[std____2__vector_double_2c_20std____2__allocator_double__20___operator_5b_5d_28unsigned_20long_29($6, $3) >> 3]));
    HEAPF32[$5 + 8 >> 2] = Math_fround(HEAPF32[$5 >> 2] * $1) + Math_fround(HEAPF32[$5 + 4 >> 2] * HEAPF32[$5 + 8 >> 2]);
    if (HEAPF32[$5 + 8 >> 2] > $2) {
     break label$5
    }
    $5 = ($3 | 0) > 1;
    $3 = $3 + -1 | 0;
    if ($5) {
     continue
    }
    break;
   };
   $3 = 0;
  }
  std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20_28__29_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___29_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28int_29(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29(68728, 1109), $7), 1127), $3), 4);
  label$7 : {
   $5 = $3 - $7 | 0;
   if (($5 | 0) >= 1) {
    $3 = 0;
    $4 = std____2__vector_double_2c_20std____2__allocator_double__20___vector_28unsigned_20long_29($8 + 8 | 0, $5);
    while (1) {
     $9 = std____2__vector_double_2c_20std____2__allocator_double__20___operator_5b_5d_28unsigned_20long_29($6, $3 + $7 | 0);
     $14 = HEAP32[$9 + 4 >> 2];
     $9 = HEAP32[$9 >> 2];
     $13 = std____2__vector_double_2c_20std____2__allocator_double__20___operator_5b_5d_28unsigned_20long_29($4, $3);
     HEAP32[$13 >> 2] = $9;
     HEAP32[$13 + 4 >> 2] = $14;
     $3 = $3 + 1 | 0;
     if (($5 | 0) != ($3 | 0)) {
      continue
     }
     break;
    };
    HEAP32[16874] = 0;
    __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(37, $6 | 0, $4 | 0) | 0;
    $3 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($3 | 0) == 1) {
     break label$7
    }
    HEAP32[$0 + 40 >> 2] = 0;
    HEAP32[$0 + 44 >> 2] = 0;
    HEAP32[$0 + 48 >> 2] = 0;
    HEAP32[$0 + 52 >> 2] = 0;
    HEAP32[$8 + 4 >> 2] = 100;
    $0 = std____2__vector_double_2c_20std____2__allocator_double__20___size_28_29_20const($6);
    HEAP32[16874] = 0;
    HEAP32[$8 >> 2] = $0;
    $0 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(38, $8 + 4 | 0, $8 | 0) | 0;
    $3 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($3 | 0) == 1) {
     break label$7
    }
    $0 = HEAP32[$0 >> 2];
    if (($0 | 0) >= 1) {
     $11 = +($0 | 0);
     $3 = 0;
     while (1) {
      $10 = +($3 | 0) / $11;
      $12 = +round(+($10 * HEAPF64[std____2__vector_double_2c_20std____2__allocator_double__20___operator_5b_5d_28unsigned_20long_29($6, $3) >> 3]));
      HEAPF64[std____2__vector_double_2c_20std____2__allocator_double__20___operator_5b_5d_28unsigned_20long_29($6, $3) >> 3] = $12;
      $7 = std____2__vector_double_2c_20std____2__allocator_double__20___size_28_29_20const($6);
      $5 = $3 ^ -1;
      $12 = HEAPF64[std____2__vector_double_2c_20std____2__allocator_double__20___operator_5b_5d_28unsigned_20long_29($6, $7 + $5 | 0) >> 3];
      $7 = std____2__vector_double_2c_20std____2__allocator_double__20___size_28_29_20const($6);
      $10 = +round(+($10 * $12));
      HEAPF64[std____2__vector_double_2c_20std____2__allocator_double__20___operator_5b_5d_28unsigned_20long_29($6, $5 + $7 | 0) >> 3] = $10;
      $3 = $3 + 1 | 0;
      if (($0 | 0) != ($3 | 0)) {
       continue
      }
      break;
     };
    }
    std____2__vector_double_2c_20std____2__allocator_double__20____vector_28_29($4);
   }
   $0 = $8 + 32 | 0;
   if ($0 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $0;
   return;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__vector_double_2c_20std____2__allocator_double__20____vector_28_29($4);
  __resumeException($0 | 0);
  abort();
 }
 
 function maxiLagExp_double___addSample_28double_29($0, $1) {
  $0 = $0 | 0;
  $1 = +$1;
  HEAPF64[$0 + 16 >> 3] = HEAPF64[$0 >> 3] * $1 + HEAPF64[$0 + 8 >> 3] * HEAPF64[$0 + 16 >> 3];
 }
 
 function maxiLagExp_double___value_28_29_20const($0) {
  $0 = $0 | 0;
  return +HEAPF64[$0 + 16 >> 3];
 }
 
 function std____2__vector_double_2c_20std____2__allocator_double__20___vector_28unsigned_20long_29($0, $1) {
  var $2 = 0, $3 = 0;
  $2 = std____2____vector_base_double_2c_20std____2__allocator_double__20_____vector_base_28_29($0);
  label$1 : {
   if (!$1) {
    break label$1
   }
   HEAP32[16874] = 0;
   __invoke_void___22class_std____2__vector_13_22__i32(39, $0 | 0, $1 | 0);
   $3 = HEAP32[16874];
   HEAP32[16874] = 0;
   if (($3 | 0) != 1) {
    HEAP32[16874] = 0;
    __invoke_void___22class_std____2__vector_13_22__i32(40, $0 | 0, $1 | 0);
    $1 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($1 | 0) != 1) {
     break label$1
    }
   }
   $0 = __cxa_find_matching_catch_2() | 0;
   getTempRet0() | 0;
   std____2____vector_base_double_2c_20std____2__allocator_double__20______vector_base_28_29($2);
   __resumeException($0 | 0);
   abort();
  }
  return $0;
 }
 
 function unsigned_20long_20const__20std____2__min_unsigned_20long__28unsigned_20long_20const__2c_20unsigned_20long_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return unsigned_20long_20const__20std____2__min_unsigned_20long_2c_20std____2____less_unsigned_20long_2c_20unsigned_20long__20__28unsigned_20long_20const__2c_20unsigned_20long_20const__2c_20std____2____less_unsigned_20long_2c_20unsigned_20long__29($0, $1) | 0;
 }
 
 function std____2__vector_double_2c_20std____2__allocator_double__20____vector_28_29($0) {
  var $1 = 0;
  HEAP32[16874] = 0;
  std____2__vector_double_2c_20std____2__allocator_double__20_____annotate_delete_28_29_20const($0);
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($1 | 0) != 1) {
   std____2____vector_base_double_2c_20std____2__allocator_double__20______vector_base_28_29($0);
   return $0;
  }
  $1 = __cxa_find_matching_catch_3(0) | 0;
  getTempRet0() | 0;
  std____2____vector_base_double_2c_20std____2__allocator_double__20______vector_base_28_29($0);
  __clang_call_terminate($1);
  abort();
 }
 
 function maxiLagExp_double___init_28double_2c_20double_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = +$2;
  HEAPF64[$0 + 16 >> 3] = $2;
  HEAPF64[$0 >> 3] = $1;
  HEAPF64[$0 + 8 >> 3] = 1.0 - $1;
 }
 
 function std____2____vector_base_double_2c_20std____2__allocator_double__20_____vector_base_28_29($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$1 + 12 >> 2] = 0;
  std____2____compressed_pair_unsigned_20char__2c_20std____2__allocator_unsigned_20char__20_____compressed_pair_std__nullptr_t_2c_20true__28std__nullptr_t___29($0 + 8 | 0, $1 + 12 | 0);
  $1 = $1 + 16 | 0;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  return $0;
 }
 
 function std____2__vector_double_2c_20std____2__allocator_double__20_____vallocate_28unsigned_20long_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  if (std____2__vector_double_2c_20std____2__allocator_double__20___max_size_28_29_20const($0) >>> 0 < $1 >>> 0) {
   std____2____vector_base_common_true_____throw_length_error_28_29_20const();
   abort();
  }
  std____2____vector_base_double_2c_20std____2__allocator_double__20_____alloc_28_29($0);
  $2 = std____2__allocator_double___allocate_28unsigned_20long_2c_20void_20const__29($1);
  HEAP32[$0 >> 2] = $2;
  HEAP32[$0 + 4 >> 2] = $2;
  HEAP32[std____2____vector_base_double_2c_20std____2__allocator_double__20_____alloc_28_29($0) >> 2] = ($1 << 3) + $2;
  std____2__vector_double_2c_20std____2__allocator_double__20_____annotate_new_28unsigned_20long_29_20const($0, 0);
 }
 
 function std____2__vector_double_2c_20std____2__allocator_double__20_____construct_at_end_28unsigned_20long_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0;
  $2 = global$0 - 16 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  std____2____vector_base_double_2c_20std____2__allocator_double__20_____alloc_28_29($0);
  while (1) {
   void_20std____2__allocator_traits_std____2__allocator_double__20_____construct_double__28std____2__integral_constant_bool_2c_20true__2c_20std____2__allocator_double___2c_20double__29(HEAP32[$0 + 4 >> 2]);
   HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + 8;
   $1 = $1 + -1 | 0;
   if ($1) {
    continue
   }
   break;
  };
  $0 = $2 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function std____2____vector_base_double_2c_20std____2__allocator_double__20______vector_base_28_29($0) {
  if (HEAP32[$0 >> 2]) {
   std____2____vector_base_double_2c_20std____2__allocator_double__20___clear_28_29($0);
   std____2__allocator_traits_std____2__allocator_char__20___deallocate_28std____2__allocator_char___2c_20char__2c_20unsigned_20long_29(std____2____vector_base_double_2c_20std____2__allocator_double__20_____alloc_28_29($0), HEAP32[$0 >> 2], std____2____vector_base_double_2c_20std____2__allocator_double__20___capacity_28_29_20const($0));
  }
 }
 
 function unsigned_20long_20const__20std____2__min_unsigned_20long_2c_20std____2____less_unsigned_20long_2c_20unsigned_20long__20__28unsigned_20long_20const__2c_20unsigned_20long_20const__2c_20std____2____less_unsigned_20long_2c_20unsigned_20long__29($0, $1) {
  var $2 = 0, $3 = 0;
  $2 = global$0 - 16 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  $3 = std____2____less_unsigned_20long_2c_20unsigned_20long___operator_28_29_28unsigned_20long_20const__2c_20unsigned_20long_20const__29_20const($1, $0);
  $2 = $2 + 16 | 0;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  return $3 ? $1 : $0;
 }
 
 function std____2__vector_double_2c_20std____2__allocator_double__20_____annotate_delete_28_29_20const($0) {
  $0 = $0 | 0;
  std____2____vector_base_double_2c_20std____2__allocator_double__20___capacity_28_29_20const($0);
  std____2__vector_double_2c_20std____2__allocator_double__20___size_28_29_20const($0);
  std____2____vector_base_double_2c_20std____2__allocator_double__20___capacity_28_29_20const($0);
 }
 
 function maxiDyn__gate_28double_2c_20double_2c_20long_2c_20double_2c_20double_29($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = +$2;
  $3 = $3 | 0;
  $4 = +$4;
  $5 = +$5;
  var $6 = 0;
  label$1 : {
   if (Math_abs($1) > $2 ^ 1 | HEAP32[$0 + 72 >> 2] == 1) {
    break label$1
   }
   HEAP32[$0 + 80 >> 2] = 0;
   HEAP32[$0 + 68 >> 2] = 0;
   HEAP32[$0 + 72 >> 2] = 1;
   if (HEAPF64[$0 + 56 >> 3] != 0.0) {
    break label$1
   }
   HEAP32[$0 + 56 >> 2] = 1202590843;
   HEAP32[$0 + 60 >> 2] = 1065646817;
  }
  label$2 : {
   if (HEAP32[$0 + 72 >> 2] != 1) {
    break label$2
   }
   $2 = HEAPF64[$0 + 56 >> 3];
   if (!($2 < 1.0)) {
    break label$2
   }
   $2 = ($4 + 1.0) * $2;
   HEAPF64[$0 + 56 >> 3] = $2;
   HEAPF64[$0 + 32 >> 3] = $2 * $1;
  }
  $2 = HEAPF64[$0 + 56 >> 3];
  if (!!($2 >= 1.0)) {
   HEAP32[$0 + 72 >> 2] = 0;
   HEAP32[$0 + 76 >> 2] = 1;
  }
  $6 = HEAP32[$0 + 68 >> 2];
  if (!(HEAP32[$0 + 76 >> 2] != 1 | ($6 | 0) >= ($3 | 0))) {
   HEAPF64[$0 + 32 >> 3] = $1;
   HEAP32[$0 + 68 >> 2] = $6 + 1;
  }
  if (HEAP32[$0 + 68 >> 2] == ($3 | 0)) {
   HEAP32[$0 + 76 >> 2] = 0;
   HEAP32[$0 + 80 >> 2] = 1;
  }
  if (!($2 > 0.0 ^ 1 | HEAP32[$0 + 80 >> 2] != 1)) {
   $2 = $2 * $5;
   HEAPF64[$0 + 56 >> 3] = $2;
   HEAPF64[$0 + 32 >> 3] = $2 * $1;
  }
  return +HEAPF64[$0 + 32 >> 3];
 }
 
 function maxiDyn__compressor_28double_2c_20double_2c_20double_2c_20double_2c_20double_29($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = +$2;
  $3 = +$3;
  $4 = +$4;
  $5 = +$5;
  label$1 : {
   if (Math_abs($1) > $3 ^ 1 | HEAP32[$0 + 72 >> 2] == 1) {
    break label$1
   }
   HEAP32[$0 + 80 >> 2] = 0;
   HEAP32[$0 + 68 >> 2] = 0;
   HEAP32[$0 + 72 >> 2] = 1;
   if (HEAPF64[$0 + 16 >> 3] != 0.0) {
    break label$1
   }
   HEAPF64[$0 + 16 >> 3] = $2;
  }
  label$2 : {
   if (HEAP32[$0 + 72 >> 2] != 1) {
    break label$2
   }
   $3 = HEAPF64[$0 + 16 >> 3];
   if (!($3 < $2 + -1.0)) {
    break label$2
   }
   HEAPF64[$0 + 16 >> 3] = ($4 + 1.0) * $3;
  }
  $3 = HEAPF64[$0 + 16 >> 3];
  if (!!($3 >= $2 + -1.0)) {
   HEAP32[$0 + 80 >> 2] = 1;
   HEAP32[$0 + 72 >> 2] = 0;
  }
  if (!($3 > 0.0 ^ 1 | HEAP32[$0 + 80 >> 2] != 1)) {
   HEAPF64[$0 + 16 >> 3] = $3 * $5
  }
  $1 = $1 / (HEAPF64[$0 + 16 >> 3] + 1.0);
  HEAPF64[$0 + 32 >> 3] = $1;
  return +((log($2) + 1.0) * $1);
 }
 
 function maxiDyn__compress_28double_29($0, $1) {
  $0 = $0 | 0;
  $1 = +$1;
  var $2 = 0.0, $3 = 0.0, $4 = 0;
  label$1 : {
   if (Math_abs($1) > HEAPF64[$0 + 24 >> 3] ^ 1 | HEAP32[$0 + 72 >> 2] == 1) {
    break label$1
   }
   HEAP32[$0 + 80 >> 2] = 0;
   HEAP32[$0 + 68 >> 2] = 0;
   HEAP32[$0 + 72 >> 2] = 1;
   if (HEAPF64[$0 + 16 >> 3] != 0.0) {
    break label$1
   }
   $4 = HEAP32[$0 + 12 >> 2];
   HEAP32[$0 + 16 >> 2] = HEAP32[$0 + 8 >> 2];
   HEAP32[$0 + 20 >> 2] = $4;
  }
  label$2 : {
   if (HEAP32[$0 + 72 >> 2] != 1) {
    break label$2
   }
   $2 = HEAPF64[$0 + 16 >> 3];
   if (!($2 < HEAPF64[$0 + 8 >> 3] + -1.0)) {
    break label$2
   }
   HEAPF64[$0 + 16 >> 3] = $2 * (HEAPF64[$0 + 40 >> 3] + 1.0);
  }
  $2 = HEAPF64[$0 + 16 >> 3];
  $3 = HEAPF64[$0 + 8 >> 3];
  if (!!($2 >= $3 + -1.0)) {
   HEAP32[$0 + 80 >> 2] = 1;
   HEAP32[$0 + 72 >> 2] = 0;
  }
  if (!($2 > 0.0 ^ 1 | HEAP32[$0 + 80 >> 2] != 1)) {
   HEAPF64[$0 + 16 >> 3] = $2 * HEAPF64[$0 + 48 >> 3]
  }
  $1 = $1 / (HEAPF64[$0 + 16 >> 3] + 1.0);
  HEAPF64[$0 + 32 >> 3] = $1;
  return +((log($3) + 1.0) * $1);
 }
 
 function maxiDyn__setAttack_28double_29($0, $1) {
  $0 = $0 | 0;
  $1 = +$1;
  HEAPF64[$0 + 40 >> 3] = pow(.01, 1.0 / (+HEAP32[12865] * $1 * .001));
 }
 
 function maxiDyn__setRelease_28double_29($0, $1) {
  $0 = $0 | 0;
  $1 = +$1;
  HEAPF64[$0 + 48 >> 3] = pow(.01, 1.0 / (+HEAP32[12865] * $1 * .001));
 }
 
 function maxiDyn__setThreshold_28double_29($0, $1) {
  $0 = $0 | 0;
  $1 = +$1;
  HEAPF64[$0 + 24 >> 3] = $1;
 }
 
 function maxiEnv__ar_28double_2c_20double_2c_20double_2c_20long_2c_20int_29($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = +$2;
  $3 = +$3;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0;
  if (!(HEAP32[$0 + 68 >> 2] == 1 | ($5 | 0) != 1 | HEAP32[$0 + 80 >> 2] == 1)) {
   HEAP32[$0 + 84 >> 2] = 0;
   HEAP32[$0 + 64 >> 2] = 0;
   HEAP32[$0 + 68 >> 2] = 1;
  }
  if (HEAP32[$0 + 68 >> 2] == 1) {
   $2 = HEAPF64[$0 + 48 >> 3] + $2;
   HEAPF64[$0 + 48 >> 3] = $2;
   HEAPF64[$0 + 8 >> 3] = $2 * $1;
  }
  if (!!(HEAPF64[$0 + 48 >> 3] >= 1.0)) {
   HEAP32[$0 + 80 >> 2] = 1;
   HEAP32[$0 + 68 >> 2] = 0;
   HEAP32[$0 + 48 >> 2] = 0;
   HEAP32[$0 + 52 >> 2] = 1072693248;
  }
  $6 = HEAP32[$0 + 64 >> 2];
  if (!(HEAP32[$0 + 80 >> 2] != 1 | ($6 | 0) >= ($4 | 0))) {
   HEAPF64[$0 + 8 >> 3] = $1;
   HEAP32[$0 + 64 >> 2] = $6 + 1;
  }
  $6 = HEAP32[$0 + 64 >> 2];
  if (!(($5 | 0) != 1 | ($6 | 0) != ($4 | 0))) {
   HEAPF64[$0 + 8 >> 3] = $1
  }
  if (!(($5 | 0) == 1 | ($4 | 0) != ($6 | 0))) {
   HEAP32[$0 + 80 >> 2] = 0;
   HEAP32[$0 + 84 >> 2] = 1;
  }
  label$7 : {
   if (HEAP32[$0 + 84 >> 2] != 1) {
    break label$7
   }
   $2 = HEAPF64[$0 + 48 >> 3];
   if (!($2 > 0.0)) {
    break label$7
   }
   $2 = $2 * $3;
   HEAPF64[$0 + 48 >> 3] = $2;
   HEAPF64[$0 + 8 >> 3] = $2 * $1;
  }
  return +HEAPF64[$0 + 8 >> 3];
 }
 
 function maxiEnv__adsr_28double_2c_20double_2c_20double_2c_20double_2c_20double_2c_20long_2c_20int_29($0, $1, $2, $3, $4, $5, $6, $7) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = +$2;
  $3 = +$3;
  $4 = +$4;
  $5 = +$5;
  $6 = $6 | 0;
  $7 = $7 | 0;
  var $8 = 0;
  if (!(HEAP32[$0 + 68 >> 2] == 1 | ($7 | 0) != 1 | (HEAP32[$0 + 80 >> 2] == 1 | HEAP32[$0 + 72 >> 2] == 1))) {
   HEAP32[$0 + 84 >> 2] = 0;
   HEAP32[$0 + 72 >> 2] = 0;
   HEAP32[$0 + 76 >> 2] = 0;
   HEAP32[$0 + 64 >> 2] = 0;
   HEAP32[$0 + 68 >> 2] = 1;
  }
  label$2 : {
   if (HEAP32[$0 + 68 >> 2] != 1) {
    break label$2
   }
   HEAP32[$0 + 84 >> 2] = 0;
   $2 = HEAPF64[$0 + 48 >> 3] + $2;
   HEAPF64[$0 + 48 >> 3] = $2;
   HEAPF64[$0 + 8 >> 3] = $2 * $1;
   if (!($2 >= 1.0)) {
    break label$2
   }
   HEAP32[$0 + 68 >> 2] = 0;
   HEAP32[$0 + 72 >> 2] = 1;
   HEAP32[$0 + 48 >> 2] = 0;
   HEAP32[$0 + 52 >> 2] = 1072693248;
  }
  label$3 : {
   if (HEAP32[$0 + 72 >> 2] != 1) {
    break label$3
   }
   $2 = HEAPF64[$0 + 48 >> 3] * $3;
   HEAPF64[$0 + 48 >> 3] = $2;
   HEAPF64[$0 + 8 >> 3] = $2 * $1;
   if (!($2 <= $4)) {
    break label$3
   }
   HEAP32[$0 + 80 >> 2] = 1;
   HEAP32[$0 + 72 >> 2] = 0;
  }
  $8 = HEAP32[$0 + 64 >> 2];
  if (!(HEAP32[$0 + 80 >> 2] != 1 | ($8 | 0) >= ($6 | 0))) {
   HEAP32[$0 + 64 >> 2] = $8 + 1;
   HEAPF64[$0 + 8 >> 3] = HEAPF64[$0 + 48 >> 3] * $1;
  }
  $8 = HEAP32[$0 + 64 >> 2];
  if (!(($7 | 0) != 1 | ($8 | 0) < ($6 | 0))) {
   HEAPF64[$0 + 8 >> 3] = HEAPF64[$0 + 48 >> 3] * $1
  }
  if (!(($7 | 0) == 1 | ($8 | 0) < ($6 | 0))) {
   HEAP32[$0 + 80 >> 2] = 0;
   HEAP32[$0 + 84 >> 2] = 1;
  }
  label$7 : {
   if (HEAP32[$0 + 84 >> 2] != 1) {
    break label$7
   }
   $2 = HEAPF64[$0 + 48 >> 3];
   if (!($2 > 0.0)) {
    break label$7
   }
   $2 = $2 * $5;
   HEAPF64[$0 + 48 >> 3] = $2;
   HEAPF64[$0 + 8 >> 3] = $2 * $1;
  }
  return +HEAPF64[$0 + 8 >> 3];
 }
 
 function maxiEnv__adsr_28double_2c_20int_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = $2 | 0;
  var $3 = 0.0, $4 = 0, $5 = 0;
  if (!(HEAP32[$0 + 68 >> 2] == 1 | ($2 | 0) != 1 | (HEAP32[$0 + 80 >> 2] == 1 | HEAP32[$0 + 72 >> 2] == 1))) {
   HEAP32[$0 + 84 >> 2] = 0;
   HEAP32[$0 + 72 >> 2] = 0;
   HEAP32[$0 + 76 >> 2] = 0;
   HEAP32[$0 + 64 >> 2] = 0;
   HEAP32[$0 + 68 >> 2] = 1;
  }
  label$2 : {
   if (HEAP32[$0 + 68 >> 2] != 1) {
    break label$2
   }
   HEAP32[$0 + 84 >> 2] = 0;
   $3 = HEAPF64[$0 + 16 >> 3] + HEAPF64[$0 + 48 >> 3];
   HEAPF64[$0 + 48 >> 3] = $3;
   HEAPF64[$0 + 8 >> 3] = $3 * $1;
   if (!($3 >= 1.0)) {
    break label$2
   }
   HEAP32[$0 + 68 >> 2] = 0;
   HEAP32[$0 + 72 >> 2] = 1;
   HEAP32[$0 + 48 >> 2] = 0;
   HEAP32[$0 + 52 >> 2] = 1072693248;
  }
  label$3 : {
   if (HEAP32[$0 + 72 >> 2] != 1) {
    break label$3
   }
   $3 = HEAPF64[$0 + 24 >> 3] * HEAPF64[$0 + 48 >> 3];
   HEAPF64[$0 + 48 >> 3] = $3;
   HEAPF64[$0 + 8 >> 3] = $3 * $1;
   if (!($3 <= HEAPF64[$0 + 32 >> 3])) {
    break label$3
   }
   HEAP32[$0 + 80 >> 2] = 1;
   HEAP32[$0 + 72 >> 2] = 0;
  }
  $4 = HEAP32[$0 + 64 >> 2];
  $5 = HEAP32[$0 + 60 >> 2];
  if (!(HEAP32[$0 + 80 >> 2] != 1 | ($4 | 0) >= ($5 | 0))) {
   HEAP32[$0 + 64 >> 2] = $4 + 1;
   HEAPF64[$0 + 8 >> 3] = HEAPF64[$0 + 48 >> 3] * $1;
  }
  $4 = HEAP32[$0 + 64 >> 2];
  if (!(($2 | 0) != 1 | ($4 | 0) < ($5 | 0))) {
   HEAPF64[$0 + 8 >> 3] = HEAPF64[$0 + 48 >> 3] * $1
  }
  if (!(($2 | 0) == 1 | ($4 | 0) < ($5 | 0))) {
   HEAP32[$0 + 80 >> 2] = 0;
   HEAP32[$0 + 84 >> 2] = 1;
  }
  label$7 : {
   if (HEAP32[$0 + 84 >> 2] != 1) {
    break label$7
   }
   $3 = HEAPF64[$0 + 48 >> 3];
   if (!($3 > 0.0)) {
    break label$7
   }
   $3 = $3 * HEAPF64[$0 + 40 >> 3];
   HEAPF64[$0 + 48 >> 3] = $3;
   HEAPF64[$0 + 8 >> 3] = $3 * $1;
  }
  return +HEAPF64[$0 + 8 >> 3];
 }
 
 function maxiEnv__setAttack_28double_29($0, $1) {
  $0 = $0 | 0;
  $1 = +$1;
  HEAPF64[$0 + 16 >> 3] = 1.0 - pow(.01, 1.0 / (+HEAP32[12865] * $1 * .001));
 }
 
 function maxiEnv__setSustain_28double_29($0, $1) {
  $0 = $0 | 0;
  $1 = +$1;
  HEAPF64[$0 + 32 >> 3] = $1;
 }
 
 function maxiEnv__setDecay_28double_29($0, $1) {
  $0 = $0 | 0;
  $1 = +$1;
  HEAPF64[$0 + 24 >> 3] = pow(.01, 1.0 / (+HEAP32[12865] * $1 * .001));
 }
 
 function convert__mtof_28int_29($0) {
  $0 = $0 | 0;
  return +HEAPF64[($0 << 3) + 63600 >> 3];
 }
 
 function virtual_20thunk_20to_20std____2__basic_ifstream_char_2c_20std____2__char_traits_char__20____basic_ifstream_28_29($0) {
  $0 = $0 | 0;
  return std____2__basic_ifstream_char_2c_20std____2__char_traits_char__20____basic_ifstream_28_29(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0) | 0;
 }
 
 function std____2__basic_ifstream_char_2c_20std____2__char_traits_char__20____basic_ifstream_28_29_2($0) {
  $0 = $0 | 0;
  dlfree(std____2__basic_ifstream_char_2c_20std____2__char_traits_char__20____basic_ifstream_28_29($0));
 }
 
 function virtual_20thunk_20to_20std____2__basic_ifstream_char_2c_20std____2__char_traits_char__20____basic_ifstream_28_29_1($0) {
  $0 = $0 | 0;
  std____2__basic_ifstream_char_2c_20std____2__char_traits_char__20____basic_ifstream_28_29_2(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0);
 }
 
 function std____2__unique_ptr__IO_FILE_2c_20int_20_28__29_28_IO_FILE__29___unique_ptr_true_2c_20void__28_IO_FILE__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_int_20_28__29_28_IO_FILE__29__2c_20true_____good_rval_ref_type_29($0, $1, $2) {
  var $3 = 0, $4 = 0;
  $3 = global$0 - 16 | 0;
  $4 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  HEAP32[$3 + 12 >> 2] = $1;
  HEAP32[16874] = 0;
  std____2____compressed_pair__IO_FILE__2c_20int_20_28__29_28_IO_FILE__29_____compressed_pair__IO_FILE___2c_20int_20_28__29_28_IO_FILE__29__28_IO_FILE___2c_20int_20_28____29_28_IO_FILE__29_29($0, $3 + 12 | 0, $2);
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($1 | 0) != 1) {
   $1 = $3 + 16 | 0;
   if ($1 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $1;
   return $0;
  }
  $0 = __cxa_find_matching_catch_3(0) | 0;
  getTempRet0() | 0;
  __clang_call_terminate($0);
  abort();
 }
 
 function std____2__unique_ptr__IO_FILE_2c_20int_20_28__29_28_IO_FILE__29___release_28_29($0) {
  var $1 = 0;
  $1 = HEAP32[$0 >> 2];
  HEAP32[$0 >> 2] = 0;
  return $1;
 }
 
 function std____2__basic_filebuf_char_2c_20std____2__char_traits_char__20____basic_filebuf_28_29_1($0) {
  $0 = $0 | 0;
  dlfree(std____2__basic_filebuf_char_2c_20std____2__char_traits_char__20____basic_filebuf_28_29($0));
 }
 
 function std____2__basic_filebuf_char_2c_20std____2__char_traits_char__20___imbue_28std____2__locale_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($0) | 0;
  $1 = std____2__codecvt_char_2c_20char_2c_20__mbstate_t__20const__20std____2__use_facet_std____2__codecvt_char_2c_20char_2c_20__mbstate_t__20__28std____2__locale_20const__29($1);
  HEAP32[$0 + 68 >> 2] = $1;
  $2 = HEAPU8[$0 + 98 | 0];
  $1 = std____2__codecvt_char_2c_20char_2c_20__mbstate_t___always_noconv_28_29_20const($1);
  HEAP8[$0 + 98 | 0] = $1;
  if (($1 | 0) != ($2 | 0)) {
   std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___setg_28char__2c_20char__2c_20char__29($0, 0, 0, 0);
   std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___setp_28char__2c_20char__29($0, 0, 0);
   $1 = HEAPU8[$0 + 96 | 0];
   if (HEAPU8[$0 + 98 | 0]) {
    label$3 : {
     if (!$1) {
      break label$3
     }
     $1 = HEAP32[$0 + 32 >> 2];
     if (!$1) {
      break label$3
     }
     dlfree($1);
    }
    HEAP8[$0 + 96 | 0] = HEAPU8[$0 + 97 | 0];
    HEAP32[$0 + 52 >> 2] = HEAP32[$0 + 60 >> 2];
    $1 = HEAP32[$0 + 56 >> 2];
    HEAP32[$0 + 56 >> 2] = 0;
    HEAP32[$0 + 60 >> 2] = 0;
    HEAP32[$0 + 32 >> 2] = $1;
    HEAP8[$0 + 97 | 0] = 0;
    return;
   }
   if (!(HEAP32[$0 + 32 >> 2] == ($0 + 44 | 0) | $1)) {
    HEAP8[$0 + 97 | 0] = 0;
    $1 = HEAP32[$0 + 52 >> 2];
    HEAP32[$0 + 60 >> 2] = $1;
    HEAP32[$0 + 56 >> 2] = HEAP32[$0 + 32 >> 2];
    $1 = operator_20new_28unsigned_20long_29($1);
    HEAP8[$0 + 96 | 0] = 1;
    HEAP32[$0 + 32 >> 2] = $1;
    return;
   }
   $1 = HEAP32[$0 + 52 >> 2];
   HEAP32[$0 + 60 >> 2] = $1;
   $1 = operator_20new_28unsigned_20long_29($1);
   HEAP8[$0 + 97 | 0] = 1;
   HEAP32[$0 + 56 >> 2] = $1;
  }
 }
 
 function std____2__codecvt_char_2c_20char_2c_20__mbstate_t__20const__20std____2__use_facet_std____2__codecvt_char_2c_20char_2c_20__mbstate_t__20__28std____2__locale_20const__29($0) {
  $0 = $0 | 0;
  return std____2__locale__use_facet_28std____2__locale__id__29_20const($0, 69824) | 0;
 }
 
 function std____2__codecvt_char_2c_20char_2c_20__mbstate_t___always_noconv_28_29_20const($0) {
  return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($0) | 0;
 }
 
 function std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___setg_28char__2c_20char__2c_20char__29($0, $1, $2, $3) {
  HEAP32[$0 + 16 >> 2] = $3;
  HEAP32[$0 + 12 >> 2] = $2;
  HEAP32[$0 + 8 >> 2] = $1;
 }
 
 function std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___setp_28char__2c_20char__29($0, $1, $2) {
  HEAP32[$0 + 28 >> 2] = $2;
  HEAP32[$0 + 20 >> 2] = $1;
  HEAP32[$0 + 24 >> 2] = $1;
 }
 
 function std____2__basic_filebuf_char_2c_20std____2__char_traits_char__20___setbuf_28char__2c_20long_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0;
  $3 = global$0 - 16 | 0;
  $4 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  HEAP32[$3 + 12 >> 2] = $2;
  std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___setg_28char__2c_20char__2c_20char__29($0, 0, 0, 0);
  std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___setp_28char__2c_20char__29($0, 0, 0);
  label$2 : {
   if (!HEAPU8[$0 + 96 | 0]) {
    break label$2
   }
   $2 = HEAP32[$0 + 32 >> 2];
   if (!$2) {
    break label$2
   }
   dlfree($2);
  }
  label$3 : {
   if (!HEAPU8[$0 + 97 | 0]) {
    break label$3
   }
   $2 = HEAP32[$0 + 56 >> 2];
   if (!$2) {
    break label$3
   }
   dlfree($2);
  }
  $2 = HEAP32[$3 + 12 >> 2];
  HEAP32[$0 + 52 >> 2] = $2;
  $4 = $0;
  label$4 : {
   label$5 : {
    if ($2 >>> 0 >= 9) {
     if (!(!$1 | !HEAPU8[$0 + 98 | 0])) {
      HEAP32[$0 + 32 >> 2] = $1;
      break label$5;
     }
     HEAP32[$0 + 32 >> 2] = operator_20new_28unsigned_20long_29($2);
     $2 = 1;
     break label$4;
    }
    HEAP32[$0 + 52 >> 2] = 8;
    HEAP32[$0 + 32 >> 2] = $0 + 44;
   }
   $2 = 0;
  }
  HEAP8[$4 + 96 | 0] = $2;
  label$8 : {
   if (!HEAPU8[$0 + 98 | 0]) {
    HEAP32[$3 + 8 >> 2] = 8;
    $4 = HEAP32[long_20const__20std____2__max_long__28long_20const__2c_20long_20const__29($3 + 12 | 0, $3 + 8 | 0) >> 2];
    HEAP32[$0 + 60 >> 2] = $4;
    if ($1) {
     $2 = 0;
     if ($4 >>> 0 > 7) {
      break label$8
     }
    }
    $2 = 1;
    $1 = operator_20new_28unsigned_20long_29($4);
    break label$8;
   }
   $1 = 0;
   HEAP32[$0 + 60 >> 2] = 0;
   $2 = 0;
  }
  HEAP8[$0 + 97 | 0] = $2;
  HEAP32[$0 + 56 >> 2] = $1;
  $1 = $3 + 16 | 0;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  return $0 | 0;
 }
 
 function long_20const__20std____2__max_long__28long_20const__2c_20long_20const__29($0, $1) {
  return long_20const__20std____2__max_long_2c_20std____2____less_long_2c_20long__20__28long_20const__2c_20long_20const__2c_20std____2____less_long_2c_20long__29($0, $1);
 }
 
 function std____2__basic_filebuf_char_2c_20std____2__char_traits_char__20___seekoff_28long_20long_2c_20std____2__ios_base__seekdir_2c_20unsigned_20int_29($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $7 = 0;
  $5 = global$0 - 32 | 0;
  $6 = $5;
  if ($6 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $6;
  $6 = HEAP32[$1 + 68 >> 2];
  if ($6) {
   $6 = std____2__codecvt_char_2c_20char_2c_20__mbstate_t___encoding_28_29_20const($6);
   label$3 : {
    label$4 : {
     if (!(!HEAP32[$1 + 64 >> 2] | (($6 | 0) < 1 ? !!($2 | $3) : 0))) {
      if (!FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 24 >> 2]]($1)) {
       break label$4
      }
     }
     std____2__fpos___mbstate_t___fpos_28long_20long_29($0, -1, -1);
     break label$3;
    }
    if ($4 >>> 0 >= 3) {
     std____2__fpos___mbstate_t___fpos_28long_20long_29($0, -1, -1);
     break label$3;
    }
    $7 = HEAP32[$1 + 64 >> 2];
    $3 = __wasm_i64_mul($6, $6 >> 31, $2, $3);
    $2 = ($6 | 0) > 0;
    if (__fseeko($7, $2 ? $3 : 0, $2 ? i64toi32_i32$HIGH_BITS : 0, $4)) {
     std____2__fpos___mbstate_t___fpos_28long_20long_29($0, -1, -1);
     break label$3;
    }
    $4 = std____2__fpos___mbstate_t___fpos_28long_20long_29($5 + 16 | 0, __ftello(HEAP32[$1 + 64 >> 2]), i64toi32_i32$HIGH_BITS);
    $3 = HEAP32[$1 + 76 >> 2];
    $2 = $5;
    $1 = HEAP32[$1 + 72 >> 2];
    HEAP32[$2 >> 2] = $1;
    HEAP32[$2 + 4 >> 2] = $3;
    HEAP32[$2 + 8 >> 2] = $1;
    HEAP32[$2 + 12 >> 2] = $3;
    std____2__fpos___mbstate_t___state_28__mbstate_t_29($4, $2);
    $1 = HEAP32[$2 + 28 >> 2];
    HEAP32[$0 + 8 >> 2] = HEAP32[$2 + 24 >> 2];
    HEAP32[$0 + 12 >> 2] = $1;
    $1 = HEAP32[$2 + 20 >> 2];
    HEAP32[$0 >> 2] = HEAP32[$2 + 16 >> 2];
    HEAP32[$0 + 4 >> 2] = $1;
   }
   $0 = $5 + 32 | 0;
   if ($0 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $0;
   return;
  }
  std____2____throw_bad_cast_28_29();
  abort();
 }
 
 function std____2__codecvt_char_2c_20char_2c_20__mbstate_t___encoding_28_29_20const($0) {
  $0 = $0 | 0;
  return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($0) | 0;
 }
 
 function std____2__fpos___mbstate_t___state_28__mbstate_t_29($0, $1) {
  var $2 = 0;
  $2 = HEAP32[$1 + 4 >> 2];
  HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$0 + 4 >> 2] = $2;
 }
 
 function std____2____throw_bad_cast_28_29() {
  var $0 = 0;
  $0 = __cxa_allocate_exception(4) | 0;
  std__exception__exception_28_29($0);
  HEAP32[$0 >> 2] = 48912;
  __cxa_throw($0 | 0, 48972, 43);
  abort();
 }
 
 function std____2__basic_filebuf_char_2c_20std____2__char_traits_char__20___seekpos_28std____2__fpos___mbstate_t__2c_20unsigned_20int_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0;
  $3 = global$0 - 16 | 0;
  $4 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  label$2 : {
   label$3 : {
    if (HEAP32[$1 + 64 >> 2]) {
     if (!FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 24 >> 2]]($1)) {
      break label$3
     }
    }
    std____2__fpos___mbstate_t___fpos_28long_20long_29($0, -1, -1);
    break label$2;
   }
   if (__fseeko(HEAP32[$1 + 64 >> 2], std____2__fpos___mbstate_t___operator_20long_20long_28_29_20const($2), i64toi32_i32$HIGH_BITS, 0)) {
    std____2__fpos___mbstate_t___fpos_28long_20long_29($0, -1, -1);
    break label$2;
   }
   std____2__fpos___mbstate_t___state_28__mbstate_t_29($3 + 8 | 0, $2);
   $4 = HEAP32[$3 + 12 >> 2];
   HEAP32[$1 + 72 >> 2] = HEAP32[$3 + 8 >> 2];
   HEAP32[$1 + 76 >> 2] = $4;
   $1 = HEAP32[$2 + 12 >> 2];
   HEAP32[$0 + 8 >> 2] = HEAP32[$2 + 8 >> 2];
   HEAP32[$0 + 12 >> 2] = $1;
   $1 = HEAP32[$2 + 4 >> 2];
   HEAP32[$0 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$0 + 4 >> 2] = $1;
  }
  $0 = $3 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function std____2__fpos___mbstate_t___operator_20long_20long_28_29_20const($0) {
  i64toi32_i32$HIGH_BITS = HEAP32[$0 + 12 >> 2];
  return HEAP32[$0 + 8 >> 2];
 }
 
 function std____2__basic_filebuf_char_2c_20std____2__char_traits_char__20___sync_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $4 = global$0 - 16 | 0;
  $2 = $4;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  $2 = 0;
  label$2 : {
   if (!HEAP32[$0 + 64 >> 2]) {
    break label$2
   }
   $2 = HEAP32[$0 + 68 >> 2];
   label$3 : {
    if ($2) {
     $1 = HEAP32[$0 + 92 >> 2];
     label$5 : {
      if ($1 & 16) {
       if (HEAP32[$0 + 24 >> 2] != HEAP32[$0 + 20 >> 2]) {
        $2 = -1;
        if ((FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 52 >> 2]]($0, -1) | 0) == -1) {
         break label$2
        }
       }
       $5 = $0 + 72 | 0;
       while (1) {
        $2 = HEAP32[$0 + 32 >> 2];
        $1 = std____2__codecvt_char_2c_20char_2c_20__mbstate_t___unshift_28__mbstate_t__2c_20char__2c_20char__2c_20char___29_20const(HEAP32[$0 + 68 >> 2], $5, $2, $2 + HEAP32[$0 + 52 >> 2] | 0, $4 + 12 | 0);
        $2 = -1;
        $6 = HEAP32[$0 + 32 >> 2];
        $3 = HEAP32[$4 + 12 >> 2] - $6 | 0;
        if ((fwrite($6, 1, $3, HEAP32[$0 + 64 >> 2]) | 0) != ($3 | 0)) {
         break label$2
        }
        if (($1 | 0) == 1) {
         continue
        }
        break;
       };
       if (($1 | 0) == 2) {
        break label$2
       }
       if (!fflush(HEAP32[$0 + 64 >> 2])) {
        break label$5
       }
       break label$2;
      }
      if (!($1 & 8)) {
       break label$5
      }
      $1 = HEAP32[$0 + 84 >> 2];
      HEAP32[$4 >> 2] = HEAP32[$0 + 80 >> 2];
      HEAP32[$4 + 4 >> 2] = $1;
      label$9 : {
       if (HEAPU8[$0 + 98 | 0]) {
        $1 = HEAP32[$0 + 16 >> 2] - HEAP32[$0 + 12 >> 2] | 0;
        $2 = $1;
        $3 = $1 >> 31;
        $1 = 0;
        break label$9;
       }
       $1 = std____2__codecvt_char_2c_20char_2c_20__mbstate_t___encoding_28_29_20const($2);
       $3 = HEAP32[$0 + 40 >> 2] - HEAP32[$0 + 36 >> 2] | 0;
       $2 = $3;
       $3 = $2 >> 31;
       if (($1 | 0) >= 1) {
        $1 = Math_imul($1, HEAP32[$0 + 16 >> 2] - HEAP32[$0 + 12 >> 2] | 0);
        $3 = $3 + ($1 >> 31) | 0;
        $1 = $2 + $1 | 0;
        if ($1 >>> 0 < $2 >>> 0) {
         $3 = $3 + 1 | 0
        }
        $2 = $1;
        $1 = 0;
        break label$9;
       }
       $1 = 0;
       if (HEAP32[$0 + 12 >> 2] == HEAP32[$0 + 16 >> 2]) {
        break label$9
       }
       $1 = HEAP32[$0 + 68 >> 2];
       $1 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 32 >> 2]]($1, $4, HEAP32[$0 + 32 >> 2], HEAP32[$0 + 36 >> 2], HEAP32[$0 + 12 >> 2] - HEAP32[$0 + 8 >> 2] | 0) | 0;
       $5 = (HEAP32[$0 + 36 >> 2] - $1 | 0) - HEAP32[$0 + 32 >> 2] | 0;
       $1 = $2 + $5 | 0;
       $3 = ($5 >> 31) + $3 | 0;
       $3 = $1 >>> 0 < $2 >>> 0 ? $3 + 1 | 0 : $3;
       $2 = $1;
       $1 = 1;
      }
      if (__fseeko(HEAP32[$0 + 64 >> 2], 0 - $2 | 0, 0 - ($3 + (0 < $2 >>> 0) | 0) | 0, 1)) {
       break label$3
      }
      if ($1) {
       $2 = HEAP32[$4 + 4 >> 2];
       HEAP32[$0 + 72 >> 2] = HEAP32[$4 >> 2];
       HEAP32[$0 + 76 >> 2] = $2;
      }
      $2 = HEAP32[$0 + 32 >> 2];
      HEAP32[$0 + 40 >> 2] = $2;
      HEAP32[$0 + 36 >> 2] = $2;
      std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___setg_28char__2c_20char__2c_20char__29($0, 0, 0, 0);
      HEAP32[$0 + 92 >> 2] = 0;
     }
     $2 = 0;
     break label$2;
    }
    std____2____throw_bad_cast_28_29();
    abort();
   }
   $2 = -1;
  }
  $0 = $4 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
  return $2 | 0;
 }
 
 function std____2__codecvt_char_2c_20char_2c_20__mbstate_t___unshift_28__mbstate_t__2c_20char__2c_20char__2c_20char___29_20const($0, $1, $2, $3, $4) {
  return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0, $1, $2, $3, $4) | 0;
 }
 
 function std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___gptr_28_29_20const($0) {
  $0 = $0 | 0;
  return HEAP32[$0 + 12 >> 2];
 }
 
 function std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___eback_28_29_20const($0) {
  $0 = $0 | 0;
  return HEAP32[$0 + 8 >> 2];
 }
 
 function std____2__basic_filebuf_char_2c_20std____2__char_traits_char__20___underflow_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  $3 = global$0 - 16 | 0;
  $1 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  label$2 : {
   label$3 : {
    if (!HEAP32[$0 + 64 >> 2]) {
     $4 = -1;
     break label$3;
    }
    $4 = std____2__basic_filebuf_char_2c_20std____2__char_traits_char__20_____read_mode_28_29($0);
    if (!HEAP32[$0 + 12 >> 2]) {
     $1 = $3 + 16 | 0;
     std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___setg_28char__2c_20char__2c_20char__29($0, $3 + 15 | 0, $1, $1);
    }
    $1 = 0;
    if (!$4) {
     $1 = HEAP32[$0 + 16 >> 2];
     $4 = HEAP32[$0 + 8 >> 2];
     HEAP32[$3 + 4 >> 2] = 4;
     HEAP32[$3 + 8 >> 2] = ($1 - $4 | 0) / 2;
     $1 = HEAP32[unsigned_20long_20const__20std____2__min_unsigned_20long__28unsigned_20long_20const__2c_20unsigned_20long_20const__29($3 + 8 | 0, $3 + 4 | 0) >> 2];
    }
    $4 = -1;
    label$7 : {
     if (HEAP32[$0 + 12 >> 2] == HEAP32[$0 + 16 >> 2]) {
      memmove(HEAP32[$0 + 8 >> 2], HEAP32[$0 + 16 >> 2] - $1 | 0, $1);
      if (HEAPU8[$0 + 98 | 0]) {
       $2 = fread($1 + HEAP32[$0 + 8 >> 2] | 0, 1, (HEAP32[$0 + 16 >> 2] - $1 | 0) - HEAP32[$0 + 8 >> 2] | 0, HEAP32[$0 + 64 >> 2]);
       if (!$2) {
        break label$7
       }
       std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___setg_28char__2c_20char__2c_20char__29($0, HEAP32[$0 + 8 >> 2], $1 + HEAP32[$0 + 8 >> 2] | 0, $2 + ($1 + HEAP32[$0 + 8 >> 2] | 0) | 0);
       $4 = std____2__char_traits_char___to_int_type_28char_29(HEAP8[HEAP32[$0 + 12 >> 2]]);
       break label$7;
      }
      $5 = HEAP32[$0 + 40 >> 2];
      $2 = HEAP32[$0 + 36 >> 2];
      if (($5 | 0) != ($2 | 0)) {
       memmove(HEAP32[$0 + 32 >> 2], $2, $5 - $2 | 0)
      }
      $2 = HEAP32[$0 + 32 >> 2];
      HEAP32[$0 + 36 >> 2] = $2 + (HEAP32[$0 + 40 >> 2] - HEAP32[$0 + 36 >> 2] | 0);
      HEAP32[$0 + 40 >> 2] = $2 + (($2 | 0) == ($0 + 44 | 0) ? 8 : HEAP32[$0 + 52 >> 2]);
      HEAP32[$3 + 8 >> 2] = HEAP32[$0 + 60 >> 2] - $1;
      HEAP32[$3 + 4 >> 2] = HEAP32[$0 + 40 >> 2] - HEAP32[$0 + 36 >> 2];
      $2 = HEAP32[unsigned_20long_20const__20std____2__min_unsigned_20long__28unsigned_20long_20const__2c_20unsigned_20long_20const__29($3 + 8 | 0, $3 + 4 | 0) >> 2];
      $5 = HEAP32[$0 + 76 >> 2];
      HEAP32[$0 + 80 >> 2] = HEAP32[$0 + 72 >> 2];
      HEAP32[$0 + 84 >> 2] = $5;
      $2 = fread(HEAP32[$0 + 36 >> 2], 1, $2, HEAP32[$0 + 64 >> 2]);
      if (!$2) {
       break label$7
      }
      $5 = HEAP32[$0 + 68 >> 2];
      if (!$5) {
       break label$2
      }
      $2 = $2 + HEAP32[$0 + 36 >> 2] | 0;
      HEAP32[$0 + 40 >> 2] = $2;
      label$13 : {
       if ((std____2__codecvt_char_2c_20char_2c_20__mbstate_t___in_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20char_20const___2c_20char__2c_20char__2c_20char___29_20const($5, $0 + 72 | 0, HEAP32[$0 + 32 >> 2], $2, $0 + 36 | 0, $1 + HEAP32[$0 + 8 >> 2] | 0, HEAP32[$0 + 8 >> 2] + HEAP32[$0 + 60 >> 2] | 0, $3 + 8 | 0) | 0) == 3) {
        $1 = HEAP32[$0 + 32 >> 2];
        std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___setg_28char__2c_20char__2c_20char__29($0, $1, $1, HEAP32[$0 + 40 >> 2]);
        break label$13;
       }
       if (HEAP32[$3 + 8 >> 2] == ($1 + HEAP32[$0 + 8 >> 2] | 0)) {
        break label$7
       }
       std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___setg_28char__2c_20char__2c_20char__29($0, HEAP32[$0 + 8 >> 2], $1 + HEAP32[$0 + 8 >> 2] | 0, HEAP32[$3 + 8 >> 2]);
      }
      $4 = std____2__char_traits_char___to_int_type_28char_29(HEAP8[HEAP32[$0 + 12 >> 2]]);
      break label$7;
     }
     $4 = std____2__char_traits_char___to_int_type_28char_29(HEAP8[HEAP32[$0 + 12 >> 2]]);
    }
    if (HEAP32[$0 + 8 >> 2] != ($3 + 15 | 0)) {
     break label$3
    }
    std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___setg_28char__2c_20char__2c_20char__29($0, 0, 0, 0);
   }
   $0 = $3 + 16 | 0;
   if ($0 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $0;
   return $4 | 0;
  }
  std____2____throw_bad_cast_28_29();
  abort();
 }
 
 function std____2__basic_filebuf_char_2c_20std____2__char_traits_char__20_____read_mode_28_29($0) {
  var $1 = 0, $2 = 0;
  if (HEAPU8[$0 + 92 | 0] & 8) {
   $0 = 0
  } else {
   std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___setp_28char__2c_20char__29($0, 0, 0);
   label$3 : {
    if (HEAPU8[$0 + 98 | 0]) {
     $1 = HEAP32[$0 + 32 >> 2];
     $2 = $1 + HEAP32[$0 + 52 >> 2] | 0;
     break label$3;
    }
    $1 = HEAP32[$0 + 56 >> 2];
    $2 = $1 + HEAP32[$0 + 60 >> 2] | 0;
   }
   std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___setg_28char__2c_20char__2c_20char__29($0, $1, $2, $2);
   HEAP32[$0 + 92 >> 2] = 8;
   $0 = 1;
  }
  return $0;
 }
 
 function std____2__char_traits_char___to_int_type_28char_29($0) {
  return $0 & 255;
 }
 
 function std____2__codecvt_char_2c_20char_2c_20__mbstate_t___in_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20char_20const___2c_20char__2c_20char__2c_20char___29_20const($0, $1, $2, $3, $4, $5, $6, $7) {
  return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $1, $2, $3, $4, $5, $6, $7) | 0;
 }
 
 function std____2__basic_filebuf_char_2c_20std____2__char_traits_char__20___pbackfail_28int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  label$1 : {
   if (!HEAP32[$0 + 64 >> 2] | HEAPU32[$0 + 8 >> 2] >= HEAPU32[$0 + 12 >> 2]) {
    break label$1
   }
   if (std____2__char_traits_char___eq_int_type_28int_2c_20int_29($1, -1)) {
    std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___gbump_28int_29($0, -1);
    return std____2__char_traits_char___not_eof_28int_29($1) | 0;
   }
   if (!(HEAPU8[$0 + 88 | 0] & 16)) {
    if (!std____2__char_traits_char___eq_int_type_28int_2c_20int_29(std____2__char_traits_char___to_char_type_28int_29($1), HEAP8[HEAP32[$0 + 12 >> 2] + -1 | 0])) {
     break label$1
    }
   }
   std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___gbump_28int_29($0, -1);
   $2 = std____2__char_traits_char___to_char_type_28int_29($1);
   HEAP8[HEAP32[$0 + 12 >> 2]] = $2;
   return $1 | 0;
  }
  return -1;
 }
 
 function std____2__char_traits_char___eq_int_type_28int_2c_20int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return ($0 | 0) == ($1 | 0) | 0;
 }
 
 function std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___gbump_28int_29($0, $1) {
  HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 12 >> 2] + $1;
 }
 
 function std____2__char_traits_char___not_eof_28int_29($0) {
  if (std____2__char_traits_char___eq_int_type_28int_2c_20int_29($0, -1)) {
   $0 = 0
  }
  return $0;
 }
 
 function std____2__char_traits_char___to_char_type_28int_29($0) {
  return $0 << 24 >> 24;
 }
 
 function std____2__basic_filebuf_char_2c_20std____2__char_traits_char__20___overflow_28int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
  $3 = global$0 - 16 | 0;
  $2 = $3;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  label$2 : {
   if (!HEAP32[$0 + 64 >> 2]) {
    $5 = -1;
    break label$2;
   }
   std____2__basic_filebuf_char_2c_20std____2__char_traits_char__20_____write_mode_28_29($0);
   $7 = HEAP32[$0 + 20 >> 2];
   $8 = HEAP32[$0 + 28 >> 2];
   if (!std____2__char_traits_char___eq_int_type_28int_2c_20int_29($1, -1)) {
    if (!HEAP32[$0 + 24 >> 2]) {
     std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___setp_28char__2c_20char__29($0, $3 + 15 | 0, $3 + 16 | 0)
    }
    $2 = std____2__char_traits_char___to_char_type_28int_29($1);
    HEAP8[HEAP32[$0 + 24 >> 2]] = $2;
    std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___pbump_28int_29($0, 1);
   }
   if (HEAP32[$0 + 24 >> 2] != HEAP32[$0 + 20 >> 2]) {
    label$7 : {
     if (HEAPU8[$0 + 98 | 0]) {
      $2 = 1;
      $4 = HEAP32[$0 + 24 >> 2] - HEAP32[$0 + 20 >> 2] | 0;
      if ((fwrite(HEAP32[$0 + 20 >> 2], 1, $4, HEAP32[$0 + 64 >> 2]) | 0) != ($4 | 0)) {
       $5 = -1;
       $2 = 0;
      }
      if ($2) {
       break label$7
      }
      break label$2;
     }
     HEAP32[$3 + 8 >> 2] = HEAP32[$0 + 32 >> 2];
     $9 = $0 + 72 | 0;
     label$10 : {
      while (1) {
       $2 = HEAP32[$0 + 68 >> 2];
       label$12 : {
        label$13 : {
         if ($2) {
          $4 = $2;
          $2 = HEAP32[$0 + 32 >> 2];
          $4 = std____2__codecvt_char_2c_20char_2c_20__mbstate_t___out_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20char_20const___2c_20char__2c_20char__2c_20char___29_20const($4, $9, HEAP32[$0 + 20 >> 2], HEAP32[$0 + 24 >> 2], $3 + 4 | 0, $2, $2 + HEAP32[$0 + 52 >> 2] | 0, $3 + 8 | 0);
          if (HEAP32[$0 + 20 >> 2] == HEAP32[$3 + 4 >> 2]) {
           break label$13
          }
          label$15 : {
           if (($4 | 0) == 3) {
            $2 = 0;
            $6 = HEAP32[$0 + 24 >> 2] - HEAP32[$0 + 20 >> 2] | 0;
            if ((fwrite(HEAP32[$0 + 20 >> 2], 1, $6, HEAP32[$0 + 64 >> 2]) | 0) != ($6 | 0)) {
             $5 = -1;
             $2 = 1;
            }
            if (!$2) {
             break label$15
            }
            break label$12;
           }
           if ($4 >>> 0 > 1) {
            break label$13
           }
           $6 = HEAP32[$0 + 32 >> 2];
           $2 = HEAP32[$3 + 8 >> 2] - $6 | 0;
           label$18 : {
            if ((fwrite($6, 1, $2, HEAP32[$0 + 64 >> 2]) | 0) != ($2 | 0)) {
             $2 = 1;
             $5 = -1;
             break label$18;
            }
            $2 = 0;
            if (($4 | 0) != 1) {
             break label$18
            }
            std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___setp_28char__2c_20char__29($0, HEAP32[$3 + 4 >> 2], HEAP32[$0 + 24 >> 2]);
            std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___pbump_28int_29($0, HEAP32[$0 + 28 >> 2] - HEAP32[$0 + 20 >> 2] | 0);
           }
           if ($2) {
            break label$12
           }
          }
          $2 = 0;
          break label$12;
         }
         std____2____throw_bad_cast_28_29();
         abort();
        }
        $2 = 1;
        $5 = -1;
       }
       if ($2) {
        break label$10
       }
       if (($4 | 0) == 1) {
        continue
       }
       break;
      };
      $2 = 0;
     }
     if ($2) {
      break label$2
     }
    }
    std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___setp_28char__2c_20char__29($0, $7, $8);
   }
   $5 = std____2__char_traits_char___not_eof_28int_29($1);
  }
  $0 = $3 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
  return $5 | 0;
 }
 
 function std____2__basic_filebuf_char_2c_20std____2__char_traits_char__20_____write_mode_28_29($0) {
  var $1 = 0, $2 = 0;
  if (!(HEAPU8[$0 + 92 | 0] & 16)) {
   std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___setg_28char__2c_20char__2c_20char__29($0, 0, 0, 0);
   $1 = HEAP32[$0 + 52 >> 2];
   label$2 : {
    if ($1 >>> 0 >= 9) {
     if (HEAPU8[$0 + 98 | 0]) {
      $2 = HEAP32[$0 + 32 >> 2];
      std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___setp_28char__2c_20char__29($0, $2, ($1 + $2 | 0) + -1 | 0);
      break label$2;
     }
     $1 = HEAP32[$0 + 56 >> 2];
     std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___setp_28char__2c_20char__29($0, $1, ($1 + HEAP32[$0 + 60 >> 2] | 0) + -1 | 0);
     break label$2;
    }
    std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___setp_28char__2c_20char__29($0, 0, 0);
   }
   HEAP32[$0 + 92 >> 2] = 16;
  }
 }
 
 function std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___pbump_28int_29($0, $1) {
  HEAP32[$0 + 24 >> 2] = HEAP32[$0 + 24 >> 2] + $1;
 }
 
 function std____2__codecvt_char_2c_20char_2c_20__mbstate_t___out_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20char_20const___2c_20char__2c_20char__2c_20char___29_20const($0, $1, $2, $3, $4, $5, $6, $7) {
  return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 12 >> 2]]($0, $1, $2, $3, $4, $5, $6, $7) | 0;
 }
 
 function std____2____compressed_pair__IO_FILE__2c_20int_20_28__29_28_IO_FILE__29_____compressed_pair__IO_FILE___2c_20int_20_28__29_28_IO_FILE__29__28_IO_FILE___2c_20int_20_28____29_28_IO_FILE__29_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  std____2____compressed_pair_elem__IO_FILE__2c_200_2c_20false_____compressed_pair_elem__IO_FILE___2c_20void__28_IO_FILE___29($0, $1);
  std____2____compressed_pair_elem__IO_FILE__2c_200_2c_20false_____compressed_pair_elem__IO_FILE___2c_20void__28_IO_FILE___29($0 + 4 | 0, $2);
  return $0 | 0;
 }
 
 function std____2__unique_ptr__IO_FILE_2c_20int_20_28__29_28_IO_FILE__29___reset_28_IO_FILE__29($0) {
  var $1 = 0;
  $1 = HEAP32[$0 >> 2];
  HEAP32[$0 >> 2] = 0;
  label$1 : {
   if (!$1) {
    break label$1
   }
   $0 = HEAP32[std____2____compressed_pair__IO_FILE__2c_20int_20_28__29_28_IO_FILE__29___second_28_29($0) >> 2];
   HEAP32[16874] = 0;
   __invoke_i1___22class_std____2__basic_ifstream_22_($0 | 0, $1 | 0) | 0;
   $0 = HEAP32[16874];
   HEAP32[16874] = 0;
   if (($0 | 0) != 1) {
    break label$1
   }
   $0 = __cxa_find_matching_catch_3(0) | 0;
   getTempRet0() | 0;
   __clang_call_terminate($0);
   abort();
  }
 }
 
 function std____2____compressed_pair_elem__IO_FILE__2c_200_2c_20false_____compressed_pair_elem__IO_FILE___2c_20void__28_IO_FILE___29($0, $1) {
  HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
 }
 
 function std____2____compressed_pair__IO_FILE__2c_20int_20_28__29_28_IO_FILE__29___second_28_29($0) {
  return $0 + 4 | 0;
 }
 
 function long_20const__20std____2__max_long_2c_20std____2____less_long_2c_20long__20__28long_20const__2c_20long_20const__2c_20std____2____less_long_2c_20long__29($0, $1) {
  var $2 = 0, $3 = 0;
  $2 = global$0 - 16 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  $3 = std____2____less_long_2c_20long___operator_28_29_28long_20const__2c_20long_20const__29_20const($0, $1);
  $2 = $2 + 16 | 0;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  return $3 ? $1 : $0;
 }
 
 function std____2____less_long_2c_20long___operator_28_29_28long_20const__2c_20long_20const__29_20const($0, $1) {
  return HEAP32[$0 >> 2] < HEAP32[$1 >> 2];
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____is_long_28_29_20const($0) {
  return HEAP8[$0 + 11 | 0] < 0;
 }
 
 function std____2__allocator_traits_std____2__allocator_char__20___deallocate_28std____2__allocator_char___2c_20char__2c_20unsigned_20long_29($0, $1, $2) {
  std____2__allocator_char___deallocate_28char__2c_20unsigned_20long_29($1, $2);
 }
 
 function std____2__allocator_char___deallocate_28char__2c_20unsigned_20long_29($0, $1) {
  HEAP32[16874] = 0;
  dlfree($0);
  $0 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($0 | 0) != 1) {
   return
  }
  $0 = __cxa_find_matching_catch_3(0) | 0;
  getTempRet0() | 0;
  __clang_call_terminate($0);
  abort();
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_long_cap_28_29_20const($0) {
  return HEAP32[$0 + 8 >> 2] & 2147483647;
 }
 
 function std____2____libcpp_deallocate_28void__2c_20unsigned_20long_2c_20unsigned_20long_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  dlfree($0);
 }
 
 function std____2___DeallocateCaller____do_call_28void__29($0) {
  $0 = $0 | 0;
  dlfree($0);
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_pointer_28_29_20const($0) {
  if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____is_long_28_29_20const($0)) {
   return HEAP32[$0 >> 2]
  }
  return $0;
 }
 
 function std____2____vector_base_double_2c_20std____2__allocator_double__20___clear_28_29($0) {
  std____2____vector_base_double_2c_20std____2__allocator_double__20_____destruct_at_end_28double__29($0, HEAP32[$0 >> 2]);
 }
 
 function std____2____vector_base_double_2c_20std____2__allocator_double__20_____alloc_28_29($0) {
  return $0 + 8 | 0;
 }
 
 function std____2____vector_base_double_2c_20std____2__allocator_double__20___capacity_28_29_20const($0) {
  return HEAP32[std____2____vector_base_double_2c_20std____2__allocator_double__20_____alloc_28_29($0) >> 2] - HEAP32[$0 >> 2] >> 3;
 }
 
 function std____2____vector_base_double_2c_20std____2__allocator_double__20_____destruct_at_end_28double__29($0, $1) {
  var $2 = 0, $3 = 0;
  $2 = HEAP32[$0 + 4 >> 2];
  label$1 : {
   while (1) {
    if (($1 | 0) == ($2 | 0)) {
     break label$1
    }
    std____2____vector_base_double_2c_20std____2__allocator_double__20_____alloc_28_29($0);
    HEAP32[16874] = 0;
    $2 = $2 + -8 | 0;
    $3 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($3 | 0) != 1) {
     continue
    }
    break;
   };
   $0 = __cxa_find_matching_catch_3(0) | 0;
   getTempRet0() | 0;
   __clang_call_terminate($0);
   abort();
  }
  HEAP32[$0 + 4 >> 2] = $1;
 }
 
 function std____2__enable_if___is_forward_iterator_double____value_2c_20void___type_20std____2__vector_double_2c_20std____2__allocator_double__20_____construct_at_end_double___28double__2c_20double__2c_20unsigned_20long_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0;
  $3 = global$0 - 16 | 0;
  $4 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  std____2____vector_base_double_2c_20std____2__allocator_double__20_____alloc_28_29($0);
  std____2__enable_if__28_28is_trivially_move_constructible_double___value_29_20___20_28is_same_double_2c_20double___value_29_29_20___20_28_28std____2__integral_constant_bool_2c_20true___value_29_20___20_28__28__has_construct_std____2__allocator_double__2c_20double__2c_20bool____value_29_29_29_2c_20void___type_20std____2__allocator_traits_std____2__allocator_double__20_____construct_range_forward_double_2c_20double_2c_20double_2c_20double__28std____2__allocator_double___2c_20bool__2c_20bool__2c_20double___29($1, $2, $0 + 4 | 0);
  $0 = $3 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function std____2__vector_double_2c_20std____2__allocator_double__20_____vdeallocate_28_29($0) {
  if (HEAP32[$0 >> 2]) {
   std____2__vector_double_2c_20std____2__allocator_double__20___clear_28_29($0);
   std____2__allocator_traits_std____2__allocator_char__20___deallocate_28std____2__allocator_char___2c_20char__2c_20unsigned_20long_29(std____2____vector_base_double_2c_20std____2__allocator_double__20_____alloc_28_29($0), HEAP32[$0 >> 2], std____2____vector_base_double_2c_20std____2__allocator_double__20___capacity_28_29_20const($0));
   HEAP32[std____2____vector_base_double_2c_20std____2__allocator_double__20_____alloc_28_29($0) >> 2] = 0;
   HEAP32[$0 >> 2] = 0;
   HEAP32[$0 + 4 >> 2] = 0;
  }
 }
 
 function std____2__vector_double_2c_20std____2__allocator_double__20_____recommend_28unsigned_20long_29_20const($0, $1) {
  var $2 = 0, $3 = 0;
  $2 = global$0 - 16 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  HEAP32[$2 + 12 >> 2] = $1;
  $1 = std____2__vector_double_2c_20std____2__allocator_double__20___max_size_28_29_20const($0);
  if (HEAPU32[$2 + 12 >> 2] <= $1 >>> 0) {
   $0 = std____2____vector_base_double_2c_20std____2__allocator_double__20___capacity_28_29_20const($0);
   if ($0 >>> 0 < $1 >>> 1 >>> 0) {
    HEAP32[$2 + 8 >> 2] = $0 << 1;
    $1 = HEAP32[unsigned_20long_20const__20std____2__max_unsigned_20long__28unsigned_20long_20const__2c_20unsigned_20long_20const__29($2 + 8 | 0, $2 + 12 | 0) >> 2];
   }
   $0 = $2 + 16 | 0;
   if ($0 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $0;
   return $1;
  }
  std____2____vector_base_common_true_____throw_length_error_28_29_20const();
  abort();
 }
 
 function std____2__vector_double_2c_20std____2__allocator_double__20_____invalidate_all_iterators_28_29($0) {
  $0 = $0 | 0;
 }
 
 function std____2__enable_if__28is_same_std____2__remove_const_double___type_2c_20double___value_29_20___20_28is_trivially_copy_assignable_double___value_29_2c_20double____type_20std____2____copy_double_2c_20double__28double__2c_20double__2c_20double__29($0, $1, $2) {
  var $3 = 0;
  $1 = $1 - $0 | 0;
  $3 = $1 >> 3;
  if ($1) {
   memmove($2, $0, $1)
  }
  return ($3 << 3) + $2 | 0;
 }
 
 function std____2__vector_double_2c_20std____2__allocator_double__20_____RAII_IncreaseAnnotator____RAII_IncreaseAnnotator_28std____2__vector_double_2c_20std____2__allocator_double__20__20const__2c_20unsigned_20long_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  return $0 | 0;
 }
 
 function std____2__enable_if__28_28is_trivially_move_constructible_double___value_29_20___20_28is_same_double_2c_20double___value_29_29_20___20_28_28std____2__integral_constant_bool_2c_20true___value_29_20___20_28__28__has_construct_std____2__allocator_double__2c_20double__2c_20bool____value_29_29_29_2c_20void___type_20std____2__allocator_traits_std____2__allocator_double__20_____construct_range_forward_double_2c_20double_2c_20double_2c_20double__28std____2__allocator_double___2c_20bool__2c_20bool__2c_20double___29($0, $1, $2) {
  $1 = $1 - $0 | 0;
  if (($1 | 0) >= 1) {
   memcpy(HEAP32[$2 >> 2], $0, $1);
   HEAP32[$2 >> 2] = $1 + HEAP32[$2 >> 2];
  }
 }
 
 function std____2__vector_double_2c_20std____2__allocator_double__20_____annotate_shrink_28unsigned_20long_29_20const($0, $1) {
  std____2____vector_base_double_2c_20std____2__allocator_double__20___capacity_28_29_20const($0);
  std____2__vector_double_2c_20std____2__allocator_double__20___size_28_29_20const($0);
 }
 
 function std____2__vector_double_2c_20std____2__allocator_double__20___clear_28_29($0) {
  var $1 = 0;
  $1 = std____2__vector_double_2c_20std____2__allocator_double__20___size_28_29_20const($0);
  std____2____vector_base_double_2c_20std____2__allocator_double__20___clear_28_29($0);
  std____2__vector_double_2c_20std____2__allocator_double__20_____annotate_shrink_28unsigned_20long_29_20const($0, $1);
 }
 
 function std____2__vector_double_2c_20std____2__allocator_double__20___max_size_28_29_20const($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  std____2____vector_base_double_2c_20std____2__allocator_double__20_____alloc_28_29($0);
  HEAP32[$1 + 12 >> 2] = 536870911;
  HEAP32[16874] = 0;
  HEAP32[$1 + 8 >> 2] = 2147483647;
  $0 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(38, $1 + 12 | 0, $1 + 8 | 0) | 0;
  $2 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($2 | 0) != 1) {
   $0 = HEAP32[$0 >> 2];
   $1 = $1 + 16 | 0;
   if ($1 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $1;
   return $0;
  }
  $0 = __cxa_find_matching_catch_3(0) | 0;
  getTempRet0() | 0;
  __clang_call_terminate($0);
  abort();
 }
 
 function std____2__vector_double_2c_20std____2__allocator_double__20_____annotate_new_28unsigned_20long_29_20const($0, $1) {
  std____2____vector_base_double_2c_20std____2__allocator_double__20___capacity_28_29_20const($0);
  std____2____vector_base_double_2c_20std____2__allocator_double__20___capacity_28_29_20const($0);
 }
 
 function unsigned_20long_20const__20std____2__max_unsigned_20long__28unsigned_20long_20const__2c_20unsigned_20long_20const__29($0, $1) {
  return unsigned_20long_20const__20std____2__max_unsigned_20long_2c_20std____2____less_unsigned_20long_2c_20unsigned_20long__20__28unsigned_20long_20const__2c_20unsigned_20long_20const__2c_20std____2____less_unsigned_20long_2c_20unsigned_20long__29($0, $1);
 }
 
 function std____2__allocator_double___allocate_28unsigned_20long_2c_20void_20const__29($0) {
  if (536870911 < $0 >>> 0) {
   std____2____throw_length_error_28char_20const__29(1416);
   abort();
  }
  return operator_20new_28unsigned_20long_29($0 << 3);
 }
 
 function std____2____throw_length_error_28char_20const__29($0) {
  var $1 = 0;
  $1 = __cxa_allocate_exception(8) | 0;
  HEAP32[16874] = 0;
  __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(46, $1 | 0, $0 | 0) | 0;
  $0 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($0 | 0) != 1) {
   __cxa_throw($1 | 0, 48860, 47);
   abort();
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  __cxa_free_exception($1 | 0);
  __resumeException($0 | 0);
  abort();
 }
 
 function std__length_error__length_error_28char_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  std__logic_error__logic_error_28char_20const__29($0, $1);
  HEAP32[$0 >> 2] = 48828;
  return $0 | 0;
 }
 
 function unsigned_20long_20const__20std____2__max_unsigned_20long_2c_20std____2____less_unsigned_20long_2c_20unsigned_20long__20__28unsigned_20long_20const__2c_20unsigned_20long_20const__2c_20std____2____less_unsigned_20long_2c_20unsigned_20long__29($0, $1) {
  var $2 = 0, $3 = 0;
  $2 = global$0 - 16 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  $3 = std____2____less_unsigned_20long_2c_20unsigned_20long___operator_28_29_28unsigned_20long_20const__2c_20unsigned_20long_20const__29_20const($0, $1);
  $2 = $2 + 16 | 0;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  return $3 ? $1 : $0;
 }
 
 function std____2____less_unsigned_20long_2c_20unsigned_20long___operator_28_29_28unsigned_20long_20const__2c_20unsigned_20long_20const__29_20const($0, $1) {
  return HEAPU32[$0 >> 2] < HEAPU32[$1 >> 2];
 }
 
 function std____2____split_buffer_double_2c_20std____2__allocator_double_______split_buffer_28unsigned_20long_2c_20unsigned_20long_2c_20std____2__allocator_double___29($0, $1, $2, $3) {
  var $4 = 0, $5 = 0;
  $5 = global$0 - 16 | 0;
  $4 = $5;
  if ($4 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  $4 = 0;
  HEAP32[$5 + 12 >> 2] = 0;
  std____2____compressed_pair_double__2c_20std____2__allocator_double_______compressed_pair_std__nullptr_t_2c_20std____2__allocator_double____28std__nullptr_t___2c_20std____2__allocator_double___29($0 + 12 | 0, $5 + 12 | 0, $3);
  if ($1) {
   std____2____split_buffer_double_2c_20std____2__allocator_double_______alloc_28_29($0);
   $4 = std____2__allocator_double___allocate_28unsigned_20long_2c_20void_20const__29($1);
  }
  HEAP32[$0 >> 2] = $4;
  $2 = ($2 << 3) + $4 | 0;
  HEAP32[$0 + 8 >> 2] = $2;
  HEAP32[$0 + 4 >> 2] = $2;
  HEAP32[std____2____split_buffer_double_2c_20std____2__allocator_double_______end_cap_28_29($0) >> 2] = ($1 << 3) + $4;
  $1 = $5 + 16 | 0;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  return $0;
 }
 
 function std____2____split_buffer_double_2c_20std____2__allocator_double_______construct_at_end_28unsigned_20long_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  std____2____split_buffer_double_2c_20std____2__allocator_double_______alloc_28_29($0);
  while (1) {
   void_20std____2__allocator_traits_std____2__allocator_double__20_____construct_double__28std____2__integral_constant_bool_2c_20true__2c_20std____2__allocator_double___2c_20double__29(HEAP32[$0 + 8 >> 2]);
   HEAP32[$0 + 8 >> 2] = HEAP32[$0 + 8 >> 2] + 8;
   $1 = $1 + -1 | 0;
   if ($1) {
    continue
   }
   break;
  };
 }
 
 function std____2__vector_double_2c_20std____2__allocator_double__20_____swap_out_circular_buffer_28std____2____split_buffer_double_2c_20std____2__allocator_double_____29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0;
  std____2__vector_double_2c_20std____2__allocator_double__20_____annotate_delete_28_29_20const($0);
  $3 = std____2____vector_base_double_2c_20std____2__allocator_double__20_____alloc_28_29($0);
  $2 = $1 + 4 | 0;
  std____2__enable_if__28_28std____2__integral_constant_bool_2c_20true___value_29_20___20_28__28__has_construct_std____2__allocator_double__2c_20bool__2c_20bool___value_29_29_29_20___20_28is_trivially_move_constructible_bool___value_29_2c_20void___type_20std____2__allocator_traits_std____2__allocator_double__20_____construct_backward_double__28std____2__allocator_double___2c_20bool__2c_20bool__2c_20bool___29($3, HEAP32[$0 >> 2], HEAP32[$0 + 4 >> 2], $2);
  std____2__enable_if__28is_move_constructible_double____value_29_20___20_28is_move_assignable_double____value_29_2c_20void___type_20std____2__swap_double___28double___2c_20double___29($0, $2);
  std____2__enable_if__28is_move_constructible_double____value_29_20___20_28is_move_assignable_double____value_29_2c_20void___type_20std____2__swap_double___28double___2c_20double___29($0 + 4 | 0, $1 + 8 | 0);
  std____2__enable_if__28is_move_constructible_double____value_29_20___20_28is_move_assignable_double____value_29_2c_20void___type_20std____2__swap_double___28double___2c_20double___29(std____2____vector_base_double_2c_20std____2__allocator_double__20_____alloc_28_29($0), std____2____split_buffer_double_2c_20std____2__allocator_double_______end_cap_28_29($1));
  HEAP32[$1 >> 2] = HEAP32[$1 + 4 >> 2];
  std____2__vector_double_2c_20std____2__allocator_double__20_____annotate_new_28unsigned_20long_29_20const($0, std____2__vector_double_2c_20std____2__allocator_double__20___size_28_29_20const($0));
 }
 
 function std____2____split_buffer_double_2c_20std____2__allocator_double________split_buffer_28_29($0) {
  std____2____split_buffer_double_2c_20std____2__allocator_double_______destruct_at_end_28double__2c_20std____2__integral_constant_bool_2c_20false__29($0, HEAP32[$0 + 4 >> 2]);
  if (HEAP32[$0 >> 2]) {
   std____2__allocator_traits_std____2__allocator_char__20___deallocate_28std____2__allocator_char___2c_20char__2c_20unsigned_20long_29(std____2____split_buffer_double_2c_20std____2__allocator_double_______alloc_28_29($0), HEAP32[$0 >> 2], HEAP32[std____2____split_buffer_double_2c_20std____2__allocator_double_______end_cap_28_29($0) >> 2] - HEAP32[$0 >> 2] >> 3)
  }
 }
 
 function std____2____compressed_pair_double__2c_20std____2__allocator_double_______compressed_pair_std__nullptr_t_2c_20std____2__allocator_double____28std__nullptr_t___2c_20std____2__allocator_double___29($0, $1, $2) {
  std____2____compressed_pair_elem_double__2c_200_2c_20false_____compressed_pair_elem_std__nullptr_t_2c_20void__28std__nullptr_t___29($0, $1);
  std____2____compressed_pair_elem_std____2__allocator_double___2c_201_2c_20false_____compressed_pair_elem_std____2__allocator_double___2c_20void__28std____2__allocator_double___29($0 + 4 | 0, $2);
 }
 
 function std____2____split_buffer_double_2c_20std____2__allocator_double_______alloc_28_29($0) {
  return std____2____compressed_pair_double__2c_20std____2__allocator_double_____second_28_29($0 + 12 | 0);
 }
 
 function std____2____split_buffer_double_2c_20std____2__allocator_double_______end_cap_28_29($0) {
  return $0 + 12 | 0;
 }
 
 function std____2__enable_if__28_28std____2__integral_constant_bool_2c_20true___value_29_20___20_28__28__has_construct_std____2__allocator_double__2c_20bool__2c_20bool___value_29_29_29_20___20_28is_trivially_move_constructible_bool___value_29_2c_20void___type_20std____2__allocator_traits_std____2__allocator_double__20_____construct_backward_double__28std____2__allocator_double___2c_20bool__2c_20bool__2c_20bool___29($0, $1, $2, $3) {
  $2 = $2 - $1 | 0;
  $0 = HEAP32[$3 >> 2] - $2 | 0;
  HEAP32[$3 >> 2] = $0;
  if (($2 | 0) >= 1) {
   memcpy($0, $1, $2)
  }
 }
 
 function std____2__enable_if__28is_move_constructible_double____value_29_20___20_28is_move_assignable_double____value_29_2c_20void___type_20std____2__swap_double___28double___2c_20double___29($0, $1) {
  var $2 = 0, $3 = 0;
  $2 = global$0 - 16 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  HEAP32[$2 + 12 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$1 >> 2] = HEAP32[$2 + 12 >> 2];
  $0 = $2 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function void_20std____2__allocator_traits_std____2__allocator_double__20_____construct_double__28std____2__integral_constant_bool_2c_20true__2c_20std____2__allocator_double___2c_20double__29($0) {
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
 }
 
 function std____2____compressed_pair_elem_double__2c_200_2c_20false_____compressed_pair_elem_std__nullptr_t_2c_20void__28std__nullptr_t___29($0, $1) {
  HEAP32[$0 >> 2] = 0;
 }
 
 function std____2____compressed_pair_elem_std____2__allocator_double___2c_201_2c_20false_____compressed_pair_elem_std____2__allocator_double___2c_20void__28std____2__allocator_double___29($0, $1) {
  HEAP32[$0 >> 2] = $1;
  return $0;
 }
 
 function std____2____compressed_pair_double__2c_20std____2__allocator_double_____second_28_29($0) {
  $0 = $0 | 0;
  return HEAP32[$0 + 4 >> 2];
 }
 
 function std____2____split_buffer_double_2c_20std____2__allocator_double_______destruct_at_end_28double__2c_20std____2__integral_constant_bool_2c_20false__29($0, $1) {
  var $2 = 0;
  label$1 : {
   while (1) {
    if (HEAP32[$0 + 8 >> 2] == ($1 | 0)) {
     break label$1
    }
    std____2____split_buffer_double_2c_20std____2__allocator_double_______alloc_28_29($0);
    HEAP32[$0 + 8 >> 2] = HEAP32[$0 + 8 >> 2] + -8;
    HEAP32[16874] = 0;
    $2 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($2 | 0) != 1) {
     continue
    }
    break;
   };
   $0 = __cxa_find_matching_catch_3(0) | 0;
   getTempRet0() | 0;
   __clang_call_terminate($0);
   abort();
  }
 }
 
 function std____2__ios_base__ios_base_28_29($0) {
  HEAP32[$0 >> 2] = 34016;
 }
 
 function std____2__basic_ios_char_2c_20std____2__char_traits_char__20___init_28std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  std____2__ios_base__init_28void__29($0, $1);
  HEAP32[$0 + 72 >> 2] = 0;
  HEAP32[$0 + 76 >> 2] = -1;
 }
 
 function std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___getloc_28_29_20const($0, $1) {
  std____2__locale__locale_28std____2__locale_20const__29($0, $1 + 4 | 0);
 }
 
 function bool_20std____2__has_facet_std____2__codecvt_char_2c_20char_2c_20__mbstate_t__20__28std____2__locale_20const__29($0) {
  var $1 = 0;
  HEAP32[16874] = 0;
  $0 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(48, $0 | 0, 69824) | 0;
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($1 | 0) != 1) {
   return $0
  }
  $0 = __cxa_find_matching_catch_3(0) | 0;
  getTempRet0() | 0;
  __clang_call_terminate($0);
  abort();
 }
 
 function std____2__basic_filebuf_char_2c_20std____2__char_traits_char__20_____make_mdstring_28unsigned_20int_29($0) {
  var $1 = 0;
  label$1 : {
   label$2 : {
    $1 = ($0 & -3) + -1 | 0;
    if ($1 >>> 0 > 59) {
     break label$2
    }
    $0 = 1484;
    label$3 : {
     switch ($1 - 1 | 0) {
     default:
      return 1486;
     case 6:
      return 1488;
     case 22:
      return 1490;
     case 54:
      return 1493;
     case 7:
     case 23:
      return 1496;
     case 18:
     case 50:
      return 1499;
     case 3:
     case 19:
      return 1502;
     case 10:
      return 1505;
     case 26:
      return 1508;
     case 58:
      return 1512;
     case 14:
     case 46:
      break label$1;
     case 0:
     case 1:
     case 2:
     case 4:
     case 5:
     case 8:
     case 9:
     case 12:
     case 13:
     case 16:
     case 17:
     case 20:
     case 21:
     case 24:
     case 25:
     case 28:
     case 29:
     case 30:
     case 31:
     case 32:
     case 33:
     case 34:
     case 35:
     case 36:
     case 37:
     case 38:
     case 39:
     case 40:
     case 41:
     case 42:
     case 43:
     case 44:
     case 45:
     case 47:
     case 48:
     case 49:
     case 51:
     case 52:
     case 53:
     case 55:
     case 56:
     case 57:
      break label$2;
     case 11:
     case 27:
      break label$3;
     };
    }
    return 1516;
   }
   $0 = 0;
  }
  return $0;
 }
 
 function std____2____compressed_pair_unsigned_20char__2c_20std____2__allocator_unsigned_20char__20_____compressed_pair_std__nullptr_t_2c_20true__28std__nullptr_t___29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  std____2____compressed_pair_elem_double__2c_200_2c_20false_____compressed_pair_elem_std__nullptr_t_2c_20void__28std__nullptr_t___29($0, $1);
  return $0 | 0;
 }
 
 function std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___equal_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29_20const($0, $1) {
  return std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20_____test_for_eof_28_29_20const($0) ^ std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20_____test_for_eof_28_29_20const($1) ^ 1;
 }
 
 function std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___sgetc_28_29($0) {
  var $1 = 0;
  $1 = HEAP32[$0 + 12 >> 2];
  if (($1 | 0) == HEAP32[$0 + 16 >> 2]) {
   return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 36 >> 2]]($0) | 0
  }
  return std____2__char_traits_char___to_int_type_28char_29(HEAP8[$1 | 0]);
 }
 
 function std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___sbumpc_28_29($0) {
  var $1 = 0;
  $1 = HEAP32[$0 + 12 >> 2];
  if (($1 | 0) == HEAP32[$0 + 16 >> 2]) {
   return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 40 >> 2]]($0) | 0
  }
  HEAP32[$0 + 12 >> 2] = $1 + 1;
  return std____2__char_traits_char___to_int_type_28char_29(HEAP8[$1 | 0]);
 }
 
 function std____2____vector_base_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20___capacity_28_29_20const($0) {
  return HEAP32[std____2____vector_base_double_2c_20std____2__allocator_double__20_____alloc_28_29($0) >> 2] - HEAP32[$0 >> 2] | 0;
 }
 
 function std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20_____test_for_eof_28_29_20const($0) {
  var $1 = 0;
  $1 = HEAP32[$0 >> 2];
  label$1 : {
   if (!$1) {
    break label$1
   }
   if (!std____2__char_traits_char___eq_int_type_28int_2c_20int_29(std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___sgetc_28_29($1), -1)) {
    break label$1
   }
   HEAP32[$0 >> 2] = 0;
  }
  return !HEAP32[$0 >> 2];
 }
 
 function std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20_____recommend_28unsigned_20long_29_20const($0, $1) {
  var $2 = 0, $3 = 0;
  $2 = global$0 - 16 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  HEAP32[$2 + 12 >> 2] = $1;
  $1 = std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20___max_size_28_29_20const($0);
  if (HEAPU32[$2 + 12 >> 2] <= $1 >>> 0) {
   $0 = std____2____vector_base_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20___capacity_28_29_20const($0);
   if ($0 >>> 0 < $1 >>> 1 >>> 0) {
    HEAP32[$2 + 8 >> 2] = $0 << 1;
    $1 = HEAP32[unsigned_20long_20const__20std____2__max_unsigned_20long__28unsigned_20long_20const__2c_20unsigned_20long_20const__29($2 + 8 | 0, $2 + 12 | 0) >> 2];
   }
   $0 = $2 + 16 | 0;
   if ($0 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $0;
   return $1;
  }
  std____2____vector_base_common_true_____throw_length_error_28_29_20const();
  abort();
 }
 
 function std____2____split_buffer_unsigned_20char_2c_20std____2__allocator_unsigned_20char_______split_buffer_28unsigned_20long_2c_20unsigned_20long_2c_20std____2__allocator_unsigned_20char___29($0, $1, $2, $3) {
  var $4 = 0, $5 = 0;
  $5 = global$0 - 16 | 0;
  $4 = $5;
  if ($4 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  $4 = 0;
  HEAP32[$5 + 12 >> 2] = 0;
  std____2____compressed_pair_double__2c_20std____2__allocator_double_______compressed_pair_std__nullptr_t_2c_20std____2__allocator_double____28std__nullptr_t___2c_20std____2__allocator_double___29($0 + 12 | 0, $5 + 12 | 0, $3);
  if ($1) {
   std____2____split_buffer_double_2c_20std____2__allocator_double_______alloc_28_29($0);
   $4 = std____2__allocator_unsigned_20char___allocate_28unsigned_20long_2c_20void_20const__29($1);
  }
  HEAP32[$0 >> 2] = $4;
  $2 = $2 + $4 | 0;
  HEAP32[$0 + 8 >> 2] = $2;
  HEAP32[$0 + 4 >> 2] = $2;
  HEAP32[std____2____split_buffer_double_2c_20std____2__allocator_double_______end_cap_28_29($0) >> 2] = $1 + $4;
  $1 = $5 + 16 | 0;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  return $0;
 }
 
 function std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20_____swap_out_circular_buffer_28std____2____split_buffer_unsigned_20char_2c_20std____2__allocator_unsigned_20char_____29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0;
  std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20_____annotate_delete_28_29_20const($0);
  $3 = std____2____vector_base_double_2c_20std____2__allocator_double__20_____alloc_28_29($0);
  $2 = $1 + 4 | 0;
  std____2__enable_if__28_28std____2__integral_constant_bool_2c_20true___value_29_20___20_28__28__has_construct_std____2__allocator_double__2c_20bool__2c_20bool___value_29_29_29_20___20_28is_trivially_move_constructible_bool___value_29_2c_20void___type_20std____2__allocator_traits_std____2__allocator_double__20_____construct_backward_double__28std____2__allocator_double___2c_20bool__2c_20bool__2c_20bool___29($3, HEAP32[$0 >> 2], HEAP32[$0 + 4 >> 2], $2);
  std____2__enable_if__28is_move_constructible_double____value_29_20___20_28is_move_assignable_double____value_29_2c_20void___type_20std____2__swap_double___28double___2c_20double___29($0, $2);
  std____2__enable_if__28is_move_constructible_double____value_29_20___20_28is_move_assignable_double____value_29_2c_20void___type_20std____2__swap_double___28double___2c_20double___29($0 + 4 | 0, $1 + 8 | 0);
  std____2__enable_if__28is_move_constructible_double____value_29_20___20_28is_move_assignable_double____value_29_2c_20void___type_20std____2__swap_double___28double___2c_20double___29(std____2____vector_base_double_2c_20std____2__allocator_double__20_____alloc_28_29($0), std____2____split_buffer_double_2c_20std____2__allocator_double_______end_cap_28_29($1));
  HEAP32[$1 >> 2] = HEAP32[$1 + 4 >> 2];
  std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20___size_28_29_20const($0);
  std____2____vector_base_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20___capacity_28_29_20const($0);
  std____2____vector_base_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20___capacity_28_29_20const($0);
 }
 
 function std____2____split_buffer_unsigned_20char_2c_20std____2__allocator_unsigned_20char________split_buffer_28_29($0) {
  std____2____split_buffer_unsigned_20char_2c_20std____2__allocator_unsigned_20char_______destruct_at_end_28unsigned_20char__2c_20std____2__integral_constant_bool_2c_20false__29($0, HEAP32[$0 + 4 >> 2]);
  if (HEAP32[$0 >> 2]) {
   std____2__allocator_traits_std____2__allocator_char__20___deallocate_28std____2__allocator_char___2c_20char__2c_20unsigned_20long_29(std____2____split_buffer_double_2c_20std____2__allocator_double_______alloc_28_29($0), HEAP32[$0 >> 2], HEAP32[std____2____split_buffer_double_2c_20std____2__allocator_double_______end_cap_28_29($0) >> 2] - HEAP32[$0 >> 2] | 0)
  }
 }
 
 function std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20___max_size_28_29_20const($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  std____2____vector_base_double_2c_20std____2__allocator_double__20_____alloc_28_29($0);
  HEAP32[$1 + 12 >> 2] = -1;
  HEAP32[16874] = 0;
  HEAP32[$1 + 8 >> 2] = 2147483647;
  $0 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(38, $1 + 12 | 0, $1 + 8 | 0) | 0;
  $2 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($2 | 0) != 1) {
   $0 = HEAP32[$0 >> 2];
   $1 = $1 + 16 | 0;
   if ($1 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $1;
   return $0;
  }
  $0 = __cxa_find_matching_catch_3(0) | 0;
  getTempRet0() | 0;
  __clang_call_terminate($0);
  abort();
 }
 
 function std____2__allocator_unsigned_20char___allocate_28unsigned_20long_2c_20void_20const__29($0) {
  if (4294967295 < $0 >>> 0) {
   std____2____throw_length_error_28char_20const__29(1416);
   abort();
  }
  return operator_20new_28unsigned_20long_29($0);
 }
 
 function std____2____split_buffer_unsigned_20char_2c_20std____2__allocator_unsigned_20char_______destruct_at_end_28unsigned_20char__2c_20std____2__integral_constant_bool_2c_20false__29($0, $1) {
  var $2 = 0;
  label$1 : {
   while (1) {
    if (HEAP32[$0 + 8 >> 2] == ($1 | 0)) {
     break label$1
    }
    std____2____split_buffer_double_2c_20std____2__allocator_double_______alloc_28_29($0);
    HEAP32[$0 + 8 >> 2] = HEAP32[$0 + 8 >> 2] + -1;
    HEAP32[16874] = 0;
    $2 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($2 | 0) != 1) {
     continue
    }
    break;
   };
   $0 = __cxa_find_matching_catch_3(0) | 0;
   getTempRet0() | 0;
   __clang_call_terminate($0);
   abort();
  }
 }
 
 function std____2____vector_base_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20_____destruct_at_end_28unsigned_20char__29($0, $1) {
  var $2 = 0, $3 = 0;
  $2 = HEAP32[$0 + 4 >> 2];
  label$1 : {
   while (1) {
    if (($1 | 0) == ($2 | 0)) {
     break label$1
    }
    std____2____vector_base_double_2c_20std____2__allocator_double__20_____alloc_28_29($0);
    HEAP32[16874] = 0;
    $2 = $2 + -1 | 0;
    $3 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($3 | 0) != 1) {
     continue
    }
    break;
   };
   $0 = __cxa_find_matching_catch_3(0) | 0;
   getTempRet0() | 0;
   __clang_call_terminate($0);
   abort();
  }
  HEAP32[$0 + 4 >> 2] = $1;
 }
 
 function std____2__basic_ios_char_2c_20std____2__char_traits_char__20___fill_28_29_20const($0) {
  $0 = $0 | 0;
  if (std____2__char_traits_char___eq_int_type_28int_2c_20int_29(-1, HEAP32[$0 + 76 >> 2])) {
   HEAP32[$0 + 76 >> 2] = std____2__basic_ios_char_2c_20std____2__char_traits_char__20___widen_28char_29_20const($0, 32)
  }
  return HEAP8[$0 + 76 | 0];
 }
 
 function std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2____pad_and_output_char_2c_20std____2__char_traits_char__20__28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20char_20const__2c_20char_20const__2c_20char_20const__2c_20std____2__ios_base__2c_20char_29($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $7 = 0, $8 = 0, $9 = 0;
  $9 = global$0 - 16 | 0;
  $7 = $9;
  if ($9 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $7;
  label$2 : {
   label$3 : {
    if (!$0) {
     $7 = 0;
     break label$3;
    }
    $6 = HEAP32[$4 + 12 >> 2];
    $7 = 0;
    $8 = $2 - $1 | 0;
    if (($8 | 0) >= 1) {
     if ((std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___sputn_28char_20const__2c_20long_29($0, $1, $8) | 0) != ($8 | 0)) {
      break label$3
     }
    }
    $1 = $3 - $1 | 0;
    $1 = ($6 | 0) > ($1 | 0) ? $6 - $1 | 0 : 0;
    if (($1 | 0) >= 1) {
     $5 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28unsigned_20long_2c_20char_29($9, $1, $5);
     $6 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_pointer_28_29_20const($5);
     HEAP32[16874] = 0;
     $6 = __invoke___22class_std____2__basic_istream_22____22class_std____2__basic_istream_22__i8__i32(50, $0 | 0, $6 | 0, $1 | 0) | 0;
     $8 = HEAP32[16874];
     HEAP32[16874] = 0;
     if (($8 | 0) == 1) {
      break label$2
     }
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($5);
     $1 = ($1 | 0) == ($6 | 0);
     if (!$1) {
      break label$3
     }
     $0 = $1 ? $0 : 0;
    }
    $1 = $3 - $2 | 0;
    if (($1 | 0) >= 1) {
     if ((std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___sputn_28char_20const__2c_20long_29($0, $2, $1) | 0) != ($1 | 0)) {
      break label$3
     }
    }
    std____2__ios_base__width_28long_29($4);
    $7 = $0;
   }
   $0 = $9 + 16 | 0;
   if ($0 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $0;
   return $7 | 0;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($5);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20___failed_28_29_20const($0) {
  return !HEAP32[$0 >> 2];
 }
 
 function std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___sputn_28char_20const__2c_20long_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0, $1, $2) | 0;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28unsigned_20long_2c_20char_29($0, $1, $2) {
  std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20_____compressed_pair_true_2c_20void__28_29($0);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____init_28unsigned_20long_2c_20char_29($0, $1, $2);
  return $0;
 }
 
 function std____2__ios_base__width_28long_29($0) {
  HEAP32[$0 + 12 >> 2] = 0;
 }
 
 function std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20_____compressed_pair_true_2c_20void__28_29($0) {
  $0 = $0 | 0;
  std____2____compressed_pair_elem_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_200_2c_20false_____compressed_pair_elem_28_29($0);
  return $0 | 0;
 }
 
 function std____2____compressed_pair_elem_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_200_2c_20false_____compressed_pair_elem_28_29($0) {
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$0 + 8 >> 2] = 0;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_short_size_28unsigned_20long_29($0, $1) {
  HEAP8[$0 + 11 | 0] = $1;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____recommend_28unsigned_20long_29($0) {
  var $1 = 0;
  if ($0 >>> 0 >= 11) {
   $1 = $0 + 16 & -16;
   $0 = $1 + -1 | 0;
   $0 = ($0 | 0) == 11 ? $1 : $0;
  } else {
   $0 = 10
  }
  return $0;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_pointer_28char__29($0, $1) {
  HEAP32[$0 >> 2] = $1;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_cap_28unsigned_20long_29($0, $1) {
  HEAP32[$0 + 8 >> 2] = $1 | -2147483648;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_size_28unsigned_20long_29($0, $1) {
  HEAP32[$0 + 4 >> 2] = $1;
 }
 
 function std____2__char_traits_char___assign_28char__2c_20unsigned_20long_2c_20char_29($0, $1, $2) {
  if ($1) {
   memset($0, std____2__char_traits_char___to_int_type_28char_29($2), $1)
  }
 }
 
 function std____2__char_traits_char___assign_28char__2c_20char_20const__29($0, $1) {
  HEAP8[$0 | 0] = HEAPU8[$1 | 0];
 }
 
 function std____2__ctype_char__20const__20std____2__use_facet_std____2__ctype_char__20__28std____2__locale_20const__29($0) {
  $0 = $0 | 0;
  return std____2__locale__use_facet_28std____2__locale__id__29_20const($0, 69816) | 0;
 }
 
 function std____2__ctype_char___widen_28char_29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($0, $1) | 0;
 }
 
 function std____2____vector_base_short_2c_20std____2__allocator_short__20___capacity_28_29_20const($0) {
  return HEAP32[std____2____vector_base_double_2c_20std____2__allocator_double__20_____alloc_28_29($0) >> 2] - HEAP32[$0 >> 2] >> 1;
 }
 
 function std____2____vector_base_short_2c_20std____2__allocator_short__20_____destruct_at_end_28short__29($0, $1) {
  var $2 = 0, $3 = 0;
  $2 = HEAP32[$0 + 4 >> 2];
  label$1 : {
   while (1) {
    if (($1 | 0) == ($2 | 0)) {
     break label$1
    }
    std____2____vector_base_double_2c_20std____2__allocator_double__20_____alloc_28_29($0);
    HEAP32[16874] = 0;
    $2 = $2 + -2 | 0;
    $3 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($3 | 0) != 1) {
     continue
    }
    break;
   };
   $0 = __cxa_find_matching_catch_3(0) | 0;
   getTempRet0() | 0;
   __clang_call_terminate($0);
   abort();
  }
  HEAP32[$0 + 4 >> 2] = $1;
 }
 
 function std____2__vector_short_2c_20std____2__allocator_short__20_____recommend_28unsigned_20long_29_20const($0, $1) {
  var $2 = 0, $3 = 0;
  $2 = global$0 - 16 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  HEAP32[$2 + 12 >> 2] = $1;
  $1 = std____2__vector_short_2c_20std____2__allocator_short__20___max_size_28_29_20const($0);
  if (HEAPU32[$2 + 12 >> 2] <= $1 >>> 0) {
   $0 = std____2____vector_base_short_2c_20std____2__allocator_short__20___capacity_28_29_20const($0);
   if ($0 >>> 0 < $1 >>> 1 >>> 0) {
    HEAP32[$2 + 8 >> 2] = $0 << 1;
    $1 = HEAP32[unsigned_20long_20const__20std____2__max_unsigned_20long__28unsigned_20long_20const__2c_20unsigned_20long_20const__29($2 + 8 | 0, $2 + 12 | 0) >> 2];
   }
   $0 = $2 + 16 | 0;
   if ($0 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $0;
   return $1;
  }
  std____2____vector_base_common_true_____throw_length_error_28_29_20const();
  abort();
 }
 
 function std____2____split_buffer_short_2c_20std____2__allocator_short_______split_buffer_28unsigned_20long_2c_20unsigned_20long_2c_20std____2__allocator_short___29($0, $1, $2, $3) {
  var $4 = 0, $5 = 0;
  $5 = global$0 - 16 | 0;
  $4 = $5;
  if ($4 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  $4 = 0;
  HEAP32[$5 + 12 >> 2] = 0;
  std____2____compressed_pair_double__2c_20std____2__allocator_double_______compressed_pair_std__nullptr_t_2c_20std____2__allocator_double____28std__nullptr_t___2c_20std____2__allocator_double___29($0 + 12 | 0, $5 + 12 | 0, $3);
  if ($1) {
   std____2____split_buffer_double_2c_20std____2__allocator_double_______alloc_28_29($0);
   $3 = $1;
   if (2147483647 < $1 >>> 0) {
    std____2____throw_length_error_28char_20const__29(1416);
    abort();
   }
   $4 = operator_20new_28unsigned_20long_29($3 << 1);
  }
  HEAP32[$0 >> 2] = $4;
  $2 = ($2 << 1) + $4 | 0;
  HEAP32[$0 + 8 >> 2] = $2;
  HEAP32[$0 + 4 >> 2] = $2;
  HEAP32[std____2____split_buffer_double_2c_20std____2__allocator_double_______end_cap_28_29($0) >> 2] = ($1 << 1) + $4;
  $1 = $5 + 16 | 0;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  return $0;
 }
 
 function std____2____split_buffer_short_2c_20std____2__allocator_short_______construct_at_end_28unsigned_20long_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  std____2____split_buffer_double_2c_20std____2__allocator_double_______alloc_28_29($0);
  while (1) {
   void_20std____2__allocator_traits_std____2__allocator_short__20_____construct_short__28std____2__integral_constant_bool_2c_20true__2c_20std____2__allocator_short___2c_20short__29(HEAP32[$0 + 8 >> 2]);
   HEAP32[$0 + 8 >> 2] = HEAP32[$0 + 8 >> 2] + 2;
   $1 = $1 + -1 | 0;
   if ($1) {
    continue
   }
   break;
  };
 }
 
 function std____2__vector_short_2c_20std____2__allocator_short__20_____swap_out_circular_buffer_28std____2____split_buffer_short_2c_20std____2__allocator_short_____29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0;
  std____2__vector_short_2c_20std____2__allocator_short__20_____annotate_delete_28_29_20const($0);
  $3 = std____2____vector_base_double_2c_20std____2__allocator_double__20_____alloc_28_29($0);
  $2 = $1 + 4 | 0;
  std____2__enable_if__28_28std____2__integral_constant_bool_2c_20true___value_29_20___20_28__28__has_construct_std____2__allocator_double__2c_20bool__2c_20bool___value_29_29_29_20___20_28is_trivially_move_constructible_bool___value_29_2c_20void___type_20std____2__allocator_traits_std____2__allocator_double__20_____construct_backward_double__28std____2__allocator_double___2c_20bool__2c_20bool__2c_20bool___29($3, HEAP32[$0 >> 2], HEAP32[$0 + 4 >> 2], $2);
  std____2__enable_if__28is_move_constructible_double____value_29_20___20_28is_move_assignable_double____value_29_2c_20void___type_20std____2__swap_double___28double___2c_20double___29($0, $2);
  std____2__enable_if__28is_move_constructible_double____value_29_20___20_28is_move_assignable_double____value_29_2c_20void___type_20std____2__swap_double___28double___2c_20double___29($0 + 4 | 0, $1 + 8 | 0);
  std____2__enable_if__28is_move_constructible_double____value_29_20___20_28is_move_assignable_double____value_29_2c_20void___type_20std____2__swap_double___28double___2c_20double___29(std____2____vector_base_double_2c_20std____2__allocator_double__20_____alloc_28_29($0), std____2____split_buffer_double_2c_20std____2__allocator_double_______end_cap_28_29($1));
  HEAP32[$1 >> 2] = HEAP32[$1 + 4 >> 2];
  std____2__vector_short_2c_20std____2__allocator_short__20___size_28_29_20const($0);
  std____2____vector_base_short_2c_20std____2__allocator_short__20___capacity_28_29_20const($0);
  std____2____vector_base_short_2c_20std____2__allocator_short__20___capacity_28_29_20const($0);
 }
 
 function std____2____split_buffer_short_2c_20std____2__allocator_short________split_buffer_28_29($0) {
  std____2____split_buffer_short_2c_20std____2__allocator_short_______destruct_at_end_28short__2c_20std____2__integral_constant_bool_2c_20false__29($0, HEAP32[$0 + 4 >> 2]);
  if (HEAP32[$0 >> 2]) {
   std____2__allocator_traits_std____2__allocator_char__20___deallocate_28std____2__allocator_char___2c_20char__2c_20unsigned_20long_29(std____2____split_buffer_double_2c_20std____2__allocator_double_______alloc_28_29($0), HEAP32[$0 >> 2], HEAP32[std____2____split_buffer_double_2c_20std____2__allocator_double_______end_cap_28_29($0) >> 2] - HEAP32[$0 >> 2] >> 1)
  }
 }
 
 function std____2__vector_short_2c_20std____2__allocator_short__20___max_size_28_29_20const($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  std____2____vector_base_double_2c_20std____2__allocator_double__20_____alloc_28_29($0);
  HEAP32[$1 + 12 >> 2] = 2147483647;
  HEAP32[16874] = 0;
  HEAP32[$1 + 8 >> 2] = 2147483647;
  $0 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(38, $1 + 12 | 0, $1 + 8 | 0) | 0;
  $2 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($2 | 0) != 1) {
   $0 = HEAP32[$0 >> 2];
   $1 = $1 + 16 | 0;
   if ($1 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $1;
   return $0;
  }
  $0 = __cxa_find_matching_catch_3(0) | 0;
  getTempRet0() | 0;
  __clang_call_terminate($0);
  abort();
 }
 
 function void_20std____2__allocator_traits_std____2__allocator_short__20_____construct_short__28std____2__integral_constant_bool_2c_20true__2c_20std____2__allocator_short___2c_20short__29($0) {
  HEAP16[$0 >> 1] = 0;
 }
 
 function std____2____split_buffer_short_2c_20std____2__allocator_short_______destruct_at_end_28short__2c_20std____2__integral_constant_bool_2c_20false__29($0, $1) {
  var $2 = 0;
  label$1 : {
   while (1) {
    if (HEAP32[$0 + 8 >> 2] == ($1 | 0)) {
     break label$1
    }
    std____2____split_buffer_double_2c_20std____2__allocator_double_______alloc_28_29($0);
    HEAP32[$0 + 8 >> 2] = HEAP32[$0 + 8 >> 2] + -2;
    HEAP32[16874] = 0;
    $2 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($2 | 0) != 1) {
     continue
    }
    break;
   };
   $0 = __cxa_find_matching_catch_3(0) | 0;
   getTempRet0() | 0;
   __clang_call_terminate($0);
   abort();
  }
 }
 
 function EmscriptenBindingInitializer_my_module__EmscriptenBindingInitializer_my_module_28_29() {
  var $0 = 0, $1 = 0, $2 = 0;
  $0 = global$0 - 1632 | 0;
  $1 = $0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  emscripten__class__std____2__vector_int_2c_20std____2__allocator_int__20__2c_20emscripten__internal__NoBaseClass__20emscripten__register_vector_int__28char_20const__29();
  emscripten__class__std____2__vector_double_2c_20std____2__allocator_double__20__2c_20emscripten__internal__NoBaseClass__20emscripten__register_vector_double__28char_20const__29();
  emscripten__class__std____2__vector_char_2c_20std____2__allocator_char__20__2c_20emscripten__internal__NoBaseClass__20emscripten__register_vector_char__28char_20const__29();
  emscripten__class__std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20__2c_20emscripten__internal__NoBaseClass__20emscripten__register_vector_unsigned_20char__28char_20const__29();
  emscripten__class__std____2__vector_float_2c_20std____2__allocator_float__20__2c_20emscripten__internal__NoBaseClass__20emscripten__register_vector_float__28char_20const__29();
  _embind_register_class(6180, 6204, 6236, 0, 4688, 74, 4691, 0, 4691, 0, 1578, 4693, 75);
  void_20emscripten__internal__RegisterClassConstructor_vectorTools__20_28__29_28_29___invoke_vectorTools__28vectorTools__20_28__29_28_29_29();
  _embind_register_class_class_function(6180, 1590, 2, 6256, 6264, 77, 78);
  _embind_register_class_class_function(6180, 1605, 2, 6268, 6264, 79, 80);
  _embind_register_class(6292, 6316, 6352, 0, 4688, 81, 4691, 0, 4691, 0, 1622, 4693, 82);
  void_20emscripten__internal__RegisterClassConstructor_maxiSettings__20_28__29_28_29___invoke_maxiSettings__28maxiSettings__20_28__29_28_29_29();
  _embind_register_class_class_function(6292, 1635, 4, 6384, 4736, 84, 85);
  HEAP32[$0 + 1628 >> 2] = 0;
  HEAP32[$0 + 1624 >> 2] = 86;
  $1 = HEAP32[$0 + 1628 >> 2];
  HEAP32[$0 + 1336 >> 2] = HEAP32[$0 + 1624 >> 2];
  HEAP32[$0 + 1340 >> 2] = $1;
  $1 = emscripten__internal__GetterPolicy_int_20_28maxiSettings____29_28_29_20const___getContext_28int_20_28maxiSettings____29_28_29_20const_29($0 + 1336 | 0);
  HEAP32[$0 + 1620 >> 2] = 0;
  HEAP32[$0 + 1616 >> 2] = 87;
  $2 = HEAP32[$0 + 1620 >> 2];
  HEAP32[$0 + 1328 >> 2] = HEAP32[$0 + 1616 >> 2];
  HEAP32[$0 + 1332 >> 2] = $2;
  _embind_register_class_property(6292, 1641, 49468, 4752, 88, $1 | 0, 49468, 4712, 89, emscripten__internal__GetterPolicy_int_20_28maxiSettings____29_28_29_20const___getContext_28int_20_28maxiSettings____29_28_29_20const_29($0 + 1328 | 0) | 0);
  HEAP32[$0 + 1628 >> 2] = 0;
  HEAP32[$0 + 1624 >> 2] = 90;
  $1 = HEAP32[$0 + 1628 >> 2];
  HEAP32[$0 + 1320 >> 2] = HEAP32[$0 + 1624 >> 2];
  HEAP32[$0 + 1324 >> 2] = $1;
  $1 = emscripten__internal__GetterPolicy_int_20_28maxiSettings____29_28_29_20const___getContext_28int_20_28maxiSettings____29_28_29_20const_29($0 + 1320 | 0);
  HEAP32[$0 + 1620 >> 2] = 0;
  HEAP32[$0 + 1616 >> 2] = 91;
  $2 = HEAP32[$0 + 1620 >> 2];
  HEAP32[$0 + 1312 >> 2] = HEAP32[$0 + 1616 >> 2];
  HEAP32[$0 + 1316 >> 2] = $2;
  _embind_register_class_property(6292, 1652, 49468, 4752, 88, $1 | 0, 49468, 4712, 89, emscripten__internal__GetterPolicy_int_20_28maxiSettings____29_28_29_20const___getContext_28int_20_28maxiSettings____29_28_29_20const_29($0 + 1312 | 0) | 0);
  HEAP32[$0 + 1628 >> 2] = 0;
  HEAP32[$0 + 1624 >> 2] = 92;
  $1 = HEAP32[$0 + 1628 >> 2];
  HEAP32[$0 + 1304 >> 2] = HEAP32[$0 + 1624 >> 2];
  HEAP32[$0 + 1308 >> 2] = $1;
  $1 = emscripten__internal__GetterPolicy_int_20_28maxiSettings____29_28_29_20const___getContext_28int_20_28maxiSettings____29_28_29_20const_29($0 + 1304 | 0);
  HEAP32[$0 + 1620 >> 2] = 0;
  HEAP32[$0 + 1616 >> 2] = 93;
  $2 = HEAP32[$0 + 1620 >> 2];
  HEAP32[$0 + 1296 >> 2] = HEAP32[$0 + 1616 >> 2];
  HEAP32[$0 + 1300 >> 2] = $2;
  _embind_register_class_property(6292, 1661, 49468, 4752, 88, $1 | 0, 49468, 4712, 89, emscripten__internal__GetterPolicy_int_20_28maxiSettings____29_28_29_20const___getContext_28int_20_28maxiSettings____29_28_29_20const_29($0 + 1296 | 0) | 0);
  _embind_register_class(6412, 6432, 6460, 0, 4688, 94, 4691, 0, 4691, 0, 1672, 4693, 95);
  _embind_register_smart_ptr(6764, 6412, 1680, 2, 4688, 96, 6772, 97, 4752, 98, 4693, 99);
  _embind_register_class_constructor(6412, 1, 6776, 4688, 100, 101);
  HEAP32[$0 + 1628 >> 2] = 0;
  HEAP32[$0 + 1624 >> 2] = 102;
  $1 = HEAP32[$0 + 1628 >> 2];
  HEAP32[$0 + 1288 >> 2] = HEAP32[$0 + 1624 >> 2];
  HEAP32[$0 + 1292 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_double_20_28maxiOsc____29_28double_29___invoke_maxiOsc__28char_20const__2c_20double_20_28maxiOsc____29_28double_29_29(1700, $0 + 1288 | 0);
  HEAP32[$0 + 1628 >> 2] = 0;
  HEAP32[$0 + 1624 >> 2] = 103;
  $1 = HEAP32[$0 + 1628 >> 2];
  HEAP32[$0 + 1280 >> 2] = HEAP32[$0 + 1624 >> 2];
  HEAP32[$0 + 1284 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_double_20_28maxiOsc____29_28double_29___invoke_maxiOsc__28char_20const__2c_20double_20_28maxiOsc____29_28double_29_29(1709, $0 + 1280 | 0);
  HEAP32[$0 + 1604 >> 2] = 0;
  HEAP32[$0 + 1600 >> 2] = 104;
  $1 = HEAP32[$0 + 1604 >> 2];
  HEAP32[$0 + 1272 >> 2] = HEAP32[$0 + 1600 >> 2];
  HEAP32[$0 + 1276 >> 2] = $1;
  std____2__fpos___mbstate_t___state_28__mbstate_t_29($0 + 1608 | 0, $0 + 1272 | 0);
  $1 = HEAP32[$0 + 1612 >> 2];
  $2 = HEAP32[$0 + 1608 >> 2];
  HEAP32[$0 + 1264 >> 2] = $2;
  HEAP32[$0 + 1268 >> 2] = $1;
  HEAP32[$0 + 1624 >> 2] = $2;
  HEAP32[$0 + 1628 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_double_20_28maxiOsc____29_28double_29___invoke_maxiOsc__28char_20const__2c_20double_20_28maxiOsc____29_28double_29_29(1717, $0 + 1264 | 0);
  HEAP32[$0 + 1588 >> 2] = 0;
  HEAP32[$0 + 1584 >> 2] = 105;
  $1 = HEAP32[$0 + 1588 >> 2];
  HEAP32[$0 + 1256 >> 2] = HEAP32[$0 + 1584 >> 2];
  HEAP32[$0 + 1260 >> 2] = $1;
  std____2__fpos___mbstate_t___state_28__mbstate_t_29($0 + 1592 | 0, $0 + 1256 | 0);
  $1 = HEAP32[$0 + 1596 >> 2];
  $2 = HEAP32[$0 + 1592 >> 2];
  HEAP32[$0 + 1248 >> 2] = $2;
  HEAP32[$0 + 1252 >> 2] = $1;
  HEAP32[$0 + 1624 >> 2] = $2;
  HEAP32[$0 + 1628 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_double_20_28maxiOsc____29_28double_2c_20double_2c_20double_29___invoke_maxiOsc__28char_20const__2c_20double_20_28maxiOsc____29_28double_2c_20double_2c_20double_29_29($0 + 1248 | 0);
  HEAP32[$0 + 1628 >> 2] = 0;
  HEAP32[$0 + 1624 >> 2] = 106;
  $1 = HEAP32[$0 + 1628 >> 2];
  HEAP32[$0 + 1240 >> 2] = HEAP32[$0 + 1624 >> 2];
  HEAP32[$0 + 1244 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_double_20_28maxiOsc____29_28double_29___invoke_maxiOsc__28char_20const__2c_20double_20_28maxiOsc____29_28double_29_29(1724, $0 + 1240 | 0);
  HEAP32[$0 + 1628 >> 2] = 0;
  HEAP32[$0 + 1624 >> 2] = 107;
  $1 = HEAP32[$0 + 1628 >> 2];
  HEAP32[$0 + 1232 >> 2] = HEAP32[$0 + 1624 >> 2];
  HEAP32[$0 + 1236 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_double_20_28maxiOsc____29_28double_29___invoke_maxiOsc__28char_20const__2c_20double_20_28maxiOsc____29_28double_29_29(1728, $0 + 1232 | 0);
  HEAP32[$0 + 1628 >> 2] = 0;
  HEAP32[$0 + 1624 >> 2] = 108;
  $1 = HEAP32[$0 + 1628 >> 2];
  HEAP32[$0 + 1224 >> 2] = HEAP32[$0 + 1624 >> 2];
  HEAP32[$0 + 1228 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_double_20_28maxiOsc____29_28double_29___invoke_maxiOsc__28char_20const__2c_20double_20_28maxiOsc____29_28double_29_29(1737, $0 + 1224 | 0);
  HEAP32[$0 + 1628 >> 2] = 0;
  HEAP32[$0 + 1624 >> 2] = 109;
  $1 = HEAP32[$0 + 1628 >> 2];
  HEAP32[$0 + 1216 >> 2] = HEAP32[$0 + 1624 >> 2];
  HEAP32[$0 + 1220 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_double_20_28maxiOsc____29_28double_2c_20double_29___invoke_maxiOsc__28char_20const__2c_20double_20_28maxiOsc____29_28double_2c_20double_29_29($0 + 1216 | 0);
  HEAP32[$0 + 1628 >> 2] = 0;
  HEAP32[$0 + 1624 >> 2] = 110;
  $1 = HEAP32[$0 + 1628 >> 2];
  HEAP32[$0 + 1208 >> 2] = HEAP32[$0 + 1624 >> 2];
  HEAP32[$0 + 1212 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_double_20_28maxiOsc____29_28double_29___invoke_maxiOsc__28char_20const__2c_20double_20_28maxiOsc____29_28double_29_29(1750, $0 + 1208 | 0);
  HEAP32[$0 + 1628 >> 2] = 0;
  HEAP32[$0 + 1624 >> 2] = 111;
  $1 = HEAP32[$0 + 1628 >> 2];
  HEAP32[$0 + 1200 >> 2] = HEAP32[$0 + 1624 >> 2];
  HEAP32[$0 + 1204 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_double_20_28maxiOsc____29_28_29___invoke_maxiOsc__28char_20const__2c_20double_20_28maxiOsc____29_28_29_29($0 + 1200 | 0);
  HEAP32[$0 + 1628 >> 2] = 0;
  HEAP32[$0 + 1624 >> 2] = 112;
  $1 = HEAP32[$0 + 1628 >> 2];
  HEAP32[$0 + 1192 >> 2] = HEAP32[$0 + 1624 >> 2];
  HEAP32[$0 + 1196 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_double_20_28maxiOsc____29_28double_29___invoke_maxiOsc__28char_20const__2c_20double_20_28maxiOsc____29_28double_29_29(1764, $0 + 1192 | 0);
  HEAP32[$0 + 1628 >> 2] = 0;
  HEAP32[$0 + 1624 >> 2] = 113;
  $1 = HEAP32[$0 + 1628 >> 2];
  HEAP32[$0 + 1184 >> 2] = HEAP32[$0 + 1624 >> 2];
  HEAP32[$0 + 1188 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_double_20_28maxiOsc____29_28double_29___invoke_maxiOsc__28char_20const__2c_20double_20_28maxiOsc____29_28double_29_29(1772, $0 + 1184 | 0);
  HEAP32[$0 + 1628 >> 2] = 0;
  HEAP32[$0 + 1624 >> 2] = 114;
  $1 = HEAP32[$0 + 1628 >> 2];
  HEAP32[$0 + 1176 >> 2] = HEAP32[$0 + 1624 >> 2];
  HEAP32[$0 + 1180 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_double_20_28maxiOsc____29_28double_29___invoke_maxiOsc__28char_20const__2c_20double_20_28maxiOsc____29_28double_29_29(1781, $0 + 1176 | 0);
  HEAP32[$0 + 1628 >> 2] = 0;
  HEAP32[$0 + 1624 >> 2] = 115;
  $1 = HEAP32[$0 + 1628 >> 2];
  HEAP32[$0 + 1168 >> 2] = HEAP32[$0 + 1624 >> 2];
  HEAP32[$0 + 1172 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_void_20_28maxiOsc____29_28double_29___invoke_maxiOsc__28char_20const__2c_20void_20_28maxiOsc____29_28double_29_29($0 + 1168 | 0);
  _embind_register_class(7008, 7032, 7068, 0, 4688, 116, 4691, 0, 4691, 0, 1797, 4693, 117);
  _embind_register_smart_ptr(7392, 7008, 1810, 2, 4688, 118, 6772, 119, 4752, 120, 4693, 121);
  _embind_register_class_constructor(7008, 1, 7400, 4688, 122, 123);
  HEAP32[$0 + 1628 >> 2] = 0;
  HEAP32[$0 + 1624 >> 2] = 124;
  $1 = HEAP32[$0 + 1628 >> 2];
  HEAP32[$0 + 1160 >> 2] = HEAP32[$0 + 1624 >> 2];
  HEAP32[$0 + 1164 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_double_20_28maxiEnvelope____29_28int_2c_20std____2__vector_double_2c_20std____2__allocator_double__20___29___invoke_maxiEnvelope__28char_20const__2c_20double_20_28maxiEnvelope____29_28int_2c_20std____2__vector_double_2c_20std____2__allocator_double__20___29_29($0 + 1160 | 0);
  HEAP32[$0 + 1628 >> 2] = 0;
  HEAP32[$0 + 1624 >> 2] = 125;
  $1 = HEAP32[$0 + 1628 >> 2];
  HEAP32[$0 + 1152 >> 2] = HEAP32[$0 + 1624 >> 2];
  HEAP32[$0 + 1156 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_void_20_28maxiEnvelope____29_28int_2c_20double_29___invoke_maxiEnvelope__28char_20const__2c_20void_20_28maxiEnvelope____29_28int_2c_20double_29_29($0 + 1152 | 0);
  HEAP32[$0 + 1628 >> 2] = 0;
  HEAP32[$0 + 1624 >> 2] = 126;
  $1 = HEAP32[$0 + 1628 >> 2];
  HEAP32[$0 + 1144 >> 2] = HEAP32[$0 + 1624 >> 2];
  HEAP32[$0 + 1148 >> 2] = $1;
  $1 = emscripten__internal__GetterPolicy_int_20_28maxiSettings____29_28_29_20const___getContext_28int_20_28maxiSettings____29_28_29_20const_29($0 + 1144 | 0);
  HEAP32[$0 + 1620 >> 2] = 0;
  HEAP32[$0 + 1616 >> 2] = 127;
  $2 = HEAP32[$0 + 1620 >> 2];
  HEAP32[$0 + 1136 >> 2] = HEAP32[$0 + 1616 >> 2];
  HEAP32[$0 + 1140 >> 2] = $2;
  _embind_register_class_property(7008, 1848, 49528, 6976, 128, $1 | 0, 49528, 5096, 129, emscripten__internal__GetterPolicy_int_20_28maxiSettings____29_28_29_20const___getContext_28int_20_28maxiSettings____29_28_29_20const_29($0 + 1136 | 0) | 0);
  HEAP32[$0 + 1628 >> 2] = 0;
  HEAP32[$0 + 1624 >> 2] = 130;
  $1 = HEAP32[$0 + 1628 >> 2];
  HEAP32[$0 + 1128 >> 2] = HEAP32[$0 + 1624 >> 2];
  HEAP32[$0 + 1132 >> 2] = $1;
  $1 = emscripten__internal__GetterPolicy_int_20_28maxiSettings____29_28_29_20const___getContext_28int_20_28maxiSettings____29_28_29_20const_29($0 + 1128 | 0);
  HEAP32[$0 + 1620 >> 2] = 0;
  HEAP32[$0 + 1616 >> 2] = 131;
  $2 = HEAP32[$0 + 1620 >> 2];
  HEAP32[$0 + 1120 >> 2] = HEAP32[$0 + 1616 >> 2];
  HEAP32[$0 + 1124 >> 2] = $2;
  _embind_register_class_property(7008, 1858, 49468, 4752, 132, $1 | 0, 49468, 4712, 133, emscripten__internal__GetterPolicy_int_20_28maxiSettings____29_28_29_20const___getContext_28int_20_28maxiSettings____29_28_29_20const_29($0 + 1120 | 0) | 0);
  _embind_register_class(7584, 7612, 7648, 0, 4688, 134, 4691, 0, 4691, 0, 1867, 4693, 135);
  _embind_register_smart_ptr(7972, 7584, 1881, 2, 4688, 136, 6772, 137, 4752, 138, 4693, 139);
  _embind_register_class_constructor(7584, 1, 7980, 4688, 140, 141);
  HEAP32[$0 + 1572 >> 2] = 0;
  HEAP32[$0 + 1568 >> 2] = 142;
  $1 = HEAP32[$0 + 1572 >> 2];
  HEAP32[$0 + 1112 >> 2] = HEAP32[$0 + 1568 >> 2];
  HEAP32[$0 + 1116 >> 2] = $1;
  std____2__fpos___mbstate_t___state_28__mbstate_t_29($0 + 1576 | 0, $0 + 1112 | 0);
  $1 = HEAP32[$0 + 1580 >> 2];
  $2 = HEAP32[$0 + 1576 >> 2];
  HEAP32[$0 + 1104 >> 2] = $2;
  HEAP32[$0 + 1108 >> 2] = $1;
  HEAP32[$0 + 1624 >> 2] = $2;
  HEAP32[$0 + 1628 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_double_20_28maxiDelayline____29_28double_2c_20int_2c_20double_29___invoke_maxiDelayline__28char_20const__2c_20double_20_28maxiDelayline____29_28double_2c_20int_2c_20double_29_29($0 + 1104 | 0);
  HEAP32[$0 + 1556 >> 2] = 0;
  HEAP32[$0 + 1552 >> 2] = 143;
  $1 = HEAP32[$0 + 1556 >> 2];
  HEAP32[$0 + 1096 >> 2] = HEAP32[$0 + 1552 >> 2];
  HEAP32[$0 + 1100 >> 2] = $1;
  std____2__fpos___mbstate_t___state_28__mbstate_t_29($0 + 1560 | 0, $0 + 1096 | 0);
  $1 = HEAP32[$0 + 1564 >> 2];
  $2 = HEAP32[$0 + 1560 >> 2];
  HEAP32[$0 + 1088 >> 2] = $2;
  HEAP32[$0 + 1092 >> 2] = $1;
  HEAP32[$0 + 1624 >> 2] = $2;
  HEAP32[$0 + 1628 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_double_20_28maxiDelayline____29_28double_2c_20int_2c_20double_2c_20int_29___invoke_maxiDelayline__28char_20const__2c_20double_20_28maxiDelayline____29_28double_2c_20int_2c_20double_2c_20int_29_29($0 + 1088 | 0);
  _embind_register_class(8176, 8200, 8232, 0, 4688, 144, 4691, 0, 4691, 0, 1910, 4693, 145);
  _embind_register_smart_ptr(8548, 8176, 1921, 2, 4688, 146, 6772, 147, 4752, 148, 4693, 149);
  _embind_register_class_constructor(8176, 1, 8556, 4688, 150, 151);
  HEAP32[$0 + 1628 >> 2] = 0;
  HEAP32[$0 + 1624 >> 2] = 152;
  $1 = HEAP32[$0 + 1628 >> 2];
  HEAP32[$0 + 1080 >> 2] = HEAP32[$0 + 1624 >> 2];
  HEAP32[$0 + 1084 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_double_20_28maxiFilter____29_28double_2c_20double_2c_20double_29___invoke_maxiFilter__28char_20const__2c_20double_20_28maxiFilter____29_28double_2c_20double_2c_20double_29_29(1944, $0 + 1080 | 0);
  HEAP32[$0 + 1628 >> 2] = 0;
  HEAP32[$0 + 1624 >> 2] = 153;
  $1 = HEAP32[$0 + 1628 >> 2];
  HEAP32[$0 + 1072 >> 2] = HEAP32[$0 + 1624 >> 2];
  HEAP32[$0 + 1076 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_double_20_28maxiFilter____29_28double_2c_20double_2c_20double_29___invoke_maxiFilter__28char_20const__2c_20double_20_28maxiFilter____29_28double_2c_20double_2c_20double_29_29(1950, $0 + 1072 | 0);
  HEAP32[$0 + 1628 >> 2] = 0;
  HEAP32[$0 + 1624 >> 2] = 154;
  $1 = HEAP32[$0 + 1628 >> 2];
  HEAP32[$0 + 1064 >> 2] = HEAP32[$0 + 1624 >> 2];
  HEAP32[$0 + 1068 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_double_20_28maxiFilter____29_28double_2c_20double_2c_20double_29___invoke_maxiFilter__28char_20const__2c_20double_20_28maxiFilter____29_28double_2c_20double_2c_20double_29_29(1956, $0 + 1064 | 0);
  HEAP32[$0 + 1628 >> 2] = 0;
  HEAP32[$0 + 1624 >> 2] = 155;
  $1 = HEAP32[$0 + 1628 >> 2];
  HEAP32[$0 + 1056 >> 2] = HEAP32[$0 + 1624 >> 2];
  HEAP32[$0 + 1060 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_double_20_28maxiFilter____29_28double_2c_20double_29___invoke_maxiFilter__28char_20const__2c_20double_20_28maxiFilter____29_28double_2c_20double_29_29(1965, $0 + 1056 | 0);
  HEAP32[$0 + 1628 >> 2] = 0;
  HEAP32[$0 + 1624 >> 2] = 156;
  $1 = HEAP32[$0 + 1628 >> 2];
  HEAP32[$0 + 1048 >> 2] = HEAP32[$0 + 1624 >> 2];
  HEAP32[$0 + 1052 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_double_20_28maxiFilter____29_28double_2c_20double_29___invoke_maxiFilter__28char_20const__2c_20double_20_28maxiFilter____29_28double_2c_20double_29_29(1972, $0 + 1048 | 0);
  HEAP32[$0 + 1628 >> 2] = 0;
  HEAP32[$0 + 1624 >> 2] = 157;
  $1 = HEAP32[$0 + 1628 >> 2];
  HEAP32[$0 + 1040 >> 2] = HEAP32[$0 + 1624 >> 2];
  HEAP32[$0 + 1044 >> 2] = $1;
  $1 = emscripten__internal__GetterPolicy_int_20_28maxiSettings____29_28_29_20const___getContext_28int_20_28maxiSettings____29_28_29_20const_29($0 + 1040 | 0);
  HEAP32[$0 + 1620 >> 2] = 0;
  HEAP32[$0 + 1616 >> 2] = 158;
  $2 = HEAP32[$0 + 1620 >> 2];
  HEAP32[$0 + 1032 >> 2] = HEAP32[$0 + 1616 >> 2];
  HEAP32[$0 + 1036 >> 2] = $2;
  _embind_register_class_property(8176, 1979, 49528, 6976, 159, $1 | 0, 49528, 5096, 160, emscripten__internal__GetterPolicy_int_20_28maxiSettings____29_28_29_20const___getContext_28int_20_28maxiSettings____29_28_29_20const_29($0 + 1032 | 0) | 0);
  HEAP32[$0 + 1628 >> 2] = 0;
  HEAP32[$0 + 1624 >> 2] = 161;
  $1 = HEAP32[$0 + 1628 >> 2];
  HEAP32[$0 + 1024 >> 2] = HEAP32[$0 + 1624 >> 2];
  HEAP32[$0 + 1028 >> 2] = $1;
  $1 = emscripten__internal__GetterPolicy_int_20_28maxiSettings____29_28_29_20const___getContext_28int_20_28maxiSettings____29_28_29_20const_29($0 + 1024 | 0);
  HEAP32[$0 + 1620 >> 2] = 0;
  HEAP32[$0 + 1616 >> 2] = 162;
  $2 = HEAP32[$0 + 1620 >> 2];
  HEAP32[$0 + 1016 >> 2] = HEAP32[$0 + 1616 >> 2];
  HEAP32[$0 + 1020 >> 2] = $2;
  _embind_register_class_property(8176, 1986, 49528, 6976, 159, $1 | 0, 49528, 5096, 160, emscripten__internal__GetterPolicy_int_20_28maxiSettings____29_28_29_20const___getContext_28int_20_28maxiSettings____29_28_29_20const_29($0 + 1016 | 0) | 0);
  _embind_register_class(8732, 8752, 8780, 0, 4688, 163, 4691, 0, 4691, 0, 1996, 4693, 164);
  _embind_register_smart_ptr(9084, 8732, 2004, 2, 4688, 165, 6772, 166, 4752, 167, 4693, 168);
  _embind_register_class_constructor(8732, 1, 9092, 4688, 169, 170);
  HEAP32[$0 + 1628 >> 2] = 0;
  HEAP32[$0 + 1624 >> 2] = 171;
  $1 = HEAP32[$0 + 1628 >> 2];
  HEAP32[$0 + 1008 >> 2] = HEAP32[$0 + 1624 >> 2];
  HEAP32[$0 + 1012 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_void_20_28maxiMix____29_28double_2c_20std____2__vector_double_2c_20std____2__allocator_double__20___2c_20double_29___invoke_maxiMix_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20void_20_28maxiMix____29_28double_2c_20std____2__vector_double_2c_20std____2__allocator_double__20___2c_20double_29_29($0 + 1008 | 0);
  HEAP32[$0 + 1628 >> 2] = 0;
  HEAP32[$0 + 1624 >> 2] = 172;
  $1 = HEAP32[$0 + 1628 >> 2];
  HEAP32[$0 + 1e3 >> 2] = HEAP32[$0 + 1624 >> 2];
  HEAP32[$0 + 1004 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_void_20_28maxiMix____29_28double_2c_20std____2__vector_double_2c_20std____2__allocator_double__20___2c_20double_2c_20double_29___invoke_maxiMix_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20void_20_28maxiMix____29_28double_2c_20std____2__vector_double_2c_20std____2__allocator_double__20___2c_20double_2c_20double_29_29($0 + 1e3 | 0);
  HEAP32[$0 + 1628 >> 2] = 0;
  HEAP32[$0 + 1624 >> 2] = 173;
  $1 = HEAP32[$0 + 1628 >> 2];
  HEAP32[$0 + 992 >> 2] = HEAP32[$0 + 1624 >> 2];
  HEAP32[$0 + 996 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_void_20_28maxiMix____29_28double_2c_20std____2__vector_double_2c_20std____2__allocator_double__20___2c_20double_2c_20double_2c_20double_29___invoke_maxiMix_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20void_20_28maxiMix____29_28double_2c_20std____2__vector_double_2c_20std____2__allocator_double__20___2c_20double_2c_20double_2c_20double_29_29($0 + 992 | 0);
  _embind_register_class(9312, 9332, 9360, 0, 4688, 174, 4691, 0, 4691, 0, 2046, 4693, 175);
  _embind_register_smart_ptr(9668, 9312, 2055, 2, 4688, 176, 6772, 177, 4752, 178, 4693, 179);
  _embind_register_class_constructor(9312, 1, 9676, 4688, 180, 181);
  HEAP32[$0 + 1628 >> 2] = 0;
  HEAP32[$0 + 1624 >> 2] = 182;
  $1 = HEAP32[$0 + 1628 >> 2];
  HEAP32[$0 + 984 >> 2] = HEAP32[$0 + 1624 >> 2];
  HEAP32[$0 + 988 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_double_20_28maxiLine____29_28double_29___invoke_maxiLine__28char_20const__2c_20double_20_28maxiLine____29_28double_29_29($0 + 984 | 0);
  HEAP32[$0 + 1628 >> 2] = 0;
  HEAP32[$0 + 1624 >> 2] = 183;
  $1 = HEAP32[$0 + 1628 >> 2];
  HEAP32[$0 + 976 >> 2] = HEAP32[$0 + 1624 >> 2];
  HEAP32[$0 + 980 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_void_20_28maxiLine____29_28double_2c_20double_2c_20double_2c_20bool_29___invoke_maxiLine__28char_20const__2c_20void_20_28maxiLine____29_28double_2c_20double_2c_20double_2c_20bool_29_29($0 + 976 | 0);
  HEAP32[$0 + 1628 >> 2] = 0;
  HEAP32[$0 + 1624 >> 2] = 184;
  $1 = HEAP32[$0 + 1628 >> 2];
  HEAP32[$0 + 968 >> 2] = HEAP32[$0 + 1624 >> 2];
  HEAP32[$0 + 972 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_void_20_28maxiLine____29_28double_29___invoke_maxiLine__28char_20const__2c_20void_20_28maxiLine____29_28double_29_29($0 + 968 | 0);
  HEAP32[$0 + 1628 >> 2] = 0;
  HEAP32[$0 + 1624 >> 2] = 185;
  $1 = HEAP32[$0 + 1628 >> 2];
  HEAP32[$0 + 960 >> 2] = HEAP32[$0 + 1624 >> 2];
  HEAP32[$0 + 964 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_bool_20_28maxiLine____29_28_29___invoke_maxiLine__28char_20const__2c_20bool_20_28maxiLine____29_28_29_29($0 + 960 | 0);
  _embind_register_class(9872, 9892, 9924, 0, 4688, 186, 4691, 0, 4691, 0, 2118, 4693, 187);
  _embind_register_class_class_function(9872, 2128, 4, 9952, 5168, 189, 188);
  _embind_register_class_class_function(9872, 2128, 4, 9968, 9984, 191, 190);
  _embind_register_class(10008, 10036, 10072, 0, 4688, 192, 4691, 0, 4691, 0, 2134, 4693, 193);
  _embind_register_smart_ptr(10396, 10008, 2145, 2, 4688, 194, 6772, 195, 4752, 196, 4693, 197);
  _embind_register_class_constructor(10008, 1, 10404, 4688, 198, 199);
  HEAP32[$0 + 1628 >> 2] = 0;
  HEAP32[$0 + 1624 >> 2] = 200;
  $1 = HEAP32[$0 + 1628 >> 2];
  HEAP32[$0 + 952 >> 2] = HEAP32[$0 + 1624 >> 2];
  HEAP32[$0 + 956 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_void_20_28maxiLagExp_double_____29_28double_2c_20double_29___invoke_maxiLagExp_double__20__28char_20const__2c_20void_20_28maxiLagExp_double_____29_28double_2c_20double_29_29($0 + 952 | 0);
  HEAP32[$0 + 1628 >> 2] = 0;
  HEAP32[$0 + 1624 >> 2] = 201;
  $1 = HEAP32[$0 + 1628 >> 2];
  HEAP32[$0 + 944 >> 2] = HEAP32[$0 + 1624 >> 2];
  HEAP32[$0 + 948 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_void_20_28maxiLagExp_double_____29_28double_29___invoke_maxiLagExp_double__20__28char_20const__2c_20void_20_28maxiLagExp_double_____29_28double_29_29($0 + 944 | 0);
  HEAP32[$0 + 1628 >> 2] = 0;
  HEAP32[$0 + 1624 >> 2] = 202;
  $1 = HEAP32[$0 + 1628 >> 2];
  HEAP32[$0 + 936 >> 2] = HEAP32[$0 + 1624 >> 2];
  HEAP32[$0 + 940 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_double_20_28maxiLagExp_double_____29_28_29_20const___invoke_maxiLagExp_double__20__28char_20const__2c_20double_20_28maxiLagExp_double_____29_28_29_20const_29($0 + 936 | 0);
  HEAP32[$0 + 1628 >> 2] = 0;
  HEAP32[$0 + 1624 >> 2] = 203;
  $1 = HEAP32[$0 + 1628 >> 2];
  HEAP32[$0 + 928 >> 2] = HEAP32[$0 + 1624 >> 2];
  HEAP32[$0 + 932 >> 2] = $1;
  $1 = emscripten__internal__GetterPolicy_int_20_28maxiSettings____29_28_29_20const___getContext_28int_20_28maxiSettings____29_28_29_20const_29($0 + 928 | 0);
  HEAP32[$0 + 1620 >> 2] = 0;
  HEAP32[$0 + 1616 >> 2] = 204;
  $2 = HEAP32[$0 + 1620 >> 2];
  HEAP32[$0 + 920 >> 2] = HEAP32[$0 + 1616 >> 2];
  HEAP32[$0 + 924 >> 2] = $2;
  _embind_register_class_property(10008, 2197, 49528, 6976, 205, $1 | 0, 49528, 5096, 206, emscripten__internal__GetterPolicy_int_20_28maxiSettings____29_28_29_20const___getContext_28int_20_28maxiSettings____29_28_29_20const_29($0 + 920 | 0) | 0);
  HEAP32[$0 + 1628 >> 2] = 0;
  HEAP32[$0 + 1624 >> 2] = 207;
  $1 = HEAP32[$0 + 1628 >> 2];
  HEAP32[$0 + 912 >> 2] = HEAP32[$0 + 1624 >> 2];
  HEAP32[$0 + 916 >> 2] = $1;
  $1 = emscripten__internal__GetterPolicy_int_20_28maxiSettings____29_28_29_20const___getContext_28int_20_28maxiSettings____29_28_29_20const_29($0 + 912 | 0);
  HEAP32[$0 + 1620 >> 2] = 0;
  HEAP32[$0 + 1616 >> 2] = 208;
  $2 = HEAP32[$0 + 1620 >> 2];
  HEAP32[$0 + 904 >> 2] = HEAP32[$0 + 1616 >> 2];
  HEAP32[$0 + 908 >> 2] = $2;
  _embind_register_class_property(10008, 2203, 49528, 6976, 205, $1 | 0, 49528, 5096, 206, emscripten__internal__GetterPolicy_int_20_28maxiSettings____29_28_29_20const___getContext_28int_20_28maxiSettings____29_28_29_20const_29($0 + 904 | 0) | 0);
  HEAP32[$0 + 1628 >> 2] = 0;
  HEAP32[$0 + 1624 >> 2] = 202;
  $1 = HEAP32[$0 + 1628 >> 2];
  HEAP32[$0 + 896 >> 2] = HEAP32[$0 + 1624 >> 2];
  HEAP32[$0 + 900 >> 2] = $1;
  $1 = emscripten__internal__GetterPolicy_int_20_28maxiSettings____29_28_29_20const___getContext_28int_20_28maxiSettings____29_28_29_20const_29($0 + 896 | 0);
  HEAP32[$0 + 1620 >> 2] = 0;
  HEAP32[$0 + 1616 >> 2] = 209;
  $2 = HEAP32[$0 + 1620 >> 2];
  HEAP32[$0 + 888 >> 2] = HEAP32[$0 + 1616 >> 2];
  HEAP32[$0 + 892 >> 2] = $2;
  _embind_register_class_property(10008, 2219, 49528, 6976, 205, $1 | 0, 49528, 5096, 206, emscripten__internal__GetterPolicy_int_20_28maxiSettings____29_28_29_20const___getContext_28int_20_28maxiSettings____29_28_29_20const_29($0 + 888 | 0) | 0);
  _embind_register_class(10588, 10612, 10644, 0, 4688, 210, 4691, 0, 4691, 0, 2223, 4693, 211);
  _embind_register_smart_ptr(10960, 10588, 2234, 2, 4688, 212, 6772, 213, 4752, 214, 4693, 215);
  _embind_register_class_constructor(10588, 1, 10968, 4688, 216, 217);
  HEAP32[$0 + 1628 >> 2] = 0;
  HEAP32[$0 + 1624 >> 2] = 218;
  $1 = HEAP32[$0 + 1628 >> 2];
  HEAP32[$0 + 880 >> 2] = HEAP32[$0 + 1624 >> 2];
  HEAP32[$0 + 884 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_unsigned_20long_20_28maxiSample____29_28_29_20const___invoke_maxiSample__28char_20const__2c_20unsigned_20long_20_28maxiSample____29_28_29_20const_29($0 + 880 | 0);
  HEAP32[$0 + 1540 >> 2] = 0;
  HEAP32[$0 + 1536 >> 2] = 219;
  $1 = HEAP32[$0 + 1540 >> 2];
  HEAP32[$0 + 872 >> 2] = HEAP32[$0 + 1536 >> 2];
  HEAP32[$0 + 876 >> 2] = $1;
  std____2__fpos___mbstate_t___state_28__mbstate_t_29($0 + 1544 | 0, $0 + 872 | 0);
  $1 = HEAP32[$0 + 1544 >> 2];
  HEAP32[$0 + 1628 >> 2] = HEAP32[$0 + 1548 >> 2];
  HEAP32[$0 + 1624 >> 2] = $1;
  $1 = HEAP32[$0 + 1628 >> 2];
  HEAP32[$0 + 864 >> 2] = HEAP32[$0 + 1624 >> 2];
  HEAP32[$0 + 868 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_void_20_28maxiSample____29_28std____2__vector_double_2c_20std____2__allocator_double__20___29___invoke_maxiSample__28char_20const__2c_20void_20_28maxiSample____29_28std____2__vector_double_2c_20std____2__allocator_double__20___29_29($0 + 864 | 0);
  HEAP32[$0 + 1524 >> 2] = 0;
  HEAP32[$0 + 1520 >> 2] = 220;
  $1 = HEAP32[$0 + 1524 >> 2];
  HEAP32[$0 + 856 >> 2] = HEAP32[$0 + 1520 >> 2];
  HEAP32[$0 + 860 >> 2] = $1;
  std____2__fpos___mbstate_t___state_28__mbstate_t_29($0 + 1528 | 0, $0 + 856 | 0);
  $1 = HEAP32[$0 + 1528 >> 2];
  HEAP32[$0 + 1628 >> 2] = HEAP32[$0 + 1532 >> 2];
  HEAP32[$0 + 1624 >> 2] = $1;
  $1 = HEAP32[$0 + 1628 >> 2];
  HEAP32[$0 + 848 >> 2] = HEAP32[$0 + 1624 >> 2];
  HEAP32[$0 + 852 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_void_20_28maxiSample____29_28std____2__vector_double_2c_20std____2__allocator_double__20___2c_20int_29___invoke_maxiSample__28char_20const__2c_20void_20_28maxiSample____29_28std____2__vector_double_2c_20std____2__allocator_double__20___2c_20int_29_29($0 + 848 | 0);
  HEAP32[$0 + 1628 >> 2] = 0;
  HEAP32[$0 + 1624 >> 2] = 221;
  $1 = HEAP32[$0 + 1628 >> 2];
  HEAP32[$0 + 840 >> 2] = HEAP32[$0 + 1624 >> 2];
  HEAP32[$0 + 844 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_int_20_28maxiSample____29_28std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20___2c_20int_29___invoke_maxiSample__28char_20const__2c_20int_20_28maxiSample____29_28std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20___2c_20int_29_29($0 + 840 | 0);
  HEAP32[$0 + 1628 >> 2] = 0;
  HEAP32[$0 + 1624 >> 2] = 222;
  $1 = HEAP32[$0 + 1628 >> 2];
  HEAP32[$0 + 832 >> 2] = HEAP32[$0 + 1624 >> 2];
  HEAP32[$0 + 836 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_bool_20_28maxiSample____29_28_29___invoke_maxiSample__28char_20const__2c_20bool_20_28maxiSample____29_28_29_29(2298, $0 + 832 | 0);
  HEAP32[$0 + 1508 >> 2] = 0;
  HEAP32[$0 + 1504 >> 2] = 223;
  $1 = HEAP32[$0 + 1508 >> 2];
  HEAP32[$0 + 824 >> 2] = HEAP32[$0 + 1504 >> 2];
  HEAP32[$0 + 828 >> 2] = $1;
  std____2__fpos___mbstate_t___state_28__mbstate_t_29($0 + 1512 | 0, $0 + 824 | 0);
  $1 = HEAP32[$0 + 1512 >> 2];
  HEAP32[$0 + 1628 >> 2] = HEAP32[$0 + 1516 >> 2];
  HEAP32[$0 + 1624 >> 2] = $1;
  $1 = HEAP32[$0 + 1628 >> 2];
  HEAP32[$0 + 816 >> 2] = HEAP32[$0 + 1624 >> 2];
  HEAP32[$0 + 820 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_double_20_28maxiSample____29_28_29___invoke_maxiSample__28char_20const__2c_20double_20_28maxiSample____29_28_29_29(2306, $0 + 816 | 0);
  HEAP32[$0 + 1492 >> 2] = 0;
  HEAP32[$0 + 1488 >> 2] = 224;
  $1 = HEAP32[$0 + 1492 >> 2];
  HEAP32[$0 + 808 >> 2] = HEAP32[$0 + 1488 >> 2];
  HEAP32[$0 + 812 >> 2] = $1;
  std____2__fpos___mbstate_t___state_28__mbstate_t_29($0 + 1496 | 0, $0 + 808 | 0);
  $1 = HEAP32[$0 + 1496 >> 2];
  HEAP32[$0 + 1628 >> 2] = HEAP32[$0 + 1500 >> 2];
  HEAP32[$0 + 1624 >> 2] = $1;
  $1 = HEAP32[$0 + 1628 >> 2];
  HEAP32[$0 + 800 >> 2] = HEAP32[$0 + 1624 >> 2];
  HEAP32[$0 + 804 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_double_20_28maxiSample____29_28double_29___invoke_maxiSample__28char_20const__2c_20double_20_28maxiSample____29_28double_29_29(2306, $0 + 800 | 0);
  HEAP32[$0 + 1628 >> 2] = 0;
  HEAP32[$0 + 1624 >> 2] = 225;
  $1 = HEAP32[$0 + 1628 >> 2];
  HEAP32[$0 + 792 >> 2] = HEAP32[$0 + 1624 >> 2];
  HEAP32[$0 + 796 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_void_20_28maxiSample____29_28double_29___invoke_maxiSample__28char_20const__2c_20void_20_28maxiSample____29_28double_29_29(2315, $0 + 792 | 0);
  HEAP32[$0 + 1476 >> 2] = 0;
  HEAP32[$0 + 1472 >> 2] = 226;
  $1 = HEAP32[$0 + 1476 >> 2];
  HEAP32[$0 + 784 >> 2] = HEAP32[$0 + 1472 >> 2];
  HEAP32[$0 + 788 >> 2] = $1;
  std____2__fpos___mbstate_t___state_28__mbstate_t_29($0 + 1480 | 0, $0 + 784 | 0);
  $1 = HEAP32[$0 + 1480 >> 2];
  HEAP32[$0 + 1628 >> 2] = HEAP32[$0 + 1484 >> 2];
  HEAP32[$0 + 1624 >> 2] = $1;
  $1 = HEAP32[$0 + 1628 >> 2];
  HEAP32[$0 + 776 >> 2] = HEAP32[$0 + 1624 >> 2];
  HEAP32[$0 + 780 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_double_20_28maxiSample____29_28double_2c_20double_29___invoke_maxiSample__28char_20const__2c_20double_20_28maxiSample____29_28double_2c_20double_29_29(2327, $0 + 776 | 0);
  HEAP32[$0 + 1460 >> 2] = 0;
  HEAP32[$0 + 1456 >> 2] = 227;
  $1 = HEAP32[$0 + 1460 >> 2];
  HEAP32[$0 + 768 >> 2] = HEAP32[$0 + 1456 >> 2];
  HEAP32[$0 + 772 >> 2] = $1;
  std____2__fpos___mbstate_t___state_28__mbstate_t_29($0 + 1464 | 0, $0 + 768 | 0);
  $1 = HEAP32[$0 + 1464 >> 2];
  HEAP32[$0 + 1628 >> 2] = HEAP32[$0 + 1468 >> 2];
  HEAP32[$0 + 1624 >> 2] = $1;
  $1 = HEAP32[$0 + 1628 >> 2];
  HEAP32[$0 + 760 >> 2] = HEAP32[$0 + 1624 >> 2];
  HEAP32[$0 + 764 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_double_20_28maxiSample____29_28double_29___invoke_maxiSample__28char_20const__2c_20double_20_28maxiSample____29_28double_29_29(2337, $0 + 760 | 0);
  HEAP32[$0 + 1444 >> 2] = 0;
  HEAP32[$0 + 1440 >> 2] = 228;
  $1 = HEAP32[$0 + 1444 >> 2];
  HEAP32[$0 + 752 >> 2] = HEAP32[$0 + 1440 >> 2];
  HEAP32[$0 + 756 >> 2] = $1;
  std____2__fpos___mbstate_t___state_28__mbstate_t_29($0 + 1448 | 0, $0 + 752 | 0);
  $1 = HEAP32[$0 + 1448 >> 2];
  HEAP32[$0 + 1628 >> 2] = HEAP32[$0 + 1452 >> 2];
  HEAP32[$0 + 1624 >> 2] = $1;
  $1 = HEAP32[$0 + 1628 >> 2];
  HEAP32[$0 + 744 >> 2] = HEAP32[$0 + 1624 >> 2];
  HEAP32[$0 + 748 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_double_20_28maxiSample____29_28double_2c_20double_29___invoke_maxiSample__28char_20const__2c_20double_20_28maxiSample____29_28double_2c_20double_29_29(2337, $0 + 744 | 0);
  HEAP32[$0 + 1428 >> 2] = 0;
  HEAP32[$0 + 1424 >> 2] = 229;
  $1 = HEAP32[$0 + 1428 >> 2];
  HEAP32[$0 + 736 >> 2] = HEAP32[$0 + 1424 >> 2];
  HEAP32[$0 + 740 >> 2] = $1;
  std____2__fpos___mbstate_t___state_28__mbstate_t_29($0 + 1432 | 0, $0 + 736 | 0);
  $1 = HEAP32[$0 + 1432 >> 2];
  HEAP32[$0 + 1628 >> 2] = HEAP32[$0 + 1436 >> 2];
  HEAP32[$0 + 1624 >> 2] = $1;
  $1 = HEAP32[$0 + 1628 >> 2];
  HEAP32[$0 + 728 >> 2] = HEAP32[$0 + 1624 >> 2];
  HEAP32[$0 + 732 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_double_20_28maxiSample____29_28double_2c_20double_2c_20double_29___invoke_maxiSample__28char_20const__2c_20double_20_28maxiSample____29_28double_2c_20double_2c_20double_29_29(2337, $0 + 728 | 0);
  HEAP32[$0 + 1412 >> 2] = 0;
  HEAP32[$0 + 1408 >> 2] = 230;
  $1 = HEAP32[$0 + 1412 >> 2];
  HEAP32[$0 + 720 >> 2] = HEAP32[$0 + 1408 >> 2];
  HEAP32[$0 + 724 >> 2] = $1;
  std____2__fpos___mbstate_t___state_28__mbstate_t_29($0 + 1416 | 0, $0 + 720 | 0);
  $1 = HEAP32[$0 + 1416 >> 2];
  HEAP32[$0 + 1628 >> 2] = HEAP32[$0 + 1420 >> 2];
  HEAP32[$0 + 1624 >> 2] = $1;
  $1 = HEAP32[$0 + 1628 >> 2];
  HEAP32[$0 + 712 >> 2] = HEAP32[$0 + 1624 >> 2];
  HEAP32[$0 + 716 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_double_20_28maxiSample____29_28_29___invoke_maxiSample__28char_20const__2c_20double_20_28maxiSample____29_28_29_29(2076, $0 + 712 | 0);
  HEAP32[$0 + 1396 >> 2] = 0;
  HEAP32[$0 + 1392 >> 2] = 231;
  $1 = HEAP32[$0 + 1396 >> 2];
  HEAP32[$0 + 704 >> 2] = HEAP32[$0 + 1392 >> 2];
  HEAP32[$0 + 708 >> 2] = $1;
  std____2__fpos___mbstate_t___state_28__mbstate_t_29($0 + 1400 | 0, $0 + 704 | 0);
  $1 = HEAP32[$0 + 1400 >> 2];
  HEAP32[$0 + 1628 >> 2] = HEAP32[$0 + 1404 >> 2];
  HEAP32[$0 + 1624 >> 2] = $1;
  $1 = HEAP32[$0 + 1628 >> 2];
  HEAP32[$0 + 696 >> 2] = HEAP32[$0 + 1624 >> 2];
  HEAP32[$0 + 700 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_double_20_28maxiSample____29_28double_29___invoke_maxiSample__28char_20const__2c_20double_20_28maxiSample____29_28double_29_29(2076, $0 + 696 | 0);
  HEAP32[$0 + 1380 >> 2] = 0;
  HEAP32[$0 + 1376 >> 2] = 232;
  $1 = HEAP32[$0 + 1380 >> 2];
  HEAP32[$0 + 688 >> 2] = HEAP32[$0 + 1376 >> 2];
  HEAP32[$0 + 692 >> 2] = $1;
  std____2__fpos___mbstate_t___state_28__mbstate_t_29($0 + 1384 | 0, $0 + 688 | 0);
  $1 = HEAP32[$0 + 1384 >> 2];
  HEAP32[$0 + 1628 >> 2] = HEAP32[$0 + 1388 >> 2];
  HEAP32[$0 + 1624 >> 2] = $1;
  $1 = HEAP32[$0 + 1628 >> 2];
  HEAP32[$0 + 680 >> 2] = HEAP32[$0 + 1624 >> 2];
  HEAP32[$0 + 684 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_double_20_28maxiSample____29_28double_2c_20double_2c_20double_29___invoke_maxiSample__28char_20const__2c_20double_20_28maxiSample____29_28double_2c_20double_2c_20double_29_29(2076, $0 + 680 | 0);
  HEAP32[$0 + 1628 >> 2] = 0;
  HEAP32[$0 + 1624 >> 2] = 233;
  $1 = HEAP32[$0 + 1628 >> 2];
  HEAP32[$0 + 672 >> 2] = HEAP32[$0 + 1624 >> 2];
  HEAP32[$0 + 676 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_double_20_28maxiSample____29_28double_2c_20double_2c_20double_29___invoke_maxiSample__28char_20const__2c_20double_20_28maxiSample____29_28double_2c_20double_2c_20double_29_29(2346, $0 + 672 | 0);
  HEAP32[$0 + 1628 >> 2] = 0;
  HEAP32[$0 + 1624 >> 2] = 234;
  $1 = HEAP32[$0 + 1628 >> 2];
  HEAP32[$0 + 664 >> 2] = HEAP32[$0 + 1624 >> 2];
  HEAP32[$0 + 668 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_void_20_28maxiSample____29_28_29___invoke_maxiSample__28char_20const__2c_20void_20_28maxiSample____29_28_29_29(1840, $0 + 664 | 0);
  HEAP32[$0 + 1628 >> 2] = 0;
  HEAP32[$0 + 1624 >> 2] = 235;
  $1 = HEAP32[$0 + 1628 >> 2];
  HEAP32[$0 + 656 >> 2] = HEAP32[$0 + 1624 >> 2];
  HEAP32[$0 + 660 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_void_20_28maxiSample____29_28_29___invoke_maxiSample__28char_20const__2c_20void_20_28maxiSample____29_28_29_29(2352, $0 + 656 | 0);
  HEAP32[$0 + 1628 >> 2] = 0;
  HEAP32[$0 + 1624 >> 2] = 236;
  $1 = HEAP32[$0 + 1628 >> 2];
  HEAP32[$0 + 648 >> 2] = HEAP32[$0 + 1624 >> 2];
  HEAP32[$0 + 652 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_void_20_28maxiSample____29_28double_29___invoke_maxiSample__28char_20const__2c_20void_20_28maxiSample____29_28double_29_29(2358, $0 + 648 | 0);
  HEAP32[$0 + 1628 >> 2] = 0;
  HEAP32[$0 + 1624 >> 2] = 237;
  $1 = HEAP32[$0 + 1628 >> 2];
  HEAP32[$0 + 640 >> 2] = HEAP32[$0 + 1624 >> 2];
  HEAP32[$0 + 644 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_void_20_28maxiSample____29_28float_2c_20float_2c_20bool_2c_20bool_29___invoke_maxiSample__28char_20const__2c_20void_20_28maxiSample____29_28float_2c_20float_2c_20bool_2c_20bool_29_29($0 + 640 | 0);
  HEAP32[$0 + 1628 >> 2] = 0;
  HEAP32[$0 + 1624 >> 2] = 238;
  $1 = HEAP32[$0 + 1628 >> 2];
  HEAP32[$0 + 632 >> 2] = HEAP32[$0 + 1624 >> 2];
  HEAP32[$0 + 636 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_bool_20_28maxiSample____29_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20int_29___invoke_maxiSample__28char_20const__2c_20bool_20_28maxiSample____29_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20int_29_29($0 + 632 | 0);
  HEAP32[$0 + 1628 >> 2] = 0;
  HEAP32[$0 + 1624 >> 2] = 239;
  $1 = HEAP32[$0 + 1628 >> 2];
  HEAP32[$0 + 624 >> 2] = HEAP32[$0 + 1624 >> 2];
  HEAP32[$0 + 628 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_bool_20_28maxiSample____29_28_29___invoke_maxiSample__28char_20const__2c_20bool_20_28maxiSample____29_28_29_29(2382, $0 + 624 | 0);
  HEAP32[$0 + 1628 >> 2] = 0;
  HEAP32[$0 + 1624 >> 2] = 240;
  $1 = HEAP32[$0 + 1628 >> 2];
  HEAP32[$0 + 616 >> 2] = HEAP32[$0 + 1624 >> 2];
  HEAP32[$0 + 620 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_double_20_28maxiSample____29_28double_2c_20double_29___invoke_maxiSample__28char_20const__2c_20double_20_28maxiSample____29_28double_2c_20double_29_29(2387, $0 + 616 | 0);
  _embind_register_class(11428, 11448, 11476, 0, 4688, 241, 4691, 0, 4691, 0, 2402, 4693, 242);
  _embind_register_smart_ptr(11780, 11428, 2410, 2, 4688, 243, 6772, 244, 4752, 245, 4693, 246);
  _embind_register_class_constructor(11428, 1, 11788, 4688, 247, 248);
  void_20emscripten__internal__RegisterClassMethod_double_20_28__29_28double_2c_20double_2c_20double_2c_20double_2c_20double_29___invoke_maxiMap__28char_20const__2c_20double_20_28__29_28double_2c_20double_2c_20double_2c_20double_2c_20double_29_29(2430, 249);
  void_20emscripten__internal__RegisterClassMethod_double_20_28__29_28double_2c_20double_2c_20double_2c_20double_2c_20double_29___invoke_maxiMap__28char_20const__2c_20double_20_28__29_28double_2c_20double_2c_20double_2c_20double_2c_20double_29_29(2437, 250);
  void_20emscripten__internal__RegisterClassMethod_double_20_28__29_28double_2c_20double_2c_20double_2c_20double_2c_20double_29___invoke_maxiMap__28char_20const__2c_20double_20_28__29_28double_2c_20double_2c_20double_2c_20double_2c_20double_29_29(2444, 251);
  void_20emscripten__internal__RegisterClassMethod_double_20_28__29_28double_2c_20double_2c_20double_29___invoke_maxiMap__28char_20const__2c_20double_20_28__29_28double_2c_20double_2c_20double_29_29();
  _embind_register_class_class_function(11428, 2430, 6, 11904, 11928, 253, 249);
  _embind_register_class_class_function(11428, 2437, 6, 11904, 11928, 253, 250);
  _embind_register_class_class_function(11428, 2444, 6, 11904, 11928, 253, 251);
  _embind_register_class_class_function(11428, 2451, 4, 9968, 9984, 191, 252);
  _embind_register_class(11948, 11968, 11996, 0, 4688, 254, 4691, 0, 4691, 0, 2457, 4693, 255);
  _embind_register_smart_ptr(12300, 11948, 2465, 2, 4688, 256, 6772, 257, 4752, 258, 4693, 259);
  _embind_register_class_constructor(11948, 1, 12308, 4688, 260, 261);
  HEAP32[$0 + 1628 >> 2] = 0;
  HEAP32[$0 + 1624 >> 2] = 262;
  $1 = HEAP32[$0 + 1628 >> 2];
  HEAP32[$0 + 608 >> 2] = HEAP32[$0 + 1624 >> 2];
  HEAP32[$0 + 612 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_double_20_28maxiDyn____29_28double_2c_20double_2c_20long_2c_20double_2c_20double_29___invoke_maxiDyn__28char_20const__2c_20double_20_28maxiDyn____29_28double_2c_20double_2c_20long_2c_20double_2c_20double_29_29($0 + 608 | 0);
  HEAP32[$0 + 1628 >> 2] = 0;
  HEAP32[$0 + 1624 >> 2] = 263;
  $1 = HEAP32[$0 + 1628 >> 2];
  HEAP32[$0 + 600 >> 2] = HEAP32[$0 + 1624 >> 2];
  HEAP32[$0 + 604 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_double_20_28maxiDyn____29_28double_2c_20double_2c_20double_2c_20double_2c_20double_29___invoke_maxiDyn__28char_20const__2c_20double_20_28maxiDyn____29_28double_2c_20double_2c_20double_2c_20double_2c_20double_29_29($0 + 600 | 0);
  HEAP32[$0 + 1628 >> 2] = 0;
  HEAP32[$0 + 1624 >> 2] = 264;
  $1 = HEAP32[$0 + 1628 >> 2];
  HEAP32[$0 + 592 >> 2] = HEAP32[$0 + 1624 >> 2];
  HEAP32[$0 + 596 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_double_20_28maxiDyn____29_28double_29___invoke_maxiDyn__28char_20const__2c_20double_20_28maxiDyn____29_28double_29_29($0 + 592 | 0);
  HEAP32[$0 + 1628 >> 2] = 0;
  HEAP32[$0 + 1624 >> 2] = 265;
  $1 = HEAP32[$0 + 1628 >> 2];
  HEAP32[$0 + 584 >> 2] = HEAP32[$0 + 1624 >> 2];
  HEAP32[$0 + 588 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_void_20_28maxiDyn____29_28double_29___invoke_maxiDyn__28char_20const__2c_20void_20_28maxiDyn____29_28double_29_29(2510, $0 + 584 | 0);
  HEAP32[$0 + 1628 >> 2] = 0;
  HEAP32[$0 + 1624 >> 2] = 266;
  $1 = HEAP32[$0 + 1628 >> 2];
  HEAP32[$0 + 576 >> 2] = HEAP32[$0 + 1624 >> 2];
  HEAP32[$0 + 580 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_void_20_28maxiDyn____29_28double_29___invoke_maxiDyn__28char_20const__2c_20void_20_28maxiDyn____29_28double_29_29(2520, $0 + 576 | 0);
  HEAP32[$0 + 1628 >> 2] = 0;
  HEAP32[$0 + 1624 >> 2] = 267;
  $1 = HEAP32[$0 + 1628 >> 2];
  HEAP32[$0 + 568 >> 2] = HEAP32[$0 + 1624 >> 2];
  HEAP32[$0 + 572 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_void_20_28maxiDyn____29_28double_29___invoke_maxiDyn__28char_20const__2c_20void_20_28maxiDyn____29_28double_29_29(2531, $0 + 568 | 0);
  HEAP32[$0 + 1628 >> 2] = 0;
  HEAP32[$0 + 1624 >> 2] = 268;
  $1 = HEAP32[$0 + 1628 >> 2];
  HEAP32[$0 + 560 >> 2] = HEAP32[$0 + 1624 >> 2];
  HEAP32[$0 + 564 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_void_20_28maxiDyn____29_28double_29___invoke_maxiDyn__28char_20const__2c_20void_20_28maxiDyn____29_28double_29_29(2544, $0 + 560 | 0);
  _embind_register_class(12540, 12560, 12588, 0, 4688, 269, 4691, 0, 4691, 0, 2553, 4693, 270);
  _embind_register_smart_ptr(12892, 12540, 2561, 2, 4688, 271, 6772, 272, 4752, 273, 4693, 274);
  _embind_register_class_constructor(12540, 1, 12900, 4688, 275, 276);
  HEAP32[$0 + 1628 >> 2] = 0;
  HEAP32[$0 + 1624 >> 2] = 277;
  $1 = HEAP32[$0 + 1628 >> 2];
  HEAP32[$0 + 552 >> 2] = HEAP32[$0 + 1624 >> 2];
  HEAP32[$0 + 556 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_double_20_28maxiEnv____29_28double_2c_20double_2c_20double_2c_20long_2c_20int_29___invoke_maxiEnv__28char_20const__2c_20double_20_28maxiEnv____29_28double_2c_20double_2c_20double_2c_20long_2c_20int_29_29($0 + 552 | 0);
  HEAP32[$0 + 1364 >> 2] = 0;
  HEAP32[$0 + 1360 >> 2] = 278;
  $1 = HEAP32[$0 + 1364 >> 2];
  HEAP32[$0 + 544 >> 2] = HEAP32[$0 + 1360 >> 2];
  HEAP32[$0 + 548 >> 2] = $1;
  std____2__fpos___mbstate_t___state_28__mbstate_t_29($0 + 1368 | 0, $0 + 544 | 0);
  $1 = HEAP32[$0 + 1368 >> 2];
  HEAP32[$0 + 1628 >> 2] = HEAP32[$0 + 1372 >> 2];
  HEAP32[$0 + 1624 >> 2] = $1;
  $1 = HEAP32[$0 + 1628 >> 2];
  HEAP32[$0 + 536 >> 2] = HEAP32[$0 + 1624 >> 2];
  HEAP32[$0 + 540 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_double_20_28maxiEnv____29_28double_2c_20double_2c_20double_2c_20double_2c_20double_2c_20long_2c_20int_29___invoke_maxiEnv__28char_20const__2c_20double_20_28maxiEnv____29_28double_2c_20double_2c_20double_2c_20double_2c_20double_2c_20long_2c_20int_29_29($0 + 536 | 0);
  HEAP32[$0 + 1348 >> 2] = 0;
  HEAP32[$0 + 1344 >> 2] = 279;
  $1 = HEAP32[$0 + 1348 >> 2];
  HEAP32[$0 + 528 >> 2] = HEAP32[$0 + 1344 >> 2];
  HEAP32[$0 + 532 >> 2] = $1;
  std____2__fpos___mbstate_t___state_28__mbstate_t_29($0 + 1352 | 0, $0 + 528 | 0);
  $1 = HEAP32[$0 + 1352 >> 2];
  HEAP32[$0 + 1628 >> 2] = HEAP32[$0 + 1356 >> 2];
  HEAP32[$0 + 1624 >> 2] = $1;
  $1 = HEAP32[$0 + 1628 >> 2];
  HEAP32[$0 + 520 >> 2] = HEAP32[$0 + 1624 >> 2];
  HEAP32[$0 + 524 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_double_20_28maxiEnv____29_28double_2c_20int_29___invoke_maxiEnv__28char_20const__2c_20double_20_28maxiEnv____29_28double_2c_20int_29_29($0 + 520 | 0);
  HEAP32[$0 + 1628 >> 2] = 0;
  HEAP32[$0 + 1624 >> 2] = 280;
  $1 = HEAP32[$0 + 1628 >> 2];
  HEAP32[$0 + 512 >> 2] = HEAP32[$0 + 1624 >> 2];
  HEAP32[$0 + 516 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_void_20_28maxiEnv____29_28double_29___invoke_maxiEnv__28char_20const__2c_20void_20_28maxiEnv____29_28double_29_29(2510, $0 + 512 | 0);
  HEAP32[$0 + 1628 >> 2] = 0;
  HEAP32[$0 + 1624 >> 2] = 281;
  $1 = HEAP32[$0 + 1628 >> 2];
  HEAP32[$0 + 504 >> 2] = HEAP32[$0 + 1624 >> 2];
  HEAP32[$0 + 508 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_void_20_28maxiEnv____29_28double_29___invoke_maxiEnv__28char_20const__2c_20void_20_28maxiEnv____29_28double_29_29(2520, $0 + 504 | 0);
  HEAP32[$0 + 1628 >> 2] = 0;
  HEAP32[$0 + 1624 >> 2] = 282;
  $1 = HEAP32[$0 + 1628 >> 2];
  HEAP32[$0 + 496 >> 2] = HEAP32[$0 + 1624 >> 2];
  HEAP32[$0 + 500 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_void_20_28maxiEnv____29_28double_29___invoke_maxiEnv__28char_20const__2c_20void_20_28maxiEnv____29_28double_29_29(2589, $0 + 496 | 0);
  HEAP32[$0 + 1628 >> 2] = 0;
  HEAP32[$0 + 1624 >> 2] = 283;
  $1 = HEAP32[$0 + 1628 >> 2];
  HEAP32[$0 + 488 >> 2] = HEAP32[$0 + 1624 >> 2];
  HEAP32[$0 + 492 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_void_20_28maxiEnv____29_28double_29___invoke_maxiEnv__28char_20const__2c_20void_20_28maxiEnv____29_28double_29_29(2598, $0 + 488 | 0);
  HEAP32[$0 + 1628 >> 2] = 0;
  HEAP32[$0 + 1624 >> 2] = 284;
  $1 = HEAP32[$0 + 1628 >> 2];
  HEAP32[$0 + 480 >> 2] = HEAP32[$0 + 1624 >> 2];
  HEAP32[$0 + 484 >> 2] = $1;
  $1 = emscripten__internal__GetterPolicy_int_20_28maxiSettings____29_28_29_20const___getContext_28int_20_28maxiSettings____29_28_29_20const_29($0 + 480 | 0);
  HEAP32[$0 + 1620 >> 2] = 0;
  HEAP32[$0 + 1616 >> 2] = 285;
  $2 = HEAP32[$0 + 1620 >> 2];
  HEAP32[$0 + 472 >> 2] = HEAP32[$0 + 1616 >> 2];
  HEAP32[$0 + 476 >> 2] = $2;
  _embind_register_class_property(12540, 1840, 49468, 4752, 286, $1 | 0, 49468, 4712, 287, emscripten__internal__GetterPolicy_int_20_28maxiSettings____29_28_29_20const___getContext_28int_20_28maxiSettings____29_28_29_20const_29($0 + 472 | 0) | 0);
  _embind_register_class(13152, 13172, 13200, 0, 4688, 288, 4691, 0, 4691, 0, 2609, 4693, 289);
  _embind_register_smart_ptr(13504, 13152, 2617, 2, 4688, 290, 6772, 291, 4752, 292, 4693, 293);
  _embind_register_class_constructor(13152, 1, 13512, 4688, 294, 295);
  void_20emscripten__internal__RegisterClassMethod_double_20_28__29_28int_29___invoke_convert__28char_20const__2c_20double_20_28__29_28int_29_29();
  _embind_register_class_class_function(13152, 2637, 2, 13616, 6976, 297, 296);
  void_20emscripten__internal__RegisterClassMethod_double_20_28__29_28double_29___invoke_convert__28char_20const__2c_20double_20_28__29_28double_29_29();
  _embind_register_class_class_function(13152, 2642, 2, 13624, 13632, 299, 298);
  _embind_register_class(13656, 13688, 13728, 0, 4688, 300, 4691, 0, 4691, 0, 2652, 4693, 301);
  _embind_register_smart_ptr(14064, 13656, 2670, 2, 4688, 302, 6772, 303, 4752, 304, 4693, 305);
  _embind_register_class_constructor(13656, 1, 14072, 4688, 306, 307);
  HEAP32[$0 + 1628 >> 2] = 0;
  HEAP32[$0 + 1624 >> 2] = 308;
  $1 = HEAP32[$0 + 1628 >> 2];
  HEAP32[$0 + 464 >> 2] = HEAP32[$0 + 1624 >> 2];
  HEAP32[$0 + 468 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_double_20_28maxiSampleAndHold____29_28double_2c_20double_29___invoke_maxiSampleAndHold__28char_20const__2c_20double_20_28maxiSampleAndHold____29_28double_2c_20double_29_29($0 + 464 | 0);
  _embind_register_class(14228, 14256, 14296, 0, 4688, 309, 4691, 0, 4691, 0, 2704, 4693, 310);
  _embind_register_smart_ptr(14632, 14228, 2721, 2, 4688, 311, 6772, 312, 4752, 313, 4693, 314);
  _embind_register_class_constructor(14228, 1, 14640, 4688, 315, 316);
  HEAP32[$0 + 1628 >> 2] = 0;
  HEAP32[$0 + 1624 >> 2] = 317;
  $1 = HEAP32[$0 + 1628 >> 2];
  HEAP32[$0 + 456 >> 2] = HEAP32[$0 + 1624 >> 2];
  HEAP32[$0 + 460 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_double_20_28maxiNonlinearity____29_28double_29___invoke_maxiNonlinearity__28char_20const__2c_20double_20_28maxiNonlinearity____29_28double_29_29(2750, $0 + 456 | 0);
  HEAP32[$0 + 1628 >> 2] = 0;
  HEAP32[$0 + 1624 >> 2] = 318;
  $1 = HEAP32[$0 + 1628 >> 2];
  HEAP32[$0 + 448 >> 2] = HEAP32[$0 + 1624 >> 2];
  HEAP32[$0 + 452 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_double_20_28maxiNonlinearity____29_28double_2c_20double_29___invoke_maxiNonlinearity__28char_20const__2c_20double_20_28maxiNonlinearity____29_28double_2c_20double_29_29(2759, $0 + 448 | 0);
  HEAP32[$0 + 1628 >> 2] = 0;
  HEAP32[$0 + 1624 >> 2] = 319;
  $1 = HEAP32[$0 + 1628 >> 2];
  HEAP32[$0 + 440 >> 2] = HEAP32[$0 + 1624 >> 2];
  HEAP32[$0 + 444 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_double_20_28maxiNonlinearity____29_28double_2c_20double_29___invoke_maxiNonlinearity__28char_20const__2c_20double_20_28maxiNonlinearity____29_28double_2c_20double_29_29(2768, $0 + 440 | 0);
  HEAP32[$0 + 1628 >> 2] = 0;
  HEAP32[$0 + 1624 >> 2] = 320;
  $1 = HEAP32[$0 + 1628 >> 2];
  HEAP32[$0 + 432 >> 2] = HEAP32[$0 + 1624 >> 2];
  HEAP32[$0 + 436 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_double_20_28maxiNonlinearity____29_28double_29___invoke_maxiNonlinearity__28char_20const__2c_20double_20_28maxiNonlinearity____29_28double_29_29(2781, $0 + 432 | 0);
  HEAP32[$0 + 1628 >> 2] = 0;
  HEAP32[$0 + 1624 >> 2] = 321;
  $1 = HEAP32[$0 + 1628 >> 2];
  HEAP32[$0 + 424 >> 2] = HEAP32[$0 + 1624 >> 2];
  HEAP32[$0 + 428 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_double_20_28maxiNonlinearity____29_28double_29___invoke_maxiNonlinearity__28char_20const__2c_20double_20_28maxiNonlinearity____29_28double_29_29(2790, $0 + 424 | 0);
  HEAP32[$0 + 1628 >> 2] = 0;
  HEAP32[$0 + 1624 >> 2] = 322;
  $1 = HEAP32[$0 + 1628 >> 2];
  HEAP32[$0 + 416 >> 2] = HEAP32[$0 + 1624 >> 2];
  HEAP32[$0 + 420 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_double_20_28maxiNonlinearity____29_28double_2c_20double_2c_20double_29___invoke_maxiNonlinearity__28char_20const__2c_20double_20_28maxiNonlinearity____29_28double_2c_20double_2c_20double_29_29($0 + 416 | 0);
  _embind_register_class(14820, 14844, 14876, 0, 4688, 323, 4691, 0, 4691, 0, 2808, 4693, 324);
  _embind_register_smart_ptr(15196, 14820, 2820, 2, 4688, 325, 6772, 326, 4752, 327, 4693, 328);
  _embind_register_class_constructor(14820, 1, 15204, 4688, 329, 330);
  HEAP32[$0 + 1628 >> 2] = 0;
  HEAP32[$0 + 1624 >> 2] = 331;
  $1 = HEAP32[$0 + 1628 >> 2];
  HEAP32[$0 + 408 >> 2] = HEAP32[$0 + 1624 >> 2];
  HEAP32[$0 + 412 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_double_20_28maxiFlanger____29_28double_2c_20unsigned_20int_2c_20double_2c_20double_2c_20double_29___invoke_maxiFlanger__28char_20const__2c_20double_20_28maxiFlanger____29_28double_2c_20unsigned_20int_2c_20double_2c_20double_2c_20double_29_29($0 + 408 | 0);
  _embind_register_class(15380, 15404, 15436, 0, 4688, 332, 4691, 0, 4691, 0, 2851, 4693, 333);
  _embind_register_smart_ptr(15752, 15380, 2862, 2, 4688, 334, 6772, 335, 4752, 336, 4693, 337);
  _embind_register_class_constructor(15380, 1, 15760, 4688, 338, 339);
  HEAP32[$0 + 1628 >> 2] = 0;
  HEAP32[$0 + 1624 >> 2] = 340;
  $1 = HEAP32[$0 + 1628 >> 2];
  HEAP32[$0 + 400 >> 2] = HEAP32[$0 + 1624 >> 2];
  HEAP32[$0 + 404 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_double_20_28maxiChorus____29_28double_2c_20unsigned_20int_2c_20double_2c_20double_2c_20double_29___invoke_maxiChorus__28char_20const__2c_20double_20_28maxiChorus____29_28double_2c_20unsigned_20int_2c_20double_2c_20double_2c_20double_29_29($0 + 400 | 0);
  _embind_register_class(15916, 15944, 15980, 0, 4688, 341, 4691, 0, 4691, 0, 2892, 4693, 342);
  _embind_register_smart_ptr(16304, 15916, 2906, 2, 4688, 343, 6772, 344, 4752, 345, 4693, 346);
  _embind_register_class_constructor(15916, 1, 16312, 4688, 347, 348);
  HEAP32[$0 + 1628 >> 2] = 0;
  HEAP32[$0 + 1624 >> 2] = 349;
  $1 = HEAP32[$0 + 1628 >> 2];
  HEAP32[$0 + 392 >> 2] = HEAP32[$0 + 1624 >> 2];
  HEAP32[$0 + 396 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_double_20_28maxiDCBlocker____29_28double_2c_20double_29___invoke_maxiDCBlocker__28char_20const__2c_20double_20_28maxiDCBlocker____29_28double_2c_20double_29_29($0 + 392 | 0);
  _embind_register_class(16460, 16480, 16508, 0, 4688, 350, 4691, 0, 4691, 0, 2932, 4693, 351);
  _embind_register_smart_ptr(16812, 16460, 2940, 2, 4688, 352, 6772, 353, 4752, 354, 4693, 355);
  _embind_register_class_constructor(16460, 1, 16820, 4688, 356, 357);
  HEAP32[$0 + 1628 >> 2] = 0;
  HEAP32[$0 + 1624 >> 2] = 358;
  $1 = HEAP32[$0 + 1628 >> 2];
  HEAP32[$0 + 384 >> 2] = HEAP32[$0 + 1624 >> 2];
  HEAP32[$0 + 388 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_void_20_28maxiSVF____29_28double_29___invoke_maxiSVF__28char_20const__2c_20void_20_28maxiSVF____29_28double_29_29(2960, $0 + 384 | 0);
  HEAP32[$0 + 1628 >> 2] = 0;
  HEAP32[$0 + 1624 >> 2] = 359;
  $1 = HEAP32[$0 + 1628 >> 2];
  HEAP32[$0 + 376 >> 2] = HEAP32[$0 + 1624 >> 2];
  HEAP32[$0 + 380 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_void_20_28maxiSVF____29_28double_29___invoke_maxiSVF__28char_20const__2c_20void_20_28maxiSVF____29_28double_29_29(2970, $0 + 376 | 0);
  HEAP32[$0 + 1628 >> 2] = 0;
  HEAP32[$0 + 1624 >> 2] = 360;
  $1 = HEAP32[$0 + 1628 >> 2];
  HEAP32[$0 + 368 >> 2] = HEAP32[$0 + 1624 >> 2];
  HEAP32[$0 + 372 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_double_20_28maxiSVF____29_28double_2c_20double_2c_20double_2c_20double_2c_20double_29___invoke_maxiSVF__28char_20const__2c_20double_20_28maxiSVF____29_28double_2c_20double_2c_20double_2c_20double_2c_20double_29_29($0 + 368 | 0);
  _embind_register_class(16984, 17004, 17032, 0, 4688, 361, 4691, 0, 4691, 0, 2983, 4693, 362);
  _embind_register_smart_ptr(17340, 16984, 2992, 2, 4688, 363, 6772, 364, 4752, 365, 4693, 366);
  _embind_register_class_constructor(16984, 1, 17348, 4688, 367, 368);
  _embind_register_class_class_function(16984, 3013, 3, 17456, 17468, 369, 370);
  _embind_register_class_class_function(16984, 3017, 3, 17456, 17468, 369, 371);
  _embind_register_class_class_function(16984, 3021, 3, 17456, 17468, 369, 372);
  _embind_register_class_class_function(16984, 3025, 3, 17456, 17468, 369, 373);
  _embind_register_class_class_function(16984, 3029, 3, 17456, 17468, 369, 374);
  _embind_register_class_class_function(16984, 3032, 3, 17456, 17468, 369, 375);
  _embind_register_class_class_function(16984, 3035, 3, 17456, 17468, 369, 376);
  _embind_register_class_class_function(16984, 3039, 3, 17456, 17468, 369, 377);
  _embind_register_class_class_function(16984, 3043, 3, 17456, 17468, 369, 378);
  _embind_register_class_class_function(16984, 3047, 2, 13624, 13632, 299, 379);
  _embind_register_class_class_function(16984, 3051, 3, 17456, 17468, 369, 380);
  _embind_register_class(17484, 17504, 17536, 0, 4688, 381, 4691, 0, 4691, 0, 3055, 4693, 382);
  _embind_register_smart_ptr(17848, 17484, 3065, 2, 4688, 383, 6772, 384, 4752, 385, 4693, 386);
  _embind_register_class_constructor(17484, 1, 17856, 4688, 387, 388);
  HEAP32[$0 + 1628 >> 2] = 0;
  HEAP32[$0 + 1624 >> 2] = 389;
  $1 = HEAP32[$0 + 1628 >> 2];
  HEAP32[$0 + 360 >> 2] = HEAP32[$0 + 1624 >> 2];
  HEAP32[$0 + 364 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_void_20_28maxiClock____29_28_29___invoke_maxiClock__28char_20const__2c_20void_20_28maxiClock____29_28_29_29($0 + 360 | 0);
  HEAP32[$0 + 1628 >> 2] = 0;
  HEAP32[$0 + 1624 >> 2] = 390;
  $1 = HEAP32[$0 + 1628 >> 2];
  HEAP32[$0 + 352 >> 2] = HEAP32[$0 + 1624 >> 2];
  HEAP32[$0 + 356 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_void_20_28maxiClock____29_28double_29___invoke_maxiClock__28char_20const__2c_20void_20_28maxiClock____29_28double_29_29($0 + 352 | 0);
  HEAP32[$0 + 1628 >> 2] = 0;
  HEAP32[$0 + 1624 >> 2] = 391;
  $1 = HEAP32[$0 + 1628 >> 2];
  HEAP32[$0 + 344 >> 2] = HEAP32[$0 + 1624 >> 2];
  HEAP32[$0 + 348 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_void_20_28maxiClock____29_28int_29___invoke_maxiClock__28char_20const__2c_20void_20_28maxiClock____29_28int_29_29($0 + 344 | 0);
  HEAP32[$0 + 1628 >> 2] = 0;
  HEAP32[$0 + 1624 >> 2] = 392;
  $1 = HEAP32[$0 + 1628 >> 2];
  HEAP32[$0 + 336 >> 2] = HEAP32[$0 + 1624 >> 2];
  HEAP32[$0 + 340 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_int_20_28maxiClock____29_28_29_20const___invoke_maxiClock__28char_20const__2c_20int_20_28maxiClock____29_28_29_20const_29($0 + 336 | 0);
  HEAP32[$0 + 1628 >> 2] = 0;
  HEAP32[$0 + 1624 >> 2] = 393;
  $1 = HEAP32[$0 + 1628 >> 2];
  HEAP32[$0 + 328 >> 2] = HEAP32[$0 + 1624 >> 2];
  HEAP32[$0 + 332 >> 2] = $1;
  $1 = emscripten__internal__GetterPolicy_int_20_28maxiSettings____29_28_29_20const___getContext_28int_20_28maxiSettings____29_28_29_20const_29($0 + 328 | 0);
  HEAP32[$0 + 1620 >> 2] = 0;
  HEAP32[$0 + 1616 >> 2] = 394;
  $2 = HEAP32[$0 + 1620 >> 2];
  HEAP32[$0 + 320 >> 2] = HEAP32[$0 + 1616 >> 2];
  HEAP32[$0 + 324 >> 2] = $2;
  _embind_register_class_property(17484, 3126, 49468, 4752, 395, $1 | 0, 49468, 4712, 396, emscripten__internal__GetterPolicy_int_20_28maxiSettings____29_28_29_20const___getContext_28int_20_28maxiSettings____29_28_29_20const_29($0 + 320 | 0) | 0);
  HEAP32[$0 + 1628 >> 2] = 0;
  HEAP32[$0 + 1624 >> 2] = 397;
  $1 = HEAP32[$0 + 1628 >> 2];
  HEAP32[$0 + 312 >> 2] = HEAP32[$0 + 1624 >> 2];
  HEAP32[$0 + 316 >> 2] = $1;
  $1 = emscripten__internal__GetterPolicy_int_20_28maxiSettings____29_28_29_20const___getContext_28int_20_28maxiSettings____29_28_29_20const_29($0 + 312 | 0);
  HEAP32[$0 + 1620 >> 2] = 0;
  HEAP32[$0 + 1616 >> 2] = 398;
  $2 = HEAP32[$0 + 1620 >> 2];
  HEAP32[$0 + 304 >> 2] = HEAP32[$0 + 1616 >> 2];
  HEAP32[$0 + 308 >> 2] = $2;
  _embind_register_class_property(17484, 3126, 49468, 4752, 395, $1 | 0, 49468, 4712, 396, emscripten__internal__GetterPolicy_int_20_28maxiSettings____29_28_29_20const___getContext_28int_20_28maxiSettings____29_28_29_20const_29($0 + 304 | 0) | 0);
  HEAP32[$0 + 1628 >> 2] = 0;
  HEAP32[$0 + 1624 >> 2] = 399;
  $1 = HEAP32[$0 + 1628 >> 2];
  HEAP32[$0 + 296 >> 2] = HEAP32[$0 + 1624 >> 2];
  HEAP32[$0 + 300 >> 2] = $1;
  $1 = emscripten__internal__GetterPolicy_int_20_28maxiSettings____29_28_29_20const___getContext_28int_20_28maxiSettings____29_28_29_20const_29($0 + 296 | 0);
  HEAP32[$0 + 1620 >> 2] = 0;
  HEAP32[$0 + 1616 >> 2] = 400;
  $2 = HEAP32[$0 + 1620 >> 2];
  HEAP32[$0 + 288 >> 2] = HEAP32[$0 + 1616 >> 2];
  HEAP32[$0 + 292 >> 2] = $2;
  _embind_register_class_property(17484, 3139, 49468, 4752, 395, $1 | 0, 49468, 4712, 396, emscripten__internal__GetterPolicy_int_20_28maxiSettings____29_28_29_20const___getContext_28int_20_28maxiSettings____29_28_29_20const_29($0 + 288 | 0) | 0);
  HEAP32[$0 + 1628 >> 2] = 0;
  HEAP32[$0 + 1624 >> 2] = 401;
  $1 = HEAP32[$0 + 1628 >> 2];
  HEAP32[$0 + 280 >> 2] = HEAP32[$0 + 1624 >> 2];
  HEAP32[$0 + 284 >> 2] = $1;
  $1 = emscripten__internal__GetterPolicy_int_20_28maxiSettings____29_28_29_20const___getContext_28int_20_28maxiSettings____29_28_29_20const_29($0 + 280 | 0);
  HEAP32[$0 + 1620 >> 2] = 0;
  HEAP32[$0 + 1616 >> 2] = 402;
  $2 = HEAP32[$0 + 1620 >> 2];
  HEAP32[$0 + 272 >> 2] = HEAP32[$0 + 1616 >> 2];
  HEAP32[$0 + 276 >> 2] = $2;
  _embind_register_class_property(17484, 3148, 49528, 6976, 403, $1 | 0, 49468, 4712, 396, emscripten__internal__GetterPolicy_int_20_28maxiSettings____29_28_29_20const___getContext_28int_20_28maxiSettings____29_28_29_20const_29($0 + 272 | 0) | 0);
  HEAP32[$0 + 1628 >> 2] = 0;
  HEAP32[$0 + 1624 >> 2] = 404;
  $1 = HEAP32[$0 + 1628 >> 2];
  HEAP32[$0 + 264 >> 2] = HEAP32[$0 + 1624 >> 2];
  HEAP32[$0 + 268 >> 2] = $1;
  $1 = emscripten__internal__GetterPolicy_int_20_28maxiSettings____29_28_29_20const___getContext_28int_20_28maxiSettings____29_28_29_20const_29($0 + 264 | 0);
  HEAP32[$0 + 1620 >> 2] = 0;
  HEAP32[$0 + 1616 >> 2] = 405;
  $2 = HEAP32[$0 + 1620 >> 2];
  HEAP32[$0 + 256 >> 2] = HEAP32[$0 + 1616 >> 2];
  HEAP32[$0 + 260 >> 2] = $2;
  _embind_register_class_property(17484, 3152, 49528, 6976, 403, $1 | 0, 49468, 4712, 396, emscripten__internal__GetterPolicy_int_20_28maxiSettings____29_28_29_20const___getContext_28int_20_28maxiSettings____29_28_29_20const_29($0 + 256 | 0) | 0);
  HEAP32[$0 + 1628 >> 2] = 0;
  HEAP32[$0 + 1624 >> 2] = 406;
  $1 = HEAP32[$0 + 1628 >> 2];
  HEAP32[$0 + 248 >> 2] = HEAP32[$0 + 1624 >> 2];
  HEAP32[$0 + 252 >> 2] = $1;
  $1 = emscripten__internal__GetterPolicy_int_20_28maxiSettings____29_28_29_20const___getContext_28int_20_28maxiSettings____29_28_29_20const_29($0 + 248 | 0);
  HEAP32[$0 + 1620 >> 2] = 0;
  HEAP32[$0 + 1616 >> 2] = 407;
  $2 = HEAP32[$0 + 1620 >> 2];
  HEAP32[$0 + 240 >> 2] = HEAP32[$0 + 1616 >> 2];
  HEAP32[$0 + 244 >> 2] = $2;
  _embind_register_class_property(17484, 3156, 49396, 4752, 408, $1 | 0, 49468, 4712, 396, emscripten__internal__GetterPolicy_int_20_28maxiSettings____29_28_29_20const___getContext_28int_20_28maxiSettings____29_28_29_20const_29($0 + 240 | 0) | 0);
  HEAP32[$0 + 1628 >> 2] = 0;
  HEAP32[$0 + 1624 >> 2] = 409;
  $1 = HEAP32[$0 + 1628 >> 2];
  HEAP32[$0 + 232 >> 2] = HEAP32[$0 + 1624 >> 2];
  HEAP32[$0 + 236 >> 2] = $1;
  $1 = emscripten__internal__GetterPolicy_int_20_28maxiSettings____29_28_29_20const___getContext_28int_20_28maxiSettings____29_28_29_20const_29($0 + 232 | 0);
  HEAP32[$0 + 1620 >> 2] = 0;
  HEAP32[$0 + 1616 >> 2] = 410;
  $2 = HEAP32[$0 + 1620 >> 2];
  HEAP32[$0 + 224 >> 2] = HEAP32[$0 + 1616 >> 2];
  HEAP32[$0 + 228 >> 2] = $2;
  _embind_register_class_property(17484, 3161, 49468, 4752, 395, $1 | 0, 49468, 4712, 396, emscripten__internal__GetterPolicy_int_20_28maxiSettings____29_28_29_20const___getContext_28int_20_28maxiSettings____29_28_29_20const_29($0 + 224 | 0) | 0);
  _embind_register_class(18032, 18068, 18112, 0, 4688, 411, 4691, 0, 4691, 0, 3167, 4693, 412);
  _embind_register_smart_ptr(18464, 18032, 3190, 2, 4688, 413, 6772, 414, 4752, 415, 4693, 416);
  _embind_register_class_constructor(18032, 1, 18472, 4688, 417, 418);
  HEAP32[$0 + 1628 >> 2] = 0;
  HEAP32[$0 + 1624 >> 2] = 419;
  $1 = HEAP32[$0 + 1628 >> 2];
  HEAP32[$0 + 216 >> 2] = HEAP32[$0 + 1624 >> 2];
  HEAP32[$0 + 220 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_double_20_28maxiKuramotoOscillator____29_28double_2c_20double_2c_20std____2__vector_double_2c_20std____2__allocator_double__20__29___invoke_maxiKuramotoOscillator__28char_20const__2c_20double_20_28maxiKuramotoOscillator____29_28double_2c_20double_2c_20std____2__vector_double_2c_20std____2__allocator_double__20__29_29($0 + 216 | 0);
  HEAP32[$0 + 1628 >> 2] = 0;
  HEAP32[$0 + 1624 >> 2] = 420;
  $1 = HEAP32[$0 + 1628 >> 2];
  HEAP32[$0 + 208 >> 2] = HEAP32[$0 + 1624 >> 2];
  HEAP32[$0 + 212 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_void_20_28maxiKuramotoOscillator____29_28double_29___invoke_maxiKuramotoOscillator__28char_20const__2c_20void_20_28maxiKuramotoOscillator____29_28double_29_29($0 + 208 | 0);
  HEAP32[$0 + 1628 >> 2] = 0;
  HEAP32[$0 + 1624 >> 2] = 421;
  $1 = HEAP32[$0 + 1628 >> 2];
  HEAP32[$0 + 200 >> 2] = HEAP32[$0 + 1624 >> 2];
  HEAP32[$0 + 204 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_double_20_28maxiKuramotoOscillator____29_28_29___invoke_maxiKuramotoOscillator__28char_20const__2c_20double_20_28maxiKuramotoOscillator____29_28_29_29($0 + 200 | 0);
  _embind_register_class(18668, 18708, 18756, 0, 4688, 422, 4691, 0, 4691, 0, 3243, 4693, 423);
  _embind_register_smart_ptr(19116, 18668, 3269, 2, 4688, 424, 6772, 425, 4752, 426, 4693, 427);
  _embind_register_class_constructor(18668, 2, 19124, 4752, 428, 429);
  HEAP32[$0 + 1628 >> 2] = 0;
  HEAP32[$0 + 1624 >> 2] = 430;
  $1 = HEAP32[$0 + 1628 >> 2];
  HEAP32[$0 + 192 >> 2] = HEAP32[$0 + 1624 >> 2];
  HEAP32[$0 + 196 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_double_20_28maxiKuramotoOscillatorSet____29_28double_2c_20double_29___invoke_maxiKuramotoOscillatorSet__28char_20const__2c_20double_20_28maxiKuramotoOscillatorSet____29_28double_2c_20double_29_29($0 + 192 | 0);
  HEAP32[$0 + 1628 >> 2] = 0;
  HEAP32[$0 + 1624 >> 2] = 431;
  $1 = HEAP32[$0 + 1628 >> 2];
  HEAP32[$0 + 184 >> 2] = HEAP32[$0 + 1624 >> 2];
  HEAP32[$0 + 188 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_void_20_28maxiKuramotoOscillatorSet____29_28double_2c_20unsigned_20long_29___invoke_maxiKuramotoOscillatorSet__28char_20const__2c_20void_20_28maxiKuramotoOscillatorSet____29_28double_2c_20unsigned_20long_29_29($0 + 184 | 0);
  HEAP32[$0 + 1628 >> 2] = 0;
  HEAP32[$0 + 1624 >> 2] = 432;
  $1 = HEAP32[$0 + 1628 >> 2];
  HEAP32[$0 + 176 >> 2] = HEAP32[$0 + 1624 >> 2];
  HEAP32[$0 + 180 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_void_20_28maxiKuramotoOscillatorSet____29_28std____2__vector_double_2c_20std____2__allocator_double__20__20const__29___invoke_maxiKuramotoOscillatorSet__28char_20const__2c_20void_20_28maxiKuramotoOscillatorSet____29_28std____2__vector_double_2c_20std____2__allocator_double__20__20const__29_29($0 + 176 | 0);
  HEAP32[$0 + 1628 >> 2] = 0;
  HEAP32[$0 + 1624 >> 2] = 433;
  $1 = HEAP32[$0 + 1628 >> 2];
  HEAP32[$0 + 168 >> 2] = HEAP32[$0 + 1624 >> 2];
  HEAP32[$0 + 172 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_double_20_28maxiKuramotoOscillatorSet____29_28unsigned_20long_29___invoke_maxiKuramotoOscillatorSet__28char_20const__2c_20double_20_28maxiKuramotoOscillatorSet____29_28unsigned_20long_29_29($0 + 168 | 0);
  HEAP32[$0 + 1628 >> 2] = 0;
  HEAP32[$0 + 1624 >> 2] = 434;
  $1 = HEAP32[$0 + 1628 >> 2];
  HEAP32[$0 + 160 >> 2] = HEAP32[$0 + 1624 >> 2];
  HEAP32[$0 + 164 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_unsigned_20long_20_28maxiKuramotoOscillatorSet____29_28_29___invoke_maxiKuramotoOscillatorSet__28char_20const__2c_20unsigned_20long_20_28maxiKuramotoOscillatorSet____29_28_29_29($0 + 160 | 0);
  _embind_register_class(19376, 19420, 19468, 18668, 4688, 435, 4688, 665, 4688, 666, 3322, 4693, 436);
  _embind_register_smart_ptr(19836, 19376, 3350, 2, 4688, 437, 6772, 438, 4752, 439, 4693, 440);
  _embind_register_class_constructor(19376, 2, 19844, 4752, 441, 442);
  HEAP32[$0 + 1628 >> 2] = 0;
  HEAP32[$0 + 1624 >> 2] = 443;
  $1 = HEAP32[$0 + 1628 >> 2];
  HEAP32[$0 + 152 >> 2] = HEAP32[$0 + 1624 >> 2];
  HEAP32[$0 + 156 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_double_20_28maxiAsyncKuramotoOscillator____29_28double_2c_20double_29___invoke_maxiAsyncKuramotoOscillator__28char_20const__2c_20double_20_28maxiAsyncKuramotoOscillator____29_28double_2c_20double_29_29($0 + 152 | 0);
  HEAP32[$0 + 1628 >> 2] = 0;
  HEAP32[$0 + 1624 >> 2] = 444;
  $1 = HEAP32[$0 + 1628 >> 2];
  HEAP32[$0 + 144 >> 2] = HEAP32[$0 + 1624 >> 2];
  HEAP32[$0 + 148 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_void_20_28maxiAsyncKuramotoOscillator____29_28double_2c_20unsigned_20long_29___invoke_maxiAsyncKuramotoOscillator__28char_20const__2c_20void_20_28maxiAsyncKuramotoOscillator____29_28double_2c_20unsigned_20long_29_29($0 + 144 | 0);
  HEAP32[$0 + 1628 >> 2] = 0;
  HEAP32[$0 + 1624 >> 2] = 445;
  $1 = HEAP32[$0 + 1628 >> 2];
  HEAP32[$0 + 136 >> 2] = HEAP32[$0 + 1624 >> 2];
  HEAP32[$0 + 140 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_void_20_28maxiAsyncKuramotoOscillator____29_28std____2__vector_double_2c_20std____2__allocator_double__20__20const__29___invoke_maxiAsyncKuramotoOscillator__28char_20const__2c_20void_20_28maxiAsyncKuramotoOscillator____29_28std____2__vector_double_2c_20std____2__allocator_double__20__20const__29_29($0 + 136 | 0);
  HEAP32[$0 + 1628 >> 2] = 0;
  HEAP32[$0 + 1624 >> 2] = 446;
  $1 = HEAP32[$0 + 1628 >> 2];
  HEAP32[$0 + 128 >> 2] = HEAP32[$0 + 1624 >> 2];
  HEAP32[$0 + 132 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_double_20_28maxiAsyncKuramotoOscillator____29_28unsigned_20long_29___invoke_maxiAsyncKuramotoOscillator__28char_20const__2c_20double_20_28maxiAsyncKuramotoOscillator____29_28unsigned_20long_29_29($0 + 128 | 0);
  HEAP32[$0 + 1628 >> 2] = 0;
  HEAP32[$0 + 1624 >> 2] = 447;
  $1 = HEAP32[$0 + 1628 >> 2];
  HEAP32[$0 + 120 >> 2] = HEAP32[$0 + 1624 >> 2];
  HEAP32[$0 + 124 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_unsigned_20long_20_28maxiAsyncKuramotoOscillator____29_28_29___invoke_maxiAsyncKuramotoOscillator__28char_20const__2c_20unsigned_20long_20_28maxiAsyncKuramotoOscillator____29_28_29_29($0 + 120 | 0);
  _embind_register_class(20060, 20080, 20108, 0, 4688, 448, 4691, 0, 4691, 0, 3390, 4693, 449);
  _embind_register_smart_ptr(20412, 20060, 3398, 2, 4688, 450, 6772, 451, 4752, 452, 4693, 453);
  _embind_register_class_constructor(20060, 1, 20420, 4688, 454, 455);
  HEAP32[$0 + 1628 >> 2] = 0;
  HEAP32[$0 + 1624 >> 2] = 456;
  $1 = HEAP32[$0 + 1628 >> 2];
  HEAP32[$0 + 112 >> 2] = HEAP32[$0 + 1624 >> 2];
  HEAP32[$0 + 116 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_void_20_28maxiFFT____29_28int_2c_20int_2c_20int_29___invoke_maxiFFT__28char_20const__2c_20void_20_28maxiFFT____29_28int_2c_20int_2c_20int_29_29($0 + 112 | 0);
  HEAP32[$0 + 1628 >> 2] = 0;
  HEAP32[$0 + 1624 >> 2] = 457;
  $1 = HEAP32[$0 + 1628 >> 2];
  HEAP32[$0 + 104 >> 2] = HEAP32[$0 + 1624 >> 2];
  HEAP32[$0 + 108 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_bool_20_28maxiFFT____29_28float_2c_20maxiFFT__fftModes_29___invoke_maxiFFT__28char_20const__2c_20bool_20_28maxiFFT____29_28float_2c_20maxiFFT__fftModes_29_29($0 + 104 | 0);
  HEAP32[$0 + 1628 >> 2] = 0;
  HEAP32[$0 + 1624 >> 2] = 458;
  $1 = HEAP32[$0 + 1628 >> 2];
  HEAP32[$0 + 96 >> 2] = HEAP32[$0 + 1624 >> 2];
  HEAP32[$0 + 100 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_float_20_28maxiFFT____29_28_29___invoke_maxiFFT__28char_20const__2c_20float_20_28maxiFFT____29_28_29_29(3426, $0 + 96 | 0);
  HEAP32[$0 + 1628 >> 2] = 0;
  HEAP32[$0 + 1624 >> 2] = 459;
  $1 = HEAP32[$0 + 1628 >> 2];
  HEAP32[$0 + 88 >> 2] = HEAP32[$0 + 1624 >> 2];
  HEAP32[$0 + 92 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_float_20_28maxiFFT____29_28_29___invoke_maxiFFT__28char_20const__2c_20float_20_28maxiFFT____29_28_29_29(3443, $0 + 88 | 0);
  HEAP32[$0 + 1628 >> 2] = 0;
  HEAP32[$0 + 1624 >> 2] = 460;
  $1 = HEAP32[$0 + 1628 >> 2];
  HEAP32[$0 + 80 >> 2] = HEAP32[$0 + 1624 >> 2];
  HEAP32[$0 + 84 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_std____2__vector_float_2c_20std____2__allocator_float__20___20_28maxiFFT____29_28_29___invoke_maxiFFT__28char_20const__2c_20std____2__vector_float_2c_20std____2__allocator_float__20___20_28maxiFFT____29_28_29_29(3460, $0 + 80 | 0);
  HEAP32[$0 + 1628 >> 2] = 0;
  HEAP32[$0 + 1624 >> 2] = 461;
  $1 = HEAP32[$0 + 1628 >> 2];
  HEAP32[$0 + 72 >> 2] = HEAP32[$0 + 1624 >> 2];
  HEAP32[$0 + 76 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_std____2__vector_float_2c_20std____2__allocator_float__20___20_28maxiFFT____29_28_29___invoke_maxiFFT__28char_20const__2c_20std____2__vector_float_2c_20std____2__allocator_float__20___20_28maxiFFT____29_28_29_29(3474, $0 + 72 | 0);
  HEAP32[$0 + 1628 >> 2] = 0;
  HEAP32[$0 + 1624 >> 2] = 462;
  $1 = HEAP32[$0 + 1628 >> 2];
  HEAP32[$0 + 64 >> 2] = HEAP32[$0 + 1624 >> 2];
  HEAP32[$0 + 68 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_std____2__vector_float_2c_20std____2__allocator_float__20___20_28maxiFFT____29_28_29___invoke_maxiFFT__28char_20const__2c_20std____2__vector_float_2c_20std____2__allocator_float__20___20_28maxiFFT____29_28_29_29(3490, $0 - -64 | 0);
  HEAP32[$0 + 1628 >> 2] = 0;
  HEAP32[$0 + 1624 >> 2] = 463;
  $1 = HEAP32[$0 + 1628 >> 2];
  HEAP32[$0 + 56 >> 2] = HEAP32[$0 + 1624 >> 2];
  HEAP32[$0 + 60 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_int_20_28maxiFFT____29_28_29___invoke_maxiFFT__28char_20const__2c_20int_20_28maxiFFT____29_28_29_29(3500, $0 + 56 | 0);
  HEAP32[$0 + 1628 >> 2] = 0;
  HEAP32[$0 + 1624 >> 2] = 464;
  $1 = HEAP32[$0 + 1628 >> 2];
  HEAP32[$0 + 48 >> 2] = HEAP32[$0 + 1624 >> 2];
  HEAP32[$0 + 52 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_int_20_28maxiFFT____29_28_29___invoke_maxiFFT__28char_20const__2c_20int_20_28maxiFFT____29_28_29_29(3511, $0 + 48 | 0);
  HEAP32[$0 + 1628 >> 2] = 0;
  HEAP32[$0 + 1624 >> 2] = 465;
  $1 = HEAP32[$0 + 1628 >> 2];
  HEAP32[$0 + 40 >> 2] = HEAP32[$0 + 1624 >> 2];
  HEAP32[$0 + 44 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_int_20_28maxiFFT____29_28_29___invoke_maxiFFT__28char_20const__2c_20int_20_28maxiFFT____29_28_29_29(3522, $0 + 40 | 0);
  HEAP32[$0 + 1628 >> 2] = 0;
  HEAP32[$0 + 1624 >> 2] = 466;
  $1 = HEAP32[$0 + 1628 >> 2];
  HEAP32[$0 + 32 >> 2] = HEAP32[$0 + 1624 >> 2];
  HEAP32[$0 + 36 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_int_20_28maxiFFT____29_28_29___invoke_maxiFFT__28char_20const__2c_20int_20_28maxiFFT____29_28_29_29(3533, $0 + 32 | 0);
  $1 = $0 + 1624 | 0;
  _embind_register_enum(20596, 3547, 4, 0);
  emscripten__enum__maxiFFT__fftModes___value_28char_20const__2c_20maxiFFT__fftModes_29(emscripten__enum__maxiFFT__fftModes___value_28char_20const__2c_20maxiFFT__fftModes_29($1, 3560, 1), 3582, 0);
  _embind_register_class(20652, 20672, 20700, 0, 4688, 467, 4691, 0, 4691, 0, 3602, 4693, 468);
  _embind_register_smart_ptr(21008, 20652, 3611, 2, 4688, 469, 6772, 470, 4752, 471, 4693, 472);
  _embind_register_class_constructor(20652, 1, 21016, 4688, 473, 474);
  HEAP32[$0 + 1628 >> 2] = 0;
  HEAP32[$0 + 1624 >> 2] = 475;
  $1 = HEAP32[$0 + 1628 >> 2];
  HEAP32[$0 + 24 >> 2] = HEAP32[$0 + 1624 >> 2];
  HEAP32[$0 + 28 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_void_20_28maxiIFFT____29_28int_2c_20int_2c_20int_29___invoke_maxiIFFT__28char_20const__2c_20void_20_28maxiIFFT____29_28int_2c_20int_2c_20int_29_29($0 + 24 | 0);
  HEAP32[$0 + 1628 >> 2] = 0;
  HEAP32[$0 + 1624 >> 2] = 476;
  $1 = HEAP32[$0 + 1628 >> 2];
  HEAP32[$0 + 16 >> 2] = HEAP32[$0 + 1624 >> 2];
  HEAP32[$0 + 20 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_float_20_28maxiIFFT____29_28std____2__vector_float_2c_20std____2__allocator_float__20___2c_20std____2__vector_float_2c_20std____2__allocator_float__20___2c_20maxiIFFT__fftModes_29___invoke_maxiIFFT__28char_20const__2c_20float_20_28maxiIFFT____29_28std____2__vector_float_2c_20std____2__allocator_float__20___2c_20std____2__vector_float_2c_20std____2__allocator_float__20___2c_20maxiIFFT__fftModes_29_29($0 + 16 | 0);
  $1 = $0 + 1624 | 0;
  _embind_register_enum(21212, 3632, 4, 0);
  emscripten__enum__maxiIFFT__fftModes___value_28char_20const__2c_20maxiIFFT__fftModes_29(emscripten__enum__maxiIFFT__fftModes___value_28char_20const__2c_20maxiIFFT__fftModes_29($1, 3646, 0), 3655, 1);
  _embind_register_class(21252, 21284, 21324, 0, 4688, 477, 4691, 0, 4691, 0, 3663, 4693, 478);
  _embind_register_smart_ptr(21668, 21252, 3672, 2, 4688, 479, 6772, 480, 4752, 481, 4693, 482);
  _embind_register_class_constructor(21252, 1, 21676, 4688, 483, 484);
  HEAP32[$0 + 1628 >> 2] = 0;
  HEAP32[$0 + 1624 >> 2] = 485;
  $1 = HEAP32[$0 + 1628 >> 2];
  HEAP32[$0 + 8 >> 2] = HEAP32[$0 + 1624 >> 2];
  HEAP32[$0 + 12 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_void_20_28maxiMFCCAnalyser_double_____29_28unsigned_20int_2c_20unsigned_20int_2c_20unsigned_20int_2c_20double_2c_20double_29___invoke_maxiMFCCAnalyser_double__20__28char_20const__2c_20void_20_28maxiMFCCAnalyser_double_____29_28unsigned_20int_2c_20unsigned_20int_2c_20unsigned_20int_2c_20double_2c_20double_29_29($0 + 8 | 0);
  HEAP32[$0 + 1628 >> 2] = 0;
  HEAP32[$0 + 1624 >> 2] = 486;
  $1 = HEAP32[$0 + 1628 >> 2];
  HEAP32[$0 >> 2] = HEAP32[$0 + 1624 >> 2];
  HEAP32[$0 + 4 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_std____2__vector_double_2c_20std____2__allocator_double__20___20_28maxiMFCCAnalyser_double_____29_28std____2__vector_float_2c_20std____2__allocator_float__20___29___invoke_maxiMFCCAnalyser_double__20__28char_20const__2c_20std____2__vector_double_2c_20std____2__allocator_double__20___20_28maxiMFCCAnalyser_double_____29_28std____2__vector_float_2c_20std____2__allocator_float__20___29_29($0);
  $0 = $0 + 1632 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function emscripten__class__std____2__vector_int_2c_20std____2__allocator_int__20__2c_20emscripten__internal__NoBaseClass__20emscripten__register_vector_int__28char_20const__29() {
  var $0 = 0, $1 = 0;
  $0 = global$0 - 32 | 0;
  $1 = $0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  _embind_register_class(4552, 4616, 4672, 0, 4688, 487, 4691, 0, 4691, 0, 1520, 4693, 488);
  void_20emscripten__internal__RegisterClassConstructor_std____2__vector_int_2c_20std____2__allocator_int__20___20_28__29_28_29___invoke_std____2__vector_int_2c_20std____2__allocator_int__20__20__28std____2__vector_int_2c_20std____2__allocator_int__20___20_28__29_28_29_29();
  HEAP32[$0 + 28 >> 2] = 0;
  HEAP32[$0 + 24 >> 2] = 490;
  $1 = HEAP32[$0 + 28 >> 2];
  HEAP32[$0 + 16 >> 2] = HEAP32[$0 + 24 >> 2];
  HEAP32[$0 + 20 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28int_20const__29___invoke_std____2__vector_int_2c_20std____2__allocator_int__20__20__28char_20const__2c_20void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28int_20const__29_29($0 + 16 | 0);
  HEAP32[$0 + 28 >> 2] = 0;
  HEAP32[$0 + 24 >> 2] = 491;
  $1 = HEAP32[$0 + 28 >> 2];
  HEAP32[$0 + 8 >> 2] = HEAP32[$0 + 24 >> 2];
  HEAP32[$0 + 12 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28unsigned_20long_2c_20int_20const__29___invoke_std____2__vector_int_2c_20std____2__allocator_int__20__20__28char_20const__2c_20void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28unsigned_20long_2c_20int_20const__29_29($0 + 8 | 0);
  HEAP32[$0 + 28 >> 2] = 0;
  HEAP32[$0 + 24 >> 2] = 492;
  $1 = HEAP32[$0 + 28 >> 2];
  HEAP32[$0 >> 2] = HEAP32[$0 + 24 >> 2];
  HEAP32[$0 + 4 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_unsigned_20long_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28_29_20const___invoke_std____2__vector_int_2c_20std____2__allocator_int__20__20__28char_20const__2c_20unsigned_20long_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28_29_20const_29($0);
  void_20emscripten__internal__RegisterClassMethod_emscripten__val_20_28__29_28std____2__vector_int_2c_20std____2__allocator_int__20__20const__2c_20unsigned_20long_29___invoke_std____2__vector_int_2c_20std____2__allocator_int__20__20__28char_20const__2c_20emscripten__val_20_28__29_28std____2__vector_int_2c_20std____2__allocator_int__20__20const__2c_20unsigned_20long_29_29();
  void_20emscripten__internal__RegisterClassMethod_bool_20_28__29_28std____2__vector_int_2c_20std____2__allocator_int__20___2c_20unsigned_20long_2c_20int_20const__29___invoke_std____2__vector_int_2c_20std____2__allocator_int__20__20__28char_20const__2c_20bool_20_28__29_28std____2__vector_int_2c_20std____2__allocator_int__20___2c_20unsigned_20long_2c_20int_20const__29_29();
  $0 = $0 + 32 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function emscripten__class__std____2__vector_double_2c_20std____2__allocator_double__20__2c_20emscripten__internal__NoBaseClass__20emscripten__register_vector_double__28char_20const__29() {
  var $0 = 0, $1 = 0;
  $0 = global$0 - 32 | 0;
  $1 = $0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  _embind_register_class(4944, 5008, 5064, 0, 4688, 495, 4691, 0, 4691, 0, 1530, 4693, 496);
  void_20emscripten__internal__RegisterClassConstructor_std____2__vector_double_2c_20std____2__allocator_double__20___20_28__29_28_29___invoke_std____2__vector_double_2c_20std____2__allocator_double__20__20__28std____2__vector_double_2c_20std____2__allocator_double__20___20_28__29_28_29_29();
  HEAP32[$0 + 28 >> 2] = 0;
  HEAP32[$0 + 24 >> 2] = 498;
  $1 = HEAP32[$0 + 28 >> 2];
  HEAP32[$0 + 16 >> 2] = HEAP32[$0 + 24 >> 2];
  HEAP32[$0 + 20 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_void_20_28std____2__vector_double_2c_20std____2__allocator_double__20_____29_28double_20const__29___invoke_std____2__vector_double_2c_20std____2__allocator_double__20__20__28char_20const__2c_20void_20_28std____2__vector_double_2c_20std____2__allocator_double__20_____29_28double_20const__29_29($0 + 16 | 0);
  HEAP32[$0 + 28 >> 2] = 0;
  HEAP32[$0 + 24 >> 2] = 499;
  $1 = HEAP32[$0 + 28 >> 2];
  HEAP32[$0 + 8 >> 2] = HEAP32[$0 + 24 >> 2];
  HEAP32[$0 + 12 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_void_20_28std____2__vector_double_2c_20std____2__allocator_double__20_____29_28unsigned_20long_2c_20double_20const__29___invoke_std____2__vector_double_2c_20std____2__allocator_double__20__20__28char_20const__2c_20void_20_28std____2__vector_double_2c_20std____2__allocator_double__20_____29_28unsigned_20long_2c_20double_20const__29_29($0 + 8 | 0);
  HEAP32[$0 + 28 >> 2] = 0;
  HEAP32[$0 + 24 >> 2] = 500;
  $1 = HEAP32[$0 + 28 >> 2];
  HEAP32[$0 >> 2] = HEAP32[$0 + 24 >> 2];
  HEAP32[$0 + 4 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_unsigned_20long_20_28std____2__vector_double_2c_20std____2__allocator_double__20_____29_28_29_20const___invoke_std____2__vector_double_2c_20std____2__allocator_double__20__20__28char_20const__2c_20unsigned_20long_20_28std____2__vector_double_2c_20std____2__allocator_double__20_____29_28_29_20const_29($0);
  void_20emscripten__internal__RegisterClassMethod_emscripten__val_20_28__29_28std____2__vector_double_2c_20std____2__allocator_double__20__20const__2c_20unsigned_20long_29___invoke_std____2__vector_double_2c_20std____2__allocator_double__20__20__28char_20const__2c_20emscripten__val_20_28__29_28std____2__vector_double_2c_20std____2__allocator_double__20__20const__2c_20unsigned_20long_29_29();
  void_20emscripten__internal__RegisterClassMethod_bool_20_28__29_28std____2__vector_double_2c_20std____2__allocator_double__20___2c_20unsigned_20long_2c_20double_20const__29___invoke_std____2__vector_double_2c_20std____2__allocator_double__20__20__28char_20const__2c_20bool_20_28__29_28std____2__vector_double_2c_20std____2__allocator_double__20___2c_20unsigned_20long_2c_20double_20const__29_29();
  $0 = $0 + 32 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function emscripten__class__std____2__vector_char_2c_20std____2__allocator_char__20__2c_20emscripten__internal__NoBaseClass__20emscripten__register_vector_char__28char_20const__29() {
  var $0 = 0, $1 = 0;
  $0 = global$0 - 32 | 0;
  $1 = $0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  _embind_register_class(5280, 5344, 5400, 0, 4688, 503, 4691, 0, 4691, 0, 1543, 4693, 504);
  void_20emscripten__internal__RegisterClassConstructor_std____2__vector_char_2c_20std____2__allocator_char__20___20_28__29_28_29___invoke_std____2__vector_char_2c_20std____2__allocator_char__20__20__28std____2__vector_char_2c_20std____2__allocator_char__20___20_28__29_28_29_29();
  HEAP32[$0 + 28 >> 2] = 0;
  HEAP32[$0 + 24 >> 2] = 506;
  $1 = HEAP32[$0 + 28 >> 2];
  HEAP32[$0 + 16 >> 2] = HEAP32[$0 + 24 >> 2];
  HEAP32[$0 + 20 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_void_20_28std____2__vector_char_2c_20std____2__allocator_char__20_____29_28char_20const__29___invoke_std____2__vector_char_2c_20std____2__allocator_char__20__20__28char_20const__2c_20void_20_28std____2__vector_char_2c_20std____2__allocator_char__20_____29_28char_20const__29_29($0 + 16 | 0);
  HEAP32[$0 + 28 >> 2] = 0;
  HEAP32[$0 + 24 >> 2] = 507;
  $1 = HEAP32[$0 + 28 >> 2];
  HEAP32[$0 + 8 >> 2] = HEAP32[$0 + 24 >> 2];
  HEAP32[$0 + 12 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_void_20_28std____2__vector_char_2c_20std____2__allocator_char__20_____29_28unsigned_20long_2c_20char_20const__29___invoke_std____2__vector_char_2c_20std____2__allocator_char__20__20__28char_20const__2c_20void_20_28std____2__vector_char_2c_20std____2__allocator_char__20_____29_28unsigned_20long_2c_20char_20const__29_29($0 + 8 | 0);
  HEAP32[$0 + 28 >> 2] = 0;
  HEAP32[$0 + 24 >> 2] = 508;
  $1 = HEAP32[$0 + 28 >> 2];
  HEAP32[$0 >> 2] = HEAP32[$0 + 24 >> 2];
  HEAP32[$0 + 4 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_unsigned_20long_20_28std____2__vector_char_2c_20std____2__allocator_char__20_____29_28_29_20const___invoke_std____2__vector_char_2c_20std____2__allocator_char__20__20__28char_20const__2c_20unsigned_20long_20_28std____2__vector_char_2c_20std____2__allocator_char__20_____29_28_29_20const_29($0);
  void_20emscripten__internal__RegisterClassMethod_emscripten__val_20_28__29_28std____2__vector_char_2c_20std____2__allocator_char__20__20const__2c_20unsigned_20long_29___invoke_std____2__vector_char_2c_20std____2__allocator_char__20__20__28char_20const__2c_20emscripten__val_20_28__29_28std____2__vector_char_2c_20std____2__allocator_char__20__20const__2c_20unsigned_20long_29_29();
  void_20emscripten__internal__RegisterClassMethod_bool_20_28__29_28std____2__vector_char_2c_20std____2__allocator_char__20___2c_20unsigned_20long_2c_20char_20const__29___invoke_std____2__vector_char_2c_20std____2__allocator_char__20__20__28char_20const__2c_20bool_20_28__29_28std____2__vector_char_2c_20std____2__allocator_char__20___2c_20unsigned_20long_2c_20char_20const__29_29();
  $0 = $0 + 32 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function emscripten__class__std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20__2c_20emscripten__internal__NoBaseClass__20emscripten__register_vector_unsigned_20char__28char_20const__29() {
  var $0 = 0, $1 = 0;
  $0 = global$0 - 32 | 0;
  $1 = $0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  _embind_register_class(5608, 5672, 5728, 0, 4688, 511, 4691, 0, 4691, 0, 1554, 4693, 512);
  void_20emscripten__internal__RegisterClassConstructor_std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20___20_28__29_28_29___invoke_std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20__20__28std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20___20_28__29_28_29_29();
  HEAP32[$0 + 28 >> 2] = 0;
  HEAP32[$0 + 24 >> 2] = 514;
  $1 = HEAP32[$0 + 28 >> 2];
  HEAP32[$0 + 16 >> 2] = HEAP32[$0 + 24 >> 2];
  HEAP32[$0 + 20 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_void_20_28std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20_____29_28unsigned_20char_20const__29___invoke_std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20__20__28char_20const__2c_20void_20_28std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20_____29_28unsigned_20char_20const__29_29($0 + 16 | 0);
  HEAP32[$0 + 28 >> 2] = 0;
  HEAP32[$0 + 24 >> 2] = 515;
  $1 = HEAP32[$0 + 28 >> 2];
  HEAP32[$0 + 8 >> 2] = HEAP32[$0 + 24 >> 2];
  HEAP32[$0 + 12 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_void_20_28std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20_____29_28unsigned_20long_2c_20unsigned_20char_20const__29___invoke_std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20__20__28char_20const__2c_20void_20_28std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20_____29_28unsigned_20long_2c_20unsigned_20char_20const__29_29($0 + 8 | 0);
  HEAP32[$0 + 28 >> 2] = 0;
  HEAP32[$0 + 24 >> 2] = 516;
  $1 = HEAP32[$0 + 28 >> 2];
  HEAP32[$0 >> 2] = HEAP32[$0 + 24 >> 2];
  HEAP32[$0 + 4 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_unsigned_20long_20_28std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20_____29_28_29_20const___invoke_std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20__20__28char_20const__2c_20unsigned_20long_20_28std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20_____29_28_29_20const_29($0);
  void_20emscripten__internal__RegisterClassMethod_emscripten__val_20_28__29_28std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20__20const__2c_20unsigned_20long_29___invoke_std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20__20__28char_20const__2c_20emscripten__val_20_28__29_28std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20__20const__2c_20unsigned_20long_29_29();
  void_20emscripten__internal__RegisterClassMethod_bool_20_28__29_28std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20___2c_20unsigned_20long_2c_20unsigned_20char_20const__29___invoke_std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20__20__28char_20const__2c_20bool_20_28__29_28std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20___2c_20unsigned_20long_2c_20unsigned_20char_20const__29_29();
  $0 = $0 + 32 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function emscripten__class__std____2__vector_float_2c_20std____2__allocator_float__20__2c_20emscripten__internal__NoBaseClass__20emscripten__register_vector_float__28char_20const__29() {
  var $0 = 0, $1 = 0;
  $0 = global$0 - 32 | 0;
  $1 = $0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  _embind_register_class(5928, 5992, 6048, 0, 4688, 519, 4691, 0, 4691, 0, 1566, 4693, 520);
  void_20emscripten__internal__RegisterClassConstructor_std____2__vector_float_2c_20std____2__allocator_float__20___20_28__29_28_29___invoke_std____2__vector_float_2c_20std____2__allocator_float__20__20__28std____2__vector_float_2c_20std____2__allocator_float__20___20_28__29_28_29_29();
  HEAP32[$0 + 28 >> 2] = 0;
  HEAP32[$0 + 24 >> 2] = 522;
  $1 = HEAP32[$0 + 28 >> 2];
  HEAP32[$0 + 16 >> 2] = HEAP32[$0 + 24 >> 2];
  HEAP32[$0 + 20 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_void_20_28std____2__vector_float_2c_20std____2__allocator_float__20_____29_28float_20const__29___invoke_std____2__vector_float_2c_20std____2__allocator_float__20__20__28char_20const__2c_20void_20_28std____2__vector_float_2c_20std____2__allocator_float__20_____29_28float_20const__29_29($0 + 16 | 0);
  HEAP32[$0 + 28 >> 2] = 0;
  HEAP32[$0 + 24 >> 2] = 523;
  $1 = HEAP32[$0 + 28 >> 2];
  HEAP32[$0 + 8 >> 2] = HEAP32[$0 + 24 >> 2];
  HEAP32[$0 + 12 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_void_20_28std____2__vector_float_2c_20std____2__allocator_float__20_____29_28unsigned_20long_2c_20float_20const__29___invoke_std____2__vector_float_2c_20std____2__allocator_float__20__20__28char_20const__2c_20void_20_28std____2__vector_float_2c_20std____2__allocator_float__20_____29_28unsigned_20long_2c_20float_20const__29_29($0 + 8 | 0);
  HEAP32[$0 + 28 >> 2] = 0;
  HEAP32[$0 + 24 >> 2] = 524;
  $1 = HEAP32[$0 + 28 >> 2];
  HEAP32[$0 >> 2] = HEAP32[$0 + 24 >> 2];
  HEAP32[$0 + 4 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_unsigned_20long_20_28std____2__vector_float_2c_20std____2__allocator_float__20_____29_28_29_20const___invoke_std____2__vector_float_2c_20std____2__allocator_float__20__20__28char_20const__2c_20unsigned_20long_20_28std____2__vector_float_2c_20std____2__allocator_float__20_____29_28_29_20const_29($0);
  void_20emscripten__internal__RegisterClassMethod_emscripten__val_20_28__29_28std____2__vector_float_2c_20std____2__allocator_float__20__20const__2c_20unsigned_20long_29___invoke_std____2__vector_float_2c_20std____2__allocator_float__20__20__28char_20const__2c_20emscripten__val_20_28__29_28std____2__vector_float_2c_20std____2__allocator_float__20__20const__2c_20unsigned_20long_29_29();
  void_20emscripten__internal__RegisterClassMethod_bool_20_28__29_28std____2__vector_float_2c_20std____2__allocator_float__20___2c_20unsigned_20long_2c_20float_20const__29___invoke_std____2__vector_float_2c_20std____2__allocator_float__20__20__28char_20const__2c_20bool_20_28__29_28std____2__vector_float_2c_20std____2__allocator_float__20___2c_20unsigned_20long_2c_20float_20const__29_29();
  $0 = $0 + 32 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function void_20const__20emscripten__internal__getActualType_vectorTools__28vectorTools__29($0) {
  $0 = $0 | 0;
  return 6180;
 }
 
 function void_20emscripten__internal__raw_destructor_vectorTools__28vectorTools__29($0) {
  $0 = $0 | 0;
  if ($0) {
   dlfree($0)
  }
 }
 
 function vectorTools__20emscripten__internal__operator_new_vectorTools__28_29() {
  return operator_20new_28unsigned_20long_29(1) | 0;
 }
 
 function void_20emscripten__internal__RegisterClassConstructor_vectorTools__20_28__29_28_29___invoke_vectorTools__28vectorTools__20_28__29_28_29_29() {
  var $0 = 0, $1 = 0;
  $0 = global$0 - 16 | 0;
  $1 = $0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  _embind_register_class_constructor(6180, 1, 6252, 4688, 527, 76);
  $0 = $0 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20std____2__vector_double_2c_20std____2__allocator_double__20_____getCount_28_29_20const($0) {
  $0 = $0 | 0;
  return 2;
 }
 
 function emscripten__internal__Invoker_void_2c_20std____2__vector_double_2c_20std____2__allocator_double__20_____invoke_28void_20_28__29_28std____2__vector_double_2c_20std____2__allocator_double__20___29_2c_20std____2__vector_double_2c_20std____2__allocator_double__20___29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  FUNCTION_TABLE[$0]($1);
 }
 
 function vectorTools__clearVectorDbl_28std____2__vector_double_2c_20std____2__allocator_double__20___29($0) {
  $0 = $0 | 0;
  std____2__vector_double_2c_20std____2__allocator_double__20___clear_28_29($0);
 }
 
 function vectorTools__clearVectorFloat_28std____2__vector_float_2c_20std____2__allocator_float__20___29($0) {
  $0 = $0 | 0;
  std____2__vector_float_2c_20std____2__allocator_float__20___clear_28_29($0);
 }
 
 function void_20const__20emscripten__internal__getActualType_maxiSettings__28maxiSettings__29($0) {
  $0 = $0 | 0;
  return 6292;
 }
 
 function void_20emscripten__internal__RegisterClassConstructor_maxiSettings__20_28__29_28_29___invoke_maxiSettings__28maxiSettings__20_28__29_28_29_29() {
  var $0 = 0, $1 = 0;
  $0 = global$0 - 16 | 0;
  $1 = $0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  _embind_register_class_constructor(6292, 1, 6368, 4688, 528, 83);
  $0 = $0 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20int_2c_20int_2c_20int___getCount_28_29_20const($0) {
  $0 = $0 | 0;
  return 4;
 }
 
 function emscripten__internal__Invoker_void_2c_20int_2c_20int_2c_20int___invoke_28void_20_28__29_28int_2c_20int_2c_20int_29_2c_20int_2c_20int_2c_20int_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  FUNCTION_TABLE[$0]($1, $2, $3);
 }
 
 function maxiSettings__setup_28int_2c_20int_2c_20int_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  HEAP32[12866] = $1;
  HEAP32[12865] = $0;
  HEAP32[12867] = $2;
 }
 
 function maxiSettings__getSampleRate_28_29_20const($0) {
  $0 = $0 | 0;
  return HEAP32[12865];
 }
 
 function emscripten__internal__GetterPolicy_int_20_28maxiSettings____29_28_29_20const___getContext_28int_20_28maxiSettings____29_28_29_20const_29($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  $2 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 12 >> 2] = $2;
  $0 = void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____emscripten__internal__getContext_void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28int_20const__29__28void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28int_20const__29_29_29_28int_20const__29($1 + 8 | 0);
  $1 = $1 + 16 | 0;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  return $0;
 }
 
 function maxiSettings__setSampleRate_28int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  HEAP32[12865] = $1;
 }
 
 function int_20emscripten__internal__GetterPolicy_int_20_28maxiSettings____29_28_29_20const___get_maxiSettings__28int_20_28maxiSettings____20const__29_28_29_20const_2c_20maxiSettings_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0;
  $2 = global$0 - 16 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  $3 = HEAP32[$0 >> 2];
  $0 = HEAP32[$0 + 4 >> 2];
  $1 = ($0 >> 1) + $1 | 0;
  HEAP32[$2 + 12 >> 2] = FUNCTION_TABLE[$0 & 1 ? HEAP32[$3 + HEAP32[$1 >> 2] >> 2] : $3]($1);
  $0 = HEAP32[$2 + 12 >> 2];
  $1 = $2 + 16 | 0;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  return $0 | 0;
 }
 
 function void_20emscripten__internal__SetterPolicy_void_20_28maxiSettings____29_28int_29___set_maxiSettings__28void_20_28maxiSettings____20const__29_28int_29_2c_20maxiSettings__2c_20int_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = $1;
  $1 = HEAP32[$0 + 4 >> 2];
  $3 = $3 + ($1 >> 1) | 0;
  $0 = HEAP32[$0 >> 2];
  FUNCTION_TABLE[$1 & 1 ? HEAP32[$0 + HEAP32[$3 >> 2] >> 2] : $0]($3, $2);
 }
 
 function maxiSettings__getNumChannels_28_29_20const($0) {
  $0 = $0 | 0;
  return HEAP32[12866];
 }
 
 function maxiSettings__setNumChannels_28int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  HEAP32[12866] = $1;
 }
 
 function maxiSettings__getBufferSize_28_29_20const($0) {
  $0 = $0 | 0;
  return HEAP32[12867];
 }
 
 function maxiSettings__setBufferSize_28int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  HEAP32[12867] = $1;
 }
 
 function void_20const__20emscripten__internal__getActualType_maxiOsc__28maxiOsc__29($0) {
  $0 = $0 | 0;
  return 6412;
 }
 
 function emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___get_28std____2__shared_ptr_maxiOsc__20const__29($0) {
  $0 = $0 | 0;
  return HEAP32[$0 >> 2];
 }
 
 function emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___construct_null_28_29() {
  return std____2__shared_ptr_maxiOsc___shared_ptr_28_29(operator_20new_28unsigned_20long_29(8)) | 0;
 }
 
 function emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___share_28maxiOsc__2c_20emscripten__internal___EM_VAL__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0;
  $2 = global$0 - 16 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  $3 = operator_20new_28unsigned_20long_29(8);
  HEAP32[16874] = 0;
  emscripten__val__take_ownership_28emscripten__internal___EM_VAL__29($2, $1);
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      if (($1 | 0) != 1) {
       HEAP32[16874] = 0;
       $1 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(530, $2 + 8 | 0, $2 | 0) | 0;
       $4 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($4 | 0) == 1) {
        break label$5
       }
       HEAP32[16874] = 0;
       $0 = __invoke___22class_std____2__shared_ptr_22____22class_std____2__shared_ptr_22___class_maxiOsc____22class_emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc____val_deleter_22__i32(531, $3 | 0, $0 | 0, $1 | 0, 0) | 0;
       $4 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($4 | 0) == 1) {
        break label$4
       }
       emscripten__val___val_28_29($1);
       emscripten__val___val_28_29($2);
       $1 = $2 + 16 | 0;
       if ($1 >>> 0 < global$2 >>> 0) {
        __handle_stack_overflow()
       }
       global$0 = $1;
       return $0 | 0;
      }
      $0 = __cxa_find_matching_catch_2() | 0;
      getTempRet0() | 0;
      break label$2;
     }
     $0 = __cxa_find_matching_catch_2() | 0;
     getTempRet0() | 0;
     break label$3;
    }
    $0 = __cxa_find_matching_catch_2() | 0;
    getTempRet0() | 0;
    emscripten__val___val_28_29($1);
   }
   emscripten__val___val_28_29($2);
  }
  dlfree($3);
  __resumeException($0 | 0);
  abort();
 }
 
 function void_20emscripten__internal__raw_destructor_std____2__shared_ptr_maxiOsc__20__28std____2__shared_ptr_maxiOsc___29($0) {
  $0 = $0 | 0;
  if ($0) {
   dlfree(std____2__shared_ptr_maxiOsc____shared_ptr_28_29($0))
  }
 }
 
 function emscripten__internal__WithPolicies____ArgTypeList_std____2__shared_ptr_maxiOsc__20___getCount_28_29_20const($0) {
  $0 = $0 | 0;
  return 1;
 }
 
 function emscripten__internal__Invoker_std____2__shared_ptr_maxiOsc__20___invoke_28std____2__shared_ptr_maxiOsc__20_28__29_28_29_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  FUNCTION_TABLE[$0]($1 + 8 | 0);
  HEAP32[16874] = 0;
  $0 = __invoke_i1___22class_std____2__basic_ifstream_22_(532, $1 + 8 | 0) | 0;
  $2 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($2 | 0) != 1) {
   std____2__shared_ptr_maxiOsc____shared_ptr_28_29($1 + 8 | 0);
   $1 = $1 + 16 | 0;
   if ($1 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $1;
   return $0 | 0;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__shared_ptr_maxiOsc____shared_ptr_28_29($1 + 8 | 0);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2__enable_if___28is_array_maxiOsc___value_29_2c_20std____2__shared_ptr_maxiOsc__20___type_20std____2__make_shared_maxiOsc__28_29($0) {
  $0 = $0 | 0;
  std____2__shared_ptr_maxiOsc__20std____2__shared_ptr_maxiOsc___make_shared___28_29($0);
 }
 
 function void_20emscripten__internal__RegisterClassMethod_double_20_28maxiOsc____29_28double_29___invoke_maxiOsc__28char_20const__2c_20double_20_28maxiOsc____29_28double_29_29($0, $1) {
  var $2 = 0, $3 = 0;
  $2 = global$0 - 16 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  $3 = HEAP32[$1 + 4 >> 2];
  HEAP32[$2 + 8 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$2 + 12 >> 2] = $3;
  _embind_register_class_function(6412, $0 | 0, 3, 6880, 6892, 533, void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____emscripten__internal__getContext_void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28int_20const__29__28void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28int_20const__29_29_29_28int_20const__29($2 + 8 | 0) | 0, 0);
  $0 = $2 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function void_20emscripten__internal__RegisterClassMethod_double_20_28maxiOsc____29_28double_2c_20double_2c_20double_29___invoke_maxiOsc__28char_20const__2c_20double_20_28maxiOsc____29_28double_2c_20double_2c_20double_29_29($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  $2 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 12 >> 2] = $2;
  _embind_register_class_function(6412, 1717, 5, 6912, 6932, 534, void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____emscripten__internal__getContext_void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28int_20const__29__28void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28int_20const__29_29_29_28int_20const__29($1 + 8 | 0) | 0, 0);
  $0 = $1 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function void_20emscripten__internal__RegisterClassMethod_double_20_28maxiOsc____29_28double_2c_20double_29___invoke_maxiOsc__28char_20const__2c_20double_20_28maxiOsc____29_28double_2c_20double_29_29($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  $2 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 12 >> 2] = $2;
  _embind_register_class_function(6412, 1744, 4, 6944, 6960, 535, void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____emscripten__internal__getContext_void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28int_20const__29__28void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28int_20const__29_29_29_28int_20const__29($1 + 8 | 0) | 0, 0);
  $0 = $1 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function void_20emscripten__internal__RegisterClassMethod_double_20_28maxiOsc____29_28_29___invoke_maxiOsc__28char_20const__2c_20double_20_28maxiOsc____29_28_29_29($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  $2 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 12 >> 2] = $2;
  _embind_register_class_function(6412, 1758, 2, 6968, 6976, 536, void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____emscripten__internal__getContext_void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28int_20const__29__28void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28int_20const__29_29_29_28int_20const__29($1 + 8 | 0) | 0, 0);
  $0 = $1 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function void_20emscripten__internal__RegisterClassMethod_void_20_28maxiOsc____29_28double_29___invoke_maxiOsc__28char_20const__2c_20void_20_28maxiOsc____29_28double_29_29($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  $2 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 12 >> 2] = $2;
  _embind_register_class_function(6412, 1786, 3, 6980, 5096, 537, void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____emscripten__internal__getContext_void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28int_20const__29__28void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28int_20const__29_29_29_28int_20const__29($1 + 8 | 0) | 0, 0);
  $0 = $1 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function void_20const__20emscripten__internal__getActualType_maxiEnvelope__28maxiEnvelope__29($0) {
  $0 = $0 | 0;
  return 7008;
 }
 
 function emscripten__smart_ptr_trait_std____2__shared_ptr_maxiEnvelope__20___share_28maxiEnvelope__2c_20emscripten__internal___EM_VAL__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0;
  $2 = global$0 - 16 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  $3 = operator_20new_28unsigned_20long_29(8);
  HEAP32[16874] = 0;
  emscripten__val__take_ownership_28emscripten__internal___EM_VAL__29($2, $1);
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      if (($1 | 0) != 1) {
       HEAP32[16874] = 0;
       $1 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(538, $2 + 8 | 0, $2 | 0) | 0;
       $4 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($4 | 0) == 1) {
        break label$5
       }
       HEAP32[16874] = 0;
       $0 = __invoke___22class_std____2__shared_ptr_22____22class_std____2__shared_ptr_22___class_maxiOsc____22class_emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc____val_deleter_22__i32(539, $3 | 0, $0 | 0, $1 | 0, 0) | 0;
       $4 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($4 | 0) == 1) {
        break label$4
       }
       emscripten__val___val_28_29($1);
       emscripten__val___val_28_29($2);
       $1 = $2 + 16 | 0;
       if ($1 >>> 0 < global$2 >>> 0) {
        __handle_stack_overflow()
       }
       global$0 = $1;
       return $0 | 0;
      }
      $0 = __cxa_find_matching_catch_2() | 0;
      getTempRet0() | 0;
      break label$2;
     }
     $0 = __cxa_find_matching_catch_2() | 0;
     getTempRet0() | 0;
     break label$3;
    }
    $0 = __cxa_find_matching_catch_2() | 0;
    getTempRet0() | 0;
    emscripten__val___val_28_29($1);
   }
   emscripten__val___val_28_29($2);
  }
  dlfree($3);
  __resumeException($0 | 0);
  abort();
 }
 
 function emscripten__internal__Invoker_std____2__shared_ptr_maxiEnvelope__20___invoke_28std____2__shared_ptr_maxiEnvelope__20_28__29_28_29_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  FUNCTION_TABLE[$0]($1 + 8 | 0);
  HEAP32[16874] = 0;
  $0 = __invoke_i1___22class_std____2__basic_ifstream_22_(540, $1 + 8 | 0) | 0;
  $2 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($2 | 0) != 1) {
   std____2__shared_ptr_maxiOsc____shared_ptr_28_29($1 + 8 | 0);
   $1 = $1 + 16 | 0;
   if ($1 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $1;
   return $0 | 0;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__shared_ptr_maxiOsc____shared_ptr_28_29($1 + 8 | 0);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2__enable_if___28is_array_maxiEnvelope___value_29_2c_20std____2__shared_ptr_maxiEnvelope__20___type_20std____2__make_shared_maxiEnvelope__28_29($0) {
  $0 = $0 | 0;
  std____2__shared_ptr_maxiEnvelope__20std____2__shared_ptr_maxiEnvelope___make_shared___28_29($0);
 }
 
 function void_20emscripten__internal__RegisterClassMethod_double_20_28maxiEnvelope____29_28int_2c_20std____2__vector_double_2c_20std____2__allocator_double__20___29___invoke_maxiEnvelope__28char_20const__2c_20double_20_28maxiEnvelope____29_28int_2c_20std____2__vector_double_2c_20std____2__allocator_double__20___29_29($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  $2 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 12 >> 2] = $2;
  _embind_register_class_function(7008, 1835, 4, 7520, 7536, 541, void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____emscripten__internal__getContext_void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28int_20const__29__28void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28int_20const__29_29_29_28int_20const__29($1 + 8 | 0) | 0, 0);
  $0 = $1 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function void_20emscripten__internal__RegisterClassMethod_void_20_28maxiEnvelope____29_28int_2c_20double_29___invoke_maxiEnvelope__28char_20const__2c_20void_20_28maxiEnvelope____29_28int_2c_20double_29_29($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  $2 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 12 >> 2] = $2;
  _embind_register_class_function(7008, 1840, 4, 7552, 5120, 542, void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____emscripten__internal__getContext_void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28int_20const__29__28void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28int_20const__29_29_29_28int_20const__29($1 + 8 | 0) | 0, 0);
  $0 = $1 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function maxiEnvelope__getAmplitude_28_29_20const($0) {
  $0 = $0 | 0;
  return +HEAPF64[$0 + 48 >> 3];
 }
 
 function maxiEnvelope__setAmplitude_28double_29($0, $1) {
  $0 = $0 | 0;
  $1 = +$1;
  HEAPF64[$0 + 48 >> 3] = $1;
 }
 
 function double_20emscripten__internal__GetterPolicy_double_20_28maxiEnvelope____29_28_29_20const___get_maxiEnvelope__28double_20_28maxiEnvelope____20const__29_28_29_20const_2c_20maxiEnvelope_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0.0;
  $2 = global$0 - 16 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  $3 = HEAP32[$0 >> 2];
  $0 = HEAP32[$0 + 4 >> 2];
  $1 = ($0 >> 1) + $1 | 0;
  HEAPF64[$2 + 8 >> 3] = FUNCTION_TABLE[$0 & 1 ? HEAP32[$3 + HEAP32[$1 >> 2] >> 2] : $3]($1);
  $4 = HEAPF64[$2 + 8 >> 3];
  $0 = $2 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
  return +$4;
 }
 
 function void_20emscripten__internal__SetterPolicy_void_20_28maxiEnvelope____29_28double_29___set_maxiEnvelope__28void_20_28maxiEnvelope____20const__29_28double_29_2c_20maxiEnvelope__2c_20double_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = +$2;
  var $3 = 0;
  $3 = $1;
  $1 = HEAP32[$0 + 4 >> 2];
  $3 = $3 + ($1 >> 1) | 0;
  $0 = HEAP32[$0 >> 2];
  FUNCTION_TABLE[$1 & 1 ? HEAP32[$0 + HEAP32[$3 >> 2] >> 2] : $0]($3, $2);
 }
 
 function maxiEnvelope__getValindex_28_29_20const($0) {
  $0 = $0 | 0;
  return HEAP32[$0 + 44 >> 2];
 }
 
 function maxiEnvelope__setValindex_28int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  HEAP32[$0 + 44 >> 2] = $1;
 }
 
 function void_20const__20emscripten__internal__getActualType_maxiDelayline__28maxiDelayline__29($0) {
  $0 = $0 | 0;
  return 7584;
 }
 
 function emscripten__smart_ptr_trait_std____2__shared_ptr_maxiDelayline__20___share_28maxiDelayline__2c_20emscripten__internal___EM_VAL__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0;
  $2 = global$0 - 16 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  $3 = operator_20new_28unsigned_20long_29(8);
  HEAP32[16874] = 0;
  emscripten__val__take_ownership_28emscripten__internal___EM_VAL__29($2, $1);
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      if (($1 | 0) != 1) {
       HEAP32[16874] = 0;
       $1 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(543, $2 + 8 | 0, $2 | 0) | 0;
       $4 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($4 | 0) == 1) {
        break label$5
       }
       HEAP32[16874] = 0;
       $0 = __invoke___22class_std____2__shared_ptr_22____22class_std____2__shared_ptr_22___class_maxiOsc____22class_emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc____val_deleter_22__i32(544, $3 | 0, $0 | 0, $1 | 0, 0) | 0;
       $4 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($4 | 0) == 1) {
        break label$4
       }
       emscripten__val___val_28_29($1);
       emscripten__val___val_28_29($2);
       $1 = $2 + 16 | 0;
       if ($1 >>> 0 < global$2 >>> 0) {
        __handle_stack_overflow()
       }
       global$0 = $1;
       return $0 | 0;
      }
      $0 = __cxa_find_matching_catch_2() | 0;
      getTempRet0() | 0;
      break label$2;
     }
     $0 = __cxa_find_matching_catch_2() | 0;
     getTempRet0() | 0;
     break label$3;
    }
    $0 = __cxa_find_matching_catch_2() | 0;
    getTempRet0() | 0;
    emscripten__val___val_28_29($1);
   }
   emscripten__val___val_28_29($2);
  }
  dlfree($3);
  __resumeException($0 | 0);
  abort();
 }
 
 function emscripten__internal__Invoker_std____2__shared_ptr_maxiDelayline__20___invoke_28std____2__shared_ptr_maxiDelayline__20_28__29_28_29_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  FUNCTION_TABLE[$0]($1 + 8 | 0);
  HEAP32[16874] = 0;
  $0 = __invoke_i1___22class_std____2__basic_ifstream_22_(545, $1 + 8 | 0) | 0;
  $2 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($2 | 0) != 1) {
   std____2__shared_ptr_maxiOsc____shared_ptr_28_29($1 + 8 | 0);
   $1 = $1 + 16 | 0;
   if ($1 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $1;
   return $0 | 0;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__shared_ptr_maxiOsc____shared_ptr_28_29($1 + 8 | 0);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2__enable_if___28is_array_maxiDelayline___value_29_2c_20std____2__shared_ptr_maxiDelayline__20___type_20std____2__make_shared_maxiDelayline__28_29($0) {
  $0 = $0 | 0;
  std____2__shared_ptr_maxiDelayline__20std____2__shared_ptr_maxiDelayline___make_shared___28_29($0);
 }
 
 function void_20emscripten__internal__RegisterClassMethod_double_20_28maxiDelayline____29_28double_2c_20int_2c_20double_29___invoke_maxiDelayline__28char_20const__2c_20double_20_28maxiDelayline____29_28double_2c_20int_2c_20double_29_29($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  $2 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 12 >> 2] = $2;
  _embind_register_class_function(7584, 1907, 5, 8096, 8116, 546, void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____emscripten__internal__getContext_void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28int_20const__29__28void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28int_20const__29_29_29_28int_20const__29($1 + 8 | 0) | 0, 0);
  $0 = $1 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function void_20emscripten__internal__RegisterClassMethod_double_20_28maxiDelayline____29_28double_2c_20int_2c_20double_2c_20int_29___invoke_maxiDelayline__28char_20const__2c_20double_20_28maxiDelayline____29_28double_2c_20int_2c_20double_2c_20int_29_29($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  $2 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 12 >> 2] = $2;
  _embind_register_class_function(7584, 1907, 6, 8128, 8152, 547, void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____emscripten__internal__getContext_void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28int_20const__29__28void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28int_20const__29_29_29_28int_20const__29($1 + 8 | 0) | 0, 0);
  $0 = $1 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function void_20const__20emscripten__internal__getActualType_maxiFilter__28maxiFilter__29($0) {
  $0 = $0 | 0;
  return 8176;
 }
 
 function emscripten__smart_ptr_trait_std____2__shared_ptr_maxiFilter__20___share_28maxiFilter__2c_20emscripten__internal___EM_VAL__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0;
  $2 = global$0 - 16 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  $3 = operator_20new_28unsigned_20long_29(8);
  HEAP32[16874] = 0;
  emscripten__val__take_ownership_28emscripten__internal___EM_VAL__29($2, $1);
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      if (($1 | 0) != 1) {
       HEAP32[16874] = 0;
       $1 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(548, $2 + 8 | 0, $2 | 0) | 0;
       $4 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($4 | 0) == 1) {
        break label$5
       }
       HEAP32[16874] = 0;
       $0 = __invoke___22class_std____2__shared_ptr_22____22class_std____2__shared_ptr_22___class_maxiOsc____22class_emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc____val_deleter_22__i32(549, $3 | 0, $0 | 0, $1 | 0, 0) | 0;
       $4 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($4 | 0) == 1) {
        break label$4
       }
       emscripten__val___val_28_29($1);
       emscripten__val___val_28_29($2);
       $1 = $2 + 16 | 0;
       if ($1 >>> 0 < global$2 >>> 0) {
        __handle_stack_overflow()
       }
       global$0 = $1;
       return $0 | 0;
      }
      $0 = __cxa_find_matching_catch_2() | 0;
      getTempRet0() | 0;
      break label$2;
     }
     $0 = __cxa_find_matching_catch_2() | 0;
     getTempRet0() | 0;
     break label$3;
    }
    $0 = __cxa_find_matching_catch_2() | 0;
    getTempRet0() | 0;
    emscripten__val___val_28_29($1);
   }
   emscripten__val___val_28_29($2);
  }
  dlfree($3);
  __resumeException($0 | 0);
  abort();
 }
 
 function emscripten__internal__Invoker_std____2__shared_ptr_maxiFilter__20___invoke_28std____2__shared_ptr_maxiFilter__20_28__29_28_29_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  FUNCTION_TABLE[$0]($1 + 8 | 0);
  HEAP32[16874] = 0;
  $0 = __invoke_i1___22class_std____2__basic_ifstream_22_(550, $1 + 8 | 0) | 0;
  $2 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($2 | 0) != 1) {
   std____2__shared_ptr_maxiOsc____shared_ptr_28_29($1 + 8 | 0);
   $1 = $1 + 16 | 0;
   if ($1 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $1;
   return $0 | 0;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__shared_ptr_maxiOsc____shared_ptr_28_29($1 + 8 | 0);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2__enable_if___28is_array_maxiFilter___value_29_2c_20std____2__shared_ptr_maxiFilter__20___type_20std____2__make_shared_maxiFilter__28_29($0) {
  $0 = $0 | 0;
  std____2__shared_ptr_maxiFilter__20std____2__shared_ptr_maxiFilter___make_shared___28_29($0);
 }
 
 function void_20emscripten__internal__RegisterClassMethod_double_20_28maxiFilter____29_28double_2c_20double_2c_20double_29___invoke_maxiFilter__28char_20const__2c_20double_20_28maxiFilter____29_28double_2c_20double_2c_20double_29_29($0, $1) {
  var $2 = 0, $3 = 0;
  $2 = global$0 - 16 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  $3 = HEAP32[$1 + 4 >> 2];
  HEAP32[$2 + 8 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$2 + 12 >> 2] = $3;
  _embind_register_class_function(8176, $0 | 0, 5, 8672, 6932, 551, void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____emscripten__internal__getContext_void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28int_20const__29__28void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28int_20const__29_29_29_28int_20const__29($2 + 8 | 0) | 0, 0);
  $0 = $2 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function void_20emscripten__internal__RegisterClassMethod_double_20_28maxiFilter____29_28double_2c_20double_29___invoke_maxiFilter__28char_20const__2c_20double_20_28maxiFilter____29_28double_2c_20double_29_29($0, $1) {
  var $2 = 0, $3 = 0;
  $2 = global$0 - 16 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  $3 = HEAP32[$1 + 4 >> 2];
  HEAP32[$2 + 8 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$2 + 12 >> 2] = $3;
  _embind_register_class_function(8176, $0 | 0, 4, 8704, 6960, 552, void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____emscripten__internal__getContext_void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28int_20const__29__28void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28int_20const__29_29_29_28int_20const__29($2 + 8 | 0) | 0, 0);
  $0 = $2 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function maxiFilter__getCutoff_28_29_20const($0) {
  $0 = $0 | 0;
  return +HEAPF64[$0 + 224 >> 3];
 }
 
 function maxiFilter__setCutoff_28double_29($0, $1) {
  $0 = $0 | 0;
  $1 = +$1;
  HEAPF64[$0 + 224 >> 3] = $1;
 }
 
 function maxiFilter__getResonance_28_29_20const($0) {
  $0 = $0 | 0;
  return +HEAPF64[$0 + 232 >> 3];
 }
 
 function maxiFilter__setResonance_28double_29($0, $1) {
  $0 = $0 | 0;
  $1 = +$1;
  HEAPF64[$0 + 232 >> 3] = $1;
 }
 
 function void_20const__20emscripten__internal__getActualType_maxiMix__28maxiMix__29($0) {
  $0 = $0 | 0;
  return 8732;
 }
 
 function emscripten__smart_ptr_trait_std____2__shared_ptr_maxiMix__20___share_28maxiMix__2c_20emscripten__internal___EM_VAL__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0;
  $2 = global$0 - 16 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  $3 = operator_20new_28unsigned_20long_29(8);
  HEAP32[16874] = 0;
  emscripten__val__take_ownership_28emscripten__internal___EM_VAL__29($2, $1);
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      if (($1 | 0) != 1) {
       HEAP32[16874] = 0;
       $1 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(553, $2 + 8 | 0, $2 | 0) | 0;
       $4 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($4 | 0) == 1) {
        break label$5
       }
       HEAP32[16874] = 0;
       $0 = __invoke___22class_std____2__shared_ptr_22____22class_std____2__shared_ptr_22___class_maxiOsc____22class_emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc____val_deleter_22__i32(554, $3 | 0, $0 | 0, $1 | 0, 0) | 0;
       $4 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($4 | 0) == 1) {
        break label$4
       }
       emscripten__val___val_28_29($1);
       emscripten__val___val_28_29($2);
       $1 = $2 + 16 | 0;
       if ($1 >>> 0 < global$2 >>> 0) {
        __handle_stack_overflow()
       }
       global$0 = $1;
       return $0 | 0;
      }
      $0 = __cxa_find_matching_catch_2() | 0;
      getTempRet0() | 0;
      break label$2;
     }
     $0 = __cxa_find_matching_catch_2() | 0;
     getTempRet0() | 0;
     break label$3;
    }
    $0 = __cxa_find_matching_catch_2() | 0;
    getTempRet0() | 0;
    emscripten__val___val_28_29($1);
   }
   emscripten__val___val_28_29($2);
  }
  dlfree($3);
  __resumeException($0 | 0);
  abort();
 }
 
 function emscripten__internal__Invoker_std____2__shared_ptr_maxiMix__20___invoke_28std____2__shared_ptr_maxiMix__20_28__29_28_29_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  FUNCTION_TABLE[$0]($1 + 8 | 0);
  HEAP32[16874] = 0;
  $0 = __invoke_i1___22class_std____2__basic_ifstream_22_(555, $1 + 8 | 0) | 0;
  $2 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($2 | 0) != 1) {
   std____2__shared_ptr_maxiOsc____shared_ptr_28_29($1 + 8 | 0);
   $1 = $1 + 16 | 0;
   if ($1 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $1;
   return $0 | 0;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__shared_ptr_maxiOsc____shared_ptr_28_29($1 + 8 | 0);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2__enable_if___28is_array_maxiMix___value_29_2c_20std____2__shared_ptr_maxiMix__20___type_20std____2__make_shared_maxiMix__28_29($0) {
  $0 = $0 | 0;
  std____2__shared_ptr_maxiMix__20std____2__shared_ptr_maxiMix___make_shared___28_29($0);
 }
 
 function void_20emscripten__internal__RegisterClassMethod_void_20_28maxiMix____29_28double_2c_20std____2__vector_double_2c_20std____2__allocator_double__20___2c_20double_29___invoke_maxiMix_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20void_20_28maxiMix____29_28double_2c_20std____2__vector_double_2c_20std____2__allocator_double__20___2c_20double_29_29($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  $2 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 12 >> 2] = $2;
  _embind_register_class_function(8732, 2024, 5, 9200, 9220, 556, void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____emscripten__internal__getContext_void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28int_20const__29__28void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28int_20const__29_29_29_28int_20const__29($1 + 8 | 0) | 0, 0);
  $0 = $1 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function void_20emscripten__internal__RegisterClassMethod_void_20_28maxiMix____29_28double_2c_20std____2__vector_double_2c_20std____2__allocator_double__20___2c_20double_2c_20double_29___invoke_maxiMix_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20void_20_28maxiMix____29_28double_2c_20std____2__vector_double_2c_20std____2__allocator_double__20___2c_20double_2c_20double_29_29($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  $2 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 12 >> 2] = $2;
  _embind_register_class_function(8732, 2031, 6, 9232, 9256, 557, void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____emscripten__internal__getContext_void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28int_20const__29__28void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28int_20const__29_29_29_28int_20const__29($1 + 8 | 0) | 0, 0);
  $0 = $1 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function void_20emscripten__internal__RegisterClassMethod_void_20_28maxiMix____29_28double_2c_20std____2__vector_double_2c_20std____2__allocator_double__20___2c_20double_2c_20double_2c_20double_29___invoke_maxiMix_2c_20emscripten__allow_raw_pointers__28char_20const__2c_20void_20_28maxiMix____29_28double_2c_20std____2__vector_double_2c_20std____2__allocator_double__20___2c_20double_2c_20double_2c_20double_29_29($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  $2 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 12 >> 2] = $2;
  _embind_register_class_function(8732, 2036, 7, 9264, 9292, 558, void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____emscripten__internal__getContext_void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28int_20const__29__28void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28int_20const__29_29_29_28int_20const__29($1 + 8 | 0) | 0, 0);
  $0 = $1 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function void_20const__20emscripten__internal__getActualType_maxiLine__28maxiLine__29($0) {
  $0 = $0 | 0;
  return 9312;
 }
 
 function emscripten__smart_ptr_trait_std____2__shared_ptr_maxiLine__20___share_28maxiLine__2c_20emscripten__internal___EM_VAL__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0;
  $2 = global$0 - 16 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  $3 = operator_20new_28unsigned_20long_29(8);
  HEAP32[16874] = 0;
  emscripten__val__take_ownership_28emscripten__internal___EM_VAL__29($2, $1);
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      if (($1 | 0) != 1) {
       HEAP32[16874] = 0;
       $1 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(559, $2 + 8 | 0, $2 | 0) | 0;
       $4 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($4 | 0) == 1) {
        break label$5
       }
       HEAP32[16874] = 0;
       $0 = __invoke___22class_std____2__shared_ptr_22____22class_std____2__shared_ptr_22___class_maxiOsc____22class_emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc____val_deleter_22__i32(560, $3 | 0, $0 | 0, $1 | 0, 0) | 0;
       $4 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($4 | 0) == 1) {
        break label$4
       }
       emscripten__val___val_28_29($1);
       emscripten__val___val_28_29($2);
       $1 = $2 + 16 | 0;
       if ($1 >>> 0 < global$2 >>> 0) {
        __handle_stack_overflow()
       }
       global$0 = $1;
       return $0 | 0;
      }
      $0 = __cxa_find_matching_catch_2() | 0;
      getTempRet0() | 0;
      break label$2;
     }
     $0 = __cxa_find_matching_catch_2() | 0;
     getTempRet0() | 0;
     break label$3;
    }
    $0 = __cxa_find_matching_catch_2() | 0;
    getTempRet0() | 0;
    emscripten__val___val_28_29($1);
   }
   emscripten__val___val_28_29($2);
  }
  dlfree($3);
  __resumeException($0 | 0);
  abort();
 }
 
 function emscripten__internal__Invoker_std____2__shared_ptr_maxiLine__20___invoke_28std____2__shared_ptr_maxiLine__20_28__29_28_29_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  FUNCTION_TABLE[$0]($1 + 8 | 0);
  HEAP32[16874] = 0;
  $0 = __invoke_i1___22class_std____2__basic_ifstream_22_(561, $1 + 8 | 0) | 0;
  $2 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($2 | 0) != 1) {
   std____2__shared_ptr_maxiOsc____shared_ptr_28_29($1 + 8 | 0);
   $1 = $1 + 16 | 0;
   if ($1 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $1;
   return $0 | 0;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__shared_ptr_maxiOsc____shared_ptr_28_29($1 + 8 | 0);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2__enable_if___28is_array_maxiLine___value_29_2c_20std____2__shared_ptr_maxiLine__20___type_20std____2__make_shared_maxiLine__28_29($0) {
  $0 = $0 | 0;
  std____2__shared_ptr_maxiLine__20std____2__shared_ptr_maxiLine___make_shared___28_29($0);
 }
 
 function maxiLine__play_28double_29($0, $1) {
  $0 = $0 | 0;
  $1 = +$1;
  var $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0;
  if (!HEAPU8[$0 + 48 | 0]) {
   if (!(HEAPF64[$0 + 32 >> 3] == 0.0 | HEAPF64[$0 + 40 >> 3] != 0.0)) {
    HEAPF64[$0 + 40 >> 3] = $1 > 0.0 ^ 1 ? 0.0 : HEAPF64[$0 + 24 >> 3] <= 0.0 ? 1.0 : 0.0;
    $2 = HEAP32[$0 + 60 >> 2];
    HEAP32[$0 + 8 >> 2] = HEAP32[$0 + 56 >> 2];
    HEAP32[$0 + 12 >> 2] = $2;
   }
   label$5 : {
    if (HEAPF64[$0 + 40 >> 3] == 0.0) {
     break label$5
    }
    $4 = HEAPF64[$0 + 16 >> 3];
    $3 = $4 + HEAPF64[$0 + 8 >> 3];
    HEAPF64[$0 + 8 >> 3] = $3;
    $5 = HEAPF64[$0 + 64 >> 3];
    $2 = $4 <= 0.0 ? $3 <= $5 : $3 >= $5;
    HEAP8[$0 + 48 | 0] = $2;
    if (HEAPU8[$0 + 72 | 0] | !$2) {
     break label$5
    }
    maxiLine__reset_28_29($0);
   }
   HEAPF64[$0 + 24 >> 3] = $1;
  }
  return +HEAPF64[$0 + 8 >> 3];
 }
 
 function void_20emscripten__internal__RegisterClassMethod_double_20_28maxiLine____29_28double_29___invoke_maxiLine__28char_20const__2c_20double_20_28maxiLine____29_28double_29_29($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  $2 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 12 >> 2] = $2;
  _embind_register_class_function(9312, 2076, 3, 9784, 6892, 562, void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____emscripten__internal__getContext_void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28int_20const__29__28void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28int_20const__29_29_29_28int_20const__29($1 + 8 | 0) | 0, 0);
  $0 = $1 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function maxiLine__prepare_28double_2c_20double_2c_20double_2c_20bool_29($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = +$2;
  $3 = +$3;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0;
  HEAPF64[$0 + 64 >> 3] = $2;
  $5 = HEAP32[$0 + 60 >> 2];
  $6 = HEAP32[$0 + 56 >> 2];
  HEAPF64[$0 + 56 >> 3] = $1;
  HEAP32[$0 + 8 >> 2] = $6;
  HEAP32[$0 + 12 >> 2] = $5;
  $5 = HEAP32[12865];
  HEAP8[$0 + 72 | 0] = $4;
  HEAPF64[$0 + 16 >> 3] = ($2 - $1) / ($3 / 1.0e3 * +($5 | 0));
  maxiLine__reset_28_29($0);
 }
 
 function void_20emscripten__internal__RegisterClassMethod_void_20_28maxiLine____29_28double_2c_20double_2c_20double_2c_20bool_29___invoke_maxiLine__28char_20const__2c_20void_20_28maxiLine____29_28double_2c_20double_2c_20double_2c_20bool_29_29($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  $2 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 12 >> 2] = $2;
  _embind_register_class_function(9312, 2081, 6, 9808, 9832, 563, void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____emscripten__internal__getContext_void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28int_20const__29__28void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28int_20const__29_29_29_28int_20const__29($1 + 8 | 0) | 0, 0);
  $0 = $1 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function maxiLine__triggerEnable_28double_29($0, $1) {
  $0 = $0 | 0;
  $1 = +$1;
  HEAPF64[$0 + 32 >> 3] = $1 > 0.0 ? 1.0 : 0.0;
 }
 
 function void_20emscripten__internal__RegisterClassMethod_void_20_28maxiLine____29_28double_29___invoke_maxiLine__28char_20const__2c_20void_20_28maxiLine____29_28double_29_29($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  $2 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 12 >> 2] = $2;
  _embind_register_class_function(9312, 2089, 3, 9840, 5096, 564, void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____emscripten__internal__getContext_void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28int_20const__29__28void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28int_20const__29_29_29_28int_20const__29($1 + 8 | 0) | 0, 0);
  $0 = $1 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function maxiLine__isLineComplete_28_29($0) {
  $0 = $0 | 0;
  return HEAPU8[$0 + 48 | 0];
 }
 
 function void_20emscripten__internal__RegisterClassMethod_bool_20_28maxiLine____29_28_29___invoke_maxiLine__28char_20const__2c_20bool_20_28maxiLine____29_28_29_29($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  $2 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 12 >> 2] = $2;
  _embind_register_class_function(9312, 2103, 2, 9852, 4752, 565, void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____emscripten__internal__getContext_void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28int_20const__29__28void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28int_20const__29_29_29_28int_20const__29($1 + 8 | 0) | 0, 0);
  $0 = $1 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function void_20const__20emscripten__internal__getActualType_maxiXFade__28maxiXFade__29($0) {
  $0 = $0 | 0;
  return 9872;
 }
 
 function maxiXFade__xfade_28std____2__vector_double_2c_20std____2__allocator_double__20___2c_20std____2__vector_double_2c_20std____2__allocator_double__20___2c_20double_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = +$3;
  var $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0;
  $5 = global$0 - 16 | 0;
  $4 = $5;
  if ($4 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  $3 = maxiMap__linlin_28double_2c_20double_2c_20double_2c_20double_2c_20double_29(double_20maxiMap__clamp_double__28double_2c_20double_2c_20double_29($3, -1.0, 1.0), -1.0, 1.0, 0.0, 1.0);
  $4 = std____2__vector_double_2c_20std____2__allocator_double__20___size_28_29_20const($1);
  HEAP32[$5 + 8 >> 2] = 0;
  HEAP32[$5 + 12 >> 2] = 0;
  $4 = std____2__vector_double_2c_20std____2__allocator_double__20___vector_28unsigned_20long_2c_20double_20const__29($0, $4, $5 + 8 | 0);
  if (std____2__vector_double_2c_20std____2__allocator_double__20___size_28_29_20const($4)) {
   $6 = Math_sqrt($3);
   $3 = Math_sqrt(1.0 - $3);
   $0 = 0;
   while (1) {
    $7 = HEAPF64[std____2__vector_double_2c_20std____2__allocator_double__20___operator_5b_5d_28unsigned_20long_29($1, $0) >> 3];
    $8 = HEAPF64[std____2__vector_double_2c_20std____2__allocator_double__20___operator_5b_5d_28unsigned_20long_29($2, $0) >> 3];
    HEAPF64[std____2__vector_double_2c_20std____2__allocator_double__20___operator_5b_5d_28unsigned_20long_29($4, $0) >> 3] = $3 * $7 + $6 * $8;
    $0 = $0 + 1 | 0;
    if ($0 >>> 0 < std____2__vector_double_2c_20std____2__allocator_double__20___size_28_29_20const($4) >>> 0) {
     continue
    }
    break;
   };
  }
  $0 = $5 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function emscripten__internal__Invoker_std____2__vector_double_2c_20std____2__allocator_double__20__2c_20std____2__vector_double_2c_20std____2__allocator_double__20___2c_20std____2__vector_double_2c_20std____2__allocator_double__20___2c_20double___invoke_28std____2__vector_double_2c_20std____2__allocator_double__20__20_28__29_28std____2__vector_double_2c_20std____2__allocator_double__20___2c_20std____2__vector_double_2c_20std____2__allocator_double__20___2c_20double_29_2c_20std____2__vector_double_2c_20std____2__allocator_double__20___2c_20std____2__vector_double_2c_20std____2__allocator_double__20___2c_20double_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = +$3;
  var $4 = 0, $5 = 0;
  $4 = global$0 - 16 | 0;
  $5 = $4;
  if ($4 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $5;
  FUNCTION_TABLE[$0]($4, $1, $2, $3);
  HEAP32[16874] = 0;
  $0 = __invoke_i1___22class_std____2__basic_ifstream_22_(566, $4 | 0) | 0;
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($1 | 0) != 1) {
   std____2__vector_double_2c_20std____2__allocator_double__20____vector_28_29($4);
   $1 = $4 + 16 | 0;
   if ($1 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $1;
   return $0 | 0;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__vector_double_2c_20std____2__allocator_double__20____vector_28_29($4);
  __resumeException($0 | 0);
  abort();
 }
 
 function maxiXFade__xfade_28double_2c_20double_2c_20double_29($0, $1, $2) {
  $0 = +$0;
  $1 = +$1;
  $2 = +$2;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $3 = global$0 - 80 | 0;
  $4 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  HEAP32[$3 + 60 >> 2] = 1;
  HEAPF64[$3 + 40 >> 3] = $0;
  HEAP32[$3 + 56 >> 2] = $3 + 40;
  $4 = HEAP32[$3 + 60 >> 2];
  HEAP32[$3 + 8 >> 2] = HEAP32[$3 + 56 >> 2];
  HEAP32[$3 + 12 >> 2] = $4;
  $4 = std____2__vector_double_2c_20std____2__allocator_double__20___vector_28std__initializer_list_double__29($3 - -64 | 0, $3 + 8 | 0);
  HEAP32[$3 + 36 >> 2] = 1;
  HEAP32[16874] = 0;
  HEAP32[$3 + 32 >> 2] = $3 + 16;
  $5 = HEAP32[$3 + 36 >> 2];
  HEAP32[$3 >> 2] = HEAP32[$3 + 32 >> 2];
  HEAP32[$3 + 4 >> 2] = $5;
  HEAPF64[$3 + 16 >> 3] = $1;
  $5 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(567, $3 + 40 | 0, $3 | 0) | 0;
  $6 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    if (($6 | 0) != 1) {
     HEAP32[16874] = 0;
     __invoke_void___22class_std____2__vector_22____22class_std____2__vector_22____22class_std____2__vector_22__double(188, $3 + 16 | 0, $4 | 0, $5 | 0, +$2);
     $6 = HEAP32[16874];
     HEAP32[16874] = 0;
     if (($6 | 0) == 1) {
      break label$3
     }
     $0 = HEAPF64[std____2__vector_double_2c_20std____2__allocator_double__20___operator_5b_5d_28unsigned_20long_29($3 + 16 | 0, 0) >> 3];
     std____2__vector_double_2c_20std____2__allocator_double__20____vector_28_29($3 + 16 | 0);
     std____2__vector_double_2c_20std____2__allocator_double__20____vector_28_29($5);
     std____2__vector_double_2c_20std____2__allocator_double__20____vector_28_29($4);
     $3 = $3 + 80 | 0;
     if ($3 >>> 0 < global$2 >>> 0) {
      __handle_stack_overflow()
     }
     global$0 = $3;
     return +$0;
    }
    $3 = __cxa_find_matching_catch_2() | 0;
    getTempRet0() | 0;
    break label$2;
   }
   $3 = __cxa_find_matching_catch_2() | 0;
   getTempRet0() | 0;
   std____2__vector_double_2c_20std____2__allocator_double__20____vector_28_29($5);
  }
  std____2__vector_double_2c_20std____2__allocator_double__20____vector_28_29($4);
  __resumeException($3 | 0);
  abort();
 }
 
 function emscripten__internal__Invoker_double_2c_20double_2c_20double_2c_20double___invoke_28double_20_28__29_28double_2c_20double_2c_20double_29_2c_20double_2c_20double_2c_20double_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = +$2;
  $3 = +$3;
  var $4 = 0, $5 = 0;
  $4 = global$0 - 16 | 0;
  $5 = $4;
  if ($4 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $5;
  HEAPF64[$4 + 8 >> 3] = FUNCTION_TABLE[$0]($1, $2, $3);
  $1 = HEAPF64[$4 + 8 >> 3];
  $0 = $4 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
  return +$1;
 }
 
 function void_20const__20emscripten__internal__getActualType_maxiLagExp_double__20__28maxiLagExp_double___29($0) {
  $0 = $0 | 0;
  return 10008;
 }
 
 function emscripten__smart_ptr_trait_std____2__shared_ptr_maxiLagExp_double__20__20___share_28maxiLagExp_double___2c_20emscripten__internal___EM_VAL__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0;
  $2 = global$0 - 16 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  $3 = operator_20new_28unsigned_20long_29(8);
  HEAP32[16874] = 0;
  emscripten__val__take_ownership_28emscripten__internal___EM_VAL__29($2, $1);
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      if (($1 | 0) != 1) {
       HEAP32[16874] = 0;
       $1 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(568, $2 + 8 | 0, $2 | 0) | 0;
       $4 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($4 | 0) == 1) {
        break label$5
       }
       HEAP32[16874] = 0;
       $0 = __invoke___22class_std____2__shared_ptr_22____22class_std____2__shared_ptr_22___class_maxiOsc____22class_emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc____val_deleter_22__i32(569, $3 | 0, $0 | 0, $1 | 0, 0) | 0;
       $4 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($4 | 0) == 1) {
        break label$4
       }
       emscripten__val___val_28_29($1);
       emscripten__val___val_28_29($2);
       $1 = $2 + 16 | 0;
       if ($1 >>> 0 < global$2 >>> 0) {
        __handle_stack_overflow()
       }
       global$0 = $1;
       return $0 | 0;
      }
      $0 = __cxa_find_matching_catch_2() | 0;
      getTempRet0() | 0;
      break label$2;
     }
     $0 = __cxa_find_matching_catch_2() | 0;
     getTempRet0() | 0;
     break label$3;
    }
    $0 = __cxa_find_matching_catch_2() | 0;
    getTempRet0() | 0;
    emscripten__val___val_28_29($1);
   }
   emscripten__val___val_28_29($2);
  }
  dlfree($3);
  __resumeException($0 | 0);
  abort();
 }
 
 function emscripten__internal__Invoker_std____2__shared_ptr_maxiLagExp_double__20__20___invoke_28std____2__shared_ptr_maxiLagExp_double__20__20_28__29_28_29_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  FUNCTION_TABLE[$0]($1 + 8 | 0);
  HEAP32[16874] = 0;
  $0 = __invoke_i1___22class_std____2__basic_ifstream_22_(570, $1 + 8 | 0) | 0;
  $2 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($2 | 0) != 1) {
   std____2__shared_ptr_maxiOsc____shared_ptr_28_29($1 + 8 | 0);
   $1 = $1 + 16 | 0;
   if ($1 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $1;
   return $0 | 0;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__shared_ptr_maxiOsc____shared_ptr_28_29($1 + 8 | 0);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2__enable_if___28is_array_maxiLagExp_double__20___value_29_2c_20std____2__shared_ptr_maxiLagExp_double__20__20___type_20std____2__make_shared_maxiLagExp_double__20__28_29($0) {
  $0 = $0 | 0;
  std____2__shared_ptr_maxiLagExp_double__20__20std____2__shared_ptr_maxiLagExp_double__20___make_shared___28_29($0);
 }
 
 function void_20emscripten__internal__RegisterClassMethod_void_20_28maxiLagExp_double_____29_28double_2c_20double_29___invoke_maxiLagExp_double__20__28char_20const__2c_20void_20_28maxiLagExp_double_____29_28double_2c_20double_29_29($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  $2 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 12 >> 2] = $2;
  _embind_register_class_function(10008, 2176, 4, 10528, 10544, 571, void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____emscripten__internal__getContext_void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28int_20const__29__28void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28int_20const__29_29_29_28int_20const__29($1 + 8 | 0) | 0, 0);
  $0 = $1 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function void_20emscripten__internal__RegisterClassMethod_void_20_28maxiLagExp_double_____29_28double_29___invoke_maxiLagExp_double__20__28char_20const__2c_20void_20_28maxiLagExp_double_____29_28double_29_29($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  $2 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 12 >> 2] = $2;
  _embind_register_class_function(10008, 2181, 3, 10552, 5096, 572, void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____emscripten__internal__getContext_void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28int_20const__29__28void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28int_20const__29_29_29_28int_20const__29($1 + 8 | 0) | 0, 0);
  $0 = $1 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function void_20emscripten__internal__RegisterClassMethod_double_20_28maxiLagExp_double_____29_28_29_20const___invoke_maxiLagExp_double__20__28char_20const__2c_20double_20_28maxiLagExp_double_____29_28_29_20const_29($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  $2 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 12 >> 2] = $2;
  _embind_register_class_function(10008, 2191, 2, 10564, 6976, 573, void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____emscripten__internal__getContext_void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28int_20const__29__28void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28int_20const__29_29_29_28int_20const__29($1 + 8 | 0) | 0, 0);
  $0 = $1 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function maxiLagExp_double___getAlpha_28_29_20const($0) {
  $0 = $0 | 0;
  return +HEAPF64[$0 >> 3];
 }
 
 function maxiLagExp_double___setAlpha_28double_29($0, $1) {
  $0 = $0 | 0;
  $1 = +$1;
  HEAPF64[$0 >> 3] = $1;
 }
 
 function maxiLagExp_double___getAlphaReciprocal_28_29_20const($0) {
  $0 = $0 | 0;
  return +HEAPF64[$0 + 8 >> 3];
 }
 
 function maxiLagExp_double___setVal_28double_29($0, $1) {
  $0 = $0 | 0;
  $1 = +$1;
  HEAPF64[$0 + 16 >> 3] = $1;
 }
 
 function void_20const__20emscripten__internal__getActualType_maxiSample__28maxiSample__29($0) {
  $0 = $0 | 0;
  return 10588;
 }
 
 function void_20emscripten__internal__raw_destructor_maxiSample__28maxiSample__29($0) {
  $0 = $0 | 0;
  if ($0) {
   dlfree(maxiSample___maxiSample_28_29($0))
  }
 }
 
 function emscripten__smart_ptr_trait_std____2__shared_ptr_maxiSample__20___share_28maxiSample__2c_20emscripten__internal___EM_VAL__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0;
  $2 = global$0 - 16 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  $3 = operator_20new_28unsigned_20long_29(8);
  HEAP32[16874] = 0;
  emscripten__val__take_ownership_28emscripten__internal___EM_VAL__29($2, $1);
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      if (($1 | 0) != 1) {
       HEAP32[16874] = 0;
       $1 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(574, $2 + 8 | 0, $2 | 0) | 0;
       $4 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($4 | 0) == 1) {
        break label$5
       }
       HEAP32[16874] = 0;
       $0 = __invoke___22class_std____2__shared_ptr_22____22class_std____2__shared_ptr_22___class_maxiOsc____22class_emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc____val_deleter_22__i32(575, $3 | 0, $0 | 0, $1 | 0, 0) | 0;
       $4 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($4 | 0) == 1) {
        break label$4
       }
       emscripten__val___val_28_29($1);
       emscripten__val___val_28_29($2);
       $1 = $2 + 16 | 0;
       if ($1 >>> 0 < global$2 >>> 0) {
        __handle_stack_overflow()
       }
       global$0 = $1;
       return $0 | 0;
      }
      $0 = __cxa_find_matching_catch_2() | 0;
      getTempRet0() | 0;
      break label$2;
     }
     $0 = __cxa_find_matching_catch_2() | 0;
     getTempRet0() | 0;
     break label$3;
    }
    $0 = __cxa_find_matching_catch_2() | 0;
    getTempRet0() | 0;
    emscripten__val___val_28_29($1);
   }
   emscripten__val___val_28_29($2);
  }
  dlfree($3);
  __resumeException($0 | 0);
  abort();
 }
 
 function emscripten__internal__Invoker_std____2__shared_ptr_maxiSample__20___invoke_28std____2__shared_ptr_maxiSample__20_28__29_28_29_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  FUNCTION_TABLE[$0]($1 + 8 | 0);
  HEAP32[16874] = 0;
  $0 = __invoke_i1___22class_std____2__basic_ifstream_22_(576, $1 + 8 | 0) | 0;
  $2 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($2 | 0) != 1) {
   std____2__shared_ptr_maxiOsc____shared_ptr_28_29($1 + 8 | 0);
   $1 = $1 + 16 | 0;
   if ($1 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $1;
   return $0 | 0;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__shared_ptr_maxiOsc____shared_ptr_28_29($1 + 8 | 0);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2__enable_if___28is_array_maxiSample___value_29_2c_20std____2__shared_ptr_maxiSample__20___type_20std____2__make_shared_maxiSample__28_29($0) {
  $0 = $0 | 0;
  std____2__shared_ptr_maxiSample__20std____2__shared_ptr_maxiSample___make_shared___28_29($0);
 }
 
 function maxiSample__getLength_28_29_20const($0) {
  $0 = $0 | 0;
  return std____2__vector_double_2c_20std____2__allocator_double__20___size_28_29_20const($0 + 108 | 0) | 0;
 }
 
 function void_20emscripten__internal__RegisterClassMethod_unsigned_20long_20_28maxiSample____29_28_29_20const___invoke_maxiSample__28char_20const__2c_20unsigned_20long_20_28maxiSample____29_28_29_20const_29($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  $2 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 12 >> 2] = $2;
  _embind_register_class_function(10588, 2257, 2, 11076, 4752, 577, void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____emscripten__internal__getContext_void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28int_20const__29__28void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28int_20const__29_29_29_28int_20const__29($1 + 8 | 0) | 0, 0);
  $0 = $1 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function void_20emscripten__internal__RegisterClassMethod_void_20_28maxiSample____29_28std____2__vector_double_2c_20std____2__allocator_double__20___29___invoke_maxiSample__28char_20const__2c_20void_20_28maxiSample____29_28std____2__vector_double_2c_20std____2__allocator_double__20___29_29($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  $2 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 12 >> 2] = $2;
  _embind_register_class_function(10588, 2267, 3, 11084, 4712, 578, void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____emscripten__internal__getContext_void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28int_20const__29__28void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28int_20const__29_29_29_28int_20const__29($1 + 8 | 0) | 0, 0);
  $0 = $1 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function void_20emscripten__internal__RegisterClassMethod_void_20_28maxiSample____29_28std____2__vector_double_2c_20std____2__allocator_double__20___2c_20int_29___invoke_maxiSample__28char_20const__2c_20void_20_28maxiSample____29_28std____2__vector_double_2c_20std____2__allocator_double__20___2c_20int_29_29($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  $2 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 12 >> 2] = $2;
  _embind_register_class_function(10588, 2267, 4, 11104, 4736, 579, void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____emscripten__internal__getContext_void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28int_20const__29__28void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28int_20const__29_29_29_28int_20const__29($1 + 8 | 0) | 0, 0);
  $0 = $1 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function void_20emscripten__internal__RegisterClassMethod_int_20_28maxiSample____29_28std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20___2c_20int_29___invoke_maxiSample__28char_20const__2c_20int_20_28maxiSample____29_28std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20___2c_20int_29_29($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  $2 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 12 >> 2] = $2;
  _embind_register_class_function(10588, 2277, 4, 11120, 4832, 580, void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____emscripten__internal__getContext_void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28int_20const__29__28void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28int_20const__29_29_29_28int_20const__29($1 + 8 | 0) | 0, 0);
  $0 = $1 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function void_20emscripten__internal__RegisterClassMethod_bool_20_28maxiSample____29_28_29___invoke_maxiSample__28char_20const__2c_20bool_20_28maxiSample____29_28_29_29($0, $1) {
  var $2 = 0, $3 = 0;
  $2 = global$0 - 16 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  $3 = HEAP32[$1 + 4 >> 2];
  HEAP32[$2 + 8 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$2 + 12 >> 2] = $3;
  _embind_register_class_function(10588, $0 | 0, 2, 11136, 4752, 581, void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____emscripten__internal__getContext_void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28int_20const__29__28void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28int_20const__29_29_29_28int_20const__29($2 + 8 | 0) | 0, 0);
  $0 = $2 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function void_20emscripten__internal__RegisterClassMethod_double_20_28maxiSample____29_28_29___invoke_maxiSample__28char_20const__2c_20double_20_28maxiSample____29_28_29_29($0, $1) {
  var $2 = 0, $3 = 0;
  $2 = global$0 - 16 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  $3 = HEAP32[$1 + 4 >> 2];
  HEAP32[$2 + 8 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$2 + 12 >> 2] = $3;
  _embind_register_class_function(10588, $0 | 0, 2, 11144, 6976, 582, void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____emscripten__internal__getContext_void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28int_20const__29__28void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28int_20const__29_29_29_28int_20const__29($2 + 8 | 0) | 0, 0);
  $0 = $2 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function void_20emscripten__internal__RegisterClassMethod_double_20_28maxiSample____29_28double_29___invoke_maxiSample__28char_20const__2c_20double_20_28maxiSample____29_28double_29_29($0, $1) {
  var $2 = 0, $3 = 0;
  $2 = global$0 - 16 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  $3 = HEAP32[$1 + 4 >> 2];
  HEAP32[$2 + 8 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$2 + 12 >> 2] = $3;
  _embind_register_class_function(10588, $0 | 0, 3, 11152, 6892, 583, void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____emscripten__internal__getContext_void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28int_20const__29__28void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28int_20const__29_29_29_28int_20const__29($2 + 8 | 0) | 0, 0);
  $0 = $2 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function void_20emscripten__internal__RegisterClassMethod_void_20_28maxiSample____29_28double_29___invoke_maxiSample__28char_20const__2c_20void_20_28maxiSample____29_28double_29_29($0, $1) {
  var $2 = 0, $3 = 0;
  $2 = global$0 - 16 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  $3 = HEAP32[$1 + 4 >> 2];
  HEAP32[$2 + 8 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$2 + 12 >> 2] = $3;
  _embind_register_class_function(10588, $0 | 0, 3, 11164, 5096, 584, void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____emscripten__internal__getContext_void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28int_20const__29__28void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28int_20const__29_29_29_28int_20const__29($2 + 8 | 0) | 0, 0);
  $0 = $2 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function void_20emscripten__internal__RegisterClassMethod_double_20_28maxiSample____29_28double_2c_20double_29___invoke_maxiSample__28char_20const__2c_20double_20_28maxiSample____29_28double_2c_20double_29_29($0, $1) {
  var $2 = 0, $3 = 0;
  $2 = global$0 - 16 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  $3 = HEAP32[$1 + 4 >> 2];
  HEAP32[$2 + 8 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$2 + 12 >> 2] = $3;
  _embind_register_class_function(10588, $0 | 0, 4, 11184, 6960, 585, void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____emscripten__internal__getContext_void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28int_20const__29__28void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28int_20const__29_29_29_28int_20const__29($2 + 8 | 0) | 0, 0);
  $0 = $2 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function void_20emscripten__internal__RegisterClassMethod_double_20_28maxiSample____29_28double_2c_20double_2c_20double_29___invoke_maxiSample__28char_20const__2c_20double_20_28maxiSample____29_28double_2c_20double_2c_20double_29_29($0, $1) {
  var $2 = 0, $3 = 0;
  $2 = global$0 - 16 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  $3 = HEAP32[$1 + 4 >> 2];
  HEAP32[$2 + 8 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$2 + 12 >> 2] = $3;
  _embind_register_class_function(10588, $0 | 0, 5, 11200, 6932, 586, void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____emscripten__internal__getContext_void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28int_20const__29__28void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28int_20const__29_29_29_28int_20const__29($2 + 8 | 0) | 0, 0);
  $0 = $2 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function void_20emscripten__internal__RegisterClassMethod_void_20_28maxiSample____29_28_29___invoke_maxiSample__28char_20const__2c_20void_20_28maxiSample____29_28_29_29($0, $1) {
  var $2 = 0, $3 = 0;
  $2 = global$0 - 16 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  $3 = HEAP32[$1 + 4 >> 2];
  HEAP32[$2 + 8 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$2 + 12 >> 2] = $3;
  _embind_register_class_function(10588, $0 | 0, 2, 11220, 6264, 587, void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____emscripten__internal__getContext_void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28int_20const__29__28void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28int_20const__29_29_29_28int_20const__29($2 + 8 | 0) | 0, 0);
  $0 = $2 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function maxiSample__clear_28_29($0) {
  $0 = $0 | 0;
  std____2__vector_double_2c_20std____2__allocator_double__20___clear_28_29($0 + 108 | 0);
 }
 
 function void_20emscripten__internal__RegisterClassMethod_void_20_28maxiSample____29_28float_2c_20float_2c_20bool_2c_20bool_29___invoke_maxiSample__28char_20const__2c_20void_20_28maxiSample____29_28float_2c_20float_2c_20bool_2c_20bool_29_29($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  $2 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 12 >> 2] = $2;
  _embind_register_class_function(10588, 2368, 6, 11232, 11256, 588, void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____emscripten__internal__getContext_void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28int_20const__29__28void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28int_20const__29_29_29_28int_20const__29($1 + 8 | 0) | 0, 0);
  $0 = $1 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function void_20emscripten__internal__RegisterClassMethod_bool_20_28maxiSample____29_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20int_29___invoke_maxiSample__28char_20const__2c_20bool_20_28maxiSample____29_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20int_29_29($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  $2 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 12 >> 2] = $2;
  _embind_register_class_function(10588, 2377, 4, 11264, 4832, 589, void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____emscripten__internal__getContext_void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28int_20const__29__28void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28int_20const__29_29_29_28int_20const__29($1 + 8 | 0) | 0, 0);
  $0 = $1 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function void_20const__20emscripten__internal__getActualType_maxiMap__28maxiMap__29($0) {
  $0 = $0 | 0;
  return 11428;
 }
 
 function emscripten__smart_ptr_trait_std____2__shared_ptr_maxiMap__20___share_28maxiMap__2c_20emscripten__internal___EM_VAL__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0;
  $2 = global$0 - 16 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  $3 = operator_20new_28unsigned_20long_29(8);
  HEAP32[16874] = 0;
  emscripten__val__take_ownership_28emscripten__internal___EM_VAL__29($2, $1);
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      if (($1 | 0) != 1) {
       HEAP32[16874] = 0;
       $1 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(590, $2 + 8 | 0, $2 | 0) | 0;
       $4 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($4 | 0) == 1) {
        break label$5
       }
       HEAP32[16874] = 0;
       $0 = __invoke___22class_std____2__shared_ptr_22____22class_std____2__shared_ptr_22___class_maxiOsc____22class_emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc____val_deleter_22__i32(591, $3 | 0, $0 | 0, $1 | 0, 0) | 0;
       $4 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($4 | 0) == 1) {
        break label$4
       }
       emscripten__val___val_28_29($1);
       emscripten__val___val_28_29($2);
       $1 = $2 + 16 | 0;
       if ($1 >>> 0 < global$2 >>> 0) {
        __handle_stack_overflow()
       }
       global$0 = $1;
       return $0 | 0;
      }
      $0 = __cxa_find_matching_catch_2() | 0;
      getTempRet0() | 0;
      break label$2;
     }
     $0 = __cxa_find_matching_catch_2() | 0;
     getTempRet0() | 0;
     break label$3;
    }
    $0 = __cxa_find_matching_catch_2() | 0;
    getTempRet0() | 0;
    emscripten__val___val_28_29($1);
   }
   emscripten__val___val_28_29($2);
  }
  dlfree($3);
  __resumeException($0 | 0);
  abort();
 }
 
 function emscripten__internal__Invoker_std____2__shared_ptr_maxiMap__20___invoke_28std____2__shared_ptr_maxiMap__20_28__29_28_29_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  FUNCTION_TABLE[$0]($1 + 8 | 0);
  HEAP32[16874] = 0;
  $0 = __invoke_i1___22class_std____2__basic_ifstream_22_(592, $1 + 8 | 0) | 0;
  $2 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($2 | 0) != 1) {
   std____2__shared_ptr_maxiOsc____shared_ptr_28_29($1 + 8 | 0);
   $1 = $1 + 16 | 0;
   if ($1 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $1;
   return $0 | 0;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__shared_ptr_maxiOsc____shared_ptr_28_29($1 + 8 | 0);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2__enable_if___28is_array_maxiMap___value_29_2c_20std____2__shared_ptr_maxiMap__20___type_20std____2__make_shared_maxiMap__28_29($0) {
  $0 = $0 | 0;
  std____2__shared_ptr_maxiMap__20std____2__shared_ptr_maxiMap___make_shared___28_29($0);
 }
 
 function maxiMap__linlin_28double_2c_20double_2c_20double_2c_20double_2c_20double_29($0, $1, $2, $3, $4) {
  $0 = +$0;
  $1 = +$1;
  $2 = +$2;
  $3 = +$3;
  $4 = +$4;
  var $5 = 0, $6 = 0;
  $5 = global$0 - 32 | 0;
  $6 = $5;
  if ($5 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $6;
  HEAPF64[$5 + 16 >> 3] = $1;
  HEAPF64[$5 + 24 >> 3] = $0;
  HEAPF64[$5 + 8 >> 3] = $2;
  $6 = double_20const__20std____2__max_double__28double_20const__2c_20double_20const__29(double_20const__20std____2__min_double__28double_20const__2c_20double_20const__29($5 + 24 | 0, $5 + 8 | 0), $5 + 16 | 0);
  $0 = HEAPF64[$5 + 16 >> 3];
  $1 = HEAPF64[$5 + 8 >> 3];
  $2 = HEAPF64[$6 >> 3];
  HEAPF64[$5 + 24 >> 3] = $2;
  $5 = $5 + 32 | 0;
  if ($5 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $5;
  return +(($4 - $3) * (($2 - $0) / ($1 - $0)) + $3);
 }
 
 function void_20emscripten__internal__RegisterClassMethod_double_20_28__29_28double_2c_20double_2c_20double_2c_20double_2c_20double_29___invoke_maxiMap__28char_20const__2c_20double_20_28__29_28double_2c_20double_2c_20double_2c_20double_2c_20double_29_29($0, $1) {
  var $2 = 0, $3 = 0;
  $2 = global$0 - 16 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  HEAP32[$2 + 12 >> 2] = $1;
  _embind_register_class_function(11428, $0 | 0, 6, 11904, 11928, 593, emscripten__val_20_28__emscripten__internal__getContext_emscripten__val_20_28__29_28std____2__vector_int_2c_20std____2__allocator_int__20__20const__2c_20unsigned_20long_29__28emscripten__val_20_28__20const__29_28std____2__vector_int_2c_20std____2__allocator_int__20__20const__2c_20unsigned_20long_29_29_29_28std____2__vector_int_2c_20std____2__allocator_int__20__20const__2c_20unsigned_20long_29($2 + 12 | 0) | 0, 0);
  $0 = $2 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function maxiMap__linexp_28double_2c_20double_2c_20double_2c_20double_2c_20double_29($0, $1, $2, $3, $4) {
  $0 = +$0;
  $1 = +$1;
  $2 = +$2;
  $3 = +$3;
  $4 = +$4;
  var $5 = 0, $6 = 0;
  $5 = global$0 - 32 | 0;
  $6 = $5;
  if ($5 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $6;
  HEAPF64[$5 + 16 >> 3] = $1;
  HEAPF64[$5 + 24 >> 3] = $0;
  HEAPF64[$5 + 8 >> 3] = $2;
  $6 = double_20const__20std____2__max_double__28double_20const__2c_20double_20const__29(double_20const__20std____2__min_double__28double_20const__2c_20double_20const__29($5 + 24 | 0, $5 + 8 | 0), $5 + 16 | 0);
  $0 = HEAPF64[$5 + 16 >> 3];
  $1 = HEAPF64[$5 + 8 >> 3];
  $2 = HEAPF64[$6 >> 3];
  HEAPF64[$5 + 24 >> 3] = $2;
  $0 = pow($4 / $3, ($2 - $0) / ($1 - $0));
  $5 = $5 + 32 | 0;
  if ($5 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $5;
  return +($0 * $3);
 }
 
 function maxiMap__explin_28double_2c_20double_2c_20double_2c_20double_2c_20double_29($0, $1, $2, $3, $4) {
  $0 = +$0;
  $1 = +$1;
  $2 = +$2;
  $3 = +$3;
  $4 = +$4;
  var $5 = 0, $6 = 0;
  $5 = global$0 - 32 | 0;
  $6 = $5;
  if ($5 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $6;
  HEAPF64[$5 + 16 >> 3] = $1;
  HEAPF64[$5 + 24 >> 3] = $0;
  HEAPF64[$5 + 8 >> 3] = $2;
  $6 = double_20const__20std____2__max_double__28double_20const__2c_20double_20const__29(double_20const__20std____2__min_double__28double_20const__2c_20double_20const__29($5 + 24 | 0, $5 + 8 | 0), $5 + 16 | 0);
  $0 = HEAPF64[$5 + 16 >> 3];
  $1 = HEAPF64[$5 + 8 >> 3];
  $2 = HEAPF64[$6 >> 3];
  HEAPF64[$5 + 24 >> 3] = $2;
  $2 = log($2 / $0);
  $0 = log($1 / $0);
  $5 = $5 + 32 | 0;
  if ($5 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $5;
  return +(($4 - $3) * ($2 / $0) + $3);
 }
 
 function void_20emscripten__internal__RegisterClassMethod_double_20_28__29_28double_2c_20double_2c_20double_29___invoke_maxiMap__28char_20const__2c_20double_20_28__29_28double_2c_20double_2c_20double_29_29() {
  var $0 = 0, $1 = 0;
  $0 = global$0 - 16 | 0;
  $1 = $0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  HEAP32[$0 + 12 >> 2] = 252;
  _embind_register_class_function(11428, 2451, 4, 9968, 9984, 594, emscripten__val_20_28__emscripten__internal__getContext_emscripten__val_20_28__29_28std____2__vector_int_2c_20std____2__allocator_int__20__20const__2c_20unsigned_20long_29__28emscripten__val_20_28__20const__29_28std____2__vector_int_2c_20std____2__allocator_int__20__20const__2c_20unsigned_20long_29_29_29_28std____2__vector_int_2c_20std____2__allocator_int__20__20const__2c_20unsigned_20long_29($0 + 12 | 0) | 0, 0);
  $0 = $0 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function emscripten__internal__Invoker_double_2c_20double_2c_20double_2c_20double_2c_20double_2c_20double___invoke_28double_20_28__29_28double_2c_20double_2c_20double_2c_20double_2c_20double_29_2c_20double_2c_20double_2c_20double_2c_20double_2c_20double_29($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = +$2;
  $3 = +$3;
  $4 = +$4;
  $5 = +$5;
  var $6 = 0, $7 = 0;
  $6 = global$0 - 16 | 0;
  $7 = $6;
  if ($6 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $7;
  HEAPF64[$6 + 8 >> 3] = FUNCTION_TABLE[$0]($1, $2, $3, $4, $5);
  $1 = HEAPF64[$6 + 8 >> 3];
  $0 = $6 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
  return +$1;
 }
 
 function void_20const__20emscripten__internal__getActualType_maxiDyn__28maxiDyn__29($0) {
  $0 = $0 | 0;
  return 11948;
 }
 
 function emscripten__smart_ptr_trait_std____2__shared_ptr_maxiDyn__20___share_28maxiDyn__2c_20emscripten__internal___EM_VAL__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0;
  $2 = global$0 - 16 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  $3 = operator_20new_28unsigned_20long_29(8);
  HEAP32[16874] = 0;
  emscripten__val__take_ownership_28emscripten__internal___EM_VAL__29($2, $1);
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      if (($1 | 0) != 1) {
       HEAP32[16874] = 0;
       $1 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(595, $2 + 8 | 0, $2 | 0) | 0;
       $4 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($4 | 0) == 1) {
        break label$5
       }
       HEAP32[16874] = 0;
       $0 = __invoke___22class_std____2__shared_ptr_22____22class_std____2__shared_ptr_22___class_maxiOsc____22class_emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc____val_deleter_22__i32(596, $3 | 0, $0 | 0, $1 | 0, 0) | 0;
       $4 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($4 | 0) == 1) {
        break label$4
       }
       emscripten__val___val_28_29($1);
       emscripten__val___val_28_29($2);
       $1 = $2 + 16 | 0;
       if ($1 >>> 0 < global$2 >>> 0) {
        __handle_stack_overflow()
       }
       global$0 = $1;
       return $0 | 0;
      }
      $0 = __cxa_find_matching_catch_2() | 0;
      getTempRet0() | 0;
      break label$2;
     }
     $0 = __cxa_find_matching_catch_2() | 0;
     getTempRet0() | 0;
     break label$3;
    }
    $0 = __cxa_find_matching_catch_2() | 0;
    getTempRet0() | 0;
    emscripten__val___val_28_29($1);
   }
   emscripten__val___val_28_29($2);
  }
  dlfree($3);
  __resumeException($0 | 0);
  abort();
 }
 
 function emscripten__internal__Invoker_std____2__shared_ptr_maxiDyn__20___invoke_28std____2__shared_ptr_maxiDyn__20_28__29_28_29_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  FUNCTION_TABLE[$0]($1 + 8 | 0);
  HEAP32[16874] = 0;
  $0 = __invoke_i1___22class_std____2__basic_ifstream_22_(597, $1 + 8 | 0) | 0;
  $2 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($2 | 0) != 1) {
   std____2__shared_ptr_maxiOsc____shared_ptr_28_29($1 + 8 | 0);
   $1 = $1 + 16 | 0;
   if ($1 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $1;
   return $0 | 0;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__shared_ptr_maxiOsc____shared_ptr_28_29($1 + 8 | 0);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2__enable_if___28is_array_maxiDyn___value_29_2c_20std____2__shared_ptr_maxiDyn__20___type_20std____2__make_shared_maxiDyn__28_29($0) {
  $0 = $0 | 0;
  std____2__shared_ptr_maxiDyn__20std____2__shared_ptr_maxiDyn___make_shared___28_29($0);
 }
 
 function void_20emscripten__internal__RegisterClassMethod_double_20_28maxiDyn____29_28double_2c_20double_2c_20long_2c_20double_2c_20double_29___invoke_maxiDyn__28char_20const__2c_20double_20_28maxiDyn____29_28double_2c_20double_2c_20long_2c_20double_2c_20double_29_29($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  $2 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 12 >> 2] = $2;
  _embind_register_class_function(11948, 2485, 7, 12416, 12444, 598, void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____emscripten__internal__getContext_void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28int_20const__29__28void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28int_20const__29_29_29_28int_20const__29($1 + 8 | 0) | 0, 0);
  $0 = $1 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function void_20emscripten__internal__RegisterClassMethod_double_20_28maxiDyn____29_28double_2c_20double_2c_20double_2c_20double_2c_20double_29___invoke_maxiDyn__28char_20const__2c_20double_20_28maxiDyn____29_28double_2c_20double_2c_20double_2c_20double_2c_20double_29_29($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  $2 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 12 >> 2] = $2;
  _embind_register_class_function(11948, 2490, 7, 12464, 12492, 599, void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____emscripten__internal__getContext_void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28int_20const__29__28void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28int_20const__29_29_29_28int_20const__29($1 + 8 | 0) | 0, 0);
  $0 = $1 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function void_20emscripten__internal__RegisterClassMethod_double_20_28maxiDyn____29_28double_29___invoke_maxiDyn__28char_20const__2c_20double_20_28maxiDyn____29_28double_29_29($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  $2 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 12 >> 2] = $2;
  _embind_register_class_function(11948, 2501, 3, 12504, 6892, 600, void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____emscripten__internal__getContext_void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28int_20const__29__28void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28int_20const__29_29_29_28int_20const__29($1 + 8 | 0) | 0, 0);
  $0 = $1 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function void_20emscripten__internal__RegisterClassMethod_void_20_28maxiDyn____29_28double_29___invoke_maxiDyn__28char_20const__2c_20void_20_28maxiDyn____29_28double_29_29($0, $1) {
  var $2 = 0, $3 = 0;
  $2 = global$0 - 16 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  $3 = HEAP32[$1 + 4 >> 2];
  HEAP32[$2 + 8 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$2 + 12 >> 2] = $3;
  _embind_register_class_function(11948, $0 | 0, 3, 12516, 5096, 601, void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____emscripten__internal__getContext_void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28int_20const__29__28void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28int_20const__29_29_29_28int_20const__29($2 + 8 | 0) | 0, 0);
  $0 = $2 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function void_20const__20emscripten__internal__getActualType_maxiEnv__28maxiEnv__29($0) {
  $0 = $0 | 0;
  return 12540;
 }
 
 function emscripten__smart_ptr_trait_std____2__shared_ptr_maxiEnv__20___share_28maxiEnv__2c_20emscripten__internal___EM_VAL__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0;
  $2 = global$0 - 16 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  $3 = operator_20new_28unsigned_20long_29(8);
  HEAP32[16874] = 0;
  emscripten__val__take_ownership_28emscripten__internal___EM_VAL__29($2, $1);
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      if (($1 | 0) != 1) {
       HEAP32[16874] = 0;
       $1 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(602, $2 + 8 | 0, $2 | 0) | 0;
       $4 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($4 | 0) == 1) {
        break label$5
       }
       HEAP32[16874] = 0;
       $0 = __invoke___22class_std____2__shared_ptr_22____22class_std____2__shared_ptr_22___class_maxiOsc____22class_emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc____val_deleter_22__i32(603, $3 | 0, $0 | 0, $1 | 0, 0) | 0;
       $4 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($4 | 0) == 1) {
        break label$4
       }
       emscripten__val___val_28_29($1);
       emscripten__val___val_28_29($2);
       $1 = $2 + 16 | 0;
       if ($1 >>> 0 < global$2 >>> 0) {
        __handle_stack_overflow()
       }
       global$0 = $1;
       return $0 | 0;
      }
      $0 = __cxa_find_matching_catch_2() | 0;
      getTempRet0() | 0;
      break label$2;
     }
     $0 = __cxa_find_matching_catch_2() | 0;
     getTempRet0() | 0;
     break label$3;
    }
    $0 = __cxa_find_matching_catch_2() | 0;
    getTempRet0() | 0;
    emscripten__val___val_28_29($1);
   }
   emscripten__val___val_28_29($2);
  }
  dlfree($3);
  __resumeException($0 | 0);
  abort();
 }
 
 function emscripten__internal__Invoker_std____2__shared_ptr_maxiEnv__20___invoke_28std____2__shared_ptr_maxiEnv__20_28__29_28_29_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  FUNCTION_TABLE[$0]($1 + 8 | 0);
  HEAP32[16874] = 0;
  $0 = __invoke_i1___22class_std____2__basic_ifstream_22_(604, $1 + 8 | 0) | 0;
  $2 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($2 | 0) != 1) {
   std____2__shared_ptr_maxiOsc____shared_ptr_28_29($1 + 8 | 0);
   $1 = $1 + 16 | 0;
   if ($1 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $1;
   return $0 | 0;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__shared_ptr_maxiOsc____shared_ptr_28_29($1 + 8 | 0);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2__enable_if___28is_array_maxiEnv___value_29_2c_20std____2__shared_ptr_maxiEnv__20___type_20std____2__make_shared_maxiEnv__28_29($0) {
  $0 = $0 | 0;
  std____2__shared_ptr_maxiEnv__20std____2__shared_ptr_maxiEnv___make_shared___28_29($0);
 }
 
 function void_20emscripten__internal__RegisterClassMethod_double_20_28maxiEnv____29_28double_2c_20double_2c_20double_2c_20long_2c_20int_29___invoke_maxiEnv__28char_20const__2c_20double_20_28maxiEnv____29_28double_2c_20double_2c_20double_2c_20long_2c_20int_29_29($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  $2 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 12 >> 2] = $2;
  _embind_register_class_function(12540, 2581, 7, 13008, 13036, 605, void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____emscripten__internal__getContext_void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28int_20const__29__28void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28int_20const__29_29_29_28int_20const__29($1 + 8 | 0) | 0, 0);
  $0 = $1 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function void_20emscripten__internal__RegisterClassMethod_double_20_28maxiEnv____29_28double_2c_20double_2c_20double_2c_20double_2c_20double_2c_20long_2c_20int_29___invoke_maxiEnv__28char_20const__2c_20double_20_28maxiEnv____29_28double_2c_20double_2c_20double_2c_20double_2c_20double_2c_20long_2c_20int_29_29($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  $2 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 12 >> 2] = $2;
  _embind_register_class_function(12540, 2584, 9, 13056, 13092, 606, void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____emscripten__internal__getContext_void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28int_20const__29__28void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28int_20const__29_29_29_28int_20const__29($1 + 8 | 0) | 0, 0);
  $0 = $1 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function void_20emscripten__internal__RegisterClassMethod_double_20_28maxiEnv____29_28double_2c_20int_29___invoke_maxiEnv__28char_20const__2c_20double_20_28maxiEnv____29_28double_2c_20int_29_29($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  $2 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 12 >> 2] = $2;
  _embind_register_class_function(12540, 2584, 4, 13104, 13120, 607, void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____emscripten__internal__getContext_void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28int_20const__29__28void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28int_20const__29_29_29_28int_20const__29($1 + 8 | 0) | 0, 0);
  $0 = $1 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function void_20emscripten__internal__RegisterClassMethod_void_20_28maxiEnv____29_28double_29___invoke_maxiEnv__28char_20const__2c_20void_20_28maxiEnv____29_28double_29_29($0, $1) {
  var $2 = 0, $3 = 0;
  $2 = global$0 - 16 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  $3 = HEAP32[$1 + 4 >> 2];
  HEAP32[$2 + 8 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$2 + 12 >> 2] = $3;
  _embind_register_class_function(12540, $0 | 0, 3, 13128, 5096, 608, void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____emscripten__internal__getContext_void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28int_20const__29__28void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28int_20const__29_29_29_28int_20const__29($2 + 8 | 0) | 0, 0);
  $0 = $2 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function maxiEnv__getTrigger_28_29_20const($0) {
  $0 = $0 | 0;
  return HEAP32[$0 + 56 >> 2];
 }
 
 function maxiEnv__setTrigger_28int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  HEAP32[$0 + 56 >> 2] = $1;
 }
 
 function void_20const__20emscripten__internal__getActualType_convert__28convert__29($0) {
  $0 = $0 | 0;
  return 13152;
 }
 
 function emscripten__smart_ptr_trait_std____2__shared_ptr_convert__20___share_28convert__2c_20emscripten__internal___EM_VAL__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0;
  $2 = global$0 - 16 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  $3 = operator_20new_28unsigned_20long_29(8);
  HEAP32[16874] = 0;
  emscripten__val__take_ownership_28emscripten__internal___EM_VAL__29($2, $1);
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      if (($1 | 0) != 1) {
       HEAP32[16874] = 0;
       $1 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(609, $2 + 8 | 0, $2 | 0) | 0;
       $4 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($4 | 0) == 1) {
        break label$5
       }
       HEAP32[16874] = 0;
       $0 = __invoke___22class_std____2__shared_ptr_22____22class_std____2__shared_ptr_22___class_maxiOsc____22class_emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc____val_deleter_22__i32(610, $3 | 0, $0 | 0, $1 | 0, 0) | 0;
       $4 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($4 | 0) == 1) {
        break label$4
       }
       emscripten__val___val_28_29($1);
       emscripten__val___val_28_29($2);
       $1 = $2 + 16 | 0;
       if ($1 >>> 0 < global$2 >>> 0) {
        __handle_stack_overflow()
       }
       global$0 = $1;
       return $0 | 0;
      }
      $0 = __cxa_find_matching_catch_2() | 0;
      getTempRet0() | 0;
      break label$2;
     }
     $0 = __cxa_find_matching_catch_2() | 0;
     getTempRet0() | 0;
     break label$3;
    }
    $0 = __cxa_find_matching_catch_2() | 0;
    getTempRet0() | 0;
    emscripten__val___val_28_29($1);
   }
   emscripten__val___val_28_29($2);
  }
  dlfree($3);
  __resumeException($0 | 0);
  abort();
 }
 
 function emscripten__internal__Invoker_std____2__shared_ptr_convert__20___invoke_28std____2__shared_ptr_convert__20_28__29_28_29_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  FUNCTION_TABLE[$0]($1 + 8 | 0);
  HEAP32[16874] = 0;
  $0 = __invoke_i1___22class_std____2__basic_ifstream_22_(611, $1 + 8 | 0) | 0;
  $2 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($2 | 0) != 1) {
   std____2__shared_ptr_maxiOsc____shared_ptr_28_29($1 + 8 | 0);
   $1 = $1 + 16 | 0;
   if ($1 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $1;
   return $0 | 0;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__shared_ptr_maxiOsc____shared_ptr_28_29($1 + 8 | 0);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2__enable_if___28is_array_convert___value_29_2c_20std____2__shared_ptr_convert__20___type_20std____2__make_shared_convert__28_29($0) {
  $0 = $0 | 0;
  std____2__shared_ptr_convert__20std____2__shared_ptr_convert___make_shared___28_29($0);
 }
 
 function void_20emscripten__internal__RegisterClassMethod_double_20_28__29_28int_29___invoke_convert__28char_20const__2c_20double_20_28__29_28int_29_29() {
  var $0 = 0, $1 = 0;
  $0 = global$0 - 16 | 0;
  $1 = $0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  HEAP32[$0 + 12 >> 2] = 296;
  _embind_register_class_function(13152, 2637, 2, 13616, 6976, 612, emscripten__val_20_28__emscripten__internal__getContext_emscripten__val_20_28__29_28std____2__vector_int_2c_20std____2__allocator_int__20__20const__2c_20unsigned_20long_29__28emscripten__val_20_28__20const__29_28std____2__vector_int_2c_20std____2__allocator_int__20__20const__2c_20unsigned_20long_29_29_29_28std____2__vector_int_2c_20std____2__allocator_int__20__20const__2c_20unsigned_20long_29($0 + 12 | 0) | 0, 0);
  $0 = $0 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function emscripten__internal__Invoker_double_2c_20int___invoke_28double_20_28__29_28int_29_2c_20int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0.0;
  $2 = global$0 - 16 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  HEAPF64[$2 + 8 >> 3] = FUNCTION_TABLE[$0]($1);
  $4 = HEAPF64[$2 + 8 >> 3];
  $0 = $2 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
  return +$4;
 }
 
 function convert__msToSamps_28double_29($0) {
  $0 = +$0;
  return +($0 / 1.0e3 * +HEAP32[12865]);
 }
 
 function void_20emscripten__internal__RegisterClassMethod_double_20_28__29_28double_29___invoke_convert__28char_20const__2c_20double_20_28__29_28double_29_29() {
  var $0 = 0, $1 = 0;
  $0 = global$0 - 16 | 0;
  $1 = $0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  HEAP32[$0 + 12 >> 2] = 298;
  _embind_register_class_function(13152, 2642, 2, 13624, 13632, 613, emscripten__val_20_28__emscripten__internal__getContext_emscripten__val_20_28__29_28std____2__vector_int_2c_20std____2__allocator_int__20__20const__2c_20unsigned_20long_29__28emscripten__val_20_28__20const__29_28std____2__vector_int_2c_20std____2__allocator_int__20__20const__2c_20unsigned_20long_29_29_29_28std____2__vector_int_2c_20std____2__allocator_int__20__20const__2c_20unsigned_20long_29($0 + 12 | 0) | 0, 0);
  $0 = $0 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function emscripten__internal__Invoker_double_2c_20double___invoke_28double_20_28__29_28double_29_2c_20double_29($0, $1) {
  $0 = $0 | 0;
  $1 = +$1;
  var $2 = 0, $3 = 0;
  $2 = global$0 - 16 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  HEAPF64[$2 + 8 >> 3] = FUNCTION_TABLE[$0]($1);
  $1 = HEAPF64[$2 + 8 >> 3];
  $0 = $2 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
  return +$1;
 }
 
 function void_20const__20emscripten__internal__getActualType_maxiSampleAndHold__28maxiSampleAndHold__29($0) {
  $0 = $0 | 0;
  return 13656;
 }
 
 function emscripten__smart_ptr_trait_std____2__shared_ptr_maxiSampleAndHold__20___share_28maxiSampleAndHold__2c_20emscripten__internal___EM_VAL__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0;
  $2 = global$0 - 16 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  $3 = operator_20new_28unsigned_20long_29(8);
  HEAP32[16874] = 0;
  emscripten__val__take_ownership_28emscripten__internal___EM_VAL__29($2, $1);
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      if (($1 | 0) != 1) {
       HEAP32[16874] = 0;
       $1 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(614, $2 + 8 | 0, $2 | 0) | 0;
       $4 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($4 | 0) == 1) {
        break label$5
       }
       HEAP32[16874] = 0;
       $0 = __invoke___22class_std____2__shared_ptr_22____22class_std____2__shared_ptr_22___class_maxiOsc____22class_emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc____val_deleter_22__i32(615, $3 | 0, $0 | 0, $1 | 0, 0) | 0;
       $4 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($4 | 0) == 1) {
        break label$4
       }
       emscripten__val___val_28_29($1);
       emscripten__val___val_28_29($2);
       $1 = $2 + 16 | 0;
       if ($1 >>> 0 < global$2 >>> 0) {
        __handle_stack_overflow()
       }
       global$0 = $1;
       return $0 | 0;
      }
      $0 = __cxa_find_matching_catch_2() | 0;
      getTempRet0() | 0;
      break label$2;
     }
     $0 = __cxa_find_matching_catch_2() | 0;
     getTempRet0() | 0;
     break label$3;
    }
    $0 = __cxa_find_matching_catch_2() | 0;
    getTempRet0() | 0;
    emscripten__val___val_28_29($1);
   }
   emscripten__val___val_28_29($2);
  }
  dlfree($3);
  __resumeException($0 | 0);
  abort();
 }
 
 function emscripten__internal__Invoker_std____2__shared_ptr_maxiSampleAndHold__20___invoke_28std____2__shared_ptr_maxiSampleAndHold__20_28__29_28_29_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  FUNCTION_TABLE[$0]($1 + 8 | 0);
  HEAP32[16874] = 0;
  $0 = __invoke_i1___22class_std____2__basic_ifstream_22_(616, $1 + 8 | 0) | 0;
  $2 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($2 | 0) != 1) {
   std____2__shared_ptr_maxiOsc____shared_ptr_28_29($1 + 8 | 0);
   $1 = $1 + 16 | 0;
   if ($1 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $1;
   return $0 | 0;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__shared_ptr_maxiOsc____shared_ptr_28_29($1 + 8 | 0);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2__enable_if___28is_array_maxiSampleAndHold___value_29_2c_20std____2__shared_ptr_maxiSampleAndHold__20___type_20std____2__make_shared_maxiSampleAndHold__28_29($0) {
  $0 = $0 | 0;
  std____2__shared_ptr_maxiSampleAndHold__20std____2__shared_ptr_maxiSampleAndHold___make_shared___28_29($0);
 }
 
 function maxiSampleAndHold__sah_28double_2c_20double_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = +$2;
  var $3 = 0.0;
  $2 = convert__msToSamps_28double_29($2);
  $3 = HEAPF64[$0 >> 3];
  if (!!($3 >= $2)) {
   HEAPF64[$0 >> 3] = $3 - $2
  }
  $2 = HEAPF64[$0 >> 3];
  if (!!($2 < 1.0)) {
   HEAPF64[$0 + 8 >> 3] = $1
  }
  HEAPF64[$0 >> 3] = $2 + 1.0;
  return +HEAPF64[$0 + 8 >> 3];
 }
 
 function void_20emscripten__internal__RegisterClassMethod_double_20_28maxiSampleAndHold____29_28double_2c_20double_29___invoke_maxiSampleAndHold__28char_20const__2c_20double_20_28maxiSampleAndHold____29_28double_2c_20double_29_29($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  $2 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 12 >> 2] = $2;
  _embind_register_class_function(13656, 2700, 4, 14192, 6960, 617, void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____emscripten__internal__getContext_void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28int_20const__29__28void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28int_20const__29_29_29_28int_20const__29($1 + 8 | 0) | 0, 0);
  $0 = $1 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function void_20const__20emscripten__internal__getActualType_maxiNonlinearity__28maxiNonlinearity__29($0) {
  $0 = $0 | 0;
  return 14228;
 }
 
 function emscripten__smart_ptr_trait_std____2__shared_ptr_maxiNonlinearity__20___share_28maxiNonlinearity__2c_20emscripten__internal___EM_VAL__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0;
  $2 = global$0 - 16 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  $3 = operator_20new_28unsigned_20long_29(8);
  HEAP32[16874] = 0;
  emscripten__val__take_ownership_28emscripten__internal___EM_VAL__29($2, $1);
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      if (($1 | 0) != 1) {
       HEAP32[16874] = 0;
       $1 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(618, $2 + 8 | 0, $2 | 0) | 0;
       $4 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($4 | 0) == 1) {
        break label$5
       }
       HEAP32[16874] = 0;
       $0 = __invoke___22class_std____2__shared_ptr_22____22class_std____2__shared_ptr_22___class_maxiOsc____22class_emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc____val_deleter_22__i32(619, $3 | 0, $0 | 0, $1 | 0, 0) | 0;
       $4 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($4 | 0) == 1) {
        break label$4
       }
       emscripten__val___val_28_29($1);
       emscripten__val___val_28_29($2);
       $1 = $2 + 16 | 0;
       if ($1 >>> 0 < global$2 >>> 0) {
        __handle_stack_overflow()
       }
       global$0 = $1;
       return $0 | 0;
      }
      $0 = __cxa_find_matching_catch_2() | 0;
      getTempRet0() | 0;
      break label$2;
     }
     $0 = __cxa_find_matching_catch_2() | 0;
     getTempRet0() | 0;
     break label$3;
    }
    $0 = __cxa_find_matching_catch_2() | 0;
    getTempRet0() | 0;
    emscripten__val___val_28_29($1);
   }
   emscripten__val___val_28_29($2);
  }
  dlfree($3);
  __resumeException($0 | 0);
  abort();
 }
 
 function emscripten__internal__Invoker_std____2__shared_ptr_maxiNonlinearity__20___invoke_28std____2__shared_ptr_maxiNonlinearity__20_28__29_28_29_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  FUNCTION_TABLE[$0]($1 + 8 | 0);
  HEAP32[16874] = 0;
  $0 = __invoke_i1___22class_std____2__basic_ifstream_22_(620, $1 + 8 | 0) | 0;
  $2 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($2 | 0) != 1) {
   std____2__shared_ptr_maxiOsc____shared_ptr_28_29($1 + 8 | 0);
   $1 = $1 + 16 | 0;
   if ($1 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $1;
   return $0 | 0;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__shared_ptr_maxiOsc____shared_ptr_28_29($1 + 8 | 0);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2__enable_if___28is_array_maxiNonlinearity___value_29_2c_20std____2__shared_ptr_maxiNonlinearity__20___type_20std____2__make_shared_maxiNonlinearity__28_29($0) {
  $0 = $0 | 0;
  std____2__shared_ptr_maxiNonlinearity__20std____2__shared_ptr_maxiNonlinearity___make_shared___28_29($0);
 }
 
 function maxiNonlinearity__fastatan_28double_29($0, $1) {
  $0 = $0 | 0;
  $1 = +$1;
  return +($1 / ($1 * $1 * .28 + 1.0));
 }
 
 function void_20emscripten__internal__RegisterClassMethod_double_20_28maxiNonlinearity____29_28double_29___invoke_maxiNonlinearity__28char_20const__2c_20double_20_28maxiNonlinearity____29_28double_29_29($0, $1) {
  var $2 = 0, $3 = 0;
  $2 = global$0 - 16 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  $3 = HEAP32[$1 + 4 >> 2];
  HEAP32[$2 + 8 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$2 + 12 >> 2] = $3;
  _embind_register_class_function(14228, $0 | 0, 3, 14756, 6892, 621, void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____emscripten__internal__getContext_void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28int_20const__29__28void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28int_20const__29_29_29_28int_20const__29($2 + 8 | 0) | 0, 0);
  $0 = $2 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function maxiNonlinearity__atanDist_28double_2c_20double_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = +$2;
  return +(1.0 / atan($2) * atan($1 * $2));
 }
 
 function void_20emscripten__internal__RegisterClassMethod_double_20_28maxiNonlinearity____29_28double_2c_20double_29___invoke_maxiNonlinearity__28char_20const__2c_20double_20_28maxiNonlinearity____29_28double_2c_20double_29_29($0, $1) {
  var $2 = 0, $3 = 0;
  $2 = global$0 - 16 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  $3 = HEAP32[$1 + 4 >> 2];
  HEAP32[$2 + 8 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$2 + 12 >> 2] = $3;
  _embind_register_class_function(14228, $0 | 0, 4, 14768, 6960, 622, void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____emscripten__internal__getContext_void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28int_20const__29__28void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28int_20const__29_29_29_28int_20const__29($2 + 8 | 0) | 0, 0);
  $0 = $2 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function maxiNonlinearity__fastAtanDist_28double_2c_20double_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = +$2;
  return +(1.0 / maxiNonlinearity__fastatan_28double_29($0, $2) * maxiNonlinearity__fastatan_28double_29($0, $1 * $2));
 }
 
 function maxiNonlinearity__softclip_28double_29($0, $1) {
  $0 = $0 | 0;
  $1 = +$1;
  var $2 = 0.0;
  $2 = 1.0;
  label$1 : {
   if ($1 >= 1.0) {
    break label$1
   }
   $2 = -1.0;
   if ($1 <= -1.0) {
    break label$1
   }
   $2 = ($1 + std____2___MetaBase__28std__is_arithmetic_double___value_29_20___20_28std__is_arithmetic_int___value_29____EnableIfImpl_std____2____promote_double_2c_20int_2c_20void__20___type_20pow_double_2c_20int__28double_2c_20int_29($1, 3) / -3.0) * .6666666666666666;
  }
  return +$2;
 }
 
 function maxiNonlinearity__hardclip_28double_29($0, $1) {
  $0 = $0 | 0;
  $1 = +$1;
  return +($1 >= 1.0 ? 1.0 : Math_max($1, -1.0));
 }
 
 function maxiNonlinearity__asymclip_28double_2c_20double_2c_20double_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = +$2;
  $3 = +$3;
  var $4 = 0.0;
  $4 = 1.0;
  label$1 : {
   if ($1 >= 1.0) {
    break label$1
   }
   $4 = -1.0;
   if ($1 <= -1.0) {
    break label$1
   }
   if (!!($1 < 0.0)) {
    return +-pow(-$1, $2)
   }
   $4 = pow($1, $3);
  }
  return +$4;
 }
 
 function void_20emscripten__internal__RegisterClassMethod_double_20_28maxiNonlinearity____29_28double_2c_20double_2c_20double_29___invoke_maxiNonlinearity__28char_20const__2c_20double_20_28maxiNonlinearity____29_28double_2c_20double_2c_20double_29_29($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  $2 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 12 >> 2] = $2;
  _embind_register_class_function(14228, 2799, 5, 14784, 6932, 623, void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____emscripten__internal__getContext_void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28int_20const__29__28void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28int_20const__29_29_29_28int_20const__29($1 + 8 | 0) | 0, 0);
  $0 = $1 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function void_20const__20emscripten__internal__getActualType_maxiFlanger__28maxiFlanger__29($0) {
  $0 = $0 | 0;
  return 14820;
 }
 
 function emscripten__smart_ptr_trait_std____2__shared_ptr_maxiFlanger__20___share_28maxiFlanger__2c_20emscripten__internal___EM_VAL__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0;
  $2 = global$0 - 16 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  $3 = operator_20new_28unsigned_20long_29(8);
  HEAP32[16874] = 0;
  emscripten__val__take_ownership_28emscripten__internal___EM_VAL__29($2, $1);
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      if (($1 | 0) != 1) {
       HEAP32[16874] = 0;
       $1 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(624, $2 + 8 | 0, $2 | 0) | 0;
       $4 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($4 | 0) == 1) {
        break label$5
       }
       HEAP32[16874] = 0;
       $0 = __invoke___22class_std____2__shared_ptr_22____22class_std____2__shared_ptr_22___class_maxiOsc____22class_emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc____val_deleter_22__i32(625, $3 | 0, $0 | 0, $1 | 0, 0) | 0;
       $4 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($4 | 0) == 1) {
        break label$4
       }
       emscripten__val___val_28_29($1);
       emscripten__val___val_28_29($2);
       $1 = $2 + 16 | 0;
       if ($1 >>> 0 < global$2 >>> 0) {
        __handle_stack_overflow()
       }
       global$0 = $1;
       return $0 | 0;
      }
      $0 = __cxa_find_matching_catch_2() | 0;
      getTempRet0() | 0;
      break label$2;
     }
     $0 = __cxa_find_matching_catch_2() | 0;
     getTempRet0() | 0;
     break label$3;
    }
    $0 = __cxa_find_matching_catch_2() | 0;
    getTempRet0() | 0;
    emscripten__val___val_28_29($1);
   }
   emscripten__val___val_28_29($2);
  }
  dlfree($3);
  __resumeException($0 | 0);
  abort();
 }
 
 function emscripten__internal__Invoker_std____2__shared_ptr_maxiFlanger__20___invoke_28std____2__shared_ptr_maxiFlanger__20_28__29_28_29_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  FUNCTION_TABLE[$0]($1 + 8 | 0);
  HEAP32[16874] = 0;
  $0 = __invoke_i1___22class_std____2__basic_ifstream_22_(626, $1 + 8 | 0) | 0;
  $2 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($2 | 0) != 1) {
   std____2__shared_ptr_maxiOsc____shared_ptr_28_29($1 + 8 | 0);
   $1 = $1 + 16 | 0;
   if ($1 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $1;
   return $0 | 0;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__shared_ptr_maxiOsc____shared_ptr_28_29($1 + 8 | 0);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2__enable_if___28is_array_maxiFlanger___value_29_2c_20std____2__shared_ptr_maxiFlanger__20___type_20std____2__make_shared_maxiFlanger__28_29($0) {
  $0 = $0 | 0;
  std____2__shared_ptr_maxiFlanger__20std____2__shared_ptr_maxiFlanger___make_shared___28_29($0);
 }
 
 function maxiFlanger__flange_28double_2c_20unsigned_20int_2c_20double_2c_20double_2c_20double_29($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = $2 | 0;
  $3 = +$3;
  $4 = +$4;
  $5 = +$5;
  var $6 = 0, $7 = 0.0, $8 = 0.0;
  $6 = $0;
  $7 = $1;
  $8 = maxiOsc__triangle_28double_29($0 + 705640 | 0, $4);
  $4 = +($2 >>> 0);
  $4 = $8 * $5 * $4 + $4 + 1.0;
  label$1 : {
   if (Math_abs($4) < 2147483648.0) {
    $0 = ~~$4;
    break label$1;
   }
   $0 = -2147483648;
  }
  $3 = maxiDelayline__dl_28double_2c_20int_2c_20double_29($6, $7, $0, $3);
  return +(($3 * (1.0 - Math_abs($3)) + $1) * .5);
 }
 
 function void_20emscripten__internal__RegisterClassMethod_double_20_28maxiFlanger____29_28double_2c_20unsigned_20int_2c_20double_2c_20double_2c_20double_29___invoke_maxiFlanger__28char_20const__2c_20double_20_28maxiFlanger____29_28double_2c_20unsigned_20int_2c_20double_2c_20double_2c_20double_29_29($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  $2 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 12 >> 2] = $2;
  _embind_register_class_function(14820, 2844, 7, 15328, 15356, 627, void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____emscripten__internal__getContext_void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28int_20const__29__28void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28int_20const__29_29_29_28int_20const__29($1 + 8 | 0) | 0, 0);
  $0 = $1 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function void_20const__20emscripten__internal__getActualType_maxiChorus__28maxiChorus__29($0) {
  $0 = $0 | 0;
  return 15380;
 }
 
 function emscripten__smart_ptr_trait_std____2__shared_ptr_maxiChorus__20___share_28maxiChorus__2c_20emscripten__internal___EM_VAL__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0;
  $2 = global$0 - 16 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  $3 = operator_20new_28unsigned_20long_29(8);
  HEAP32[16874] = 0;
  emscripten__val__take_ownership_28emscripten__internal___EM_VAL__29($2, $1);
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      if (($1 | 0) != 1) {
       HEAP32[16874] = 0;
       $1 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(628, $2 + 8 | 0, $2 | 0) | 0;
       $4 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($4 | 0) == 1) {
        break label$5
       }
       HEAP32[16874] = 0;
       $0 = __invoke___22class_std____2__shared_ptr_22____22class_std____2__shared_ptr_22___class_maxiOsc____22class_emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc____val_deleter_22__i32(629, $3 | 0, $0 | 0, $1 | 0, 0) | 0;
       $4 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($4 | 0) == 1) {
        break label$4
       }
       emscripten__val___val_28_29($1);
       emscripten__val___val_28_29($2);
       $1 = $2 + 16 | 0;
       if ($1 >>> 0 < global$2 >>> 0) {
        __handle_stack_overflow()
       }
       global$0 = $1;
       return $0 | 0;
      }
      $0 = __cxa_find_matching_catch_2() | 0;
      getTempRet0() | 0;
      break label$2;
     }
     $0 = __cxa_find_matching_catch_2() | 0;
     getTempRet0() | 0;
     break label$3;
    }
    $0 = __cxa_find_matching_catch_2() | 0;
    getTempRet0() | 0;
    emscripten__val___val_28_29($1);
   }
   emscripten__val___val_28_29($2);
  }
  dlfree($3);
  __resumeException($0 | 0);
  abort();
 }
 
 function emscripten__internal__Invoker_std____2__shared_ptr_maxiChorus__20___invoke_28std____2__shared_ptr_maxiChorus__20_28__29_28_29_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  FUNCTION_TABLE[$0]($1 + 8 | 0);
  HEAP32[16874] = 0;
  $0 = __invoke_i1___22class_std____2__basic_ifstream_22_(630, $1 + 8 | 0) | 0;
  $2 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($2 | 0) != 1) {
   std____2__shared_ptr_maxiOsc____shared_ptr_28_29($1 + 8 | 0);
   $1 = $1 + 16 | 0;
   if ($1 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $1;
   return $0 | 0;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__shared_ptr_maxiOsc____shared_ptr_28_29($1 + 8 | 0);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2__enable_if___28is_array_maxiChorus___value_29_2c_20std____2__shared_ptr_maxiChorus__20___type_20std____2__make_shared_maxiChorus__28_29($0) {
  $0 = $0 | 0;
  std____2__shared_ptr_maxiChorus__20std____2__shared_ptr_maxiChorus___make_shared___28_29($0);
 }
 
 function maxiChorus__chorus_28double_2c_20unsigned_20int_2c_20double_2c_20double_2c_20double_29($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = $2 | 0;
  $3 = +$3;
  $4 = +$4;
  $5 = +$5;
  var $6 = 0.0, $7 = 0.0, $8 = 0;
  $8 = $0;
  $6 = $1;
  $4 = maxiFilter__lores_28double_2c_20double_2c_20double_29($0 + 1411328 | 0, maxiOsc__noise_28_29($0 + 1411280 | 0), $4, 1.0);
  $4 = ($4 + $4) * $5;
  $5 = +($2 >>> 0);
  $7 = $4 * $5;
  $4 = $7 + $5 + 1.0;
  label$1 : {
   if (Math_abs($4) < 2147483648.0) {
    $2 = ~~$4;
    break label$1;
   }
   $2 = -2147483648;
  }
  $4 = maxiDelayline__dl_28double_2c_20int_2c_20double_29($8, $6, $2, $3);
  $6 = $4 * (1.0 - Math_abs($4));
  $0 = $0 + 705640 | 0;
  $4 = $1;
  $5 = ($7 * 1.02 + $5 + 1.0) * .98;
  label$3 : {
   if (Math_abs($5) < 2147483648.0) {
    $2 = ~~$5;
    break label$3;
   }
   $2 = -2147483648;
  }
  $3 = maxiDelayline__dl_28double_2c_20int_2c_20double_29($0, $4, $2, $3 * .99);
  return +(($6 + $3 * (1.0 - Math_abs($3)) + $1) / 3.0);
 }
 
 function void_20emscripten__internal__RegisterClassMethod_double_20_28maxiChorus____29_28double_2c_20unsigned_20int_2c_20double_2c_20double_2c_20double_29___invoke_maxiChorus__28char_20const__2c_20double_20_28maxiChorus____29_28double_2c_20unsigned_20int_2c_20double_2c_20double_2c_20double_29_29($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  $2 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 12 >> 2] = $2;
  _embind_register_class_function(15380, 2885, 7, 15872, 15356, 631, void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____emscripten__internal__getContext_void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28int_20const__29__28void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28int_20const__29_29_29_28int_20const__29($1 + 8 | 0) | 0, 0);
  $0 = $1 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function void_20const__20emscripten__internal__getActualType_maxiDCBlocker__28maxiDCBlocker__29($0) {
  $0 = $0 | 0;
  return 15916;
 }
 
 function emscripten__smart_ptr_trait_std____2__shared_ptr_maxiDCBlocker__20___share_28maxiDCBlocker__2c_20emscripten__internal___EM_VAL__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0;
  $2 = global$0 - 16 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  $3 = operator_20new_28unsigned_20long_29(8);
  HEAP32[16874] = 0;
  emscripten__val__take_ownership_28emscripten__internal___EM_VAL__29($2, $1);
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      if (($1 | 0) != 1) {
       HEAP32[16874] = 0;
       $1 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(632, $2 + 8 | 0, $2 | 0) | 0;
       $4 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($4 | 0) == 1) {
        break label$5
       }
       HEAP32[16874] = 0;
       $0 = __invoke___22class_std____2__shared_ptr_22____22class_std____2__shared_ptr_22___class_maxiOsc____22class_emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc____val_deleter_22__i32(633, $3 | 0, $0 | 0, $1 | 0, 0) | 0;
       $4 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($4 | 0) == 1) {
        break label$4
       }
       emscripten__val___val_28_29($1);
       emscripten__val___val_28_29($2);
       $1 = $2 + 16 | 0;
       if ($1 >>> 0 < global$2 >>> 0) {
        __handle_stack_overflow()
       }
       global$0 = $1;
       return $0 | 0;
      }
      $0 = __cxa_find_matching_catch_2() | 0;
      getTempRet0() | 0;
      break label$2;
     }
     $0 = __cxa_find_matching_catch_2() | 0;
     getTempRet0() | 0;
     break label$3;
    }
    $0 = __cxa_find_matching_catch_2() | 0;
    getTempRet0() | 0;
    emscripten__val___val_28_29($1);
   }
   emscripten__val___val_28_29($2);
  }
  dlfree($3);
  __resumeException($0 | 0);
  abort();
 }
 
 function emscripten__internal__Invoker_std____2__shared_ptr_maxiDCBlocker__20___invoke_28std____2__shared_ptr_maxiDCBlocker__20_28__29_28_29_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  FUNCTION_TABLE[$0]($1 + 8 | 0);
  HEAP32[16874] = 0;
  $0 = __invoke_i1___22class_std____2__basic_ifstream_22_(634, $1 + 8 | 0) | 0;
  $2 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($2 | 0) != 1) {
   std____2__shared_ptr_maxiOsc____shared_ptr_28_29($1 + 8 | 0);
   $1 = $1 + 16 | 0;
   if ($1 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $1;
   return $0 | 0;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__shared_ptr_maxiOsc____shared_ptr_28_29($1 + 8 | 0);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2__enable_if___28is_array_maxiDCBlocker___value_29_2c_20std____2__shared_ptr_maxiDCBlocker__20___type_20std____2__make_shared_maxiDCBlocker__28_29($0) {
  $0 = $0 | 0;
  std____2__shared_ptr_maxiDCBlocker__20std____2__shared_ptr_maxiDCBlocker___make_shared___28_29($0);
 }
 
 function maxiDCBlocker__play_28double_2c_20double_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = +$2;
  var $3 = 0.0;
  $3 = HEAPF64[$0 >> 3];
  HEAPF64[$0 >> 3] = $1;
  $1 = $1 - $3 + HEAPF64[$0 + 8 >> 3] * $2;
  HEAPF64[$0 + 8 >> 3] = $1;
  return +$1;
 }
 
 function void_20emscripten__internal__RegisterClassMethod_double_20_28maxiDCBlocker____29_28double_2c_20double_29___invoke_maxiDCBlocker__28char_20const__2c_20double_20_28maxiDCBlocker____29_28double_2c_20double_29_29($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  $2 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 12 >> 2] = $2;
  _embind_register_class_function(15916, 2076, 4, 16432, 6960, 635, void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____emscripten__internal__getContext_void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28int_20const__29__28void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28int_20const__29_29_29_28int_20const__29($1 + 8 | 0) | 0, 0);
  $0 = $1 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function void_20const__20emscripten__internal__getActualType_maxiSVF__28maxiSVF__29($0) {
  $0 = $0 | 0;
  return 16460;
 }
 
 function emscripten__smart_ptr_trait_std____2__shared_ptr_maxiSVF__20___share_28maxiSVF__2c_20emscripten__internal___EM_VAL__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0;
  $2 = global$0 - 16 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  $3 = operator_20new_28unsigned_20long_29(8);
  HEAP32[16874] = 0;
  emscripten__val__take_ownership_28emscripten__internal___EM_VAL__29($2, $1);
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      if (($1 | 0) != 1) {
       HEAP32[16874] = 0;
       $1 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(636, $2 + 8 | 0, $2 | 0) | 0;
       $4 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($4 | 0) == 1) {
        break label$5
       }
       HEAP32[16874] = 0;
       $0 = __invoke___22class_std____2__shared_ptr_22____22class_std____2__shared_ptr_22___class_maxiOsc____22class_emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc____val_deleter_22__i32(637, $3 | 0, $0 | 0, $1 | 0, 0) | 0;
       $4 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($4 | 0) == 1) {
        break label$4
       }
       emscripten__val___val_28_29($1);
       emscripten__val___val_28_29($2);
       $1 = $2 + 16 | 0;
       if ($1 >>> 0 < global$2 >>> 0) {
        __handle_stack_overflow()
       }
       global$0 = $1;
       return $0 | 0;
      }
      $0 = __cxa_find_matching_catch_2() | 0;
      getTempRet0() | 0;
      break label$2;
     }
     $0 = __cxa_find_matching_catch_2() | 0;
     getTempRet0() | 0;
     break label$3;
    }
    $0 = __cxa_find_matching_catch_2() | 0;
    getTempRet0() | 0;
    emscripten__val___val_28_29($1);
   }
   emscripten__val___val_28_29($2);
  }
  dlfree($3);
  __resumeException($0 | 0);
  abort();
 }
 
 function emscripten__internal__Invoker_std____2__shared_ptr_maxiSVF__20___invoke_28std____2__shared_ptr_maxiSVF__20_28__29_28_29_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  FUNCTION_TABLE[$0]($1 + 8 | 0);
  HEAP32[16874] = 0;
  $0 = __invoke_i1___22class_std____2__basic_ifstream_22_(638, $1 + 8 | 0) | 0;
  $2 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($2 | 0) != 1) {
   std____2__shared_ptr_maxiOsc____shared_ptr_28_29($1 + 8 | 0);
   $1 = $1 + 16 | 0;
   if ($1 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $1;
   return $0 | 0;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__shared_ptr_maxiOsc____shared_ptr_28_29($1 + 8 | 0);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2__enable_if___28is_array_maxiSVF___value_29_2c_20std____2__shared_ptr_maxiSVF__20___type_20std____2__make_shared_maxiSVF__28_29($0) {
  $0 = $0 | 0;
  std____2__shared_ptr_maxiSVF__20std____2__shared_ptr_maxiSVF___make_shared___28_29($0);
 }
 
 function maxiSVF__setCutoff_28double_29($0, $1) {
  $0 = $0 | 0;
  $1 = +$1;
  maxiSVF__setParams_28double_2c_20double_29($0, $1, HEAPF64[$0 + 96 >> 3]);
 }
 
 function void_20emscripten__internal__RegisterClassMethod_void_20_28maxiSVF____29_28double_29___invoke_maxiSVF__28char_20const__2c_20void_20_28maxiSVF____29_28double_29_29($0, $1) {
  var $2 = 0, $3 = 0;
  $2 = global$0 - 16 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  $3 = HEAP32[$1 + 4 >> 2];
  HEAP32[$2 + 8 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$2 + 12 >> 2] = $3;
  _embind_register_class_function(16460, $0 | 0, 3, 16924, 5096, 639, void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____emscripten__internal__getContext_void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28int_20const__29__28void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28int_20const__29_29_29_28int_20const__29($2 + 8 | 0) | 0, 0);
  $0 = $2 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function maxiSVF__setResonance_28double_29($0, $1) {
  $0 = $0 | 0;
  $1 = +$1;
  maxiSVF__setParams_28double_2c_20double_29($0, HEAPF64[$0 + 88 >> 3], $1);
 }
 
 function maxiSVF__play_28double_2c_20double_2c_20double_2c_20double_2c_20double_29($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = +$2;
  $3 = +$3;
  $4 = +$4;
  $5 = +$5;
  var $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0;
  $7 = HEAPF64[$0 >> 3];
  HEAPF64[$0 >> 3] = $1;
  $6 = HEAPF64[$0 + 8 >> 3];
  $8 = $7 + $1;
  $7 = HEAPF64[$0 + 16 >> 3];
  $9 = $8 - ($7 + $7);
  $8 = $6 + (HEAPF64[$0 + 56 >> 3] * $9 - $6 * HEAPF64[$0 + 64 >> 3]);
  HEAPF64[$0 + 8 >> 3] = $8;
  $6 = $7 + ($9 * HEAPF64[$0 + 72 >> 3] + $6 * HEAPF64[$0 + 80 >> 3]);
  HEAPF64[$0 + 16 >> 3] = $6;
  $1 = $1 - $8 * HEAPF64[$0 + 40 >> 3];
  return +($1 * $5 + ($8 * $3 + $6 * $2 + ($1 - $6) * $4));
 }
 
 function void_20emscripten__internal__RegisterClassMethod_double_20_28maxiSVF____29_28double_2c_20double_2c_20double_2c_20double_2c_20double_29___invoke_maxiSVF__28char_20const__2c_20double_20_28maxiSVF____29_28double_2c_20double_2c_20double_2c_20double_2c_20double_29_29($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  $2 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 12 >> 2] = $2;
  _embind_register_class_function(16460, 2076, 7, 16944, 12492, 640, void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____emscripten__internal__getContext_void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28int_20const__29__28void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28int_20const__29_29_29_28int_20const__29($1 + 8 | 0) | 0, 0);
  $0 = $1 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function void_20const__20emscripten__internal__getActualType_maxiMath__28maxiMath__29($0) {
  $0 = $0 | 0;
  return 16984;
 }
 
 function emscripten__smart_ptr_trait_std____2__shared_ptr_maxiMath__20___share_28maxiMath__2c_20emscripten__internal___EM_VAL__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0;
  $2 = global$0 - 16 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  $3 = operator_20new_28unsigned_20long_29(8);
  HEAP32[16874] = 0;
  emscripten__val__take_ownership_28emscripten__internal___EM_VAL__29($2, $1);
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      if (($1 | 0) != 1) {
       HEAP32[16874] = 0;
       $1 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(641, $2 + 8 | 0, $2 | 0) | 0;
       $4 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($4 | 0) == 1) {
        break label$5
       }
       HEAP32[16874] = 0;
       $0 = __invoke___22class_std____2__shared_ptr_22____22class_std____2__shared_ptr_22___class_maxiOsc____22class_emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc____val_deleter_22__i32(642, $3 | 0, $0 | 0, $1 | 0, 0) | 0;
       $4 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($4 | 0) == 1) {
        break label$4
       }
       emscripten__val___val_28_29($1);
       emscripten__val___val_28_29($2);
       $1 = $2 + 16 | 0;
       if ($1 >>> 0 < global$2 >>> 0) {
        __handle_stack_overflow()
       }
       global$0 = $1;
       return $0 | 0;
      }
      $0 = __cxa_find_matching_catch_2() | 0;
      getTempRet0() | 0;
      break label$2;
     }
     $0 = __cxa_find_matching_catch_2() | 0;
     getTempRet0() | 0;
     break label$3;
    }
    $0 = __cxa_find_matching_catch_2() | 0;
    getTempRet0() | 0;
    emscripten__val___val_28_29($1);
   }
   emscripten__val___val_28_29($2);
  }
  dlfree($3);
  __resumeException($0 | 0);
  abort();
 }
 
 function emscripten__internal__Invoker_std____2__shared_ptr_maxiMath__20___invoke_28std____2__shared_ptr_maxiMath__20_28__29_28_29_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  FUNCTION_TABLE[$0]($1 + 8 | 0);
  HEAP32[16874] = 0;
  $0 = __invoke_i1___22class_std____2__basic_ifstream_22_(643, $1 + 8 | 0) | 0;
  $2 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($2 | 0) != 1) {
   std____2__shared_ptr_maxiOsc____shared_ptr_28_29($1 + 8 | 0);
   $1 = $1 + 16 | 0;
   if ($1 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $1;
   return $0 | 0;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__shared_ptr_maxiOsc____shared_ptr_28_29($1 + 8 | 0);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2__enable_if___28is_array_maxiMath___value_29_2c_20std____2__shared_ptr_maxiMath__20___type_20std____2__make_shared_maxiMath__28_29($0) {
  $0 = $0 | 0;
  std____2__shared_ptr_maxiMath__20std____2__shared_ptr_maxiMath___make_shared___28_29($0);
 }
 
 function emscripten__internal__Invoker_double_2c_20double_2c_20double___invoke_28double_20_28__29_28double_2c_20double_29_2c_20double_2c_20double_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = +$2;
  var $3 = 0, $4 = 0;
  $3 = global$0 - 16 | 0;
  $4 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  HEAPF64[$3 + 8 >> 3] = FUNCTION_TABLE[$0]($1, $2);
  $1 = HEAPF64[$3 + 8 >> 3];
  $0 = $3 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
  return +$1;
 }
 
 function maxiMath__add_28double_2c_20double_29($0, $1) {
  $0 = +$0;
  $1 = +$1;
  return +($0 + $1);
 }
 
 function maxiMath__sub_28double_2c_20double_29($0, $1) {
  $0 = +$0;
  $1 = +$1;
  return +($0 - $1);
 }
 
 function maxiMath__mul_28double_2c_20double_29($0, $1) {
  $0 = +$0;
  $1 = +$1;
  return +($0 * $1);
 }
 
 function maxiMath__div_28double_2c_20double_29($0, $1) {
  $0 = +$0;
  $1 = +$1;
  return +($0 / $1);
 }
 
 function maxiMath__gt_28double_2c_20double_29($0, $1) {
  $0 = +$0;
  $1 = +$1;
  return +($0 > $1 ? 1.0 : 0.0);
 }
 
 function maxiMath__lt_28double_2c_20double_29($0, $1) {
  $0 = +$0;
  $1 = +$1;
  return +($0 < $1 ? 1.0 : 0.0);
 }
 
 function maxiMath__gte_28double_2c_20double_29($0, $1) {
  $0 = +$0;
  $1 = +$1;
  return +($0 >= $1 ? 1.0 : 0.0);
 }
 
 function maxiMath__lte_28double_2c_20double_29($0, $1) {
  $0 = +$0;
  $1 = +$1;
  return +($0 <= $1 ? 1.0 : 0.0);
 }
 
 function maxiMath__mod_28double_2c_20double_29($0, $1) {
  $0 = +$0;
  $1 = +$1;
  return +fmod($0, $1);
 }
 
 function maxiMath__xpowy_28double_2c_20double_29($0, $1) {
  $0 = +$0;
  $1 = +$1;
  return +pow($0, $1);
 }
 
 function void_20const__20emscripten__internal__getActualType_maxiClock__28maxiClock__29($0) {
  $0 = $0 | 0;
  return 17484;
 }
 
 function emscripten__smart_ptr_trait_std____2__shared_ptr_maxiClock__20___share_28maxiClock__2c_20emscripten__internal___EM_VAL__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0;
  $2 = global$0 - 16 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  $3 = operator_20new_28unsigned_20long_29(8);
  HEAP32[16874] = 0;
  emscripten__val__take_ownership_28emscripten__internal___EM_VAL__29($2, $1);
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      if (($1 | 0) != 1) {
       HEAP32[16874] = 0;
       $1 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(644, $2 + 8 | 0, $2 | 0) | 0;
       $4 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($4 | 0) == 1) {
        break label$5
       }
       HEAP32[16874] = 0;
       $0 = __invoke___22class_std____2__shared_ptr_22____22class_std____2__shared_ptr_22___class_maxiOsc____22class_emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc____val_deleter_22__i32(645, $3 | 0, $0 | 0, $1 | 0, 0) | 0;
       $4 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($4 | 0) == 1) {
        break label$4
       }
       emscripten__val___val_28_29($1);
       emscripten__val___val_28_29($2);
       $1 = $2 + 16 | 0;
       if ($1 >>> 0 < global$2 >>> 0) {
        __handle_stack_overflow()
       }
       global$0 = $1;
       return $0 | 0;
      }
      $0 = __cxa_find_matching_catch_2() | 0;
      getTempRet0() | 0;
      break label$2;
     }
     $0 = __cxa_find_matching_catch_2() | 0;
     getTempRet0() | 0;
     break label$3;
    }
    $0 = __cxa_find_matching_catch_2() | 0;
    getTempRet0() | 0;
    emscripten__val___val_28_29($1);
   }
   emscripten__val___val_28_29($2);
  }
  dlfree($3);
  __resumeException($0 | 0);
  abort();
 }
 
 function emscripten__internal__Invoker_std____2__shared_ptr_maxiClock__20___invoke_28std____2__shared_ptr_maxiClock__20_28__29_28_29_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  FUNCTION_TABLE[$0]($1 + 8 | 0);
  HEAP32[16874] = 0;
  $0 = __invoke_i1___22class_std____2__basic_ifstream_22_(646, $1 + 8 | 0) | 0;
  $2 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($2 | 0) != 1) {
   std____2__shared_ptr_maxiOsc____shared_ptr_28_29($1 + 8 | 0);
   $1 = $1 + 16 | 0;
   if ($1 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $1;
   return $0 | 0;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__shared_ptr_maxiOsc____shared_ptr_28_29($1 + 8 | 0);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2__enable_if___28is_array_maxiClock___value_29_2c_20std____2__shared_ptr_maxiClock__20___type_20std____2__make_shared_maxiClock__28_29($0) {
  $0 = $0 | 0;
  std____2__shared_ptr_maxiClock__20std____2__shared_ptr_maxiClock___make_shared___28_29($0);
 }
 
 function void_20emscripten__internal__RegisterClassMethod_void_20_28maxiClock____29_28_29___invoke_maxiClock__28char_20const__2c_20void_20_28maxiClock____29_28_29_29($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  $2 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 12 >> 2] = $2;
  _embind_register_class_function(17484, 3087, 2, 17964, 6264, 647, void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____emscripten__internal__getContext_void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28int_20const__29__28void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28int_20const__29_29_29_28int_20const__29($1 + 8 | 0) | 0, 0);
  $0 = $1 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function void_20emscripten__internal__RegisterClassMethod_void_20_28maxiClock____29_28double_29___invoke_maxiClock__28char_20const__2c_20void_20_28maxiClock____29_28double_29_29($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  $2 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 12 >> 2] = $2;
  _embind_register_class_function(17484, 3094, 3, 17972, 5096, 648, void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____emscripten__internal__getContext_void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28int_20const__29__28void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28int_20const__29_29_29_28int_20const__29($1 + 8 | 0) | 0, 0);
  $0 = $1 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function void_20emscripten__internal__RegisterClassMethod_void_20_28maxiClock____29_28int_29___invoke_maxiClock__28char_20const__2c_20void_20_28maxiClock____29_28int_29_29($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  $2 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 12 >> 2] = $2;
  _embind_register_class_function(17484, 3103, 3, 17984, 4712, 649, void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____emscripten__internal__getContext_void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28int_20const__29__28void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28int_20const__29_29_29_28int_20const__29($1 + 8 | 0) | 0, 0);
  $0 = $1 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function maxiClock__isTick_28_29_20const($0) {
  $0 = $0 | 0;
  return HEAPU8[$0 + 84 | 0];
 }
 
 function void_20emscripten__internal__RegisterClassMethod_int_20_28maxiClock____29_28_29_20const___invoke_maxiClock__28char_20const__2c_20int_20_28maxiClock____29_28_29_20const_29($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  $2 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 12 >> 2] = $2;
  _embind_register_class_function(17484, 3119, 2, 17996, 4752, 650, void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____emscripten__internal__getContext_void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28int_20const__29__28void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28int_20const__29_29_29_28int_20const__29($1 + 8 | 0) | 0, 0);
  $0 = $1 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function maxiClock__getCurrentCount_28_29_20const($0) {
  $0 = $0 | 0;
  return HEAP32[$0 + 48 >> 2];
 }
 
 function maxiClock__setCurrentCount_28int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  HEAP32[$0 + 48 >> 2] = $1;
 }
 
 function maxiClock__getLastCount_28_29_20const($0) {
  $0 = $0 | 0;
  return HEAP32[$0 + 52 >> 2];
 }
 
 function maxiClock__setLastCount_28int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  HEAP32[$0 + 52 >> 2] = $1;
 }
 
 function maxiClock__getBps_28_29_20const($0) {
  $0 = $0 | 0;
  return +HEAPF64[$0 + 64 >> 3];
 }
 
 function maxiClock__setBps_28int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  HEAPF64[$0 + 64 >> 3] = $1 | 0;
 }
 
 function maxiClock__getBpm_28_29_20const($0) {
  $0 = $0 | 0;
  return +HEAPF64[$0 + 72 >> 3];
 }
 
 function maxiClock__setBpm_28int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  HEAPF64[$0 + 72 >> 3] = $1 | 0;
 }
 
 function maxiClock__setTick_28int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  HEAP8[$0 + 84 | 0] = ($1 | 0) != 0;
 }
 
 function bool_20emscripten__internal__GetterPolicy_bool_20_28maxiClock____29_28_29_20const___get_maxiClock__28bool_20_28maxiClock____20const__29_28_29_20const_2c_20maxiClock_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = HEAP32[$0 >> 2];
  $0 = HEAP32[$0 + 4 >> 2];
  $1 = ($0 >> 1) + $1 | 0;
  return FUNCTION_TABLE[$0 & 1 ? HEAP32[$2 + HEAP32[$1 >> 2] >> 2] : $2]($1) | 0;
 }
 
 function maxiClock__getTicks_28_29_20const($0) {
  $0 = $0 | 0;
  return HEAP32[$0 + 80 >> 2];
 }
 
 function maxiClock__setTicks_28int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  HEAP32[$0 + 80 >> 2] = $1;
 }
 
 function void_20const__20emscripten__internal__getActualType_maxiKuramotoOscillator__28maxiKuramotoOscillator__29($0) {
  $0 = $0 | 0;
  return 18032;
 }
 
 function emscripten__smart_ptr_trait_std____2__shared_ptr_maxiKuramotoOscillator__20___share_28maxiKuramotoOscillator__2c_20emscripten__internal___EM_VAL__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0;
  $2 = global$0 - 16 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  $3 = operator_20new_28unsigned_20long_29(8);
  HEAP32[16874] = 0;
  emscripten__val__take_ownership_28emscripten__internal___EM_VAL__29($2, $1);
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      if (($1 | 0) != 1) {
       HEAP32[16874] = 0;
       $1 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(651, $2 + 8 | 0, $2 | 0) | 0;
       $4 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($4 | 0) == 1) {
        break label$5
       }
       HEAP32[16874] = 0;
       $0 = __invoke___22class_std____2__shared_ptr_22____22class_std____2__shared_ptr_22___class_maxiOsc____22class_emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc____val_deleter_22__i32(652, $3 | 0, $0 | 0, $1 | 0, 0) | 0;
       $4 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($4 | 0) == 1) {
        break label$4
       }
       emscripten__val___val_28_29($1);
       emscripten__val___val_28_29($2);
       $1 = $2 + 16 | 0;
       if ($1 >>> 0 < global$2 >>> 0) {
        __handle_stack_overflow()
       }
       global$0 = $1;
       return $0 | 0;
      }
      $0 = __cxa_find_matching_catch_2() | 0;
      getTempRet0() | 0;
      break label$2;
     }
     $0 = __cxa_find_matching_catch_2() | 0;
     getTempRet0() | 0;
     break label$3;
    }
    $0 = __cxa_find_matching_catch_2() | 0;
    getTempRet0() | 0;
    emscripten__val___val_28_29($1);
   }
   emscripten__val___val_28_29($2);
  }
  dlfree($3);
  __resumeException($0 | 0);
  abort();
 }
 
 function emscripten__internal__Invoker_std____2__shared_ptr_maxiKuramotoOscillator__20___invoke_28std____2__shared_ptr_maxiKuramotoOscillator__20_28__29_28_29_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  FUNCTION_TABLE[$0]($1 + 8 | 0);
  HEAP32[16874] = 0;
  $0 = __invoke_i1___22class_std____2__basic_ifstream_22_(653, $1 + 8 | 0) | 0;
  $2 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($2 | 0) != 1) {
   std____2__shared_ptr_maxiOsc____shared_ptr_28_29($1 + 8 | 0);
   $1 = $1 + 16 | 0;
   if ($1 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $1;
   return $0 | 0;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__shared_ptr_maxiOsc____shared_ptr_28_29($1 + 8 | 0);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2__enable_if___28is_array_maxiKuramotoOscillator___value_29_2c_20std____2__shared_ptr_maxiKuramotoOscillator__20___type_20std____2__make_shared_maxiKuramotoOscillator__28_29($0) {
  $0 = $0 | 0;
  std____2__shared_ptr_maxiKuramotoOscillator__20std____2__shared_ptr_maxiKuramotoOscillator___make_shared___28_29($0);
 }
 
 function maxiKuramotoOscillator__play_28double_2c_20double_2c_20std____2__vector_double_2c_20std____2__allocator_double__20__29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = +$2;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0.0, $6 = 0, $7 = 0.0;
  $4 = global$0 - 16 | 0;
  $6 = $4;
  if ($4 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $6;
  HEAP32[$4 + 8 >> 2] = std____2__vector_double_2c_20std____2__allocator_double__20___begin_28_29($3);
  HEAP32[$4 >> 2] = std____2__vector_double_2c_20std____2__allocator_double__20___end_28_29($3);
  if (bool_20std____2__operator___double___28std____2____wrap_iter_double___20const__2c_20std____2____wrap_iter_double___20const__29($4 + 8 | 0, $4)) {
   while (1) {
    $5 = $5 + sin(HEAPF64[HEAP32[$4 + 8 >> 2] >> 3] - HEAPF64[$0 >> 3]);
    std____2____wrap_iter_double____operator___28_29($4 + 8 | 0);
    if (bool_20std____2__operator___double___28std____2____wrap_iter_double___20const__2c_20std____2____wrap_iter_double___20const__29($4 + 8 | 0, $4)) {
     continue
    }
    break;
   }
  }
  $7 = HEAPF64[$0 + 8 >> 3];
  $3 = std____2__vector_double_2c_20std____2__allocator_double__20___size_28_29_20const($3);
  $2 = HEAPF64[$0 >> 3] + $7 * ($5 * ($2 / +($3 >>> 0)) + $1);
  HEAPF64[$0 >> 3] = $2;
  $1 = -6.283185307179586;
  label$4 : {
   if (!($2 >= 6.283185307179586)) {
    $1 = 6.283185307179586;
    if (!($2 < 0.0)) {
     break label$4
    }
   }
   HEAPF64[$0 >> 3] = $2 + $1;
  }
  $1 = HEAPF64[$0 >> 3];
  $0 = $4 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
  return +$1;
 }
 
 function void_20emscripten__internal__RegisterClassMethod_double_20_28maxiKuramotoOscillator____29_28double_2c_20double_2c_20std____2__vector_double_2c_20std____2__allocator_double__20__29___invoke_maxiKuramotoOscillator__28char_20const__2c_20double_20_28maxiKuramotoOscillator____29_28double_2c_20double_2c_20std____2__vector_double_2c_20std____2__allocator_double__20__29_29($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  $2 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 12 >> 2] = $2;
  _embind_register_class_function(18032, 2076, 5, 18592, 18612, 654, void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____emscripten__internal__getContext_void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28int_20const__29__28void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28int_20const__29_29_29_28int_20const__29($1 + 8 | 0) | 0, 0);
  $0 = $1 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function void_20emscripten__internal__RegisterClassMethod_void_20_28maxiKuramotoOscillator____29_28double_29___invoke_maxiKuramotoOscillator__28char_20const__2c_20void_20_28maxiKuramotoOscillator____29_28double_29_29($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  $2 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 12 >> 2] = $2;
  _embind_register_class_function(18032, 3225, 3, 18620, 5096, 655, void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____emscripten__internal__getContext_void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28int_20const__29__28void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28int_20const__29_29_29_28int_20const__29($1 + 8 | 0) | 0, 0);
  $0 = $1 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function void_20emscripten__internal__RegisterClassMethod_double_20_28maxiKuramotoOscillator____29_28_29___invoke_maxiKuramotoOscillator__28char_20const__2c_20double_20_28maxiKuramotoOscillator____29_28_29_29($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  $2 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 12 >> 2] = $2;
  _embind_register_class_function(18032, 3234, 2, 18632, 6976, 656, void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____emscripten__internal__getContext_void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28int_20const__29__28void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28int_20const__29_29_29_28int_20const__29($1 + 8 | 0) | 0, 0);
  $0 = $1 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function void_20const__20emscripten__internal__getActualType_maxiKuramotoOscillatorSet__28maxiKuramotoOscillatorSet__29($0) {
  $0 = $0 | 0;
  return 18668;
 }
 
 function void_20emscripten__internal__raw_destructor_maxiKuramotoOscillatorSet__28maxiKuramotoOscillatorSet__29($0) {
  $0 = $0 | 0;
  if ($0) {
   dlfree(maxiKuramotoOscillatorSet___maxiKuramotoOscillatorSet_28_29($0))
  }
 }
 
 function emscripten__smart_ptr_trait_std____2__shared_ptr_maxiKuramotoOscillatorSet__20___share_28maxiKuramotoOscillatorSet__2c_20emscripten__internal___EM_VAL__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0;
  $2 = global$0 - 16 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  $3 = operator_20new_28unsigned_20long_29(8);
  HEAP32[16874] = 0;
  emscripten__val__take_ownership_28emscripten__internal___EM_VAL__29($2, $1);
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      if (($1 | 0) != 1) {
       HEAP32[16874] = 0;
       $1 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(657, $2 + 8 | 0, $2 | 0) | 0;
       $4 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($4 | 0) == 1) {
        break label$5
       }
       HEAP32[16874] = 0;
       $0 = __invoke___22class_std____2__shared_ptr_22____22class_std____2__shared_ptr_22___class_maxiOsc____22class_emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc____val_deleter_22__i32(658, $3 | 0, $0 | 0, $1 | 0, 0) | 0;
       $4 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($4 | 0) == 1) {
        break label$4
       }
       emscripten__val___val_28_29($1);
       emscripten__val___val_28_29($2);
       $1 = $2 + 16 | 0;
       if ($1 >>> 0 < global$2 >>> 0) {
        __handle_stack_overflow()
       }
       global$0 = $1;
       return $0 | 0;
      }
      $0 = __cxa_find_matching_catch_2() | 0;
      getTempRet0() | 0;
      break label$2;
     }
     $0 = __cxa_find_matching_catch_2() | 0;
     getTempRet0() | 0;
     break label$3;
    }
    $0 = __cxa_find_matching_catch_2() | 0;
    getTempRet0() | 0;
    emscripten__val___val_28_29($1);
   }
   emscripten__val___val_28_29($2);
  }
  dlfree($3);
  __resumeException($0 | 0);
  abort();
 }
 
 function emscripten__internal__Invoker_std____2__shared_ptr_maxiKuramotoOscillatorSet__2c_20unsigned_20long_20const_____invoke_28std____2__shared_ptr_maxiKuramotoOscillatorSet__20_28__29_28unsigned_20long_20const___29_2c_20unsigned_20long_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0;
  $2 = global$0 - 16 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  HEAP32[$2 + 4 >> 2] = $1;
  FUNCTION_TABLE[$0]($2 + 8 | 0, $2 + 4 | 0);
  HEAP32[16874] = 0;
  $0 = __invoke_i1___22class_std____2__basic_ifstream_22_(659, $2 + 8 | 0) | 0;
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($1 | 0) != 1) {
   std____2__shared_ptr_maxiOsc____shared_ptr_28_29($2 + 8 | 0);
   $1 = $2 + 16 | 0;
   if ($1 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $1;
   return $0 | 0;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__shared_ptr_maxiOsc____shared_ptr_28_29($2 + 8 | 0);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2__enable_if___28is_array_maxiKuramotoOscillatorSet___value_29_2c_20std____2__shared_ptr_maxiKuramotoOscillatorSet__20___type_20std____2__make_shared_maxiKuramotoOscillatorSet_2c_20unsigned_20long_20const__28unsigned_20long_20const___29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  std____2__shared_ptr_maxiKuramotoOscillatorSet__20std____2__shared_ptr_maxiKuramotoOscillatorSet___make_shared_unsigned_20long_20const__28unsigned_20long_20const___29($0, $1);
 }
 
 function maxiKuramotoOscillatorSet__play_28double_2c_20double_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = +$2;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0;
  $3 = global$0 - 32 | 0;
  $4 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  $4 = $0 + 12 | 0;
  if (std____2__vector_double_2c_20std____2__allocator_double__20___size_28_29_20const($4)) {
   while (1) {
    $6 = HEAPF64[std____2__vector_maxiKuramotoOscillator_2c_20std____2__allocator_maxiKuramotoOscillator__20___operator_5b_5d_28unsigned_20long_29($0, $5) >> 3];
    HEAPF64[std____2__vector_double_2c_20std____2__allocator_double__20___operator_5b_5d_28unsigned_20long_29($4, $5) >> 3] = $6;
    $5 = $5 + 1 | 0;
    if ($5 >>> 0 < std____2__vector_double_2c_20std____2__allocator_double__20___size_28_29_20const($4) >>> 0) {
     continue
    }
    break;
   }
  }
  HEAP32[$3 + 24 >> 2] = std____2__vector_double_2c_20std____2__allocator_double__20___begin_28_29($0);
  HEAP32[$3 + 16 >> 2] = std____2__vector_double_2c_20std____2__allocator_double__20___end_28_29($0);
  $6 = 0.0;
  if (bool_20std____2__operator___double___28std____2____wrap_iter_double___20const__2c_20std____2____wrap_iter_double___20const__29($3 + 24 | 0, $3 + 16 | 0)) {
   while (1) {
    $5 = HEAP32[$3 + 24 >> 2];
    $0 = std____2__vector_double_2c_20std____2__allocator_double__20___vector_28std____2__vector_double_2c_20std____2__allocator_double__20__20const__29($3, $4);
    $7 = maxiKuramotoOscillator__play_28double_2c_20double_2c_20std____2__vector_double_2c_20std____2__allocator_double__20__29($5, $1, $2, $0);
    std____2__vector_double_2c_20std____2__allocator_double__20____vector_28_29($0);
    $6 = $6 + $7;
    std____2____wrap_iter_maxiKuramotoOscillator____operator___28_29($3 + 24 | 0);
    if (bool_20std____2__operator___double___28std____2____wrap_iter_double___20const__2c_20std____2____wrap_iter_double___20const__29($3 + 24 | 0, $3 + 16 | 0)) {
     continue
    }
    break;
   }
  }
  $0 = std____2__vector_double_2c_20std____2__allocator_double__20___size_28_29_20const($4);
  $3 = $3 + 32 | 0;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  return +($6 / +($0 >>> 0));
 }
 
 function void_20emscripten__internal__RegisterClassMethod_double_20_28maxiKuramotoOscillatorSet____29_28double_2c_20double_29___invoke_maxiKuramotoOscillatorSet__28char_20const__2c_20double_20_28maxiKuramotoOscillatorSet____29_28double_2c_20double_29_29($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  $2 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 12 >> 2] = $2;
  _embind_register_class_function(18668, 2076, 4, 19264, 6960, 660, void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____emscripten__internal__getContext_void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28int_20const__29__28void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28int_20const__29_29_29_28int_20const__29($1 + 8 | 0) | 0, 0);
  $0 = $1 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function maxiKuramotoOscillatorSet__setPhase_28double_2c_20unsigned_20long_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = $2 | 0;
  maxiLagExp_double___setAlpha_28double_29(std____2__vector_maxiKuramotoOscillator_2c_20std____2__allocator_maxiKuramotoOscillator__20___operator_5b_5d_28unsigned_20long_29($0, $2), $1);
 }
 
 function void_20emscripten__internal__RegisterClassMethod_void_20_28maxiKuramotoOscillatorSet____29_28double_2c_20unsigned_20long_29___invoke_maxiKuramotoOscillatorSet__28char_20const__2c_20void_20_28maxiKuramotoOscillatorSet____29_28double_2c_20unsigned_20long_29_29($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  $2 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 12 >> 2] = $2;
  _embind_register_class_function(18668, 3225, 4, 19280, 19296, 661, void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____emscripten__internal__getContext_void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28int_20const__29__28void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28int_20const__29_29_29_28int_20const__29($1 + 8 | 0) | 0, 0);
  $0 = $1 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function maxiKuramotoOscillatorSet__setPhases_28std____2__vector_double_2c_20std____2__allocator_double__20__20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0.0;
  $2 = global$0 - 16 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  HEAP32[$2 + 8 >> 2] = std____2__vector_double_2c_20std____2__allocator_double__20___begin_28_29($1);
  HEAP32[$2 >> 2] = std____2__vector_double_2c_20std____2__allocator_double__20___end_28_29($1);
  if (bool_20std____2__operator___double___28std____2____wrap_iter_double___20const__2c_20std____2____wrap_iter_double___20const__29($2 + 8 | 0, $2)) {
   $1 = 0;
   while (1) {
    $4 = HEAPF64[HEAP32[$2 + 8 >> 2] >> 3];
    maxiLagExp_double___setAlpha_28double_29(std____2__vector_maxiKuramotoOscillator_2c_20std____2__allocator_maxiKuramotoOscillator__20___operator_5b_5d_28unsigned_20long_29($0, $1), $4);
    $1 = $1 + 1 | 0;
    std____2____wrap_iter_double____operator___28_29($2 + 8 | 0);
    if (bool_20std____2__operator___double___28std____2____wrap_iter_double___20const__2c_20std____2____wrap_iter_double___20const__29($2 + 8 | 0, $2)) {
     continue
    }
    break;
   };
  }
  $0 = $2 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function void_20emscripten__internal__RegisterClassMethod_void_20_28maxiKuramotoOscillatorSet____29_28std____2__vector_double_2c_20std____2__allocator_double__20__20const__29___invoke_maxiKuramotoOscillatorSet__28char_20const__2c_20void_20_28maxiKuramotoOscillatorSet____29_28std____2__vector_double_2c_20std____2__allocator_double__20__20const__29_29($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  $2 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 12 >> 2] = $2;
  _embind_register_class_function(18668, 3307, 3, 19304, 4712, 662, void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____emscripten__internal__getContext_void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28int_20const__29__28void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28int_20const__29_29_29_28int_20const__29($1 + 8 | 0) | 0, 0);
  $0 = $1 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function maxiKuramotoOscillatorSet__getPhase_28unsigned_20long_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return +HEAPF64[std____2__vector_maxiKuramotoOscillator_2c_20std____2__allocator_maxiKuramotoOscillator__20___operator_5b_5d_28unsigned_20long_29($0, $1) >> 3];
 }
 
 function void_20emscripten__internal__RegisterClassMethod_double_20_28maxiKuramotoOscillatorSet____29_28unsigned_20long_29___invoke_maxiKuramotoOscillatorSet__28char_20const__2c_20double_20_28maxiKuramotoOscillatorSet____29_28unsigned_20long_29_29($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  $2 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 12 >> 2] = $2;
  _embind_register_class_function(18668, 3234, 3, 19316, 19328, 663, void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____emscripten__internal__getContext_void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28int_20const__29__28void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28int_20const__29_29_29_28int_20const__29($1 + 8 | 0) | 0, 0);
  $0 = $1 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function maxiKuramotoOscillatorSet__size_28_29($0) {
  $0 = $0 | 0;
  return std____2__vector_maxiKuramotoOscillator_2c_20std____2__allocator_maxiKuramotoOscillator__20___size_28_29_20const($0) | 0;
 }
 
 function void_20emscripten__internal__RegisterClassMethod_unsigned_20long_20_28maxiKuramotoOscillatorSet____29_28_29___invoke_maxiKuramotoOscillatorSet__28char_20const__2c_20unsigned_20long_20_28maxiKuramotoOscillatorSet____29_28_29_29($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  $2 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 12 >> 2] = $2;
  _embind_register_class_function(18668, 3317, 2, 19336, 4752, 664, void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____emscripten__internal__getContext_void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28int_20const__29__28void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28int_20const__29_29_29_28int_20const__29($1 + 8 | 0) | 0, 0);
  $0 = $1 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function void_20const__20emscripten__internal__getActualType_maxiAsyncKuramotoOscillator__28maxiAsyncKuramotoOscillator__29($0) {
  $0 = $0 | 0;
  return 19376;
 }
 
 function void_20emscripten__internal__raw_destructor_maxiAsyncKuramotoOscillator__28maxiAsyncKuramotoOscillator__29($0) {
  $0 = $0 | 0;
  if ($0) {
   maxiKuramotoOscillatorSet___maxiKuramotoOscillatorSet_28_29($0);
   dlfree($0);
  }
 }
 
 function emscripten__smart_ptr_trait_std____2__shared_ptr_maxiAsyncKuramotoOscillator__20___share_28maxiAsyncKuramotoOscillator__2c_20emscripten__internal___EM_VAL__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0;
  $2 = global$0 - 16 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  $3 = operator_20new_28unsigned_20long_29(8);
  HEAP32[16874] = 0;
  emscripten__val__take_ownership_28emscripten__internal___EM_VAL__29($2, $1);
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      if (($1 | 0) != 1) {
       HEAP32[16874] = 0;
       $1 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(667, $2 + 8 | 0, $2 | 0) | 0;
       $4 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($4 | 0) == 1) {
        break label$5
       }
       HEAP32[16874] = 0;
       $0 = __invoke___22class_std____2__shared_ptr_22____22class_std____2__shared_ptr_22___class_maxiOsc____22class_emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc____val_deleter_22__i32(668, $3 | 0, $0 | 0, $1 | 0, 0) | 0;
       $4 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($4 | 0) == 1) {
        break label$4
       }
       emscripten__val___val_28_29($1);
       emscripten__val___val_28_29($2);
       $1 = $2 + 16 | 0;
       if ($1 >>> 0 < global$2 >>> 0) {
        __handle_stack_overflow()
       }
       global$0 = $1;
       return $0 | 0;
      }
      $0 = __cxa_find_matching_catch_2() | 0;
      getTempRet0() | 0;
      break label$2;
     }
     $0 = __cxa_find_matching_catch_2() | 0;
     getTempRet0() | 0;
     break label$3;
    }
    $0 = __cxa_find_matching_catch_2() | 0;
    getTempRet0() | 0;
    emscripten__val___val_28_29($1);
   }
   emscripten__val___val_28_29($2);
  }
  dlfree($3);
  __resumeException($0 | 0);
  abort();
 }
 
 function emscripten__internal__Invoker_std____2__shared_ptr_maxiAsyncKuramotoOscillator__2c_20unsigned_20long_20const_____invoke_28std____2__shared_ptr_maxiAsyncKuramotoOscillator__20_28__29_28unsigned_20long_20const___29_2c_20unsigned_20long_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0;
  $2 = global$0 - 16 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  HEAP32[$2 + 4 >> 2] = $1;
  FUNCTION_TABLE[$0]($2 + 8 | 0, $2 + 4 | 0);
  HEAP32[16874] = 0;
  $0 = __invoke_i1___22class_std____2__basic_ifstream_22_(669, $2 + 8 | 0) | 0;
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($1 | 0) != 1) {
   std____2__shared_ptr_maxiOsc____shared_ptr_28_29($2 + 8 | 0);
   $1 = $2 + 16 | 0;
   if ($1 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $1;
   return $0 | 0;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__shared_ptr_maxiOsc____shared_ptr_28_29($2 + 8 | 0);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2__enable_if___28is_array_maxiAsyncKuramotoOscillator___value_29_2c_20std____2__shared_ptr_maxiAsyncKuramotoOscillator__20___type_20std____2__make_shared_maxiAsyncKuramotoOscillator_2c_20unsigned_20long_20const__28unsigned_20long_20const___29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  std____2__shared_ptr_maxiAsyncKuramotoOscillator__20std____2__shared_ptr_maxiAsyncKuramotoOscillator___make_shared_unsigned_20long_20const__28unsigned_20long_20const___29($0, $1);
 }
 
 function maxiAsyncKuramotoOscillator__play_28double_2c_20double_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = +$2;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0;
  $3 = global$0 - 32 | 0;
  $4 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  label$2 : {
   if (!HEAPU8[$0 + 24 | 0]) {
    break label$2
   }
   $5 = $0 + 12 | 0;
   if (!std____2__vector_double_2c_20std____2__allocator_double__20___size_28_29_20const($5)) {
    break label$2
   }
   $4 = 0;
   while (1) {
    $6 = HEAPF64[std____2__vector_maxiKuramotoOscillator_2c_20std____2__allocator_maxiKuramotoOscillator__20___operator_5b_5d_28unsigned_20long_29($0, $4) >> 3];
    HEAPF64[std____2__vector_double_2c_20std____2__allocator_double__20___operator_5b_5d_28unsigned_20long_29($5, $4) >> 3] = $6;
    $4 = $4 + 1 | 0;
    if ($4 >>> 0 < std____2__vector_double_2c_20std____2__allocator_double__20___size_28_29_20const($5) >>> 0) {
     continue
    }
    break;
   };
  }
  HEAP32[$3 + 24 >> 2] = std____2__vector_double_2c_20std____2__allocator_double__20___begin_28_29($0);
  HEAP32[$3 + 16 >> 2] = std____2__vector_double_2c_20std____2__allocator_double__20___end_28_29($0);
  $6 = 0.0;
  if (bool_20std____2__operator___double___28std____2____wrap_iter_double___20const__2c_20std____2____wrap_iter_double___20const__29($3 + 24 | 0, $3 + 16 | 0)) {
   $4 = $0 + 12 | 0;
   while (1) {
    $8 = HEAP32[$3 + 24 >> 2];
    $7 = HEAPU8[$0 + 24 | 0] ? $2 : 0.0;
    $5 = std____2__vector_double_2c_20std____2__allocator_double__20___vector_28std____2__vector_double_2c_20std____2__allocator_double__20__20const__29($3, $4);
    $7 = maxiKuramotoOscillator__play_28double_2c_20double_2c_20std____2__vector_double_2c_20std____2__allocator_double__20__29($8, $1, $7, $5);
    std____2__vector_double_2c_20std____2__allocator_double__20____vector_28_29($5);
    $6 = $6 + $7;
    std____2____wrap_iter_maxiKuramotoOscillator____operator___28_29($3 + 24 | 0);
    if (bool_20std____2__operator___double___28std____2____wrap_iter_double___20const__2c_20std____2____wrap_iter_double___20const__29($3 + 24 | 0, $3 + 16 | 0)) {
     continue
    }
    break;
   };
  }
  HEAP8[$0 + 24 | 0] = 0;
  $0 = std____2__vector_double_2c_20std____2__allocator_double__20___size_28_29_20const($0 + 12 | 0);
  $3 = $3 + 32 | 0;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  return +($6 / +($0 >>> 0));
 }
 
 function void_20emscripten__internal__RegisterClassMethod_double_20_28maxiAsyncKuramotoOscillator____29_28double_2c_20double_29___invoke_maxiAsyncKuramotoOscillator__28char_20const__2c_20double_20_28maxiAsyncKuramotoOscillator____29_28double_2c_20double_29_29($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  $2 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 12 >> 2] = $2;
  _embind_register_class_function(19376, 2076, 4, 19984, 6960, 670, void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____emscripten__internal__getContext_void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28int_20const__29__28void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28int_20const__29_29_29_28int_20const__29($1 + 8 | 0) | 0, 0);
  $0 = $1 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function maxiAsyncKuramotoOscillator__setPhase_28double_2c_20unsigned_20long_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = $2 | 0;
  maxiLagExp_double___setAlpha_28double_29(std____2__vector_maxiKuramotoOscillator_2c_20std____2__allocator_maxiKuramotoOscillator__20___operator_5b_5d_28unsigned_20long_29($0, $2), $1);
  HEAP8[$0 + 24 | 0] = 1;
 }
 
 function void_20emscripten__internal__RegisterClassMethod_void_20_28maxiAsyncKuramotoOscillator____29_28double_2c_20unsigned_20long_29___invoke_maxiAsyncKuramotoOscillator__28char_20const__2c_20void_20_28maxiAsyncKuramotoOscillator____29_28double_2c_20unsigned_20long_29_29($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  $2 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 12 >> 2] = $2;
  _embind_register_class_function(19376, 3225, 4, 2e4, 19296, 671, void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____emscripten__internal__getContext_void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28int_20const__29__28void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28int_20const__29_29_29_28int_20const__29($1 + 8 | 0) | 0, 0);
  $0 = $1 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function maxiAsyncKuramotoOscillator__setPhases_28std____2__vector_double_2c_20std____2__allocator_double__20__20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0.0;
  $2 = global$0 - 16 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  HEAP32[$2 + 8 >> 2] = std____2__vector_double_2c_20std____2__allocator_double__20___begin_28_29($1);
  HEAP32[$2 >> 2] = std____2__vector_double_2c_20std____2__allocator_double__20___end_28_29($1);
  if (bool_20std____2__operator___double___28std____2____wrap_iter_double___20const__2c_20std____2____wrap_iter_double___20const__29($2 + 8 | 0, $2)) {
   $1 = 0;
   while (1) {
    $4 = HEAPF64[HEAP32[$2 + 8 >> 2] >> 3];
    maxiLagExp_double___setAlpha_28double_29(std____2__vector_maxiKuramotoOscillator_2c_20std____2__allocator_maxiKuramotoOscillator__20___operator_5b_5d_28unsigned_20long_29($0, $1), $4);
    $1 = $1 + 1 | 0;
    std____2____wrap_iter_double____operator___28_29($2 + 8 | 0);
    if (bool_20std____2__operator___double___28std____2____wrap_iter_double___20const__2c_20std____2____wrap_iter_double___20const__29($2 + 8 | 0, $2)) {
     continue
    }
    break;
   };
  }
  HEAP8[$0 + 24 | 0] = 1;
  $0 = $2 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function void_20emscripten__internal__RegisterClassMethod_void_20_28maxiAsyncKuramotoOscillator____29_28std____2__vector_double_2c_20std____2__allocator_double__20__20const__29___invoke_maxiAsyncKuramotoOscillator__28char_20const__2c_20void_20_28maxiAsyncKuramotoOscillator____29_28std____2__vector_double_2c_20std____2__allocator_double__20__20const__29_29($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  $2 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 12 >> 2] = $2;
  _embind_register_class_function(19376, 3307, 3, 20016, 4712, 672, void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____emscripten__internal__getContext_void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28int_20const__29__28void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28int_20const__29_29_29_28int_20const__29($1 + 8 | 0) | 0, 0);
  $0 = $1 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function maxiAsyncKuramotoOscillator__getPhase_28unsigned_20long_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return +maxiKuramotoOscillatorSet__getPhase_28unsigned_20long_29($0, $1);
 }
 
 function void_20emscripten__internal__RegisterClassMethod_double_20_28maxiAsyncKuramotoOscillator____29_28unsigned_20long_29___invoke_maxiAsyncKuramotoOscillator__28char_20const__2c_20double_20_28maxiAsyncKuramotoOscillator____29_28unsigned_20long_29_29($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  $2 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 12 >> 2] = $2;
  _embind_register_class_function(19376, 3234, 3, 20028, 19328, 673, void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____emscripten__internal__getContext_void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28int_20const__29__28void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28int_20const__29_29_29_28int_20const__29($1 + 8 | 0) | 0, 0);
  $0 = $1 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function void_20emscripten__internal__RegisterClassMethod_unsigned_20long_20_28maxiAsyncKuramotoOscillator____29_28_29___invoke_maxiAsyncKuramotoOscillator__28char_20const__2c_20unsigned_20long_20_28maxiAsyncKuramotoOscillator____29_28_29_29($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  $2 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 12 >> 2] = $2;
  _embind_register_class_function(19376, 3317, 2, 20040, 4752, 674, void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____emscripten__internal__getContext_void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28int_20const__29__28void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28int_20const__29_29_29_28int_20const__29($1 + 8 | 0) | 0, 0);
  $0 = $1 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function void_20const__20emscripten__internal__getActualType_maxiFFT__28maxiFFT__29($0) {
  $0 = $0 | 0;
  return 20060;
 }
 
 function void_20emscripten__internal__raw_destructor_maxiFFT__28maxiFFT__29($0) {
  $0 = $0 | 0;
  if ($0) {
   dlfree(maxiFFT___maxiFFT_28_29($0))
  }
 }
 
 function emscripten__smart_ptr_trait_std____2__shared_ptr_maxiFFT__20___share_28maxiFFT__2c_20emscripten__internal___EM_VAL__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0;
  $2 = global$0 - 16 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  $3 = operator_20new_28unsigned_20long_29(8);
  HEAP32[16874] = 0;
  emscripten__val__take_ownership_28emscripten__internal___EM_VAL__29($2, $1);
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      if (($1 | 0) != 1) {
       HEAP32[16874] = 0;
       $1 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(675, $2 + 8 | 0, $2 | 0) | 0;
       $4 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($4 | 0) == 1) {
        break label$5
       }
       HEAP32[16874] = 0;
       $0 = __invoke___22class_std____2__shared_ptr_22____22class_std____2__shared_ptr_22___class_maxiOsc____22class_emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc____val_deleter_22__i32(676, $3 | 0, $0 | 0, $1 | 0, 0) | 0;
       $4 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($4 | 0) == 1) {
        break label$4
       }
       emscripten__val___val_28_29($1);
       emscripten__val___val_28_29($2);
       $1 = $2 + 16 | 0;
       if ($1 >>> 0 < global$2 >>> 0) {
        __handle_stack_overflow()
       }
       global$0 = $1;
       return $0 | 0;
      }
      $0 = __cxa_find_matching_catch_2() | 0;
      getTempRet0() | 0;
      break label$2;
     }
     $0 = __cxa_find_matching_catch_2() | 0;
     getTempRet0() | 0;
     break label$3;
    }
    $0 = __cxa_find_matching_catch_2() | 0;
    getTempRet0() | 0;
    emscripten__val___val_28_29($1);
   }
   emscripten__val___val_28_29($2);
  }
  dlfree($3);
  __resumeException($0 | 0);
  abort();
 }
 
 function emscripten__internal__Invoker_std____2__shared_ptr_maxiFFT__20___invoke_28std____2__shared_ptr_maxiFFT__20_28__29_28_29_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  FUNCTION_TABLE[$0]($1 + 8 | 0);
  HEAP32[16874] = 0;
  $0 = __invoke_i1___22class_std____2__basic_ifstream_22_(677, $1 + 8 | 0) | 0;
  $2 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($2 | 0) != 1) {
   std____2__shared_ptr_maxiOsc____shared_ptr_28_29($1 + 8 | 0);
   $1 = $1 + 16 | 0;
   if ($1 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $1;
   return $0 | 0;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__shared_ptr_maxiOsc____shared_ptr_28_29($1 + 8 | 0);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2__enable_if___28is_array_maxiFFT___value_29_2c_20std____2__shared_ptr_maxiFFT__20___type_20std____2__make_shared_maxiFFT__28_29($0) {
  $0 = $0 | 0;
  std____2__shared_ptr_maxiFFT__20std____2__shared_ptr_maxiFFT___make_shared___28_29($0);
 }
 
 function void_20emscripten__internal__RegisterClassMethod_void_20_28maxiFFT____29_28int_2c_20int_2c_20int_29___invoke_maxiFFT__28char_20const__2c_20void_20_28maxiFFT____29_28int_2c_20int_2c_20int_29_29($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  $2 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 12 >> 2] = $2;
  _embind_register_class_function(20060, 1635, 5, 20528, 20548, 678, void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____emscripten__internal__getContext_void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28int_20const__29__28void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28int_20const__29_29_29_28int_20const__29($1 + 8 | 0) | 0, 0);
  $0 = $1 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function void_20emscripten__internal__RegisterClassMethod_bool_20_28maxiFFT____29_28float_2c_20maxiFFT__fftModes_29___invoke_maxiFFT__28char_20const__2c_20bool_20_28maxiFFT____29_28float_2c_20maxiFFT__fftModes_29_29($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  $2 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 12 >> 2] = $2;
  _embind_register_class_function(20060, 3418, 4, 20560, 20604, 679, void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____emscripten__internal__getContext_void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28int_20const__29__28void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28int_20const__29_29_29_28int_20const__29($1 + 8 | 0) | 0, 0);
  $0 = $1 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function void_20emscripten__internal__RegisterClassMethod_float_20_28maxiFFT____29_28_29___invoke_maxiFFT__28char_20const__2c_20float_20_28maxiFFT____29_28_29_29($0, $1) {
  var $2 = 0, $3 = 0;
  $2 = global$0 - 16 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  $3 = HEAP32[$1 + 4 >> 2];
  HEAP32[$2 + 8 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$2 + 12 >> 2] = $3;
  _embind_register_class_function(20060, $0 | 0, 2, 20612, 20620, 680, void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____emscripten__internal__getContext_void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28int_20const__29__28void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28int_20const__29_29_29_28int_20const__29($2 + 8 | 0) | 0, 0);
  $0 = $2 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function void_20emscripten__internal__RegisterClassMethod_std____2__vector_float_2c_20std____2__allocator_float__20___20_28maxiFFT____29_28_29___invoke_maxiFFT__28char_20const__2c_20std____2__vector_float_2c_20std____2__allocator_float__20___20_28maxiFFT____29_28_29_29($0, $1) {
  var $2 = 0, $3 = 0;
  $2 = global$0 - 16 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  $3 = HEAP32[$1 + 4 >> 2];
  HEAP32[$2 + 8 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$2 + 12 >> 2] = $3;
  _embind_register_class_function(20060, $0 | 0, 2, 20624, 4752, 681, void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____emscripten__internal__getContext_void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28int_20const__29__28void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28int_20const__29_29_29_28int_20const__29($2 + 8 | 0) | 0, 0);
  $0 = $2 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function maxiFFT__getMagnitudesDB_28_29($0) {
  $0 = $0 | 0;
  return maxiFFT__magsToDB_28_29($0) | 0;
 }
 
 function maxiFFT__getNumBins_28_29($0) {
  $0 = $0 | 0;
  return HEAP32[$0 + 140 >> 2];
 }
 
 function void_20emscripten__internal__RegisterClassMethod_int_20_28maxiFFT____29_28_29___invoke_maxiFFT__28char_20const__2c_20int_20_28maxiFFT____29_28_29_29($0, $1) {
  var $2 = 0, $3 = 0;
  $2 = global$0 - 16 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  $3 = HEAP32[$1 + 4 >> 2];
  HEAP32[$2 + 8 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$2 + 12 >> 2] = $3;
  _embind_register_class_function(20060, $0 | 0, 2, 20632, 4752, 682, void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____emscripten__internal__getContext_void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28int_20const__29__28void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28int_20const__29_29_29_28int_20const__29($2 + 8 | 0) | 0, 0);
  $0 = $2 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function maxiFFT__getFFTSize_28_29($0) {
  $0 = $0 | 0;
  return HEAP32[$0 + 68 >> 2];
 }
 
 function maxiFFT__getHopSize_28_29($0) {
  $0 = $0 | 0;
  return HEAP32[$0 + 136 >> 2];
 }
 
 function maxiFFT__getWindowSize_28_29($0) {
  $0 = $0 | 0;
  return HEAP32[$0 + 132 >> 2];
 }
 
 function emscripten__enum__maxiFFT__fftModes___value_28char_20const__2c_20maxiFFT__fftModes_29($0, $1, $2) {
  _embind_register_enum_value(20596, $1 | 0, $2 | 0);
  return $0;
 }
 
 function void_20const__20emscripten__internal__getActualType_maxiIFFT__28maxiIFFT__29($0) {
  $0 = $0 | 0;
  return 20652;
 }
 
 function void_20emscripten__internal__raw_destructor_maxiIFFT__28maxiIFFT__29($0) {
  $0 = $0 | 0;
  if ($0) {
   dlfree(maxiIFFT___maxiIFFT_28_29($0))
  }
 }
 
 function emscripten__smart_ptr_trait_std____2__shared_ptr_maxiIFFT__20___share_28maxiIFFT__2c_20emscripten__internal___EM_VAL__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0;
  $2 = global$0 - 16 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  $3 = operator_20new_28unsigned_20long_29(8);
  HEAP32[16874] = 0;
  emscripten__val__take_ownership_28emscripten__internal___EM_VAL__29($2, $1);
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      if (($1 | 0) != 1) {
       HEAP32[16874] = 0;
       $1 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(683, $2 + 8 | 0, $2 | 0) | 0;
       $4 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($4 | 0) == 1) {
        break label$5
       }
       HEAP32[16874] = 0;
       $0 = __invoke___22class_std____2__shared_ptr_22____22class_std____2__shared_ptr_22___class_maxiOsc____22class_emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc____val_deleter_22__i32(684, $3 | 0, $0 | 0, $1 | 0, 0) | 0;
       $4 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($4 | 0) == 1) {
        break label$4
       }
       emscripten__val___val_28_29($1);
       emscripten__val___val_28_29($2);
       $1 = $2 + 16 | 0;
       if ($1 >>> 0 < global$2 >>> 0) {
        __handle_stack_overflow()
       }
       global$0 = $1;
       return $0 | 0;
      }
      $0 = __cxa_find_matching_catch_2() | 0;
      getTempRet0() | 0;
      break label$2;
     }
     $0 = __cxa_find_matching_catch_2() | 0;
     getTempRet0() | 0;
     break label$3;
    }
    $0 = __cxa_find_matching_catch_2() | 0;
    getTempRet0() | 0;
    emscripten__val___val_28_29($1);
   }
   emscripten__val___val_28_29($2);
  }
  dlfree($3);
  __resumeException($0 | 0);
  abort();
 }
 
 function emscripten__internal__Invoker_std____2__shared_ptr_maxiIFFT__20___invoke_28std____2__shared_ptr_maxiIFFT__20_28__29_28_29_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  FUNCTION_TABLE[$0]($1 + 8 | 0);
  HEAP32[16874] = 0;
  $0 = __invoke_i1___22class_std____2__basic_ifstream_22_(685, $1 + 8 | 0) | 0;
  $2 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($2 | 0) != 1) {
   std____2__shared_ptr_maxiOsc____shared_ptr_28_29($1 + 8 | 0);
   $1 = $1 + 16 | 0;
   if ($1 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $1;
   return $0 | 0;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__shared_ptr_maxiOsc____shared_ptr_28_29($1 + 8 | 0);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2__enable_if___28is_array_maxiIFFT___value_29_2c_20std____2__shared_ptr_maxiIFFT__20___type_20std____2__make_shared_maxiIFFT__28_29($0) {
  $0 = $0 | 0;
  std____2__shared_ptr_maxiIFFT__20std____2__shared_ptr_maxiIFFT___make_shared___28_29($0);
 }
 
 function void_20emscripten__internal__RegisterClassMethod_void_20_28maxiIFFT____29_28int_2c_20int_2c_20int_29___invoke_maxiIFFT__28char_20const__2c_20void_20_28maxiIFFT____29_28int_2c_20int_2c_20int_29_29($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  $2 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 12 >> 2] = $2;
  _embind_register_class_function(20652, 1635, 5, 21136, 20548, 686, void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____emscripten__internal__getContext_void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28int_20const__29__28void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28int_20const__29_29_29_28int_20const__29($1 + 8 | 0) | 0, 0);
  $0 = $1 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function void_20emscripten__internal__RegisterClassMethod_float_20_28maxiIFFT____29_28std____2__vector_float_2c_20std____2__allocator_float__20___2c_20std____2__vector_float_2c_20std____2__allocator_float__20___2c_20maxiIFFT__fftModes_29___invoke_maxiIFFT__28char_20const__2c_20float_20_28maxiIFFT____29_28std____2__vector_float_2c_20std____2__allocator_float__20___2c_20std____2__vector_float_2c_20std____2__allocator_float__20___2c_20maxiIFFT__fftModes_29_29($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  $2 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 12 >> 2] = $2;
  _embind_register_class_function(20652, 3418, 5, 21168, 21220, 687, void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____emscripten__internal__getContext_void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28int_20const__29__28void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28int_20const__29_29_29_28int_20const__29($1 + 8 | 0) | 0, 0);
  $0 = $1 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function emscripten__enum__maxiIFFT__fftModes___value_28char_20const__2c_20maxiIFFT__fftModes_29($0, $1, $2) {
  _embind_register_enum_value(21212, $1 | 0, $2 | 0);
  return $0;
 }
 
 function void_20const__20emscripten__internal__getActualType_maxiMFCCAnalyser_double__20__28maxiMFCCAnalyser_double___29($0) {
  $0 = $0 | 0;
  return 21252;
 }
 
 function void_20emscripten__internal__raw_destructor_maxiMFCCAnalyser_double__20__28maxiMFCCAnalyser_double___29($0) {
  $0 = $0 | 0;
  if ($0) {
   dlfree(maxiMFCCAnalyser_double____maxiMFCCAnalyser_28_29($0))
  }
 }
 
 function emscripten__smart_ptr_trait_std____2__shared_ptr_maxiMFCCAnalyser_double__20__20___share_28maxiMFCCAnalyser_double___2c_20emscripten__internal___EM_VAL__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0;
  $2 = global$0 - 16 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  $3 = operator_20new_28unsigned_20long_29(8);
  HEAP32[16874] = 0;
  emscripten__val__take_ownership_28emscripten__internal___EM_VAL__29($2, $1);
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      if (($1 | 0) != 1) {
       HEAP32[16874] = 0;
       $1 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(688, $2 + 8 | 0, $2 | 0) | 0;
       $4 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($4 | 0) == 1) {
        break label$5
       }
       HEAP32[16874] = 0;
       $0 = __invoke___22class_std____2__shared_ptr_22____22class_std____2__shared_ptr_22___class_maxiOsc____22class_emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc____val_deleter_22__i32(689, $3 | 0, $0 | 0, $1 | 0, 0) | 0;
       $4 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($4 | 0) == 1) {
        break label$4
       }
       emscripten__val___val_28_29($1);
       emscripten__val___val_28_29($2);
       $1 = $2 + 16 | 0;
       if ($1 >>> 0 < global$2 >>> 0) {
        __handle_stack_overflow()
       }
       global$0 = $1;
       return $0 | 0;
      }
      $0 = __cxa_find_matching_catch_2() | 0;
      getTempRet0() | 0;
      break label$2;
     }
     $0 = __cxa_find_matching_catch_2() | 0;
     getTempRet0() | 0;
     break label$3;
    }
    $0 = __cxa_find_matching_catch_2() | 0;
    getTempRet0() | 0;
    emscripten__val___val_28_29($1);
   }
   emscripten__val___val_28_29($2);
  }
  dlfree($3);
  __resumeException($0 | 0);
  abort();
 }
 
 function emscripten__internal__Invoker_std____2__shared_ptr_maxiMFCCAnalyser_double__20__20___invoke_28std____2__shared_ptr_maxiMFCCAnalyser_double__20__20_28__29_28_29_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  FUNCTION_TABLE[$0]($1 + 8 | 0);
  HEAP32[16874] = 0;
  $0 = __invoke_i1___22class_std____2__basic_ifstream_22_(690, $1 + 8 | 0) | 0;
  $2 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($2 | 0) != 1) {
   std____2__shared_ptr_maxiOsc____shared_ptr_28_29($1 + 8 | 0);
   $1 = $1 + 16 | 0;
   if ($1 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $1;
   return $0 | 0;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__shared_ptr_maxiOsc____shared_ptr_28_29($1 + 8 | 0);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2__enable_if___28is_array_maxiMFCCAnalyser_double__20___value_29_2c_20std____2__shared_ptr_maxiMFCCAnalyser_double__20__20___type_20std____2__make_shared_maxiMFCCAnalyser_double__20__28_29($0) {
  $0 = $0 | 0;
  std____2__shared_ptr_maxiMFCCAnalyser_double__20__20std____2__shared_ptr_maxiMFCCAnalyser_double__20___make_shared___28_29($0);
 }
 
 function maxiMFCCAnalyser_double___setup_28unsigned_20int_2c_20unsigned_20int_2c_20unsigned_20int_2c_20double_2c_20double_29($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = +$4;
  $5 = +$5;
  var $6 = 0, $7 = 0;
  $6 = global$0 - 16 | 0;
  $7 = $6;
  if ($6 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $7;
  HEAPF64[$0 + 24 >> 3] = $5;
  HEAPF64[$0 + 16 >> 3] = $4;
  HEAP32[$0 + 8 >> 2] = $3;
  HEAP32[$0 + 4 >> 2] = $2;
  $7 = HEAP32[12865];
  HEAP32[$0 + 40 >> 2] = $1;
  HEAP32[$0 + 32 >> 2] = $7;
  HEAP32[$0 + 36 >> 2] = 0;
  $2 = $2 << 3;
  HEAP32[$0 >> 2] = dlmalloc($2);
  HEAP32[$6 + 8 >> 2] = 0;
  HEAP32[$6 + 12 >> 2] = 0;
  std____2__vector_double_2c_20std____2__allocator_double__20___resize_28unsigned_20long_2c_20double_20const__29($0 + 48 | 0, $3, $6 + 8 | 0);
  HEAP32[$0 + 44 >> 2] = dlmalloc(Math_imul($2, $3));
  maxiMFCCAnalyser_double___calcMelFilterBank_28double_2c_20int_29($0, +HEAPU32[$0 + 32 >> 2], $1);
  maxiMFCCAnalyser_double___createDCTCoeffs_28_29($0);
  $0 = $6 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function void_20emscripten__internal__RegisterClassMethod_void_20_28maxiMFCCAnalyser_double_____29_28unsigned_20int_2c_20unsigned_20int_2c_20unsigned_20int_2c_20double_2c_20double_29___invoke_maxiMFCCAnalyser_double__20__28char_20const__2c_20void_20_28maxiMFCCAnalyser_double_____29_28unsigned_20int_2c_20unsigned_20int_2c_20unsigned_20int_2c_20double_2c_20double_29_29($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  $2 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 12 >> 2] = $2;
  _embind_register_class_function(21252, 1635, 7, 21808, 21836, 691, void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____emscripten__internal__getContext_void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28int_20const__29__28void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28int_20const__29_29_29_28int_20const__29($1 + 8 | 0) | 0, 0);
  $0 = $1 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function maxiMFCCAnalyser_double___mfcc_28std____2__vector_float_2c_20std____2__allocator_float__20___29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  maxiMFCCAnalyser_double___melFilterAndLogSq_Part2_28float__29($0, HEAP32[$1 >> 2]);
  $1 = $0;
  $0 = $0 + 48 | 0;
  maxiMFCCAnalyser_double___dct_28double__29($1, HEAP32[$0 >> 2]);
  return $0 | 0;
 }
 
 function void_20emscripten__internal__RegisterClassMethod_std____2__vector_double_2c_20std____2__allocator_double__20___20_28maxiMFCCAnalyser_double_____29_28std____2__vector_float_2c_20std____2__allocator_float__20___29___invoke_maxiMFCCAnalyser_double__20__28char_20const__2c_20std____2__vector_double_2c_20std____2__allocator_double__20___20_28maxiMFCCAnalyser_double_____29_28std____2__vector_float_2c_20std____2__allocator_float__20___29_29($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  $2 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 12 >> 2] = $2;
  _embind_register_class_function(21252, 3693, 3, 21848, 4796, 692, void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____emscripten__internal__getContext_void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28int_20const__29__28void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28int_20const__29_29_29_28int_20const__29($1 + 8 | 0) | 0, 0);
  $0 = $1 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function void_20const__20emscripten__internal__getActualType_std____2__vector_int_2c_20std____2__allocator_int__20__20__28std____2__vector_int_2c_20std____2__allocator_int__20___29($0) {
  $0 = $0 | 0;
  return 4552;
 }
 
 function void_20emscripten__internal__raw_destructor_std____2__vector_int_2c_20std____2__allocator_int__20__20__28std____2__vector_int_2c_20std____2__allocator_int__20___29($0) {
  $0 = $0 | 0;
  if ($0) {
   dlfree(std____2__vector_int_2c_20std____2__allocator_int__20____vector_28_29($0))
  }
 }
 
 function std____2__vector_int_2c_20std____2__allocator_int__20___20emscripten__internal__operator_new_std____2__vector_int_2c_20std____2__allocator_int__20__20__28_29() {
  return std____2__vector_int_2c_20std____2__allocator_int__20___vector_28_29(operator_20new_28unsigned_20long_29(12)) | 0;
 }
 
 function void_20emscripten__internal__RegisterClassConstructor_std____2__vector_int_2c_20std____2__allocator_int__20___20_28__29_28_29___invoke_std____2__vector_int_2c_20std____2__allocator_int__20__20__28std____2__vector_int_2c_20std____2__allocator_int__20___20_28__29_28_29_29() {
  var $0 = 0, $1 = 0;
  $0 = global$0 - 16 | 0;
  $1 = $0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  _embind_register_class_constructor(4552, 1, 4696, 4688, 693, 489);
  $0 = $0 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function std____2__vector_int_2c_20std____2__allocator_int__20___push_back_28int_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0;
  $2 = global$0 - 16 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  label$2 : {
   if (HEAP32[$0 + 4 >> 2] != HEAP32[std____2____vector_base_double_2c_20std____2__allocator_double__20_____alloc_28_29($0) >> 2]) {
    void_20std____2__allocator_traits_std____2__allocator_int__20___construct_int_2c_20int_20const___28std____2__allocator_int___2c_20int__2c_20int_20const__29(std____2____vector_base_double_2c_20std____2__allocator_double__20_____alloc_28_29($0), HEAP32[$0 + 4 >> 2], $1);
    HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + 4;
    break label$2;
   }
   void_20std____2__vector_int_2c_20std____2__allocator_int__20_____push_back_slow_path_int_20const___28int_20const__29($0, $1);
  }
  $0 = $2 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function void_20emscripten__internal__RegisterClassMethod_void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28int_20const__29___invoke_std____2__vector_int_2c_20std____2__allocator_int__20__20__28char_20const__2c_20void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28int_20const__29_29($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  $2 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 12 >> 2] = $2;
  _embind_register_class_function(4552, 4377, 3, 4700, 4712, 694, void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____emscripten__internal__getContext_void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28int_20const__29__28void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28int_20const__29_29_29_28int_20const__29($1 + 8 | 0) | 0, 0);
  $0 = $1 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function std____2__vector_int_2c_20std____2__allocator_int__20___resize_28unsigned_20long_2c_20int_20const__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = std____2__vector_int_2c_20std____2__allocator_int__20___size_28_29_20const($0);
  if ($3 >>> 0 < $1 >>> 0) {
   std____2__vector_int_2c_20std____2__allocator_int__20_____append_28unsigned_20long_2c_20int_20const__29($0, $1 - $3 | 0, $2);
   return;
  }
  if ($3 >>> 0 > $1 >>> 0) {
   $1 = HEAP32[$0 >> 2] + ($1 << 2) | 0;
   $2 = std____2__vector_int_2c_20std____2__allocator_int__20___size_28_29_20const($0);
   std____2____vector_base_float_2c_20std____2__allocator_float__20_____destruct_at_end_28float__29($0, $1);
   std____2__vector_float_2c_20std____2__allocator_float__20_____annotate_shrink_28unsigned_20long_29_20const($0, $2);
  }
 }
 
 function void_20emscripten__internal__RegisterClassMethod_void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28unsigned_20long_2c_20int_20const__29___invoke_std____2__vector_int_2c_20std____2__allocator_int__20__20__28char_20const__2c_20void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28unsigned_20long_2c_20int_20const__29_29($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  $2 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 12 >> 2] = $2;
  _embind_register_class_function(4552, 4387, 4, 4720, 4736, 695, void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____emscripten__internal__getContext_void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28int_20const__29__28void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28int_20const__29_29_29_28int_20const__29($1 + 8 | 0) | 0, 0);
  $0 = $1 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function std____2__vector_int_2c_20std____2__allocator_int__20___size_28_29_20const($0) {
  $0 = $0 | 0;
  return HEAP32[$0 + 4 >> 2] - HEAP32[$0 >> 2] >> 2;
 }
 
 function void_20emscripten__internal__RegisterClassMethod_unsigned_20long_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28_29_20const___invoke_std____2__vector_int_2c_20std____2__allocator_int__20__20__28char_20const__2c_20unsigned_20long_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28_29_20const_29($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  $2 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 12 >> 2] = $2;
  _embind_register_class_function(4552, 3317, 2, 4744, 4752, 696, void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____emscripten__internal__getContext_void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28int_20const__29__28void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28int_20const__29_29_29_28int_20const__29($1 + 8 | 0) | 0, 0);
  $0 = $1 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function emscripten__internal__VectorAccess_std____2__vector_int_2c_20std____2__allocator_int__20__20___get_28std____2__vector_int_2c_20std____2__allocator_int__20__20const__2c_20unsigned_20long_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  if (std____2__vector_int_2c_20std____2__allocator_int__20___size_28_29_20const($1) >>> 0 > $2 >>> 0) {
   emscripten__val__val_int_20const___28int_20const__29($0, std____2__vector_int_2c_20std____2__allocator_int__20___operator_5b_5d_28unsigned_20long_29_20const($1, $2));
   return;
  }
  emscripten__val__undefined_28_29($0);
 }
 
 function void_20emscripten__internal__RegisterClassMethod_emscripten__val_20_28__29_28std____2__vector_int_2c_20std____2__allocator_int__20__20const__2c_20unsigned_20long_29___invoke_std____2__vector_int_2c_20std____2__allocator_int__20__20__28char_20const__2c_20emscripten__val_20_28__29_28std____2__vector_int_2c_20std____2__allocator_int__20__20const__2c_20unsigned_20long_29_29() {
  var $0 = 0, $1 = 0;
  $0 = global$0 - 16 | 0;
  $1 = $0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  HEAP32[$0 + 12 >> 2] = 493;
  _embind_register_class_function(4552, 4394, 3, 4756, 4796, 697, emscripten__val_20_28__emscripten__internal__getContext_emscripten__val_20_28__29_28std____2__vector_int_2c_20std____2__allocator_int__20__20const__2c_20unsigned_20long_29__28emscripten__val_20_28__20const__29_28std____2__vector_int_2c_20std____2__allocator_int__20__20const__2c_20unsigned_20long_29_29_29_28std____2__vector_int_2c_20std____2__allocator_int__20__20const__2c_20unsigned_20long_29($0 + 12 | 0) | 0, 0);
  $0 = $0 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function emscripten__internal__VectorAccess_std____2__vector_int_2c_20std____2__allocator_int__20__20___set_28std____2__vector_int_2c_20std____2__allocator_int__20___2c_20unsigned_20long_2c_20int_20const__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $2 = HEAP32[$2 >> 2];
  HEAP32[std____2__vector_int_2c_20std____2__allocator_int__20___operator_5b_5d_28unsigned_20long_29_20const($0, $1) >> 2] = $2;
  return 1;
 }
 
 function void_20emscripten__internal__RegisterClassMethod_bool_20_28__29_28std____2__vector_int_2c_20std____2__allocator_int__20___2c_20unsigned_20long_2c_20int_20const__29___invoke_std____2__vector_int_2c_20std____2__allocator_int__20__20__28char_20const__2c_20bool_20_28__29_28std____2__vector_int_2c_20std____2__allocator_int__20___2c_20unsigned_20long_2c_20int_20const__29_29() {
  var $0 = 0, $1 = 0;
  $0 = global$0 - 16 | 0;
  $1 = $0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  HEAP32[$0 + 12 >> 2] = 494;
  _embind_register_class_function(4552, 4398, 4, 4816, 4832, 698, emscripten__val_20_28__emscripten__internal__getContext_emscripten__val_20_28__29_28std____2__vector_int_2c_20std____2__allocator_int__20__20const__2c_20unsigned_20long_29__28emscripten__val_20_28__20const__29_28std____2__vector_int_2c_20std____2__allocator_int__20__20const__2c_20unsigned_20long_29_29_29_28std____2__vector_int_2c_20std____2__allocator_int__20__20const__2c_20unsigned_20long_29($0 + 12 | 0) | 0, 0);
  $0 = $0 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function void_20const__20emscripten__internal__getActualType_std____2__vector_double_2c_20std____2__allocator_double__20__20__28std____2__vector_double_2c_20std____2__allocator_double__20___29($0) {
  $0 = $0 | 0;
  return 4944;
 }
 
 function void_20emscripten__internal__raw_destructor_std____2__vector_double_2c_20std____2__allocator_double__20__20__28std____2__vector_double_2c_20std____2__allocator_double__20___29($0) {
  $0 = $0 | 0;
  if ($0) {
   dlfree(std____2__vector_double_2c_20std____2__allocator_double__20____vector_28_29($0))
  }
 }
 
 function void_20emscripten__internal__RegisterClassConstructor_std____2__vector_double_2c_20std____2__allocator_double__20___20_28__29_28_29___invoke_std____2__vector_double_2c_20std____2__allocator_double__20__20__28std____2__vector_double_2c_20std____2__allocator_double__20___20_28__29_28_29_29() {
  var $0 = 0, $1 = 0;
  $0 = global$0 - 16 | 0;
  $1 = $0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  _embind_register_class_constructor(4944, 1, 5080, 4688, 699, 497);
  $0 = $0 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function std____2__vector_double_2c_20std____2__allocator_double__20___push_back_28double_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0;
  $2 = global$0 - 16 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  label$2 : {
   if (HEAP32[$0 + 4 >> 2] != HEAP32[std____2____vector_base_double_2c_20std____2__allocator_double__20_____alloc_28_29($0) >> 2]) {
    void_20std____2__allocator_traits_std____2__allocator_double__20___construct_double_2c_20double_20const___28std____2__allocator_double___2c_20double__2c_20double_20const__29(std____2____vector_base_double_2c_20std____2__allocator_double__20_____alloc_28_29($0), HEAP32[$0 + 4 >> 2], $1);
    HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + 8;
    break label$2;
   }
   void_20std____2__vector_double_2c_20std____2__allocator_double__20_____push_back_slow_path_double_20const___28double_20const__29($0, $1);
  }
  $0 = $2 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function void_20emscripten__internal__RegisterClassMethod_void_20_28std____2__vector_double_2c_20std____2__allocator_double__20_____29_28double_20const__29___invoke_std____2__vector_double_2c_20std____2__allocator_double__20__20__28char_20const__2c_20void_20_28std____2__vector_double_2c_20std____2__allocator_double__20_____29_28double_20const__29_29($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  $2 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 12 >> 2] = $2;
  _embind_register_class_function(4944, 4377, 3, 5084, 5096, 700, void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____emscripten__internal__getContext_void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28int_20const__29__28void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28int_20const__29_29_29_28int_20const__29($1 + 8 | 0) | 0, 0);
  $0 = $1 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function std____2__vector_double_2c_20std____2__allocator_double__20___resize_28unsigned_20long_2c_20double_20const__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = std____2__vector_double_2c_20std____2__allocator_double__20___size_28_29_20const($0);
  if ($3 >>> 0 < $1 >>> 0) {
   std____2__vector_double_2c_20std____2__allocator_double__20_____append_28unsigned_20long_2c_20double_20const__29($0, $1 - $3 | 0, $2);
   return;
  }
  if ($3 >>> 0 > $1 >>> 0) {
   std____2__vector_double_2c_20std____2__allocator_double__20_____destruct_at_end_28double__29($0, HEAP32[$0 >> 2] + ($1 << 3) | 0)
  }
 }
 
 function void_20emscripten__internal__RegisterClassMethod_void_20_28std____2__vector_double_2c_20std____2__allocator_double__20_____29_28unsigned_20long_2c_20double_20const__29___invoke_std____2__vector_double_2c_20std____2__allocator_double__20__20__28char_20const__2c_20void_20_28std____2__vector_double_2c_20std____2__allocator_double__20_____29_28unsigned_20long_2c_20double_20const__29_29($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  $2 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 12 >> 2] = $2;
  _embind_register_class_function(4944, 4387, 4, 5104, 5120, 701, void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____emscripten__internal__getContext_void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28int_20const__29__28void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28int_20const__29_29_29_28int_20const__29($1 + 8 | 0) | 0, 0);
  $0 = $1 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function void_20emscripten__internal__RegisterClassMethod_unsigned_20long_20_28std____2__vector_double_2c_20std____2__allocator_double__20_____29_28_29_20const___invoke_std____2__vector_double_2c_20std____2__allocator_double__20__20__28char_20const__2c_20unsigned_20long_20_28std____2__vector_double_2c_20std____2__allocator_double__20_____29_28_29_20const_29($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  $2 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 12 >> 2] = $2;
  _embind_register_class_function(4944, 3317, 2, 5128, 4752, 702, void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____emscripten__internal__getContext_void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28int_20const__29__28void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28int_20const__29_29_29_28int_20const__29($1 + 8 | 0) | 0, 0);
  $0 = $1 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function emscripten__internal__VectorAccess_std____2__vector_double_2c_20std____2__allocator_double__20__20___get_28std____2__vector_double_2c_20std____2__allocator_double__20__20const__2c_20unsigned_20long_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  if (std____2__vector_double_2c_20std____2__allocator_double__20___size_28_29_20const($1) >>> 0 > $2 >>> 0) {
   emscripten__val__val_double_20const___28double_20const__29($0, std____2__vector_double_2c_20std____2__allocator_double__20___operator_5b_5d_28unsigned_20long_29($1, $2));
   return;
  }
  emscripten__val__undefined_28_29($0);
 }
 
 function void_20emscripten__internal__RegisterClassMethod_emscripten__val_20_28__29_28std____2__vector_double_2c_20std____2__allocator_double__20__20const__2c_20unsigned_20long_29___invoke_std____2__vector_double_2c_20std____2__allocator_double__20__20__28char_20const__2c_20emscripten__val_20_28__29_28std____2__vector_double_2c_20std____2__allocator_double__20__20const__2c_20unsigned_20long_29_29() {
  var $0 = 0, $1 = 0;
  $0 = global$0 - 16 | 0;
  $1 = $0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  HEAP32[$0 + 12 >> 2] = 501;
  _embind_register_class_function(4944, 4394, 3, 5136, 4796, 703, emscripten__val_20_28__emscripten__internal__getContext_emscripten__val_20_28__29_28std____2__vector_int_2c_20std____2__allocator_int__20__20const__2c_20unsigned_20long_29__28emscripten__val_20_28__20const__29_28std____2__vector_int_2c_20std____2__allocator_int__20__20const__2c_20unsigned_20long_29_29_29_28std____2__vector_int_2c_20std____2__allocator_int__20__20const__2c_20unsigned_20long_29($0 + 12 | 0) | 0, 0);
  $0 = $0 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function emscripten__internal__VectorAccess_std____2__vector_double_2c_20std____2__allocator_double__20__20___set_28std____2__vector_double_2c_20std____2__allocator_double__20___2c_20unsigned_20long_2c_20double_20const__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = HEAP32[$2 + 4 >> 2];
  $2 = HEAP32[$2 >> 2];
  $0 = std____2__vector_double_2c_20std____2__allocator_double__20___operator_5b_5d_28unsigned_20long_29($0, $1);
  HEAP32[$0 >> 2] = $2;
  HEAP32[$0 + 4 >> 2] = $3;
  return 1;
 }
 
 function void_20emscripten__internal__RegisterClassMethod_bool_20_28__29_28std____2__vector_double_2c_20std____2__allocator_double__20___2c_20unsigned_20long_2c_20double_20const__29___invoke_std____2__vector_double_2c_20std____2__allocator_double__20__20__28char_20const__2c_20bool_20_28__29_28std____2__vector_double_2c_20std____2__allocator_double__20___2c_20unsigned_20long_2c_20double_20const__29_29() {
  var $0 = 0, $1 = 0;
  $0 = global$0 - 16 | 0;
  $1 = $0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  HEAP32[$0 + 12 >> 2] = 502;
  _embind_register_class_function(4944, 4398, 4, 5152, 5168, 704, emscripten__val_20_28__emscripten__internal__getContext_emscripten__val_20_28__29_28std____2__vector_int_2c_20std____2__allocator_int__20__20const__2c_20unsigned_20long_29__28emscripten__val_20_28__20const__29_28std____2__vector_int_2c_20std____2__allocator_int__20__20const__2c_20unsigned_20long_29_29_29_28std____2__vector_int_2c_20std____2__allocator_int__20__20const__2c_20unsigned_20long_29($0 + 12 | 0) | 0, 0);
  $0 = $0 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function void_20const__20emscripten__internal__getActualType_std____2__vector_char_2c_20std____2__allocator_char__20__20__28std____2__vector_char_2c_20std____2__allocator_char__20___29($0) {
  $0 = $0 | 0;
  return 5280;
 }
 
 function void_20emscripten__internal__raw_destructor_std____2__vector_char_2c_20std____2__allocator_char__20__20__28std____2__vector_char_2c_20std____2__allocator_char__20___29($0) {
  $0 = $0 | 0;
  if ($0) {
   dlfree(std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20____vector_28_29($0))
  }
 }
 
 function void_20emscripten__internal__RegisterClassConstructor_std____2__vector_char_2c_20std____2__allocator_char__20___20_28__29_28_29___invoke_std____2__vector_char_2c_20std____2__allocator_char__20__20__28std____2__vector_char_2c_20std____2__allocator_char__20___20_28__29_28_29_29() {
  var $0 = 0, $1 = 0;
  $0 = global$0 - 16 | 0;
  $1 = $0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  _embind_register_class_constructor(5280, 1, 5416, 4688, 705, 505);
  $0 = $0 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function std____2__vector_char_2c_20std____2__allocator_char__20___push_back_28char_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0;
  $2 = global$0 - 16 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  label$2 : {
   if (HEAP32[$0 + 4 >> 2] != HEAP32[std____2____vector_base_double_2c_20std____2__allocator_double__20_____alloc_28_29($0) >> 2]) {
    void_20std____2__allocator_traits_std____2__allocator_char__20___construct_char_2c_20char_20const___28std____2__allocator_char___2c_20char__2c_20char_20const__29(std____2____vector_base_double_2c_20std____2__allocator_double__20_____alloc_28_29($0), HEAP32[$0 + 4 >> 2], $1);
    HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + 1;
    break label$2;
   }
   void_20std____2__vector_char_2c_20std____2__allocator_char__20_____push_back_slow_path_char_20const___28char_20const__29($0, $1);
  }
  $0 = $2 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function void_20emscripten__internal__RegisterClassMethod_void_20_28std____2__vector_char_2c_20std____2__allocator_char__20_____29_28char_20const__29___invoke_std____2__vector_char_2c_20std____2__allocator_char__20__20__28char_20const__2c_20void_20_28std____2__vector_char_2c_20std____2__allocator_char__20_____29_28char_20const__29_29($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  $2 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 12 >> 2] = $2;
  _embind_register_class_function(5280, 4377, 3, 5420, 4712, 706, void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____emscripten__internal__getContext_void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28int_20const__29__28void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28int_20const__29_29_29_28int_20const__29($1 + 8 | 0) | 0, 0);
  $0 = $1 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function std____2__vector_char_2c_20std____2__allocator_char__20___resize_28unsigned_20long_2c_20char_20const__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20___size_28_29_20const($0);
  if ($3 >>> 0 < $1 >>> 0) {
   std____2__vector_char_2c_20std____2__allocator_char__20_____append_28unsigned_20long_2c_20char_20const__29($0, $1 - $3 | 0, $2);
   return;
  }
  if ($3 >>> 0 > $1 >>> 0) {
   std____2__vector_char_2c_20std____2__allocator_char__20_____destruct_at_end_28char__29($0, HEAP32[$0 >> 2] + $1 | 0)
  }
 }
 
 function void_20emscripten__internal__RegisterClassMethod_void_20_28std____2__vector_char_2c_20std____2__allocator_char__20_____29_28unsigned_20long_2c_20char_20const__29___invoke_std____2__vector_char_2c_20std____2__allocator_char__20__20__28char_20const__2c_20void_20_28std____2__vector_char_2c_20std____2__allocator_char__20_____29_28unsigned_20long_2c_20char_20const__29_29($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  $2 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 12 >> 2] = $2;
  _embind_register_class_function(5280, 4387, 4, 5440, 4736, 707, void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____emscripten__internal__getContext_void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28int_20const__29__28void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28int_20const__29_29_29_28int_20const__29($1 + 8 | 0) | 0, 0);
  $0 = $1 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function void_20emscripten__internal__RegisterClassMethod_unsigned_20long_20_28std____2__vector_char_2c_20std____2__allocator_char__20_____29_28_29_20const___invoke_std____2__vector_char_2c_20std____2__allocator_char__20__20__28char_20const__2c_20unsigned_20long_20_28std____2__vector_char_2c_20std____2__allocator_char__20_____29_28_29_20const_29($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  $2 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 12 >> 2] = $2;
  _embind_register_class_function(5280, 3317, 2, 5456, 4752, 708, void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____emscripten__internal__getContext_void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28int_20const__29__28void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28int_20const__29_29_29_28int_20const__29($1 + 8 | 0) | 0, 0);
  $0 = $1 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function emscripten__internal__VectorAccess_std____2__vector_char_2c_20std____2__allocator_char__20__20___get_28std____2__vector_char_2c_20std____2__allocator_char__20__20const__2c_20unsigned_20long_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  if (std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20___size_28_29_20const($1) >>> 0 > $2 >>> 0) {
   emscripten__val__val_char_20const___28char_20const__29($0, std____2__vector_char_2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29_20const($1, $2));
   return;
  }
  emscripten__val__undefined_28_29($0);
 }
 
 function void_20emscripten__internal__RegisterClassMethod_emscripten__val_20_28__29_28std____2__vector_char_2c_20std____2__allocator_char__20__20const__2c_20unsigned_20long_29___invoke_std____2__vector_char_2c_20std____2__allocator_char__20__20__28char_20const__2c_20emscripten__val_20_28__29_28std____2__vector_char_2c_20std____2__allocator_char__20__20const__2c_20unsigned_20long_29_29() {
  var $0 = 0, $1 = 0;
  $0 = global$0 - 16 | 0;
  $1 = $0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  HEAP32[$0 + 12 >> 2] = 509;
  _embind_register_class_function(5280, 4394, 3, 5464, 4796, 709, emscripten__val_20_28__emscripten__internal__getContext_emscripten__val_20_28__29_28std____2__vector_int_2c_20std____2__allocator_int__20__20const__2c_20unsigned_20long_29__28emscripten__val_20_28__20const__29_28std____2__vector_int_2c_20std____2__allocator_int__20__20const__2c_20unsigned_20long_29_29_29_28std____2__vector_int_2c_20std____2__allocator_int__20__20const__2c_20unsigned_20long_29($0 + 12 | 0) | 0, 0);
  $0 = $0 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function emscripten__internal__VectorAccess_std____2__vector_char_2c_20std____2__allocator_char__20__20___set_28std____2__vector_char_2c_20std____2__allocator_char__20___2c_20unsigned_20long_2c_20char_20const__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $2 = HEAPU8[$2 | 0];
  HEAP8[std____2__vector_char_2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29_20const($0, $1) | 0] = $2;
  return 1;
 }
 
 function void_20emscripten__internal__RegisterClassMethod_bool_20_28__29_28std____2__vector_char_2c_20std____2__allocator_char__20___2c_20unsigned_20long_2c_20char_20const__29___invoke_std____2__vector_char_2c_20std____2__allocator_char__20__20__28char_20const__2c_20bool_20_28__29_28std____2__vector_char_2c_20std____2__allocator_char__20___2c_20unsigned_20long_2c_20char_20const__29_29() {
  var $0 = 0, $1 = 0;
  $0 = global$0 - 16 | 0;
  $1 = $0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  HEAP32[$0 + 12 >> 2] = 510;
  _embind_register_class_function(5280, 4398, 4, 5488, 4832, 710, emscripten__val_20_28__emscripten__internal__getContext_emscripten__val_20_28__29_28std____2__vector_int_2c_20std____2__allocator_int__20__20const__2c_20unsigned_20long_29__28emscripten__val_20_28__20const__29_28std____2__vector_int_2c_20std____2__allocator_int__20__20const__2c_20unsigned_20long_29_29_29_28std____2__vector_int_2c_20std____2__allocator_int__20__20const__2c_20unsigned_20long_29($0 + 12 | 0) | 0, 0);
  $0 = $0 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function void_20const__20emscripten__internal__getActualType_std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20__20__28std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20___29($0) {
  $0 = $0 | 0;
  return 5608;
 }
 
 function std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20___20emscripten__internal__operator_new_std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20__20__28_29() {
  return std____2__vector_short_2c_20std____2__allocator_short__20___vector_28_29(operator_20new_28unsigned_20long_29(12)) | 0;
 }
 
 function void_20emscripten__internal__RegisterClassConstructor_std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20___20_28__29_28_29___invoke_std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20__20__28std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20___20_28__29_28_29_29() {
  var $0 = 0, $1 = 0;
  $0 = global$0 - 16 | 0;
  $1 = $0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  _embind_register_class_constructor(5608, 1, 5744, 4688, 711, 513);
  $0 = $0 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20___push_back_28unsigned_20char_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0;
  $2 = global$0 - 16 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  label$2 : {
   if (HEAP32[$0 + 4 >> 2] != HEAP32[std____2____vector_base_double_2c_20std____2__allocator_double__20_____alloc_28_29($0) >> 2]) {
    void_20std____2__allocator_traits_std____2__allocator_char__20___construct_char_2c_20char_20const___28std____2__allocator_char___2c_20char__2c_20char_20const__29(std____2____vector_base_double_2c_20std____2__allocator_double__20_____alloc_28_29($0), HEAP32[$0 + 4 >> 2], $1);
    HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + 1;
    break label$2;
   }
   void_20std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20_____push_back_slow_path_unsigned_20char_20const___28unsigned_20char_20const__29($0, $1);
  }
  $0 = $2 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function void_20emscripten__internal__RegisterClassMethod_void_20_28std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20_____29_28unsigned_20char_20const__29___invoke_std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20__20__28char_20const__2c_20void_20_28std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20_____29_28unsigned_20char_20const__29_29($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  $2 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 12 >> 2] = $2;
  _embind_register_class_function(5608, 4377, 3, 5748, 4712, 712, void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____emscripten__internal__getContext_void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28int_20const__29__28void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28int_20const__29_29_29_28int_20const__29($1 + 8 | 0) | 0, 0);
  $0 = $1 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20___resize_28unsigned_20long_2c_20unsigned_20char_20const__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20___size_28_29_20const($0);
  if ($3 >>> 0 < $1 >>> 0) {
   std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20_____append_28unsigned_20long_2c_20unsigned_20char_20const__29($0, $1 - $3 | 0, $2);
   return;
  }
  if ($3 >>> 0 > $1 >>> 0) {
   std____2__vector_char_2c_20std____2__allocator_char__20_____destruct_at_end_28char__29($0, HEAP32[$0 >> 2] + $1 | 0)
  }
 }
 
 function void_20emscripten__internal__RegisterClassMethod_void_20_28std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20_____29_28unsigned_20long_2c_20unsigned_20char_20const__29___invoke_std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20__20__28char_20const__2c_20void_20_28std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20_____29_28unsigned_20long_2c_20unsigned_20char_20const__29_29($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  $2 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 12 >> 2] = $2;
  _embind_register_class_function(5608, 4387, 4, 5760, 4736, 713, void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____emscripten__internal__getContext_void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28int_20const__29__28void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28int_20const__29_29_29_28int_20const__29($1 + 8 | 0) | 0, 0);
  $0 = $1 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function void_20emscripten__internal__RegisterClassMethod_unsigned_20long_20_28std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20_____29_28_29_20const___invoke_std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20__20__28char_20const__2c_20unsigned_20long_20_28std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20_____29_28_29_20const_29($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  $2 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 12 >> 2] = $2;
  _embind_register_class_function(5608, 3317, 2, 5776, 4752, 714, void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____emscripten__internal__getContext_void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28int_20const__29__28void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28int_20const__29_29_29_28int_20const__29($1 + 8 | 0) | 0, 0);
  $0 = $1 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function emscripten__internal__VectorAccess_std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20__20___get_28std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20__20const__2c_20unsigned_20long_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  if (std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20___size_28_29_20const($1) >>> 0 > $2 >>> 0) {
   emscripten__val__val_unsigned_20char_20const___28unsigned_20char_20const__29($0, std____2__vector_char_2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29_20const($1, $2));
   return;
  }
  emscripten__val__undefined_28_29($0);
 }
 
 function void_20emscripten__internal__RegisterClassMethod_emscripten__val_20_28__29_28std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20__20const__2c_20unsigned_20long_29___invoke_std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20__20__28char_20const__2c_20emscripten__val_20_28__29_28std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20__20const__2c_20unsigned_20long_29_29() {
  var $0 = 0, $1 = 0;
  $0 = global$0 - 16 | 0;
  $1 = $0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  HEAP32[$0 + 12 >> 2] = 517;
  _embind_register_class_function(5608, 4394, 3, 5784, 4796, 715, emscripten__val_20_28__emscripten__internal__getContext_emscripten__val_20_28__29_28std____2__vector_int_2c_20std____2__allocator_int__20__20const__2c_20unsigned_20long_29__28emscripten__val_20_28__20const__29_28std____2__vector_int_2c_20std____2__allocator_int__20__20const__2c_20unsigned_20long_29_29_29_28std____2__vector_int_2c_20std____2__allocator_int__20__20const__2c_20unsigned_20long_29($0 + 12 | 0) | 0, 0);
  $0 = $0 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function void_20emscripten__internal__RegisterClassMethod_bool_20_28__29_28std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20___2c_20unsigned_20long_2c_20unsigned_20char_20const__29___invoke_std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20__20__28char_20const__2c_20bool_20_28__29_28std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20___2c_20unsigned_20long_2c_20unsigned_20char_20const__29_29() {
  var $0 = 0, $1 = 0;
  $0 = global$0 - 16 | 0;
  $1 = $0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  HEAP32[$0 + 12 >> 2] = 518;
  _embind_register_class_function(5608, 4398, 4, 5808, 4832, 716, emscripten__val_20_28__emscripten__internal__getContext_emscripten__val_20_28__29_28std____2__vector_int_2c_20std____2__allocator_int__20__20const__2c_20unsigned_20long_29__28emscripten__val_20_28__20const__29_28std____2__vector_int_2c_20std____2__allocator_int__20__20const__2c_20unsigned_20long_29_29_29_28std____2__vector_int_2c_20std____2__allocator_int__20__20const__2c_20unsigned_20long_29($0 + 12 | 0) | 0, 0);
  $0 = $0 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function void_20const__20emscripten__internal__getActualType_std____2__vector_float_2c_20std____2__allocator_float__20__20__28std____2__vector_float_2c_20std____2__allocator_float__20___29($0) {
  $0 = $0 | 0;
  return 5928;
 }
 
 function void_20emscripten__internal__raw_destructor_std____2__vector_float_2c_20std____2__allocator_float__20__20__28std____2__vector_float_2c_20std____2__allocator_float__20___29($0) {
  $0 = $0 | 0;
  if ($0) {
   dlfree(std____2__vector_float_2c_20std____2__allocator_float__20____vector_28_29($0))
  }
 }
 
 function void_20emscripten__internal__RegisterClassConstructor_std____2__vector_float_2c_20std____2__allocator_float__20___20_28__29_28_29___invoke_std____2__vector_float_2c_20std____2__allocator_float__20__20__28std____2__vector_float_2c_20std____2__allocator_float__20___20_28__29_28_29_29() {
  var $0 = 0, $1 = 0;
  $0 = global$0 - 16 | 0;
  $1 = $0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  _embind_register_class_constructor(5928, 1, 6064, 4688, 717, 521);
  $0 = $0 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function std____2__vector_float_2c_20std____2__allocator_float__20___push_back_28float_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0;
  $2 = global$0 - 16 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  label$2 : {
   if (HEAP32[$0 + 4 >> 2] != HEAP32[std____2____vector_base_double_2c_20std____2__allocator_double__20_____alloc_28_29($0) >> 2]) {
    void_20std____2__allocator_traits_std____2__allocator_int__20___construct_int_2c_20int_20const___28std____2__allocator_int___2c_20int__2c_20int_20const__29(std____2____vector_base_double_2c_20std____2__allocator_double__20_____alloc_28_29($0), HEAP32[$0 + 4 >> 2], $1);
    HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + 4;
    break label$2;
   }
   void_20std____2__vector_float_2c_20std____2__allocator_float__20_____push_back_slow_path_float_20const___28float_20const__29($0, $1);
  }
  $0 = $2 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function void_20emscripten__internal__RegisterClassMethod_void_20_28std____2__vector_float_2c_20std____2__allocator_float__20_____29_28float_20const__29___invoke_std____2__vector_float_2c_20std____2__allocator_float__20__20__28char_20const__2c_20void_20_28std____2__vector_float_2c_20std____2__allocator_float__20_____29_28float_20const__29_29($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  $2 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 12 >> 2] = $2;
  _embind_register_class_function(5928, 4377, 3, 6068, 6080, 718, void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____emscripten__internal__getContext_void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28int_20const__29__28void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28int_20const__29_29_29_28int_20const__29($1 + 8 | 0) | 0, 0);
  $0 = $1 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function std____2__vector_float_2c_20std____2__allocator_float__20___resize_28unsigned_20long_2c_20float_20const__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = std____2__vector_int_2c_20std____2__allocator_int__20___size_28_29_20const($0);
  if ($3 >>> 0 < $1 >>> 0) {
   std____2__vector_float_2c_20std____2__allocator_float__20_____append_28unsigned_20long_2c_20float_20const__29($0, $1 - $3 | 0, $2);
   return;
  }
  if ($3 >>> 0 > $1 >>> 0) {
   std____2__vector_float_2c_20std____2__allocator_float__20_____destruct_at_end_28float__29($0, HEAP32[$0 >> 2] + ($1 << 2) | 0)
  }
 }
 
 function void_20emscripten__internal__RegisterClassMethod_void_20_28std____2__vector_float_2c_20std____2__allocator_float__20_____29_28unsigned_20long_2c_20float_20const__29___invoke_std____2__vector_float_2c_20std____2__allocator_float__20__20__28char_20const__2c_20void_20_28std____2__vector_float_2c_20std____2__allocator_float__20_____29_28unsigned_20long_2c_20float_20const__29_29($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  $2 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 12 >> 2] = $2;
  _embind_register_class_function(5928, 4387, 4, 6096, 6112, 719, void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____emscripten__internal__getContext_void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28int_20const__29__28void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28int_20const__29_29_29_28int_20const__29($1 + 8 | 0) | 0, 0);
  $0 = $1 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function void_20emscripten__internal__RegisterClassMethod_unsigned_20long_20_28std____2__vector_float_2c_20std____2__allocator_float__20_____29_28_29_20const___invoke_std____2__vector_float_2c_20std____2__allocator_float__20__20__28char_20const__2c_20unsigned_20long_20_28std____2__vector_float_2c_20std____2__allocator_float__20_____29_28_29_20const_29($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  $2 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 12 >> 2] = $2;
  _embind_register_class_function(5928, 3317, 2, 6120, 4752, 720, void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____emscripten__internal__getContext_void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28int_20const__29__28void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28int_20const__29_29_29_28int_20const__29($1 + 8 | 0) | 0, 0);
  $0 = $1 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function emscripten__internal__VectorAccess_std____2__vector_float_2c_20std____2__allocator_float__20__20___get_28std____2__vector_float_2c_20std____2__allocator_float__20__20const__2c_20unsigned_20long_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  if (std____2__vector_int_2c_20std____2__allocator_int__20___size_28_29_20const($1) >>> 0 > $2 >>> 0) {
   emscripten__val__val_float_20const___28float_20const__29($0, std____2__vector_int_2c_20std____2__allocator_int__20___operator_5b_5d_28unsigned_20long_29_20const($1, $2));
   return;
  }
  emscripten__val__undefined_28_29($0);
 }
 
 function void_20emscripten__internal__RegisterClassMethod_emscripten__val_20_28__29_28std____2__vector_float_2c_20std____2__allocator_float__20__20const__2c_20unsigned_20long_29___invoke_std____2__vector_float_2c_20std____2__allocator_float__20__20__28char_20const__2c_20emscripten__val_20_28__29_28std____2__vector_float_2c_20std____2__allocator_float__20__20const__2c_20unsigned_20long_29_29() {
  var $0 = 0, $1 = 0;
  $0 = global$0 - 16 | 0;
  $1 = $0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  HEAP32[$0 + 12 >> 2] = 525;
  _embind_register_class_function(5928, 4394, 3, 6128, 4796, 721, emscripten__val_20_28__emscripten__internal__getContext_emscripten__val_20_28__29_28std____2__vector_int_2c_20std____2__allocator_int__20__20const__2c_20unsigned_20long_29__28emscripten__val_20_28__20const__29_28std____2__vector_int_2c_20std____2__allocator_int__20__20const__2c_20unsigned_20long_29_29_29_28std____2__vector_int_2c_20std____2__allocator_int__20__20const__2c_20unsigned_20long_29($0 + 12 | 0) | 0, 0);
  $0 = $0 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function void_20emscripten__internal__RegisterClassMethod_bool_20_28__29_28std____2__vector_float_2c_20std____2__allocator_float__20___2c_20unsigned_20long_2c_20float_20const__29___invoke_std____2__vector_float_2c_20std____2__allocator_float__20__20__28char_20const__2c_20bool_20_28__29_28std____2__vector_float_2c_20std____2__allocator_float__20___2c_20unsigned_20long_2c_20float_20const__29_29() {
  var $0 = 0, $1 = 0;
  $0 = global$0 - 16 | 0;
  $1 = $0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  HEAP32[$0 + 12 >> 2] = 526;
  _embind_register_class_function(5928, 4398, 4, 6144, 6160, 722, emscripten__val_20_28__emscripten__internal__getContext_emscripten__val_20_28__29_28std____2__vector_int_2c_20std____2__allocator_int__20__20const__2c_20unsigned_20long_29__28emscripten__val_20_28__20const__29_28std____2__vector_int_2c_20std____2__allocator_int__20__20const__2c_20unsigned_20long_29_29_29_28std____2__vector_int_2c_20std____2__allocator_int__20__20const__2c_20unsigned_20long_29($0 + 12 | 0) | 0, 0);
  $0 = $0 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function std____2__vector_float_2c_20std____2__allocator_float__20___clear_28_29($0) {
  var $1 = 0;
  $1 = std____2__vector_int_2c_20std____2__allocator_int__20___size_28_29_20const($0);
  std____2____vector_base_float_2c_20std____2__allocator_float__20___clear_28_29($0);
  HEAP32[16874] = 0;
  std____2__vector_float_2c_20std____2__allocator_float__20_____annotate_shrink_28unsigned_20long_29_20const($0, $1);
  $0 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($0 | 0) != 1) {
   return
  }
  $0 = __cxa_find_matching_catch_3(0) | 0;
  getTempRet0() | 0;
  __clang_call_terminate($0);
  abort();
 }
 
 function maxiLine__reset_28_29($0) {
  HEAP8[$0 + 48 | 0] = 0;
  HEAP32[$0 + 40 >> 2] = 0;
  HEAP32[$0 + 44 >> 2] = 0;
 }
 
 function std____2__vector_double_2c_20std____2__allocator_double__20___vector_28unsigned_20long_2c_20double_20const__29($0, $1, $2) {
  var $3 = 0, $4 = 0;
  $3 = std____2____vector_base_double_2c_20std____2__allocator_double__20_____vector_base_28_29($0);
  label$1 : {
   if (!$1) {
    break label$1
   }
   HEAP32[16874] = 0;
   __invoke_void___22class_std____2__vector_13_22__i32(39, $0 | 0, $1 | 0);
   $4 = HEAP32[16874];
   HEAP32[16874] = 0;
   if (($4 | 0) != 1) {
    HEAP32[16874] = 0;
    __invoke_void_i8__i32_i32(724, $0 | 0, $1 | 0, $2 | 0);
    $1 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($1 | 0) != 1) {
     break label$1
    }
   }
   $0 = __cxa_find_matching_catch_2() | 0;
   getTempRet0() | 0;
   std____2____vector_base_double_2c_20std____2__allocator_double__20______vector_base_28_29($3);
   __resumeException($0 | 0);
   abort();
  }
  return $0;
 }
 
 function std____2__vector_double_2c_20std____2__allocator_double__20___vector_28std__initializer_list_double__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0;
  $3 = std____2____vector_base_double_2c_20std____2__allocator_double__20_____vector_base_28_29($0);
  label$1 : {
   if (!HEAP32[$1 + 4 >> 2]) {
    break label$1
   }
   $2 = HEAP32[$1 + 4 >> 2];
   HEAP32[16874] = 0;
   __invoke_void___22class_std____2__vector_13_22__i32(39, $0 | 0, $2 | 0);
   $2 = HEAP32[16874];
   HEAP32[16874] = 0;
   if (($2 | 0) != 1) {
    $2 = HEAP32[$1 >> 2];
    $4 = HEAP32[$1 >> 2] + (HEAP32[$1 + 4 >> 2] << 3) | 0;
    $1 = HEAP32[$1 + 4 >> 2];
    HEAP32[16874] = 0;
    __invoke_void___22class_std____2__vector_22__double__double__i32(725, $0 | 0, $2 | 0, $4 | 0, $1 | 0);
    $1 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($1 | 0) != 1) {
     break label$1
    }
   }
   $0 = __cxa_find_matching_catch_2() | 0;
   getTempRet0() | 0;
   std____2____vector_base_double_2c_20std____2__allocator_double__20______vector_base_28_29($3);
   __resumeException($0 | 0);
   abort();
  }
  return $0 | 0;
 }
 
 function double_20const__20std____2__min_double__28double_20const__2c_20double_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return double_20const__20std____2__min_double_2c_20std____2____less_double_2c_20double__20__28double_20const__2c_20double_20const__2c_20std____2____less_double_2c_20double__29($0, $1) | 0;
 }
 
 function double_20const__20std____2__max_double__28double_20const__2c_20double_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return double_20const__20std____2__max_double_2c_20std____2____less_double_2c_20double__20__28double_20const__2c_20double_20const__2c_20std____2____less_double_2c_20double__29($0, $1) | 0;
 }
 
 function maxiSVF__setParams_28double_2c_20double_29($0, $1, $2) {
  var $3 = 0.0, $4 = 0;
  HEAPF64[$0 + 96 >> 3] = $2;
  HEAPF64[$0 + 88 >> 3] = $1;
  $4 = HEAP32[12865];
  $3 = $2 == 0.0 ? 0.0 : 1.0 / $2;
  HEAPF64[$0 + 40 >> 3] = $3;
  HEAPF64[$0 + 32 >> 3] = $3;
  $2 = tan($1 * 3.141592653589793 / +($4 | 0));
  HEAPF64[$0 + 24 >> 3] = $2;
  $3 = $3 + $2;
  $1 = $2 / ($2 * $3 + 1.0);
  HEAPF64[$0 + 56 >> 3] = $1;
  HEAPF64[$0 + 48 >> 3] = $1;
  HEAPF64[$0 + 80 >> 3] = $1 + $1;
  HEAPF64[$0 + 72 >> 3] = $2 * $1;
  HEAPF64[$0 + 64 >> 3] = ($3 + $3) * $1;
 }
 
 function std____2__vector_double_2c_20std____2__allocator_double__20___begin_28_29($0) {
  return std____2__vector_double_2c_20std____2__allocator_double__20_____make_iter_28double__29(HEAP32[$0 >> 2]);
 }
 
 function std____2__vector_double_2c_20std____2__allocator_double__20___end_28_29($0) {
  return std____2__vector_double_2c_20std____2__allocator_double__20_____make_iter_28double__29(HEAP32[$0 + 4 >> 2]);
 }
 
 function bool_20std____2__operator___double___28std____2____wrap_iter_double___20const__2c_20std____2____wrap_iter_double___20const__29($0, $1) {
  return HEAP32[$0 >> 2] == HEAP32[$1 >> 2] ^ 1;
 }
 
 function std____2____wrap_iter_double____operator___28_29($0) {
  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 8;
 }
 
 function std____2__vector_maxiKuramotoOscillator_2c_20std____2__allocator_maxiKuramotoOscillator__20___operator_5b_5d_28unsigned_20long_29($0, $1) {
  return HEAP32[$0 >> 2] + ($1 << 4) | 0;
 }
 
 function std____2__vector_double_2c_20std____2__allocator_double__20___vector_28std____2__vector_double_2c_20std____2__allocator_double__20__20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  $3 = global$0 - 16 | 0;
  $2 = $3;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  std____2____vector_base_double_2c_20std____2__allocator_double__20_____alloc_28_29($1);
  $5 = std____2____vector_base_double_2c_20std____2__allocator_double__20_____vector_base_28std____2__allocator_double____29($0, $3 + 8 | 0);
  $2 = std____2__vector_double_2c_20std____2__allocator_double__20___size_28_29_20const($1);
  label$2 : {
   if (!$2) {
    break label$2
   }
   HEAP32[16874] = 0;
   __invoke_void___22class_std____2__vector_13_22__i32(39, $0 | 0, $2 | 0);
   $4 = HEAP32[16874];
   HEAP32[16874] = 0;
   if (($4 | 0) != 1) {
    $4 = HEAP32[$1 + 4 >> 2];
    $1 = HEAP32[$1 >> 2];
    HEAP32[16874] = 0;
    __invoke_void___22class_std____2__vector_22__double__double__i32(726, $0 | 0, $1 | 0, $4 | 0, $2 | 0);
    $1 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($1 | 0) != 1) {
     break label$2
    }
   }
   $0 = __cxa_find_matching_catch_2() | 0;
   getTempRet0() | 0;
   std____2____vector_base_double_2c_20std____2__allocator_double__20______vector_base_28_29($5);
   __resumeException($0 | 0);
   abort();
  }
  $1 = $3 + 16 | 0;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  return $0 | 0;
 }
 
 function std____2____wrap_iter_maxiKuramotoOscillator____operator___28_29($0) {
  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 16;
 }
 
 function std____2__vector_maxiKuramotoOscillator_2c_20std____2__allocator_maxiKuramotoOscillator__20___size_28_29_20const($0) {
  return HEAP32[$0 + 4 >> 2] - HEAP32[$0 >> 2] >> 4;
 }
 
 function maxiMFCCAnalyser_double___calcMelFilterBank_28double_2c_20int_29($0, $1, $2) {
  var $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0;
  $4 = $1 * .5;
  if (!!(HEAPF64[$0 + 24 >> 3] > $4)) {
   HEAPF64[$0 + 24 >> 3] = $4
  }
  $5 = hzToMel_28double_29(HEAPF64[$0 + 24 >> 3]);
  $4 = hzToMel_28double_29(HEAPF64[$0 + 16 >> 3]);
  $3 = HEAP32[$0 + 4 >> 2];
  $11 = dlmalloc(($3 << 3) + 16 | 0);
  $6 = HEAP32[$0 + 4 >> 2];
  if (($6 | 0) != -2) {
   $5 = ($5 - $4) / +($3 + 1 >>> 0);
   $3 = 0;
   while (1) {
    HEAPF64[($3 << 3) + $11 >> 3] = (pow(10.0, $4 / 2595.0) + -1.0) * 700.0;
    $4 = $5 + $4;
    $3 = $3 + 1 | 0;
    $6 = HEAP32[$0 + 4 >> 2];
    if ($3 >>> 0 < $6 + 2 >>> 0) {
     continue
    }
    break;
   };
  }
  HEAP32[$0 + 36 >> 2] = dlmalloc(Math_imul($2, $6) << 3);
  if ($6 >>> 0 >= 2) {
   $12 = $1 / +($2 | 0);
   $7 = 1;
   while (1) {
    if (($2 | 0) >= 1) {
     $3 = ($7 << 3) + $11 | 0;
     $9 = HEAPF64[$3 + 8 >> 3];
     $4 = HEAPF64[$3 + -8 >> 3];
     $10 = 2.0 / ($9 - $4);
     $5 = HEAPF64[$3 >> 3];
     $13 = $10 / ($5 - $4);
     $14 = -$10 / ($9 - $5);
     $3 = 0;
     while (1) {
      $15 = HEAP32[$0 + 36 >> 2] + (Math_imul($3, $6) + $7 << 3) | 0;
      $1 = $12 * +($3 | 0);
      $8 = 0.0;
      label$8 : {
       if ($1 > $9 | $1 < $4) {
        break label$8
       }
       $8 = ($1 - $4) * $13;
       if (!!($1 < $5)) {
        break label$8
       }
       $8 = $10 + ($1 - $5) * $14;
      }
      HEAPF64[$15 >> 3] = $8;
      $3 = $3 + 1 | 0;
      if (($3 | 0) != ($2 | 0)) {
       continue
      }
      break;
     };
    }
    $7 = $7 + 1 | 0;
    if (($7 | 0) != ($6 | 0)) {
     continue
    }
    break;
   };
  }
 }
 
 function maxiMFCCAnalyser_double___createDCTCoeffs_28_29($0) {
  var $1 = 0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0;
  $1 = HEAP32[$0 + 4 >> 2];
  $3 = Math_sqrt(+($1 >>> 0));
  $4 = HEAP32[$0 + 8 >> 2];
  if ($4) {
   $6 = 1.0 / $3;
   $3 = 3.141592653589793 / +($1 >>> 0);
   $5 = HEAP32[$0 + 4 >> 2];
   $7 = Math_sqrt(2.0 / +($5 >>> 0));
   $1 = 0;
   while (1) {
    if ($5) {
     $8 = $3 * +($1 + 1 | 0);
     $2 = 0;
     while (1) {
      $9 = cos(($1 ? $8 : $3) * (+($2 | 0) + .5));
      HEAPF64[HEAP32[$0 + 44 >> 2] + (Math_imul($2, $4) + $1 << 3) >> 3] = $9 * ($1 ? $7 : $6);
      $2 = $2 + 1 | 0;
      if (($5 | 0) != ($2 | 0)) {
       continue
      }
      break;
     };
    }
    $1 = $1 + 1 | 0;
    if (($4 | 0) != ($1 | 0)) {
     continue
    }
    break;
   };
  }
 }
 
 function maxiMFCCAnalyser_double___dct_28double__29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0.0;
  $2 = HEAP32[$0 + 8 >> 2];
  if ($2) {
   $4 = memset($1, 0, $2 << 3);
   $6 = HEAP32[$0 + 4 >> 2];
   while (1) {
    if ($6) {
     $1 = HEAP32[$0 + 4 >> 2];
     $7 = $1 >>> 0 > 1 ? $1 : 1;
     $5 = ($3 << 3) + $4 | 0;
     $8 = HEAP32[$0 >> 2];
     $9 = HEAP32[$0 + 44 >> 2];
     $1 = 0;
     while (1) {
      HEAPF64[$5 >> 3] = HEAPF64[$5 >> 3] + HEAPF64[(Math_imul($1, $2) + $3 << 3) + $9 >> 3] * HEAPF64[($1 << 3) + $8 >> 3];
      $1 = $1 + 1 | 0;
      if (($7 | 0) != ($1 | 0)) {
       continue
      }
      break;
     };
    }
    $3 = $3 + 1 | 0;
    if (($3 | 0) != ($2 | 0)) {
     continue
    }
    break;
   };
   $10 = +($2 >>> 0);
   $1 = 0;
   while (1) {
    $0 = ($1 << 3) + $4 | 0;
    HEAPF64[$0 >> 3] = HEAPF64[$0 >> 3] / $10;
    $1 = $1 + 1 | 0;
    if (($2 | 0) != ($1 | 0)) {
     continue
    }
    break;
   };
  }
 }
 
 function EmscriptenBindingInitializer_my_module_maxiGrains__EmscriptenBindingInitializer_my_module_maxiGrains_28_29() {
  var $0 = 0, $1 = 0;
  $0 = global$0 - 144 | 0;
  $1 = $0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  _embind_register_class(21896, 21944, 22e3, 0, 4688, 727, 4691, 0, 4691, 0, 3698, 4693, 728);
  _embind_register_smart_ptr(22384, 21896, 3714, 2, 4688, 729, 6772, 730, 4752, 731, 4693, 732);
  _embind_register_class_constructor(21896, 1, 22392, 4688, 733, 734);
  HEAP32[$0 + 140 >> 2] = 0;
  HEAP32[$0 + 136 >> 2] = 735;
  $1 = HEAP32[$0 + 140 >> 2];
  HEAP32[$0 + 128 >> 2] = HEAP32[$0 + 136 >> 2];
  HEAP32[$0 + 132 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_void_20_28maxiTimeStretch_hannWinFunctor_____29_28maxiSample__29___invoke_maxiTimeStretch_hannWinFunctor__2c_20emscripten__allow_raw_pointers__28char_20const__2c_20void_20_28maxiTimeStretch_hannWinFunctor_____29_28maxiSample__29_29($0 + 128 | 0);
  HEAP32[$0 + 140 >> 2] = 0;
  HEAP32[$0 + 136 >> 2] = 736;
  $1 = HEAP32[$0 + 140 >> 2];
  HEAP32[$0 + 120 >> 2] = HEAP32[$0 + 136 >> 2];
  HEAP32[$0 + 124 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_double_20_28maxiTimeStretch_hannWinFunctor_____29_28_29___invoke_maxiTimeStretch_hannWinFunctor__20__28char_20const__2c_20double_20_28maxiTimeStretch_hannWinFunctor_____29_28_29_29(3759, $0 + 120 | 0);
  HEAP32[$0 + 140 >> 2] = 0;
  HEAP32[$0 + 136 >> 2] = 737;
  $1 = HEAP32[$0 + 140 >> 2];
  HEAP32[$0 + 112 >> 2] = HEAP32[$0 + 136 >> 2];
  HEAP32[$0 + 116 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_double_20_28maxiTimeStretch_hannWinFunctor_____29_28_29___invoke_maxiTimeStretch_hannWinFunctor__20__28char_20const__2c_20double_20_28maxiTimeStretch_hannWinFunctor_____29_28_29_29(3781, $0 + 112 | 0);
  HEAP32[$0 + 140 >> 2] = 0;
  HEAP32[$0 + 136 >> 2] = 738;
  $1 = HEAP32[$0 + 140 >> 2];
  HEAP32[$0 + 104 >> 2] = HEAP32[$0 + 136 >> 2];
  HEAP32[$0 + 108 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_void_20_28maxiTimeStretch_hannWinFunctor_____29_28double_29___invoke_maxiTimeStretch_hannWinFunctor__20__28char_20const__2c_20void_20_28maxiTimeStretch_hannWinFunctor_____29_28double_29_29($0 + 104 | 0);
  HEAP32[$0 + 140 >> 2] = 0;
  HEAP32[$0 + 136 >> 2] = 739;
  $1 = HEAP32[$0 + 140 >> 2];
  HEAP32[$0 + 96 >> 2] = HEAP32[$0 + 136 >> 2];
  HEAP32[$0 + 100 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_double_20_28maxiTimeStretch_hannWinFunctor_____29_28double_2c_20double_2c_20int_2c_20double_29___invoke_maxiTimeStretch_hannWinFunctor__20__28char_20const__2c_20double_20_28maxiTimeStretch_hannWinFunctor_____29_28double_2c_20double_2c_20int_2c_20double_29_29($0 + 96 | 0);
  HEAP32[$0 + 140 >> 2] = 0;
  HEAP32[$0 + 136 >> 2] = 740;
  $1 = HEAP32[$0 + 140 >> 2];
  HEAP32[$0 + 88 >> 2] = HEAP32[$0 + 136 >> 2];
  HEAP32[$0 + 92 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_double_20_28maxiTimeStretch_hannWinFunctor_____29_28double_2c_20double_2c_20int_29___invoke_maxiTimeStretch_hannWinFunctor__20__28char_20const__2c_20double_20_28maxiTimeStretch_hannWinFunctor_____29_28double_2c_20double_2c_20int_29_29($0 + 88 | 0);
  _embind_register_class(22760, 22804, 22860, 0, 4688, 741, 4691, 0, 4691, 0, 3808, 4693, 742);
  _embind_register_smart_ptr(23244, 22760, 3823, 2, 4688, 743, 6772, 744, 4752, 745, 4693, 746);
  _embind_register_class_constructor(22760, 1, 23252, 4688, 747, 748);
  HEAP32[$0 + 140 >> 2] = 0;
  HEAP32[$0 + 136 >> 2] = 749;
  $1 = HEAP32[$0 + 140 >> 2];
  HEAP32[$0 + 80 >> 2] = HEAP32[$0 + 136 >> 2];
  HEAP32[$0 + 84 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_void_20_28maxiPitchShift_hannWinFunctor_____29_28maxiSample__29___invoke_maxiPitchShift_hannWinFunctor__2c_20emscripten__allow_raw_pointers__28char_20const__2c_20void_20_28maxiPitchShift_hannWinFunctor_____29_28maxiSample__29_29($0 + 80 | 0);
  HEAP32[$0 + 140 >> 2] = 0;
  HEAP32[$0 + 136 >> 2] = 750;
  $1 = HEAP32[$0 + 140 >> 2];
  HEAP32[$0 + 72 >> 2] = HEAP32[$0 + 136 >> 2];
  HEAP32[$0 + 76 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_double_20_28maxiPitchShift_hannWinFunctor_____29_28double_2c_20double_2c_20int_2c_20double_29___invoke_maxiPitchShift_hannWinFunctor__20__28char_20const__2c_20double_20_28maxiPitchShift_hannWinFunctor_____29_28double_2c_20double_2c_20int_2c_20double_29_29($0 + 72 | 0);
  _embind_register_class(23464, 23508, 23560, 0, 4688, 751, 4691, 0, 4691, 0, 3867, 4693, 752);
  _embind_register_smart_ptr(23932, 23464, 3879, 2, 4688, 753, 6772, 754, 4752, 755, 4693, 756);
  _embind_register_class_constructor(23464, 1, 23940, 4688, 757, 758);
  HEAP32[$0 + 140 >> 2] = 0;
  HEAP32[$0 + 136 >> 2] = 759;
  $1 = HEAP32[$0 + 140 >> 2];
  HEAP32[$0 + 64 >> 2] = HEAP32[$0 + 136 >> 2];
  HEAP32[$0 + 68 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_void_20_28maxiStretch_hannWinFunctor_____29_28maxiSample__29___invoke_maxiStretch_hannWinFunctor__2c_20emscripten__allow_raw_pointers__28char_20const__2c_20void_20_28maxiStretch_hannWinFunctor_____29_28maxiSample__29_29($0 - -64 | 0);
  HEAP32[$0 + 140 >> 2] = 0;
  HEAP32[$0 + 136 >> 2] = 760;
  $1 = HEAP32[$0 + 140 >> 2];
  HEAP32[$0 + 56 >> 2] = HEAP32[$0 + 136 >> 2];
  HEAP32[$0 + 60 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_double_20_28maxiStretch_hannWinFunctor_____29_28_29___invoke_maxiStretch_hannWinFunctor__20__28char_20const__2c_20double_20_28maxiStretch_hannWinFunctor_____29_28_29_29(3759, $0 + 56 | 0);
  HEAP32[$0 + 140 >> 2] = 0;
  HEAP32[$0 + 136 >> 2] = 761;
  $1 = HEAP32[$0 + 140 >> 2];
  HEAP32[$0 + 48 >> 2] = HEAP32[$0 + 136 >> 2];
  HEAP32[$0 + 52 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_double_20_28maxiStretch_hannWinFunctor_____29_28_29___invoke_maxiStretch_hannWinFunctor__20__28char_20const__2c_20double_20_28maxiStretch_hannWinFunctor_____29_28_29_29(3781, $0 + 48 | 0);
  HEAP32[$0 + 140 >> 2] = 0;
  HEAP32[$0 + 136 >> 2] = 762;
  $1 = HEAP32[$0 + 140 >> 2];
  HEAP32[$0 + 40 >> 2] = HEAP32[$0 + 136 >> 2];
  HEAP32[$0 + 44 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_void_20_28maxiStretch_hannWinFunctor_____29_28double_29___invoke_maxiStretch_hannWinFunctor__20__28char_20const__2c_20void_20_28maxiStretch_hannWinFunctor_____29_28double_29_29(2315, $0 + 40 | 0);
  HEAP32[$0 + 140 >> 2] = 0;
  HEAP32[$0 + 136 >> 2] = 763;
  $1 = HEAP32[$0 + 140 >> 2];
  HEAP32[$0 + 32 >> 2] = HEAP32[$0 + 136 >> 2];
  HEAP32[$0 + 36 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_void_20_28maxiStretch_hannWinFunctor_____29_28double_29___invoke_maxiStretch_hannWinFunctor__20__28char_20const__2c_20void_20_28maxiStretch_hannWinFunctor_____29_28double_29_29(3920, $0 + 32 | 0);
  HEAP32[$0 + 140 >> 2] = 0;
  HEAP32[$0 + 136 >> 2] = 764;
  $1 = HEAP32[$0 + 140 >> 2];
  HEAP32[$0 + 24 >> 2] = HEAP32[$0 + 136 >> 2];
  HEAP32[$0 + 28 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_void_20_28maxiStretch_hannWinFunctor_____29_28double_29___invoke_maxiStretch_hannWinFunctor__20__28char_20const__2c_20void_20_28maxiStretch_hannWinFunctor_____29_28double_29_29(3933, $0 + 24 | 0);
  HEAP32[$0 + 140 >> 2] = 0;
  HEAP32[$0 + 136 >> 2] = 765;
  $1 = HEAP32[$0 + 140 >> 2];
  HEAP32[$0 + 16 >> 2] = HEAP32[$0 + 136 >> 2];
  HEAP32[$0 + 20 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_unsigned_20long_20_28maxiStretch_hannWinFunctor_____29_28_29___invoke_maxiStretch_hannWinFunctor__20__28char_20const__2c_20unsigned_20long_20_28maxiStretch_hannWinFunctor_____29_28_29_29($0 + 16 | 0);
  HEAP32[$0 + 140 >> 2] = 0;
  HEAP32[$0 + 136 >> 2] = 766;
  $1 = HEAP32[$0 + 140 >> 2];
  HEAP32[$0 + 8 >> 2] = HEAP32[$0 + 136 >> 2];
  HEAP32[$0 + 12 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_double_20_28maxiStretch_hannWinFunctor_____29_28double_2c_20double_2c_20double_2c_20int_2c_20double_29___invoke_maxiStretch_hannWinFunctor__20__28char_20const__2c_20double_20_28maxiStretch_hannWinFunctor_____29_28double_2c_20double_2c_20double_2c_20int_2c_20double_29_29($0 + 8 | 0);
  HEAP32[$0 + 140 >> 2] = 0;
  HEAP32[$0 + 136 >> 2] = 767;
  $1 = HEAP32[$0 + 140 >> 2];
  HEAP32[$0 >> 2] = HEAP32[$0 + 136 >> 2];
  HEAP32[$0 + 4 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_double_20_28maxiStretch_hannWinFunctor_____29_28double_2c_20double_2c_20double_2c_20int_29___invoke_maxiStretch_hannWinFunctor__20__28char_20const__2c_20double_20_28maxiStretch_hannWinFunctor_____29_28double_2c_20double_2c_20double_2c_20int_29_29($0);
  $0 = $0 + 144 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function void_20const__20emscripten__internal__getActualType_maxiTimeStretch_hannWinFunctor__20__28maxiTimeStretch_hannWinFunctor___29($0) {
  $0 = $0 | 0;
  return 21896;
 }
 
 function void_20emscripten__internal__raw_destructor_maxiTimeStretch_hannWinFunctor__20__28maxiTimeStretch_hannWinFunctor___29($0) {
  $0 = $0 | 0;
  if ($0) {
   dlfree(maxiTimeStretch_hannWinFunctor____maxiTimeStretch_28_29($0))
  }
 }
 
 function emscripten__smart_ptr_trait_std____2__shared_ptr_maxiTimeStretch_hannWinFunctor__20__20___share_28maxiTimeStretch_hannWinFunctor___2c_20emscripten__internal___EM_VAL__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0;
  $2 = global$0 - 16 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  $3 = operator_20new_28unsigned_20long_29(8);
  HEAP32[16874] = 0;
  emscripten__val__take_ownership_28emscripten__internal___EM_VAL__29($2, $1);
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      if (($1 | 0) != 1) {
       HEAP32[16874] = 0;
       $1 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(768, $2 + 8 | 0, $2 | 0) | 0;
       $4 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($4 | 0) == 1) {
        break label$5
       }
       HEAP32[16874] = 0;
       $0 = __invoke___22class_std____2__shared_ptr_22____22class_std____2__shared_ptr_22___class_maxiOsc____22class_emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc____val_deleter_22__i32(769, $3 | 0, $0 | 0, $1 | 0, 0) | 0;
       $4 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($4 | 0) == 1) {
        break label$4
       }
       emscripten__val___val_28_29($1);
       emscripten__val___val_28_29($2);
       $1 = $2 + 16 | 0;
       if ($1 >>> 0 < global$2 >>> 0) {
        __handle_stack_overflow()
       }
       global$0 = $1;
       return $0 | 0;
      }
      $0 = __cxa_find_matching_catch_2() | 0;
      getTempRet0() | 0;
      break label$2;
     }
     $0 = __cxa_find_matching_catch_2() | 0;
     getTempRet0() | 0;
     break label$3;
    }
    $0 = __cxa_find_matching_catch_2() | 0;
    getTempRet0() | 0;
    emscripten__val___val_28_29($1);
   }
   emscripten__val___val_28_29($2);
  }
  dlfree($3);
  __resumeException($0 | 0);
  abort();
 }
 
 function emscripten__internal__Invoker_std____2__shared_ptr_maxiTimeStretch_hannWinFunctor__20__20___invoke_28std____2__shared_ptr_maxiTimeStretch_hannWinFunctor__20__20_28__29_28_29_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  FUNCTION_TABLE[$0]($1 + 8 | 0);
  HEAP32[16874] = 0;
  $0 = __invoke_i1___22class_std____2__basic_ifstream_22_(770, $1 + 8 | 0) | 0;
  $2 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($2 | 0) != 1) {
   std____2__shared_ptr_maxiOsc____shared_ptr_28_29($1 + 8 | 0);
   $1 = $1 + 16 | 0;
   if ($1 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $1;
   return $0 | 0;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__shared_ptr_maxiOsc____shared_ptr_28_29($1 + 8 | 0);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2__enable_if___28is_array_maxiTimeStretch_hannWinFunctor__20___value_29_2c_20std____2__shared_ptr_maxiTimeStretch_hannWinFunctor__20__20___type_20std____2__make_shared_maxiTimeStretch_hannWinFunctor__20__28_29($0) {
  $0 = $0 | 0;
  std____2__shared_ptr_maxiTimeStretch_hannWinFunctor__20__20std____2__shared_ptr_maxiTimeStretch_hannWinFunctor__20___make_shared___28_29($0);
 }
 
 function maxiTimeStretch_hannWinFunctor___setSample_28maxiSample__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = HEAP32[$0 + 12 >> 2];
  if ($2) {
   dlfree(maxiGrainPlayer___maxiGrainPlayer_28_29($2));
   HEAP32[$0 + 12 >> 2] = 0;
  }
  HEAP32[$0 + 8 >> 2] = $1;
  $2 = operator_20new_28unsigned_20long_29(16);
  maxiGrainPlayer__maxiGrainPlayer_28maxiSample__29($2, $1);
  HEAP32[$0 + 12 >> 2] = $2;
 }
 
 function void_20emscripten__internal__RegisterClassMethod_void_20_28maxiTimeStretch_hannWinFunctor_____29_28maxiSample__29___invoke_maxiTimeStretch_hannWinFunctor__2c_20emscripten__allow_raw_pointers__28char_20const__2c_20void_20_28maxiTimeStretch_hannWinFunctor_____29_28maxiSample__29_29($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  $2 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 12 >> 2] = $2;
  _embind_register_class_function(21896, 2267, 3, 22524, 4712, 771, void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____emscripten__internal__getContext_void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28int_20const__29__28void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28int_20const__29_29_29_28int_20const__29($1 + 8 | 0) | 0, 0);
  $0 = $1 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function maxiTimeStretch_hannWinFunctor___getNormalisedPosition_28_29($0) {
  $0 = $0 | 0;
  return +(HEAPF64[$0 >> 3] / +(maxiSample__getLength_28_29_20const(HEAP32[$0 + 8 >> 2]) >>> 0));
 }
 
 function void_20emscripten__internal__RegisterClassMethod_double_20_28maxiTimeStretch_hannWinFunctor_____29_28_29___invoke_maxiTimeStretch_hannWinFunctor__20__28char_20const__2c_20double_20_28maxiTimeStretch_hannWinFunctor_____29_28_29_29($0, $1) {
  var $2 = 0, $3 = 0;
  $2 = global$0 - 16 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  $3 = HEAP32[$1 + 4 >> 2];
  HEAP32[$2 + 8 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$2 + 12 >> 2] = $3;
  _embind_register_class_function(21896, $0 | 0, 2, 22536, 6976, 772, void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____emscripten__internal__getContext_void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28int_20const__29__28void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28int_20const__29_29_29_28int_20const__29($2 + 8 | 0) | 0, 0);
  $0 = $2 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function maxiTimeStretch_hannWinFunctor___setPosition_28double_29($0, $1) {
  $0 = $0 | 0;
  $1 = +$1;
  $1 = +(maxiSample__getLength_28_29_20const(HEAP32[$0 + 8 >> 2]) >>> 0) * $1;
  HEAPF64[$0 >> 3] = $1;
  HEAPF64[$0 >> 3] = double_20maxiMap__clamp_double__28double_2c_20double_2c_20double_29($1, 0.0, +(maxiSample__getLength_28_29_20const(HEAP32[$0 + 8 >> 2]) + -1 >>> 0));
 }
 
 function void_20emscripten__internal__RegisterClassMethod_void_20_28maxiTimeStretch_hannWinFunctor_____29_28double_29___invoke_maxiTimeStretch_hannWinFunctor__20__28char_20const__2c_20void_20_28maxiTimeStretch_hannWinFunctor_____29_28double_29_29($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  $2 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 12 >> 2] = $2;
  _embind_register_class_function(21896, 2315, 3, 22544, 5096, 773, void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____emscripten__internal__getContext_void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28int_20const__29__28void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28int_20const__29_29_29_28int_20const__29($1 + 8 | 0) | 0, 0);
  $0 = $1 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function maxiTimeStretch_hannWinFunctor___play_28double_2c_20double_2c_20int_2c_20double_29($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = +$2;
  $3 = $3 | 0;
  $4 = +$4;
  var $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, $10 = 0.0;
  $5 = global$0 - 32 | 0;
  $6 = $5;
  if ($5 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $6;
  $7 = HEAPF64[$0 >> 3] + $1;
  HEAPF64[$0 >> 3] = $7;
  HEAPF64[$0 + 32 >> 3] = HEAPF64[$0 + 32 >> 3] + 1.0;
  if (!!($7 > +(maxiSample__getLength_28_29_20const(HEAP32[$0 + 8 >> 2]) >>> 0))) {
   $6 = maxiSample__getLength_28_29_20const(HEAP32[$0 + 8 >> 2]);
   HEAPF64[$0 >> 3] = HEAPF64[$0 >> 3] - +($6 >>> 0);
  }
  if (!!(HEAPF64[$0 >> 3] < 0.0)) {
   $6 = maxiSample__getLength_28_29_20const(HEAP32[$0 + 8 >> 2]);
   HEAPF64[$0 >> 3] = HEAPF64[$0 >> 3] + +($6 >>> 0);
  }
  label$4 : {
   $7 = HEAPF64[$0 + 32 >> 3];
   $10 = HEAPF64[$0 + 24 >> 3] + +HEAP32[12865] * $2 / +($3 | 0);
   if (!!($7 > $10)) {
    HEAPF64[$0 + 32 >> 3] = $7 - $10;
    $3 = operator_20new_28unsigned_20long_29(104);
    $6 = HEAP32[$0 + 8 >> 2];
    HEAP32[$5 + 24 >> 2] = 0;
    HEAP32[$5 + 28 >> 2] = 1072693248;
    $7 = HEAPF64[$0 >> 3];
    $8 = maxiSample__getLength_28_29_20const($6);
    HEAP32[16874] = 0;
    HEAPF64[$5 + 16 >> 3] = $7 / +($8 >>> 0) + $4;
    $8 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(774, $5 + 24 | 0, $5 + 16 | 0) | 0;
    $9 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($9 | 0) == 1) {
     break label$4
    }
    HEAP32[16874] = 0;
    HEAP32[$5 + 8 >> 2] = 0;
    HEAP32[$5 + 12 >> 2] = 0;
    $8 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(775, $8 | 0, $5 + 8 | 0) | 0;
    $9 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($9 | 0) == 1) {
     break label$4
    }
    $4 = HEAPF64[$8 >> 3];
    HEAP32[16874] = 0;
    __invoke__class_maxiGrain___class_maxiGrain___class_maxiSample__double_double_double__class_maxiGrainWindowCache_(776, $3 | 0, $6 | 0, +$4, +$2, +($1 > 0.0 ? 1.0 : -1.0), $0 + 16 | 0) | 0;
    $6 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($6 | 0) == 1) {
     break label$4
    }
    maxiGrainPlayer__addGrain_28maxiGrainBase__29(HEAP32[$0 + 12 >> 2], $3);
    HEAPF64[$0 + 24 >> 3] = (rand() | 0) % 10 | 0;
   }
   $1 = maxiGrainPlayer__play_28_29(HEAP32[$0 + 12 >> 2]);
   $0 = $5 + 32 | 0;
   if ($0 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $0;
   return +$1;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  dlfree($3);
  __resumeException($0 | 0);
  abort();
 }
 
 function void_20emscripten__internal__RegisterClassMethod_double_20_28maxiTimeStretch_hannWinFunctor_____29_28double_2c_20double_2c_20int_2c_20double_29___invoke_maxiTimeStretch_hannWinFunctor__20__28char_20const__2c_20double_20_28maxiTimeStretch_hannWinFunctor_____29_28double_2c_20double_2c_20int_2c_20double_29_29($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  $2 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 12 >> 2] = $2;
  _embind_register_class_function(21896, 2076, 6, 22672, 22696, 777, void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____emscripten__internal__getContext_void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28int_20const__29__28void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28int_20const__29_29_29_28int_20const__29($1 + 8 | 0) | 0, 0);
  $0 = $1 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function maxiTimeStretch_hannWinFunctor___playAtPosition_28double_2c_20double_2c_20int_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = +$2;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0;
  $4 = global$0 - 32 | 0;
  $5 = $4;
  if ($4 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $5;
  HEAPF64[$0 + 32 >> 3] = HEAPF64[$0 + 32 >> 3] + 1.0;
  $6 = maxiSample__getLength_28_29_20const(HEAP32[$0 + 8 >> 2]);
  label$2 : {
   if (Math_floor(fmod(HEAPF64[$0 + 32 >> 3], +HEAP32[12865] * $2 / +($3 | 0))) == 0.0) {
    $3 = operator_20new_28unsigned_20long_29(104);
    $5 = HEAP32[$0 + 8 >> 2];
    HEAP32[$4 + 24 >> 2] = 0;
    HEAP32[$4 + 28 >> 2] = 1072693248;
    $7 = maxiSample__getLength_28_29_20const($5);
    HEAP32[16874] = 0;
    HEAPF64[$4 + 16 >> 3] = +($6 >>> 0) * $1 / +($7 >>> 0);
    $6 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(774, $4 + 24 | 0, $4 + 16 | 0) | 0;
    $7 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($7 | 0) == 1) {
     break label$2
    }
    HEAP32[16874] = 0;
    HEAP32[$4 + 8 >> 2] = 0;
    HEAP32[$4 + 12 >> 2] = 0;
    $6 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(775, $6 | 0, $4 + 8 | 0) | 0;
    $7 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($7 | 0) == 1) {
     break label$2
    }
    $1 = HEAPF64[$6 >> 3];
    HEAP32[16874] = 0;
    __invoke__class_maxiGrain___class_maxiGrain___class_maxiSample__double_double_double__class_maxiGrainWindowCache_(776, $3 | 0, $5 | 0, +$1, +$2, 1.0, $0 + 16 | 0) | 0;
    $5 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($5 | 0) == 1) {
     break label$2
    }
    maxiGrainPlayer__addGrain_28maxiGrainBase__29(HEAP32[$0 + 12 >> 2], $3);
   }
   $1 = maxiGrainPlayer__play_28_29(HEAP32[$0 + 12 >> 2]);
   $0 = $4 + 32 | 0;
   if ($0 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $0;
   return +$1;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  dlfree($3);
  __resumeException($0 | 0);
  abort();
 }
 
 function void_20emscripten__internal__RegisterClassMethod_double_20_28maxiTimeStretch_hannWinFunctor_____29_28double_2c_20double_2c_20int_29___invoke_maxiTimeStretch_hannWinFunctor__20__28char_20const__2c_20double_20_28maxiTimeStretch_hannWinFunctor_____29_28double_2c_20double_2c_20int_29_29($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  $2 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 12 >> 2] = $2;
  _embind_register_class_function(21896, 3793, 5, 22704, 18612, 778, void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____emscripten__internal__getContext_void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28int_20const__29__28void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28int_20const__29_29_29_28int_20const__29($1 + 8 | 0) | 0, 0);
  $0 = $1 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function void_20const__20emscripten__internal__getActualType_maxiPitchShift_hannWinFunctor__20__28maxiPitchShift_hannWinFunctor___29($0) {
  $0 = $0 | 0;
  return 22760;
 }
 
 function void_20emscripten__internal__raw_destructor_maxiPitchShift_hannWinFunctor__20__28maxiPitchShift_hannWinFunctor___29($0) {
  $0 = $0 | 0;
  if ($0) {
   dlfree(maxiPitchShift_hannWinFunctor____maxiPitchShift_28_29($0))
  }
 }
 
 function emscripten__smart_ptr_trait_std____2__shared_ptr_maxiPitchShift_hannWinFunctor__20__20___share_28maxiPitchShift_hannWinFunctor___2c_20emscripten__internal___EM_VAL__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0;
  $2 = global$0 - 16 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  $3 = operator_20new_28unsigned_20long_29(8);
  HEAP32[16874] = 0;
  emscripten__val__take_ownership_28emscripten__internal___EM_VAL__29($2, $1);
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      if (($1 | 0) != 1) {
       HEAP32[16874] = 0;
       $1 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(779, $2 + 8 | 0, $2 | 0) | 0;
       $4 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($4 | 0) == 1) {
        break label$5
       }
       HEAP32[16874] = 0;
       $0 = __invoke___22class_std____2__shared_ptr_22____22class_std____2__shared_ptr_22___class_maxiOsc____22class_emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc____val_deleter_22__i32(780, $3 | 0, $0 | 0, $1 | 0, 0) | 0;
       $4 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($4 | 0) == 1) {
        break label$4
       }
       emscripten__val___val_28_29($1);
       emscripten__val___val_28_29($2);
       $1 = $2 + 16 | 0;
       if ($1 >>> 0 < global$2 >>> 0) {
        __handle_stack_overflow()
       }
       global$0 = $1;
       return $0 | 0;
      }
      $0 = __cxa_find_matching_catch_2() | 0;
      getTempRet0() | 0;
      break label$2;
     }
     $0 = __cxa_find_matching_catch_2() | 0;
     getTempRet0() | 0;
     break label$3;
    }
    $0 = __cxa_find_matching_catch_2() | 0;
    getTempRet0() | 0;
    emscripten__val___val_28_29($1);
   }
   emscripten__val___val_28_29($2);
  }
  dlfree($3);
  __resumeException($0 | 0);
  abort();
 }
 
 function emscripten__internal__Invoker_std____2__shared_ptr_maxiPitchShift_hannWinFunctor__20__20___invoke_28std____2__shared_ptr_maxiPitchShift_hannWinFunctor__20__20_28__29_28_29_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  FUNCTION_TABLE[$0]($1 + 8 | 0);
  HEAP32[16874] = 0;
  $0 = __invoke_i1___22class_std____2__basic_ifstream_22_(781, $1 + 8 | 0) | 0;
  $2 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($2 | 0) != 1) {
   std____2__shared_ptr_maxiOsc____shared_ptr_28_29($1 + 8 | 0);
   $1 = $1 + 16 | 0;
   if ($1 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $1;
   return $0 | 0;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__shared_ptr_maxiOsc____shared_ptr_28_29($1 + 8 | 0);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2__enable_if___28is_array_maxiPitchShift_hannWinFunctor__20___value_29_2c_20std____2__shared_ptr_maxiPitchShift_hannWinFunctor__20__20___type_20std____2__make_shared_maxiPitchShift_hannWinFunctor__20__28_29($0) {
  $0 = $0 | 0;
  std____2__shared_ptr_maxiPitchShift_hannWinFunctor__20__20std____2__shared_ptr_maxiPitchShift_hannWinFunctor__20___make_shared___28_29($0);
 }
 
 function maxiPitchShift_hannWinFunctor___setSample_28maxiSample__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = HEAP32[$0 + 16 >> 2];
  if ($2) {
   dlfree(maxiGrainPlayer___maxiGrainPlayer_28_29($2));
   HEAP32[$0 + 16 >> 2] = 0;
  }
  HEAP32[$0 + 12 >> 2] = $1;
  $2 = operator_20new_28unsigned_20long_29(16);
  maxiGrainPlayer__maxiGrainPlayer_28maxiSample__29($2, $1);
  HEAP32[$0 + 16 >> 2] = $2;
 }
 
 function void_20emscripten__internal__RegisterClassMethod_void_20_28maxiPitchShift_hannWinFunctor_____29_28maxiSample__29___invoke_maxiPitchShift_hannWinFunctor__2c_20emscripten__allow_raw_pointers__28char_20const__2c_20void_20_28maxiPitchShift_hannWinFunctor_____29_28maxiSample__29_29($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  $2 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 12 >> 2] = $2;
  _embind_register_class_function(22760, 2267, 3, 23384, 4712, 782, void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____emscripten__internal__getContext_void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28int_20const__29__28void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28int_20const__29_29_29_28int_20const__29($1 + 8 | 0) | 0, 0);
  $0 = $1 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function maxiPitchShift_hannWinFunctor___play_28double_2c_20double_2c_20int_2c_20double_29($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = +$2;
  $3 = $3 | 0;
  $4 = +$4;
  var $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, $10 = 0.0, $11 = 0.0;
  $5 = global$0 - 32 | 0;
  $6 = $5;
  if ($5 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $6;
  $7 = HEAPF64[$0 >> 3] + 1.0;
  HEAPF64[$0 >> 3] = $7;
  HEAP32[$0 + 8 >> 2] = HEAP32[$0 + 8 >> 2] + 1;
  if (!!($7 > +(maxiSample__getLength_28_29_20const(HEAP32[$0 + 12 >> 2]) >>> 0))) {
   HEAP32[$0 >> 2] = 0;
   HEAP32[$0 + 4 >> 2] = 0;
  }
  if (!!(HEAPF64[$0 >> 3] < 0.0)) {
   HEAPF64[$0 >> 3] = maxiSample__getLength_28_29_20const(HEAP32[$0 + 12 >> 2]) >>> 0
  }
  label$4 : {
   $7 = +HEAP32[12865] * $2 / +($3 | 0);
   $10 = fmod(+HEAP32[$0 + 8 >> 2], HEAPF64[$0 + 32 >> 3] + $7);
   if (Math_floor($10) == 0.0) {
    $3 = operator_20new_28unsigned_20long_29(104);
    $6 = HEAP32[$0 + 12 >> 2];
    HEAP32[$5 + 24 >> 2] = 0;
    HEAP32[$5 + 28 >> 2] = 1072693248;
    $11 = HEAPF64[$0 >> 3];
    $8 = maxiSample__getLength_28_29_20const($6);
    HEAP32[16874] = 0;
    HEAPF64[$5 + 16 >> 3] = $11 / +($8 >>> 0) + $4;
    $8 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(774, $5 + 24 | 0, $5 + 16 | 0) | 0;
    $9 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($9 | 0) == 1) {
     break label$4
    }
    HEAP32[16874] = 0;
    HEAP32[$5 + 8 >> 2] = 0;
    HEAP32[$5 + 12 >> 2] = 0;
    $8 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(775, $8 | 0, $5 + 8 | 0) | 0;
    $9 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($9 | 0) == 1) {
     break label$4
    }
    $4 = HEAPF64[$8 >> 3];
    HEAP32[16874] = 0;
    __invoke__class_maxiGrain___class_maxiGrain___class_maxiSample__double_double_double__class_maxiGrainWindowCache_(776, $3 | 0, $6 | 0, +$4, +$2, +($1 + $10 / $7 * -.1), $0 + 20 | 0) | 0;
    $6 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($6 | 0) == 1) {
     break label$4
    }
    maxiGrainPlayer__addGrain_28maxiGrainBase__29(HEAP32[$0 + 16 >> 2], $3);
   }
   $1 = maxiGrainPlayer__play_28_29(HEAP32[$0 + 16 >> 2]);
   $0 = $5 + 32 | 0;
   if ($0 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $0;
   return +$1;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  dlfree($3);
  __resumeException($0 | 0);
  abort();
 }
 
 function void_20emscripten__internal__RegisterClassMethod_double_20_28maxiPitchShift_hannWinFunctor_____29_28double_2c_20double_2c_20int_2c_20double_29___invoke_maxiPitchShift_hannWinFunctor__20__28char_20const__2c_20double_20_28maxiPitchShift_hannWinFunctor_____29_28double_2c_20double_2c_20int_2c_20double_29_29($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  $2 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 12 >> 2] = $2;
  _embind_register_class_function(22760, 2076, 6, 23408, 22696, 783, void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____emscripten__internal__getContext_void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28int_20const__29__28void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28int_20const__29_29_29_28int_20const__29($1 + 8 | 0) | 0, 0);
  $0 = $1 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function void_20const__20emscripten__internal__getActualType_maxiStretch_hannWinFunctor__20__28maxiStretch_hannWinFunctor___29($0) {
  $0 = $0 | 0;
  return 23464;
 }
 
 function emscripten__smart_ptr_trait_std____2__shared_ptr_maxiStretch_hannWinFunctor__20__20___share_28maxiStretch_hannWinFunctor___2c_20emscripten__internal___EM_VAL__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0;
  $2 = global$0 - 16 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  $3 = operator_20new_28unsigned_20long_29(8);
  HEAP32[16874] = 0;
  emscripten__val__take_ownership_28emscripten__internal___EM_VAL__29($2, $1);
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      if (($1 | 0) != 1) {
       HEAP32[16874] = 0;
       $1 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(784, $2 + 8 | 0, $2 | 0) | 0;
       $4 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($4 | 0) == 1) {
        break label$5
       }
       HEAP32[16874] = 0;
       $0 = __invoke___22class_std____2__shared_ptr_22____22class_std____2__shared_ptr_22___class_maxiOsc____22class_emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc____val_deleter_22__i32(785, $3 | 0, $0 | 0, $1 | 0, 0) | 0;
       $4 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($4 | 0) == 1) {
        break label$4
       }
       emscripten__val___val_28_29($1);
       emscripten__val___val_28_29($2);
       $1 = $2 + 16 | 0;
       if ($1 >>> 0 < global$2 >>> 0) {
        __handle_stack_overflow()
       }
       global$0 = $1;
       return $0 | 0;
      }
      $0 = __cxa_find_matching_catch_2() | 0;
      getTempRet0() | 0;
      break label$2;
     }
     $0 = __cxa_find_matching_catch_2() | 0;
     getTempRet0() | 0;
     break label$3;
    }
    $0 = __cxa_find_matching_catch_2() | 0;
    getTempRet0() | 0;
    emscripten__val___val_28_29($1);
   }
   emscripten__val___val_28_29($2);
  }
  dlfree($3);
  __resumeException($0 | 0);
  abort();
 }
 
 function emscripten__internal__Invoker_std____2__shared_ptr_maxiStretch_hannWinFunctor__20__20___invoke_28std____2__shared_ptr_maxiStretch_hannWinFunctor__20__20_28__29_28_29_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  FUNCTION_TABLE[$0]($1 + 8 | 0);
  HEAP32[16874] = 0;
  $0 = __invoke_i1___22class_std____2__basic_ifstream_22_(786, $1 + 8 | 0) | 0;
  $2 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($2 | 0) != 1) {
   std____2__shared_ptr_maxiOsc____shared_ptr_28_29($1 + 8 | 0);
   $1 = $1 + 16 | 0;
   if ($1 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $1;
   return $0 | 0;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__shared_ptr_maxiOsc____shared_ptr_28_29($1 + 8 | 0);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2__enable_if___28is_array_maxiStretch_hannWinFunctor__20___value_29_2c_20std____2__shared_ptr_maxiStretch_hannWinFunctor__20__20___type_20std____2__make_shared_maxiStretch_hannWinFunctor__20__28_29($0) {
  $0 = $0 | 0;
  std____2__shared_ptr_maxiStretch_hannWinFunctor__20__20std____2__shared_ptr_maxiStretch_hannWinFunctor__20___make_shared___28_29($0);
 }
 
 function maxiStretch_hannWinFunctor___setSample_28maxiSample__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = HEAP32[$0 + 12 >> 2];
  if ($2) {
   dlfree(maxiGrainPlayer___maxiGrainPlayer_28_29($2));
   HEAP32[$0 + 12 >> 2] = 0;
  }
  HEAP32[$0 + 8 >> 2] = $1;
  $2 = operator_20new_28unsigned_20long_29(16);
  maxiGrainPlayer__maxiGrainPlayer_28maxiSample__29($2, $1);
  HEAP32[$0 + 32 >> 2] = 0;
  HEAP32[$0 + 12 >> 2] = $2;
  HEAP32[$0 + 36 >> 2] = maxiSample__getLength_28_29_20const(HEAP32[$0 + 8 >> 2]);
  $1 = maxiSample__getLength_28_29_20const(HEAP32[$0 + 8 >> 2]);
  HEAP32[$0 + 48 >> 2] = 0;
  HEAP32[$0 + 52 >> 2] = 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$0 + 40 >> 2] = $1;
 }
 
 function void_20emscripten__internal__RegisterClassMethod_void_20_28maxiStretch_hannWinFunctor_____29_28maxiSample__29___invoke_maxiStretch_hannWinFunctor__2c_20emscripten__allow_raw_pointers__28char_20const__2c_20void_20_28maxiStretch_hannWinFunctor_____29_28maxiSample__29_29($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  $2 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 12 >> 2] = $2;
  _embind_register_class_function(23464, 2267, 3, 24068, 4712, 787, void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____emscripten__internal__getContext_void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28int_20const__29__28void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28int_20const__29_29_29_28int_20const__29($1 + 8 | 0) | 0, 0);
  $0 = $1 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function void_20emscripten__internal__RegisterClassMethod_double_20_28maxiStretch_hannWinFunctor_____29_28_29___invoke_maxiStretch_hannWinFunctor__20__28char_20const__2c_20double_20_28maxiStretch_hannWinFunctor_____29_28_29_29($0, $1) {
  var $2 = 0, $3 = 0;
  $2 = global$0 - 16 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  $3 = HEAP32[$1 + 4 >> 2];
  HEAP32[$2 + 8 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$2 + 12 >> 2] = $3;
  _embind_register_class_function(23464, $0 | 0, 2, 24080, 6976, 788, void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____emscripten__internal__getContext_void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28int_20const__29__28void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28int_20const__29_29_29_28int_20const__29($2 + 8 | 0) | 0, 0);
  $0 = $2 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function void_20emscripten__internal__RegisterClassMethod_void_20_28maxiStretch_hannWinFunctor_____29_28double_29___invoke_maxiStretch_hannWinFunctor__20__28char_20const__2c_20void_20_28maxiStretch_hannWinFunctor_____29_28double_29_29($0, $1) {
  var $2 = 0, $3 = 0;
  $2 = global$0 - 16 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  $3 = HEAP32[$1 + 4 >> 2];
  HEAP32[$2 + 8 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$2 + 12 >> 2] = $3;
  _embind_register_class_function(23464, $0 | 0, 3, 24088, 5096, 789, void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____emscripten__internal__getContext_void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28int_20const__29__28void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28int_20const__29_29_29_28int_20const__29($2 + 8 | 0) | 0, 0);
  $0 = $2 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function maxiStretch_hannWinFunctor___setLoopStart_28double_29($0, $1) {
  $0 = $0 | 0;
  $1 = +$1;
  var $2 = 0, $3 = 0;
  $3 = $0;
  $1 = +(maxiSample__getLength_28_29_20const(HEAP32[$0 + 8 >> 2]) >>> 0) * $1;
  label$1 : {
   if ($1 < 4294967296.0 & $1 >= 0.0) {
    $2 = ~~$1 >>> 0;
    break label$1;
   }
   $2 = 0;
  }
  HEAP32[$3 + 32 >> 2] = $2;
  HEAP32[$0 + 40 >> 2] = HEAP32[$0 + 36 >> 2] - $2;
 }
 
 function maxiStretch_hannWinFunctor___setLoopEnd_28double_29($0, $1) {
  $0 = $0 | 0;
  $1 = +$1;
  var $2 = 0, $3 = 0;
  $3 = $0;
  $1 = +(maxiSample__getLength_28_29_20const(HEAP32[$0 + 8 >> 2]) >>> 0) * $1;
  label$1 : {
   if ($1 < 4294967296.0 & $1 >= 0.0) {
    $2 = ~~$1 >>> 0;
    break label$1;
   }
   $2 = 0;
  }
  HEAP32[$3 + 36 >> 2] = $2;
  HEAP32[$0 + 40 >> 2] = $2 - HEAP32[$0 + 32 >> 2];
 }
 
 function maxiStretch_hannWinFunctor___getLoopEnd_28_29($0) {
  $0 = $0 | 0;
  return HEAP32[$0 + 36 >> 2];
 }
 
 function void_20emscripten__internal__RegisterClassMethod_unsigned_20long_20_28maxiStretch_hannWinFunctor_____29_28_29___invoke_maxiStretch_hannWinFunctor__20__28char_20const__2c_20unsigned_20long_20_28maxiStretch_hannWinFunctor_____29_28_29_29($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  $2 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 12 >> 2] = $2;
  _embind_register_class_function(23464, 3944, 2, 24100, 4752, 790, void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____emscripten__internal__getContext_void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28int_20const__29__28void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28int_20const__29_29_29_28int_20const__29($1 + 8 | 0) | 0, 0);
  $0 = $1 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function maxiStretch_hannWinFunctor___play_28double_2c_20double_2c_20double_2c_20int_2c_20double_29($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = +$2;
  $3 = +$3;
  $4 = $4 | 0;
  $5 = +$5;
  var $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, $10 = 0;
  $6 = global$0 - 32 | 0;
  $7 = $6;
  if ($6 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $7;
  label$2 : {
   $7 = HEAP32[$0 + 8 >> 2];
   $8 = 0.0;
   label$5 : {
    if (!$7) {
     break label$5
    }
    $2 = HEAPF64[$0 >> 3] + $2;
    HEAPF64[$0 >> 3] = $2;
    $8 = HEAPF64[$0 + 48 >> 3] + 1.0;
    HEAPF64[$0 + 48 >> 3] = $8;
    if (!!($2 >= +HEAPU32[$0 + 36 >> 2])) {
     HEAPF64[$0 >> 3] = $2 - +HEAPU32[$0 + 40 >> 2]
    }
    $2 = HEAPF64[$0 >> 3];
    if (!!($2 < +HEAPU32[$0 + 32 >> 2])) {
     HEAPF64[$0 >> 3] = $2 + +HEAPU32[$0 + 40 >> 2]
    }
    $2 = HEAPF64[$0 + 24 >> 3] + +HEAP32[12865] * $3 / +($4 | 0);
    if (!!($8 > $2)) {
     HEAPF64[$0 + 48 >> 3] = $8 - $2;
     $4 = operator_20new_28unsigned_20long_29(104);
     HEAP32[$6 + 24 >> 2] = 0;
     HEAP32[$6 + 28 >> 2] = 1072693248;
     $2 = HEAPF64[$0 >> 3];
     $9 = maxiSample__getLength_28_29_20const($7);
     HEAP32[16874] = 0;
     HEAPF64[$6 + 16 >> 3] = $2 / +($9 >>> 0) + $5;
     $9 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(774, $6 + 24 | 0, $6 + 16 | 0) | 0;
     $10 = HEAP32[16874];
     HEAP32[16874] = 0;
     if (($10 | 0) == 1) {
      break label$2
     }
     HEAP32[16874] = 0;
     HEAP32[$6 + 8 >> 2] = 0;
     HEAP32[$6 + 12 >> 2] = 0;
     $9 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(775, $9 | 0, $6 + 8 | 0) | 0;
     $10 = HEAP32[16874];
     HEAP32[16874] = 0;
     if (($10 | 0) == 1) {
      break label$2
     }
     $2 = HEAPF64[$9 >> 3];
     HEAP32[16874] = 0;
     __invoke__class_maxiGrain___class_maxiGrain___class_maxiSample__double_double_double__class_maxiGrainWindowCache_(776, $4 | 0, $7 | 0, +$2, +$3, +$1, $0 + 16 | 0) | 0;
     $7 = HEAP32[16874];
     HEAP32[16874] = 0;
     if (($7 | 0) == 1) {
      break label$2
     }
     maxiGrainPlayer__addGrain_28maxiGrainBase__29(HEAP32[$0 + 12 >> 2], $4);
     HEAPF64[$0 + 24 >> 3] = (rand() | 0) % 10 | 0;
    }
    $8 = maxiGrainPlayer__play_28_29(HEAP32[$0 + 12 >> 2]);
   }
   $1 = $8;
   $0 = $6 + 32 | 0;
   if ($0 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $0;
   return +$1;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  dlfree($4);
  __resumeException($0 | 0);
  abort();
 }
 
 function void_20emscripten__internal__RegisterClassMethod_double_20_28maxiStretch_hannWinFunctor_____29_28double_2c_20double_2c_20double_2c_20int_2c_20double_29___invoke_maxiStretch_hannWinFunctor__20__28char_20const__2c_20double_20_28maxiStretch_hannWinFunctor_____29_28double_2c_20double_2c_20double_2c_20int_2c_20double_29_29($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  $2 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 12 >> 2] = $2;
  _embind_register_class_function(23464, 2076, 7, 24112, 24140, 791, void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____emscripten__internal__getContext_void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28int_20const__29__28void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28int_20const__29_29_29_28int_20const__29($1 + 8 | 0) | 0, 0);
  $0 = $1 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function maxiStretch_hannWinFunctor___playAtPosition_28double_2c_20double_2c_20double_2c_20int_29($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = +$2;
  $3 = +$3;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  $5 = global$0 - 32 | 0;
  $6 = $5;
  if ($5 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $6;
  HEAPF64[$0 + 48 >> 3] = HEAPF64[$0 + 48 >> 3] + 1.0;
  $7 = maxiSample__getLength_28_29_20const(HEAP32[$0 + 8 >> 2]);
  label$2 : {
   if (Math_floor(fmod(HEAPF64[$0 + 48 >> 3], +HEAP32[12865] * $3 / +($4 | 0))) == 0.0) {
    $4 = operator_20new_28unsigned_20long_29(104);
    $6 = HEAP32[$0 + 8 >> 2];
    HEAP32[$5 + 24 >> 2] = 0;
    HEAP32[$5 + 28 >> 2] = 1072693248;
    $8 = maxiSample__getLength_28_29_20const($6);
    HEAP32[16874] = 0;
    HEAPF64[$5 + 16 >> 3] = +($7 >>> 0) * $2 / +($8 >>> 0);
    $7 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(774, $5 + 24 | 0, $5 + 16 | 0) | 0;
    $8 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($8 | 0) == 1) {
     break label$2
    }
    HEAP32[16874] = 0;
    HEAP32[$5 + 8 >> 2] = 0;
    HEAP32[$5 + 12 >> 2] = 0;
    $7 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(775, $7 | 0, $5 + 8 | 0) | 0;
    $8 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($8 | 0) == 1) {
     break label$2
    }
    $2 = HEAPF64[$7 >> 3];
    HEAP32[16874] = 0;
    __invoke__class_maxiGrain___class_maxiGrain___class_maxiSample__double_double_double__class_maxiGrainWindowCache_(776, $4 | 0, $6 | 0, +$2, +$3, +$1, $0 + 16 | 0) | 0;
    $6 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($6 | 0) == 1) {
     break label$2
    }
    maxiGrainPlayer__addGrain_28maxiGrainBase__29(HEAP32[$0 + 12 >> 2], $4);
   }
   $1 = maxiGrainPlayer__play_28_29(HEAP32[$0 + 12 >> 2]);
   $0 = $5 + 32 | 0;
   if ($0 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $0;
   return +$1;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  dlfree($4);
  __resumeException($0 | 0);
  abort();
 }
 
 function void_20emscripten__internal__RegisterClassMethod_double_20_28maxiStretch_hannWinFunctor_____29_28double_2c_20double_2c_20double_2c_20int_29___invoke_maxiStretch_hannWinFunctor__20__28char_20const__2c_20double_20_28maxiStretch_hannWinFunctor_____29_28double_2c_20double_2c_20double_2c_20int_29_29($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  $2 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 12 >> 2] = $2;
  _embind_register_class_function(23464, 3793, 6, 24160, 24184, 792, void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____emscripten__internal__getContext_void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28int_20const__29__28void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28int_20const__29_29_29_28int_20const__29($1 + 8 | 0) | 0, 0);
  $0 = $1 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function maxiGrainPlayer___maxiGrainPlayer_28_29($0) {
  std____2____list_imp_maxiGrainBase__2c_20std____2__allocator_maxiGrainBase___20___clear_28_29($0);
  return $0;
 }
 
 function maxiGrainPlayer__maxiGrainPlayer_28maxiSample__29($0, $1) {
  std____2____list_imp_maxiGrainBase__2c_20std____2__allocator_maxiGrainBase___20_____list_imp_28_29($0);
  HEAP32[$0 + 12 >> 2] = $1;
 }
 
 function maxiGrain_hannWinFunctor___maxiGrain_28maxiSample__2c_20double_2c_20double_2c_20double_2c_20maxiGrainWindowCache_hannWinFunctor___29($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = +$2;
  $3 = +$3;
  $4 = +$4;
  $5 = $5 | 0;
  var $6 = 0, $7 = 0, $8 = 0;
  $7 = global$0 - 16 | 0;
  $6 = $7;
  if ($6 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $6;
  HEAP32[$0 >> 2] = 22652;
  HEAPF64[$0 + 56 >> 3] = $4;
  HEAPF64[$0 + 24 >> 3] = $3;
  HEAPF64[$0 + 16 >> 3] = $2;
  HEAP32[$0 + 8 >> 2] = $1;
  HEAP32[$0 >> 2] = 22564;
  HEAP32[$0 + 84 >> 2] = std____2__vector_double_2c_20std____2__allocator_double__20___operator_5b_5d_28unsigned_20long_29($1 + 108 | 0, 0);
  $6 = maxiSample__getLength_28_29_20const($1);
  $8 = $0;
  $2 = HEAPF64[$0 + 16 >> 3] * +($6 >>> 0);
  label$2 : {
   if ($2 < 4294967296.0 & $2 >= 0.0) {
    $6 = ~~$2 >>> 0;
    break label$2;
   }
   $6 = 0;
  }
  HEAP32[$8 + 32 >> 2] = $6;
  $6 = HEAP32[$1 + 100 >> 2];
  $2 = HEAPF64[$0 + 24 >> 3];
  HEAPF64[$0 + 48 >> 3] = 1.0 / $2;
  HEAP32[$0 + 36 >> 2] = 0;
  HEAP8[$0 + 4 | 0] = 0;
  $8 = $0;
  $2 = $2 * +($6 | 0);
  label$4 : {
   if ($2 < 4294967296.0 & $2 >= 0.0) {
    $6 = ~~$2 >>> 0;
    break label$4;
   }
   $6 = 0;
  }
  HEAP32[$8 + 40 >> 2] = $6;
  HEAP32[$0 + 96 >> 2] = $6 + -1;
  HEAP32[$7 + 12 >> 2] = maxiSample__getLength_28_29_20const($1);
  $1 = HEAP32[$0 + 40 >> 2];
  $6 = HEAP32[$0 + 32 >> 2];
  HEAP32[16874] = 0;
  HEAP32[$7 + 8 >> 2] = $1 + $6;
  $1 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(38, $7 + 12 | 0, $7 + 8 | 0) | 0;
  $6 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$6 : {
   label$7 : {
    if (($6 | 0) != 1) {
     HEAP32[$0 + 44 >> 2] = HEAP32[$1 >> 2];
     $2 = HEAPF64[$0 + 48 >> 3] * $4;
     HEAPF64[$0 + 72 >> 3] = $2;
     HEAPF64[$0 + 16 >> 3] = HEAPU32[($2 > 0.0 ? 32 : 44) + $0 >> 2];
     HEAPF64[$0 + 64 >> 3] = $2 != 0.0 ? +HEAPU32[$0 + 40 >> 2] / (+HEAP32[12865] / $2) : 0.0;
     $1 = HEAP32[$0 + 40 >> 2];
     HEAP32[16874] = 0;
     $1 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(793, $5 | 0, $1 | 0) | 0;
     $5 = HEAP32[16874];
     HEAP32[16874] = 0;
     if (($5 | 0) != 1) {
      break label$7
     }
     break label$6;
    }
    break label$6;
   }
   HEAP32[$0 + 80 >> 2] = $1;
   $1 = $7 + 16 | 0;
   if ($1 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $1;
   return $0 | 0;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  __resumeException($0 | 0);
  abort();
 }
 
 function maxiGrainPlayer__addGrain_28maxiGrainBase__29($0, $1) {
  var $2 = 0, $3 = 0;
  $2 = global$0 - 16 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  HEAP32[$2 + 12 >> 2] = $1;
  std____2__list_maxiGrainBase__2c_20std____2__allocator_maxiGrainBase___20___push_back_28maxiGrainBase__20const__29($0, $2 + 12 | 0);
  $0 = $2 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function maxiGrainPlayer__play_28_29($0) {
  var $1 = 0, $2 = 0, $3 = 0.0, $4 = 0.0;
  $1 = global$0 - 32 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  HEAP32[$1 + 24 >> 2] = std____2____list_imp_maxiGrainBase__2c_20std____2__allocator_maxiGrainBase___20___begin_28_29($0);
  HEAP32[$1 + 16 >> 2] = std____2__vector_double_2c_20std____2__allocator_double__20_____make_iter_28double__29($0);
  if (bool_20std____2__operator___double___28std____2____wrap_iter_double___20const__2c_20std____2____wrap_iter_double___20const__29($1 + 24 | 0, $1 + 16 | 0)) {
   while (1) {
    $2 = HEAP32[std____2____list_iterator_maxiGrainBase__2c_20void____operator__28_29_20const($1 + 24 | 0) >> 2];
    $4 = +FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] >> 2]]($2);
    label$4 : {
     if (HEAPU8[HEAP32[std____2____list_iterator_maxiGrainBase__2c_20void____operator__28_29_20const($1 + 24 | 0) >> 2] + 4 | 0]) {
      $2 = HEAP32[std____2____list_iterator_maxiGrainBase__2c_20void____operator__28_29_20const($1 + 24 | 0) >> 2];
      if ($2) {
       FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 8 >> 2]]($2)
      }
      HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 24 >> 2];
      HEAP32[$1 + 24 >> 2] = std____2__list_maxiGrainBase__2c_20std____2__allocator_maxiGrainBase___20___erase_28std____2____list_const_iterator_maxiGrainBase__2c_20void___29($0, HEAP32[$1 + 8 >> 2]);
      break label$4;
     }
     $2 = $1 + 24 | 0;
     HEAP32[$2 >> 2] = HEAP32[HEAP32[$2 >> 2] + 4 >> 2];
    }
    $3 = $3 + $4;
    HEAP32[$1 + 16 >> 2] = std____2__vector_double_2c_20std____2__allocator_double__20_____make_iter_28double__29($0);
    if (bool_20std____2__operator___double___28std____2____wrap_iter_double___20const__2c_20std____2____wrap_iter_double___20const__29($1 + 24 | 0, $1 + 16 | 0)) {
     continue
    }
    break;
   }
  }
  $0 = $1 + 32 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
  return $3;
 }
 
 function EmscriptenBindingInitializer_my_module_maxibits__EmscriptenBindingInitializer_my_module_maxibits_28_29() {
  var $0 = 0, $1 = 0;
  $0 = global$0 - 16 | 0;
  $1 = $0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  _embind_register_class(24204, 24224, 24252, 0, 4688, 794, 4691, 0, 4691, 0, 3955, 4693, 795);
  _embind_register_class_class_function(24204, 3964, 2, 24268, 4752, 796, 797);
  _embind_register_class_class_function(24204, 3968, 3, 24276, 4796, 798, 799);
  _embind_register_class_class_function(24204, 3971, 3, 24276, 4796, 798, 800);
  _embind_register_class_class_function(24204, 3975, 3, 24276, 4796, 798, 801);
  _embind_register_class_class_function(24204, 3979, 4, 24288, 4832, 802, 803);
  _embind_register_class_class_function(24204, 3981, 3, 24276, 4796, 798, 804);
  _embind_register_class_class_function(24204, 3986, 3, 24276, 4796, 798, 805);
  _embind_register_class_class_function(24204, 3990, 3, 24276, 4796, 798, 806);
  _embind_register_class_class_function(24204, 3995, 2, 24268, 4752, 796, 807);
  _embind_register_class_class_function(24204, 3999, 2, 24268, 4752, 796, 808);
  _embind_register_class_class_function(24204, 4003, 2, 24268, 4752, 796, 809);
  _embind_register_class_class_function(24204, 3013, 3, 24276, 4796, 798, 810);
  _embind_register_class_class_function(24204, 3017, 3, 24276, 4796, 798, 811);
  _embind_register_class_class_function(24204, 3021, 3, 24276, 4796, 798, 812);
  _embind_register_class_class_function(24204, 3025, 3, 24276, 4796, 798, 813);
  _embind_register_class_class_function(24204, 3029, 3, 24276, 4796, 798, 814);
  _embind_register_class_class_function(24204, 3032, 3, 24276, 4796, 798, 815);
  _embind_register_class_class_function(24204, 3035, 3, 24276, 4796, 798, 816);
  _embind_register_class_class_function(24204, 3039, 3, 24276, 4796, 798, 817);
  _embind_register_class_class_function(24204, 4007, 3, 24276, 4796, 798, 818);
  _embind_register_class_class_function(24204, 1758, 1, 24304, 4688, 819, 820);
  _embind_register_class_class_function(24204, 4010, 2, 24308, 6976, 821, 822);
  _embind_register_class_class_function(24204, 4019, 2, 24308, 6976, 821, 823);
  _embind_register_class_class_function(24204, 4032, 2, 24316, 24324, 824, 825);
  $0 = $0 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function void_20const__20emscripten__internal__getActualType_maxiBits__28maxiBits__29($0) {
  $0 = $0 | 0;
  return 24204;
 }
 
 function emscripten__internal__Invoker_unsigned_20int_2c_20unsigned_20int___invoke_28unsigned_20int_20_28__29_28unsigned_20int_29_2c_20unsigned_20int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0;
  $2 = global$0 - 16 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  HEAP32[$2 + 12 >> 2] = FUNCTION_TABLE[$0]($1);
  $0 = HEAP32[$2 + 12 >> 2];
  $1 = $2 + 16 | 0;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  return $0 | 0;
 }
 
 function emscripten__internal__Invoker_unsigned_20int_2c_20unsigned_20int_2c_20unsigned_20int___invoke_28unsigned_20int_20_28__29_28unsigned_20int_2c_20unsigned_20int_29_2c_20unsigned_20int_2c_20unsigned_20int_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0;
  $3 = global$0 - 16 | 0;
  $4 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  HEAP32[$3 + 12 >> 2] = FUNCTION_TABLE[$0]($1, $2);
  $0 = HEAP32[$3 + 12 >> 2];
  $1 = $3 + 16 | 0;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  return $0 | 0;
 }
 
 function maxiBits__at_28unsigned_20int_2c_20unsigned_20int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return $0 >>> $1 & 1;
 }
 
 function maxiBits__shl_28unsigned_20int_2c_20unsigned_20int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return $0 << $1;
 }
 
 function maxiBits__shr_28unsigned_20int_2c_20unsigned_20int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return $0 >>> $1 | 0;
 }
 
 function emscripten__internal__Invoker_unsigned_20int_2c_20unsigned_20int_2c_20unsigned_20int_2c_20unsigned_20int___invoke_28unsigned_20int_20_28__29_28unsigned_20int_2c_20unsigned_20int_2c_20unsigned_20int_29_2c_20unsigned_20int_2c_20unsigned_20int_2c_20unsigned_20int_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0;
  $4 = global$0 - 16 | 0;
  $5 = $4;
  if ($4 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $5;
  HEAP32[$4 + 12 >> 2] = FUNCTION_TABLE[$0]($1, $2, $3);
  $0 = HEAP32[$4 + 12 >> 2];
  $1 = $4 + 16 | 0;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  return $0 | 0;
 }
 
 function maxiBits__r_28unsigned_20int_2c_20unsigned_20int_2c_20unsigned_20int_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0;
  $3 = $0;
  $4 = maxiBits__l_28unsigned_20int_29($2);
  $0 = ($1 - $2 | 0) + 1 | 0;
  return ($3 & maxiBits__shl_28unsigned_20int_2c_20unsigned_20int_29($4, $0)) >>> $0 | 0;
 }
 
 function maxiBits__land_28unsigned_20int_2c_20unsigned_20int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return $0 & $1;
 }
 
 function maxiBits__lor_28unsigned_20int_2c_20unsigned_20int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return $0 | $1;
 }
 
 function maxiBits__lxor_28unsigned_20int_2c_20unsigned_20int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return $0 ^ $1;
 }
 
 function maxiBits__neg_28unsigned_20int_29($0) {
  $0 = $0 | 0;
  return $0 ^ -1;
 }
 
 function maxiBits__inc_28unsigned_20int_29($0) {
  $0 = $0 | 0;
  return $0 + 1 | 0;
 }
 
 function maxiBits__dec_28unsigned_20int_29($0) {
  $0 = $0 | 0;
  return $0 + -1 | 0;
 }
 
 function maxiBits__add_28unsigned_20int_2c_20unsigned_20int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return $0 + $1 | 0;
 }
 
 function maxiBits__sub_28unsigned_20int_2c_20unsigned_20int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return $0 - $1 | 0;
 }
 
 function maxiBits__mul_28unsigned_20int_2c_20unsigned_20int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return Math_imul($0, $1) | 0;
 }
 
 function maxiBits__div_28unsigned_20int_2c_20unsigned_20int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return ($0 >>> 0) / ($1 >>> 0) | 0;
 }
 
 function maxiBits__gt_28unsigned_20int_2c_20unsigned_20int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return $0 >>> 0 > $1 >>> 0 | 0;
 }
 
 function maxiBits__lt_28unsigned_20int_2c_20unsigned_20int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return $0 >>> 0 < $1 >>> 0 | 0;
 }
 
 function maxiBits__gte_28unsigned_20int_2c_20unsigned_20int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return $0 >>> 0 >= $1 >>> 0 | 0;
 }
 
 function maxiBits__lte_28unsigned_20int_2c_20unsigned_20int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return $0 >>> 0 <= $1 >>> 0 | 0;
 }
 
 function emscripten__internal__Invoker_unsigned_20int___invoke_28unsigned_20int_20_28__29_28_29_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  HEAP32[$1 + 12 >> 2] = FUNCTION_TABLE[$0]();
  $0 = HEAP32[$1 + 12 >> 2];
  $1 = $1 + 16 | 0;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  return $0 | 0;
 }
 
 function maxiBits__noise_28_29() {
  return rand() | 0;
 }
 
 function maxiBits__toSignal_28unsigned_20int_29($0) {
  $0 = $0 | 0;
  return +maxiMap__linlin_28double_2c_20double_2c_20double_2c_20double_2c_20double_29(+($0 >>> 0), 0.0, 4294967295.0, -1.0, 1.0);
 }
 
 function maxiBits__toTrigSignal_28unsigned_20int_29($0) {
  $0 = $0 | 0;
  return +($0 ? 1.0 : -1.0);
 }
 
 function emscripten__internal__Invoker_unsigned_20int_2c_20double___invoke_28unsigned_20int_20_28__29_28double_29_2c_20double_29($0, $1) {
  $0 = $0 | 0;
  $1 = +$1;
  var $2 = 0, $3 = 0;
  $2 = global$0 - 16 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  HEAP32[$2 + 12 >> 2] = FUNCTION_TABLE[$0]($1);
  $0 = HEAP32[$2 + 12 >> 2];
  $2 = $2 + 16 | 0;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  return $0 | 0;
 }
 
 function maxiBits__fromSignal_28double_29($0) {
  $0 = +$0;
  $0 = $0 * 2147483646.0 + 2147483647.0;
  if ($0 < 4294967296.0 & $0 >= 0.0) {
   return ~~$0 >>> 0 | 0
  }
  return 0;
 }
 
 function maxiBits__l_28unsigned_20int_29($0) {
  var $1 = 0, $2 = 0;
  label$1 : {
   if (!$0) {
    break label$1
   }
   while (1) {
    $2 = (1 << $1) + $2 | 0;
    $1 = $1 + 1 | 0;
    if (($1 | 0) != ($0 | 0)) {
     continue
    }
    break;
   };
  }
  return $2;
 }
 
 function EmscriptenBindingInitializer_maxiTrigger__EmscriptenBindingInitializer_maxiTrigger_28_29() {
  var $0 = 0, $1 = 0;
  $0 = global$0 - 32 | 0;
  $1 = $0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  _embind_register_class(24344, 24368, 24400, 0, 4688, 826, 4691, 0, 4691, 0, 4043, 4693, 827);
  _embind_register_smart_ptr(24720, 24344, 4055, 2, 4688, 828, 6772, 829, 4752, 830, 4693, 831);
  _embind_register_class_constructor(24344, 1, 24728, 4688, 832, 833);
  HEAP32[$0 + 28 >> 2] = 0;
  HEAP32[$0 + 24 >> 2] = 834;
  $1 = HEAP32[$0 + 28 >> 2];
  HEAP32[$0 + 16 >> 2] = HEAP32[$0 + 24 >> 2];
  HEAP32[$0 + 20 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_double_20_28maxiTrigger____29_28double_29___invoke_maxiTrigger__28char_20const__2c_20double_20_28maxiTrigger____29_28double_29_29($0 + 16 | 0);
  HEAP32[$0 + 28 >> 2] = 0;
  HEAP32[$0 + 24 >> 2] = 835;
  $1 = HEAP32[$0 + 28 >> 2];
  HEAP32[$0 + 8 >> 2] = HEAP32[$0 + 24 >> 2];
  HEAP32[$0 + 12 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_double_20_28maxiTrigger____29_28double_2c_20double_29___invoke_maxiTrigger__28char_20const__2c_20double_20_28maxiTrigger____29_28double_2c_20double_29_29($0 + 8 | 0);
  $0 = $0 + 32 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function void_20const__20emscripten__internal__getActualType_maxiTrigger__28maxiTrigger__29($0) {
  $0 = $0 | 0;
  return 24344;
 }
 
 function emscripten__smart_ptr_trait_std____2__shared_ptr_maxiTrigger__20___share_28maxiTrigger__2c_20emscripten__internal___EM_VAL__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0;
  $2 = global$0 - 16 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  $3 = operator_20new_28unsigned_20long_29(8);
  HEAP32[16874] = 0;
  emscripten__val__take_ownership_28emscripten__internal___EM_VAL__29($2, $1);
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      if (($1 | 0) != 1) {
       HEAP32[16874] = 0;
       $1 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(836, $2 + 8 | 0, $2 | 0) | 0;
       $4 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($4 | 0) == 1) {
        break label$5
       }
       HEAP32[16874] = 0;
       $0 = __invoke___22class_std____2__shared_ptr_22____22class_std____2__shared_ptr_22___class_maxiOsc____22class_emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc____val_deleter_22__i32(837, $3 | 0, $0 | 0, $1 | 0, 0) | 0;
       $4 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($4 | 0) == 1) {
        break label$4
       }
       emscripten__val___val_28_29($1);
       emscripten__val___val_28_29($2);
       $1 = $2 + 16 | 0;
       if ($1 >>> 0 < global$2 >>> 0) {
        __handle_stack_overflow()
       }
       global$0 = $1;
       return $0 | 0;
      }
      $0 = __cxa_find_matching_catch_2() | 0;
      getTempRet0() | 0;
      break label$2;
     }
     $0 = __cxa_find_matching_catch_2() | 0;
     getTempRet0() | 0;
     break label$3;
    }
    $0 = __cxa_find_matching_catch_2() | 0;
    getTempRet0() | 0;
    emscripten__val___val_28_29($1);
   }
   emscripten__val___val_28_29($2);
  }
  dlfree($3);
  __resumeException($0 | 0);
  abort();
 }
 
 function emscripten__internal__Invoker_std____2__shared_ptr_maxiTrigger__20___invoke_28std____2__shared_ptr_maxiTrigger__20_28__29_28_29_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  FUNCTION_TABLE[$0]($1 + 8 | 0);
  HEAP32[16874] = 0;
  $0 = __invoke_i1___22class_std____2__basic_ifstream_22_(838, $1 + 8 | 0) | 0;
  $2 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($2 | 0) != 1) {
   std____2__shared_ptr_maxiOsc____shared_ptr_28_29($1 + 8 | 0);
   $1 = $1 + 16 | 0;
   if ($1 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $1;
   return $0 | 0;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__shared_ptr_maxiOsc____shared_ptr_28_29($1 + 8 | 0);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2__enable_if___28is_array_maxiTrigger___value_29_2c_20std____2__shared_ptr_maxiTrigger__20___type_20std____2__make_shared_maxiTrigger__28_29($0) {
  $0 = $0 | 0;
  std____2__shared_ptr_maxiTrigger__20std____2__shared_ptr_maxiTrigger___make_shared___28_29($0);
 }
 
 function void_20emscripten__internal__RegisterClassMethod_double_20_28maxiTrigger____29_28double_29___invoke_maxiTrigger__28char_20const__2c_20double_20_28maxiTrigger____29_28double_29_29($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  $2 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 12 >> 2] = $2;
  _embind_register_class_function(24344, 4079, 3, 24840, 6892, 839, void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____emscripten__internal__getContext_void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28int_20const__29__28void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28int_20const__29_29_29_28int_20const__29($1 + 8 | 0) | 0, 0);
  $0 = $1 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function maxiTrigger__onChanged_28double_2c_20double_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = +$2;
  var $3 = 0.0;
  $3 = Math_abs($1 - HEAPF64[$0 >> 3]);
  HEAPF64[$0 >> 3] = $1;
  return +($3 > $2 ? 1.0 : 0.0);
 }
 
 function void_20emscripten__internal__RegisterClassMethod_double_20_28maxiTrigger____29_28double_2c_20double_29___invoke_maxiTrigger__28char_20const__2c_20double_20_28maxiTrigger____29_28double_2c_20double_29_29($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  $2 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 12 >> 2] = $2;
  _embind_register_class_function(24344, 4084, 4, 24864, 6960, 840, void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____emscripten__internal__getContext_void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28int_20const__29__28void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28int_20const__29_29_29_28int_20const__29($1 + 8 | 0) | 0, 0);
  $0 = $1 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function EmscriptenBindingInitializer_maxiCounter__EmscriptenBindingInitializer_maxiCounter_28_29() {
  var $0 = 0, $1 = 0;
  $0 = global$0 - 16 | 0;
  $1 = $0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  _embind_register_class(24896, 24920, 24952, 0, 4688, 841, 4691, 0, 4691, 0, 4094, 4693, 842);
  _embind_register_smart_ptr(25272, 24896, 4106, 2, 4688, 843, 6772, 844, 4752, 845, 4693, 846);
  _embind_register_class_constructor(24896, 1, 25280, 4688, 847, 848);
  HEAP32[$0 + 12 >> 2] = 0;
  HEAP32[$0 + 8 >> 2] = 849;
  $1 = HEAP32[$0 + 12 >> 2];
  HEAP32[$0 >> 2] = HEAP32[$0 + 8 >> 2];
  HEAP32[$0 + 4 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_double_20_28maxiCounter____29_28double_2c_20double_29___invoke_maxiCounter__28char_20const__2c_20double_20_28maxiCounter____29_28double_2c_20double_29_29($0);
  $0 = $0 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function void_20const__20emscripten__internal__getActualType_maxiCounter__28maxiCounter__29($0) {
  $0 = $0 | 0;
  return 24896;
 }
 
 function emscripten__smart_ptr_trait_std____2__shared_ptr_maxiCounter__20___share_28maxiCounter__2c_20emscripten__internal___EM_VAL__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0;
  $2 = global$0 - 16 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  $3 = operator_20new_28unsigned_20long_29(8);
  HEAP32[16874] = 0;
  emscripten__val__take_ownership_28emscripten__internal___EM_VAL__29($2, $1);
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      if (($1 | 0) != 1) {
       HEAP32[16874] = 0;
       $1 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(850, $2 + 8 | 0, $2 | 0) | 0;
       $4 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($4 | 0) == 1) {
        break label$5
       }
       HEAP32[16874] = 0;
       $0 = __invoke___22class_std____2__shared_ptr_22____22class_std____2__shared_ptr_22___class_maxiOsc____22class_emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc____val_deleter_22__i32(851, $3 | 0, $0 | 0, $1 | 0, 0) | 0;
       $4 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($4 | 0) == 1) {
        break label$4
       }
       emscripten__val___val_28_29($1);
       emscripten__val___val_28_29($2);
       $1 = $2 + 16 | 0;
       if ($1 >>> 0 < global$2 >>> 0) {
        __handle_stack_overflow()
       }
       global$0 = $1;
       return $0 | 0;
      }
      $0 = __cxa_find_matching_catch_2() | 0;
      getTempRet0() | 0;
      break label$2;
     }
     $0 = __cxa_find_matching_catch_2() | 0;
     getTempRet0() | 0;
     break label$3;
    }
    $0 = __cxa_find_matching_catch_2() | 0;
    getTempRet0() | 0;
    emscripten__val___val_28_29($1);
   }
   emscripten__val___val_28_29($2);
  }
  dlfree($3);
  __resumeException($0 | 0);
  abort();
 }
 
 function emscripten__internal__Invoker_std____2__shared_ptr_maxiCounter__20___invoke_28std____2__shared_ptr_maxiCounter__20_28__29_28_29_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  FUNCTION_TABLE[$0]($1 + 8 | 0);
  HEAP32[16874] = 0;
  $0 = __invoke_i1___22class_std____2__basic_ifstream_22_(852, $1 + 8 | 0) | 0;
  $2 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($2 | 0) != 1) {
   std____2__shared_ptr_maxiOsc____shared_ptr_28_29($1 + 8 | 0);
   $1 = $1 + 16 | 0;
   if ($1 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $1;
   return $0 | 0;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__shared_ptr_maxiOsc____shared_ptr_28_29($1 + 8 | 0);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2__enable_if___28is_array_maxiCounter___value_29_2c_20std____2__shared_ptr_maxiCounter__20___type_20std____2__make_shared_maxiCounter__28_29($0) {
  $0 = $0 | 0;
  std____2__shared_ptr_maxiCounter__20std____2__shared_ptr_maxiCounter___make_shared___28_29($0);
 }
 
 function maxiCounter__count_28double_2c_20double_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = +$2;
  if (maxiTrigger__onZX_28double_29($0 + 8 | 0, $1) != 0.0) {
   HEAPF64[$0 >> 3] = HEAPF64[$0 >> 3] + 1.0
  }
  if (maxiTrigger__onZX_28double_29($0 + 24 | 0, $2) != 0.0) {
   HEAP32[$0 >> 2] = 0;
   HEAP32[$0 + 4 >> 2] = 0;
  }
  return +HEAPF64[$0 >> 3];
 }
 
 function void_20emscripten__internal__RegisterClassMethod_double_20_28maxiCounter____29_28double_2c_20double_29___invoke_maxiCounter__28char_20const__2c_20double_20_28maxiCounter____29_28double_2c_20double_29_29($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  $2 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 12 >> 2] = $2;
  _embind_register_class_function(24896, 4130, 4, 25392, 6960, 853, void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____emscripten__internal__getContext_void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28int_20const__29__28void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28int_20const__29_29_29_28int_20const__29($1 + 8 | 0) | 0, 0);
  $0 = $1 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function EmscriptenBindingInitializer_maxiIndex__EmscriptenBindingInitializer_maxiIndex_28_29() {
  var $0 = 0, $1 = 0;
  $0 = global$0 - 16 | 0;
  $1 = $0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  _embind_register_class(25420, 25440, 25472, 0, 4688, 854, 4691, 0, 4691, 0, 4136, 4693, 855);
  _embind_register_smart_ptr(25784, 25420, 4146, 2, 4688, 856, 6772, 857, 4752, 858, 4693, 859);
  _embind_register_class_constructor(25420, 1, 25792, 4688, 860, 861);
  HEAP32[$0 + 12 >> 2] = 0;
  HEAP32[$0 + 8 >> 2] = 862;
  $1 = HEAP32[$0 + 12 >> 2];
  HEAP32[$0 >> 2] = HEAP32[$0 + 8 >> 2];
  HEAP32[$0 + 4 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_double_20_28maxiIndex____29_28double_2c_20double_2c_20std____2__vector_double_2c_20std____2__allocator_double__20__29___invoke_maxiIndex__28char_20const__2c_20double_20_28maxiIndex____29_28double_2c_20double_2c_20std____2__vector_double_2c_20std____2__allocator_double__20__29_29($0);
  $0 = $0 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function void_20const__20emscripten__internal__getActualType_maxiIndex__28maxiIndex__29($0) {
  $0 = $0 | 0;
  return 25420;
 }
 
 function emscripten__smart_ptr_trait_std____2__shared_ptr_maxiIndex__20___share_28maxiIndex__2c_20emscripten__internal___EM_VAL__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0;
  $2 = global$0 - 16 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  $3 = operator_20new_28unsigned_20long_29(8);
  HEAP32[16874] = 0;
  emscripten__val__take_ownership_28emscripten__internal___EM_VAL__29($2, $1);
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      if (($1 | 0) != 1) {
       HEAP32[16874] = 0;
       $1 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(863, $2 + 8 | 0, $2 | 0) | 0;
       $4 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($4 | 0) == 1) {
        break label$5
       }
       HEAP32[16874] = 0;
       $0 = __invoke___22class_std____2__shared_ptr_22____22class_std____2__shared_ptr_22___class_maxiOsc____22class_emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc____val_deleter_22__i32(864, $3 | 0, $0 | 0, $1 | 0, 0) | 0;
       $4 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($4 | 0) == 1) {
        break label$4
       }
       emscripten__val___val_28_29($1);
       emscripten__val___val_28_29($2);
       $1 = $2 + 16 | 0;
       if ($1 >>> 0 < global$2 >>> 0) {
        __handle_stack_overflow()
       }
       global$0 = $1;
       return $0 | 0;
      }
      $0 = __cxa_find_matching_catch_2() | 0;
      getTempRet0() | 0;
      break label$2;
     }
     $0 = __cxa_find_matching_catch_2() | 0;
     getTempRet0() | 0;
     break label$3;
    }
    $0 = __cxa_find_matching_catch_2() | 0;
    getTempRet0() | 0;
    emscripten__val___val_28_29($1);
   }
   emscripten__val___val_28_29($2);
  }
  dlfree($3);
  __resumeException($0 | 0);
  abort();
 }
 
 function emscripten__internal__Invoker_std____2__shared_ptr_maxiIndex__20___invoke_28std____2__shared_ptr_maxiIndex__20_28__29_28_29_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  FUNCTION_TABLE[$0]($1 + 8 | 0);
  HEAP32[16874] = 0;
  $0 = __invoke_i1___22class_std____2__basic_ifstream_22_(865, $1 + 8 | 0) | 0;
  $2 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($2 | 0) != 1) {
   std____2__shared_ptr_maxiOsc____shared_ptr_28_29($1 + 8 | 0);
   $1 = $1 + 16 | 0;
   if ($1 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $1;
   return $0 | 0;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__shared_ptr_maxiOsc____shared_ptr_28_29($1 + 8 | 0);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2__enable_if___28is_array_maxiIndex___value_29_2c_20std____2__shared_ptr_maxiIndex__20___type_20std____2__make_shared_maxiIndex__28_29($0) {
  $0 = $0 | 0;
  std____2__shared_ptr_maxiIndex__20std____2__shared_ptr_maxiIndex___make_shared___28_29($0);
 }
 
 function maxiIndex__pull_28double_2c_20double_2c_20std____2__vector_double_2c_20std____2__allocator_double__20__29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = +$2;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0;
  if (maxiTrigger__onZX_28double_29($0, $1) != 0.0) {
   $5 = $0;
   $6 = $0;
   $4 = $3;
   $1 = Math_floor(Math_min(Math_max($2, 0.0), 1.0) * .99999999 * +(std____2__vector_double_2c_20std____2__allocator_double__20___size_28_29_20const($3) >>> 0));
   label$2 : {
    if ($1 < 4294967296.0 & $1 >= 0.0) {
     $3 = ~~$1 >>> 0;
     break label$2;
    }
    $3 = 0;
   }
   $3 = std____2__vector_double_2c_20std____2__allocator_double__20___operator_5b_5d_28unsigned_20long_29($4, $3);
   $4 = HEAP32[$3 + 4 >> 2];
   HEAP32[$6 + 16 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$5 + 20 >> 2] = $4;
  }
  return +HEAPF64[$0 + 16 >> 3];
 }
 
 function void_20emscripten__internal__RegisterClassMethod_double_20_28maxiIndex____29_28double_2c_20double_2c_20std____2__vector_double_2c_20std____2__allocator_double__20__29___invoke_maxiIndex__28char_20const__2c_20double_20_28maxiIndex____29_28double_2c_20double_2c_20std____2__vector_double_2c_20std____2__allocator_double__20__29_29($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  $2 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 12 >> 2] = $2;
  _embind_register_class_function(25420, 4168, 5, 25904, 18612, 866, void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____emscripten__internal__getContext_void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28int_20const__29__28void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28int_20const__29_29_29_28int_20const__29($1 + 8 | 0) | 0, 0);
  $0 = $1 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function EmscriptenBindingInitializer_maxiRatioSeq__EmscriptenBindingInitializer_maxiRatioSeq_28_29() {
  var $0 = 0, $1 = 0;
  $0 = global$0 - 32 | 0;
  $1 = $0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  _embind_register_class(25940, 25964, 26e3, 0, 4688, 867, 4691, 0, 4691, 0, 4173, 4693, 868);
  _embind_register_smart_ptr(26324, 25940, 4186, 2, 4688, 869, 6772, 870, 4752, 871, 4693, 872);
  _embind_register_class_constructor(25940, 1, 26332, 4688, 873, 874);
  HEAP32[$0 + 28 >> 2] = 0;
  HEAP32[$0 + 24 >> 2] = 875;
  $1 = HEAP32[$0 + 28 >> 2];
  HEAP32[$0 + 16 >> 2] = HEAP32[$0 + 24 >> 2];
  HEAP32[$0 + 20 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_double_20_28maxiRatioSeq____29_28double_2c_20std____2__vector_double_2c_20std____2__allocator_double__20__29___invoke_maxiRatioSeq__28char_20const__2c_20double_20_28maxiRatioSeq____29_28double_2c_20std____2__vector_double_2c_20std____2__allocator_double__20__29_29($0 + 16 | 0);
  HEAP32[$0 + 28 >> 2] = 0;
  HEAP32[$0 + 24 >> 2] = 876;
  $1 = HEAP32[$0 + 28 >> 2];
  HEAP32[$0 + 8 >> 2] = HEAP32[$0 + 24 >> 2];
  HEAP32[$0 + 12 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_double_20_28maxiRatioSeq____29_28double_2c_20std____2__vector_double_2c_20std____2__allocator_double__20__2c_20std____2__vector_double_2c_20std____2__allocator_double__20__29___invoke_maxiRatioSeq__28char_20const__2c_20double_20_28maxiRatioSeq____29_28double_2c_20std____2__vector_double_2c_20std____2__allocator_double__20__2c_20std____2__vector_double_2c_20std____2__allocator_double__20__29_29($0 + 8 | 0);
  $0 = $0 + 32 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function void_20const__20emscripten__internal__getActualType_maxiRatioSeq__28maxiRatioSeq__29($0) {
  $0 = $0 | 0;
  return 25940;
 }
 
 function emscripten__smart_ptr_trait_std____2__shared_ptr_maxiRatioSeq__20___share_28maxiRatioSeq__2c_20emscripten__internal___EM_VAL__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0;
  $2 = global$0 - 16 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  $3 = operator_20new_28unsigned_20long_29(8);
  HEAP32[16874] = 0;
  emscripten__val__take_ownership_28emscripten__internal___EM_VAL__29($2, $1);
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      if (($1 | 0) != 1) {
       HEAP32[16874] = 0;
       $1 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(877, $2 + 8 | 0, $2 | 0) | 0;
       $4 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($4 | 0) == 1) {
        break label$5
       }
       HEAP32[16874] = 0;
       $0 = __invoke___22class_std____2__shared_ptr_22____22class_std____2__shared_ptr_22___class_maxiOsc____22class_emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc____val_deleter_22__i32(878, $3 | 0, $0 | 0, $1 | 0, 0) | 0;
       $4 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($4 | 0) == 1) {
        break label$4
       }
       emscripten__val___val_28_29($1);
       emscripten__val___val_28_29($2);
       $1 = $2 + 16 | 0;
       if ($1 >>> 0 < global$2 >>> 0) {
        __handle_stack_overflow()
       }
       global$0 = $1;
       return $0 | 0;
      }
      $0 = __cxa_find_matching_catch_2() | 0;
      getTempRet0() | 0;
      break label$2;
     }
     $0 = __cxa_find_matching_catch_2() | 0;
     getTempRet0() | 0;
     break label$3;
    }
    $0 = __cxa_find_matching_catch_2() | 0;
    getTempRet0() | 0;
    emscripten__val___val_28_29($1);
   }
   emscripten__val___val_28_29($2);
  }
  dlfree($3);
  __resumeException($0 | 0);
  abort();
 }
 
 function emscripten__internal__Invoker_std____2__shared_ptr_maxiRatioSeq__20___invoke_28std____2__shared_ptr_maxiRatioSeq__20_28__29_28_29_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  FUNCTION_TABLE[$0]($1 + 8 | 0);
  HEAP32[16874] = 0;
  $0 = __invoke_i1___22class_std____2__basic_ifstream_22_(879, $1 + 8 | 0) | 0;
  $2 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($2 | 0) != 1) {
   std____2__shared_ptr_maxiOsc____shared_ptr_28_29($1 + 8 | 0);
   $1 = $1 + 16 | 0;
   if ($1 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $1;
   return $0 | 0;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__shared_ptr_maxiOsc____shared_ptr_28_29($1 + 8 | 0);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2__enable_if___28is_array_maxiRatioSeq___value_29_2c_20std____2__shared_ptr_maxiRatioSeq__20___type_20std____2__make_shared_maxiRatioSeq__28_29($0) {
  $0 = $0 | 0;
  std____2__shared_ptr_maxiRatioSeq__20std____2__shared_ptr_maxiRatioSeq___make_shared___28_29($0);
 }
 
 function maxiRatioSeq__playTrig_28double_2c_20std____2__vector_double_2c_20std____2__allocator_double__20__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0;
  $3 = int_20std____2__accumulate_std____2____wrap_iter_double___2c_20int__28std____2____wrap_iter_double___2c_20std____2____wrap_iter_double___2c_20int_29(std____2__vector_double_2c_20std____2__allocator_double__20___begin_28_29($2), std____2__vector_double_2c_20std____2__allocator_double__20___end_28_29($2));
  if (!std____2__vector_double_2c_20std____2__allocator_double__20___size_28_29_20const($2)) {
   HEAPF64[$0 >> 3] = $1;
   return 0.0;
  }
  $8 = +($3 | 0);
  $3 = 0;
  while (1) {
   $5 = $5 + HEAPF64[std____2__vector_double_2c_20std____2__allocator_double__20___operator_5b_5d_28unsigned_20long_29($2, $3) >> 3];
   $4 = $5 / $8;
   $4 = $4 == 1.0 ? 0.0 : $4;
   if (!!(HEAPF64[$0 >> 3] > $1)) {
    HEAPF64[$0 >> 3] = -1.0 / +HEAP32[12865]
   }
   $6 = $4 < $1 & HEAPF64[$0 >> 3] <= $4;
   $7 = $6 ? 1.0 : $7;
   if (($6 | 0) != 1) {
    $3 = $3 + 1 | 0;
    if ($3 >>> 0 < std____2__vector_double_2c_20std____2__allocator_double__20___size_28_29_20const($2) >>> 0) {
     continue
    }
   }
   break;
  };
  HEAPF64[$0 >> 3] = $1;
  return +$7;
 }
 
 function void_20emscripten__internal__RegisterClassMethod_double_20_28maxiRatioSeq____29_28double_2c_20std____2__vector_double_2c_20std____2__allocator_double__20__29___invoke_maxiRatioSeq__28char_20const__2c_20double_20_28maxiRatioSeq____29_28double_2c_20std____2__vector_double_2c_20std____2__allocator_double__20__29_29($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  $2 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 12 >> 2] = $2;
  _embind_register_class_function(25940, 4211, 4, 26448, 13120, 880, void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____emscripten__internal__getContext_void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28int_20const__29__28void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28int_20const__29_29_29_28int_20const__29($1 + 8 | 0) | 0, 0);
  $0 = $1 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function maxiRatioSeq__playValues_28double_2c_20std____2__vector_double_2c_20std____2__allocator_double__20__2c_20std____2__vector_double_2c_20std____2__allocator_double__20__29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0;
  $4 = global$0 - 16 | 0;
  $5 = $4;
  if ($4 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $5;
  $2 = std____2__vector_double_2c_20std____2__allocator_double__20___vector_28std____2__vector_double_2c_20std____2__allocator_double__20__20const__29($4, $2);
  HEAP32[16874] = 0;
  $1 = +__invoke_double__class_maxiRatioSeq__double___22class_std____2__vector_22_(875, $0 | 0, +$1, $2 | 0);
  $5 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($5 | 0) != 1) {
   std____2__vector_double_2c_20std____2__allocator_double__20____vector_28_29($2);
   label$3 : {
    if ($1 == 0.0) {
     break label$3
    }
    $2 = HEAP32[$0 + 8 >> 2] + 1 | 0;
    HEAP32[$0 + 8 >> 2] = $2;
    if ((std____2__vector_double_2c_20std____2__allocator_double__20___size_28_29_20const($3) | 0) != ($2 | 0)) {
     break label$3
    }
    HEAP32[$0 + 8 >> 2] = 0;
   }
   $1 = HEAPF64[std____2__vector_double_2c_20std____2__allocator_double__20___operator_5b_5d_28unsigned_20long_29($3, HEAP32[$0 + 8 >> 2]) >> 3];
   $0 = $4 + 16 | 0;
   if ($0 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $0;
   return +$1;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__vector_double_2c_20std____2__allocator_double__20____vector_28_29($2);
  __resumeException($0 | 0);
  abort();
 }
 
 function void_20emscripten__internal__RegisterClassMethod_double_20_28maxiRatioSeq____29_28double_2c_20std____2__vector_double_2c_20std____2__allocator_double__20__2c_20std____2__vector_double_2c_20std____2__allocator_double__20__29___invoke_maxiRatioSeq__28char_20const__2c_20double_20_28maxiRatioSeq____29_28double_2c_20std____2__vector_double_2c_20std____2__allocator_double__20__2c_20std____2__vector_double_2c_20std____2__allocator_double__20__29_29($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  $2 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 12 >> 2] = $2;
  _embind_register_class_function(25940, 4220, 5, 26464, 26484, 881, void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____emscripten__internal__getContext_void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28int_20const__29__28void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28int_20const__29_29_29_28int_20const__29($1 + 8 | 0) | 0, 0);
  $0 = $1 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function int_20std____2__accumulate_std____2____wrap_iter_double___2c_20int__28std____2____wrap_iter_double___2c_20std____2____wrap_iter_double___2c_20int_29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0.0, $5 = 0;
  $2 = global$0 - 16 | 0;
  $5 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $5;
  HEAP32[$2 >> 2] = $1;
  HEAP32[$2 + 8 >> 2] = $0;
  if (bool_20std____2__operator___double___28std____2____wrap_iter_double___20const__2c_20std____2____wrap_iter_double___20const__29($2 + 8 | 0, $2)) {
   while (1) {
    $4 = HEAPF64[HEAP32[$2 + 8 >> 2] >> 3] + +($3 | 0);
    label$4 : {
     if (Math_abs($4) < 2147483648.0) {
      $0 = ~~$4;
      break label$4;
     }
     $0 = -2147483648;
    }
    $3 = $0;
    std____2____wrap_iter_double____operator___28_29($2 + 8 | 0);
    if (bool_20std____2__operator___double___28std____2____wrap_iter_double___20const__2c_20std____2____wrap_iter_double___20const__29($2 + 8 | 0, $2)) {
     continue
    }
    break;
   }
  }
  $0 = $2 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
  return $3;
 }
 
 function EmscriptenBindingInitializer_maxiVerb__EmscriptenBindingInitializer_maxiVerb_28_29() {
  var $0 = 0, $1 = 0, $2 = 0;
  $0 = global$0 - 48 | 0;
  $1 = $0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  _embind_register_class(26532, 26576, 26612, 0, 4688, 882, 4691, 0, 4691, 0, 4231, 4693, 883);
  _embind_register_smart_ptr(26936, 26532, 4245, 2, 4688, 884, 6772, 885, 4752, 886, 4693, 887);
  _embind_register_class_constructor(26532, 1, 26944, 4688, 888, 889);
  HEAP32[$0 + 44 >> 2] = 0;
  HEAP32[$0 + 40 >> 2] = 890;
  $1 = HEAP32[$0 + 44 >> 2];
  HEAP32[$0 + 16 >> 2] = HEAP32[$0 + 40 >> 2];
  HEAP32[$0 + 20 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_double_20_28maxiSatReverb____29_28double_29___invoke_maxiSatReverb__28char_20const__2c_20double_20_28maxiSatReverb____29_28double_29_29($0 + 16 | 0);
  _embind_register_class(27084, 27124, 27160, 0, 4688, 891, 4691, 0, 4691, 0, 4271, 4693, 892);
  _embind_register_smart_ptr(27484, 27084, 4284, 2, 4688, 893, 6772, 894, 4752, 895, 4693, 896);
  _embind_register_class_constructor(27084, 1, 27492, 4688, 897, 898);
  HEAP32[$0 + 28 >> 2] = 0;
  HEAP32[$0 + 24 >> 2] = 899;
  $1 = HEAP32[$0 + 28 >> 2];
  HEAP32[$0 + 8 >> 2] = HEAP32[$0 + 24 >> 2];
  HEAP32[$0 + 12 >> 2] = $1;
  std____2__fpos___mbstate_t___state_28__mbstate_t_29($0 + 32 | 0, $0 + 8 | 0);
  $1 = HEAP32[$0 + 36 >> 2];
  $2 = HEAP32[$0 + 32 >> 2];
  HEAP32[$0 >> 2] = $2;
  HEAP32[$0 + 4 >> 2] = $1;
  HEAP32[$0 + 40 >> 2] = $2;
  HEAP32[$0 + 44 >> 2] = $1;
  void_20emscripten__internal__RegisterClassMethod_double_20_28maxiFreeVerb____29_28double_2c_20double_2c_20double_29___invoke_maxiFreeVerb__28char_20const__2c_20double_20_28maxiFreeVerb____29_28double_2c_20double_2c_20double_29_29($0);
  $0 = $0 + 48 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function void_20const__20emscripten__internal__getActualType_maxiSatReverb__28maxiSatReverb__29($0) {
  $0 = $0 | 0;
  return 26532;
 }
 
 function void_20emscripten__internal__raw_destructor_maxiSatReverb__28maxiSatReverb__29($0) {
  $0 = $0 | 0;
  if ($0) {
   maxiReverbBase___maxiReverbBase_28_29($0);
   dlfree($0);
  }
 }
 
 function emscripten__smart_ptr_trait_std____2__shared_ptr_maxiSatReverb__20___share_28maxiSatReverb__2c_20emscripten__internal___EM_VAL__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0;
  $2 = global$0 - 16 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  $3 = operator_20new_28unsigned_20long_29(8);
  HEAP32[16874] = 0;
  emscripten__val__take_ownership_28emscripten__internal___EM_VAL__29($2, $1);
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      if (($1 | 0) != 1) {
       HEAP32[16874] = 0;
       $1 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(900, $2 + 8 | 0, $2 | 0) | 0;
       $4 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($4 | 0) == 1) {
        break label$5
       }
       HEAP32[16874] = 0;
       $0 = __invoke___22class_std____2__shared_ptr_22____22class_std____2__shared_ptr_22___class_maxiOsc____22class_emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc____val_deleter_22__i32(901, $3 | 0, $0 | 0, $1 | 0, 0) | 0;
       $4 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($4 | 0) == 1) {
        break label$4
       }
       emscripten__val___val_28_29($1);
       emscripten__val___val_28_29($2);
       $1 = $2 + 16 | 0;
       if ($1 >>> 0 < global$2 >>> 0) {
        __handle_stack_overflow()
       }
       global$0 = $1;
       return $0 | 0;
      }
      $0 = __cxa_find_matching_catch_2() | 0;
      getTempRet0() | 0;
      break label$2;
     }
     $0 = __cxa_find_matching_catch_2() | 0;
     getTempRet0() | 0;
     break label$3;
    }
    $0 = __cxa_find_matching_catch_2() | 0;
    getTempRet0() | 0;
    emscripten__val___val_28_29($1);
   }
   emscripten__val___val_28_29($2);
  }
  dlfree($3);
  __resumeException($0 | 0);
  abort();
 }
 
 function emscripten__internal__Invoker_std____2__shared_ptr_maxiSatReverb__20___invoke_28std____2__shared_ptr_maxiSatReverb__20_28__29_28_29_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  FUNCTION_TABLE[$0]($1 + 8 | 0);
  HEAP32[16874] = 0;
  $0 = __invoke_i1___22class_std____2__basic_ifstream_22_(902, $1 + 8 | 0) | 0;
  $2 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($2 | 0) != 1) {
   std____2__shared_ptr_maxiOsc____shared_ptr_28_29($1 + 8 | 0);
   $1 = $1 + 16 | 0;
   if ($1 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $1;
   return $0 | 0;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__shared_ptr_maxiOsc____shared_ptr_28_29($1 + 8 | 0);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2__enable_if___28is_array_maxiSatReverb___value_29_2c_20std____2__shared_ptr_maxiSatReverb__20___type_20std____2__make_shared_maxiSatReverb__28_29($0) {
  $0 = $0 | 0;
  std____2__shared_ptr_maxiSatReverb__20std____2__shared_ptr_maxiSatReverb___make_shared___28_29($0);
 }
 
 function void_20emscripten__internal__RegisterClassMethod_double_20_28maxiSatReverb____29_28double_29___invoke_maxiSatReverb__28char_20const__2c_20double_20_28maxiSatReverb____29_28double_29_29($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  $2 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 12 >> 2] = $2;
  _embind_register_class_function(26532, 2076, 3, 27056, 6892, 903, void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____emscripten__internal__getContext_void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28int_20const__29__28void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28int_20const__29_29_29_28int_20const__29($1 + 8 | 0) | 0, 0);
  $0 = $1 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function void_20const__20emscripten__internal__getActualType_maxiFreeVerb__28maxiFreeVerb__29($0) {
  $0 = $0 | 0;
  return 27084;
 }
 
 function emscripten__smart_ptr_trait_std____2__shared_ptr_maxiFreeVerb__20___share_28maxiFreeVerb__2c_20emscripten__internal___EM_VAL__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0;
  $2 = global$0 - 16 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  $3 = operator_20new_28unsigned_20long_29(8);
  HEAP32[16874] = 0;
  emscripten__val__take_ownership_28emscripten__internal___EM_VAL__29($2, $1);
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      if (($1 | 0) != 1) {
       HEAP32[16874] = 0;
       $1 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(904, $2 + 8 | 0, $2 | 0) | 0;
       $4 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($4 | 0) == 1) {
        break label$5
       }
       HEAP32[16874] = 0;
       $0 = __invoke___22class_std____2__shared_ptr_22____22class_std____2__shared_ptr_22___class_maxiOsc____22class_emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc____val_deleter_22__i32(905, $3 | 0, $0 | 0, $1 | 0, 0) | 0;
       $4 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($4 | 0) == 1) {
        break label$4
       }
       emscripten__val___val_28_29($1);
       emscripten__val___val_28_29($2);
       $1 = $2 + 16 | 0;
       if ($1 >>> 0 < global$2 >>> 0) {
        __handle_stack_overflow()
       }
       global$0 = $1;
       return $0 | 0;
      }
      $0 = __cxa_find_matching_catch_2() | 0;
      getTempRet0() | 0;
      break label$2;
     }
     $0 = __cxa_find_matching_catch_2() | 0;
     getTempRet0() | 0;
     break label$3;
    }
    $0 = __cxa_find_matching_catch_2() | 0;
    getTempRet0() | 0;
    emscripten__val___val_28_29($1);
   }
   emscripten__val___val_28_29($2);
  }
  dlfree($3);
  __resumeException($0 | 0);
  abort();
 }
 
 function emscripten__internal__Invoker_std____2__shared_ptr_maxiFreeVerb__20___invoke_28std____2__shared_ptr_maxiFreeVerb__20_28__29_28_29_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  FUNCTION_TABLE[$0]($1 + 8 | 0);
  HEAP32[16874] = 0;
  $0 = __invoke_i1___22class_std____2__basic_ifstream_22_(906, $1 + 8 | 0) | 0;
  $2 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($2 | 0) != 1) {
   std____2__shared_ptr_maxiOsc____shared_ptr_28_29($1 + 8 | 0);
   $1 = $1 + 16 | 0;
   if ($1 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $1;
   return $0 | 0;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__shared_ptr_maxiOsc____shared_ptr_28_29($1 + 8 | 0);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2__enable_if___28is_array_maxiFreeVerb___value_29_2c_20std____2__shared_ptr_maxiFreeVerb__20___type_20std____2__make_shared_maxiFreeVerb__28_29($0) {
  $0 = $0 | 0;
  std____2__shared_ptr_maxiFreeVerb__20std____2__shared_ptr_maxiFreeVerb___make_shared___28_29($0);
 }
 
 function void_20emscripten__internal__RegisterClassMethod_double_20_28maxiFreeVerb____29_28double_2c_20double_2c_20double_29___invoke_maxiFreeVerb__28char_20const__2c_20double_20_28maxiFreeVerb____29_28double_2c_20double_2c_20double_29_29($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  $2 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 12 >> 2] = $2;
  _embind_register_class_function(27084, 2076, 5, 27616, 6932, 907, void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____emscripten__internal__getContext_void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28int_20const__29__28void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28int_20const__29_29_29_28int_20const__29($1 + 8 | 0) | 0, 0);
  $0 = $1 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function std____2____vector_base_float_2c_20std____2__allocator_float__20___clear_28_29($0) {
  std____2____vector_base_float_2c_20std____2__allocator_float__20_____destruct_at_end_28float__29($0, HEAP32[$0 >> 2]);
 }
 
 function std____2__vector_float_2c_20std____2__allocator_float__20_____annotate_shrink_28unsigned_20long_29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  std____2____vector_base_float_2c_20std____2__allocator_float__20___capacity_28_29_20const($0);
  std____2__vector_int_2c_20std____2__allocator_int__20___size_28_29_20const($0);
 }
 
 function std____2____vector_base_float_2c_20std____2__allocator_float__20_____destruct_at_end_28float__29($0, $1) {
  var $2 = 0, $3 = 0;
  $2 = HEAP32[$0 + 4 >> 2];
  label$1 : {
   while (1) {
    if (($1 | 0) == ($2 | 0)) {
     break label$1
    }
    std____2____vector_base_double_2c_20std____2__allocator_double__20_____alloc_28_29($0);
    HEAP32[16874] = 0;
    $2 = $2 + -4 | 0;
    $3 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($3 | 0) != 1) {
     continue
    }
    break;
   };
   $0 = __cxa_find_matching_catch_3(0) | 0;
   getTempRet0() | 0;
   __clang_call_terminate($0);
   abort();
  }
  HEAP32[$0 + 4 >> 2] = $1;
 }
 
 function std____2____vector_base_float_2c_20std____2__allocator_float__20___capacity_28_29_20const($0) {
  return HEAP32[std____2____vector_base_double_2c_20std____2__allocator_double__20_____alloc_28_29($0) >> 2] - HEAP32[$0 >> 2] >> 2;
 }
 
 function std____2__vector_double_2c_20std____2__allocator_double__20_____construct_at_end_28unsigned_20long_2c_20double_20const__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0;
  $3 = global$0 - 16 | 0;
  $4 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  $4 = std____2____vector_base_double_2c_20std____2__allocator_double__20_____alloc_28_29($0);
  while (1) {
   void_20std____2__allocator_traits_std____2__allocator_double__20___construct_double_2c_20double_20const___28std____2__allocator_double___2c_20double__2c_20double_20const__29($4, HEAP32[$0 + 4 >> 2], $2);
   HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + 8;
   $1 = $1 + -1 | 0;
   if ($1) {
    continue
   }
   break;
  };
  $0 = $3 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function void_20std____2__allocator_traits_std____2__allocator_double__20___construct_double_2c_20double_20const___28std____2__allocator_double___2c_20double__2c_20double_20const__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $0 = HEAP32[$2 + 4 >> 2];
  HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$1 + 4 >> 2] = $0;
 }
 
 function double_20const__20std____2__max_double_2c_20std____2____less_double_2c_20double__20__28double_20const__2c_20double_20const__2c_20std____2____less_double_2c_20double__29($0, $1) {
  var $2 = 0, $3 = 0;
  $2 = global$0 - 16 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  $3 = std____2____less_double_2c_20double___operator_28_29_28double_20const__2c_20double_20const__29_20const($0, $1);
  $2 = $2 + 16 | 0;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  return $3 ? $1 : $0;
 }
 
 function double_20const__20std____2__min_double_2c_20std____2____less_double_2c_20double__20__28double_20const__2c_20double_20const__2c_20std____2____less_double_2c_20double__29($0, $1) {
  var $2 = 0, $3 = 0;
  $2 = global$0 - 16 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  $3 = std____2____less_double_2c_20double___operator_28_29_28double_20const__2c_20double_20const__29_20const($1, $0);
  $2 = $2 + 16 | 0;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  return $3 ? $1 : $0;
 }
 
 function std____2____less_double_2c_20double___operator_28_29_28double_20const__2c_20double_20const__29_20const($0, $1) {
  return HEAPF64[$0 >> 3] < HEAPF64[$1 >> 3];
 }
 
 function std____2__vector_double_2c_20std____2__allocator_double__20_____make_iter_28double__29($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  $0 = HEAP32[std____2____compressed_pair_elem_std____2__allocator_double___2c_201_2c_20false_____compressed_pair_elem_std____2__allocator_double___2c_20void__28std____2__allocator_double___29($1 + 8 | 0, $0) >> 2];
  $1 = $1 + 16 | 0;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  return $0;
 }
 
 function std____2____vector_base_double_2c_20std____2__allocator_double__20_____vector_base_28std____2__allocator_double____29($0, $1) {
  var $2 = 0, $3 = 0;
  $2 = global$0 - 16 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$2 + 12 >> 2] = 0;
  HEAP32[16874] = 0;
  std____2____compressed_pair_double__2c_20std____2__allocator_double__20_____compressed_pair_std__nullptr_t_2c_20std____2__allocator_double__20__28std__nullptr_t___2c_20std____2__allocator_double____29($0 + 8 | 0, $2 + 12 | 0, $1);
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($1 | 0) != 1) {
   $1 = $2 + 16 | 0;
   if ($1 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $1;
   return $0;
  }
  $0 = __cxa_find_matching_catch_3(0) | 0;
  getTempRet0() | 0;
  __clang_call_terminate($0);
  abort();
 }
 
 function std____2____compressed_pair_double__2c_20std____2__allocator_double__20_____compressed_pair_std__nullptr_t_2c_20std____2__allocator_double__20__28std__nullptr_t___2c_20std____2__allocator_double____29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  std____2____compressed_pair_elem_double__2c_200_2c_20false_____compressed_pair_elem_std__nullptr_t_2c_20void__28std__nullptr_t___29($0, $1);
  return $0 | 0;
 }
 
 function void_20std____2__allocator_traits_std____2__allocator_int__20___construct_int_2c_20int_20const___28std____2__allocator_int___2c_20int__2c_20int_20const__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
 }
 
 function void_20std____2__vector_int_2c_20std____2__allocator_int__20_____push_back_slow_path_int_20const___28int_20const__29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  $3 = global$0 - 32 | 0;
  $2 = $3;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  $4 = std____2____vector_base_double_2c_20std____2__allocator_double__20_____alloc_28_29($0);
  $2 = std____2____split_buffer_int_2c_20std____2__allocator_int_______split_buffer_28unsigned_20long_2c_20unsigned_20long_2c_20std____2__allocator_int___29($3 + 8 | 0, std____2__vector_int_2c_20std____2__allocator_int__20_____recommend_28unsigned_20long_29_20const($0, std____2__vector_int_2c_20std____2__allocator_int__20___size_28_29_20const($0) + 1 | 0), std____2__vector_int_2c_20std____2__allocator_int__20___size_28_29_20const($0), $4);
  $5 = HEAP32[$2 + 8 >> 2];
  HEAP32[16874] = 0;
  void_20std____2__allocator_traits_std____2__allocator_int__20___construct_int_2c_20int_20const___28std____2__allocator_int___2c_20int__2c_20int_20const__29($4, $5, $1);
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   if (($1 | 0) == 1) {
    break label$2
   }
   HEAP32[$2 + 8 >> 2] = HEAP32[$2 + 8 >> 2] + 4;
   HEAP32[16874] = 0;
   __invoke_void___22class_std____2__vector_13_22__i32(911, $0 | 0, $2 | 0);
   $0 = HEAP32[16874];
   HEAP32[16874] = 0;
   if (($0 | 0) == 1) {
    break label$2
   }
   std____2____split_buffer_int_2c_20std____2__allocator_int________split_buffer_28_29($2);
   $0 = $3 + 32 | 0;
   if ($0 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $0;
   return;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2____split_buffer_int_2c_20std____2__allocator_int________split_buffer_28_29($2);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2__vector_int_2c_20std____2__allocator_int__20_____append_28unsigned_20long_2c_20int_20const__29($0, $1, $2) {
  var $3 = 0, $4 = 0;
  $4 = global$0 - 32 | 0;
  $3 = $4;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  label$2 : {
   label$3 : {
    if (HEAP32[std____2____vector_base_double_2c_20std____2__allocator_double__20_____alloc_28_29($0) >> 2] - HEAP32[$0 + 4 >> 2] >> 2 >>> 0 >= $1 >>> 0) {
     std____2__vector_int_2c_20std____2__allocator_int__20_____construct_at_end_28unsigned_20long_2c_20int_20const__29($0, $1, $2);
     break label$3;
    }
    $3 = std____2____vector_base_double_2c_20std____2__allocator_double__20_____alloc_28_29($0);
    $3 = std____2____split_buffer_int_2c_20std____2__allocator_int_______split_buffer_28unsigned_20long_2c_20unsigned_20long_2c_20std____2__allocator_int___29($4 + 8 | 0, std____2__vector_int_2c_20std____2__allocator_int__20_____recommend_28unsigned_20long_29_20const($0, std____2__vector_int_2c_20std____2__allocator_int__20___size_28_29_20const($0) + $1 | 0), std____2__vector_int_2c_20std____2__allocator_int__20___size_28_29_20const($0), $3);
    HEAP32[16874] = 0;
    std____2____split_buffer_int_2c_20std____2__allocator_int_______construct_at_end_28unsigned_20long_2c_20int_20const__29($3, $1, $2);
    $1 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($1 | 0) == 1) {
     break label$2
    }
    HEAP32[16874] = 0;
    __invoke_void___22class_std____2__vector_13_22__i32(911, $0 | 0, $3 | 0);
    $0 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($0 | 0) == 1) {
     break label$2
    }
    std____2____split_buffer_int_2c_20std____2__allocator_int________split_buffer_28_29($3);
   }
   $0 = $4 + 32 | 0;
   if ($0 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $0;
   return;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2____split_buffer_int_2c_20std____2__allocator_int________split_buffer_28_29($3);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2__vector_int_2c_20std____2__allocator_int__20___operator_5b_5d_28unsigned_20long_29_20const($0, $1) {
  return HEAP32[$0 >> 2] + ($1 << 2) | 0;
 }
 
 function emscripten__val__val_int_20const___28int_20const__29($0, $1) {
  var $2 = 0, $3 = 0;
  $2 = global$0 - 16 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  HEAP32[$0 >> 2] = _emval_take_value(49468, emscripten__internal__WireTypePack_int_20const____WireTypePack_28int_20const__29($2 + 8 | 0, $1) | 0);
  $0 = $2 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function emscripten__val__undefined_28_29($0) {
  std____2____compressed_pair_elem_std____2__allocator_double___2c_201_2c_20false_____compressed_pair_elem_std____2__allocator_double___2c_20void__28std____2__allocator_double___29($0, 1);
 }
 
 function std____2__vector_int_2c_20std____2__allocator_int__20_____recommend_28unsigned_20long_29_20const($0, $1) {
  var $2 = 0, $3 = 0;
  $2 = global$0 - 16 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  HEAP32[$2 + 12 >> 2] = $1;
  $1 = std____2__vector_int_2c_20std____2__allocator_int__20___max_size_28_29_20const($0);
  if (HEAPU32[$2 + 12 >> 2] <= $1 >>> 0) {
   $0 = std____2____vector_base_float_2c_20std____2__allocator_float__20___capacity_28_29_20const($0);
   if ($0 >>> 0 < $1 >>> 1 >>> 0) {
    HEAP32[$2 + 8 >> 2] = $0 << 1;
    $1 = HEAP32[unsigned_20long_20const__20std____2__max_unsigned_20long__28unsigned_20long_20const__2c_20unsigned_20long_20const__29($2 + 8 | 0, $2 + 12 | 0) >> 2];
   }
   $0 = $2 + 16 | 0;
   if ($0 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $0;
   return $1;
  }
  std____2____vector_base_common_true_____throw_length_error_28_29_20const();
  abort();
 }
 
 function std____2____split_buffer_int_2c_20std____2__allocator_int_______split_buffer_28unsigned_20long_2c_20unsigned_20long_2c_20std____2__allocator_int___29($0, $1, $2, $3) {
  var $4 = 0, $5 = 0;
  $5 = global$0 - 16 | 0;
  $4 = $5;
  if ($4 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  $4 = 0;
  HEAP32[$5 + 12 >> 2] = 0;
  std____2____compressed_pair_double__2c_20std____2__allocator_double_______compressed_pair_std__nullptr_t_2c_20std____2__allocator_double____28std__nullptr_t___2c_20std____2__allocator_double___29($0 + 12 | 0, $5 + 12 | 0, $3);
  if ($1) {
   std____2____split_buffer_double_2c_20std____2__allocator_double_______alloc_28_29($0);
   $4 = std____2__allocator_int___allocate_28unsigned_20long_2c_20void_20const__29($1);
  }
  HEAP32[$0 >> 2] = $4;
  $2 = ($2 << 2) + $4 | 0;
  HEAP32[$0 + 8 >> 2] = $2;
  HEAP32[$0 + 4 >> 2] = $2;
  HEAP32[std____2____split_buffer_double_2c_20std____2__allocator_double_______end_cap_28_29($0) >> 2] = ($1 << 2) + $4;
  $1 = $5 + 16 | 0;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  return $0;
 }
 
 function std____2__vector_int_2c_20std____2__allocator_int__20_____swap_out_circular_buffer_28std____2____split_buffer_int_2c_20std____2__allocator_int_____29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0;
  std____2__vector_int_2c_20std____2__allocator_int__20_____annotate_delete_28_29_20const($0);
  $3 = std____2____vector_base_double_2c_20std____2__allocator_double__20_____alloc_28_29($0);
  $2 = $1 + 4 | 0;
  std____2__enable_if__28_28std____2__integral_constant_bool_2c_20true___value_29_20___20_28__28__has_construct_std____2__allocator_double__2c_20bool__2c_20bool___value_29_29_29_20___20_28is_trivially_move_constructible_bool___value_29_2c_20void___type_20std____2__allocator_traits_std____2__allocator_double__20_____construct_backward_double__28std____2__allocator_double___2c_20bool__2c_20bool__2c_20bool___29($3, HEAP32[$0 >> 2], HEAP32[$0 + 4 >> 2], $2);
  std____2__enable_if__28is_move_constructible_double____value_29_20___20_28is_move_assignable_double____value_29_2c_20void___type_20std____2__swap_double___28double___2c_20double___29($0, $2);
  std____2__enable_if__28is_move_constructible_double____value_29_20___20_28is_move_assignable_double____value_29_2c_20void___type_20std____2__swap_double___28double___2c_20double___29($0 + 4 | 0, $1 + 8 | 0);
  std____2__enable_if__28is_move_constructible_double____value_29_20___20_28is_move_assignable_double____value_29_2c_20void___type_20std____2__swap_double___28double___2c_20double___29(std____2____vector_base_double_2c_20std____2__allocator_double__20_____alloc_28_29($0), std____2____split_buffer_double_2c_20std____2__allocator_double_______end_cap_28_29($1));
  HEAP32[$1 >> 2] = HEAP32[$1 + 4 >> 2];
  std____2__vector_int_2c_20std____2__allocator_int__20_____annotate_new_28unsigned_20long_29_20const($0, std____2__vector_int_2c_20std____2__allocator_int__20___size_28_29_20const($0));
 }
 
 function std____2____split_buffer_int_2c_20std____2__allocator_int________split_buffer_28_29($0) {
  std____2____split_buffer_int_2c_20std____2__allocator_int_______destruct_at_end_28int__2c_20std____2__integral_constant_bool_2c_20false__29($0, HEAP32[$0 + 4 >> 2]);
  if (HEAP32[$0 >> 2]) {
   std____2__allocator_traits_std____2__allocator_char__20___deallocate_28std____2__allocator_char___2c_20char__2c_20unsigned_20long_29(std____2____split_buffer_double_2c_20std____2__allocator_double_______alloc_28_29($0), HEAP32[$0 >> 2], std____2____split_buffer_int_2c_20std____2__allocator_int_____capacity_28_29_20const($0))
  }
 }
 
 function std____2__vector_int_2c_20std____2__allocator_int__20___max_size_28_29_20const($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  std____2____vector_base_double_2c_20std____2__allocator_double__20_____alloc_28_29($0);
  HEAP32[$1 + 12 >> 2] = 1073741823;
  HEAP32[16874] = 0;
  HEAP32[$1 + 8 >> 2] = 2147483647;
  $0 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(38, $1 + 12 | 0, $1 + 8 | 0) | 0;
  $2 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($2 | 0) != 1) {
   $0 = HEAP32[$0 >> 2];
   $1 = $1 + 16 | 0;
   if ($1 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $1;
   return $0;
  }
  $0 = __cxa_find_matching_catch_3(0) | 0;
  getTempRet0() | 0;
  __clang_call_terminate($0);
  abort();
 }
 
 function std____2__vector_int_2c_20std____2__allocator_int__20_____annotate_delete_28_29_20const($0) {
  $0 = $0 | 0;
  std____2____vector_base_float_2c_20std____2__allocator_float__20___capacity_28_29_20const($0);
  std____2__vector_int_2c_20std____2__allocator_int__20___size_28_29_20const($0);
  std____2____vector_base_float_2c_20std____2__allocator_float__20___capacity_28_29_20const($0);
 }
 
 function std____2__vector_int_2c_20std____2__allocator_int__20_____annotate_new_28unsigned_20long_29_20const($0, $1) {
  std____2____vector_base_float_2c_20std____2__allocator_float__20___capacity_28_29_20const($0);
  std____2____vector_base_float_2c_20std____2__allocator_float__20___capacity_28_29_20const($0);
 }
 
 function std____2____split_buffer_int_2c_20std____2__allocator_int_____capacity_28_29_20const($0) {
  return HEAP32[std____2____split_buffer_double_2c_20std____2__allocator_double_______end_cap_28_29($0) >> 2] - HEAP32[$0 >> 2] >> 2;
 }
 
 function std____2__allocator_int___allocate_28unsigned_20long_2c_20void_20const__29($0) {
  if (1073741823 < $0 >>> 0) {
   std____2____throw_length_error_28char_20const__29(4309);
   abort();
  }
  return operator_20new_28unsigned_20long_29($0 << 2);
 }
 
 function std____2____split_buffer_int_2c_20std____2__allocator_int_______destruct_at_end_28int__2c_20std____2__integral_constant_bool_2c_20false__29($0, $1) {
  var $2 = 0;
  label$1 : {
   while (1) {
    if (HEAP32[$0 + 8 >> 2] == ($1 | 0)) {
     break label$1
    }
    std____2____split_buffer_double_2c_20std____2__allocator_double_______alloc_28_29($0);
    HEAP32[$0 + 8 >> 2] = HEAP32[$0 + 8 >> 2] + -4;
    HEAP32[16874] = 0;
    $2 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($2 | 0) != 1) {
     continue
    }
    break;
   };
   $0 = __cxa_find_matching_catch_3(0) | 0;
   getTempRet0() | 0;
   __clang_call_terminate($0);
   abort();
  }
 }
 
 function std____2__vector_int_2c_20std____2__allocator_int__20_____construct_at_end_28unsigned_20long_2c_20int_20const__29($0, $1, $2) {
  var $3 = 0, $4 = 0;
  $3 = global$0 - 16 | 0;
  $4 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  $4 = std____2____vector_base_double_2c_20std____2__allocator_double__20_____alloc_28_29($0);
  while (1) {
   void_20std____2__allocator_traits_std____2__allocator_int__20___construct_int_2c_20int_20const___28std____2__allocator_int___2c_20int__2c_20int_20const__29($4, HEAP32[$0 + 4 >> 2], $2);
   HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + 4;
   $1 = $1 + -1 | 0;
   if ($1) {
    continue
   }
   break;
  };
  $0 = $3 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function std____2____split_buffer_int_2c_20std____2__allocator_int_______construct_at_end_28unsigned_20long_2c_20int_20const__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = std____2____split_buffer_double_2c_20std____2__allocator_double_______alloc_28_29($0);
  while (1) {
   void_20std____2__allocator_traits_std____2__allocator_int__20___construct_int_2c_20int_20const___28std____2__allocator_int___2c_20int__2c_20int_20const__29($3, HEAP32[$0 + 8 >> 2], $2);
   HEAP32[$0 + 8 >> 2] = HEAP32[$0 + 8 >> 2] + 4;
   $1 = $1 + -1 | 0;
   if ($1) {
    continue
   }
   break;
  };
 }
 
 function std____2__vector_int_2c_20std____2__allocator_int__20____vector_28_29($0) {
  var $1 = 0;
  HEAP32[16874] = 0;
  std____2__vector_int_2c_20std____2__allocator_int__20_____annotate_delete_28_29_20const($0);
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($1 | 0) != 1) {
   std____2____vector_base_int_2c_20std____2__allocator_int__20______vector_base_28_29($0);
   return $0;
  }
  $1 = __cxa_find_matching_catch_3(0) | 0;
  getTempRet0() | 0;
  std____2____vector_base_int_2c_20std____2__allocator_int__20______vector_base_28_29($0);
  __clang_call_terminate($1);
  abort();
 }
 
 function std____2____vector_base_int_2c_20std____2__allocator_int__20______vector_base_28_29($0) {
  if (HEAP32[$0 >> 2]) {
   std____2____vector_base_float_2c_20std____2__allocator_float__20___clear_28_29($0);
   std____2__allocator_traits_std____2__allocator_char__20___deallocate_28std____2__allocator_char___2c_20char__2c_20unsigned_20long_29(std____2____vector_base_double_2c_20std____2__allocator_double__20_____alloc_28_29($0), HEAP32[$0 >> 2], std____2____vector_base_float_2c_20std____2__allocator_float__20___capacity_28_29_20const($0));
  }
 }
 
 function std____2__vector_int_2c_20std____2__allocator_int__20___vector_28_29($0) {
  std____2____vector_base_double_2c_20std____2__allocator_double__20_____vector_base_28_29($0);
  return $0;
 }
 
 function emscripten__internal__Invoker_std____2__vector_int_2c_20std____2__allocator_int__20_____invoke_28std____2__vector_int_2c_20std____2__allocator_int__20___20_28__29_28_29_29($0) {
  $0 = $0 | 0;
  return FUNCTION_TABLE[$0]() | 0;
 }
 
 function emscripten__internal__MethodInvoker_void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28int_20const__29_2c_20void_2c_20std____2__vector_int_2c_20std____2__allocator_int__20___2c_20int_20const____invoke_28void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28int_20const__29_2c_20std____2__vector_int_2c_20std____2__allocator_int__20___2c_20int_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0;
  $3 = global$0 - 16 | 0;
  $4 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  $4 = HEAP32[$0 >> 2];
  $0 = HEAP32[$0 + 4 >> 2];
  $1 = ($0 >> 1) + $1 | 0;
  $0 = $0 & 1 ? HEAP32[$4 + HEAP32[$1 >> 2] >> 2] : $4;
  HEAP32[$3 + 12 >> 2] = $2;
  FUNCTION_TABLE[$0]($1, $3 + 12 | 0);
  $0 = $3 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____emscripten__internal__getContext_void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28int_20const__29__28void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28int_20const__29_29_29_28int_20const__29($0) {
  var $1 = 0, $2 = 0;
  $1 = operator_20new_28unsigned_20long_29(8);
  $2 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 4 >> 2] = $2;
  return $1;
 }
 
 function emscripten__internal__MethodInvoker_void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28unsigned_20long_2c_20int_20const__29_2c_20void_2c_20std____2__vector_int_2c_20std____2__allocator_int__20___2c_20unsigned_20long_2c_20int_20const____invoke_28void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28unsigned_20long_2c_20int_20const__29_2c_20std____2__vector_int_2c_20std____2__allocator_int__20___2c_20unsigned_20long_2c_20int_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0;
  $4 = global$0 - 16 | 0;
  $5 = $4;
  if ($4 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $5;
  $5 = HEAP32[$0 >> 2];
  $0 = HEAP32[$0 + 4 >> 2];
  $1 = ($0 >> 1) + $1 | 0;
  $0 = $0 & 1 ? HEAP32[$5 + HEAP32[$1 >> 2] >> 2] : $5;
  HEAP32[$4 + 12 >> 2] = $3;
  FUNCTION_TABLE[$0]($1, $2, $4 + 12 | 0);
  $0 = $4 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function emscripten__internal__MethodInvoker_unsigned_20long_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28_29_20const_2c_20unsigned_20long_2c_20std____2__vector_int_2c_20std____2__allocator_int__20__20const____invoke_28unsigned_20long_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28_29_20const_2c_20std____2__vector_int_2c_20std____2__allocator_int__20__20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0;
  $3 = global$0 - 16 | 0;
  $2 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  $2 = $1;
  $1 = HEAP32[$0 >> 2];
  $0 = HEAP32[$0 + 4 >> 2];
  $2 = ($0 >> 1) + $2 | 0;
  HEAP32[$3 + 12 >> 2] = FUNCTION_TABLE[$0 & 1 ? HEAP32[$1 + HEAP32[$2 >> 2] >> 2] : $1]($2);
  $0 = HEAP32[$3 + 12 >> 2];
  $1 = $3 + 16 | 0;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  return $0 | 0;
 }
 
 function emscripten__internal__FunctionInvoker_emscripten__val_20_28__29_28std____2__vector_int_2c_20std____2__allocator_int__20__20const__2c_20unsigned_20long_29_2c_20emscripten__val_2c_20std____2__vector_int_2c_20std____2__allocator_int__20__20const__2c_20unsigned_20long___invoke_28emscripten__val_20_28___29_28std____2__vector_int_2c_20std____2__allocator_int__20__20const__2c_20unsigned_20long_29_2c_20std____2__vector_int_2c_20std____2__allocator_int__20___2c_20unsigned_20long_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0;
  $3 = global$0 - 16 | 0;
  $4 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  FUNCTION_TABLE[HEAP32[$0 >> 2]]($3 + 8 | 0, $1, $2);
  HEAP32[16874] = 0;
  $0 = __invoke_i1___22class_std____2__basic_ifstream_22_(915, $3 + 8 | 0) | 0;
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($1 | 0) != 1) {
   emscripten__val___val_28_29($3 + 8 | 0);
   $1 = $3 + 16 | 0;
   if ($1 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $1;
   return $0 | 0;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  emscripten__val___val_28_29($3 + 8 | 0);
  __resumeException($0 | 0);
  abort();
 }
 
 function emscripten__val_20_28__emscripten__internal__getContext_emscripten__val_20_28__29_28std____2__vector_int_2c_20std____2__allocator_int__20__20const__2c_20unsigned_20long_29__28emscripten__val_20_28__20const__29_28std____2__vector_int_2c_20std____2__allocator_int__20__20const__2c_20unsigned_20long_29_29_29_28std____2__vector_int_2c_20std____2__allocator_int__20__20const__2c_20unsigned_20long_29($0) {
  var $1 = 0;
  $1 = operator_20new_28unsigned_20long_29(4);
  HEAP32[$1 >> 2] = HEAP32[$0 >> 2];
  return $1;
 }
 
 function emscripten__internal__BindingType_emscripten__val_2c_20void___toWireType_28emscripten__val_20const__29($0) {
  $0 = $0 | 0;
  _emval_incref(HEAP32[$0 >> 2]);
  return HEAP32[$0 >> 2];
 }
 
 function emscripten__val___val_28_29($0) {
  $0 = HEAP32[$0 >> 2];
  HEAP32[16874] = 0;
  __invoke_void___22class_std____2__basic_ifstream_22_(916, $0 | 0);
  $0 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($0 | 0) != 1) {
   return
  }
  $0 = __cxa_find_matching_catch_3(0) | 0;
  getTempRet0() | 0;
  __clang_call_terminate($0);
  abort();
 }
 
 function emscripten__internal__WireTypePack_int_20const____WireTypePack_28int_20const__29($0, $1) {
  var $2 = 0, $3 = 0;
  $2 = global$0 - 16 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  HEAP32[$2 + 12 >> 2] = $0;
  void_20emscripten__internal__writeGenericWireType_int__28emscripten__internal__GenericWireType___2c_20int_29($2 + 12 | 0, HEAP32[$1 >> 2]);
  $1 = $2 + 16 | 0;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  return $0;
 }
 
 function void_20emscripten__internal__writeGenericWireType_int__28emscripten__internal__GenericWireType___2c_20int_29($0, $1) {
  HEAP32[HEAP32[$0 >> 2] >> 2] = $1;
  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 8;
 }
 
 function emscripten__internal__FunctionInvoker_bool_20_28__29_28std____2__vector_int_2c_20std____2__allocator_int__20___2c_20unsigned_20long_2c_20int_20const__29_2c_20bool_2c_20std____2__vector_int_2c_20std____2__allocator_int__20___2c_20unsigned_20long_2c_20int_20const____invoke_28bool_20_28___29_28std____2__vector_int_2c_20std____2__allocator_int__20___2c_20unsigned_20long_2c_20int_20const__29_2c_20std____2__vector_int_2c_20std____2__allocator_int__20___2c_20unsigned_20long_2c_20int_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0;
  $4 = global$0 - 16 | 0;
  $5 = $4;
  if ($4 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $5;
  $0 = HEAP32[$0 >> 2];
  HEAP32[$4 + 12 >> 2] = $3;
  $0 = FUNCTION_TABLE[$0]($1, $2, $4 + 12 | 0) | 0;
  $1 = $4 + 16 | 0;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  return $0 | 0;
 }
 
 function void_20std____2__vector_double_2c_20std____2__allocator_double__20_____push_back_slow_path_double_20const___28double_20const__29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  $3 = global$0 - 32 | 0;
  $2 = $3;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  $4 = std____2____vector_base_double_2c_20std____2__allocator_double__20_____alloc_28_29($0);
  $2 = std____2____split_buffer_double_2c_20std____2__allocator_double_______split_buffer_28unsigned_20long_2c_20unsigned_20long_2c_20std____2__allocator_double___29($3 + 8 | 0, std____2__vector_double_2c_20std____2__allocator_double__20_____recommend_28unsigned_20long_29_20const($0, std____2__vector_double_2c_20std____2__allocator_double__20___size_28_29_20const($0) + 1 | 0), std____2__vector_double_2c_20std____2__allocator_double__20___size_28_29_20const($0), $4);
  $5 = HEAP32[$2 + 8 >> 2];
  HEAP32[16874] = 0;
  void_20std____2__allocator_traits_std____2__allocator_double__20___construct_double_2c_20double_20const___28std____2__allocator_double___2c_20double__2c_20double_20const__29($4, $5, $1);
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   if (($1 | 0) == 1) {
    break label$2
   }
   HEAP32[$2 + 8 >> 2] = HEAP32[$2 + 8 >> 2] + 8;
   HEAP32[16874] = 0;
   __invoke_void___22class_std____2__vector_13_22__i32(26, $0 | 0, $2 | 0);
   $0 = HEAP32[16874];
   HEAP32[16874] = 0;
   if (($0 | 0) == 1) {
    break label$2
   }
   std____2____split_buffer_double_2c_20std____2__allocator_double________split_buffer_28_29($2);
   $0 = $3 + 32 | 0;
   if ($0 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $0;
   return;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2____split_buffer_double_2c_20std____2__allocator_double________split_buffer_28_29($2);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2__vector_double_2c_20std____2__allocator_double__20_____append_28unsigned_20long_2c_20double_20const__29($0, $1, $2) {
  var $3 = 0, $4 = 0;
  $4 = global$0 - 32 | 0;
  $3 = $4;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  label$2 : {
   label$3 : {
    if (HEAP32[std____2____vector_base_double_2c_20std____2__allocator_double__20_____alloc_28_29($0) >> 2] - HEAP32[$0 + 4 >> 2] >> 3 >>> 0 >= $1 >>> 0) {
     std____2__vector_double_2c_20std____2__allocator_double__20_____construct_at_end_28unsigned_20long_2c_20double_20const__29($0, $1, $2);
     break label$3;
    }
    $3 = std____2____vector_base_double_2c_20std____2__allocator_double__20_____alloc_28_29($0);
    $3 = std____2____split_buffer_double_2c_20std____2__allocator_double_______split_buffer_28unsigned_20long_2c_20unsigned_20long_2c_20std____2__allocator_double___29($4 + 8 | 0, std____2__vector_double_2c_20std____2__allocator_double__20_____recommend_28unsigned_20long_29_20const($0, std____2__vector_double_2c_20std____2__allocator_double__20___size_28_29_20const($0) + $1 | 0), std____2__vector_double_2c_20std____2__allocator_double__20___size_28_29_20const($0), $3);
    HEAP32[16874] = 0;
    std____2____split_buffer_double_2c_20std____2__allocator_double_______construct_at_end_28unsigned_20long_2c_20double_20const__29($3, $1, $2);
    $1 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($1 | 0) == 1) {
     break label$2
    }
    HEAP32[16874] = 0;
    __invoke_void___22class_std____2__vector_13_22__i32(26, $0 | 0, $3 | 0);
    $0 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($0 | 0) == 1) {
     break label$2
    }
    std____2____split_buffer_double_2c_20std____2__allocator_double________split_buffer_28_29($3);
   }
   $0 = $4 + 32 | 0;
   if ($0 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $0;
   return;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2____split_buffer_double_2c_20std____2__allocator_double________split_buffer_28_29($3);
  __resumeException($0 | 0);
  abort();
 }
 
 function emscripten__val__val_double_20const___28double_20const__29($0, $1) {
  var $2 = 0, $3 = 0;
  $2 = global$0 - 16 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  HEAP32[$0 >> 2] = _emval_take_value(49528, emscripten__internal__WireTypePack_double_20const____WireTypePack_28double_20const__29($2 + 8 | 0, $1) | 0);
  $0 = $2 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function std____2____split_buffer_double_2c_20std____2__allocator_double_______construct_at_end_28unsigned_20long_2c_20double_20const__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = std____2____split_buffer_double_2c_20std____2__allocator_double_______alloc_28_29($0);
  while (1) {
   void_20std____2__allocator_traits_std____2__allocator_double__20___construct_double_2c_20double_20const___28std____2__allocator_double___2c_20double__2c_20double_20const__29($3, HEAP32[$0 + 8 >> 2], $2);
   HEAP32[$0 + 8 >> 2] = HEAP32[$0 + 8 >> 2] + 8;
   $1 = $1 + -1 | 0;
   if ($1) {
    continue
   }
   break;
  };
 }
 
 function emscripten__internal__MethodInvoker_void_20_28std____2__vector_double_2c_20std____2__allocator_double__20_____29_28double_20const__29_2c_20void_2c_20std____2__vector_double_2c_20std____2__allocator_double__20___2c_20double_20const____invoke_28void_20_28std____2__vector_double_2c_20std____2__allocator_double__20_____20const__29_28double_20const__29_2c_20std____2__vector_double_2c_20std____2__allocator_double__20___2c_20double_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = +$2;
  var $3 = 0, $4 = 0;
  $3 = global$0 - 16 | 0;
  $4 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  $4 = HEAP32[$0 >> 2];
  $0 = HEAP32[$0 + 4 >> 2];
  $1 = ($0 >> 1) + $1 | 0;
  $0 = $0 & 1 ? HEAP32[$4 + HEAP32[$1 >> 2] >> 2] : $4;
  HEAPF64[$3 + 8 >> 3] = $2;
  FUNCTION_TABLE[$0]($1, $3 + 8 | 0);
  $0 = $3 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function emscripten__internal__MethodInvoker_void_20_28std____2__vector_double_2c_20std____2__allocator_double__20_____29_28unsigned_20long_2c_20double_20const__29_2c_20void_2c_20std____2__vector_double_2c_20std____2__allocator_double__20___2c_20unsigned_20long_2c_20double_20const____invoke_28void_20_28std____2__vector_double_2c_20std____2__allocator_double__20_____20const__29_28unsigned_20long_2c_20double_20const__29_2c_20std____2__vector_double_2c_20std____2__allocator_double__20___2c_20unsigned_20long_2c_20double_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = +$3;
  var $4 = 0, $5 = 0;
  $4 = global$0 - 16 | 0;
  $5 = $4;
  if ($4 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $5;
  $5 = HEAP32[$0 >> 2];
  $0 = HEAP32[$0 + 4 >> 2];
  $1 = ($0 >> 1) + $1 | 0;
  $0 = $0 & 1 ? HEAP32[$5 + HEAP32[$1 >> 2] >> 2] : $5;
  HEAPF64[$4 + 8 >> 3] = $3;
  FUNCTION_TABLE[$0]($1, $2, $4 + 8 | 0);
  $0 = $4 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function emscripten__internal__WireTypePack_double_20const____WireTypePack_28double_20const__29($0, $1) {
  var $2 = 0, $3 = 0;
  $2 = global$0 - 16 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  HEAP32[$2 + 12 >> 2] = $0;
  $3 = $2 + 12 | 0;
  HEAPF64[HEAP32[$3 >> 2] >> 3] = HEAPF64[$1 >> 3];
  HEAP32[$3 >> 2] = HEAP32[$3 >> 2] + 8;
  $1 = $2 + 16 | 0;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  return $0;
 }
 
 function emscripten__internal__FunctionInvoker_bool_20_28__29_28std____2__vector_double_2c_20std____2__allocator_double__20___2c_20unsigned_20long_2c_20double_20const__29_2c_20bool_2c_20std____2__vector_double_2c_20std____2__allocator_double__20___2c_20unsigned_20long_2c_20double_20const____invoke_28bool_20_28___29_28std____2__vector_double_2c_20std____2__allocator_double__20___2c_20unsigned_20long_2c_20double_20const__29_2c_20std____2__vector_double_2c_20std____2__allocator_double__20___2c_20unsigned_20long_2c_20double_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = +$3;
  var $4 = 0, $5 = 0;
  $4 = global$0 - 16 | 0;
  $5 = $4;
  if ($4 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $5;
  $0 = HEAP32[$0 >> 2];
  HEAPF64[$4 + 8 >> 3] = $3;
  $0 = FUNCTION_TABLE[$0]($1, $2, $4 + 8 | 0) | 0;
  $1 = $4 + 16 | 0;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  return $0 | 0;
 }
 
 function void_20std____2__allocator_traits_std____2__allocator_char__20___construct_char_2c_20char_20const___28std____2__allocator_char___2c_20char__2c_20char_20const__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  HEAP8[$1 | 0] = HEAPU8[$2 | 0];
 }
 
 function void_20std____2__vector_char_2c_20std____2__allocator_char__20_____push_back_slow_path_char_20const___28char_20const__29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  $3 = global$0 - 32 | 0;
  $2 = $3;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  $4 = std____2____vector_base_double_2c_20std____2__allocator_double__20_____alloc_28_29($0);
  $2 = std____2____split_buffer_unsigned_20char_2c_20std____2__allocator_unsigned_20char_______split_buffer_28unsigned_20long_2c_20unsigned_20long_2c_20std____2__allocator_unsigned_20char___29($3 + 8 | 0, std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20_____recommend_28unsigned_20long_29_20const($0, std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20___size_28_29_20const($0) + 1 | 0), std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20___size_28_29_20const($0), $4);
  $5 = HEAP32[$2 + 8 >> 2];
  HEAP32[16874] = 0;
  void_20std____2__allocator_traits_std____2__allocator_char__20___construct_char_2c_20char_20const___28std____2__allocator_char___2c_20char__2c_20char_20const__29($4, $5, $1);
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   if (($1 | 0) == 1) {
    break label$2
   }
   HEAP32[$2 + 8 >> 2] = HEAP32[$2 + 8 >> 2] + 1;
   HEAP32[16874] = 0;
   __invoke_void___22class_std____2__vector_13_22__i32(920, $0 | 0, $2 | 0);
   $0 = HEAP32[16874];
   HEAP32[16874] = 0;
   if (($0 | 0) == 1) {
    break label$2
   }
   std____2____split_buffer_unsigned_20char_2c_20std____2__allocator_unsigned_20char________split_buffer_28_29($2);
   $0 = $3 + 32 | 0;
   if ($0 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $0;
   return;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2____split_buffer_unsigned_20char_2c_20std____2__allocator_unsigned_20char________split_buffer_28_29($2);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2__vector_char_2c_20std____2__allocator_char__20_____append_28unsigned_20long_2c_20char_20const__29($0, $1, $2) {
  var $3 = 0, $4 = 0;
  $4 = global$0 - 32 | 0;
  $3 = $4;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  label$2 : {
   label$3 : {
    if (HEAP32[std____2____vector_base_double_2c_20std____2__allocator_double__20_____alloc_28_29($0) >> 2] - HEAP32[$0 + 4 >> 2] >>> 0 >= $1 >>> 0) {
     std____2__vector_char_2c_20std____2__allocator_char__20_____construct_at_end_28unsigned_20long_2c_20char_20const__29($0, $1, $2);
     break label$3;
    }
    $3 = std____2____vector_base_double_2c_20std____2__allocator_double__20_____alloc_28_29($0);
    $3 = std____2____split_buffer_unsigned_20char_2c_20std____2__allocator_unsigned_20char_______split_buffer_28unsigned_20long_2c_20unsigned_20long_2c_20std____2__allocator_unsigned_20char___29($4 + 8 | 0, std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20_____recommend_28unsigned_20long_29_20const($0, std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20___size_28_29_20const($0) + $1 | 0), std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20___size_28_29_20const($0), $3);
    HEAP32[16874] = 0;
    std____2____split_buffer_char_2c_20std____2__allocator_char_______construct_at_end_28unsigned_20long_2c_20char_20const__29($3, $1, $2);
    $1 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($1 | 0) == 1) {
     break label$2
    }
    HEAP32[16874] = 0;
    __invoke_void___22class_std____2__vector_13_22__i32(920, $0 | 0, $3 | 0);
    $0 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($0 | 0) == 1) {
     break label$2
    }
    std____2____split_buffer_unsigned_20char_2c_20std____2__allocator_unsigned_20char________split_buffer_28_29($3);
   }
   $0 = $4 + 32 | 0;
   if ($0 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $0;
   return;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2____split_buffer_unsigned_20char_2c_20std____2__allocator_unsigned_20char________split_buffer_28_29($3);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2__vector_char_2c_20std____2__allocator_char__20_____destruct_at_end_28char__29($0, $1) {
  std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20___size_28_29_20const($0);
  std____2____vector_base_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20_____destruct_at_end_28unsigned_20char__29($0, $1);
  std____2____vector_base_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20___capacity_28_29_20const($0);
  std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20___size_28_29_20const($0);
 }
 
 function std____2__vector_char_2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29_20const($0, $1) {
  return HEAP32[$0 >> 2] + $1 | 0;
 }
 
 function emscripten__val__val_char_20const___28char_20const__29($0, $1) {
  var $2 = 0, $3 = 0;
  $2 = global$0 - 16 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  HEAP32[$0 >> 2] = _emval_take_value(49408, emscripten__internal__WireTypePack_char_20const____WireTypePack_28char_20const__29($2 + 8 | 0, $1) | 0);
  $0 = $2 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function std____2__vector_char_2c_20std____2__allocator_char__20_____construct_at_end_28unsigned_20long_2c_20char_20const__29($0, $1, $2) {
  var $3 = 0, $4 = 0;
  $3 = global$0 - 16 | 0;
  $4 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  $4 = std____2____vector_base_double_2c_20std____2__allocator_double__20_____alloc_28_29($0);
  while (1) {
   void_20std____2__allocator_traits_std____2__allocator_char__20___construct_char_2c_20char_20const___28std____2__allocator_char___2c_20char__2c_20char_20const__29($4, HEAP32[$0 + 4 >> 2], $2);
   HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + 1;
   $1 = $1 + -1 | 0;
   if ($1) {
    continue
   }
   break;
  };
  $0 = $3 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function std____2____split_buffer_char_2c_20std____2__allocator_char_______construct_at_end_28unsigned_20long_2c_20char_20const__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = std____2____split_buffer_double_2c_20std____2__allocator_double_______alloc_28_29($0);
  while (1) {
   void_20std____2__allocator_traits_std____2__allocator_char__20___construct_char_2c_20char_20const___28std____2__allocator_char___2c_20char__2c_20char_20const__29($3, HEAP32[$0 + 8 >> 2], $2);
   HEAP32[$0 + 8 >> 2] = HEAP32[$0 + 8 >> 2] + 1;
   $1 = $1 + -1 | 0;
   if ($1) {
    continue
   }
   break;
  };
 }
 
 function emscripten__internal__MethodInvoker_void_20_28std____2__vector_char_2c_20std____2__allocator_char__20_____29_28char_20const__29_2c_20void_2c_20std____2__vector_char_2c_20std____2__allocator_char__20___2c_20char_20const____invoke_28void_20_28std____2__vector_char_2c_20std____2__allocator_char__20_____20const__29_28char_20const__29_2c_20std____2__vector_char_2c_20std____2__allocator_char__20___2c_20char_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0;
  $3 = global$0 - 16 | 0;
  $4 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  $4 = HEAP32[$0 >> 2];
  $0 = HEAP32[$0 + 4 >> 2];
  $1 = ($0 >> 1) + $1 | 0;
  $0 = $0 & 1 ? HEAP32[$4 + HEAP32[$1 >> 2] >> 2] : $4;
  HEAP8[$3 + 15 | 0] = $2;
  FUNCTION_TABLE[$0]($1, $3 + 15 | 0);
  $0 = $3 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function emscripten__internal__MethodInvoker_void_20_28std____2__vector_char_2c_20std____2__allocator_char__20_____29_28unsigned_20long_2c_20char_20const__29_2c_20void_2c_20std____2__vector_char_2c_20std____2__allocator_char__20___2c_20unsigned_20long_2c_20char_20const____invoke_28void_20_28std____2__vector_char_2c_20std____2__allocator_char__20_____20const__29_28unsigned_20long_2c_20char_20const__29_2c_20std____2__vector_char_2c_20std____2__allocator_char__20___2c_20unsigned_20long_2c_20char_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0;
  $4 = global$0 - 16 | 0;
  $5 = $4;
  if ($4 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $5;
  $5 = HEAP32[$0 >> 2];
  $0 = HEAP32[$0 + 4 >> 2];
  $1 = ($0 >> 1) + $1 | 0;
  $0 = $0 & 1 ? HEAP32[$5 + HEAP32[$1 >> 2] >> 2] : $5;
  HEAP8[$4 + 15 | 0] = $3;
  FUNCTION_TABLE[$0]($1, $2, $4 + 15 | 0);
  $0 = $4 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function emscripten__internal__WireTypePack_char_20const____WireTypePack_28char_20const__29($0, $1) {
  var $2 = 0, $3 = 0;
  $2 = global$0 - 16 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  HEAP32[$2 + 12 >> 2] = $0;
  void_20emscripten__internal__writeGenericWireType_int__28emscripten__internal__GenericWireType___2c_20int_29($2 + 12 | 0, HEAP8[$1 | 0]);
  $1 = $2 + 16 | 0;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  return $0;
 }
 
 function emscripten__internal__FunctionInvoker_bool_20_28__29_28std____2__vector_char_2c_20std____2__allocator_char__20___2c_20unsigned_20long_2c_20char_20const__29_2c_20bool_2c_20std____2__vector_char_2c_20std____2__allocator_char__20___2c_20unsigned_20long_2c_20char_20const____invoke_28bool_20_28___29_28std____2__vector_char_2c_20std____2__allocator_char__20___2c_20unsigned_20long_2c_20char_20const__29_2c_20std____2__vector_char_2c_20std____2__allocator_char__20___2c_20unsigned_20long_2c_20char_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0;
  $4 = global$0 - 16 | 0;
  $5 = $4;
  if ($4 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $5;
  $0 = HEAP32[$0 >> 2];
  HEAP8[$4 + 15 | 0] = $3;
  $0 = FUNCTION_TABLE[$0]($1, $2, $4 + 15 | 0) | 0;
  $1 = $4 + 16 | 0;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  return $0 | 0;
 }
 
 function void_20std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20_____push_back_slow_path_unsigned_20char_20const___28unsigned_20char_20const__29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  $3 = global$0 - 32 | 0;
  $2 = $3;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  $4 = std____2____vector_base_double_2c_20std____2__allocator_double__20_____alloc_28_29($0);
  $2 = std____2____split_buffer_unsigned_20char_2c_20std____2__allocator_unsigned_20char_______split_buffer_28unsigned_20long_2c_20unsigned_20long_2c_20std____2__allocator_unsigned_20char___29($3 + 8 | 0, std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20_____recommend_28unsigned_20long_29_20const($0, std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20___size_28_29_20const($0) + 1 | 0), std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20___size_28_29_20const($0), $4);
  $5 = HEAP32[$2 + 8 >> 2];
  HEAP32[16874] = 0;
  void_20std____2__allocator_traits_std____2__allocator_char__20___construct_char_2c_20char_20const___28std____2__allocator_char___2c_20char__2c_20char_20const__29($4, $5, $1);
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   if (($1 | 0) == 1) {
    break label$2
   }
   HEAP32[$2 + 8 >> 2] = HEAP32[$2 + 8 >> 2] + 1;
   HEAP32[16874] = 0;
   __invoke_void___22class_std____2__vector_13_22__i32(925, $0 | 0, $2 | 0);
   $0 = HEAP32[16874];
   HEAP32[16874] = 0;
   if (($0 | 0) == 1) {
    break label$2
   }
   std____2____split_buffer_unsigned_20char_2c_20std____2__allocator_unsigned_20char________split_buffer_28_29($2);
   $0 = $3 + 32 | 0;
   if ($0 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $0;
   return;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2____split_buffer_unsigned_20char_2c_20std____2__allocator_unsigned_20char________split_buffer_28_29($2);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20_____append_28unsigned_20long_2c_20unsigned_20char_20const__29($0, $1, $2) {
  var $3 = 0, $4 = 0;
  $4 = global$0 - 32 | 0;
  $3 = $4;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  label$2 : {
   label$3 : {
    if (HEAP32[std____2____vector_base_double_2c_20std____2__allocator_double__20_____alloc_28_29($0) >> 2] - HEAP32[$0 + 4 >> 2] >>> 0 >= $1 >>> 0) {
     std____2__vector_char_2c_20std____2__allocator_char__20_____construct_at_end_28unsigned_20long_2c_20char_20const__29($0, $1, $2);
     break label$3;
    }
    $3 = std____2____vector_base_double_2c_20std____2__allocator_double__20_____alloc_28_29($0);
    $3 = std____2____split_buffer_unsigned_20char_2c_20std____2__allocator_unsigned_20char_______split_buffer_28unsigned_20long_2c_20unsigned_20long_2c_20std____2__allocator_unsigned_20char___29($4 + 8 | 0, std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20_____recommend_28unsigned_20long_29_20const($0, std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20___size_28_29_20const($0) + $1 | 0), std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20___size_28_29_20const($0), $3);
    HEAP32[16874] = 0;
    std____2____split_buffer_char_2c_20std____2__allocator_char_______construct_at_end_28unsigned_20long_2c_20char_20const__29($3, $1, $2);
    $1 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($1 | 0) == 1) {
     break label$2
    }
    HEAP32[16874] = 0;
    __invoke_void___22class_std____2__vector_13_22__i32(925, $0 | 0, $3 | 0);
    $0 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($0 | 0) == 1) {
     break label$2
    }
    std____2____split_buffer_unsigned_20char_2c_20std____2__allocator_unsigned_20char________split_buffer_28_29($3);
   }
   $0 = $4 + 32 | 0;
   if ($0 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $0;
   return;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2____split_buffer_unsigned_20char_2c_20std____2__allocator_unsigned_20char________split_buffer_28_29($3);
  __resumeException($0 | 0);
  abort();
 }
 
 function emscripten__val__val_unsigned_20char_20const___28unsigned_20char_20const__29($0, $1) {
  var $2 = 0, $3 = 0;
  $2 = global$0 - 16 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  HEAP32[$0 >> 2] = _emval_take_value(49420, emscripten__internal__WireTypePack_unsigned_20char_20const____WireTypePack_28unsigned_20char_20const__29($2 + 8 | 0, $1) | 0);
  $0 = $2 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function emscripten__internal__WireTypePack_unsigned_20char_20const____WireTypePack_28unsigned_20char_20const__29($0, $1) {
  var $2 = 0, $3 = 0;
  $2 = global$0 - 16 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  HEAP32[$2 + 12 >> 2] = $0;
  void_20emscripten__internal__writeGenericWireType_int__28emscripten__internal__GenericWireType___2c_20int_29($2 + 12 | 0, HEAPU8[$1 | 0]);
  $1 = $2 + 16 | 0;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  return $0;
 }
 
 function void_20std____2__vector_float_2c_20std____2__allocator_float__20_____push_back_slow_path_float_20const___28float_20const__29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  $3 = global$0 - 32 | 0;
  $2 = $3;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  $4 = std____2____vector_base_double_2c_20std____2__allocator_double__20_____alloc_28_29($0);
  $2 = std____2____split_buffer_int_2c_20std____2__allocator_int_______split_buffer_28unsigned_20long_2c_20unsigned_20long_2c_20std____2__allocator_int___29($3 + 8 | 0, std____2__vector_int_2c_20std____2__allocator_int__20_____recommend_28unsigned_20long_29_20const($0, std____2__vector_int_2c_20std____2__allocator_int__20___size_28_29_20const($0) + 1 | 0), std____2__vector_int_2c_20std____2__allocator_int__20___size_28_29_20const($0), $4);
  $5 = HEAP32[$2 + 8 >> 2];
  HEAP32[16874] = 0;
  void_20std____2__allocator_traits_std____2__allocator_int__20___construct_int_2c_20int_20const___28std____2__allocator_int___2c_20int__2c_20int_20const__29($4, $5, $1);
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   if (($1 | 0) == 1) {
    break label$2
   }
   HEAP32[$2 + 8 >> 2] = HEAP32[$2 + 8 >> 2] + 4;
   HEAP32[16874] = 0;
   __invoke_void___22class_std____2__vector_13_22__i32(928, $0 | 0, $2 | 0);
   $0 = HEAP32[16874];
   HEAP32[16874] = 0;
   if (($0 | 0) == 1) {
    break label$2
   }
   std____2____split_buffer_int_2c_20std____2__allocator_int________split_buffer_28_29($2);
   $0 = $3 + 32 | 0;
   if ($0 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $0;
   return;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2____split_buffer_int_2c_20std____2__allocator_int________split_buffer_28_29($2);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2__vector_float_2c_20std____2__allocator_float__20_____append_28unsigned_20long_2c_20float_20const__29($0, $1, $2) {
  var $3 = 0, $4 = 0;
  $4 = global$0 - 32 | 0;
  $3 = $4;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  label$2 : {
   label$3 : {
    if (HEAP32[std____2____vector_base_double_2c_20std____2__allocator_double__20_____alloc_28_29($0) >> 2] - HEAP32[$0 + 4 >> 2] >> 2 >>> 0 >= $1 >>> 0) {
     std____2__vector_int_2c_20std____2__allocator_int__20_____construct_at_end_28unsigned_20long_2c_20int_20const__29($0, $1, $2);
     break label$3;
    }
    $3 = std____2____vector_base_double_2c_20std____2__allocator_double__20_____alloc_28_29($0);
    $3 = std____2____split_buffer_int_2c_20std____2__allocator_int_______split_buffer_28unsigned_20long_2c_20unsigned_20long_2c_20std____2__allocator_int___29($4 + 8 | 0, std____2__vector_int_2c_20std____2__allocator_int__20_____recommend_28unsigned_20long_29_20const($0, std____2__vector_int_2c_20std____2__allocator_int__20___size_28_29_20const($0) + $1 | 0), std____2__vector_int_2c_20std____2__allocator_int__20___size_28_29_20const($0), $3);
    HEAP32[16874] = 0;
    std____2____split_buffer_int_2c_20std____2__allocator_int_______construct_at_end_28unsigned_20long_2c_20int_20const__29($3, $1, $2);
    $1 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($1 | 0) == 1) {
     break label$2
    }
    HEAP32[16874] = 0;
    __invoke_void___22class_std____2__vector_13_22__i32(928, $0 | 0, $3 | 0);
    $0 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($0 | 0) == 1) {
     break label$2
    }
    std____2____split_buffer_int_2c_20std____2__allocator_int________split_buffer_28_29($3);
   }
   $0 = $4 + 32 | 0;
   if ($0 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $0;
   return;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2____split_buffer_int_2c_20std____2__allocator_int________split_buffer_28_29($3);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2__vector_float_2c_20std____2__allocator_float__20_____destruct_at_end_28float__29($0, $1) {
  var $2 = 0;
  $2 = std____2__vector_int_2c_20std____2__allocator_int__20___size_28_29_20const($0);
  std____2____vector_base_float_2c_20std____2__allocator_float__20_____destruct_at_end_28float__29($0, $1);
  HEAP32[16874] = 0;
  std____2__vector_float_2c_20std____2__allocator_float__20_____annotate_shrink_28unsigned_20long_29_20const($0, $2);
  $0 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($0 | 0) != 1) {
   return
  }
  $0 = __cxa_find_matching_catch_3(0) | 0;
  getTempRet0() | 0;
  __clang_call_terminate($0);
  abort();
 }
 
 function emscripten__val__val_float_20const___28float_20const__29($0, $1) {
  var $2 = 0, $3 = 0;
  $2 = global$0 - 16 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  HEAP32[$0 >> 2] = _emval_take_value(49516, emscripten__internal__WireTypePack_float_20const____WireTypePack_28float_20const__29($2 + 8 | 0, $1) | 0);
  $0 = $2 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function std____2__vector_float_2c_20std____2__allocator_float__20____vector_28_29($0) {
  std____2__vector_int_2c_20std____2__allocator_int__20_____annotate_delete_28_29_20const($0);
  std____2____vector_base_int_2c_20std____2__allocator_int__20______vector_base_28_29($0);
  return $0;
 }
 
 function emscripten__internal__MethodInvoker_void_20_28std____2__vector_float_2c_20std____2__allocator_float__20_____29_28float_20const__29_2c_20void_2c_20std____2__vector_float_2c_20std____2__allocator_float__20___2c_20float_20const____invoke_28void_20_28std____2__vector_float_2c_20std____2__allocator_float__20_____20const__29_28float_20const__29_2c_20std____2__vector_float_2c_20std____2__allocator_float__20___2c_20float_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = Math_fround($2);
  var $3 = 0, $4 = 0;
  $3 = global$0 - 16 | 0;
  $4 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  $4 = HEAP32[$0 >> 2];
  $0 = HEAP32[$0 + 4 >> 2];
  $1 = ($0 >> 1) + $1 | 0;
  $0 = $0 & 1 ? HEAP32[$4 + HEAP32[$1 >> 2] >> 2] : $4;
  HEAPF32[$3 + 12 >> 2] = $2;
  FUNCTION_TABLE[$0]($1, $3 + 12 | 0);
  $0 = $3 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function emscripten__internal__MethodInvoker_void_20_28std____2__vector_float_2c_20std____2__allocator_float__20_____29_28unsigned_20long_2c_20float_20const__29_2c_20void_2c_20std____2__vector_float_2c_20std____2__allocator_float__20___2c_20unsigned_20long_2c_20float_20const____invoke_28void_20_28std____2__vector_float_2c_20std____2__allocator_float__20_____20const__29_28unsigned_20long_2c_20float_20const__29_2c_20std____2__vector_float_2c_20std____2__allocator_float__20___2c_20unsigned_20long_2c_20float_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = Math_fround($3);
  var $4 = 0, $5 = 0;
  $4 = global$0 - 16 | 0;
  $5 = $4;
  if ($4 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $5;
  $5 = HEAP32[$0 >> 2];
  $0 = HEAP32[$0 + 4 >> 2];
  $1 = ($0 >> 1) + $1 | 0;
  $0 = $0 & 1 ? HEAP32[$5 + HEAP32[$1 >> 2] >> 2] : $5;
  HEAPF32[$4 + 12 >> 2] = $3;
  FUNCTION_TABLE[$0]($1, $2, $4 + 12 | 0);
  $0 = $4 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function emscripten__internal__WireTypePack_float_20const____WireTypePack_28float_20const__29($0, $1) {
  var $2 = 0, $3 = 0;
  $2 = global$0 - 16 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  HEAP32[$2 + 12 >> 2] = $0;
  $3 = $2 + 12 | 0;
  HEAPF32[HEAP32[$3 >> 2] >> 2] = HEAPF32[$1 >> 2];
  HEAP32[$3 >> 2] = HEAP32[$3 >> 2] + 8;
  $1 = $2 + 16 | 0;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  return $0;
 }
 
 function emscripten__internal__FunctionInvoker_bool_20_28__29_28std____2__vector_float_2c_20std____2__allocator_float__20___2c_20unsigned_20long_2c_20float_20const__29_2c_20bool_2c_20std____2__vector_float_2c_20std____2__allocator_float__20___2c_20unsigned_20long_2c_20float_20const____invoke_28bool_20_28___29_28std____2__vector_float_2c_20std____2__allocator_float__20___2c_20unsigned_20long_2c_20float_20const__29_2c_20std____2__vector_float_2c_20std____2__allocator_float__20___2c_20unsigned_20long_2c_20float_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = Math_fround($3);
  var $4 = 0, $5 = 0;
  $4 = global$0 - 16 | 0;
  $5 = $4;
  if ($4 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $5;
  $0 = HEAP32[$0 >> 2];
  HEAPF32[$4 + 12 >> 2] = $3;
  $0 = FUNCTION_TABLE[$0]($1, $2, $4 + 12 | 0) | 0;
  $1 = $4 + 16 | 0;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  return $0 | 0;
 }
 
 function emscripten__internal__GenericBindingType_std____2__shared_ptr_maxiOsc__20___toWireType_28std____2__shared_ptr_maxiOsc____29($0) {
  $0 = $0 | 0;
  return std____2__shared_ptr_maxiOsc___shared_ptr_28std____2__shared_ptr_maxiOsc____29(operator_20new_28unsigned_20long_29(8), $0) | 0;
 }
 
 function std____2__shared_ptr_maxiOsc____shared_ptr_28_29($0) {
  var $1 = 0;
  $1 = HEAP32[$0 + 4 >> 2];
  if ($1) {
   if (std____2____shared_count____release_shared_28_29($1)) {
    std____2____shared_weak_count____release_weak_28_29($1)
   }
  }
  return $0;
 }
 
 function std____2__shared_ptr_maxiOsc___shared_ptr_28_29($0) {
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  return $0;
 }
 
 function emscripten__val__take_ownership_28emscripten__internal___EM_VAL__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  std____2____compressed_pair_elem_std____2__allocator_double___2c_201_2c_20false_____compressed_pair_elem_std____2__allocator_double___2c_20void__28std____2__allocator_double___29($0, $1);
 }
 
 function emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__val_deleter_28emscripten__val_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  emscripten__val__val_emscripten__val___28emscripten__val__29($0, $1);
  return $0 | 0;
 }
 
 function std____2__shared_ptr_maxiOsc___shared_ptr_maxiOsc_2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__28maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_2c_20std____2__enable_if_is_convertible_maxiOsc__2c_20maxiOsc____value_2c_20std____2__shared_ptr_maxiOsc_____nat___type_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0;
  $3 = global$0 - 32 | 0;
  $4 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  HEAP32[$0 >> 2] = $1;
  HEAP32[16874] = 0;
  $4 = __invoke_i1___22class_std____2__basic_ifstream_22_(930, 20) | 0;
  $5 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      if (($5 | 0) != 1) {
       HEAP32[16874] = 0;
       $5 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(931, $3 + 24 | 0, $2 | 0) | 0;
       $6 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($6 | 0) == 1) {
        break label$5
       }
       HEAP32[16874] = 0;
       __invoke___22class_std____2__basic_istream_22____22class_std____2__basic_istream_22__i8__i32(932, $4 | 0, $1 | 0, $5 | 0) | 0;
       $6 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($6 | 0) == 1) {
        break label$4
       }
       HEAP32[$0 + 4 >> 2] = $4;
       emscripten__val___val_28_29($5);
       HEAP32[$3 + 4 >> 2] = $1;
       HEAP32[$3 >> 2] = $1;
       $1 = $3 + 32 | 0;
       if ($1 >>> 0 < global$2 >>> 0) {
        __handle_stack_overflow()
       }
       global$0 = $1;
       return $0 | 0;
      }
      $3 = __cxa_find_matching_catch_3(0) | 0;
      getTempRet0() | 0;
      break label$2;
     }
     $3 = __cxa_find_matching_catch_3(0) | 0;
     getTempRet0() | 0;
     break label$3;
    }
    $3 = __cxa_find_matching_catch_3(0) | 0;
    getTempRet0() | 0;
    emscripten__val___val_28_29($5);
   }
   dlfree($4);
  }
  __cxa_begin_catch($3 | 0) | 0;
  HEAP32[16874] = 0;
  __invoke_void___22class_std____2__vector_13_22__i32(933, $2 | 0, $1 | 0);
  $0 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$8 : {
   label$9 : {
    if (($0 | 0) != 1) {
     HEAP32[16874] = 0;
     __invoke_void(934);
     $0 = HEAP32[16874];
     HEAP32[16874] = 0;
     if (($0 | 0) != 1) {
      break label$9
     }
    }
    $0 = __cxa_find_matching_catch_2() | 0;
    getTempRet0() | 0;
    HEAP32[16874] = 0;
    __invoke_void(23);
    $1 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($1 | 0) != 1) {
     break label$8
    }
    $0 = __cxa_find_matching_catch_3(0) | 0;
    getTempRet0() | 0;
    __clang_call_terminate($0);
   }
   abort();
  }
  __resumeException($0 | 0);
  abort();
 }
 
 function emscripten__val__val_emscripten__val___28emscripten__val__29($0, $1) {
  var $2 = 0, $3 = 0;
  $2 = global$0 - 16 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  HEAP32[$0 >> 2] = _emval_take_value(4788, emscripten__internal__WireTypePack_emscripten__val____WireTypePack_28emscripten__val__29($2 + 8 | 0, $1) | 0);
  $0 = $2 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__val_deleter_28emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1 = HEAP32[$1 >> 2];
  HEAP32[$0 >> 2] = $1;
  _emval_incref($1 | 0);
  return $0 | 0;
 }
 
 function std____2____shared_ptr_pointer_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_2c_20std____2__allocator_maxiOsc__20_____shared_ptr_pointer_28maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_2c_20std____2__allocator_maxiOsc__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0;
  $3 = global$0 - 32 | 0;
  $4 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  HEAP32[$3 + 20 >> 2] = $1;
  std____2____shared_weak_count____shared_weak_count_28long_29($0);
  HEAP32[$0 >> 2] = 6484;
  HEAP32[16874] = 0;
  $1 = std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_____compressed_pair_maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__28maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter___29($3 + 8 | 0, $3 + 20 | 0, $2);
  $2 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    if (($2 | 0) != 1) {
     HEAP32[16874] = 0;
     std____2____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20_____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20__28std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter____2c_20std____2__allocator_maxiOsc____29($0 + 12 | 0, $1, $3 + 24 | 0);
     $2 = HEAP32[16874];
     HEAP32[16874] = 0;
     if (($2 | 0) == 1) {
      break label$3
     }
     std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter______compressed_pair_28_29($1);
     $1 = $3 + 32 | 0;
     if ($1 >>> 0 < global$2 >>> 0) {
      __handle_stack_overflow()
     }
     global$0 = $1;
     return $0 | 0;
    }
    $0 = __cxa_find_matching_catch_2() | 0;
    getTempRet0() | 0;
    break label$2;
   }
   $0 = __cxa_find_matching_catch_2() | 0;
   getTempRet0() | 0;
   std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter______compressed_pair_28_29($1);
  }
  __resumeException($0 | 0);
  abort();
 }
 
 function emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__operator_28_29_28void_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  emscripten__val_20emscripten__val__internalCall_emscripten__internal___EM_VAL__20_28__29_28emscripten__internal___EM_VAL__2c_20unsigned_20int_2c_20void_20const__20const__2c_20void_20const__29__28emscripten__internal___EM_VAL__20_28__29_28emscripten__internal___EM_VAL__2c_20unsigned_20int_2c_20void_20const__20const__2c_20void_20const__29_29_20const($1 + 8 | 0, $0);
  emscripten__val___val_28_29($1 + 8 | 0);
  emscripten__val__undefined_28_29($1);
  HEAP32[16874] = 0;
  __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(937, $0 | 0, $1 | 0) | 0;
  $0 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($0 | 0) != 1) {
   emscripten__val___val_28_29($1);
   $0 = $1 + 16 | 0;
   if ($0 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $0;
   return;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  emscripten__val___val_28_29($1);
  __resumeException($0 | 0);
  abort();
 }
 
 function emscripten__internal__WireTypePack_emscripten__val____WireTypePack_28emscripten__val__29($0, $1) {
  var $2 = 0, $3 = 0;
  $2 = global$0 - 16 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  HEAP32[$2 + 12 >> 2] = $0;
  void_20emscripten__internal__writeGenericWireType_int__28emscripten__internal__GenericWireType___2c_20int_29($2 + 12 | 0, emscripten__internal__BindingType_emscripten__val_2c_20void___toWireType_28emscripten__val_20const__29($1));
  $1 = $2 + 16 | 0;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  return $0;
 }
 
 function std____2____shared_weak_count____shared_weak_count_28long_29($0) {
  std____2____shared_count____shared_count_28long_29($0);
  HEAP32[$0 + 8 >> 2] = 0;
  HEAP32[$0 >> 2] = 46164;
  return $0;
 }
 
 function std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_____compressed_pair_maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__28maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter___29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  std____2____compressed_pair_elem__IO_FILE__2c_200_2c_20false_____compressed_pair_elem__IO_FILE___2c_20void__28_IO_FILE___29($0, $1);
  emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__val_deleter_28emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter___29($0 + 4 | 0, $2);
  return $0 | 0;
 }
 
 function std____2____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20_____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20__28std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter____2c_20std____2__allocator_maxiOsc____29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
  emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__val_deleter_28emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter___29($0 + 4 | 0, $1 + 4 | 0);
  return $0 | 0;
 }
 
 function std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter______compressed_pair_28_29($0) {
  emscripten__val___val_28_29($0 + 4 | 0);
 }
 
 function emscripten__val__operator__28emscripten__val___29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  _emval_decref(HEAP32[$0 >> 2]);
  HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$1 >> 2] = 0;
  return $0 | 0;
 }
 
 function std____2____shared_count____shared_count_28long_29($0) {
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$0 >> 2] = 46108;
 }
 
 function std____2____shared_ptr_pointer_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_2c_20std____2__allocator_maxiOsc__20______shared_ptr_pointer_28_29($0) {
  $0 = $0 | 0;
  HEAP32[$0 >> 2] = 6484;
  std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter______compressed_pair_28_29($0 + 12 | 0);
  return $0 | 0;
 }
 
 function std____2____shared_ptr_pointer_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_2c_20std____2__allocator_maxiOsc__20______shared_ptr_pointer_28_29_1($0) {
  $0 = $0 | 0;
  dlfree(std____2____shared_ptr_pointer_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_2c_20std____2__allocator_maxiOsc__20______shared_ptr_pointer_28_29($0));
 }
 
 function std____2____shared_ptr_pointer_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_2c_20std____2__allocator_maxiOsc__20_____on_zero_shared_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $0 = $0 + 12 | 0;
  $1 = std____2____compressed_pair__IO_FILE__2c_20int_20_28__29_28_IO_FILE__29___second_28_29($0);
  $2 = HEAP32[$0 >> 2];
  HEAP32[16874] = 0;
  __invoke_void___22class_std____2__vector_13_22__i32(933, $1 | 0, $2 | 0);
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($1 | 0) != 1) {
   emscripten__val___val_28_29(std____2____compressed_pair__IO_FILE__2c_20int_20_28__29_28_IO_FILE__29___second_28_29($0));
   return;
  }
  $0 = __cxa_find_matching_catch_3(0) | 0;
  getTempRet0() | 0;
  __clang_call_terminate($0);
  abort();
 }
 
 function std____2____shared_ptr_pointer_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_2c_20std____2__allocator_maxiOsc__20_____get_deleter_28std__type_info_20const__29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  if (std__type_info__operator___28std__type_info_20const__29_20const($1, 6724)) {
   $0 = std____2____compressed_pair__IO_FILE__2c_20int_20_28__29_28_IO_FILE__29___second_28_29($0 + 12 | 0)
  } else {
   $0 = 0
  }
  return $0 | 0;
 }
 
 function std__type_info__operator___28std__type_info_20const__29_20const($0, $1) {
  return HEAP32[$0 + 4 >> 2] == HEAP32[$1 + 4 >> 2];
 }
 
 function std____2____shared_ptr_pointer_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_2c_20std____2__allocator_maxiOsc__20_____on_zero_shared_weak_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  std____2__allocator_std____2____shared_ptr_pointer_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_2c_20std____2__allocator_maxiOsc__20__20___deallocate_28std____2____shared_ptr_pointer_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_2c_20std____2__allocator_maxiOsc__20___2c_20unsigned_20long_29($0);
  $0 = $1 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function std____2__allocator_std____2____shared_ptr_pointer_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_2c_20std____2__allocator_maxiOsc__20__20___deallocate_28std____2____shared_ptr_pointer_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_2c_20std____2__allocator_maxiOsc__20___2c_20unsigned_20long_29($0) {
  HEAP32[16874] = 0;
  dlfree($0);
  $0 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($0 | 0) != 1) {
   return
  }
  $0 = __cxa_find_matching_catch_3(0) | 0;
  getTempRet0() | 0;
  __clang_call_terminate($0);
  abort();
 }
 
 function emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__val_deleter_28emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter___29($0, $1) {
  HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$1 >> 2] = 0;
 }
 
 function emscripten__val_20emscripten__val__internalCall_emscripten__internal___EM_VAL__20_28__29_28emscripten__internal___EM_VAL__2c_20unsigned_20int_2c_20void_20const__20const__2c_20void_20const__29__28emscripten__internal___EM_VAL__20_28__29_28emscripten__internal___EM_VAL__2c_20unsigned_20int_2c_20void_20const__20const__2c_20void_20const__29_29_20const($0, $1) {
  var $2 = 0, $3 = 0;
  $2 = global$0 - 16 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  $3 = emscripten__internal__WireTypePack____WireTypePack_28_29($2);
  std____2____compressed_pair_elem_std____2__allocator_double___2c_201_2c_20false_____compressed_pair_elem_std____2__allocator_double___2c_20void__28std____2__allocator_double___29($0, FUNCTION_TABLE[938](HEAP32[$1 >> 2], 0, 6732, $3) | 0);
  $0 = $2 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function emscripten__internal__WireTypePack____WireTypePack_28_29($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  HEAP32[$1 + 12 >> 2] = $0;
  $1 = $1 + 16 | 0;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  return $0;
 }
 
 function emscripten__internal__WithPolicies____ArgTypeList____getCount_28_29_20const($0) {
  $0 = $0 | 0;
  return 0;
 }
 
 function std____2____shared_count____release_shared_28_29($0) {
  if ((long_20std____2____libcpp_atomic_refcount_decrement_long__28long__29($0 + 4 | 0) | 0) == -1) {
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0);
   $0 = 1;
  } else {
   $0 = 0
  }
  return $0;
 }
 
 function long_20std____2____libcpp_atomic_refcount_decrement_long__28long__29($0) {
  var $1 = 0;
  $1 = $0;
  $0 = HEAP32[$0 >> 2] + -1 | 0;
  HEAP32[$1 >> 2] = $0;
  return $0;
 }
 
 function std____2__shared_ptr_maxiOsc___shared_ptr_28std____2__shared_ptr_maxiOsc____29($0, $1) {
  HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  return $0;
 }
 
 function std____2__shared_ptr_maxiOsc__20std____2__shared_ptr_maxiOsc___make_shared___28_29($0) {
  var $1 = 0, $2 = 0, $3 = 0;
  $2 = global$0 - 48 | 0;
  $1 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  $1 = $2 + 40 | 0;
  $1 = std____2__unique_ptr_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20___unique_ptr_true_2c_20void__28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20__2c_20true_____good_rval_ref_type_29($2 + 24 | 0, operator_20new_28unsigned_20long_29(64), std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20_____allocator_destructor_28std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20___2c_20unsigned_20long_29($2 + 16 | 0, $1, 1));
  $3 = HEAP32[$1 >> 2];
  HEAP32[16874] = 0;
  __invoke_i1___22class_std____2__basic_ifstream_22_(939, $3 | 0) | 0;
  $3 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($3 | 0) != 1) {
   $0 = std____2__shared_ptr_maxiOsc___shared_ptr_28_29($0);
   HEAP32[$0 >> 2] = std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___get_28_29(HEAP32[$1 >> 2]);
   HEAP32[$0 + 4 >> 2] = std____2__unique_ptr__IO_FILE_2c_20int_20_28__29_28_IO_FILE__29___release_28_29($1);
   $0 = HEAP32[$0 >> 2];
   HEAP32[$2 + 4 >> 2] = $0;
   HEAP32[$2 >> 2] = $0;
   std____2__unique_ptr_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20___reset_28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___29($1);
   $0 = $2 + 48 | 0;
   if ($0 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $0;
   return;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__unique_ptr_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20___reset_28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___29($1);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20_____allocator_destructor_28std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20___2c_20unsigned_20long_29($0, $1, $2) {
  HEAP32[$0 + 4 >> 2] = $2;
  HEAP32[$0 >> 2] = $1;
  return $0;
 }
 
 function std____2__unique_ptr_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20___unique_ptr_true_2c_20void__28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20__2c_20true_____good_rval_ref_type_29($0, $1, $2) {
  var $3 = 0, $4 = 0;
  $3 = global$0 - 16 | 0;
  $4 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  HEAP32[$3 + 12 >> 2] = $1;
  HEAP32[16874] = 0;
  std____2____compressed_pair_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20_____compressed_pair_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20____2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20__28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20____2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20____29($0, $3 + 12 | 0, $2);
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($1 | 0) != 1) {
   $1 = $3 + 16 | 0;
   if ($1 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $1;
   return $0;
  }
  $0 = __cxa_find_matching_catch_3(0) | 0;
  getTempRet0() | 0;
  __clang_call_terminate($0);
  abort();
 }
 
 function std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20_____shared_ptr_emplace_28std____2__allocator_maxiOsc__29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  std____2____shared_weak_count____shared_weak_count_28long_29($0);
  HEAP32[$0 >> 2] = 6788;
  HEAP32[16874] = 0;
  std____2____compressed_pair_std____2__allocator_maxiOsc__2c_20maxiOsc_____compressed_pair_std____2__allocator_maxiOsc__2c_20true__28std____2__allocator_maxiOsc____29($0 + 16 | 0, $1 + 8 | 0);
  $2 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($2 | 0) != 1) {
   $1 = $1 + 16 | 0;
   if ($1 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $1;
   return $0 | 0;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___get_28_29($0) {
  return $0 + 16 | 0;
 }
 
 function std____2____compressed_pair_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20_____compressed_pair_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20____2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20__28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20____2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20____29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  std____2____compressed_pair_elem__IO_FILE__2c_200_2c_20false_____compressed_pair_elem__IO_FILE___2c_20void__28_IO_FILE___29($0, $1);
  $1 = HEAP32[$2 + 4 >> 2];
  $3 = $0 + 4 | 0;
  HEAP32[$3 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$3 + 4 >> 2] = $1;
  return $0 | 0;
 }
 
 function std____2____compressed_pair_std____2__allocator_maxiOsc__2c_20maxiOsc_____compressed_pair_std____2__allocator_maxiOsc__2c_20true__28std____2__allocator_maxiOsc____29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  maxiOsc__maxiOsc_28_29($0);
  return $0 | 0;
 }
 
 function std____2__unique_ptr_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20___reset_28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___29($0) {
  var $1 = 0;
  $1 = HEAP32[$0 >> 2];
  HEAP32[$0 >> 2] = 0;
  if ($1) {
   std____2__allocator_char___deallocate_28char__2c_20unsigned_20long_29($1, HEAP32[std____2____compressed_pair__IO_FILE__2c_20int_20_28__29_28_IO_FILE__29___second_28_29($0) + 4 >> 2])
  }
 }
 
 function std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20_____on_zero_shared_weak_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  std____2__allocator_char___deallocate_28char__2c_20unsigned_20long_29($0, 1);
  $0 = $1 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function emscripten__internal__MethodInvoker_double_20_28maxiOsc____29_28double_29_2c_20double_2c_20maxiOsc__2c_20double___invoke_28double_20_28maxiOsc____20const__29_28double_29_2c_20maxiOsc__2c_20double_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = +$2;
  var $3 = 0, $4 = 0;
  $4 = global$0 - 16 | 0;
  $3 = $4;
  if ($4 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  $3 = $1;
  $1 = HEAP32[$0 + 4 >> 2];
  $3 = $3 + ($1 >> 1) | 0;
  $0 = HEAP32[$0 >> 2];
  HEAPF64[$4 + 8 >> 3] = FUNCTION_TABLE[$1 & 1 ? HEAP32[$0 + HEAP32[$3 >> 2] >> 2] : $0]($3, $2);
  $2 = HEAPF64[$4 + 8 >> 3];
  $0 = $4 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
  return +$2;
 }
 
 function emscripten__internal__MethodInvoker_double_20_28maxiOsc____29_28double_2c_20double_2c_20double_29_2c_20double_2c_20maxiOsc__2c_20double_2c_20double_2c_20double___invoke_28double_20_28maxiOsc____20const__29_28double_2c_20double_2c_20double_29_2c_20maxiOsc__2c_20double_2c_20double_2c_20double_29($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = +$2;
  $3 = +$3;
  $4 = +$4;
  var $5 = 0, $6 = 0;
  $6 = global$0 - 16 | 0;
  $5 = $6;
  if ($6 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $5;
  $5 = $1;
  $1 = HEAP32[$0 + 4 >> 2];
  $5 = $5 + ($1 >> 1) | 0;
  $0 = HEAP32[$0 >> 2];
  HEAPF64[$6 + 8 >> 3] = FUNCTION_TABLE[$1 & 1 ? HEAP32[$0 + HEAP32[$5 >> 2] >> 2] : $0]($5, $2, $3, $4);
  $2 = HEAPF64[$6 + 8 >> 3];
  $0 = $6 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
  return +$2;
 }
 
 function emscripten__internal__MethodInvoker_double_20_28maxiOsc____29_28double_2c_20double_29_2c_20double_2c_20maxiOsc__2c_20double_2c_20double___invoke_28double_20_28maxiOsc____20const__29_28double_2c_20double_29_2c_20maxiOsc__2c_20double_2c_20double_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = +$2;
  $3 = +$3;
  var $4 = 0, $5 = 0;
  $5 = global$0 - 16 | 0;
  $4 = $5;
  if ($5 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  $4 = $1;
  $1 = HEAP32[$0 + 4 >> 2];
  $4 = $4 + ($1 >> 1) | 0;
  $0 = HEAP32[$0 >> 2];
  HEAPF64[$5 + 8 >> 3] = FUNCTION_TABLE[$1 & 1 ? HEAP32[$0 + HEAP32[$4 >> 2] >> 2] : $0]($4, $2, $3);
  $2 = HEAPF64[$5 + 8 >> 3];
  $0 = $5 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
  return +$2;
 }
 
 function emscripten__internal__MethodInvoker_double_20_28maxiOsc____29_28_29_2c_20double_2c_20maxiOsc____invoke_28double_20_28maxiOsc____20const__29_28_29_2c_20maxiOsc__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0.0;
  $3 = global$0 - 16 | 0;
  $2 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  $2 = $1;
  $1 = HEAP32[$0 >> 2];
  $0 = HEAP32[$0 + 4 >> 2];
  $2 = ($0 >> 1) + $2 | 0;
  HEAPF64[$3 + 8 >> 3] = FUNCTION_TABLE[$0 & 1 ? HEAP32[$1 + HEAP32[$2 >> 2] >> 2] : $1]($2);
  $4 = HEAPF64[$3 + 8 >> 3];
  $0 = $3 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
  return +$4;
 }
 
 function std____2__shared_ptr_maxiEnvelope___shared_ptr_maxiEnvelope_2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiEnvelope__20___val_deleter__28maxiEnvelope__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiEnvelope__20___val_deleter_2c_20std____2__enable_if_is_convertible_maxiEnvelope__2c_20maxiEnvelope____value_2c_20std____2__shared_ptr_maxiEnvelope_____nat___type_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0;
  $3 = global$0 - 32 | 0;
  $4 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  HEAP32[$0 >> 2] = $1;
  HEAP32[16874] = 0;
  $4 = __invoke_i1___22class_std____2__basic_ifstream_22_(930, 20) | 0;
  $5 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      if (($5 | 0) != 1) {
       HEAP32[16874] = 0;
       $5 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(942, $3 + 24 | 0, $2 | 0) | 0;
       $6 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($6 | 0) == 1) {
        break label$5
       }
       HEAP32[16874] = 0;
       __invoke___22class_std____2__basic_istream_22____22class_std____2__basic_istream_22__i8__i32(943, $4 | 0, $1 | 0, $5 | 0) | 0;
       $6 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($6 | 0) == 1) {
        break label$4
       }
       HEAP32[$0 + 4 >> 2] = $4;
       emscripten__val___val_28_29($5);
       HEAP32[$3 + 4 >> 2] = $1;
       HEAP32[$3 >> 2] = $1;
       $1 = $3 + 32 | 0;
       if ($1 >>> 0 < global$2 >>> 0) {
        __handle_stack_overflow()
       }
       global$0 = $1;
       return $0 | 0;
      }
      $3 = __cxa_find_matching_catch_3(0) | 0;
      getTempRet0() | 0;
      break label$2;
     }
     $3 = __cxa_find_matching_catch_3(0) | 0;
     getTempRet0() | 0;
     break label$3;
    }
    $3 = __cxa_find_matching_catch_3(0) | 0;
    getTempRet0() | 0;
    emscripten__val___val_28_29($5);
   }
   dlfree($4);
  }
  __cxa_begin_catch($3 | 0) | 0;
  HEAP32[16874] = 0;
  __invoke_void___22class_std____2__vector_13_22__i32(944, $2 | 0, $1 | 0);
  $0 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$8 : {
   label$9 : {
    if (($0 | 0) != 1) {
     HEAP32[16874] = 0;
     __invoke_void(934);
     $0 = HEAP32[16874];
     HEAP32[16874] = 0;
     if (($0 | 0) != 1) {
      break label$9
     }
    }
    $0 = __cxa_find_matching_catch_2() | 0;
    getTempRet0() | 0;
    HEAP32[16874] = 0;
    __invoke_void(23);
    $1 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($1 | 0) != 1) {
     break label$8
    }
    $0 = __cxa_find_matching_catch_3(0) | 0;
    getTempRet0() | 0;
    __clang_call_terminate($0);
   }
   abort();
  }
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____shared_ptr_pointer_maxiEnvelope__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiEnvelope__20___val_deleter_2c_20std____2__allocator_maxiEnvelope__20_____shared_ptr_pointer_28maxiEnvelope__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiEnvelope__20___val_deleter_2c_20std____2__allocator_maxiEnvelope__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0;
  $3 = global$0 - 32 | 0;
  $4 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  HEAP32[$3 + 20 >> 2] = $1;
  std____2____shared_weak_count____shared_weak_count_28long_29($0);
  HEAP32[$0 >> 2] = 7092;
  HEAP32[16874] = 0;
  $1 = std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_____compressed_pair_maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__28maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter___29($3 + 8 | 0, $3 + 20 | 0, $2);
  $2 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    if (($2 | 0) != 1) {
     HEAP32[16874] = 0;
     std____2____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20_____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20__28std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter____2c_20std____2__allocator_maxiOsc____29($0 + 12 | 0, $1, $3 + 24 | 0);
     $2 = HEAP32[16874];
     HEAP32[16874] = 0;
     if (($2 | 0) == 1) {
      break label$3
     }
     std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter______compressed_pair_28_29($1);
     $1 = $3 + 32 | 0;
     if ($1 >>> 0 < global$2 >>> 0) {
      __handle_stack_overflow()
     }
     global$0 = $1;
     return $0 | 0;
    }
    $0 = __cxa_find_matching_catch_2() | 0;
    getTempRet0() | 0;
    break label$2;
   }
   $0 = __cxa_find_matching_catch_2() | 0;
   getTempRet0() | 0;
   std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter______compressed_pair_28_29($1);
  }
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____shared_ptr_pointer_maxiEnvelope__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiEnvelope__20___val_deleter_2c_20std____2__allocator_maxiEnvelope__20______shared_ptr_pointer_28_29($0) {
  $0 = $0 | 0;
  HEAP32[$0 >> 2] = 7092;
  std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter______compressed_pair_28_29($0 + 12 | 0);
  return $0 | 0;
 }
 
 function std____2____shared_ptr_pointer_maxiEnvelope__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiEnvelope__20___val_deleter_2c_20std____2__allocator_maxiEnvelope__20______shared_ptr_pointer_28_29_1($0) {
  $0 = $0 | 0;
  dlfree(std____2____shared_ptr_pointer_maxiEnvelope__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiEnvelope__20___val_deleter_2c_20std____2__allocator_maxiEnvelope__20______shared_ptr_pointer_28_29($0));
 }
 
 function std____2____shared_ptr_pointer_maxiEnvelope__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiEnvelope__20___val_deleter_2c_20std____2__allocator_maxiEnvelope__20_____on_zero_shared_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $0 = $0 + 12 | 0;
  $1 = std____2____compressed_pair__IO_FILE__2c_20int_20_28__29_28_IO_FILE__29___second_28_29($0);
  $2 = HEAP32[$0 >> 2];
  HEAP32[16874] = 0;
  __invoke_void___22class_std____2__vector_13_22__i32(944, $1 | 0, $2 | 0);
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($1 | 0) != 1) {
   emscripten__val___val_28_29(std____2____compressed_pair__IO_FILE__2c_20int_20_28__29_28_IO_FILE__29___second_28_29($0));
   return;
  }
  $0 = __cxa_find_matching_catch_3(0) | 0;
  getTempRet0() | 0;
  __clang_call_terminate($0);
  abort();
 }
 
 function std____2____shared_ptr_pointer_maxiEnvelope__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiEnvelope__20___val_deleter_2c_20std____2__allocator_maxiEnvelope__20_____get_deleter_28std__type_info_20const__29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  if (std__type_info__operator___28std__type_info_20const__29_20const($1, 7344)) {
   $0 = std____2____compressed_pair__IO_FILE__2c_20int_20_28__29_28_IO_FILE__29___second_28_29($0 + 12 | 0)
  } else {
   $0 = 0
  }
  return $0 | 0;
 }
 
 function std____2__shared_ptr_maxiEnvelope__20std____2__shared_ptr_maxiEnvelope___make_shared___28_29($0) {
  var $1 = 0, $2 = 0, $3 = 0;
  $2 = global$0 - 48 | 0;
  $1 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  $1 = $2 + 40 | 0;
  $1 = std____2__unique_ptr_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20___unique_ptr_true_2c_20void__28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20__2c_20true_____good_rval_ref_type_29($2 + 24 | 0, operator_20new_28unsigned_20long_29(72), std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20_____allocator_destructor_28std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20___2c_20unsigned_20long_29($2 + 16 | 0, $1, 1));
  $3 = HEAP32[$1 >> 2];
  HEAP32[16874] = 0;
  __invoke_i1___22class_std____2__basic_ifstream_22_(947, $3 | 0) | 0;
  $3 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($3 | 0) != 1) {
   $0 = std____2__shared_ptr_maxiOsc___shared_ptr_28_29($0);
   HEAP32[$0 >> 2] = std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___get_28_29(HEAP32[$1 >> 2]);
   HEAP32[$0 + 4 >> 2] = std____2__unique_ptr__IO_FILE_2c_20int_20_28__29_28_IO_FILE__29___release_28_29($1);
   $0 = HEAP32[$0 >> 2];
   HEAP32[$2 + 4 >> 2] = $0;
   HEAP32[$2 >> 2] = $0;
   std____2__unique_ptr_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20___reset_28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___29($1);
   $0 = $2 + 48 | 0;
   if ($0 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $0;
   return;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__unique_ptr_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20___reset_28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___29($1);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____shared_ptr_emplace_maxiEnvelope_2c_20std____2__allocator_maxiEnvelope__20_____shared_ptr_emplace_28std____2__allocator_maxiEnvelope__29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  std____2____shared_weak_count____shared_weak_count_28long_29($0);
  HEAP32[$0 >> 2] = 7412;
  HEAP32[16874] = 0;
  std____2____compressed_pair_std____2__allocator_maxiEnvelope__2c_20maxiEnvelope_____compressed_pair_std____2__allocator_maxiEnvelope__2c_20true__28std____2__allocator_maxiEnvelope____29($0 + 16 | 0, $1 + 8 | 0);
  $2 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($2 | 0) != 1) {
   $1 = $1 + 16 | 0;
   if ($1 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $1;
   return $0 | 0;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____compressed_pair_std____2__allocator_maxiEnvelope__2c_20maxiEnvelope_____compressed_pair_std____2__allocator_maxiEnvelope__2c_20true__28std____2__allocator_maxiEnvelope____29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  std____2____compressed_pair_elem_maxiEnvelope_2c_201_2c_20false_____compressed_pair_elem_28_29($0);
  return $0 | 0;
 }
 
 function std____2____compressed_pair_elem_maxiEnvelope_2c_201_2c_20false_____compressed_pair_elem_28_29($0) {
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$0 + 48 >> 2] = 0;
  HEAP32[$0 + 52 >> 2] = 0;
  HEAP32[$0 + 40 >> 2] = 0;
  HEAP32[$0 + 44 >> 2] = 0;
  HEAP32[$0 + 32 >> 2] = 0;
  HEAP32[$0 + 36 >> 2] = 0;
  HEAP32[$0 + 24 >> 2] = 0;
  HEAP32[$0 + 28 >> 2] = 0;
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP32[$0 + 20 >> 2] = 0;
  HEAP32[$0 + 8 >> 2] = 0;
  HEAP32[$0 + 12 >> 2] = 0;
 }
 
 function emscripten__internal__MethodInvoker_double_20_28maxiEnvelope____29_28int_2c_20std____2__vector_double_2c_20std____2__allocator_double__20___29_2c_20double_2c_20maxiEnvelope__2c_20int_2c_20std____2__vector_double_2c_20std____2__allocator_double__20_____invoke_28double_20_28maxiEnvelope____20const__29_28int_2c_20std____2__vector_double_2c_20std____2__allocator_double__20___29_2c_20maxiEnvelope__2c_20int_2c_20std____2__vector_double_2c_20std____2__allocator_double__20___29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0.0;
  $5 = global$0 - 16 | 0;
  $4 = $5;
  if ($5 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  $4 = $1;
  $1 = HEAP32[$0 + 4 >> 2];
  $4 = $4 + ($1 >> 1) | 0;
  $0 = HEAP32[$0 >> 2];
  HEAPF64[$5 + 8 >> 3] = FUNCTION_TABLE[$1 & 1 ? HEAP32[$0 + HEAP32[$4 >> 2] >> 2] : $0]($4, $2, $3);
  $6 = HEAPF64[$5 + 8 >> 3];
  $0 = $5 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
  return +$6;
 }
 
 function emscripten__internal__MethodInvoker_void_20_28maxiEnvelope____29_28int_2c_20double_29_2c_20void_2c_20maxiEnvelope__2c_20int_2c_20double___invoke_28void_20_28maxiEnvelope____20const__29_28int_2c_20double_29_2c_20maxiEnvelope__2c_20int_2c_20double_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = +$3;
  var $4 = 0;
  $4 = $1;
  $1 = HEAP32[$0 + 4 >> 2];
  $4 = $4 + ($1 >> 1) | 0;
  $0 = HEAP32[$0 >> 2];
  FUNCTION_TABLE[$1 & 1 ? HEAP32[$0 + HEAP32[$4 >> 2] >> 2] : $0]($4, $2, $3);
 }
 
 function std____2__shared_ptr_maxiDelayline___shared_ptr_maxiDelayline_2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiDelayline__20___val_deleter__28maxiDelayline__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiDelayline__20___val_deleter_2c_20std____2__enable_if_is_convertible_maxiDelayline__2c_20maxiDelayline____value_2c_20std____2__shared_ptr_maxiDelayline_____nat___type_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0;
  $3 = global$0 - 32 | 0;
  $4 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  HEAP32[$0 >> 2] = $1;
  HEAP32[16874] = 0;
  $4 = __invoke_i1___22class_std____2__basic_ifstream_22_(930, 20) | 0;
  $5 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      if (($5 | 0) != 1) {
       HEAP32[16874] = 0;
       $5 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(950, $3 + 24 | 0, $2 | 0) | 0;
       $6 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($6 | 0) == 1) {
        break label$5
       }
       HEAP32[16874] = 0;
       __invoke___22class_std____2__basic_istream_22____22class_std____2__basic_istream_22__i8__i32(951, $4 | 0, $1 | 0, $5 | 0) | 0;
       $6 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($6 | 0) == 1) {
        break label$4
       }
       HEAP32[$0 + 4 >> 2] = $4;
       emscripten__val___val_28_29($5);
       HEAP32[$3 + 4 >> 2] = $1;
       HEAP32[$3 >> 2] = $1;
       $1 = $3 + 32 | 0;
       if ($1 >>> 0 < global$2 >>> 0) {
        __handle_stack_overflow()
       }
       global$0 = $1;
       return $0 | 0;
      }
      $3 = __cxa_find_matching_catch_3(0) | 0;
      getTempRet0() | 0;
      break label$2;
     }
     $3 = __cxa_find_matching_catch_3(0) | 0;
     getTempRet0() | 0;
     break label$3;
    }
    $3 = __cxa_find_matching_catch_3(0) | 0;
    getTempRet0() | 0;
    emscripten__val___val_28_29($5);
   }
   dlfree($4);
  }
  __cxa_begin_catch($3 | 0) | 0;
  HEAP32[16874] = 0;
  __invoke_void___22class_std____2__vector_13_22__i32(952, $2 | 0, $1 | 0);
  $0 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$8 : {
   label$9 : {
    if (($0 | 0) != 1) {
     HEAP32[16874] = 0;
     __invoke_void(934);
     $0 = HEAP32[16874];
     HEAP32[16874] = 0;
     if (($0 | 0) != 1) {
      break label$9
     }
    }
    $0 = __cxa_find_matching_catch_2() | 0;
    getTempRet0() | 0;
    HEAP32[16874] = 0;
    __invoke_void(23);
    $1 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($1 | 0) != 1) {
     break label$8
    }
    $0 = __cxa_find_matching_catch_3(0) | 0;
    getTempRet0() | 0;
    __clang_call_terminate($0);
   }
   abort();
  }
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____shared_ptr_pointer_maxiDelayline__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiDelayline__20___val_deleter_2c_20std____2__allocator_maxiDelayline__20_____shared_ptr_pointer_28maxiDelayline__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiDelayline__20___val_deleter_2c_20std____2__allocator_maxiDelayline__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0;
  $3 = global$0 - 32 | 0;
  $4 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  HEAP32[$3 + 20 >> 2] = $1;
  std____2____shared_weak_count____shared_weak_count_28long_29($0);
  HEAP32[$0 >> 2] = 7672;
  HEAP32[16874] = 0;
  $1 = std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_____compressed_pair_maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__28maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter___29($3 + 8 | 0, $3 + 20 | 0, $2);
  $2 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    if (($2 | 0) != 1) {
     HEAP32[16874] = 0;
     std____2____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20_____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20__28std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter____2c_20std____2__allocator_maxiOsc____29($0 + 12 | 0, $1, $3 + 24 | 0);
     $2 = HEAP32[16874];
     HEAP32[16874] = 0;
     if (($2 | 0) == 1) {
      break label$3
     }
     std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter______compressed_pair_28_29($1);
     $1 = $3 + 32 | 0;
     if ($1 >>> 0 < global$2 >>> 0) {
      __handle_stack_overflow()
     }
     global$0 = $1;
     return $0 | 0;
    }
    $0 = __cxa_find_matching_catch_2() | 0;
    getTempRet0() | 0;
    break label$2;
   }
   $0 = __cxa_find_matching_catch_2() | 0;
   getTempRet0() | 0;
   std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter______compressed_pair_28_29($1);
  }
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____shared_ptr_pointer_maxiDelayline__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiDelayline__20___val_deleter_2c_20std____2__allocator_maxiDelayline__20______shared_ptr_pointer_28_29($0) {
  $0 = $0 | 0;
  HEAP32[$0 >> 2] = 7672;
  std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter______compressed_pair_28_29($0 + 12 | 0);
  return $0 | 0;
 }
 
 function std____2____shared_ptr_pointer_maxiDelayline__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiDelayline__20___val_deleter_2c_20std____2__allocator_maxiDelayline__20______shared_ptr_pointer_28_29_1($0) {
  $0 = $0 | 0;
  dlfree(std____2____shared_ptr_pointer_maxiDelayline__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiDelayline__20___val_deleter_2c_20std____2__allocator_maxiDelayline__20______shared_ptr_pointer_28_29($0));
 }
 
 function std____2____shared_ptr_pointer_maxiDelayline__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiDelayline__20___val_deleter_2c_20std____2__allocator_maxiDelayline__20_____on_zero_shared_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $0 = $0 + 12 | 0;
  $1 = std____2____compressed_pair__IO_FILE__2c_20int_20_28__29_28_IO_FILE__29___second_28_29($0);
  $2 = HEAP32[$0 >> 2];
  HEAP32[16874] = 0;
  __invoke_void___22class_std____2__vector_13_22__i32(952, $1 | 0, $2 | 0);
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($1 | 0) != 1) {
   emscripten__val___val_28_29(std____2____compressed_pair__IO_FILE__2c_20int_20_28__29_28_IO_FILE__29___second_28_29($0));
   return;
  }
  $0 = __cxa_find_matching_catch_3(0) | 0;
  getTempRet0() | 0;
  __clang_call_terminate($0);
  abort();
 }
 
 function std____2____shared_ptr_pointer_maxiDelayline__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiDelayline__20___val_deleter_2c_20std____2__allocator_maxiDelayline__20_____get_deleter_28std__type_info_20const__29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  if (std__type_info__operator___28std__type_info_20const__29_20const($1, 7924)) {
   $0 = std____2____compressed_pair__IO_FILE__2c_20int_20_28__29_28_IO_FILE__29___second_28_29($0 + 12 | 0)
  } else {
   $0 = 0
  }
  return $0 | 0;
 }
 
 function std____2__shared_ptr_maxiDelayline__20std____2__shared_ptr_maxiDelayline___make_shared___28_29($0) {
  var $1 = 0, $2 = 0, $3 = 0;
  $2 = global$0 - 48 | 0;
  $1 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  $1 = $2 + 40 | 0;
  $1 = std____2__unique_ptr_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20___unique_ptr_true_2c_20void__28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20__2c_20true_____good_rval_ref_type_29($2 + 24 | 0, operator_20new_28unsigned_20long_29(705656), std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20_____allocator_destructor_28std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20___2c_20unsigned_20long_29($2 + 16 | 0, $1, 1));
  $3 = HEAP32[$1 >> 2];
  HEAP32[16874] = 0;
  __invoke_i1___22class_std____2__basic_ifstream_22_(955, $3 | 0) | 0;
  $3 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($3 | 0) != 1) {
   $0 = std____2__shared_ptr_maxiOsc___shared_ptr_28_29($0);
   HEAP32[$0 >> 2] = std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___get_28_29(HEAP32[$1 >> 2]);
   HEAP32[$0 + 4 >> 2] = std____2__unique_ptr__IO_FILE_2c_20int_20_28__29_28_IO_FILE__29___release_28_29($1);
   $0 = HEAP32[$0 >> 2];
   HEAP32[$2 + 4 >> 2] = $0;
   HEAP32[$2 >> 2] = $0;
   std____2__unique_ptr_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20___reset_28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___29($1);
   $0 = $2 + 48 | 0;
   if ($0 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $0;
   return;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__unique_ptr_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20___reset_28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___29($1);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____shared_ptr_emplace_maxiDelayline_2c_20std____2__allocator_maxiDelayline__20_____shared_ptr_emplace_28std____2__allocator_maxiDelayline__29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  std____2____shared_weak_count____shared_weak_count_28long_29($0);
  HEAP32[$0 >> 2] = 7992;
  HEAP32[16874] = 0;
  std____2____compressed_pair_std____2__allocator_maxiDelayline__2c_20maxiDelayline_____compressed_pair_std____2__allocator_maxiDelayline__2c_20true__28std____2__allocator_maxiDelayline____29($0 + 16 | 0, $1 + 8 | 0);
  $2 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($2 | 0) != 1) {
   $1 = $1 + 16 | 0;
   if ($1 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $1;
   return $0 | 0;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____compressed_pair_std____2__allocator_maxiDelayline__2c_20maxiDelayline_____compressed_pair_std____2__allocator_maxiDelayline__2c_20true__28std____2__allocator_maxiDelayline____29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  maxiDelayline__maxiDelayline_28_29($0);
  return $0 | 0;
 }
 
 function emscripten__internal__MethodInvoker_double_20_28maxiDelayline____29_28double_2c_20int_2c_20double_29_2c_20double_2c_20maxiDelayline__2c_20double_2c_20int_2c_20double___invoke_28double_20_28maxiDelayline____20const__29_28double_2c_20int_2c_20double_29_2c_20maxiDelayline__2c_20double_2c_20int_2c_20double_29($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = +$2;
  $3 = $3 | 0;
  $4 = +$4;
  var $5 = 0, $6 = 0;
  $6 = global$0 - 16 | 0;
  $5 = $6;
  if ($6 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $5;
  $5 = $1;
  $1 = HEAP32[$0 + 4 >> 2];
  $5 = $5 + ($1 >> 1) | 0;
  $0 = HEAP32[$0 >> 2];
  HEAPF64[$6 + 8 >> 3] = FUNCTION_TABLE[$1 & 1 ? HEAP32[$0 + HEAP32[$5 >> 2] >> 2] : $0]($5, $2, $3, $4);
  $2 = HEAPF64[$6 + 8 >> 3];
  $0 = $6 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
  return +$2;
 }
 
 function emscripten__internal__MethodInvoker_double_20_28maxiDelayline____29_28double_2c_20int_2c_20double_2c_20int_29_2c_20double_2c_20maxiDelayline__2c_20double_2c_20int_2c_20double_2c_20int___invoke_28double_20_28maxiDelayline____20const__29_28double_2c_20int_2c_20double_2c_20int_29_2c_20maxiDelayline__2c_20double_2c_20int_2c_20double_2c_20int_29($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = +$2;
  $3 = $3 | 0;
  $4 = +$4;
  $5 = $5 | 0;
  var $6 = 0, $7 = 0;
  $7 = global$0 - 16 | 0;
  $6 = $7;
  if ($7 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $6;
  $6 = $1;
  $1 = HEAP32[$0 + 4 >> 2];
  $6 = $6 + ($1 >> 1) | 0;
  $0 = HEAP32[$0 >> 2];
  HEAPF64[$7 + 8 >> 3] = FUNCTION_TABLE[$1 & 1 ? HEAP32[$0 + HEAP32[$6 >> 2] >> 2] : $0]($6, $2, $3, $4, $5);
  $2 = HEAPF64[$7 + 8 >> 3];
  $0 = $7 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
  return +$2;
 }
 
 function std____2__shared_ptr_maxiFilter___shared_ptr_maxiFilter_2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiFilter__20___val_deleter__28maxiFilter__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiFilter__20___val_deleter_2c_20std____2__enable_if_is_convertible_maxiFilter__2c_20maxiFilter____value_2c_20std____2__shared_ptr_maxiFilter_____nat___type_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0;
  $3 = global$0 - 32 | 0;
  $4 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  HEAP32[$0 >> 2] = $1;
  HEAP32[16874] = 0;
  $4 = __invoke_i1___22class_std____2__basic_ifstream_22_(930, 20) | 0;
  $5 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      if (($5 | 0) != 1) {
       HEAP32[16874] = 0;
       $5 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(958, $3 + 24 | 0, $2 | 0) | 0;
       $6 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($6 | 0) == 1) {
        break label$5
       }
       HEAP32[16874] = 0;
       __invoke___22class_std____2__basic_istream_22____22class_std____2__basic_istream_22__i8__i32(959, $4 | 0, $1 | 0, $5 | 0) | 0;
       $6 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($6 | 0) == 1) {
        break label$4
       }
       HEAP32[$0 + 4 >> 2] = $4;
       emscripten__val___val_28_29($5);
       HEAP32[$3 + 4 >> 2] = $1;
       HEAP32[$3 >> 2] = $1;
       $1 = $3 + 32 | 0;
       if ($1 >>> 0 < global$2 >>> 0) {
        __handle_stack_overflow()
       }
       global$0 = $1;
       return $0 | 0;
      }
      $3 = __cxa_find_matching_catch_3(0) | 0;
      getTempRet0() | 0;
      break label$2;
     }
     $3 = __cxa_find_matching_catch_3(0) | 0;
     getTempRet0() | 0;
     break label$3;
    }
    $3 = __cxa_find_matching_catch_3(0) | 0;
    getTempRet0() | 0;
    emscripten__val___val_28_29($5);
   }
   dlfree($4);
  }
  __cxa_begin_catch($3 | 0) | 0;
  HEAP32[16874] = 0;
  __invoke_void___22class_std____2__vector_13_22__i32(960, $2 | 0, $1 | 0);
  $0 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$8 : {
   label$9 : {
    if (($0 | 0) != 1) {
     HEAP32[16874] = 0;
     __invoke_void(934);
     $0 = HEAP32[16874];
     HEAP32[16874] = 0;
     if (($0 | 0) != 1) {
      break label$9
     }
    }
    $0 = __cxa_find_matching_catch_2() | 0;
    getTempRet0() | 0;
    HEAP32[16874] = 0;
    __invoke_void(23);
    $1 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($1 | 0) != 1) {
     break label$8
    }
    $0 = __cxa_find_matching_catch_3(0) | 0;
    getTempRet0() | 0;
    __clang_call_terminate($0);
   }
   abort();
  }
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____shared_ptr_pointer_maxiFilter__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiFilter__20___val_deleter_2c_20std____2__allocator_maxiFilter__20_____shared_ptr_pointer_28maxiFilter__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiFilter__20___val_deleter_2c_20std____2__allocator_maxiFilter__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0;
  $3 = global$0 - 32 | 0;
  $4 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  HEAP32[$3 + 20 >> 2] = $1;
  std____2____shared_weak_count____shared_weak_count_28long_29($0);
  HEAP32[$0 >> 2] = 8256;
  HEAP32[16874] = 0;
  $1 = std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_____compressed_pair_maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__28maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter___29($3 + 8 | 0, $3 + 20 | 0, $2);
  $2 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    if (($2 | 0) != 1) {
     HEAP32[16874] = 0;
     std____2____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20_____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20__28std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter____2c_20std____2__allocator_maxiOsc____29($0 + 12 | 0, $1, $3 + 24 | 0);
     $2 = HEAP32[16874];
     HEAP32[16874] = 0;
     if (($2 | 0) == 1) {
      break label$3
     }
     std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter______compressed_pair_28_29($1);
     $1 = $3 + 32 | 0;
     if ($1 >>> 0 < global$2 >>> 0) {
      __handle_stack_overflow()
     }
     global$0 = $1;
     return $0 | 0;
    }
    $0 = __cxa_find_matching_catch_2() | 0;
    getTempRet0() | 0;
    break label$2;
   }
   $0 = __cxa_find_matching_catch_2() | 0;
   getTempRet0() | 0;
   std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter______compressed_pair_28_29($1);
  }
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____shared_ptr_pointer_maxiFilter__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiFilter__20___val_deleter_2c_20std____2__allocator_maxiFilter__20______shared_ptr_pointer_28_29($0) {
  $0 = $0 | 0;
  HEAP32[$0 >> 2] = 8256;
  std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter______compressed_pair_28_29($0 + 12 | 0);
  return $0 | 0;
 }
 
 function std____2____shared_ptr_pointer_maxiFilter__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiFilter__20___val_deleter_2c_20std____2__allocator_maxiFilter__20______shared_ptr_pointer_28_29_1($0) {
  $0 = $0 | 0;
  dlfree(std____2____shared_ptr_pointer_maxiFilter__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiFilter__20___val_deleter_2c_20std____2__allocator_maxiFilter__20______shared_ptr_pointer_28_29($0));
 }
 
 function std____2____shared_ptr_pointer_maxiFilter__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiFilter__20___val_deleter_2c_20std____2__allocator_maxiFilter__20_____on_zero_shared_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $0 = $0 + 12 | 0;
  $1 = std____2____compressed_pair__IO_FILE__2c_20int_20_28__29_28_IO_FILE__29___second_28_29($0);
  $2 = HEAP32[$0 >> 2];
  HEAP32[16874] = 0;
  __invoke_void___22class_std____2__vector_13_22__i32(960, $1 | 0, $2 | 0);
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($1 | 0) != 1) {
   emscripten__val___val_28_29(std____2____compressed_pair__IO_FILE__2c_20int_20_28__29_28_IO_FILE__29___second_28_29($0));
   return;
  }
  $0 = __cxa_find_matching_catch_3(0) | 0;
  getTempRet0() | 0;
  __clang_call_terminate($0);
  abort();
 }
 
 function std____2____shared_ptr_pointer_maxiFilter__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiFilter__20___val_deleter_2c_20std____2__allocator_maxiFilter__20_____get_deleter_28std__type_info_20const__29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  if (std__type_info__operator___28std__type_info_20const__29_20const($1, 8504)) {
   $0 = std____2____compressed_pair__IO_FILE__2c_20int_20_28__29_28_IO_FILE__29___second_28_29($0 + 12 | 0)
  } else {
   $0 = 0
  }
  return $0 | 0;
 }
 
 function std____2__shared_ptr_maxiFilter__20std____2__shared_ptr_maxiFilter___make_shared___28_29($0) {
  var $1 = 0, $2 = 0, $3 = 0;
  $2 = global$0 - 48 | 0;
  $1 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  $1 = $2 + 40 | 0;
  $1 = std____2__unique_ptr_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20___unique_ptr_true_2c_20void__28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20__2c_20true_____good_rval_ref_type_29($2 + 24 | 0, operator_20new_28unsigned_20long_29(256), std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20_____allocator_destructor_28std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20___2c_20unsigned_20long_29($2 + 16 | 0, $1, 1));
  $3 = HEAP32[$1 >> 2];
  HEAP32[16874] = 0;
  __invoke_i1___22class_std____2__basic_ifstream_22_(963, $3 | 0) | 0;
  $3 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($3 | 0) != 1) {
   $0 = std____2__shared_ptr_maxiOsc___shared_ptr_28_29($0);
   HEAP32[$0 >> 2] = std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___get_28_29(HEAP32[$1 >> 2]);
   HEAP32[$0 + 4 >> 2] = std____2__unique_ptr__IO_FILE_2c_20int_20_28__29_28_IO_FILE__29___release_28_29($1);
   $0 = HEAP32[$0 >> 2];
   HEAP32[$2 + 4 >> 2] = $0;
   HEAP32[$2 >> 2] = $0;
   std____2__unique_ptr_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20___reset_28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___29($1);
   $0 = $2 + 48 | 0;
   if ($0 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $0;
   return;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__unique_ptr_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20___reset_28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___29($1);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____shared_ptr_emplace_maxiFilter_2c_20std____2__allocator_maxiFilter__20_____shared_ptr_emplace_28std____2__allocator_maxiFilter__29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  std____2____shared_weak_count____shared_weak_count_28long_29($0);
  HEAP32[$0 >> 2] = 8568;
  HEAP32[16874] = 0;
  std____2____compressed_pair_std____2__allocator_maxiFilter__2c_20maxiFilter_____compressed_pair_std____2__allocator_maxiFilter__2c_20true__28std____2__allocator_maxiFilter____29($0 + 16 | 0, $1 + 8 | 0);
  $2 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($2 | 0) != 1) {
   $1 = $1 + 16 | 0;
   if ($1 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $1;
   return $0 | 0;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____compressed_pair_std____2__allocator_maxiFilter__2c_20maxiFilter_____compressed_pair_std____2__allocator_maxiFilter__2c_20true__28std____2__allocator_maxiFilter____29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  maxiFilter__maxiFilter_28_29($0);
  return $0 | 0;
 }
 
 function maxiFilter__maxiFilter_28_29($0) {
  HEAP32[$0 + 192 >> 2] = 0;
  HEAP32[$0 + 196 >> 2] = 0;
  HEAP32[$0 + 216 >> 2] = 0;
  HEAP32[$0 + 220 >> 2] = 0;
  HEAP32[$0 + 208 >> 2] = 0;
  HEAP32[$0 + 212 >> 2] = 0;
  HEAP32[$0 + 200 >> 2] = 0;
  HEAP32[$0 + 204 >> 2] = 0;
  return $0;
 }
 
 function std____2__shared_ptr_maxiMix___shared_ptr_maxiMix_2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiMix__20___val_deleter__28maxiMix__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiMix__20___val_deleter_2c_20std____2__enable_if_is_convertible_maxiMix__2c_20maxiMix____value_2c_20std____2__shared_ptr_maxiMix_____nat___type_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0;
  $3 = global$0 - 32 | 0;
  $4 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  HEAP32[$0 >> 2] = $1;
  HEAP32[16874] = 0;
  $4 = __invoke_i1___22class_std____2__basic_ifstream_22_(930, 20) | 0;
  $5 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      if (($5 | 0) != 1) {
       HEAP32[16874] = 0;
       $5 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(966, $3 + 24 | 0, $2 | 0) | 0;
       $6 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($6 | 0) == 1) {
        break label$5
       }
       HEAP32[16874] = 0;
       __invoke___22class_std____2__basic_istream_22____22class_std____2__basic_istream_22__i8__i32(967, $4 | 0, $1 | 0, $5 | 0) | 0;
       $6 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($6 | 0) == 1) {
        break label$4
       }
       HEAP32[$0 + 4 >> 2] = $4;
       emscripten__val___val_28_29($5);
       HEAP32[$3 + 4 >> 2] = $1;
       HEAP32[$3 >> 2] = $1;
       $1 = $3 + 32 | 0;
       if ($1 >>> 0 < global$2 >>> 0) {
        __handle_stack_overflow()
       }
       global$0 = $1;
       return $0 | 0;
      }
      $3 = __cxa_find_matching_catch_3(0) | 0;
      getTempRet0() | 0;
      break label$2;
     }
     $3 = __cxa_find_matching_catch_3(0) | 0;
     getTempRet0() | 0;
     break label$3;
    }
    $3 = __cxa_find_matching_catch_3(0) | 0;
    getTempRet0() | 0;
    emscripten__val___val_28_29($5);
   }
   dlfree($4);
  }
  __cxa_begin_catch($3 | 0) | 0;
  HEAP32[16874] = 0;
  __invoke_void___22class_std____2__vector_13_22__i32(968, $2 | 0, $1 | 0);
  $0 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$8 : {
   label$9 : {
    if (($0 | 0) != 1) {
     HEAP32[16874] = 0;
     __invoke_void(934);
     $0 = HEAP32[16874];
     HEAP32[16874] = 0;
     if (($0 | 0) != 1) {
      break label$9
     }
    }
    $0 = __cxa_find_matching_catch_2() | 0;
    getTempRet0() | 0;
    HEAP32[16874] = 0;
    __invoke_void(23);
    $1 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($1 | 0) != 1) {
     break label$8
    }
    $0 = __cxa_find_matching_catch_3(0) | 0;
    getTempRet0() | 0;
    __clang_call_terminate($0);
   }
   abort();
  }
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____shared_ptr_pointer_maxiMix__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiMix__20___val_deleter_2c_20std____2__allocator_maxiMix__20_____shared_ptr_pointer_28maxiMix__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiMix__20___val_deleter_2c_20std____2__allocator_maxiMix__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0;
  $3 = global$0 - 32 | 0;
  $4 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  HEAP32[$3 + 20 >> 2] = $1;
  std____2____shared_weak_count____shared_weak_count_28long_29($0);
  HEAP32[$0 >> 2] = 8804;
  HEAP32[16874] = 0;
  $1 = std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_____compressed_pair_maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__28maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter___29($3 + 8 | 0, $3 + 20 | 0, $2);
  $2 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    if (($2 | 0) != 1) {
     HEAP32[16874] = 0;
     std____2____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20_____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20__28std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter____2c_20std____2__allocator_maxiOsc____29($0 + 12 | 0, $1, $3 + 24 | 0);
     $2 = HEAP32[16874];
     HEAP32[16874] = 0;
     if (($2 | 0) == 1) {
      break label$3
     }
     std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter______compressed_pair_28_29($1);
     $1 = $3 + 32 | 0;
     if ($1 >>> 0 < global$2 >>> 0) {
      __handle_stack_overflow()
     }
     global$0 = $1;
     return $0 | 0;
    }
    $0 = __cxa_find_matching_catch_2() | 0;
    getTempRet0() | 0;
    break label$2;
   }
   $0 = __cxa_find_matching_catch_2() | 0;
   getTempRet0() | 0;
   std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter______compressed_pair_28_29($1);
  }
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____shared_ptr_pointer_maxiMix__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiMix__20___val_deleter_2c_20std____2__allocator_maxiMix__20______shared_ptr_pointer_28_29($0) {
  $0 = $0 | 0;
  HEAP32[$0 >> 2] = 8804;
  std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter______compressed_pair_28_29($0 + 12 | 0);
  return $0 | 0;
 }
 
 function std____2____shared_ptr_pointer_maxiMix__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiMix__20___val_deleter_2c_20std____2__allocator_maxiMix__20______shared_ptr_pointer_28_29_1($0) {
  $0 = $0 | 0;
  dlfree(std____2____shared_ptr_pointer_maxiMix__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiMix__20___val_deleter_2c_20std____2__allocator_maxiMix__20______shared_ptr_pointer_28_29($0));
 }
 
 function std____2____shared_ptr_pointer_maxiMix__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiMix__20___val_deleter_2c_20std____2__allocator_maxiMix__20_____on_zero_shared_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $0 = $0 + 12 | 0;
  $1 = std____2____compressed_pair__IO_FILE__2c_20int_20_28__29_28_IO_FILE__29___second_28_29($0);
  $2 = HEAP32[$0 >> 2];
  HEAP32[16874] = 0;
  __invoke_void___22class_std____2__vector_13_22__i32(968, $1 | 0, $2 | 0);
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($1 | 0) != 1) {
   emscripten__val___val_28_29(std____2____compressed_pair__IO_FILE__2c_20int_20_28__29_28_IO_FILE__29___second_28_29($0));
   return;
  }
  $0 = __cxa_find_matching_catch_3(0) | 0;
  getTempRet0() | 0;
  __clang_call_terminate($0);
  abort();
 }
 
 function std____2____shared_ptr_pointer_maxiMix__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiMix__20___val_deleter_2c_20std____2__allocator_maxiMix__20_____get_deleter_28std__type_info_20const__29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  if (std__type_info__operator___28std__type_info_20const__29_20const($1, 9044)) {
   $0 = std____2____compressed_pair__IO_FILE__2c_20int_20_28__29_28_IO_FILE__29___second_28_29($0 + 12 | 0)
  } else {
   $0 = 0
  }
  return $0 | 0;
 }
 
 function std____2__shared_ptr_maxiMix__20std____2__shared_ptr_maxiMix___make_shared___28_29($0) {
  var $1 = 0, $2 = 0, $3 = 0;
  $2 = global$0 - 48 | 0;
  $1 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  $1 = $2 + 40 | 0;
  $1 = std____2__unique_ptr_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20___unique_ptr_true_2c_20void__28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20__2c_20true_____good_rval_ref_type_29($2 + 24 | 0, operator_20new_28unsigned_20long_29(136), std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20_____allocator_destructor_28std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20___2c_20unsigned_20long_29($2 + 16 | 0, $1, 1));
  $3 = HEAP32[$1 >> 2];
  HEAP32[16874] = 0;
  __invoke_i1___22class_std____2__basic_ifstream_22_(971, $3 | 0) | 0;
  $3 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($3 | 0) != 1) {
   $0 = std____2__shared_ptr_maxiOsc___shared_ptr_28_29($0);
   HEAP32[$0 >> 2] = std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___get_28_29(HEAP32[$1 >> 2]);
   HEAP32[$0 + 4 >> 2] = std____2__unique_ptr__IO_FILE_2c_20int_20_28__29_28_IO_FILE__29___release_28_29($1);
   $0 = HEAP32[$0 >> 2];
   HEAP32[$2 + 4 >> 2] = $0;
   HEAP32[$2 >> 2] = $0;
   std____2__unique_ptr_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20___reset_28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___29($1);
   $0 = $2 + 48 | 0;
   if ($0 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $0;
   return;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__unique_ptr_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20___reset_28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___29($1);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____shared_ptr_emplace_maxiMix_2c_20std____2__allocator_maxiMix__20_____shared_ptr_emplace_28std____2__allocator_maxiMix__29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  std____2____shared_weak_count____shared_weak_count_28long_29($0);
  HEAP32[$0 >> 2] = 9104;
  HEAP32[16874] = 0;
  std____2____compressed_pair_std____2__allocator_maxiMix__2c_20maxiMix_____compressed_pair_std____2__allocator_maxiMix__2c_20true__28std____2__allocator_maxiMix____29($0 + 16 | 0, $1 + 8 | 0);
  $2 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($2 | 0) != 1) {
   $1 = $1 + 16 | 0;
   if ($1 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $1;
   return $0 | 0;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____compressed_pair_std____2__allocator_maxiMix__2c_20maxiMix_____compressed_pair_std____2__allocator_maxiMix__2c_20true__28std____2__allocator_maxiMix____29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  memset($0, 0, 120);
  return $0 | 0;
 }
 
 function emscripten__internal__MethodInvoker_void_20_28maxiMix____29_28double_2c_20std____2__vector_double_2c_20std____2__allocator_double__20___2c_20double_29_2c_20void_2c_20maxiMix__2c_20double_2c_20std____2__vector_double_2c_20std____2__allocator_double__20___2c_20double___invoke_28void_20_28maxiMix____20const__29_28double_2c_20std____2__vector_double_2c_20std____2__allocator_double__20___2c_20double_29_2c_20maxiMix__2c_20double_2c_20std____2__vector_double_2c_20std____2__allocator_double__20___2c_20double_29($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = +$2;
  $3 = $3 | 0;
  $4 = +$4;
  var $5 = 0;
  $5 = $1;
  $1 = HEAP32[$0 + 4 >> 2];
  $5 = $5 + ($1 >> 1) | 0;
  $0 = HEAP32[$0 >> 2];
  FUNCTION_TABLE[$1 & 1 ? HEAP32[$0 + HEAP32[$5 >> 2] >> 2] : $0]($5, $2, $3, $4);
 }
 
 function emscripten__internal__MethodInvoker_void_20_28maxiMix____29_28double_2c_20std____2__vector_double_2c_20std____2__allocator_double__20___2c_20double_2c_20double_29_2c_20void_2c_20maxiMix__2c_20double_2c_20std____2__vector_double_2c_20std____2__allocator_double__20___2c_20double_2c_20double___invoke_28void_20_28maxiMix____20const__29_28double_2c_20std____2__vector_double_2c_20std____2__allocator_double__20___2c_20double_2c_20double_29_2c_20maxiMix__2c_20double_2c_20std____2__vector_double_2c_20std____2__allocator_double__20___2c_20double_2c_20double_29($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = +$2;
  $3 = $3 | 0;
  $4 = +$4;
  $5 = +$5;
  var $6 = 0;
  $6 = $1;
  $1 = HEAP32[$0 + 4 >> 2];
  $6 = $6 + ($1 >> 1) | 0;
  $0 = HEAP32[$0 >> 2];
  FUNCTION_TABLE[$1 & 1 ? HEAP32[$0 + HEAP32[$6 >> 2] >> 2] : $0]($6, $2, $3, $4, $5);
 }
 
 function emscripten__internal__MethodInvoker_void_20_28maxiMix____29_28double_2c_20std____2__vector_double_2c_20std____2__allocator_double__20___2c_20double_2c_20double_2c_20double_29_2c_20void_2c_20maxiMix__2c_20double_2c_20std____2__vector_double_2c_20std____2__allocator_double__20___2c_20double_2c_20double_2c_20double___invoke_28void_20_28maxiMix____20const__29_28double_2c_20std____2__vector_double_2c_20std____2__allocator_double__20___2c_20double_2c_20double_2c_20double_29_2c_20maxiMix__2c_20double_2c_20std____2__vector_double_2c_20std____2__allocator_double__20___2c_20double_2c_20double_2c_20double_29($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = +$2;
  $3 = $3 | 0;
  $4 = +$4;
  $5 = +$5;
  $6 = +$6;
  var $7 = 0;
  $7 = $1;
  $1 = HEAP32[$0 + 4 >> 2];
  $7 = $7 + ($1 >> 1) | 0;
  $0 = HEAP32[$0 >> 2];
  FUNCTION_TABLE[$1 & 1 ? HEAP32[$0 + HEAP32[$7 >> 2] >> 2] : $0]($7, $2, $3, $4, $5, $6);
 }
 
 function std____2__shared_ptr_maxiLine___shared_ptr_maxiLine_2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiLine__20___val_deleter__28maxiLine__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiLine__20___val_deleter_2c_20std____2__enable_if_is_convertible_maxiLine__2c_20maxiLine____value_2c_20std____2__shared_ptr_maxiLine_____nat___type_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0;
  $3 = global$0 - 32 | 0;
  $4 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  HEAP32[$0 >> 2] = $1;
  HEAP32[16874] = 0;
  $4 = __invoke_i1___22class_std____2__basic_ifstream_22_(930, 20) | 0;
  $5 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      if (($5 | 0) != 1) {
       HEAP32[16874] = 0;
       $5 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(974, $3 + 24 | 0, $2 | 0) | 0;
       $6 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($6 | 0) == 1) {
        break label$5
       }
       HEAP32[16874] = 0;
       __invoke___22class_std____2__basic_istream_22____22class_std____2__basic_istream_22__i8__i32(975, $4 | 0, $1 | 0, $5 | 0) | 0;
       $6 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($6 | 0) == 1) {
        break label$4
       }
       HEAP32[$0 + 4 >> 2] = $4;
       emscripten__val___val_28_29($5);
       HEAP32[$3 + 4 >> 2] = $1;
       HEAP32[$3 >> 2] = $1;
       $1 = $3 + 32 | 0;
       if ($1 >>> 0 < global$2 >>> 0) {
        __handle_stack_overflow()
       }
       global$0 = $1;
       return $0 | 0;
      }
      $3 = __cxa_find_matching_catch_3(0) | 0;
      getTempRet0() | 0;
      break label$2;
     }
     $3 = __cxa_find_matching_catch_3(0) | 0;
     getTempRet0() | 0;
     break label$3;
    }
    $3 = __cxa_find_matching_catch_3(0) | 0;
    getTempRet0() | 0;
    emscripten__val___val_28_29($5);
   }
   dlfree($4);
  }
  __cxa_begin_catch($3 | 0) | 0;
  HEAP32[16874] = 0;
  __invoke_void___22class_std____2__vector_13_22__i32(976, $2 | 0, $1 | 0);
  $0 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$8 : {
   label$9 : {
    if (($0 | 0) != 1) {
     HEAP32[16874] = 0;
     __invoke_void(934);
     $0 = HEAP32[16874];
     HEAP32[16874] = 0;
     if (($0 | 0) != 1) {
      break label$9
     }
    }
    $0 = __cxa_find_matching_catch_2() | 0;
    getTempRet0() | 0;
    HEAP32[16874] = 0;
    __invoke_void(23);
    $1 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($1 | 0) != 1) {
     break label$8
    }
    $0 = __cxa_find_matching_catch_3(0) | 0;
    getTempRet0() | 0;
    __clang_call_terminate($0);
   }
   abort();
  }
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____shared_ptr_pointer_maxiLine__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiLine__20___val_deleter_2c_20std____2__allocator_maxiLine__20_____shared_ptr_pointer_28maxiLine__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiLine__20___val_deleter_2c_20std____2__allocator_maxiLine__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0;
  $3 = global$0 - 32 | 0;
  $4 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  HEAP32[$3 + 20 >> 2] = $1;
  std____2____shared_weak_count____shared_weak_count_28long_29($0);
  HEAP32[$0 >> 2] = 9384;
  HEAP32[16874] = 0;
  $1 = std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_____compressed_pair_maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__28maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter___29($3 + 8 | 0, $3 + 20 | 0, $2);
  $2 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    if (($2 | 0) != 1) {
     HEAP32[16874] = 0;
     std____2____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20_____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20__28std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter____2c_20std____2__allocator_maxiOsc____29($0 + 12 | 0, $1, $3 + 24 | 0);
     $2 = HEAP32[16874];
     HEAP32[16874] = 0;
     if (($2 | 0) == 1) {
      break label$3
     }
     std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter______compressed_pair_28_29($1);
     $1 = $3 + 32 | 0;
     if ($1 >>> 0 < global$2 >>> 0) {
      __handle_stack_overflow()
     }
     global$0 = $1;
     return $0 | 0;
    }
    $0 = __cxa_find_matching_catch_2() | 0;
    getTempRet0() | 0;
    break label$2;
   }
   $0 = __cxa_find_matching_catch_2() | 0;
   getTempRet0() | 0;
   std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter______compressed_pair_28_29($1);
  }
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____shared_ptr_pointer_maxiLine__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiLine__20___val_deleter_2c_20std____2__allocator_maxiLine__20______shared_ptr_pointer_28_29($0) {
  $0 = $0 | 0;
  HEAP32[$0 >> 2] = 9384;
  std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter______compressed_pair_28_29($0 + 12 | 0);
  return $0 | 0;
 }
 
 function std____2____shared_ptr_pointer_maxiLine__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiLine__20___val_deleter_2c_20std____2__allocator_maxiLine__20______shared_ptr_pointer_28_29_1($0) {
  $0 = $0 | 0;
  dlfree(std____2____shared_ptr_pointer_maxiLine__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiLine__20___val_deleter_2c_20std____2__allocator_maxiLine__20______shared_ptr_pointer_28_29($0));
 }
 
 function std____2____shared_ptr_pointer_maxiLine__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiLine__20___val_deleter_2c_20std____2__allocator_maxiLine__20_____on_zero_shared_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $0 = $0 + 12 | 0;
  $1 = std____2____compressed_pair__IO_FILE__2c_20int_20_28__29_28_IO_FILE__29___second_28_29($0);
  $2 = HEAP32[$0 >> 2];
  HEAP32[16874] = 0;
  __invoke_void___22class_std____2__vector_13_22__i32(976, $1 | 0, $2 | 0);
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($1 | 0) != 1) {
   emscripten__val___val_28_29(std____2____compressed_pair__IO_FILE__2c_20int_20_28__29_28_IO_FILE__29___second_28_29($0));
   return;
  }
  $0 = __cxa_find_matching_catch_3(0) | 0;
  getTempRet0() | 0;
  __clang_call_terminate($0);
  abort();
 }
 
 function std____2____shared_ptr_pointer_maxiLine__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiLine__20___val_deleter_2c_20std____2__allocator_maxiLine__20_____get_deleter_28std__type_info_20const__29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  if (std__type_info__operator___28std__type_info_20const__29_20const($1, 9628)) {
   $0 = std____2____compressed_pair__IO_FILE__2c_20int_20_28__29_28_IO_FILE__29___second_28_29($0 + 12 | 0)
  } else {
   $0 = 0
  }
  return $0 | 0;
 }
 
 function std____2__shared_ptr_maxiLine__20std____2__shared_ptr_maxiLine___make_shared___28_29($0) {
  var $1 = 0, $2 = 0, $3 = 0;
  $2 = global$0 - 48 | 0;
  $1 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  $1 = $2 + 40 | 0;
  $1 = std____2__unique_ptr_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20___unique_ptr_true_2c_20void__28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20__2c_20true_____good_rval_ref_type_29($2 + 24 | 0, operator_20new_28unsigned_20long_29(96), std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20_____allocator_destructor_28std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20___2c_20unsigned_20long_29($2 + 16 | 0, $1, 1));
  $3 = HEAP32[$1 >> 2];
  HEAP32[16874] = 0;
  __invoke_i1___22class_std____2__basic_ifstream_22_(979, $3 | 0) | 0;
  $3 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($3 | 0) != 1) {
   $0 = std____2__shared_ptr_maxiOsc___shared_ptr_28_29($0);
   HEAP32[$0 >> 2] = std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___get_28_29(HEAP32[$1 >> 2]);
   HEAP32[$0 + 4 >> 2] = std____2__unique_ptr__IO_FILE_2c_20int_20_28__29_28_IO_FILE__29___release_28_29($1);
   $0 = HEAP32[$0 >> 2];
   HEAP32[$2 + 4 >> 2] = $0;
   HEAP32[$2 >> 2] = $0;
   std____2__unique_ptr_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20___reset_28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___29($1);
   $0 = $2 + 48 | 0;
   if ($0 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $0;
   return;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__unique_ptr_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20___reset_28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___29($1);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____shared_ptr_emplace_maxiLine_2c_20std____2__allocator_maxiLine__20_____shared_ptr_emplace_28std____2__allocator_maxiLine__29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  std____2____shared_weak_count____shared_weak_count_28long_29($0);
  HEAP32[$0 >> 2] = 9688;
  HEAP32[16874] = 0;
  std____2____compressed_pair_std____2__allocator_maxiLine__2c_20maxiLine_____compressed_pair_std____2__allocator_maxiLine__2c_20true__28std____2__allocator_maxiLine____29($0 + 16 | 0, $1 + 8 | 0);
  $2 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($2 | 0) != 1) {
   $1 = $1 + 16 | 0;
   if ($1 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $1;
   return $0 | 0;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____compressed_pair_std____2__allocator_maxiLine__2c_20maxiLine_____compressed_pair_std____2__allocator_maxiLine__2c_20true__28std____2__allocator_maxiLine____29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  maxiLine__maxiLine_28_29(memset($0, 0, 80));
  return $0 | 0;
 }
 
 function maxiLine__maxiLine_28_29($0) {
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$0 + 32 >> 2] = 0;
  HEAP32[$0 + 36 >> 2] = 0;
  HEAP32[$0 + 24 >> 2] = 0;
  HEAP32[$0 + 28 >> 2] = -1074790400;
  HEAP32[$0 + 56 >> 2] = 0;
  HEAP32[$0 + 60 >> 2] = 0;
  HEAP8[$0 + 72 | 0] = 1;
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP32[$0 + 20 >> 2] = 0;
  HEAP32[$0 + 8 >> 2] = 0;
  HEAP32[$0 + 12 >> 2] = 0;
  HEAP32[$0 + 40 >> 2] = 0;
  HEAP32[$0 + 44 >> 2] = 0;
  HEAP8[$0 + 48 | 0] = 0;
  $0 = $0 - -64 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
 }
 
 function emscripten__internal__MethodInvoker_void_20_28maxiLine____29_28double_2c_20double_2c_20double_2c_20bool_29_2c_20void_2c_20maxiLine__2c_20double_2c_20double_2c_20double_2c_20bool___invoke_28void_20_28maxiLine____20const__29_28double_2c_20double_2c_20double_2c_20bool_29_2c_20maxiLine__2c_20double_2c_20double_2c_20double_2c_20bool_29($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = +$2;
  $3 = +$3;
  $4 = +$4;
  $5 = $5 | 0;
  var $6 = 0;
  $6 = $1;
  $1 = HEAP32[$0 + 4 >> 2];
  $6 = $6 + ($1 >> 1) | 0;
  $0 = HEAP32[$0 >> 2];
  FUNCTION_TABLE[$1 & 1 ? HEAP32[$0 + HEAP32[$6 >> 2] >> 2] : $0]($6, $2, $3, $4, $5);
 }
 
 function emscripten__internal__MethodInvoker_bool_20_28maxiLine____29_28_29_2c_20bool_2c_20maxiLine____invoke_28bool_20_28maxiLine____20const__29_28_29_2c_20maxiLine__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = $1;
  $1 = HEAP32[$0 >> 2];
  $0 = HEAP32[$0 + 4 >> 2];
  $2 = ($0 >> 1) + $2 | 0;
  return FUNCTION_TABLE[$0 & 1 ? HEAP32[$1 + HEAP32[$2 >> 2] >> 2] : $1]($2) | 0;
 }
 
 function emscripten__internal__GenericBindingType_std____2__vector_double_2c_20std____2__allocator_double__20__20___toWireType_28std____2__vector_double_2c_20std____2__allocator_double__20____29($0) {
  $0 = $0 | 0;
  return std____2__vector_double_2c_20std____2__allocator_double__20___vector_28std____2__vector_double_2c_20std____2__allocator_double__20____29(operator_20new_28unsigned_20long_29(12), $0) | 0;
 }
 
 function std____2__vector_double_2c_20std____2__allocator_double__20___vector_28std____2__vector_double_2c_20std____2__allocator_double__20____29($0, $1) {
  var $2 = 0, $3 = 0;
  $2 = std____2____vector_base_double_2c_20std____2__allocator_double__20_____vector_base_28std____2__allocator_double____29($0, std____2____vector_base_double_2c_20std____2__allocator_double__20_____alloc_28_29($1));
  HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
  $3 = HEAP32[std____2____vector_base_double_2c_20std____2__allocator_double__20_____alloc_28_29($1) >> 2];
  HEAP32[std____2____vector_base_double_2c_20std____2__allocator_double__20_____alloc_28_29($2) >> 2] = $3;
  HEAP32[std____2____vector_base_double_2c_20std____2__allocator_double__20_____alloc_28_29($1) >> 2] = 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  return $0;
 }
 
 function std____2__shared_ptr_maxiLagExp_double__20___shared_ptr_maxiLagExp_double__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiLagExp_double__20__20___val_deleter__28maxiLagExp_double___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiLagExp_double__20__20___val_deleter_2c_20std____2__enable_if_is_convertible_maxiLagExp_double___2c_20maxiLagExp_double_____value_2c_20std____2__shared_ptr_maxiLagExp_double__20_____nat___type_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0;
  $3 = global$0 - 32 | 0;
  $4 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  HEAP32[$0 >> 2] = $1;
  HEAP32[16874] = 0;
  $4 = __invoke_i1___22class_std____2__basic_ifstream_22_(930, 20) | 0;
  $5 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      if (($5 | 0) != 1) {
       HEAP32[16874] = 0;
       $5 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(982, $3 + 24 | 0, $2 | 0) | 0;
       $6 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($6 | 0) == 1) {
        break label$5
       }
       HEAP32[16874] = 0;
       __invoke___22class_std____2__basic_istream_22____22class_std____2__basic_istream_22__i8__i32(983, $4 | 0, $1 | 0, $5 | 0) | 0;
       $6 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($6 | 0) == 1) {
        break label$4
       }
       HEAP32[$0 + 4 >> 2] = $4;
       emscripten__val___val_28_29($5);
       HEAP32[$3 + 4 >> 2] = $1;
       HEAP32[$3 >> 2] = $1;
       $1 = $3 + 32 | 0;
       if ($1 >>> 0 < global$2 >>> 0) {
        __handle_stack_overflow()
       }
       global$0 = $1;
       return $0 | 0;
      }
      $3 = __cxa_find_matching_catch_3(0) | 0;
      getTempRet0() | 0;
      break label$2;
     }
     $3 = __cxa_find_matching_catch_3(0) | 0;
     getTempRet0() | 0;
     break label$3;
    }
    $3 = __cxa_find_matching_catch_3(0) | 0;
    getTempRet0() | 0;
    emscripten__val___val_28_29($5);
   }
   dlfree($4);
  }
  __cxa_begin_catch($3 | 0) | 0;
  HEAP32[16874] = 0;
  __invoke_void___22class_std____2__vector_13_22__i32(984, $2 | 0, $1 | 0);
  $0 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$8 : {
   label$9 : {
    if (($0 | 0) != 1) {
     HEAP32[16874] = 0;
     __invoke_void(934);
     $0 = HEAP32[16874];
     HEAP32[16874] = 0;
     if (($0 | 0) != 1) {
      break label$9
     }
    }
    $0 = __cxa_find_matching_catch_2() | 0;
    getTempRet0() | 0;
    HEAP32[16874] = 0;
    __invoke_void(23);
    $1 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($1 | 0) != 1) {
     break label$8
    }
    $0 = __cxa_find_matching_catch_3(0) | 0;
    getTempRet0() | 0;
    __clang_call_terminate($0);
   }
   abort();
  }
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____shared_ptr_pointer_maxiLagExp_double___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiLagExp_double__20__20___val_deleter_2c_20std____2__allocator_maxiLagExp_double__20__20_____shared_ptr_pointer_28maxiLagExp_double___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiLagExp_double__20__20___val_deleter_2c_20std____2__allocator_maxiLagExp_double__20__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0;
  $3 = global$0 - 32 | 0;
  $4 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  HEAP32[$3 + 20 >> 2] = $1;
  std____2____shared_weak_count____shared_weak_count_28long_29($0);
  HEAP32[$0 >> 2] = 10096;
  HEAP32[16874] = 0;
  $1 = std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_____compressed_pair_maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__28maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter___29($3 + 8 | 0, $3 + 20 | 0, $2);
  $2 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    if (($2 | 0) != 1) {
     HEAP32[16874] = 0;
     std____2____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20_____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20__28std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter____2c_20std____2__allocator_maxiOsc____29($0 + 12 | 0, $1, $3 + 24 | 0);
     $2 = HEAP32[16874];
     HEAP32[16874] = 0;
     if (($2 | 0) == 1) {
      break label$3
     }
     std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter______compressed_pair_28_29($1);
     $1 = $3 + 32 | 0;
     if ($1 >>> 0 < global$2 >>> 0) {
      __handle_stack_overflow()
     }
     global$0 = $1;
     return $0 | 0;
    }
    $0 = __cxa_find_matching_catch_2() | 0;
    getTempRet0() | 0;
    break label$2;
   }
   $0 = __cxa_find_matching_catch_2() | 0;
   getTempRet0() | 0;
   std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter______compressed_pair_28_29($1);
  }
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____shared_ptr_pointer_maxiLagExp_double___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiLagExp_double__20__20___val_deleter_2c_20std____2__allocator_maxiLagExp_double__20__20______shared_ptr_pointer_28_29($0) {
  $0 = $0 | 0;
  HEAP32[$0 >> 2] = 10096;
  std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter______compressed_pair_28_29($0 + 12 | 0);
  return $0 | 0;
 }
 
 function std____2____shared_ptr_pointer_maxiLagExp_double___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiLagExp_double__20__20___val_deleter_2c_20std____2__allocator_maxiLagExp_double__20__20______shared_ptr_pointer_28_29_1($0) {
  $0 = $0 | 0;
  dlfree(std____2____shared_ptr_pointer_maxiLagExp_double___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiLagExp_double__20__20___val_deleter_2c_20std____2__allocator_maxiLagExp_double__20__20______shared_ptr_pointer_28_29($0));
 }
 
 function std____2____shared_ptr_pointer_maxiLagExp_double___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiLagExp_double__20__20___val_deleter_2c_20std____2__allocator_maxiLagExp_double__20__20_____on_zero_shared_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $0 = $0 + 12 | 0;
  $1 = std____2____compressed_pair__IO_FILE__2c_20int_20_28__29_28_IO_FILE__29___second_28_29($0);
  $2 = HEAP32[$0 >> 2];
  HEAP32[16874] = 0;
  __invoke_void___22class_std____2__vector_13_22__i32(984, $1 | 0, $2 | 0);
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($1 | 0) != 1) {
   emscripten__val___val_28_29(std____2____compressed_pair__IO_FILE__2c_20int_20_28__29_28_IO_FILE__29___second_28_29($0));
   return;
  }
  $0 = __cxa_find_matching_catch_3(0) | 0;
  getTempRet0() | 0;
  __clang_call_terminate($0);
  abort();
 }
 
 function std____2____shared_ptr_pointer_maxiLagExp_double___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiLagExp_double__20__20___val_deleter_2c_20std____2__allocator_maxiLagExp_double__20__20_____get_deleter_28std__type_info_20const__29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  if (std__type_info__operator___28std__type_info_20const__29_20const($1, 10348)) {
   $0 = std____2____compressed_pair__IO_FILE__2c_20int_20_28__29_28_IO_FILE__29___second_28_29($0 + 12 | 0)
  } else {
   $0 = 0
  }
  return $0 | 0;
 }
 
 function std____2__shared_ptr_maxiLagExp_double__20__20std____2__shared_ptr_maxiLagExp_double__20___make_shared___28_29($0) {
  var $1 = 0, $2 = 0, $3 = 0;
  $2 = global$0 - 48 | 0;
  $1 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  $1 = $2 + 40 | 0;
  $1 = std____2__unique_ptr_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20___unique_ptr_true_2c_20void__28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20__2c_20true_____good_rval_ref_type_29($2 + 24 | 0, operator_20new_28unsigned_20long_29(40), std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20_____allocator_destructor_28std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20___2c_20unsigned_20long_29($2 + 16 | 0, $1, 1));
  $3 = HEAP32[$1 >> 2];
  HEAP32[16874] = 0;
  __invoke_i1___22class_std____2__basic_ifstream_22_(987, $3 | 0) | 0;
  $3 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($3 | 0) != 1) {
   $0 = std____2__shared_ptr_maxiOsc___shared_ptr_28_29($0);
   HEAP32[$0 >> 2] = std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___get_28_29(HEAP32[$1 >> 2]);
   HEAP32[$0 + 4 >> 2] = std____2__unique_ptr__IO_FILE_2c_20int_20_28__29_28_IO_FILE__29___release_28_29($1);
   $0 = HEAP32[$0 >> 2];
   HEAP32[$2 + 4 >> 2] = $0;
   HEAP32[$2 >> 2] = $0;
   std____2__unique_ptr_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20___reset_28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___29($1);
   $0 = $2 + 48 | 0;
   if ($0 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $0;
   return;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__unique_ptr_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20___reset_28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___29($1);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____shared_ptr_emplace_maxiLagExp_double__2c_20std____2__allocator_maxiLagExp_double__20__20_____shared_ptr_emplace_28std____2__allocator_maxiLagExp_double__20__29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  std____2____shared_weak_count____shared_weak_count_28long_29($0);
  HEAP32[$0 >> 2] = 10416;
  HEAP32[16874] = 0;
  std____2____compressed_pair_std____2__allocator_maxiLagExp_double__20__2c_20maxiLagExp_double__20_____compressed_pair_std____2__allocator_maxiLagExp_double__20__2c_20true__28std____2__allocator_maxiLagExp_double__20____29($0 + 16 | 0, $1 + 8 | 0);
  $2 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($2 | 0) != 1) {
   $1 = $1 + 16 | 0;
   if ($1 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $1;
   return $0 | 0;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____compressed_pair_std____2__allocator_maxiLagExp_double__20__2c_20maxiLagExp_double__20_____compressed_pair_std____2__allocator_maxiLagExp_double__20__2c_20true__28std____2__allocator_maxiLagExp_double__20____29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  maxiLagExp_double___maxiLagExp_28_29($0);
  return $0 | 0;
 }
 
 function maxiLagExp_double___maxiLagExp_28_29($0) {
  $0 = $0 | 0;
  maxiLagExp_double___init_28double_2c_20double_29($0, .5, 0.0);
  return $0 | 0;
 }
 
 function emscripten__internal__MethodInvoker_void_20_28maxiLagExp_double_____29_28double_2c_20double_29_2c_20void_2c_20maxiLagExp_double___2c_20double_2c_20double___invoke_28void_20_28maxiLagExp_double_____20const__29_28double_2c_20double_29_2c_20maxiLagExp_double___2c_20double_2c_20double_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = +$2;
  $3 = +$3;
  var $4 = 0;
  $4 = $1;
  $1 = HEAP32[$0 + 4 >> 2];
  $4 = $4 + ($1 >> 1) | 0;
  $0 = HEAP32[$0 >> 2];
  FUNCTION_TABLE[$1 & 1 ? HEAP32[$0 + HEAP32[$4 >> 2] >> 2] : $0]($4, $2, $3);
 }
 
 function maxiSample___maxiSample_28_29($0) {
  std____2__vector_double_2c_20std____2__allocator_double__20____vector_28_29($0 + 108 | 0);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($0);
  return $0;
 }
 
 function std____2__shared_ptr_maxiSample___shared_ptr_maxiSample_2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiSample__20___val_deleter__28maxiSample__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiSample__20___val_deleter_2c_20std____2__enable_if_is_convertible_maxiSample__2c_20maxiSample____value_2c_20std____2__shared_ptr_maxiSample_____nat___type_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0;
  $3 = global$0 - 32 | 0;
  $4 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  HEAP32[$0 >> 2] = $1;
  HEAP32[16874] = 0;
  $4 = __invoke_i1___22class_std____2__basic_ifstream_22_(930, 20) | 0;
  $5 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      if (($5 | 0) != 1) {
       HEAP32[16874] = 0;
       $5 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(990, $3 + 24 | 0, $2 | 0) | 0;
       $6 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($6 | 0) == 1) {
        break label$5
       }
       HEAP32[16874] = 0;
       __invoke___22class_std____2__basic_istream_22____22class_std____2__basic_istream_22__i8__i32(991, $4 | 0, $1 | 0, $5 | 0) | 0;
       $6 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($6 | 0) == 1) {
        break label$4
       }
       HEAP32[$0 + 4 >> 2] = $4;
       emscripten__val___val_28_29($5);
       HEAP32[$3 + 4 >> 2] = $1;
       HEAP32[$3 >> 2] = $1;
       $1 = $3 + 32 | 0;
       if ($1 >>> 0 < global$2 >>> 0) {
        __handle_stack_overflow()
       }
       global$0 = $1;
       return $0 | 0;
      }
      $3 = __cxa_find_matching_catch_3(0) | 0;
      getTempRet0() | 0;
      break label$2;
     }
     $3 = __cxa_find_matching_catch_3(0) | 0;
     getTempRet0() | 0;
     break label$3;
    }
    $3 = __cxa_find_matching_catch_3(0) | 0;
    getTempRet0() | 0;
    emscripten__val___val_28_29($5);
   }
   dlfree($4);
  }
  __cxa_begin_catch($3 | 0) | 0;
  HEAP32[16874] = 0;
  __invoke_void___22class_std____2__vector_13_22__i32(992, $2 | 0, $1 | 0);
  $0 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$8 : {
   label$9 : {
    if (($0 | 0) != 1) {
     HEAP32[16874] = 0;
     __invoke_void(934);
     $0 = HEAP32[16874];
     HEAP32[16874] = 0;
     if (($0 | 0) != 1) {
      break label$9
     }
    }
    $0 = __cxa_find_matching_catch_2() | 0;
    getTempRet0() | 0;
    HEAP32[16874] = 0;
    __invoke_void(23);
    $1 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($1 | 0) != 1) {
     break label$8
    }
    $0 = __cxa_find_matching_catch_3(0) | 0;
    getTempRet0() | 0;
    __clang_call_terminate($0);
   }
   abort();
  }
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____shared_ptr_pointer_maxiSample__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiSample__20___val_deleter_2c_20std____2__allocator_maxiSample__20_____shared_ptr_pointer_28maxiSample__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiSample__20___val_deleter_2c_20std____2__allocator_maxiSample__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0;
  $3 = global$0 - 32 | 0;
  $4 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  HEAP32[$3 + 20 >> 2] = $1;
  std____2____shared_weak_count____shared_weak_count_28long_29($0);
  HEAP32[$0 >> 2] = 10668;
  HEAP32[16874] = 0;
  $1 = std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_____compressed_pair_maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__28maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter___29($3 + 8 | 0, $3 + 20 | 0, $2);
  $2 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    if (($2 | 0) != 1) {
     HEAP32[16874] = 0;
     std____2____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20_____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20__28std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter____2c_20std____2__allocator_maxiOsc____29($0 + 12 | 0, $1, $3 + 24 | 0);
     $2 = HEAP32[16874];
     HEAP32[16874] = 0;
     if (($2 | 0) == 1) {
      break label$3
     }
     std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter______compressed_pair_28_29($1);
     $1 = $3 + 32 | 0;
     if ($1 >>> 0 < global$2 >>> 0) {
      __handle_stack_overflow()
     }
     global$0 = $1;
     return $0 | 0;
    }
    $0 = __cxa_find_matching_catch_2() | 0;
    getTempRet0() | 0;
    break label$2;
   }
   $0 = __cxa_find_matching_catch_2() | 0;
   getTempRet0() | 0;
   std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter______compressed_pair_28_29($1);
  }
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____shared_ptr_pointer_maxiSample__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiSample__20___val_deleter_2c_20std____2__allocator_maxiSample__20______shared_ptr_pointer_28_29($0) {
  $0 = $0 | 0;
  HEAP32[$0 >> 2] = 10668;
  std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter______compressed_pair_28_29($0 + 12 | 0);
  return $0 | 0;
 }
 
 function std____2____shared_ptr_pointer_maxiSample__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiSample__20___val_deleter_2c_20std____2__allocator_maxiSample__20______shared_ptr_pointer_28_29_1($0) {
  $0 = $0 | 0;
  dlfree(std____2____shared_ptr_pointer_maxiSample__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiSample__20___val_deleter_2c_20std____2__allocator_maxiSample__20______shared_ptr_pointer_28_29($0));
 }
 
 function std____2____shared_ptr_pointer_maxiSample__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiSample__20___val_deleter_2c_20std____2__allocator_maxiSample__20_____on_zero_shared_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $0 = $0 + 12 | 0;
  $1 = std____2____compressed_pair__IO_FILE__2c_20int_20_28__29_28_IO_FILE__29___second_28_29($0);
  $2 = HEAP32[$0 >> 2];
  HEAP32[16874] = 0;
  __invoke_void___22class_std____2__vector_13_22__i32(992, $1 | 0, $2 | 0);
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($1 | 0) != 1) {
   emscripten__val___val_28_29(std____2____compressed_pair__IO_FILE__2c_20int_20_28__29_28_IO_FILE__29___second_28_29($0));
   return;
  }
  $0 = __cxa_find_matching_catch_3(0) | 0;
  getTempRet0() | 0;
  __clang_call_terminate($0);
  abort();
 }
 
 function std____2____shared_ptr_pointer_maxiSample__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiSample__20___val_deleter_2c_20std____2__allocator_maxiSample__20_____get_deleter_28std__type_info_20const__29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  if (std__type_info__operator___28std__type_info_20const__29_20const($1, 10916)) {
   $0 = std____2____compressed_pair__IO_FILE__2c_20int_20_28__29_28_IO_FILE__29___second_28_29($0 + 12 | 0)
  } else {
   $0 = 0
  }
  return $0 | 0;
 }
 
 function std____2__shared_ptr_maxiSample__20std____2__shared_ptr_maxiSample___make_shared___28_29($0) {
  var $1 = 0, $2 = 0, $3 = 0;
  $2 = global$0 - 48 | 0;
  $1 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  $1 = $2 + 40 | 0;
  $1 = std____2__unique_ptr_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20___unique_ptr_true_2c_20void__28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20__2c_20true_____good_rval_ref_type_29($2 + 24 | 0, operator_20new_28unsigned_20long_29(152), std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20_____allocator_destructor_28std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20___2c_20unsigned_20long_29($2 + 16 | 0, $1, 1));
  $3 = HEAP32[$1 >> 2];
  HEAP32[16874] = 0;
  __invoke_i1___22class_std____2__basic_ifstream_22_(995, $3 | 0) | 0;
  $3 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($3 | 0) != 1) {
   $0 = std____2__shared_ptr_maxiOsc___shared_ptr_28_29($0);
   HEAP32[$0 >> 2] = std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___get_28_29(HEAP32[$1 >> 2]);
   HEAP32[$0 + 4 >> 2] = std____2__unique_ptr__IO_FILE_2c_20int_20_28__29_28_IO_FILE__29___release_28_29($1);
   $0 = HEAP32[$0 >> 2];
   HEAP32[$2 + 4 >> 2] = $0;
   HEAP32[$2 >> 2] = $0;
   std____2__unique_ptr_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20___reset_28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___29($1);
   $0 = $2 + 48 | 0;
   if ($0 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $0;
   return;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__unique_ptr_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20___reset_28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___29($1);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____shared_ptr_emplace_maxiSample_2c_20std____2__allocator_maxiSample__20_____shared_ptr_emplace_28std____2__allocator_maxiSample__29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  std____2____shared_weak_count____shared_weak_count_28long_29($0);
  HEAP32[$0 >> 2] = 10980;
  HEAP32[16874] = 0;
  __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(997, $0 + 16 | 0, $1 + 8 | 0) | 0;
  $2 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($2 | 0) != 1) {
   $1 = $1 + 16 | 0;
   if ($1 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $1;
   return $0 | 0;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____compressed_pair_std____2__allocator_maxiSample__2c_20maxiSample_____compressed_pair_std____2__allocator_maxiSample__2c_20true__28std____2__allocator_maxiSample____29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  maxiSample__maxiSample_28_29($0);
  return $0 | 0;
 }
 
 function std____2____shared_ptr_emplace_maxiSample_2c_20std____2__allocator_maxiSample__20______shared_ptr_emplace_28_29($0) {
  $0 = $0 | 0;
  HEAP32[$0 >> 2] = 10980;
  maxiSample___maxiSample_28_29($0 + 16 | 0);
  return $0 | 0;
 }
 
 function std____2____shared_ptr_emplace_maxiSample_2c_20std____2__allocator_maxiSample__20______shared_ptr_emplace_28_29_1($0) {
  $0 = $0 | 0;
  dlfree(std____2____shared_ptr_emplace_maxiSample_2c_20std____2__allocator_maxiSample__20______shared_ptr_emplace_28_29($0));
 }
 
 function std____2____shared_ptr_emplace_maxiSample_2c_20std____2__allocator_maxiSample__20_____on_zero_shared_28_29($0) {
  $0 = $0 | 0;
  maxiSample___maxiSample_28_29($0 + 16 | 0);
 }
 
 function maxiSample__maxiSample_28_29($0) {
  var $1 = 0, $2 = 0;
  $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($0);
  HEAP32[$0 + 48 >> 2] = 0;
  HEAP32[$0 + 52 >> 2] = 0;
  HEAP32[$0 + 40 >> 2] = 0;
  HEAP32[$0 + 44 >> 2] = 0;
  HEAP32[16874] = 0;
  maxiLagExp_double___maxiLagExp_28_29($0 + 72 | 0);
  $2 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($2 | 0) != 1) {
   HEAP16[$0 + 96 >> 1] = 1;
   HEAP32[$0 + 100 >> 2] = HEAP32[12865];
   std____2__vector_int_2c_20std____2__allocator_int__20___vector_28_29($0 + 108 | 0);
   maxiTrigger__maxiTrigger_28_29($0 + 120 | 0);
   return;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($1);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($0) {
  var $1 = 0;
  HEAP32[16874] = 0;
  std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20_____compressed_pair_true_2c_20void__28_29($0);
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($1 | 0) != 1) {
   std____2____compressed_pair_elem_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_200_2c_20false_____compressed_pair_elem_28_29($0);
   return $0;
  }
  $0 = __cxa_find_matching_catch_3(0) | 0;
  getTempRet0() | 0;
  __clang_call_terminate($0);
  abort();
 }
 
 function maxiTrigger__maxiTrigger_28_29($0) {
  HEAP8[$0 + 8 | 0] = 1;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 1072693248;
 }
 
 function emscripten__internal__MethodInvoker_void_20_28maxiSample____29_28std____2__vector_double_2c_20std____2__allocator_double__20___2c_20int_29_2c_20void_2c_20maxiSample__2c_20std____2__vector_double_2c_20std____2__allocator_double__20___2c_20int___invoke_28void_20_28maxiSample____20const__29_28std____2__vector_double_2c_20std____2__allocator_double__20___2c_20int_29_2c_20maxiSample__2c_20std____2__vector_double_2c_20std____2__allocator_double__20___2c_20int_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0;
  $4 = $1;
  $1 = HEAP32[$0 + 4 >> 2];
  $4 = $4 + ($1 >> 1) | 0;
  $0 = HEAP32[$0 >> 2];
  FUNCTION_TABLE[$1 & 1 ? HEAP32[$0 + HEAP32[$4 >> 2] >> 2] : $0]($4, $2, $3);
 }
 
 function emscripten__internal__MethodInvoker_int_20_28maxiSample____29_28std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20___2c_20int_29_2c_20int_2c_20maxiSample__2c_20std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20___2c_20int___invoke_28int_20_28maxiSample____20const__29_28std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20___2c_20int_29_2c_20maxiSample__2c_20std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20___2c_20int_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0;
  $5 = global$0 - 16 | 0;
  $4 = $5;
  if ($5 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  $4 = $1;
  $1 = HEAP32[$0 + 4 >> 2];
  $4 = $4 + ($1 >> 1) | 0;
  $0 = HEAP32[$0 >> 2];
  HEAP32[$5 + 12 >> 2] = FUNCTION_TABLE[$1 & 1 ? HEAP32[$0 + HEAP32[$4 >> 2] >> 2] : $0]($4, $2, $3);
  $0 = HEAP32[$5 + 12 >> 2];
  $1 = $5 + 16 | 0;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  return $0 | 0;
 }
 
 function emscripten__internal__MethodInvoker_void_20_28maxiSample____29_28_29_2c_20void_2c_20maxiSample____invoke_28void_20_28maxiSample____20const__29_28_29_2c_20maxiSample__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = $1;
  $1 = HEAP32[$0 >> 2];
  $0 = HEAP32[$0 + 4 >> 2];
  $2 = ($0 >> 1) + $2 | 0;
  FUNCTION_TABLE[$0 & 1 ? HEAP32[$1 + HEAP32[$2 >> 2] >> 2] : $1]($2);
 }
 
 function emscripten__internal__MethodInvoker_void_20_28maxiSample____29_28float_2c_20float_2c_20bool_2c_20bool_29_2c_20void_2c_20maxiSample__2c_20float_2c_20float_2c_20bool_2c_20bool___invoke_28void_20_28maxiSample____20const__29_28float_2c_20float_2c_20bool_2c_20bool_29_2c_20maxiSample__2c_20float_2c_20float_2c_20bool_2c_20bool_29($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = Math_fround($2);
  $3 = Math_fround($3);
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0;
  $6 = $1;
  $1 = HEAP32[$0 + 4 >> 2];
  $6 = $6 + ($1 >> 1) | 0;
  $0 = HEAP32[$0 >> 2];
  FUNCTION_TABLE[$1 & 1 ? HEAP32[$0 + HEAP32[$6 >> 2] >> 2] : $0]($6, $2, $3, $4, $5);
 }
 
 function emscripten__internal__MethodInvoker_bool_20_28maxiSample____29_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20int_29_2c_20bool_2c_20maxiSample__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20int___invoke_28bool_20_28maxiSample____20const__29_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20int_29_2c_20maxiSample__2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20void____unnamed___2c_20int_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0;
  $4 = global$0 - 16 | 0;
  $5 = $4;
  if ($4 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $5;
  $5 = HEAP32[$0 >> 2];
  $0 = HEAP32[$0 + 4 >> 2];
  $1 = ($0 >> 1) + $1 | 0;
  $0 = $0 & 1 ? HEAP32[$5 + HEAP32[$1 >> 2] >> 2] : $5;
  $5 = $2 + 4 | 0;
  $2 = HEAP32[$2 >> 2];
  std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20_____compressed_pair_true_2c_20void__28_29($4);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____init_28char_20const__2c_20unsigned_20long_29($4, $5, $2);
  HEAP32[16874] = 0;
  $0 = __invoke___22class_std____2__basic_istream_22____22class_std____2__basic_istream_22__i8__i32($0 | 0, $1 | 0, $4 | 0, $3 | 0) | 0;
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($1 | 0) != 1) {
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($4);
   $1 = $4 + 16 | 0;
   if ($1 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $1;
   return $0 | 0;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($4);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2__char_traits_char___copy_28char__2c_20char_20const__2c_20unsigned_20long_29($0, $1, $2) {
  if ($2) {
   memcpy($0, $1, $2)
  }
 }
 
 function std____2__shared_ptr_maxiMap___shared_ptr_maxiMap_2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiMap__20___val_deleter__28maxiMap__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiMap__20___val_deleter_2c_20std____2__enable_if_is_convertible_maxiMap__2c_20maxiMap____value_2c_20std____2__shared_ptr_maxiMap_____nat___type_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0;
  $3 = global$0 - 32 | 0;
  $4 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  HEAP32[$0 >> 2] = $1;
  HEAP32[16874] = 0;
  $4 = __invoke_i1___22class_std____2__basic_ifstream_22_(930, 20) | 0;
  $5 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      if (($5 | 0) != 1) {
       HEAP32[16874] = 0;
       $5 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1e3, $3 + 24 | 0, $2 | 0) | 0;
       $6 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($6 | 0) == 1) {
        break label$5
       }
       HEAP32[16874] = 0;
       __invoke___22class_std____2__basic_istream_22____22class_std____2__basic_istream_22__i8__i32(1001, $4 | 0, $1 | 0, $5 | 0) | 0;
       $6 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($6 | 0) == 1) {
        break label$4
       }
       HEAP32[$0 + 4 >> 2] = $4;
       emscripten__val___val_28_29($5);
       HEAP32[$3 + 4 >> 2] = $1;
       HEAP32[$3 >> 2] = $1;
       $1 = $3 + 32 | 0;
       if ($1 >>> 0 < global$2 >>> 0) {
        __handle_stack_overflow()
       }
       global$0 = $1;
       return $0 | 0;
      }
      $3 = __cxa_find_matching_catch_3(0) | 0;
      getTempRet0() | 0;
      break label$2;
     }
     $3 = __cxa_find_matching_catch_3(0) | 0;
     getTempRet0() | 0;
     break label$3;
    }
    $3 = __cxa_find_matching_catch_3(0) | 0;
    getTempRet0() | 0;
    emscripten__val___val_28_29($5);
   }
   dlfree($4);
  }
  __cxa_begin_catch($3 | 0) | 0;
  HEAP32[16874] = 0;
  __invoke_void___22class_std____2__vector_13_22__i32(1002, $2 | 0, $1 | 0);
  $0 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$8 : {
   label$9 : {
    if (($0 | 0) != 1) {
     HEAP32[16874] = 0;
     __invoke_void(934);
     $0 = HEAP32[16874];
     HEAP32[16874] = 0;
     if (($0 | 0) != 1) {
      break label$9
     }
    }
    $0 = __cxa_find_matching_catch_2() | 0;
    getTempRet0() | 0;
    HEAP32[16874] = 0;
    __invoke_void(23);
    $1 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($1 | 0) != 1) {
     break label$8
    }
    $0 = __cxa_find_matching_catch_3(0) | 0;
    getTempRet0() | 0;
    __clang_call_terminate($0);
   }
   abort();
  }
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____shared_ptr_pointer_maxiMap__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiMap__20___val_deleter_2c_20std____2__allocator_maxiMap__20_____shared_ptr_pointer_28maxiMap__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiMap__20___val_deleter_2c_20std____2__allocator_maxiMap__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0;
  $3 = global$0 - 32 | 0;
  $4 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  HEAP32[$3 + 20 >> 2] = $1;
  std____2____shared_weak_count____shared_weak_count_28long_29($0);
  HEAP32[$0 >> 2] = 11500;
  HEAP32[16874] = 0;
  $1 = std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_____compressed_pair_maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__28maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter___29($3 + 8 | 0, $3 + 20 | 0, $2);
  $2 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    if (($2 | 0) != 1) {
     HEAP32[16874] = 0;
     std____2____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20_____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20__28std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter____2c_20std____2__allocator_maxiOsc____29($0 + 12 | 0, $1, $3 + 24 | 0);
     $2 = HEAP32[16874];
     HEAP32[16874] = 0;
     if (($2 | 0) == 1) {
      break label$3
     }
     std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter______compressed_pair_28_29($1);
     $1 = $3 + 32 | 0;
     if ($1 >>> 0 < global$2 >>> 0) {
      __handle_stack_overflow()
     }
     global$0 = $1;
     return $0 | 0;
    }
    $0 = __cxa_find_matching_catch_2() | 0;
    getTempRet0() | 0;
    break label$2;
   }
   $0 = __cxa_find_matching_catch_2() | 0;
   getTempRet0() | 0;
   std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter______compressed_pair_28_29($1);
  }
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____shared_ptr_pointer_maxiMap__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiMap__20___val_deleter_2c_20std____2__allocator_maxiMap__20______shared_ptr_pointer_28_29($0) {
  $0 = $0 | 0;
  HEAP32[$0 >> 2] = 11500;
  std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter______compressed_pair_28_29($0 + 12 | 0);
  return $0 | 0;
 }
 
 function std____2____shared_ptr_pointer_maxiMap__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiMap__20___val_deleter_2c_20std____2__allocator_maxiMap__20______shared_ptr_pointer_28_29_1($0) {
  $0 = $0 | 0;
  dlfree(std____2____shared_ptr_pointer_maxiMap__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiMap__20___val_deleter_2c_20std____2__allocator_maxiMap__20______shared_ptr_pointer_28_29($0));
 }
 
 function std____2____shared_ptr_pointer_maxiMap__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiMap__20___val_deleter_2c_20std____2__allocator_maxiMap__20_____on_zero_shared_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $0 = $0 + 12 | 0;
  $1 = std____2____compressed_pair__IO_FILE__2c_20int_20_28__29_28_IO_FILE__29___second_28_29($0);
  $2 = HEAP32[$0 >> 2];
  HEAP32[16874] = 0;
  __invoke_void___22class_std____2__vector_13_22__i32(1002, $1 | 0, $2 | 0);
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($1 | 0) != 1) {
   emscripten__val___val_28_29(std____2____compressed_pair__IO_FILE__2c_20int_20_28__29_28_IO_FILE__29___second_28_29($0));
   return;
  }
  $0 = __cxa_find_matching_catch_3(0) | 0;
  getTempRet0() | 0;
  __clang_call_terminate($0);
  abort();
 }
 
 function std____2____shared_ptr_pointer_maxiMap__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiMap__20___val_deleter_2c_20std____2__allocator_maxiMap__20_____get_deleter_28std__type_info_20const__29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  if (std__type_info__operator___28std__type_info_20const__29_20const($1, 11740)) {
   $0 = std____2____compressed_pair__IO_FILE__2c_20int_20_28__29_28_IO_FILE__29___second_28_29($0 + 12 | 0)
  } else {
   $0 = 0
  }
  return $0 | 0;
 }
 
 function std____2__shared_ptr_maxiMap__20std____2__shared_ptr_maxiMap___make_shared___28_29($0) {
  var $1 = 0, $2 = 0, $3 = 0;
  $2 = global$0 - 48 | 0;
  $1 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  $1 = $2 + 40 | 0;
  $1 = std____2__unique_ptr_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20___unique_ptr_true_2c_20void__28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20__2c_20true_____good_rval_ref_type_29($2 + 24 | 0, operator_20new_28unsigned_20long_29(16), std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20_____allocator_destructor_28std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20___2c_20unsigned_20long_29($2 + 16 | 0, $1, 1));
  $3 = HEAP32[$1 >> 2];
  HEAP32[16874] = 0;
  __invoke_i1___22class_std____2__basic_ifstream_22_(1005, $3 | 0) | 0;
  $3 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($3 | 0) != 1) {
   $0 = std____2__shared_ptr_maxiOsc___shared_ptr_28_29($0);
   HEAP32[$0 >> 2] = std____2____split_buffer_double_2c_20std____2__allocator_double_______end_cap_28_29(HEAP32[$1 >> 2]);
   HEAP32[$0 + 4 >> 2] = std____2__unique_ptr__IO_FILE_2c_20int_20_28__29_28_IO_FILE__29___release_28_29($1);
   $0 = HEAP32[$0 >> 2];
   HEAP32[$2 + 4 >> 2] = $0;
   HEAP32[$2 >> 2] = $0;
   std____2__unique_ptr_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20___reset_28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___29($1);
   $0 = $2 + 48 | 0;
   if ($0 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $0;
   return;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__unique_ptr_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20___reset_28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___29($1);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____shared_ptr_emplace_maxiMap_2c_20std____2__allocator_maxiMap__20_____shared_ptr_emplace_28std____2__allocator_maxiMap__29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  std____2____shared_weak_count____shared_weak_count_28long_29($0);
  HEAP32[$0 >> 2] = 11800;
  HEAP32[16874] = 0;
  $2 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($2 | 0) != 1) {
   $1 = $1 + 16 | 0;
   if ($1 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $1;
   return $0 | 0;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____compressed_pair_std____2__allocator_maxiMap__2c_20maxiMap_____compressed_pair_std____2__allocator_maxiMap__2c_20true__28std____2__allocator_maxiMap____29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return $0 | 0;
 }
 
 function emscripten__internal__FunctionInvoker_double_20_28__29_28double_2c_20double_2c_20double_2c_20double_2c_20double_29_2c_20double_2c_20double_2c_20double_2c_20double_2c_20double_2c_20double___invoke_28double_20_28___29_28double_2c_20double_2c_20double_2c_20double_2c_20double_29_2c_20double_2c_20double_2c_20double_2c_20double_2c_20double_29($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = +$2;
  $3 = +$3;
  $4 = +$4;
  $5 = +$5;
  var $6 = 0, $7 = 0;
  $6 = global$0 - 16 | 0;
  $7 = $6;
  if ($6 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $7;
  HEAPF64[$6 + 8 >> 3] = FUNCTION_TABLE[HEAP32[$0 >> 2]]($1, $2, $3, $4, $5);
  $1 = HEAPF64[$6 + 8 >> 3];
  $0 = $6 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
  return +$1;
 }
 
 function emscripten__internal__FunctionInvoker_double_20_28__29_28double_2c_20double_2c_20double_29_2c_20double_2c_20double_2c_20double_2c_20double___invoke_28double_20_28___29_28double_2c_20double_2c_20double_29_2c_20double_2c_20double_2c_20double_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = +$2;
  $3 = +$3;
  var $4 = 0, $5 = 0;
  $4 = global$0 - 16 | 0;
  $5 = $4;
  if ($4 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $5;
  HEAPF64[$4 + 8 >> 3] = FUNCTION_TABLE[HEAP32[$0 >> 2]]($1, $2, $3);
  $1 = HEAPF64[$4 + 8 >> 3];
  $0 = $4 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
  return +$1;
 }
 
 function std____2__shared_ptr_maxiDyn___shared_ptr_maxiDyn_2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiDyn__20___val_deleter__28maxiDyn__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiDyn__20___val_deleter_2c_20std____2__enable_if_is_convertible_maxiDyn__2c_20maxiDyn____value_2c_20std____2__shared_ptr_maxiDyn_____nat___type_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0;
  $3 = global$0 - 32 | 0;
  $4 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  HEAP32[$0 >> 2] = $1;
  HEAP32[16874] = 0;
  $4 = __invoke_i1___22class_std____2__basic_ifstream_22_(930, 20) | 0;
  $5 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      if (($5 | 0) != 1) {
       HEAP32[16874] = 0;
       $5 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1008, $3 + 24 | 0, $2 | 0) | 0;
       $6 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($6 | 0) == 1) {
        break label$5
       }
       HEAP32[16874] = 0;
       __invoke___22class_std____2__basic_istream_22____22class_std____2__basic_istream_22__i8__i32(1009, $4 | 0, $1 | 0, $5 | 0) | 0;
       $6 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($6 | 0) == 1) {
        break label$4
       }
       HEAP32[$0 + 4 >> 2] = $4;
       emscripten__val___val_28_29($5);
       HEAP32[$3 + 4 >> 2] = $1;
       HEAP32[$3 >> 2] = $1;
       $1 = $3 + 32 | 0;
       if ($1 >>> 0 < global$2 >>> 0) {
        __handle_stack_overflow()
       }
       global$0 = $1;
       return $0 | 0;
      }
      $3 = __cxa_find_matching_catch_3(0) | 0;
      getTempRet0() | 0;
      break label$2;
     }
     $3 = __cxa_find_matching_catch_3(0) | 0;
     getTempRet0() | 0;
     break label$3;
    }
    $3 = __cxa_find_matching_catch_3(0) | 0;
    getTempRet0() | 0;
    emscripten__val___val_28_29($5);
   }
   dlfree($4);
  }
  __cxa_begin_catch($3 | 0) | 0;
  HEAP32[16874] = 0;
  __invoke_void___22class_std____2__vector_13_22__i32(1010, $2 | 0, $1 | 0);
  $0 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$8 : {
   label$9 : {
    if (($0 | 0) != 1) {
     HEAP32[16874] = 0;
     __invoke_void(934);
     $0 = HEAP32[16874];
     HEAP32[16874] = 0;
     if (($0 | 0) != 1) {
      break label$9
     }
    }
    $0 = __cxa_find_matching_catch_2() | 0;
    getTempRet0() | 0;
    HEAP32[16874] = 0;
    __invoke_void(23);
    $1 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($1 | 0) != 1) {
     break label$8
    }
    $0 = __cxa_find_matching_catch_3(0) | 0;
    getTempRet0() | 0;
    __clang_call_terminate($0);
   }
   abort();
  }
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____shared_ptr_pointer_maxiDyn__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiDyn__20___val_deleter_2c_20std____2__allocator_maxiDyn__20_____shared_ptr_pointer_28maxiDyn__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiDyn__20___val_deleter_2c_20std____2__allocator_maxiDyn__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0;
  $3 = global$0 - 32 | 0;
  $4 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  HEAP32[$3 + 20 >> 2] = $1;
  std____2____shared_weak_count____shared_weak_count_28long_29($0);
  HEAP32[$0 >> 2] = 12020;
  HEAP32[16874] = 0;
  $1 = std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_____compressed_pair_maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__28maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter___29($3 + 8 | 0, $3 + 20 | 0, $2);
  $2 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    if (($2 | 0) != 1) {
     HEAP32[16874] = 0;
     std____2____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20_____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20__28std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter____2c_20std____2__allocator_maxiOsc____29($0 + 12 | 0, $1, $3 + 24 | 0);
     $2 = HEAP32[16874];
     HEAP32[16874] = 0;
     if (($2 | 0) == 1) {
      break label$3
     }
     std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter______compressed_pair_28_29($1);
     $1 = $3 + 32 | 0;
     if ($1 >>> 0 < global$2 >>> 0) {
      __handle_stack_overflow()
     }
     global$0 = $1;
     return $0 | 0;
    }
    $0 = __cxa_find_matching_catch_2() | 0;
    getTempRet0() | 0;
    break label$2;
   }
   $0 = __cxa_find_matching_catch_2() | 0;
   getTempRet0() | 0;
   std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter______compressed_pair_28_29($1);
  }
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____shared_ptr_pointer_maxiDyn__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiDyn__20___val_deleter_2c_20std____2__allocator_maxiDyn__20______shared_ptr_pointer_28_29($0) {
  $0 = $0 | 0;
  HEAP32[$0 >> 2] = 12020;
  std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter______compressed_pair_28_29($0 + 12 | 0);
  return $0 | 0;
 }
 
 function std____2____shared_ptr_pointer_maxiDyn__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiDyn__20___val_deleter_2c_20std____2__allocator_maxiDyn__20______shared_ptr_pointer_28_29_1($0) {
  $0 = $0 | 0;
  dlfree(std____2____shared_ptr_pointer_maxiDyn__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiDyn__20___val_deleter_2c_20std____2__allocator_maxiDyn__20______shared_ptr_pointer_28_29($0));
 }
 
 function std____2____shared_ptr_pointer_maxiDyn__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiDyn__20___val_deleter_2c_20std____2__allocator_maxiDyn__20_____on_zero_shared_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $0 = $0 + 12 | 0;
  $1 = std____2____compressed_pair__IO_FILE__2c_20int_20_28__29_28_IO_FILE__29___second_28_29($0);
  $2 = HEAP32[$0 >> 2];
  HEAP32[16874] = 0;
  __invoke_void___22class_std____2__vector_13_22__i32(1010, $1 | 0, $2 | 0);
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($1 | 0) != 1) {
   emscripten__val___val_28_29(std____2____compressed_pair__IO_FILE__2c_20int_20_28__29_28_IO_FILE__29___second_28_29($0));
   return;
  }
  $0 = __cxa_find_matching_catch_3(0) | 0;
  getTempRet0() | 0;
  __clang_call_terminate($0);
  abort();
 }
 
 function std____2____shared_ptr_pointer_maxiDyn__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiDyn__20___val_deleter_2c_20std____2__allocator_maxiDyn__20_____get_deleter_28std__type_info_20const__29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  if (std__type_info__operator___28std__type_info_20const__29_20const($1, 12260)) {
   $0 = std____2____compressed_pair__IO_FILE__2c_20int_20_28__29_28_IO_FILE__29___second_28_29($0 + 12 | 0)
  } else {
   $0 = 0
  }
  return $0 | 0;
 }
 
 function std____2__shared_ptr_maxiDyn__20std____2__shared_ptr_maxiDyn___make_shared___28_29($0) {
  var $1 = 0, $2 = 0, $3 = 0;
  $2 = global$0 - 48 | 0;
  $1 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  $1 = $2 + 40 | 0;
  $1 = std____2__unique_ptr_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20___unique_ptr_true_2c_20void__28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20__2c_20true_____good_rval_ref_type_29($2 + 24 | 0, operator_20new_28unsigned_20long_29(104), std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20_____allocator_destructor_28std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20___2c_20unsigned_20long_29($2 + 16 | 0, $1, 1));
  $3 = HEAP32[$1 >> 2];
  HEAP32[16874] = 0;
  __invoke_i1___22class_std____2__basic_ifstream_22_(1013, $3 | 0) | 0;
  $3 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($3 | 0) != 1) {
   $0 = std____2__shared_ptr_maxiOsc___shared_ptr_28_29($0);
   HEAP32[$0 >> 2] = std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___get_28_29(HEAP32[$1 >> 2]);
   HEAP32[$0 + 4 >> 2] = std____2__unique_ptr__IO_FILE_2c_20int_20_28__29_28_IO_FILE__29___release_28_29($1);
   $0 = HEAP32[$0 >> 2];
   HEAP32[$2 + 4 >> 2] = $0;
   HEAP32[$2 >> 2] = $0;
   std____2__unique_ptr_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20___reset_28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___29($1);
   $0 = $2 + 48 | 0;
   if ($0 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $0;
   return;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__unique_ptr_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20___reset_28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___29($1);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____shared_ptr_emplace_maxiDyn_2c_20std____2__allocator_maxiDyn__20_____shared_ptr_emplace_28std____2__allocator_maxiDyn__29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  std____2____shared_weak_count____shared_weak_count_28long_29($0);
  HEAP32[$0 >> 2] = 12320;
  HEAP32[16874] = 0;
  std____2____compressed_pair_std____2__allocator_maxiDyn__2c_20maxiDyn_____compressed_pair_std____2__allocator_maxiDyn__2c_20true__28std____2__allocator_maxiDyn____29($0 + 16 | 0, $1 + 8 | 0);
  $2 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($2 | 0) != 1) {
   $1 = $1 + 16 | 0;
   if ($1 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $1;
   return $0 | 0;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____compressed_pair_std____2__allocator_maxiDyn__2c_20maxiDyn_____compressed_pair_std____2__allocator_maxiDyn__2c_20true__28std____2__allocator_maxiDyn____29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  memset($0, 0, 88);
  return $0 | 0;
 }
 
 function emscripten__internal__MethodInvoker_double_20_28maxiDyn____29_28double_2c_20double_2c_20long_2c_20double_2c_20double_29_2c_20double_2c_20maxiDyn__2c_20double_2c_20double_2c_20long_2c_20double_2c_20double___invoke_28double_20_28maxiDyn____20const__29_28double_2c_20double_2c_20long_2c_20double_2c_20double_29_2c_20maxiDyn__2c_20double_2c_20double_2c_20long_2c_20double_2c_20double_29($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = +$2;
  $3 = +$3;
  $4 = $4 | 0;
  $5 = +$5;
  $6 = +$6;
  var $7 = 0, $8 = 0;
  $8 = global$0 - 16 | 0;
  $7 = $8;
  if ($8 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $7;
  $7 = $1;
  $1 = HEAP32[$0 + 4 >> 2];
  $7 = $7 + ($1 >> 1) | 0;
  $0 = HEAP32[$0 >> 2];
  HEAPF64[$8 + 8 >> 3] = FUNCTION_TABLE[$1 & 1 ? HEAP32[$0 + HEAP32[$7 >> 2] >> 2] : $0]($7, $2, $3, $4, $5, $6);
  $2 = HEAPF64[$8 + 8 >> 3];
  $0 = $8 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
  return +$2;
 }
 
 function emscripten__internal__MethodInvoker_double_20_28maxiDyn____29_28double_2c_20double_2c_20double_2c_20double_2c_20double_29_2c_20double_2c_20maxiDyn__2c_20double_2c_20double_2c_20double_2c_20double_2c_20double___invoke_28double_20_28maxiDyn____20const__29_28double_2c_20double_2c_20double_2c_20double_2c_20double_29_2c_20maxiDyn__2c_20double_2c_20double_2c_20double_2c_20double_2c_20double_29($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = +$2;
  $3 = +$3;
  $4 = +$4;
  $5 = +$5;
  $6 = +$6;
  var $7 = 0, $8 = 0;
  $8 = global$0 - 16 | 0;
  $7 = $8;
  if ($8 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $7;
  $7 = $1;
  $1 = HEAP32[$0 + 4 >> 2];
  $7 = $7 + ($1 >> 1) | 0;
  $0 = HEAP32[$0 >> 2];
  HEAPF64[$8 + 8 >> 3] = FUNCTION_TABLE[$1 & 1 ? HEAP32[$0 + HEAP32[$7 >> 2] >> 2] : $0]($7, $2, $3, $4, $5, $6);
  $2 = HEAPF64[$8 + 8 >> 3];
  $0 = $8 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
  return +$2;
 }
 
 function std____2__shared_ptr_maxiEnv___shared_ptr_maxiEnv_2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiEnv__20___val_deleter__28maxiEnv__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiEnv__20___val_deleter_2c_20std____2__enable_if_is_convertible_maxiEnv__2c_20maxiEnv____value_2c_20std____2__shared_ptr_maxiEnv_____nat___type_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0;
  $3 = global$0 - 32 | 0;
  $4 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  HEAP32[$0 >> 2] = $1;
  HEAP32[16874] = 0;
  $4 = __invoke_i1___22class_std____2__basic_ifstream_22_(930, 20) | 0;
  $5 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      if (($5 | 0) != 1) {
       HEAP32[16874] = 0;
       $5 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1016, $3 + 24 | 0, $2 | 0) | 0;
       $6 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($6 | 0) == 1) {
        break label$5
       }
       HEAP32[16874] = 0;
       __invoke___22class_std____2__basic_istream_22____22class_std____2__basic_istream_22__i8__i32(1017, $4 | 0, $1 | 0, $5 | 0) | 0;
       $6 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($6 | 0) == 1) {
        break label$4
       }
       HEAP32[$0 + 4 >> 2] = $4;
       emscripten__val___val_28_29($5);
       HEAP32[$3 + 4 >> 2] = $1;
       HEAP32[$3 >> 2] = $1;
       $1 = $3 + 32 | 0;
       if ($1 >>> 0 < global$2 >>> 0) {
        __handle_stack_overflow()
       }
       global$0 = $1;
       return $0 | 0;
      }
      $3 = __cxa_find_matching_catch_3(0) | 0;
      getTempRet0() | 0;
      break label$2;
     }
     $3 = __cxa_find_matching_catch_3(0) | 0;
     getTempRet0() | 0;
     break label$3;
    }
    $3 = __cxa_find_matching_catch_3(0) | 0;
    getTempRet0() | 0;
    emscripten__val___val_28_29($5);
   }
   dlfree($4);
  }
  __cxa_begin_catch($3 | 0) | 0;
  HEAP32[16874] = 0;
  __invoke_void___22class_std____2__vector_13_22__i32(1018, $2 | 0, $1 | 0);
  $0 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$8 : {
   label$9 : {
    if (($0 | 0) != 1) {
     HEAP32[16874] = 0;
     __invoke_void(934);
     $0 = HEAP32[16874];
     HEAP32[16874] = 0;
     if (($0 | 0) != 1) {
      break label$9
     }
    }
    $0 = __cxa_find_matching_catch_2() | 0;
    getTempRet0() | 0;
    HEAP32[16874] = 0;
    __invoke_void(23);
    $1 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($1 | 0) != 1) {
     break label$8
    }
    $0 = __cxa_find_matching_catch_3(0) | 0;
    getTempRet0() | 0;
    __clang_call_terminate($0);
   }
   abort();
  }
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____shared_ptr_pointer_maxiEnv__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiEnv__20___val_deleter_2c_20std____2__allocator_maxiEnv__20_____shared_ptr_pointer_28maxiEnv__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiEnv__20___val_deleter_2c_20std____2__allocator_maxiEnv__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0;
  $3 = global$0 - 32 | 0;
  $4 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  HEAP32[$3 + 20 >> 2] = $1;
  std____2____shared_weak_count____shared_weak_count_28long_29($0);
  HEAP32[$0 >> 2] = 12612;
  HEAP32[16874] = 0;
  $1 = std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_____compressed_pair_maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__28maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter___29($3 + 8 | 0, $3 + 20 | 0, $2);
  $2 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    if (($2 | 0) != 1) {
     HEAP32[16874] = 0;
     std____2____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20_____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20__28std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter____2c_20std____2__allocator_maxiOsc____29($0 + 12 | 0, $1, $3 + 24 | 0);
     $2 = HEAP32[16874];
     HEAP32[16874] = 0;
     if (($2 | 0) == 1) {
      break label$3
     }
     std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter______compressed_pair_28_29($1);
     $1 = $3 + 32 | 0;
     if ($1 >>> 0 < global$2 >>> 0) {
      __handle_stack_overflow()
     }
     global$0 = $1;
     return $0 | 0;
    }
    $0 = __cxa_find_matching_catch_2() | 0;
    getTempRet0() | 0;
    break label$2;
   }
   $0 = __cxa_find_matching_catch_2() | 0;
   getTempRet0() | 0;
   std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter______compressed_pair_28_29($1);
  }
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____shared_ptr_pointer_maxiEnv__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiEnv__20___val_deleter_2c_20std____2__allocator_maxiEnv__20______shared_ptr_pointer_28_29($0) {
  $0 = $0 | 0;
  HEAP32[$0 >> 2] = 12612;
  std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter______compressed_pair_28_29($0 + 12 | 0);
  return $0 | 0;
 }
 
 function std____2____shared_ptr_pointer_maxiEnv__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiEnv__20___val_deleter_2c_20std____2__allocator_maxiEnv__20______shared_ptr_pointer_28_29_1($0) {
  $0 = $0 | 0;
  dlfree(std____2____shared_ptr_pointer_maxiEnv__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiEnv__20___val_deleter_2c_20std____2__allocator_maxiEnv__20______shared_ptr_pointer_28_29($0));
 }
 
 function std____2____shared_ptr_pointer_maxiEnv__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiEnv__20___val_deleter_2c_20std____2__allocator_maxiEnv__20_____on_zero_shared_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $0 = $0 + 12 | 0;
  $1 = std____2____compressed_pair__IO_FILE__2c_20int_20_28__29_28_IO_FILE__29___second_28_29($0);
  $2 = HEAP32[$0 >> 2];
  HEAP32[16874] = 0;
  __invoke_void___22class_std____2__vector_13_22__i32(1018, $1 | 0, $2 | 0);
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($1 | 0) != 1) {
   emscripten__val___val_28_29(std____2____compressed_pair__IO_FILE__2c_20int_20_28__29_28_IO_FILE__29___second_28_29($0));
   return;
  }
  $0 = __cxa_find_matching_catch_3(0) | 0;
  getTempRet0() | 0;
  __clang_call_terminate($0);
  abort();
 }
 
 function std____2____shared_ptr_pointer_maxiEnv__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiEnv__20___val_deleter_2c_20std____2__allocator_maxiEnv__20_____get_deleter_28std__type_info_20const__29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  if (std__type_info__operator___28std__type_info_20const__29_20const($1, 12852)) {
   $0 = std____2____compressed_pair__IO_FILE__2c_20int_20_28__29_28_IO_FILE__29___second_28_29($0 + 12 | 0)
  } else {
   $0 = 0
  }
  return $0 | 0;
 }
 
 function std____2__shared_ptr_maxiEnv__20std____2__shared_ptr_maxiEnv___make_shared___28_29($0) {
  var $1 = 0, $2 = 0, $3 = 0;
  $2 = global$0 - 48 | 0;
  $1 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  $1 = $2 + 40 | 0;
  $1 = std____2__unique_ptr_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20___unique_ptr_true_2c_20void__28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20__2c_20true_____good_rval_ref_type_29($2 + 24 | 0, operator_20new_28unsigned_20long_29(104), std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20_____allocator_destructor_28std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20___2c_20unsigned_20long_29($2 + 16 | 0, $1, 1));
  $3 = HEAP32[$1 >> 2];
  HEAP32[16874] = 0;
  __invoke_i1___22class_std____2__basic_ifstream_22_(1021, $3 | 0) | 0;
  $3 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($3 | 0) != 1) {
   $0 = std____2__shared_ptr_maxiOsc___shared_ptr_28_29($0);
   HEAP32[$0 >> 2] = std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___get_28_29(HEAP32[$1 >> 2]);
   HEAP32[$0 + 4 >> 2] = std____2__unique_ptr__IO_FILE_2c_20int_20_28__29_28_IO_FILE__29___release_28_29($1);
   $0 = HEAP32[$0 >> 2];
   HEAP32[$2 + 4 >> 2] = $0;
   HEAP32[$2 >> 2] = $0;
   std____2__unique_ptr_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20___reset_28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___29($1);
   $0 = $2 + 48 | 0;
   if ($0 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $0;
   return;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__unique_ptr_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20___reset_28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___29($1);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____shared_ptr_emplace_maxiEnv_2c_20std____2__allocator_maxiEnv__20_____shared_ptr_emplace_28std____2__allocator_maxiEnv__29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  std____2____shared_weak_count____shared_weak_count_28long_29($0);
  HEAP32[$0 >> 2] = 12912;
  HEAP32[16874] = 0;
  std____2____compressed_pair_std____2__allocator_maxiEnv__2c_20maxiEnv_____compressed_pair_std____2__allocator_maxiEnv__2c_20true__28std____2__allocator_maxiEnv____29($0 + 16 | 0, $1 + 8 | 0);
  $2 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($2 | 0) != 1) {
   $1 = $1 + 16 | 0;
   if ($1 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $1;
   return $0 | 0;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____compressed_pair_std____2__allocator_maxiEnv__2c_20maxiEnv_____compressed_pair_std____2__allocator_maxiEnv__2c_20true__28std____2__allocator_maxiEnv____29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  HEAP32[memset($0, 0, 88) + 60 >> 2] = 1;
  return $0 | 0;
 }
 
 function emscripten__internal__MethodInvoker_double_20_28maxiEnv____29_28double_2c_20double_2c_20double_2c_20long_2c_20int_29_2c_20double_2c_20maxiEnv__2c_20double_2c_20double_2c_20double_2c_20long_2c_20int___invoke_28double_20_28maxiEnv____20const__29_28double_2c_20double_2c_20double_2c_20long_2c_20int_29_2c_20maxiEnv__2c_20double_2c_20double_2c_20double_2c_20long_2c_20int_29($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = +$2;
  $3 = +$3;
  $4 = +$4;
  $5 = $5 | 0;
  $6 = $6 | 0;
  var $7 = 0, $8 = 0;
  $8 = global$0 - 16 | 0;
  $7 = $8;
  if ($8 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $7;
  $7 = $1;
  $1 = HEAP32[$0 + 4 >> 2];
  $7 = $7 + ($1 >> 1) | 0;
  $0 = HEAP32[$0 >> 2];
  HEAPF64[$8 + 8 >> 3] = FUNCTION_TABLE[$1 & 1 ? HEAP32[$0 + HEAP32[$7 >> 2] >> 2] : $0]($7, $2, $3, $4, $5, $6);
  $2 = HEAPF64[$8 + 8 >> 3];
  $0 = $8 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
  return +$2;
 }
 
 function emscripten__internal__MethodInvoker_double_20_28maxiEnv____29_28double_2c_20double_2c_20double_2c_20double_2c_20double_2c_20long_2c_20int_29_2c_20double_2c_20maxiEnv__2c_20double_2c_20double_2c_20double_2c_20double_2c_20double_2c_20long_2c_20int___invoke_28double_20_28maxiEnv____20const__29_28double_2c_20double_2c_20double_2c_20double_2c_20double_2c_20long_2c_20int_29_2c_20maxiEnv__2c_20double_2c_20double_2c_20double_2c_20double_2c_20double_2c_20long_2c_20int_29($0, $1, $2, $3, $4, $5, $6, $7, $8) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = +$2;
  $3 = +$3;
  $4 = +$4;
  $5 = +$5;
  $6 = +$6;
  $7 = $7 | 0;
  $8 = $8 | 0;
  var $9 = 0, $10 = 0;
  $10 = global$0 - 16 | 0;
  $9 = $10;
  if ($10 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $9;
  $9 = $1;
  $1 = HEAP32[$0 + 4 >> 2];
  $9 = $9 + ($1 >> 1) | 0;
  $0 = HEAP32[$0 >> 2];
  HEAPF64[$10 + 8 >> 3] = FUNCTION_TABLE[$1 & 1 ? HEAP32[$0 + HEAP32[$9 >> 2] >> 2] : $0]($9, $2, $3, $4, $5, $6, $7, $8);
  $2 = HEAPF64[$10 + 8 >> 3];
  $0 = $10 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
  return +$2;
 }
 
 function emscripten__internal__MethodInvoker_double_20_28maxiEnv____29_28double_2c_20int_29_2c_20double_2c_20maxiEnv__2c_20double_2c_20int___invoke_28double_20_28maxiEnv____20const__29_28double_2c_20int_29_2c_20maxiEnv__2c_20double_2c_20int_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = +$2;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0;
  $5 = global$0 - 16 | 0;
  $4 = $5;
  if ($5 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  $4 = $1;
  $1 = HEAP32[$0 + 4 >> 2];
  $4 = $4 + ($1 >> 1) | 0;
  $0 = HEAP32[$0 >> 2];
  HEAPF64[$5 + 8 >> 3] = FUNCTION_TABLE[$1 & 1 ? HEAP32[$0 + HEAP32[$4 >> 2] >> 2] : $0]($4, $2, $3);
  $2 = HEAPF64[$5 + 8 >> 3];
  $0 = $5 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
  return +$2;
 }
 
 function std____2__shared_ptr_convert___shared_ptr_convert_2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_convert__20___val_deleter__28convert__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_convert__20___val_deleter_2c_20std____2__enable_if_is_convertible_convert__2c_20convert____value_2c_20std____2__shared_ptr_convert_____nat___type_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0;
  $3 = global$0 - 32 | 0;
  $4 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  HEAP32[$0 >> 2] = $1;
  HEAP32[16874] = 0;
  $4 = __invoke_i1___22class_std____2__basic_ifstream_22_(930, 20) | 0;
  $5 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      if (($5 | 0) != 1) {
       HEAP32[16874] = 0;
       $5 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1024, $3 + 24 | 0, $2 | 0) | 0;
       $6 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($6 | 0) == 1) {
        break label$5
       }
       HEAP32[16874] = 0;
       __invoke___22class_std____2__basic_istream_22____22class_std____2__basic_istream_22__i8__i32(1025, $4 | 0, $1 | 0, $5 | 0) | 0;
       $6 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($6 | 0) == 1) {
        break label$4
       }
       HEAP32[$0 + 4 >> 2] = $4;
       emscripten__val___val_28_29($5);
       HEAP32[$3 + 4 >> 2] = $1;
       HEAP32[$3 >> 2] = $1;
       $1 = $3 + 32 | 0;
       if ($1 >>> 0 < global$2 >>> 0) {
        __handle_stack_overflow()
       }
       global$0 = $1;
       return $0 | 0;
      }
      $3 = __cxa_find_matching_catch_3(0) | 0;
      getTempRet0() | 0;
      break label$2;
     }
     $3 = __cxa_find_matching_catch_3(0) | 0;
     getTempRet0() | 0;
     break label$3;
    }
    $3 = __cxa_find_matching_catch_3(0) | 0;
    getTempRet0() | 0;
    emscripten__val___val_28_29($5);
   }
   dlfree($4);
  }
  __cxa_begin_catch($3 | 0) | 0;
  HEAP32[16874] = 0;
  __invoke_void___22class_std____2__vector_13_22__i32(1026, $2 | 0, $1 | 0);
  $0 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$8 : {
   label$9 : {
    if (($0 | 0) != 1) {
     HEAP32[16874] = 0;
     __invoke_void(934);
     $0 = HEAP32[16874];
     HEAP32[16874] = 0;
     if (($0 | 0) != 1) {
      break label$9
     }
    }
    $0 = __cxa_find_matching_catch_2() | 0;
    getTempRet0() | 0;
    HEAP32[16874] = 0;
    __invoke_void(23);
    $1 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($1 | 0) != 1) {
     break label$8
    }
    $0 = __cxa_find_matching_catch_3(0) | 0;
    getTempRet0() | 0;
    __clang_call_terminate($0);
   }
   abort();
  }
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____shared_ptr_pointer_convert__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_convert__20___val_deleter_2c_20std____2__allocator_convert__20_____shared_ptr_pointer_28convert__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_convert__20___val_deleter_2c_20std____2__allocator_convert__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0;
  $3 = global$0 - 32 | 0;
  $4 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  HEAP32[$3 + 20 >> 2] = $1;
  std____2____shared_weak_count____shared_weak_count_28long_29($0);
  HEAP32[$0 >> 2] = 13224;
  HEAP32[16874] = 0;
  $1 = std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_____compressed_pair_maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__28maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter___29($3 + 8 | 0, $3 + 20 | 0, $2);
  $2 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    if (($2 | 0) != 1) {
     HEAP32[16874] = 0;
     std____2____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20_____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20__28std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter____2c_20std____2__allocator_maxiOsc____29($0 + 12 | 0, $1, $3 + 24 | 0);
     $2 = HEAP32[16874];
     HEAP32[16874] = 0;
     if (($2 | 0) == 1) {
      break label$3
     }
     std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter______compressed_pair_28_29($1);
     $1 = $3 + 32 | 0;
     if ($1 >>> 0 < global$2 >>> 0) {
      __handle_stack_overflow()
     }
     global$0 = $1;
     return $0 | 0;
    }
    $0 = __cxa_find_matching_catch_2() | 0;
    getTempRet0() | 0;
    break label$2;
   }
   $0 = __cxa_find_matching_catch_2() | 0;
   getTempRet0() | 0;
   std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter______compressed_pair_28_29($1);
  }
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____shared_ptr_pointer_convert__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_convert__20___val_deleter_2c_20std____2__allocator_convert__20______shared_ptr_pointer_28_29($0) {
  $0 = $0 | 0;
  HEAP32[$0 >> 2] = 13224;
  std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter______compressed_pair_28_29($0 + 12 | 0);
  return $0 | 0;
 }
 
 function std____2____shared_ptr_pointer_convert__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_convert__20___val_deleter_2c_20std____2__allocator_convert__20______shared_ptr_pointer_28_29_1($0) {
  $0 = $0 | 0;
  dlfree(std____2____shared_ptr_pointer_convert__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_convert__20___val_deleter_2c_20std____2__allocator_convert__20______shared_ptr_pointer_28_29($0));
 }
 
 function std____2____shared_ptr_pointer_convert__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_convert__20___val_deleter_2c_20std____2__allocator_convert__20_____on_zero_shared_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $0 = $0 + 12 | 0;
  $1 = std____2____compressed_pair__IO_FILE__2c_20int_20_28__29_28_IO_FILE__29___second_28_29($0);
  $2 = HEAP32[$0 >> 2];
  HEAP32[16874] = 0;
  __invoke_void___22class_std____2__vector_13_22__i32(1026, $1 | 0, $2 | 0);
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($1 | 0) != 1) {
   emscripten__val___val_28_29(std____2____compressed_pair__IO_FILE__2c_20int_20_28__29_28_IO_FILE__29___second_28_29($0));
   return;
  }
  $0 = __cxa_find_matching_catch_3(0) | 0;
  getTempRet0() | 0;
  __clang_call_terminate($0);
  abort();
 }
 
 function std____2____shared_ptr_pointer_convert__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_convert__20___val_deleter_2c_20std____2__allocator_convert__20_____get_deleter_28std__type_info_20const__29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  if (std__type_info__operator___28std__type_info_20const__29_20const($1, 13464)) {
   $0 = std____2____compressed_pair__IO_FILE__2c_20int_20_28__29_28_IO_FILE__29___second_28_29($0 + 12 | 0)
  } else {
   $0 = 0
  }
  return $0 | 0;
 }
 
 function std____2__shared_ptr_convert__20std____2__shared_ptr_convert___make_shared___28_29($0) {
  var $1 = 0, $2 = 0, $3 = 0;
  $2 = global$0 - 48 | 0;
  $1 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  $1 = $2 + 40 | 0;
  $1 = std____2__unique_ptr_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20___unique_ptr_true_2c_20void__28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20__2c_20true_____good_rval_ref_type_29($2 + 24 | 0, operator_20new_28unsigned_20long_29(16), std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20_____allocator_destructor_28std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20___2c_20unsigned_20long_29($2 + 16 | 0, $1, 1));
  $3 = HEAP32[$1 >> 2];
  HEAP32[16874] = 0;
  __invoke_i1___22class_std____2__basic_ifstream_22_(1029, $3 | 0) | 0;
  $3 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($3 | 0) != 1) {
   $0 = std____2__shared_ptr_maxiOsc___shared_ptr_28_29($0);
   HEAP32[$0 >> 2] = std____2____split_buffer_double_2c_20std____2__allocator_double_______end_cap_28_29(HEAP32[$1 >> 2]);
   HEAP32[$0 + 4 >> 2] = std____2__unique_ptr__IO_FILE_2c_20int_20_28__29_28_IO_FILE__29___release_28_29($1);
   $0 = HEAP32[$0 >> 2];
   HEAP32[$2 + 4 >> 2] = $0;
   HEAP32[$2 >> 2] = $0;
   std____2__unique_ptr_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20___reset_28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___29($1);
   $0 = $2 + 48 | 0;
   if ($0 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $0;
   return;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__unique_ptr_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20___reset_28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___29($1);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____shared_ptr_emplace_convert_2c_20std____2__allocator_convert__20_____shared_ptr_emplace_28std____2__allocator_convert__29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  std____2____shared_weak_count____shared_weak_count_28long_29($0);
  HEAP32[$0 >> 2] = 13524;
  HEAP32[16874] = 0;
  $2 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($2 | 0) != 1) {
   $1 = $1 + 16 | 0;
   if ($1 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $1;
   return $0 | 0;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  __resumeException($0 | 0);
  abort();
 }
 
 function emscripten__internal__FunctionInvoker_double_20_28__29_28int_29_2c_20double_2c_20int___invoke_28double_20_28___29_28int_29_2c_20int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0.0;
  $2 = global$0 - 16 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  HEAPF64[$2 + 8 >> 3] = FUNCTION_TABLE[HEAP32[$0 >> 2]]($1);
  $4 = HEAPF64[$2 + 8 >> 3];
  $0 = $2 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
  return +$4;
 }
 
 function emscripten__internal__FunctionInvoker_double_20_28__29_28double_29_2c_20double_2c_20double___invoke_28double_20_28___29_28double_29_2c_20double_29($0, $1) {
  $0 = $0 | 0;
  $1 = +$1;
  var $2 = 0, $3 = 0;
  $2 = global$0 - 16 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  HEAPF64[$2 + 8 >> 3] = FUNCTION_TABLE[HEAP32[$0 >> 2]]($1);
  $1 = HEAPF64[$2 + 8 >> 3];
  $0 = $2 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
  return +$1;
 }
 
 function std____2__shared_ptr_maxiSampleAndHold___shared_ptr_maxiSampleAndHold_2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiSampleAndHold__20___val_deleter__28maxiSampleAndHold__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiSampleAndHold__20___val_deleter_2c_20std____2__enable_if_is_convertible_maxiSampleAndHold__2c_20maxiSampleAndHold____value_2c_20std____2__shared_ptr_maxiSampleAndHold_____nat___type_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0;
  $3 = global$0 - 32 | 0;
  $4 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  HEAP32[$0 >> 2] = $1;
  HEAP32[16874] = 0;
  $4 = __invoke_i1___22class_std____2__basic_ifstream_22_(930, 20) | 0;
  $5 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      if (($5 | 0) != 1) {
       HEAP32[16874] = 0;
       $5 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1032, $3 + 24 | 0, $2 | 0) | 0;
       $6 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($6 | 0) == 1) {
        break label$5
       }
       HEAP32[16874] = 0;
       __invoke___22class_std____2__basic_istream_22____22class_std____2__basic_istream_22__i8__i32(1033, $4 | 0, $1 | 0, $5 | 0) | 0;
       $6 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($6 | 0) == 1) {
        break label$4
       }
       HEAP32[$0 + 4 >> 2] = $4;
       emscripten__val___val_28_29($5);
       HEAP32[$3 + 4 >> 2] = $1;
       HEAP32[$3 >> 2] = $1;
       $1 = $3 + 32 | 0;
       if ($1 >>> 0 < global$2 >>> 0) {
        __handle_stack_overflow()
       }
       global$0 = $1;
       return $0 | 0;
      }
      $3 = __cxa_find_matching_catch_3(0) | 0;
      getTempRet0() | 0;
      break label$2;
     }
     $3 = __cxa_find_matching_catch_3(0) | 0;
     getTempRet0() | 0;
     break label$3;
    }
    $3 = __cxa_find_matching_catch_3(0) | 0;
    getTempRet0() | 0;
    emscripten__val___val_28_29($5);
   }
   dlfree($4);
  }
  __cxa_begin_catch($3 | 0) | 0;
  HEAP32[16874] = 0;
  __invoke_void___22class_std____2__vector_13_22__i32(1034, $2 | 0, $1 | 0);
  $0 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$8 : {
   label$9 : {
    if (($0 | 0) != 1) {
     HEAP32[16874] = 0;
     __invoke_void(934);
     $0 = HEAP32[16874];
     HEAP32[16874] = 0;
     if (($0 | 0) != 1) {
      break label$9
     }
    }
    $0 = __cxa_find_matching_catch_2() | 0;
    getTempRet0() | 0;
    HEAP32[16874] = 0;
    __invoke_void(23);
    $1 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($1 | 0) != 1) {
     break label$8
    }
    $0 = __cxa_find_matching_catch_3(0) | 0;
    getTempRet0() | 0;
    __clang_call_terminate($0);
   }
   abort();
  }
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____shared_ptr_pointer_maxiSampleAndHold__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiSampleAndHold__20___val_deleter_2c_20std____2__allocator_maxiSampleAndHold__20_____shared_ptr_pointer_28maxiSampleAndHold__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiSampleAndHold__20___val_deleter_2c_20std____2__allocator_maxiSampleAndHold__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0;
  $3 = global$0 - 32 | 0;
  $4 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  HEAP32[$3 + 20 >> 2] = $1;
  std____2____shared_weak_count____shared_weak_count_28long_29($0);
  HEAP32[$0 >> 2] = 13752;
  HEAP32[16874] = 0;
  $1 = std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_____compressed_pair_maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__28maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter___29($3 + 8 | 0, $3 + 20 | 0, $2);
  $2 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    if (($2 | 0) != 1) {
     HEAP32[16874] = 0;
     std____2____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20_____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20__28std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter____2c_20std____2__allocator_maxiOsc____29($0 + 12 | 0, $1, $3 + 24 | 0);
     $2 = HEAP32[16874];
     HEAP32[16874] = 0;
     if (($2 | 0) == 1) {
      break label$3
     }
     std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter______compressed_pair_28_29($1);
     $1 = $3 + 32 | 0;
     if ($1 >>> 0 < global$2 >>> 0) {
      __handle_stack_overflow()
     }
     global$0 = $1;
     return $0 | 0;
    }
    $0 = __cxa_find_matching_catch_2() | 0;
    getTempRet0() | 0;
    break label$2;
   }
   $0 = __cxa_find_matching_catch_2() | 0;
   getTempRet0() | 0;
   std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter______compressed_pair_28_29($1);
  }
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____shared_ptr_pointer_maxiSampleAndHold__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiSampleAndHold__20___val_deleter_2c_20std____2__allocator_maxiSampleAndHold__20______shared_ptr_pointer_28_29($0) {
  $0 = $0 | 0;
  HEAP32[$0 >> 2] = 13752;
  std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter______compressed_pair_28_29($0 + 12 | 0);
  return $0 | 0;
 }
 
 function std____2____shared_ptr_pointer_maxiSampleAndHold__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiSampleAndHold__20___val_deleter_2c_20std____2__allocator_maxiSampleAndHold__20______shared_ptr_pointer_28_29_1($0) {
  $0 = $0 | 0;
  dlfree(std____2____shared_ptr_pointer_maxiSampleAndHold__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiSampleAndHold__20___val_deleter_2c_20std____2__allocator_maxiSampleAndHold__20______shared_ptr_pointer_28_29($0));
 }
 
 function std____2____shared_ptr_pointer_maxiSampleAndHold__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiSampleAndHold__20___val_deleter_2c_20std____2__allocator_maxiSampleAndHold__20_____on_zero_shared_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $0 = $0 + 12 | 0;
  $1 = std____2____compressed_pair__IO_FILE__2c_20int_20_28__29_28_IO_FILE__29___second_28_29($0);
  $2 = HEAP32[$0 >> 2];
  HEAP32[16874] = 0;
  __invoke_void___22class_std____2__vector_13_22__i32(1034, $1 | 0, $2 | 0);
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($1 | 0) != 1) {
   emscripten__val___val_28_29(std____2____compressed_pair__IO_FILE__2c_20int_20_28__29_28_IO_FILE__29___second_28_29($0));
   return;
  }
  $0 = __cxa_find_matching_catch_3(0) | 0;
  getTempRet0() | 0;
  __clang_call_terminate($0);
  abort();
 }
 
 function std____2____shared_ptr_pointer_maxiSampleAndHold__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiSampleAndHold__20___val_deleter_2c_20std____2__allocator_maxiSampleAndHold__20_____get_deleter_28std__type_info_20const__29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  if (std__type_info__operator___28std__type_info_20const__29_20const($1, 14012)) {
   $0 = std____2____compressed_pair__IO_FILE__2c_20int_20_28__29_28_IO_FILE__29___second_28_29($0 + 12 | 0)
  } else {
   $0 = 0
  }
  return $0 | 0;
 }
 
 function std____2__shared_ptr_maxiSampleAndHold__20std____2__shared_ptr_maxiSampleAndHold___make_shared___28_29($0) {
  var $1 = 0, $2 = 0, $3 = 0;
  $2 = global$0 - 48 | 0;
  $1 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  $1 = $2 + 40 | 0;
  $1 = std____2__unique_ptr_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20___unique_ptr_true_2c_20void__28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20__2c_20true_____good_rval_ref_type_29($2 + 24 | 0, operator_20new_28unsigned_20long_29(40), std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20_____allocator_destructor_28std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20___2c_20unsigned_20long_29($2 + 16 | 0, $1, 1));
  $3 = HEAP32[$1 >> 2];
  HEAP32[16874] = 0;
  __invoke_i1___22class_std____2__basic_ifstream_22_(1037, $3 | 0) | 0;
  $3 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($3 | 0) != 1) {
   $0 = std____2__shared_ptr_maxiOsc___shared_ptr_28_29($0);
   HEAP32[$0 >> 2] = std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___get_28_29(HEAP32[$1 >> 2]);
   HEAP32[$0 + 4 >> 2] = std____2__unique_ptr__IO_FILE_2c_20int_20_28__29_28_IO_FILE__29___release_28_29($1);
   $0 = HEAP32[$0 >> 2];
   HEAP32[$2 + 4 >> 2] = $0;
   HEAP32[$2 >> 2] = $0;
   std____2__unique_ptr_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20___reset_28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___29($1);
   $0 = $2 + 48 | 0;
   if ($0 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $0;
   return;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__unique_ptr_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20___reset_28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___29($1);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____shared_ptr_emplace_maxiSampleAndHold_2c_20std____2__allocator_maxiSampleAndHold__20_____shared_ptr_emplace_28std____2__allocator_maxiSampleAndHold__29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  std____2____shared_weak_count____shared_weak_count_28long_29($0);
  HEAP32[$0 >> 2] = 14084;
  HEAP32[16874] = 0;
  std____2____compressed_pair_std____2__allocator_maxiSampleAndHold__2c_20maxiSampleAndHold_____compressed_pair_std____2__allocator_maxiSampleAndHold__2c_20true__28std____2__allocator_maxiSampleAndHold____29($0 + 16 | 0, $1 + 8 | 0);
  $2 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($2 | 0) != 1) {
   $1 = $1 + 16 | 0;
   if ($1 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $1;
   return $0 | 0;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____compressed_pair_std____2__allocator_maxiSampleAndHold__2c_20maxiSampleAndHold_____compressed_pair_std____2__allocator_maxiSampleAndHold__2c_20true__28std____2__allocator_maxiSampleAndHold____29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  std____2____compressed_pair_elem_maxiSampleAndHold_2c_201_2c_20false_____compressed_pair_elem_28_29($0);
  return $0 | 0;
 }
 
 function std____2____compressed_pair_elem_maxiSampleAndHold_2c_201_2c_20false_____compressed_pair_elem_28_29($0) {
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP32[$0 + 20 >> 2] = 0;
  HEAP32[$0 + 8 >> 2] = 0;
  HEAP32[$0 + 12 >> 2] = 0;
  maxiSampleAndHold__maxiSampleAndHold_28_29($0);
 }
 
 function maxiSampleAndHold__maxiSampleAndHold_28_29($0) {
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP8[$0 + 16 | 0] = 1;
  HEAP32[$0 + 8 >> 2] = 0;
  HEAP32[$0 + 12 >> 2] = 0;
 }
 
 function std____2__shared_ptr_maxiNonlinearity___shared_ptr_maxiNonlinearity_2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiNonlinearity__20___val_deleter__28maxiNonlinearity__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiNonlinearity__20___val_deleter_2c_20std____2__enable_if_is_convertible_maxiNonlinearity__2c_20maxiNonlinearity____value_2c_20std____2__shared_ptr_maxiNonlinearity_____nat___type_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0;
  $3 = global$0 - 32 | 0;
  $4 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  HEAP32[$0 >> 2] = $1;
  HEAP32[16874] = 0;
  $4 = __invoke_i1___22class_std____2__basic_ifstream_22_(930, 20) | 0;
  $5 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      if (($5 | 0) != 1) {
       HEAP32[16874] = 0;
       $5 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1040, $3 + 24 | 0, $2 | 0) | 0;
       $6 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($6 | 0) == 1) {
        break label$5
       }
       HEAP32[16874] = 0;
       __invoke___22class_std____2__basic_istream_22____22class_std____2__basic_istream_22__i8__i32(1041, $4 | 0, $1 | 0, $5 | 0) | 0;
       $6 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($6 | 0) == 1) {
        break label$4
       }
       HEAP32[$0 + 4 >> 2] = $4;
       emscripten__val___val_28_29($5);
       HEAP32[$3 + 4 >> 2] = $1;
       HEAP32[$3 >> 2] = $1;
       $1 = $3 + 32 | 0;
       if ($1 >>> 0 < global$2 >>> 0) {
        __handle_stack_overflow()
       }
       global$0 = $1;
       return $0 | 0;
      }
      $3 = __cxa_find_matching_catch_3(0) | 0;
      getTempRet0() | 0;
      break label$2;
     }
     $3 = __cxa_find_matching_catch_3(0) | 0;
     getTempRet0() | 0;
     break label$3;
    }
    $3 = __cxa_find_matching_catch_3(0) | 0;
    getTempRet0() | 0;
    emscripten__val___val_28_29($5);
   }
   dlfree($4);
  }
  __cxa_begin_catch($3 | 0) | 0;
  HEAP32[16874] = 0;
  __invoke_void___22class_std____2__vector_13_22__i32(1042, $2 | 0, $1 | 0);
  $0 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$8 : {
   label$9 : {
    if (($0 | 0) != 1) {
     HEAP32[16874] = 0;
     __invoke_void(934);
     $0 = HEAP32[16874];
     HEAP32[16874] = 0;
     if (($0 | 0) != 1) {
      break label$9
     }
    }
    $0 = __cxa_find_matching_catch_2() | 0;
    getTempRet0() | 0;
    HEAP32[16874] = 0;
    __invoke_void(23);
    $1 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($1 | 0) != 1) {
     break label$8
    }
    $0 = __cxa_find_matching_catch_3(0) | 0;
    getTempRet0() | 0;
    __clang_call_terminate($0);
   }
   abort();
  }
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____shared_ptr_pointer_maxiNonlinearity__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiNonlinearity__20___val_deleter_2c_20std____2__allocator_maxiNonlinearity__20_____shared_ptr_pointer_28maxiNonlinearity__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiNonlinearity__20___val_deleter_2c_20std____2__allocator_maxiNonlinearity__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0;
  $3 = global$0 - 32 | 0;
  $4 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  HEAP32[$3 + 20 >> 2] = $1;
  std____2____shared_weak_count____shared_weak_count_28long_29($0);
  HEAP32[$0 >> 2] = 14320;
  HEAP32[16874] = 0;
  $1 = std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_____compressed_pair_maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__28maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter___29($3 + 8 | 0, $3 + 20 | 0, $2);
  $2 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    if (($2 | 0) != 1) {
     HEAP32[16874] = 0;
     std____2____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20_____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20__28std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter____2c_20std____2__allocator_maxiOsc____29($0 + 12 | 0, $1, $3 + 24 | 0);
     $2 = HEAP32[16874];
     HEAP32[16874] = 0;
     if (($2 | 0) == 1) {
      break label$3
     }
     std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter______compressed_pair_28_29($1);
     $1 = $3 + 32 | 0;
     if ($1 >>> 0 < global$2 >>> 0) {
      __handle_stack_overflow()
     }
     global$0 = $1;
     return $0 | 0;
    }
    $0 = __cxa_find_matching_catch_2() | 0;
    getTempRet0() | 0;
    break label$2;
   }
   $0 = __cxa_find_matching_catch_2() | 0;
   getTempRet0() | 0;
   std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter______compressed_pair_28_29($1);
  }
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____shared_ptr_pointer_maxiNonlinearity__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiNonlinearity__20___val_deleter_2c_20std____2__allocator_maxiNonlinearity__20______shared_ptr_pointer_28_29($0) {
  $0 = $0 | 0;
  HEAP32[$0 >> 2] = 14320;
  std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter______compressed_pair_28_29($0 + 12 | 0);
  return $0 | 0;
 }
 
 function std____2____shared_ptr_pointer_maxiNonlinearity__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiNonlinearity__20___val_deleter_2c_20std____2__allocator_maxiNonlinearity__20______shared_ptr_pointer_28_29_1($0) {
  $0 = $0 | 0;
  dlfree(std____2____shared_ptr_pointer_maxiNonlinearity__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiNonlinearity__20___val_deleter_2c_20std____2__allocator_maxiNonlinearity__20______shared_ptr_pointer_28_29($0));
 }
 
 function std____2____shared_ptr_pointer_maxiNonlinearity__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiNonlinearity__20___val_deleter_2c_20std____2__allocator_maxiNonlinearity__20_____on_zero_shared_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $0 = $0 + 12 | 0;
  $1 = std____2____compressed_pair__IO_FILE__2c_20int_20_28__29_28_IO_FILE__29___second_28_29($0);
  $2 = HEAP32[$0 >> 2];
  HEAP32[16874] = 0;
  __invoke_void___22class_std____2__vector_13_22__i32(1042, $1 | 0, $2 | 0);
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($1 | 0) != 1) {
   emscripten__val___val_28_29(std____2____compressed_pair__IO_FILE__2c_20int_20_28__29_28_IO_FILE__29___second_28_29($0));
   return;
  }
  $0 = __cxa_find_matching_catch_3(0) | 0;
  getTempRet0() | 0;
  __clang_call_terminate($0);
  abort();
 }
 
 function std____2____shared_ptr_pointer_maxiNonlinearity__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiNonlinearity__20___val_deleter_2c_20std____2__allocator_maxiNonlinearity__20_____get_deleter_28std__type_info_20const__29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  if (std__type_info__operator___28std__type_info_20const__29_20const($1, 14580)) {
   $0 = std____2____compressed_pair__IO_FILE__2c_20int_20_28__29_28_IO_FILE__29___second_28_29($0 + 12 | 0)
  } else {
   $0 = 0
  }
  return $0 | 0;
 }
 
 function std____2__shared_ptr_maxiNonlinearity__20std____2__shared_ptr_maxiNonlinearity___make_shared___28_29($0) {
  var $1 = 0, $2 = 0, $3 = 0;
  $2 = global$0 - 48 | 0;
  $1 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  $1 = $2 + 40 | 0;
  $1 = std____2__unique_ptr_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20___unique_ptr_true_2c_20void__28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20__2c_20true_____good_rval_ref_type_29($2 + 24 | 0, operator_20new_28unsigned_20long_29(16), std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20_____allocator_destructor_28std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20___2c_20unsigned_20long_29($2 + 16 | 0, $1, 1));
  $3 = HEAP32[$1 >> 2];
  HEAP32[16874] = 0;
  __invoke_i1___22class_std____2__basic_ifstream_22_(1045, $3 | 0) | 0;
  $3 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($3 | 0) != 1) {
   $0 = std____2__shared_ptr_maxiOsc___shared_ptr_28_29($0);
   HEAP32[$0 >> 2] = std____2____split_buffer_double_2c_20std____2__allocator_double_______end_cap_28_29(HEAP32[$1 >> 2]);
   HEAP32[$0 + 4 >> 2] = std____2__unique_ptr__IO_FILE_2c_20int_20_28__29_28_IO_FILE__29___release_28_29($1);
   $0 = HEAP32[$0 >> 2];
   HEAP32[$2 + 4 >> 2] = $0;
   HEAP32[$2 >> 2] = $0;
   std____2__unique_ptr_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20___reset_28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___29($1);
   $0 = $2 + 48 | 0;
   if ($0 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $0;
   return;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__unique_ptr_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20___reset_28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___29($1);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____shared_ptr_emplace_maxiNonlinearity_2c_20std____2__allocator_maxiNonlinearity__20_____shared_ptr_emplace_28std____2__allocator_maxiNonlinearity__29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  std____2____shared_weak_count____shared_weak_count_28long_29($0);
  HEAP32[$0 >> 2] = 14652;
  HEAP32[16874] = 0;
  $2 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($2 | 0) != 1) {
   $1 = $1 + 16 | 0;
   if ($1 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $1;
   return $0 | 0;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2__shared_ptr_maxiFlanger___shared_ptr_maxiFlanger_2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiFlanger__20___val_deleter__28maxiFlanger__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiFlanger__20___val_deleter_2c_20std____2__enable_if_is_convertible_maxiFlanger__2c_20maxiFlanger____value_2c_20std____2__shared_ptr_maxiFlanger_____nat___type_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0;
  $3 = global$0 - 32 | 0;
  $4 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  HEAP32[$0 >> 2] = $1;
  HEAP32[16874] = 0;
  $4 = __invoke_i1___22class_std____2__basic_ifstream_22_(930, 20) | 0;
  $5 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      if (($5 | 0) != 1) {
       HEAP32[16874] = 0;
       $5 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1048, $3 + 24 | 0, $2 | 0) | 0;
       $6 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($6 | 0) == 1) {
        break label$5
       }
       HEAP32[16874] = 0;
       __invoke___22class_std____2__basic_istream_22____22class_std____2__basic_istream_22__i8__i32(1049, $4 | 0, $1 | 0, $5 | 0) | 0;
       $6 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($6 | 0) == 1) {
        break label$4
       }
       HEAP32[$0 + 4 >> 2] = $4;
       emscripten__val___val_28_29($5);
       HEAP32[$3 + 4 >> 2] = $1;
       HEAP32[$3 >> 2] = $1;
       $1 = $3 + 32 | 0;
       if ($1 >>> 0 < global$2 >>> 0) {
        __handle_stack_overflow()
       }
       global$0 = $1;
       return $0 | 0;
      }
      $3 = __cxa_find_matching_catch_3(0) | 0;
      getTempRet0() | 0;
      break label$2;
     }
     $3 = __cxa_find_matching_catch_3(0) | 0;
     getTempRet0() | 0;
     break label$3;
    }
    $3 = __cxa_find_matching_catch_3(0) | 0;
    getTempRet0() | 0;
    emscripten__val___val_28_29($5);
   }
   dlfree($4);
  }
  __cxa_begin_catch($3 | 0) | 0;
  HEAP32[16874] = 0;
  __invoke_void___22class_std____2__vector_13_22__i32(1050, $2 | 0, $1 | 0);
  $0 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$8 : {
   label$9 : {
    if (($0 | 0) != 1) {
     HEAP32[16874] = 0;
     __invoke_void(934);
     $0 = HEAP32[16874];
     HEAP32[16874] = 0;
     if (($0 | 0) != 1) {
      break label$9
     }
    }
    $0 = __cxa_find_matching_catch_2() | 0;
    getTempRet0() | 0;
    HEAP32[16874] = 0;
    __invoke_void(23);
    $1 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($1 | 0) != 1) {
     break label$8
    }
    $0 = __cxa_find_matching_catch_3(0) | 0;
    getTempRet0() | 0;
    __clang_call_terminate($0);
   }
   abort();
  }
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____shared_ptr_pointer_maxiFlanger__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiFlanger__20___val_deleter_2c_20std____2__allocator_maxiFlanger__20_____shared_ptr_pointer_28maxiFlanger__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiFlanger__20___val_deleter_2c_20std____2__allocator_maxiFlanger__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0;
  $3 = global$0 - 32 | 0;
  $4 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  HEAP32[$3 + 20 >> 2] = $1;
  std____2____shared_weak_count____shared_weak_count_28long_29($0);
  HEAP32[$0 >> 2] = 14900;
  HEAP32[16874] = 0;
  $1 = std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_____compressed_pair_maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__28maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter___29($3 + 8 | 0, $3 + 20 | 0, $2);
  $2 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    if (($2 | 0) != 1) {
     HEAP32[16874] = 0;
     std____2____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20_____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20__28std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter____2c_20std____2__allocator_maxiOsc____29($0 + 12 | 0, $1, $3 + 24 | 0);
     $2 = HEAP32[16874];
     HEAP32[16874] = 0;
     if (($2 | 0) == 1) {
      break label$3
     }
     std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter______compressed_pair_28_29($1);
     $1 = $3 + 32 | 0;
     if ($1 >>> 0 < global$2 >>> 0) {
      __handle_stack_overflow()
     }
     global$0 = $1;
     return $0 | 0;
    }
    $0 = __cxa_find_matching_catch_2() | 0;
    getTempRet0() | 0;
    break label$2;
   }
   $0 = __cxa_find_matching_catch_2() | 0;
   getTempRet0() | 0;
   std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter______compressed_pair_28_29($1);
  }
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____shared_ptr_pointer_maxiFlanger__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiFlanger__20___val_deleter_2c_20std____2__allocator_maxiFlanger__20______shared_ptr_pointer_28_29($0) {
  $0 = $0 | 0;
  HEAP32[$0 >> 2] = 14900;
  std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter______compressed_pair_28_29($0 + 12 | 0);
  return $0 | 0;
 }
 
 function std____2____shared_ptr_pointer_maxiFlanger__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiFlanger__20___val_deleter_2c_20std____2__allocator_maxiFlanger__20______shared_ptr_pointer_28_29_1($0) {
  $0 = $0 | 0;
  dlfree(std____2____shared_ptr_pointer_maxiFlanger__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiFlanger__20___val_deleter_2c_20std____2__allocator_maxiFlanger__20______shared_ptr_pointer_28_29($0));
 }
 
 function std____2____shared_ptr_pointer_maxiFlanger__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiFlanger__20___val_deleter_2c_20std____2__allocator_maxiFlanger__20_____on_zero_shared_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $0 = $0 + 12 | 0;
  $1 = std____2____compressed_pair__IO_FILE__2c_20int_20_28__29_28_IO_FILE__29___second_28_29($0);
  $2 = HEAP32[$0 >> 2];
  HEAP32[16874] = 0;
  __invoke_void___22class_std____2__vector_13_22__i32(1050, $1 | 0, $2 | 0);
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($1 | 0) != 1) {
   emscripten__val___val_28_29(std____2____compressed_pair__IO_FILE__2c_20int_20_28__29_28_IO_FILE__29___second_28_29($0));
   return;
  }
  $0 = __cxa_find_matching_catch_3(0) | 0;
  getTempRet0() | 0;
  __clang_call_terminate($0);
  abort();
 }
 
 function std____2____shared_ptr_pointer_maxiFlanger__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiFlanger__20___val_deleter_2c_20std____2__allocator_maxiFlanger__20_____get_deleter_28std__type_info_20const__29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  if (std__type_info__operator___28std__type_info_20const__29_20const($1, 15152)) {
   $0 = std____2____compressed_pair__IO_FILE__2c_20int_20_28__29_28_IO_FILE__29___second_28_29($0 + 12 | 0)
  } else {
   $0 = 0
  }
  return $0 | 0;
 }
 
 function std____2__shared_ptr_maxiFlanger__20std____2__shared_ptr_maxiFlanger___make_shared___28_29($0) {
  var $1 = 0, $2 = 0, $3 = 0;
  $2 = global$0 - 48 | 0;
  $1 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  $1 = $2 + 40 | 0;
  $1 = std____2__unique_ptr_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20___unique_ptr_true_2c_20void__28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20__2c_20true_____good_rval_ref_type_29($2 + 24 | 0, operator_20new_28unsigned_20long_29(705704), std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20_____allocator_destructor_28std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20___2c_20unsigned_20long_29($2 + 16 | 0, $1, 1));
  $3 = HEAP32[$1 >> 2];
  HEAP32[16874] = 0;
  __invoke_i1___22class_std____2__basic_ifstream_22_(1053, $3 | 0) | 0;
  $3 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($3 | 0) != 1) {
   $0 = std____2__shared_ptr_maxiOsc___shared_ptr_28_29($0);
   HEAP32[$0 >> 2] = std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___get_28_29(HEAP32[$1 >> 2]);
   HEAP32[$0 + 4 >> 2] = std____2__unique_ptr__IO_FILE_2c_20int_20_28__29_28_IO_FILE__29___release_28_29($1);
   $0 = HEAP32[$0 >> 2];
   HEAP32[$2 + 4 >> 2] = $0;
   HEAP32[$2 >> 2] = $0;
   std____2__unique_ptr_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20___reset_28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___29($1);
   $0 = $2 + 48 | 0;
   if ($0 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $0;
   return;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__unique_ptr_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20___reset_28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___29($1);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____shared_ptr_emplace_maxiFlanger_2c_20std____2__allocator_maxiFlanger__20_____shared_ptr_emplace_28std____2__allocator_maxiFlanger__29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  std____2____shared_weak_count____shared_weak_count_28long_29($0);
  HEAP32[$0 >> 2] = 15216;
  HEAP32[16874] = 0;
  std____2____compressed_pair_std____2__allocator_maxiFlanger__2c_20maxiFlanger_____compressed_pair_std____2__allocator_maxiFlanger__2c_20true__28std____2__allocator_maxiFlanger____29($0 + 16 | 0, $1 + 8 | 0);
  $2 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($2 | 0) != 1) {
   $1 = $1 + 16 | 0;
   if ($1 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $1;
   return $0 | 0;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____compressed_pair_std____2__allocator_maxiFlanger__2c_20maxiFlanger_____compressed_pair_std____2__allocator_maxiFlanger__2c_20true__28std____2__allocator_maxiFlanger____29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1 = memset($0, 0, 705688);
  maxiDelayline__maxiDelayline_28_29($1);
  maxiOsc__maxiOsc_28_29($1 + 705640 | 0);
  return $0 | 0;
 }
 
 function emscripten__internal__MethodInvoker_double_20_28maxiFlanger____29_28double_2c_20unsigned_20int_2c_20double_2c_20double_2c_20double_29_2c_20double_2c_20maxiFlanger__2c_20double_2c_20unsigned_20int_2c_20double_2c_20double_2c_20double___invoke_28double_20_28maxiFlanger____20const__29_28double_2c_20unsigned_20int_2c_20double_2c_20double_2c_20double_29_2c_20maxiFlanger__2c_20double_2c_20unsigned_20int_2c_20double_2c_20double_2c_20double_29($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = +$2;
  $3 = $3 | 0;
  $4 = +$4;
  $5 = +$5;
  $6 = +$6;
  var $7 = 0, $8 = 0;
  $8 = global$0 - 16 | 0;
  $7 = $8;
  if ($8 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $7;
  $7 = $1;
  $1 = HEAP32[$0 + 4 >> 2];
  $7 = $7 + ($1 >> 1) | 0;
  $0 = HEAP32[$0 >> 2];
  HEAPF64[$8 + 8 >> 3] = FUNCTION_TABLE[$1 & 1 ? HEAP32[$0 + HEAP32[$7 >> 2] >> 2] : $0]($7, $2, $3, $4, $5, $6);
  $2 = HEAPF64[$8 + 8 >> 3];
  $0 = $8 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
  return +$2;
 }
 
 function std____2__shared_ptr_maxiChorus___shared_ptr_maxiChorus_2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiChorus__20___val_deleter__28maxiChorus__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiChorus__20___val_deleter_2c_20std____2__enable_if_is_convertible_maxiChorus__2c_20maxiChorus____value_2c_20std____2__shared_ptr_maxiChorus_____nat___type_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0;
  $3 = global$0 - 32 | 0;
  $4 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  HEAP32[$0 >> 2] = $1;
  HEAP32[16874] = 0;
  $4 = __invoke_i1___22class_std____2__basic_ifstream_22_(930, 20) | 0;
  $5 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      if (($5 | 0) != 1) {
       HEAP32[16874] = 0;
       $5 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1056, $3 + 24 | 0, $2 | 0) | 0;
       $6 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($6 | 0) == 1) {
        break label$5
       }
       HEAP32[16874] = 0;
       __invoke___22class_std____2__basic_istream_22____22class_std____2__basic_istream_22__i8__i32(1057, $4 | 0, $1 | 0, $5 | 0) | 0;
       $6 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($6 | 0) == 1) {
        break label$4
       }
       HEAP32[$0 + 4 >> 2] = $4;
       emscripten__val___val_28_29($5);
       HEAP32[$3 + 4 >> 2] = $1;
       HEAP32[$3 >> 2] = $1;
       $1 = $3 + 32 | 0;
       if ($1 >>> 0 < global$2 >>> 0) {
        __handle_stack_overflow()
       }
       global$0 = $1;
       return $0 | 0;
      }
      $3 = __cxa_find_matching_catch_3(0) | 0;
      getTempRet0() | 0;
      break label$2;
     }
     $3 = __cxa_find_matching_catch_3(0) | 0;
     getTempRet0() | 0;
     break label$3;
    }
    $3 = __cxa_find_matching_catch_3(0) | 0;
    getTempRet0() | 0;
    emscripten__val___val_28_29($5);
   }
   dlfree($4);
  }
  __cxa_begin_catch($3 | 0) | 0;
  HEAP32[16874] = 0;
  __invoke_void___22class_std____2__vector_13_22__i32(1058, $2 | 0, $1 | 0);
  $0 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$8 : {
   label$9 : {
    if (($0 | 0) != 1) {
     HEAP32[16874] = 0;
     __invoke_void(934);
     $0 = HEAP32[16874];
     HEAP32[16874] = 0;
     if (($0 | 0) != 1) {
      break label$9
     }
    }
    $0 = __cxa_find_matching_catch_2() | 0;
    getTempRet0() | 0;
    HEAP32[16874] = 0;
    __invoke_void(23);
    $1 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($1 | 0) != 1) {
     break label$8
    }
    $0 = __cxa_find_matching_catch_3(0) | 0;
    getTempRet0() | 0;
    __clang_call_terminate($0);
   }
   abort();
  }
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____shared_ptr_pointer_maxiChorus__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiChorus__20___val_deleter_2c_20std____2__allocator_maxiChorus__20_____shared_ptr_pointer_28maxiChorus__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiChorus__20___val_deleter_2c_20std____2__allocator_maxiChorus__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0;
  $3 = global$0 - 32 | 0;
  $4 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  HEAP32[$3 + 20 >> 2] = $1;
  std____2____shared_weak_count____shared_weak_count_28long_29($0);
  HEAP32[$0 >> 2] = 15460;
  HEAP32[16874] = 0;
  $1 = std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_____compressed_pair_maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__28maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter___29($3 + 8 | 0, $3 + 20 | 0, $2);
  $2 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    if (($2 | 0) != 1) {
     HEAP32[16874] = 0;
     std____2____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20_____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20__28std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter____2c_20std____2__allocator_maxiOsc____29($0 + 12 | 0, $1, $3 + 24 | 0);
     $2 = HEAP32[16874];
     HEAP32[16874] = 0;
     if (($2 | 0) == 1) {
      break label$3
     }
     std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter______compressed_pair_28_29($1);
     $1 = $3 + 32 | 0;
     if ($1 >>> 0 < global$2 >>> 0) {
      __handle_stack_overflow()
     }
     global$0 = $1;
     return $0 | 0;
    }
    $0 = __cxa_find_matching_catch_2() | 0;
    getTempRet0() | 0;
    break label$2;
   }
   $0 = __cxa_find_matching_catch_2() | 0;
   getTempRet0() | 0;
   std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter______compressed_pair_28_29($1);
  }
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____shared_ptr_pointer_maxiChorus__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiChorus__20___val_deleter_2c_20std____2__allocator_maxiChorus__20______shared_ptr_pointer_28_29($0) {
  $0 = $0 | 0;
  HEAP32[$0 >> 2] = 15460;
  std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter______compressed_pair_28_29($0 + 12 | 0);
  return $0 | 0;
 }
 
 function std____2____shared_ptr_pointer_maxiChorus__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiChorus__20___val_deleter_2c_20std____2__allocator_maxiChorus__20______shared_ptr_pointer_28_29_1($0) {
  $0 = $0 | 0;
  dlfree(std____2____shared_ptr_pointer_maxiChorus__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiChorus__20___val_deleter_2c_20std____2__allocator_maxiChorus__20______shared_ptr_pointer_28_29($0));
 }
 
 function std____2____shared_ptr_pointer_maxiChorus__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiChorus__20___val_deleter_2c_20std____2__allocator_maxiChorus__20_____on_zero_shared_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $0 = $0 + 12 | 0;
  $1 = std____2____compressed_pair__IO_FILE__2c_20int_20_28__29_28_IO_FILE__29___second_28_29($0);
  $2 = HEAP32[$0 >> 2];
  HEAP32[16874] = 0;
  __invoke_void___22class_std____2__vector_13_22__i32(1058, $1 | 0, $2 | 0);
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($1 | 0) != 1) {
   emscripten__val___val_28_29(std____2____compressed_pair__IO_FILE__2c_20int_20_28__29_28_IO_FILE__29___second_28_29($0));
   return;
  }
  $0 = __cxa_find_matching_catch_3(0) | 0;
  getTempRet0() | 0;
  __clang_call_terminate($0);
  abort();
 }
 
 function std____2____shared_ptr_pointer_maxiChorus__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiChorus__20___val_deleter_2c_20std____2__allocator_maxiChorus__20_____get_deleter_28std__type_info_20const__29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  if (std__type_info__operator___28std__type_info_20const__29_20const($1, 15708)) {
   $0 = std____2____compressed_pair__IO_FILE__2c_20int_20_28__29_28_IO_FILE__29___second_28_29($0 + 12 | 0)
  } else {
   $0 = 0
  }
  return $0 | 0;
 }
 
 function std____2__shared_ptr_maxiChorus__20std____2__shared_ptr_maxiChorus___make_shared___28_29($0) {
  var $1 = 0, $2 = 0, $3 = 0;
  $2 = global$0 - 48 | 0;
  $1 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  $1 = $2 + 40 | 0;
  $1 = std____2__unique_ptr_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20___unique_ptr_true_2c_20void__28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20__2c_20true_____good_rval_ref_type_29($2 + 24 | 0, operator_20new_28unsigned_20long_29(1411584), std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20_____allocator_destructor_28std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20___2c_20unsigned_20long_29($2 + 16 | 0, $1, 1));
  $3 = HEAP32[$1 >> 2];
  HEAP32[16874] = 0;
  __invoke_i1___22class_std____2__basic_ifstream_22_(1061, $3 | 0) | 0;
  $3 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($3 | 0) != 1) {
   $0 = std____2__shared_ptr_maxiOsc___shared_ptr_28_29($0);
   HEAP32[$0 >> 2] = std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___get_28_29(HEAP32[$1 >> 2]);
   HEAP32[$0 + 4 >> 2] = std____2__unique_ptr__IO_FILE_2c_20int_20_28__29_28_IO_FILE__29___release_28_29($1);
   $0 = HEAP32[$0 >> 2];
   HEAP32[$2 + 4 >> 2] = $0;
   HEAP32[$2 >> 2] = $0;
   std____2__unique_ptr_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20___reset_28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___29($1);
   $0 = $2 + 48 | 0;
   if ($0 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $0;
   return;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__unique_ptr_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20___reset_28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___29($1);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____shared_ptr_emplace_maxiChorus_2c_20std____2__allocator_maxiChorus__20_____shared_ptr_emplace_28std____2__allocator_maxiChorus__29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  std____2____shared_weak_count____shared_weak_count_28long_29($0);
  HEAP32[$0 >> 2] = 15772;
  HEAP32[16874] = 0;
  std____2____compressed_pair_std____2__allocator_maxiChorus__2c_20maxiChorus_____compressed_pair_std____2__allocator_maxiChorus__2c_20true__28std____2__allocator_maxiChorus____29($0 + 16 | 0, $1 + 8 | 0);
  $2 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($2 | 0) != 1) {
   $1 = $1 + 16 | 0;
   if ($1 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $1;
   return $0 | 0;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____compressed_pair_std____2__allocator_maxiChorus__2c_20maxiChorus_____compressed_pair_std____2__allocator_maxiChorus__2c_20true__28std____2__allocator_maxiChorus____29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  maxiChorus__maxiChorus_28_29(memset($0, 0, 1411568));
  return $0 | 0;
 }
 
 function maxiChorus__maxiChorus_28_29($0) {
  maxiDelayline__maxiDelayline_28_29($0);
  maxiDelayline__maxiDelayline_28_29($0 + 705640 | 0);
  maxiOsc__maxiOsc_28_29($0 + 1411280 | 0);
  maxiFilter__maxiFilter_28_29($0 + 1411328 | 0);
 }
 
 function std____2__shared_ptr_maxiDCBlocker___shared_ptr_maxiDCBlocker_2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiDCBlocker__20___val_deleter__28maxiDCBlocker__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiDCBlocker__20___val_deleter_2c_20std____2__enable_if_is_convertible_maxiDCBlocker__2c_20maxiDCBlocker____value_2c_20std____2__shared_ptr_maxiDCBlocker_____nat___type_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0;
  $3 = global$0 - 32 | 0;
  $4 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  HEAP32[$0 >> 2] = $1;
  HEAP32[16874] = 0;
  $4 = __invoke_i1___22class_std____2__basic_ifstream_22_(930, 20) | 0;
  $5 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      if (($5 | 0) != 1) {
       HEAP32[16874] = 0;
       $5 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1064, $3 + 24 | 0, $2 | 0) | 0;
       $6 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($6 | 0) == 1) {
        break label$5
       }
       HEAP32[16874] = 0;
       __invoke___22class_std____2__basic_istream_22____22class_std____2__basic_istream_22__i8__i32(1065, $4 | 0, $1 | 0, $5 | 0) | 0;
       $6 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($6 | 0) == 1) {
        break label$4
       }
       HEAP32[$0 + 4 >> 2] = $4;
       emscripten__val___val_28_29($5);
       HEAP32[$3 + 4 >> 2] = $1;
       HEAP32[$3 >> 2] = $1;
       $1 = $3 + 32 | 0;
       if ($1 >>> 0 < global$2 >>> 0) {
        __handle_stack_overflow()
       }
       global$0 = $1;
       return $0 | 0;
      }
      $3 = __cxa_find_matching_catch_3(0) | 0;
      getTempRet0() | 0;
      break label$2;
     }
     $3 = __cxa_find_matching_catch_3(0) | 0;
     getTempRet0() | 0;
     break label$3;
    }
    $3 = __cxa_find_matching_catch_3(0) | 0;
    getTempRet0() | 0;
    emscripten__val___val_28_29($5);
   }
   dlfree($4);
  }
  __cxa_begin_catch($3 | 0) | 0;
  HEAP32[16874] = 0;
  __invoke_void___22class_std____2__vector_13_22__i32(1066, $2 | 0, $1 | 0);
  $0 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$8 : {
   label$9 : {
    if (($0 | 0) != 1) {
     HEAP32[16874] = 0;
     __invoke_void(934);
     $0 = HEAP32[16874];
     HEAP32[16874] = 0;
     if (($0 | 0) != 1) {
      break label$9
     }
    }
    $0 = __cxa_find_matching_catch_2() | 0;
    getTempRet0() | 0;
    HEAP32[16874] = 0;
    __invoke_void(23);
    $1 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($1 | 0) != 1) {
     break label$8
    }
    $0 = __cxa_find_matching_catch_3(0) | 0;
    getTempRet0() | 0;
    __clang_call_terminate($0);
   }
   abort();
  }
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____shared_ptr_pointer_maxiDCBlocker__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiDCBlocker__20___val_deleter_2c_20std____2__allocator_maxiDCBlocker__20_____shared_ptr_pointer_28maxiDCBlocker__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiDCBlocker__20___val_deleter_2c_20std____2__allocator_maxiDCBlocker__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0;
  $3 = global$0 - 32 | 0;
  $4 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  HEAP32[$3 + 20 >> 2] = $1;
  std____2____shared_weak_count____shared_weak_count_28long_29($0);
  HEAP32[$0 >> 2] = 16004;
  HEAP32[16874] = 0;
  $1 = std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_____compressed_pair_maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__28maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter___29($3 + 8 | 0, $3 + 20 | 0, $2);
  $2 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    if (($2 | 0) != 1) {
     HEAP32[16874] = 0;
     std____2____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20_____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20__28std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter____2c_20std____2__allocator_maxiOsc____29($0 + 12 | 0, $1, $3 + 24 | 0);
     $2 = HEAP32[16874];
     HEAP32[16874] = 0;
     if (($2 | 0) == 1) {
      break label$3
     }
     std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter______compressed_pair_28_29($1);
     $1 = $3 + 32 | 0;
     if ($1 >>> 0 < global$2 >>> 0) {
      __handle_stack_overflow()
     }
     global$0 = $1;
     return $0 | 0;
    }
    $0 = __cxa_find_matching_catch_2() | 0;
    getTempRet0() | 0;
    break label$2;
   }
   $0 = __cxa_find_matching_catch_2() | 0;
   getTempRet0() | 0;
   std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter______compressed_pair_28_29($1);
  }
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____shared_ptr_pointer_maxiDCBlocker__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiDCBlocker__20___val_deleter_2c_20std____2__allocator_maxiDCBlocker__20______shared_ptr_pointer_28_29($0) {
  $0 = $0 | 0;
  HEAP32[$0 >> 2] = 16004;
  std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter______compressed_pair_28_29($0 + 12 | 0);
  return $0 | 0;
 }
 
 function std____2____shared_ptr_pointer_maxiDCBlocker__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiDCBlocker__20___val_deleter_2c_20std____2__allocator_maxiDCBlocker__20______shared_ptr_pointer_28_29_1($0) {
  $0 = $0 | 0;
  dlfree(std____2____shared_ptr_pointer_maxiDCBlocker__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiDCBlocker__20___val_deleter_2c_20std____2__allocator_maxiDCBlocker__20______shared_ptr_pointer_28_29($0));
 }
 
 function std____2____shared_ptr_pointer_maxiDCBlocker__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiDCBlocker__20___val_deleter_2c_20std____2__allocator_maxiDCBlocker__20_____on_zero_shared_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $0 = $0 + 12 | 0;
  $1 = std____2____compressed_pair__IO_FILE__2c_20int_20_28__29_28_IO_FILE__29___second_28_29($0);
  $2 = HEAP32[$0 >> 2];
  HEAP32[16874] = 0;
  __invoke_void___22class_std____2__vector_13_22__i32(1066, $1 | 0, $2 | 0);
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($1 | 0) != 1) {
   emscripten__val___val_28_29(std____2____compressed_pair__IO_FILE__2c_20int_20_28__29_28_IO_FILE__29___second_28_29($0));
   return;
  }
  $0 = __cxa_find_matching_catch_3(0) | 0;
  getTempRet0() | 0;
  __clang_call_terminate($0);
  abort();
 }
 
 function std____2____shared_ptr_pointer_maxiDCBlocker__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiDCBlocker__20___val_deleter_2c_20std____2__allocator_maxiDCBlocker__20_____get_deleter_28std__type_info_20const__29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  if (std__type_info__operator___28std__type_info_20const__29_20const($1, 16256)) {
   $0 = std____2____compressed_pair__IO_FILE__2c_20int_20_28__29_28_IO_FILE__29___second_28_29($0 + 12 | 0)
  } else {
   $0 = 0
  }
  return $0 | 0;
 }
 
 function std____2__shared_ptr_maxiDCBlocker__20std____2__shared_ptr_maxiDCBlocker___make_shared___28_29($0) {
  var $1 = 0, $2 = 0, $3 = 0;
  $2 = global$0 - 48 | 0;
  $1 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  $1 = $2 + 40 | 0;
  $1 = std____2__unique_ptr_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20___unique_ptr_true_2c_20void__28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20__2c_20true_____good_rval_ref_type_29($2 + 24 | 0, operator_20new_28unsigned_20long_29(32), std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20_____allocator_destructor_28std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20___2c_20unsigned_20long_29($2 + 16 | 0, $1, 1));
  $3 = HEAP32[$1 >> 2];
  HEAP32[16874] = 0;
  __invoke_i1___22class_std____2__basic_ifstream_22_(1069, $3 | 0) | 0;
  $3 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($3 | 0) != 1) {
   $0 = std____2__shared_ptr_maxiOsc___shared_ptr_28_29($0);
   HEAP32[$0 >> 2] = std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___get_28_29(HEAP32[$1 >> 2]);
   HEAP32[$0 + 4 >> 2] = std____2__unique_ptr__IO_FILE_2c_20int_20_28__29_28_IO_FILE__29___release_28_29($1);
   $0 = HEAP32[$0 >> 2];
   HEAP32[$2 + 4 >> 2] = $0;
   HEAP32[$2 >> 2] = $0;
   std____2__unique_ptr_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20___reset_28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___29($1);
   $0 = $2 + 48 | 0;
   if ($0 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $0;
   return;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__unique_ptr_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20___reset_28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___29($1);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____shared_ptr_emplace_maxiDCBlocker_2c_20std____2__allocator_maxiDCBlocker__20_____shared_ptr_emplace_28std____2__allocator_maxiDCBlocker__29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  std____2____shared_weak_count____shared_weak_count_28long_29($0);
  HEAP32[$0 >> 2] = 16324;
  HEAP32[16874] = 0;
  std____2____compressed_pair_std____2__allocator_maxiDCBlocker__2c_20maxiDCBlocker_____compressed_pair_std____2__allocator_maxiDCBlocker__2c_20true__28std____2__allocator_maxiDCBlocker____29($0 + 16 | 0, $1 + 8 | 0);
  $2 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($2 | 0) != 1) {
   $1 = $1 + 16 | 0;
   if ($1 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $1;
   return $0 | 0;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____compressed_pair_std____2__allocator_maxiDCBlocker__2c_20maxiDCBlocker_____compressed_pair_std____2__allocator_maxiDCBlocker__2c_20true__28std____2__allocator_maxiDCBlocker____29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$0 + 8 >> 2] = 0;
  HEAP32[$0 + 12 >> 2] = 0;
  return $0 | 0;
 }
 
 function std____2__shared_ptr_maxiSVF___shared_ptr_maxiSVF_2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiSVF__20___val_deleter__28maxiSVF__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiSVF__20___val_deleter_2c_20std____2__enable_if_is_convertible_maxiSVF__2c_20maxiSVF____value_2c_20std____2__shared_ptr_maxiSVF_____nat___type_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0;
  $3 = global$0 - 32 | 0;
  $4 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  HEAP32[$0 >> 2] = $1;
  HEAP32[16874] = 0;
  $4 = __invoke_i1___22class_std____2__basic_ifstream_22_(930, 20) | 0;
  $5 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      if (($5 | 0) != 1) {
       HEAP32[16874] = 0;
       $5 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1072, $3 + 24 | 0, $2 | 0) | 0;
       $6 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($6 | 0) == 1) {
        break label$5
       }
       HEAP32[16874] = 0;
       __invoke___22class_std____2__basic_istream_22____22class_std____2__basic_istream_22__i8__i32(1073, $4 | 0, $1 | 0, $5 | 0) | 0;
       $6 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($6 | 0) == 1) {
        break label$4
       }
       HEAP32[$0 + 4 >> 2] = $4;
       emscripten__val___val_28_29($5);
       HEAP32[$3 + 4 >> 2] = $1;
       HEAP32[$3 >> 2] = $1;
       $1 = $3 + 32 | 0;
       if ($1 >>> 0 < global$2 >>> 0) {
        __handle_stack_overflow()
       }
       global$0 = $1;
       return $0 | 0;
      }
      $3 = __cxa_find_matching_catch_3(0) | 0;
      getTempRet0() | 0;
      break label$2;
     }
     $3 = __cxa_find_matching_catch_3(0) | 0;
     getTempRet0() | 0;
     break label$3;
    }
    $3 = __cxa_find_matching_catch_3(0) | 0;
    getTempRet0() | 0;
    emscripten__val___val_28_29($5);
   }
   dlfree($4);
  }
  __cxa_begin_catch($3 | 0) | 0;
  HEAP32[16874] = 0;
  __invoke_void___22class_std____2__vector_13_22__i32(1074, $2 | 0, $1 | 0);
  $0 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$8 : {
   label$9 : {
    if (($0 | 0) != 1) {
     HEAP32[16874] = 0;
     __invoke_void(934);
     $0 = HEAP32[16874];
     HEAP32[16874] = 0;
     if (($0 | 0) != 1) {
      break label$9
     }
    }
    $0 = __cxa_find_matching_catch_2() | 0;
    getTempRet0() | 0;
    HEAP32[16874] = 0;
    __invoke_void(23);
    $1 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($1 | 0) != 1) {
     break label$8
    }
    $0 = __cxa_find_matching_catch_3(0) | 0;
    getTempRet0() | 0;
    __clang_call_terminate($0);
   }
   abort();
  }
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____shared_ptr_pointer_maxiSVF__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiSVF__20___val_deleter_2c_20std____2__allocator_maxiSVF__20_____shared_ptr_pointer_28maxiSVF__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiSVF__20___val_deleter_2c_20std____2__allocator_maxiSVF__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0;
  $3 = global$0 - 32 | 0;
  $4 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  HEAP32[$3 + 20 >> 2] = $1;
  std____2____shared_weak_count____shared_weak_count_28long_29($0);
  HEAP32[$0 >> 2] = 16532;
  HEAP32[16874] = 0;
  $1 = std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_____compressed_pair_maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__28maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter___29($3 + 8 | 0, $3 + 20 | 0, $2);
  $2 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    if (($2 | 0) != 1) {
     HEAP32[16874] = 0;
     std____2____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20_____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20__28std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter____2c_20std____2__allocator_maxiOsc____29($0 + 12 | 0, $1, $3 + 24 | 0);
     $2 = HEAP32[16874];
     HEAP32[16874] = 0;
     if (($2 | 0) == 1) {
      break label$3
     }
     std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter______compressed_pair_28_29($1);
     $1 = $3 + 32 | 0;
     if ($1 >>> 0 < global$2 >>> 0) {
      __handle_stack_overflow()
     }
     global$0 = $1;
     return $0 | 0;
    }
    $0 = __cxa_find_matching_catch_2() | 0;
    getTempRet0() | 0;
    break label$2;
   }
   $0 = __cxa_find_matching_catch_2() | 0;
   getTempRet0() | 0;
   std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter______compressed_pair_28_29($1);
  }
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____shared_ptr_pointer_maxiSVF__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiSVF__20___val_deleter_2c_20std____2__allocator_maxiSVF__20______shared_ptr_pointer_28_29($0) {
  $0 = $0 | 0;
  HEAP32[$0 >> 2] = 16532;
  std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter______compressed_pair_28_29($0 + 12 | 0);
  return $0 | 0;
 }
 
 function std____2____shared_ptr_pointer_maxiSVF__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiSVF__20___val_deleter_2c_20std____2__allocator_maxiSVF__20______shared_ptr_pointer_28_29_1($0) {
  $0 = $0 | 0;
  dlfree(std____2____shared_ptr_pointer_maxiSVF__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiSVF__20___val_deleter_2c_20std____2__allocator_maxiSVF__20______shared_ptr_pointer_28_29($0));
 }
 
 function std____2____shared_ptr_pointer_maxiSVF__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiSVF__20___val_deleter_2c_20std____2__allocator_maxiSVF__20_____on_zero_shared_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $0 = $0 + 12 | 0;
  $1 = std____2____compressed_pair__IO_FILE__2c_20int_20_28__29_28_IO_FILE__29___second_28_29($0);
  $2 = HEAP32[$0 >> 2];
  HEAP32[16874] = 0;
  __invoke_void___22class_std____2__vector_13_22__i32(1074, $1 | 0, $2 | 0);
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($1 | 0) != 1) {
   emscripten__val___val_28_29(std____2____compressed_pair__IO_FILE__2c_20int_20_28__29_28_IO_FILE__29___second_28_29($0));
   return;
  }
  $0 = __cxa_find_matching_catch_3(0) | 0;
  getTempRet0() | 0;
  __clang_call_terminate($0);
  abort();
 }
 
 function std____2____shared_ptr_pointer_maxiSVF__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiSVF__20___val_deleter_2c_20std____2__allocator_maxiSVF__20_____get_deleter_28std__type_info_20const__29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  if (std__type_info__operator___28std__type_info_20const__29_20const($1, 16772)) {
   $0 = std____2____compressed_pair__IO_FILE__2c_20int_20_28__29_28_IO_FILE__29___second_28_29($0 + 12 | 0)
  } else {
   $0 = 0
  }
  return $0 | 0;
 }
 
 function std____2__shared_ptr_maxiSVF__20std____2__shared_ptr_maxiSVF___make_shared___28_29($0) {
  var $1 = 0, $2 = 0, $3 = 0;
  $2 = global$0 - 48 | 0;
  $1 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  $1 = $2 + 40 | 0;
  $1 = std____2__unique_ptr_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20___unique_ptr_true_2c_20void__28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20__2c_20true_____good_rval_ref_type_29($2 + 24 | 0, operator_20new_28unsigned_20long_29(120), std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20_____allocator_destructor_28std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20___2c_20unsigned_20long_29($2 + 16 | 0, $1, 1));
  $3 = HEAP32[$1 >> 2];
  HEAP32[16874] = 0;
  __invoke_i1___22class_std____2__basic_ifstream_22_(1077, $3 | 0) | 0;
  $3 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($3 | 0) != 1) {
   $0 = std____2__shared_ptr_maxiOsc___shared_ptr_28_29($0);
   HEAP32[$0 >> 2] = std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___get_28_29(HEAP32[$1 >> 2]);
   HEAP32[$0 + 4 >> 2] = std____2__unique_ptr__IO_FILE_2c_20int_20_28__29_28_IO_FILE__29___release_28_29($1);
   $0 = HEAP32[$0 >> 2];
   HEAP32[$2 + 4 >> 2] = $0;
   HEAP32[$2 >> 2] = $0;
   std____2__unique_ptr_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20___reset_28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___29($1);
   $0 = $2 + 48 | 0;
   if ($0 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $0;
   return;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__unique_ptr_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20___reset_28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___29($1);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____shared_ptr_emplace_maxiSVF_2c_20std____2__allocator_maxiSVF__20_____shared_ptr_emplace_28std____2__allocator_maxiSVF__29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  std____2____shared_weak_count____shared_weak_count_28long_29($0);
  HEAP32[$0 >> 2] = 16832;
  HEAP32[16874] = 0;
  __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1079, $0 + 16 | 0, $1 + 8 | 0) | 0;
  $2 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($2 | 0) != 1) {
   $1 = $1 + 16 | 0;
   if ($1 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $1;
   return $0 | 0;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____compressed_pair_std____2__allocator_maxiSVF__2c_20maxiSVF_____compressed_pair_std____2__allocator_maxiSVF__2c_20true__28std____2__allocator_maxiSVF____29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  maxiSVF__maxiSVF_28_29($0);
  return $0 | 0;
 }
 
 function maxiSVF__maxiSVF_28_29($0) {
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP32[$0 + 20 >> 2] = 0;
  HEAP32[$0 + 8 >> 2] = 0;
  HEAP32[$0 + 12 >> 2] = 0;
  maxiSVF__setParams_28double_2c_20double_29($0, 1.0e3, 1.0);
 }
 
 function std____2__shared_ptr_maxiMath___shared_ptr_maxiMath_2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiMath__20___val_deleter__28maxiMath__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiMath__20___val_deleter_2c_20std____2__enable_if_is_convertible_maxiMath__2c_20maxiMath____value_2c_20std____2__shared_ptr_maxiMath_____nat___type_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0;
  $3 = global$0 - 32 | 0;
  $4 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  HEAP32[$0 >> 2] = $1;
  HEAP32[16874] = 0;
  $4 = __invoke_i1___22class_std____2__basic_ifstream_22_(930, 20) | 0;
  $5 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      if (($5 | 0) != 1) {
       HEAP32[16874] = 0;
       $5 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1080, $3 + 24 | 0, $2 | 0) | 0;
       $6 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($6 | 0) == 1) {
        break label$5
       }
       HEAP32[16874] = 0;
       __invoke___22class_std____2__basic_istream_22____22class_std____2__basic_istream_22__i8__i32(1081, $4 | 0, $1 | 0, $5 | 0) | 0;
       $6 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($6 | 0) == 1) {
        break label$4
       }
       HEAP32[$0 + 4 >> 2] = $4;
       emscripten__val___val_28_29($5);
       HEAP32[$3 + 4 >> 2] = $1;
       HEAP32[$3 >> 2] = $1;
       $1 = $3 + 32 | 0;
       if ($1 >>> 0 < global$2 >>> 0) {
        __handle_stack_overflow()
       }
       global$0 = $1;
       return $0 | 0;
      }
      $3 = __cxa_find_matching_catch_3(0) | 0;
      getTempRet0() | 0;
      break label$2;
     }
     $3 = __cxa_find_matching_catch_3(0) | 0;
     getTempRet0() | 0;
     break label$3;
    }
    $3 = __cxa_find_matching_catch_3(0) | 0;
    getTempRet0() | 0;
    emscripten__val___val_28_29($5);
   }
   dlfree($4);
  }
  __cxa_begin_catch($3 | 0) | 0;
  HEAP32[16874] = 0;
  __invoke_void___22class_std____2__vector_13_22__i32(1082, $2 | 0, $1 | 0);
  $0 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$8 : {
   label$9 : {
    if (($0 | 0) != 1) {
     HEAP32[16874] = 0;
     __invoke_void(934);
     $0 = HEAP32[16874];
     HEAP32[16874] = 0;
     if (($0 | 0) != 1) {
      break label$9
     }
    }
    $0 = __cxa_find_matching_catch_2() | 0;
    getTempRet0() | 0;
    HEAP32[16874] = 0;
    __invoke_void(23);
    $1 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($1 | 0) != 1) {
     break label$8
    }
    $0 = __cxa_find_matching_catch_3(0) | 0;
    getTempRet0() | 0;
    __clang_call_terminate($0);
   }
   abort();
  }
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____shared_ptr_pointer_maxiMath__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiMath__20___val_deleter_2c_20std____2__allocator_maxiMath__20_____shared_ptr_pointer_28maxiMath__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiMath__20___val_deleter_2c_20std____2__allocator_maxiMath__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0;
  $3 = global$0 - 32 | 0;
  $4 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  HEAP32[$3 + 20 >> 2] = $1;
  std____2____shared_weak_count____shared_weak_count_28long_29($0);
  HEAP32[$0 >> 2] = 17056;
  HEAP32[16874] = 0;
  $1 = std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_____compressed_pair_maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__28maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter___29($3 + 8 | 0, $3 + 20 | 0, $2);
  $2 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    if (($2 | 0) != 1) {
     HEAP32[16874] = 0;
     std____2____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20_____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20__28std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter____2c_20std____2__allocator_maxiOsc____29($0 + 12 | 0, $1, $3 + 24 | 0);
     $2 = HEAP32[16874];
     HEAP32[16874] = 0;
     if (($2 | 0) == 1) {
      break label$3
     }
     std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter______compressed_pair_28_29($1);
     $1 = $3 + 32 | 0;
     if ($1 >>> 0 < global$2 >>> 0) {
      __handle_stack_overflow()
     }
     global$0 = $1;
     return $0 | 0;
    }
    $0 = __cxa_find_matching_catch_2() | 0;
    getTempRet0() | 0;
    break label$2;
   }
   $0 = __cxa_find_matching_catch_2() | 0;
   getTempRet0() | 0;
   std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter______compressed_pair_28_29($1);
  }
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____shared_ptr_pointer_maxiMath__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiMath__20___val_deleter_2c_20std____2__allocator_maxiMath__20______shared_ptr_pointer_28_29($0) {
  $0 = $0 | 0;
  HEAP32[$0 >> 2] = 17056;
  std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter______compressed_pair_28_29($0 + 12 | 0);
  return $0 | 0;
 }
 
 function std____2____shared_ptr_pointer_maxiMath__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiMath__20___val_deleter_2c_20std____2__allocator_maxiMath__20______shared_ptr_pointer_28_29_1($0) {
  $0 = $0 | 0;
  dlfree(std____2____shared_ptr_pointer_maxiMath__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiMath__20___val_deleter_2c_20std____2__allocator_maxiMath__20______shared_ptr_pointer_28_29($0));
 }
 
 function std____2____shared_ptr_pointer_maxiMath__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiMath__20___val_deleter_2c_20std____2__allocator_maxiMath__20_____on_zero_shared_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $0 = $0 + 12 | 0;
  $1 = std____2____compressed_pair__IO_FILE__2c_20int_20_28__29_28_IO_FILE__29___second_28_29($0);
  $2 = HEAP32[$0 >> 2];
  HEAP32[16874] = 0;
  __invoke_void___22class_std____2__vector_13_22__i32(1082, $1 | 0, $2 | 0);
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($1 | 0) != 1) {
   emscripten__val___val_28_29(std____2____compressed_pair__IO_FILE__2c_20int_20_28__29_28_IO_FILE__29___second_28_29($0));
   return;
  }
  $0 = __cxa_find_matching_catch_3(0) | 0;
  getTempRet0() | 0;
  __clang_call_terminate($0);
  abort();
 }
 
 function std____2____shared_ptr_pointer_maxiMath__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiMath__20___val_deleter_2c_20std____2__allocator_maxiMath__20_____get_deleter_28std__type_info_20const__29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  if (std__type_info__operator___28std__type_info_20const__29_20const($1, 17300)) {
   $0 = std____2____compressed_pair__IO_FILE__2c_20int_20_28__29_28_IO_FILE__29___second_28_29($0 + 12 | 0)
  } else {
   $0 = 0
  }
  return $0 | 0;
 }
 
 function std____2__shared_ptr_maxiMath__20std____2__shared_ptr_maxiMath___make_shared___28_29($0) {
  var $1 = 0, $2 = 0, $3 = 0;
  $2 = global$0 - 48 | 0;
  $1 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  $1 = $2 + 40 | 0;
  $1 = std____2__unique_ptr_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20___unique_ptr_true_2c_20void__28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20__2c_20true_____good_rval_ref_type_29($2 + 24 | 0, operator_20new_28unsigned_20long_29(16), std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20_____allocator_destructor_28std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20___2c_20unsigned_20long_29($2 + 16 | 0, $1, 1));
  $3 = HEAP32[$1 >> 2];
  HEAP32[16874] = 0;
  __invoke_i1___22class_std____2__basic_ifstream_22_(1085, $3 | 0) | 0;
  $3 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($3 | 0) != 1) {
   $0 = std____2__shared_ptr_maxiOsc___shared_ptr_28_29($0);
   HEAP32[$0 >> 2] = std____2____split_buffer_double_2c_20std____2__allocator_double_______end_cap_28_29(HEAP32[$1 >> 2]);
   HEAP32[$0 + 4 >> 2] = std____2__unique_ptr__IO_FILE_2c_20int_20_28__29_28_IO_FILE__29___release_28_29($1);
   $0 = HEAP32[$0 >> 2];
   HEAP32[$2 + 4 >> 2] = $0;
   HEAP32[$2 >> 2] = $0;
   std____2__unique_ptr_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20___reset_28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___29($1);
   $0 = $2 + 48 | 0;
   if ($0 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $0;
   return;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__unique_ptr_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20___reset_28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___29($1);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____shared_ptr_emplace_maxiMath_2c_20std____2__allocator_maxiMath__20_____shared_ptr_emplace_28std____2__allocator_maxiMath__29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  std____2____shared_weak_count____shared_weak_count_28long_29($0);
  HEAP32[$0 >> 2] = 17360;
  HEAP32[16874] = 0;
  $2 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($2 | 0) != 1) {
   $1 = $1 + 16 | 0;
   if ($1 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $1;
   return $0 | 0;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2__shared_ptr_maxiClock___shared_ptr_maxiClock_2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiClock__20___val_deleter__28maxiClock__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiClock__20___val_deleter_2c_20std____2__enable_if_is_convertible_maxiClock__2c_20maxiClock____value_2c_20std____2__shared_ptr_maxiClock_____nat___type_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0;
  $3 = global$0 - 32 | 0;
  $4 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  HEAP32[$0 >> 2] = $1;
  HEAP32[16874] = 0;
  $4 = __invoke_i1___22class_std____2__basic_ifstream_22_(930, 20) | 0;
  $5 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      if (($5 | 0) != 1) {
       HEAP32[16874] = 0;
       $5 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1088, $3 + 24 | 0, $2 | 0) | 0;
       $6 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($6 | 0) == 1) {
        break label$5
       }
       HEAP32[16874] = 0;
       __invoke___22class_std____2__basic_istream_22____22class_std____2__basic_istream_22__i8__i32(1089, $4 | 0, $1 | 0, $5 | 0) | 0;
       $6 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($6 | 0) == 1) {
        break label$4
       }
       HEAP32[$0 + 4 >> 2] = $4;
       emscripten__val___val_28_29($5);
       HEAP32[$3 + 4 >> 2] = $1;
       HEAP32[$3 >> 2] = $1;
       $1 = $3 + 32 | 0;
       if ($1 >>> 0 < global$2 >>> 0) {
        __handle_stack_overflow()
       }
       global$0 = $1;
       return $0 | 0;
      }
      $3 = __cxa_find_matching_catch_3(0) | 0;
      getTempRet0() | 0;
      break label$2;
     }
     $3 = __cxa_find_matching_catch_3(0) | 0;
     getTempRet0() | 0;
     break label$3;
    }
    $3 = __cxa_find_matching_catch_3(0) | 0;
    getTempRet0() | 0;
    emscripten__val___val_28_29($5);
   }
   dlfree($4);
  }
  __cxa_begin_catch($3 | 0) | 0;
  HEAP32[16874] = 0;
  __invoke_void___22class_std____2__vector_13_22__i32(1090, $2 | 0, $1 | 0);
  $0 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$8 : {
   label$9 : {
    if (($0 | 0) != 1) {
     HEAP32[16874] = 0;
     __invoke_void(934);
     $0 = HEAP32[16874];
     HEAP32[16874] = 0;
     if (($0 | 0) != 1) {
      break label$9
     }
    }
    $0 = __cxa_find_matching_catch_2() | 0;
    getTempRet0() | 0;
    HEAP32[16874] = 0;
    __invoke_void(23);
    $1 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($1 | 0) != 1) {
     break label$8
    }
    $0 = __cxa_find_matching_catch_3(0) | 0;
    getTempRet0() | 0;
    __clang_call_terminate($0);
   }
   abort();
  }
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____shared_ptr_pointer_maxiClock__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiClock__20___val_deleter_2c_20std____2__allocator_maxiClock__20_____shared_ptr_pointer_28maxiClock__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiClock__20___val_deleter_2c_20std____2__allocator_maxiClock__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0;
  $3 = global$0 - 32 | 0;
  $4 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  HEAP32[$3 + 20 >> 2] = $1;
  std____2____shared_weak_count____shared_weak_count_28long_29($0);
  HEAP32[$0 >> 2] = 17560;
  HEAP32[16874] = 0;
  $1 = std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_____compressed_pair_maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__28maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter___29($3 + 8 | 0, $3 + 20 | 0, $2);
  $2 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    if (($2 | 0) != 1) {
     HEAP32[16874] = 0;
     std____2____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20_____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20__28std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter____2c_20std____2__allocator_maxiOsc____29($0 + 12 | 0, $1, $3 + 24 | 0);
     $2 = HEAP32[16874];
     HEAP32[16874] = 0;
     if (($2 | 0) == 1) {
      break label$3
     }
     std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter______compressed_pair_28_29($1);
     $1 = $3 + 32 | 0;
     if ($1 >>> 0 < global$2 >>> 0) {
      __handle_stack_overflow()
     }
     global$0 = $1;
     return $0 | 0;
    }
    $0 = __cxa_find_matching_catch_2() | 0;
    getTempRet0() | 0;
    break label$2;
   }
   $0 = __cxa_find_matching_catch_2() | 0;
   getTempRet0() | 0;
   std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter______compressed_pair_28_29($1);
  }
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____shared_ptr_pointer_maxiClock__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiClock__20___val_deleter_2c_20std____2__allocator_maxiClock__20______shared_ptr_pointer_28_29($0) {
  $0 = $0 | 0;
  HEAP32[$0 >> 2] = 17560;
  std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter______compressed_pair_28_29($0 + 12 | 0);
  return $0 | 0;
 }
 
 function std____2____shared_ptr_pointer_maxiClock__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiClock__20___val_deleter_2c_20std____2__allocator_maxiClock__20______shared_ptr_pointer_28_29_1($0) {
  $0 = $0 | 0;
  dlfree(std____2____shared_ptr_pointer_maxiClock__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiClock__20___val_deleter_2c_20std____2__allocator_maxiClock__20______shared_ptr_pointer_28_29($0));
 }
 
 function std____2____shared_ptr_pointer_maxiClock__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiClock__20___val_deleter_2c_20std____2__allocator_maxiClock__20_____on_zero_shared_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $0 = $0 + 12 | 0;
  $1 = std____2____compressed_pair__IO_FILE__2c_20int_20_28__29_28_IO_FILE__29___second_28_29($0);
  $2 = HEAP32[$0 >> 2];
  HEAP32[16874] = 0;
  __invoke_void___22class_std____2__vector_13_22__i32(1090, $1 | 0, $2 | 0);
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($1 | 0) != 1) {
   emscripten__val___val_28_29(std____2____compressed_pair__IO_FILE__2c_20int_20_28__29_28_IO_FILE__29___second_28_29($0));
   return;
  }
  $0 = __cxa_find_matching_catch_3(0) | 0;
  getTempRet0() | 0;
  __clang_call_terminate($0);
  abort();
 }
 
 function std____2____shared_ptr_pointer_maxiClock__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiClock__20___val_deleter_2c_20std____2__allocator_maxiClock__20_____get_deleter_28std__type_info_20const__29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  if (std__type_info__operator___28std__type_info_20const__29_20const($1, 17804)) {
   $0 = std____2____compressed_pair__IO_FILE__2c_20int_20_28__29_28_IO_FILE__29___second_28_29($0 + 12 | 0)
  } else {
   $0 = 0
  }
  return $0 | 0;
 }
 
 function std____2__shared_ptr_maxiClock__20std____2__shared_ptr_maxiClock___make_shared___28_29($0) {
  var $1 = 0, $2 = 0, $3 = 0;
  $2 = global$0 - 48 | 0;
  $1 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  $1 = $2 + 40 | 0;
  $1 = std____2__unique_ptr_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20___unique_ptr_true_2c_20void__28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20__2c_20true_____good_rval_ref_type_29($2 + 24 | 0, operator_20new_28unsigned_20long_29(104), std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20_____allocator_destructor_28std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20___2c_20unsigned_20long_29($2 + 16 | 0, $1, 1));
  $3 = HEAP32[$1 >> 2];
  HEAP32[16874] = 0;
  __invoke_i1___22class_std____2__basic_ifstream_22_(1093, $3 | 0) | 0;
  $3 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($3 | 0) != 1) {
   $0 = std____2__shared_ptr_maxiOsc___shared_ptr_28_29($0);
   HEAP32[$0 >> 2] = std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___get_28_29(HEAP32[$1 >> 2]);
   HEAP32[$0 + 4 >> 2] = std____2__unique_ptr__IO_FILE_2c_20int_20_28__29_28_IO_FILE__29___release_28_29($1);
   $0 = HEAP32[$0 >> 2];
   HEAP32[$2 + 4 >> 2] = $0;
   HEAP32[$2 >> 2] = $0;
   std____2__unique_ptr_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20___reset_28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___29($1);
   $0 = $2 + 48 | 0;
   if ($0 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $0;
   return;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__unique_ptr_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20___reset_28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___29($1);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____shared_ptr_emplace_maxiClock_2c_20std____2__allocator_maxiClock__20_____shared_ptr_emplace_28std____2__allocator_maxiClock__29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  std____2____shared_weak_count____shared_weak_count_28long_29($0);
  HEAP32[$0 >> 2] = 17868;
  HEAP32[16874] = 0;
  std____2____compressed_pair_std____2__allocator_maxiClock__2c_20maxiClock_____compressed_pair_std____2__allocator_maxiClock__2c_20true__28std____2__allocator_maxiClock____29($0 + 16 | 0, $1 + 8 | 0);
  $2 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($2 | 0) != 1) {
   $1 = $1 + 16 | 0;
   if ($1 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $1;
   return $0 | 0;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____compressed_pair_std____2__allocator_maxiClock__2c_20maxiClock_____compressed_pair_std____2__allocator_maxiClock__2c_20true__28std____2__allocator_maxiClock____29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  maxiClock__maxiClock_28_29($0);
  return $0 | 0;
 }
 
 function std____2__shared_ptr_maxiKuramotoOscillator___shared_ptr_maxiKuramotoOscillator_2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiKuramotoOscillator__20___val_deleter__28maxiKuramotoOscillator__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiKuramotoOscillator__20___val_deleter_2c_20std____2__enable_if_is_convertible_maxiKuramotoOscillator__2c_20maxiKuramotoOscillator____value_2c_20std____2__shared_ptr_maxiKuramotoOscillator_____nat___type_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0;
  $3 = global$0 - 32 | 0;
  $4 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  HEAP32[$0 >> 2] = $1;
  HEAP32[16874] = 0;
  $4 = __invoke_i1___22class_std____2__basic_ifstream_22_(930, 20) | 0;
  $5 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      if (($5 | 0) != 1) {
       HEAP32[16874] = 0;
       $5 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1096, $3 + 24 | 0, $2 | 0) | 0;
       $6 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($6 | 0) == 1) {
        break label$5
       }
       HEAP32[16874] = 0;
       __invoke___22class_std____2__basic_istream_22____22class_std____2__basic_istream_22__i8__i32(1097, $4 | 0, $1 | 0, $5 | 0) | 0;
       $6 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($6 | 0) == 1) {
        break label$4
       }
       HEAP32[$0 + 4 >> 2] = $4;
       emscripten__val___val_28_29($5);
       HEAP32[$3 + 4 >> 2] = $1;
       HEAP32[$3 >> 2] = $1;
       $1 = $3 + 32 | 0;
       if ($1 >>> 0 < global$2 >>> 0) {
        __handle_stack_overflow()
       }
       global$0 = $1;
       return $0 | 0;
      }
      $3 = __cxa_find_matching_catch_3(0) | 0;
      getTempRet0() | 0;
      break label$2;
     }
     $3 = __cxa_find_matching_catch_3(0) | 0;
     getTempRet0() | 0;
     break label$3;
    }
    $3 = __cxa_find_matching_catch_3(0) | 0;
    getTempRet0() | 0;
    emscripten__val___val_28_29($5);
   }
   dlfree($4);
  }
  __cxa_begin_catch($3 | 0) | 0;
  HEAP32[16874] = 0;
  __invoke_void___22class_std____2__vector_13_22__i32(1098, $2 | 0, $1 | 0);
  $0 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$8 : {
   label$9 : {
    if (($0 | 0) != 1) {
     HEAP32[16874] = 0;
     __invoke_void(934);
     $0 = HEAP32[16874];
     HEAP32[16874] = 0;
     if (($0 | 0) != 1) {
      break label$9
     }
    }
    $0 = __cxa_find_matching_catch_2() | 0;
    getTempRet0() | 0;
    HEAP32[16874] = 0;
    __invoke_void(23);
    $1 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($1 | 0) != 1) {
     break label$8
    }
    $0 = __cxa_find_matching_catch_3(0) | 0;
    getTempRet0() | 0;
    __clang_call_terminate($0);
   }
   abort();
  }
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____shared_ptr_pointer_maxiKuramotoOscillator__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiKuramotoOscillator__20___val_deleter_2c_20std____2__allocator_maxiKuramotoOscillator__20_____shared_ptr_pointer_28maxiKuramotoOscillator__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiKuramotoOscillator__20___val_deleter_2c_20std____2__allocator_maxiKuramotoOscillator__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0;
  $3 = global$0 - 32 | 0;
  $4 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  HEAP32[$3 + 20 >> 2] = $1;
  std____2____shared_weak_count____shared_weak_count_28long_29($0);
  HEAP32[$0 >> 2] = 18136;
  HEAP32[16874] = 0;
  $1 = std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_____compressed_pair_maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__28maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter___29($3 + 8 | 0, $3 + 20 | 0, $2);
  $2 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    if (($2 | 0) != 1) {
     HEAP32[16874] = 0;
     std____2____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20_____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20__28std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter____2c_20std____2__allocator_maxiOsc____29($0 + 12 | 0, $1, $3 + 24 | 0);
     $2 = HEAP32[16874];
     HEAP32[16874] = 0;
     if (($2 | 0) == 1) {
      break label$3
     }
     std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter______compressed_pair_28_29($1);
     $1 = $3 + 32 | 0;
     if ($1 >>> 0 < global$2 >>> 0) {
      __handle_stack_overflow()
     }
     global$0 = $1;
     return $0 | 0;
    }
    $0 = __cxa_find_matching_catch_2() | 0;
    getTempRet0() | 0;
    break label$2;
   }
   $0 = __cxa_find_matching_catch_2() | 0;
   getTempRet0() | 0;
   std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter______compressed_pair_28_29($1);
  }
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____shared_ptr_pointer_maxiKuramotoOscillator__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiKuramotoOscillator__20___val_deleter_2c_20std____2__allocator_maxiKuramotoOscillator__20______shared_ptr_pointer_28_29($0) {
  $0 = $0 | 0;
  HEAP32[$0 >> 2] = 18136;
  std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter______compressed_pair_28_29($0 + 12 | 0);
  return $0 | 0;
 }
 
 function std____2____shared_ptr_pointer_maxiKuramotoOscillator__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiKuramotoOscillator__20___val_deleter_2c_20std____2__allocator_maxiKuramotoOscillator__20______shared_ptr_pointer_28_29_1($0) {
  $0 = $0 | 0;
  dlfree(std____2____shared_ptr_pointer_maxiKuramotoOscillator__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiKuramotoOscillator__20___val_deleter_2c_20std____2__allocator_maxiKuramotoOscillator__20______shared_ptr_pointer_28_29($0));
 }
 
 function std____2____shared_ptr_pointer_maxiKuramotoOscillator__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiKuramotoOscillator__20___val_deleter_2c_20std____2__allocator_maxiKuramotoOscillator__20_____on_zero_shared_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $0 = $0 + 12 | 0;
  $1 = std____2____compressed_pair__IO_FILE__2c_20int_20_28__29_28_IO_FILE__29___second_28_29($0);
  $2 = HEAP32[$0 >> 2];
  HEAP32[16874] = 0;
  __invoke_void___22class_std____2__vector_13_22__i32(1098, $1 | 0, $2 | 0);
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($1 | 0) != 1) {
   emscripten__val___val_28_29(std____2____compressed_pair__IO_FILE__2c_20int_20_28__29_28_IO_FILE__29___second_28_29($0));
   return;
  }
  $0 = __cxa_find_matching_catch_3(0) | 0;
  getTempRet0() | 0;
  __clang_call_terminate($0);
  abort();
 }
 
 function std____2____shared_ptr_pointer_maxiKuramotoOscillator__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiKuramotoOscillator__20___val_deleter_2c_20std____2__allocator_maxiKuramotoOscillator__20_____get_deleter_28std__type_info_20const__29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  if (std__type_info__operator___28std__type_info_20const__29_20const($1, 18408)) {
   $0 = std____2____compressed_pair__IO_FILE__2c_20int_20_28__29_28_IO_FILE__29___second_28_29($0 + 12 | 0)
  } else {
   $0 = 0
  }
  return $0 | 0;
 }
 
 function std____2__shared_ptr_maxiKuramotoOscillator__20std____2__shared_ptr_maxiKuramotoOscillator___make_shared___28_29($0) {
  var $1 = 0, $2 = 0, $3 = 0;
  $2 = global$0 - 48 | 0;
  $1 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  $1 = $2 + 40 | 0;
  $1 = std____2__unique_ptr_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20___unique_ptr_true_2c_20void__28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20__2c_20true_____good_rval_ref_type_29($2 + 24 | 0, operator_20new_28unsigned_20long_29(32), std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20_____allocator_destructor_28std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20___2c_20unsigned_20long_29($2 + 16 | 0, $1, 1));
  $3 = HEAP32[$1 >> 2];
  HEAP32[16874] = 0;
  __invoke_i1___22class_std____2__basic_ifstream_22_(1101, $3 | 0) | 0;
  $3 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($3 | 0) != 1) {
   $0 = std____2__shared_ptr_maxiOsc___shared_ptr_28_29($0);
   HEAP32[$0 >> 2] = std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___get_28_29(HEAP32[$1 >> 2]);
   HEAP32[$0 + 4 >> 2] = std____2__unique_ptr__IO_FILE_2c_20int_20_28__29_28_IO_FILE__29___release_28_29($1);
   $0 = HEAP32[$0 >> 2];
   HEAP32[$2 + 4 >> 2] = $0;
   HEAP32[$2 >> 2] = $0;
   std____2__unique_ptr_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20___reset_28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___29($1);
   $0 = $2 + 48 | 0;
   if ($0 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $0;
   return;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__unique_ptr_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20___reset_28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___29($1);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____shared_ptr_emplace_maxiKuramotoOscillator_2c_20std____2__allocator_maxiKuramotoOscillator__20_____shared_ptr_emplace_28std____2__allocator_maxiKuramotoOscillator__29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  std____2____shared_weak_count____shared_weak_count_28long_29($0);
  HEAP32[$0 >> 2] = 18484;
  HEAP32[16874] = 0;
  std____2____compressed_pair_std____2__allocator_maxiKuramotoOscillator__2c_20maxiKuramotoOscillator_____compressed_pair_std____2__allocator_maxiKuramotoOscillator__2c_20true__28std____2__allocator_maxiKuramotoOscillator____29($0 + 16 | 0, $1 + 8 | 0);
  $2 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($2 | 0) != 1) {
   $1 = $1 + 16 | 0;
   if ($1 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $1;
   return $0 | 0;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____compressed_pair_std____2__allocator_maxiKuramotoOscillator__2c_20maxiKuramotoOscillator_____compressed_pair_std____2__allocator_maxiKuramotoOscillator__2c_20true__28std____2__allocator_maxiKuramotoOscillator____29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$0 + 8 >> 2] = 0;
  HEAP32[$0 + 12 >> 2] = 0;
  maxiKuramotoOscillator__maxiKuramotoOscillator_28_29($0);
  return $0 | 0;
 }
 
 function maxiKuramotoOscillator__maxiKuramotoOscillator_28_29($0) {
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  HEAPF64[$0 + 8 >> 3] = 6.283185307179586 / +HEAP32[12865];
 }
 
 function emscripten__internal__MethodInvoker_double_20_28maxiKuramotoOscillator____29_28double_2c_20double_2c_20std____2__vector_double_2c_20std____2__allocator_double__20__29_2c_20double_2c_20maxiKuramotoOscillator__2c_20double_2c_20double_2c_20std____2__vector_double_2c_20std____2__allocator_double__20__20___invoke_28double_20_28maxiKuramotoOscillator____20const__29_28double_2c_20double_2c_20std____2__vector_double_2c_20std____2__allocator_double__20__29_2c_20maxiKuramotoOscillator__2c_20double_2c_20double_2c_20std____2__vector_double_2c_20std____2__allocator_double__20___29($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = +$2;
  $3 = +$3;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0;
  $5 = global$0 - 32 | 0;
  $6 = $5;
  if ($5 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $6;
  $6 = HEAP32[$0 >> 2];
  $0 = HEAP32[$0 + 4 >> 2];
  $1 = ($0 >> 1) + $1 | 0;
  $6 = $0 & 1 ? HEAP32[$6 + HEAP32[$1 >> 2] >> 2] : $6;
  $0 = std____2__vector_double_2c_20std____2__allocator_double__20___vector_28std____2__vector_double_2c_20std____2__allocator_double__20__20const__29($5 + 8 | 0, $4);
  HEAP32[16874] = 0;
  $2 = +__invoke_double__class_maxiKuramotoOscillator__double_double___22class_std____2__vector_22_($6 | 0, $1 | 0, +$2, +$3, $0 | 0);
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($1 | 0) != 1) {
   HEAPF64[$5 + 24 >> 3] = $2;
   $2 = HEAPF64[$5 + 24 >> 3];
   std____2__vector_double_2c_20std____2__allocator_double__20____vector_28_29($0);
   $0 = $5 + 32 | 0;
   if ($0 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $0;
   return +$2;
  }
  $1 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__vector_double_2c_20std____2__allocator_double__20____vector_28_29($0);
  __resumeException($1 | 0);
  abort();
 }
 
 function maxiKuramotoOscillatorSet___maxiKuramotoOscillatorSet_28_29($0) {
  std____2__vector_double_2c_20std____2__allocator_double__20____vector_28_29($0 + 12 | 0);
  std____2__vector_maxiKuramotoOscillator_2c_20std____2__allocator_maxiKuramotoOscillator__20____vector_28_29($0);
  return $0;
 }
 
 function std____2__vector_maxiKuramotoOscillator_2c_20std____2__allocator_maxiKuramotoOscillator__20____vector_28_29($0) {
  var $1 = 0;
  HEAP32[16874] = 0;
  std____2__vector_maxiKuramotoOscillator_2c_20std____2__allocator_maxiKuramotoOscillator__20_____annotate_delete_28_29_20const($0);
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($1 | 0) != 1) {
   std____2____vector_base_maxiKuramotoOscillator_2c_20std____2__allocator_maxiKuramotoOscillator__20______vector_base_28_29($0);
   return;
  }
  $1 = __cxa_find_matching_catch_3(0) | 0;
  getTempRet0() | 0;
  std____2____vector_base_maxiKuramotoOscillator_2c_20std____2__allocator_maxiKuramotoOscillator__20______vector_base_28_29($0);
  __clang_call_terminate($1);
  abort();
 }
 
 function std____2__vector_maxiKuramotoOscillator_2c_20std____2__allocator_maxiKuramotoOscillator__20_____annotate_delete_28_29_20const($0) {
  $0 = $0 | 0;
  std____2____vector_base_maxiKuramotoOscillator_2c_20std____2__allocator_maxiKuramotoOscillator__20___capacity_28_29_20const($0);
  std____2__vector_maxiKuramotoOscillator_2c_20std____2__allocator_maxiKuramotoOscillator__20___size_28_29_20const($0);
  std____2____vector_base_maxiKuramotoOscillator_2c_20std____2__allocator_maxiKuramotoOscillator__20___capacity_28_29_20const($0);
 }
 
 function std____2____vector_base_maxiKuramotoOscillator_2c_20std____2__allocator_maxiKuramotoOscillator__20______vector_base_28_29($0) {
  if (HEAP32[$0 >> 2]) {
   std____2____vector_base_maxiKuramotoOscillator_2c_20std____2__allocator_maxiKuramotoOscillator__20_____destruct_at_end_28maxiKuramotoOscillator__29($0, HEAP32[$0 >> 2]);
   std____2__allocator_traits_std____2__allocator_char__20___deallocate_28std____2__allocator_char___2c_20char__2c_20unsigned_20long_29(std____2____vector_base_double_2c_20std____2__allocator_double__20_____alloc_28_29($0), HEAP32[$0 >> 2], std____2____vector_base_maxiKuramotoOscillator_2c_20std____2__allocator_maxiKuramotoOscillator__20___capacity_28_29_20const($0));
  }
 }
 
 function std____2____vector_base_maxiKuramotoOscillator_2c_20std____2__allocator_maxiKuramotoOscillator__20___capacity_28_29_20const($0) {
  return HEAP32[std____2____vector_base_double_2c_20std____2__allocator_double__20_____alloc_28_29($0) >> 2] - HEAP32[$0 >> 2] >> 4;
 }
 
 function std____2____vector_base_maxiKuramotoOscillator_2c_20std____2__allocator_maxiKuramotoOscillator__20_____destruct_at_end_28maxiKuramotoOscillator__29($0, $1) {
  var $2 = 0, $3 = 0;
  $2 = HEAP32[$0 + 4 >> 2];
  label$1 : {
   while (1) {
    if (($1 | 0) == ($2 | 0)) {
     break label$1
    }
    std____2____vector_base_double_2c_20std____2__allocator_double__20_____alloc_28_29($0);
    HEAP32[16874] = 0;
    $2 = $2 + -16 | 0;
    $3 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($3 | 0) != 1) {
     continue
    }
    break;
   };
   $0 = __cxa_find_matching_catch_3(0) | 0;
   getTempRet0() | 0;
   __clang_call_terminate($0);
   abort();
  }
  HEAP32[$0 + 4 >> 2] = $1;
 }
 
 function std____2__shared_ptr_maxiKuramotoOscillatorSet___shared_ptr_maxiKuramotoOscillatorSet_2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiKuramotoOscillatorSet__20___val_deleter__28maxiKuramotoOscillatorSet__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiKuramotoOscillatorSet__20___val_deleter_2c_20std____2__enable_if_is_convertible_maxiKuramotoOscillatorSet__2c_20maxiKuramotoOscillatorSet____value_2c_20std____2__shared_ptr_maxiKuramotoOscillatorSet_____nat___type_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0;
  $3 = global$0 - 32 | 0;
  $4 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  HEAP32[$0 >> 2] = $1;
  HEAP32[16874] = 0;
  $4 = __invoke_i1___22class_std____2__basic_ifstream_22_(930, 20) | 0;
  $5 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      if (($5 | 0) != 1) {
       HEAP32[16874] = 0;
       $5 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1106, $3 + 24 | 0, $2 | 0) | 0;
       $6 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($6 | 0) == 1) {
        break label$5
       }
       HEAP32[16874] = 0;
       __invoke___22class_std____2__basic_istream_22____22class_std____2__basic_istream_22__i8__i32(1107, $4 | 0, $1 | 0, $5 | 0) | 0;
       $6 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($6 | 0) == 1) {
        break label$4
       }
       HEAP32[$0 + 4 >> 2] = $4;
       emscripten__val___val_28_29($5);
       HEAP32[$3 + 4 >> 2] = $1;
       HEAP32[$3 >> 2] = $1;
       $1 = $3 + 32 | 0;
       if ($1 >>> 0 < global$2 >>> 0) {
        __handle_stack_overflow()
       }
       global$0 = $1;
       return $0 | 0;
      }
      $3 = __cxa_find_matching_catch_3(0) | 0;
      getTempRet0() | 0;
      break label$2;
     }
     $3 = __cxa_find_matching_catch_3(0) | 0;
     getTempRet0() | 0;
     break label$3;
    }
    $3 = __cxa_find_matching_catch_3(0) | 0;
    getTempRet0() | 0;
    emscripten__val___val_28_29($5);
   }
   dlfree($4);
  }
  __cxa_begin_catch($3 | 0) | 0;
  HEAP32[16874] = 0;
  __invoke_void___22class_std____2__vector_13_22__i32(1108, $2 | 0, $1 | 0);
  $0 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$8 : {
   label$9 : {
    if (($0 | 0) != 1) {
     HEAP32[16874] = 0;
     __invoke_void(934);
     $0 = HEAP32[16874];
     HEAP32[16874] = 0;
     if (($0 | 0) != 1) {
      break label$9
     }
    }
    $0 = __cxa_find_matching_catch_2() | 0;
    getTempRet0() | 0;
    HEAP32[16874] = 0;
    __invoke_void(23);
    $1 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($1 | 0) != 1) {
     break label$8
    }
    $0 = __cxa_find_matching_catch_3(0) | 0;
    getTempRet0() | 0;
    __clang_call_terminate($0);
   }
   abort();
  }
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____shared_ptr_pointer_maxiKuramotoOscillatorSet__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiKuramotoOscillatorSet__20___val_deleter_2c_20std____2__allocator_maxiKuramotoOscillatorSet__20_____shared_ptr_pointer_28maxiKuramotoOscillatorSet__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiKuramotoOscillatorSet__20___val_deleter_2c_20std____2__allocator_maxiKuramotoOscillatorSet__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0;
  $3 = global$0 - 32 | 0;
  $4 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  HEAP32[$3 + 20 >> 2] = $1;
  std____2____shared_weak_count____shared_weak_count_28long_29($0);
  HEAP32[$0 >> 2] = 18780;
  HEAP32[16874] = 0;
  $1 = std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_____compressed_pair_maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__28maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter___29($3 + 8 | 0, $3 + 20 | 0, $2);
  $2 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    if (($2 | 0) != 1) {
     HEAP32[16874] = 0;
     std____2____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20_____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20__28std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter____2c_20std____2__allocator_maxiOsc____29($0 + 12 | 0, $1, $3 + 24 | 0);
     $2 = HEAP32[16874];
     HEAP32[16874] = 0;
     if (($2 | 0) == 1) {
      break label$3
     }
     std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter______compressed_pair_28_29($1);
     $1 = $3 + 32 | 0;
     if ($1 >>> 0 < global$2 >>> 0) {
      __handle_stack_overflow()
     }
     global$0 = $1;
     return $0 | 0;
    }
    $0 = __cxa_find_matching_catch_2() | 0;
    getTempRet0() | 0;
    break label$2;
   }
   $0 = __cxa_find_matching_catch_2() | 0;
   getTempRet0() | 0;
   std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter______compressed_pair_28_29($1);
  }
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____shared_ptr_pointer_maxiKuramotoOscillatorSet__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiKuramotoOscillatorSet__20___val_deleter_2c_20std____2__allocator_maxiKuramotoOscillatorSet__20______shared_ptr_pointer_28_29($0) {
  $0 = $0 | 0;
  HEAP32[$0 >> 2] = 18780;
  std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter______compressed_pair_28_29($0 + 12 | 0);
  return $0 | 0;
 }
 
 function std____2____shared_ptr_pointer_maxiKuramotoOscillatorSet__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiKuramotoOscillatorSet__20___val_deleter_2c_20std____2__allocator_maxiKuramotoOscillatorSet__20______shared_ptr_pointer_28_29_1($0) {
  $0 = $0 | 0;
  dlfree(std____2____shared_ptr_pointer_maxiKuramotoOscillatorSet__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiKuramotoOscillatorSet__20___val_deleter_2c_20std____2__allocator_maxiKuramotoOscillatorSet__20______shared_ptr_pointer_28_29($0));
 }
 
 function std____2____shared_ptr_pointer_maxiKuramotoOscillatorSet__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiKuramotoOscillatorSet__20___val_deleter_2c_20std____2__allocator_maxiKuramotoOscillatorSet__20_____on_zero_shared_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $0 = $0 + 12 | 0;
  $1 = std____2____compressed_pair__IO_FILE__2c_20int_20_28__29_28_IO_FILE__29___second_28_29($0);
  $2 = HEAP32[$0 >> 2];
  HEAP32[16874] = 0;
  __invoke_void___22class_std____2__vector_13_22__i32(1108, $1 | 0, $2 | 0);
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($1 | 0) != 1) {
   emscripten__val___val_28_29(std____2____compressed_pair__IO_FILE__2c_20int_20_28__29_28_IO_FILE__29___second_28_29($0));
   return;
  }
  $0 = __cxa_find_matching_catch_3(0) | 0;
  getTempRet0() | 0;
  __clang_call_terminate($0);
  abort();
 }
 
 function std____2____shared_ptr_pointer_maxiKuramotoOscillatorSet__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiKuramotoOscillatorSet__20___val_deleter_2c_20std____2__allocator_maxiKuramotoOscillatorSet__20_____get_deleter_28std__type_info_20const__29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  if (std__type_info__operator___28std__type_info_20const__29_20const($1, 19056)) {
   $0 = std____2____compressed_pair__IO_FILE__2c_20int_20_28__29_28_IO_FILE__29___second_28_29($0 + 12 | 0)
  } else {
   $0 = 0
  }
  return $0 | 0;
 }
 
 function std____2__shared_ptr_maxiKuramotoOscillatorSet__20std____2__shared_ptr_maxiKuramotoOscillatorSet___make_shared_unsigned_20long_20const__28unsigned_20long_20const___29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0;
  $3 = global$0 - 48 | 0;
  $2 = $3;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  $2 = $3 + 40 | 0;
  $2 = std____2__unique_ptr_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20___unique_ptr_true_2c_20void__28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20__2c_20true_____good_rval_ref_type_29($3 + 24 | 0, operator_20new_28unsigned_20long_29(36), std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20_____allocator_destructor_28std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20___2c_20unsigned_20long_29($3 + 16 | 0, $2, 1));
  $4 = HEAP32[$2 >> 2];
  HEAP32[16874] = 0;
  __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1111, $4 | 0, $1 | 0) | 0;
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($1 | 0) != 1) {
   $0 = std____2__shared_ptr_maxiOsc___shared_ptr_28_29($0);
   HEAP32[$0 >> 2] = std____2____split_buffer_double_2c_20std____2__allocator_double_______end_cap_28_29(HEAP32[$2 >> 2]);
   HEAP32[$0 + 4 >> 2] = std____2__unique_ptr__IO_FILE_2c_20int_20_28__29_28_IO_FILE__29___release_28_29($2);
   $0 = HEAP32[$0 >> 2];
   HEAP32[$3 + 4 >> 2] = $0;
   HEAP32[$3 >> 2] = $0;
   std____2__unique_ptr_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20___reset_28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___29($2);
   $0 = $3 + 48 | 0;
   if ($0 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $0;
   return;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__unique_ptr_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20___reset_28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___29($2);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____shared_ptr_emplace_maxiKuramotoOscillatorSet_2c_20std____2__allocator_maxiKuramotoOscillatorSet__20_____shared_ptr_emplace_unsigned_20long_20const__28std____2__allocator_maxiKuramotoOscillatorSet__2c_20unsigned_20long_20const___29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0;
  $2 = global$0 - 16 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  std____2____shared_weak_count____shared_weak_count_28long_29($0);
  HEAP32[$0 >> 2] = 19140;
  $3 = std____2__tuple_std____2__allocator_maxiKuramotoOscillatorSet____20std____2__forward_as_tuple_std____2__allocator_maxiKuramotoOscillatorSet____28std____2__allocator_maxiKuramotoOscillatorSet___29($2 + 8 | 0);
  $1 = std____2__tuple_std____2__allocator_maxiKuramotoOscillatorSet____20std____2__forward_as_tuple_std____2__allocator_maxiKuramotoOscillatorSet____28std____2__allocator_maxiKuramotoOscillatorSet___29($1);
  HEAP32[16874] = 0;
  __invoke___22class_std____2__basic_istream_22____22class_std____2__basic_istream_22__i8__i32(1113, $0 + 12 | 0, $3 | 0, $1 | 0) | 0;
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($1 | 0) != 1) {
   $1 = $2 + 16 | 0;
   if ($1 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $1;
   return $0 | 0;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2__tuple_std____2__allocator_maxiKuramotoOscillatorSet____20std____2__forward_as_tuple_std____2__allocator_maxiKuramotoOscillatorSet____28std____2__allocator_maxiKuramotoOscillatorSet___29($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  $2 = $1 + 8 | 0;
  emscripten__val__take_ownership_28emscripten__internal___EM_VAL__29($2, $0);
  $0 = HEAP32[$2 >> 2];
  $1 = $1 + 16 | 0;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  return $0;
 }
 
 function std____2____compressed_pair_std____2__allocator_maxiKuramotoOscillatorSet__2c_20maxiKuramotoOscillatorSet_____compressed_pair_std____2__allocator_maxiKuramotoOscillatorSet___2c_20unsigned_20long_20const____28std____2__piecewise_construct_t_2c_20std____2__tuple_std____2__allocator_maxiKuramotoOscillatorSet____2c_20std____2__tuple_unsigned_20long_20const____29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0;
  $3 = global$0 - 16 | 0;
  $4 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  HEAP32[$3 >> 2] = $2;
  HEAP32[$3 + 8 >> 2] = $1;
  std____2____compressed_pair_elem_std____2__allocator_maxiKuramotoOscillatorSet__2c_200_2c_20true_____compressed_pair_elem_std____2__allocator_maxiKuramotoOscillatorSet___2c_200ul__28std____2__piecewise_construct_t_2c_20std____2__tuple_std____2__allocator_maxiKuramotoOscillatorSet____2c_20std____2____tuple_indices_0ul__29(HEAP32[$3 + 8 >> 2]);
  std____2____compressed_pair_elem_maxiKuramotoOscillatorSet_2c_201_2c_20false_____compressed_pair_elem_unsigned_20long_20const___2c_200ul__28std____2__piecewise_construct_t_2c_20std____2__tuple_unsigned_20long_20const____2c_20std____2____tuple_indices_0ul__29($0, HEAP32[$3 >> 2]);
  $1 = $3 + 16 | 0;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  return $0 | 0;
 }
 
 function std____2____compressed_pair_elem_std____2__allocator_maxiKuramotoOscillatorSet__2c_200_2c_20true_____compressed_pair_elem_std____2__allocator_maxiKuramotoOscillatorSet___2c_200ul__28std____2__piecewise_construct_t_2c_20std____2__tuple_std____2__allocator_maxiKuramotoOscillatorSet____2c_20std____2____tuple_indices_0ul__29($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  HEAP32[$1 + 8 >> 2] = $0;
  $0 = $1 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function std____2____compressed_pair_elem_maxiKuramotoOscillatorSet_2c_201_2c_20false_____compressed_pair_elem_unsigned_20long_20const___2c_200ul__28std____2__piecewise_construct_t_2c_20std____2__tuple_unsigned_20long_20const____2c_20std____2____tuple_indices_0ul__29($0, $1) {
  var $2 = 0, $3 = 0;
  $2 = global$0 - 16 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  HEAP32[$2 + 8 >> 2] = $1;
  maxiKuramotoOscillatorSet__maxiKuramotoOscillatorSet_28unsigned_20long_29($0, HEAP32[HEAP32[$2 + 8 >> 2] >> 2]);
  $0 = $2 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function std____2____shared_ptr_emplace_maxiKuramotoOscillatorSet_2c_20std____2__allocator_maxiKuramotoOscillatorSet__20______shared_ptr_emplace_28_29($0) {
  $0 = $0 | 0;
  HEAP32[$0 >> 2] = 19140;
  std____2____compressed_pair_elem_maxiKuramotoOscillatorSet_2c_201_2c_20false______compressed_pair_elem_28_29($0 + 12 | 0);
  return $0 | 0;
 }
 
 function std____2____compressed_pair_elem_maxiKuramotoOscillatorSet_2c_201_2c_20false______compressed_pair_elem_28_29($0) {
  maxiKuramotoOscillatorSet___maxiKuramotoOscillatorSet_28_29($0);
 }
 
 function std____2____shared_ptr_emplace_maxiKuramotoOscillatorSet_2c_20std____2__allocator_maxiKuramotoOscillatorSet__20______shared_ptr_emplace_28_29_1($0) {
  $0 = $0 | 0;
  dlfree(std____2____shared_ptr_emplace_maxiKuramotoOscillatorSet_2c_20std____2__allocator_maxiKuramotoOscillatorSet__20______shared_ptr_emplace_28_29($0));
 }
 
 function std____2____shared_ptr_emplace_maxiKuramotoOscillatorSet_2c_20std____2__allocator_maxiKuramotoOscillatorSet__20_____on_zero_shared_28_29($0) {
  $0 = $0 | 0;
  maxiKuramotoOscillatorSet___maxiKuramotoOscillatorSet_28_29($0 + 12 | 0);
 }
 
 function maxiKuramotoOscillatorSet__maxiKuramotoOscillatorSet_28unsigned_20long_29($0, $1) {
  var $2 = 0, $3 = 0;
  $2 = std____2__vector_short_2c_20std____2__allocator_short__20___vector_28_29($0);
  $0 = std____2__vector_int_2c_20std____2__allocator_int__20___vector_28_29($0 + 12 | 0);
  HEAP32[16874] = 0;
  __invoke_void___22class_std____2__vector_13_22__i32(1114, $2 | 0, $1 | 0);
  $3 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$1 : {
   if (($3 | 0) == 1) {
    break label$1
   }
   HEAP32[16874] = 0;
   __invoke_void___22class_std____2__vector_13_22__i32(11, $0 | 0, $1 | 0);
   $1 = HEAP32[16874];
   HEAP32[16874] = 0;
   if (($1 | 0) == 1) {
    break label$1
   }
   return;
  }
  $1 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__vector_double_2c_20std____2__allocator_double__20____vector_28_29($0);
  std____2__vector_maxiKuramotoOscillator_2c_20std____2__allocator_maxiKuramotoOscillator__20____vector_28_29($2);
  __resumeException($1 | 0);
  abort();
 }
 
 function std____2__vector_maxiKuramotoOscillator_2c_20std____2__allocator_maxiKuramotoOscillator__20___resize_28unsigned_20long_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = std____2__vector_maxiKuramotoOscillator_2c_20std____2__allocator_maxiKuramotoOscillator__20___size_28_29_20const($0);
  if ($2 >>> 0 < $1 >>> 0) {
   std____2__vector_maxiKuramotoOscillator_2c_20std____2__allocator_maxiKuramotoOscillator__20_____append_28unsigned_20long_29($0, $1 - $2 | 0);
   return;
  }
  if ($2 >>> 0 > $1 >>> 0) {
   $1 = HEAP32[$0 >> 2] + ($1 << 4) | 0;
   std____2__vector_maxiKuramotoOscillator_2c_20std____2__allocator_maxiKuramotoOscillator__20___size_28_29_20const($0);
   std____2____vector_base_maxiKuramotoOscillator_2c_20std____2__allocator_maxiKuramotoOscillator__20_____destruct_at_end_28maxiKuramotoOscillator__29($0, $1);
   std____2____vector_base_maxiKuramotoOscillator_2c_20std____2__allocator_maxiKuramotoOscillator__20___capacity_28_29_20const($0);
   std____2__vector_maxiKuramotoOscillator_2c_20std____2__allocator_maxiKuramotoOscillator__20___size_28_29_20const($0);
  }
 }
 
 function std____2__vector_maxiKuramotoOscillator_2c_20std____2__allocator_maxiKuramotoOscillator__20_____append_28unsigned_20long_29($0, $1) {
  var $2 = 0, $3 = 0;
  $3 = global$0 - 32 | 0;
  $2 = $3;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  label$2 : {
   label$3 : {
    if (HEAP32[std____2____vector_base_double_2c_20std____2__allocator_double__20_____alloc_28_29($0) >> 2] - HEAP32[$0 + 4 >> 2] >> 4 >>> 0 >= $1 >>> 0) {
     std____2__vector_maxiKuramotoOscillator_2c_20std____2__allocator_maxiKuramotoOscillator__20_____construct_at_end_28unsigned_20long_29($0, $1);
     break label$3;
    }
    $2 = std____2____vector_base_double_2c_20std____2__allocator_double__20_____alloc_28_29($0);
    $2 = std____2____split_buffer_maxiKuramotoOscillator_2c_20std____2__allocator_maxiKuramotoOscillator_______split_buffer_28unsigned_20long_2c_20unsigned_20long_2c_20std____2__allocator_maxiKuramotoOscillator___29($3 + 8 | 0, std____2__vector_maxiKuramotoOscillator_2c_20std____2__allocator_maxiKuramotoOscillator__20_____recommend_28unsigned_20long_29_20const($0, std____2__vector_maxiKuramotoOscillator_2c_20std____2__allocator_maxiKuramotoOscillator__20___size_28_29_20const($0) + $1 | 0), std____2__vector_maxiKuramotoOscillator_2c_20std____2__allocator_maxiKuramotoOscillator__20___size_28_29_20const($0), $2);
    HEAP32[16874] = 0;
    std____2____split_buffer_maxiKuramotoOscillator_2c_20std____2__allocator_maxiKuramotoOscillator_______construct_at_end_28unsigned_20long_29($2, $1);
    $1 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($1 | 0) == 1) {
     break label$2
    }
    HEAP32[16874] = 0;
    __invoke_void___22class_std____2__vector_13_22__i32(1117, $0 | 0, $2 | 0);
    $0 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($0 | 0) == 1) {
     break label$2
    }
    std____2____split_buffer_maxiKuramotoOscillator_2c_20std____2__allocator_maxiKuramotoOscillator________split_buffer_28_29($2);
   }
   $0 = $3 + 32 | 0;
   if ($0 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $0;
   return;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2____split_buffer_maxiKuramotoOscillator_2c_20std____2__allocator_maxiKuramotoOscillator________split_buffer_28_29($2);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2__vector_maxiKuramotoOscillator_2c_20std____2__allocator_maxiKuramotoOscillator__20_____construct_at_end_28unsigned_20long_29($0, $1) {
  var $2 = 0, $3 = 0;
  $2 = global$0 - 16 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  std____2____vector_base_double_2c_20std____2__allocator_double__20_____alloc_28_29($0);
  while (1) {
   void_20std____2__allocator_traits_std____2__allocator_maxiKuramotoOscillator__20_____construct_maxiKuramotoOscillator__28std____2__integral_constant_bool_2c_20true__2c_20std____2__allocator_maxiKuramotoOscillator___2c_20maxiKuramotoOscillator__29(HEAP32[$0 + 4 >> 2]);
   HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + 16;
   $1 = $1 + -1 | 0;
   if ($1) {
    continue
   }
   break;
  };
  $0 = $2 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function std____2__vector_maxiKuramotoOscillator_2c_20std____2__allocator_maxiKuramotoOscillator__20_____recommend_28unsigned_20long_29_20const($0, $1) {
  var $2 = 0, $3 = 0;
  $2 = global$0 - 16 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  HEAP32[$2 + 12 >> 2] = $1;
  $1 = std____2__vector_maxiKuramotoOscillator_2c_20std____2__allocator_maxiKuramotoOscillator__20___max_size_28_29_20const($0);
  if (HEAPU32[$2 + 12 >> 2] <= $1 >>> 0) {
   $0 = std____2____vector_base_maxiKuramotoOscillator_2c_20std____2__allocator_maxiKuramotoOscillator__20___capacity_28_29_20const($0);
   if ($0 >>> 0 < $1 >>> 1 >>> 0) {
    HEAP32[$2 + 8 >> 2] = $0 << 1;
    $1 = HEAP32[unsigned_20long_20const__20std____2__max_unsigned_20long__28unsigned_20long_20const__2c_20unsigned_20long_20const__29($2 + 8 | 0, $2 + 12 | 0) >> 2];
   }
   $0 = $2 + 16 | 0;
   if ($0 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $0;
   return $1;
  }
  std____2____vector_base_common_true_____throw_length_error_28_29_20const();
  abort();
 }
 
 function std____2____split_buffer_maxiKuramotoOscillator_2c_20std____2__allocator_maxiKuramotoOscillator_______split_buffer_28unsigned_20long_2c_20unsigned_20long_2c_20std____2__allocator_maxiKuramotoOscillator___29($0, $1, $2, $3) {
  var $4 = 0, $5 = 0;
  $5 = global$0 - 16 | 0;
  $4 = $5;
  if ($4 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  $4 = 0;
  HEAP32[$5 + 12 >> 2] = 0;
  std____2____compressed_pair_double__2c_20std____2__allocator_double_______compressed_pair_std__nullptr_t_2c_20std____2__allocator_double____28std__nullptr_t___2c_20std____2__allocator_double___29($0 + 12 | 0, $5 + 12 | 0, $3);
  if ($1) {
   std____2____split_buffer_double_2c_20std____2__allocator_double_______alloc_28_29($0);
   $3 = $1;
   if (268435455 < $1 >>> 0) {
    std____2____throw_length_error_28char_20const__29(4309);
    abort();
   }
   $4 = operator_20new_28unsigned_20long_29($3 << 4);
  }
  HEAP32[$0 >> 2] = $4;
  $2 = ($2 << 4) + $4 | 0;
  HEAP32[$0 + 8 >> 2] = $2;
  HEAP32[$0 + 4 >> 2] = $2;
  HEAP32[std____2____split_buffer_double_2c_20std____2__allocator_double_______end_cap_28_29($0) >> 2] = ($1 << 4) + $4;
  $1 = $5 + 16 | 0;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  return $0;
 }
 
 function std____2____split_buffer_maxiKuramotoOscillator_2c_20std____2__allocator_maxiKuramotoOscillator_______construct_at_end_28unsigned_20long_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  std____2____split_buffer_double_2c_20std____2__allocator_double_______alloc_28_29($0);
  while (1) {
   void_20std____2__allocator_traits_std____2__allocator_maxiKuramotoOscillator__20_____construct_maxiKuramotoOscillator__28std____2__integral_constant_bool_2c_20true__2c_20std____2__allocator_maxiKuramotoOscillator___2c_20maxiKuramotoOscillator__29(HEAP32[$0 + 8 >> 2]);
   HEAP32[$0 + 8 >> 2] = HEAP32[$0 + 8 >> 2] + 16;
   $1 = $1 + -1 | 0;
   if ($1) {
    continue
   }
   break;
  };
 }
 
 function std____2__vector_maxiKuramotoOscillator_2c_20std____2__allocator_maxiKuramotoOscillator__20_____swap_out_circular_buffer_28std____2____split_buffer_maxiKuramotoOscillator_2c_20std____2__allocator_maxiKuramotoOscillator_____29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0;
  std____2__vector_maxiKuramotoOscillator_2c_20std____2__allocator_maxiKuramotoOscillator__20_____annotate_delete_28_29_20const($0);
  $3 = std____2____vector_base_double_2c_20std____2__allocator_double__20_____alloc_28_29($0);
  $2 = $1 + 4 | 0;
  std____2__enable_if__28_28std____2__integral_constant_bool_2c_20true___value_29_20___20_28__28__has_construct_std____2__allocator_double__2c_20bool__2c_20bool___value_29_29_29_20___20_28is_trivially_move_constructible_bool___value_29_2c_20void___type_20std____2__allocator_traits_std____2__allocator_double__20_____construct_backward_double__28std____2__allocator_double___2c_20bool__2c_20bool__2c_20bool___29($3, HEAP32[$0 >> 2], HEAP32[$0 + 4 >> 2], $2);
  std____2__enable_if__28is_move_constructible_double____value_29_20___20_28is_move_assignable_double____value_29_2c_20void___type_20std____2__swap_double___28double___2c_20double___29($0, $2);
  std____2__enable_if__28is_move_constructible_double____value_29_20___20_28is_move_assignable_double____value_29_2c_20void___type_20std____2__swap_double___28double___2c_20double___29($0 + 4 | 0, $1 + 8 | 0);
  std____2__enable_if__28is_move_constructible_double____value_29_20___20_28is_move_assignable_double____value_29_2c_20void___type_20std____2__swap_double___28double___2c_20double___29(std____2____vector_base_double_2c_20std____2__allocator_double__20_____alloc_28_29($0), std____2____split_buffer_double_2c_20std____2__allocator_double_______end_cap_28_29($1));
  HEAP32[$1 >> 2] = HEAP32[$1 + 4 >> 2];
  std____2__vector_maxiKuramotoOscillator_2c_20std____2__allocator_maxiKuramotoOscillator__20___size_28_29_20const($0);
  std____2____vector_base_maxiKuramotoOscillator_2c_20std____2__allocator_maxiKuramotoOscillator__20___capacity_28_29_20const($0);
  std____2____vector_base_maxiKuramotoOscillator_2c_20std____2__allocator_maxiKuramotoOscillator__20___capacity_28_29_20const($0);
 }
 
 function std____2____split_buffer_maxiKuramotoOscillator_2c_20std____2__allocator_maxiKuramotoOscillator________split_buffer_28_29($0) {
  std____2____split_buffer_maxiKuramotoOscillator_2c_20std____2__allocator_maxiKuramotoOscillator_______destruct_at_end_28maxiKuramotoOscillator__2c_20std____2__integral_constant_bool_2c_20false__29($0, HEAP32[$0 + 4 >> 2]);
  if (HEAP32[$0 >> 2]) {
   std____2__allocator_traits_std____2__allocator_char__20___deallocate_28std____2__allocator_char___2c_20char__2c_20unsigned_20long_29(std____2____split_buffer_double_2c_20std____2__allocator_double_______alloc_28_29($0), HEAP32[$0 >> 2], HEAP32[std____2____split_buffer_double_2c_20std____2__allocator_double_______end_cap_28_29($0) >> 2] - HEAP32[$0 >> 2] >> 4)
  }
 }
 
 function std____2__vector_maxiKuramotoOscillator_2c_20std____2__allocator_maxiKuramotoOscillator__20___max_size_28_29_20const($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  std____2____vector_base_double_2c_20std____2__allocator_double__20_____alloc_28_29($0);
  HEAP32[$1 + 12 >> 2] = 268435455;
  HEAP32[16874] = 0;
  HEAP32[$1 + 8 >> 2] = 2147483647;
  $0 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(38, $1 + 12 | 0, $1 + 8 | 0) | 0;
  $2 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($2 | 0) != 1) {
   $0 = HEAP32[$0 >> 2];
   $1 = $1 + 16 | 0;
   if ($1 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $1;
   return $0;
  }
  $0 = __cxa_find_matching_catch_3(0) | 0;
  getTempRet0() | 0;
  __clang_call_terminate($0);
  abort();
 }
 
 function void_20std____2__allocator_traits_std____2__allocator_maxiKuramotoOscillator__20_____construct_maxiKuramotoOscillator__28std____2__integral_constant_bool_2c_20true__2c_20std____2__allocator_maxiKuramotoOscillator___2c_20maxiKuramotoOscillator__29($0) {
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$0 + 8 >> 2] = 0;
  HEAP32[$0 + 12 >> 2] = 0;
  maxiKuramotoOscillator__maxiKuramotoOscillator_28_29($0);
 }
 
 function std____2____split_buffer_maxiKuramotoOscillator_2c_20std____2__allocator_maxiKuramotoOscillator_______destruct_at_end_28maxiKuramotoOscillator__2c_20std____2__integral_constant_bool_2c_20false__29($0, $1) {
  var $2 = 0;
  label$1 : {
   while (1) {
    if (HEAP32[$0 + 8 >> 2] == ($1 | 0)) {
     break label$1
    }
    std____2____split_buffer_double_2c_20std____2__allocator_double_______alloc_28_29($0);
    HEAP32[$0 + 8 >> 2] = HEAP32[$0 + 8 >> 2] + -16;
    HEAP32[16874] = 0;
    $2 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($2 | 0) != 1) {
     continue
    }
    break;
   };
   $0 = __cxa_find_matching_catch_3(0) | 0;
   getTempRet0() | 0;
   __clang_call_terminate($0);
   abort();
  }
 }
 
 function emscripten__internal__MethodInvoker_void_20_28maxiKuramotoOscillatorSet____29_28double_2c_20unsigned_20long_29_2c_20void_2c_20maxiKuramotoOscillatorSet__2c_20double_2c_20unsigned_20long___invoke_28void_20_28maxiKuramotoOscillatorSet____20const__29_28double_2c_20unsigned_20long_29_2c_20maxiKuramotoOscillatorSet__2c_20double_2c_20unsigned_20long_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = +$2;
  $3 = $3 | 0;
  var $4 = 0;
  $4 = $1;
  $1 = HEAP32[$0 + 4 >> 2];
  $4 = $4 + ($1 >> 1) | 0;
  $0 = HEAP32[$0 >> 2];
  FUNCTION_TABLE[$1 & 1 ? HEAP32[$0 + HEAP32[$4 >> 2] >> 2] : $0]($4, $2, $3);
 }
 
 function emscripten__internal__MethodInvoker_double_20_28maxiKuramotoOscillatorSet____29_28unsigned_20long_29_2c_20double_2c_20maxiKuramotoOscillatorSet__2c_20unsigned_20long___invoke_28double_20_28maxiKuramotoOscillatorSet____20const__29_28unsigned_20long_29_2c_20maxiKuramotoOscillatorSet__2c_20unsigned_20long_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0.0;
  $4 = global$0 - 16 | 0;
  $3 = $4;
  if ($4 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  $3 = $1;
  $1 = HEAP32[$0 + 4 >> 2];
  $3 = $3 + ($1 >> 1) | 0;
  $0 = HEAP32[$0 >> 2];
  HEAPF64[$4 + 8 >> 3] = FUNCTION_TABLE[$1 & 1 ? HEAP32[$0 + HEAP32[$3 >> 2] >> 2] : $0]($3, $2);
  $5 = HEAPF64[$4 + 8 >> 3];
  $0 = $4 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
  return +$5;
 }
 
 function std____2__shared_ptr_maxiAsyncKuramotoOscillator___shared_ptr_maxiAsyncKuramotoOscillator_2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiAsyncKuramotoOscillator__20___val_deleter__28maxiAsyncKuramotoOscillator__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiAsyncKuramotoOscillator__20___val_deleter_2c_20std____2__enable_if_is_convertible_maxiAsyncKuramotoOscillator__2c_20maxiAsyncKuramotoOscillator____value_2c_20std____2__shared_ptr_maxiAsyncKuramotoOscillator_____nat___type_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0;
  $3 = global$0 - 32 | 0;
  $4 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  HEAP32[$0 >> 2] = $1;
  HEAP32[16874] = 0;
  $4 = __invoke_i1___22class_std____2__basic_ifstream_22_(930, 20) | 0;
  $5 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      if (($5 | 0) != 1) {
       HEAP32[16874] = 0;
       $5 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1118, $3 + 24 | 0, $2 | 0) | 0;
       $6 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($6 | 0) == 1) {
        break label$5
       }
       HEAP32[16874] = 0;
       __invoke___22class_std____2__basic_istream_22____22class_std____2__basic_istream_22__i8__i32(1119, $4 | 0, $1 | 0, $5 | 0) | 0;
       $6 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($6 | 0) == 1) {
        break label$4
       }
       HEAP32[$0 + 4 >> 2] = $4;
       emscripten__val___val_28_29($5);
       HEAP32[$3 + 4 >> 2] = $1;
       HEAP32[$3 >> 2] = $1;
       $1 = $3 + 32 | 0;
       if ($1 >>> 0 < global$2 >>> 0) {
        __handle_stack_overflow()
       }
       global$0 = $1;
       return $0 | 0;
      }
      $3 = __cxa_find_matching_catch_3(0) | 0;
      getTempRet0() | 0;
      break label$2;
     }
     $3 = __cxa_find_matching_catch_3(0) | 0;
     getTempRet0() | 0;
     break label$3;
    }
    $3 = __cxa_find_matching_catch_3(0) | 0;
    getTempRet0() | 0;
    emscripten__val___val_28_29($5);
   }
   dlfree($4);
  }
  __cxa_begin_catch($3 | 0) | 0;
  HEAP32[16874] = 0;
  __invoke_void___22class_std____2__vector_13_22__i32(1120, $2 | 0, $1 | 0);
  $0 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$8 : {
   label$9 : {
    if (($0 | 0) != 1) {
     HEAP32[16874] = 0;
     __invoke_void(934);
     $0 = HEAP32[16874];
     HEAP32[16874] = 0;
     if (($0 | 0) != 1) {
      break label$9
     }
    }
    $0 = __cxa_find_matching_catch_2() | 0;
    getTempRet0() | 0;
    HEAP32[16874] = 0;
    __invoke_void(23);
    $1 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($1 | 0) != 1) {
     break label$8
    }
    $0 = __cxa_find_matching_catch_3(0) | 0;
    getTempRet0() | 0;
    __clang_call_terminate($0);
   }
   abort();
  }
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____shared_ptr_pointer_maxiAsyncKuramotoOscillator__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiAsyncKuramotoOscillator__20___val_deleter_2c_20std____2__allocator_maxiAsyncKuramotoOscillator__20_____shared_ptr_pointer_28maxiAsyncKuramotoOscillator__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiAsyncKuramotoOscillator__20___val_deleter_2c_20std____2__allocator_maxiAsyncKuramotoOscillator__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0;
  $3 = global$0 - 32 | 0;
  $4 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  HEAP32[$3 + 20 >> 2] = $1;
  std____2____shared_weak_count____shared_weak_count_28long_29($0);
  HEAP32[$0 >> 2] = 19492;
  HEAP32[16874] = 0;
  $1 = std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_____compressed_pair_maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__28maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter___29($3 + 8 | 0, $3 + 20 | 0, $2);
  $2 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    if (($2 | 0) != 1) {
     HEAP32[16874] = 0;
     std____2____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20_____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20__28std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter____2c_20std____2__allocator_maxiOsc____29($0 + 12 | 0, $1, $3 + 24 | 0);
     $2 = HEAP32[16874];
     HEAP32[16874] = 0;
     if (($2 | 0) == 1) {
      break label$3
     }
     std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter______compressed_pair_28_29($1);
     $1 = $3 + 32 | 0;
     if ($1 >>> 0 < global$2 >>> 0) {
      __handle_stack_overflow()
     }
     global$0 = $1;
     return $0 | 0;
    }
    $0 = __cxa_find_matching_catch_2() | 0;
    getTempRet0() | 0;
    break label$2;
   }
   $0 = __cxa_find_matching_catch_2() | 0;
   getTempRet0() | 0;
   std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter______compressed_pair_28_29($1);
  }
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____shared_ptr_pointer_maxiAsyncKuramotoOscillator__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiAsyncKuramotoOscillator__20___val_deleter_2c_20std____2__allocator_maxiAsyncKuramotoOscillator__20______shared_ptr_pointer_28_29($0) {
  $0 = $0 | 0;
  HEAP32[$0 >> 2] = 19492;
  std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter______compressed_pair_28_29($0 + 12 | 0);
  return $0 | 0;
 }
 
 function std____2____shared_ptr_pointer_maxiAsyncKuramotoOscillator__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiAsyncKuramotoOscillator__20___val_deleter_2c_20std____2__allocator_maxiAsyncKuramotoOscillator__20______shared_ptr_pointer_28_29_1($0) {
  $0 = $0 | 0;
  dlfree(std____2____shared_ptr_pointer_maxiAsyncKuramotoOscillator__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiAsyncKuramotoOscillator__20___val_deleter_2c_20std____2__allocator_maxiAsyncKuramotoOscillator__20______shared_ptr_pointer_28_29($0));
 }
 
 function std____2____shared_ptr_pointer_maxiAsyncKuramotoOscillator__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiAsyncKuramotoOscillator__20___val_deleter_2c_20std____2__allocator_maxiAsyncKuramotoOscillator__20_____on_zero_shared_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $0 = $0 + 12 | 0;
  $1 = std____2____compressed_pair__IO_FILE__2c_20int_20_28__29_28_IO_FILE__29___second_28_29($0);
  $2 = HEAP32[$0 >> 2];
  HEAP32[16874] = 0;
  __invoke_void___22class_std____2__vector_13_22__i32(1120, $1 | 0, $2 | 0);
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($1 | 0) != 1) {
   emscripten__val___val_28_29(std____2____compressed_pair__IO_FILE__2c_20int_20_28__29_28_IO_FILE__29___second_28_29($0));
   return;
  }
  $0 = __cxa_find_matching_catch_3(0) | 0;
  getTempRet0() | 0;
  __clang_call_terminate($0);
  abort();
 }
 
 function std____2____shared_ptr_pointer_maxiAsyncKuramotoOscillator__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiAsyncKuramotoOscillator__20___val_deleter_2c_20std____2__allocator_maxiAsyncKuramotoOscillator__20_____get_deleter_28std__type_info_20const__29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  if (std__type_info__operator___28std__type_info_20const__29_20const($1, 19776)) {
   $0 = std____2____compressed_pair__IO_FILE__2c_20int_20_28__29_28_IO_FILE__29___second_28_29($0 + 12 | 0)
  } else {
   $0 = 0
  }
  return $0 | 0;
 }
 
 function std____2__shared_ptr_maxiAsyncKuramotoOscillator__20std____2__shared_ptr_maxiAsyncKuramotoOscillator___make_shared_unsigned_20long_20const__28unsigned_20long_20const___29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0;
  $3 = global$0 - 48 | 0;
  $2 = $3;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  $2 = $3 + 40 | 0;
  $2 = std____2__unique_ptr_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20___unique_ptr_true_2c_20void__28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20__2c_20true_____good_rval_ref_type_29($3 + 24 | 0, operator_20new_28unsigned_20long_29(40), std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20_____allocator_destructor_28std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20___2c_20unsigned_20long_29($3 + 16 | 0, $2, 1));
  $4 = HEAP32[$2 >> 2];
  HEAP32[16874] = 0;
  __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1123, $4 | 0, $1 | 0) | 0;
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($1 | 0) != 1) {
   $0 = std____2__shared_ptr_maxiOsc___shared_ptr_28_29($0);
   HEAP32[$0 >> 2] = std____2____split_buffer_double_2c_20std____2__allocator_double_______end_cap_28_29(HEAP32[$2 >> 2]);
   HEAP32[$0 + 4 >> 2] = std____2__unique_ptr__IO_FILE_2c_20int_20_28__29_28_IO_FILE__29___release_28_29($2);
   $0 = HEAP32[$0 >> 2];
   HEAP32[$3 + 4 >> 2] = $0;
   HEAP32[$3 >> 2] = $0;
   std____2__unique_ptr_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20___reset_28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___29($2);
   $0 = $3 + 48 | 0;
   if ($0 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $0;
   return;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__unique_ptr_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20___reset_28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___29($2);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____shared_ptr_emplace_maxiAsyncKuramotoOscillator_2c_20std____2__allocator_maxiAsyncKuramotoOscillator__20_____shared_ptr_emplace_unsigned_20long_20const__28std____2__allocator_maxiAsyncKuramotoOscillator__2c_20unsigned_20long_20const___29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0;
  $2 = global$0 - 16 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  std____2____shared_weak_count____shared_weak_count_28long_29($0);
  HEAP32[$0 >> 2] = 19860;
  $3 = std____2__tuple_std____2__allocator_maxiKuramotoOscillatorSet____20std____2__forward_as_tuple_std____2__allocator_maxiKuramotoOscillatorSet____28std____2__allocator_maxiKuramotoOscillatorSet___29($2 + 8 | 0);
  $1 = std____2__tuple_std____2__allocator_maxiKuramotoOscillatorSet____20std____2__forward_as_tuple_std____2__allocator_maxiKuramotoOscillatorSet____28std____2__allocator_maxiKuramotoOscillatorSet___29($1);
  HEAP32[16874] = 0;
  __invoke___22class_std____2__basic_istream_22____22class_std____2__basic_istream_22__i8__i32(1125, $0 + 12 | 0, $3 | 0, $1 | 0) | 0;
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($1 | 0) != 1) {
   $1 = $2 + 16 | 0;
   if ($1 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $1;
   return $0 | 0;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____compressed_pair_std____2__allocator_maxiAsyncKuramotoOscillator__2c_20maxiAsyncKuramotoOscillator_____compressed_pair_std____2__allocator_maxiAsyncKuramotoOscillator___2c_20unsigned_20long_20const____28std____2__piecewise_construct_t_2c_20std____2__tuple_std____2__allocator_maxiAsyncKuramotoOscillator____2c_20std____2__tuple_unsigned_20long_20const____29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0;
  $3 = global$0 - 16 | 0;
  $4 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  HEAP32[$3 >> 2] = $2;
  HEAP32[$3 + 8 >> 2] = $1;
  std____2____compressed_pair_elem_std____2__allocator_maxiKuramotoOscillatorSet__2c_200_2c_20true_____compressed_pair_elem_std____2__allocator_maxiKuramotoOscillatorSet___2c_200ul__28std____2__piecewise_construct_t_2c_20std____2__tuple_std____2__allocator_maxiKuramotoOscillatorSet____2c_20std____2____tuple_indices_0ul__29(HEAP32[$3 + 8 >> 2]);
  std____2____compressed_pair_elem_maxiAsyncKuramotoOscillator_2c_201_2c_20false_____compressed_pair_elem_unsigned_20long_20const___2c_200ul__28std____2__piecewise_construct_t_2c_20std____2__tuple_unsigned_20long_20const____2c_20std____2____tuple_indices_0ul__29($0, HEAP32[$3 >> 2]);
  $1 = $3 + 16 | 0;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  return $0 | 0;
 }
 
 function std____2____compressed_pair_elem_maxiAsyncKuramotoOscillator_2c_201_2c_20false_____compressed_pair_elem_unsigned_20long_20const___2c_200ul__28std____2__piecewise_construct_t_2c_20std____2__tuple_unsigned_20long_20const____2c_20std____2____tuple_indices_0ul__29($0, $1) {
  var $2 = 0, $3 = 0;
  $2 = global$0 - 16 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  HEAP32[$2 + 8 >> 2] = $1;
  maxiKuramotoOscillatorSet__maxiKuramotoOscillatorSet_28unsigned_20long_29($0, HEAP32[HEAP32[$2 + 8 >> 2] >> 2]);
  HEAP8[$0 + 24 | 0] = 0;
  $0 = $2 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function std____2____shared_ptr_emplace_maxiAsyncKuramotoOscillator_2c_20std____2__allocator_maxiAsyncKuramotoOscillator__20______shared_ptr_emplace_28_29($0) {
  $0 = $0 | 0;
  HEAP32[$0 >> 2] = 19860;
  std____2____compressed_pair_elem_maxiKuramotoOscillatorSet_2c_201_2c_20false______compressed_pair_elem_28_29($0 + 12 | 0);
  return $0 | 0;
 }
 
 function std____2____shared_ptr_emplace_maxiAsyncKuramotoOscillator_2c_20std____2__allocator_maxiAsyncKuramotoOscillator__20______shared_ptr_emplace_28_29_1($0) {
  $0 = $0 | 0;
  dlfree(std____2____shared_ptr_emplace_maxiAsyncKuramotoOscillator_2c_20std____2__allocator_maxiAsyncKuramotoOscillator__20______shared_ptr_emplace_28_29($0));
 }
 
 function maxiFFT___maxiFFT_28_29($0) {
  fft___fft_28_29($0 + 72 | 0);
  std____2__vector_float_2c_20std____2__allocator_float__20____vector_28_29($0 + 48 | 0);
  std____2__vector_float_2c_20std____2__allocator_float__20____vector_28_29($0 + 36 | 0);
  std____2__vector_float_2c_20std____2__allocator_float__20____vector_28_29($0 + 24 | 0);
  std____2__vector_float_2c_20std____2__allocator_float__20____vector_28_29($0 + 12 | 0);
  std____2__vector_float_2c_20std____2__allocator_float__20____vector_28_29($0);
  return $0;
 }
 
 function std____2__shared_ptr_maxiFFT___shared_ptr_maxiFFT_2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiFFT__20___val_deleter__28maxiFFT__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiFFT__20___val_deleter_2c_20std____2__enable_if_is_convertible_maxiFFT__2c_20maxiFFT____value_2c_20std____2__shared_ptr_maxiFFT_____nat___type_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0;
  $3 = global$0 - 32 | 0;
  $4 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  HEAP32[$0 >> 2] = $1;
  HEAP32[16874] = 0;
  $4 = __invoke_i1___22class_std____2__basic_ifstream_22_(930, 20) | 0;
  $5 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      if (($5 | 0) != 1) {
       HEAP32[16874] = 0;
       $5 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1126, $3 + 24 | 0, $2 | 0) | 0;
       $6 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($6 | 0) == 1) {
        break label$5
       }
       HEAP32[16874] = 0;
       __invoke___22class_std____2__basic_istream_22____22class_std____2__basic_istream_22__i8__i32(1127, $4 | 0, $1 | 0, $5 | 0) | 0;
       $6 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($6 | 0) == 1) {
        break label$4
       }
       HEAP32[$0 + 4 >> 2] = $4;
       emscripten__val___val_28_29($5);
       HEAP32[$3 + 4 >> 2] = $1;
       HEAP32[$3 >> 2] = $1;
       $1 = $3 + 32 | 0;
       if ($1 >>> 0 < global$2 >>> 0) {
        __handle_stack_overflow()
       }
       global$0 = $1;
       return $0 | 0;
      }
      $3 = __cxa_find_matching_catch_3(0) | 0;
      getTempRet0() | 0;
      break label$2;
     }
     $3 = __cxa_find_matching_catch_3(0) | 0;
     getTempRet0() | 0;
     break label$3;
    }
    $3 = __cxa_find_matching_catch_3(0) | 0;
    getTempRet0() | 0;
    emscripten__val___val_28_29($5);
   }
   dlfree($4);
  }
  __cxa_begin_catch($3 | 0) | 0;
  HEAP32[16874] = 0;
  __invoke_void___22class_std____2__vector_13_22__i32(1128, $2 | 0, $1 | 0);
  $0 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$8 : {
   label$9 : {
    if (($0 | 0) != 1) {
     HEAP32[16874] = 0;
     __invoke_void(934);
     $0 = HEAP32[16874];
     HEAP32[16874] = 0;
     if (($0 | 0) != 1) {
      break label$9
     }
    }
    $0 = __cxa_find_matching_catch_2() | 0;
    getTempRet0() | 0;
    HEAP32[16874] = 0;
    __invoke_void(23);
    $1 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($1 | 0) != 1) {
     break label$8
    }
    $0 = __cxa_find_matching_catch_3(0) | 0;
    getTempRet0() | 0;
    __clang_call_terminate($0);
   }
   abort();
  }
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____shared_ptr_pointer_maxiFFT__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiFFT__20___val_deleter_2c_20std____2__allocator_maxiFFT__20_____shared_ptr_pointer_28maxiFFT__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiFFT__20___val_deleter_2c_20std____2__allocator_maxiFFT__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0;
  $3 = global$0 - 32 | 0;
  $4 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  HEAP32[$3 + 20 >> 2] = $1;
  std____2____shared_weak_count____shared_weak_count_28long_29($0);
  HEAP32[$0 >> 2] = 20132;
  HEAP32[16874] = 0;
  $1 = std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_____compressed_pair_maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__28maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter___29($3 + 8 | 0, $3 + 20 | 0, $2);
  $2 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    if (($2 | 0) != 1) {
     HEAP32[16874] = 0;
     std____2____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20_____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20__28std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter____2c_20std____2__allocator_maxiOsc____29($0 + 12 | 0, $1, $3 + 24 | 0);
     $2 = HEAP32[16874];
     HEAP32[16874] = 0;
     if (($2 | 0) == 1) {
      break label$3
     }
     std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter______compressed_pair_28_29($1);
     $1 = $3 + 32 | 0;
     if ($1 >>> 0 < global$2 >>> 0) {
      __handle_stack_overflow()
     }
     global$0 = $1;
     return $0 | 0;
    }
    $0 = __cxa_find_matching_catch_2() | 0;
    getTempRet0() | 0;
    break label$2;
   }
   $0 = __cxa_find_matching_catch_2() | 0;
   getTempRet0() | 0;
   std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter______compressed_pair_28_29($1);
  }
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____shared_ptr_pointer_maxiFFT__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiFFT__20___val_deleter_2c_20std____2__allocator_maxiFFT__20______shared_ptr_pointer_28_29($0) {
  $0 = $0 | 0;
  HEAP32[$0 >> 2] = 20132;
  std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter______compressed_pair_28_29($0 + 12 | 0);
  return $0 | 0;
 }
 
 function std____2____shared_ptr_pointer_maxiFFT__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiFFT__20___val_deleter_2c_20std____2__allocator_maxiFFT__20______shared_ptr_pointer_28_29_1($0) {
  $0 = $0 | 0;
  dlfree(std____2____shared_ptr_pointer_maxiFFT__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiFFT__20___val_deleter_2c_20std____2__allocator_maxiFFT__20______shared_ptr_pointer_28_29($0));
 }
 
 function std____2____shared_ptr_pointer_maxiFFT__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiFFT__20___val_deleter_2c_20std____2__allocator_maxiFFT__20_____on_zero_shared_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $0 = $0 + 12 | 0;
  $1 = std____2____compressed_pair__IO_FILE__2c_20int_20_28__29_28_IO_FILE__29___second_28_29($0);
  $2 = HEAP32[$0 >> 2];
  HEAP32[16874] = 0;
  __invoke_void___22class_std____2__vector_13_22__i32(1128, $1 | 0, $2 | 0);
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($1 | 0) != 1) {
   emscripten__val___val_28_29(std____2____compressed_pair__IO_FILE__2c_20int_20_28__29_28_IO_FILE__29___second_28_29($0));
   return;
  }
  $0 = __cxa_find_matching_catch_3(0) | 0;
  getTempRet0() | 0;
  __clang_call_terminate($0);
  abort();
 }
 
 function std____2____shared_ptr_pointer_maxiFFT__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiFFT__20___val_deleter_2c_20std____2__allocator_maxiFFT__20_____get_deleter_28std__type_info_20const__29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  if (std__type_info__operator___28std__type_info_20const__29_20const($1, 20372)) {
   $0 = std____2____compressed_pair__IO_FILE__2c_20int_20_28__29_28_IO_FILE__29___second_28_29($0 + 12 | 0)
  } else {
   $0 = 0
  }
  return $0 | 0;
 }
 
 function std____2__shared_ptr_maxiFFT__20std____2__shared_ptr_maxiFFT___make_shared___28_29($0) {
  var $1 = 0, $2 = 0, $3 = 0;
  $2 = global$0 - 48 | 0;
  $1 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  $1 = $2 + 40 | 0;
  $1 = std____2__unique_ptr_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20___unique_ptr_true_2c_20void__28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20__2c_20true_____good_rval_ref_type_29($2 + 24 | 0, operator_20new_28unsigned_20long_29(160), std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20_____allocator_destructor_28std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20___2c_20unsigned_20long_29($2 + 16 | 0, $1, 1));
  $3 = HEAP32[$1 >> 2];
  HEAP32[16874] = 0;
  __invoke_i1___22class_std____2__basic_ifstream_22_(1131, $3 | 0) | 0;
  $3 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($3 | 0) != 1) {
   $0 = std____2__shared_ptr_maxiOsc___shared_ptr_28_29($0);
   HEAP32[$0 >> 2] = std____2____split_buffer_double_2c_20std____2__allocator_double_______end_cap_28_29(HEAP32[$1 >> 2]);
   HEAP32[$0 + 4 >> 2] = std____2__unique_ptr__IO_FILE_2c_20int_20_28__29_28_IO_FILE__29___release_28_29($1);
   $0 = HEAP32[$0 >> 2];
   HEAP32[$2 + 4 >> 2] = $0;
   HEAP32[$2 >> 2] = $0;
   std____2__unique_ptr_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20___reset_28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___29($1);
   $0 = $2 + 48 | 0;
   if ($0 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $0;
   return;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__unique_ptr_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20___reset_28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___29($1);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____shared_ptr_emplace_maxiFFT_2c_20std____2__allocator_maxiFFT__20_____shared_ptr_emplace_28std____2__allocator_maxiFFT__29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  std____2____shared_weak_count____shared_weak_count_28long_29($0);
  HEAP32[$0 >> 2] = 20432;
  HEAP32[16874] = 0;
  __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1133, $0 + 12 | 0, $1 + 8 | 0) | 0;
  $2 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($2 | 0) != 1) {
   $1 = $1 + 16 | 0;
   if ($1 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $1;
   return $0 | 0;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____compressed_pair_std____2__allocator_maxiFFT__2c_20maxiFFT_____compressed_pair_std____2__allocator_maxiFFT__2c_20true__28std____2__allocator_maxiFFT____29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  maxiFFT__maxiFFT_28_29($0);
  return $0 | 0;
 }
 
 function std____2____shared_ptr_emplace_maxiFFT_2c_20std____2__allocator_maxiFFT__20______shared_ptr_emplace_28_29($0) {
  $0 = $0 | 0;
  HEAP32[$0 >> 2] = 20432;
  maxiFFT___maxiFFT_28_29($0 + 12 | 0);
  return $0 | 0;
 }
 
 function std____2____shared_ptr_emplace_maxiFFT_2c_20std____2__allocator_maxiFFT__20______shared_ptr_emplace_28_29_1($0) {
  $0 = $0 | 0;
  dlfree(std____2____shared_ptr_emplace_maxiFFT_2c_20std____2__allocator_maxiFFT__20______shared_ptr_emplace_28_29($0));
 }
 
 function std____2____shared_ptr_emplace_maxiFFT_2c_20std____2__allocator_maxiFFT__20_____on_zero_shared_28_29($0) {
  $0 = $0 | 0;
  maxiFFT___maxiFFT_28_29($0 + 12 | 0);
 }
 
 function maxiFFT__maxiFFT_28_29($0) {
  std____2__vector_int_2c_20std____2__allocator_int__20___vector_28_29($0);
  std____2__vector_int_2c_20std____2__allocator_int__20___vector_28_29($0 + 12 | 0);
  std____2__vector_int_2c_20std____2__allocator_int__20___vector_28_29($0 + 24 | 0);
  std____2__vector_int_2c_20std____2__allocator_int__20___vector_28_29($0 + 36 | 0);
  std____2__vector_int_2c_20std____2__allocator_int__20___vector_28_29($0 + 48 | 0);
  fft__fft_28_29($0 + 72 | 0);
 }
 
 function fft__fft_28_29($0) {
  std____2__vector_int_2c_20std____2__allocator_int__20___vector_28_29($0 + 8 | 0);
  std____2__vector_int_2c_20std____2__allocator_int__20___vector_28_29($0 + 20 | 0);
  std____2__vector_int_2c_20std____2__allocator_int__20___vector_28_29($0 + 32 | 0);
  std____2__vector_int_2c_20std____2__allocator_int__20___vector_28_29($0 + 44 | 0);
 }
 
 function emscripten__internal__MethodInvoker_void_20_28maxiFFT____29_28int_2c_20int_2c_20int_29_2c_20void_2c_20maxiFFT__2c_20int_2c_20int_2c_20int___invoke_28void_20_28maxiFFT____20const__29_28int_2c_20int_2c_20int_29_2c_20maxiFFT__2c_20int_2c_20int_2c_20int_29($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0;
  $5 = $1;
  $1 = HEAP32[$0 + 4 >> 2];
  $5 = $5 + ($1 >> 1) | 0;
  $0 = HEAP32[$0 >> 2];
  FUNCTION_TABLE[$1 & 1 ? HEAP32[$0 + HEAP32[$5 >> 2] >> 2] : $0]($5, $2, $3, $4);
 }
 
 function emscripten__internal__MethodInvoker_bool_20_28maxiFFT____29_28float_2c_20maxiFFT__fftModes_29_2c_20bool_2c_20maxiFFT__2c_20float_2c_20maxiFFT__fftModes___invoke_28bool_20_28maxiFFT____20const__29_28float_2c_20maxiFFT__fftModes_29_2c_20maxiFFT__2c_20float_2c_20maxiFFT__fftModes_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = Math_fround($2);
  $3 = $3 | 0;
  var $4 = 0;
  $4 = $1;
  $1 = HEAP32[$0 + 4 >> 2];
  $4 = $4 + ($1 >> 1) | 0;
  $0 = HEAP32[$0 >> 2];
  return FUNCTION_TABLE[$1 & 1 ? HEAP32[$0 + HEAP32[$4 >> 2] >> 2] : $0]($4, $2, $3) | 0;
 }
 
 function emscripten__internal__MethodInvoker_float_20_28maxiFFT____29_28_29_2c_20float_2c_20maxiFFT____invoke_28float_20_28maxiFFT____20const__29_28_29_2c_20maxiFFT__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = Math_fround(0);
  $3 = global$0 - 16 | 0;
  $2 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  $2 = $1;
  $1 = HEAP32[$0 >> 2];
  $0 = HEAP32[$0 + 4 >> 2];
  $2 = ($0 >> 1) + $2 | 0;
  HEAPF32[$3 + 12 >> 2] = FUNCTION_TABLE[$0 & 1 ? HEAP32[$1 + HEAP32[$2 >> 2] >> 2] : $1]($2);
  $4 = HEAPF32[$3 + 12 >> 2];
  $0 = $3 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
  return Math_fround($4);
 }
 
 function emscripten__internal__MethodInvoker_std____2__vector_float_2c_20std____2__allocator_float__20___20_28maxiFFT____29_28_29_2c_20std____2__vector_float_2c_20std____2__allocator_float__20___2c_20maxiFFT____invoke_28std____2__vector_float_2c_20std____2__allocator_float__20___20_28maxiFFT____20const__29_28_29_2c_20maxiFFT__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = $1;
  $1 = HEAP32[$0 >> 2];
  $0 = HEAP32[$0 + 4 >> 2];
  $2 = ($0 >> 1) + $2 | 0;
  return emscripten__internal__GenericBindingType_std____2__vector_float_2c_20std____2__allocator_float__20__20___toWireType_28std____2__vector_float_2c_20std____2__allocator_float__20__20const__29(FUNCTION_TABLE[$0 & 1 ? HEAP32[$1 + HEAP32[$2 >> 2] >> 2] : $1]($2) | 0) | 0;
 }
 
 function emscripten__internal__GenericBindingType_std____2__vector_float_2c_20std____2__allocator_float__20__20___toWireType_28std____2__vector_float_2c_20std____2__allocator_float__20__20const__29($0) {
  var $1 = 0, $2 = 0;
  $1 = operator_20new_28unsigned_20long_29(12);
  HEAP32[16874] = 0;
  $0 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1134, $1 | 0, $0 | 0) | 0;
  $2 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($2 | 0) != 1) {
   return $0
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  dlfree($1);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2__vector_float_2c_20std____2__allocator_float__20___vector_28std____2__vector_float_2c_20std____2__allocator_float__20__20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  $3 = global$0 - 16 | 0;
  $2 = $3;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  std____2____vector_base_double_2c_20std____2__allocator_double__20_____alloc_28_29($1);
  $5 = std____2____vector_base_double_2c_20std____2__allocator_double__20_____vector_base_28std____2__allocator_double____29($0, $3 + 8 | 0);
  $2 = std____2__vector_int_2c_20std____2__allocator_int__20___size_28_29_20const($1);
  label$2 : {
   if (!$2) {
    break label$2
   }
   HEAP32[16874] = 0;
   __invoke_void___22class_std____2__vector_13_22__i32(1135, $0 | 0, $2 | 0);
   $4 = HEAP32[16874];
   HEAP32[16874] = 0;
   if (($4 | 0) != 1) {
    $4 = HEAP32[$1 + 4 >> 2];
    $1 = HEAP32[$1 >> 2];
    HEAP32[16874] = 0;
    __invoke_void___22class_std____2__vector_22__double__double__i32(1136, $0 | 0, $1 | 0, $4 | 0, $2 | 0);
    $1 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($1 | 0) != 1) {
     break label$2
    }
   }
   $0 = __cxa_find_matching_catch_2() | 0;
   getTempRet0() | 0;
   std____2____vector_base_int_2c_20std____2__allocator_int__20______vector_base_28_29($5);
   __resumeException($0 | 0);
   abort();
  }
  $1 = $3 + 16 | 0;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  return $0 | 0;
 }
 
 function std____2__vector_float_2c_20std____2__allocator_float__20_____vallocate_28unsigned_20long_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  if (std____2__vector_int_2c_20std____2__allocator_int__20___max_size_28_29_20const($0) >>> 0 < $1 >>> 0) {
   std____2____vector_base_common_true_____throw_length_error_28_29_20const();
   abort();
  }
  std____2____vector_base_double_2c_20std____2__allocator_double__20_____alloc_28_29($0);
  $2 = std____2__allocator_int___allocate_28unsigned_20long_2c_20void_20const__29($1);
  HEAP32[$0 >> 2] = $2;
  HEAP32[$0 + 4 >> 2] = $2;
  HEAP32[std____2____vector_base_double_2c_20std____2__allocator_double__20_____alloc_28_29($0) >> 2] = ($1 << 2) + $2;
  std____2__vector_int_2c_20std____2__allocator_int__20_____annotate_new_28unsigned_20long_29_20const($0, 0);
 }
 
 function maxiIFFT___maxiIFFT_28_29($0) {
  fft___fft_28_29($0 + 60 | 0);
  std____2__vector_float_2c_20std____2__allocator_float__20____vector_28_29($0 + 24 | 0);
  std____2__vector_float_2c_20std____2__allocator_float__20____vector_28_29($0 + 12 | 0);
  std____2__vector_float_2c_20std____2__allocator_float__20____vector_28_29($0);
  return $0;
 }
 
 function std____2__shared_ptr_maxiIFFT___shared_ptr_maxiIFFT_2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiIFFT__20___val_deleter__28maxiIFFT__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiIFFT__20___val_deleter_2c_20std____2__enable_if_is_convertible_maxiIFFT__2c_20maxiIFFT____value_2c_20std____2__shared_ptr_maxiIFFT_____nat___type_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0;
  $3 = global$0 - 32 | 0;
  $4 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  HEAP32[$0 >> 2] = $1;
  HEAP32[16874] = 0;
  $4 = __invoke_i1___22class_std____2__basic_ifstream_22_(930, 20) | 0;
  $5 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      if (($5 | 0) != 1) {
       HEAP32[16874] = 0;
       $5 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1138, $3 + 24 | 0, $2 | 0) | 0;
       $6 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($6 | 0) == 1) {
        break label$5
       }
       HEAP32[16874] = 0;
       __invoke___22class_std____2__basic_istream_22____22class_std____2__basic_istream_22__i8__i32(1139, $4 | 0, $1 | 0, $5 | 0) | 0;
       $6 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($6 | 0) == 1) {
        break label$4
       }
       HEAP32[$0 + 4 >> 2] = $4;
       emscripten__val___val_28_29($5);
       HEAP32[$3 + 4 >> 2] = $1;
       HEAP32[$3 >> 2] = $1;
       $1 = $3 + 32 | 0;
       if ($1 >>> 0 < global$2 >>> 0) {
        __handle_stack_overflow()
       }
       global$0 = $1;
       return $0 | 0;
      }
      $3 = __cxa_find_matching_catch_3(0) | 0;
      getTempRet0() | 0;
      break label$2;
     }
     $3 = __cxa_find_matching_catch_3(0) | 0;
     getTempRet0() | 0;
     break label$3;
    }
    $3 = __cxa_find_matching_catch_3(0) | 0;
    getTempRet0() | 0;
    emscripten__val___val_28_29($5);
   }
   dlfree($4);
  }
  __cxa_begin_catch($3 | 0) | 0;
  HEAP32[16874] = 0;
  __invoke_void___22class_std____2__vector_13_22__i32(1140, $2 | 0, $1 | 0);
  $0 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$8 : {
   label$9 : {
    if (($0 | 0) != 1) {
     HEAP32[16874] = 0;
     __invoke_void(934);
     $0 = HEAP32[16874];
     HEAP32[16874] = 0;
     if (($0 | 0) != 1) {
      break label$9
     }
    }
    $0 = __cxa_find_matching_catch_2() | 0;
    getTempRet0() | 0;
    HEAP32[16874] = 0;
    __invoke_void(23);
    $1 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($1 | 0) != 1) {
     break label$8
    }
    $0 = __cxa_find_matching_catch_3(0) | 0;
    getTempRet0() | 0;
    __clang_call_terminate($0);
   }
   abort();
  }
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____shared_ptr_pointer_maxiIFFT__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiIFFT__20___val_deleter_2c_20std____2__allocator_maxiIFFT__20_____shared_ptr_pointer_28maxiIFFT__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiIFFT__20___val_deleter_2c_20std____2__allocator_maxiIFFT__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0;
  $3 = global$0 - 32 | 0;
  $4 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  HEAP32[$3 + 20 >> 2] = $1;
  std____2____shared_weak_count____shared_weak_count_28long_29($0);
  HEAP32[$0 >> 2] = 20724;
  HEAP32[16874] = 0;
  $1 = std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_____compressed_pair_maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__28maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter___29($3 + 8 | 0, $3 + 20 | 0, $2);
  $2 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    if (($2 | 0) != 1) {
     HEAP32[16874] = 0;
     std____2____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20_____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20__28std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter____2c_20std____2__allocator_maxiOsc____29($0 + 12 | 0, $1, $3 + 24 | 0);
     $2 = HEAP32[16874];
     HEAP32[16874] = 0;
     if (($2 | 0) == 1) {
      break label$3
     }
     std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter______compressed_pair_28_29($1);
     $1 = $3 + 32 | 0;
     if ($1 >>> 0 < global$2 >>> 0) {
      __handle_stack_overflow()
     }
     global$0 = $1;
     return $0 | 0;
    }
    $0 = __cxa_find_matching_catch_2() | 0;
    getTempRet0() | 0;
    break label$2;
   }
   $0 = __cxa_find_matching_catch_2() | 0;
   getTempRet0() | 0;
   std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter______compressed_pair_28_29($1);
  }
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____shared_ptr_pointer_maxiIFFT__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiIFFT__20___val_deleter_2c_20std____2__allocator_maxiIFFT__20______shared_ptr_pointer_28_29($0) {
  $0 = $0 | 0;
  HEAP32[$0 >> 2] = 20724;
  std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter______compressed_pair_28_29($0 + 12 | 0);
  return $0 | 0;
 }
 
 function std____2____shared_ptr_pointer_maxiIFFT__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiIFFT__20___val_deleter_2c_20std____2__allocator_maxiIFFT__20______shared_ptr_pointer_28_29_1($0) {
  $0 = $0 | 0;
  dlfree(std____2____shared_ptr_pointer_maxiIFFT__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiIFFT__20___val_deleter_2c_20std____2__allocator_maxiIFFT__20______shared_ptr_pointer_28_29($0));
 }
 
 function std____2____shared_ptr_pointer_maxiIFFT__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiIFFT__20___val_deleter_2c_20std____2__allocator_maxiIFFT__20_____on_zero_shared_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $0 = $0 + 12 | 0;
  $1 = std____2____compressed_pair__IO_FILE__2c_20int_20_28__29_28_IO_FILE__29___second_28_29($0);
  $2 = HEAP32[$0 >> 2];
  HEAP32[16874] = 0;
  __invoke_void___22class_std____2__vector_13_22__i32(1140, $1 | 0, $2 | 0);
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($1 | 0) != 1) {
   emscripten__val___val_28_29(std____2____compressed_pair__IO_FILE__2c_20int_20_28__29_28_IO_FILE__29___second_28_29($0));
   return;
  }
  $0 = __cxa_find_matching_catch_3(0) | 0;
  getTempRet0() | 0;
  __clang_call_terminate($0);
  abort();
 }
 
 function std____2____shared_ptr_pointer_maxiIFFT__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiIFFT__20___val_deleter_2c_20std____2__allocator_maxiIFFT__20_____get_deleter_28std__type_info_20const__29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  if (std__type_info__operator___28std__type_info_20const__29_20const($1, 20968)) {
   $0 = std____2____compressed_pair__IO_FILE__2c_20int_20_28__29_28_IO_FILE__29___second_28_29($0 + 12 | 0)
  } else {
   $0 = 0
  }
  return $0 | 0;
 }
 
 function std____2__shared_ptr_maxiIFFT__20std____2__shared_ptr_maxiIFFT___make_shared___28_29($0) {
  var $1 = 0, $2 = 0, $3 = 0;
  $2 = global$0 - 48 | 0;
  $1 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  $1 = $2 + 40 | 0;
  $1 = std____2__unique_ptr_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20___unique_ptr_true_2c_20void__28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20__2c_20true_____good_rval_ref_type_29($2 + 24 | 0, operator_20new_28unsigned_20long_29(128), std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20_____allocator_destructor_28std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20___2c_20unsigned_20long_29($2 + 16 | 0, $1, 1));
  $3 = HEAP32[$1 >> 2];
  HEAP32[16874] = 0;
  __invoke_i1___22class_std____2__basic_ifstream_22_(1143, $3 | 0) | 0;
  $3 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($3 | 0) != 1) {
   $0 = std____2__shared_ptr_maxiOsc___shared_ptr_28_29($0);
   HEAP32[$0 >> 2] = std____2____split_buffer_double_2c_20std____2__allocator_double_______end_cap_28_29(HEAP32[$1 >> 2]);
   HEAP32[$0 + 4 >> 2] = std____2__unique_ptr__IO_FILE_2c_20int_20_28__29_28_IO_FILE__29___release_28_29($1);
   $0 = HEAP32[$0 >> 2];
   HEAP32[$2 + 4 >> 2] = $0;
   HEAP32[$2 >> 2] = $0;
   std____2__unique_ptr_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20___reset_28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___29($1);
   $0 = $2 + 48 | 0;
   if ($0 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $0;
   return;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__unique_ptr_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20___reset_28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___29($1);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____shared_ptr_emplace_maxiIFFT_2c_20std____2__allocator_maxiIFFT__20_____shared_ptr_emplace_28std____2__allocator_maxiIFFT__29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  std____2____shared_weak_count____shared_weak_count_28long_29($0);
  HEAP32[$0 >> 2] = 21028;
  HEAP32[16874] = 0;
  __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1145, $0 + 12 | 0, $1 + 8 | 0) | 0;
  $2 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($2 | 0) != 1) {
   $1 = $1 + 16 | 0;
   if ($1 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $1;
   return $0 | 0;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____compressed_pair_std____2__allocator_maxiIFFT__2c_20maxiIFFT_____compressed_pair_std____2__allocator_maxiIFFT__2c_20true__28std____2__allocator_maxiIFFT____29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  maxiIFFT__maxiIFFT_28_29($0);
  return $0 | 0;
 }
 
 function std____2____shared_ptr_emplace_maxiIFFT_2c_20std____2__allocator_maxiIFFT__20______shared_ptr_emplace_28_29($0) {
  $0 = $0 | 0;
  HEAP32[$0 >> 2] = 21028;
  maxiIFFT___maxiIFFT_28_29($0 + 12 | 0);
  return $0 | 0;
 }
 
 function std____2____shared_ptr_emplace_maxiIFFT_2c_20std____2__allocator_maxiIFFT__20______shared_ptr_emplace_28_29_1($0) {
  $0 = $0 | 0;
  dlfree(std____2____shared_ptr_emplace_maxiIFFT_2c_20std____2__allocator_maxiIFFT__20______shared_ptr_emplace_28_29($0));
 }
 
 function std____2____shared_ptr_emplace_maxiIFFT_2c_20std____2__allocator_maxiIFFT__20_____on_zero_shared_28_29($0) {
  $0 = $0 | 0;
  maxiIFFT___maxiIFFT_28_29($0 + 12 | 0);
 }
 
 function maxiIFFT__maxiIFFT_28_29($0) {
  std____2__vector_int_2c_20std____2__allocator_int__20___vector_28_29($0);
  std____2__vector_int_2c_20std____2__allocator_int__20___vector_28_29($0 + 12 | 0);
  std____2__vector_int_2c_20std____2__allocator_int__20___vector_28_29($0 + 24 | 0);
  fft__fft_28_29($0 + 60 | 0);
 }
 
 function emscripten__internal__MethodInvoker_float_20_28maxiIFFT____29_28std____2__vector_float_2c_20std____2__allocator_float__20___2c_20std____2__vector_float_2c_20std____2__allocator_float__20___2c_20maxiIFFT__fftModes_29_2c_20float_2c_20maxiIFFT__2c_20std____2__vector_float_2c_20std____2__allocator_float__20___2c_20std____2__vector_float_2c_20std____2__allocator_float__20___2c_20maxiIFFT__fftModes___invoke_28float_20_28maxiIFFT____20const__29_28std____2__vector_float_2c_20std____2__allocator_float__20___2c_20std____2__vector_float_2c_20std____2__allocator_float__20___2c_20maxiIFFT__fftModes_29_2c_20maxiIFFT__2c_20std____2__vector_float_2c_20std____2__allocator_float__20___2c_20std____2__vector_float_2c_20std____2__allocator_float__20___2c_20maxiIFFT__fftModes_29($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0, $7 = Math_fround(0);
  $6 = global$0 - 16 | 0;
  $5 = $6;
  if ($6 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $5;
  $5 = $1;
  $1 = HEAP32[$0 + 4 >> 2];
  $5 = $5 + ($1 >> 1) | 0;
  $0 = HEAP32[$0 >> 2];
  HEAPF32[$6 + 12 >> 2] = FUNCTION_TABLE[$1 & 1 ? HEAP32[$0 + HEAP32[$5 >> 2] >> 2] : $0]($5, $2, $3, $4);
  $7 = HEAPF32[$6 + 12 >> 2];
  $0 = $6 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
  return Math_fround($7);
 }
 
 function maxiMFCCAnalyser_double____maxiMFCCAnalyser_28_29($0) {
  var $1 = 0;
  $1 = HEAP32[$0 + 36 >> 2];
  label$1 : {
   if (!$1) {
    break label$1
   }
   dlfree($1);
   $1 = HEAP32[$0 >> 2];
   if ($1) {
    dlfree($1)
   }
   $1 = HEAP32[$0 + 44 >> 2];
   if (!$1) {
    break label$1
   }
   dlfree($1);
  }
  std____2__vector_double_2c_20std____2__allocator_double__20____vector_28_29($0 + 48 | 0);
  return $0;
 }
 
 function std____2__shared_ptr_maxiMFCCAnalyser_double__20___shared_ptr_maxiMFCCAnalyser_double__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiMFCCAnalyser_double__20__20___val_deleter__28maxiMFCCAnalyser_double___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiMFCCAnalyser_double__20__20___val_deleter_2c_20std____2__enable_if_is_convertible_maxiMFCCAnalyser_double___2c_20maxiMFCCAnalyser_double_____value_2c_20std____2__shared_ptr_maxiMFCCAnalyser_double__20_____nat___type_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0;
  $3 = global$0 - 32 | 0;
  $4 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  HEAP32[$0 >> 2] = $1;
  HEAP32[16874] = 0;
  $4 = __invoke_i1___22class_std____2__basic_ifstream_22_(930, 20) | 0;
  $5 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      if (($5 | 0) != 1) {
       HEAP32[16874] = 0;
       $5 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1146, $3 + 24 | 0, $2 | 0) | 0;
       $6 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($6 | 0) == 1) {
        break label$5
       }
       HEAP32[16874] = 0;
       __invoke___22class_std____2__basic_istream_22____22class_std____2__basic_istream_22__i8__i32(1147, $4 | 0, $1 | 0, $5 | 0) | 0;
       $6 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($6 | 0) == 1) {
        break label$4
       }
       HEAP32[$0 + 4 >> 2] = $4;
       emscripten__val___val_28_29($5);
       HEAP32[$3 + 4 >> 2] = $1;
       HEAP32[$3 >> 2] = $1;
       $1 = $3 + 32 | 0;
       if ($1 >>> 0 < global$2 >>> 0) {
        __handle_stack_overflow()
       }
       global$0 = $1;
       return $0 | 0;
      }
      $3 = __cxa_find_matching_catch_3(0) | 0;
      getTempRet0() | 0;
      break label$2;
     }
     $3 = __cxa_find_matching_catch_3(0) | 0;
     getTempRet0() | 0;
     break label$3;
    }
    $3 = __cxa_find_matching_catch_3(0) | 0;
    getTempRet0() | 0;
    emscripten__val___val_28_29($5);
   }
   dlfree($4);
  }
  __cxa_begin_catch($3 | 0) | 0;
  HEAP32[16874] = 0;
  __invoke_void___22class_std____2__vector_13_22__i32(1148, $2 | 0, $1 | 0);
  $0 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$8 : {
   label$9 : {
    if (($0 | 0) != 1) {
     HEAP32[16874] = 0;
     __invoke_void(934);
     $0 = HEAP32[16874];
     HEAP32[16874] = 0;
     if (($0 | 0) != 1) {
      break label$9
     }
    }
    $0 = __cxa_find_matching_catch_2() | 0;
    getTempRet0() | 0;
    HEAP32[16874] = 0;
    __invoke_void(23);
    $1 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($1 | 0) != 1) {
     break label$8
    }
    $0 = __cxa_find_matching_catch_3(0) | 0;
    getTempRet0() | 0;
    __clang_call_terminate($0);
   }
   abort();
  }
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____shared_ptr_pointer_maxiMFCCAnalyser_double___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiMFCCAnalyser_double__20__20___val_deleter_2c_20std____2__allocator_maxiMFCCAnalyser_double__20__20_____shared_ptr_pointer_28maxiMFCCAnalyser_double___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiMFCCAnalyser_double__20__20___val_deleter_2c_20std____2__allocator_maxiMFCCAnalyser_double__20__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0;
  $3 = global$0 - 32 | 0;
  $4 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  HEAP32[$3 + 20 >> 2] = $1;
  std____2____shared_weak_count____shared_weak_count_28long_29($0);
  HEAP32[$0 >> 2] = 21348;
  HEAP32[16874] = 0;
  $1 = std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_____compressed_pair_maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__28maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter___29($3 + 8 | 0, $3 + 20 | 0, $2);
  $2 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    if (($2 | 0) != 1) {
     HEAP32[16874] = 0;
     std____2____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20_____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20__28std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter____2c_20std____2__allocator_maxiOsc____29($0 + 12 | 0, $1, $3 + 24 | 0);
     $2 = HEAP32[16874];
     HEAP32[16874] = 0;
     if (($2 | 0) == 1) {
      break label$3
     }
     std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter______compressed_pair_28_29($1);
     $1 = $3 + 32 | 0;
     if ($1 >>> 0 < global$2 >>> 0) {
      __handle_stack_overflow()
     }
     global$0 = $1;
     return $0 | 0;
    }
    $0 = __cxa_find_matching_catch_2() | 0;
    getTempRet0() | 0;
    break label$2;
   }
   $0 = __cxa_find_matching_catch_2() | 0;
   getTempRet0() | 0;
   std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter______compressed_pair_28_29($1);
  }
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____shared_ptr_pointer_maxiMFCCAnalyser_double___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiMFCCAnalyser_double__20__20___val_deleter_2c_20std____2__allocator_maxiMFCCAnalyser_double__20__20______shared_ptr_pointer_28_29($0) {
  $0 = $0 | 0;
  HEAP32[$0 >> 2] = 21348;
  std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter______compressed_pair_28_29($0 + 12 | 0);
  return $0 | 0;
 }
 
 function std____2____shared_ptr_pointer_maxiMFCCAnalyser_double___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiMFCCAnalyser_double__20__20___val_deleter_2c_20std____2__allocator_maxiMFCCAnalyser_double__20__20______shared_ptr_pointer_28_29_1($0) {
  $0 = $0 | 0;
  dlfree(std____2____shared_ptr_pointer_maxiMFCCAnalyser_double___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiMFCCAnalyser_double__20__20___val_deleter_2c_20std____2__allocator_maxiMFCCAnalyser_double__20__20______shared_ptr_pointer_28_29($0));
 }
 
 function std____2____shared_ptr_pointer_maxiMFCCAnalyser_double___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiMFCCAnalyser_double__20__20___val_deleter_2c_20std____2__allocator_maxiMFCCAnalyser_double__20__20_____on_zero_shared_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $0 = $0 + 12 | 0;
  $1 = std____2____compressed_pair__IO_FILE__2c_20int_20_28__29_28_IO_FILE__29___second_28_29($0);
  $2 = HEAP32[$0 >> 2];
  HEAP32[16874] = 0;
  __invoke_void___22class_std____2__vector_13_22__i32(1148, $1 | 0, $2 | 0);
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($1 | 0) != 1) {
   emscripten__val___val_28_29(std____2____compressed_pair__IO_FILE__2c_20int_20_28__29_28_IO_FILE__29___second_28_29($0));
   return;
  }
  $0 = __cxa_find_matching_catch_3(0) | 0;
  getTempRet0() | 0;
  __clang_call_terminate($0);
  abort();
 }
 
 function std____2____shared_ptr_pointer_maxiMFCCAnalyser_double___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiMFCCAnalyser_double__20__20___val_deleter_2c_20std____2__allocator_maxiMFCCAnalyser_double__20__20_____get_deleter_28std__type_info_20const__29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  if (std__type_info__operator___28std__type_info_20const__29_20const($1, 21616)) {
   $0 = std____2____compressed_pair__IO_FILE__2c_20int_20_28__29_28_IO_FILE__29___second_28_29($0 + 12 | 0)
  } else {
   $0 = 0
  }
  return $0 | 0;
 }
 
 function std____2__shared_ptr_maxiMFCCAnalyser_double__20__20std____2__shared_ptr_maxiMFCCAnalyser_double__20___make_shared___28_29($0) {
  var $1 = 0, $2 = 0, $3 = 0;
  $2 = global$0 - 48 | 0;
  $1 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  $1 = $2 + 40 | 0;
  $1 = std____2__unique_ptr_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20___unique_ptr_true_2c_20void__28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20__2c_20true_____good_rval_ref_type_29($2 + 24 | 0, operator_20new_28unsigned_20long_29(80), std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20_____allocator_destructor_28std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20___2c_20unsigned_20long_29($2 + 16 | 0, $1, 1));
  $3 = HEAP32[$1 >> 2];
  HEAP32[16874] = 0;
  __invoke_i1___22class_std____2__basic_ifstream_22_(1151, $3 | 0) | 0;
  $3 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($3 | 0) != 1) {
   $0 = std____2__shared_ptr_maxiOsc___shared_ptr_28_29($0);
   HEAP32[$0 >> 2] = std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___get_28_29(HEAP32[$1 >> 2]);
   HEAP32[$0 + 4 >> 2] = std____2__unique_ptr__IO_FILE_2c_20int_20_28__29_28_IO_FILE__29___release_28_29($1);
   $0 = HEAP32[$0 >> 2];
   HEAP32[$2 + 4 >> 2] = $0;
   HEAP32[$2 >> 2] = $0;
   std____2__unique_ptr_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20___reset_28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___29($1);
   $0 = $2 + 48 | 0;
   if ($0 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $0;
   return;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__unique_ptr_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20___reset_28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___29($1);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____shared_ptr_emplace_maxiMFCCAnalyser_double__2c_20std____2__allocator_maxiMFCCAnalyser_double__20__20_____shared_ptr_emplace_28std____2__allocator_maxiMFCCAnalyser_double__20__29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  std____2____shared_weak_count____shared_weak_count_28long_29($0);
  HEAP32[$0 >> 2] = 21688;
  HEAP32[16874] = 0;
  __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1153, $0 + 16 | 0, $1 + 8 | 0) | 0;
  $2 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($2 | 0) != 1) {
   $1 = $1 + 16 | 0;
   if ($1 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $1;
   return $0 | 0;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____compressed_pair_std____2__allocator_maxiMFCCAnalyser_double__20__2c_20maxiMFCCAnalyser_double__20_____compressed_pair_std____2__allocator_maxiMFCCAnalyser_double__20__2c_20true__28std____2__allocator_maxiMFCCAnalyser_double__20____29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  HEAP32[$0 + 44 >> 2] = 0;
  HEAP32[$0 + 36 >> 2] = 0;
  HEAP32[$0 >> 2] = 0;
  std____2__vector_int_2c_20std____2__allocator_int__20___vector_28_29($0 + 48 | 0);
  return $0 | 0;
 }
 
 function std____2____shared_ptr_emplace_maxiMFCCAnalyser_double__2c_20std____2__allocator_maxiMFCCAnalyser_double__20__20______shared_ptr_emplace_28_29($0) {
  $0 = $0 | 0;
  HEAP32[$0 >> 2] = 21688;
  maxiMFCCAnalyser_double____maxiMFCCAnalyser_28_29($0 + 16 | 0);
  return $0 | 0;
 }
 
 function std____2____shared_ptr_emplace_maxiMFCCAnalyser_double__2c_20std____2__allocator_maxiMFCCAnalyser_double__20__20______shared_ptr_emplace_28_29_1($0) {
  $0 = $0 | 0;
  dlfree(std____2____shared_ptr_emplace_maxiMFCCAnalyser_double__2c_20std____2__allocator_maxiMFCCAnalyser_double__20__20______shared_ptr_emplace_28_29($0));
 }
 
 function std____2____shared_ptr_emplace_maxiMFCCAnalyser_double__2c_20std____2__allocator_maxiMFCCAnalyser_double__20__20_____on_zero_shared_28_29($0) {
  $0 = $0 | 0;
  maxiMFCCAnalyser_double____maxiMFCCAnalyser_28_29($0 + 16 | 0);
 }
 
 function hzToMel_28double_29($0) {
  return log10($0 / 700.0 + 1.0) * 2595.0;
 }
 
 function emscripten__internal__MethodInvoker_void_20_28maxiMFCCAnalyser_double_____29_28unsigned_20int_2c_20unsigned_20int_2c_20unsigned_20int_2c_20double_2c_20double_29_2c_20void_2c_20maxiMFCCAnalyser_double___2c_20unsigned_20int_2c_20unsigned_20int_2c_20unsigned_20int_2c_20double_2c_20double___invoke_28void_20_28maxiMFCCAnalyser_double_____20const__29_28unsigned_20int_2c_20unsigned_20int_2c_20unsigned_20int_2c_20double_2c_20double_29_2c_20maxiMFCCAnalyser_double___2c_20unsigned_20int_2c_20unsigned_20int_2c_20unsigned_20int_2c_20double_2c_20double_29($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = +$5;
  $6 = +$6;
  var $7 = 0;
  $7 = $1;
  $1 = HEAP32[$0 + 4 >> 2];
  $7 = $7 + ($1 >> 1) | 0;
  $0 = HEAP32[$0 >> 2];
  FUNCTION_TABLE[$1 & 1 ? HEAP32[$0 + HEAP32[$7 >> 2] >> 2] : $0]($7, $2, $3, $4, $5, $6);
 }
 
 function emscripten__internal__MethodInvoker_std____2__vector_double_2c_20std____2__allocator_double__20___20_28maxiMFCCAnalyser_double_____29_28std____2__vector_float_2c_20std____2__allocator_float__20___29_2c_20std____2__vector_double_2c_20std____2__allocator_double__20___2c_20maxiMFCCAnalyser_double___2c_20std____2__vector_float_2c_20std____2__allocator_float__20_____invoke_28std____2__vector_double_2c_20std____2__allocator_double__20___20_28maxiMFCCAnalyser_double_____20const__29_28std____2__vector_float_2c_20std____2__allocator_float__20___29_2c_20maxiMFCCAnalyser_double___2c_20std____2__vector_float_2c_20std____2__allocator_float__20___29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = $1;
  $1 = HEAP32[$0 + 4 >> 2];
  $3 = $3 + ($1 >> 1) | 0;
  $0 = HEAP32[$0 >> 2];
  return emscripten__internal__GenericBindingType_std____2__vector_double_2c_20std____2__allocator_double__20__20___toWireType_28std____2__vector_double_2c_20std____2__allocator_double__20__20const__29(FUNCTION_TABLE[$1 & 1 ? HEAP32[$0 + HEAP32[$3 >> 2] >> 2] : $0]($3, $2) | 0) | 0;
 }
 
 function emscripten__internal__GenericBindingType_std____2__vector_double_2c_20std____2__allocator_double__20__20___toWireType_28std____2__vector_double_2c_20std____2__allocator_double__20__20const__29($0) {
  var $1 = 0, $2 = 0;
  $1 = operator_20new_28unsigned_20long_29(12);
  HEAP32[16874] = 0;
  $0 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1154, $1 | 0, $0 | 0) | 0;
  $2 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($2 | 0) != 1) {
   return $0
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  dlfree($1);
  __resumeException($0 | 0);
  abort();
 }
 
 function maxiTimeStretch_hannWinFunctor____maxiTimeStretch_28_29($0) {
  var $1 = 0;
  $1 = HEAP32[$0 + 12 >> 2];
  if ($1) {
   dlfree(maxiGrainPlayer___maxiGrainPlayer_28_29($1))
  }
  maxiGrainWindowCache_hannWinFunctor____maxiGrainWindowCache_28_29($0 + 16 | 0);
  return $0;
 }
 
 function maxiGrainWindowCache_hannWinFunctor____maxiGrainWindowCache_28_29($0) {
  var $1 = 0, $2 = 0;
  if (HEAP32[$0 >> 2]) {
   while (1) {
    $2 = HEAP32[HEAP32[$0 + 4 >> 2] + ($1 << 2) >> 2];
    if ($2) {
     dlfree($2)
    }
    $1 = $1 + 1 | 0;
    if ($1 >>> 0 < HEAPU32[$0 >> 2]) {
     continue
    }
    break;
   }
  }
  dlfree(HEAP32[$0 + 4 >> 2]);
 }
 
 function std____2____list_imp_maxiGrainBase__2c_20std____2__allocator_maxiGrainBase___20___clear_28_29($0) {
  var $1 = 0, $2 = 0, $3 = 0;
  label$1 : {
   if (HEAP32[std____2____vector_base_double_2c_20std____2__allocator_double__20_____alloc_28_29($0) >> 2]) {
    std____2____vector_base_double_2c_20std____2__allocator_double__20_____alloc_28_29($0);
    $1 = HEAP32[$0 + 4 >> 2];
    $2 = $0;
    std____2____list_imp_maxiGrainBase__2c_20std____2__allocator_maxiGrainBase___20_____unlink_nodes_28std____2____list_node_base_maxiGrainBase__2c_20void____2c_20std____2____list_node_base_maxiGrainBase__2c_20void____29($1, HEAP32[$0 >> 2]);
    HEAP32[std____2____vector_base_double_2c_20std____2__allocator_double__20_____alloc_28_29($0) >> 2] = 0;
    if (($0 | 0) != ($1 | 0)) {
     while (1) {
      $0 = $1;
      $1 = HEAP32[$0 + 4 >> 2];
      HEAP32[16874] = 0;
      $3 = HEAP32[16874];
      HEAP32[16874] = 0;
      if (($3 | 0) == 1) {
       break label$1
      }
      std____2__allocator_traits_std____2__allocator_std____2____list_node_maxiGrainBase__2c_20void___20__20___deallocate_28std____2__allocator_std____2____list_node_maxiGrainBase__2c_20void___20___2c_20std____2____list_node_maxiGrainBase__2c_20void____2c_20unsigned_20long_29($0, 1);
      if (($1 | 0) != ($2 | 0)) {
       continue
      }
      break;
     }
    }
   }
   return;
  }
  $0 = __cxa_find_matching_catch_3(0) | 0;
  getTempRet0() | 0;
  __clang_call_terminate($0);
  abort();
 }
 
 function std____2____list_imp_maxiGrainBase__2c_20std____2__allocator_maxiGrainBase___20_____unlink_nodes_28std____2____list_node_base_maxiGrainBase__2c_20void____2c_20std____2____list_node_base_maxiGrainBase__2c_20void____29($0, $1) {
  HEAP32[HEAP32[$0 >> 2] + 4 >> 2] = HEAP32[$1 + 4 >> 2];
  HEAP32[HEAP32[$1 + 4 >> 2] >> 2] = HEAP32[$0 >> 2];
 }
 
 function std____2__allocator_traits_std____2__allocator_std____2____list_node_maxiGrainBase__2c_20void___20__20___deallocate_28std____2__allocator_std____2____list_node_maxiGrainBase__2c_20void___20___2c_20std____2____list_node_maxiGrainBase__2c_20void____2c_20unsigned_20long_29($0, $1) {
  std____2__allocator_char___deallocate_28char__2c_20unsigned_20long_29($0, $1);
 }
 
 function std____2__shared_ptr_maxiTimeStretch_hannWinFunctor__20___shared_ptr_maxiTimeStretch_hannWinFunctor__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiTimeStretch_hannWinFunctor__20__20___val_deleter__28maxiTimeStretch_hannWinFunctor___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiTimeStretch_hannWinFunctor__20__20___val_deleter_2c_20std____2__enable_if_is_convertible_maxiTimeStretch_hannWinFunctor___2c_20maxiTimeStretch_hannWinFunctor_____value_2c_20std____2__shared_ptr_maxiTimeStretch_hannWinFunctor__20_____nat___type_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0;
  $3 = global$0 - 32 | 0;
  $4 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  HEAP32[$0 >> 2] = $1;
  HEAP32[16874] = 0;
  $4 = __invoke_i1___22class_std____2__basic_ifstream_22_(930, 20) | 0;
  $5 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      if (($5 | 0) != 1) {
       HEAP32[16874] = 0;
       $5 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1156, $3 + 24 | 0, $2 | 0) | 0;
       $6 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($6 | 0) == 1) {
        break label$5
       }
       HEAP32[16874] = 0;
       __invoke___22class_std____2__basic_istream_22____22class_std____2__basic_istream_22__i8__i32(1157, $4 | 0, $1 | 0, $5 | 0) | 0;
       $6 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($6 | 0) == 1) {
        break label$4
       }
       HEAP32[$0 + 4 >> 2] = $4;
       emscripten__val___val_28_29($5);
       HEAP32[$3 + 4 >> 2] = $1;
       HEAP32[$3 >> 2] = $1;
       $1 = $3 + 32 | 0;
       if ($1 >>> 0 < global$2 >>> 0) {
        __handle_stack_overflow()
       }
       global$0 = $1;
       return $0 | 0;
      }
      $3 = __cxa_find_matching_catch_3(0) | 0;
      getTempRet0() | 0;
      break label$2;
     }
     $3 = __cxa_find_matching_catch_3(0) | 0;
     getTempRet0() | 0;
     break label$3;
    }
    $3 = __cxa_find_matching_catch_3(0) | 0;
    getTempRet0() | 0;
    emscripten__val___val_28_29($5);
   }
   dlfree($4);
  }
  __cxa_begin_catch($3 | 0) | 0;
  HEAP32[16874] = 0;
  __invoke_void___22class_std____2__vector_13_22__i32(1158, $2 | 0, $1 | 0);
  $0 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$8 : {
   label$9 : {
    if (($0 | 0) != 1) {
     HEAP32[16874] = 0;
     __invoke_void(934);
     $0 = HEAP32[16874];
     HEAP32[16874] = 0;
     if (($0 | 0) != 1) {
      break label$9
     }
    }
    $0 = __cxa_find_matching_catch_2() | 0;
    getTempRet0() | 0;
    HEAP32[16874] = 0;
    __invoke_void(23);
    $1 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($1 | 0) != 1) {
     break label$8
    }
    $0 = __cxa_find_matching_catch_3(0) | 0;
    getTempRet0() | 0;
    __clang_call_terminate($0);
   }
   abort();
  }
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____shared_ptr_pointer_maxiTimeStretch_hannWinFunctor___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiTimeStretch_hannWinFunctor__20__20___val_deleter_2c_20std____2__allocator_maxiTimeStretch_hannWinFunctor__20__20_____shared_ptr_pointer_28maxiTimeStretch_hannWinFunctor___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiTimeStretch_hannWinFunctor__20__20___val_deleter_2c_20std____2__allocator_maxiTimeStretch_hannWinFunctor__20__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0;
  $3 = global$0 - 32 | 0;
  $4 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  HEAP32[$3 + 20 >> 2] = $1;
  std____2____shared_weak_count____shared_weak_count_28long_29($0);
  HEAP32[$0 >> 2] = 22024;
  HEAP32[16874] = 0;
  $1 = std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_____compressed_pair_maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__28maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter___29($3 + 8 | 0, $3 + 20 | 0, $2);
  $2 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    if (($2 | 0) != 1) {
     HEAP32[16874] = 0;
     std____2____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20_____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20__28std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter____2c_20std____2__allocator_maxiOsc____29($0 + 12 | 0, $1, $3 + 24 | 0);
     $2 = HEAP32[16874];
     HEAP32[16874] = 0;
     if (($2 | 0) == 1) {
      break label$3
     }
     std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter______compressed_pair_28_29($1);
     $1 = $3 + 32 | 0;
     if ($1 >>> 0 < global$2 >>> 0) {
      __handle_stack_overflow()
     }
     global$0 = $1;
     return $0 | 0;
    }
    $0 = __cxa_find_matching_catch_2() | 0;
    getTempRet0() | 0;
    break label$2;
   }
   $0 = __cxa_find_matching_catch_2() | 0;
   getTempRet0() | 0;
   std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter______compressed_pair_28_29($1);
  }
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____shared_ptr_pointer_maxiTimeStretch_hannWinFunctor___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiTimeStretch_hannWinFunctor__20__20___val_deleter_2c_20std____2__allocator_maxiTimeStretch_hannWinFunctor__20__20______shared_ptr_pointer_28_29($0) {
  $0 = $0 | 0;
  HEAP32[$0 >> 2] = 22024;
  std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter______compressed_pair_28_29($0 + 12 | 0);
  return $0 | 0;
 }
 
 function std____2____shared_ptr_pointer_maxiTimeStretch_hannWinFunctor___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiTimeStretch_hannWinFunctor__20__20___val_deleter_2c_20std____2__allocator_maxiTimeStretch_hannWinFunctor__20__20______shared_ptr_pointer_28_29_1($0) {
  $0 = $0 | 0;
  dlfree(std____2____shared_ptr_pointer_maxiTimeStretch_hannWinFunctor___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiTimeStretch_hannWinFunctor__20__20___val_deleter_2c_20std____2__allocator_maxiTimeStretch_hannWinFunctor__20__20______shared_ptr_pointer_28_29($0));
 }
 
 function std____2____shared_ptr_pointer_maxiTimeStretch_hannWinFunctor___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiTimeStretch_hannWinFunctor__20__20___val_deleter_2c_20std____2__allocator_maxiTimeStretch_hannWinFunctor__20__20_____on_zero_shared_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $0 = $0 + 12 | 0;
  $1 = std____2____compressed_pair__IO_FILE__2c_20int_20_28__29_28_IO_FILE__29___second_28_29($0);
  $2 = HEAP32[$0 >> 2];
  HEAP32[16874] = 0;
  __invoke_void___22class_std____2__vector_13_22__i32(1158, $1 | 0, $2 | 0);
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($1 | 0) != 1) {
   emscripten__val___val_28_29(std____2____compressed_pair__IO_FILE__2c_20int_20_28__29_28_IO_FILE__29___second_28_29($0));
   return;
  }
  $0 = __cxa_find_matching_catch_3(0) | 0;
  getTempRet0() | 0;
  __clang_call_terminate($0);
  abort();
 }
 
 function std____2____shared_ptr_pointer_maxiTimeStretch_hannWinFunctor___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiTimeStretch_hannWinFunctor__20__20___val_deleter_2c_20std____2__allocator_maxiTimeStretch_hannWinFunctor__20__20_____get_deleter_28std__type_info_20const__29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  if (std__type_info__operator___28std__type_info_20const__29_20const($1, 22316)) {
   $0 = std____2____compressed_pair__IO_FILE__2c_20int_20_28__29_28_IO_FILE__29___second_28_29($0 + 12 | 0)
  } else {
   $0 = 0
  }
  return $0 | 0;
 }
 
 function std____2__shared_ptr_maxiTimeStretch_hannWinFunctor__20__20std____2__shared_ptr_maxiTimeStretch_hannWinFunctor__20___make_shared___28_29($0) {
  var $1 = 0, $2 = 0, $3 = 0;
  $2 = global$0 - 48 | 0;
  $1 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  $1 = $2 + 40 | 0;
  $1 = std____2__unique_ptr_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20___unique_ptr_true_2c_20void__28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20__2c_20true_____good_rval_ref_type_29($2 + 24 | 0, operator_20new_28unsigned_20long_29(56), std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20_____allocator_destructor_28std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20___2c_20unsigned_20long_29($2 + 16 | 0, $1, 1));
  $3 = HEAP32[$1 >> 2];
  HEAP32[16874] = 0;
  __invoke_i1___22class_std____2__basic_ifstream_22_(1161, $3 | 0) | 0;
  $3 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($3 | 0) != 1) {
   $0 = std____2__shared_ptr_maxiOsc___shared_ptr_28_29($0);
   HEAP32[$0 >> 2] = std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___get_28_29(HEAP32[$1 >> 2]);
   HEAP32[$0 + 4 >> 2] = std____2__unique_ptr__IO_FILE_2c_20int_20_28__29_28_IO_FILE__29___release_28_29($1);
   $0 = HEAP32[$0 >> 2];
   HEAP32[$2 + 4 >> 2] = $0;
   HEAP32[$2 >> 2] = $0;
   std____2__unique_ptr_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20___reset_28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___29($1);
   $0 = $2 + 48 | 0;
   if ($0 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $0;
   return;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__unique_ptr_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20___reset_28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___29($1);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____shared_ptr_emplace_maxiTimeStretch_hannWinFunctor__2c_20std____2__allocator_maxiTimeStretch_hannWinFunctor__20__20_____shared_ptr_emplace_28std____2__allocator_maxiTimeStretch_hannWinFunctor__20__29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  std____2____shared_weak_count____shared_weak_count_28long_29($0);
  HEAP32[$0 >> 2] = 22404;
  HEAP32[16874] = 0;
  __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1163, $0 + 16 | 0, $1 + 8 | 0) | 0;
  $2 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($2 | 0) != 1) {
   $1 = $1 + 16 | 0;
   if ($1 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $1;
   return $0 | 0;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____compressed_pair_std____2__allocator_maxiTimeStretch_hannWinFunctor__20__2c_20maxiTimeStretch_hannWinFunctor__20_____compressed_pair_std____2__allocator_maxiTimeStretch_hannWinFunctor__20__2c_20true__28std____2__allocator_maxiTimeStretch_hannWinFunctor__20____29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  maxiTimeStretch_hannWinFunctor___maxiTimeStretch_28_29($0);
  return $0 | 0;
 }
 
 function std____2____shared_ptr_emplace_maxiTimeStretch_hannWinFunctor__2c_20std____2__allocator_maxiTimeStretch_hannWinFunctor__20__20______shared_ptr_emplace_28_29($0) {
  $0 = $0 | 0;
  HEAP32[$0 >> 2] = 22404;
  std____2____compressed_pair_elem_maxiTimeStretch_hannWinFunctor__2c_201_2c_20false______compressed_pair_elem_28_29($0 + 16 | 0);
  return $0 | 0;
 }
 
 function std____2____compressed_pair_elem_maxiTimeStretch_hannWinFunctor__2c_201_2c_20false______compressed_pair_elem_28_29($0) {
  maxiTimeStretch_hannWinFunctor____maxiTimeStretch_28_29($0);
 }
 
 function std____2____shared_ptr_emplace_maxiTimeStretch_hannWinFunctor__2c_20std____2__allocator_maxiTimeStretch_hannWinFunctor__20__20______shared_ptr_emplace_28_29_1($0) {
  $0 = $0 | 0;
  dlfree(std____2____shared_ptr_emplace_maxiTimeStretch_hannWinFunctor__2c_20std____2__allocator_maxiTimeStretch_hannWinFunctor__20__20______shared_ptr_emplace_28_29($0));
 }
 
 function std____2____shared_ptr_emplace_maxiTimeStretch_hannWinFunctor__2c_20std____2__allocator_maxiTimeStretch_hannWinFunctor__20__20_____on_zero_shared_28_29($0) {
  $0 = $0 | 0;
  maxiTimeStretch_hannWinFunctor____maxiTimeStretch_28_29($0 + 16 | 0);
 }
 
 function maxiTimeStretch_hannWinFunctor___maxiTimeStretch_28_29($0) {
  maxiGrainWindowCache_hannWinFunctor___maxiGrainWindowCache_28_29($0 + 16 | 0);
  HEAP32[$0 + 24 >> 2] = 0;
  HEAP32[$0 + 28 >> 2] = 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$0 + 32 >> 2] = 0;
  HEAP32[$0 + 36 >> 2] = 0;
 }
 
 function maxiGrainWindowCache_hannWinFunctor___maxiGrainWindowCache_28_29($0) {
  var $1 = 0, $2 = 0.0, $3 = 0, $4 = 0;
  $4 = $0;
  $2 = +HEAP32[12865] * .5;
  label$1 : {
   if ($2 < 4294967296.0 & $2 >= 0.0) {
    $1 = ~~$2 >>> 0;
    break label$1;
   }
   $1 = 0;
  }
  HEAP32[$4 >> 2] = $1;
  HEAP32[$0 + 4 >> 2] = dlmalloc($1 << 2);
  if ($1) {
   while (1) {
    HEAP32[HEAP32[$0 + 4 >> 2] + ($3 << 2) >> 2] = 0;
    $3 = $3 + 1 | 0;
    if (($1 | 0) != ($3 | 0)) {
     continue
    }
    break;
   }
  }
 }
 
 function std____2____list_imp_maxiGrainBase__2c_20std____2__allocator_maxiGrainBase___20_____list_imp_28_29($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  HEAP32[$0 >> 2] = $0;
  HEAP32[$0 + 4 >> 2] = $0;
  HEAP32[16874] = 0;
  HEAP32[$1 + 12 >> 2] = 0;
  std____2____compressed_pair_unsigned_20long_2c_20std____2__allocator_std____2____list_node_maxiGrainBase__2c_20void___20__20_____compressed_pair_int_2c_20true__28int___29($0 + 8 | 0, $1 + 12 | 0);
  $0 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($0 | 0) != 1) {
   $0 = $1 + 16 | 0;
   if ($0 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $0;
   return;
  }
  $0 = __cxa_find_matching_catch_3(0) | 0;
  getTempRet0() | 0;
  __clang_call_terminate($0);
  abort();
 }
 
 function std____2____compressed_pair_unsigned_20long_2c_20std____2__allocator_std____2____list_node_maxiGrainBase__2c_20void___20__20_____compressed_pair_int_2c_20true__28int___29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  std____2____compressed_pair_elem__IO_FILE__2c_200_2c_20false_____compressed_pair_elem__IO_FILE___2c_20void__28_IO_FILE___29($0, $1);
  return $0 | 0;
 }
 
 function maxiGrainWindowCache_hannWinFunctor___getWindow_28unsigned_20int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0;
  $3 = global$0 - 16 | 0;
  $2 = $3;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  $4 = $1 << 2;
  $2 = $4 + HEAP32[$0 + 4 >> 2] | 0;
  label$2 : {
   if (HEAP32[$2 >> 2]) {
    break label$2
   }
   HEAP32[$2 >> 2] = dlmalloc($1 << 3);
   if (!$1) {
    break label$2
   }
   $2 = 0;
   $5 = $1 << 2;
   while (1) {
    $6 = (1.0 - cos(+($2 >>> 0) * 6.283185307179586 / +($1 + -1 >>> 0))) * .5;
    HEAPF64[HEAP32[HEAP32[$0 + 4 >> 2] + $5 >> 2] + ($2 << 3) >> 3] = $6;
    $2 = $2 + 1 | 0;
    if (($2 | 0) != ($1 | 0)) {
     continue
    }
    break;
   };
  }
  $0 = HEAP32[HEAP32[$0 + 4 >> 2] + $4 >> 2];
  $1 = $3 + 16 | 0;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  return $0 | 0;
 }
 
 function std____2__list_maxiGrainBase__2c_20std____2__allocator_maxiGrainBase___20___push_back_28maxiGrainBase__20const__29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0;
  $2 = global$0 - 16 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  $3 = std____2____vector_base_double_2c_20std____2__allocator_double__20_____alloc_28_29($0);
  std____2__list_maxiGrainBase__2c_20std____2__allocator_maxiGrainBase___20_____allocate_node_28std____2__allocator_std____2____list_node_maxiGrainBase__2c_20void___20___29($2, $3);
  $4 = HEAP32[$2 >> 2] + 8 | 0;
  HEAP32[16874] = 0;
  void_20std____2__allocator_traits_std____2__allocator_int__20___construct_int_2c_20int_20const___28std____2__allocator_int___2c_20int__2c_20int_20const__29($3, $4, $1);
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($1 | 0) != 1) {
   $1 = HEAP32[$2 >> 2];
   $3 = HEAP32[$2 >> 2];
   HEAP32[$3 + 4 >> 2] = $0;
   $4 = HEAP32[$0 >> 2];
   HEAP32[$1 >> 2] = $4;
   HEAP32[$4 + 4 >> 2] = $1;
   HEAP32[$0 >> 2] = $3;
   $0 = std____2____vector_base_double_2c_20std____2__allocator_double__20_____alloc_28_29($0);
   HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
   std____2__unique_ptr__IO_FILE_2c_20int_20_28__29_28_IO_FILE__29___release_28_29($2);
   std____2__unique_ptr_std____2____list_node_maxiGrainBase__2c_20void___2c_20std____2____allocator_destructor_std____2__allocator_std____2____list_node_maxiGrainBase__2c_20void___20__20__20___reset_28std____2____list_node_maxiGrainBase__2c_20void____29($2);
   $0 = $2 + 16 | 0;
   if ($0 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $0;
   return;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__unique_ptr_std____2____list_node_maxiGrainBase__2c_20void___2c_20std____2____allocator_destructor_std____2__allocator_std____2____list_node_maxiGrainBase__2c_20void___20__20__20___reset_28std____2____list_node_maxiGrainBase__2c_20void____29($2);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____list_iterator_maxiGrainBase__2c_20void____operator__28_29_20const($0) {
  return HEAP32[$0 >> 2] + 8 | 0;
 }
 
 function std____2__list_maxiGrainBase__2c_20std____2__allocator_maxiGrainBase___20___erase_28std____2____list_const_iterator_maxiGrainBase__2c_20void___29($0, $1) {
  var $2 = 0, $3 = 0;
  $2 = global$0 - 16 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  std____2____vector_base_double_2c_20std____2__allocator_double__20_____alloc_28_29($0);
  $3 = HEAP32[$1 + 4 >> 2];
  std____2____list_imp_maxiGrainBase__2c_20std____2__allocator_maxiGrainBase___20_____unlink_nodes_28std____2____list_node_base_maxiGrainBase__2c_20void____2c_20std____2____list_node_base_maxiGrainBase__2c_20void____29($1, $1);
  $0 = std____2____vector_base_double_2c_20std____2__allocator_double__20_____alloc_28_29($0);
  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + -1;
  std____2__allocator_traits_std____2__allocator_std____2____list_node_maxiGrainBase__2c_20void___20__20___deallocate_28std____2__allocator_std____2____list_node_maxiGrainBase__2c_20void___20___2c_20std____2____list_node_maxiGrainBase__2c_20void____2c_20unsigned_20long_29($1, 1);
  $0 = HEAP32[std____2____compressed_pair_elem_std____2__allocator_double___2c_201_2c_20false_____compressed_pair_elem_std____2__allocator_double___2c_20void__28std____2__allocator_double___29($2 + 8 | 0, $3) >> 2];
  $1 = $2 + 16 | 0;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  return $0;
 }
 
 function maxiGrain_hannWinFunctor___play_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0;
  if (!HEAPU8[$0 + 4 | 0]) {
   $1 = HEAP32[$0 + 80 >> 2] + (HEAP32[$0 + 36 >> 2] << 3) | 0;
   $3 = HEAP32[$1 + 4 >> 2];
   HEAP32[$0 + 88 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$0 + 92 >> 2] = $3;
   $2 = HEAPF64[$0 + 64 >> 3] + HEAPF64[$0 + 16 >> 3];
   HEAPF64[$0 + 16 >> 3] = $2;
   $1 = $0;
   label$2 : {
    label$3 : {
     if (!!($2 >= +(maxiSample__getLength_28_29_20const(HEAP32[$0 + 8 >> 2]) >>> 0))) {
      $3 = maxiSample__getLength_28_29_20const(HEAP32[$0 + 8 >> 2]);
      $2 = HEAPF64[$0 + 16 >> 3] - +($3 >>> 0);
      break label$3;
     }
     if (!(HEAPF64[$0 + 16 >> 3] < 0.0)) {
      break label$2
     }
     $3 = maxiSample__getLength_28_29_20const(HEAP32[$0 + 8 >> 2]);
     $2 = HEAPF64[$0 + 16 >> 3] + +($3 >>> 0);
    }
    HEAPF64[$1 + 16 >> 3] = $2;
   }
   $2 = HEAPF64[$0 + 16 >> 3];
   $4 = Math_floor($2);
   label$5 : {
    if (Math_abs($4) < 2147483648.0) {
     $1 = ~~$4;
     break label$5;
    }
    $1 = -2147483648;
   }
   $3 = maxiSample__getLength_28_29_20const(HEAP32[$0 + 8 >> 2]);
   $5 = HEAP32[$0 + 84 >> 2];
   $2 = $2 - +($1 | 0);
   $4 = HEAPF64[$5 + ($1 << 3) >> 3] * (1.0 - $2);
   $1 = $1 + 1 | 0;
   $2 = HEAPF64[$0 + 88 >> 3] * ($4 + $2 * HEAPF64[(($1 >>> 0 < $3 >>> 0 ? $1 : 0) << 3) + $5 >> 3]);
  }
  $1 = HEAP32[$0 + 36 >> 2] + 1 | 0;
  HEAP32[$0 + 36 >> 2] = $1;
  if (($1 | 0) == HEAP32[$0 + 40 >> 2]) {
   HEAP8[$0 + 4 | 0] = 1
  }
  return +$2;
 }
 
 function maxiGrainBase___maxiGrainBase_28_29_1($0) {
  $0 = $0 | 0;
  abort();
 }
 
 function std____2__list_maxiGrainBase__2c_20std____2__allocator_maxiGrainBase___20_____allocate_node_28std____2__allocator_std____2____list_node_maxiGrainBase__2c_20void___20___29($0, $1) {
  var $2 = 0, $3 = 0;
  $3 = global$0 - 16 | 0;
  $2 = $3;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  $2 = operator_20new_28unsigned_20long_29(12);
  HEAP32[$2 >> 2] = 0;
  std____2__unique_ptr_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20___unique_ptr_true_2c_20void__28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20__2c_20true_____good_rval_ref_type_29($0, $2, std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20_____allocator_destructor_28std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20___2c_20unsigned_20long_29($3 + 8 | 0, $1, 1));
  $0 = $3 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function std____2__unique_ptr_std____2____list_node_maxiGrainBase__2c_20void___2c_20std____2____allocator_destructor_std____2__allocator_std____2____list_node_maxiGrainBase__2c_20void___20__20__20___reset_28std____2____list_node_maxiGrainBase__2c_20void____29($0) {
  var $1 = 0;
  $1 = HEAP32[$0 >> 2];
  HEAP32[$0 >> 2] = 0;
  if ($1) {
   std____2__allocator_traits_std____2__allocator_std____2____list_node_maxiGrainBase__2c_20void___20__20___deallocate_28std____2__allocator_std____2____list_node_maxiGrainBase__2c_20void___20___2c_20std____2____list_node_maxiGrainBase__2c_20void____2c_20unsigned_20long_29($1, HEAP32[std____2____compressed_pair__IO_FILE__2c_20int_20_28__29_28_IO_FILE__29___second_28_29($0) + 4 >> 2])
  }
 }
 
 function std____2____list_imp_maxiGrainBase__2c_20std____2__allocator_maxiGrainBase___20___begin_28_29($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  $0 = HEAP32[std____2____compressed_pair_elem_std____2__allocator_double___2c_201_2c_20false_____compressed_pair_elem_std____2__allocator_double___2c_20void__28std____2__allocator_double___29($1 + 8 | 0, HEAP32[$0 + 4 >> 2]) >> 2];
  $1 = $1 + 16 | 0;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  return $0;
 }
 
 function emscripten__internal__MethodInvoker_double_20_28maxiTimeStretch_hannWinFunctor_____29_28double_2c_20double_2c_20int_2c_20double_29_2c_20double_2c_20maxiTimeStretch_hannWinFunctor___2c_20double_2c_20double_2c_20int_2c_20double___invoke_28double_20_28maxiTimeStretch_hannWinFunctor_____20const__29_28double_2c_20double_2c_20int_2c_20double_29_2c_20maxiTimeStretch_hannWinFunctor___2c_20double_2c_20double_2c_20int_2c_20double_29($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = +$2;
  $3 = +$3;
  $4 = $4 | 0;
  $5 = +$5;
  var $6 = 0, $7 = 0;
  $7 = global$0 - 16 | 0;
  $6 = $7;
  if ($7 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $6;
  $6 = $1;
  $1 = HEAP32[$0 + 4 >> 2];
  $6 = $6 + ($1 >> 1) | 0;
  $0 = HEAP32[$0 >> 2];
  HEAPF64[$7 + 8 >> 3] = FUNCTION_TABLE[$1 & 1 ? HEAP32[$0 + HEAP32[$6 >> 2] >> 2] : $0]($6, $2, $3, $4, $5);
  $2 = HEAPF64[$7 + 8 >> 3];
  $0 = $7 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
  return +$2;
 }
 
 function emscripten__internal__MethodInvoker_double_20_28maxiTimeStretch_hannWinFunctor_____29_28double_2c_20double_2c_20int_29_2c_20double_2c_20maxiTimeStretch_hannWinFunctor___2c_20double_2c_20double_2c_20int___invoke_28double_20_28maxiTimeStretch_hannWinFunctor_____20const__29_28double_2c_20double_2c_20int_29_2c_20maxiTimeStretch_hannWinFunctor___2c_20double_2c_20double_2c_20int_29($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = +$2;
  $3 = +$3;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0;
  $6 = global$0 - 16 | 0;
  $5 = $6;
  if ($6 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $5;
  $5 = $1;
  $1 = HEAP32[$0 + 4 >> 2];
  $5 = $5 + ($1 >> 1) | 0;
  $0 = HEAP32[$0 >> 2];
  HEAPF64[$6 + 8 >> 3] = FUNCTION_TABLE[$1 & 1 ? HEAP32[$0 + HEAP32[$5 >> 2] >> 2] : $0]($5, $2, $3, $4);
  $2 = HEAPF64[$6 + 8 >> 3];
  $0 = $6 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
  return +$2;
 }
 
 function maxiPitchShift_hannWinFunctor____maxiPitchShift_28_29($0) {
  var $1 = 0;
  $1 = HEAP32[$0 + 16 >> 2];
  if ($1) {
   dlfree(maxiGrainPlayer___maxiGrainPlayer_28_29($1))
  }
  maxiGrainWindowCache_hannWinFunctor____maxiGrainWindowCache_28_29($0 + 20 | 0);
  return $0;
 }
 
 function std____2__shared_ptr_maxiPitchShift_hannWinFunctor__20___shared_ptr_maxiPitchShift_hannWinFunctor__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiPitchShift_hannWinFunctor__20__20___val_deleter__28maxiPitchShift_hannWinFunctor___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiPitchShift_hannWinFunctor__20__20___val_deleter_2c_20std____2__enable_if_is_convertible_maxiPitchShift_hannWinFunctor___2c_20maxiPitchShift_hannWinFunctor_____value_2c_20std____2__shared_ptr_maxiPitchShift_hannWinFunctor__20_____nat___type_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0;
  $3 = global$0 - 32 | 0;
  $4 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  HEAP32[$0 >> 2] = $1;
  HEAP32[16874] = 0;
  $4 = __invoke_i1___22class_std____2__basic_ifstream_22_(930, 20) | 0;
  $5 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      if (($5 | 0) != 1) {
       HEAP32[16874] = 0;
       $5 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1167, $3 + 24 | 0, $2 | 0) | 0;
       $6 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($6 | 0) == 1) {
        break label$5
       }
       HEAP32[16874] = 0;
       __invoke___22class_std____2__basic_istream_22____22class_std____2__basic_istream_22__i8__i32(1168, $4 | 0, $1 | 0, $5 | 0) | 0;
       $6 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($6 | 0) == 1) {
        break label$4
       }
       HEAP32[$0 + 4 >> 2] = $4;
       emscripten__val___val_28_29($5);
       HEAP32[$3 + 4 >> 2] = $1;
       HEAP32[$3 >> 2] = $1;
       $1 = $3 + 32 | 0;
       if ($1 >>> 0 < global$2 >>> 0) {
        __handle_stack_overflow()
       }
       global$0 = $1;
       return $0 | 0;
      }
      $3 = __cxa_find_matching_catch_3(0) | 0;
      getTempRet0() | 0;
      break label$2;
     }
     $3 = __cxa_find_matching_catch_3(0) | 0;
     getTempRet0() | 0;
     break label$3;
    }
    $3 = __cxa_find_matching_catch_3(0) | 0;
    getTempRet0() | 0;
    emscripten__val___val_28_29($5);
   }
   dlfree($4);
  }
  __cxa_begin_catch($3 | 0) | 0;
  HEAP32[16874] = 0;
  __invoke_void___22class_std____2__vector_13_22__i32(1169, $2 | 0, $1 | 0);
  $0 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$8 : {
   label$9 : {
    if (($0 | 0) != 1) {
     HEAP32[16874] = 0;
     __invoke_void(934);
     $0 = HEAP32[16874];
     HEAP32[16874] = 0;
     if (($0 | 0) != 1) {
      break label$9
     }
    }
    $0 = __cxa_find_matching_catch_2() | 0;
    getTempRet0() | 0;
    HEAP32[16874] = 0;
    __invoke_void(23);
    $1 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($1 | 0) != 1) {
     break label$8
    }
    $0 = __cxa_find_matching_catch_3(0) | 0;
    getTempRet0() | 0;
    __clang_call_terminate($0);
   }
   abort();
  }
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____shared_ptr_pointer_maxiPitchShift_hannWinFunctor___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiPitchShift_hannWinFunctor__20__20___val_deleter_2c_20std____2__allocator_maxiPitchShift_hannWinFunctor__20__20_____shared_ptr_pointer_28maxiPitchShift_hannWinFunctor___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiPitchShift_hannWinFunctor__20__20___val_deleter_2c_20std____2__allocator_maxiPitchShift_hannWinFunctor__20__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0;
  $3 = global$0 - 32 | 0;
  $4 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  HEAP32[$3 + 20 >> 2] = $1;
  std____2____shared_weak_count____shared_weak_count_28long_29($0);
  HEAP32[$0 >> 2] = 22884;
  HEAP32[16874] = 0;
  $1 = std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_____compressed_pair_maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__28maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter___29($3 + 8 | 0, $3 + 20 | 0, $2);
  $2 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    if (($2 | 0) != 1) {
     HEAP32[16874] = 0;
     std____2____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20_____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20__28std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter____2c_20std____2__allocator_maxiOsc____29($0 + 12 | 0, $1, $3 + 24 | 0);
     $2 = HEAP32[16874];
     HEAP32[16874] = 0;
     if (($2 | 0) == 1) {
      break label$3
     }
     std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter______compressed_pair_28_29($1);
     $1 = $3 + 32 | 0;
     if ($1 >>> 0 < global$2 >>> 0) {
      __handle_stack_overflow()
     }
     global$0 = $1;
     return $0 | 0;
    }
    $0 = __cxa_find_matching_catch_2() | 0;
    getTempRet0() | 0;
    break label$2;
   }
   $0 = __cxa_find_matching_catch_2() | 0;
   getTempRet0() | 0;
   std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter______compressed_pair_28_29($1);
  }
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____shared_ptr_pointer_maxiPitchShift_hannWinFunctor___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiPitchShift_hannWinFunctor__20__20___val_deleter_2c_20std____2__allocator_maxiPitchShift_hannWinFunctor__20__20______shared_ptr_pointer_28_29($0) {
  $0 = $0 | 0;
  HEAP32[$0 >> 2] = 22884;
  std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter______compressed_pair_28_29($0 + 12 | 0);
  return $0 | 0;
 }
 
 function std____2____shared_ptr_pointer_maxiPitchShift_hannWinFunctor___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiPitchShift_hannWinFunctor__20__20___val_deleter_2c_20std____2__allocator_maxiPitchShift_hannWinFunctor__20__20______shared_ptr_pointer_28_29_1($0) {
  $0 = $0 | 0;
  dlfree(std____2____shared_ptr_pointer_maxiPitchShift_hannWinFunctor___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiPitchShift_hannWinFunctor__20__20___val_deleter_2c_20std____2__allocator_maxiPitchShift_hannWinFunctor__20__20______shared_ptr_pointer_28_29($0));
 }
 
 function std____2____shared_ptr_pointer_maxiPitchShift_hannWinFunctor___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiPitchShift_hannWinFunctor__20__20___val_deleter_2c_20std____2__allocator_maxiPitchShift_hannWinFunctor__20__20_____on_zero_shared_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $0 = $0 + 12 | 0;
  $1 = std____2____compressed_pair__IO_FILE__2c_20int_20_28__29_28_IO_FILE__29___second_28_29($0);
  $2 = HEAP32[$0 >> 2];
  HEAP32[16874] = 0;
  __invoke_void___22class_std____2__vector_13_22__i32(1169, $1 | 0, $2 | 0);
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($1 | 0) != 1) {
   emscripten__val___val_28_29(std____2____compressed_pair__IO_FILE__2c_20int_20_28__29_28_IO_FILE__29___second_28_29($0));
   return;
  }
  $0 = __cxa_find_matching_catch_3(0) | 0;
  getTempRet0() | 0;
  __clang_call_terminate($0);
  abort();
 }
 
 function std____2____shared_ptr_pointer_maxiPitchShift_hannWinFunctor___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiPitchShift_hannWinFunctor__20__20___val_deleter_2c_20std____2__allocator_maxiPitchShift_hannWinFunctor__20__20_____get_deleter_28std__type_info_20const__29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  if (std__type_info__operator___28std__type_info_20const__29_20const($1, 23176)) {
   $0 = std____2____compressed_pair__IO_FILE__2c_20int_20_28__29_28_IO_FILE__29___second_28_29($0 + 12 | 0)
  } else {
   $0 = 0
  }
  return $0 | 0;
 }
 
 function std____2__shared_ptr_maxiPitchShift_hannWinFunctor__20__20std____2__shared_ptr_maxiPitchShift_hannWinFunctor__20___make_shared___28_29($0) {
  var $1 = 0, $2 = 0, $3 = 0;
  $2 = global$0 - 48 | 0;
  $1 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  $1 = $2 + 40 | 0;
  $1 = std____2__unique_ptr_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20___unique_ptr_true_2c_20void__28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20__2c_20true_____good_rval_ref_type_29($2 + 24 | 0, operator_20new_28unsigned_20long_29(56), std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20_____allocator_destructor_28std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20___2c_20unsigned_20long_29($2 + 16 | 0, $1, 1));
  $3 = HEAP32[$1 >> 2];
  HEAP32[16874] = 0;
  __invoke_i1___22class_std____2__basic_ifstream_22_(1172, $3 | 0) | 0;
  $3 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($3 | 0) != 1) {
   $0 = std____2__shared_ptr_maxiOsc___shared_ptr_28_29($0);
   HEAP32[$0 >> 2] = std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___get_28_29(HEAP32[$1 >> 2]);
   HEAP32[$0 + 4 >> 2] = std____2__unique_ptr__IO_FILE_2c_20int_20_28__29_28_IO_FILE__29___release_28_29($1);
   $0 = HEAP32[$0 >> 2];
   HEAP32[$2 + 4 >> 2] = $0;
   HEAP32[$2 >> 2] = $0;
   std____2__unique_ptr_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20___reset_28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___29($1);
   $0 = $2 + 48 | 0;
   if ($0 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $0;
   return;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__unique_ptr_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20___reset_28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___29($1);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____shared_ptr_emplace_maxiPitchShift_hannWinFunctor__2c_20std____2__allocator_maxiPitchShift_hannWinFunctor__20__20_____shared_ptr_emplace_28std____2__allocator_maxiPitchShift_hannWinFunctor__20__29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  std____2____shared_weak_count____shared_weak_count_28long_29($0);
  HEAP32[$0 >> 2] = 23264;
  HEAP32[16874] = 0;
  __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1174, $0 + 16 | 0, $1 + 8 | 0) | 0;
  $2 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($2 | 0) != 1) {
   $1 = $1 + 16 | 0;
   if ($1 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $1;
   return $0 | 0;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____compressed_pair_std____2__allocator_maxiPitchShift_hannWinFunctor__20__2c_20maxiPitchShift_hannWinFunctor__20_____compressed_pair_std____2__allocator_maxiPitchShift_hannWinFunctor__20__2c_20true__28std____2__allocator_maxiPitchShift_hannWinFunctor__20____29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  maxiPitchShift_hannWinFunctor___maxiPitchShift_28_29($0);
  return $0 | 0;
 }
 
 function std____2____shared_ptr_emplace_maxiPitchShift_hannWinFunctor__2c_20std____2__allocator_maxiPitchShift_hannWinFunctor__20__20______shared_ptr_emplace_28_29($0) {
  $0 = $0 | 0;
  HEAP32[$0 >> 2] = 23264;
  maxiPitchShift_hannWinFunctor____maxiPitchShift_28_29($0 + 16 | 0);
  return $0 | 0;
 }
 
 function std____2____shared_ptr_emplace_maxiPitchShift_hannWinFunctor__2c_20std____2__allocator_maxiPitchShift_hannWinFunctor__20__20______shared_ptr_emplace_28_29_1($0) {
  $0 = $0 | 0;
  dlfree(std____2____shared_ptr_emplace_maxiPitchShift_hannWinFunctor__2c_20std____2__allocator_maxiPitchShift_hannWinFunctor__20__20______shared_ptr_emplace_28_29($0));
 }
 
 function std____2____shared_ptr_emplace_maxiPitchShift_hannWinFunctor__2c_20std____2__allocator_maxiPitchShift_hannWinFunctor__20__20_____on_zero_shared_28_29($0) {
  $0 = $0 | 0;
  maxiPitchShift_hannWinFunctor____maxiPitchShift_28_29($0 + 16 | 0);
 }
 
 function maxiPitchShift_hannWinFunctor___maxiPitchShift_28_29($0) {
  maxiGrainWindowCache_hannWinFunctor___maxiGrainWindowCache_28_29($0 + 20 | 0);
  HEAP32[$0 + 32 >> 2] = 0;
  HEAP32[$0 + 36 >> 2] = 0;
  HEAP32[$0 + 8 >> 2] = 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
 }
 
 function std____2__shared_ptr_maxiStretch_hannWinFunctor__20___shared_ptr_maxiStretch_hannWinFunctor__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiStretch_hannWinFunctor__20__20___val_deleter__28maxiStretch_hannWinFunctor___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiStretch_hannWinFunctor__20__20___val_deleter_2c_20std____2__enable_if_is_convertible_maxiStretch_hannWinFunctor___2c_20maxiStretch_hannWinFunctor_____value_2c_20std____2__shared_ptr_maxiStretch_hannWinFunctor__20_____nat___type_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0;
  $3 = global$0 - 32 | 0;
  $4 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  HEAP32[$0 >> 2] = $1;
  HEAP32[16874] = 0;
  $4 = __invoke_i1___22class_std____2__basic_ifstream_22_(930, 20) | 0;
  $5 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      if (($5 | 0) != 1) {
       HEAP32[16874] = 0;
       $5 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1175, $3 + 24 | 0, $2 | 0) | 0;
       $6 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($6 | 0) == 1) {
        break label$5
       }
       HEAP32[16874] = 0;
       __invoke___22class_std____2__basic_istream_22____22class_std____2__basic_istream_22__i8__i32(1176, $4 | 0, $1 | 0, $5 | 0) | 0;
       $6 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($6 | 0) == 1) {
        break label$4
       }
       HEAP32[$0 + 4 >> 2] = $4;
       emscripten__val___val_28_29($5);
       HEAP32[$3 + 4 >> 2] = $1;
       HEAP32[$3 >> 2] = $1;
       $1 = $3 + 32 | 0;
       if ($1 >>> 0 < global$2 >>> 0) {
        __handle_stack_overflow()
       }
       global$0 = $1;
       return $0 | 0;
      }
      $3 = __cxa_find_matching_catch_3(0) | 0;
      getTempRet0() | 0;
      break label$2;
     }
     $3 = __cxa_find_matching_catch_3(0) | 0;
     getTempRet0() | 0;
     break label$3;
    }
    $3 = __cxa_find_matching_catch_3(0) | 0;
    getTempRet0() | 0;
    emscripten__val___val_28_29($5);
   }
   dlfree($4);
  }
  __cxa_begin_catch($3 | 0) | 0;
  HEAP32[16874] = 0;
  __invoke_void___22class_std____2__vector_13_22__i32(1177, $2 | 0, $1 | 0);
  $0 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$8 : {
   label$9 : {
    if (($0 | 0) != 1) {
     HEAP32[16874] = 0;
     __invoke_void(934);
     $0 = HEAP32[16874];
     HEAP32[16874] = 0;
     if (($0 | 0) != 1) {
      break label$9
     }
    }
    $0 = __cxa_find_matching_catch_2() | 0;
    getTempRet0() | 0;
    HEAP32[16874] = 0;
    __invoke_void(23);
    $1 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($1 | 0) != 1) {
     break label$8
    }
    $0 = __cxa_find_matching_catch_3(0) | 0;
    getTempRet0() | 0;
    __clang_call_terminate($0);
   }
   abort();
  }
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____shared_ptr_pointer_maxiStretch_hannWinFunctor___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiStretch_hannWinFunctor__20__20___val_deleter_2c_20std____2__allocator_maxiStretch_hannWinFunctor__20__20_____shared_ptr_pointer_28maxiStretch_hannWinFunctor___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiStretch_hannWinFunctor__20__20___val_deleter_2c_20std____2__allocator_maxiStretch_hannWinFunctor__20__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0;
  $3 = global$0 - 32 | 0;
  $4 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  HEAP32[$3 + 20 >> 2] = $1;
  std____2____shared_weak_count____shared_weak_count_28long_29($0);
  HEAP32[$0 >> 2] = 23584;
  HEAP32[16874] = 0;
  $1 = std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_____compressed_pair_maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__28maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter___29($3 + 8 | 0, $3 + 20 | 0, $2);
  $2 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    if (($2 | 0) != 1) {
     HEAP32[16874] = 0;
     std____2____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20_____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20__28std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter____2c_20std____2__allocator_maxiOsc____29($0 + 12 | 0, $1, $3 + 24 | 0);
     $2 = HEAP32[16874];
     HEAP32[16874] = 0;
     if (($2 | 0) == 1) {
      break label$3
     }
     std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter______compressed_pair_28_29($1);
     $1 = $3 + 32 | 0;
     if ($1 >>> 0 < global$2 >>> 0) {
      __handle_stack_overflow()
     }
     global$0 = $1;
     return $0 | 0;
    }
    $0 = __cxa_find_matching_catch_2() | 0;
    getTempRet0() | 0;
    break label$2;
   }
   $0 = __cxa_find_matching_catch_2() | 0;
   getTempRet0() | 0;
   std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter______compressed_pair_28_29($1);
  }
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____shared_ptr_pointer_maxiStretch_hannWinFunctor___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiStretch_hannWinFunctor__20__20___val_deleter_2c_20std____2__allocator_maxiStretch_hannWinFunctor__20__20______shared_ptr_pointer_28_29($0) {
  $0 = $0 | 0;
  HEAP32[$0 >> 2] = 23584;
  std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter______compressed_pair_28_29($0 + 12 | 0);
  return $0 | 0;
 }
 
 function std____2____shared_ptr_pointer_maxiStretch_hannWinFunctor___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiStretch_hannWinFunctor__20__20___val_deleter_2c_20std____2__allocator_maxiStretch_hannWinFunctor__20__20______shared_ptr_pointer_28_29_1($0) {
  $0 = $0 | 0;
  dlfree(std____2____shared_ptr_pointer_maxiStretch_hannWinFunctor___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiStretch_hannWinFunctor__20__20___val_deleter_2c_20std____2__allocator_maxiStretch_hannWinFunctor__20__20______shared_ptr_pointer_28_29($0));
 }
 
 function std____2____shared_ptr_pointer_maxiStretch_hannWinFunctor___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiStretch_hannWinFunctor__20__20___val_deleter_2c_20std____2__allocator_maxiStretch_hannWinFunctor__20__20_____on_zero_shared_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $0 = $0 + 12 | 0;
  $1 = std____2____compressed_pair__IO_FILE__2c_20int_20_28__29_28_IO_FILE__29___second_28_29($0);
  $2 = HEAP32[$0 >> 2];
  HEAP32[16874] = 0;
  __invoke_void___22class_std____2__vector_13_22__i32(1177, $1 | 0, $2 | 0);
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($1 | 0) != 1) {
   emscripten__val___val_28_29(std____2____compressed_pair__IO_FILE__2c_20int_20_28__29_28_IO_FILE__29___second_28_29($0));
   return;
  }
  $0 = __cxa_find_matching_catch_3(0) | 0;
  getTempRet0() | 0;
  __clang_call_terminate($0);
  abort();
 }
 
 function std____2____shared_ptr_pointer_maxiStretch_hannWinFunctor___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiStretch_hannWinFunctor__20__20___val_deleter_2c_20std____2__allocator_maxiStretch_hannWinFunctor__20__20_____get_deleter_28std__type_info_20const__29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  if (std__type_info__operator___28std__type_info_20const__29_20const($1, 23868)) {
   $0 = std____2____compressed_pair__IO_FILE__2c_20int_20_28__29_28_IO_FILE__29___second_28_29($0 + 12 | 0)
  } else {
   $0 = 0
  }
  return $0 | 0;
 }
 
 function std____2__shared_ptr_maxiStretch_hannWinFunctor__20__20std____2__shared_ptr_maxiStretch_hannWinFunctor__20___make_shared___28_29($0) {
  var $1 = 0, $2 = 0, $3 = 0;
  $2 = global$0 - 48 | 0;
  $1 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  $1 = $2 + 40 | 0;
  $1 = std____2__unique_ptr_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20___unique_ptr_true_2c_20void__28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20__2c_20true_____good_rval_ref_type_29($2 + 24 | 0, operator_20new_28unsigned_20long_29(72), std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20_____allocator_destructor_28std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20___2c_20unsigned_20long_29($2 + 16 | 0, $1, 1));
  $3 = HEAP32[$1 >> 2];
  HEAP32[16874] = 0;
  __invoke_i1___22class_std____2__basic_ifstream_22_(1180, $3 | 0) | 0;
  $3 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($3 | 0) != 1) {
   $0 = std____2__shared_ptr_maxiOsc___shared_ptr_28_29($0);
   HEAP32[$0 >> 2] = std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___get_28_29(HEAP32[$1 >> 2]);
   HEAP32[$0 + 4 >> 2] = std____2__unique_ptr__IO_FILE_2c_20int_20_28__29_28_IO_FILE__29___release_28_29($1);
   $0 = HEAP32[$0 >> 2];
   HEAP32[$2 + 4 >> 2] = $0;
   HEAP32[$2 >> 2] = $0;
   std____2__unique_ptr_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20___reset_28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___29($1);
   $0 = $2 + 48 | 0;
   if ($0 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $0;
   return;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__unique_ptr_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20___reset_28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___29($1);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____shared_ptr_emplace_maxiStretch_hannWinFunctor__2c_20std____2__allocator_maxiStretch_hannWinFunctor__20__20_____shared_ptr_emplace_28std____2__allocator_maxiStretch_hannWinFunctor__20__29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  std____2____shared_weak_count____shared_weak_count_28long_29($0);
  HEAP32[$0 >> 2] = 23952;
  HEAP32[16874] = 0;
  __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1182, $0 + 16 | 0, $1 + 8 | 0) | 0;
  $2 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($2 | 0) != 1) {
   $1 = $1 + 16 | 0;
   if ($1 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $1;
   return $0 | 0;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____compressed_pair_std____2__allocator_maxiStretch_hannWinFunctor__20__2c_20maxiStretch_hannWinFunctor__20_____compressed_pair_std____2__allocator_maxiStretch_hannWinFunctor__20__2c_20true__28std____2__allocator_maxiStretch_hannWinFunctor__20____29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  maxiStretch_hannWinFunctor___maxiStretch_28_29($0);
  return $0 | 0;
 }
 
 function std____2____shared_ptr_emplace_maxiStretch_hannWinFunctor__2c_20std____2__allocator_maxiStretch_hannWinFunctor__20__20______shared_ptr_emplace_28_29($0) {
  $0 = $0 | 0;
  HEAP32[$0 >> 2] = 23952;
  std____2____compressed_pair_elem_maxiTimeStretch_hannWinFunctor__2c_201_2c_20false______compressed_pair_elem_28_29($0 + 16 | 0);
  return $0 | 0;
 }
 
 function std____2____shared_ptr_emplace_maxiStretch_hannWinFunctor__2c_20std____2__allocator_maxiStretch_hannWinFunctor__20__20______shared_ptr_emplace_28_29_1($0) {
  $0 = $0 | 0;
  dlfree(std____2____shared_ptr_emplace_maxiStretch_hannWinFunctor__2c_20std____2__allocator_maxiStretch_hannWinFunctor__20__20______shared_ptr_emplace_28_29($0));
 }
 
 function maxiStretch_hannWinFunctor___maxiStretch_28_29($0) {
  maxiGrainWindowCache_hannWinFunctor___maxiGrainWindowCache_28_29($0 + 16 | 0);
  HEAP32[$0 + 32 >> 2] = 0;
  HEAP32[$0 + 24 >> 2] = 0;
  HEAP32[$0 + 28 >> 2] = 0;
  HEAP32[$0 + 48 >> 2] = 0;
  HEAP32[$0 + 52 >> 2] = 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$0 + 8 >> 2] = 0;
 }
 
 function emscripten__internal__MethodInvoker_double_20_28maxiStretch_hannWinFunctor_____29_28double_2c_20double_2c_20double_2c_20int_2c_20double_29_2c_20double_2c_20maxiStretch_hannWinFunctor___2c_20double_2c_20double_2c_20double_2c_20int_2c_20double___invoke_28double_20_28maxiStretch_hannWinFunctor_____20const__29_28double_2c_20double_2c_20double_2c_20int_2c_20double_29_2c_20maxiStretch_hannWinFunctor___2c_20double_2c_20double_2c_20double_2c_20int_2c_20double_29($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = +$2;
  $3 = +$3;
  $4 = +$4;
  $5 = $5 | 0;
  $6 = +$6;
  var $7 = 0, $8 = 0;
  $8 = global$0 - 16 | 0;
  $7 = $8;
  if ($8 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $7;
  $7 = $1;
  $1 = HEAP32[$0 + 4 >> 2];
  $7 = $7 + ($1 >> 1) | 0;
  $0 = HEAP32[$0 >> 2];
  HEAPF64[$8 + 8 >> 3] = FUNCTION_TABLE[$1 & 1 ? HEAP32[$0 + HEAP32[$7 >> 2] >> 2] : $0]($7, $2, $3, $4, $5, $6);
  $2 = HEAPF64[$8 + 8 >> 3];
  $0 = $8 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
  return +$2;
 }
 
 function emscripten__internal__MethodInvoker_double_20_28maxiStretch_hannWinFunctor_____29_28double_2c_20double_2c_20double_2c_20int_29_2c_20double_2c_20maxiStretch_hannWinFunctor___2c_20double_2c_20double_2c_20double_2c_20int___invoke_28double_20_28maxiStretch_hannWinFunctor_____20const__29_28double_2c_20double_2c_20double_2c_20int_29_2c_20maxiStretch_hannWinFunctor___2c_20double_2c_20double_2c_20double_2c_20int_29($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = +$2;
  $3 = +$3;
  $4 = +$4;
  $5 = $5 | 0;
  var $6 = 0, $7 = 0;
  $7 = global$0 - 16 | 0;
  $6 = $7;
  if ($7 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $6;
  $6 = $1;
  $1 = HEAP32[$0 + 4 >> 2];
  $6 = $6 + ($1 >> 1) | 0;
  $0 = HEAP32[$0 >> 2];
  HEAPF64[$7 + 8 >> 3] = FUNCTION_TABLE[$1 & 1 ? HEAP32[$0 + HEAP32[$6 >> 2] >> 2] : $0]($6, $2, $3, $4, $5);
  $2 = HEAPF64[$7 + 8 >> 3];
  $0 = $7 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
  return +$2;
 }
 
 function std____2__shared_ptr_maxiTrigger___shared_ptr_maxiTrigger_2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiTrigger__20___val_deleter__28maxiTrigger__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiTrigger__20___val_deleter_2c_20std____2__enable_if_is_convertible_maxiTrigger__2c_20maxiTrigger____value_2c_20std____2__shared_ptr_maxiTrigger_____nat___type_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0;
  $3 = global$0 - 32 | 0;
  $4 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  HEAP32[$0 >> 2] = $1;
  HEAP32[16874] = 0;
  $4 = __invoke_i1___22class_std____2__basic_ifstream_22_(930, 20) | 0;
  $5 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      if (($5 | 0) != 1) {
       HEAP32[16874] = 0;
       $5 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1183, $3 + 24 | 0, $2 | 0) | 0;
       $6 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($6 | 0) == 1) {
        break label$5
       }
       HEAP32[16874] = 0;
       __invoke___22class_std____2__basic_istream_22____22class_std____2__basic_istream_22__i8__i32(1184, $4 | 0, $1 | 0, $5 | 0) | 0;
       $6 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($6 | 0) == 1) {
        break label$4
       }
       HEAP32[$0 + 4 >> 2] = $4;
       emscripten__val___val_28_29($5);
       HEAP32[$3 + 4 >> 2] = $1;
       HEAP32[$3 >> 2] = $1;
       $1 = $3 + 32 | 0;
       if ($1 >>> 0 < global$2 >>> 0) {
        __handle_stack_overflow()
       }
       global$0 = $1;
       return $0 | 0;
      }
      $3 = __cxa_find_matching_catch_3(0) | 0;
      getTempRet0() | 0;
      break label$2;
     }
     $3 = __cxa_find_matching_catch_3(0) | 0;
     getTempRet0() | 0;
     break label$3;
    }
    $3 = __cxa_find_matching_catch_3(0) | 0;
    getTempRet0() | 0;
    emscripten__val___val_28_29($5);
   }
   dlfree($4);
  }
  __cxa_begin_catch($3 | 0) | 0;
  HEAP32[16874] = 0;
  __invoke_void___22class_std____2__vector_13_22__i32(1185, $2 | 0, $1 | 0);
  $0 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$8 : {
   label$9 : {
    if (($0 | 0) != 1) {
     HEAP32[16874] = 0;
     __invoke_void(934);
     $0 = HEAP32[16874];
     HEAP32[16874] = 0;
     if (($0 | 0) != 1) {
      break label$9
     }
    }
    $0 = __cxa_find_matching_catch_2() | 0;
    getTempRet0() | 0;
    HEAP32[16874] = 0;
    __invoke_void(23);
    $1 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($1 | 0) != 1) {
     break label$8
    }
    $0 = __cxa_find_matching_catch_3(0) | 0;
    getTempRet0() | 0;
    __clang_call_terminate($0);
   }
   abort();
  }
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____shared_ptr_pointer_maxiTrigger__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiTrigger__20___val_deleter_2c_20std____2__allocator_maxiTrigger__20_____shared_ptr_pointer_28maxiTrigger__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiTrigger__20___val_deleter_2c_20std____2__allocator_maxiTrigger__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0;
  $3 = global$0 - 32 | 0;
  $4 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  HEAP32[$3 + 20 >> 2] = $1;
  std____2____shared_weak_count____shared_weak_count_28long_29($0);
  HEAP32[$0 >> 2] = 24424;
  HEAP32[16874] = 0;
  $1 = std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_____compressed_pair_maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__28maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter___29($3 + 8 | 0, $3 + 20 | 0, $2);
  $2 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    if (($2 | 0) != 1) {
     HEAP32[16874] = 0;
     std____2____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20_____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20__28std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter____2c_20std____2__allocator_maxiOsc____29($0 + 12 | 0, $1, $3 + 24 | 0);
     $2 = HEAP32[16874];
     HEAP32[16874] = 0;
     if (($2 | 0) == 1) {
      break label$3
     }
     std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter______compressed_pair_28_29($1);
     $1 = $3 + 32 | 0;
     if ($1 >>> 0 < global$2 >>> 0) {
      __handle_stack_overflow()
     }
     global$0 = $1;
     return $0 | 0;
    }
    $0 = __cxa_find_matching_catch_2() | 0;
    getTempRet0() | 0;
    break label$2;
   }
   $0 = __cxa_find_matching_catch_2() | 0;
   getTempRet0() | 0;
   std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter______compressed_pair_28_29($1);
  }
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____shared_ptr_pointer_maxiTrigger__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiTrigger__20___val_deleter_2c_20std____2__allocator_maxiTrigger__20______shared_ptr_pointer_28_29($0) {
  $0 = $0 | 0;
  HEAP32[$0 >> 2] = 24424;
  std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter______compressed_pair_28_29($0 + 12 | 0);
  return $0 | 0;
 }
 
 function std____2____shared_ptr_pointer_maxiTrigger__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiTrigger__20___val_deleter_2c_20std____2__allocator_maxiTrigger__20______shared_ptr_pointer_28_29_1($0) {
  $0 = $0 | 0;
  dlfree(std____2____shared_ptr_pointer_maxiTrigger__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiTrigger__20___val_deleter_2c_20std____2__allocator_maxiTrigger__20______shared_ptr_pointer_28_29($0));
 }
 
 function std____2____shared_ptr_pointer_maxiTrigger__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiTrigger__20___val_deleter_2c_20std____2__allocator_maxiTrigger__20_____on_zero_shared_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $0 = $0 + 12 | 0;
  $1 = std____2____compressed_pair__IO_FILE__2c_20int_20_28__29_28_IO_FILE__29___second_28_29($0);
  $2 = HEAP32[$0 >> 2];
  HEAP32[16874] = 0;
  __invoke_void___22class_std____2__vector_13_22__i32(1185, $1 | 0, $2 | 0);
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($1 | 0) != 1) {
   emscripten__val___val_28_29(std____2____compressed_pair__IO_FILE__2c_20int_20_28__29_28_IO_FILE__29___second_28_29($0));
   return;
  }
  $0 = __cxa_find_matching_catch_3(0) | 0;
  getTempRet0() | 0;
  __clang_call_terminate($0);
  abort();
 }
 
 function std____2____shared_ptr_pointer_maxiTrigger__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiTrigger__20___val_deleter_2c_20std____2__allocator_maxiTrigger__20_____get_deleter_28std__type_info_20const__29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  if (std__type_info__operator___28std__type_info_20const__29_20const($1, 24676)) {
   $0 = std____2____compressed_pair__IO_FILE__2c_20int_20_28__29_28_IO_FILE__29___second_28_29($0 + 12 | 0)
  } else {
   $0 = 0
  }
  return $0 | 0;
 }
 
 function std____2__shared_ptr_maxiTrigger__20std____2__shared_ptr_maxiTrigger___make_shared___28_29($0) {
  var $1 = 0, $2 = 0, $3 = 0;
  $2 = global$0 - 48 | 0;
  $1 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  $1 = $2 + 40 | 0;
  $1 = std____2__unique_ptr_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20___unique_ptr_true_2c_20void__28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20__2c_20true_____good_rval_ref_type_29($2 + 24 | 0, operator_20new_28unsigned_20long_29(32), std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20_____allocator_destructor_28std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20___2c_20unsigned_20long_29($2 + 16 | 0, $1, 1));
  $3 = HEAP32[$1 >> 2];
  HEAP32[16874] = 0;
  __invoke_i1___22class_std____2__basic_ifstream_22_(1188, $3 | 0) | 0;
  $3 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($3 | 0) != 1) {
   $0 = std____2__shared_ptr_maxiOsc___shared_ptr_28_29($0);
   HEAP32[$0 >> 2] = std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___get_28_29(HEAP32[$1 >> 2]);
   HEAP32[$0 + 4 >> 2] = std____2__unique_ptr__IO_FILE_2c_20int_20_28__29_28_IO_FILE__29___release_28_29($1);
   $0 = HEAP32[$0 >> 2];
   HEAP32[$2 + 4 >> 2] = $0;
   HEAP32[$2 >> 2] = $0;
   std____2__unique_ptr_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20___reset_28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___29($1);
   $0 = $2 + 48 | 0;
   if ($0 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $0;
   return;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__unique_ptr_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20___reset_28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___29($1);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____shared_ptr_emplace_maxiTrigger_2c_20std____2__allocator_maxiTrigger__20_____shared_ptr_emplace_28std____2__allocator_maxiTrigger__29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  std____2____shared_weak_count____shared_weak_count_28long_29($0);
  HEAP32[$0 >> 2] = 24740;
  HEAP32[16874] = 0;
  std____2____compressed_pair_std____2__allocator_maxiTrigger__2c_20maxiTrigger_____compressed_pair_std____2__allocator_maxiTrigger__2c_20true__28std____2__allocator_maxiTrigger____29($0 + 16 | 0, $1 + 8 | 0);
  $2 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($2 | 0) != 1) {
   $1 = $1 + 16 | 0;
   if ($1 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $1;
   return $0 | 0;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____compressed_pair_std____2__allocator_maxiTrigger__2c_20maxiTrigger_____compressed_pair_std____2__allocator_maxiTrigger__2c_20true__28std____2__allocator_maxiTrigger____29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$0 + 8 >> 2] = 0;
  HEAP32[$0 + 12 >> 2] = 0;
  maxiTrigger__maxiTrigger_28_29($0);
  return $0 | 0;
 }
 
 function std____2__shared_ptr_maxiCounter___shared_ptr_maxiCounter_2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiCounter__20___val_deleter__28maxiCounter__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiCounter__20___val_deleter_2c_20std____2__enable_if_is_convertible_maxiCounter__2c_20maxiCounter____value_2c_20std____2__shared_ptr_maxiCounter_____nat___type_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0;
  $3 = global$0 - 32 | 0;
  $4 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  HEAP32[$0 >> 2] = $1;
  HEAP32[16874] = 0;
  $4 = __invoke_i1___22class_std____2__basic_ifstream_22_(930, 20) | 0;
  $5 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      if (($5 | 0) != 1) {
       HEAP32[16874] = 0;
       $5 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1191, $3 + 24 | 0, $2 | 0) | 0;
       $6 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($6 | 0) == 1) {
        break label$5
       }
       HEAP32[16874] = 0;
       __invoke___22class_std____2__basic_istream_22____22class_std____2__basic_istream_22__i8__i32(1192, $4 | 0, $1 | 0, $5 | 0) | 0;
       $6 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($6 | 0) == 1) {
        break label$4
       }
       HEAP32[$0 + 4 >> 2] = $4;
       emscripten__val___val_28_29($5);
       HEAP32[$3 + 4 >> 2] = $1;
       HEAP32[$3 >> 2] = $1;
       $1 = $3 + 32 | 0;
       if ($1 >>> 0 < global$2 >>> 0) {
        __handle_stack_overflow()
       }
       global$0 = $1;
       return $0 | 0;
      }
      $3 = __cxa_find_matching_catch_3(0) | 0;
      getTempRet0() | 0;
      break label$2;
     }
     $3 = __cxa_find_matching_catch_3(0) | 0;
     getTempRet0() | 0;
     break label$3;
    }
    $3 = __cxa_find_matching_catch_3(0) | 0;
    getTempRet0() | 0;
    emscripten__val___val_28_29($5);
   }
   dlfree($4);
  }
  __cxa_begin_catch($3 | 0) | 0;
  HEAP32[16874] = 0;
  __invoke_void___22class_std____2__vector_13_22__i32(1193, $2 | 0, $1 | 0);
  $0 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$8 : {
   label$9 : {
    if (($0 | 0) != 1) {
     HEAP32[16874] = 0;
     __invoke_void(934);
     $0 = HEAP32[16874];
     HEAP32[16874] = 0;
     if (($0 | 0) != 1) {
      break label$9
     }
    }
    $0 = __cxa_find_matching_catch_2() | 0;
    getTempRet0() | 0;
    HEAP32[16874] = 0;
    __invoke_void(23);
    $1 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($1 | 0) != 1) {
     break label$8
    }
    $0 = __cxa_find_matching_catch_3(0) | 0;
    getTempRet0() | 0;
    __clang_call_terminate($0);
   }
   abort();
  }
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____shared_ptr_pointer_maxiCounter__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiCounter__20___val_deleter_2c_20std____2__allocator_maxiCounter__20_____shared_ptr_pointer_28maxiCounter__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiCounter__20___val_deleter_2c_20std____2__allocator_maxiCounter__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0;
  $3 = global$0 - 32 | 0;
  $4 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  HEAP32[$3 + 20 >> 2] = $1;
  std____2____shared_weak_count____shared_weak_count_28long_29($0);
  HEAP32[$0 >> 2] = 24976;
  HEAP32[16874] = 0;
  $1 = std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_____compressed_pair_maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__28maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter___29($3 + 8 | 0, $3 + 20 | 0, $2);
  $2 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    if (($2 | 0) != 1) {
     HEAP32[16874] = 0;
     std____2____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20_____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20__28std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter____2c_20std____2__allocator_maxiOsc____29($0 + 12 | 0, $1, $3 + 24 | 0);
     $2 = HEAP32[16874];
     HEAP32[16874] = 0;
     if (($2 | 0) == 1) {
      break label$3
     }
     std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter______compressed_pair_28_29($1);
     $1 = $3 + 32 | 0;
     if ($1 >>> 0 < global$2 >>> 0) {
      __handle_stack_overflow()
     }
     global$0 = $1;
     return $0 | 0;
    }
    $0 = __cxa_find_matching_catch_2() | 0;
    getTempRet0() | 0;
    break label$2;
   }
   $0 = __cxa_find_matching_catch_2() | 0;
   getTempRet0() | 0;
   std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter______compressed_pair_28_29($1);
  }
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____shared_ptr_pointer_maxiCounter__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiCounter__20___val_deleter_2c_20std____2__allocator_maxiCounter__20______shared_ptr_pointer_28_29($0) {
  $0 = $0 | 0;
  HEAP32[$0 >> 2] = 24976;
  std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter______compressed_pair_28_29($0 + 12 | 0);
  return $0 | 0;
 }
 
 function std____2____shared_ptr_pointer_maxiCounter__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiCounter__20___val_deleter_2c_20std____2__allocator_maxiCounter__20______shared_ptr_pointer_28_29_1($0) {
  $0 = $0 | 0;
  dlfree(std____2____shared_ptr_pointer_maxiCounter__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiCounter__20___val_deleter_2c_20std____2__allocator_maxiCounter__20______shared_ptr_pointer_28_29($0));
 }
 
 function std____2____shared_ptr_pointer_maxiCounter__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiCounter__20___val_deleter_2c_20std____2__allocator_maxiCounter__20_____on_zero_shared_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $0 = $0 + 12 | 0;
  $1 = std____2____compressed_pair__IO_FILE__2c_20int_20_28__29_28_IO_FILE__29___second_28_29($0);
  $2 = HEAP32[$0 >> 2];
  HEAP32[16874] = 0;
  __invoke_void___22class_std____2__vector_13_22__i32(1193, $1 | 0, $2 | 0);
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($1 | 0) != 1) {
   emscripten__val___val_28_29(std____2____compressed_pair__IO_FILE__2c_20int_20_28__29_28_IO_FILE__29___second_28_29($0));
   return;
  }
  $0 = __cxa_find_matching_catch_3(0) | 0;
  getTempRet0() | 0;
  __clang_call_terminate($0);
  abort();
 }
 
 function std____2____shared_ptr_pointer_maxiCounter__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiCounter__20___val_deleter_2c_20std____2__allocator_maxiCounter__20_____get_deleter_28std__type_info_20const__29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  if (std__type_info__operator___28std__type_info_20const__29_20const($1, 25228)) {
   $0 = std____2____compressed_pair__IO_FILE__2c_20int_20_28__29_28_IO_FILE__29___second_28_29($0 + 12 | 0)
  } else {
   $0 = 0
  }
  return $0 | 0;
 }
 
 function std____2__shared_ptr_maxiCounter__20std____2__shared_ptr_maxiCounter___make_shared___28_29($0) {
  var $1 = 0, $2 = 0, $3 = 0;
  $2 = global$0 - 48 | 0;
  $1 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  $1 = $2 + 40 | 0;
  $1 = std____2__unique_ptr_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20___unique_ptr_true_2c_20void__28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20__2c_20true_____good_rval_ref_type_29($2 + 24 | 0, operator_20new_28unsigned_20long_29(56), std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20_____allocator_destructor_28std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20___2c_20unsigned_20long_29($2 + 16 | 0, $1, 1));
  $3 = HEAP32[$1 >> 2];
  HEAP32[16874] = 0;
  __invoke_i1___22class_std____2__basic_ifstream_22_(1196, $3 | 0) | 0;
  $3 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($3 | 0) != 1) {
   $0 = std____2__shared_ptr_maxiOsc___shared_ptr_28_29($0);
   HEAP32[$0 >> 2] = std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___get_28_29(HEAP32[$1 >> 2]);
   HEAP32[$0 + 4 >> 2] = std____2__unique_ptr__IO_FILE_2c_20int_20_28__29_28_IO_FILE__29___release_28_29($1);
   $0 = HEAP32[$0 >> 2];
   HEAP32[$2 + 4 >> 2] = $0;
   HEAP32[$2 >> 2] = $0;
   std____2__unique_ptr_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20___reset_28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___29($1);
   $0 = $2 + 48 | 0;
   if ($0 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $0;
   return;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__unique_ptr_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20___reset_28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___29($1);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____shared_ptr_emplace_maxiCounter_2c_20std____2__allocator_maxiCounter__20_____shared_ptr_emplace_28std____2__allocator_maxiCounter__29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  std____2____shared_weak_count____shared_weak_count_28long_29($0);
  HEAP32[$0 >> 2] = 25292;
  HEAP32[16874] = 0;
  std____2____compressed_pair_std____2__allocator_maxiCounter__2c_20maxiCounter_____compressed_pair_std____2__allocator_maxiCounter__2c_20true__28std____2__allocator_maxiCounter____29($0 + 16 | 0, $1 + 8 | 0);
  $2 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($2 | 0) != 1) {
   $1 = $1 + 16 | 0;
   if ($1 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $1;
   return $0 | 0;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____compressed_pair_std____2__allocator_maxiCounter__2c_20maxiCounter_____compressed_pair_std____2__allocator_maxiCounter__2c_20true__28std____2__allocator_maxiCounter____29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  std____2____compressed_pair_elem_maxiCounter_2c_201_2c_20false_____compressed_pair_elem_28_29($0);
  return $0 | 0;
 }
 
 function std____2____compressed_pair_elem_maxiCounter_2c_201_2c_20false_____compressed_pair_elem_28_29($0) {
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$0 + 32 >> 2] = 0;
  HEAP32[$0 + 36 >> 2] = 0;
  HEAP32[$0 + 24 >> 2] = 0;
  HEAP32[$0 + 28 >> 2] = 0;
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP32[$0 + 20 >> 2] = 0;
  HEAP32[$0 + 8 >> 2] = 0;
  HEAP32[$0 + 12 >> 2] = 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  maxiTrigger__maxiTrigger_28_29($0 + 8 | 0);
  maxiTrigger__maxiTrigger_28_29($0 + 24 | 0);
 }
 
 function std____2__shared_ptr_maxiIndex___shared_ptr_maxiIndex_2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiIndex__20___val_deleter__28maxiIndex__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiIndex__20___val_deleter_2c_20std____2__enable_if_is_convertible_maxiIndex__2c_20maxiIndex____value_2c_20std____2__shared_ptr_maxiIndex_____nat___type_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0;
  $3 = global$0 - 32 | 0;
  $4 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  HEAP32[$0 >> 2] = $1;
  HEAP32[16874] = 0;
  $4 = __invoke_i1___22class_std____2__basic_ifstream_22_(930, 20) | 0;
  $5 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      if (($5 | 0) != 1) {
       HEAP32[16874] = 0;
       $5 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1199, $3 + 24 | 0, $2 | 0) | 0;
       $6 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($6 | 0) == 1) {
        break label$5
       }
       HEAP32[16874] = 0;
       __invoke___22class_std____2__basic_istream_22____22class_std____2__basic_istream_22__i8__i32(1200, $4 | 0, $1 | 0, $5 | 0) | 0;
       $6 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($6 | 0) == 1) {
        break label$4
       }
       HEAP32[$0 + 4 >> 2] = $4;
       emscripten__val___val_28_29($5);
       HEAP32[$3 + 4 >> 2] = $1;
       HEAP32[$3 >> 2] = $1;
       $1 = $3 + 32 | 0;
       if ($1 >>> 0 < global$2 >>> 0) {
        __handle_stack_overflow()
       }
       global$0 = $1;
       return $0 | 0;
      }
      $3 = __cxa_find_matching_catch_3(0) | 0;
      getTempRet0() | 0;
      break label$2;
     }
     $3 = __cxa_find_matching_catch_3(0) | 0;
     getTempRet0() | 0;
     break label$3;
    }
    $3 = __cxa_find_matching_catch_3(0) | 0;
    getTempRet0() | 0;
    emscripten__val___val_28_29($5);
   }
   dlfree($4);
  }
  __cxa_begin_catch($3 | 0) | 0;
  HEAP32[16874] = 0;
  __invoke_void___22class_std____2__vector_13_22__i32(1201, $2 | 0, $1 | 0);
  $0 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$8 : {
   label$9 : {
    if (($0 | 0) != 1) {
     HEAP32[16874] = 0;
     __invoke_void(934);
     $0 = HEAP32[16874];
     HEAP32[16874] = 0;
     if (($0 | 0) != 1) {
      break label$9
     }
    }
    $0 = __cxa_find_matching_catch_2() | 0;
    getTempRet0() | 0;
    HEAP32[16874] = 0;
    __invoke_void(23);
    $1 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($1 | 0) != 1) {
     break label$8
    }
    $0 = __cxa_find_matching_catch_3(0) | 0;
    getTempRet0() | 0;
    __clang_call_terminate($0);
   }
   abort();
  }
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____shared_ptr_pointer_maxiIndex__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiIndex__20___val_deleter_2c_20std____2__allocator_maxiIndex__20_____shared_ptr_pointer_28maxiIndex__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiIndex__20___val_deleter_2c_20std____2__allocator_maxiIndex__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0;
  $3 = global$0 - 32 | 0;
  $4 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  HEAP32[$3 + 20 >> 2] = $1;
  std____2____shared_weak_count____shared_weak_count_28long_29($0);
  HEAP32[$0 >> 2] = 25496;
  HEAP32[16874] = 0;
  $1 = std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_____compressed_pair_maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__28maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter___29($3 + 8 | 0, $3 + 20 | 0, $2);
  $2 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    if (($2 | 0) != 1) {
     HEAP32[16874] = 0;
     std____2____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20_____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20__28std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter____2c_20std____2__allocator_maxiOsc____29($0 + 12 | 0, $1, $3 + 24 | 0);
     $2 = HEAP32[16874];
     HEAP32[16874] = 0;
     if (($2 | 0) == 1) {
      break label$3
     }
     std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter______compressed_pair_28_29($1);
     $1 = $3 + 32 | 0;
     if ($1 >>> 0 < global$2 >>> 0) {
      __handle_stack_overflow()
     }
     global$0 = $1;
     return $0 | 0;
    }
    $0 = __cxa_find_matching_catch_2() | 0;
    getTempRet0() | 0;
    break label$2;
   }
   $0 = __cxa_find_matching_catch_2() | 0;
   getTempRet0() | 0;
   std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter______compressed_pair_28_29($1);
  }
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____shared_ptr_pointer_maxiIndex__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiIndex__20___val_deleter_2c_20std____2__allocator_maxiIndex__20______shared_ptr_pointer_28_29($0) {
  $0 = $0 | 0;
  HEAP32[$0 >> 2] = 25496;
  std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter______compressed_pair_28_29($0 + 12 | 0);
  return $0 | 0;
 }
 
 function std____2____shared_ptr_pointer_maxiIndex__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiIndex__20___val_deleter_2c_20std____2__allocator_maxiIndex__20______shared_ptr_pointer_28_29_1($0) {
  $0 = $0 | 0;
  dlfree(std____2____shared_ptr_pointer_maxiIndex__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiIndex__20___val_deleter_2c_20std____2__allocator_maxiIndex__20______shared_ptr_pointer_28_29($0));
 }
 
 function std____2____shared_ptr_pointer_maxiIndex__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiIndex__20___val_deleter_2c_20std____2__allocator_maxiIndex__20_____on_zero_shared_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $0 = $0 + 12 | 0;
  $1 = std____2____compressed_pair__IO_FILE__2c_20int_20_28__29_28_IO_FILE__29___second_28_29($0);
  $2 = HEAP32[$0 >> 2];
  HEAP32[16874] = 0;
  __invoke_void___22class_std____2__vector_13_22__i32(1201, $1 | 0, $2 | 0);
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($1 | 0) != 1) {
   emscripten__val___val_28_29(std____2____compressed_pair__IO_FILE__2c_20int_20_28__29_28_IO_FILE__29___second_28_29($0));
   return;
  }
  $0 = __cxa_find_matching_catch_3(0) | 0;
  getTempRet0() | 0;
  __clang_call_terminate($0);
  abort();
 }
 
 function std____2____shared_ptr_pointer_maxiIndex__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiIndex__20___val_deleter_2c_20std____2__allocator_maxiIndex__20_____get_deleter_28std__type_info_20const__29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  if (std__type_info__operator___28std__type_info_20const__29_20const($1, 25740)) {
   $0 = std____2____compressed_pair__IO_FILE__2c_20int_20_28__29_28_IO_FILE__29___second_28_29($0 + 12 | 0)
  } else {
   $0 = 0
  }
  return $0 | 0;
 }
 
 function std____2__shared_ptr_maxiIndex__20std____2__shared_ptr_maxiIndex___make_shared___28_29($0) {
  var $1 = 0, $2 = 0, $3 = 0;
  $2 = global$0 - 48 | 0;
  $1 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  $1 = $2 + 40 | 0;
  $1 = std____2__unique_ptr_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20___unique_ptr_true_2c_20void__28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20__2c_20true_____good_rval_ref_type_29($2 + 24 | 0, operator_20new_28unsigned_20long_29(40), std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20_____allocator_destructor_28std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20___2c_20unsigned_20long_29($2 + 16 | 0, $1, 1));
  $3 = HEAP32[$1 >> 2];
  HEAP32[16874] = 0;
  __invoke_i1___22class_std____2__basic_ifstream_22_(1204, $3 | 0) | 0;
  $3 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($3 | 0) != 1) {
   $0 = std____2__shared_ptr_maxiOsc___shared_ptr_28_29($0);
   HEAP32[$0 >> 2] = std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___get_28_29(HEAP32[$1 >> 2]);
   HEAP32[$0 + 4 >> 2] = std____2__unique_ptr__IO_FILE_2c_20int_20_28__29_28_IO_FILE__29___release_28_29($1);
   $0 = HEAP32[$0 >> 2];
   HEAP32[$2 + 4 >> 2] = $0;
   HEAP32[$2 >> 2] = $0;
   std____2__unique_ptr_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20___reset_28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___29($1);
   $0 = $2 + 48 | 0;
   if ($0 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $0;
   return;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__unique_ptr_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20___reset_28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___29($1);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____shared_ptr_emplace_maxiIndex_2c_20std____2__allocator_maxiIndex__20_____shared_ptr_emplace_28std____2__allocator_maxiIndex__29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  std____2____shared_weak_count____shared_weak_count_28long_29($0);
  HEAP32[$0 >> 2] = 25804;
  HEAP32[16874] = 0;
  std____2____compressed_pair_std____2__allocator_maxiIndex__2c_20maxiIndex_____compressed_pair_std____2__allocator_maxiIndex__2c_20true__28std____2__allocator_maxiIndex____29($0 + 16 | 0, $1 + 8 | 0);
  $2 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($2 | 0) != 1) {
   $1 = $1 + 16 | 0;
   if ($1 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $1;
   return $0 | 0;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____compressed_pair_std____2__allocator_maxiIndex__2c_20maxiIndex_____compressed_pair_std____2__allocator_maxiIndex__2c_20true__28std____2__allocator_maxiIndex____29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  std____2____compressed_pair_elem_maxiIndex_2c_201_2c_20false_____compressed_pair_elem_28_29($0);
  return $0 | 0;
 }
 
 function std____2____compressed_pair_elem_maxiIndex_2c_201_2c_20false_____compressed_pair_elem_28_29($0) {
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP32[$0 + 20 >> 2] = 0;
  HEAP32[$0 + 8 >> 2] = 0;
  HEAP32[$0 + 12 >> 2] = 0;
  maxiTrigger__maxiTrigger_28_29($0);
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP32[$0 + 20 >> 2] = 0;
 }
 
 function std____2__shared_ptr_maxiRatioSeq___shared_ptr_maxiRatioSeq_2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiRatioSeq__20___val_deleter__28maxiRatioSeq__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiRatioSeq__20___val_deleter_2c_20std____2__enable_if_is_convertible_maxiRatioSeq__2c_20maxiRatioSeq____value_2c_20std____2__shared_ptr_maxiRatioSeq_____nat___type_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0;
  $3 = global$0 - 32 | 0;
  $4 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  HEAP32[$0 >> 2] = $1;
  HEAP32[16874] = 0;
  $4 = __invoke_i1___22class_std____2__basic_ifstream_22_(930, 20) | 0;
  $5 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      if (($5 | 0) != 1) {
       HEAP32[16874] = 0;
       $5 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1207, $3 + 24 | 0, $2 | 0) | 0;
       $6 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($6 | 0) == 1) {
        break label$5
       }
       HEAP32[16874] = 0;
       __invoke___22class_std____2__basic_istream_22____22class_std____2__basic_istream_22__i8__i32(1208, $4 | 0, $1 | 0, $5 | 0) | 0;
       $6 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($6 | 0) == 1) {
        break label$4
       }
       HEAP32[$0 + 4 >> 2] = $4;
       emscripten__val___val_28_29($5);
       HEAP32[$3 + 4 >> 2] = $1;
       HEAP32[$3 >> 2] = $1;
       $1 = $3 + 32 | 0;
       if ($1 >>> 0 < global$2 >>> 0) {
        __handle_stack_overflow()
       }
       global$0 = $1;
       return $0 | 0;
      }
      $3 = __cxa_find_matching_catch_3(0) | 0;
      getTempRet0() | 0;
      break label$2;
     }
     $3 = __cxa_find_matching_catch_3(0) | 0;
     getTempRet0() | 0;
     break label$3;
    }
    $3 = __cxa_find_matching_catch_3(0) | 0;
    getTempRet0() | 0;
    emscripten__val___val_28_29($5);
   }
   dlfree($4);
  }
  __cxa_begin_catch($3 | 0) | 0;
  HEAP32[16874] = 0;
  __invoke_void___22class_std____2__vector_13_22__i32(1209, $2 | 0, $1 | 0);
  $0 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$8 : {
   label$9 : {
    if (($0 | 0) != 1) {
     HEAP32[16874] = 0;
     __invoke_void(934);
     $0 = HEAP32[16874];
     HEAP32[16874] = 0;
     if (($0 | 0) != 1) {
      break label$9
     }
    }
    $0 = __cxa_find_matching_catch_2() | 0;
    getTempRet0() | 0;
    HEAP32[16874] = 0;
    __invoke_void(23);
    $1 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($1 | 0) != 1) {
     break label$8
    }
    $0 = __cxa_find_matching_catch_3(0) | 0;
    getTempRet0() | 0;
    __clang_call_terminate($0);
   }
   abort();
  }
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____shared_ptr_pointer_maxiRatioSeq__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiRatioSeq__20___val_deleter_2c_20std____2__allocator_maxiRatioSeq__20_____shared_ptr_pointer_28maxiRatioSeq__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiRatioSeq__20___val_deleter_2c_20std____2__allocator_maxiRatioSeq__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0;
  $3 = global$0 - 32 | 0;
  $4 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  HEAP32[$3 + 20 >> 2] = $1;
  std____2____shared_weak_count____shared_weak_count_28long_29($0);
  HEAP32[$0 >> 2] = 26024;
  HEAP32[16874] = 0;
  $1 = std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_____compressed_pair_maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__28maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter___29($3 + 8 | 0, $3 + 20 | 0, $2);
  $2 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    if (($2 | 0) != 1) {
     HEAP32[16874] = 0;
     std____2____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20_____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20__28std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter____2c_20std____2__allocator_maxiOsc____29($0 + 12 | 0, $1, $3 + 24 | 0);
     $2 = HEAP32[16874];
     HEAP32[16874] = 0;
     if (($2 | 0) == 1) {
      break label$3
     }
     std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter______compressed_pair_28_29($1);
     $1 = $3 + 32 | 0;
     if ($1 >>> 0 < global$2 >>> 0) {
      __handle_stack_overflow()
     }
     global$0 = $1;
     return $0 | 0;
    }
    $0 = __cxa_find_matching_catch_2() | 0;
    getTempRet0() | 0;
    break label$2;
   }
   $0 = __cxa_find_matching_catch_2() | 0;
   getTempRet0() | 0;
   std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter______compressed_pair_28_29($1);
  }
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____shared_ptr_pointer_maxiRatioSeq__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiRatioSeq__20___val_deleter_2c_20std____2__allocator_maxiRatioSeq__20______shared_ptr_pointer_28_29($0) {
  $0 = $0 | 0;
  HEAP32[$0 >> 2] = 26024;
  std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter______compressed_pair_28_29($0 + 12 | 0);
  return $0 | 0;
 }
 
 function std____2____shared_ptr_pointer_maxiRatioSeq__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiRatioSeq__20___val_deleter_2c_20std____2__allocator_maxiRatioSeq__20______shared_ptr_pointer_28_29_1($0) {
  $0 = $0 | 0;
  dlfree(std____2____shared_ptr_pointer_maxiRatioSeq__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiRatioSeq__20___val_deleter_2c_20std____2__allocator_maxiRatioSeq__20______shared_ptr_pointer_28_29($0));
 }
 
 function std____2____shared_ptr_pointer_maxiRatioSeq__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiRatioSeq__20___val_deleter_2c_20std____2__allocator_maxiRatioSeq__20_____on_zero_shared_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $0 = $0 + 12 | 0;
  $1 = std____2____compressed_pair__IO_FILE__2c_20int_20_28__29_28_IO_FILE__29___second_28_29($0);
  $2 = HEAP32[$0 >> 2];
  HEAP32[16874] = 0;
  __invoke_void___22class_std____2__vector_13_22__i32(1209, $1 | 0, $2 | 0);
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($1 | 0) != 1) {
   emscripten__val___val_28_29(std____2____compressed_pair__IO_FILE__2c_20int_20_28__29_28_IO_FILE__29___second_28_29($0));
   return;
  }
  $0 = __cxa_find_matching_catch_3(0) | 0;
  getTempRet0() | 0;
  __clang_call_terminate($0);
  abort();
 }
 
 function std____2____shared_ptr_pointer_maxiRatioSeq__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiRatioSeq__20___val_deleter_2c_20std____2__allocator_maxiRatioSeq__20_____get_deleter_28std__type_info_20const__29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  if (std__type_info__operator___28std__type_info_20const__29_20const($1, 26276)) {
   $0 = std____2____compressed_pair__IO_FILE__2c_20int_20_28__29_28_IO_FILE__29___second_28_29($0 + 12 | 0)
  } else {
   $0 = 0
  }
  return $0 | 0;
 }
 
 function std____2__shared_ptr_maxiRatioSeq__20std____2__shared_ptr_maxiRatioSeq___make_shared___28_29($0) {
  var $1 = 0, $2 = 0, $3 = 0;
  $2 = global$0 - 48 | 0;
  $1 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  $1 = $2 + 40 | 0;
  $1 = std____2__unique_ptr_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20___unique_ptr_true_2c_20void__28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20__2c_20true_____good_rval_ref_type_29($2 + 24 | 0, operator_20new_28unsigned_20long_29(32), std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20_____allocator_destructor_28std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20___2c_20unsigned_20long_29($2 + 16 | 0, $1, 1));
  $3 = HEAP32[$1 >> 2];
  HEAP32[16874] = 0;
  __invoke_i1___22class_std____2__basic_ifstream_22_(1212, $3 | 0) | 0;
  $3 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($3 | 0) != 1) {
   $0 = std____2__shared_ptr_maxiOsc___shared_ptr_28_29($0);
   HEAP32[$0 >> 2] = std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___get_28_29(HEAP32[$1 >> 2]);
   HEAP32[$0 + 4 >> 2] = std____2__unique_ptr__IO_FILE_2c_20int_20_28__29_28_IO_FILE__29___release_28_29($1);
   $0 = HEAP32[$0 >> 2];
   HEAP32[$2 + 4 >> 2] = $0;
   HEAP32[$2 >> 2] = $0;
   std____2__unique_ptr_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20___reset_28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___29($1);
   $0 = $2 + 48 | 0;
   if ($0 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $0;
   return;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__unique_ptr_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20___reset_28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___29($1);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____shared_ptr_emplace_maxiRatioSeq_2c_20std____2__allocator_maxiRatioSeq__20_____shared_ptr_emplace_28std____2__allocator_maxiRatioSeq__29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  std____2____shared_weak_count____shared_weak_count_28long_29($0);
  HEAP32[$0 >> 2] = 26344;
  HEAP32[16874] = 0;
  std____2____compressed_pair_std____2__allocator_maxiRatioSeq__2c_20maxiRatioSeq_____compressed_pair_std____2__allocator_maxiRatioSeq__2c_20true__28std____2__allocator_maxiRatioSeq____29($0 + 16 | 0, $1 + 8 | 0);
  $2 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($2 | 0) != 1) {
   $1 = $1 + 16 | 0;
   if ($1 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $1;
   return $0 | 0;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____compressed_pair_std____2__allocator_maxiRatioSeq__2c_20maxiRatioSeq_____compressed_pair_std____2__allocator_maxiRatioSeq__2c_20true__28std____2__allocator_maxiRatioSeq____29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$0 + 8 >> 2] = 0;
  HEAP32[$0 + 12 >> 2] = 0;
  HEAP32[$0 + 8 >> 2] = 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  return $0 | 0;
 }
 
 function emscripten__internal__MethodInvoker_double_20_28maxiRatioSeq____29_28double_2c_20std____2__vector_double_2c_20std____2__allocator_double__20__29_2c_20double_2c_20maxiRatioSeq__2c_20double_2c_20std____2__vector_double_2c_20std____2__allocator_double__20__20___invoke_28double_20_28maxiRatioSeq____20const__29_28double_2c_20std____2__vector_double_2c_20std____2__allocator_double__20__29_2c_20maxiRatioSeq__2c_20double_2c_20std____2__vector_double_2c_20std____2__allocator_double__20___29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = +$2;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0;
  $4 = global$0 - 32 | 0;
  $5 = $4;
  if ($4 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $5;
  $5 = HEAP32[$0 >> 2];
  $0 = HEAP32[$0 + 4 >> 2];
  $1 = ($0 >> 1) + $1 | 0;
  $5 = $0 & 1 ? HEAP32[$5 + HEAP32[$1 >> 2] >> 2] : $5;
  $0 = std____2__vector_double_2c_20std____2__allocator_double__20___vector_28std____2__vector_double_2c_20std____2__allocator_double__20__20const__29($4 + 8 | 0, $3);
  HEAP32[16874] = 0;
  $2 = +__invoke_double__class_maxiRatioSeq__double___22class_std____2__vector_22_($5 | 0, $1 | 0, +$2, $0 | 0);
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($1 | 0) != 1) {
   HEAPF64[$4 + 24 >> 3] = $2;
   $2 = HEAPF64[$4 + 24 >> 3];
   std____2__vector_double_2c_20std____2__allocator_double__20____vector_28_29($0);
   $0 = $4 + 32 | 0;
   if ($0 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $0;
   return +$2;
  }
  $1 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__vector_double_2c_20std____2__allocator_double__20____vector_28_29($0);
  __resumeException($1 | 0);
  abort();
 }
 
 function emscripten__internal__MethodInvoker_double_20_28maxiRatioSeq____29_28double_2c_20std____2__vector_double_2c_20std____2__allocator_double__20__2c_20std____2__vector_double_2c_20std____2__allocator_double__20__29_2c_20double_2c_20maxiRatioSeq__2c_20double_2c_20std____2__vector_double_2c_20std____2__allocator_double__20__2c_20std____2__vector_double_2c_20std____2__allocator_double__20__20___invoke_28double_20_28maxiRatioSeq____20const__29_28double_2c_20std____2__vector_double_2c_20std____2__allocator_double__20__2c_20std____2__vector_double_2c_20std____2__allocator_double__20__29_2c_20maxiRatioSeq__2c_20double_2c_20std____2__vector_double_2c_20std____2__allocator_double__20___2c_20std____2__vector_double_2c_20std____2__allocator_double__20___29($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = +$2;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0, $7 = 0;
  $5 = global$0 - 48 | 0;
  $6 = $5;
  if ($5 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $6;
  $6 = HEAP32[$0 >> 2];
  $0 = HEAP32[$0 + 4 >> 2];
  $7 = ($0 >> 1) + $1 | 0;
  $0 = $0 & 1 ? HEAP32[$6 + HEAP32[$7 >> 2] >> 2] : $6;
  $1 = std____2__vector_double_2c_20std____2__allocator_double__20___vector_28std____2__vector_double_2c_20std____2__allocator_double__20__20const__29($5 + 24 | 0, $3);
  HEAP32[16874] = 0;
  $3 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1154, $5 + 8 | 0, $4 | 0) | 0;
  $4 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$3 : {
   label$4 : {
    if (($4 | 0) != 1) {
     HEAP32[16874] = 0;
     $2 = +__invoke_double__class_maxiRatioSeq__double___22class_std____2__vector_22____22class_std____2__vector_22_($0 | 0, $7 | 0, +$2, $1 | 0, $3 | 0);
     $0 = HEAP32[16874];
     HEAP32[16874] = 0;
     if (($0 | 0) == 1) {
      break label$4
     }
     HEAPF64[$5 + 40 >> 3] = $2;
     $2 = HEAPF64[$5 + 40 >> 3];
     std____2__vector_double_2c_20std____2__allocator_double__20____vector_28_29($3);
     std____2__vector_double_2c_20std____2__allocator_double__20____vector_28_29($1);
     $0 = $5 + 48 | 0;
     if ($0 >>> 0 < global$2 >>> 0) {
      __handle_stack_overflow()
     }
     global$0 = $0;
     return +$2;
    }
    $0 = __cxa_find_matching_catch_2() | 0;
    getTempRet0() | 0;
    break label$3;
   }
   $0 = __cxa_find_matching_catch_2() | 0;
   getTempRet0() | 0;
   std____2__vector_double_2c_20std____2__allocator_double__20____vector_28_29($3);
  }
  std____2__vector_double_2c_20std____2__allocator_double__20____vector_28_29($1);
  __resumeException($0 | 0);
  abort();
 }
 
 function maxiReverbBase___maxiReverbBase_28_29($0) {
  var $1 = 0, $2 = 0;
  maxiReverbFilters___maxiReverbFilters_28_29($0 + 27752 | 0);
  $1 = $0 + 18496 | 0;
  $2 = $0 + 9280 | 0;
  while (1) {
   $1 = maxiReverbFilters___maxiReverbFilters_28_29($1 + -288 | 0);
   if (($2 | 0) != ($1 | 0)) {
    continue
   }
   break;
  };
  $1 = $0 + 9280 | 0;
  $0 = $0 - -64 | 0;
  while (1) {
   $1 = maxiReverbFilters___maxiReverbFilters_28_29($1 + -288 | 0);
   if (($0 | 0) != ($1 | 0)) {
    continue
   }
   break;
  };
 }
 
 function maxiReverbFilters___maxiReverbFilters_28_29($0) {
  std____2__valarray_double____valarray_28_29($0);
  return $0;
 }
 
 function std____2__valarray_double____valarray_28_29($0) {
  var $1 = 0;
  $1 = std____2__vector_double_2c_20std____2__allocator_double__20___size_28_29_20const($0);
  HEAP32[16874] = 0;
  std____2__valarray_double_____clear_28unsigned_20long_29($0, $1);
  $0 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($0 | 0) != 1) {
   return
  }
  $0 = __cxa_find_matching_catch_3(0) | 0;
  getTempRet0() | 0;
  __clang_call_terminate($0);
  abort();
 }
 
 function std____2__valarray_double_____clear_28unsigned_20long_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $1 = HEAP32[$0 >> 2];
  if ($1) {
   $2 = HEAP32[$0 + 4 >> 2];
   if (($2 | 0) != ($1 | 0)) {
    HEAP32[$0 + 4 >> 2] = ((($2 - $1 | 0) + -8 >>> 3 ^ -1) << 3) + $2
   }
   dlfree($1);
   HEAP32[$0 >> 2] = 0;
   HEAP32[$0 + 4 >> 2] = 0;
  }
 }
 
 function std____2__shared_ptr_maxiSatReverb___shared_ptr_maxiSatReverb_2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiSatReverb__20___val_deleter__28maxiSatReverb__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiSatReverb__20___val_deleter_2c_20std____2__enable_if_is_convertible_maxiSatReverb__2c_20maxiSatReverb____value_2c_20std____2__shared_ptr_maxiSatReverb_____nat___type_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0;
  $3 = global$0 - 32 | 0;
  $4 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  HEAP32[$0 >> 2] = $1;
  HEAP32[16874] = 0;
  $4 = __invoke_i1___22class_std____2__basic_ifstream_22_(930, 20) | 0;
  $5 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      if (($5 | 0) != 1) {
       HEAP32[16874] = 0;
       $5 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1216, $3 + 24 | 0, $2 | 0) | 0;
       $6 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($6 | 0) == 1) {
        break label$5
       }
       HEAP32[16874] = 0;
       __invoke___22class_std____2__basic_istream_22____22class_std____2__basic_istream_22__i8__i32(1217, $4 | 0, $1 | 0, $5 | 0) | 0;
       $6 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($6 | 0) == 1) {
        break label$4
       }
       HEAP32[$0 + 4 >> 2] = $4;
       emscripten__val___val_28_29($5);
       HEAP32[$3 + 4 >> 2] = $1;
       HEAP32[$3 >> 2] = $1;
       $1 = $3 + 32 | 0;
       if ($1 >>> 0 < global$2 >>> 0) {
        __handle_stack_overflow()
       }
       global$0 = $1;
       return $0 | 0;
      }
      $3 = __cxa_find_matching_catch_3(0) | 0;
      getTempRet0() | 0;
      break label$2;
     }
     $3 = __cxa_find_matching_catch_3(0) | 0;
     getTempRet0() | 0;
     break label$3;
    }
    $3 = __cxa_find_matching_catch_3(0) | 0;
    getTempRet0() | 0;
    emscripten__val___val_28_29($5);
   }
   dlfree($4);
  }
  __cxa_begin_catch($3 | 0) | 0;
  HEAP32[16874] = 0;
  __invoke_void___22class_std____2__vector_13_22__i32(1218, $2 | 0, $1 | 0);
  $0 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$8 : {
   label$9 : {
    if (($0 | 0) != 1) {
     HEAP32[16874] = 0;
     __invoke_void(934);
     $0 = HEAP32[16874];
     HEAP32[16874] = 0;
     if (($0 | 0) != 1) {
      break label$9
     }
    }
    $0 = __cxa_find_matching_catch_2() | 0;
    getTempRet0() | 0;
    HEAP32[16874] = 0;
    __invoke_void(23);
    $1 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($1 | 0) != 1) {
     break label$8
    }
    $0 = __cxa_find_matching_catch_3(0) | 0;
    getTempRet0() | 0;
    __clang_call_terminate($0);
   }
   abort();
  }
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____shared_ptr_pointer_maxiSatReverb__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiSatReverb__20___val_deleter_2c_20std____2__allocator_maxiSatReverb__20_____shared_ptr_pointer_28maxiSatReverb__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiSatReverb__20___val_deleter_2c_20std____2__allocator_maxiSatReverb__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0;
  $3 = global$0 - 32 | 0;
  $4 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  HEAP32[$3 + 20 >> 2] = $1;
  std____2____shared_weak_count____shared_weak_count_28long_29($0);
  HEAP32[$0 >> 2] = 26636;
  HEAP32[16874] = 0;
  $1 = std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_____compressed_pair_maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__28maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter___29($3 + 8 | 0, $3 + 20 | 0, $2);
  $2 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    if (($2 | 0) != 1) {
     HEAP32[16874] = 0;
     std____2____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20_____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20__28std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter____2c_20std____2__allocator_maxiOsc____29($0 + 12 | 0, $1, $3 + 24 | 0);
     $2 = HEAP32[16874];
     HEAP32[16874] = 0;
     if (($2 | 0) == 1) {
      break label$3
     }
     std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter______compressed_pair_28_29($1);
     $1 = $3 + 32 | 0;
     if ($1 >>> 0 < global$2 >>> 0) {
      __handle_stack_overflow()
     }
     global$0 = $1;
     return $0 | 0;
    }
    $0 = __cxa_find_matching_catch_2() | 0;
    getTempRet0() | 0;
    break label$2;
   }
   $0 = __cxa_find_matching_catch_2() | 0;
   getTempRet0() | 0;
   std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter______compressed_pair_28_29($1);
  }
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____shared_ptr_pointer_maxiSatReverb__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiSatReverb__20___val_deleter_2c_20std____2__allocator_maxiSatReverb__20______shared_ptr_pointer_28_29($0) {
  $0 = $0 | 0;
  HEAP32[$0 >> 2] = 26636;
  std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter______compressed_pair_28_29($0 + 12 | 0);
  return $0 | 0;
 }
 
 function std____2____shared_ptr_pointer_maxiSatReverb__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiSatReverb__20___val_deleter_2c_20std____2__allocator_maxiSatReverb__20______shared_ptr_pointer_28_29_1($0) {
  $0 = $0 | 0;
  dlfree(std____2____shared_ptr_pointer_maxiSatReverb__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiSatReverb__20___val_deleter_2c_20std____2__allocator_maxiSatReverb__20______shared_ptr_pointer_28_29($0));
 }
 
 function std____2____shared_ptr_pointer_maxiSatReverb__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiSatReverb__20___val_deleter_2c_20std____2__allocator_maxiSatReverb__20_____on_zero_shared_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $0 = $0 + 12 | 0;
  $1 = std____2____compressed_pair__IO_FILE__2c_20int_20_28__29_28_IO_FILE__29___second_28_29($0);
  $2 = HEAP32[$0 >> 2];
  HEAP32[16874] = 0;
  __invoke_void___22class_std____2__vector_13_22__i32(1218, $1 | 0, $2 | 0);
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($1 | 0) != 1) {
   emscripten__val___val_28_29(std____2____compressed_pair__IO_FILE__2c_20int_20_28__29_28_IO_FILE__29___second_28_29($0));
   return;
  }
  $0 = __cxa_find_matching_catch_3(0) | 0;
  getTempRet0() | 0;
  __clang_call_terminate($0);
  abort();
 }
 
 function std____2____shared_ptr_pointer_maxiSatReverb__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiSatReverb__20___val_deleter_2c_20std____2__allocator_maxiSatReverb__20_____get_deleter_28std__type_info_20const__29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  if (std__type_info__operator___28std__type_info_20const__29_20const($1, 26888)) {
   $0 = std____2____compressed_pair__IO_FILE__2c_20int_20_28__29_28_IO_FILE__29___second_28_29($0 + 12 | 0)
  } else {
   $0 = 0
  }
  return $0 | 0;
 }
 
 function std____2__shared_ptr_maxiSatReverb__20std____2__shared_ptr_maxiSatReverb___make_shared___28_29($0) {
  var $1 = 0, $2 = 0, $3 = 0;
  $2 = global$0 - 48 | 0;
  $1 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  $1 = $2 + 40 | 0;
  $1 = std____2__unique_ptr_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20___unique_ptr_true_2c_20void__28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20__2c_20true_____good_rval_ref_type_29($2 + 24 | 0, operator_20new_28unsigned_20long_29(28576), std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20_____allocator_destructor_28std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20___2c_20unsigned_20long_29($2 + 16 | 0, $1, 1));
  $3 = HEAP32[$1 >> 2];
  HEAP32[16874] = 0;
  __invoke_i1___22class_std____2__basic_ifstream_22_(1221, $3 | 0) | 0;
  $3 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($3 | 0) != 1) {
   $0 = std____2__shared_ptr_maxiOsc___shared_ptr_28_29($0);
   HEAP32[$0 >> 2] = std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___get_28_29(HEAP32[$1 >> 2]);
   HEAP32[$0 + 4 >> 2] = std____2__unique_ptr__IO_FILE_2c_20int_20_28__29_28_IO_FILE__29___release_28_29($1);
   $0 = HEAP32[$0 >> 2];
   HEAP32[$2 + 4 >> 2] = $0;
   HEAP32[$2 >> 2] = $0;
   std____2__unique_ptr_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20___reset_28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___29($1);
   $0 = $2 + 48 | 0;
   if ($0 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $0;
   return;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__unique_ptr_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20___reset_28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___29($1);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____shared_ptr_emplace_maxiSatReverb_2c_20std____2__allocator_maxiSatReverb__20_____shared_ptr_emplace_28std____2__allocator_maxiSatReverb__29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  std____2____shared_weak_count____shared_weak_count_28long_29($0);
  HEAP32[$0 >> 2] = 26956;
  HEAP32[16874] = 0;
  __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1223, $0 + 16 | 0, $1 + 8 | 0) | 0;
  $2 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($2 | 0) != 1) {
   $1 = $1 + 16 | 0;
   if ($1 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $1;
   return $0 | 0;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____compressed_pair_std____2__allocator_maxiSatReverb__2c_20maxiSatReverb_____compressed_pair_std____2__allocator_maxiSatReverb__2c_20true__28std____2__allocator_maxiSatReverb____29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  maxiSatReverb__maxiSatReverb_28_29($0);
  return $0 | 0;
 }
 
 function std____2____shared_ptr_emplace_maxiSatReverb_2c_20std____2__allocator_maxiSatReverb__20______shared_ptr_emplace_28_29($0) {
  $0 = $0 | 0;
  HEAP32[$0 >> 2] = 26956;
  maxiReverbBase___maxiReverbBase_28_29($0 + 16 | 0);
  return $0 | 0;
 }
 
 function std____2____shared_ptr_emplace_maxiSatReverb_2c_20std____2__allocator_maxiSatReverb__20______shared_ptr_emplace_28_29_1($0) {
  $0 = $0 | 0;
  dlfree(std____2____shared_ptr_emplace_maxiSatReverb_2c_20std____2__allocator_maxiSatReverb__20______shared_ptr_emplace_28_29($0));
 }
 
 function std____2____shared_ptr_emplace_maxiSatReverb_2c_20std____2__allocator_maxiSatReverb__20_____on_zero_shared_28_29($0) {
  $0 = $0 | 0;
  maxiReverbBase___maxiReverbBase_28_29($0 + 16 | 0);
 }
 
 function std____2__shared_ptr_maxiFreeVerb___shared_ptr_maxiFreeVerb_2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiFreeVerb__20___val_deleter__28maxiFreeVerb__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiFreeVerb__20___val_deleter_2c_20std____2__enable_if_is_convertible_maxiFreeVerb__2c_20maxiFreeVerb____value_2c_20std____2__shared_ptr_maxiFreeVerb_____nat___type_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0;
  $3 = global$0 - 32 | 0;
  $4 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  HEAP32[$0 >> 2] = $1;
  HEAP32[16874] = 0;
  $4 = __invoke_i1___22class_std____2__basic_ifstream_22_(930, 20) | 0;
  $5 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      if (($5 | 0) != 1) {
       HEAP32[16874] = 0;
       $5 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1224, $3 + 24 | 0, $2 | 0) | 0;
       $6 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($6 | 0) == 1) {
        break label$5
       }
       HEAP32[16874] = 0;
       __invoke___22class_std____2__basic_istream_22____22class_std____2__basic_istream_22__i8__i32(1225, $4 | 0, $1 | 0, $5 | 0) | 0;
       $6 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($6 | 0) == 1) {
        break label$4
       }
       HEAP32[$0 + 4 >> 2] = $4;
       emscripten__val___val_28_29($5);
       HEAP32[$3 + 4 >> 2] = $1;
       HEAP32[$3 >> 2] = $1;
       $1 = $3 + 32 | 0;
       if ($1 >>> 0 < global$2 >>> 0) {
        __handle_stack_overflow()
       }
       global$0 = $1;
       return $0 | 0;
      }
      $3 = __cxa_find_matching_catch_3(0) | 0;
      getTempRet0() | 0;
      break label$2;
     }
     $3 = __cxa_find_matching_catch_3(0) | 0;
     getTempRet0() | 0;
     break label$3;
    }
    $3 = __cxa_find_matching_catch_3(0) | 0;
    getTempRet0() | 0;
    emscripten__val___val_28_29($5);
   }
   dlfree($4);
  }
  __cxa_begin_catch($3 | 0) | 0;
  HEAP32[16874] = 0;
  __invoke_void___22class_std____2__vector_13_22__i32(1226, $2 | 0, $1 | 0);
  $0 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$8 : {
   label$9 : {
    if (($0 | 0) != 1) {
     HEAP32[16874] = 0;
     __invoke_void(934);
     $0 = HEAP32[16874];
     HEAP32[16874] = 0;
     if (($0 | 0) != 1) {
      break label$9
     }
    }
    $0 = __cxa_find_matching_catch_2() | 0;
    getTempRet0() | 0;
    HEAP32[16874] = 0;
    __invoke_void(23);
    $1 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($1 | 0) != 1) {
     break label$8
    }
    $0 = __cxa_find_matching_catch_3(0) | 0;
    getTempRet0() | 0;
    __clang_call_terminate($0);
   }
   abort();
  }
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____shared_ptr_pointer_maxiFreeVerb__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiFreeVerb__20___val_deleter_2c_20std____2__allocator_maxiFreeVerb__20_____shared_ptr_pointer_28maxiFreeVerb__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiFreeVerb__20___val_deleter_2c_20std____2__allocator_maxiFreeVerb__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0;
  $3 = global$0 - 32 | 0;
  $4 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  HEAP32[$3 + 20 >> 2] = $1;
  std____2____shared_weak_count____shared_weak_count_28long_29($0);
  HEAP32[$0 >> 2] = 27184;
  HEAP32[16874] = 0;
  $1 = std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_____compressed_pair_maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__28maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter___29($3 + 8 | 0, $3 + 20 | 0, $2);
  $2 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    if (($2 | 0) != 1) {
     HEAP32[16874] = 0;
     std____2____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20_____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20__28std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter____2c_20std____2__allocator_maxiOsc____29($0 + 12 | 0, $1, $3 + 24 | 0);
     $2 = HEAP32[16874];
     HEAP32[16874] = 0;
     if (($2 | 0) == 1) {
      break label$3
     }
     std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter______compressed_pair_28_29($1);
     $1 = $3 + 32 | 0;
     if ($1 >>> 0 < global$2 >>> 0) {
      __handle_stack_overflow()
     }
     global$0 = $1;
     return $0 | 0;
    }
    $0 = __cxa_find_matching_catch_2() | 0;
    getTempRet0() | 0;
    break label$2;
   }
   $0 = __cxa_find_matching_catch_2() | 0;
   getTempRet0() | 0;
   std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter______compressed_pair_28_29($1);
  }
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____shared_ptr_pointer_maxiFreeVerb__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiFreeVerb__20___val_deleter_2c_20std____2__allocator_maxiFreeVerb__20______shared_ptr_pointer_28_29($0) {
  $0 = $0 | 0;
  HEAP32[$0 >> 2] = 27184;
  std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter______compressed_pair_28_29($0 + 12 | 0);
  return $0 | 0;
 }
 
 function std____2____shared_ptr_pointer_maxiFreeVerb__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiFreeVerb__20___val_deleter_2c_20std____2__allocator_maxiFreeVerb__20______shared_ptr_pointer_28_29_1($0) {
  $0 = $0 | 0;
  dlfree(std____2____shared_ptr_pointer_maxiFreeVerb__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiFreeVerb__20___val_deleter_2c_20std____2__allocator_maxiFreeVerb__20______shared_ptr_pointer_28_29($0));
 }
 
 function std____2____shared_ptr_pointer_maxiFreeVerb__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiFreeVerb__20___val_deleter_2c_20std____2__allocator_maxiFreeVerb__20_____on_zero_shared_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $0 = $0 + 12 | 0;
  $1 = std____2____compressed_pair__IO_FILE__2c_20int_20_28__29_28_IO_FILE__29___second_28_29($0);
  $2 = HEAP32[$0 >> 2];
  HEAP32[16874] = 0;
  __invoke_void___22class_std____2__vector_13_22__i32(1226, $1 | 0, $2 | 0);
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($1 | 0) != 1) {
   emscripten__val___val_28_29(std____2____compressed_pair__IO_FILE__2c_20int_20_28__29_28_IO_FILE__29___second_28_29($0));
   return;
  }
  $0 = __cxa_find_matching_catch_3(0) | 0;
  getTempRet0() | 0;
  __clang_call_terminate($0);
  abort();
 }
 
 function std____2____shared_ptr_pointer_maxiFreeVerb__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiFreeVerb__20___val_deleter_2c_20std____2__allocator_maxiFreeVerb__20_____get_deleter_28std__type_info_20const__29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  if (std__type_info__operator___28std__type_info_20const__29_20const($1, 27436)) {
   $0 = std____2____compressed_pair__IO_FILE__2c_20int_20_28__29_28_IO_FILE__29___second_28_29($0 + 12 | 0)
  } else {
   $0 = 0
  }
  return $0 | 0;
 }
 
 function std____2__shared_ptr_maxiFreeVerb__20std____2__shared_ptr_maxiFreeVerb___make_shared___28_29($0) {
  var $1 = 0, $2 = 0, $3 = 0;
  $2 = global$0 - 48 | 0;
  $1 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  $1 = $2 + 40 | 0;
  $1 = std____2__unique_ptr_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20___unique_ptr_true_2c_20void__28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20__2c_20true_____good_rval_ref_type_29($2 + 24 | 0, operator_20new_28unsigned_20long_29(28576), std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20_____allocator_destructor_28std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20___2c_20unsigned_20long_29($2 + 16 | 0, $1, 1));
  $3 = HEAP32[$1 >> 2];
  HEAP32[16874] = 0;
  __invoke_i1___22class_std____2__basic_ifstream_22_(1229, $3 | 0) | 0;
  $3 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($3 | 0) != 1) {
   $0 = std____2__shared_ptr_maxiOsc___shared_ptr_28_29($0);
   HEAP32[$0 >> 2] = std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___get_28_29(HEAP32[$1 >> 2]);
   HEAP32[$0 + 4 >> 2] = std____2__unique_ptr__IO_FILE_2c_20int_20_28__29_28_IO_FILE__29___release_28_29($1);
   $0 = HEAP32[$0 >> 2];
   HEAP32[$2 + 4 >> 2] = $0;
   HEAP32[$2 >> 2] = $0;
   std____2__unique_ptr_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20___reset_28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___29($1);
   $0 = $2 + 48 | 0;
   if ($0 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $0;
   return;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__unique_ptr_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20___reset_28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___29($1);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____shared_ptr_emplace_maxiFreeVerb_2c_20std____2__allocator_maxiFreeVerb__20_____shared_ptr_emplace_28std____2__allocator_maxiFreeVerb__29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  std____2____shared_weak_count____shared_weak_count_28long_29($0);
  HEAP32[$0 >> 2] = 27504;
  HEAP32[16874] = 0;
  __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1231, $0 + 16 | 0, $1 + 8 | 0) | 0;
  $2 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($2 | 0) != 1) {
   $1 = $1 + 16 | 0;
   if ($1 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $1;
   return $0 | 0;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____compressed_pair_std____2__allocator_maxiFreeVerb__2c_20maxiFreeVerb_____compressed_pair_std____2__allocator_maxiFreeVerb__2c_20true__28std____2__allocator_maxiFreeVerb____29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  maxiFreeVerb__maxiFreeVerb_28_29($0);
  return $0 | 0;
 }
 
 function std____2____shared_ptr_emplace_maxiFreeVerb_2c_20std____2__allocator_maxiFreeVerb__20______shared_ptr_emplace_28_29($0) {
  $0 = $0 | 0;
  HEAP32[$0 >> 2] = 27504;
  maxiReverbBase___maxiReverbBase_28_29($0 + 16 | 0);
  return $0 | 0;
 }
 
 function std____2____shared_ptr_emplace_maxiFreeVerb_2c_20std____2__allocator_maxiFreeVerb__20______shared_ptr_emplace_28_29_1($0) {
  $0 = $0 | 0;
  dlfree(std____2____shared_ptr_emplace_maxiFreeVerb_2c_20std____2__allocator_maxiFreeVerb__20______shared_ptr_emplace_28_29($0));
 }
 
 function maxiClock__maxiClock_28_29($0) {
  maxiOsc__maxiOsc_28_29($0);
  HEAP32[$0 + 80 >> 2] = 1;
  HEAP32[$0 + 72 >> 2] = 0;
  HEAP32[$0 + 76 >> 2] = 1079902208;
  HEAP32[$0 + 48 >> 2] = 0;
  HEAP32[$0 + 52 >> 2] = 0;
  HEAP32[$0 + 56 >> 2] = 0;
  maxiClock__setTempo_28double_29($0, 120.0);
 }
 
 function maxiClock__setTempo_28double_29($0, $1) {
  $0 = $0 | 0;
  $1 = +$1;
  HEAPF64[$0 + 72 >> 3] = $1;
  HEAPF64[$0 + 64 >> 3] = $1 / 60.0 * +HEAP32[$0 + 80 >> 2];
 }
 
 function maxiClock__ticker_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0.0, $3 = 0;
  HEAP8[$0 + 84 | 0] = 0;
  $3 = $0;
  $2 = Math_floor(maxiOsc__phasor_28double_29($0, HEAPF64[$0 + 64 >> 3]));
  label$1 : {
   if (Math_abs($2) < 2147483648.0) {
    $1 = ~~$2;
    break label$1;
   }
   $1 = -2147483648;
  }
  HEAP32[$3 + 48 >> 2] = $1;
  if (HEAP32[$0 + 52 >> 2] != ($1 | 0)) {
   HEAP8[$0 + 84 | 0] = 1;
   HEAP32[$0 + 56 >> 2] = HEAP32[$0 + 56 >> 2] + 1;
  }
 }
 
 function maxiClock__setTicksPerBeat_28int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  HEAP32[$0 + 80 >> 2] = $1;
  maxiClock__setTempo_28double_29($0, HEAPF64[$0 + 72 >> 3]);
 }
 
 function maxiFFT__setup_28int_2c_20int_2c_20int_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0;
  $4 = global$0 - 16 | 0;
  $5 = $4;
  if ($4 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $5;
  fft__setup_28int_29($0 + 72 | 0, $1);
  HEAP32[$0 + 140 >> 2] = ($1 | 0) / 2;
  HEAP32[$0 + 132 >> 2] = $3 ? $3 : $1;
  HEAP32[$0 + 68 >> 2] = $1;
  HEAP32[$0 + 136 >> 2] = $2;
  HEAP32[$4 + 12 >> 2] = 0;
  std____2__vector_float_2c_20std____2__allocator_float__20___resize_28unsigned_20long_2c_20float_20const__29($0 + 36 | 0, $1, $4 + 12 | 0);
  $1 = HEAP32[$0 + 140 >> 2];
  HEAP32[$4 + 12 >> 2] = 0;
  std____2__vector_float_2c_20std____2__allocator_float__20___resize_28unsigned_20long_2c_20float_20const__29($0, $1, $4 + 12 | 0);
  $1 = HEAP32[$0 + 140 >> 2];
  HEAP32[$4 + 12 >> 2] = 0;
  std____2__vector_float_2c_20std____2__allocator_float__20___resize_28unsigned_20long_2c_20float_20const__29($0 + 24 | 0, $1, $4 + 12 | 0);
  $1 = HEAP32[$0 + 140 >> 2];
  HEAP32[$4 + 12 >> 2] = 0;
  std____2__vector_float_2c_20std____2__allocator_float__20___resize_28unsigned_20long_2c_20float_20const__29($0 + 12 | 0, $1, $4 + 12 | 0);
  HEAP8[$0 + 128 | 0] = 0;
  HEAP32[$0 + 60 >> 2] = HEAP32[$0 + 132 >> 2] - HEAP32[$0 + 136 >> 2];
  $1 = HEAP32[$0 + 68 >> 2];
  HEAP32[$4 + 12 >> 2] = 0;
  $2 = $0 + 48 | 0;
  std____2__vector_float_2c_20std____2__allocator_float__20___resize_28unsigned_20long_2c_20float_20const__29($2, $1, $4 + 12 | 0);
  fft__genWindow_28int_2c_20int_2c_20float__29(HEAP32[$0 + 132 >> 2], std____2__vector_int_2c_20std____2__allocator_int__20___operator_5b_5d_28unsigned_20long_29_20const($2, 0));
  HEAP32[$0 + 144 >> 2] = 1065353216;
  $0 = $4 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function maxiFFT__process_28float_2c_20maxiFFT__fftModes_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = Math_fround($1);
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
  $3 = HEAP32[$0 + 60 >> 2];
  HEAP32[$0 + 60 >> 2] = $3 + 1;
  $5 = $0 + 36 | 0;
  HEAPF32[std____2__vector_int_2c_20std____2__allocator_int__20___operator_5b_5d_28unsigned_20long_29_20const($5, $3) >> 2] = $1;
  $3 = HEAP32[$0 + 60 >> 2];
  $4 = HEAP32[$0 + 132 >> 2];
  HEAP8[$0 + 128 | 0] = ($3 | 0) == ($4 | 0);
  if (($3 | 0) == ($4 | 0)) {
   $3 = $0 + 72 | 0;
   $4 = std____2__vector_int_2c_20std____2__allocator_int__20___operator_5b_5d_28unsigned_20long_29_20const($5, 0);
   $6 = std____2__vector_int_2c_20std____2__allocator_int__20___operator_5b_5d_28unsigned_20long_29_20const($0 + 48 | 0, 0);
   label$2 : {
    if (($2 | 0) == 1) {
     $2 = std____2__vector_int_2c_20std____2__allocator_int__20___operator_5b_5d_28unsigned_20long_29_20const($0, 0);
     $7 = std____2__vector_int_2c_20std____2__allocator_int__20___operator_5b_5d_28unsigned_20long_29_20const($0 + 12 | 0, 0);
     fft__calcFFT_28int_2c_20float__2c_20float__29($3, $4, $6);
     fft__cartToPol_28float__2c_20float__29($3, $2, $7);
     break label$2;
    }
    fft__calcFFT_28int_2c_20float__2c_20float__29($3, $4, $6);
   }
   $3 = std____2__vector_int_2c_20std____2__allocator_int__20___operator_5b_5d_28unsigned_20long_29_20const($5, 0);
   $4 = std____2__vector_int_2c_20std____2__allocator_int__20___operator_5b_5d_28unsigned_20long_29_20const($5, 0);
   $2 = HEAP32[$0 + 136 >> 2];
   memcpy($3, $4 + ($2 << 2) | 0, HEAP32[$0 + 132 >> 2] - $2 << 2);
   HEAP32[$0 + 144 >> 2] = 1065353216;
   HEAP32[$0 + 60 >> 2] = HEAP32[$0 + 132 >> 2] - HEAP32[$0 + 136 >> 2];
  }
  return HEAPU8[$0 + 128 | 0];
 }
 
 function maxiFFT__magsToDB_28_29($0) {
  if (HEAPF32[$0 + 144 >> 2] != Math_fround(0.0)) {
   fft__convToDB_28float__2c_20float__29($0 + 72 | 0, std____2__vector_int_2c_20std____2__allocator_int__20___operator_5b_5d_28unsigned_20long_29_20const($0, 0), std____2__vector_int_2c_20std____2__allocator_int__20___operator_5b_5d_28unsigned_20long_29_20const($0 + 24 | 0, 0));
   HEAP32[$0 + 144 >> 2] = 0;
  }
  return $0 + 24 | 0;
 }
 
 function maxiFFT__spectralFlatness_28_29($0) {
  $0 = $0 | 0;
  var $1 = Math_fround(0), $2 = 0, $3 = Math_fround(0), $4 = 0, $5 = Math_fround(0);
  $4 = HEAP32[$0 + 140 >> 2];
  if (($4 | 0) >= 1) {
   while (1) {
    if (HEAPF32[std____2__vector_int_2c_20std____2__allocator_int__20___operator_5b_5d_28unsigned_20long_29_20const($0, $2) >> 2] != Math_fround(0.0)) {
     $5 = Math_fround($5 + logf(HEAPF32[std____2__vector_int_2c_20std____2__allocator_int__20___operator_5b_5d_28unsigned_20long_29_20const($0, $2) >> 2]))
    }
    $3 = Math_fround($3 + HEAPF32[std____2__vector_int_2c_20std____2__allocator_int__20___operator_5b_5d_28unsigned_20long_29_20const($0, $2) >> 2]);
    $2 = $2 + 1 | 0;
    $4 = HEAP32[$0 + 140 >> 2];
    if (($2 | 0) < ($4 | 0)) {
     continue
    }
    break;
   }
  }
  $1 = $3;
  $3 = Math_fround($4 | 0);
  $1 = Math_fround($1 / $3);
  if ($1 != Math_fround(0.0)) {
   $1 = Math_fround(expf(Math_fround($5 / $3)) / $1)
  } else {
   $1 = Math_fround(0.0)
  }
  return Math_fround($1);
 }
 
 function maxiFFT__spectralCentroid_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = Math_fround(0), $3 = Math_fround(0);
  if (HEAP32[$0 + 140 >> 2] >= 1) {
   while (1) {
    $3 = Math_fround($3 + Math_fround(Math_fround(Math_abs(HEAPF32[std____2__vector_int_2c_20std____2__allocator_int__20___operator_5b_5d_28unsigned_20long_29_20const($0, $1) >> 2])) * Math_fround($1 | 0)));
    $2 = Math_fround($2 + Math_fround(Math_abs(HEAPF32[std____2__vector_int_2c_20std____2__allocator_int__20___operator_5b_5d_28unsigned_20long_29_20const($0, $1) >> 2])));
    $1 = $1 + 1 | 0;
    if (($1 | 0) < HEAP32[$0 + 140 >> 2]) {
     continue
    }
    break;
   }
  }
  return Math_fround($2 != Math_fround(0.0) ? Math_fround(Math_fround($3 / $2) * Math_fround(Math_fround(HEAP32[12865]) / Math_fround(HEAP32[$0 + 68 >> 2]))) : Math_fround(0.0));
 }
 
 function maxiIFFT__setup_28int_2c_20int_2c_20int_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0;
  $4 = global$0 - 16 | 0;
  $5 = $4;
  if ($4 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $5;
  fft__setup_28int_29($0 + 60 | 0, $1);
  HEAP32[$0 + 44 >> 2] = $2;
  HEAP32[$0 + 40 >> 2] = ($1 | 0) / 2;
  HEAP32[$0 + 36 >> 2] = $3 ? $3 : $1;
  HEAP32[$0 + 56 >> 2] = $1;
  HEAP32[$4 + 12 >> 2] = 0;
  std____2__vector_float_2c_20std____2__allocator_float__20___resize_28unsigned_20long_2c_20float_20const__29($0 + 12 | 0, $1, $4 + 12 | 0);
  $1 = HEAP32[$0 + 56 >> 2];
  HEAP32[$4 + 8 >> 2] = 0;
  std____2__vector_float_2c_20std____2__allocator_float__20___resize_28unsigned_20long_2c_20float_20const__29($0, $1, $4 + 8 | 0);
  HEAP32[$0 + 48 >> 2] = 0;
  $1 = HEAP32[$0 + 56 >> 2];
  HEAP32[$4 + 4 >> 2] = 0;
  $2 = $0 + 24 | 0;
  std____2__vector_float_2c_20std____2__allocator_float__20___resize_28unsigned_20long_2c_20float_20const__29($2, $1, $4 + 4 | 0);
  fft__genWindow_28int_2c_20int_2c_20float__29(HEAP32[$0 + 36 >> 2], std____2__vector_int_2c_20std____2__allocator_int__20___operator_5b_5d_28unsigned_20long_29_20const($2, 0));
  $0 = $4 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function maxiIFFT__process_28std____2__vector_float_2c_20std____2__allocator_float__20___2c_20std____2__vector_float_2c_20std____2__allocator_float__20___2c_20maxiIFFT__fftModes_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = Math_fround(0);
  $5 = global$0 - 16 | 0;
  $4 = $5;
  if ($4 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  label$2 : {
   if (HEAP32[$0 + 48 >> 2]) {
    break label$2
   }
   $4 = std____2__vector_double_2c_20std____2__allocator_double__20___begin_28_29($0);
   $6 = std____2__vector_double_2c_20std____2__allocator_double__20___end_28_29($0);
   HEAP32[$5 + 12 >> 2] = 0;
   void_20std____2____fill_std____2____wrap_iter_float___2c_20int__28std____2____wrap_iter_float___2c_20std____2____wrap_iter_float___2c_20int_20const__2c_20std____2__random_access_iterator_tag_29($4, $6, $5 + 12 | 0);
   $4 = $0 + 60 | 0;
   $6 = std____2__vector_int_2c_20std____2__allocator_int__20___operator_5b_5d_28unsigned_20long_29_20const($0, 0);
   $7 = std____2__vector_int_2c_20std____2__allocator_int__20___operator_5b_5d_28unsigned_20long_29_20const($0 + 24 | 0, 0);
   $1 = HEAP32[$1 >> 2];
   $2 = HEAP32[$2 >> 2];
   label$3 : {
    if (!$3) {
     fft__polToCart_28float__2c_20float__29($4, $1, $2);
     fft__calcIFFT_28int_2c_20float__2c_20float__29($4, $6, $7);
     break label$3;
    }
    fft__inverseFFTComplex_28int_2c_20float__2c_20float__2c_20float__2c_20float__29($4, $6, $7, $1, $2);
   }
   $1 = 0;
   $2 = $0 + 12 | 0;
   $7 = std____2__vector_int_2c_20std____2__allocator_int__20___operator_5b_5d_28unsigned_20long_29_20const($2, 0);
   $4 = std____2__vector_int_2c_20std____2__allocator_int__20___operator_5b_5d_28unsigned_20long_29_20const($2, 0);
   $3 = HEAP32[$0 + 44 >> 2];
   memcpy($7, $4 + ($3 << 2) | 0, HEAP32[$0 + 56 >> 2] - $3 << 2);
   $4 = std____2__vector_int_2c_20std____2__allocator_int__20___operator_5b_5d_28unsigned_20long_29_20const($2, 0);
   $3 = HEAP32[$0 + 44 >> 2];
   memset($4 + (HEAP32[$0 + 56 >> 2] - $3 << 2) | 0, 0, $3 << 2);
   if (HEAP32[$0 + 56 >> 2] < 1) {
    break label$2
   }
   while (1) {
    $8 = HEAPF32[std____2__vector_int_2c_20std____2__allocator_int__20___operator_5b_5d_28unsigned_20long_29_20const($0, $1) >> 2];
    $3 = std____2__vector_int_2c_20std____2__allocator_int__20___operator_5b_5d_28unsigned_20long_29_20const($2, $1);
    HEAPF32[$3 >> 2] = $8 + HEAPF32[$3 >> 2];
    $1 = $1 + 1 | 0;
    if (($1 | 0) < HEAP32[$0 + 56 >> 2]) {
     continue
    }
    break;
   };
  }
  HEAP32[$0 + 52 >> 2] = HEAP32[std____2__vector_int_2c_20std____2__allocator_int__20___operator_5b_5d_28unsigned_20long_29_20const($0 + 12 | 0, HEAP32[$0 + 48 >> 2]) >> 2];
  $1 = HEAP32[$0 + 48 >> 2] + 1 | 0;
  HEAP32[$0 + 48 >> 2] = ($1 | 0) == HEAP32[$0 + 44 >> 2] ? 0 : $1;
  $8 = HEAPF32[$0 + 52 >> 2];
  $0 = $5 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
  return Math_fround($8);
 }
 
 function void_20std____2____fill_std____2____wrap_iter_float___2c_20int__28std____2____wrap_iter_float___2c_20std____2____wrap_iter_float___2c_20int_20const__2c_20std____2__random_access_iterator_tag_29($0, $1, $2) {
  var $3 = 0, $4 = 0;
  $3 = global$0 - 16 | 0;
  $4 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  HEAP32[$3 >> 2] = $1;
  HEAP32[$3 + 8 >> 2] = $0;
  std____2____wrap_iter_float___20std____2____fill_n_std____2____wrap_iter_float___2c_20long_2c_20int__28std____2____wrap_iter_float___2c_20long_2c_20int_20const__29($0, decltype_28_28fp_base_28_29_29_20__20_28fp0_base_28_29_29_29_20std____2__operator__float__2c_20float___28std____2____wrap_iter_float___20const__2c_20std____2____wrap_iter_float___20const__29($3, $3 + 8 | 0), $2);
  $0 = $3 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function decltype_28_28fp_base_28_29_29_20__20_28fp0_base_28_29_29_29_20std____2__operator__float__2c_20float___28std____2____wrap_iter_float___20const__2c_20std____2____wrap_iter_float___20const__29($0, $1) {
  return HEAP32[$0 >> 2] - HEAP32[$1 >> 2] >> 2;
 }
 
 function std____2____wrap_iter_float___20std____2____fill_n_std____2____wrap_iter_float___2c_20long_2c_20int__28std____2____wrap_iter_float___2c_20long_2c_20int_20const__29($0, $1, $2) {
  var $3 = 0, $4 = 0;
  $3 = global$0 - 16 | 0;
  $4 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  HEAP32[$3 + 8 >> 2] = $0;
  if (($1 | 0) >= 1) {
   while (1) {
    HEAPF32[HEAP32[$3 + 8 >> 2] >> 2] = HEAP32[$2 >> 2];
    $0 = ($1 | 0) > 1;
    std____2____wrap_iter_float____operator___28_29($3 + 8 | 0);
    $1 = $1 + -1 | 0;
    if ($0) {
     continue
    }
    break;
   }
  }
  $0 = $3 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function std____2____wrap_iter_float____operator___28_29($0) {
  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 4;
 }
 
 function InitFFT_28_29() {
  var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0;
  HEAP32[16334] = dlmalloc(64);
  $1 = 1;
  $2 = 2;
  while (1) {
   $0 = dlmalloc($2 << 2);
   $3 = $1 + -1 << 2;
   HEAP32[$3 + HEAP32[16334] >> 2] = $0;
   $0 = 0;
   if (($2 | 0) > 0) {
    while (1) {
     $4 = ReverseBits_28int_2c_20int_29($0, $1);
     HEAP32[HEAP32[HEAP32[16334] + $3 >> 2] + ($0 << 2) >> 2] = $4;
     $0 = $0 + 1 | 0;
     if (($2 | 0) != ($0 | 0)) {
      continue
     }
     break;
    }
   }
   $2 = $2 << 1;
   $1 = $1 + 1 | 0;
   if (($1 | 0) != 17) {
    continue
   }
   break;
  };
 }
 
 function ReverseBits_28int_2c_20int_29($0, $1) {
  var $2 = 0, $3 = 0;
  if (($1 | 0) >= 1) {
   while (1) {
    $2 = $0 & 1 | $2 << 1;
    $0 = $0 >> 1;
    $3 = $3 + 1 | 0;
    if (($3 | 0) != ($1 | 0)) {
     continue
    }
    break;
   }
  }
  return $2;
 }
 
 function FFT_28int_2c_20bool_2c_20float__2c_20float__2c_20float__2c_20float__29($0, $1, $2, $3, $4, $5) {
  var $6 = 0, $7 = 0, $8 = 0, $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = Math_fround(0), $17 = Math_fround(0), $18 = 0, $19 = Math_fround(0), $20 = Math_fround(0), $21 = 0.0, $22 = Math_fround(0), $23 = 0, $24 = Math_fround(0), $25 = 0.0, $26 = Math_fround(0), $27 = Math_fround(0), $28 = Math_fround(0);
  $13 = global$0 - 16 | 0;
  $6 = $13;
  if ($6 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $6;
  label$2 : {
   if (!($0 + -1 & $0) & ($0 | 0) > 1) {
    if (!HEAP32[16334]) {
     InitFFT_28_29()
    }
    $14 = 1;
    $12 = NumberOfBitsNeeded_28int_29($0);
    if (($0 | 0) < 1) {
     break label$2
    }
    $6 = 0;
    while (1) {
     $8 = FastReverseBits_28int_2c_20int_29($6, $12) << 2;
     $7 = $6 << 2;
     HEAP32[$8 + $4 >> 2] = HEAP32[$7 + $2 >> 2];
     HEAPF32[$5 + $8 >> 2] = $3 ? +HEAPF32[$3 + $7 >> 2] : 0.0;
     $6 = $6 + 1 | 0;
     if (($6 | 0) != ($0 | 0)) {
      continue
     }
     break;
    };
    break label$2;
   }
   HEAP32[$13 >> 2] = $0;
   fiprintf(HEAP32[7458], 27636, $13);
   exit(1);
   abort();
  }
  $6 = 2;
  if (($0 | 0) >= 2) {
   $25 = $1 ? -6.283185307179586 : 6.283185307179586;
   while (1) {
    $2 = $6;
    $15 = $25 / +($6 | 0);
    $16 = Math_fround(cos($15));
    $20 = Math_fround($16 + $16);
    $21 = $15 * -2.0;
    $26 = Math_fround(cos($21));
    $27 = Math_fround(-Math_fround(sin($15)));
    $28 = Math_fround(sin($21));
    $3 = 0;
    $12 = $14;
    while (1) {
     $9 = $28;
     $10 = $27;
     $6 = $3;
     $11 = $26;
     $17 = $16;
     if (($14 | 0) >= 1) {
      while (1) {
       $7 = $6 + $14 << 2;
       $8 = $7 + $4 | 0;
       $22 = HEAPF32[$8 >> 2];
       $18 = $8;
       $23 = $6 << 2;
       $8 = $23 + $4 | 0;
       $19 = Math_fround(Math_fround($20 * $17) - $11);
       $11 = Math_fround(Math_fround($20 * $10) - $9);
       $7 = $5 + $7 | 0;
       $9 = HEAPF32[$7 >> 2];
       $24 = Math_fround(Math_fround($19 * $22) - Math_fround($11 * $9));
       HEAPF32[$18 >> 2] = HEAPF32[$8 >> 2] - $24;
       $18 = $7;
       $7 = $5 + $23 | 0;
       $9 = Math_fround(Math_fround($11 * $22) + Math_fround($19 * $9));
       HEAPF32[$18 >> 2] = HEAPF32[$7 >> 2] - $9;
       HEAPF32[$8 >> 2] = $24 + HEAPF32[$8 >> 2];
       HEAPF32[$7 >> 2] = $9 + HEAPF32[$7 >> 2];
       $9 = $10;
       $10 = $11;
       $11 = $17;
       $17 = $19;
       $6 = $6 + 1 | 0;
       if (($12 | 0) != ($6 | 0)) {
        continue
       }
       break;
      }
     }
     $12 = $2 + $12 | 0;
     $3 = $2 + $3 | 0;
     if (($3 | 0) < ($0 | 0)) {
      continue
     }
     break;
    };
    $14 = $2;
    $6 = $2 << 1;
    if (($6 | 0) <= ($0 | 0)) {
     continue
    }
    break;
   };
  }
  if (!(!$1 | ($0 | 0) < 1)) {
   $10 = Math_fround($0 | 0);
   $6 = 0;
   while (1) {
    $1 = $6 << 2;
    $2 = $1 + $4 | 0;
    HEAPF32[$2 >> 2] = HEAPF32[$2 >> 2] / $10;
    $1 = $1 + $5 | 0;
    HEAPF32[$1 >> 2] = HEAPF32[$1 >> 2] / $10;
    $6 = $6 + 1 | 0;
    if (($6 | 0) != ($0 | 0)) {
     continue
    }
    break;
   };
  }
  $0 = $13 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function NumberOfBitsNeeded_28int_29($0) {
  var $1 = 0, $2 = 0, $3 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  if (($0 | 0) > 1) {
   $2 = 0;
   while (1) {
    $3 = $2;
    $2 = $3 + 1 | 0;
    if (!($0 >>> $3 & 1)) {
     continue
    }
    break;
   };
   $0 = $1 + 16 | 0;
   if ($0 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $0;
   return $3;
  }
  HEAP32[$1 >> 2] = $0;
  fiprintf(HEAP32[7458], 27662, $1);
  exit(1);
  abort();
 }
 
 function FastReverseBits_28int_2c_20int_29($0, $1) {
  if (($1 | 0) <= 16) {
   return HEAP32[HEAP32[(HEAP32[16334] + ($1 << 2) | 0) + -4 >> 2] + ($0 << 2) >> 2]
  }
  return ReverseBits_28int_2c_20int_29($0, $1);
 }
 
 function RealFFT_28int_2c_20float__2c_20float__2c_20float__29($0, $1, $2, $3) {
  var $4 = 0, $5 = Math_fround(0), $6 = 0, $7 = Math_fround(0), $8 = Math_fround(0), $9 = 0, $10 = 0, $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = 0.0, $15 = Math_fround(0), $16 = 0, $17 = 0, $18 = Math_fround(0), $19 = Math_fround(0), $20 = 0, $21 = Math_fround(0), $22 = Math_fround(0), $23 = 0;
  $9 = ($0 | 0) / 2 | 0;
  $5 = Math_fround(3.141592653589793 / +($9 | 0));
  $4 = $9 << 2;
  $16 = dlmalloc($4);
  $17 = dlmalloc($4);
  if (($0 | 0) >= 2) {
   $4 = 0;
   while (1) {
    $6 = $4 << 2;
    $10 = $4 << 3;
    HEAP32[$6 + $16 >> 2] = HEAP32[$10 + $1 >> 2];
    HEAP32[$6 + $17 >> 2] = HEAP32[($10 | 4) + $1 >> 2];
    $4 = $4 + 1 | 0;
    if (($9 | 0) != ($4 | 0)) {
     continue
    }
    break;
   };
  }
  FFT_28int_2c_20bool_2c_20float__2c_20float__2c_20float__2c_20float__29($9, 0, $16, $17, $2, $3);
  $14 = sin(+$5 * .5);
  $1 = ($0 | 0) / 4 | 0;
  $18 = sinf($5);
  if (($0 | 0) >= 8) {
   $0 = ($1 | 0) > 2 ? $1 : 2;
   $14 = +Math_fround($14);
   $19 = Math_fround($14 * -2.0 * $14);
   $8 = Math_fround($19 + Math_fround(1.0));
   $4 = 1;
   $5 = $18;
   while (1) {
    $1 = $4 << 2;
    $6 = $1 + $2 | 0;
    $7 = HEAPF32[$6 >> 2];
    $10 = $9 - $4 << 2;
    $20 = $10 + $2 | 0;
    $11 = HEAPF32[$20 >> 2];
    $15 = Math_fround(Math_fround($7 + $11) * Math_fround(.5));
    $23 = $6;
    $1 = $1 + $3 | 0;
    $12 = HEAPF32[$1 >> 2];
    $6 = $3 + $10 | 0;
    $13 = HEAPF32[$6 >> 2];
    $21 = Math_fround(Math_fround($12 + $13) * Math_fround(.5));
    $22 = Math_fround($8 * $21);
    $7 = Math_fround(Math_fround($7 - $11) * Math_fround(-.5));
    $11 = Math_fround($5 * $7);
    HEAPF32[$23 >> 2] = Math_fround($15 + $22) - $11;
    $7 = Math_fround($8 * $7);
    $12 = Math_fround(Math_fround($12 - $13) * Math_fround(.5));
    $13 = Math_fround($5 * $21);
    HEAPF32[$1 >> 2] = Math_fround($7 + $12) + $13;
    HEAPF32[$20 >> 2] = $11 + Math_fround($15 - $22);
    HEAPF32[$6 >> 2] = Math_fround($7 - $12) + $13;
    $15 = Math_fround($18 * $8);
    $8 = Math_fround($8 + Math_fround(Math_fround($8 * $19) - Math_fround($18 * $5)));
    $5 = Math_fround($5 + Math_fround($15 + Math_fround($5 * $19)));
    $4 = $4 + 1 | 0;
    if (($0 | 0) != ($4 | 0)) {
     continue
    }
    break;
   };
  }
  $5 = HEAPF32[$2 >> 2];
  HEAPF32[$2 >> 2] = $5 + HEAPF32[$3 >> 2];
  HEAPF32[$3 >> 2] = $5 - HEAPF32[$3 >> 2];
  dlfree($16);
  dlfree($17);
 }
 
 function fft__genWindow_28int_2c_20int_2c_20float__29($0, $1) {
  var $2 = 0, $3 = 0.0;
  if (($0 | 0) >= 1) {
   $2 = ($0 | 0) > 1 ? $0 : 1;
   $3 = +($0 + -1 | 0);
   $0 = 0;
   while (1) {
    HEAPF32[($0 << 2) + $1 >> 2] = .5 - cos(+($0 | 0) * 6.283185307179586 / $3) * .5;
    $0 = $0 + 1 | 0;
    if (($2 | 0) != ($0 | 0)) {
     continue
    }
    break;
   };
  }
 }
 
 function fft__setup_28int_29($0, $1) {
  var $2 = 0, $3 = 0;
  $2 = global$0 - 16 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  HEAP32[$0 >> 2] = $1;
  HEAP32[$0 + 4 >> 2] = ($1 | 0) / 2;
  HEAP32[$2 + 12 >> 2] = 0;
  std____2__vector_float_2c_20std____2__allocator_float__20___resize_28unsigned_20long_2c_20float_20const__29($0 + 8 | 0, $1, $2 + 12 | 0);
  $1 = HEAP32[$0 >> 2];
  HEAP32[$2 + 12 >> 2] = 0;
  std____2__vector_float_2c_20std____2__allocator_float__20___resize_28unsigned_20long_2c_20float_20const__29($0 + 32 | 0, $1, $2 + 12 | 0);
  $1 = HEAP32[$0 >> 2];
  HEAP32[$2 + 12 >> 2] = 0;
  std____2__vector_float_2c_20std____2__allocator_float__20___resize_28unsigned_20long_2c_20float_20const__29($0 + 20 | 0, $1, $2 + 12 | 0);
  $1 = HEAP32[$0 >> 2];
  HEAP32[$2 + 12 >> 2] = 0;
  std____2__vector_float_2c_20std____2__allocator_float__20___resize_28unsigned_20long_2c_20float_20const__29($0 + 44 | 0, $1, $2 + 12 | 0);
  $0 = $2 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function fft___fft_28_29($0) {
  std____2__vector_float_2c_20std____2__allocator_float__20____vector_28_29($0 + 44 | 0);
  std____2__vector_float_2c_20std____2__allocator_float__20____vector_28_29($0 + 32 | 0);
  std____2__vector_float_2c_20std____2__allocator_float__20____vector_28_29($0 + 20 | 0);
  std____2__vector_float_2c_20std____2__allocator_float__20____vector_28_29($0 + 8 | 0);
 }
 
 function fft__calcFFT_28int_2c_20float__2c_20float__29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = Math_fround(0), $7 = Math_fround(0);
  $4 = HEAP32[$0 >> 2];
  if (($4 | 0) >= 1) {
   $5 = $0 + 8 | 0;
   while (1) {
    $6 = HEAPF32[($3 << 2) + $2 >> 2];
    $7 = HEAPF32[($3 << 2) + $1 >> 2];
    HEAPF32[std____2__vector_int_2c_20std____2__allocator_int__20___operator_5b_5d_28unsigned_20long_29_20const($5, $3) >> 2] = $7 * $6;
    $3 = $3 + 1 | 0;
    $4 = HEAP32[$0 >> 2];
    if (($3 | 0) < ($4 | 0)) {
     continue
    }
    break;
   };
  }
  RealFFT_28int_2c_20float__2c_20float__2c_20float__29($4, std____2__vector_int_2c_20std____2__allocator_int__20___operator_5b_5d_28unsigned_20long_29_20const($0 + 8 | 0, 0), std____2__vector_int_2c_20std____2__allocator_int__20___operator_5b_5d_28unsigned_20long_29_20const($0 + 20 | 0, 0), std____2__vector_int_2c_20std____2__allocator_int__20___operator_5b_5d_28unsigned_20long_29_20const($0 + 44 | 0, 0));
 }
 
 function fft__cartToPol_28float__2c_20float__29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  if (HEAP32[$0 + 4 >> 2] >= 1) {
   $4 = $0 + 44 | 0;
   $5 = $0 + 20 | 0;
   while (1) {
    $6 = $3 << 2;
    HEAPF32[$6 + $1 >> 2] = Math_sqrt(Math_fround(Math_fround(HEAPF32[std____2__vector_int_2c_20std____2__allocator_int__20___operator_5b_5d_28unsigned_20long_29_20const($5, $3) >> 2] * HEAPF32[std____2__vector_int_2c_20std____2__allocator_int__20___operator_5b_5d_28unsigned_20long_29_20const($5, $3) >> 2]) + Math_fround(HEAPF32[std____2__vector_int_2c_20std____2__allocator_int__20___operator_5b_5d_28unsigned_20long_29_20const($4, $3) >> 2] * HEAPF32[std____2__vector_int_2c_20std____2__allocator_int__20___operator_5b_5d_28unsigned_20long_29_20const($4, $3) >> 2])));
    HEAPF32[$2 + $6 >> 2] = atan2f(HEAPF32[std____2__vector_int_2c_20std____2__allocator_int__20___operator_5b_5d_28unsigned_20long_29_20const($4, $3) >> 2], HEAPF32[std____2__vector_int_2c_20std____2__allocator_int__20___operator_5b_5d_28unsigned_20long_29_20const($5, $3) >> 2]);
    $3 = $3 + 1 | 0;
    if (($3 | 0) < HEAP32[$0 + 4 >> 2]) {
     continue
    }
    break;
   };
  }
 }
 
 function fft__convToDB_28float__2c_20float__29($0, $1, $2) {
  var $3 = 0, $4 = Math_fround(0), $5 = 0, $6 = Math_fround(0);
  if (HEAP32[$0 + 4 >> 2] > 0) {
   while (1) {
    $4 = Math_fround(0.0);
    $5 = $3 << 2;
    $6 = HEAPF32[$5 + $1 >> 2];
    if (!(+$6 < 1.0e-06)) {
     $4 = Math_fround(log10f(Math_fround($6 + Math_fround(1.0))) * Math_fround(20.0))
    }
    HEAPF32[$2 + $5 >> 2] = $4;
    $3 = $3 + 1 | 0;
    if (($3 | 0) < HEAP32[$0 + 4 >> 2]) {
     continue
    }
    break;
   }
  }
 }
 
 function fft__polToCart_28float__2c_20float__29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = Math_fround(0), $6 = Math_fround(0), $7 = 0, $8 = 0, $9 = 0;
  if (HEAP32[$0 + 4 >> 2] >= 1) {
   $8 = $0 + 32 | 0;
   $9 = $0 + 8 | 0;
   while (1) {
    $4 = $3 << 2;
    $7 = $4 + $1 | 0;
    $5 = HEAPF32[$7 >> 2];
    $4 = $2 + $4 | 0;
    $6 = cosf(HEAPF32[$4 >> 2]);
    HEAPF32[std____2__vector_int_2c_20std____2__allocator_int__20___operator_5b_5d_28unsigned_20long_29_20const($9, $3) >> 2] = $5 * $6;
    $5 = HEAPF32[$7 >> 2];
    $6 = sinf(HEAPF32[$4 >> 2]);
    HEAPF32[std____2__vector_int_2c_20std____2__allocator_int__20___operator_5b_5d_28unsigned_20long_29_20const($8, $3) >> 2] = $5 * $6;
    $3 = $3 + 1 | 0;
    if (($3 | 0) < HEAP32[$0 + 4 >> 2]) {
     continue
    }
    break;
   };
  }
  $2 = std____2__vector_int_2c_20std____2__allocator_int__20___operator_5b_5d_28unsigned_20long_29_20const($0 + 8 | 0, 0);
  $1 = HEAP32[$0 + 4 >> 2] << 2;
  memset($2 + $1 | 0, 0, $1);
  $1 = std____2__vector_int_2c_20std____2__allocator_int__20___operator_5b_5d_28unsigned_20long_29_20const($0 + 32 | 0, 0);
  $0 = HEAP32[$0 + 4 >> 2] << 2;
  memset($1 + $0 | 0, 0, $0);
 }
 
 function fft__calcIFFT_28int_2c_20float__2c_20float__29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
  $5 = HEAP32[$0 >> 2];
  $4 = std____2__vector_int_2c_20std____2__allocator_int__20___operator_5b_5d_28unsigned_20long_29_20const($0 + 8 | 0, 0);
  $7 = std____2__vector_int_2c_20std____2__allocator_int__20___operator_5b_5d_28unsigned_20long_29_20const($0 + 32 | 0, 0);
  $6 = $0 + 20 | 0;
  FFT_28int_2c_20bool_2c_20float__2c_20float__2c_20float__2c_20float__29($5, 1, $4, $7, std____2__vector_int_2c_20std____2__allocator_int__20___operator_5b_5d_28unsigned_20long_29_20const($6, 0), std____2__vector_int_2c_20std____2__allocator_int__20___operator_5b_5d_28unsigned_20long_29_20const($0 + 44 | 0, 0));
  if (HEAP32[$0 >> 2] > 0) {
   while (1) {
    $5 = std____2__vector_int_2c_20std____2__allocator_int__20___operator_5b_5d_28unsigned_20long_29_20const($6, $3);
    $4 = ($3 << 2) + $1 | 0;
    HEAPF32[$4 >> 2] = HEAPF32[$4 >> 2] + Math_fround(HEAPF32[$5 >> 2] * HEAPF32[($3 << 2) + $2 >> 2]);
    $3 = $3 + 1 | 0;
    if (($3 | 0) < HEAP32[$0 >> 2]) {
     continue
    }
    break;
   }
  }
 }
 
 function fft__inverseFFTComplex_28int_2c_20float__2c_20float__2c_20float__2c_20float__29($0, $1, $2, $3, $4) {
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
  if (HEAP32[$0 + 4 >> 2] >= 1) {
   $7 = $0 + 44 | 0;
   $8 = $0 + 20 | 0;
   while (1) {
    $6 = $5 << 2;
    $9 = HEAP32[$6 + $3 >> 2];
    HEAP32[std____2__vector_int_2c_20std____2__allocator_int__20___operator_5b_5d_28unsigned_20long_29_20const($8, $5) >> 2] = $9;
    $6 = HEAP32[$4 + $6 >> 2];
    HEAP32[std____2__vector_int_2c_20std____2__allocator_int__20___operator_5b_5d_28unsigned_20long_29_20const($7, $5) >> 2] = $6;
    $5 = $5 + 1 | 0;
    if (($5 | 0) < HEAP32[$0 + 4 >> 2]) {
     continue
    }
    break;
   };
  }
  fft__calcIFFT_28int_2c_20float__2c_20float__29($0, $1, $2);
 }
 
 function maxiMFCCAnalyser_double___melFilterAndLogSq_Part2_28float__29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, wasm2js_f64$0 = 0.0, wasm2js_f64$1 = 0.0, wasm2js_i32$0 = 0;
  $3 = HEAP32[$0 + 4 >> 2];
  if ($3) {
   $7 = HEAP32[$0 + 40 >> 2];
   $8 = HEAP32[$0 >> 2];
   while (1) {
    $5 = ($4 << 3) + $8 | 0;
    HEAP32[$5 >> 2] = 0;
    HEAP32[$5 + 4 >> 2] = 0;
    if ($7) {
     $2 = HEAP32[$0 + 40 >> 2];
     $9 = $2 >>> 0 > 1 ? $2 : 1;
     $10 = HEAP32[$0 + 36 >> 2];
     $2 = 0;
     while (1) {
      HEAPF64[$5 >> 3] = HEAPF64[$5 >> 3] + HEAPF64[(Math_imul($2, $3) + $4 << 3) + $10 >> 3] * +HEAPF32[($2 << 2) + $1 >> 2];
      $2 = $2 + 1 | 0;
      if (($9 | 0) != ($2 | 0)) {
       continue
      }
      break;
     };
    }
    $4 = $4 + 1 | 0;
    if (($3 | 0) != ($4 | 0)) {
     continue
    }
    break;
   };
   $0 = HEAP32[$0 >> 2];
   $2 = 0;
   while (1) {
    $1 = $0 + ($2 << 3) | 0;
    $6 = HEAPF64[$1 >> 3];
    HEAPF64[$1 >> 3] = (wasm2js_f64$0 = log($6 * $6), wasm2js_f64$1 = 0.0, wasm2js_i32$0 = $6 > 1.0e-06, wasm2js_i32$0 ? wasm2js_f64$0 : wasm2js_f64$1);
    $2 = $2 + 1 | 0;
    if (($3 | 0) != ($2 | 0)) {
     continue
    }
    break;
   };
  }
 }
 
 function maxiReverbFilters__maxiReverbFilters_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = std____2__shared_ptr_maxiOsc___shared_ptr_28_29($0);
  maxiFilter__maxiFilter_28_29($0 + 48 | 0);
  HEAP32[$0 + 24 >> 2] = 0;
  HEAP32[$0 + 28 >> 2] = 0;
  HEAP32[$0 + 8 >> 2] = 0;
  HEAP32[$0 + 12 >> 2] = 0;
  HEAP32[$0 + 40 >> 2] = 858993459;
  HEAP32[$0 + 44 >> 2] = 1072378675;
  HEAP32[$0 + 32 >> 2] = -1717986918;
  HEAP32[$0 + 36 >> 2] = 1072273817;
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP32[16874] = 0;
  __invoke_void___22class_std____2__valarray_22__i32_double(1530, $1 | 0, 44100, 0.0);
  $2 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($2 | 0) != 1) {
   return $0 | 0
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__valarray_double____valarray_28_29($1);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2__valarray_double___resize_28unsigned_20long_2c_20double_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = +$2;
  var $3 = 0, $4 = 0;
  std____2__valarray_double_____clear_28unsigned_20long_29($0, std____2__vector_double_2c_20std____2__allocator_double__20___size_28_29_20const($0));
  if ($1) {
   $4 = $1 << 3;
   $3 = operator_20new_28unsigned_20long_29($4);
   HEAP32[$0 >> 2] = $3;
   HEAP32[$0 + 4 >> 2] = $3;
   $4 = $3 + $4 | 0;
   while (1) {
    HEAPF64[$3 >> 3] = $2;
    $3 = $3 + 8 | 0;
    $1 = $1 + -1 | 0;
    if ($1) {
     continue
    }
    break;
   };
   HEAP32[$0 + 4 >> 2] = $4;
  }
 }
 
 function maxiReverbFilters__combfb_28double_2c_20double_2c_20double_29($0, $1, $2) {
  var $3 = 0;
  HEAP32[$0 + 20 >> 2] = Math_abs($2) < 2147483648.0 ? ~~$2 : -2147483648;
  $1 = HEAPF64[std____2__vector_double_2c_20std____2__allocator_double__20___operator_5b_5d_28unsigned_20long_29($0, HEAP32[$0 + 16 >> 2]) >> 3] * .85 + $1;
  HEAPF64[$0 + 24 >> 3] = $1;
  HEAPF64[std____2__vector_double_2c_20std____2__allocator_double__20___operator_5b_5d_28unsigned_20long_29($0, HEAP32[$0 + 16 >> 2]) >> 3] = $1;
  $3 = HEAP32[$0 + 16 >> 2];
  HEAP32[$0 + 16 >> 2] = (HEAP32[$0 + 20 >> 2] + -1 | 0) == ($3 | 0) ? 0 : $3 + 1 | 0;
  return HEAPF64[$0 + 24 >> 3];
 }
 
 function maxiReverbFilters__lpcombfb_28double_2c_20double_2c_20double_2c_20double_29($0, $1, $2, $3, $4) {
  var $5 = 0, $6 = 0;
  $5 = $0;
  if (Math_abs($2) < 2147483648.0) {
   $6 = ~~$2
  } else {
   $6 = -2147483648
  }
  HEAP32[$5 + 20 >> 2] = $6;
  $1 = maxiFilter__lopass_28double_2c_20double_29($0 + 48 | 0, HEAPF64[std____2__vector_double_2c_20std____2__allocator_double__20___operator_5b_5d_28unsigned_20long_29($0, HEAP32[$0 + 16 >> 2]) >> 3], 1.0 - $4) * $3 + $1;
  HEAPF64[$0 + 24 >> 3] = $1;
  HEAPF64[std____2__vector_double_2c_20std____2__allocator_double__20___operator_5b_5d_28unsigned_20long_29($0, HEAP32[$0 + 16 >> 2]) >> 3] = $1;
  $5 = HEAP32[$0 + 16 >> 2];
  HEAP32[$0 + 16 >> 2] = (HEAP32[$0 + 20 >> 2] + -1 | 0) == ($5 | 0) ? 0 : $5 + 1 | 0;
  return HEAPF64[$0 + 24 >> 3];
 }
 
 function maxiReverbFilters__allpass_28double_2c_20double_29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0.0, $6 = 0.0;
  $3 = $0;
  if (Math_abs($2) < 2147483648.0) {
   $4 = ~~$2
  } else {
   $4 = -2147483648
  }
  HEAP32[$3 + 20 >> 2] = $4;
  $2 = HEAPF64[std____2__vector_double_2c_20std____2__allocator_double__20___operator_5b_5d_28unsigned_20long_29($0, HEAP32[$0 + 16 >> 2]) >> 3];
  $5 = HEAPF64[$0 + 40 >> 3];
  $6 = HEAPF64[std____2__vector_double_2c_20std____2__allocator_double__20___operator_5b_5d_28unsigned_20long_29($0, HEAP32[$0 + 16 >> 2]) >> 3];
  $1 = $2 * $5 + $1;
  HEAPF64[$0 + 24 >> 3] = $6 - $1 * HEAPF64[$0 + 40 >> 3];
  HEAPF64[std____2__vector_double_2c_20std____2__allocator_double__20___operator_5b_5d_28unsigned_20long_29($0, HEAP32[$0 + 16 >> 2]) >> 3] = $1;
  $3 = HEAP32[$0 + 16 >> 2];
  HEAP32[$0 + 16 >> 2] = (HEAP32[$0 + 20 >> 2] + -1 | 0) == ($3 | 0) ? 0 : $3 + 1 | 0;
  return HEAPF64[$0 + 24 >> 3];
 }
 
 function maxiReverbBase__maxiReverbBase_28_29($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0;
  $3 = $0 + 9280 | 0;
  $4 = $0 - -64 | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       while (1) {
        HEAP32[16874] = 0;
        $2 = (Math_imul($1, 288) + $0 | 0) - -64 | 0;
        __invoke_i1___22class_std____2__basic_ifstream_22_(1531, $2 | 0) | 0;
        $5 = HEAP32[16874];
        HEAP32[16874] = 0;
        if (($5 | 0) == 1) {
         break label$5
        }
        $1 = $1 + 1 | 0;
        if (($1 | 0) != 32) {
         continue
        }
        break;
       };
       $5 = $0 + 18496 | 0;
       $6 = $0 + 9280 | 0;
       $1 = 0;
       while (1) {
        HEAP32[16874] = 0;
        $2 = (Math_imul($1, 288) + $0 | 0) + 9280 | 0;
        __invoke_i1___22class_std____2__basic_ifstream_22_(1531, $2 | 0) | 0;
        $8 = HEAP32[16874];
        HEAP32[16874] = 0;
        if (($8 | 0) == 1) {
         break label$4
        }
        $1 = $1 + 1 | 0;
        if (($1 | 0) != 32) {
         continue
        }
        break;
       };
       $2 = $0 + 26176 | 0;
       $1 = $0 + 18496 | 0;
       while (1) {
        $1 = maxiFilter__maxiFilter_28_29($1) + 240 | 0;
        if (($2 | 0) != ($1 | 0)) {
         continue
        }
        break;
       };
       $1 = 0;
       HEAP32[16874] = 0;
       __invoke_i1___22class_std____2__basic_ifstream_22_(1531, $0 + 27752 | 0) | 0;
       $2 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($2 | 0) == 1) {
        break label$3
       }
       HEAP32[$0 + 27720 >> 2] = 0;
       HEAP32[$0 + 27724 >> 2] = 0;
       HEAP32[$0 + 27456 >> 2] = 0;
       HEAP32[$0 + 27460 >> 2] = 0;
       $2 = $0 + 27728 | 0;
       HEAP32[$2 >> 2] = 0;
       HEAP32[$2 + 4 >> 2] = 0;
       $2 = $0 + 27464 | 0;
       HEAP32[$2 >> 2] = 0;
       HEAP32[$2 + 4 >> 2] = 0;
       memset($0 + 26176 | 0, 0, 1040);
       memset($0 + 28040 | 0, 0, 512);
       $2 = HEAP32[12865];
       HEAP32[$0 + 28552 >> 2] = 32;
       HEAP32[$0 + 27736 >> 2] = 0;
       HEAP32[$0 + 27740 >> 2] = 0;
       HEAP32[$0 + 27712 >> 2] = 0;
       HEAP32[$0 + 27716 >> 2] = 0;
       HEAPF32[$0 + 27744 >> 2] = Math_fround($2 | 0) / Math_fround(1.0e3);
       while (1) {
        $3 = ($1 << 3) + $0 | 0;
        $4 = $3 + 28296 | 0;
        HEAP32[$4 >> 2] = -1717986918;
        HEAP32[$4 + 4 >> 2] = 1069128089;
        $3 = $3 + 28040 | 0;
        HEAP32[$3 >> 2] = -1717986918;
        HEAP32[$3 + 4 >> 2] = 1069128089;
        $1 = $1 + 1 | 0;
        if (($1 | 0) != 32) {
         continue
        }
        break;
       };
       HEAP32[$0 + 28040 >> 2] = 0;
       HEAP32[$0 + 28044 >> 2] = 1071644672;
       HEAP32[$0 + 28556 >> 2] = ($2 | 0) / 10;
       $1 = $0 + 28048 | 0;
       HEAP32[$1 >> 2] = -1717986918;
       HEAP32[$1 + 4 >> 2] = 1070176665;
       $2 = 0;
       while (1) {
        $1 = ($2 << 3) + $0 | 0;
        $3 = $1 + 26688 | 0;
        HEAP32[$3 >> 2] = 0;
        HEAP32[$3 + 4 >> 2] = 1072693248;
        $2 = $2 + 1 | 0;
        $7 = +(Math_imul($2, 13) | 0);
        HEAPF64[$1 + 26432 >> 3] = $7;
        HEAPF64[$1 + 26176 >> 3] = $7;
        $3 = $1 + 26944 | 0;
        HEAP32[$3 >> 2] = 0;
        HEAP32[$3 + 4 >> 2] = 1072693248;
        $3 = $1 + 27200 | 0;
        HEAP32[$3 >> 2] = -1717986918;
        HEAP32[$3 + 4 >> 2] = 1070176665;
        $1 = $1 + 27456 | 0;
        HEAP32[$1 >> 2] = 0;
        HEAP32[$1 + 4 >> 2] = 1071644672;
        if (($2 | 0) != 32) {
         continue
        }
        break;
       };
       HEAP32[$0 + 26176 >> 2] = 0;
       HEAP32[$0 + 26180 >> 2] = 1078525952;
       $1 = $0 + 26192 | 0;
       HEAP32[$1 >> 2] = 0;
       HEAP32[$1 + 4 >> 2] = 1080213504;
       $1 = $0 + 26184 | 0;
       HEAP32[$1 >> 2] = 0;
       HEAP32[$1 + 4 >> 2] = 1079574528;
       return $0;
      }
      $0 = __cxa_find_matching_catch_2() | 0;
      getTempRet0() | 0;
      if (!$1) {
       break label$1
      }
      while (1) {
       $2 = maxiReverbFilters___maxiReverbFilters_28_29($2 + -288 | 0);
       if (($4 | 0) != ($2 | 0)) {
        continue
       }
       break;
      };
      break label$1;
     }
     $0 = __cxa_find_matching_catch_2() | 0;
     getTempRet0() | 0;
     if (!$1) {
      break label$2
     }
     while (1) {
      $2 = maxiReverbFilters___maxiReverbFilters_28_29($2 + -288 | 0);
      if (($6 | 0) != ($2 | 0)) {
       continue
      }
      break;
     };
     break label$2;
    }
    $0 = __cxa_find_matching_catch_2() | 0;
    getTempRet0() | 0;
    while (1) {
     $5 = maxiReverbFilters___maxiReverbFilters_28_29($5 + -288 | 0);
     if (($6 | 0) != ($5 | 0)) {
      continue
     }
     break;
    };
   }
   while (1) {
    $3 = maxiReverbFilters___maxiReverbFilters_28_29($3 + -288 | 0);
    if (($4 | 0) != ($3 | 0)) {
     continue
    }
    break;
   };
  }
  __resumeException($0 | 0);
  abort();
 }
 
 function maxiReverbBase__parallelcomb_28double_2c_20int_2c_20int_29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0;
  $2 = global$0 - 16 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  HEAP32[$2 + 12 >> 2] = 4;
  HEAP32[$0 + 27736 >> 2] = 0;
  HEAP32[$0 + 27740 >> 2] = 0;
  maxiReverbBase__limitnumfilters_28int__29($2 + 12 | 0);
  $3 = HEAP32[$2 + 12 >> 2];
  if (($3 | 0) > 0) {
   while (1) {
    HEAPF64[$0 + 27736 >> 3] = maxiReverbFilters__combfb_28double_2c_20double_2c_20double_29((Math_imul($4, 288) + $0 | 0) + 9280 | 0, $1, HEAPF64[(($4 << 3) + $0 | 0) + 26176 >> 3]) + HEAPF64[$0 + 27736 >> 3];
    $4 = $4 + 1 | 0;
    if (($4 | 0) < ($3 | 0)) {
     continue
    }
    break;
   }
  }
  $1 = HEAPF64[$0 + 27736 >> 3];
  $0 = $2 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
  return $1;
 }
 
 function maxiReverbBase__serialallpass_28double_2c_20int_2c_20int_29($0, $1, $2) {
  var $3 = 0, $4 = 0;
  $3 = global$0 - 16 | 0;
  $4 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  HEAP32[$3 + 12 >> 2] = $2;
  maxiReverbBase__limitnumfilters_28int__29($3 + 12 | 0);
  $2 = 0;
  $4 = HEAP32[$3 + 12 >> 2];
  if (($4 | 0) > 0) {
   while (1) {
    $1 = maxiReverbFilters__allpass_28double_2c_20double_29((Math_imul($2, 288) + $0 | 0) - -64 | 0, $1, HEAPF64[(($2 << 3) + $0 | 0) + 26432 >> 3]);
    $2 = $2 + 1 | 0;
    if (($4 | 0) != ($2 | 0)) {
     continue
    }
    break;
   }
  }
  HEAPF64[$0 + 27712 >> 3] = $1;
  $0 = $3 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
  return $1;
 }
 
 function maxiReverbBase__limitnumfilters_28int__29($0) {
  var $1 = 0;
  label$1 : {
   $1 = $0;
   $0 = HEAP32[$0 >> 2];
   if (($0 | 0) <= 31) {
    if (($0 | 0) > -1) {
     break label$1
    }
    $0 = 0;
   } else {
    $0 = 31
   }
   HEAP32[$1 >> 2] = $0;
  }
 }
 
 function maxiReverbBase__parallellpcomb_28double_2c_20int_2c_20int_29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  $2 = global$0 - 16 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  HEAP32[$2 + 12 >> 2] = 8;
  HEAP32[$0 + 27736 >> 2] = 0;
  HEAP32[$0 + 27740 >> 2] = 0;
  maxiReverbBase__limitnumfilters_28int__29($2 + 12 | 0);
  $5 = HEAP32[$2 + 12 >> 2];
  if (($5 | 0) > 0) {
   while (1) {
    $3 = ($4 << 3) + $0 | 0;
    HEAPF64[$0 + 27736 >> 3] = maxiReverbFilters__lpcombfb_28double_2c_20double_2c_20double_2c_20double_29((Math_imul($4, 288) + $0 | 0) + 9280 | 0, $1, HEAPF64[$3 + 26176 >> 3], HEAPF64[$3 + 26688 >> 3], HEAPF64[$3 + 27200 >> 3]) + HEAPF64[$0 + 27736 >> 3];
    $4 = $4 + 1 | 0;
    if (($4 | 0) < ($5 | 0)) {
     continue
    }
    break;
   }
  }
  $1 = HEAPF64[$0 + 27736 >> 3];
  $0 = $2 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
  return $1;
 }
 
 function maxiReverbBase__setcombtimes_28int__2c_20int_29($0, $1, $2) {
  var $3 = 0, $4 = 0;
  $3 = global$0 - 16 | 0;
  $4 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  HEAP32[$3 + 12 >> 2] = $2;
  maxiReverbBase__limitnumfilters_28int__29($3 + 12 | 0);
  $2 = 0;
  $4 = HEAP32[$3 + 12 >> 2];
  if (($4 | 0) > 0) {
   while (1) {
    HEAPF64[(($2 << 3) + $0 | 0) + 26176 >> 3] = HEAP32[($2 << 2) + $1 >> 2];
    $2 = $2 + 1 | 0;
    if (($4 | 0) != ($2 | 0)) {
     continue
    }
    break;
   }
  }
  $0 = $3 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function maxiReverbBase__setlpcombcutoff_28double__2c_20int_29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
  $2 = global$0 - 16 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  HEAP32[$2 + 12 >> 2] = 8;
  maxiReverbBase__limitnumfilters_28int__29($2 + 12 | 0);
  $3 = 0;
  $5 = HEAP32[$2 + 12 >> 2];
  if (($5 | 0) > 0) {
   while (1) {
    $4 = $3 << 3;
    $6 = ($4 + $0 | 0) + 27200 | 0;
    $4 = $1 + $4 | 0;
    $7 = HEAP32[$4 + 4 >> 2];
    HEAP32[$6 >> 2] = HEAP32[$4 >> 2];
    HEAP32[$6 + 4 >> 2] = $7;
    $3 = $3 + 1 | 0;
    if (($5 | 0) != ($3 | 0)) {
     continue
    }
    break;
   }
  }
  $0 = $2 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function maxiReverbBase__setlpcombcutoffall_28double_29($0, $1) {
  var $2 = 0;
  $1 = Math_max(Math_min($1, 1.0), 0.0);
  while (1) {
   HEAPF64[(($2 << 3) + $0 | 0) + 27200 >> 3] = $1;
   $2 = $2 + 1 | 0;
   if (($2 | 0) != 32) {
    continue
   }
   break;
  };
 }
 
 function maxiReverbBase__setaptimes_28int__2c_20int_29($0, $1, $2) {
  var $3 = 0, $4 = 0;
  $3 = global$0 - 16 | 0;
  $4 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  HEAP32[$3 + 12 >> 2] = $2;
  maxiReverbBase__limitnumfilters_28int__29($3 + 12 | 0);
  $2 = 0;
  $4 = HEAP32[$3 + 12 >> 2];
  if (($4 | 0) > 0) {
   while (1) {
    HEAPF64[(($2 << 3) + $0 | 0) + 26432 >> 3] = HEAP32[($2 << 2) + $1 >> 2];
    $2 = $2 + 1 | 0;
    if (($4 | 0) != ($2 | 0)) {
     continue
    }
    break;
   }
  }
  $0 = $3 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function maxiReverbBase__setcombweights_28double__2c_20int_29($0, $1, $2) {
  maxiReverbBase__setweights_28double__2c_20int_2c_20double__29($1, $2, $0 + 26688 | 0);
 }
 
 function maxiReverbBase__setweights_28double__2c_20int_2c_20double__29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
  $3 = global$0 - 16 | 0;
  $5 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $5;
  HEAP32[$3 + 12 >> 2] = $1;
  maxiReverbBase__limitnumfilters_28int__29($3 + 12 | 0);
  $1 = 0;
  $5 = HEAP32[$3 + 12 >> 2];
  if (($5 | 0) > 0) {
   while (1) {
    $4 = $1 << 3;
    $6 = $4 + $2 | 0;
    $4 = $0 + $4 | 0;
    $7 = HEAP32[$4 + 4 >> 2];
    HEAP32[$6 >> 2] = HEAP32[$4 >> 2];
    HEAP32[$6 + 4 >> 2] = $7;
    $1 = $1 + 1 | 0;
    if (($5 | 0) != ($1 | 0)) {
     continue
    }
    break;
   }
  }
  $0 = $3 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function maxiReverbBase__setcombweightsall_28double_29($0, $1) {
  var $2 = 0;
  $1 = Math_max(Math_min($1, 1.0), 0.0);
  while (1) {
   HEAPF64[(($2 << 3) + $0 | 0) + 26688 >> 3] = $1;
   $2 = $2 + 1 | 0;
   if (($2 | 0) != 32) {
    continue
   }
   break;
  };
 }
 
 function maxiReverbBase__setapweights_28double__2c_20int_29($0, $1, $2) {
  maxiReverbBase__setweights_28double__2c_20int_2c_20double__29($1, $2, $0 + 26944 | 0);
 }
 
 function maxiSatReverb__maxiSatReverb_28_29($0) {
  var $1 = 0, $2 = 0, $3 = 0;
  $1 = global$0 - 96 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  $0 = maxiReverbBase__maxiReverbBase_28_29($0);
  $2 = HEAP32[6927];
  HEAP32[$1 + 88 >> 2] = HEAP32[6926];
  HEAP32[$1 + 92 >> 2] = $2;
  $2 = HEAP32[6925];
  HEAP32[$1 + 80 >> 2] = HEAP32[6924];
  HEAP32[$1 + 84 >> 2] = $2;
  maxiReverbBase__setcombtimes_28int__2c_20int_29($0, $1 + 80 | 0, 4);
  $2 = HEAP32[6935];
  HEAP32[$1 + 72 >> 2] = HEAP32[6934];
  HEAP32[$1 + 76 >> 2] = $2;
  $2 = HEAP32[6933];
  $3 = $1 - -64 | 0;
  HEAP32[$3 >> 2] = HEAP32[6932];
  HEAP32[$3 + 4 >> 2] = $2;
  $2 = HEAP32[6931];
  HEAP32[$1 + 56 >> 2] = HEAP32[6930];
  HEAP32[$1 + 60 >> 2] = $2;
  $2 = HEAP32[6929];
  HEAP32[$1 + 48 >> 2] = HEAP32[6928];
  HEAP32[$1 + 52 >> 2] = $2;
  maxiReverbBase__setcombweights_28double__2c_20int_29($0, $1 + 48 | 0, 4);
  HEAP32[$1 + 40 >> 2] = HEAP32[6938];
  $2 = HEAP32[6937];
  HEAP32[$1 + 32 >> 2] = HEAP32[6936];
  HEAP32[$1 + 36 >> 2] = $2;
  maxiReverbBase__setaptimes_28int__2c_20int_29($0, $1 + 32 | 0, 3);
  $2 = HEAP32[6945];
  HEAP32[$1 + 16 >> 2] = HEAP32[6944];
  HEAP32[$1 + 20 >> 2] = $2;
  $2 = HEAP32[6943];
  HEAP32[$1 + 8 >> 2] = HEAP32[6942];
  HEAP32[$1 + 12 >> 2] = $2;
  $2 = HEAP32[6941];
  HEAP32[$1 >> 2] = HEAP32[6940];
  HEAP32[$1 + 4 >> 2] = $2;
  maxiReverbBase__setapweights_28double__2c_20int_29($0, $1, 3);
  $0 = $1 + 96 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function maxiSatReverb__play_28double_29($0, $1) {
  $0 = $0 | 0;
  $1 = +$1;
  return +maxiReverbBase__serialallpass_28double_2c_20int_2c_20int_29($0, maxiReverbBase__parallelcomb_28double_2c_20int_2c_20int_29($0, $1), 3);
 }
 
 function maxiFreeVerb__maxiFreeVerb_28_29($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
  $1 = global$0 - 208 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  $0 = maxiReverbBase__maxiReverbBase_28_29($0);
  $2 = HEAP32[6955];
  HEAP32[$1 + 200 >> 2] = HEAP32[6954];
  HEAP32[$1 + 204 >> 2] = $2;
  $2 = HEAP32[6953];
  HEAP32[$1 + 192 >> 2] = HEAP32[6952];
  HEAP32[$1 + 196 >> 2] = $2;
  $2 = HEAP32[6951];
  HEAP32[$1 + 184 >> 2] = HEAP32[6950];
  HEAP32[$1 + 188 >> 2] = $2;
  $2 = HEAP32[6949];
  HEAP32[$1 + 176 >> 2] = HEAP32[6948];
  HEAP32[$1 + 180 >> 2] = $2;
  maxiReverbBase__setcombtimes_28int__2c_20int_29($0, $1 + 176 | 0, 8);
  while (1) {
   $2 = $3 << 3;
   $4 = $2 + ($1 + 48 | 0) | 0;
   HEAP32[$4 >> 2] = -1717986918;
   HEAP32[$4 + 4 >> 2] = 1070176665;
   $2 = ($1 + 112 | 0) + $2 | 0;
   HEAP32[$2 >> 2] = -1374389535;
   HEAP32[$2 + 4 >> 2] = 1072357703;
   $3 = $3 + 1 | 0;
   if (($3 | 0) != 8) {
    continue
   }
   break;
  };
  maxiReverbBase__setcombweights_28double__2c_20int_29($0, $1 + 112 | 0, 8);
  maxiReverbBase__setlpcombcutoff_28double__2c_20int_29($0, $1 + 48 | 0);
  $3 = HEAP32[6959];
  HEAP32[$1 + 40 >> 2] = HEAP32[6958];
  HEAP32[$1 + 44 >> 2] = $3;
  $3 = HEAP32[6957];
  HEAP32[$1 + 32 >> 2] = HEAP32[6956];
  HEAP32[$1 + 36 >> 2] = $3;
  maxiReverbBase__setaptimes_28int__2c_20int_29($0, $1 + 32 | 0, 4);
  $3 = HEAP32[6967];
  HEAP32[$1 + 24 >> 2] = HEAP32[6966];
  HEAP32[$1 + 28 >> 2] = $3;
  $3 = HEAP32[6965];
  HEAP32[$1 + 16 >> 2] = HEAP32[6964];
  HEAP32[$1 + 20 >> 2] = $3;
  $3 = HEAP32[6963];
  HEAP32[$1 + 8 >> 2] = HEAP32[6962];
  HEAP32[$1 + 12 >> 2] = $3;
  $3 = HEAP32[6961];
  HEAP32[$1 >> 2] = HEAP32[6960];
  HEAP32[$1 + 4 >> 2] = $3;
  maxiReverbBase__setapweights_28double__2c_20int_29($0, $1, 4);
  $0 = $1 + 208 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function maxiFreeVerb__play_28double_2c_20double_2c_20double_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = +$2;
  $3 = +$3;
  maxiReverbBase__setcombweightsall_28double_29($0, $2 * .1 + .84);
  maxiReverbBase__setlpcombcutoffall_28double_29($0, $3);
  return +maxiReverbBase__serialallpass_28double_2c_20int_2c_20int_29($0, maxiReverbBase__parallellpcomb_28double_2c_20int_2c_20int_29($0, $1), 44);
 }
 
 function point_compare_28void_20const__2c_20void_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $0 = HEAPU16[$0 >> 1];
  $1 = HEAPU16[$1 >> 1];
  return ($0 >>> 0 < $1 >>> 0 ? -1 : $0 >>> 0 > $1 >>> 0) | 0;
 }
 
 function stb_vorbis_close($0) {
  if ($0) {
   vorbis_deinit_28stb_vorbis__29($0);
   setup_free_28stb_vorbis__2c_20void__29($0, $0);
  }
 }
 
 function vorbis_deinit_28stb_vorbis__29($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  if (HEAP32[$0 + 280 >> 2] >= 1) {
   while (1) {
    $5 = HEAP32[$0 + 412 >> 2] + Math_imul($6, 24) | 0;
    $3 = HEAP32[$5 + 16 >> 2];
    if ($3) {
     if (HEAP32[(HEAP32[$0 + 140 >> 2] + Math_imul(HEAPU8[$5 + 13 | 0], 2096) | 0) + 4 >> 2] >= 1) {
      $4 = $5 + 16 | 0;
      $1 = $5 + 13 | 0;
      $2 = 0;
      while (1) {
       setup_free_28stb_vorbis__2c_20void__29($0, HEAP32[($2 << 2) + $3 >> 2]);
       $3 = HEAP32[$4 >> 2];
       $2 = $2 + 1 | 0;
       if (($2 | 0) < HEAP32[(HEAP32[$0 + 140 >> 2] + Math_imul(HEAPU8[$1 | 0], 2096) | 0) + 4 >> 2]) {
        continue
       }
       break;
      };
     }
     setup_free_28stb_vorbis__2c_20void__29($0, $3);
    }
    setup_free_28stb_vorbis__2c_20void__29($0, HEAP32[$5 + 20 >> 2]);
    $6 = $6 + 1 | 0;
    if (($6 | 0) < HEAP32[$0 + 280 >> 2]) {
     continue
    }
    break;
   }
  }
  if (HEAP32[$0 + 140 >> 2]) {
   if (HEAP32[$0 + 136 >> 2] >= 1) {
    $3 = 0;
    while (1) {
     $1 = HEAP32[$0 + 140 >> 2] + Math_imul($3, 2096) | 0;
     setup_free_28stb_vorbis__2c_20void__29($0, HEAP32[$1 + 8 >> 2]);
     setup_free_28stb_vorbis__2c_20void__29($0, HEAP32[$1 + 28 >> 2]);
     setup_free_28stb_vorbis__2c_20void__29($0, HEAP32[$1 + 32 >> 2]);
     setup_free_28stb_vorbis__2c_20void__29($0, HEAP32[$1 + 2084 >> 2]);
     $1 = HEAP32[$1 + 2088 >> 2];
     setup_free_28stb_vorbis__2c_20void__29($0, $1 ? $1 + -4 | 0 : 0);
     $3 = $3 + 1 | 0;
     if (($3 | 0) < HEAP32[$0 + 136 >> 2]) {
      continue
     }
     break;
    };
   }
   setup_free_28stb_vorbis__2c_20void__29($0, HEAP32[$0 + 140 >> 2]);
  }
  setup_free_28stb_vorbis__2c_20void__29($0, HEAP32[$0 + 276 >> 2]);
  setup_free_28stb_vorbis__2c_20void__29($0, HEAP32[$0 + 412 >> 2]);
  $3 = HEAP32[$0 + 420 >> 2];
  if (HEAP32[$0 + 416 >> 2] >= 1) {
   $2 = 0;
   while (1) {
    setup_free_28stb_vorbis__2c_20void__29($0, HEAP32[(Math_imul($2, 40) + $3 | 0) + 4 >> 2]);
    $3 = HEAP32[$0 + 420 >> 2];
    $2 = $2 + 1 | 0;
    if (($2 | 0) < HEAP32[$0 + 416 >> 2]) {
     continue
    }
    break;
   };
  }
  setup_free_28stb_vorbis__2c_20void__29($0, $3);
  if (HEAP32[$0 + 4 >> 2] >= 1) {
   $2 = 0;
   while (1) {
    $1 = ($2 << 2) + $0 | 0;
    setup_free_28stb_vorbis__2c_20void__29($0, HEAP32[$1 + 816 >> 2]);
    setup_free_28stb_vorbis__2c_20void__29($0, HEAP32[$1 + 944 >> 2]);
    setup_free_28stb_vorbis__2c_20void__29($0, HEAP32[$1 + 1012 >> 2]);
    $2 = $2 + 1 | 0;
    if (($2 | 0) < HEAP32[$0 + 4 >> 2]) {
     continue
    }
    break;
   };
  }
  $2 = 0;
  while (1) {
   $1 = $2;
   $4 = ($1 << 2) + $0 | 0;
   setup_free_28stb_vorbis__2c_20void__29($0, HEAP32[$4 + 1084 >> 2]);
   setup_free_28stb_vorbis__2c_20void__29($0, HEAP32[$4 + 1092 >> 2]);
   setup_free_28stb_vorbis__2c_20void__29($0, HEAP32[$4 + 1100 >> 2]);
   setup_free_28stb_vorbis__2c_20void__29($0, HEAP32[$4 + 1108 >> 2]);
   $2 = $1 + 1 | 0;
   if (!$1) {
    continue
   }
   break;
  };
  if (HEAP32[$0 + 28 >> 2]) {
   fclose(HEAP32[$0 + 20 >> 2])
  }
 }
 
 function setup_free_28stb_vorbis__2c_20void__29($0, $1) {
  if (!HEAP32[$0 + 96 >> 2]) {
   dlfree($1)
  }
 }
 
 function error_28stb_vorbis__2c_20STBVorbisError_29($0, $1) {
  HEAP32[$0 + 116 >> 2] = $1;
 }
 
 function is_whole_packet_present_28stb_vorbis__2c_20int_29($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
  $2 = HEAP32[$0 + 32 >> 2];
  label$1 : {
   $1 = HEAP32[$0 + 1396 >> 2];
   label$2 : {
    if (($1 | 0) == -1) {
     $3 = -1;
     $4 = 1;
     break label$2;
    }
    $4 = HEAP32[$0 + 1132 >> 2];
    label$4 : {
     if (($1 | 0) >= ($4 | 0)) {
      break label$4
     }
     $3 = HEAPU8[($0 + $1 | 0) + 1136 | 0];
     $2 = $3 + $2 | 0;
     if (($3 | 0) != 255) {
      break label$4
     }
     while (1) {
      $1 = $1 + 1 | 0;
      $4 = HEAP32[$0 + 1132 >> 2];
      if (($1 | 0) >= ($4 | 0)) {
       break label$4
      }
      $3 = HEAPU8[($0 + $1 | 0) + 1136 | 0];
      $2 = $3 + $2 | 0;
      if (($3 | 0) == 255) {
       continue
      }
      break;
     };
    }
    if (($1 | 0) < ($4 + -1 | 0)) {
     error_28stb_vorbis__2c_20STBVorbisError_29($0, 21);
     return 0;
    }
    if ($2 >>> 0 > HEAPU32[$0 + 40 >> 2]) {
     break label$1
    }
    $3 = ($1 | 0) == ($4 | 0) ? -1 : $1;
    $4 = 0;
   }
   while (1) {
    if (($3 | 0) != -1) {
     return 1
    }
    $3 = -1;
    $1 = 1;
    $6 = HEAP32[$0 + 40 >> 2];
    label$9 : {
     label$10 : {
      if ($2 + 26 >>> 0 >= $6 >>> 0) {
       break label$10
      }
      if (HEAP32[16158] != (HEAPU8[$2 | 0] | HEAPU8[$2 + 1 | 0] << 8 | (HEAPU8[$2 + 2 | 0] << 16 | HEAPU8[$2 + 3 | 0] << 24))) {
       $1 = 21;
       break label$10;
      }
      if (HEAPU8[$2 + 4 | 0]) {
       $1 = 21;
       break label$10;
      }
      label$13 : {
       if ($4) {
        if (!HEAP32[$0 + 1008 >> 2] | !(HEAP8[$2 + 5 | 0] & 1)) {
         break label$13
        }
        $1 = 21;
        break label$10;
       }
       if (HEAP8[$2 + 5 | 0] & 1) {
        break label$13
       }
       $1 = 21;
       break label$10;
      }
      $5 = HEAPU8[$2 + 26 | 0];
      $7 = $2 + 27 | 0;
      $2 = $5 + $7 | 0;
      if ($2 >>> 0 > $6 >>> 0) {
       break label$10
      }
      $3 = 0;
      label$15 : {
       if (!$5) {
        break label$15
       }
       while (1) {
        $1 = HEAPU8[$3 + $7 | 0];
        $2 = $1 + $2 | 0;
        if (($1 | 0) != 255) {
         break label$15
        }
        $3 = $3 + 1 | 0;
        if (($5 | 0) != ($3 | 0)) {
         continue
        }
        break;
       };
       $3 = $5;
      }
      if (($3 | 0) < ($5 + -1 | 0)) {
       $1 = 21;
       break label$10;
      }
      $3 = HEAP32[$0 + 1132 >> 2] == ($3 | 0) ? -1 : $3;
      $1 = 1;
      $5 = 0;
      if ($2 >>> 0 <= $6 >>> 0) {
       break label$9
      }
     }
     error_28stb_vorbis__2c_20STBVorbisError_29($0, $1);
     $1 = 0;
     $5 = $4;
    }
    $4 = $5;
    if ($1) {
     continue
    }
    break;
   };
   return 0;
  }
  error_28stb_vorbis__2c_20STBVorbisError_29($0, 1);
  return 0;
 }
 
 function vorbis_decode_packet_28stb_vorbis__2c_20int__2c_20int__2c_20int__29($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0;
  $4 = global$0 - 16 | 0;
  $5 = $4;
  if ($4 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $5;
  $5 = !vorbis_decode_initial_28stb_vorbis__2c_20int__2c_20int__2c_20int__2c_20int__2c_20int__29($0, $2, $4 + 8 | 0, $3, $4 + 4 | 0, $4 + 12 | 0);
  $6 = 0;
  label$2 : {
   if ($5) {
    break label$2
   }
   $6 = vorbis_decode_packet_rest_28stb_vorbis__2c_20int__2c_20Mode__2c_20int_2c_20int_2c_20int_2c_20int_2c_20int__29($0, $1, (Math_imul(HEAP32[$4 + 12 >> 2], 6) + $0 | 0) + 428 | 0, HEAP32[$2 >> 2], HEAP32[$3 >> 2], HEAP32[$4 + 4 >> 2], $2);
  }
  $5 = $6;
  $0 = $4 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
  return $5;
 }
 
 function get8_packet_28stb_vorbis__29($0) {
  var $1 = 0;
  $1 = get8_packet_raw_28stb_vorbis__29($0);
  HEAP32[$0 + 1412 >> 2] = 0;
  return $1;
 }
 
 function vorbis_finish_frame_28stb_vorbis__2c_20int_2c_20int_2c_20int_29($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = Math_fround(0);
  $5 = HEAP32[$0 + 1008 >> 2];
  label$1 : {
   if (!$5) {
    break label$1
   }
   $9 = get_window_28stb_vorbis__2c_20int_29($0, $5);
   $8 = HEAP32[$0 + 4 >> 2];
   if (($8 | 0) < 1) {
    break label$1
   }
   $10 = ($5 | 0) < 1;
   while (1) {
    if (!$10) {
     $4 = ($6 << 2) + $0 | 0;
     $11 = HEAP32[$4 + 944 >> 2];
     $12 = HEAP32[$4 + 816 >> 2];
     $4 = 0;
     while (1) {
      $7 = $12 + ($2 + $4 << 2) | 0;
      $13 = $7;
      $14 = HEAPF32[$7 >> 2];
      $7 = $4 << 2;
      HEAPF32[$13 >> 2] = Math_fround($14 * HEAPF32[$7 + $9 >> 2]) + Math_fround(HEAPF32[$11 + $7 >> 2] * HEAPF32[$9 + ($5 + ($4 ^ -1) << 2) >> 2]);
      $4 = $4 + 1 | 0;
      if (($5 | 0) != ($4 | 0)) {
       continue
      }
      break;
     };
    }
    $6 = $6 + 1 | 0;
    if (($8 | 0) != ($6 | 0)) {
     continue
    }
    break;
   };
  }
  $9 = HEAP32[$0 + 1008 >> 2];
  $8 = $1 - $3 | 0;
  HEAP32[$0 + 1008 >> 2] = $8;
  $10 = HEAP32[$0 + 4 >> 2];
  if (($10 | 0) >= 1) {
   $6 = 0;
   while (1) {
    if (($1 | 0) > ($3 | 0)) {
     $5 = ($6 << 2) + $0 | 0;
     $11 = HEAP32[$5 + 944 >> 2];
     $12 = HEAP32[$5 + 816 >> 2];
     $4 = 0;
     $5 = $3;
     while (1) {
      HEAP32[$11 + ($4 << 2) >> 2] = HEAP32[$12 + ($5 << 2) >> 2];
      $4 = $4 + 1 | 0;
      $5 = $4 + $3 | 0;
      if (($4 | 0) != ($8 | 0)) {
       continue
      }
      break;
     };
    }
    $6 = $6 + 1 | 0;
    if (($10 | 0) != ($6 | 0)) {
     continue
    }
    break;
   };
  }
  if (!$9) {
   return 0
  }
  $5 = $0;
  $7 = HEAP32[$0 + 1432 >> 2];
  $0 = (($1 | 0) < ($3 | 0) ? $1 : $3) - $2 | 0;
  HEAP32[$5 + 1432 >> 2] = $7 + $0;
  return $0;
 }
 
 function vorbis_decode_initial_28stb_vorbis__2c_20int__2c_20int__2c_20int__2c_20int__2c_20int__29($0, $1, $2, $3, $4, $5) {
  var $6 = 0, $7 = 0, $8 = 0, $9 = 0;
  HEAP32[$0 + 1520 >> 2] = 0;
  HEAP32[$0 + 1524 >> 2] = 0;
  label$1 : {
   label$2 : {
    if (HEAP32[$0 + 112 >> 2]) {
     break label$2
    }
    label$3 : {
     while (1) {
      if (!maybe_start_packet_28stb_vorbis__29($0)) {
       break label$2
      }
      if (!get_bits_28stb_vorbis__2c_20int_29($0, 1)) {
       break label$3
      }
      if (!HEAPU8[$0 + 48 | 0]) {
       while (1) {
        if ((get8_packet_28stb_vorbis__29($0) | 0) != -1) {
         continue
        }
        break;
       };
       if (HEAP32[$0 + 112 >> 2]) {
        break label$2
       }
       continue;
      }
      break;
     };
     error_28stb_vorbis__2c_20STBVorbisError_29($0, 35);
     return 0;
    }
    if (HEAP32[$0 + 100 >> 2] != HEAP32[$0 + 108 >> 2] ? HEAP32[$0 + 96 >> 2] : 0) {
     break label$1
    }
    $7 = get_bits_28stb_vorbis__2c_20int_29($0, ilog_28int_29(HEAP32[$0 + 424 >> 2] + -1 | 0));
    if (($7 | 0) == -1 | ($7 | 0) >= HEAP32[$0 + 424 >> 2]) {
     break label$2
    }
    HEAP32[$5 >> 2] = $7;
    $8 = (Math_imul($7, 6) + $0 | 0) + 428 | 0;
    label$8 : {
     if (HEAPU8[$8 | 0]) {
      $6 = HEAP32[$0 + 132 >> 2];
      $9 = (get_bits_28stb_vorbis__2c_20int_29($0, 1) | 0) != 0;
      $5 = get_bits_28stb_vorbis__2c_20int_29($0, 1);
      break label$8;
     }
     $6 = HEAP32[$0 + 128 >> 2];
     $5 = 0;
    }
    $7 = $6 >> 1;
    $8 = HEAPU8[$8 | 0];
    label$10 : {
     if (!(!$8 | $9)) {
      HEAP32[$1 >> 2] = $6 - HEAP32[$0 + 128 >> 2] >> 2;
      $1 = HEAP32[$0 + 128 >> 2] + $6 >> 2;
      break label$10;
     }
     HEAP32[$1 >> 2] = 0;
     $1 = $7;
    }
    HEAP32[$2 >> 2] = $1;
    label$12 : {
     if (!(!$8 | $5)) {
      $1 = Math_imul($6, 3);
      HEAP32[$3 >> 2] = $1 - HEAP32[$0 + 128 >> 2] >> 2;
      $6 = $1 + HEAP32[$0 + 128 >> 2] >> 2;
      break label$12;
     }
     HEAP32[$3 >> 2] = $7;
    }
    HEAP32[$4 >> 2] = $6;
    $6 = 1;
   }
   return $6;
  }
  __assert_fail(27872, 27928, 2822, 27956);
  abort();
 }
 
 function vorbis_decode_packet_rest_28stb_vorbis__2c_20int__2c_20Mode__2c_20int_2c_20int_2c_20int_2c_20int_2c_20int__29($0, $1, $2, $3, $4, $5, $6) {
  var $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = Math_fround(0), $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = Math_fround(0), $26 = 0, $27 = Math_fround(0), $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
  $12 = global$0 - 2368 | 0;
  $7 = $12;
  if ($7 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $7;
  $22 = HEAP32[$0 + 420 >> 2];
  $16 = HEAPU8[$2 + 1 | 0];
  $26 = $22 + Math_imul($16, 40) | 0;
  $23 = HEAP32[((HEAPU8[$2 | 0] << 2) + $0 | 0) + 120 >> 2];
  label$2 : {
   $7 = HEAP32[$0 + 4 >> 2];
   label$3 : {
    if (($7 | 0) >= 1) {
     $32 = $26 + 4 | 0;
     while (1) {
      $7 = HEAPU8[(HEAP32[$32 >> 2] + Math_imul($19, 3) | 0) + 2 | 0];
      $30 = ($12 + 1344 | 0) + ($19 << 2) | 0;
      HEAP32[$30 >> 2] = 0;
      $7 = HEAPU8[($7 + $26 | 0) + 9 | 0];
      if (!HEAPU16[(($7 << 1) + $0 | 0) + 148 >> 1]) {
       error_28stb_vorbis__2c_20STBVorbisError_29($0, 21);
       $7 = 0;
       break label$3;
      }
      $8 = HEAP32[$0 + 276 >> 2];
      label$7 : {
       label$8 : {
        label$9 : {
         if (!get_bits_28stb_vorbis__2c_20int_29($0, 1)) {
          break label$9
         }
         $13 = 2;
         $15 = HEAP32[(($19 << 2) + $0 | 0) + 1012 >> 2];
         $11 = $8 + Math_imul($7, 1596) | 0;
         $28 = HEAP32[(HEAPU8[$11 + 1588 | 0] << 2) + 28060 >> 2];
         $7 = ilog_28int_29($28) + -1 | 0;
         HEAP16[$15 >> 1] = get_bits_28stb_vorbis__2c_20int_29($0, $7);
         HEAP16[$15 + 2 >> 1] = get_bits_28stb_vorbis__2c_20int_29($0, $7);
         $14 = 0;
         if (HEAPU8[$11 | 0]) {
          while (1) {
           $31 = HEAPU8[($11 + $14 | 0) + 1 | 0];
           $7 = $31 + $11 | 0;
           $20 = HEAPU8[$7 + 33 | 0];
           $8 = 0;
           $21 = HEAPU8[$7 + 49 | 0];
           label$12 : {
            if (!$21) {
             break label$12
            }
            $7 = HEAP32[$0 + 140 >> 2] + Math_imul(HEAPU8[$7 + 65 | 0], 2096) | 0;
            if (HEAP32[$0 + 1412 >> 2] <= 9) {
             prep_huffman_28stb_vorbis__29($0)
            }
            $9 = HEAP32[$0 + 1408 >> 2];
            $8 = HEAP16[($7 + (($9 & 1023) << 1) | 0) + 36 >> 1];
            label$14 : {
             if (($8 | 0) >= 0) {
              $10 = $9;
              $9 = HEAPU8[$8 + HEAP32[$7 + 8 >> 2] | 0];
              HEAP32[$0 + 1408 >> 2] = $10 >>> $9;
              $10 = HEAP32[$0 + 1412 >> 2] - $9 | 0;
              $9 = ($10 | 0) < 0;
              HEAP32[$0 + 1412 >> 2] = $9 ? 0 : $10;
              $8 = $9 ? -1 : $8;
              break label$14;
             }
             $8 = codebook_decode_scalar_raw_28stb_vorbis__2c_20Codebook__29($0, $7);
            }
            if (!HEAPU8[$7 + 23 | 0]) {
             break label$12
            }
            $8 = HEAP32[HEAP32[$7 + 2088 >> 2] + ($8 << 2) >> 2];
           }
           if ($20) {
            $33 = -1 << $21 ^ -1;
            $29 = 0;
            $9 = $13;
            while (1) {
             $7 = 0;
             $10 = HEAP16[(($11 + ($31 << 4) | 0) + (($8 & $33) << 1) | 0) + 82 >> 1];
             label$18 : {
              if (($10 | 0) < 0) {
               break label$18
              }
              $10 = HEAP32[$0 + 140 >> 2] + Math_imul($10, 2096) | 0;
              if (HEAP32[$0 + 1412 >> 2] <= 9) {
               prep_huffman_28stb_vorbis__29($0)
              }
              $17 = HEAP32[$0 + 1408 >> 2];
              $7 = HEAP16[($10 + (($17 & 1023) << 1) | 0) + 36 >> 1];
              label$20 : {
               if (($7 | 0) >= 0) {
                $24 = $17;
                $17 = HEAPU8[$7 + HEAP32[$10 + 8 >> 2] | 0];
                HEAP32[$0 + 1408 >> 2] = $24 >>> $17;
                $24 = HEAP32[$0 + 1412 >> 2] - $17 | 0;
                $17 = ($24 | 0) < 0;
                HEAP32[$0 + 1412 >> 2] = $17 ? 0 : $24;
                $7 = $17 ? -1 : $7;
                break label$20;
               }
               $7 = codebook_decode_scalar_raw_28stb_vorbis__2c_20Codebook__29($0, $10);
              }
              if (!HEAPU8[$10 + 23 | 0]) {
               break label$18
              }
              $7 = HEAP32[HEAP32[$10 + 2088 >> 2] + ($7 << 2) >> 2];
             }
             $8 = $8 >> $21;
             HEAP16[$15 + ($9 << 1) >> 1] = $7;
             $9 = $9 + 1 | 0;
             $29 = $29 + 1 | 0;
             if (($20 | 0) != ($29 | 0)) {
              continue
             }
             break;
            };
            $13 = $13 + $20 | 0;
           }
           $14 = $14 + 1 | 0;
           if ($14 >>> 0 < HEAPU8[$11 | 0]) {
            continue
           }
           break;
          }
         }
         if (HEAP32[$0 + 1412 >> 2] == -1) {
          break label$9
         }
         HEAP16[$12 + 320 >> 1] = 257;
         $8 = 2;
         $9 = HEAP32[$11 + 1592 >> 2];
         if (($9 | 0) <= 2) {
          break label$8
         }
         while (1) {
          $13 = $8 << 1;
          $14 = $13 + $11 | 0;
          $20 = HEAPU8[$14 + 1088 | 0];
          $7 = $20 << 1;
          $10 = $11 + 338 | 0;
          $24 = HEAPU16[$13 + $10 >> 1];
          $21 = HEAPU16[$7 + $10 >> 1];
          $17 = $10;
          $14 = HEAPU8[$14 + 1089 | 0];
          $10 = $14 << 1;
          $7 = predict_point_28int_2c_20int_2c_20int_2c_20int_2c_20int_29($24, $21, HEAPU16[$17 + $10 >> 1], HEAP16[$7 + $15 >> 1], HEAP16[$10 + $15 >> 1]);
          $21 = $13 + $15 | 0;
          $10 = HEAPU16[$21 >> 1];
          label$23 : {
           label$24 : {
            if ($10) {
             HEAP8[$14 + ($12 + 320 | 0) | 0] = 1;
             HEAP8[$20 + ($12 + 320 | 0) | 0] = 1;
             HEAP8[($12 + 320 | 0) + $8 | 0] = 1;
             $14 = $28 - $7 | 0;
             $13 = $10 << 16 >> 16;
             if ((($14 | 0) < ($7 | 0) ? $14 : $7) << 1 <= ($13 | 0)) {
              if (($14 | 0) > ($7 | 0)) {
               break label$23
              }
              $7 = ($10 ^ -1) + $28 | 0;
              break label$24;
             }
             if ($13 & 1) {
              $7 = $7 - ($13 + 1 >>> 1 | 0) | 0;
              break label$24;
             }
             $7 = ($13 >> 1) + $7 | 0;
             break label$24;
            }
            HEAP8[($12 + 320 | 0) + $8 | 0] = 0;
           }
           HEAP16[$21 >> 1] = $7;
          }
          $8 = $8 + 1 | 0;
          if (($9 | 0) != ($8 | 0)) {
           continue
          }
          break;
         };
         break label$8;
        }
        HEAP32[$30 >> 2] = 1;
        break label$7;
       }
       $7 = 0;
       if (($9 | 0) <= 0) {
        break label$7
       }
       while (1) {
        if (!HEAPU8[($12 + 320 | 0) + $7 | 0]) {
         HEAP16[$15 + ($7 << 1) >> 1] = 65535
        }
        $7 = $7 + 1 | 0;
        if (($9 | 0) != ($7 | 0)) {
         continue
        }
        break;
       };
      }
      $19 = $19 + 1 | 0;
      $7 = HEAP32[$0 + 4 >> 2];
      if (($19 | 0) < ($7 | 0)) {
       continue
      }
      break;
     };
    }
    label$30 : {
     if (!(HEAP32[$0 + 100 >> 2] != HEAP32[$0 + 108 >> 2] ? HEAP32[$0 + 96 >> 2] : 0)) {
      memcpy($12 + 320 | 0, $12 + 1344 | 0, $7 << 2);
      $7 = HEAPU16[$26 >> 1];
      if ($7) {
       $9 = $7 >>> 0 > 1 ? $7 : 1;
       $13 = HEAP32[(Math_imul($16, 40) + $22 | 0) + 4 >> 2];
       $7 = 0;
       while (1) {
        $8 = $13 + Math_imul($7, 3) | 0;
        $11 = ($12 + 1344 | 0) + (HEAPU8[$8 | 0] << 2) | 0;
        if (!(HEAP32[($12 + 1344 | 0) + (HEAPU8[$8 + 1 | 0] << 2) >> 2] ? HEAP32[$11 >> 2] : 0)) {
         HEAP32[($12 + 1344 | 0) + (HEAPU8[$8 + 1 | 0] << 2) >> 2] = 0;
         HEAP32[$11 >> 2] = 0;
        }
        $7 = $7 + 1 | 0;
        if (($9 | 0) != ($7 | 0)) {
         continue
        }
        break;
       };
      }
      $13 = $23 >> 1;
      $11 = Math_imul($16, 40) + $22 | 0;
      if (HEAPU8[$11 + 8 | 0]) {
       $19 = $11 + 8 | 0;
       $10 = $11 + 4 | 0;
       $9 = 0;
       while (1) {
        $8 = 0;
        if (HEAP32[$0 + 4 >> 2] >= 1) {
         $14 = HEAP32[$10 >> 2];
         $7 = 0;
         while (1) {
          if (HEAPU8[($14 + Math_imul($7, 3) | 0) + 2 | 0] == ($9 | 0)) {
           $15 = $8 + $12 | 0;
           $20 = $7 << 2;
           label$42 : {
            if (HEAP32[$20 + ($12 + 1344 | 0) >> 2]) {
             HEAP8[$15 | 0] = 1;
             HEAP32[($12 + 256 | 0) + ($8 << 2) >> 2] = 0;
             break label$42;
            }
            HEAP8[$15 | 0] = 0;
            HEAP32[($12 + 256 | 0) + ($8 << 2) >> 2] = HEAP32[($0 + $20 | 0) + 816 >> 2];
           }
           $8 = $8 + 1 | 0;
          }
          $7 = $7 + 1 | 0;
          if (($7 | 0) < HEAP32[$0 + 4 >> 2]) {
           continue
          }
          break;
         };
        }
        decode_residue_28stb_vorbis__2c_20float___2c_20int_2c_20int_2c_20int_2c_20unsigned_20char__29($0, $12 + 256 | 0, $8, $13, HEAPU8[($9 + $11 | 0) + 24 | 0], $12);
        $9 = $9 + 1 | 0;
        if ($9 >>> 0 < HEAPU8[$19 | 0]) {
         continue
        }
        break;
       };
      }
      if (!(HEAP32[$0 + 100 >> 2] != HEAP32[$0 + 108 >> 2] ? HEAP32[$0 + 96 >> 2] : 0)) {
       $8 = HEAPU16[$26 >> 1];
       if ($8) {
        $15 = ($13 | 0) > 1 ? $13 : 1;
        $19 = HEAP32[(Math_imul($16, 40) + $22 | 0) + 4 >> 2];
        $11 = $0 + 816 | 0;
        while (1) {
         $9 = $8;
         $8 = $8 + -1 | 0;
         if (($23 | 0) >= 2) {
          $7 = $19 + Math_imul($8, 3) | 0;
          $10 = HEAP32[$11 + (HEAPU8[$7 + 1 | 0] << 2) >> 2];
          $22 = HEAP32[$11 + (HEAPU8[$7 | 0] << 2) >> 2];
          $7 = 0;
          while (1) {
           $16 = $7 << 2;
           $14 = $16 + $10 | 0;
           $25 = HEAPF32[$14 >> 2];
           $16 = $16 + $22 | 0;
           $18 = HEAPF32[$16 >> 2];
           label$50 : {
            if (!!($18 > Math_fround(0.0))) {
             if (!!($25 > Math_fround(0.0))) {
              $27 = Math_fround($18 - $25);
              break label$50;
             }
             $27 = $18;
             $18 = Math_fround($18 + $25);
             break label$50;
            }
            if (!!($25 > Math_fround(0.0))) {
             $27 = Math_fround($18 + $25);
             break label$50;
            }
            $27 = $18;
            $18 = Math_fround($18 - $25);
           }
           HEAPF32[$16 >> 2] = $18;
           HEAPF32[$14 >> 2] = $27;
           $7 = $7 + 1 | 0;
           if (($15 | 0) != ($7 | 0)) {
            continue
           }
           break;
          };
         }
         if (($9 | 0) > 1) {
          continue
         }
         break;
        };
       }
       if (HEAP32[$0 + 4 >> 2] < 1) {
        break label$30
       }
       $9 = $13 << 2;
       $7 = 0;
       while (1) {
        $11 = $7 << 2;
        $15 = $11 + $0 | 0;
        $8 = $15 + 816 | 0;
        label$55 : {
         if (HEAP32[$11 + ($12 + 320 | 0) >> 2]) {
          memset(HEAP32[$8 >> 2], 0, $9);
          break label$55;
         }
         do_floor_28stb_vorbis__2c_20Mapping__2c_20int_2c_20int_2c_20float__2c_20short__2c_20unsigned_20char__29($0, $26, $7, $23, HEAP32[$8 >> 2], HEAP32[$15 + 1012 >> 2]);
        }
        $7 = $7 + 1 | 0;
        if (($7 | 0) < HEAP32[$0 + 4 >> 2]) {
         continue
        }
        break;
       };
       break label$30;
      }
      __assert_fail(27872, 27928, 3005, 28080);
      abort();
     }
     __assert_fail(27872, 27928, 2972, 28080);
     abort();
    }
    $7 = 0;
    if (HEAP32[$0 + 4 >> 2] > 0) {
     while (1) {
      inverse_mdct_28float__2c_20int_2c_20stb_vorbis__2c_20int_29(HEAP32[(($7 << 2) + $0 | 0) + 816 >> 2], $23, $0, HEAPU8[$2 | 0]);
      $7 = $7 + 1 | 0;
      if (($7 | 0) < HEAP32[$0 + 4 >> 2]) {
       continue
      }
      break;
     }
    }
    flush_packet_28stb_vorbis__29($0);
    label$59 : {
     if (HEAPU8[$0 + 1393 | 0]) {
      HEAP32[$0 + 1076 >> 2] = 0 - $13;
      HEAP8[$0 + 1393 | 0] = 0;
      HEAP32[$0 + 1080 >> 2] = 1;
      HEAP32[$0 + 1428 >> 2] = $23 - $5;
      break label$59;
     }
     $2 = HEAP32[$0 + 1428 >> 2];
     if (!$2) {
      break label$59
     }
     $3 = $2 + $3 | 0;
     HEAP32[$6 >> 2] = $3;
     HEAP32[$0 + 1428 >> 2] = 0;
    }
    if (HEAP32[$0 + 1404 >> 2] == HEAP32[$0 + 1420 >> 2]) {
     if (!(!HEAP32[$0 + 1080 >> 2] | !(HEAPU8[$0 + 1391 | 0] & 4))) {
      $2 = HEAP32[$0 + 1424 >> 2] + ($5 - $23 | 0) | 0;
      $6 = HEAP32[$0 + 1076 >> 2];
      label$63 : {
       if ($2 >>> 0 >= $6 + $5 >>> 0) {
        $7 = 0;
        $2 = 1;
        break label$63;
       }
       $6 = $2 - $6 | 0;
       $2 = ($6 >>> 0 > $2 >>> 0 ? 0 : $6) + $3 | 0;
       HEAP32[$1 >> 2] = $2;
       HEAP32[$0 + 1076 >> 2] = $2 + HEAP32[$0 + 1076 >> 2];
       $7 = 1;
       $2 = 0;
      }
      if (!$2) {
       break label$3
      }
     }
     HEAP32[$0 + 1080 >> 2] = 1;
     HEAP32[$0 + 1076 >> 2] = HEAP32[$0 + 1424 >> 2] + ($3 - $13 | 0);
    }
    if (HEAP32[$0 + 1080 >> 2]) {
     HEAP32[$0 + 1076 >> 2] = HEAP32[$0 + 1076 >> 2] + ($4 - $3 | 0)
    }
    if (HEAP32[$0 + 100 >> 2] != HEAP32[$0 + 108 >> 2] ? HEAP32[$0 + 96 >> 2] : 0) {
     break label$2
    }
    HEAP32[$1 >> 2] = $5;
    $7 = 1;
   }
   $0 = $12 + 2368 | 0;
   if ($0 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $0;
   return $7;
  }
  __assert_fail(27872, 27928, 3114, 28080);
  abort();
 }
 
 function get8_packet_raw_28stb_vorbis__29($0) {
  var $1 = 0;
  label$1 : {
   label$2 : {
    if (!HEAPU8[$0 + 1392 | 0]) {
     $1 = -1;
     if (HEAP32[$0 + 1400 >> 2]) {
      break label$2
     }
     if (!next_segment_28stb_vorbis__29($0)) {
      break label$2
     }
    }
    $1 = HEAPU8[$0 + 1392 | 0];
    if (!$1) {
     break label$1
    }
    HEAP8[$0 + 1392 | 0] = $1 + -1;
    HEAP32[$0 + 1416 >> 2] = HEAP32[$0 + 1416 >> 2] + 1;
    $1 = get8_28stb_vorbis__29($0);
   }
   return $1;
  }
  __assert_fail(27978, 27928, 1154, 27998);
  abort();
 }
 
 function get_window_28stb_vorbis__2c_20int_29($0, $1) {
  $1 = $1 << 1;
  if (($1 | 0) == HEAP32[$0 + 128 >> 2]) {
   return HEAP32[$0 + 1108 >> 2]
  }
  if (($1 | 0) == HEAP32[$0 + 132 >> 2]) {
   return HEAP32[$0 + 1112 >> 2]
  }
  __assert_fail(29364, 27928, 2761, 29366);
  abort();
 }
 
 function vorbis_init_28stb_vorbis__2c_20stb_vorbis_alloc__29($0) {
  $0 = memset($0, 0, 1528);
  HEAP32[$0 + 112 >> 2] = 0;
  HEAP32[$0 + 116 >> 2] = 0;
  HEAP32[$0 + 1436 >> 2] = -1;
  HEAP32[$0 + 140 >> 2] = 0;
  HEAP32[$0 + 28 >> 2] = 0;
  HEAP32[$0 + 32 >> 2] = 0;
  HEAP32[$0 + 20 >> 2] = 0;
 }
 
 function start_decoder_28stb_vorbis__29($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
  $12 = global$0 - 1024 | 0;
  $1 = $12;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  label$2 : {
   if (!start_page_28stb_vorbis__29($0)) {
    break label$2
   }
   $1 = HEAPU8[$0 + 1391 | 0];
   if (!($1 & 2)) {
    error_28stb_vorbis__2c_20STBVorbisError_29($0, 34);
    break label$2;
   }
   if ($1 & 4) {
    error_28stb_vorbis__2c_20STBVorbisError_29($0, 34);
    break label$2;
   }
   if ($1 & 1) {
    error_28stb_vorbis__2c_20STBVorbisError_29($0, 34);
    break label$2;
   }
   if (HEAP32[$0 + 1132 >> 2] != 1) {
    error_28stb_vorbis__2c_20STBVorbisError_29($0, 34);
    break label$2;
   }
   if (HEAPU8[$0 + 1136 | 0] != 30) {
    error_28stb_vorbis__2c_20STBVorbisError_29($0, 34);
    break label$2;
   }
   if ((get8_28stb_vorbis__29($0) | 0) != 1) {
    error_28stb_vorbis__2c_20STBVorbisError_29($0, 34);
    break label$2;
   }
   if (!getn_28stb_vorbis__2c_20unsigned_20char__2c_20int_29($0, $12 + 1018 | 0, 6)) {
    error_28stb_vorbis__2c_20STBVorbisError_29($0, 10);
    break label$2;
   }
   if (!vorbis_validate_28unsigned_20char__29($12 + 1018 | 0)) {
    error_28stb_vorbis__2c_20STBVorbisError_29($0, 34);
    break label$2;
   }
   if (get32_28stb_vorbis__29($0)) {
    error_28stb_vorbis__2c_20STBVorbisError_29($0, 34);
    break label$2;
   }
   $1 = get8_28stb_vorbis__29($0);
   HEAP32[$0 + 4 >> 2] = $1;
   if (!$1) {
    error_28stb_vorbis__2c_20STBVorbisError_29($0, 34);
    break label$2;
   }
   if ($1 >>> 0 >= 17) {
    error_28stb_vorbis__2c_20STBVorbisError_29($0, 5);
    break label$2;
   }
   $1 = get32_28stb_vorbis__29($0);
   HEAP32[$0 >> 2] = $1;
   if (!$1) {
    error_28stb_vorbis__2c_20STBVorbisError_29($0, 34);
    break label$2;
   }
   get32_28stb_vorbis__29($0);
   get32_28stb_vorbis__29($0);
   get32_28stb_vorbis__29($0);
   $3 = get8_28stb_vorbis__29($0);
   $1 = $3 >>> 4 | 0;
   HEAP32[$0 + 132 >> 2] = 1 << $1;
   $4 = $3 & 15;
   HEAP32[$0 + 128 >> 2] = 1 << $4;
   if ($4 + -6 >>> 0 >= 8) {
    error_28stb_vorbis__2c_20STBVorbisError_29($0, 20);
    break label$2;
   }
   if (($3 << 24) + -1610612736 >> 24 <= -1) {
    error_28stb_vorbis__2c_20STBVorbisError_29($0, 20);
    break label$2;
   }
   if ($4 >>> 0 > $1 >>> 0) {
    error_28stb_vorbis__2c_20STBVorbisError_29($0, 20);
    break label$2;
   }
   if (!(get8_28stb_vorbis__29($0) & 1)) {
    error_28stb_vorbis__2c_20STBVorbisError_29($0, 34);
    break label$2;
   }
   if (!start_page_28stb_vorbis__29($0)) {
    break label$2
   }
   if (!start_packet_28stb_vorbis__29($0)) {
    break label$2
   }
   while (1) {
    $1 = next_segment_28stb_vorbis__29($0);
    skip_28stb_vorbis__2c_20int_29($0, $1);
    HEAP8[$0 + 1392 | 0] = 0;
    if ($1) {
     continue
    }
    break;
   };
   if (!start_packet_28stb_vorbis__29($0)) {
    break label$2
   }
   label$20 : {
    if (!HEAPU8[$0 + 48 | 0]) {
     break label$20
    }
    if (is_whole_packet_present_28stb_vorbis__2c_20int_29($0)) {
     break label$20
    }
    if (HEAP32[$0 + 116 >> 2] != 21) {
     break label$2
    }
    HEAP32[$0 + 116 >> 2] = 20;
    break label$2;
   }
   crc32_init_28_29();
   if ((get8_packet_28stb_vorbis__29($0) | 0) == 5) {
    while (1) {
     HEAP8[($12 + 1018 | 0) + $2 | 0] = get8_packet_28stb_vorbis__29($0);
     $2 = $2 + 1 | 0;
     if (($2 | 0) != 6) {
      continue
     }
     break;
    };
    if (!vorbis_validate_28unsigned_20char__29($12 + 1018 | 0)) {
     error_28stb_vorbis__2c_20STBVorbisError_29($0, 20);
     $2 = 0;
     break label$2;
    }
    $1 = get_bits_28stb_vorbis__2c_20int_29($0, 8) + 1 | 0;
    HEAP32[$0 + 136 >> 2] = $1;
    $1 = setup_malloc_28stb_vorbis__2c_20int_29($0, Math_imul($1, 2096));
    HEAP32[$0 + 140 >> 2] = $1;
    if (!$1) {
     error_28stb_vorbis__2c_20STBVorbisError_29($0, 3);
     $2 = 0;
     break label$2;
    }
    memset($1, 0, Math_imul(HEAP32[$0 + 136 >> 2], 2096));
    label$25 : {
     if (HEAP32[$0 + 136 >> 2] < 1) {
      break label$25
     }
     while (1) {
      $4 = HEAP32[$0 + 140 >> 2];
      label$27 : {
       label$28 : {
        if ((get_bits_28stb_vorbis__2c_20int_29($0, 8) & 255) != 66) {
         break label$28
        }
        if ((get_bits_28stb_vorbis__2c_20int_29($0, 8) & 255) != 67) {
         break label$28
        }
        if ((get_bits_28stb_vorbis__2c_20int_29($0, 8) & 255) != 86) {
         break label$28
        }
        $1 = get_bits_28stb_vorbis__2c_20int_29($0, 8);
        $5 = $4 + Math_imul($11, 2096) | 0;
        HEAP32[$5 >> 2] = $1 & 255 | get_bits_28stb_vorbis__2c_20int_29($0, 8) << 8;
        $1 = get_bits_28stb_vorbis__2c_20int_29($0, 8);
        HEAP32[$5 + 4 >> 2] = get_bits_28stb_vorbis__2c_20int_29($0, 8) << 8 & 65280 | $1 & 255 | get_bits_28stb_vorbis__2c_20int_29($0, 8) << 16;
        $8 = $5 + 4 | 0;
        $2 = 0;
        $1 = get_bits_28stb_vorbis__2c_20int_29($0, 1);
        if (!$1) {
         $2 = get_bits_28stb_vorbis__2c_20int_29($0, 1)
        }
        HEAP8[$5 + 23 | 0] = $2;
        $4 = HEAP32[$8 >> 2];
        label$30 : {
         if ($2 & 255) {
          $4 = setup_temp_malloc_28stb_vorbis__2c_20int_29($0, $4);
          break label$30;
         }
         $4 = setup_malloc_28stb_vorbis__2c_20int_29($0, $4);
         HEAP32[$5 + 8 >> 2] = $4;
        }
        label$32 : {
         if (!$4) {
          break label$32
         }
         $7 = $5 + 23 | 0;
         label$33 : {
          if (!$1) {
           $2 = 0;
           $3 = 0;
           if (HEAP32[$8 >> 2] <= 0) {
            break label$33
           }
           while (1) {
            if (HEAPU8[$7 | 0]) {
             $1 = get_bits_28stb_vorbis__2c_20int_29($0, 1)
            } else {
             $1 = 1
            }
            label$36 : {
             if ($1) {
              HEAP8[$2 + $4 | 0] = get_bits_28stb_vorbis__2c_20int_29($0, 5) + 1;
              $3 = $3 + 1 | 0;
              break label$36;
             }
             HEAP8[$2 + $4 | 0] = 255;
            }
            $2 = $2 + 1 | 0;
            if (($2 | 0) < HEAP32[$8 >> 2]) {
             continue
            }
            break;
           };
           break label$33;
          }
          $6 = get_bits_28stb_vorbis__2c_20int_29($0, 5) + 1 | 0;
          $3 = 0;
          while (1) {
           label$40 : {
            $1 = HEAP32[$8 >> 2];
            if (($1 | 0) <= ($3 | 0)) {
             $2 = 0;
             break label$40;
            }
            $2 = get_bits_28stb_vorbis__2c_20int_29($0, ilog_28int_29($1 - $3 | 0));
            $1 = $2 + $3 | 0;
            label$42 : {
             if (($1 | 0) > HEAP32[$8 >> 2]) {
              error_28stb_vorbis__2c_20STBVorbisError_29($0, 20);
              $2 = 1;
              break label$42;
             }
             memset($3 + $4 | 0, $6, $2);
             $6 = $6 + 1 | 0;
             $3 = $1;
             $2 = 0;
            }
            if (!$2) {
             continue
            }
           }
           break;
          };
          if ($2) {
           break label$27
          }
          $3 = 0;
         }
         label$44 : {
          if (!HEAPU8[$7 | 0]) {
           break label$44
          }
          $1 = HEAP32[$8 >> 2];
          if (($3 | 0) < $1 >> 2) {
           break label$44
          }
          if (($1 | 0) > HEAP32[$0 + 16 >> 2]) {
           HEAP32[$0 + 16 >> 2] = $1
          }
          $1 = setup_malloc_28stb_vorbis__2c_20int_29($0, $1);
          HEAP32[$5 + 8 >> 2] = $1;
          memcpy($1, $4, HEAP32[$8 >> 2]);
          setup_temp_free_28stb_vorbis__2c_20void__2c_20unsigned_20long_29($0, $4, HEAP32[$8 >> 2]);
          $4 = HEAP32[$5 + 8 >> 2];
          HEAP8[$7 | 0] = 0;
         }
         $6 = HEAPU8[$7 | 0];
         label$46 : {
          if ($6) {
           break label$46
          }
          $2 = 0;
          $3 = 0;
          $1 = HEAP32[$8 >> 2];
          if (($1 | 0) < 1) {
           break label$46
          }
          while (1) {
           $3 = ((HEAPU8[$2 + $4 | 0] + -11 & 255) >>> 0 < 244) + $3 | 0;
           $2 = $2 + 1 | 0;
           if (($1 | 0) != ($2 | 0)) {
            continue
           }
           break;
          };
         }
         HEAP32[$5 + 2092 >> 2] = $3;
         $10 = $5 + 2092 | 0;
         label$48 : {
          if (!$6) {
           $1 = setup_malloc_28stb_vorbis__2c_20int_29($0, HEAP32[$8 >> 2] << 2);
           HEAP32[$5 + 32 >> 2] = $1;
           $6 = 0;
           if (!$1) {
            break label$32
           }
           break label$48;
          }
          $2 = 0;
          $6 = 0;
          label$50 : {
           label$51 : {
            if ($3) {
             $1 = setup_malloc_28stb_vorbis__2c_20int_29($0, $3);
             HEAP32[$5 + 8 >> 2] = $1;
             if (!$1) {
              break label$51
             }
             $1 = setup_temp_malloc_28stb_vorbis__2c_20int_29($0, HEAP32[$10 >> 2] << 2);
             HEAP32[$5 + 32 >> 2] = $1;
             if (!$1) {
              break label$51
             }
             $6 = setup_temp_malloc_28stb_vorbis__2c_20int_29($0, HEAP32[$10 >> 2] << 2);
             if (!$6) {
              break label$51
             }
            }
            $1 = HEAP32[$8 >> 2] + (HEAP32[$10 >> 2] << 3) | 0;
            if ($1 >>> 0 <= HEAPU32[$0 + 16 >> 2]) {
             break label$50
            }
            HEAP32[$0 + 16 >> 2] = $1;
            break label$50;
           }
           error_28stb_vorbis__2c_20STBVorbisError_29($0, 3);
           $2 = 1;
           $6 = 0;
          }
          if ($2) {
           break label$27
          }
         }
         compute_codewords_28Codebook__2c_20unsigned_20char__2c_20int_2c_20unsigned_20int__29($5, $4, HEAP32[$8 >> 2], $6);
         $1 = HEAP32[$10 >> 2];
         if ($1) {
          HEAP32[$5 + 2084 >> 2] = setup_malloc_28stb_vorbis__2c_20int_29($0, ($1 << 2) + 4 | 0);
          $1 = setup_malloc_28stb_vorbis__2c_20int_29($0, (HEAP32[$10 >> 2] << 2) + 4 | 0);
          HEAP32[$5 + 2088 >> 2] = $1;
          if ($1) {
           HEAP32[$5 + 2088 >> 2] = $1 + 4;
           HEAP32[$1 >> 2] = -1;
          }
          compute_sorted_huffman_28Codebook__2c_20unsigned_20char__2c_20unsigned_20int__29($5, $4, $6);
         }
         if (HEAPU8[$7 | 0]) {
          setup_temp_free_28stb_vorbis__2c_20void__2c_20unsigned_20long_29($0, $6, HEAP32[$10 >> 2] << 2);
          setup_temp_free_28stb_vorbis__2c_20void__2c_20unsigned_20long_29($0, HEAP32[$5 + 32 >> 2], HEAP32[$10 >> 2] << 2);
          setup_temp_free_28stb_vorbis__2c_20void__2c_20unsigned_20long_29($0, $4, HEAP32[$8 >> 2]);
          HEAP32[$5 + 32 >> 2] = 0;
         }
         compute_accelerated_huffman_28Codebook__29($5);
         $1 = get_bits_28stb_vorbis__2c_20int_29($0, 4);
         HEAP8[$5 + 21 | 0] = $1;
         $1 = $1 & 255;
         if ($1 >>> 0 >= 3) {
          break label$28
         }
         if ($1) {
          HEAPF32[$5 + 12 >> 2] = float32_unpack_28unsigned_20int_29(get_bits_28stb_vorbis__2c_20int_29($0, 32));
          HEAPF32[$5 + 16 >> 2] = float32_unpack_28unsigned_20int_29(get_bits_28stb_vorbis__2c_20int_29($0, 32));
          HEAP8[$5 + 20 | 0] = get_bits_28stb_vorbis__2c_20int_29($0, 4) + 1;
          HEAP8[$5 + 22 | 0] = get_bits_28stb_vorbis__2c_20int_29($0, 1);
          $3 = HEAP32[$5 >> 2];
          $4 = HEAP32[$8 >> 2];
          $1 = $5;
          $2 = $1;
          $17 = $1 + 21 | 0;
          label$57 : {
           if (HEAPU8[$17 | 0] == 1) {
            $4 = lookup1_values_28int_2c_20int_29($4, $3);
            break label$57;
           }
           $4 = Math_imul($3, $4);
          }
          HEAP32[$2 + 24 >> 2] = $4;
          label$59 : {
           label$60 : {
            label$61 : {
             $14 = setup_temp_malloc_28stb_vorbis__2c_20int_29($0, $4 << 1);
             if ($14) {
              $3 = 0;
              $15 = $5 + 24 | 0;
              $2 = HEAP32[$15 >> 2];
              if (($2 | 0) <= 0) {
               break label$60
              }
              $4 = $5 + 20 | 0;
              break label$61;
             }
             error_28stb_vorbis__2c_20STBVorbisError_29($0, 3);
             $2 = 1;
             break label$59;
            }
            while (1) {
             $1 = get_bits_28stb_vorbis__2c_20int_29($0, HEAPU8[$4 | 0]);
             if (($1 | 0) == -1) {
              $2 = 1;
              setup_temp_free_28stb_vorbis__2c_20void__2c_20unsigned_20long_29($0, $14, HEAP32[$15 >> 2] << 1);
              error_28stb_vorbis__2c_20STBVorbisError_29($0, 20);
              break label$59;
             }
             HEAP16[$14 + ($3 << 1) >> 1] = $1;
             $3 = $3 + 1 | 0;
             $2 = HEAP32[$15 >> 2];
             if (($3 | 0) < ($2 | 0)) {
              continue
             }
             break;
            };
           }
           $20 = $5 + 16 | 0;
           $21 = $5 + 12 | 0;
           label$65 : {
            if (HEAPU8[$17 | 0] == 1) {
             $18 = HEAPU8[$7 | 0];
             label$67 : {
              label$68 : {
               if ($18) {
                $2 = HEAP32[$10 >> 2];
                if ($2) {
                 break label$68
                }
                $2 = 21;
                break label$67;
               }
               $2 = HEAP32[$8 >> 2];
              }
              $19 = setup_malloc_28stb_vorbis__2c_20int_29($0, Math_imul(HEAP32[$5 >> 2], $2) << 2);
              HEAP32[$5 + 28 >> 2] = $19;
              if (!$19) {
               $2 = 1;
               setup_temp_free_28stb_vorbis__2c_20void__2c_20unsigned_20long_29($0, $14, HEAP32[$15 >> 2] << 1);
               error_28stb_vorbis__2c_20STBVorbisError_29($0, 3);
               break label$67;
              }
              $16 = HEAP32[($18 ? $10 : $8) >> 2];
              if (($16 | 0) >= 1) {
               $9 = $5 + 2088 | 0;
               $7 = HEAP32[$5 >> 2];
               $1 = 0;
               while (1) {
                $10 = $18 ? HEAP32[HEAP32[$9 >> 2] + ($1 << 2) >> 2] : $1;
                if (($7 | 0) >= 1) {
                 $2 = 1;
                 $6 = HEAP32[$5 >> 2];
                 $8 = ($6 | 0) > 1 ? $6 : 1;
                 $13 = HEAP32[$15 >> 2];
                 $3 = 0;
                 $4 = $7;
                 while (1) {
                  HEAPF32[(Math_imul($1, $4) + $3 << 2) + $19 >> 2] = Math_fround(HEAPF32[$20 >> 2] * Math_fround(HEAPU16[$14 + ((($10 | 0) / ($2 | 0) >>> 0) % ($13 >>> 0) << 1) >> 1])) + HEAPF32[$21 >> 2];
                  $2 = Math_imul($2, $13);
                  $4 = $6;
                  $3 = $3 + 1 | 0;
                  if (($8 | 0) != ($3 | 0)) {
                   continue
                  }
                  break;
                 };
                }
                $1 = $1 + 1 | 0;
                if (($16 | 0) != ($1 | 0)) {
                 continue
                }
                break;
               };
              }
              setup_temp_free_28stb_vorbis__2c_20void__2c_20unsigned_20long_29($0, $14, HEAP32[$15 >> 2] << 1);
              HEAP8[$17 | 0] = 2;
              $2 = 0;
             }
             if (!$2 | ($2 | 0) == 21) {
              break label$65
             }
             break label$59;
            }
            HEAP32[$5 + 28 >> 2] = setup_malloc_28stb_vorbis__2c_20int_29($0, $2 << 2);
            $4 = HEAP32[$15 >> 2];
            if (($4 | 0) >= 1) {
             $1 = HEAP32[$5 + 28 >> 2];
             $2 = 0;
             while (1) {
              HEAPF32[$1 + ($2 << 2) >> 2] = Math_fround(HEAPF32[$20 >> 2] * Math_fround(HEAPU16[$14 + ($2 << 1) >> 1])) + HEAPF32[$21 >> 2];
              $2 = $2 + 1 | 0;
              if (($4 | 0) != ($2 | 0)) {
               continue
              }
              break;
             };
            }
            setup_temp_free_28stb_vorbis__2c_20void__2c_20unsigned_20long_29($0, $14, $4 << 1);
           }
           $2 = 0;
           if (HEAPU8[$17 | 0] != 2) {
            break label$59
           }
           $6 = $5 + 22 | 0;
           if (!HEAPU8[$6 | 0]) {
            break label$59
           }
           $3 = HEAP32[$15 >> 2];
           if (($3 | 0) >= 2) {
            $4 = HEAP32[$5 + 28 >> 2];
            $1 = HEAP32[$4 >> 2];
            $2 = 1;
            while (1) {
             HEAP32[$4 + ($2 << 2) >> 2] = $1;
             $2 = $2 + 1 | 0;
             if (($3 | 0) != ($2 | 0)) {
              continue
             }
             break;
            };
           }
           $2 = 0;
           HEAP8[$6 | 0] = 0;
          }
          if ($2) {
           break label$27
          }
         }
         $2 = 0;
         break label$27;
        }
        error_28stb_vorbis__2c_20STBVorbisError_29($0, 3);
        $2 = 1;
        break label$27;
       }
       error_28stb_vorbis__2c_20STBVorbisError_29($0, 20);
       $2 = 1;
      }
      if (!$2) {
       $11 = $11 + 1 | 0;
       if (($11 | 0) >= HEAP32[$0 + 136 >> 2]) {
        break label$25
       }
       continue;
      }
      break;
     };
     $2 = 0;
     break label$2;
    }
    label$81 : {
     $1 = get_bits_28stb_vorbis__2c_20int_29($0, 6) + 1 & 255;
     if (!$1) {
      break label$81
     }
     while (1) {
      if (!get_bits_28stb_vorbis__2c_20int_29($0, 16)) {
       $22 = $22 + 1 | 0;
       if (($1 | 0) != ($22 | 0)) {
        continue
       }
       break label$81;
      }
      break;
     };
     error_28stb_vorbis__2c_20STBVorbisError_29($0, 20);
     $2 = 0;
     break label$2;
    }
    $1 = get_bits_28stb_vorbis__2c_20int_29($0, 6) + 1 | 0;
    HEAP32[$0 + 144 >> 2] = $1;
    HEAP32[$0 + 276 >> 2] = setup_malloc_28stb_vorbis__2c_20int_29($0, Math_imul($1, 1596));
    label$84 : {
     if (HEAP32[$0 + 144 >> 2] < 1) {
      $10 = 0;
      break label$84;
     }
     $5 = 0;
     $10 = 0;
     while (1) {
      $4 = ($5 << 1) + $0 | 0;
      $1 = get_bits_28stb_vorbis__2c_20int_29($0, 16);
      HEAP16[$4 + 148 >> 1] = $1;
      $1 = $1 & 65535;
      if ($1 >>> 0 >= 2) {
       error_28stb_vorbis__2c_20STBVorbisError_29($0, 20);
       $2 = 0;
       break label$2;
      }
      if (!$1) {
       $3 = HEAP32[$0 + 276 >> 2] + Math_imul($5, 1596) | 0;
       HEAP8[$3 | 0] = get_bits_28stb_vorbis__2c_20int_29($0, 8);
       HEAP16[$3 + 2 >> 1] = get_bits_28stb_vorbis__2c_20int_29($0, 16);
       HEAP16[$3 + 4 >> 1] = get_bits_28stb_vorbis__2c_20int_29($0, 16);
       HEAP8[$3 + 6 | 0] = get_bits_28stb_vorbis__2c_20int_29($0, 6);
       HEAP8[$3 + 7 | 0] = get_bits_28stb_vorbis__2c_20int_29($0, 8);
       $4 = $3 + 8 | 0;
       $1 = (get_bits_28stb_vorbis__2c_20int_29($0, 4) & 255) + 1 | 0;
       HEAP8[$4 | 0] = $1;
       if (($1 | 0) == ($1 & 255)) {
        $1 = $3 + 9 | 0;
        $2 = 0;
        while (1) {
         HEAP8[$1 + $2 | 0] = get_bits_28stb_vorbis__2c_20int_29($0, 8);
         $2 = $2 + 1 | 0;
         if ($2 >>> 0 < HEAPU8[$4 | 0]) {
          continue
         }
         break;
        };
       }
       error_28stb_vorbis__2c_20STBVorbisError_29($0, 4);
       $2 = 0;
       break label$2;
      }
      $9 = HEAP32[$0 + 276 >> 2] + Math_imul($5, 1596) | 0;
      $1 = get_bits_28stb_vorbis__2c_20int_29($0, 5);
      HEAP8[$9 | 0] = $1;
      $3 = 0;
      $2 = -1;
      if ($1 & 255) {
       while (1) {
        $4 = $3 + $9 | 0;
        $1 = get_bits_28stb_vorbis__2c_20int_29($0, 4);
        HEAP8[$4 + 1 | 0] = $1;
        $1 = $1 & 255;
        $2 = ($1 | 0) > ($2 | 0) ? $1 : $2;
        $3 = $3 + 1 | 0;
        if ($3 >>> 0 < HEAPU8[$9 | 0]) {
         continue
        }
        break;
       }
      }
      $11 = 0;
      label$93 : {
       label$94 : {
        if (($2 | 0) >= 0) {
         while (1) {
          $3 = $9 + $11 | 0;
          HEAP8[$3 + 33 | 0] = get_bits_28stb_vorbis__2c_20int_29($0, 3) + 1;
          $4 = $3 + 49 | 0;
          $1 = get_bits_28stb_vorbis__2c_20int_29($0, 2);
          HEAP8[$4 | 0] = $1;
          if ($1 & 255) {
           $1 = get_bits_28stb_vorbis__2c_20int_29($0, 8);
           HEAP8[$3 + 65 | 0] = $1;
           if (($1 & 255) >= HEAP32[$0 + 136 >> 2]) {
            break label$94
           }
          }
          $3 = 0;
          if (HEAPU8[$4 | 0] != 31) {
           while (1) {
            $13 = ($9 + ($11 << 4) | 0) + ($3 << 1) | 0;
            $1 = get_bits_28stb_vorbis__2c_20int_29($0, 8) + -1 | 0;
            HEAP16[$13 + 82 >> 1] = $1;
            if (HEAP32[$0 + 136 >> 2] <= $1 << 16 >> 16) {
             break label$94
            }
            $3 = $3 + 1 | 0;
            if (($3 | 0) < 1 << HEAPU8[$4 | 0]) {
             continue
            }
            break;
           }
          }
          $1 = ($2 | 0) != ($11 | 0);
          $11 = $11 + 1 | 0;
          if ($1) {
           continue
          }
          break;
         }
        }
        HEAP8[$9 + 1588 | 0] = get_bits_28stb_vorbis__2c_20int_29($0, 2) + 1;
        $4 = get_bits_28stb_vorbis__2c_20int_29($0, 4);
        HEAP32[$9 + 1592 >> 2] = 2;
        $1 = 0;
        HEAP16[$9 + 338 >> 1] = 0;
        HEAP8[$9 + 1589 | 0] = $4;
        HEAP16[$9 + 340 >> 1] = 1 << ($4 & 255);
        $8 = $9 + 1592 | 0;
        if (HEAPU8[$9 | 0]) {
         $7 = $9 + 1589 | 0;
         while (1) {
          $3 = 0;
          $6 = ($9 + HEAPU8[($1 + $9 | 0) + 1 | 0] | 0) + 33 | 0;
          if (HEAPU8[$6 | 0]) {
           while (1) {
            $2 = get_bits_28stb_vorbis__2c_20int_29($0, HEAPU8[$7 | 0]);
            $4 = HEAP32[$8 >> 2];
            HEAP16[($9 + ($4 << 1) | 0) + 338 >> 1] = $2;
            HEAP32[$8 >> 2] = $4 + 1;
            $3 = $3 + 1 | 0;
            if ($3 >>> 0 < HEAPU8[$6 | 0]) {
             continue
            }
            break;
           }
          }
          $1 = $1 + 1 | 0;
          if ($1 >>> 0 < HEAPU8[$9 | 0]) {
           continue
          }
          break;
         };
        }
        $3 = 0;
        $2 = HEAP32[$8 >> 2];
        if (($2 | 0) > 0) {
         while (1) {
          $4 = HEAPU16[($9 + ($3 << 1) | 0) + 338 >> 1];
          $1 = ($12 + 16 | 0) + ($3 << 2) | 0;
          HEAP16[$1 + 2 >> 1] = $3;
          HEAP16[$1 >> 1] = $4;
          $3 = $3 + 1 | 0;
          if (($2 | 0) != ($3 | 0)) {
           continue
          }
          break;
         }
        }
        qsort($12 + 16 | 0, $2, 1532);
        $3 = 0;
        if (HEAP32[$8 >> 2] > 0) {
         while (1) {
          HEAP8[($3 + $9 | 0) + 838 | 0] = HEAPU8[(($12 + 16 | 0) + ($3 << 2) | 0) + 2 | 0];
          $3 = $3 + 1 | 0;
          if (($3 | 0) < HEAP32[$8 >> 2]) {
           continue
          }
          break;
         }
        }
        $3 = 2;
        $7 = HEAP32[$8 >> 2];
        if (($7 | 0) > 2) {
         $4 = $9 + 338 | 0;
         while (1) {
          neighbors_28unsigned_20short__2c_20int_2c_20int__2c_20int__29($4, $3, $12 + 12 | 0, $12 + 8 | 0);
          $1 = $9 + ($3 << 1) | 0;
          HEAP8[$1 + 1088 | 0] = HEAP32[$12 + 12 >> 2];
          HEAP8[$1 + 1089 | 0] = HEAP32[$12 + 8 >> 2];
          $3 = $3 + 1 | 0;
          $7 = HEAP32[$8 >> 2];
          if (($3 | 0) < ($7 | 0)) {
           continue
          }
          break;
         };
        }
        $10 = ($7 | 0) > ($10 | 0) ? $7 : $10;
        $1 = 1;
        break label$93;
       }
       error_28stb_vorbis__2c_20STBVorbisError_29($0, 20);
       $1 = 0;
      }
      if (!$1) {
       $2 = 0;
       break label$2;
      }
      $5 = $5 + 1 | 0;
      if (($5 | 0) < HEAP32[$0 + 144 >> 2]) {
       continue
      }
      break;
     };
    }
    $1 = get_bits_28stb_vorbis__2c_20int_29($0, 6) + 1 | 0;
    HEAP32[$0 + 280 >> 2] = $1;
    HEAP32[$0 + 412 >> 2] = setup_malloc_28stb_vorbis__2c_20int_29($0, Math_imul($1, 24));
    if (HEAP32[$0 + 280 >> 2] >= 1) {
     $9 = 0;
     while (1) {
      $4 = HEAP32[$0 + 412 >> 2];
      $3 = ($9 << 1) + $0 | 0;
      $1 = get_bits_28stb_vorbis__2c_20int_29($0, 16);
      HEAP16[$3 + 284 >> 1] = $1;
      if (($1 & 65535) >>> 0 >= 3) {
       error_28stb_vorbis__2c_20STBVorbisError_29($0, 20);
       $2 = 0;
       break label$2;
      }
      $6 = $4 + Math_imul($9, 24) | 0;
      HEAP32[$6 >> 2] = get_bits_28stb_vorbis__2c_20int_29($0, 24);
      HEAP32[$6 + 4 >> 2] = get_bits_28stb_vorbis__2c_20int_29($0, 24);
      HEAP32[$6 + 8 >> 2] = get_bits_28stb_vorbis__2c_20int_29($0, 24) + 1;
      HEAP8[$6 + 12 | 0] = get_bits_28stb_vorbis__2c_20int_29($0, 6) + 1;
      HEAP8[$6 + 13 | 0] = get_bits_28stb_vorbis__2c_20int_29($0, 8);
      $16 = $6 + 12 | 0;
      $2 = 0;
      $3 = HEAPU8[$6 + 12 | 0];
      if ($3) {
       while (1) {
        $4 = get_bits_28stb_vorbis__2c_20int_29($0, 3);
        $3 = ($12 + 16 | 0) + $2 | 0;
        if (get_bits_28stb_vorbis__2c_20int_29($0, 1)) {
         $1 = get_bits_28stb_vorbis__2c_20int_29($0, 5)
        } else {
         $1 = 0
        }
        HEAP8[$3 | 0] = $4 + ($1 << 3);
        $2 = $2 + 1 | 0;
        $3 = HEAPU8[$16 | 0];
        if ($2 >>> 0 < $3 >>> 0) {
         continue
        }
        break;
       }
      }
      HEAP32[$6 + 20 >> 2] = setup_malloc_28stb_vorbis__2c_20int_29($0, $3 << 4);
      if (HEAPU8[$16 | 0]) {
       $3 = $6 + 20 | 0;
       $11 = 0;
       while (1) {
        $1 = HEAPU8[($12 + 16 | 0) + $11 | 0];
        $2 = 0;
        while (1) {
         label$121 : {
          if ($1 >>> $2 & 1) {
           $4 = get_bits_28stb_vorbis__2c_20int_29($0, 8);
           HEAP16[(HEAP32[$3 >> 2] + ($11 << 4) | 0) + ($2 << 1) >> 1] = $4;
           if (HEAP32[$0 + 136 >> 2] > $4 << 16 >> 16) {
            break label$121
           }
           error_28stb_vorbis__2c_20STBVorbisError_29($0, 20);
           $2 = 0;
           break label$2;
          }
          HEAP16[(HEAP32[$3 >> 2] + ($11 << 4) | 0) + ($2 << 1) >> 1] = 65535;
         }
         $2 = $2 + 1 | 0;
         if (($2 | 0) != 8) {
          continue
         }
         break;
        };
        $11 = $11 + 1 | 0;
        if ($11 >>> 0 < HEAPU8[$16 | 0]) {
         continue
        }
        break;
       };
      }
      $8 = $6 + 13 | 0;
      $4 = setup_malloc_28stb_vorbis__2c_20int_29($0, HEAP32[(HEAP32[$0 + 140 >> 2] + Math_imul(HEAPU8[$8 | 0], 2096) | 0) + 4 >> 2] << 2);
      HEAP32[$6 + 16 >> 2] = $4;
      if (!$4) {
       error_28stb_vorbis__2c_20STBVorbisError_29($0, 3);
       $2 = 0;
       break label$2;
      }
      $1 = 0;
      memset($4, 0, HEAP32[(HEAP32[$0 + 140 >> 2] + Math_imul(HEAPU8[$8 | 0], 2096) | 0) + 4 >> 2] << 2);
      $2 = HEAP32[$0 + 140 >> 2];
      $3 = HEAPU8[$8 | 0];
      if (HEAP32[($2 + Math_imul($3, 2096) | 0) + 4 >> 2] >= 1) {
       $5 = $6 + 16 | 0;
       while (1) {
        $2 = HEAP32[Math_imul($3, 2096) + $2 >> 2];
        $4 = setup_malloc_28stb_vorbis__2c_20int_29($0, $2);
        $7 = $1 << 2;
        HEAP32[$7 + HEAP32[$5 >> 2] >> 2] = $4;
        $3 = $1;
        if (($2 | 0) >= 1) {
         while (1) {
          $4 = $2 + -1 | 0;
          HEAP8[$4 + HEAP32[$7 + HEAP32[$5 >> 2] >> 2] | 0] = ($3 | 0) % HEAPU8[$16 | 0];
          $3 = ($3 | 0) / HEAPU8[$16 | 0] | 0;
          $6 = ($2 | 0) > 1;
          $2 = $4;
          if ($6) {
           continue
          }
          break;
         }
        }
        $1 = $1 + 1 | 0;
        $2 = HEAP32[$0 + 140 >> 2];
        $3 = HEAPU8[$8 | 0];
        if (($1 | 0) < HEAP32[($2 + Math_imul($3, 2096) | 0) + 4 >> 2]) {
         continue
        }
        break;
       };
      }
      $9 = $9 + 1 | 0;
      if (($9 | 0) < HEAP32[$0 + 280 >> 2]) {
       continue
      }
      break;
     };
    }
    $1 = get_bits_28stb_vorbis__2c_20int_29($0, 6) + 1 | 0;
    HEAP32[$0 + 416 >> 2] = $1;
    HEAP32[$0 + 420 >> 2] = setup_malloc_28stb_vorbis__2c_20int_29($0, Math_imul($1, 40));
    $4 = 0;
    label$128 : {
     if (HEAP32[$0 + 416 >> 2] <= 0) {
      break label$128
     }
     while (1) {
      $1 = HEAP32[$0 + 420 >> 2];
      label$130 : {
       label$131 : {
        if (get_bits_28stb_vorbis__2c_20int_29($0, 16)) {
         break label$131
        }
        $5 = $1 + Math_imul($4, 40) | 0;
        HEAP32[$5 + 4 >> 2] = setup_malloc_28stb_vorbis__2c_20int_29($0, Math_imul(HEAP32[$0 + 4 >> 2], 3));
        $2 = 1;
        if (get_bits_28stb_vorbis__2c_20int_29($0, 1)) {
         $2 = get_bits_28stb_vorbis__2c_20int_29($0, 4)
        }
        $7 = $5 + 4 | 0;
        HEAP8[$5 + 8 | 0] = $2;
        label$133 : {
         if (get_bits_28stb_vorbis__2c_20int_29($0, 1)) {
          $1 = (get_bits_28stb_vorbis__2c_20int_29($0, 8) & 65535) + 1 | 0;
          HEAP16[$5 >> 1] = $1;
          $2 = 0;
          if (($1 | 0) != ($1 & 65535)) {
           break label$133
          }
          while (1) {
           $3 = get_bits_28stb_vorbis__2c_20int_29($0, ilog_28int_29(HEAP32[$0 + 4 >> 2]) + -1 | 0);
           $1 = Math_imul($2, 3);
           HEAP8[$1 + HEAP32[$7 >> 2] | 0] = $3;
           $6 = get_bits_28stb_vorbis__2c_20int_29($0, ilog_28int_29(HEAP32[$0 + 4 >> 2]) + -1 | 0);
           $3 = $1 + HEAP32[$7 >> 2] | 0;
           HEAP8[$3 + 1 | 0] = $6;
           $1 = HEAP32[$0 + 4 >> 2];
           $3 = HEAPU8[$3 | 0];
           if (($1 | 0) <= ($3 | 0)) {
            break label$131
           }
           $13 = $1;
           $1 = $6 & 255;
           if (($13 | 0) <= ($1 | 0) | ($1 | 0) == ($3 | 0)) {
            break label$131
           }
           $2 = $2 + 1 | 0;
           if ($2 >>> 0 < HEAPU16[$5 >> 1]) {
            continue
           }
           break;
          };
          break label$133;
         }
         HEAP16[$5 >> 1] = 0;
        }
        if (get_bits_28stb_vorbis__2c_20int_29($0, 2)) {
         break label$131
        }
        $3 = HEAP32[$0 + 4 >> 2];
        $6 = $5 + 8 | 0;
        label$136 : {
         if (HEAPU8[$6 | 0] <= 1) {
          if (($3 | 0) < 1) {
           break label$136
          }
          $1 = HEAP32[$7 >> 2];
          $2 = 0;
          while (1) {
           HEAP8[($1 + Math_imul($2, 3) | 0) + 2 | 0] = 0;
           $2 = $2 + 1 | 0;
           if (($3 | 0) != ($2 | 0)) {
            continue
           }
           break;
          };
          break label$136;
         }
         $2 = 0;
         if (($3 | 0) <= 0) {
          break label$136
         }
         while (1) {
          $1 = get_bits_28stb_vorbis__2c_20int_29($0, 4);
          HEAP8[(HEAP32[$7 >> 2] + Math_imul($2, 3) | 0) + 2 | 0] = $1;
          if (HEAPU8[$6 | 0] <= ($1 & 255) >>> 0) {
           break label$131
          }
          $2 = $2 + 1 | 0;
          if (($2 | 0) < HEAP32[$0 + 4 >> 2]) {
           continue
          }
          break;
         };
        }
        $7 = 0;
        $2 = 1;
        if (!HEAPU8[$6 | 0]) {
         break label$130
        }
        while (1) {
         get_bits_28stb_vorbis__2c_20int_29($0, 8);
         $1 = $5 + $7 | 0;
         $3 = $1 + 9 | 0;
         HEAP8[$3 | 0] = get_bits_28stb_vorbis__2c_20int_29($0, 8);
         $13 = $1;
         $1 = get_bits_28stb_vorbis__2c_20int_29($0, 8);
         HEAP8[$13 + 24 | 0] = $1;
         if (HEAP32[$0 + 144 >> 2] <= HEAPU8[$3 | 0] | ($1 & 255) >= HEAP32[$0 + 280 >> 2]) {
          break label$131
         }
         $7 = $7 + 1 | 0;
         if ($7 >>> 0 < HEAPU8[$6 | 0]) {
          continue
         }
         break;
        };
        break label$130;
       }
       error_28stb_vorbis__2c_20STBVorbisError_29($0, 20);
       $2 = 0;
      }
      if ($2) {
       $4 = $4 + 1 | 0;
       if (($4 | 0) >= HEAP32[$0 + 416 >> 2]) {
        break label$128
       }
       continue;
      }
      break;
     };
     $2 = 0;
     break label$2;
    }
    $1 = get_bits_28stb_vorbis__2c_20int_29($0, 6) + 1 | 0;
    HEAP32[$0 + 424 >> 2] = $1;
    $3 = 0;
    label$142 : {
     if (($1 | 0) <= 0) {
      break label$142
     }
     while (1) {
      $1 = Math_imul($3, 6) + $0 | 0;
      HEAP8[$1 + 428 | 0] = get_bits_28stb_vorbis__2c_20int_29($0, 1);
      $2 = $1 + 430 | 0;
      HEAP16[$2 >> 1] = get_bits_28stb_vorbis__2c_20int_29($0, 16);
      $4 = $1 + 432 | 0;
      HEAP16[$4 >> 1] = get_bits_28stb_vorbis__2c_20int_29($0, 16);
      $13 = $1;
      $1 = get_bits_28stb_vorbis__2c_20int_29($0, 8);
      HEAP8[$13 + 429 | 0] = $1;
      if (HEAPU16[$2 >> 1]) {
       error_28stb_vorbis__2c_20STBVorbisError_29($0, 20);
       $2 = 0;
       break label$2;
      }
      if (HEAPU16[$4 >> 1]) {
       error_28stb_vorbis__2c_20STBVorbisError_29($0, 20);
       $2 = 0;
       break label$2;
      }
      if (($1 & 255) < HEAP32[$0 + 416 >> 2]) {
       $3 = $3 + 1 | 0;
       if (($3 | 0) >= HEAP32[$0 + 424 >> 2]) {
        break label$142
       }
       continue;
      }
      break;
     };
     error_28stb_vorbis__2c_20STBVorbisError_29($0, 20);
     $2 = 0;
     break label$2;
    }
    flush_packet_28stb_vorbis__29($0);
    $2 = 0;
    HEAP32[$0 + 1008 >> 2] = 0;
    if (HEAP32[$0 + 4 >> 2] >= 1) {
     $1 = $10 << 1;
     $3 = 0;
     while (1) {
      $4 = ($3 << 2) + $0 | 0;
      HEAP32[$4 + 816 >> 2] = setup_malloc_28stb_vorbis__2c_20int_29($0, HEAP32[$0 + 132 >> 2] << 2);
      HEAP32[$4 + 944 >> 2] = setup_malloc_28stb_vorbis__2c_20int_29($0, HEAP32[$0 + 132 >> 2] << 1 & 2147483646);
      HEAP32[$4 + 1012 >> 2] = setup_malloc_28stb_vorbis__2c_20int_29($0, $1);
      $3 = $3 + 1 | 0;
      if (($3 | 0) < HEAP32[$0 + 4 >> 2]) {
       continue
      }
      break;
     };
    }
    if (!init_blocksize_28stb_vorbis__2c_20int_2c_20int_29($0, 0, HEAP32[$0 + 128 >> 2])) {
     break label$2
    }
    if (!init_blocksize_28stb_vorbis__2c_20int_2c_20int_29($0, 1, HEAP32[$0 + 132 >> 2])) {
     break label$2
    }
    HEAP32[$0 + 120 >> 2] = HEAP32[$0 + 128 >> 2];
    $1 = HEAP32[$0 + 132 >> 2];
    HEAP32[$0 + 124 >> 2] = $1;
    $7 = $1 << 1 & 2147483646;
    $6 = HEAP32[$0 + 280 >> 2];
    $1 = 4;
    label$149 : {
     if (($6 | 0) < 1) {
      break label$149
     }
     $4 = HEAP32[$0 + 412 >> 2];
     $3 = 0;
     while (1) {
      $1 = $4 + Math_imul($3, 24) | 0;
      $1 = (HEAP32[$1 + 4 >> 2] - HEAP32[$1 >> 2] >>> 0) / HEAPU32[$1 + 8 >> 2] | 0;
      $2 = ($1 | 0) > ($2 | 0) ? $1 : $2;
      $3 = $3 + 1 | 0;
      if (($6 | 0) != ($3 | 0)) {
       continue
      }
      break;
     };
     $1 = ($2 << 2) + 4 | 0;
    }
    $2 = 1;
    HEAP8[$0 + 1393 | 0] = 1;
    $1 = Math_imul($1, HEAP32[$0 + 4 >> 2]);
    $4 = $7 >>> 0 > $1 >>> 0 ? $7 : $1;
    HEAP32[$0 + 12 >> 2] = $4;
    label$151 : {
     label$152 : {
      if (!HEAP32[$0 + 96 >> 2]) {
       break label$152
      }
      $1 = HEAP32[$0 + 108 >> 2];
      if (($1 | 0) != HEAP32[$0 + 100 >> 2]) {
       break label$151
      }
      if (($4 + HEAP32[$0 + 104 >> 2] | 0) + 1528 >>> 0 <= $1 >>> 0) {
       break label$152
      }
      error_28stb_vorbis__2c_20STBVorbisError_29($0, 3);
      $2 = 0;
      break label$2;
     }
     HEAP32[$0 + 52 >> 2] = stb_vorbis_get_file_offset($0);
     break label$2;
    }
    __assert_fail(29377, 27928, 3764, 29433);
    abort();
   }
   error_28stb_vorbis__2c_20STBVorbisError_29($0, 20);
  }
  $0 = $12 + 1024 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
  return $2;
 }
 
 function start_page_28stb_vorbis__29($0) {
  if (!capture_pattern_28stb_vorbis__29($0)) {
   error_28stb_vorbis__2c_20STBVorbisError_29($0, 30);
   return 0;
  }
  return start_page_no_capturepattern_28stb_vorbis__29($0);
 }
 
 function get8_28stb_vorbis__29($0) {
  var $1 = 0;
  $1 = HEAP32[$0 + 32 >> 2];
  label$1 : {
   label$2 : {
    if ($1) {
     if ($1 >>> 0 >= HEAPU32[$0 + 40 >> 2]) {
      break label$2
     }
     HEAP32[$0 + 32 >> 2] = $1 + 1;
     $1 = HEAPU8[$1 | 0];
     break label$1;
    }
    $1 = fgetc(HEAP32[$0 + 20 >> 2]);
    if (($1 | 0) != -1) {
     break label$1
    }
   }
   HEAP32[$0 + 112 >> 2] = 1;
   $1 = 0;
  }
  return $1 & 255;
 }
 
 function getn_28stb_vorbis__2c_20unsigned_20char__2c_20int_29($0, $1, $2) {
  var $3 = 0;
  $3 = HEAP32[$0 + 32 >> 2];
  label$1 : {
   label$2 : {
    if ($3) {
     if ($2 + $3 >>> 0 > HEAPU32[$0 + 40 >> 2]) {
      break label$2
     }
     memcpy($1, $3, $2);
     HEAP32[$0 + 32 >> 2] = HEAP32[$0 + 32 >> 2] + $2;
     return 1;
    }
    $3 = 1;
    if ((fread($1, $2, 1, HEAP32[$0 + 20 >> 2]) | 0) == 1) {
     break label$1
    }
   }
   HEAP32[$0 + 112 >> 2] = 1;
   $3 = 0;
  }
  return $3;
 }
 
 function vorbis_validate_28unsigned_20char__29($0) {
  return !memcmp($0, 64636, 6);
 }
 
 function get32_28stb_vorbis__29($0) {
  return get8_28stb_vorbis__29($0) | get8_28stb_vorbis__29($0) << 8 | get8_28stb_vorbis__29($0) << 16 | get8_28stb_vorbis__29($0) << 24;
 }
 
 function start_packet_28stb_vorbis__29($0) {
  var $1 = 0;
  label$1 : {
   label$2 : {
    while (1) {
     if (HEAP32[$0 + 1396 >> 2] != -1) {
      break label$2
     }
     if (!start_page_28stb_vorbis__29($0)) {
      break label$1
     }
     if (!(HEAP8[$0 + 1391 | 0] & 1)) {
      continue
     }
     break;
    };
    error_28stb_vorbis__2c_20STBVorbisError_29($0, 32);
    return 0;
   }
   HEAP32[$0 + 1412 >> 2] = 0;
   HEAP32[$0 + 1416 >> 2] = 0;
   HEAP32[$0 + 1400 >> 2] = 0;
   HEAP8[$0 + 1392 | 0] = 0;
   $1 = 1;
  }
  return $1;
 }
 
 function next_segment_28stb_vorbis__29($0) {
  var $1 = 0, $2 = 0, $3 = 0;
  label$1 : {
   if (!HEAP32[$0 + 1400 >> 2]) {
    label$3 : {
     if (HEAP32[$0 + 1396 >> 2] != -1) {
      break label$3
     }
     HEAP32[$0 + 1404 >> 2] = HEAP32[$0 + 1132 >> 2] + -1;
     if (!start_page_28stb_vorbis__29($0)) {
      HEAP32[$0 + 1400 >> 2] = 1;
      return 0;
     }
     if (HEAP8[$0 + 1391 | 0] & 1) {
      break label$3
     }
     error_28stb_vorbis__2c_20STBVorbisError_29($0, 32);
     return 0;
    }
    $1 = HEAP32[$0 + 1396 >> 2];
    $3 = $1 + 1 | 0;
    HEAP32[$0 + 1396 >> 2] = $3;
    $2 = HEAPU8[($0 + $1 | 0) + 1136 | 0];
    if (($2 | 0) != 255) {
     HEAP32[$0 + 1404 >> 2] = $1;
     HEAP32[$0 + 1400 >> 2] = 1;
    }
    if (($3 | 0) >= HEAP32[$0 + 1132 >> 2]) {
     HEAP32[$0 + 1396 >> 2] = -1
    }
    if (HEAPU8[$0 + 1392 | 0]) {
     break label$1
    }
    HEAP8[$0 + 1392 | 0] = $2;
   }
   return $2;
  }
  __assert_fail(28014, 27928, 1136, 28035);
  abort();
 }
 
 function skip_28stb_vorbis__2c_20int_29($0, $1) {
  var $2 = 0;
  label$1 : {
   $2 = HEAP32[$0 + 32 >> 2];
   if ($2) {
    $1 = $1 + $2 | 0;
    HEAP32[$0 + 32 >> 2] = $1;
    if ($1 >>> 0 < HEAPU32[$0 + 40 >> 2]) {
     break label$1
    }
    HEAP32[$0 + 112 >> 2] = 1;
    return;
   }
   $2 = ftell(HEAP32[$0 + 20 >> 2]);
   fseek(HEAP32[$0 + 20 >> 2], $1 + $2 | 0, 0);
  }
 }
 
 function crc32_init_28_29() {
  var $0 = 0, $1 = 0, $2 = 0;
  while (1) {
   $1 = $0 << 24;
   $2 = 0;
   while (1) {
    $1 = $1 >> 31 & 79764919 ^ $1 << 1;
    $2 = $2 + 1 | 0;
    if (($2 | 0) != 8) {
     continue
    }
    break;
   };
   HEAP32[($0 << 2) + 65344 >> 2] = $1;
   $0 = $0 + 1 | 0;
   if (($0 | 0) != 256) {
    continue
   }
   break;
  };
 }
 
 function get_bits_28stb_vorbis__2c_20int_29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0;
  label$1 : {
   $2 = HEAP32[$0 + 1412 >> 2];
   $3 = 0;
   label$2 : {
    if (($2 | 0) < 0) {
     break label$2
    }
    label$3 : {
     if (($2 | 0) >= ($1 | 0)) {
      break label$3
     }
     if (($1 | 0) >= 25) {
      return get_bits_28stb_vorbis__2c_20int_29($0, 24) + (get_bits_28stb_vorbis__2c_20int_29($0, $1 + -24 | 0) << 24) | 0
     }
     if (!$2) {
      HEAP32[$0 + 1408 >> 2] = 0
     }
     if (HEAP32[$0 + 1412 >> 2] >= ($1 | 0)) {
      break label$3
     }
     while (1) {
      $3 = get8_packet_raw_28stb_vorbis__29($0);
      if (($3 | 0) == -1) {
       break label$1
      }
      $2 = HEAP32[$0 + 1412 >> 2];
      $4 = $2 + 8 | 0;
      HEAP32[$0 + 1412 >> 2] = $4;
      HEAP32[$0 + 1408 >> 2] = HEAP32[$0 + 1408 >> 2] + ($3 << $2);
      if (($4 | 0) < ($1 | 0)) {
       continue
      }
      break;
     };
    }
    $2 = HEAP32[$0 + 1412 >> 2];
    $3 = 0;
    if (($2 | 0) < 0) {
     break label$2
    }
    HEAP32[$0 + 1412 >> 2] = $2 - $1;
    $2 = $0;
    $0 = HEAP32[$0 + 1408 >> 2];
    HEAP32[$2 + 1408 >> 2] = $0 >>> $1;
    $3 = $0 & (-1 << $1 ^ -1);
   }
   return $3;
  }
  HEAP32[$0 + 1412 >> 2] = -1;
  return 0;
 }
 
 function setup_malloc_28stb_vorbis__2c_20int_29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0;
  $1 = $1 + 3 & -4;
  HEAP32[$0 + 8 >> 2] = $1 + HEAP32[$0 + 8 >> 2];
  $3 = HEAP32[$0 + 96 >> 2];
  label$1 : {
   if ($3) {
    $4 = HEAP32[$0 + 104 >> 2];
    $1 = $1 + $4 | 0;
    $2 = 0;
    if (($1 | 0) > HEAP32[$0 + 108 >> 2]) {
     break label$1
    }
    HEAP32[$0 + 104 >> 2] = $1;
    return $3 + $4 | 0;
   }
   if (!$1) {
    return 0
   }
   $2 = dlmalloc($1);
  }
  return $2;
 }
 
 function setup_temp_malloc_28stb_vorbis__2c_20int_29($0, $1) {
  var $2 = 0, $3 = 0;
  $1 = $1 + 3 & -4;
  $3 = HEAP32[$0 + 96 >> 2];
  label$1 : {
   if ($3) {
    $1 = HEAP32[$0 + 108 >> 2] - $1 | 0;
    $2 = 0;
    if (($1 | 0) < HEAP32[$0 + 104 >> 2]) {
     break label$1
    }
    HEAP32[$0 + 108 >> 2] = $1;
    return $1 + $3 | 0;
   }
   $2 = dlmalloc($1);
  }
  return $2;
 }
 
 function ilog_28int_29($0) {
  if ($0 >>> 0 <= 16383) {
   if ($0 >>> 0 <= 15) {
    return HEAP8[$0 + 28048 | 0]
   }
   if ($0 >>> 0 <= 511) {
    return HEAP8[($0 >> 5) + 28048 | 0] + 5 | 0
   }
   return HEAP8[($0 >> 10) + 28048 | 0] + 10 | 0;
  }
  if ($0 >>> 0 <= 16777215) {
   if ($0 >>> 0 <= 524287) {
    return HEAP8[($0 >> 15) + 28048 | 0] + 15 | 0
   }
   return HEAP8[($0 >> 20) + 28048 | 0] + 20 | 0;
  }
  if ($0 >>> 0 <= 536870911) {
   return HEAP8[($0 >> 25) + 28048 | 0] + 25 | 0
  }
  return ($0 | 0) >= 0 ? HEAP8[($0 >> 30) + 28048 | 0] + 30 | 0 : 0;
 }
 
 function setup_temp_free_28stb_vorbis__2c_20void__2c_20unsigned_20long_29($0, $1, $2) {
  if (HEAP32[$0 + 96 >> 2]) {
   HEAP32[$0 + 108 >> 2] = HEAP32[$0 + 108 >> 2] + ($2 + 3 & -4);
   return;
  }
  dlfree($1);
 }
 
 function compute_codewords_28Codebook__2c_20unsigned_20char__2c_20int_2c_20unsigned_20int__29($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
  $4 = global$0 - 128 | 0;
  $5 = $4;
  if ($4 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $5;
  $5 = 0;
  $7 = memset($4, 0, 128);
  label$2 : {
   if (($2 | 0) < 1) {
    break label$2
   }
   while (1) {
    if (HEAPU8[$1 + $5 | 0] != 255) {
     break label$2
    }
    $5 = $5 + 1 | 0;
    if (($5 | 0) != ($2 | 0)) {
     continue
    }
    break;
   };
   $5 = $2;
  }
  label$4 : {
   label$5 : {
    label$6 : {
     if (($2 | 0) == ($5 | 0)) {
      if (!HEAP32[$0 + 2092 >> 2]) {
       break label$6
      }
      __assert_fail(29447, 27928, 684, 29470);
      abort();
     }
     $4 = $1 + $5 | 0;
     add_entry_28Codebook__2c_20unsigned_20int_2c_20int_2c_20int_2c_20int_2c_20unsigned_20int__29($0, 0, $5, 0, HEAPU8[$4 | 0], $3);
     $4 = HEAPU8[$4 | 0];
     if ($4) {
      $6 = $4 >>> 0 > 1 ? $4 : 1;
      $4 = 1;
      while (1) {
       HEAP32[($4 << 2) + $7 >> 2] = 1 << 32 - $4;
       $8 = ($4 | 0) == ($6 | 0);
       $4 = $4 + 1 | 0;
       if (!$8) {
        continue
       }
       break;
      };
     }
     $8 = 1;
     $6 = $5 + 1 | 0;
     if (($6 | 0) >= ($2 | 0)) {
      break label$6
     }
     while (1) {
      $9 = $1 + $6 | 0;
      $4 = HEAPU8[$9 | 0];
      $5 = $4;
      label$11 : {
       label$12 : {
        if (!$4) {
         break label$12
        }
        $5 = $4;
        if (($4 | 0) == 255) {
         break label$11
        }
        while (1) {
         if (HEAP32[($5 << 2) + $7 >> 2]) {
          break label$12
         }
         $10 = ($5 | 0) > 1;
         $5 = $5 + -1 | 0;
         if ($10) {
          continue
         }
         break;
        };
        $5 = 0;
       }
       if (!$5) {
        break label$5
       }
       $11 = ($5 << 2) + $7 | 0;
       $10 = HEAP32[$11 >> 2];
       HEAP32[$11 >> 2] = 0;
       add_entry_28Codebook__2c_20unsigned_20int_2c_20int_2c_20int_2c_20int_2c_20unsigned_20int__29($0, bit_reverse_28unsigned_20int_29($10), $6, $8, $4, $3);
       $8 = $8 + 1 | 0;
       $4 = HEAPU8[$9 | 0];
       if (($5 | 0) >= ($4 | 0)) {
        break label$11
       }
       while (1) {
        $9 = ($4 << 2) + $7 | 0;
        if (HEAP32[$9 >> 2]) {
         break label$4
        }
        HEAP32[$9 >> 2] = $10 + (1 << 32 - $4);
        $4 = $4 + -1 | 0;
        if (($4 | 0) > ($5 | 0)) {
         continue
        }
        break;
       };
      }
      $6 = $6 + 1 | 0;
      if (($6 | 0) != ($2 | 0)) {
       continue
      }
      break;
     };
    }
    $0 = $7 + 128 | 0;
    if ($0 >>> 0 < global$2 >>> 0) {
     __handle_stack_overflow()
    }
    global$0 = $0;
    return;
   }
   __assert_fail(29364, 27928, 705, 29470);
   abort();
  }
  __assert_fail(29488, 27928, 712, 29470);
  abort();
 }
 
 function compute_sorted_huffman_28Codebook__2c_20unsigned_20char__2c_20unsigned_20int__29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
  label$1 : {
   if (HEAPU8[$0 + 23 | 0]) {
    if (HEAP32[$0 + 2092 >> 2] < 1) {
     break label$1
    }
    $5 = HEAP32[$0 + 2084 >> 2];
    $3 = HEAP32[$0 + 32 >> 2];
    while (1) {
     $6 = $4 << 2;
     HEAP32[$6 + $5 >> 2] = bit_reverse_28unsigned_20int_29(HEAP32[$3 + $6 >> 2]);
     $4 = $4 + 1 | 0;
     if (($4 | 0) < HEAP32[$0 + 2092 >> 2]) {
      continue
     }
     break;
    };
    break label$1;
   }
   label$4 : {
    if (HEAP32[$0 + 4 >> 2] < 1) {
     break label$4
    }
    while (1) {
     if (include_in_sort_28Codebook__2c_20unsigned_20char_29($0, HEAPU8[$1 + $4 | 0])) {
      HEAP32[HEAP32[$0 + 2084 >> 2] + ($3 << 2) >> 2] = bit_reverse_28unsigned_20int_29(HEAP32[HEAP32[$0 + 32 >> 2] + ($4 << 2) >> 2]);
      $3 = $3 + 1 | 0;
     }
     $4 = $4 + 1 | 0;
     if (($4 | 0) < HEAP32[$0 + 4 >> 2]) {
      continue
     }
     break;
    };
   }
   if (HEAP32[$0 + 2092 >> 2] == ($3 | 0)) {
    break label$1
   }
   __assert_fail(29506, 27928, 773, 29529);
   abort();
  }
  qsort(HEAP32[$0 + 2084 >> 2], HEAP32[$0 + 2092 >> 2], 1533);
  HEAP32[HEAP32[$0 + 2084 >> 2] + (HEAP32[$0 + 2092 >> 2] << 2) >> 2] = -1;
  label$8 : {
   $8 = HEAP32[(HEAPU8[$0 + 23 | 0] ? 2092 : 4) + $0 >> 2];
   if (($8 | 0) >= 1) {
    $5 = 0;
    while (1) {
     $4 = $5;
     $3 = $0;
     if (HEAPU8[$0 + 23 | 0]) {
      $4 = HEAP32[($5 << 2) + $2 >> 2]
     }
     $9 = HEAPU8[$1 + $4 | 0];
     label$11 : {
      if (!include_in_sort_28Codebook__2c_20unsigned_20char_29($3, $9)) {
       break label$11
      }
      $10 = $5 << 2;
      $6 = bit_reverse_28unsigned_20int_29(HEAP32[$10 + HEAP32[$0 + 32 >> 2] >> 2]);
      $4 = 0;
      $3 = HEAP32[$0 + 2092 >> 2];
      if (($3 | 0) >= 2) {
       $13 = HEAP32[$0 + 2084 >> 2];
       while (1) {
        $7 = $3 >> 1;
        $11 = $7 + $4 | 0;
        $12 = HEAPU32[($11 << 2) + $13 >> 2] > $6 >>> 0;
        $4 = $12 ? $4 : $11;
        $3 = $12 ? $7 : $3 - $7 | 0;
        if (($3 | 0) > 1) {
         continue
        }
        break;
       };
      }
      $3 = $4 << 2;
      if (HEAP32[$3 + HEAP32[$0 + 2084 >> 2] >> 2] != ($6 | 0)) {
       break label$8
      }
      if (HEAPU8[$0 + 23 | 0]) {
       HEAP32[$3 + HEAP32[$0 + 2088 >> 2] >> 2] = HEAP32[$2 + $10 >> 2];
       HEAP8[HEAP32[$0 + 8 >> 2] + $4 | 0] = $9;
       break label$11;
      }
      HEAP32[$3 + HEAP32[$0 + 2088 >> 2] >> 2] = $5;
     }
     $5 = $5 + 1 | 0;
     if (($8 | 0) != ($5 | 0)) {
      continue
     }
     break;
    };
   }
   return;
  }
  __assert_fail(29552, 27928, 803, 29529);
  abort();
 }
 
 function compute_accelerated_huffman_28Codebook__29($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  memset($0 + 36 | 0, 255, 2048);
  $3 = HEAPU8[$0 + 23 | 0];
  $1 = HEAP32[($3 ? 2092 : 4) + $0 >> 2];
  if (($1 | 0) >= 1) {
   $1 = ($1 | 0) < 32767 ? $1 : 32767;
   $5 = ($1 | 0) > 1 ? $1 : 1;
   $6 = HEAP32[$0 + 8 >> 2];
   while (1) {
    $4 = $2 + $6 | 0;
    label$3 : {
     if (HEAPU8[$4 | 0] > 10) {
      break label$3
     }
     label$4 : {
      if ($3) {
       $1 = bit_reverse_28unsigned_20int_29(HEAP32[HEAP32[$0 + 2084 >> 2] + ($2 << 2) >> 2]);
       break label$4;
      }
      $1 = HEAP32[HEAP32[$0 + 32 >> 2] + ($2 << 2) >> 2];
     }
     if ($1 >>> 0 > 1023) {
      break label$3
     }
     while (1) {
      HEAP16[(($1 << 1) + $0 | 0) + 36 >> 1] = $2;
      $1 = (1 << HEAPU8[$4 | 0]) + $1 | 0;
      if ($1 >>> 0 < 1024) {
       continue
      }
      break;
     };
    }
    $2 = $2 + 1 | 0;
    if (($5 | 0) != ($2 | 0)) {
     continue
    }
    break;
   };
  }
 }
 
 function float32_unpack_28unsigned_20int_29($0) {
  var $1 = 0.0;
  $1 = +(($0 & 2097151) >>> 0);
  return scalbnf(Math_fround(($0 | 0) < 0 ? -$1 : $1), ($0 >>> 21 & 1023) + -788 | 0);
 }
 
 function lookup1_values_28int_2c_20int_29($0, $1) {
  var $2 = 0, $3 = Math_fround(0), $4 = 0.0, $5 = 0;
  $3 = Math_fround(Math_floor(expf(Math_fround(logf(Math_fround($0 | 0)) / Math_fround($1 | 0)))));
  label$2 : {
   if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
    $2 = ~~$3;
    break label$2;
   }
   $2 = -2147483648;
  }
  $5 = $2;
  $4 = Math_floor(std____2___MetaBase__28std__is_arithmetic_float___value_29_20___20_28std__is_arithmetic_int___value_29____EnableIfImpl_std____2____promote_float_2c_20int_2c_20void__20___type_20pow_float_2c_20int__28float_2c_20int_29(Math_fround(Math_fround($2 | 0) + Math_fround(1.0)), $1));
  label$4 : {
   if (Math_abs($4) < 2147483648.0) {
    $2 = ~~$4;
    break label$4;
   }
   $2 = -2147483648;
  }
  $2 = $5 + (($2 | 0) <= ($0 | 0)) | 0;
  $3 = Math_fround($2 | 0);
  label$1 : {
   if (std____2___MetaBase__28std__is_arithmetic_float___value_29_20___20_28std__is_arithmetic_int___value_29____EnableIfImpl_std____2____promote_float_2c_20int_2c_20void__20___type_20pow_float_2c_20int__28float_2c_20int_29(Math_fround($3 + Math_fround(1.0)), $1) > +($0 | 0)) {
    $4 = Math_floor(std____2___MetaBase__28std__is_arithmetic_float___value_29_20___20_28std__is_arithmetic_int___value_29____EnableIfImpl_std____2____promote_float_2c_20int_2c_20void__20___type_20pow_float_2c_20int__28float_2c_20int_29($3, $1));
    label$7 : {
     if (Math_abs($4) < 2147483648.0) {
      $1 = ~~$4;
      break label$7;
     }
     $1 = -2147483648;
    }
    if (($1 | 0) > ($0 | 0)) {
     break label$1
    }
    return $2;
   }
   __assert_fail(29614, 27928, 828, 29646);
   abort();
  }
  __assert_fail(29661, 27928, 829, 29646);
  abort();
 }
 
 function neighbors_28unsigned_20short__2c_20int_2c_20int__2c_20int__29($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  if (($1 | 0) >= 1) {
   $6 = ($1 << 1) + $0 | 0;
   $7 = -1;
   $8 = 65536;
   while (1) {
    $4 = HEAPU16[($5 << 1) + $0 >> 1];
    if (!(($7 | 0) >= ($4 | 0) | $4 >>> 0 >= HEAPU16[$6 >> 1])) {
     HEAP32[$2 >> 2] = $5;
     $7 = $4;
    }
    if (!(($8 | 0) <= ($4 | 0) | $4 >>> 0 <= HEAPU16[$6 >> 1])) {
     HEAP32[$3 >> 2] = $5;
     $8 = $4;
    }
    $5 = $5 + 1 | 0;
    if (($5 | 0) != ($1 | 0)) {
     continue
    }
    break;
   };
  }
 }
 
 function flush_packet_28stb_vorbis__29($0) {
  while (1) {
   if ((get8_packet_raw_28stb_vorbis__29($0) | 0) != -1) {
    continue
   }
   break;
  };
 }
 
 function init_blocksize_28stb_vorbis__2c_20int_2c_20int_29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
  $3 = ($1 << 2) + $0 | 0;
  $4 = $3 + 1084 | 0;
  $6 = $2 << 1 & -4;
  HEAP32[$4 >> 2] = setup_malloc_28stb_vorbis__2c_20int_29($0, $6);
  $5 = $3 + 1092 | 0;
  HEAP32[$5 >> 2] = setup_malloc_28stb_vorbis__2c_20int_29($0, $6);
  $7 = $3 + 1100 | 0;
  $3 = setup_malloc_28stb_vorbis__2c_20int_29($0, $2 & -4);
  HEAP32[$7 >> 2] = $3;
  folding_inner0 : {
   label$1 : {
    $4 = HEAP32[$4 >> 2];
    if (!(!$4 | !$3)) {
     $5 = HEAP32[$5 >> 2];
     if ($5) {
      break label$1
     }
    }
    break folding_inner0;
   }
   compute_twiddle_factors_28int_2c_20float__2c_20float__2c_20float__29($2, $4, $5, $3);
   $3 = ($1 << 2) + $0 | 0;
   $4 = $3 + 1108 | 0;
   $1 = setup_malloc_28stb_vorbis__2c_20int_29($0, $6);
   HEAP32[$4 >> 2] = $1;
   if (!$1) {
    break folding_inner0
   }
   compute_window_28int_2c_20float__29($2, $1);
   $3 = $3 + 1116 | 0;
   $1 = setup_malloc_28stb_vorbis__2c_20int_29($0, $2 >> 3 << 1);
   HEAP32[$3 >> 2] = $1;
   if (!$1) {
    break folding_inner0
   }
   compute_bitreverse_28int_2c_20unsigned_20short__29($2, $1);
   return 1;
  }
  error_28stb_vorbis__2c_20STBVorbisError_29($0, 3);
  return 0;
 }
 
 function stb_vorbis_get_file_offset($0) {
  var $1 = 0;
  if (HEAPU8[$0 + 48 | 0]) {
   $0 = 0
  } else {
   $1 = HEAP32[$0 + 32 >> 2];
   if ($1) {
    return $1 - HEAP32[$0 + 36 >> 2] | 0
   }
   $0 = ftell(HEAP32[$0 + 20 >> 2]) - HEAP32[$0 + 24 >> 2] | 0;
  }
  return $0;
 }
 
 function vorbis_pump_first_frame_28stb_vorbis__29($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  if (vorbis_decode_packet_28stb_vorbis__2c_20int__2c_20int__2c_20int__29($0, $1 + 12 | 0, $1 + 4 | 0, $1 + 8 | 0)) {
   vorbis_finish_frame_28stb_vorbis__2c_20int_2c_20int_2c_20int_29($0, HEAP32[$1 + 12 >> 2], HEAP32[$1 + 4 >> 2], HEAP32[$1 + 8 >> 2])
  }
  $0 = $1 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function stb_vorbis_get_frame_float($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
  $2 = global$0 - 16 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  label$2 : {
   if (HEAPU8[$0 + 48 | 0]) {
    error_28stb_vorbis__2c_20STBVorbisError_29($0, 2);
    $3 = 0;
    break label$2;
   }
   if (!vorbis_decode_packet_28stb_vorbis__2c_20int__2c_20int__2c_20int__29($0, $2 + 12 | 0, $2 + 4 | 0, $2 + 8 | 0)) {
    HEAP32[$0 + 1520 >> 2] = 0;
    HEAP32[$0 + 1524 >> 2] = 0;
    $3 = 0;
    break label$2;
   }
   $4 = HEAP32[$2 + 4 >> 2];
   $3 = vorbis_finish_frame_28stb_vorbis__2c_20int_2c_20int_2c_20int_29($0, HEAP32[$2 + 12 >> 2], $4, HEAP32[$2 + 8 >> 2]);
   HEAP32[$2 + 12 >> 2] = $3;
   $6 = HEAP32[$0 + 4 >> 2];
   if (($6 | 0) >= 1) {
    while (1) {
     $7 = ($5 << 2) + $0 | 0;
     HEAP32[$7 + 880 >> 2] = HEAP32[$7 + 816 >> 2] + ($4 << 2);
     $5 = $5 + 1 | 0;
     if (($6 | 0) != ($5 | 0)) {
      continue
     }
     break;
    }
   }
   HEAP32[$0 + 1520 >> 2] = $4;
   HEAP32[$0 + 1524 >> 2] = $3 + $4;
   if (!$1) {
    break label$2
   }
   HEAP32[$1 >> 2] = $0 + 880;
  }
  $0 = $2 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
  return $3;
 }
 
 function stb_vorbis_open_memory($0, $1, $2) {
  var $3 = 0, $4 = 0;
  $3 = global$0 - 1536 | 0;
  $4 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  label$2 : {
   if ($0) {
    vorbis_init_28stb_vorbis__2c_20stb_vorbis_alloc__29($3 + 8 | 0);
    HEAP32[$3 + 40 >> 2] = $0;
    HEAP8[$3 + 56 | 0] = 0;
    HEAP32[$3 + 44 >> 2] = $0;
    HEAP32[$3 + 52 >> 2] = $1;
    HEAP32[$3 + 48 >> 2] = $0 + $1;
    label$4 : {
     if (!start_decoder_28stb_vorbis__29($3 + 8 | 0)) {
      break label$4
     }
     $0 = setup_malloc_28stb_vorbis__2c_20int_29($3 + 8 | 0, 1528);
     if (!$0) {
      break label$4
     }
     vorbis_pump_first_frame_28stb_vorbis__29(memcpy($0, $3 + 8 | 0, 1528));
     break label$2;
    }
    if ($2) {
     HEAP32[$2 >> 2] = HEAP32[$3 + 124 >> 2]
    }
    vorbis_deinit_28stb_vorbis__29($3 + 8 | 0);
   }
   $0 = 0;
  }
  $1 = $3 + 1536 | 0;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  return $0;
 }
 
 function stb_vorbis_get_frame_short($0, $1, $2) {
  var $3 = 0, $4 = 0;
  $3 = global$0 - 16 | 0;
  $4 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  $4 = stb_vorbis_get_frame_float($0, $3 + 12 | 0);
  $2 = ($4 | 0) > ($2 | 0) ? $2 : $4;
  if ($2) {
   convert_samples_short_28int_2c_20short___2c_20int_2c_20int_2c_20float___2c_20int_2c_20int_29($1, HEAP32[$0 + 4 >> 2], HEAP32[$3 + 12 >> 2], $2)
  }
  $0 = $3 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
  return $2;
 }
 
 function convert_samples_short_28int_2c_20short___2c_20int_2c_20int_2c_20float___2c_20int_2c_20int_29($0, $1, $2, $3) {
  var $4 = 0, $5 = 0;
  label$1 : {
   if (!(($1 | 0) == 1 | ($1 | 0) > 6)) {
    while (1) {
     $5 = $4 << 2;
     compute_samples_28int_2c_20short__2c_20int_2c_20float___2c_20int_2c_20int_29(HEAP32[$5 + 29720 >> 2], HEAP32[$0 + $5 >> 2], $1, $2, $3);
     $4 = $4 + 1 | 0;
     if (($4 | 0) != 1) {
      continue
     }
     break;
    };
    break label$1;
   }
   $1 = 1 < ($1 | 0) ? 1 : $1;
   if (($1 | 0) > 0) {
    while (1) {
     $5 = $4 << 2;
     copy_samples_28short__2c_20float__2c_20int_29(HEAP32[$5 + $0 >> 2], HEAP32[$2 + $5 >> 2], $3);
     $4 = $4 + 1 | 0;
     if (($1 | 0) != ($4 | 0)) {
      continue
     }
     break;
    };
    $4 = $1;
   }
   if (($4 | 0) >= 1) {
    break label$1
   }
   $1 = $3 << 1;
   while (1) {
    memset(HEAP32[($4 << 2) + $0 >> 2], 0, $1);
    $4 = $4 + 1 | 0;
    if (($4 | 0) != 1) {
     continue
    }
    break;
   };
  }
 }
 
 function compute_samples_28int_2c_20short__2c_20int_2c_20float___2c_20int_2c_20int_29($0, $1, $2, $3, $4) {
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
  $10 = global$0 - 128 | 0;
  $6 = $10;
  if ($6 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $6;
  if (($4 | 0) >= 1) {
   $13 = ($2 | 0) < 1;
   $14 = Math_imul($2, 6);
   $7 = 32;
   while (1) {
    $11 = memset($10, 0, 128);
    $7 = ($7 + $8 | 0) > ($4 | 0) ? $4 - $8 | 0 : $7;
    if (!$13) {
     $6 = $8;
     $9 = 0;
     while (1) {
      if (!(!(HEAP8[($9 + $14 | 0) + 29744 | 0] & $0) | ($7 | 0) < 1)) {
       $15 = HEAP32[($9 << 2) + $3 >> 2];
       $5 = 0;
       while (1) {
        $12 = ($5 << 2) + $11 | 0;
        HEAPF32[$12 >> 2] = HEAPF32[($5 + $6 << 2) + $15 >> 2] + HEAPF32[$12 >> 2];
        $5 = $5 + 1 | 0;
        if (($5 | 0) < ($7 | 0)) {
         continue
        }
        break;
       };
      }
      $9 = $9 + 1 | 0;
      if (($9 | 0) != ($2 | 0)) {
       continue
      }
      break;
     };
    }
    $5 = 0;
    if (($7 | 0) > 0) {
     while (1) {
      $6 = (wasm2js_scratch_store_f32(Math_fround(HEAPF32[($5 << 2) + $11 >> 2] + Math_fround(384.0))), wasm2js_scratch_load_i32(0));
      $6 = ($6 | 0) > 1136623616 ? $6 : 1136623616;
      HEAP16[($5 + $8 << 1) + $1 >> 1] = ($6 | 0) < 1136689151 ? $6 : 1136689151;
      $5 = $5 + 1 | 0;
      if (($5 | 0) < ($7 | 0)) {
       continue
      }
      break;
     }
    }
    $8 = $8 + 32 | 0;
    if (($8 | 0) < ($4 | 0)) {
     continue
    }
    break;
   };
  }
  $0 = $10 + 128 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function copy_samples_28short__2c_20float__2c_20int_29($0, $1, $2) {
  var $3 = 0, $4 = 0;
  if (($2 | 0) >= 1) {
   while (1) {
    $3 = (wasm2js_scratch_store_f32(Math_fround(HEAPF32[($4 << 2) + $1 >> 2] + Math_fround(384.0))), wasm2js_scratch_load_i32(0));
    $3 = ($3 | 0) > 1136623616 ? $3 : 1136623616;
    HEAP16[($4 << 1) + $0 >> 1] = ($3 | 0) < 1136689151 ? $3 : 1136689151;
    $4 = $4 + 1 | 0;
    if (($4 | 0) != ($2 | 0)) {
     continue
    }
    break;
   }
  }
 }
 
 function stb_vorbis_get_frame_short_interleaved($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0;
  $5 = global$0 - 16 | 0;
  $4 = $5;
  if ($5 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  HEAP32[$5 + 12 >> 2] = $2;
  label$2 : {
   if (($1 | 0) == 1) {
    $6 = stb_vorbis_get_frame_short($0, $5 + 12 | 0, $3);
    break label$2;
   }
   $4 = stb_vorbis_get_frame_float($0, $5 + 8 | 0);
   if (!$4) {
    break label$2
   }
   $4 = (Math_imul($1, $4) | 0) > ($3 | 0) ? ($3 | 0) / ($1 | 0) | 0 : $4;
   convert_channels_short_interleaved_28int_2c_20short__2c_20int_2c_20float___2c_20int_2c_20int_29($1, $2, HEAP32[$0 + 4 >> 2], HEAP32[$5 + 8 >> 2], $4);
   $6 = $4;
  }
  $0 = $5 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
  return $6;
 }
 
 function convert_channels_short_interleaved_28int_2c_20short__2c_20int_2c_20float___2c_20int_2c_20int_29($0, $1, $2, $3, $4) {
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
  label$1 : {
   label$2 : {
    if (!(($2 | 0) > 6 | ($0 | 0) > 2 | ($0 | 0) == ($2 | 0))) {
     if (($0 | 0) != 2) {
      break label$1
     }
     while (1) {
      compute_stereo_samples_28short__2c_20int_2c_20float___2c_20int_2c_20int_29($1, $2, $3, $4);
      $0 = $5;
      $5 = $0 + 1 | 0;
      if (!$0) {
       continue
      }
      break;
     };
     break label$2;
    }
    if (($4 | 0) < 1) {
     break label$2
    }
    $6 = ($0 | 0) < ($2 | 0) ? $0 : $2;
    $9 = $0 - (($6 | 0) > 0 ? $6 : 0) << 1;
    while (1) {
     if (($6 | 0) < 1) {
      $2 = 0
     } else {
      $10 = $8;
      $5 = 0;
      $2 = $1;
      while (1) {
       $7 = (wasm2js_scratch_store_f32(Math_fround(HEAPF32[HEAP32[($5 << 2) + $3 >> 2] + ($10 << 2) >> 2] + Math_fround(384.0))), wasm2js_scratch_load_i32(0));
       $7 = ($7 | 0) > 1136623616 ? $7 : 1136623616;
       HEAP16[$2 >> 1] = ($7 | 0) < 1136689151 ? $7 : 1136689151;
       $2 = $2 + 2 | 0;
       $5 = $5 + 1 | 0;
       if (($6 | 0) != ($5 | 0)) {
        continue
       }
       break;
      };
      $1 = ($6 << 1) + $1 | 0;
      $2 = $6;
     }
     if (($2 | 0) < ($0 | 0)) {
      $1 = memset($1, 0, $9) + $9 | 0
     }
     $8 = $8 + 1 | 0;
     if (($8 | 0) != ($4 | 0)) {
      continue
     }
     break;
    };
   }
   return;
  }
  __assert_fail(29786, 27928, 4851, 29797);
  abort();
 }
 
 function compute_stereo_samples_28short__2c_20int_2c_20float___2c_20int_2c_20int_29($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = Math_fround(0), $17 = 0;
  $13 = global$0 - 128 | 0;
  $8 = $13;
  if ($8 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $8;
  if (($3 | 0) >= 1) {
   $6 = 16;
   while (1) {
    $11 = memset($13, 0, 128);
    $9 = $6 + $10 | 0;
    $14 = ($9 | 0) > ($3 | 0);
    $6 = $14 ? $3 - $10 | 0 : $6;
    if (($1 | 0) >= 1) {
     $8 = $10;
     $7 = 0;
     while (1) {
      $4 = (HEAPU8[(Math_imul($1, 6) + $7 | 0) + 29744 | 0] & 6) + -2 | 0;
      label$6 : {
       if ($4 >>> 0 > 4) {
        break label$6
       }
       label$7 : {
        switch ($4 - 1 | 0) {
        case 1:
         if (($6 | 0) < 1) {
          break label$6
         }
         $12 = HEAP32[($7 << 2) + $2 >> 2];
         $4 = 0;
         while (1) {
          $5 = ($4 << 3 | 4) + $11 | 0;
          HEAPF32[$5 >> 2] = HEAPF32[$12 + ($4 + $8 << 2) >> 2] + HEAPF32[$5 >> 2];
          $4 = $4 + 1 | 0;
          if (($4 | 0) < ($6 | 0)) {
           continue
          }
          break;
         };
         break label$6;
        default:
         if (($6 | 0) < 1) {
          break label$6
         }
         $12 = HEAP32[($7 << 2) + $2 >> 2];
         $4 = 0;
         while (1) {
          $5 = ($4 << 3) + $11 | 0;
          HEAPF32[$5 >> 2] = HEAPF32[$12 + ($4 + $8 << 2) >> 2] + HEAPF32[$5 >> 2];
          $4 = $4 + 1 | 0;
          if (($4 | 0) < ($6 | 0)) {
           continue
          }
          break;
         };
         break label$6;
        case 0:
        case 2:
         break label$6;
        case 3:
         break label$7;
        };
       }
       if (($6 | 0) < 1) {
        break label$6
       }
       $12 = HEAP32[($7 << 2) + $2 >> 2];
       $4 = 0;
       while (1) {
        $5 = $4 << 3;
        $15 = $5 + $11 | 0;
        $16 = HEAPF32[($4 + $8 << 2) + $12 >> 2];
        HEAPF32[$15 >> 2] = $16 + HEAPF32[$15 >> 2];
        $5 = ($5 | 4) + $11 | 0;
        HEAPF32[$5 >> 2] = $16 + HEAPF32[$5 >> 2];
        $4 = $4 + 1 | 0;
        if (($4 | 0) < ($6 | 0)) {
         continue
        }
        break;
       };
      }
      $7 = $7 + 1 | 0;
      if (($7 | 0) != ($1 | 0)) {
       continue
      }
      break;
     };
    }
    if ($6 << 1 >= 1) {
     $8 = $10 << 1;
     $7 = ($14 ? $3 : $9) + $17 << 1;
     $4 = 0;
     while (1) {
      $9 = (wasm2js_scratch_store_f32(Math_fround(HEAPF32[($4 << 2) + $11 >> 2] + Math_fround(384.0))), wasm2js_scratch_load_i32(0));
      $9 = ($9 | 0) > 1136623616 ? $9 : 1136623616;
      HEAP16[($4 + $8 << 1) + $0 >> 1] = ($9 | 0) < 1136689151 ? $9 : 1136689151;
      $4 = $4 + 1 | 0;
      if (($7 | 0) != ($4 | 0)) {
       continue
      }
      break;
     };
    }
    $17 = $17 + -16 | 0;
    $10 = $10 + 16 | 0;
    if (($10 | 0) < ($3 | 0)) {
     continue
    }
    break;
   };
  }
  $0 = $13 + 128 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function stb_vorbis_decode_memory($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
  $7 = global$0 - 16 | 0;
  $5 = $7;
  if ($7 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $5;
  $4 = stb_vorbis_open_memory($0, $1, $7 + 12 | 0);
  label$2 : {
   if (!$4) {
    $5 = -1;
    break label$2;
   }
   $0 = $2;
   $2 = HEAP32[$4 + 4 >> 2];
   HEAP32[$0 >> 2] = $2;
   $1 = dlmalloc($2 << 13);
   if ($1) {
    $0 = 0;
    $5 = -2;
    $8 = $2 << 12;
    $6 = $8;
    while (1) {
     $2 = stb_vorbis_get_frame_short_interleaved($4, HEAP32[$4 + 4 >> 2], ($0 << 1) + $1 | 0, $6 - $0 | 0);
     label$6 : {
      if (!$2) {
       $2 = 2;
       break label$6;
      }
      $9 = $2 + $9 | 0;
      $0 = Math_imul($2, HEAP32[$4 + 4 >> 2]) + $0 | 0;
      if (($8 + $0 | 0) > ($6 | 0)) {
       $2 = dlrealloc($1, $6 << 2);
       label$9 : {
        if (!$2) {
         dlfree($1);
         stb_vorbis_close($4);
         $2 = 1;
         break label$9;
        }
        $1 = $2;
        $2 = 0;
       }
       $6 = $6 << 1;
       if ($2) {
        break label$6
       }
      }
      $2 = 0;
     }
     if (!$2) {
      continue
     }
     break;
    };
    if (($2 | 0) != 2) {
     break label$2
    }
    HEAP32[$3 >> 2] = $1;
    $5 = $9;
    break label$2;
   }
   stb_vorbis_close($4);
   $5 = -2;
  }
  $0 = $7 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
  return $5;
 }
 
 function maybe_start_packet_28stb_vorbis__29($0) {
  var $1 = 0, $2 = 0;
  folding_inner0 : {
   label$1 : {
    label$2 : {
     if (HEAP32[$0 + 1396 >> 2] != -1) {
      break label$2
     }
     $1 = get8_28stb_vorbis__29($0);
     if (HEAP32[$0 + 112 >> 2]) {
      break label$1
     }
     if (($1 | 0) != 79) {
      break folding_inner0
     }
     if ((get8_28stb_vorbis__29($0) | 0) != 103) {
      break folding_inner0
     }
     if ((get8_28stb_vorbis__29($0) | 0) != 103) {
      break folding_inner0
     }
     if ((get8_28stb_vorbis__29($0) | 0) != 83) {
      break folding_inner0
     }
     if (!start_page_no_capturepattern_28stb_vorbis__29($0)) {
      break label$1
     }
     if (!(HEAP8[$0 + 1391 | 0] & 1)) {
      break label$2
     }
     HEAP8[$0 + 1392 | 0] = 0;
     HEAP32[$0 + 1400 >> 2] = 0;
     error_28stb_vorbis__2c_20STBVorbisError_29($0, 32);
     return 0;
    }
    $2 = start_packet_28stb_vorbis__29($0);
   }
   return $2;
  }
  error_28stb_vorbis__2c_20STBVorbisError_29($0, 30);
  return 0;
 }
 
 function prep_huffman_28stb_vorbis__29($0) {
  var $1 = 0, $2 = 0;
  label$1 : {
   $1 = HEAP32[$0 + 1412 >> 2];
   if (($1 | 0) > 24) {
    break label$1
   }
   if (!$1) {
    HEAP32[$0 + 1408 >> 2] = 0
   }
   while (1) {
    if (HEAPU8[$0 + 1392 | 0] ? 0 : HEAP32[$0 + 1400 >> 2]) {
     break label$1
    }
    $2 = get8_packet_raw_28stb_vorbis__29($0);
    if (($2 | 0) == -1) {
     break label$1
    }
    $1 = HEAP32[$0 + 1412 >> 2];
    HEAP32[$0 + 1412 >> 2] = $1 + 8;
    HEAP32[$0 + 1408 >> 2] = HEAP32[$0 + 1408 >> 2] + ($2 << $1);
    if (($1 | 0) < 17) {
     continue
    }
    break;
   };
  }
 }
 
 function codebook_decode_scalar_raw_28stb_vorbis__2c_20Codebook__29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
  prep_huffman_28stb_vorbis__29($0);
  $5 = HEAP32[$1 + 2084 >> 2];
  folding_inner0 : {
   label$1 : {
    if (!(HEAP32[$1 + 32 >> 2] ? 0 : !$5)) {
     $4 = HEAP32[$1 + 4 >> 2];
     label$4 : {
      if (($4 | 0) >= 9) {
       if ($5) {
        break label$4
       }
       break label$1;
      }
      if (HEAP32[$1 + 32 >> 2]) {
       break label$1
      }
     }
     $6 = HEAP32[$0 + 1408 >> 2];
     $9 = bit_reverse_28unsigned_20int_29($6);
     $2 = HEAP32[$1 + 2092 >> 2];
     if (($2 | 0) >= 2) {
      while (1) {
       $4 = $2 >> 1;
       $8 = $4 + $3 | 0;
       $7 = HEAPU32[$5 + ($8 << 2) >> 2] > $9 >>> 0;
       $3 = $7 ? $3 : $8;
       $2 = $7 ? $4 : $2 - $4 | 0;
       if (($2 | 0) > 1) {
        continue
       }
       break;
      }
     }
     $2 = HEAP32[$0 + 1412 >> 2];
     $3 = HEAPU8[$1 + 23 | 0] ? $3 : HEAP32[HEAP32[$1 + 2088 >> 2] + ($3 << 2) >> 2];
     $1 = HEAPU8[$3 + HEAP32[$1 + 8 >> 2] | 0];
     if (($2 | 0) < ($1 | 0)) {
      break folding_inner0
     }
     HEAP32[$0 + 1408 >> 2] = $6 >>> $1;
     HEAP32[$0 + 1412 >> 2] = $2 - $1;
     return $3;
    }
    __assert_fail(28106, 27928, 1243, 28142);
    abort();
   }
   if (!HEAPU8[$1 + 23 | 0]) {
    if (($4 | 0) >= 1) {
     $5 = HEAP32[$1 + 8 >> 2];
     while (1) {
      label$14 : {
       $7 = $3 + $5 | 0;
       $2 = HEAPU8[$7 | 0];
       if (($2 | 0) == 255) {
        break label$14
       }
       $6 = HEAP32[$0 + 1408 >> 2];
       if (HEAP32[HEAP32[$1 + 32 >> 2] + ($3 << 2) >> 2] != ($6 & (-1 << $2 ^ -1))) {
        break label$14
       }
       $1 = HEAP32[$0 + 1412 >> 2];
       if (($1 | 0) >= ($2 | 0)) {
        HEAP32[$0 + 1408 >> 2] = $6 >>> $2;
        HEAP32[$0 + 1412 >> 2] = $1 - HEAPU8[$7 | 0];
        return $3;
       }
       break folding_inner0;
      }
      $3 = $3 + 1 | 0;
      if (($4 | 0) != ($3 | 0)) {
       continue
      }
      break;
     };
    }
    error_28stb_vorbis__2c_20STBVorbisError_29($0, 21);
    break folding_inner0;
   }
   __assert_fail(28169, 27928, 1276, 28142);
   abort();
  }
  HEAP32[$0 + 1412 >> 2] = 0;
  return -1;
 }
 
 function predict_point_28int_2c_20int_2c_20int_2c_20int_2c_20int_29($0, $1, $2, $3, $4) {
  var $5 = 0;
  $4 = $4 - $3 | 0;
  $5 = $4 >> 31;
  $0 = (Math_imul($0 - $1 | 0, $5 ^ $4 + $5) | 0) / ($2 - $1 | 0) | 0;
  return (($4 | 0) < 0 ? 0 - $0 | 0 : $0) + $3 | 0;
 }
 
 function decode_residue_28stb_vorbis__2c_20float___2c_20int_2c_20int_2c_20int_2c_20unsigned_20char__29($0, $1, $2, $3, $4, $5) {
  var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
  $6 = global$0 - 16 | 0;
  $10 = $6;
  $8 = $6;
  if ($6 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $8;
  $8 = HEAP32[$0 + 412 >> 2];
  $11 = $8 + Math_imul($4, 24) | 0;
  $13 = (HEAP32[$11 + 4 >> 2] - HEAP32[$11 >> 2] >>> 0) / HEAPU32[$11 + 8 >> 2] | 0;
  $14 = $13 << 2;
  $9 = Math_imul(HEAP32[$0 + 4 >> 2], $14 + 4 | 0);
  $19 = HEAPU16[(($4 << 1) + $0 | 0) + 284 >> 1];
  $16 = HEAP32[HEAP32[$0 + 140 >> 2] + Math_imul(HEAPU8[$11 + 13 | 0], 2096) >> 2];
  $23 = HEAP32[$0 + 108 >> 2];
  label$2 : {
   if (HEAP32[$0 + 96 >> 2]) {
    $6 = setup_temp_malloc_28stb_vorbis__2c_20int_29($0, $9);
    break label$2;
   }
   $6 = $6 - ($9 + 15 & -16) | 0;
   $9 = $6;
   if ($6 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $9;
  }
  $14 = make_block_array_28void__2c_20int_2c_20int_29($6, HEAP32[$0 + 4 >> 2], $14);
  if (($2 | 0) >= 1) {
   $9 = $3 << 2;
   $6 = 0;
   while (1) {
    if (!HEAPU8[$5 + $6 | 0]) {
     memset(HEAP32[($6 << 2) + $1 >> 2], 0, $9)
    }
    $6 = $6 + 1 | 0;
    if (($6 | 0) != ($2 | 0)) {
     continue
    }
    break;
   };
  }
  $18 = $11 + 8 | 0;
  $20 = $11 + 13 | 0;
  label$8 : {
   label$9 : {
    if (!(($19 | 0) == 2 ? ($2 | 0) != 1 : 0)) {
     $3 = $8 + Math_imul($4, 24) | 0;
     $21 = $3 + 20 | 0;
     $22 = $3 + 16 | 0;
     $15 = ($13 | 0) < 1;
     break label$9;
    }
    $6 = 0;
    label$11 : {
     if (($2 | 0) < 1) {
      break label$11
     }
     while (1) {
      if (!HEAPU8[$5 + $6 | 0]) {
       break label$11
      }
      $6 = $6 + 1 | 0;
      if (($6 | 0) != ($2 | 0)) {
       continue
      }
      break;
     };
     $6 = $2;
    }
    if (($2 | 0) == ($6 | 0)) {
     break label$8
    }
    $4 = $8 + Math_imul($4, 24) | 0;
    $17 = $4 + 20 | 0;
    $19 = $4 + 16 | 0;
    $21 = $2 + -1 | 0;
    $22 = $21 >>> 0 > 1;
    $5 = 0;
    while (1) {
     label$14 : {
      if (!$22) {
       if (!($21 - 1)) {
        $9 = 0;
        $8 = 0;
        while (1) {
         if (($8 | 0) >= ($13 | 0)) {
          $6 = 0;
          break label$14;
         }
         $4 = HEAP32[$11 >> 2] + Math_imul(HEAP32[$18 >> 2], $8) | 0;
         HEAP32[$10 + 12 >> 2] = $4 & 1;
         HEAP32[$10 + 8 >> 2] = $4 >> 1;
         label$19 : {
          if (!$5) {
           $6 = HEAP32[$0 + 140 >> 2] + Math_imul(HEAPU8[$20 | 0], 2096) | 0;
           if (HEAP32[$0 + 1412 >> 2] <= 9) {
            prep_huffman_28stb_vorbis__29($0)
           }
           $7 = HEAP32[$0 + 1408 >> 2];
           $4 = HEAP16[($6 + (($7 & 1023) << 1) | 0) + 36 >> 1];
           label$22 : {
            if (($4 | 0) >= 0) {
             $12 = $7;
             $7 = HEAPU8[$4 + HEAP32[$6 + 8 >> 2] | 0];
             HEAP32[$0 + 1408 >> 2] = $12 >>> $7;
             $15 = HEAP32[$0 + 1412 >> 2] - $7 | 0;
             $7 = ($15 | 0) < 0;
             HEAP32[$0 + 1412 >> 2] = $7 ? 0 : $15;
             $4 = $7 ? -1 : $4;
             break label$22;
            }
            $4 = codebook_decode_scalar_raw_28stb_vorbis__2c_20Codebook__29($0, $6);
           }
           $4 = HEAPU8[$6 + 23 | 0] ? HEAP32[HEAP32[$6 + 2088 >> 2] + ($4 << 2) >> 2] : $4;
           $6 = 8;
           label$24 : {
            if (($4 | 0) == -1) {
             break label$24
            }
            HEAP32[HEAP32[$14 >> 2] + ($9 << 2) >> 2] = HEAP32[HEAP32[$19 >> 2] + ($4 << 2) >> 2];
            $6 = 0;
           }
           if ($6) {
            break label$19
           }
          }
          $4 = 0;
          label$26 : {
           if (($16 | 0) < 1) {
            break label$26
           }
           while (1) {
            $6 = HEAP32[$18 >> 2];
            $7 = HEAP16[(HEAP32[$17 >> 2] + (HEAPU8[HEAP32[HEAP32[$14 >> 2] + ($9 << 2) >> 2] + $4 | 0] << 4) | 0) + ($5 << 1) >> 1];
            label$28 : {
             label$29 : {
              if (($7 | 0) >= 0) {
               $6 = codebook_decode_deinterleave_repeat_2_28stb_vorbis__2c_20Codebook__2c_20float___2c_20int__2c_20int__2c_20int_2c_20int_29($0, HEAP32[$0 + 140 >> 2] + Math_imul($7, 2096) | 0, $1, $10 + 12 | 0, $10 + 8 | 0, $3, $6);
               if ($6) {
                break label$29
               }
               $6 = !$6 << 3;
               break label$28;
              }
              $6 = HEAP32[$11 >> 2] + ($6 + Math_imul($6, $8) | 0) | 0;
              HEAP32[$10 + 8 >> 2] = $6 >> 1;
              HEAP32[$10 + 12 >> 2] = $6 & 1;
             }
             $6 = 0;
            }
            if ($6) {
             break label$19
            }
            $8 = $8 + 1 | 0;
            if (($8 | 0) >= ($13 | 0)) {
             break label$26
            }
            $4 = $4 + 1 | 0;
            if (($4 | 0) < ($16 | 0)) {
             continue
            }
            break;
           };
          }
          $9 = $9 + 1 | 0;
          $6 = 0;
         }
         if (!$6) {
          continue
         }
         break;
        };
        break label$14;
       }
       $9 = 0;
       $8 = 0;
       while (1) {
        if (($8 | 0) >= ($13 | 0)) {
         $6 = 0;
         break label$14;
        }
        $4 = HEAP32[$11 >> 2];
        $6 = HEAP32[$18 >> 2];
        HEAP32[$10 + 12 >> 2] = 0;
        HEAP32[$10 + 8 >> 2] = $4 + Math_imul($6, $8);
        label$33 : {
         if (!$5) {
          $6 = HEAP32[$0 + 140 >> 2] + Math_imul(HEAPU8[$20 | 0], 2096) | 0;
          if (HEAP32[$0 + 1412 >> 2] <= 9) {
           prep_huffman_28stb_vorbis__29($0)
          }
          $7 = HEAP32[$0 + 1408 >> 2];
          $4 = HEAP16[($6 + (($7 & 1023) << 1) | 0) + 36 >> 1];
          label$36 : {
           if (($4 | 0) >= 0) {
            $12 = $7;
            $7 = HEAPU8[$4 + HEAP32[$6 + 8 >> 2] | 0];
            HEAP32[$0 + 1408 >> 2] = $12 >>> $7;
            $15 = HEAP32[$0 + 1412 >> 2] - $7 | 0;
            $7 = ($15 | 0) < 0;
            HEAP32[$0 + 1412 >> 2] = $7 ? 0 : $15;
            $4 = $7 ? -1 : $4;
            break label$36;
           }
           $4 = codebook_decode_scalar_raw_28stb_vorbis__2c_20Codebook__29($0, $6);
          }
          $4 = HEAPU8[$6 + 23 | 0] ? HEAP32[HEAP32[$6 + 2088 >> 2] + ($4 << 2) >> 2] : $4;
          $6 = 8;
          label$38 : {
           if (($4 | 0) == -1) {
            break label$38
           }
           HEAP32[HEAP32[$14 >> 2] + ($9 << 2) >> 2] = HEAP32[HEAP32[$19 >> 2] + ($4 << 2) >> 2];
           $6 = 0;
          }
          if ($6) {
           break label$33
          }
         }
         $4 = 0;
         label$40 : {
          if (($16 | 0) < 1) {
           break label$40
          }
          while (1) {
           $6 = HEAP32[$18 >> 2];
           $7 = HEAP16[(HEAP32[$17 >> 2] + (HEAPU8[HEAP32[HEAP32[$14 >> 2] + ($9 << 2) >> 2] + $4 | 0] << 4) | 0) + ($5 << 1) >> 1];
           label$42 : {
            label$43 : {
             if (($7 | 0) >= 0) {
              $6 = codebook_decode_deinterleave_repeat_28stb_vorbis__2c_20Codebook__2c_20float___2c_20int_2c_20int__2c_20int__2c_20int_2c_20int_29($0, HEAP32[$0 + 140 >> 2] + Math_imul($7, 2096) | 0, $1, $2, $10 + 12 | 0, $10 + 8 | 0, $3, $6);
              if ($6) {
               break label$43
              }
              $6 = !$6 << 3;
              break label$42;
             }
             $7 = HEAP32[$11 >> 2];
             HEAP32[$10 + 12 >> 2] = 0;
             HEAP32[$10 + 8 >> 2] = $7 + ($6 + Math_imul($6, $8) | 0);
            }
            $6 = 0;
           }
           if ($6) {
            break label$33
           }
           $8 = $8 + 1 | 0;
           if (($8 | 0) >= ($13 | 0)) {
            break label$40
           }
           $4 = $4 + 1 | 0;
           if (($4 | 0) < ($16 | 0)) {
            continue
           }
           break;
          };
         }
         $9 = $9 + 1 | 0;
         $6 = 0;
        }
        if (!$6) {
         continue
        }
        break;
       };
       break label$14;
      }
      $9 = 0;
      $8 = 0;
      while (1) {
       if (($8 | 0) >= ($13 | 0)) {
        $6 = 0;
        break label$14;
       }
       $6 = HEAP32[$11 >> 2] + Math_imul(HEAP32[$18 >> 2], $8) | 0;
       $4 = ($6 | 0) / ($2 | 0) | 0;
       HEAP32[$10 + 12 >> 2] = $6 - Math_imul($2, $4);
       HEAP32[$10 + 8 >> 2] = $4;
       label$47 : {
        if (!$5) {
         $6 = HEAP32[$0 + 140 >> 2] + Math_imul(HEAPU8[$20 | 0], 2096) | 0;
         if (HEAP32[$0 + 1412 >> 2] <= 9) {
          prep_huffman_28stb_vorbis__29($0)
         }
         $7 = HEAP32[$0 + 1408 >> 2];
         $4 = HEAP16[($6 + (($7 & 1023) << 1) | 0) + 36 >> 1];
         label$50 : {
          if (($4 | 0) >= 0) {
           $12 = $7;
           $7 = HEAPU8[$4 + HEAP32[$6 + 8 >> 2] | 0];
           HEAP32[$0 + 1408 >> 2] = $12 >>> $7;
           $15 = HEAP32[$0 + 1412 >> 2] - $7 | 0;
           $7 = ($15 | 0) < 0;
           HEAP32[$0 + 1412 >> 2] = $7 ? 0 : $15;
           $4 = $7 ? -1 : $4;
           break label$50;
          }
          $4 = codebook_decode_scalar_raw_28stb_vorbis__2c_20Codebook__29($0, $6);
         }
         $4 = HEAPU8[$6 + 23 | 0] ? HEAP32[HEAP32[$6 + 2088 >> 2] + ($4 << 2) >> 2] : $4;
         $6 = 8;
         label$52 : {
          if (($4 | 0) == -1) {
           break label$52
          }
          HEAP32[HEAP32[$14 >> 2] + ($9 << 2) >> 2] = HEAP32[HEAP32[$19 >> 2] + ($4 << 2) >> 2];
          $6 = 0;
         }
         if ($6) {
          break label$47
         }
        }
        $4 = 0;
        label$54 : {
         if (($16 | 0) < 1) {
          break label$54
         }
         while (1) {
          $6 = HEAP32[$18 >> 2];
          $7 = HEAP16[(HEAP32[$17 >> 2] + (HEAPU8[HEAP32[HEAP32[$14 >> 2] + ($9 << 2) >> 2] + $4 | 0] << 4) | 0) + ($5 << 1) >> 1];
          label$56 : {
           label$57 : {
            if (($7 | 0) >= 0) {
             $6 = codebook_decode_deinterleave_repeat_28stb_vorbis__2c_20Codebook__2c_20float___2c_20int_2c_20int__2c_20int__2c_20int_2c_20int_29($0, HEAP32[$0 + 140 >> 2] + Math_imul($7, 2096) | 0, $1, $2, $10 + 12 | 0, $10 + 8 | 0, $3, $6);
             if ($6) {
              break label$57
             }
             $6 = !$6 << 3;
             break label$56;
            }
            $6 = HEAP32[$11 >> 2] + ($6 + Math_imul($6, $8) | 0) | 0;
            $7 = ($6 | 0) / ($2 | 0) | 0;
            HEAP32[$10 + 8 >> 2] = $7;
            HEAP32[$10 + 12 >> 2] = $6 - Math_imul($2, $7);
           }
           $6 = 0;
          }
          if ($6) {
           break label$47
          }
          $8 = $8 + 1 | 0;
          if (($8 | 0) >= ($13 | 0)) {
           break label$54
          }
          $4 = $4 + 1 | 0;
          if (($4 | 0) < ($16 | 0)) {
           continue
          }
          break;
         };
        }
        $9 = $9 + 1 | 0;
        $6 = 0;
       }
       if (!$6) {
        continue
       }
       break;
      };
     }
     if ($6) {
      break label$8
     }
     $5 = $5 + 1 | 0;
     if (($5 | 0) != 8) {
      continue
     }
     break;
    };
    break label$8;
   }
   while (1) {
    if (!$15) {
     $8 = 0;
     $9 = 0;
     while (1) {
      label$62 : {
       if ($17) {
        break label$62
       }
       $6 = 0;
       if (($2 | 0) < 1) {
        break label$62
       }
       while (1) {
        if (!HEAPU8[$5 + $6 | 0]) {
         $4 = HEAP32[$0 + 140 >> 2] + Math_imul(HEAPU8[$20 | 0], 2096) | 0;
         if (HEAP32[$0 + 1412 >> 2] <= 9) {
          prep_huffman_28stb_vorbis__29($0)
         }
         $7 = HEAP32[$0 + 1408 >> 2];
         $3 = HEAP16[($4 + (($7 & 1023) << 1) | 0) + 36 >> 1];
         label$66 : {
          if (($3 | 0) >= 0) {
           $12 = $7;
           $7 = HEAPU8[$3 + HEAP32[$4 + 8 >> 2] | 0];
           HEAP32[$0 + 1408 >> 2] = $12 >>> $7;
           $12 = HEAP32[$0 + 1412 >> 2] - $7 | 0;
           $7 = ($12 | 0) < 0;
           HEAP32[$0 + 1412 >> 2] = $7 ? 0 : $12;
           $3 = $7 ? -1 : $3;
           break label$66;
          }
          $3 = codebook_decode_scalar_raw_28stb_vorbis__2c_20Codebook__29($0, $4);
         }
         $3 = HEAPU8[$4 + 23 | 0] ? HEAP32[HEAP32[$4 + 2088 >> 2] + ($3 << 2) >> 2] : $3;
         if (($3 | 0) == -1) {
          break label$8
         }
         HEAP32[HEAP32[$14 + ($6 << 2) >> 2] + ($8 << 2) >> 2] = HEAP32[HEAP32[$22 >> 2] + ($3 << 2) >> 2];
        }
        $6 = $6 + 1 | 0;
        if (($6 | 0) != ($2 | 0)) {
         continue
        }
        break;
       };
      }
      label$69 : {
       if (($9 | 0) >= ($13 | 0)) {
        break label$69
       }
       $3 = 0;
       if (($16 | 0) < 1) {
        break label$69
       }
       while (1) {
        $6 = 0;
        if (($2 | 0) >= 1) {
         while (1) {
          if (!HEAPU8[$5 + $6 | 0]) {
           label$74 : {
            label$75 : {
             $4 = $6 << 2;
             $7 = HEAP16[(HEAP32[$21 >> 2] + (HEAPU8[HEAP32[HEAP32[$4 + $14 >> 2] + ($8 << 2) >> 2] + $3 | 0] << 4) | 0) + ($17 << 1) >> 1];
             if (($7 | 0) < 0) {
              break label$75
             }
             $12 = HEAP32[$1 + $4 >> 2];
             $4 = HEAP32[$18 >> 2];
             $4 = residue_decode_28stb_vorbis__2c_20Codebook__2c_20float__2c_20int_2c_20int_2c_20int_29($0, HEAP32[$0 + 140 >> 2] + Math_imul($7, 2096) | 0, $12, HEAP32[$11 >> 2] + Math_imul($4, $9) | 0, $4, $19);
             if ($4) {
              break label$75
             }
             $4 = !$4 << 3;
             break label$74;
            }
            $4 = 0;
           }
           if ($4) {
            break label$8
           }
          }
          $6 = $6 + 1 | 0;
          if (($6 | 0) != ($2 | 0)) {
           continue
          }
          break;
         }
        }
        $9 = $9 + 1 | 0;
        if (($9 | 0) >= ($13 | 0)) {
         break label$69
        }
        $3 = $3 + 1 | 0;
        if (($3 | 0) < ($16 | 0)) {
         continue
        }
        break;
       };
      }
      $8 = $8 + 1 | 0;
      if (($9 | 0) < ($13 | 0)) {
       continue
      }
      break;
     };
    }
    $17 = $17 + 1 | 0;
    if (($17 | 0) != 8) {
     continue
    }
    break;
   };
  }
  HEAP32[$0 + 108 >> 2] = $23;
  $0 = $10 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function do_floor_28stb_vorbis__2c_20Mapping__2c_20int_2c_20int_2c_20float__2c_20short__2c_20unsigned_20char__29($0, $1, $2, $3, $4, $5) {
  var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = Math_fround(0);
  $6 = 1;
  $1 = HEAPU8[(HEAPU8[(HEAP32[$1 + 4 >> 2] + Math_imul($2, 3) | 0) + 2 | 0] + $1 | 0) + 9 | 0];
  if (!HEAPU16[(($1 << 1) + $0 | 0) + 148 >> 1]) {
   error_28stb_vorbis__2c_20STBVorbisError_29($0, 21);
   return;
  }
  $3 = $3 >> 1;
  $2 = HEAP32[$0 + 276 >> 2] + Math_imul($1, 1596) | 0;
  $1 = Math_imul(HEAPU8[$2 + 1588 | 0], HEAP16[$5 >> 1]);
  $0 = 0;
  if (HEAP32[$2 + 1592 >> 2] >= 2) {
   $9 = $2 + 1592 | 0;
   $10 = $2 + 1588 | 0;
   while (1) {
    $7 = HEAPU8[($2 + $6 | 0) + 838 | 0] << 1;
    $8 = HEAP16[$7 + $5 >> 1];
    if (($8 | 0) >= 0) {
     $11 = $0;
     $12 = $1;
     $0 = HEAPU16[($2 + $7 | 0) + 338 >> 1];
     $1 = Math_imul($8, HEAPU8[$10 | 0]);
     draw_line_28float__2c_20int_2c_20int_2c_20int_2c_20int_2c_20int_29($4, $11, $12, $0, $1, $3);
    }
    $6 = $6 + 1 | 0;
    if (($6 | 0) < HEAP32[$9 >> 2]) {
     continue
    }
    break;
   };
  }
  if (($0 | 0) < ($3 | 0)) {
   $13 = HEAPF32[($1 << 2) + 28304 >> 2];
   while (1) {
    $1 = ($0 << 2) + $4 | 0;
    HEAPF32[$1 >> 2] = $13 * HEAPF32[$1 >> 2];
    $0 = $0 + 1 | 0;
    if (($3 | 0) != ($0 | 0)) {
     continue
    }
    break;
   };
  }
 }
 
 function inverse_mdct_28float__2c_20int_2c_20stb_vorbis__2c_20int_29($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0, $7 = Math_fround(0), $8 = 0, $9 = Math_fround(0), $10 = 0, $11 = Math_fround(0), $12 = Math_fround(0), $13 = 0, $14 = Math_fround(0), $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = Math_fround(0), $23 = Math_fround(0), $24 = Math_fround(0), $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0;
  $8 = global$0;
  $28 = $8;
  $17 = $1 >> 1;
  $4 = $17 << 2;
  $30 = HEAP32[$2 + 108 >> 2];
  label$1 : {
   if (HEAP32[$2 + 96 >> 2]) {
    $15 = setup_temp_malloc_28stb_vorbis__2c_20int_29($2, $4);
    break label$1;
   }
   $15 = $8 - ($4 + 15 & -16) | 0;
   $8 = $15;
   if ($8 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $8;
  }
  $8 = $17 << 2;
  $18 = $8 + $0 | 0;
  $4 = ($8 + $15 | 0) + -8 | 0;
  $8 = HEAP32[(($3 << 2) + $2 | 0) + 1084 >> 2];
  label$4 : {
   if (!$17) {
    $5 = $8;
    break label$4;
   }
   $6 = $0;
   $5 = $8;
   while (1) {
    HEAPF32[$4 + 4 >> 2] = Math_fround(HEAPF32[$6 >> 2] * HEAPF32[$5 >> 2]) - Math_fround(HEAPF32[$6 + 8 >> 2] * HEAPF32[$5 + 4 >> 2]);
    HEAPF32[$4 >> 2] = Math_fround(HEAPF32[$6 >> 2] * HEAPF32[$5 + 4 >> 2]) + Math_fround(HEAPF32[$6 + 8 >> 2] * HEAPF32[$5 >> 2]);
    $5 = $5 + 8 | 0;
    $4 = $4 + -8 | 0;
    $6 = $6 + 16 | 0;
    if (($18 | 0) != ($6 | 0)) {
     continue
    }
    break;
   };
  }
  if ($4 >>> 0 >= $15 >>> 0) {
   $6 = (($17 << 2) + $0 | 0) + -12 | 0;
   while (1) {
    HEAPF32[$4 + 4 >> 2] = Math_fround(HEAPF32[$6 >> 2] * HEAPF32[$5 + 4 >> 2]) - Math_fround(HEAPF32[$6 + 8 >> 2] * HEAPF32[$5 >> 2]);
    HEAPF32[$4 >> 2] = Math_fround(HEAPF32[$5 >> 2] * Math_fround(-HEAPF32[$6 >> 2])) - Math_fround(HEAPF32[$6 + 8 >> 2] * HEAPF32[$5 + 4 >> 2]);
    $6 = $6 + -16 | 0;
    $5 = $5 + 8 | 0;
    $4 = $4 + -8 | 0;
    if ($4 >>> 0 >= $15 >>> 0) {
     continue
    }
    break;
   };
  }
  $16 = $1 >> 3;
  $27 = $1 >> 2;
  if (($1 | 0) >= 16) {
   $6 = $27 << 2;
   $4 = $6 + $15 | 0;
   $10 = $0 + $6 | 0;
   $5 = ($8 + ($17 << 2) | 0) + -32 | 0;
   $13 = $0;
   $6 = $15;
   while (1) {
    $11 = HEAPF32[$6 >> 2];
    $12 = HEAPF32[$4 >> 2];
    $9 = HEAPF32[$4 + 4 >> 2];
    $7 = HEAPF32[$6 + 4 >> 2];
    HEAPF32[$10 + 4 >> 2] = $9 + $7;
    HEAPF32[$10 >> 2] = HEAPF32[$4 >> 2] + HEAPF32[$6 >> 2];
    $9 = Math_fround($9 - $7);
    $7 = Math_fround($12 - $11);
    HEAPF32[$13 + 4 >> 2] = Math_fround($9 * HEAPF32[$5 + 16 >> 2]) - Math_fround($7 * HEAPF32[$5 + 20 >> 2]);
    HEAPF32[$13 >> 2] = Math_fround($7 * HEAPF32[$5 + 16 >> 2]) + Math_fround($9 * HEAPF32[$5 + 20 >> 2]);
    $11 = HEAPF32[$6 + 8 >> 2];
    $12 = HEAPF32[$4 + 8 >> 2];
    $9 = HEAPF32[$4 + 12 >> 2];
    $7 = HEAPF32[$6 + 12 >> 2];
    HEAPF32[$10 + 12 >> 2] = $9 + $7;
    HEAPF32[$10 + 8 >> 2] = HEAPF32[$4 + 8 >> 2] + HEAPF32[$6 + 8 >> 2];
    $9 = Math_fround($9 - $7);
    $7 = Math_fround($12 - $11);
    HEAPF32[$13 + 12 >> 2] = Math_fround($9 * HEAPF32[$5 >> 2]) - Math_fround($7 * HEAPF32[$5 + 4 >> 2]);
    HEAPF32[$13 + 8 >> 2] = Math_fround($7 * HEAPF32[$5 >> 2]) + Math_fround($9 * HEAPF32[$5 + 4 >> 2]);
    $6 = $6 + 16 | 0;
    $4 = $4 + 16 | 0;
    $13 = $13 + 16 | 0;
    $10 = $10 + 16 | 0;
    $5 = $5 + -32 | 0;
    if ($5 >>> 0 >= $8 >>> 0) {
     continue
    }
    break;
   };
  }
  $20 = ilog_28int_29($1);
  $6 = $1 >> 4;
  $13 = $17 + -1 | 0;
  $4 = 0 - $16 | 0;
  imdct_step3_iter0_loop_28int_2c_20float__2c_20int_2c_20int_2c_20float__29($6, $0, $13, $4, $8);
  imdct_step3_iter0_loop_28int_2c_20float__2c_20int_2c_20int_2c_20float__29($6, $0, $13 - $27 | 0, $4, $8);
  $21 = $1 >> 5;
  $4 = 0 - $6 | 0;
  imdct_step3_inner_r_loop_28int_2c_20float__2c_20int_2c_20int_2c_20float__2c_20int_29($21, $0, $13, $4, $8, 16);
  imdct_step3_inner_r_loop_28int_2c_20float__2c_20int_2c_20int_2c_20float__2c_20int_29($21, $0, $13 - $16 | 0, $4, $8, 16);
  imdct_step3_inner_r_loop_28int_2c_20float__2c_20int_2c_20int_2c_20float__2c_20int_29($21, $0, $13 - ($16 << 1) | 0, $4, $8, 16);
  imdct_step3_inner_r_loop_28int_2c_20float__2c_20int_2c_20int_2c_20float__2c_20int_29($21, $0, $13 + Math_imul($16, -3) | 0, $4, $8, 16);
  $10 = 2;
  if (($20 | 0) >= 10) {
   $4 = $20 + -4 >> 1;
   $10 = ($4 | 0) > 3 ? $4 : 3;
   $4 = 2;
   while (1) {
    $6 = $4;
    $4 = $4 + 1 | 0;
    $25 = 2 << $6;
    if (($25 | 0) >= 1) {
     $26 = 8 << $6;
     $5 = 0;
     $19 = $1 >> $6 + 2;
     $16 = 0 - ($19 >> 1) | 0;
     $6 = $1 >> $6 + 4;
     while (1) {
      imdct_step3_inner_r_loop_28int_2c_20float__2c_20int_2c_20int_2c_20float__2c_20int_29($6, $0, $13 - Math_imul($5, $19) | 0, $16, $8, $26);
      $5 = $5 + 1 | 0;
      if (($25 | 0) != ($5 | 0)) {
       continue
      }
      break;
     };
    }
    if (($4 | 0) != ($10 | 0)) {
     continue
    }
    break;
   };
  }
  $29 = $20 + -7 | 0;
  if (($10 | 0) < ($29 | 0)) {
   while (1) {
    $4 = $10;
    $10 = $4 + 1 | 0;
    $5 = $1 >> $4 + 6;
    if (($5 | 0) >= 1) {
     $31 = 2 << $4;
     $20 = 8 << $4;
     $25 = $20 << 2;
     $26 = $1 >> $4 + 2;
     $19 = 0 - ($26 >> 1) | 0;
     $4 = $8;
     $6 = $13;
     while (1) {
      imdct_step3_inner_s_loop_28int_2c_20float__2c_20int_2c_20int_2c_20float__2c_20int_2c_20int_29($31, $0, $6, $19, $4, $20, $26);
      $6 = $6 + -8 | 0;
      $4 = ($25 << 2) + $4 | 0;
      $16 = ($5 | 0) > 1;
      $5 = $5 + -1 | 0;
      if ($16) {
       continue
      }
      break;
     };
    }
    if (($10 | 0) != ($29 | 0)) {
     continue
    }
    break;
   }
  }
  imdct_step3_inner_s_loop_ld654_28int_2c_20float__2c_20int_2c_20float__2c_20int_29($21, $0, $13, $8, $1);
  $19 = $17 + -4 | 0;
  $5 = (($27 << 2) + $15 | 0) + -16 | 0;
  if ($5 >>> 0 >= $15 >>> 0) {
   $4 = ($19 << 2) + $15 | 0;
   $6 = HEAP32[(($3 << 2) + $2 | 0) + 1116 >> 2];
   while (1) {
    $8 = (HEAPU16[$6 >> 1] << 2) + $0 | 0;
    HEAP32[$4 + 12 >> 2] = HEAP32[$8 >> 2];
    HEAP32[$4 + 8 >> 2] = HEAP32[$8 + 4 >> 2];
    HEAP32[$5 + 12 >> 2] = HEAP32[$8 + 8 >> 2];
    HEAP32[$5 + 8 >> 2] = HEAP32[$8 + 12 >> 2];
    $8 = (HEAPU16[$6 + 2 >> 1] << 2) + $0 | 0;
    HEAP32[$4 + 4 >> 2] = HEAP32[$8 >> 2];
    HEAP32[$4 >> 2] = HEAP32[$8 + 4 >> 2];
    HEAP32[$5 + 4 >> 2] = HEAP32[$8 + 8 >> 2];
    HEAP32[$5 >> 2] = HEAP32[$8 + 12 >> 2];
    $6 = $6 + 4 | 0;
    $4 = $4 + -16 | 0;
    $5 = $5 + -16 | 0;
    if ($5 >>> 0 >= $15 >>> 0) {
     continue
    }
    break;
   };
  }
  $4 = ($17 << 2) + $15 | 0;
  $8 = $4 + -16 | 0;
  if ($8 >>> 0 > $15 >>> 0) {
   $6 = HEAP32[(($3 << 2) + $2 | 0) + 1100 >> 2];
   $10 = $4;
   $5 = $15;
   while (1) {
    $9 = HEAPF32[$5 + 4 >> 2];
    $16 = $10 + -4 | 0;
    $7 = HEAPF32[$16 >> 2];
    $22 = Math_fround($9 - $7);
    $23 = HEAPF32[$6 + 4 >> 2];
    $24 = Math_fround($9 + $7);
    $14 = HEAPF32[$5 >> 2];
    $13 = $10 + -8 | 0;
    $9 = HEAPF32[$13 >> 2];
    $11 = Math_fround($14 - $9);
    $7 = HEAPF32[$6 >> 2];
    $12 = Math_fround(Math_fround($23 * $24) - Math_fround($11 * $7));
    HEAPF32[$5 + 4 >> 2] = $22 + $12;
    $9 = Math_fround($14 + $9);
    $7 = Math_fround(Math_fround($11 * $23) + Math_fround($24 * $7));
    HEAPF32[$5 >> 2] = $9 + $7;
    HEAPF32[$16 >> 2] = $12 - $22;
    HEAPF32[$13 >> 2] = $9 - $7;
    $9 = HEAPF32[$5 + 12 >> 2];
    $10 = $10 + -12 | 0;
    $7 = HEAPF32[$10 >> 2];
    $22 = Math_fround($9 - $7);
    $23 = HEAPF32[$6 + 12 >> 2];
    $24 = Math_fround($9 + $7);
    $14 = HEAPF32[$5 + 8 >> 2];
    $9 = HEAPF32[$8 >> 2];
    $11 = Math_fround($14 - $9);
    $7 = HEAPF32[$6 + 8 >> 2];
    $12 = Math_fround(Math_fround($23 * $24) - Math_fround($11 * $7));
    HEAPF32[$5 + 12 >> 2] = $22 + $12;
    $9 = Math_fround($14 + $9);
    $7 = Math_fround(Math_fround($11 * $23) + Math_fround($24 * $7));
    HEAPF32[$5 + 8 >> 2] = $9 + $7;
    HEAPF32[$8 >> 2] = $9 - $7;
    HEAPF32[$10 >> 2] = $12 - $22;
    $6 = $6 + 16 | 0;
    $5 = $5 + 16 | 0;
    $10 = $8;
    $8 = $8 + -16 | 0;
    if ($5 >>> 0 < $8 >>> 0) {
     continue
    }
    break;
   };
  }
  $8 = $4 + -32 | 0;
  if ($8 >>> 0 >= $15 >>> 0) {
   $5 = HEAP32[(($3 << 2) + $2 | 0) + 1092 >> 2] + ($17 << 2) | 0;
   $6 = ($19 << 2) + $0 | 0;
   $10 = (($1 << 2) + $0 | 0) + -16 | 0;
   while (1) {
    $14 = HEAPF32[$4 + -8 >> 2];
    $11 = HEAPF32[$5 + -4 >> 2];
    $12 = HEAPF32[$4 + -4 >> 2];
    $9 = HEAPF32[$5 + -8 >> 2];
    $7 = Math_fround(Math_fround($14 * $11) - Math_fround($12 * $9));
    HEAPF32[$0 >> 2] = $7;
    HEAPF32[$6 + 12 >> 2] = -$7;
    $7 = Math_fround(Math_fround($9 * Math_fround(-$14)) - Math_fround($11 * $12));
    HEAPF32[$18 >> 2] = $7;
    HEAPF32[$10 + 12 >> 2] = $7;
    $14 = HEAPF32[$4 + -16 >> 2];
    $11 = HEAPF32[$5 + -12 >> 2];
    $12 = HEAPF32[$4 + -12 >> 2];
    $9 = HEAPF32[$5 + -16 >> 2];
    $7 = Math_fround(Math_fround($14 * $11) - Math_fround($12 * $9));
    HEAPF32[$0 + 4 >> 2] = $7;
    HEAPF32[$6 + 8 >> 2] = -$7;
    $7 = Math_fround(Math_fround($9 * Math_fround(-$14)) - Math_fround($11 * $12));
    HEAPF32[$18 + 4 >> 2] = $7;
    HEAPF32[$10 + 8 >> 2] = $7;
    $14 = HEAPF32[$4 + -24 >> 2];
    $11 = HEAPF32[$5 + -20 >> 2];
    $12 = HEAPF32[$4 + -20 >> 2];
    $9 = HEAPF32[$5 + -24 >> 2];
    $7 = Math_fround(Math_fround($14 * $11) - Math_fround($12 * $9));
    HEAPF32[$0 + 8 >> 2] = $7;
    HEAPF32[$6 + 4 >> 2] = -$7;
    $7 = Math_fround(Math_fround($9 * Math_fround(-$14)) - Math_fround($11 * $12));
    HEAPF32[$18 + 8 >> 2] = $7;
    HEAPF32[$10 + 4 >> 2] = $7;
    $14 = HEAPF32[$8 >> 2];
    $11 = HEAPF32[$5 + -28 >> 2];
    $12 = HEAPF32[$4 + -28 >> 2];
    $5 = $5 + -32 | 0;
    $9 = HEAPF32[$5 >> 2];
    $7 = Math_fround(Math_fround($14 * $11) - Math_fround($12 * $9));
    HEAPF32[$0 + 12 >> 2] = $7;
    HEAPF32[$6 >> 2] = -$7;
    $7 = Math_fround(Math_fround($9 * Math_fround(-$14)) - Math_fround($11 * $12));
    HEAPF32[$18 + 12 >> 2] = $7;
    HEAPF32[$10 >> 2] = $7;
    $10 = $10 + -16 | 0;
    $6 = $6 + -16 | 0;
    $18 = $18 + 16 | 0;
    $0 = $0 + 16 | 0;
    $4 = $8;
    $8 = $4 + -32 | 0;
    if ($8 >>> 0 >= $15 >>> 0) {
     continue
    }
    break;
   };
  }
  HEAP32[$2 + 108 >> 2] = $30;
  if ($28 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $28;
 }
 
 function start_page_no_capturepattern_28stb_vorbis__29($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
  if (get8_28stb_vorbis__29($0)) {
   error_28stb_vorbis__2c_20STBVorbisError_29($0, 31);
   return 0;
  }
  HEAP8[$0 + 1391 | 0] = get8_28stb_vorbis__29($0);
  $2 = get32_28stb_vorbis__29($0);
  $1 = get32_28stb_vorbis__29($0);
  get32_28stb_vorbis__29($0);
  HEAP32[$0 + 1128 >> 2] = get32_28stb_vorbis__29($0);
  get32_28stb_vorbis__29($0);
  $3 = get8_28stb_vorbis__29($0);
  HEAP32[$0 + 1132 >> 2] = $3;
  if (!getn_28stb_vorbis__2c_20unsigned_20char__2c_20int_29($0, $0 + 1136 | 0, $3)) {
   error_28stb_vorbis__2c_20STBVorbisError_29($0, 10);
   return 0;
  }
  HEAP32[$0 + 1420 >> 2] = -2;
  if (($1 & $2) != -1) {
   $1 = HEAP32[$0 + 1132 >> 2];
   while (1) {
    $1 = $1 + -1 | 0;
    if (HEAPU8[($1 + $0 | 0) + 1136 | 0] == 255) {
     continue
    }
    break;
   };
   HEAP32[$0 + 1424 >> 2] = $2;
   HEAP32[$0 + 1420 >> 2] = $1;
  }
  if (HEAPU8[$0 + 1393 | 0]) {
   $4 = HEAP32[$0 + 1132 >> 2];
   $1 = 27;
   label$6 : {
    if (($4 | 0) < 1) {
     break label$6
    }
    $1 = 0;
    $3 = 0;
    while (1) {
     $3 = HEAPU8[($0 + $1 | 0) + 1136 | 0] + $3 | 0;
     $1 = $1 + 1 | 0;
     if (($4 | 0) != ($1 | 0)) {
      continue
     }
     break;
    };
    $1 = $3 + 27 | 0;
   }
   HEAP32[$0 + 72 >> 2] = $2;
   HEAP32[$0 + 68 >> 2] = 0;
   $2 = HEAP32[$0 + 52 >> 2];
   HEAP32[$0 - -64 >> 2] = $2;
   HEAP32[$0 + 56 >> 2] = $2;
   HEAP32[$0 + 60 >> 2] = $2 + ($1 + $4 | 0);
  }
  HEAP32[$0 + 1396 >> 2] = 0;
  return 1;
 }
 
 function capture_pattern_28stb_vorbis__29($0) {
  var $1 = 0;
  label$1 : {
   if ((get8_28stb_vorbis__29($0) | 0) != 79) {
    break label$1
   }
   if ((get8_28stb_vorbis__29($0) | 0) != 103) {
    break label$1
   }
   if ((get8_28stb_vorbis__29($0) | 0) != 103) {
    break label$1
   }
   $1 = (get8_28stb_vorbis__29($0) | 0) == 83;
  }
  return $1;
 }
 
 function bit_reverse_28unsigned_20int_29($0) {
  $0 = $0 >>> 1 & 1431655765 | $0 << 1 & -1431655766;
  $0 = $0 >>> 2 & 858993459 | $0 << 2 & -858993460;
  $0 = $0 >>> 4 & 252645135 | $0 << 4 & -252645136;
  return __wasm_rotl_i32($0 >>> 8 & 16711935 | $0 << 8 & -16711936, 16);
 }
 
 function make_block_array_28void__2c_20int_2c_20int_29($0, $1, $2) {
  var $3 = 0, $4 = 0;
  if (($1 | 0) >= 1) {
   $3 = ($1 << 2) + $0 | 0;
   while (1) {
    HEAP32[($4 << 2) + $0 >> 2] = $3;
    $3 = $2 + $3 | 0;
    $4 = $4 + 1 | 0;
    if (($4 | 0) != ($1 | 0)) {
     continue
    }
    break;
   };
  }
  return $0;
 }
 
 function codebook_decode_deinterleave_repeat_2_28stb_vorbis__2c_20Codebook__2c_20float___2c_20int__2c_20int__2c_20int_2c_20int_29($0, $1, $2, $3, $4, $5, $6) {
  var $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = Math_fround(0), $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
  if (HEAPU8[$1 + 21 | 0]) {
   $16 = $5 << 1;
   $9 = HEAP32[$3 >> 2];
   $5 = HEAP32[$4 >> 2];
   $10 = HEAP32[$1 >> 2];
   label$2 : {
    while (1) {
     if (($6 | 0) < 1) {
      break label$2
     }
     if (HEAP32[$0 + 1412 >> 2] <= 9) {
      prep_huffman_28stb_vorbis__29($0)
     }
     $8 = HEAP32[$0 + 1408 >> 2];
     $7 = HEAP16[((($8 & 1023) << 1) + $1 | 0) + 36 >> 1];
     label$6 : {
      if (($7 | 0) >= 0) {
       $14 = $8;
       $8 = HEAPU8[$7 + HEAP32[$1 + 8 >> 2] | 0];
       HEAP32[$0 + 1408 >> 2] = $14 >>> $8;
       $11 = HEAP32[$0 + 1412 >> 2] - $8 | 0;
       $8 = ($11 | 0) < 0;
       HEAP32[$0 + 1412 >> 2] = $8 ? 0 : $11;
       $7 = $8 ? -1 : $7;
       break label$6;
      }
      $7 = codebook_decode_scalar_raw_28stb_vorbis__2c_20Codebook__29($0, $1);
     }
     label$5 : {
      if (($7 | 0) <= -1) {
       if (!HEAPU8[$0 + 1392 | 0]) {
        $7 = 0;
        if (HEAP32[$0 + 1400 >> 2]) {
         break label$5
        }
       }
       error_28stb_vorbis__2c_20STBVorbisError_29($0, 21);
       $7 = 0;
       break label$5;
      }
      $8 = $5 << 1;
      $10 = (($8 + $10 | 0) + $9 | 0) > ($16 | 0) ? ($16 - $8 | 0) + $9 | 0 : $10;
      $11 = Math_imul($7, HEAP32[$1 >> 2]);
      label$10 : {
       if (HEAPU8[$1 + 22 | 0]) {
        if (($10 | 0) < 1) {
         break label$10
        }
        $15 = HEAP32[$1 + 28 >> 2];
        $13 = Math_fround(0.0);
        $7 = 0;
        while (1) {
         $8 = HEAP32[($9 << 2) + $2 >> 2] + ($5 << 2) | 0;
         $13 = Math_fround($13 + HEAPF32[$15 + ($7 + $11 << 2) >> 2]);
         HEAPF32[$8 >> 2] = $13 + HEAPF32[$8 >> 2];
         $9 = $9 + 1 | 0;
         $8 = ($9 | 0) == 2;
         $9 = $8 ? 0 : $9;
         $5 = $5 + $8 | 0;
         $7 = $7 + 1 | 0;
         if (($10 | 0) != ($7 | 0)) {
          continue
         }
         break;
        };
        break label$10;
       }
       $7 = 0;
       if (($9 | 0) == 1) {
        $7 = HEAP32[$2 + 4 >> 2] + ($5 << 2) | 0;
        HEAPF32[$7 >> 2] = Math_fround(HEAPF32[HEAP32[$1 + 28 >> 2] + ($11 << 2) >> 2] + Math_fround(0.0)) + HEAPF32[$7 >> 2];
        $7 = 1;
        $9 = 0;
        $5 = $5 + 1 | 0;
       }
       label$14 : {
        if (($7 + 1 | 0) >= ($10 | 0)) {
         $8 = $7;
         break label$14;
        }
        $15 = HEAP32[$2 + 4 >> 2];
        $17 = HEAP32[$2 >> 2];
        $18 = HEAP32[$1 + 28 >> 2];
        while (1) {
         $8 = $5 << 2;
         $12 = $8 + $17 | 0;
         $14 = $12;
         $13 = HEAPF32[$12 >> 2];
         $12 = ($7 + $11 << 2) + $18 | 0;
         HEAPF32[$14 >> 2] = $13 + Math_fround(HEAPF32[$12 >> 2] + Math_fround(0.0));
         $8 = $8 + $15 | 0;
         HEAPF32[$8 >> 2] = HEAPF32[$8 >> 2] + Math_fround(HEAPF32[$12 + 4 >> 2] + Math_fround(0.0));
         $5 = $5 + 1 | 0;
         $12 = $7 + 3 | 0;
         $8 = $7 + 2 | 0;
         $7 = $8;
         if (($12 | 0) < ($10 | 0)) {
          continue
         }
         break;
        };
       }
       if (($8 | 0) >= ($10 | 0)) {
        break label$10
       }
       $7 = HEAP32[($9 << 2) + $2 >> 2] + ($5 << 2) | 0;
       HEAPF32[$7 >> 2] = Math_fround(HEAPF32[HEAP32[$1 + 28 >> 2] + ($8 + $11 << 2) >> 2] + Math_fround(0.0)) + HEAPF32[$7 >> 2];
       $8 = $9 + 1 | 0;
       $7 = ($8 | 0) == 2;
       $9 = $7 ? 0 : $8;
       $5 = $5 + $7 | 0;
      }
      $6 = $6 - $10 | 0;
      $7 = 1;
     }
     if ($7) {
      continue
     }
     break;
    };
    return 0;
   }
   HEAP32[$3 >> 2] = $9;
   HEAP32[$4 >> 2] = $5;
   return 1;
  }
  error_28stb_vorbis__2c_20STBVorbisError_29($0, 21);
  return 0;
 }
 
 function codebook_decode_deinterleave_repeat_28stb_vorbis__2c_20Codebook__2c_20float___2c_20int_2c_20int__2c_20int__2c_20int_2c_20int_29($0, $1, $2, $3, $4, $5, $6, $7) {
  var $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = Math_fround(0), $15 = 0;
  label$1 : {
   if (HEAPU8[$1 + 21 | 0]) {
    $15 = Math_imul($3, $6);
    $6 = HEAP32[$4 >> 2];
    $11 = HEAP32[$5 >> 2];
    $12 = HEAP32[$1 >> 2];
    label$3 : {
     while (1) {
      if (($7 | 0) < 1) {
       break label$3
      }
      if (HEAP32[$0 + 1412 >> 2] <= 9) {
       prep_huffman_28stb_vorbis__29($0)
      }
      $10 = HEAP32[$0 + 1408 >> 2];
      $8 = HEAP16[((($10 & 1023) << 1) + $1 | 0) + 36 >> 1];
      label$6 : {
       if (($8 | 0) >= 0) {
        $9 = $10;
        $10 = HEAPU8[$8 + HEAP32[$1 + 8 >> 2] | 0];
        HEAP32[$0 + 1408 >> 2] = $9 >>> $10;
        $9 = HEAP32[$0 + 1412 >> 2] - $10 | 0;
        $10 = ($9 | 0) < 0;
        HEAP32[$0 + 1412 >> 2] = $10 ? 0 : $9;
        $8 = $10 ? -1 : $8;
        break label$6;
       }
       $8 = codebook_decode_scalar_raw_28stb_vorbis__2c_20Codebook__29($0, $1);
      }
      if (($8 | 0) >= HEAP32[$1 + 2092 >> 2] ? HEAPU8[$1 + 23 | 0] : 0) {
       break label$1
      }
      label$9 : {
       if (($8 | 0) <= -1) {
        if (!HEAPU8[$0 + 1392 | 0]) {
         $8 = 0;
         if (HEAP32[$0 + 1400 >> 2]) {
          break label$9
         }
        }
        error_28stb_vorbis__2c_20STBVorbisError_29($0, 21);
        $8 = 0;
        break label$9;
       }
       $10 = Math_imul($3, $11);
       $12 = (($10 + $12 | 0) + $6 | 0) > ($15 | 0) ? ($15 - $10 | 0) + $6 | 0 : $12;
       $10 = Math_imul($8, HEAP32[$1 >> 2]);
       label$12 : {
        if (HEAPU8[$1 + 22 | 0]) {
         if (($12 | 0) < 1) {
          break label$12
         }
         $13 = HEAP32[$1 + 28 >> 2];
         $8 = 0;
         $14 = Math_fround(0.0);
         while (1) {
          $9 = HEAP32[($6 << 2) + $2 >> 2] + ($11 << 2) | 0;
          $14 = Math_fround($14 + HEAPF32[$13 + ($8 + $10 << 2) >> 2]);
          HEAPF32[$9 >> 2] = $14 + HEAPF32[$9 >> 2];
          $6 = $6 + 1 | 0;
          $9 = ($6 | 0) == ($3 | 0);
          $6 = $9 ? 0 : $6;
          $11 = $9 + $11 | 0;
          $8 = $8 + 1 | 0;
          if (($12 | 0) != ($8 | 0)) {
           continue
          }
          break;
         };
         break label$12;
        }
        if (($12 | 0) < 1) {
         break label$12
        }
        $13 = HEAP32[$1 + 28 >> 2];
        $8 = 0;
        while (1) {
         $9 = HEAP32[($6 << 2) + $2 >> 2] + ($11 << 2) | 0;
         HEAPF32[$9 >> 2] = Math_fround(HEAPF32[$13 + ($8 + $10 << 2) >> 2] + Math_fround(0.0)) + HEAPF32[$9 >> 2];
         $6 = $6 + 1 | 0;
         $9 = ($6 | 0) == ($3 | 0);
         $6 = $9 ? 0 : $6;
         $11 = $9 + $11 | 0;
         $8 = $8 + 1 | 0;
         if (($12 | 0) != ($8 | 0)) {
          continue
         }
         break;
        };
       }
       $7 = $7 - $12 | 0;
       $8 = 1;
      }
      if ($8) {
       continue
      }
      break;
     };
     return 0;
    }
    HEAP32[$4 >> 2] = $6;
    HEAP32[$5 >> 2] = $11;
    return 1;
   }
   error_28stb_vorbis__2c_20STBVorbisError_29($0, 21);
   return 0;
  }
  __assert_fail(28180, 27928, 1464, 28216);
  abort();
 }
 
 function residue_decode_28stb_vorbis__2c_20Codebook__2c_20float__2c_20int_2c_20int_2c_20int_29($0, $1, $2, $3, $4, $5) {
  var $6 = 0, $7 = 0;
  label$1 : {
   if ($5) {
    $6 = 1;
    if (($4 | 0) < 1) {
     break label$1
    }
    $5 = 0;
    while (1) {
     if (!codebook_decode_28stb_vorbis__2c_20Codebook__2c_20float__2c_20int_29($0, $1, ($3 << 2) + $2 | 0, $4 - $5 | 0)) {
      return 0
     }
     $7 = HEAP32[$1 >> 2];
     $3 = $7 + $3 | 0;
     $5 = $5 + $7 | 0;
     if (($5 | 0) < ($4 | 0)) {
      continue
     }
     break;
    };
    break label$1;
   }
   $6 = 1;
   $5 = ($4 | 0) / HEAP32[$1 >> 2] | 0;
   if (($5 | 0) < 1) {
    break label$1
   }
   $2 = ($3 << 2) + $2 | 0;
   $4 = $4 - $3 | 0;
   $6 = 0;
   $3 = 0;
   while (1) {
    if (!codebook_decode_step_28stb_vorbis__2c_20Codebook__2c_20float__2c_20int_2c_20int_29($0, $1, $2 + ($3 << 2) | 0, $4 - $3 | 0, $5)) {
     break label$1
    }
    $3 = $3 + 1 | 0;
    if (($5 | 0) != ($3 | 0)) {
     continue
    }
    break;
   };
   return 1;
  }
  return $6;
 }
 
 function draw_line_28float__2c_20int_2c_20int_2c_20int_2c_20int_2c_20int_29($0, $1, $2, $3, $4, $5) {
  var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
  $6 = ($1 << 2) + $0 | 0;
  HEAPF32[$6 >> 2] = HEAPF32[($2 << 2) + 28304 >> 2] * HEAPF32[$6 >> 2];
  $4 = $4 - $2 | 0;
  $6 = $3 - $1 | 0;
  $7 = ($4 | 0) / ($6 | 0) | 0;
  $1 = $1 + 1 | 0;
  $5 = ($3 | 0) > ($5 | 0) ? $5 : $3;
  if (($1 | 0) < ($5 | 0)) {
   $3 = $4 >> 31;
   $8 = $3 + $4 ^ $3;
   $3 = $7 >> 31;
   $8 = $8 - Math_imul($6, $3 + $7 ^ $3) | 0;
   $3 = 0;
   $4 = ($4 | 0) < 0 ? -1 : 1;
   while (1) {
    $9 = ($1 << 2) + $0 | 0;
    $3 = $3 + $8 | 0;
    $10 = ($3 | 0) < ($6 | 0);
    $2 = ($2 + $7 | 0) + ($10 ? 0 : $4) | 0;
    HEAPF32[$9 >> 2] = HEAPF32[($2 << 2) + 28304 >> 2] * HEAPF32[$9 >> 2];
    $3 = $3 - ($10 ? 0 : $6) | 0;
    $1 = $1 + 1 | 0;
    if (($5 | 0) != ($1 | 0)) {
     continue
    }
    break;
   };
  }
 }
 
 function imdct_step3_iter0_loop_28int_2c_20float__2c_20int_2c_20int_2c_20float__29($0, $1, $2, $3, $4) {
  var $5 = Math_fround(0), $6 = Math_fround(0), $7 = 0, $8 = Math_fround(0), $9 = Math_fround(0), $10 = 0;
  if (!($0 & 3)) {
   if (($0 | 0) >= 4) {
    $10 = $0 >> 2;
    $0 = ($2 << 2) + $1 | 0;
    $3 = $0 + ($3 << 2) | 0;
    while (1) {
     $1 = $3 + -4 | 0;
     $6 = HEAPF32[$1 >> 2];
     $8 = HEAPF32[$0 >> 2];
     $9 = HEAPF32[$3 >> 2];
     HEAPF32[$0 >> 2] = $8 + $9;
     $2 = $0 + -4 | 0;
     $5 = HEAPF32[$2 >> 2];
     HEAPF32[$2 >> 2] = $5 + HEAPF32[$1 >> 2];
     $8 = Math_fround($8 - $9);
     $5 = Math_fround($5 - $6);
     HEAPF32[$3 >> 2] = Math_fround($8 * HEAPF32[$4 >> 2]) - Math_fround($5 * HEAPF32[$4 + 4 >> 2]);
     HEAPF32[$1 >> 2] = Math_fround($5 * HEAPF32[$4 >> 2]) + Math_fround($8 * HEAPF32[$4 + 4 >> 2]);
     $1 = $3 + -12 | 0;
     $8 = HEAPF32[$1 >> 2];
     $2 = $0 + -8 | 0;
     $5 = HEAPF32[$2 >> 2];
     $7 = $2;
     $2 = $3 + -8 | 0;
     $9 = HEAPF32[$2 >> 2];
     HEAPF32[$7 >> 2] = $5 + $9;
     $7 = $0 + -12 | 0;
     $6 = HEAPF32[$7 >> 2];
     HEAPF32[$7 >> 2] = $6 + HEAPF32[$1 >> 2];
     $5 = Math_fround($5 - $9);
     $6 = Math_fround($6 - $8);
     HEAPF32[$2 >> 2] = Math_fround($5 * HEAPF32[$4 + 32 >> 2]) - Math_fround($6 * HEAPF32[$4 + 36 >> 2]);
     HEAPF32[$1 >> 2] = Math_fround($6 * HEAPF32[$4 + 32 >> 2]) + Math_fround($5 * HEAPF32[$4 + 36 >> 2]);
     $1 = $3 + -20 | 0;
     $8 = HEAPF32[$1 >> 2];
     $2 = $0 + -16 | 0;
     $5 = HEAPF32[$2 >> 2];
     $7 = $2;
     $2 = $3 + -16 | 0;
     $9 = HEAPF32[$2 >> 2];
     HEAPF32[$7 >> 2] = $5 + $9;
     $7 = $0 + -20 | 0;
     $6 = HEAPF32[$7 >> 2];
     HEAPF32[$7 >> 2] = $6 + HEAPF32[$1 >> 2];
     $5 = Math_fround($5 - $9);
     $6 = Math_fround($6 - $8);
     HEAPF32[$2 >> 2] = Math_fround($5 * HEAPF32[$4 + 64 >> 2]) - Math_fround($6 * HEAPF32[$4 + 68 >> 2]);
     HEAPF32[$1 >> 2] = Math_fround($6 * HEAPF32[$4 + 64 >> 2]) + Math_fround($5 * HEAPF32[$4 + 68 >> 2]);
     $1 = $3 + -28 | 0;
     $8 = HEAPF32[$1 >> 2];
     $2 = $0 + -24 | 0;
     $5 = HEAPF32[$2 >> 2];
     $7 = $2;
     $2 = $3 + -24 | 0;
     $9 = HEAPF32[$2 >> 2];
     HEAPF32[$7 >> 2] = $5 + $9;
     $7 = $0 + -28 | 0;
     $6 = HEAPF32[$7 >> 2];
     HEAPF32[$7 >> 2] = $6 + HEAPF32[$1 >> 2];
     $5 = Math_fround($5 - $9);
     $6 = Math_fround($6 - $8);
     HEAPF32[$2 >> 2] = Math_fround($5 * HEAPF32[$4 + 96 >> 2]) - Math_fround($6 * HEAPF32[$4 + 100 >> 2]);
     HEAPF32[$1 >> 2] = Math_fround($6 * HEAPF32[$4 + 96 >> 2]) + Math_fround($5 * HEAPF32[$4 + 100 >> 2]);
     $3 = $3 + -32 | 0;
     $0 = $0 + -32 | 0;
     $4 = $4 + 128 | 0;
     $1 = ($10 | 0) > 1;
     $10 = $10 + -1 | 0;
     if ($1) {
      continue
     }
     break;
    };
   }
   return;
  }
  __assert_fail(29328, 27928, 2110, 29341);
  abort();
 }
 
 function imdct_step3_inner_r_loop_28int_2c_20float__2c_20int_2c_20int_2c_20float__2c_20int_29($0, $1, $2, $3, $4, $5) {
  var $6 = Math_fround(0), $7 = Math_fround(0), $8 = 0, $9 = Math_fround(0), $10 = Math_fround(0), $11 = 0;
  if (($0 | 0) >= 4) {
   $11 = $0 >> 2;
   $0 = ($2 << 2) + $1 | 0;
   $3 = $0 + ($3 << 2) | 0;
   $1 = $5 << 2;
   while (1) {
    $2 = $3 + -4 | 0;
    $7 = HEAPF32[$2 >> 2];
    $9 = HEAPF32[$0 >> 2];
    $10 = HEAPF32[$3 >> 2];
    HEAPF32[$0 >> 2] = $9 + $10;
    $5 = $0 + -4 | 0;
    $6 = HEAPF32[$5 >> 2];
    HEAPF32[$5 >> 2] = $6 + HEAPF32[$2 >> 2];
    $9 = Math_fround($9 - $10);
    $6 = Math_fround($6 - $7);
    HEAPF32[$3 >> 2] = Math_fround($9 * HEAPF32[$4 >> 2]) - Math_fround($6 * HEAPF32[$4 + 4 >> 2]);
    HEAPF32[$2 >> 2] = Math_fround($6 * HEAPF32[$4 >> 2]) + Math_fround($9 * HEAPF32[$4 + 4 >> 2]);
    $5 = $3 + -12 | 0;
    $9 = HEAPF32[$5 >> 2];
    $2 = $0 + -8 | 0;
    $6 = HEAPF32[$2 >> 2];
    $8 = $2;
    $2 = $3 + -8 | 0;
    $10 = HEAPF32[$2 >> 2];
    HEAPF32[$8 >> 2] = $6 + $10;
    $8 = $0 + -12 | 0;
    $7 = HEAPF32[$8 >> 2];
    HEAPF32[$8 >> 2] = $7 + HEAPF32[$5 >> 2];
    $8 = $2;
    $6 = Math_fround($6 - $10);
    $2 = $1 + $4 | 0;
    $7 = Math_fround($7 - $9);
    HEAPF32[$8 >> 2] = Math_fround($6 * HEAPF32[$2 >> 2]) - Math_fround($7 * HEAPF32[$2 + 4 >> 2]);
    HEAPF32[$5 >> 2] = Math_fround($7 * HEAPF32[$2 >> 2]) + Math_fround($6 * HEAPF32[$2 + 4 >> 2]);
    $4 = $3 + -20 | 0;
    $9 = HEAPF32[$4 >> 2];
    $5 = $0 + -16 | 0;
    $6 = HEAPF32[$5 >> 2];
    $8 = $5;
    $5 = $3 + -16 | 0;
    $10 = HEAPF32[$5 >> 2];
    HEAPF32[$8 >> 2] = $6 + $10;
    $8 = $0 + -20 | 0;
    $7 = HEAPF32[$8 >> 2];
    HEAPF32[$8 >> 2] = $7 + HEAPF32[$4 >> 2];
    $6 = Math_fround($6 - $10);
    $2 = $1 + $2 | 0;
    $7 = Math_fround($7 - $9);
    HEAPF32[$5 >> 2] = Math_fround($6 * HEAPF32[$2 >> 2]) - Math_fround($7 * HEAPF32[$2 + 4 >> 2]);
    HEAPF32[$4 >> 2] = Math_fround($7 * HEAPF32[$2 >> 2]) + Math_fround($6 * HEAPF32[$2 + 4 >> 2]);
    $4 = $3 + -28 | 0;
    $9 = HEAPF32[$4 >> 2];
    $5 = $0 + -24 | 0;
    $6 = HEAPF32[$5 >> 2];
    $8 = $5;
    $5 = $3 + -24 | 0;
    $10 = HEAPF32[$5 >> 2];
    HEAPF32[$8 >> 2] = $6 + $10;
    $8 = $0 + -28 | 0;
    $7 = HEAPF32[$8 >> 2];
    HEAPF32[$8 >> 2] = $7 + HEAPF32[$4 >> 2];
    $6 = Math_fround($6 - $10);
    $2 = $1 + $2 | 0;
    $7 = Math_fround($7 - $9);
    HEAPF32[$5 >> 2] = Math_fround($6 * HEAPF32[$2 >> 2]) - Math_fround($7 * HEAPF32[$2 + 4 >> 2]);
    HEAPF32[$4 >> 2] = Math_fround($7 * HEAPF32[$2 >> 2]) + Math_fround($6 * HEAPF32[$2 + 4 >> 2]);
    $4 = $1 + $2 | 0;
    $3 = $3 + -32 | 0;
    $0 = $0 + -32 | 0;
    $2 = ($11 | 0) > 1;
    $11 = $11 + -1 | 0;
    if ($2) {
     continue
    }
    break;
   };
  }
 }
 
 function imdct_step3_inner_s_loop_28int_2c_20float__2c_20int_2c_20int_2c_20float__2c_20int_2c_20int_29($0, $1, $2, $3, $4, $5, $6) {
  var $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = 0, $12 = Math_fround(0), $13 = 0, $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0);
  if (($0 | 0) >= 1) {
   $11 = Math_imul($5, 12) + $4 | 0;
   $12 = HEAPF32[$11 >> 2];
   $13 = $5 << 3;
   $14 = HEAPF32[$13 + $4 >> 2];
   $5 = ($5 << 2) + $4 | 0;
   $15 = HEAPF32[$5 >> 2];
   $16 = HEAPF32[$11 + 4 >> 2];
   $17 = HEAPF32[($13 | 4) + $4 >> 2];
   $18 = HEAPF32[$5 + 4 >> 2];
   $19 = HEAPF32[$4 + 4 >> 2];
   $20 = HEAPF32[$4 >> 2];
   $4 = ($2 << 2) + $1 | 0;
   $5 = $4 + ($3 << 2) | 0;
   $1 = 0 - $6 << 2;
   while (1) {
    $2 = $5 + -4 | 0;
    $8 = HEAPF32[$2 >> 2];
    $9 = HEAPF32[$4 >> 2];
    $10 = HEAPF32[$5 >> 2];
    HEAPF32[$4 >> 2] = $9 + $10;
    $3 = $4 + -4 | 0;
    $7 = HEAPF32[$3 >> 2];
    HEAPF32[$3 >> 2] = $7 + HEAPF32[$2 >> 2];
    $9 = Math_fround($9 - $10);
    $7 = Math_fround($7 - $8);
    HEAPF32[$2 >> 2] = Math_fround($19 * $9) + Math_fround($20 * $7);
    HEAPF32[$5 >> 2] = Math_fround($20 * $9) - Math_fround($19 * $7);
    $2 = $5 + -12 | 0;
    $9 = HEAPF32[$2 >> 2];
    $3 = $4 + -8 | 0;
    $7 = HEAPF32[$3 >> 2];
    $6 = $3;
    $3 = $5 + -8 | 0;
    $10 = HEAPF32[$3 >> 2];
    HEAPF32[$6 >> 2] = $7 + $10;
    $6 = $4 + -12 | 0;
    $8 = HEAPF32[$6 >> 2];
    HEAPF32[$6 >> 2] = $8 + HEAPF32[$2 >> 2];
    $7 = Math_fround($7 - $10);
    $8 = Math_fround($8 - $9);
    HEAPF32[$2 >> 2] = Math_fround($18 * $7) + Math_fround($15 * $8);
    HEAPF32[$3 >> 2] = Math_fround($15 * $7) - Math_fround($18 * $8);
    $2 = $5 + -20 | 0;
    $9 = HEAPF32[$2 >> 2];
    $3 = $4 + -16 | 0;
    $7 = HEAPF32[$3 >> 2];
    $6 = $3;
    $3 = $5 + -16 | 0;
    $10 = HEAPF32[$3 >> 2];
    HEAPF32[$6 >> 2] = $7 + $10;
    $6 = $4 + -20 | 0;
    $8 = HEAPF32[$6 >> 2];
    HEAPF32[$6 >> 2] = $8 + HEAPF32[$2 >> 2];
    $7 = Math_fround($7 - $10);
    $8 = Math_fround($8 - $9);
    HEAPF32[$2 >> 2] = Math_fround($17 * $7) + Math_fround($14 * $8);
    HEAPF32[$3 >> 2] = Math_fround($14 * $7) - Math_fround($17 * $8);
    $2 = $5 + -28 | 0;
    $9 = HEAPF32[$2 >> 2];
    $3 = $4 + -24 | 0;
    $7 = HEAPF32[$3 >> 2];
    $6 = $3;
    $3 = $5 + -24 | 0;
    $10 = HEAPF32[$3 >> 2];
    HEAPF32[$6 >> 2] = $7 + $10;
    $6 = $4 + -28 | 0;
    $8 = HEAPF32[$6 >> 2];
    HEAPF32[$6 >> 2] = $8 + HEAPF32[$2 >> 2];
    $7 = Math_fround($7 - $10);
    $8 = Math_fround($8 - $9);
    HEAPF32[$2 >> 2] = Math_fround($16 * $7) + Math_fround($12 * $8);
    HEAPF32[$3 >> 2] = Math_fround($12 * $7) - Math_fround($16 * $8);
    $5 = $1 + $5 | 0;
    $4 = $1 + $4 | 0;
    $2 = ($0 | 0) > 1;
    $0 = $0 + -1 | 0;
    if ($2) {
     continue
    }
    break;
   };
  }
 }
 
 function imdct_step3_inner_s_loop_ld654_28int_2c_20float__2c_20int_2c_20float__2c_20int_29($0, $1, $2, $3, $4) {
  var $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = 0, $9 = Math_fround(0), $10 = Math_fround(0), $11 = 0;
  if ((0 - ($0 << 4) | 0) <= -1) {
   $1 = ($2 << 2) + $1 | 0;
   $2 = $1 - ($0 << 6) | 0;
   $10 = HEAPF32[($4 >> 3 << 2) + $3 >> 2];
   while (1) {
    $6 = HEAPF32[$1 >> 2];
    $0 = $1 + -32 | 0;
    $7 = HEAPF32[$0 >> 2];
    HEAPF32[$1 >> 2] = $6 + $7;
    $3 = $1 + -4 | 0;
    $5 = HEAPF32[$3 >> 2];
    $4 = $3;
    $3 = $1 + -36 | 0;
    $9 = HEAPF32[$3 >> 2];
    HEAPF32[$4 >> 2] = $5 + $9;
    HEAPF32[$0 >> 2] = $6 - $7;
    HEAPF32[$3 >> 2] = $5 - $9;
    $3 = $1 + -8 | 0;
    $5 = HEAPF32[$3 >> 2];
    $4 = $3;
    $3 = $1 + -40 | 0;
    $7 = HEAPF32[$3 >> 2];
    HEAPF32[$4 >> 2] = $5 + $7;
    $4 = $1 + -12 | 0;
    $6 = HEAPF32[$4 >> 2];
    $8 = $4;
    $4 = $1 + -44 | 0;
    $9 = HEAPF32[$4 >> 2];
    HEAPF32[$8 >> 2] = $6 + $9;
    $5 = Math_fround($5 - $7);
    $6 = Math_fround($6 - $9);
    HEAPF32[$3 >> 2] = $10 * Math_fround($5 + $6);
    HEAPF32[$4 >> 2] = $10 * Math_fround($6 - $5);
    $3 = $1 + -20 | 0;
    $5 = HEAPF32[$3 >> 2];
    $4 = $1 + -52 | 0;
    $6 = HEAPF32[$4 >> 2];
    $8 = $1 + -16 | 0;
    $7 = HEAPF32[$8 >> 2];
    $11 = $8;
    $8 = $1 + -48 | 0;
    $9 = HEAPF32[$8 >> 2];
    HEAPF32[$11 >> 2] = $9 + $7;
    HEAPF32[$3 >> 2] = $5 + $6;
    HEAPF32[$8 >> 2] = $5 - $6;
    HEAPF32[$4 >> 2] = $9 - $7;
    $3 = $1 + -60 | 0;
    $5 = HEAPF32[$3 >> 2];
    $4 = $1 + -28 | 0;
    $6 = HEAPF32[$4 >> 2];
    $8 = $1 + -24 | 0;
    $7 = HEAPF32[$8 >> 2];
    $11 = $8;
    $8 = $1 + -56 | 0;
    $9 = HEAPF32[$8 >> 2];
    HEAPF32[$11 >> 2] = $9 + $7;
    HEAPF32[$4 >> 2] = $6 + $5;
    $7 = Math_fround($9 - $7);
    $5 = Math_fround($6 - $5);
    HEAPF32[$8 >> 2] = $10 * Math_fround($7 + $5);
    HEAPF32[$3 >> 2] = $10 * Math_fround($7 - $5);
    iter_54_28float__29($1);
    iter_54_28float__29($0);
    $1 = $1 + -64 | 0;
    if ($1 >>> 0 > $2 >>> 0) {
     continue
    }
    break;
   };
  }
 }
 
 function codebook_decode_28stb_vorbis__2c_20Codebook__2c_20float__2c_20int_29($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = Math_fround(0), $7 = 0;
  $5 = codebook_decode_start_28stb_vorbis__2c_20Codebook__2c_20int_29($0, $1);
  label$1 : {
   if (($5 | 0) < 0) {
    break label$1
   }
   $4 = HEAP32[$1 >> 2];
   $0 = ($4 | 0) < ($3 | 0) ? $4 : $3;
   $5 = Math_imul($4, $5);
   if (HEAPU8[$1 + 22 | 0]) {
    $4 = 1;
    if (($0 | 0) < 1) {
     break label$1
    }
    $7 = HEAP32[$1 + 28 >> 2];
    $3 = 0;
    while (1) {
     $4 = ($3 << 2) + $2 | 0;
     $6 = Math_fround($6 + HEAPF32[($3 + $5 << 2) + $7 >> 2]);
     HEAPF32[$4 >> 2] = HEAPF32[$4 >> 2] + $6;
     $6 = Math_fround($6 + HEAPF32[$1 + 12 >> 2]);
     $4 = 1;
     $3 = $3 + 1 | 0;
     if (($0 | 0) != ($3 | 0)) {
      continue
     }
     break;
    };
    break label$1;
   }
   $4 = 1;
   if (($0 | 0) < 1) {
    break label$1
   }
   $1 = HEAP32[$1 + 28 >> 2];
   $3 = 0;
   while (1) {
    $4 = ($3 << 2) + $2 | 0;
    HEAPF32[$4 >> 2] = HEAPF32[$4 >> 2] + Math_fround(HEAPF32[$1 + ($3 + $5 << 2) >> 2] + Math_fround(0.0));
    $4 = 1;
    $3 = $3 + 1 | 0;
    if (($0 | 0) != ($3 | 0)) {
     continue
    }
    break;
   };
  }
  return $4;
 }
 
 function codebook_decode_step_28stb_vorbis__2c_20Codebook__2c_20float__2c_20int_2c_20int_29($0, $1, $2, $3, $4) {
  var $5 = 0, $6 = 0, $7 = 0, $8 = Math_fround(0), $9 = Math_fround(0);
  $6 = codebook_decode_start_28stb_vorbis__2c_20Codebook__2c_20int_29($0, $1);
  label$1 : {
   if (($6 | 0) < 0) {
    break label$1
   }
   $5 = 1;
   $0 = HEAP32[$1 >> 2];
   $7 = ($0 | 0) < ($3 | 0) ? $0 : $3;
   if (($7 | 0) < 1) {
    break label$1
   }
   $0 = Math_imul($0, $6);
   $6 = HEAP32[$1 + 28 >> 2];
   $3 = 0;
   $1 = HEAPU8[$1 + 22 | 0];
   while (1) {
    $5 = (Math_imul($3, $4) << 2) + $2 | 0;
    $9 = Math_fround($8 + HEAPF32[$6 + ($0 + $3 << 2) >> 2]);
    HEAPF32[$5 >> 2] = HEAPF32[$5 >> 2] + $9;
    $8 = $1 ? $9 : $8;
    $5 = 1;
    $3 = $3 + 1 | 0;
    if (($7 | 0) != ($3 | 0)) {
     continue
    }
    break;
   };
  }
  return $5;
 }
 
 function codebook_decode_start_28stb_vorbis__2c_20Codebook__2c_20int_29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0;
  if (!HEAPU8[$1 + 21 | 0]) {
   error_28stb_vorbis__2c_20STBVorbisError_29($0, 21);
   return -1;
  }
  if (HEAP32[$0 + 1412 >> 2] <= 9) {
   prep_huffman_28stb_vorbis__29($0)
  }
  $2 = HEAP32[$0 + 1408 >> 2];
  $4 = HEAP16[((($2 & 1023) << 1) + $1 | 0) + 36 >> 1];
  label$3 : {
   if (($4 | 0) >= 0) {
    $3 = $2;
    $2 = HEAPU8[$4 + HEAP32[$1 + 8 >> 2] | 0];
    HEAP32[$0 + 1408 >> 2] = $3 >>> $2;
    $2 = HEAP32[$0 + 1412 >> 2] - $2 | 0;
    $3 = ($2 | 0) < 0;
    HEAP32[$0 + 1412 >> 2] = $3 ? 0 : $2;
    $2 = $3 ? -1 : $4;
    break label$3;
   }
   $2 = codebook_decode_scalar_raw_28stb_vorbis__2c_20Codebook__29($0, $1);
  }
  if (!(($2 | 0) >= HEAP32[$1 + 2092 >> 2] ? HEAPU8[$1 + 23 | 0] : 0)) {
   if (!(($2 | 0) > -1 | (HEAP32[$0 + 1400 >> 2] ? !HEAPU8[$0 + 1392 | 0] : 0))) {
    error_28stb_vorbis__2c_20STBVorbisError_29($0, 21)
   }
   return $2;
  }
  __assert_fail(28252, 27928, 1370, 28274);
  abort();
 }
 
 function iter_54_28float__29($0) {
  var $1 = 0, $2 = Math_fround(0), $3 = Math_fround(0), $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = 0, $9 = 0, $10 = 0, $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = 0;
  $2 = HEAPF32[$0 >> 2];
  $8 = $0 + -16 | 0;
  $3 = HEAPF32[$8 >> 2];
  $4 = Math_fround($2 + $3);
  $1 = $0 + -8 | 0;
  $5 = HEAPF32[$1 >> 2];
  $9 = $0 + -24 | 0;
  $6 = HEAPF32[$9 >> 2];
  $7 = Math_fround($5 + $6);
  HEAPF32[$0 >> 2] = $4 + $7;
  HEAPF32[$1 >> 2] = $4 - $7;
  $1 = $0 + -12 | 0;
  $7 = HEAPF32[$1 >> 2];
  $10 = $0 + -28 | 0;
  $11 = HEAPF32[$10 >> 2];
  $4 = Math_fround($7 + $11);
  $15 = $1;
  $1 = $0 + -4 | 0;
  $12 = HEAPF32[$1 >> 2];
  $0 = $0 + -20 | 0;
  $13 = HEAPF32[$0 >> 2];
  $14 = Math_fround($12 + $13);
  HEAPF32[$15 >> 2] = $14 - $4;
  $5 = Math_fround($5 - $6);
  $6 = Math_fround($12 - $13);
  HEAPF32[$10 >> 2] = $5 + $6;
  $2 = Math_fround($2 - $3);
  $3 = Math_fround($7 - $11);
  HEAPF32[$8 >> 2] = $2 + $3;
  HEAPF32[$9 >> 2] = $2 - $3;
  HEAPF32[$1 >> 2] = $4 + $14;
  HEAPF32[$0 >> 2] = $6 - $5;
 }
 
 function add_entry_28Codebook__2c_20unsigned_20int_2c_20int_2c_20int_2c_20int_2c_20unsigned_20int__29($0, $1, $2, $3, $4, $5) {
  var $6 = 0, $7 = 0;
  $6 = HEAP32[$0 + 32 >> 2];
  if (!HEAPU8[$0 + 23 | 0]) {
   HEAP32[($2 << 2) + $6 >> 2] = $1;
   return;
  }
  $7 = $6;
  $6 = $3 << 2;
  HEAP32[$7 + $6 >> 2] = $1;
  HEAP8[HEAP32[$0 + 8 >> 2] + $3 | 0] = $4;
  HEAP32[$5 + $6 >> 2] = $2;
 }
 
 function include_in_sort_28Codebook__2c_20unsigned_20char_29($0, $1) {
  label$1 : {
   if (HEAPU8[$0 + 23 | 0]) {
    $0 = 1;
    if (($1 | 0) != 255) {
     break label$1
    }
    __assert_fail(29583, 27928, 753, 29598);
    abort();
   }
   if (($1 | 0) == 255) {
    return 0
   }
   $0 = $1 >>> 0 > 10;
  }
  return $0;
 }
 
 function uint32_compare_28void_20const__2c_20void_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $0 = HEAP32[$0 >> 2];
  $1 = HEAP32[$1 >> 2];
  return ($0 >>> 0 < $1 >>> 0 ? -1 : $0 >>> 0 > $1 >>> 0) | 0;
 }
 
 function std____2___MetaBase__28std__is_arithmetic_float___value_29_20___20_28std__is_arithmetic_int___value_29____EnableIfImpl_std____2____promote_float_2c_20int_2c_20void__20___type_20pow_float_2c_20int__28float_2c_20int_29($0, $1) {
  return pow(+$0, +($1 | 0));
 }
 
 function compute_twiddle_factors_28int_2c_20float__2c_20float__2c_20float__29($0, $1, $2, $3) {
  var $4 = 0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
  if (($0 | 0) >= 4) {
   $4 = $0 >> 2;
   $11 = ($4 | 0) > 1 ? $4 : 1;
   $7 = +($0 | 0);
   $4 = 0;
   while (1) {
    $8 = $4 << 2;
    $5 = +($6 << 2) * 3.141592653589793 / $7;
    HEAPF32[$8 + $1 >> 2] = cos($5);
    $9 = $4 | 1;
    $10 = $9 << 2;
    HEAPF32[$10 + $1 >> 2] = -Math_fround(sin($5));
    $5 = +($9 | 0) * 3.141592653589793 / $7 * .5;
    HEAPF32[$2 + $8 >> 2] = Math_fround(cos($5)) * Math_fround(.5);
    HEAPF32[$2 + $10 >> 2] = Math_fround(sin($5)) * Math_fround(.5);
    $4 = $4 + 2 | 0;
    $6 = $6 + 1 | 0;
    if (($11 | 0) != ($6 | 0)) {
     continue
    }
    break;
   };
  }
  if (($0 | 0) >= 8) {
   $1 = $0 >> 3;
   $1 = ($1 | 0) > 1 ? $1 : 1;
   $7 = +($0 | 0);
   $4 = 0;
   $6 = 0;
   while (1) {
    $0 = $4 | 1;
    $5 = +($0 << 1) * 3.141592653589793 / $7;
    HEAPF32[($4 << 2) + $3 >> 2] = cos($5);
    HEAPF32[($0 << 2) + $3 >> 2] = -Math_fround(sin($5));
    $4 = $4 + 2 | 0;
    $6 = $6 + 1 | 0;
    if (($1 | 0) != ($6 | 0)) {
     continue
    }
    break;
   };
  }
 }
 
 function compute_window_28int_2c_20float__29($0, $1) {
  var $2 = Math_fround(0), $3 = 0, $4 = 0.0, $5 = 0;
  if (($0 | 0) >= 2) {
   $0 = $0 >> 1;
   $3 = ($0 | 0) > 1 ? $0 : 1;
   $4 = +($0 | 0);
   $0 = 0;
   while (1) {
    $5 = ($0 << 2) + $1 | 0;
    $2 = Math_fround(sin((+($0 | 0) + .5) / $4 * .5 * 3.141592653589793));
    HEAPF32[$5 >> 2] = sin(+Math_fround($2 * $2) * 1.5707963267948966);
    $0 = $0 + 1 | 0;
    if (($3 | 0) != ($0 | 0)) {
     continue
    }
    break;
   };
  }
 }
 
 function compute_bitreverse_28int_2c_20unsigned_20short__29($0, $1) {
  var $2 = 0, $3 = 0;
  if (($0 | 0) >= 8) {
   $2 = $0 >> 3;
   $2 = ($2 | 0) > 1 ? $2 : 1;
   $3 = 36 - ilog_28int_29($0) | 0;
   $0 = 0;
   while (1) {
    HEAP16[($0 << 1) + $1 >> 1] = bit_reverse_28unsigned_20int_29($0) >>> $3 << 2;
    $0 = $0 + 1 | 0;
    if (($2 | 0) != ($0 | 0)) {
     continue
    }
    break;
   };
  }
 }
 
 function rand() {
  var $0 = 0, $1 = 0;
  $0 = __wasm_i64_mul(HEAP32[16592], HEAP32[16593], 1284865837, 1481765933);
  $1 = i64toi32_i32$HIGH_BITS;
  $0 = $0 + 1 | 0;
  if ($0 >>> 0 < 1) {
   $1 = $1 + 1 | 0
  }
  HEAP32[16592] = $0;
  HEAP32[16593] = $1;
  return $1 >>> 1 | 0;
 }
 
 function scalbnf($0, $1) {
  label$1 : {
   if (($1 | 0) >= 128) {
    $0 = Math_fround($0 * Math_fround(1701411834604692317316873.0e14));
    if (($1 | 0) < 255) {
     $1 = $1 + -127 | 0;
     break label$1;
    }
    $0 = Math_fround($0 * Math_fround(1701411834604692317316873.0e14));
    $1 = (($1 | 0) < 381 ? $1 : 381) + -254 | 0;
    break label$1;
   }
   if (($1 | 0) > -127) {
    break label$1
   }
   $0 = Math_fround($0 * Math_fround(1.1754943508222875e-38));
   if (($1 | 0) > -253) {
    $1 = $1 + 126 | 0;
    break label$1;
   }
   $0 = Math_fround($0 * Math_fround(1.1754943508222875e-38));
   $1 = (($1 | 0) > -378 ? $1 : -378) + 252 | 0;
  }
  return Math_fround($0 * (wasm2js_scratch_store_i32(0, ($1 << 23) + 1065353216 | 0), wasm2js_scratch_load_f32()));
 }
 
 function __stdio_seek($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0;
  $4 = global$0 - 16 | 0;
  $5 = $4;
  if ($4 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $5;
  __wasi_syscall_ret(legalimport$__wasi_fd_seek(HEAP32[$0 + 60 >> 2], $1 | 0, $2 | 0, $3 & 255, $4 + 8 | 0) | 0);
  $0 = HEAP32[$4 + 8 >> 2];
  $1 = HEAP32[$4 + 12 >> 2];
  $2 = $4 + 16 | 0;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  i64toi32_i32$HIGH_BITS = $1;
  return $0 | 0;
 }
 
 function fflush($0) {
  $0 = $0 | 0;
  var $1 = 0;
  if ($0) {
   if (HEAP32[$0 + 76 >> 2] <= -1) {
    return __fflush_unlocked($0) | 0
   }
   return __fflush_unlocked($0) | 0;
  }
  if (HEAP32[16234]) {
   $1 = fflush(HEAP32[16234])
  }
  $0 = HEAP32[16599];
  if ($0) {
   while (1) {
    if (HEAPU32[$0 + 20 >> 2] > HEAPU32[$0 + 28 >> 2]) {
     $1 = __fflush_unlocked($0) | $1
    }
    $0 = HEAP32[$0 + 56 >> 2];
    if ($0) {
     continue
    }
    break;
   }
  }
  return $1 | 0;
 }
 
 function __fflush_unlocked($0) {
  var $1 = 0, $2 = 0;
  label$1 : {
   if (HEAPU32[$0 + 20 >> 2] <= HEAPU32[$0 + 28 >> 2]) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[$0 + 36 >> 2]]($0, 0, 0) | 0;
   if (HEAP32[$0 + 20 >> 2]) {
    break label$1
   }
   return -1;
  }
  $1 = HEAP32[$0 + 4 >> 2];
  $2 = HEAP32[$0 + 8 >> 2];
  if ($1 >>> 0 < $2 >>> 0) {
   $1 = $1 - $2 | 0;
   FUNCTION_TABLE[HEAP32[$0 + 40 >> 2]]($0, $1, $1 >> 31, 1) | 0;
  }
  HEAP32[$0 + 28 >> 2] = 0;
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP32[$0 + 20 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$0 + 8 >> 2] = 0;
  return 0;
 }
 
 function __errno_location() {
  return 66384;
 }
 
 function __syscall_ret($0) {
  if ($0 >>> 0 >= 4294963201) {
   HEAP32[16596] = 0 - $0;
   $0 = -1;
  }
  return $0;
 }
 
 function fopen($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0;
  $3 = global$0 - 16 | 0;
  $2 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  label$2 : {
   label$3 : {
    if (!strchr(29836, HEAP8[$1 | 0])) {
     HEAP32[16596] = 28;
     break label$3;
    }
    $4 = __fmodeflags($1);
    HEAP32[$3 >> 2] = 438;
    $2 = 0;
    $0 = __syscall_ret(__syscall5($0 | 0, $4 | 32768, $3 | 0) | 0);
    if (($0 | 0) < 0) {
     break label$2
    }
    $2 = __fdopen($0, $1);
    if ($2) {
     break label$2
    }
    __wasi_fd_close($0 | 0) | 0;
   }
   $2 = 0;
  }
  $0 = $3 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
  return $2;
 }
 
 function __stdio_close($0) {
  $0 = $0 | 0;
  return __wasi_fd_close(HEAP32[$0 + 60 >> 2]) | 0;
 }
 
 function __fseeko_unlocked($0, $1, $2, $3) {
  var $4 = 0, $5 = 0;
  if (($3 | 0) == 1) {
   $5 = $1;
   $4 = HEAP32[$0 + 8 >> 2] - HEAP32[$0 + 4 >> 2] | 0;
   $1 = $1 - $4 | 0;
   $2 = $2 - (($4 >> 31) + ($5 >>> 0 < $4 >>> 0) | 0) | 0;
  }
  label$2 : {
   if (HEAPU32[$0 + 20 >> 2] > HEAPU32[$0 + 28 >> 2]) {
    FUNCTION_TABLE[HEAP32[$0 + 36 >> 2]]($0, 0, 0) | 0;
    if (!HEAP32[$0 + 20 >> 2]) {
     break label$2
    }
   }
   HEAP32[$0 + 28 >> 2] = 0;
   HEAP32[$0 + 16 >> 2] = 0;
   HEAP32[$0 + 20 >> 2] = 0;
   $2 = FUNCTION_TABLE[HEAP32[$0 + 40 >> 2]]($0, $1, $2, $3) >>> 0 >= 0 ? 0 : 1;
   $1 = i64toi32_i32$HIGH_BITS;
   if (($1 | 0) < 0 ? 1 : ($1 | 0) <= 0 ? $2 : 0) {
    break label$2
   }
   HEAP32[$0 + 4 >> 2] = 0;
   HEAP32[$0 + 8 >> 2] = 0;
   HEAP32[$0 >> 2] = HEAP32[$0 >> 2] & -17;
   return 0;
  }
  return -1;
 }
 
 function __fseeko($0, $1, $2, $3) {
  if (HEAP32[$0 + 76 >> 2] <= -1) {
   return __fseeko_unlocked($0, $1, $2, $3)
  }
  return __fseeko_unlocked($0, $1, $2, $3);
 }
 
 function fseek($0, $1, $2) {
  return __fseeko($0, $1, $1 >> 31, $2);
 }
 
 function __stdio_write($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  $3 = global$0 - 32 | 0;
  $4 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  $4 = HEAP32[$0 + 28 >> 2];
  HEAP32[$3 + 16 >> 2] = $4;
  $5 = HEAP32[$0 + 20 >> 2];
  HEAP32[$3 + 28 >> 2] = $2;
  HEAP32[$3 + 24 >> 2] = $1;
  $1 = $5 - $4 | 0;
  HEAP32[$3 + 20 >> 2] = $1;
  $4 = $1 + $2 | 0;
  $7 = 2;
  $1 = $3 + 16 | 0;
  label$2 : {
   label$3 : {
    label$4 : {
     if (!__wasi_syscall_ret(__wasi_fd_write(HEAP32[$0 + 60 >> 2], $3 + 16 | 0, 2, $3 + 12 | 0) | 0)) {
      while (1) {
       $5 = HEAP32[$3 + 12 >> 2];
       if (($5 | 0) == ($4 | 0)) {
        break label$4
       }
       if (($5 | 0) <= -1) {
        break label$3
       }
       $6 = HEAP32[$1 + 4 >> 2];
       $8 = $5 >>> 0 > $6 >>> 0;
       $1 = $8 ? $1 + 8 | 0 : $1;
       $6 = $5 - ($8 ? $6 : 0) | 0;
       HEAP32[$1 >> 2] = $6 + HEAP32[$1 >> 2];
       HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] - $6;
       $4 = $4 - $5 | 0;
       $7 = $7 - $8 | 0;
       if (!__wasi_syscall_ret(__wasi_fd_write(HEAP32[$0 + 60 >> 2], $1 | 0, $7 | 0, $3 + 12 | 0) | 0)) {
        continue
       }
       break;
      }
     }
     HEAP32[$3 + 12 >> 2] = -1;
     if (($4 | 0) != -1) {
      break label$3
     }
    }
    $1 = HEAP32[$0 + 44 >> 2];
    HEAP32[$0 + 28 >> 2] = $1;
    HEAP32[$0 + 20 >> 2] = $1;
    HEAP32[$0 + 16 >> 2] = $1 + HEAP32[$0 + 48 >> 2];
    $0 = $2;
    break label$2;
   }
   HEAP32[$0 + 28 >> 2] = 0;
   HEAP32[$0 + 16 >> 2] = 0;
   HEAP32[$0 + 20 >> 2] = 0;
   HEAP32[$0 >> 2] = HEAP32[$0 >> 2] | 32;
   $0 = 0;
   if (($7 | 0) == 2) {
    break label$2
   }
   $0 = $2 - HEAP32[$1 + 4 >> 2] | 0;
  }
  $1 = $3 + 32 | 0;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  return $0 | 0;
 }
 
 function fgetc($0) {
  var $1 = 0;
  if (HEAP32[$0 + 76 >> 2] < 0) {
   $1 = HEAP32[$0 + 4 >> 2];
   if ($1 >>> 0 < HEAPU32[$0 + 8 >> 2]) {
    HEAP32[$0 + 4 >> 2] = $1 + 1;
    return HEAPU8[$1 | 0];
   }
   return __uflow($0);
  }
  $1 = HEAP32[$0 + 4 >> 2];
  label$4 : {
   if ($1 >>> 0 < HEAPU32[$0 + 8 >> 2]) {
    HEAP32[$0 + 4 >> 2] = $1 + 1;
    $0 = HEAPU8[$1 | 0];
    break label$4;
   }
   $0 = __uflow($0);
  }
  return $0;
 }
 
 function isdigit($0) {
  return $0 + -48 >>> 0 < 10;
 }
 
 function __isdigit_l($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return isdigit($0) | 0;
 }
 
 function frexp($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0;
  wasm2js_scratch_store_f64(+$0);
  $2 = wasm2js_scratch_load_i32(1) | 0;
  $3 = wasm2js_scratch_load_i32(0) | 0;
  $4 = $2;
  $2 = $2 >>> 20 & 2047;
  if (($2 | 0) != 2047) {
   if (!$2) {
    $2 = $1;
    if ($0 == 0.0) {
     $1 = 0
    } else {
     $0 = frexp($0 * 18446744073709551615.0, $1);
     $1 = HEAP32[$1 >> 2] + -64 | 0;
    }
    HEAP32[$2 >> 2] = $1;
    return $0;
   }
   HEAP32[$1 >> 2] = $2 + -1022;
   $1 = $4 & -2146435073 | 1071644672;
   wasm2js_scratch_store_i32(0, $3 | 0);
   wasm2js_scratch_store_i32(1, $1 | 0);
   $0 = +wasm2js_scratch_load_f64();
  }
  return $0;
 }
 
 function __vfprintf_internal($0, $1, $2, $3, $4) {
  var $5 = 0, $6 = 0, $7 = 0;
  $5 = global$0 - 208 | 0;
  $6 = $5;
  if ($5 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $6;
  HEAP32[$5 + 204 >> 2] = $2;
  $2 = 0;
  memset($5 + 160 | 0, 0, 40);
  HEAP32[$5 + 200 >> 2] = HEAP32[$5 + 204 >> 2];
  label$2 : {
   if ((printf_core(0, $1, $5 + 200 | 0, $5 + 80 | 0, $5 + 160 | 0, $3, $4) | 0) < 0) {
    $1 = -1;
    break label$2;
   }
   $2 = HEAP32[$0 + 76 >> 2] >= 0 ? 1 : $2;
   $6 = HEAP32[$0 >> 2];
   if (HEAP8[$0 + 74 | 0] <= 0) {
    HEAP32[$0 >> 2] = $6 & -33
   }
   $7 = $6 & 32;
   label$6 : {
    if (HEAP32[$0 + 48 >> 2]) {
     $3 = printf_core($0, $1, $5 + 200 | 0, $5 + 80 | 0, $5 + 160 | 0, $3, $4);
     break label$6;
    }
    HEAP32[$0 + 48 >> 2] = 80;
    HEAP32[$0 + 16 >> 2] = $5 + 80;
    HEAP32[$0 + 28 >> 2] = $5;
    HEAP32[$0 + 20 >> 2] = $5;
    $6 = HEAP32[$0 + 44 >> 2];
    HEAP32[$0 + 44 >> 2] = $5;
    $1 = printf_core($0, $1, $5 + 200 | 0, $5 + 80 | 0, $5 + 160 | 0, $3, $4);
    $3 = $1;
    if (!$6) {
     break label$6
    }
    FUNCTION_TABLE[HEAP32[$0 + 36 >> 2]]($0, 0, 0) | 0;
    HEAP32[$0 + 48 >> 2] = 0;
    HEAP32[$0 + 44 >> 2] = $6;
    HEAP32[$0 + 28 >> 2] = 0;
    HEAP32[$0 + 16 >> 2] = 0;
    $3 = HEAP32[$0 + 20 >> 2];
    HEAP32[$0 + 20 >> 2] = 0;
    $3 = $3 ? $1 : -1;
   }
   $1 = $3;
   $3 = $0;
   $0 = HEAP32[$0 >> 2];
   HEAP32[$3 >> 2] = $0 | $7;
   $1 = $0 & 32 ? -1 : $1;
   if (!$2) {
    break label$2
   }
  }
  $0 = $5 + 208 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
  return $1;
 }
 
 function printf_core($0, $1, $2, $3, $4, $5, $6) {
  var $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
  $8 = global$0 - 80 | 0;
  $7 = $8;
  if ($8 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $7;
  HEAP32[$8 + 76 >> 2] = $1;
  $21 = $8 + 55 | 0;
  $18 = $8 + 56 | 0;
  $1 = 0;
  label$2 : {
   label$3 : {
    label$4 : while (1) {
     label$5 : {
      if (($16 | 0) < 0) {
       break label$5
      }
      if (($1 | 0) > (2147483647 - $16 | 0)) {
       HEAP32[16596] = 61;
       $16 = -1;
       break label$5;
      }
      $16 = $1 + $16 | 0;
     }
     label$7 : {
      label$8 : {
       label$9 : {
        label$10 : {
         label$11 : {
          label$12 : {
           label$13 : {
            label$14 : {
             label$15 : {
              label$16 : {
               label$17 : {
                label$18 : {
                 label$19 : {
                  $11 = HEAP32[$8 + 76 >> 2];
                  $1 = $11;
                  $9 = HEAPU8[$1 | 0];
                  if ($9) {
                   while (1) {
                    label$22 : {
                     label$23 : {
                      $7 = $9 & 255;
                      label$24 : {
                       if (!$7) {
                        $9 = $1;
                        break label$24;
                       }
                       if (($7 | 0) != 37) {
                        break label$23
                       }
                       $9 = $1;
                       while (1) {
                        if (HEAPU8[$1 + 1 | 0] != 37) {
                         break label$24
                        }
                        $7 = $1 + 2 | 0;
                        HEAP32[$8 + 76 >> 2] = $7;
                        $9 = $9 + 1 | 0;
                        $12 = HEAPU8[$1 + 2 | 0];
                        $1 = $7;
                        if (($12 | 0) == 37) {
                         continue
                        }
                        break;
                       };
                      }
                      $1 = $9 - $11 | 0;
                      if ($0) {
                       out($0, $11, $1)
                      }
                      if ($1) {
                       continue label$4
                      }
                      $17 = -1;
                      $7 = $8;
                      $9 = !isdigit(HEAP8[HEAP32[$8 + 76 >> 2] + 1 | 0]);
                      $1 = HEAP32[$8 + 76 >> 2];
                      if ($9 | HEAPU8[$1 + 2 | 0] != 36) {
                       $9 = 1
                      } else {
                       $17 = HEAP8[$1 + 1 | 0] + -48 | 0;
                       $19 = 1;
                       $9 = 3;
                      }
                      $1 = $9 + $1 | 0;
                      HEAP32[$7 + 76 >> 2] = $1;
                      $9 = 0;
                      $14 = HEAP8[$1 | 0];
                      $12 = $14 + -32 | 0;
                      label$29 : {
                       if ($12 >>> 0 > 31) {
                        $7 = $1;
                        break label$29;
                       }
                       $7 = $1;
                       $10 = 1 << $12;
                       if (!($10 & 75913)) {
                        break label$29
                       }
                       while (1) {
                        $7 = $1 + 1 | 0;
                        HEAP32[$8 + 76 >> 2] = $7;
                        $9 = $9 | $10;
                        $14 = HEAP8[$1 + 1 | 0];
                        $12 = $14 + -32 | 0;
                        if ($12 >>> 0 > 31) {
                         break label$29
                        }
                        $1 = $7;
                        $10 = 1 << $12;
                        if ($10 & 75913) {
                         continue
                        }
                        break;
                       };
                      }
                      label$32 : {
                       if (($14 | 0) == 42) {
                        $10 = $8;
                        label$34 : {
                         label$35 : {
                          if (!isdigit(HEAP8[$7 + 1 | 0])) {
                           break label$35
                          }
                          $1 = HEAP32[$8 + 76 >> 2];
                          if (HEAPU8[$1 + 2 | 0] != 36) {
                           break label$35
                          }
                          HEAP32[((HEAP8[$1 + 1 | 0] << 2) + $4 | 0) + -192 >> 2] = 10;
                          $15 = HEAP32[((HEAP8[$1 + 1 | 0] << 3) + $3 | 0) + -384 >> 2];
                          $19 = 1;
                          $1 = $1 + 3 | 0;
                          break label$34;
                         }
                         if ($19) {
                          break label$3
                         }
                         $19 = 0;
                         $15 = 0;
                         if ($0) {
                          $1 = HEAP32[$2 >> 2];
                          HEAP32[$2 >> 2] = $1 + 4;
                          $15 = HEAP32[$1 >> 2];
                         }
                         $1 = HEAP32[$8 + 76 >> 2] + 1 | 0;
                        }
                        HEAP32[$10 + 76 >> 2] = $1;
                        if (($15 | 0) > -1) {
                         break label$32
                        }
                        $15 = 0 - $15 | 0;
                        $9 = $9 | 8192;
                        break label$32;
                       }
                       $15 = getint($8 + 76 | 0);
                       if (($15 | 0) < 0) {
                        break label$3
                       }
                       $1 = HEAP32[$8 + 76 >> 2];
                      }
                      $10 = -1;
                      label$37 : {
                       if (HEAPU8[$1 | 0] != 46) {
                        break label$37
                       }
                       if (HEAPU8[$1 + 1 | 0] == 42) {
                        label$39 : {
                         if (!isdigit(HEAP8[$1 + 2 | 0])) {
                          break label$39
                         }
                         $1 = HEAP32[$8 + 76 >> 2];
                         if (HEAPU8[$1 + 3 | 0] != 36) {
                          break label$39
                         }
                         HEAP32[((HEAP8[$1 + 2 | 0] << 2) + $4 | 0) + -192 >> 2] = 10;
                         $10 = HEAP32[((HEAP8[$1 + 2 | 0] << 3) + $3 | 0) + -384 >> 2];
                         $1 = $1 + 4 | 0;
                         HEAP32[$8 + 76 >> 2] = $1;
                         break label$37;
                        }
                        if ($19) {
                         break label$3
                        }
                        if ($0) {
                         $1 = HEAP32[$2 >> 2];
                         HEAP32[$2 >> 2] = $1 + 4;
                         $10 = HEAP32[$1 >> 2];
                        } else {
                         $10 = 0
                        }
                        $1 = HEAP32[$8 + 76 >> 2] + 2 | 0;
                        HEAP32[$8 + 76 >> 2] = $1;
                        break label$37;
                       }
                       HEAP32[$8 + 76 >> 2] = $1 + 1;
                       $10 = getint($8 + 76 | 0);
                       $1 = HEAP32[$8 + 76 >> 2];
                      }
                      $7 = 0;
                      while (1) {
                       $20 = $7;
                       $13 = -1;
                       if (HEAP8[$1 | 0] + -65 >>> 0 > 57) {
                        break label$2
                       }
                       $14 = $1 + 1 | 0;
                       HEAP32[$8 + 76 >> 2] = $14;
                       $7 = HEAP8[$1 | 0];
                       $1 = $14;
                       $7 = HEAPU8[($7 + Math_imul($20, 58) | 0) + 29807 | 0];
                       if ($7 + -1 >>> 0 < 8) {
                        continue
                       }
                       break;
                      };
                      if (!$7) {
                       break label$2
                      }
                      label$43 : {
                       label$44 : {
                        label$45 : {
                         if (($7 | 0) == 19) {
                          if (($17 | 0) <= -1) {
                           break label$45
                          }
                          break label$2;
                         }
                         if (($17 | 0) < 0) {
                          break label$44
                         }
                         HEAP32[($17 << 2) + $4 >> 2] = $7;
                         $1 = ($17 << 3) + $3 | 0;
                         $7 = HEAP32[$1 + 4 >> 2];
                         HEAP32[$8 + 64 >> 2] = HEAP32[$1 >> 2];
                         HEAP32[$8 + 68 >> 2] = $7;
                        }
                        $1 = 0;
                        if (!$0) {
                         continue label$4
                        }
                        break label$43;
                       }
                       if (!$0) {
                        break label$7
                       }
                       pop_arg($8 - -64 | 0, $7, $2, $6);
                       $14 = HEAP32[$8 + 76 >> 2];
                      }
                      $12 = $9 & -65537;
                      $9 = $9 & 8192 ? $12 : $9;
                      $13 = 0;
                      $17 = 29840;
                      $7 = $18;
                      $1 = HEAP8[$14 + -1 | 0];
                      $1 = $20 ? (($1 & 15) == 3 ? $1 & -33 : $1) : $1;
                      $14 = $1 + -88 | 0;
                      if ($14 >>> 0 <= 32) {
                       break label$22
                      }
                      label$47 : {
                       label$48 : {
                        label$49 : {
                         label$50 : {
                          $12 = $1 + -65 | 0;
                          if ($12 >>> 0 > 6) {
                           if (($1 | 0) != 83) {
                            break label$8
                           }
                           if (!$10) {
                            break label$50
                           }
                           $7 = HEAP32[$8 + 64 >> 2];
                           break label$48;
                          }
                          switch ($12 - 1 | 0) {
                          case 1:
                           break label$49;
                          case 0:
                          case 2:
                           break label$8;
                          default:
                           break label$19;
                          };
                         }
                         $1 = 0;
                         pad($0, 32, $15, 0, $9);
                         break label$47;
                        }
                        HEAP32[$8 + 12 >> 2] = 0;
                        HEAP32[$8 + 8 >> 2] = HEAP32[$8 + 64 >> 2];
                        HEAP32[$8 + 64 >> 2] = $8 + 8;
                        $10 = -1;
                        $7 = $8 + 8 | 0;
                       }
                       $1 = 0;
                       label$52 : {
                        while (1) {
                         $11 = HEAP32[$7 >> 2];
                         if (!$11) {
                          break label$52
                         }
                         $11 = wctomb($8 + 4 | 0, $11);
                         $12 = ($11 | 0) < 0;
                         if (!($12 | $11 >>> 0 > $10 - $1 >>> 0)) {
                          $7 = $7 + 4 | 0;
                          $1 = $1 + $11 | 0;
                          if ($10 >>> 0 > $1 >>> 0) {
                           continue
                          }
                          break label$52;
                         }
                         break;
                        };
                        $13 = -1;
                        if ($12) {
                         break label$2
                        }
                       }
                       pad($0, 32, $15, $1, $9);
                       if (!$1) {
                        $1 = 0;
                        break label$47;
                       }
                       $10 = 0;
                       $7 = HEAP32[$8 + 64 >> 2];
                       while (1) {
                        $11 = HEAP32[$7 >> 2];
                        if (!$11) {
                         break label$47
                        }
                        $11 = wctomb($8 + 4 | 0, $11);
                        $10 = $11 + $10 | 0;
                        if (($10 | 0) > ($1 | 0)) {
                         break label$47
                        }
                        out($0, $8 + 4 | 0, $11);
                        $7 = $7 + 4 | 0;
                        if ($10 >>> 0 < $1 >>> 0) {
                         continue
                        }
                        break;
                       };
                      }
                      pad($0, 32, $15, $1, $9 ^ 8192);
                      $1 = ($15 | 0) > ($1 | 0) ? $15 : $1;
                      continue label$4;
                     }
                     $7 = $1 + 1 | 0;
                     HEAP32[$8 + 76 >> 2] = $7;
                     $9 = HEAPU8[$1 + 1 | 0];
                     $1 = $7;
                     continue;
                    }
                    break;
                   };
                   switch ($14 - 1 | 0) {
                   case 28:
                    break label$11;
                   case 21:
                    break label$12;
                   case 23:
                    break label$14;
                   case 22:
                    break label$15;
                   case 11:
                   case 16:
                    break label$16;
                   case 10:
                    break label$17;
                   case 26:
                    break label$18;
                   case 8:
                   case 12:
                   case 13:
                   case 14:
                    break label$19;
                   case 0:
                   case 1:
                   case 2:
                   case 3:
                   case 4:
                   case 5:
                   case 6:
                   case 7:
                   case 9:
                   case 15:
                   case 17:
                   case 18:
                   case 19:
                   case 20:
                   case 24:
                   case 25:
                   case 27:
                   case 29:
                   case 30:
                    break label$8;
                   default:
                    break label$13;
                   };
                  }
                  $13 = $16;
                  if ($0) {
                   break label$2
                  }
                  if (!$19) {
                   break label$7
                  }
                  $1 = 1;
                  while (1) {
                   $0 = HEAP32[($1 << 2) + $4 >> 2];
                   if ($0) {
                    pop_arg(($1 << 3) + $3 | 0, $0, $2, $6);
                    $13 = 1;
                    $1 = $1 + 1 | 0;
                    if (($1 | 0) != 10) {
                     continue
                    }
                    break label$2;
                   }
                   break;
                  };
                  $13 = 1;
                  if ($1 >>> 0 > 9) {
                   break label$2
                  }
                  while (1) {
                   $0 = $1;
                   $1 = $1 + 1 | 0;
                   if (HEAP32[($1 << 2) + $4 >> 2] ? 0 : ($1 | 0) != 10) {
                    continue
                   }
                   break;
                  };
                  $13 = $0 >>> 0 < 9 ? -1 : 1;
                  break label$2;
                 }
                 $1 = FUNCTION_TABLE[$5]($0, HEAPF64[$8 + 64 >> 3], $15, $10, $9, $1) | 0;
                 continue;
                }
                $1 = HEAP32[$8 + 64 >> 2];
                $11 = $1 ? $1 : 29850;
                $1 = memchr($11, $10);
                $7 = $1 ? $1 : $10 + $11 | 0;
                $9 = $12;
                $10 = $1 ? $1 - $11 | 0 : $10;
                break label$8;
               }
               HEAP8[$8 + 55 | 0] = HEAP32[$8 + 64 >> 2];
               $10 = 1;
               $11 = $21;
               $9 = $12;
               break label$8;
              }
              $11 = HEAP32[$8 + 68 >> 2];
              $1 = $11;
              $7 = HEAP32[$8 + 64 >> 2];
              if (($1 | 0) < -1 ? 1 : ($1 | 0) <= -1 ? ($7 >>> 0 > 4294967295 ? 0 : 1) : 0) {
               $1 = 0 - ($1 + (0 < $7 >>> 0) | 0) | 0;
               $7 = 0 - $7 | 0;
               HEAP32[$8 + 64 >> 2] = $7;
               HEAP32[$8 + 68 >> 2] = $1;
               $13 = 1;
               $17 = 29840;
               break label$10;
              }
              if ($9 & 2048) {
               $13 = 1;
               $17 = 29841;
               break label$10;
              }
              $13 = $9 & 1;
              $17 = $13 ? 29842 : 29840;
              break label$10;
             }
             $11 = fmt_o(HEAP32[$8 + 64 >> 2], HEAP32[$8 + 68 >> 2], $18);
             if (!($9 & 8)) {
              break label$9
             }
             $1 = $18 - $11 | 0;
             $10 = ($10 | 0) > ($1 | 0) ? $10 : $1 + 1 | 0;
             break label$9;
            }
            $10 = $10 >>> 0 > 8 ? $10 : 8;
            $9 = $9 | 8;
            $1 = 120;
           }
           $11 = fmt_x(HEAP32[$8 + 64 >> 2], HEAP32[$8 + 68 >> 2], $18, $1 & 32);
           if (!($9 & 8) | !(HEAP32[$8 + 64 >> 2] | HEAP32[$8 + 68 >> 2])) {
            break label$9
           }
           $17 = ($1 >>> 4 | 0) + 29840 | 0;
           $13 = 2;
           break label$9;
          }
          $1 = 0;
          $7 = $20 & 255;
          if ($7 >>> 0 > 7) {
           continue
          }
          label$63 : {
           switch ($7 - 1 | 0) {
           default:
            HEAP32[HEAP32[$8 + 64 >> 2] >> 2] = $16;
            continue;
           case 0:
            HEAP32[HEAP32[$8 + 64 >> 2] >> 2] = $16;
            continue;
           case 1:
            $7 = HEAP32[$8 + 64 >> 2];
            HEAP32[$7 >> 2] = $16;
            HEAP32[$7 + 4 >> 2] = $16 >> 31;
            continue;
           case 2:
            HEAP16[HEAP32[$8 + 64 >> 2] >> 1] = $16;
            continue;
           case 3:
            HEAP8[HEAP32[$8 + 64 >> 2]] = $16;
            continue;
           case 5:
            HEAP32[HEAP32[$8 + 64 >> 2] >> 2] = $16;
            continue;
           case 4:
            continue;
           case 6:
            break label$63;
           };
          }
          $7 = HEAP32[$8 + 64 >> 2];
          HEAP32[$7 >> 2] = $16;
          HEAP32[$7 + 4 >> 2] = $16 >> 31;
          continue;
         }
         $7 = HEAP32[$8 + 64 >> 2];
         $1 = HEAP32[$8 + 68 >> 2];
         $17 = 29840;
        }
        $11 = fmt_u($7, $1, $18);
       }
       $9 = ($10 | 0) > -1 ? $9 & -65537 : $9;
       $1 = HEAP32[$8 + 64 >> 2];
       $7 = HEAP32[$8 + 68 >> 2];
       label$70 : {
        if (!(!!($1 | $7) | $10)) {
         $11 = $18;
         $10 = 0;
         break label$70;
        }
        $1 = !($1 | $7) + ($18 - $11 | 0) | 0;
        $10 = ($10 | 0) > ($1 | 0) ? $10 : $1;
       }
       $7 = $18;
      }
      $12 = $7 - $11 | 0;
      $14 = ($10 | 0) < ($12 | 0) ? $12 : $10;
      $7 = $14 + $13 | 0;
      $1 = ($15 | 0) < ($7 | 0) ? $7 : $15;
      pad($0, 32, $1, $7, $9);
      out($0, $17, $13);
      pad($0, 48, $1, $7, $9 ^ 65536);
      pad($0, 48, $14, $12, 0);
      out($0, $11, $12);
      pad($0, 32, $1, $7, $9 ^ 8192);
      continue;
     }
     break;
    };
    $13 = 0;
    break label$2;
   }
   $13 = -1;
  }
  $0 = $8 + 80 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
  return $13;
 }
 
 function out($0, $1, $2) {
  if (!(HEAPU8[$0 | 0] & 32)) {
   __fwritex($1, $2, $0)
  }
 }
 
 function getint($0) {
  var $1 = 0, $2 = 0, $3 = 0;
  if (isdigit(HEAP8[HEAP32[$0 >> 2]])) {
   while (1) {
    $1 = HEAP32[$0 >> 2];
    $3 = HEAP8[$1 | 0];
    HEAP32[$0 >> 2] = $1 + 1;
    $2 = (Math_imul($2, 10) + $3 | 0) + -48 | 0;
    if (isdigit(HEAP8[$1 + 1 | 0])) {
     continue
    }
    break;
   }
  }
  return $2;
 }
 
 function pop_arg($0, $1, $2, $3) {
  folding_inner0 : {
   label$1 : {
    if ($1 >>> 0 > 20) {
     break label$1
    }
    $1 = $1 + -9 | 0;
    if ($1 >>> 0 > 9) {
     break label$1
    }
    label$2 : {
     switch ($1 - 1 | 0) {
     default:
      $1 = HEAP32[$2 >> 2];
      HEAP32[$2 >> 2] = $1 + 4;
      HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
      return;
     case 0:
      $1 = HEAP32[$2 >> 2];
      HEAP32[$2 >> 2] = $1 + 4;
      $1 = HEAP32[$1 >> 2];
      HEAP32[$0 >> 2] = $1;
      HEAP32[$0 + 4 >> 2] = $1 >> 31;
      return;
     case 1:
      $1 = HEAP32[$2 >> 2];
      HEAP32[$2 >> 2] = $1 + 4;
      HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
      HEAP32[$0 + 4 >> 2] = 0;
      return;
     case 3:
      $1 = HEAP32[$2 >> 2];
      HEAP32[$2 >> 2] = $1 + 4;
      $1 = HEAP16[$1 >> 1];
      HEAP32[$0 >> 2] = $1;
      HEAP32[$0 + 4 >> 2] = $1 >> 31;
      return;
     case 4:
      $1 = HEAP32[$2 >> 2];
      HEAP32[$2 >> 2] = $1 + 4;
      HEAP32[$0 >> 2] = HEAPU16[$1 >> 1];
      HEAP32[$0 + 4 >> 2] = 0;
      return;
     case 5:
      $1 = HEAP32[$2 >> 2];
      HEAP32[$2 >> 2] = $1 + 4;
      $1 = HEAP8[$1 | 0];
      HEAP32[$0 >> 2] = $1;
      HEAP32[$0 + 4 >> 2] = $1 >> 31;
      return;
     case 6:
      $1 = HEAP32[$2 >> 2];
      HEAP32[$2 >> 2] = $1 + 4;
      HEAP32[$0 >> 2] = HEAPU8[$1 | 0];
      HEAP32[$0 + 4 >> 2] = 0;
      return;
     case 2:
     case 7:
      break folding_inner0;
     case 8:
      break label$2;
     };
    }
    FUNCTION_TABLE[$3]($0, $2);
   }
   return;
  }
  $1 = HEAP32[$2 >> 2] + 7 & -8;
  HEAP32[$2 >> 2] = $1 + 8;
  $2 = HEAP32[$1 + 4 >> 2];
  HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$0 + 4 >> 2] = $2;
 }
 
 function pad($0, $1, $2, $3, $4) {
  var $5 = 0, $6 = 0;
  $5 = global$0 - 256 | 0;
  $6 = $5;
  if ($5 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $6;
  if (!($4 & 73728 | ($2 | 0) <= ($3 | 0))) {
   $2 = $2 - $3 | 0;
   $3 = $2 >>> 0 < 256;
   memset($5, $1, $3 ? $2 : 256);
   if (!$3) {
    while (1) {
     out($0, $5, 256);
     $2 = $2 + -256 | 0;
     if ($2 >>> 0 > 255) {
      continue
     }
     break;
    }
   }
   out($0, $5, $2);
  }
  $0 = $5 + 256 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function fmt_o($0, $1, $2) {
  if ($0 | $1) {
   while (1) {
    $2 = $2 + -1 | 0;
    HEAP8[$2 | 0] = $0 & 7 | 48;
    $0 = ($1 & 7) << 29 | $0 >>> 3;
    $1 = $1 >>> 3 | 0;
    if ($0 | $1) {
     continue
    }
    break;
   }
  }
  return $2;
 }
 
 function fmt_x($0, $1, $2, $3) {
  if ($0 | $1) {
   while (1) {
    $2 = $2 + -1 | 0;
    HEAP8[$2 | 0] = HEAPU8[($0 & 15) + 30336 | 0] | $3;
    $0 = ($1 & 15) << 28 | $0 >>> 4;
    $1 = $1 >>> 4 | 0;
    if ($0 | $1) {
     continue
    }
    break;
   }
  }
  return $2;
 }
 
 function fmt_u($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0;
  label$1 : {
   if (($1 | 0) == 1 & $0 >>> 0 < 0 | $1 >>> 0 < 1) {
    $3 = $0;
    break label$1;
   }
   while (1) {
    $2 = $2 + -1 | 0;
    $3 = __wasm_i64_udiv($0, $1, 10);
    $4 = i64toi32_i32$HIGH_BITS;
    $5 = $4;
    $4 = __wasm_i64_mul($3, $4, 10, 0);
    HEAP8[$2 | 0] = $0 - $4 | 48;
    $4 = ($1 | 0) == 9 & $0 >>> 0 > 4294967295 | $1 >>> 0 > 9;
    $0 = $3;
    $1 = $5;
    if ($4) {
     continue
    }
    break;
   };
  }
  if ($3) {
   while (1) {
    $2 = $2 + -1 | 0;
    $0 = ($3 >>> 0) / 10 | 0;
    HEAP8[$2 | 0] = $3 - Math_imul($0, 10) | 48;
    $1 = $3 >>> 0 > 9;
    $3 = $0;
    if ($1) {
     continue
    }
    break;
   }
  }
  return $2;
 }
 
 function vfprintf($0, $1, $2) {
  return __vfprintf_internal($0, $1, $2, 1537, 1538);
 }
 
 function fmt_fp($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
  $10 = global$0 - 560 | 0;
  $6 = $10;
  if ($6 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $6;
  HEAP32[$10 + 44 >> 2] = 0;
  $7 = __DOUBLE_BITS($1);
  $9 = i64toi32_i32$HIGH_BITS;
  $6 = $9;
  label$2 : {
   if (($6 | 0) < -1 ? 1 : ($6 | 0) <= -1 ? ($7 >>> 0 > 4294967295 ? 0 : 1) : 0) {
    $20 = 1;
    $22 = 30352;
    $1 = -$1;
    __DOUBLE_BITS($1);
    $6 = i64toi32_i32$HIGH_BITS;
    break label$2;
   }
   if ($4 & 2048) {
    $20 = 1;
    $22 = 30355;
    break label$2;
   }
   $20 = $4 & 1;
   $22 = $20 ? 30358 : 30353;
  }
  label$5 : {
   if (($6 & 2146435072) == 2146435072) {
    $12 = $20 + 3 | 0;
    pad($0, 32, $2, $12, $4 & -65537);
    out($0, $22, $20);
    $3 = $5 >>> 5 & 1;
    out($0, $1 != $1 ? ($3 ? 30379 : 30383) : $3 ? 30371 : 30375, 3);
    break label$5;
   }
   $17 = $10 + 16 | 0;
   label$7 : {
    label$8 : {
     label$9 : {
      $1 = frexp($1, $10 + 44 | 0);
      $1 = $1 + $1;
      if ($1 != 0.0) {
       $6 = HEAP32[$10 + 44 >> 2];
       HEAP32[$10 + 44 >> 2] = $6 + -1;
       $21 = $5 | 32;
       if (($21 | 0) != 97) {
        break label$9
       }
       break label$7;
      }
      $21 = $5 | 32;
      if (($21 | 0) == 97) {
       break label$7
      }
      $7 = HEAP32[$10 + 44 >> 2];
      $11 = ($3 | 0) < 0 ? 6 : $3;
      break label$8;
     }
     $7 = $6 + -29 | 0;
     HEAP32[$10 + 44 >> 2] = $7;
     $1 = $1 * 268435456.0;
     $11 = ($3 | 0) < 0 ? 6 : $3;
    }
    $14 = ($7 | 0) < 0 ? $10 + 48 | 0 : $10 + 336 | 0;
    $9 = $14;
    while (1) {
     $3 = $9;
     if ($1 < 4294967296.0 & $1 >= 0.0) {
      $6 = ~~$1 >>> 0
     } else {
      $6 = 0
     }
     HEAP32[$3 >> 2] = $6;
     $9 = $9 + 4 | 0;
     $1 = ($1 - +($6 >>> 0)) * 1.0e9;
     if ($1 != 0.0) {
      continue
     }
     break;
    };
    label$14 : {
     if (($7 | 0) < 1) {
      $6 = $9;
      $8 = $14;
      break label$14;
     }
     $8 = $14;
     while (1) {
      $16 = ($7 | 0) < 29 ? $7 : 29;
      $6 = $9 + -4 | 0;
      label$17 : {
       if ($6 >>> 0 < $8 >>> 0) {
        break label$17
       }
       $3 = $16;
       $7 = 0;
       while (1) {
        $23 = $7;
        $15 = HEAP32[$6 >> 2];
        $13 = $3 & 31;
        if (32 <= ($3 & 63) >>> 0) {
         $7 = $15 << $13;
         $15 = 0;
        } else {
         $7 = (1 << $13) - 1 & $15 >>> 32 - $13;
         $15 = $15 << $13;
        }
        $13 = $23 + $15 | 0;
        $7 = $7 + $24 | 0;
        $7 = $13 >>> 0 < $15 >>> 0 ? $7 + 1 | 0 : $7;
        $7 = __wasm_i64_udiv($13, $7, 1e9);
        $15 = __wasm_i64_mul($7, i64toi32_i32$HIGH_BITS, 1e9, 0);
        HEAP32[$6 >> 2] = $13 - $15;
        $6 = $6 + -4 | 0;
        if ($6 >>> 0 >= $8 >>> 0) {
         continue
        }
        break;
       };
       if (!$7) {
        break label$17
       }
       $8 = $8 + -4 | 0;
       HEAP32[$8 >> 2] = $7;
      }
      while (1) {
       $6 = $9;
       if ($6 >>> 0 > $8 >>> 0) {
        $9 = $6 + -4 | 0;
        if (!HEAP32[$9 >> 2]) {
         continue
        }
       }
       break;
      };
      $7 = HEAP32[$10 + 44 >> 2] - $16 | 0;
      HEAP32[$10 + 44 >> 2] = $7;
      $9 = $6;
      if (($7 | 0) > 0) {
       continue
      }
      break;
     };
    }
    if (($7 | 0) <= -1) {
     $18 = (($11 + 25 | 0) / 9 | 0) + 1 | 0;
     $16 = ($21 | 0) == 102;
     while (1) {
      $3 = ($7 | 0) < -9 ? 9 : 0 - $7 | 0;
      label$23 : {
       if ($8 >>> 0 >= $6 >>> 0) {
        $8 = HEAP32[$8 >> 2] ? $8 : $8 + 4 | 0;
        break label$23;
       }
       $12 = 1e9 >>> $3 | 0;
       $13 = -1 << $3 ^ -1;
       $7 = 0;
       $9 = $8;
       while (1) {
        $15 = $7;
        $7 = HEAP32[$9 >> 2];
        HEAP32[$9 >> 2] = $15 + ($7 >>> $3 | 0);
        $7 = Math_imul($12, $7 & $13);
        $9 = $9 + 4 | 0;
        if ($9 >>> 0 < $6 >>> 0) {
         continue
        }
        break;
       };
       $8 = HEAP32[$8 >> 2] ? $8 : $8 + 4 | 0;
       if (!$7) {
        break label$23
       }
       HEAP32[$6 >> 2] = $7;
       $6 = $6 + 4 | 0;
      }
      $7 = $3 + HEAP32[$10 + 44 >> 2] | 0;
      HEAP32[$10 + 44 >> 2] = $7;
      $3 = $16 ? $14 : $8;
      $6 = $6 - $3 >> 2 > ($18 | 0) ? $3 + ($18 << 2) | 0 : $6;
      if (($7 | 0) < 0) {
       continue
      }
      break;
     };
    }
    $9 = 0;
    label$26 : {
     if ($8 >>> 0 >= $6 >>> 0) {
      break label$26
     }
     $9 = Math_imul($14 - $8 >> 2, 9);
     $7 = 10;
     $3 = HEAP32[$8 >> 2];
     if ($3 >>> 0 < 10) {
      break label$26
     }
     while (1) {
      $9 = $9 + 1 | 0;
      $7 = Math_imul($7, 10);
      if ($3 >>> 0 >= $7 >>> 0) {
       continue
      }
      break;
     };
    }
    $3 = ($11 - (($21 | 0) == 102 ? 0 : $9) | 0) - (($21 | 0) == 103 & ($11 | 0) != 0) | 0;
    if (($3 | 0) < (Math_imul($6 - $14 >> 2, 9) + -9 | 0)) {
     $3 = $3 + 9216 | 0;
     $16 = ($3 | 0) / 9 | 0;
     $12 = ($14 + ($16 << 2) | 0) + -4092 | 0;
     $7 = 10;
     $3 = $3 - Math_imul($16, 9) | 0;
     if (($3 | 0) <= 7) {
      while (1) {
       $7 = Math_imul($7, 10);
       $3 = $3 + 1 | 0;
       if (($3 | 0) != 8) {
        continue
       }
       break;
      }
     }
     $16 = HEAP32[$12 >> 2];
     $13 = ($16 >>> 0) / ($7 >>> 0) | 0;
     $18 = $12 + 4 | 0;
     $3 = $16 - Math_imul($7, $13) | 0;
     label$31 : {
      if ($3 ? 0 : ($18 | 0) == ($6 | 0)) {
       break label$31
      }
      $15 = $7 >>> 1 | 0;
      $19 = $3 >>> 0 < $15 >>> 0 ? .5 : ($6 | 0) == ($18 | 0) ? (($15 | 0) == ($3 | 0) ? 1.0 : 1.5) : 1.5;
      $1 = $13 & 1 ? 9007199254740994.0 : 9007199254740992.0;
      if (!(!$20 | HEAPU8[$22 | 0] != 45)) {
       $19 = -$19;
       $1 = -$1;
      }
      $3 = $16 - $3 | 0;
      HEAP32[$12 >> 2] = $3;
      if ($1 + $19 == $1) {
       break label$31
      }
      $3 = $3 + $7 | 0;
      HEAP32[$12 >> 2] = $3;
      if ($3 >>> 0 >= 1e9) {
       while (1) {
        HEAP32[$12 >> 2] = 0;
        $12 = $12 + -4 | 0;
        if ($12 >>> 0 < $8 >>> 0) {
         $8 = $8 + -4 | 0;
         HEAP32[$8 >> 2] = 0;
        }
        $3 = HEAP32[$12 >> 2] + 1 | 0;
        HEAP32[$12 >> 2] = $3;
        if ($3 >>> 0 > 999999999) {
         continue
        }
        break;
       }
      }
      $9 = Math_imul($14 - $8 >> 2, 9);
      $7 = 10;
      $3 = HEAP32[$8 >> 2];
      if ($3 >>> 0 < 10) {
       break label$31
      }
      while (1) {
       $9 = $9 + 1 | 0;
       $7 = Math_imul($7, 10);
       if ($3 >>> 0 >= $7 >>> 0) {
        continue
       }
       break;
      };
     }
     $3 = $12 + 4 | 0;
     $6 = $6 >>> 0 > $3 >>> 0 ? $3 : $6;
    }
    label$37 : {
     while (1) {
      $7 = $6;
      $16 = 0;
      if ($6 >>> 0 <= $8 >>> 0) {
       break label$37
      }
      $6 = $7 + -4 | 0;
      if (!HEAP32[$6 >> 2]) {
       continue
      }
      break;
     };
     $16 = 1;
    }
    label$39 : {
     if (($21 | 0) != 103) {
      $13 = $4 & 8;
      break label$39;
     }
     $3 = $11 ? $11 : 1;
     $6 = ($3 | 0) > ($9 | 0) & ($9 | 0) > -5;
     $11 = ($6 ? $9 ^ -1 : -1) + $3 | 0;
     $5 = ($6 ? -1 : -2) + $5 | 0;
     $13 = $4 & 8;
     if ($13) {
      break label$39
     }
     $6 = 9;
     label$41 : {
      if (!$16) {
       break label$41
      }
      $12 = HEAP32[$7 + -4 >> 2];
      if (!$12) {
       break label$41
      }
      $3 = 10;
      $6 = 0;
      if (($12 >>> 0) % 10) {
       break label$41
      }
      while (1) {
       $6 = $6 + 1 | 0;
       $3 = Math_imul($3, 10);
       if (!(($12 >>> 0) % ($3 >>> 0))) {
        continue
       }
       break;
      };
     }
     $3 = Math_imul($7 - $14 >> 2, 9) + -9 | 0;
     if (($5 | 32) == 102) {
      $13 = 0;
      $3 = $3 - $6 | 0;
      $3 = ($3 | 0) > 0 ? $3 : 0;
      $11 = ($11 | 0) < ($3 | 0) ? $11 : $3;
      break label$39;
     }
     $13 = 0;
     $3 = ($3 + $9 | 0) - $6 | 0;
     $3 = ($3 | 0) > 0 ? $3 : 0;
     $11 = ($11 | 0) < ($3 | 0) ? $11 : $3;
    }
    $15 = $11 | $13;
    $21 = ($15 | 0) != 0;
    $3 = $0;
    $23 = $2;
    $24 = $5 | 32;
    $6 = ($9 | 0) > 0 ? $9 : 0;
    label$44 : {
     if (($24 | 0) == 102) {
      break label$44
     }
     $6 = $9 >> 31;
     $6 = fmt_u($6 + $9 ^ $6, 0, $17);
     if (($17 - $6 | 0) <= 1) {
      while (1) {
       $6 = $6 + -1 | 0;
       HEAP8[$6 | 0] = 48;
       if (($17 - $6 | 0) < 2) {
        continue
       }
       break;
      }
     }
     $18 = $6 + -2 | 0;
     HEAP8[$18 | 0] = $5;
     HEAP8[$6 + -1 | 0] = ($9 | 0) < 0 ? 45 : 43;
     $6 = $17 - $18 | 0;
    }
    $12 = ($6 + ($21 + ($11 + $20 | 0) | 0) | 0) + 1 | 0;
    pad($3, 32, $23, $12, $4);
    out($0, $22, $20);
    pad($0, 48, $2, $12, $4 ^ 65536);
    label$47 : {
     label$48 : {
      label$49 : {
       if (($24 | 0) == 102) {
        $3 = $10 + 16 | 8;
        $5 = $10 + 16 | 9;
        $9 = $8 >>> 0 > $14 >>> 0 ? $14 : $8;
        $8 = $9;
        while (1) {
         $6 = fmt_u(HEAP32[$8 >> 2], 0, $5);
         label$52 : {
          if (($8 | 0) != ($9 | 0)) {
           if ($6 >>> 0 <= $10 + 16 >>> 0) {
            break label$52
           }
           while (1) {
            $6 = $6 + -1 | 0;
            HEAP8[$6 | 0] = 48;
            if ($6 >>> 0 > $10 + 16 >>> 0) {
             continue
            }
            break;
           };
           break label$52;
          }
          if (($5 | 0) != ($6 | 0)) {
           break label$52
          }
          HEAP8[$10 + 24 | 0] = 48;
          $6 = $3;
         }
         out($0, $6, $5 - $6 | 0);
         $8 = $8 + 4 | 0;
         if ($8 >>> 0 <= $14 >>> 0) {
          continue
         }
         break;
        };
        if ($15) {
         out($0, 30387, 1)
        }
        if (($11 | 0) < 1 | $8 >>> 0 >= $7 >>> 0) {
         break label$49
        }
        while (1) {
         $6 = fmt_u(HEAP32[$8 >> 2], 0, $5);
         if ($6 >>> 0 > $10 + 16 >>> 0) {
          while (1) {
           $6 = $6 + -1 | 0;
           HEAP8[$6 | 0] = 48;
           if ($6 >>> 0 > $10 + 16 >>> 0) {
            continue
           }
           break;
          }
         }
         out($0, $6, ($11 | 0) < 9 ? $11 : 9);
         $6 = $11 + -9 | 0;
         $8 = $8 + 4 | 0;
         if ($8 >>> 0 >= $7 >>> 0) {
          break label$48
         }
         $3 = ($11 | 0) > 9;
         $11 = $6;
         if ($3) {
          continue
         }
         break;
        };
        break label$48;
       }
       label$59 : {
        if (($11 | 0) < 0) {
         break label$59
        }
        $14 = $16 ? $7 : $8 + 4 | 0;
        $3 = $10 + 16 | 8;
        $5 = $10 + 16 | 9;
        $9 = $8;
        while (1) {
         $6 = fmt_u(HEAP32[$9 >> 2], 0, $5);
         if (($5 | 0) == ($6 | 0)) {
          HEAP8[$10 + 24 | 0] = 48;
          $6 = $3;
         }
         label$62 : {
          if (($8 | 0) != ($9 | 0)) {
           if ($6 >>> 0 <= $10 + 16 >>> 0) {
            break label$62
           }
           while (1) {
            $6 = $6 + -1 | 0;
            HEAP8[$6 | 0] = 48;
            if ($6 >>> 0 > $10 + 16 >>> 0) {
             continue
            }
            break;
           };
           break label$62;
          }
          out($0, $6, 1);
          $6 = $6 + 1 | 0;
          if (($11 | 0) < 1 ? !$13 : 0) {
           break label$62
          }
          out($0, 30387, 1);
         }
         $7 = $6;
         $6 = $5 - $6 | 0;
         out($0, $7, ($11 | 0) > ($6 | 0) ? $6 : $11);
         $11 = $11 - $6 | 0;
         $9 = $9 + 4 | 0;
         if ($9 >>> 0 >= $14 >>> 0) {
          break label$59
         }
         if (($11 | 0) > -1) {
          continue
         }
         break;
        };
       }
       pad($0, 48, $11 + 18 | 0, 18, 0);
       out($0, $18, $17 - $18 | 0);
       break label$47;
      }
      $6 = $11;
     }
     pad($0, 48, $6 + 9 | 0, 9, 0);
    }
    break label$5;
   }
   $11 = $5 & 32;
   $7 = $11 ? $22 + 9 | 0 : $22;
   label$65 : {
    if ($3 >>> 0 > 11) {
     break label$65
    }
    $6 = 12 - $3 | 0;
    if (!$6) {
     break label$65
    }
    $19 = 8.0;
    while (1) {
     $19 = $19 * 16.0;
     $6 = $6 + -1 | 0;
     if ($6) {
      continue
     }
     break;
    };
    if (HEAPU8[$7 | 0] == 45) {
     $1 = -($19 + (-$1 - $19));
     break label$65;
    }
    $1 = $1 + $19 - $19;
   }
   $9 = HEAP32[$10 + 44 >> 2];
   $6 = $9 >> 31;
   $6 = fmt_u($6 ^ $6 + $9, 0, $17);
   if (($17 | 0) == ($6 | 0)) {
    HEAP8[$10 + 15 | 0] = 48;
    $6 = $10 + 15 | 0;
   }
   $9 = $20 | 2;
   $8 = HEAP32[$10 + 44 >> 2];
   $14 = $6 + -2 | 0;
   HEAP8[$14 | 0] = $5 + 15;
   HEAP8[$6 + -1 | 0] = ($8 | 0) < 0 ? 45 : 43;
   $16 = $4 & 8;
   $8 = $10 + 16 | 0;
   while (1) {
    $5 = $8;
    $15 = $11;
    if (Math_abs($1) < 2147483648.0) {
     $6 = ~~$1
    } else {
     $6 = -2147483648
    }
    HEAP8[$8 | 0] = $15 | HEAPU8[$6 + 30336 | 0];
    $1 = ($1 - +($6 | 0)) * 16.0;
    $8 = $5 + 1 | 0;
    if (!(($8 - ($10 + 16 | 0) | 0) != 1 | ($1 == 0.0 ? !(($3 | 0) > 0 | $16) : 0))) {
     HEAP8[$5 + 1 | 0] = 46;
     $8 = $5 + 2 | 0;
    }
    if ($1 != 0.0) {
     continue
    }
    break;
   };
   $5 = $0;
   $6 = $2;
   if (!$3 | (($8 - $10 | 0) + -18 | 0) >= ($3 | 0)) {
    $11 = (($17 - ($10 + 16 | 0) | 0) - $14 | 0) + $8 | 0
   } else {
    $11 = (($3 + $17 | 0) - $14 | 0) + 2 | 0
   }
   $3 = $11;
   $12 = $3 + $9 | 0;
   pad($5, 32, $6, $12, $4);
   out($0, $7, $9);
   pad($0, 48, $2, $12, $4 ^ 65536);
   $5 = $8 - ($10 + 16 | 0) | 0;
   out($0, $10 + 16 | 0, $5);
   $3 = $17 - $14 | 0;
   pad($0, 48, $11 - ($3 + $5 | 0) | 0, 0, 0);
   out($0, $14, $3);
  }
  pad($0, 32, $2, $12, $4 ^ 8192);
  $0 = $10 + 560 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
  return (($12 | 0) < ($2 | 0) ? $2 : $12) | 0;
 }
 
 function pop_arg_long_double($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = $1;
  $1 = HEAP32[$1 >> 2] + 15 & -16;
  HEAP32[$2 >> 2] = $1 + 16;
  HEAPF64[$0 >> 3] = __trunctfdf2(HEAP32[$1 >> 2], HEAP32[$1 + 4 >> 2], HEAP32[$1 + 8 >> 2], HEAP32[$1 + 12 >> 2]);
 }
 
 function __DOUBLE_BITS($0) {
  var $1 = 0, $2 = 0;
  wasm2js_scratch_store_f64(+$0);
  $1 = wasm2js_scratch_load_i32(1) | 0;
  $2 = wasm2js_scratch_load_i32(0) | 0;
  i64toi32_i32$HIGH_BITS = $1;
  return $2;
 }
 
 function vfiprintf($0, $1, $2) {
  __vfprintf_internal($0, $1, $2, 0, 0);
 }
 
 function fiprintf($0, $1, $2) {
  var $3 = 0, $4 = 0;
  $3 = global$0 - 16 | 0;
  $4 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  HEAP32[$3 + 12 >> 2] = $2;
  vfiprintf($0, $1, $2);
  $0 = $3 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function __fmodeflags($0) {
  var $1 = 0;
  $1 = 2;
  if (!strchr($0, 43)) {
   $1 = HEAPU8[$0 | 0] != 114
  }
  $1 = strchr($0, 120) ? $1 | 128 : $1;
  $1 = strchr($0, 101) ? $1 | 524288 : $1;
  $0 = HEAPU8[$0 | 0];
  $1 = ($0 | 0) == 114 ? $1 : $1 | 64;
  $1 = ($0 | 0) == 119 ? $1 | 512 : $1;
  return ($0 | 0) == 97 ? $1 | 1024 : $1;
 }
 
 function fread($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0;
  $5 = HEAPU8[$3 + 74 | 0];
  HEAP8[$3 + 74 | 0] = $5 + -1 | $5;
  $5 = Math_imul($1, $2);
  $6 = HEAP32[$3 + 4 >> 2];
  $4 = HEAP32[$3 + 8 >> 2] - $6 | 0;
  $7 = $5;
  label$2 : {
   if (($4 | 0) < 1) {
    break label$2
   }
   $4 = $4 >>> 0 < $5 >>> 0 ? $4 : $5;
   memcpy($0, $6, $4);
   HEAP32[$3 + 4 >> 2] = $4 + HEAP32[$3 + 4 >> 2];
   $0 = $0 + $4 | 0;
   $7 = $5 - $4 | 0;
  }
  $4 = $7;
  if ($4) {
   while (1) {
    label$5 : {
     if (!__toread($3)) {
      $6 = FUNCTION_TABLE[HEAP32[$3 + 32 >> 2]]($3, $0, $4) | 0;
      if ($6 + 1 >>> 0 > 1) {
       break label$5
      }
     }
     return ($5 - $4 >>> 0) / ($1 >>> 0) | 0;
    }
    $0 = $0 + $6 | 0;
    $4 = $4 - $6 | 0;
    if ($4) {
     continue
    }
    break;
   }
  }
  return $1 ? $2 : 0;
 }
 
 function __uflow($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  $2 = -1;
  label$2 : {
   if (__toread($0)) {
    break label$2
   }
   if ((FUNCTION_TABLE[HEAP32[$0 + 32 >> 2]]($0, $1 + 15 | 0, 1) | 0) != 1) {
    break label$2
   }
   $2 = HEAPU8[$1 + 15 | 0];
  }
  $0 = $1 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
  return $2;
 }
 
 function __emscripten_stdout_seek($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  i64toi32_i32$HIGH_BITS = 0;
  return 0;
 }
 
 function fputc($0) {
  var $1 = 0;
  if (HEAP32[$0 + 76 >> 2] < 0) {
   label$3 : {
    if (HEAP8[$0 + 75 | 0] == 10) {
     break label$3
    }
    $1 = HEAP32[$0 + 20 >> 2];
    if ($1 >>> 0 >= HEAPU32[$0 + 16 >> 2]) {
     break label$3
    }
    HEAP32[$0 + 20 >> 2] = $1 + 1;
    HEAP8[$1 | 0] = 10;
    return;
   }
   __overflow($0);
   return;
  }
  label$4 : {
   label$5 : {
    if (HEAP8[$0 + 75 | 0] == 10) {
     break label$5
    }
    $1 = HEAP32[$0 + 20 >> 2];
    if ($1 >>> 0 >= HEAPU32[$0 + 16 >> 2]) {
     break label$5
    }
    HEAP32[$0 + 20 >> 2] = $1 + 1;
    HEAP8[$1 | 0] = 10;
    break label$4;
   }
   __overflow($0);
  }
 }
 
 function __fdopen($0, $1) {
  var $2 = 0, $3 = 0;
  $3 = global$0 - 32 | 0;
  $2 = $3;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  label$2 : {
   label$3 : {
    label$4 : {
     if (!strchr(30396, HEAP8[$1 | 0])) {
      HEAP32[16596] = 28;
      break label$4;
     }
     $2 = dlmalloc(1176);
     if ($2) {
      break label$3
     }
    }
    $0 = 0;
    break label$2;
   }
   memset($2, 0, 144);
   if (!strchr($1, 43)) {
    HEAP32[$2 >> 2] = HEAPU8[$1 | 0] == 114 ? 8 : 4
   }
   label$7 : {
    if (HEAPU8[$1 | 0] != 97) {
     $1 = HEAP32[$2 >> 2];
     break label$7;
    }
    $1 = __syscall221($0 | 0, 3, 0) | 0;
    if (!($1 & 1024)) {
     HEAP32[$3 + 16 >> 2] = $1 | 1024;
     __syscall221($0 | 0, 4, $3 + 16 | 0) | 0;
    }
    $1 = HEAP32[$2 >> 2] | 128;
    HEAP32[$2 >> 2] = $1;
   }
   HEAP8[$2 + 75 | 0] = 255;
   HEAP32[$2 + 48 >> 2] = 1024;
   HEAP32[$2 + 60 >> 2] = $0;
   HEAP32[$2 + 44 >> 2] = $2 + 152;
   label$10 : {
    if ($1 & 8) {
     break label$10
    }
    HEAP32[$3 >> 2] = $3 + 24;
    if (__syscall54($0 | 0, 21523, $3 | 0)) {
     break label$10
    }
    HEAP8[$2 + 75 | 0] = 10;
   }
   HEAP32[$2 + 40 >> 2] = 1536;
   HEAP32[$2 + 36 >> 2] = 1535;
   HEAP32[$2 + 32 >> 2] = 1541;
   HEAP32[$2 + 12 >> 2] = 1534;
   if (!HEAP32[16859]) {
    HEAP32[$2 + 76 >> 2] = -1
   }
   $0 = __ofl_add($2);
  }
  $1 = $3 + 32 | 0;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  return $0;
 }
 
 function __stdio_read($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $3 = global$0 - 32 | 0;
  $4 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  HEAP32[$3 + 16 >> 2] = $1;
  $4 = HEAP32[$0 + 48 >> 2];
  HEAP32[$3 + 20 >> 2] = $2 - (($4 | 0) != 0);
  $5 = HEAP32[$0 + 44 >> 2];
  HEAP32[$3 + 28 >> 2] = $4;
  HEAP32[$3 + 24 >> 2] = $5;
  label$2 : {
   label$3 : {
    label$4 : {
     if (__wasi_syscall_ret(__wasi_fd_read(HEAP32[$0 + 60 >> 2], $3 + 16 | 0, 2, $3 + 12 | 0) | 0)) {
      HEAP32[$3 + 12 >> 2] = -1;
      $2 = -1;
      break label$4;
     }
     $4 = HEAP32[$3 + 12 >> 2];
     if (($4 | 0) > 0) {
      break label$3
     }
     $2 = $4;
    }
    HEAP32[$0 >> 2] = HEAP32[$0 >> 2] | $2 & 48 ^ 16;
    break label$2;
   }
   $6 = HEAP32[$3 + 20 >> 2];
   if ($4 >>> 0 <= $6 >>> 0) {
    $2 = $4;
    break label$2;
   }
   $5 = HEAP32[$0 + 44 >> 2];
   HEAP32[$0 + 4 >> 2] = $5;
   HEAP32[$0 + 8 >> 2] = $5 + ($4 - $6 | 0);
   if (!HEAP32[$0 + 48 >> 2]) {
    break label$2
   }
   HEAP32[$0 + 4 >> 2] = $5 + 1;
   HEAP8[($1 + $2 | 0) + -1 | 0] = HEAPU8[$5 | 0];
  }
  $0 = $3 + 32 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
  return $2 | 0;
 }
 
 function __ofl_add($0) {
  var $1 = 0;
  HEAP32[$0 + 56 >> 2] = HEAP32[16599];
  $1 = HEAP32[16599];
  if ($1) {
   HEAP32[$1 + 52 >> 2] = $0
  }
  HEAP32[16599] = $0;
  return $0;
 }
 
 function __ftello_unlocked($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  $1 = HEAP32[$0 + 40 >> 2];
  $2 = FUNCTION_TABLE[$1]($0, 0, 0, HEAPU8[$0 | 0] & 128 ? (HEAPU32[$0 + 20 >> 2] > HEAPU32[$0 + 28 >> 2] ? 2 : 1) : 1) | 0;
  $1 = i64toi32_i32$HIGH_BITS;
  $3 = $1;
  if (($1 | 0) > 0 ? 1 : ($1 | 0) >= 0 ? ($2 >>> 0 < 0 ? 0 : 1) : 0) {
   $4 = HEAP32[$0 + 20 >> 2] - HEAP32[$0 + 28 >> 2] | 0;
   $0 = HEAP32[$0 + 8 >> 2] - HEAP32[$0 + 4 >> 2] | 0;
   $5 = $2 - $0 | 0;
   $1 = $4 + $5 | 0;
   $0 = ($3 - (($0 >> 31) + ($2 >>> 0 < $0 >>> 0) | 0) | 0) + ($4 >> 31) | 0;
   $2 = $1;
   $3 = $1 >>> 0 < $5 >>> 0 ? $0 + 1 | 0 : $0;
  }
  i64toi32_i32$HIGH_BITS = $3;
  return $2;
 }
 
 function __ftello($0) {
  if (HEAP32[$0 + 76 >> 2] <= -1) {
   return __ftello_unlocked($0)
  }
  $0 = __ftello_unlocked($0);
  return $0;
 }
 
 function ftell($0) {
  var $1 = 0;
  $0 = __ftello($0);
  $1 = i64toi32_i32$HIGH_BITS;
  if (($1 | 0) > 0 ? 1 : ($1 | 0) >= 0 ? ($0 >>> 0 < 2147483648 ? 0 : 1) : 0) {
   HEAP32[16596] = 61;
   return -1;
  }
  return $0;
 }
 
 function __toread($0) {
  var $1 = 0, $2 = 0;
  $1 = HEAPU8[$0 + 74 | 0];
  HEAP8[$0 + 74 | 0] = $1 + -1 | $1;
  if (HEAPU32[$0 + 20 >> 2] > HEAPU32[$0 + 28 >> 2]) {
   FUNCTION_TABLE[HEAP32[$0 + 36 >> 2]]($0, 0, 0) | 0
  }
  HEAP32[$0 + 28 >> 2] = 0;
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP32[$0 + 20 >> 2] = 0;
  $1 = HEAP32[$0 >> 2];
  if ($1 & 4) {
   HEAP32[$0 >> 2] = $1 | 32;
   return -1;
  }
  $2 = HEAP32[$0 + 44 >> 2] + HEAP32[$0 + 48 >> 2] | 0;
  HEAP32[$0 + 8 >> 2] = $2;
  HEAP32[$0 + 4 >> 2] = $2;
  return $1 << 27 >> 31;
 }
 
 function vsnprintf($0, $1, $2, $3) {
  var $4 = 0, $5 = 0;
  $4 = global$0 - 160 | 0;
  $5 = $4;
  if ($4 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $5;
  memcpy($4 + 8 | 0, 30400, 144);
  label$2 : {
   label$3 : {
    if ($1 + -1 >>> 0 >= 2147483647) {
     if ($1) {
      break label$3
     }
     $1 = 1;
     $0 = $4 + 159 | 0;
    }
    HEAP32[$4 + 52 >> 2] = $0;
    HEAP32[$4 + 28 >> 2] = $0;
    $5 = -2 - $0 | 0;
    $1 = $1 >>> 0 > $5 >>> 0 ? $5 : $1;
    HEAP32[$4 + 56 >> 2] = $1;
    $0 = $0 + $1 | 0;
    HEAP32[$4 + 36 >> 2] = $0;
    HEAP32[$4 + 24 >> 2] = $0;
    $0 = vfprintf($4 + 8 | 0, $2, $3);
    if (!$1) {
     break label$2
    }
    $1 = HEAP32[$4 + 28 >> 2];
    HEAP8[$1 - (($1 | 0) == HEAP32[$4 + 24 >> 2]) | 0] = 0;
    break label$2;
   }
   HEAP32[16596] = 61;
   $0 = -1;
  }
  $1 = $4 + 160 | 0;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  return $0;
 }
 
 function sn_write($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0;
  $4 = HEAP32[$0 + 20 >> 2];
  $3 = HEAP32[$0 + 16 >> 2] - $4 | 0;
  $3 = $3 >>> 0 > $2 >>> 0 ? $2 : $3;
  memcpy($4, $1, $3);
  HEAP32[$0 + 20 >> 2] = $3 + HEAP32[$0 + 20 >> 2];
  return $2 | 0;
 }
 
 function fclose($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
  $3 = HEAP32[$0 >> 2] & 1;
  if (!$3) {
   $1 = HEAP32[$0 + 52 >> 2];
   if ($1) {
    HEAP32[$1 + 56 >> 2] = HEAP32[$0 + 56 >> 2]
   }
   $2 = HEAP32[$0 + 56 >> 2];
   if ($2) {
    HEAP32[$2 + 52 >> 2] = $1
   }
   if (HEAP32[16599] == ($0 | 0)) {
    HEAP32[16599] = $2
   }
  }
  $1 = fflush($0);
  $2 = FUNCTION_TABLE[HEAP32[$0 + 12 >> 2]]($0) | 0;
  $4 = HEAP32[$0 + 96 >> 2];
  if ($4) {
   dlfree($4)
  }
  $1 = $1 | $2;
  if (!$3) {
   dlfree($0);
   return $1 | 0;
  }
  return $1 | 0;
 }
 
 function qsort($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
  $3 = global$0 - 208 | 0;
  $5 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $5;
  HEAP32[$3 + 8 >> 2] = 1;
  HEAP32[$3 + 12 >> 2] = 0;
  label$2 : {
   $6 = $1 << 2;
   if (!$6) {
    break label$2
   }
   HEAP32[$3 + 16 >> 2] = 4;
   HEAP32[$3 + 20 >> 2] = 4;
   $1 = 4;
   $5 = $1;
   $4 = 2;
   while (1) {
    $7 = $5 + 4 | 0;
    $5 = $1;
    $1 = $1 + $7 | 0;
    HEAP32[($3 + 16 | 0) + ($4 << 2) >> 2] = $1;
    $4 = $4 + 1 | 0;
    if ($1 >>> 0 < $6 >>> 0) {
     continue
    }
    break;
   };
   $5 = ($0 + $6 | 0) + -4 | 0;
   label$4 : {
    if ($5 >>> 0 <= $0 >>> 0) {
     $4 = 1;
     $1 = 1;
     break label$4;
    }
    $4 = 1;
    $1 = 1;
    while (1) {
     label$7 : {
      if (($4 & 3) == 3) {
       sift($0, $2, $1, $3 + 16 | 0);
       shr($3 + 8 | 0, 2);
       $1 = $1 + 2 | 0;
       break label$7;
      }
      $4 = $1 + -1 | 0;
      label$9 : {
       if (HEAPU32[($3 + 16 | 0) + ($4 << 2) >> 2] >= $5 - $0 >>> 0) {
        trinkle($0, $2, $3 + 8 | 0, $1, 0, $3 + 16 | 0);
        break label$9;
       }
       sift($0, $2, $1, $3 + 16 | 0);
      }
      if (($1 | 0) == 1) {
       shl($3 + 8 | 0, 1);
       $1 = 0;
       break label$7;
      }
      shl($3 + 8 | 0, $4);
      $1 = 1;
     }
     $4 = HEAP32[$3 + 8 >> 2] | 1;
     HEAP32[$3 + 8 >> 2] = $4;
     $0 = $0 + 4 | 0;
     if ($0 >>> 0 < $5 >>> 0) {
      continue
     }
     break;
    };
   }
   trinkle($0, $2, $3 + 8 | 0, $1, 0, $3 + 16 | 0);
   while (1) {
    label$13 : {
     label$14 : {
      label$15 : {
       if (!(($1 | 0) != 1 | ($4 | 0) != 1)) {
        if (HEAP32[$3 + 12 >> 2]) {
         break label$15
        }
        break label$2;
       }
       if (($1 | 0) > 1) {
        break label$14
       }
      }
      $4 = $3 + 8 | 0;
      $5 = pntz($3 + 8 | 0);
      shr($4, $5);
      $4 = HEAP32[$3 + 8 >> 2];
      $1 = $1 + $5 | 0;
      break label$13;
     }
     shl($3 + 8 | 0, 2);
     HEAP32[$3 + 8 >> 2] = HEAP32[$3 + 8 >> 2] ^ 7;
     shr($3 + 8 | 0, 1);
     $6 = $0 + -4 | 0;
     $5 = $1 + -2 | 0;
     trinkle($6 - HEAP32[($3 + 16 | 0) + ($5 << 2) >> 2] | 0, $2, $3 + 8 | 0, $1 + -1 | 0, 1, $3 + 16 | 0);
     shl($3 + 8 | 0, 1);
     $4 = HEAP32[$3 + 8 >> 2] | 1;
     HEAP32[$3 + 8 >> 2] = $4;
     trinkle($6, $2, $3 + 8 | 0, $5, 1, $3 + 16 | 0);
     $1 = $5;
    }
    $0 = $0 + -4 | 0;
    continue;
   };
  }
  $0 = $3 + 208 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function sift($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  $5 = global$0 - 240 | 0;
  $4 = $5;
  if ($5 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  HEAP32[$5 >> 2] = $0;
  $7 = 1;
  label$2 : {
   if (($2 | 0) < 2) {
    break label$2
   }
   $4 = $0;
   while (1) {
    $6 = $4 + -4 | 0;
    $8 = $2 + -2 | 0;
    $4 = $6 - HEAP32[($8 << 2) + $3 >> 2] | 0;
    if ((FUNCTION_TABLE[$1]($0, $4) | 0) >= 0) {
     if ((FUNCTION_TABLE[$1]($0, $6) | 0) > -1) {
      break label$2
     }
    }
    $0 = ($7 << 2) + $5 | 0;
    label$5 : {
     if ((FUNCTION_TABLE[$1]($4, $6) | 0) >= 0) {
      HEAP32[$0 >> 2] = $4;
      $8 = $2 + -1 | 0;
      break label$5;
     }
     HEAP32[$0 >> 2] = $6;
     $4 = $6;
    }
    $7 = $7 + 1 | 0;
    if (($8 | 0) < 2) {
     break label$2
    }
    $0 = HEAP32[$5 >> 2];
    $2 = $8;
    continue;
   };
  }
  cycle($5, $7);
  $0 = $5 + 240 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function shr($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0;
  $4 = $0;
  label$1 : {
   if ($1 >>> 0 <= 31) {
    $2 = HEAP32[$0 >> 2];
    $3 = HEAP32[$0 + 4 >> 2];
    break label$1;
   }
   $2 = HEAP32[$0 + 4 >> 2];
   HEAP32[$0 + 4 >> 2] = 0;
   HEAP32[$0 >> 2] = $2;
   $1 = $1 + -32 | 0;
   $3 = 0;
  }
  HEAP32[$4 + 4 >> 2] = $3 >>> $1;
  HEAP32[$0 >> 2] = $3 << 32 - $1 | $2 >>> $1;
 }
 
 function trinkle($0, $1, $2, $3, $4, $5) {
  var $6 = 0, $7 = 0, $8 = 0, $9 = 0;
  $6 = global$0 - 240 | 0;
  $7 = $6;
  if ($6 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $7;
  $7 = HEAP32[$2 >> 2];
  HEAP32[$6 + 232 >> 2] = $7;
  $2 = HEAP32[$2 + 4 >> 2];
  HEAP32[$6 >> 2] = $0;
  HEAP32[$6 + 236 >> 2] = $2;
  $8 = 1;
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      if ($2 ? 0 : ($7 | 0) == 1) {
       break label$5
      }
      $7 = $0 - HEAP32[($3 << 2) + $5 >> 2] | 0;
      if ((FUNCTION_TABLE[$1]($7, $0) | 0) < 1) {
       break label$5
      }
      $9 = !$4;
      while (1) {
       label$7 : {
        $2 = $7;
        if (!(!$9 | ($3 | 0) < 2)) {
         $4 = HEAP32[(($3 << 2) + $5 | 0) + -8 >> 2];
         $7 = $0 + -4 | 0;
         if ((FUNCTION_TABLE[$1]($7, $2) | 0) > -1) {
          break label$7
         }
         if ((FUNCTION_TABLE[$1]($7 - $4 | 0, $2) | 0) > -1) {
          break label$7
         }
        }
        HEAP32[($8 << 2) + $6 >> 2] = $2;
        $4 = $6 + 232 | 0;
        $0 = pntz($6 + 232 | 0);
        shr($4, $0);
        $8 = $8 + 1 | 0;
        $3 = $0 + $3 | 0;
        if (HEAP32[$6 + 236 >> 2] ? 0 : HEAP32[$6 + 232 >> 2] == 1) {
         break label$3
        }
        $4 = 0;
        $9 = 1;
        $0 = $2;
        $7 = $0 - HEAP32[($3 << 2) + $5 >> 2] | 0;
        if ((FUNCTION_TABLE[$1]($7, HEAP32[$6 >> 2]) | 0) > 0) {
         continue
        }
        break label$4;
       }
       break;
      };
      $2 = $0;
      break label$3;
     }
     $2 = $0;
    }
    if ($4) {
     break label$2
    }
   }
   cycle($6, $8);
   sift($2, $1, $3, $5);
  }
  $0 = $6 + 240 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function shl($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0;
  $4 = $0;
  label$1 : {
   if ($1 >>> 0 <= 31) {
    $2 = HEAP32[$0 + 4 >> 2];
    $3 = HEAP32[$0 >> 2];
    break label$1;
   }
   $2 = HEAP32[$0 >> 2];
   HEAP32[$0 + 4 >> 2] = $2;
   HEAP32[$0 >> 2] = 0;
   $1 = $1 + -32 | 0;
   $3 = 0;
  }
  HEAP32[$4 >> 2] = $3 << $1;
  HEAP32[$0 + 4 >> 2] = $2 << $1 | $3 >>> 32 - $1;
 }
 
 function pntz($0) {
  var $1 = 0;
  $1 = __wasm_ctz_i32(HEAP32[$0 >> 2] + -1 | 0);
  if (!$1) {
   $0 = __wasm_ctz_i32(HEAP32[$0 + 4 >> 2]);
   return $0 ? $0 + 32 | 0 : 0;
  }
  return $1;
 }
 
 function cycle($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
  $3 = 4;
  $4 = global$0 - 256 | 0;
  $2 = $4;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  label$2 : {
   if (($1 | 0) < 2) {
    break label$2
   }
   $7 = ($1 << 2) + $0 | 0;
   HEAP32[$7 >> 2] = $4;
   $2 = $4;
   while (1) {
    $5 = $3 >>> 0 < 256 ? $3 : 256;
    memcpy($2, HEAP32[$0 >> 2], $5);
    $2 = 0;
    while (1) {
     $6 = ($2 << 2) + $0 | 0;
     $2 = $2 + 1 | 0;
     memcpy(HEAP32[$6 >> 2], HEAP32[($2 << 2) + $0 >> 2], $5);
     HEAP32[$6 >> 2] = HEAP32[$6 >> 2] + $5;
     if (($1 | 0) != ($2 | 0)) {
      continue
     }
     break;
    };
    $3 = $3 - $5 | 0;
    if (!$3) {
     break label$2
    }
    $2 = HEAP32[$7 >> 2];
    continue;
   };
  }
  $0 = $4 + 256 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function __strchrnul($0, $1) {
  var $2 = 0, $3 = 0;
  label$1 : {
   $3 = $1 & 255;
   if ($3) {
    if ($0 & 3) {
     while (1) {
      $2 = HEAPU8[$0 | 0];
      if (!$2 | ($2 | 0) == ($1 & 255)) {
       break label$1
      }
      $0 = $0 + 1 | 0;
      if ($0 & 3) {
       continue
      }
      break;
     }
    }
    $2 = HEAP32[$0 >> 2];
    label$5 : {
     if (($2 ^ -1) & $2 + -16843009 & -2139062144) {
      break label$5
     }
     $3 = Math_imul($3, 16843009);
     while (1) {
      $2 = $2 ^ $3;
      if (($2 ^ -1) & $2 + -16843009 & -2139062144) {
       break label$5
      }
      $2 = HEAP32[$0 + 4 >> 2];
      $0 = $0 + 4 | 0;
      if (!($2 + -16843009 & ($2 ^ -1) & -2139062144)) {
       continue
      }
      break;
     };
    }
    while (1) {
     $2 = $0;
     $3 = HEAPU8[$2 | 0];
     if ($3) {
      $0 = $2 + 1 | 0;
      if (($3 | 0) != ($1 & 255)) {
       continue
      }
     }
     break;
    };
    return $2;
   }
   return strlen($0) + $0 | 0;
  }
  return $0;
 }
 
 function strchr($0, $1) {
  $0 = __strchrnul($0, $1);
  return HEAPU8[$0 | 0] == ($1 & 255) ? $0 : 0;
 }
 
 function memcmp($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0;
  label$1 : {
   if (!$2) {
    break label$1
   }
   while (1) {
    $3 = HEAPU8[$0 | 0];
    $4 = HEAPU8[$1 | 0];
    if (($3 | 0) == ($4 | 0)) {
     $1 = $1 + 1 | 0;
     $0 = $0 + 1 | 0;
     $2 = $2 + -1 | 0;
     if ($2) {
      continue
     }
     break label$1;
    }
    break;
   };
   $5 = $3 - $4 | 0;
  }
  return $5;
 }
 
 function memchr($0, $1) {
  var $2 = 0;
  $2 = ($1 | 0) != 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      if (!$1 | !($0 & 3)) {
       break label$4
      }
      while (1) {
       if (!HEAPU8[$0 | 0]) {
        break label$3
       }
       $0 = $0 + 1 | 0;
       $1 = $1 + -1 | 0;
       $2 = ($1 | 0) != 0;
       if (!$1) {
        break label$4
       }
       if ($0 & 3) {
        continue
       }
       break;
      };
     }
     if (!$2) {
      break label$2
     }
    }
    if (!HEAPU8[$0 | 0]) {
     break label$1
    }
    label$6 : {
     if ($1 >>> 0 >= 4) {
      while (1) {
       $2 = HEAP32[$0 >> 2];
       if (($2 ^ -1) & $2 + -16843009 & -2139062144) {
        break label$6
       }
       $0 = $0 + 4 | 0;
       $1 = $1 + -4 | 0;
       if ($1 >>> 0 > 3) {
        continue
       }
       break;
      }
     }
     if (!$1) {
      break label$2
     }
    }
    while (1) {
     if (!HEAPU8[$0 | 0]) {
      break label$1
     }
     $0 = $0 + 1 | 0;
     $1 = $1 + -1 | 0;
     if ($1) {
      continue
     }
     break;
    };
   }
   return 0;
  }
  return $0;
 }
 
 function wctomb($0, $1) {
  if (!$0) {
   return 0
  }
  return wcrtomb($0, $1, 0);
 }
 
 function wcrtomb($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  label$1 : {
   if ($0) {
    if ($1 >>> 0 <= 127) {
     break label$1
    }
    label$3 : {
     if (!HEAP32[HEAP32[16279] >> 2]) {
      if (($1 & -128) == 57216) {
       break label$1
      }
      break label$3;
     }
     if ($1 >>> 0 <= 2047) {
      HEAP8[$0 + 1 | 0] = $1 & 63 | 128;
      HEAP8[$0 | 0] = $1 >>> 6 | 192;
      return 2;
     }
     if (!(($1 & -8192) != 57344 ? $1 >>> 0 >= 55296 : 0)) {
      HEAP8[$0 + 2 | 0] = $1 & 63 | 128;
      HEAP8[$0 | 0] = $1 >>> 12 | 224;
      HEAP8[$0 + 1 | 0] = $1 >>> 6 & 63 | 128;
      return 3;
     }
     if ($1 + -65536 >>> 0 <= 1048575) {
      HEAP8[$0 + 3 | 0] = $1 & 63 | 128;
      HEAP8[$0 | 0] = $1 >>> 18 | 240;
      HEAP8[$0 + 2 | 0] = $1 >>> 6 & 63 | 128;
      HEAP8[$0 + 1 | 0] = $1 >>> 12 & 63 | 128;
      return 4;
     }
    }
    HEAP32[16596] = 25;
    $0 = -1;
   } else {
    $0 = 1
   }
   return $0 | 0;
  }
  HEAP8[$0 | 0] = $1;
  return 1;
 }
 
 function __wasi_syscall_ret($0) {
  if (!$0) {
   return 0
  }
  HEAP32[16596] = $0;
  return -1;
 }
 
 function __ashlti3($0, $1, $2, $3, $4, $5) {
  var $6 = 0, $7 = 0, $8 = 0, $9 = 0;
  label$1 : {
   if ($5 & 64) {
    $3 = $1;
    $4 = $5 + -64 | 0;
    $1 = $4 & 31;
    if (32 <= ($4 & 63) >>> 0) {
     $4 = $3 << $1;
     $3 = 0;
    } else {
     $4 = (1 << $1) - 1 & $3 >>> 32 - $1 | $2 << $1;
     $3 = $3 << $1;
    }
    $1 = 0;
    $2 = 0;
    break label$1;
   }
   if (!$5) {
    break label$1
   }
   $6 = $3;
   $8 = $5;
   $3 = $5 & 31;
   if (32 <= ($5 & 63) >>> 0) {
    $7 = $6 << $3;
    $9 = 0;
   } else {
    $7 = (1 << $3) - 1 & $6 >>> 32 - $3 | $4 << $3;
    $9 = $6 << $3;
   }
   $3 = $2;
   $6 = $1;
   $5 = 64 - $5 | 0;
   $4 = $5 & 31;
   if (32 <= ($5 & 63) >>> 0) {
    $5 = 0;
    $3 = $3 >>> $4 | 0;
   } else {
    $5 = $3 >>> $4 | 0;
    $3 = ((1 << $4) - 1 & $3) << 32 - $4 | $6 >>> $4;
   }
   $3 = $9 | $3;
   $4 = $5 | $7;
   $5 = $1;
   $1 = $8 & 31;
   if (32 <= ($8 & 63) >>> 0) {
    $7 = $5 << $1;
    $1 = 0;
   } else {
    $7 = (1 << $1) - 1 & $5 >>> 32 - $1 | $2 << $1;
    $1 = $5 << $1;
   }
   $2 = $7;
  }
  HEAP32[$0 >> 2] = $1;
  HEAP32[$0 + 4 >> 2] = $2;
  HEAP32[$0 + 8 >> 2] = $3;
  HEAP32[$0 + 12 >> 2] = $4;
 }
 
 function __lshrti3($0, $1, $2, $3, $4, $5) {
  var $6 = 0, $7 = 0, $8 = 0, $9 = 0;
  label$1 : {
   if ($5 & 64) {
    $2 = $5 + -64 | 0;
    $1 = $2 & 31;
    if (32 <= ($2 & 63) >>> 0) {
     $2 = 0;
     $1 = $4 >>> $1 | 0;
    } else {
     $2 = $4 >>> $1 | 0;
     $1 = ((1 << $1) - 1 & $4) << 32 - $1 | $3 >>> $1;
    }
    $3 = 0;
    $4 = 0;
    break label$1;
   }
   if (!$5) {
    break label$1
   }
   $7 = $4;
   $8 = $3;
   $9 = 64 - $5 | 0;
   $6 = $9 & 31;
   if (32 <= ($9 & 63) >>> 0) {
    $7 = $8 << $6;
    $9 = 0;
   } else {
    $7 = (1 << $6) - 1 & $8 >>> 32 - $6 | $7 << $6;
    $9 = $8 << $6;
   }
   $8 = $1;
   $6 = $5;
   $1 = $6 & 31;
   if (32 <= ($6 & 63) >>> 0) {
    $6 = 0;
    $1 = $2 >>> $1 | 0;
   } else {
    $6 = $2 >>> $1 | 0;
    $1 = ((1 << $1) - 1 & $2) << 32 - $1 | $8 >>> $1;
   }
   $1 = $9 | $1;
   $2 = $6 | $7;
   $6 = $3;
   $3 = $5 & 31;
   if (32 <= ($5 & 63) >>> 0) {
    $7 = 0;
    $3 = $4 >>> $3 | 0;
   } else {
    $7 = $4 >>> $3 | 0;
    $3 = ((1 << $3) - 1 & $4) << 32 - $3 | $6 >>> $3;
   }
   $4 = $7;
  }
  HEAP32[$0 >> 2] = $1;
  HEAP32[$0 + 4 >> 2] = $2;
  HEAP32[$0 + 8 >> 2] = $3;
  HEAP32[$0 + 12 >> 2] = $4;
 }
 
 function __trunctfdf2($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
  $6 = global$0 - 32 | 0;
  $4 = $6;
  if ($4 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  $4 = $3 & 2147483647;
  $8 = $4;
  $4 = $4 + -1006698496 | 0;
  $7 = $2;
  $5 = $2;
  if ($2 >>> 0 < 0) {
   $4 = $4 + 1 | 0
  }
  $9 = $5;
  $5 = $4;
  $4 = $8 + -1140785152 | 0;
  $10 = $7;
  if ($7 >>> 0 < 0) {
   $4 = $4 + 1 | 0
  }
  label$2 : {
   if (($4 | 0) == ($5 | 0) & $9 >>> 0 < $10 >>> 0 | $5 >>> 0 < $4 >>> 0) {
    $4 = $3 << 4 | $2 >>> 28;
    $2 = $2 << 4 | $1 >>> 28;
    $1 = $1 & 268435455;
    $7 = $1;
    if (($1 | 0) == 134217728 & $0 >>> 0 >= 1 | $1 >>> 0 > 134217728) {
     $4 = $4 + 1073741824 | 0;
     $0 = $2 + 1 | 0;
     if ($0 >>> 0 < 1) {
      $4 = $4 + 1 | 0
     }
     $5 = $0;
     break label$2;
    }
    $5 = $2;
    $4 = $4 - (($2 >>> 0 < 0) + -1073741824 | 0) | 0;
    if ($0 | $7 ^ 134217728) {
     break label$2
    }
    $0 = $5 + ($5 & 1) | 0;
    if ($0 >>> 0 < $5 >>> 0) {
     $4 = $4 + 1 | 0
    }
    $5 = $0;
    break label$2;
   }
   if (!(!$7 & ($8 | 0) == 2147418112 ? !($0 | $1) : ($8 | 0) == 2147418112 & $7 >>> 0 < 0 | $8 >>> 0 < 2147418112)) {
    $4 = $3 << 4 | $2 >>> 28;
    $5 = $2 << 4 | $1 >>> 28;
    $4 = $4 & 524287 | 2146959360;
    break label$2;
   }
   $5 = 0;
   $4 = 2146435072;
   if (($8 | 0) == 1140785151 & $7 >>> 0 > 4294967295 | $8 >>> 0 > 1140785151) {
    break label$2
   }
   $4 = 0;
   $7 = $8 >>> 16 | 0;
   if ($7 >>> 0 < 15249) {
    break label$2
   }
   $4 = $3 & 65535 | 65536;
   __ashlti3($6 + 16 | 0, $0, $1, $2, $4, $7 + -15233 | 0);
   __lshrti3($6, $0, $1, $2, $4, 15361 - $7 | 0);
   $2 = HEAP32[$6 + 4 >> 2];
   $0 = HEAP32[$6 + 8 >> 2];
   $4 = HEAP32[$6 + 12 >> 2] << 4 | $0 >>> 28;
   $5 = $0 << 4 | $2 >>> 28;
   $0 = $2 & 268435455;
   $2 = $0;
   $1 = HEAP32[$6 >> 2] | ((HEAP32[$6 + 16 >> 2] | HEAP32[$6 + 24 >> 2]) != 0 | (HEAP32[$6 + 20 >> 2] | HEAP32[$6 + 28 >> 2]) != 0);
   if (($0 | 0) == 134217728 & $1 >>> 0 >= 1 | $0 >>> 0 > 134217728) {
    $0 = $5 + 1 | 0;
    if ($0 >>> 0 < 1) {
     $4 = $4 + 1 | 0
    }
    $5 = $0;
    break label$2;
   }
   if ($1 | $2 ^ 134217728) {
    break label$2
   }
   $0 = $5 + ($5 & 1) | 0;
   if ($0 >>> 0 < $5 >>> 0) {
    $4 = $4 + 1 | 0
   }
   $5 = $0;
  }
  $0 = $6 + 32 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
  $0 = $3 & -2147483648 | $4;
  wasm2js_scratch_store_i32(0, $5 | 0);
  wasm2js_scratch_store_i32(1, $0 | 0);
  return +wasm2js_scratch_load_f64();
 }
 
 function setThrew($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  if (!HEAP32[16874]) {
   HEAP32[16875] = $1;
   HEAP32[16874] = $0;
  }
 }
 
 function __cos($0, $1) {
  var $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0;
  $2 = $0 * $0;
  $3 = $2 * .5;
  $4 = 1.0 - $3;
  $5 = 1.0 - $4 - $3;
  $3 = $2 * $2;
  return $4 + ($5 + ($2 * ($2 * ($2 * ($2 * 2.480158728947673e-05 + -.001388888888887411) + .0416666666666666) + $3 * $3 * ($2 * ($2 * -1.1359647557788195e-11 + 2.087572321298175e-09) + -2.7557314351390663e-07)) - $0 * $1));
 }
 
 function __rem_pio2_large($0, $1, $2, $3, $4) {
  var $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0;
  $7 = global$0 - 560 | 0;
  $6 = $7;
  if ($6 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $6;
  $6 = ($2 + -3 | 0) / 24 | 0;
  $18 = ($6 | 0) > 0 ? $6 : 0;
  $13 = $2 + Math_imul($18, -24) | 0;
  $14 = HEAP32[($4 << 2) + 30544 >> 2];
  $9 = $3 + -1 | 0;
  if (($14 + $9 | 0) >= 0) {
   $6 = $3 + $14 | 0;
   $2 = $18 - $9 | 0;
   while (1) {
    HEAPF64[($7 + 320 | 0) + ($8 << 3) >> 3] = ($2 | 0) < 0 ? 0.0 : +HEAP32[($2 << 2) + 30560 >> 2];
    $2 = $2 + 1 | 0;
    $8 = $8 + 1 | 0;
    if (($6 | 0) != ($8 | 0)) {
     continue
    }
    break;
   };
  }
  $12 = $13 + -24 | 0;
  $6 = 0;
  $19 = ($14 | 0) > 0 ? $14 : 0;
  $8 = ($3 | 0) < 1;
  while (1) {
   label$7 : {
    if ($8) {
     $5 = 0.0;
     break label$7;
    }
    $10 = $6 + $9 | 0;
    $2 = 0;
    $5 = 0.0;
    while (1) {
     $5 = $5 + HEAPF64[($2 << 3) + $0 >> 3] * HEAPF64[($7 + 320 | 0) + ($10 - $2 << 3) >> 3];
     $2 = $2 + 1 | 0;
     if (($3 | 0) != ($2 | 0)) {
      continue
     }
     break;
    };
   }
   HEAPF64[($6 << 3) + $7 >> 3] = $5;
   $2 = ($6 | 0) == ($19 | 0);
   $6 = $6 + 1 | 0;
   if (!$2) {
    continue
   }
   break;
  };
  $24 = 23 - $12 | 0;
  $20 = 24 - $12 | 0;
  $6 = $14;
  label$10 : {
   while (1) {
    $5 = HEAPF64[($6 << 3) + $7 >> 3];
    $2 = 0;
    $8 = $6;
    $16 = ($6 | 0) < 1;
    if (!$16) {
     while (1) {
      $9 = ($7 + 480 | 0) + ($2 << 2) | 0;
      $11 = $5;
      $5 = $5 * 5.9604644775390625e-08;
      label$15 : {
       if (Math_abs($5) < 2147483648.0) {
        $10 = ~~$5;
        break label$15;
       }
       $10 = -2147483648;
      }
      $5 = +($10 | 0);
      $11 = $11 + $5 * -16777216.0;
      label$14 : {
       if (Math_abs($11) < 2147483648.0) {
        $10 = ~~$11;
        break label$14;
       }
       $10 = -2147483648;
      }
      HEAP32[$9 >> 2] = $10;
      $8 = $8 + -1 | 0;
      $5 = HEAPF64[($8 << 3) + $7 >> 3] + $5;
      $2 = $2 + 1 | 0;
      if (($6 | 0) != ($2 | 0)) {
       continue
      }
      break;
     }
    }
    $5 = scalbn($5, $12);
    $5 = $5 + Math_floor($5 * .125) * -8.0;
    label$18 : {
     if (Math_abs($5) < 2147483648.0) {
      $10 = ~~$5;
      break label$18;
     }
     $10 = -2147483648;
    }
    $5 = $5 - +($10 | 0);
    label$20 : {
     label$21 : {
      label$22 : {
       $21 = ($12 | 0) < 1;
       label$23 : {
        if (!$21) {
         $8 = (($6 << 2) + $7 | 0) + 476 | 0;
         $9 = HEAP32[$8 >> 2];
         $2 = $9 >> $20;
         $17 = $8;
         $8 = $9 - ($2 << $20) | 0;
         HEAP32[$17 >> 2] = $8;
         $10 = $2 + $10 | 0;
         $9 = $8 >> $24;
         break label$23;
        }
        if ($12) {
         break label$22
        }
        $9 = HEAP32[(($6 << 2) + $7 | 0) + 476 >> 2] >> 23;
       }
       if (($9 | 0) < 1) {
        break label$20
       }
       break label$21;
      }
      $9 = 2;
      if (!!($5 >= .5)) {
       break label$21
      }
      $9 = 0;
      break label$20;
     }
     $2 = 0;
     $8 = 0;
     if (!$16) {
      while (1) {
       $17 = ($7 + 480 | 0) + ($2 << 2) | 0;
       $16 = HEAP32[$17 >> 2];
       label$27 : {
        label$28 : {
         if ($8) {
          $22 = 16777215
         } else {
          if (!$16) {
           break label$28
          }
          $8 = 1;
          $22 = 16777216;
         }
         HEAP32[$17 >> 2] = $22 - $16;
         break label$27;
        }
        $8 = 0;
       }
       $2 = $2 + 1 | 0;
       if (($6 | 0) != ($2 | 0)) {
        continue
       }
       break;
      }
     }
     label$31 : {
      if ($21) {
       break label$31
      }
      $2 = $12 + -1 | 0;
      if ($2 >>> 0 > 1) {
       break label$31
      }
      if ($2 - 1) {
       $2 = (($6 << 2) + $7 | 0) + 476 | 0;
       HEAP32[$2 >> 2] = HEAP32[$2 >> 2] & 8388607;
       break label$31;
      }
      $2 = (($6 << 2) + $7 | 0) + 476 | 0;
      HEAP32[$2 >> 2] = HEAP32[$2 >> 2] & 4194303;
     }
     $10 = $10 + 1 | 0;
     if (($9 | 0) != 2) {
      break label$20
     }
     $5 = 1.0 - $5;
     $9 = 2;
     if (!$8) {
      break label$20
     }
     $5 = $5 - scalbn(1.0, $12);
    }
    if ($5 == 0.0) {
     $8 = 0;
     label$34 : {
      $2 = $6;
      if (($2 | 0) <= ($14 | 0)) {
       break label$34
      }
      while (1) {
       $2 = $2 + -1 | 0;
       $8 = HEAP32[($7 + 480 | 0) + ($2 << 2) >> 2] | $8;
       if (($2 | 0) > ($14 | 0)) {
        continue
       }
       break;
      };
      if (!$8) {
       break label$34
      }
      $13 = $12;
      while (1) {
       $13 = $13 + -24 | 0;
       $6 = $6 + -1 | 0;
       if (!HEAP32[($7 + 480 | 0) + ($6 << 2) >> 2]) {
        continue
       }
       break;
      };
      break label$10;
     }
     $2 = 1;
     while (1) {
      $8 = $2;
      $2 = $2 + 1 | 0;
      if (!HEAP32[($7 + 480 | 0) + ($14 - $8 << 2) >> 2]) {
       continue
      }
      break;
     };
     $8 = $6 + $8 | 0;
     while (1) {
      $9 = $3 + $6 | 0;
      $6 = $6 + 1 | 0;
      HEAPF64[($7 + 320 | 0) + ($9 << 3) >> 3] = HEAP32[($18 + $6 << 2) + 30560 >> 2];
      $2 = 0;
      $5 = 0.0;
      if (($3 | 0) >= 1) {
       while (1) {
        $5 = $5 + HEAPF64[($2 << 3) + $0 >> 3] * HEAPF64[($7 + 320 | 0) + ($9 - $2 << 3) >> 3];
        $2 = $2 + 1 | 0;
        if (($3 | 0) != ($2 | 0)) {
         continue
        }
        break;
       }
      }
      HEAPF64[($6 << 3) + $7 >> 3] = $5;
      if (($6 | 0) < ($8 | 0)) {
       continue
      }
      break;
     };
     $6 = $8;
     continue;
    }
    break;
   };
   $5 = scalbn($5, 0 - $12 | 0);
   label$41 : {
    if (!!($5 >= 16777216.0)) {
     $0 = ($7 + 480 | 0) + ($6 << 2) | 0;
     $11 = $5;
     $5 = $5 * 5.9604644775390625e-08;
     label$44 : {
      if (Math_abs($5) < 2147483648.0) {
       $2 = ~~$5;
       break label$44;
      }
      $2 = -2147483648;
     }
     $5 = $11 + +($2 | 0) * -16777216.0;
     label$43 : {
      if (Math_abs($5) < 2147483648.0) {
       $3 = ~~$5;
       break label$43;
      }
      $3 = -2147483648;
     }
     HEAP32[$0 >> 2] = $3;
     $6 = $6 + 1 | 0;
     break label$41;
    }
    $2 = Math_abs($5) < 2147483648.0 ? ~~$5 : -2147483648;
    $13 = $12;
   }
   HEAP32[($7 + 480 | 0) + ($6 << 2) >> 2] = $2;
  }
  $5 = scalbn(1.0, $13);
  if (($6 | 0) >= 0) {
   $2 = $6;
   while (1) {
    HEAPF64[($2 << 3) + $7 >> 3] = $5 * +HEAP32[($7 + 480 | 0) + ($2 << 2) >> 2];
    $5 = $5 * 5.9604644775390625e-08;
    $0 = 0;
    $3 = ($2 | 0) > 0;
    $2 = $2 + -1 | 0;
    if ($3) {
     continue
    }
    break;
   };
   $8 = $6;
   while (1) {
    $3 = $19 >>> 0 < $0 >>> 0 ? $19 : $0;
    $12 = $6 - $8 | 0;
    $2 = 0;
    $5 = 0.0;
    while (1) {
     $5 = $5 + HEAPF64[($2 << 3) + 33328 >> 3] * HEAPF64[($2 + $8 << 3) + $7 >> 3];
     $13 = ($2 | 0) != ($3 | 0);
     $2 = $2 + 1 | 0;
     if ($13) {
      continue
     }
     break;
    };
    HEAPF64[($7 + 160 | 0) + ($12 << 3) >> 3] = $5;
    $8 = $8 + -1 | 0;
    $2 = ($0 | 0) != ($6 | 0);
    $0 = $0 + 1 | 0;
    if ($2) {
     continue
    }
    break;
   };
  }
  label$53 : {
   if ($4 >>> 0 > 3) {
    break label$53
   }
   label$54 : {
    label$55 : {
     switch ($4 - 1 | 0) {
     case 2:
      label$58 : {
       if (($6 | 0) < 1) {
        break label$58
       }
       $3 = ($7 + 160 | 0) + ($6 << 3) | 0;
       $5 = HEAPF64[$3 >> 3];
       $2 = $6;
       while (1) {
        $0 = $2 + -1 | 0;
        $4 = ($7 + 160 | 0) + ($0 << 3) | 0;
        $23 = HEAPF64[$4 >> 3];
        $11 = $23 + $5;
        HEAPF64[($7 + 160 | 0) + ($2 << 3) >> 3] = $5 + ($23 - $11);
        HEAPF64[$4 >> 3] = $11;
        $4 = ($2 | 0) > 1;
        $5 = $11;
        $2 = $0;
        if ($4) {
         continue
        }
        break;
       };
       if (($6 | 0) < 2) {
        break label$58
       }
       $5 = HEAPF64[$3 >> 3];
       $2 = $6;
       while (1) {
        $0 = $2 + -1 | 0;
        $3 = ($7 + 160 | 0) + ($0 << 3) | 0;
        $15 = HEAPF64[$3 >> 3];
        $11 = $15 + $5;
        HEAPF64[($7 + 160 | 0) + ($2 << 3) >> 3] = $5 + ($15 - $11);
        HEAPF64[$3 >> 3] = $11;
        $3 = ($2 | 0) > 2;
        $5 = $11;
        $2 = $0;
        if ($3) {
         continue
        }
        break;
       };
       $15 = 0.0;
       while (1) {
        $15 = $15 + HEAPF64[($7 + 160 | 0) + ($6 << 3) >> 3];
        $0 = ($6 | 0) > 2;
        $6 = $6 + -1 | 0;
        if ($0) {
         continue
        }
        break;
       };
      }
      $5 = HEAPF64[$7 + 160 >> 3];
      if ($9) {
       break label$54
      }
      HEAPF64[$1 >> 3] = $5;
      $0 = HEAP32[$7 + 172 >> 2];
      $2 = HEAP32[$7 + 168 >> 2];
      HEAPF64[$1 + 16 >> 3] = $15;
      HEAP32[$1 + 8 >> 2] = $2;
      HEAP32[$1 + 12 >> 2] = $0;
      break label$53;
     default:
      $5 = 0.0;
      if (($6 | 0) >= 0) {
       while (1) {
        $5 = $5 + HEAPF64[($7 + 160 | 0) + ($6 << 3) >> 3];
        $0 = ($6 | 0) > 0;
        $6 = $6 + -1 | 0;
        if ($0) {
         continue
        }
        break;
       }
      }
      HEAPF64[$1 >> 3] = $9 ? -$5 : $5;
      break label$53;
     case 0:
     case 1:
      break label$55;
     };
    }
    $5 = 0.0;
    if (($6 | 0) >= 0) {
     $2 = $6;
     while (1) {
      $5 = $5 + HEAPF64[($7 + 160 | 0) + ($2 << 3) >> 3];
      $0 = ($2 | 0) > 0;
      $2 = $2 + -1 | 0;
      if ($0) {
       continue
      }
      break;
     };
    }
    HEAPF64[$1 >> 3] = $9 ? -$5 : $5;
    $5 = HEAPF64[$7 + 160 >> 3] - $5;
    $2 = 1;
    if (($6 | 0) >= 1) {
     while (1) {
      $5 = $5 + HEAPF64[($7 + 160 | 0) + ($2 << 3) >> 3];
      $0 = ($2 | 0) != ($6 | 0);
      $2 = $2 + 1 | 0;
      if ($0) {
       continue
      }
      break;
     }
    }
    HEAPF64[$1 + 8 >> 3] = $9 ? -$5 : $5;
    break label$53;
   }
   HEAPF64[$1 >> 3] = -$5;
   $5 = HEAPF64[$7 + 168 >> 3];
   HEAPF64[$1 + 16 >> 3] = -$15;
   HEAPF64[$1 + 8 >> 3] = -$5;
  }
  $0 = $7 + 560 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
  return $10 & 7;
 }
 
 function __rem_pio2($0, $1) {
  var $2 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, $10 = 0, $11 = 0;
  $5 = global$0 - 48 | 0;
  $3 = $5;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  wasm2js_scratch_store_f64(+$0);
  $3 = wasm2js_scratch_load_i32(1) | 0;
  $8 = wasm2js_scratch_load_i32(0) | 0;
  label$2 : {
   label$3 : {
    $4 = $3;
    $3 = $4;
    $6 = $4 & 2147483647;
    label$4 : {
     if ($6 >>> 0 <= 1074752122) {
      if (($3 & 1048575) == 598523) {
       break label$4
      }
      if ($6 >>> 0 <= 1073928572) {
       if (($4 | 0) > 0 ? 1 : ($4 | 0) >= 0 ? ($8 >>> 0 < 0 ? 0 : 1) : 0) {
        $0 = $0 + -1.5707963267341256;
        $2 = $0 + -6.077100506506192e-11;
        HEAPF64[$1 >> 3] = $2;
        HEAPF64[$1 + 8 >> 3] = $0 - $2 + -6.077100506506192e-11;
        $3 = 1;
        break label$2;
       }
       $0 = $0 + 1.5707963267341256;
       $2 = $0 + 6.077100506506192e-11;
       HEAPF64[$1 >> 3] = $2;
       HEAPF64[$1 + 8 >> 3] = $0 - $2 + 6.077100506506192e-11;
       $3 = -1;
       break label$2;
      }
      if (($4 | 0) > 0 ? 1 : ($4 | 0) >= 0 ? ($8 >>> 0 < 0 ? 0 : 1) : 0) {
       $0 = $0 + -3.1415926534682512;
       $2 = $0 + -1.2154201013012384e-10;
       HEAPF64[$1 >> 3] = $2;
       HEAPF64[$1 + 8 >> 3] = $0 - $2 + -1.2154201013012384e-10;
       $3 = 2;
       break label$2;
      }
      $0 = $0 + 3.1415926534682512;
      $2 = $0 + 1.2154201013012384e-10;
      HEAPF64[$1 >> 3] = $2;
      HEAPF64[$1 + 8 >> 3] = $0 - $2 + 1.2154201013012384e-10;
      $3 = -2;
      break label$2;
     }
     if ($6 >>> 0 <= 1075594811) {
      if ($6 >>> 0 <= 1075183036) {
       if (($6 | 0) == 1074977148) {
        break label$4
       }
       if (($4 | 0) > 0 ? 1 : ($4 | 0) >= 0 ? ($8 >>> 0 < 0 ? 0 : 1) : 0) {
        $0 = $0 + -4.712388980202377;
        $2 = $0 + -1.8231301519518578e-10;
        HEAPF64[$1 >> 3] = $2;
        HEAPF64[$1 + 8 >> 3] = $0 - $2 + -1.8231301519518578e-10;
        $3 = 3;
        break label$2;
       }
       $0 = $0 + 4.712388980202377;
       $2 = $0 + 1.8231301519518578e-10;
       HEAPF64[$1 >> 3] = $2;
       HEAPF64[$1 + 8 >> 3] = $0 - $2 + 1.8231301519518578e-10;
       $3 = -3;
       break label$2;
      }
      if (($6 | 0) == 1075388923) {
       break label$4
      }
      if (($4 | 0) > 0 ? 1 : ($4 | 0) >= 0 ? ($8 >>> 0 < 0 ? 0 : 1) : 0) {
       $0 = $0 + -6.2831853069365025;
       $2 = $0 + -2.430840202602477e-10;
       HEAPF64[$1 >> 3] = $2;
       HEAPF64[$1 + 8 >> 3] = $0 - $2 + -2.430840202602477e-10;
       $3 = 4;
       break label$2;
      }
      $0 = $0 + 6.2831853069365025;
      $2 = $0 + 2.430840202602477e-10;
      HEAPF64[$1 >> 3] = $2;
      HEAPF64[$1 + 8 >> 3] = $0 - $2 + 2.430840202602477e-10;
      $3 = -4;
      break label$2;
     }
     if ($6 >>> 0 > 1094263290) {
      break label$3
     }
    }
    $9 = $0 * .6366197723675814 + 6755399441055744.0 + -6755399441055744.0;
    $2 = $0 + $9 * -1.5707963267341256;
    $7 = $9 * 6.077100506506192e-11;
    $0 = $2 - $7;
    HEAPF64[$1 >> 3] = $0;
    $4 = $6 >>> 20 | 0;
    wasm2js_scratch_store_f64(+$0);
    $3 = wasm2js_scratch_load_i32(1) | 0;
    wasm2js_scratch_load_i32(0) | 0;
    $8 = ($4 - ($3 >>> 20 & 2047) | 0) < 17;
    if (Math_abs($9) < 2147483648.0) {
     $3 = ~~$9
    } else {
     $3 = -2147483648
    }
    label$15 : {
     if ($8) {
      break label$15
     }
     $7 = $2;
     $0 = $9 * 6.077100506303966e-11;
     $2 = $2 - $0;
     $7 = $9 * 2.0222662487959506e-21 - ($7 - $2 - $0);
     $0 = $2 - $7;
     HEAPF64[$1 >> 3] = $0;
     $10 = $4;
     wasm2js_scratch_store_f64(+$0);
     $4 = wasm2js_scratch_load_i32(1) | 0;
     wasm2js_scratch_load_i32(0) | 0;
     if (($10 - ($4 >>> 20 & 2047) | 0) < 50) {
      break label$15
     }
     $7 = $2;
     $0 = $9 * 2.0222662487111665e-21;
     $2 = $2 - $0;
     $7 = $9 * 8.4784276603689e-32 - ($7 - $2 - $0);
     $0 = $2 - $7;
     HEAPF64[$1 >> 3] = $0;
    }
    HEAPF64[$1 + 8 >> 3] = $2 - $0 - $7;
    break label$2;
   }
   if ($6 >>> 0 >= 2146435072) {
    $0 = $0 - $0;
    HEAPF64[$1 >> 3] = $0;
    HEAPF64[$1 + 8 >> 3] = $0;
    $3 = 0;
    break label$2;
   }
   $3 = $4 & 1048575 | 1096810496;
   wasm2js_scratch_store_i32(0, $8 | 0);
   wasm2js_scratch_store_i32(1, $3 | 0);
   $0 = +wasm2js_scratch_load_f64();
   $3 = 0;
   while (1) {
    $10 = $3;
    $3 = ($5 + 16 | 0) + ($3 << 3) | 0;
    if (Math_abs($0) < 2147483648.0) {
     $11 = ~~$0
    } else {
     $11 = -2147483648
    }
    $2 = +($11 | 0);
    HEAPF64[$3 >> 3] = $2;
    $0 = ($0 - $2) * 16777216.0;
    $3 = 1;
    if (!$10) {
     continue
    }
    break;
   };
   HEAPF64[$5 + 32 >> 3] = $0;
   label$21 : {
    if ($0 != 0.0) {
     $3 = 2;
     break label$21;
    }
    $10 = 1;
    while (1) {
     $3 = $10;
     $10 = $3 + -1 | 0;
     if (HEAPF64[($5 + 16 | 0) + ($3 << 3) >> 3] == 0.0) {
      continue
     }
     break;
    };
   }
   $3 = __rem_pio2_large($5 + 16 | 0, $5, ($6 >>> 20 | 0) + -1046 | 0, $3 + 1 | 0, 1);
   $0 = HEAPF64[$5 >> 3];
   if (($4 | 0) < -1 ? 1 : ($4 | 0) <= -1 ? ($8 >>> 0 > 4294967295 ? 0 : 1) : 0) {
    HEAPF64[$1 >> 3] = -$0;
    HEAPF64[$1 + 8 >> 3] = -HEAPF64[$5 + 8 >> 3];
    $3 = 0 - $3 | 0;
    break label$2;
   }
   HEAPF64[$1 >> 3] = $0;
   $4 = HEAP32[$5 + 12 >> 2];
   HEAP32[$1 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
   HEAP32[$1 + 12 >> 2] = $4;
  }
  $1 = $5 + 48 | 0;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  return $3;
 }
 
 function __sin($0, $1, $2) {
  var $3 = 0.0, $4 = 0.0, $5 = 0.0;
  $3 = $0 * $0;
  $5 = $3 * ($3 * $3) * ($3 * 1.58969099521155e-10 + -2.5050760253406863e-08) + ($3 * ($3 * 2.7557313707070068e-06 + -1.984126982985795e-04) + .00833333333332249);
  $4 = $3 * $0;
  if (!$2) {
   return $4 * ($3 * $5 + -.16666666666666632) + $0
  }
  return $0 - ($3 * ($1 * .5 - $4 * $5) - $1 + $4 * .16666666666666632);
 }
 
 function cos($0) {
  var $1 = 0, $2 = 0, $3 = 0.0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  wasm2js_scratch_store_f64(+$0);
  $2 = wasm2js_scratch_load_i32(1) | 0;
  wasm2js_scratch_load_i32(0) | 0;
  $2 = $2 & 2147483647;
  label$2 : {
   if ($2 >>> 0 <= 1072243195) {
    $3 = 1.0;
    if ($2 >>> 0 < 1044816030) {
     break label$2
    }
    $3 = __cos($0, 0.0);
    break label$2;
   }
   $3 = $0 - $0;
   if ($2 >>> 0 >= 2146435072) {
    break label$2
   }
   $2 = __rem_pio2($0, $1) & 3;
   if ($2 >>> 0 <= 2) {
    label$5 : {
     switch ($2 - 1 | 0) {
     default:
      $3 = __cos(HEAPF64[$1 >> 3], HEAPF64[$1 + 8 >> 3]);
      break label$2;
     case 0:
      $3 = -__sin(HEAPF64[$1 >> 3], HEAPF64[$1 + 8 >> 3], 1);
      break label$2;
     case 1:
      break label$5;
     };
    }
    $3 = -__cos(HEAPF64[$1 >> 3], HEAPF64[$1 + 8 >> 3]);
    break label$2;
   }
   $3 = __sin(HEAPF64[$1 >> 3], HEAPF64[$1 + 8 >> 3], 1);
  }
  $0 = $3;
  $1 = $1 + 16 | 0;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  return $0;
 }
 
 function __cosdf($0) {
  var $1 = 0.0;
  $0 = $0 * $0;
  $1 = $0 * $0;
  return Math_fround($0 * -.499999997251031 + 1.0 + $1 * .04166662332373906 + $0 * $1 * ($0 * 2.439044879627741e-05 + -.001388676377460993));
 }
 
 function __sindf($0) {
  var $1 = 0.0, $2 = 0.0;
  $1 = $0 * $0;
  $2 = $1 * $0;
  return Math_fround($2 * ($1 * $1) * ($1 * 2.718311493989822e-06 + -1.9839334836096632e-04) + ($2 * ($1 * .008333329385889463 + -.16666666641626524) + $0));
 }
 
 function __rem_pio2f($0, $1) {
  var $2 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0;
  $4 = global$0 - 16 | 0;
  $2 = $4;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  $5 = (wasm2js_scratch_store_f32($0), wasm2js_scratch_load_i32(0));
  $2 = $5 & 2147483647;
  label$2 : {
   if ($2 >>> 0 <= 1305022426) {
    $6 = +$0;
    $3 = $6 * .6366197723675814 + 6755399441055744.0 + -6755399441055744.0;
    HEAPF64[$1 >> 3] = $6 + $3 * -1.5707963109016418 + $3 * -1.5893254773528196e-08;
    if (Math_abs($3) < 2147483648.0) {
     $2 = ~~$3;
     break label$2;
    }
    $2 = -2147483648;
    break label$2;
   }
   if ($2 >>> 0 >= 2139095040) {
    HEAPF64[$1 >> 3] = Math_fround($0 - $0);
    $2 = 0;
    break label$2;
   }
   $7 = $2;
   $2 = ($2 >>> 23 | 0) + -150 | 0;
   HEAPF64[$4 + 8 >> 3] = (wasm2js_scratch_store_i32(0, $7 - ($2 << 23) | 0), wasm2js_scratch_load_f32());
   $2 = __rem_pio2_large($4 + 8 | 0, $4, $2, 1, 0);
   $3 = HEAPF64[$4 >> 3];
   if (($5 | 0) <= -1) {
    HEAPF64[$1 >> 3] = -$3;
    $2 = 0 - $2 | 0;
    break label$2;
   }
   HEAPF64[$1 >> 3] = $3;
  }
  $1 = $4 + 16 | 0;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  return $2;
 }
 
 function cosf($0) {
  var $1 = Math_fround(0), $2 = 0, $3 = 0, $4 = 0, $5 = 0.0;
  $3 = global$0 - 16 | 0;
  $2 = $3;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  $4 = (wasm2js_scratch_store_f32($0), wasm2js_scratch_load_i32(0));
  $2 = $4 & 2147483647;
  label$2 : {
   if ($2 >>> 0 <= 1061752794) {
    $1 = Math_fround(1.0);
    if ($2 >>> 0 < 964689920) {
     break label$2
    }
    $1 = __cosdf(+$0);
    break label$2;
   }
   if ($2 >>> 0 <= 1081824209) {
    $5 = +$0;
    if ($2 >>> 0 >= 1075235812) {
     $1 = Math_fround(-__cosdf((($4 | 0) < 0 ? 3.141592653589793 : -3.141592653589793) + $5));
     break label$2;
    }
    if (($4 | 0) <= -1) {
     $1 = __sindf($5 + 1.5707963267948966);
     break label$2;
    }
    $1 = __sindf(1.5707963267948966 - $5);
    break label$2;
   }
   if ($2 >>> 0 <= 1088565717) {
    if ($2 >>> 0 >= 1085271520) {
     $1 = __cosdf((($4 | 0) < 0 ? 6.283185307179586 : -6.283185307179586) + +$0);
     break label$2;
    }
    if (($4 | 0) <= -1) {
     $1 = __sindf(-4.71238898038469 - +$0);
     break label$2;
    }
    $1 = __sindf(+$0 + -4.71238898038469);
    break label$2;
   }
   $1 = Math_fround($0 - $0);
   if ($2 >>> 0 >= 2139095040) {
    break label$2
   }
   $2 = __rem_pio2f($0, $3 + 8 | 0) & 3;
   if ($2 >>> 0 <= 2) {
    label$11 : {
     switch ($2 - 1 | 0) {
     default:
      $1 = __cosdf(HEAPF64[$3 + 8 >> 3]);
      break label$2;
     case 0:
      $1 = __sindf(-HEAPF64[$3 + 8 >> 3]);
      break label$2;
     case 1:
      break label$11;
     };
    }
    $1 = Math_fround(-__cosdf(HEAPF64[$3 + 8 >> 3]));
    break label$2;
   }
   $1 = __sindf(HEAPF64[$3 + 8 >> 3]);
  }
  $0 = $1;
  $3 = $3 + 16 | 0;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  return $0;
 }
 
 function sin($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  wasm2js_scratch_store_f64(+$0);
  $2 = wasm2js_scratch_load_i32(1) | 0;
  wasm2js_scratch_load_i32(0) | 0;
  $2 = $2 & 2147483647;
  label$2 : {
   if ($2 >>> 0 <= 1072243195) {
    if ($2 >>> 0 < 1045430272) {
     break label$2
    }
    $0 = __sin($0, 0.0, 0);
    break label$2;
   }
   if ($2 >>> 0 >= 2146435072) {
    $0 = $0 - $0;
    break label$2;
   }
   $2 = __rem_pio2($0, $1) & 3;
   if ($2 >>> 0 <= 2) {
    label$6 : {
     switch ($2 - 1 | 0) {
     default:
      $0 = __sin(HEAPF64[$1 >> 3], HEAPF64[$1 + 8 >> 3], 1);
      break label$2;
     case 0:
      $0 = __cos(HEAPF64[$1 >> 3], HEAPF64[$1 + 8 >> 3]);
      break label$2;
     case 1:
      break label$6;
     };
    }
    $0 = -__sin(HEAPF64[$1 >> 3], HEAPF64[$1 + 8 >> 3], 1);
    break label$2;
   }
   $0 = -__cos(HEAPF64[$1 >> 3], HEAPF64[$1 + 8 >> 3]);
  }
  $1 = $1 + 16 | 0;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  return $0;
 }
 
 function sinf($0) {
  var $1 = 0, $2 = 0, $3 = 0.0, $4 = 0;
  $2 = global$0 - 16 | 0;
  $1 = $2;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  $4 = (wasm2js_scratch_store_f32($0), wasm2js_scratch_load_i32(0));
  $1 = $4 & 2147483647;
  label$2 : {
   if ($1 >>> 0 <= 1061752794) {
    if ($1 >>> 0 < 964689920) {
     break label$2
    }
    $0 = __sindf(+$0);
    break label$2;
   }
   if ($1 >>> 0 <= 1081824209) {
    $3 = +$0;
    if ($1 >>> 0 <= 1075235811) {
     if (($4 | 0) <= -1) {
      $0 = Math_fround(-__cosdf($3 + 1.5707963267948966));
      break label$2;
     }
     $0 = __cosdf($3 + -1.5707963267948966);
     break label$2;
    }
    $0 = __sindf(-((($4 | 0) < 0 ? 3.141592653589793 : -3.141592653589793) + $3));
    break label$2;
   }
   if ($1 >>> 0 <= 1088565717) {
    $3 = +$0;
    if ($1 >>> 0 <= 1085271519) {
     if (($4 | 0) <= -1) {
      $0 = __cosdf($3 + 4.71238898038469);
      break label$2;
     }
     $0 = Math_fround(-__cosdf($3 + -4.71238898038469));
     break label$2;
    }
    $0 = __sindf((($4 | 0) < 0 ? 6.283185307179586 : -6.283185307179586) + $3);
    break label$2;
   }
   if ($1 >>> 0 >= 2139095040) {
    $0 = Math_fround($0 - $0);
    break label$2;
   }
   $1 = __rem_pio2f($0, $2 + 8 | 0) & 3;
   if ($1 >>> 0 <= 2) {
    label$12 : {
     switch ($1 - 1 | 0) {
     default:
      $0 = __sindf(HEAPF64[$2 + 8 >> 3]);
      break label$2;
     case 0:
      $0 = __cosdf(HEAPF64[$2 + 8 >> 3]);
      break label$2;
     case 1:
      break label$12;
     };
    }
    $0 = __sindf(-HEAPF64[$2 + 8 >> 3]);
    break label$2;
   }
   $0 = Math_fround(-__cosdf(HEAPF64[$2 + 8 >> 3]));
  }
  $2 = $2 + 16 | 0;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  return $0;
 }
 
 function __tan($0, $1, $2) {
  var $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
  wasm2js_scratch_store_f64(+$0);
  $7 = wasm2js_scratch_load_i32(1) | 0;
  $9 = wasm2js_scratch_load_i32(0) | 0;
  $6 = $7 & 2147483640;
  $6 = ($6 | 0) == 1072010279 | $6 >>> 0 < 1072010279;
  if (!$6) {
   $8 = ($7 | 0) < 0 ? 1 : ($7 | 0) <= 0 ? ($9 >>> 0 >= 0 ? 0 : 1) : 0;
   $0 = .7853981633974483 - ($8 ? -$0 : $0) + (3.061616997868383e-17 - ($8 ? -$1 : $1));
   $8 = $7 >>> 31 | 0;
   $1 = 0.0;
  }
  $3 = $0 * $0;
  $4 = $0 * $3;
  $5 = $1;
  $1 = $3 * $3;
  $3 = $4 * .3333333333333341 + ($5 + $3 * ($5 + $4 * ($1 * ($1 * ($1 * ($1 * ($1 * -1.8558637485527546e-05 + 7.817944429395571e-05) + 5.880412408202641e-04) + 3.5920791075913124e-03) + .021869488294859542) + .13333333333320124 + $3 * ($1 * ($1 * ($1 * ($1 * ($1 * 2.590730518636337e-05 + 7.140724913826082e-05) + 2.464631348184699e-04) + 1.4562094543252903e-03) + .0088632398235993) + .05396825397622605))));
  $1 = $0 + $3;
  if (!$6) {
   $4 = $1 * $1;
   $5 = $1;
   $1 = +(1 - ($2 << 1) | 0);
   $0 = $0 + ($3 - $4 / ($5 + $1));
   $0 = $1 - ($0 + $0);
   return $8 ? -$0 : $0;
  }
  if ($2) {
   $4 = -1.0 / $1;
   wasm2js_scratch_store_f64(+$1);
   $2 = wasm2js_scratch_load_i32(1) | 0;
   wasm2js_scratch_load_i32(0) | 0;
   wasm2js_scratch_store_i32(0, 0);
   wasm2js_scratch_store_i32(1, $2 | 0);
   $5 = +wasm2js_scratch_load_f64();
   wasm2js_scratch_store_f64(+$4);
   $2 = wasm2js_scratch_load_i32(1) | 0;
   wasm2js_scratch_load_i32(0) | 0;
   wasm2js_scratch_store_i32(0, 0);
   wasm2js_scratch_store_i32(1, $2 | 0);
   $1 = +wasm2js_scratch_load_f64();
   $1 = $4 * ($5 * $1 + 1.0 + ($3 - ($5 - $0)) * $1) + $1;
  }
  return $1;
 }
 
 function tan($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  wasm2js_scratch_store_f64(+$0);
  $2 = wasm2js_scratch_load_i32(1) | 0;
  wasm2js_scratch_load_i32(0) | 0;
  $2 = $2 & 2147483647;
  label$2 : {
   if ($2 >>> 0 <= 1072243195) {
    if ($2 >>> 0 < 1044381696) {
     break label$2
    }
    $0 = __tan($0, 0.0, 0);
    break label$2;
   }
   if ($2 >>> 0 >= 2146435072) {
    $0 = $0 - $0;
    break label$2;
   }
   $2 = __rem_pio2($0, $1);
   $0 = __tan(HEAPF64[$1 >> 3], HEAPF64[$1 + 8 >> 3], $2 & 1);
  }
  $1 = $1 + 16 | 0;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  return $0;
 }
 
 function atan($0) {
  var $1 = 0, $2 = 0.0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0;
  wasm2js_scratch_store_f64(+$0);
  $4 = wasm2js_scratch_load_i32(1) | 0;
  $7 = wasm2js_scratch_load_i32(0) | 0;
  $1 = $4 & 2147483647;
  if ($1 >>> 0 < 1141899264) {
   label$2 : {
    label$3 : {
     if ($1 >>> 0 <= 1071382527) {
      $3 = -1;
      if ($1 >>> 0 >= 1044381696) {
       break label$3
      }
      break label$2;
     }
     $0 = Math_abs($0);
     if ($1 >>> 0 <= 1072889855) {
      if ($1 >>> 0 <= 1072037887) {
       $0 = ($0 + $0 + -1.0) / ($0 + 2.0);
       $3 = 0;
       break label$3;
      }
      $0 = ($0 + -1.0) / ($0 + 1.0);
      $3 = 1;
      break label$3;
     }
     if ($1 >>> 0 <= 1073971199) {
      $0 = ($0 + -1.5) / ($0 * 1.5 + 1.0);
      $3 = 2;
      break label$3;
     }
     $0 = -1.0 / $0;
     $3 = 3;
    }
    $1 = $3;
    $6 = $0 * $0;
    $2 = $6 * $6;
    $5 = $2 * ($2 * ($2 * ($2 * ($2 * -.036531572744216916 + -.058335701337905735) + -.0769187620504483) + -.11111110405462356) + -.19999999999876483);
    $2 = $6 * ($2 * ($2 * ($2 * ($2 * ($2 * .016285820115365782 + .049768779946159324) + .06661073137387531) + .09090887133436507) + .14285714272503466) + .3333333333333293);
    if (($1 | 0) <= -1) {
     return $0 - $0 * ($5 + $2)
    }
    $1 = $1 << 3;
    $0 = HEAPF64[$1 + 33392 >> 3] - ($0 * ($5 + $2) - HEAPF64[$1 + 33424 >> 3] - $0);
    $0 = (($4 | 0) < 0 ? 1 : ($4 | 0) <= 0 ? ($7 >>> 0 >= 0 ? 0 : 1) : 0) ? -$0 : $0;
   }
   return $0;
  }
  wasm2js_scratch_store_f64(1.5707963267948966);
  $1 = wasm2js_scratch_load_i32(1) | 0;
  $8 = wasm2js_scratch_load_i32(0) | 0;
  $1 = $1 & 2147483647;
  wasm2js_scratch_store_f64(+$0);
  $3 = wasm2js_scratch_load_i32(1) | 0;
  wasm2js_scratch_load_i32(0) | 0;
  $1 = $3 & -2147483648 | $1;
  wasm2js_scratch_store_i32(0, $8 | 0);
  wasm2js_scratch_store_i32(1, $1 | 0);
  $5 = +wasm2js_scratch_load_f64();
  $4 = $4 & 2147483647;
  return ($4 | 0) == 2146435072 & $7 >>> 0 > 0 | $4 >>> 0 > 2146435072 ? $0 : $5;
 }
 
 function atanf($0) {
  var $1 = 0, $2 = Math_fround(0), $3 = 0, $4 = Math_fround(0), $5 = 0, $6 = Math_fround(0);
  $5 = (wasm2js_scratch_store_f32($0), wasm2js_scratch_load_i32(0));
  $1 = $5 & 2147483647;
  if ($1 >>> 0 < 1283457024) {
   label$2 : {
    label$3 : {
     if ($1 >>> 0 <= 1054867455) {
      $3 = -1;
      if ($1 >>> 0 >= 964689920) {
       break label$3
      }
      break label$2;
     }
     $0 = Math_fround(Math_abs($0));
     if ($1 >>> 0 <= 1066926079) {
      if ($1 >>> 0 <= 1060110335) {
       $0 = Math_fround(Math_fround(Math_fround($0 + $0) + Math_fround(-1.0)) / Math_fround($0 + Math_fround(2.0)));
       $3 = 0;
       break label$3;
      }
      $0 = Math_fround(Math_fround($0 + Math_fround(-1.0)) / Math_fround($0 + Math_fround(1.0)));
      $3 = 1;
      break label$3;
     }
     if ($1 >>> 0 <= 1075576831) {
      $0 = Math_fround(Math_fround($0 + Math_fround(-1.5)) / Math_fround(Math_fround($0 * Math_fround(1.5)) + Math_fround(1.0)));
      $3 = 2;
      break label$3;
     }
     $0 = Math_fround(Math_fround(-1.0) / $0);
     $3 = 3;
    }
    $1 = $3;
    $4 = Math_fround($0 * $0);
    $2 = Math_fround($4 * $4);
    $6 = Math_fround($2 * Math_fround(Math_fround($2 * Math_fround(-.106480173766613)) + Math_fround(-.19999158382415771)));
    $2 = Math_fround($4 * Math_fround(Math_fround($2 * Math_fround(Math_fround($2 * Math_fround(.06168760731816292)) + Math_fround(.14253635704517365))) + Math_fround(.333333283662796)));
    if (($1 | 0) <= -1) {
     return Math_fround($0 - Math_fround($0 * Math_fround($6 + $2)))
    }
    $1 = $1 << 2;
    $0 = Math_fround(HEAPF32[$1 + 33456 >> 2] - Math_fround(Math_fround(Math_fround($0 * Math_fround($6 + $2)) - HEAPF32[$1 + 33472 >> 2]) - $0));
    $0 = ($5 | 0) < 0 ? Math_fround(-$0) : $0;
   }
   return $0;
  }
  return $1 >>> 0 > 2139095040 ? $0 : (wasm2js_scratch_store_i32(0, (wasm2js_scratch_store_f32($0), wasm2js_scratch_load_i32(0)) & -2147483648 | 1070141402), wasm2js_scratch_load_f32());
 }
 
 function atan2f($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = Math_fround(0);
  label$1 : {
   $3 = (wasm2js_scratch_store_f32($1), wasm2js_scratch_load_i32(0));
   $5 = $3 & 2147483647;
   if ($5 >>> 0 <= 2139095040) {
    $2 = (wasm2js_scratch_store_f32($0), wasm2js_scratch_load_i32(0));
    $4 = $2 & 2147483647;
    if ($4 >>> 0 < 2139095041) {
     break label$1
    }
   }
   return Math_fround($0 + $1);
  }
  if (($3 | 0) == 1065353216) {
   return atanf($0)
  }
  $3 = $3 >>> 30 & 2;
  $2 = $3 | $2 >>> 31;
  folding_inner0 : {
   label$4 : {
    label$5 : {
     label$6 : {
      if (!$4) {
       label$8 : {
        switch ($2 - 2 | 0) {
        case 0:
         break label$6;
        case 1:
         break label$8;
        default:
         break label$5;
        };
       }
       return Math_fround(-3.1415927410125732);
      }
      if (($5 | 0) != 2139095040) {
       if (!$5 | !($5 + 218103808 >>> 0 >= $4 >>> 0 ? ($4 | 0) != 2139095040 : 0)) {
        break folding_inner0
       }
       label$12 : {
        if ($4 + 218103808 >>> 0 < $5 >>> 0) {
         $6 = Math_fround(0.0);
         if ($3) {
          break label$12
         }
        }
        $6 = atanf(Math_fround(Math_abs(Math_fround($0 / $1))));
       }
       $1 = $6;
       if ($2 >>> 0 <= 2) {
        $0 = $1;
        label$15 : {
         switch ($2 - 1 | 0) {
         case 0:
          return Math_fround(-$1);
         case 1:
          break label$15;
         default:
          break label$5;
         };
        }
        return Math_fround(Math_fround(3.1415927410125732) - Math_fround($1 + Math_fround(8.742277657347586e-08)));
       }
       return Math_fround(Math_fround($1 + Math_fround(8.742277657347586e-08)) + Math_fround(-3.1415927410125732));
      }
      if (($4 | 0) == 2139095040) {
       break label$4
      }
      return HEAPF32[($2 << 2) + 33504 >> 2];
     }
     $0 = Math_fround(3.1415927410125732);
    }
    return $0;
   }
   return HEAPF32[($2 << 2) + 33488 >> 2];
  }
  return wasm2js_scratch_store_i32(0, (wasm2js_scratch_store_f32($0), wasm2js_scratch_load_i32(0)) & -2147483648 | 1070141403), wasm2js_scratch_load_f32();
 }
 
 function expf($0) {
  var $1 = 0, $2 = Math_fround(0), $3 = Math_fround(0), $4 = 0, $5 = 0, $6 = Math_fround(0);
  $4 = (wasm2js_scratch_store_f32($0), wasm2js_scratch_load_i32(0));
  $5 = $4 >>> 31 | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      $6 = $0;
      label$5 : {
       label$6 : {
        $1 = $4 & 2147483647;
        label$7 : {
         if ($1 >>> 0 >= 1118743632) {
          if ($1 >>> 0 > 2139095040) {
           return $0
          }
          if (!(($4 | 0) < 0 | $1 >>> 0 < 1118925336)) {
           return Math_fround($0 * Math_fround(1701411834604692317316873.0e14))
          }
          if (($4 | 0) > -1) {
           break label$7
          }
          if ($1 >>> 0 <= 1120924084) {
           break label$7
          }
          break label$2;
         }
         if ($1 >>> 0 < 1051816473) {
          break label$4
         }
         if ($1 >>> 0 < 1065686419) {
          break label$6
         }
        }
        $0 = Math_fround(Math_fround($0 * Math_fround(1.4426950216293335)) + HEAPF32[($5 << 2) + 33520 >> 2]);
        if (Math_fround(Math_abs($0)) < Math_fround(2147483648.0)) {
         $1 = ~~$0;
         break label$5;
        }
        $1 = -2147483648;
        break label$5;
       }
       $1 = ($5 ^ 1) - $5 | 0;
      }
      $2 = Math_fround($1 | 0);
      $0 = Math_fround($6 + Math_fround($2 * Math_fround(-.693145751953125)));
      $3 = Math_fround($2 * Math_fround(1.428606765330187e-06));
      $2 = Math_fround($0 - $3);
      break label$3;
     }
     if ($1 >>> 0 <= 956301312) {
      break label$1
     }
     $1 = 0;
     $2 = $0;
    }
    $6 = $0;
    $0 = Math_fround($2 * $2);
    $0 = Math_fround($2 - Math_fround($0 * Math_fround(Math_fround($0 * Math_fround(-2.7667332906275988e-03)) + Math_fround(.16666625440120697))));
    $3 = Math_fround(Math_fround($6 + Math_fround(Math_fround(Math_fround($2 * $0) / Math_fround(Math_fround(2.0) - $0)) - $3)) + Math_fround(1.0));
    if (!$1) {
     break label$2
    }
    $3 = scalbnf($3, $1);
   }
   return $3;
  }
  return Math_fround($0 + Math_fround(1.0));
 }
 
 function log($0) {
  var $1 = 0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $10 = 0.0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      wasm2js_scratch_store_f64(+$0);
      $1 = wasm2js_scratch_load_i32(1) | 0;
      $3 = wasm2js_scratch_load_i32(0) | 0;
      if (($1 | 0) > 0 ? 1 : ($1 | 0) >= 0 ? ($3 >>> 0 < 0 ? 0 : 1) : 0) {
       $5 = $1;
       if ($1 >>> 0 > 1048575) {
        break label$4
       }
      }
      if (!($1 & 2147483647 | $3)) {
       return -1.0 / ($0 * $0)
      }
      if (($1 | 0) > -1 ? 1 : ($1 | 0) >= -1 ? ($3 >>> 0 <= 4294967295 ? 0 : 1) : 0) {
       break label$3
      }
      return ($0 - $0) / 0.0;
     }
     if ($5 >>> 0 > 2146435071) {
      break label$1
     }
     $1 = 1072693248;
     $6 = -1023;
     if (($5 | 0) != 1072693248) {
      $1 = $5;
      break label$2;
     }
     if ($3) {
      break label$2
     }
     return 0.0;
    }
    wasm2js_scratch_store_f64(+($0 * 18014398509481984.0));
    $1 = wasm2js_scratch_load_i32(1) | 0;
    $3 = wasm2js_scratch_load_i32(0) | 0;
    $6 = -1077;
   }
   $1 = $1 + 614242 | 0;
   $4 = +(($1 >>> 20 | 0) + $6 | 0);
   $7 = $4 * .6931471803691238;
   $1 = ($1 & 1048575) + 1072079006 | 0;
   wasm2js_scratch_store_i32(0, $3 | 0);
   wasm2js_scratch_store_i32(1, $1 | 0);
   $0 = +wasm2js_scratch_load_f64() + -1.0;
   $2 = $0 / ($0 + 2.0);
   $8 = $0;
   $9 = $4 * 1.9082149292705877e-10;
   $10 = $2;
   $4 = $0 * ($0 * .5);
   $2 = $2 * $2;
   $0 = $2 * $2;
   $0 = $7 + ($8 + ($9 + $10 * ($4 + ($0 * ($0 * ($0 * .15313837699209373 + .22222198432149784) + .3999999999940942) + $2 * ($0 * ($0 * ($0 * .14798198605116586 + .1818357216161805) + .2857142874366239) + .6666666666666735))) - $4));
  }
  return $0;
 }
 
 function logf($0) {
  var $1 = 0, $2 = Math_fround(0), $3 = Math_fround(0), $4 = Math_fround(0), $5 = 0, $6 = Math_fround(0), $7 = Math_fround(0);
  $1 = (wasm2js_scratch_store_f32($0), wasm2js_scratch_load_i32(0));
  label$1 : {
   label$2 : {
    if (!(($1 | 0) > -1 ? $1 >>> 0 >= 8388608 : 0)) {
     if (!($1 & 2147483647)) {
      return Math_fround(Math_fround(-1.0) / Math_fround($0 * $0))
     }
     if (($1 | 0) <= -1) {
      return Math_fround(Math_fround($0 - $0) / Math_fround(0.0))
     }
     $1 = (wasm2js_scratch_store_f32(Math_fround($0 * Math_fround(33554432.0))), wasm2js_scratch_load_i32(0));
     $5 = -152;
     break label$2;
    }
    if ($1 >>> 0 > 2139095039) {
     break label$1
    }
    $5 = -127;
    $0 = Math_fround(0.0);
    if (($1 | 0) == 1065353216) {
     break label$1
    }
   }
   $1 = $1 + 4913933 | 0;
   $6 = Math_fround(($1 >>> 23 | 0) + $5 | 0);
   $0 = Math_fround((wasm2js_scratch_store_i32(0, ($1 & 8388607) + 1060439283 | 0), wasm2js_scratch_load_f32()) + Math_fround(-1.0));
   $2 = Math_fround($0 / Math_fround($0 + Math_fround(2.0)));
   $3 = Math_fround($2 * $2);
   $4 = Math_fround($3 * $3);
   $7 = $0;
   $0 = Math_fround($0 * Math_fround($0 * Math_fround(.5)));
   $0 = Math_fround(Math_fround($6 * Math_fround(.6931381225585938)) + Math_fround($7 + Math_fround(Math_fround(Math_fround($6 * Math_fround(9.05800061445916e-06)) + Math_fround($2 * Math_fround($0 + Math_fround(Math_fround($3 * Math_fround(Math_fround($4 * Math_fround(.2849878668785095)) + Math_fround(.6666666269302368))) + Math_fround($4 * Math_fround(Math_fround($4 * Math_fround(.24279078841209412)) + Math_fround(.40000972151756287))))))) - $0)));
  }
  return $0;
 }
 
 function pow($0, $1) {
  var $2 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0;
  $2 = 1.0;
  wasm2js_scratch_store_f64(+$1);
  $3 = wasm2js_scratch_load_i32(1) | 0;
  $5 = wasm2js_scratch_load_i32(0) | 0;
  $19 = $3;
  folding_inner1 : {
   folding_inner0 : {
    $7 = $3 & 2147483647;
    label$1 : {
     if (!($5 | $7)) {
      break label$1
     }
     wasm2js_scratch_store_f64(+$0);
     $6 = wasm2js_scratch_load_i32(1) | 0;
     $16 = wasm2js_scratch_load_i32(0) | 0;
     if (($6 | 0) == 1072693248 ? !$16 : 0) {
      break label$1
     }
     $10 = $6 & 2147483647;
     if (!(!$5 | ($7 | 0) != 2146435072 ? !($10 >>> 0 > 2146435072 | ($10 | 0) == 2146435072 & ($16 | 0) != 0 | $7 >>> 0 > 2146435072) : 0)) {
      return $0 + $1
     }
     label$4 : {
      label$5 : {
       label$6 : {
        $8 = 0;
        label$7 : {
         if (($6 | 0) > -1) {
          break label$7
         }
         $8 = 2;
         if ($7 >>> 0 > 1128267775) {
          break label$7
         }
         $8 = 0;
         if ($7 >>> 0 < 1072693248) {
          break label$7
         }
         $15 = $7 >>> 20 | 0;
         if ($7 >>> 0 < 1094713344) {
          break label$6
         }
         $4 = 1075 - $15 | 0;
         $15 = $5 >>> $4 | 0;
         $8 = 0;
         if (($5 | 0) != $15 << $4) {
          break label$7
         }
         $8 = 2 - ($15 & 1) | 0;
        }
        $4 = $8;
        $8 = $4;
        if (!$5) {
         break label$5
        }
        break label$4;
       }
       if ($5) {
        break label$4
       }
       $4 = 1043 - $15 | 0;
       $5 = $7 >>> $4 | 0;
       $8 = 0;
       if (($7 | 0) != $5 << $4) {
        break label$5
       }
       $8 = 2 - ($5 & 1) | 0;
      }
      $4 = $8;
      if (($7 | 0) == 2146435072) {
       if (!($10 + -1072693248 | $16)) {
        break label$1
       }
       if ($10 >>> 0 >= 1072693248) {
        return ($3 | 0) > -1 ? $1 : 0.0
       }
       return ($3 | 0) > -1 ? 0.0 : -$1;
      }
      if (($7 | 0) == 1072693248) {
       if (($3 | 0) > -1) {
        return $0
       }
       return 1.0 / $0;
      }
      if (($3 | 0) == 1073741824) {
       return $0 * $0
      }
      if (($3 | 0) != 1071644672 | ($6 | 0) < 0) {
       break label$4
      }
      return Math_sqrt($0);
     }
     $2 = Math_abs($0);
     if (!((($10 | 1073741824) != 2146435072 ? $10 : 0) | $16)) {
      $2 = ($3 | 0) < 0 ? 1.0 / $2 : $2;
      if (($6 | 0) > -1) {
       break label$1
      }
      if (!($10 + -1072693248 | $4)) {
       $0 = $2 - $2;
       return $0 / $0;
      }
      return ($4 | 0) == 1 ? -$2 : $2;
     }
     $11 = 1.0;
     if (!(($6 | 0) > -1 | $4 >>> 0 > 1)) {
      if ($4 - 1) {
       $0 = $0 - $0;
       return $0 / $0;
      }
      $11 = -1.0;
     }
     label$17 : {
      if ($7 >>> 0 >= 1105199105) {
       if ($7 >>> 0 >= 1139802113) {
        if ($10 >>> 0 <= 1072693247) {
         return ($3 | 0) < 0 ? infinity : 0.0
        }
        return ($3 | 0) > 0 ? infinity : 0.0;
       }
       if ($10 >>> 0 <= 1072693246) {
        return ($3 | 0) < 0 ? $11 * 1.e+300 * 1.e+300 : $11 * 1.0e-300 * 1.0e-300
       }
       if ($10 >>> 0 >= 1072693249) {
        return ($3 | 0) > 0 ? $11 * 1.e+300 * 1.e+300 : $11 * 1.0e-300 * 1.0e-300
       }
       $0 = $2 + -1.0;
       $2 = $0 * 1.4426950216293335;
       $12 = $0 * 1.9259629911266175e-08 + $0 * $0 * (.5 - $0 * ($0 * -.25 + .3333333333333333)) * -1.4426950408889634;
       wasm2js_scratch_store_f64(+($2 + $12));
       $3 = wasm2js_scratch_load_i32(1) | 0;
       wasm2js_scratch_load_i32(0) | 0;
       wasm2js_scratch_store_i32(0, 0);
       wasm2js_scratch_store_i32(1, $3 | 0);
       $0 = +wasm2js_scratch_load_f64();
       $9 = $0 - $2;
       break label$17;
      }
      $0 = $2 * 9007199254740992.0;
      $3 = $10 >>> 0 < 1048576;
      $2 = $3 ? $0 : $2;
      wasm2js_scratch_store_f64(+$0);
      $4 = wasm2js_scratch_load_i32(1) | 0;
      wasm2js_scratch_load_i32(0) | 0;
      $5 = $3 ? $4 : $10;
      $6 = $5 & 1048575;
      $4 = $6 | 1072693248;
      $5 = ($5 >> 20) + ($3 ? -1076 : -1023) | 0;
      $3 = 0;
      label$23 : {
       if ($6 >>> 0 < 235663) {
        break label$23
       }
       if ($6 >>> 0 < 767610) {
        $3 = 1;
        break label$23;
       }
       $4 = $4 + -1048576 | 0;
       $5 = $5 + 1 | 0;
      }
      $6 = $3 << 3;
      $14 = HEAPF64[$6 + 33568 >> 3];
      wasm2js_scratch_store_f64(+$2);
      wasm2js_scratch_load_i32(1) | 0;
      wasm2js_scratch_store_i32(0, wasm2js_scratch_load_i32(0) | 0);
      wasm2js_scratch_store_i32(1, $4 | 0);
      $12 = +wasm2js_scratch_load_f64();
      $9 = HEAPF64[$6 + 33536 >> 3];
      $13 = $12 - $9;
      $17 = 1.0 / ($9 + $12);
      $2 = $13 * $17;
      wasm2js_scratch_store_f64(+$2);
      $7 = wasm2js_scratch_load_i32(1) | 0;
      wasm2js_scratch_load_i32(0) | 0;
      wasm2js_scratch_store_i32(0, 0);
      wasm2js_scratch_store_i32(1, $7 | 0);
      $0 = +wasm2js_scratch_load_f64();
      $20 = $0;
      $18 = $0 * $0;
      $21 = $18 + 3.0;
      $3 = (($4 >> 1 | 536870912) + ($3 << 18) | 0) + 524288 | 0;
      wasm2js_scratch_store_i32(0, 0);
      wasm2js_scratch_store_i32(1, $3 | 0);
      $22 = $2 + $0;
      $23 = $13;
      $13 = +wasm2js_scratch_load_f64();
      $12 = $17 * ($23 - $0 * $13 - $0 * ($12 - ($13 - $9)));
      $0 = $2 * $2;
      $9 = $22 * $12 + $0 * $0 * ($0 * ($0 * ($0 * ($0 * ($0 * .20697501780033842 + .23066074577556175) + .272728123808534) + .33333332981837743) + .4285714285785502) + .5999999999999946);
      wasm2js_scratch_store_f64(+($21 + $9));
      $3 = wasm2js_scratch_load_i32(1) | 0;
      wasm2js_scratch_load_i32(0) | 0;
      wasm2js_scratch_store_i32(0, 0);
      wasm2js_scratch_store_i32(1, $3 | 0);
      $0 = +wasm2js_scratch_load_f64();
      $13 = $20 * $0;
      $2 = $12 * $0 + $2 * ($9 - ($0 + -3.0 - $18));
      wasm2js_scratch_store_f64(+($13 + $2));
      $3 = wasm2js_scratch_load_i32(1) | 0;
      wasm2js_scratch_load_i32(0) | 0;
      wasm2js_scratch_store_i32(0, 0);
      wasm2js_scratch_store_i32(1, $3 | 0);
      $0 = +wasm2js_scratch_load_f64();
      $9 = $0 * .9617967009544373;
      $12 = HEAPF64[$6 + 33552 >> 3] + (($2 - ($0 - $13)) * .9617966939259756 + $0 * -7.028461650952758e-09);
      $2 = +($5 | 0);
      wasm2js_scratch_store_f64(+($14 + ($9 + $12) + $2));
      $3 = wasm2js_scratch_load_i32(1) | 0;
      wasm2js_scratch_load_i32(0) | 0;
      wasm2js_scratch_store_i32(0, 0);
      wasm2js_scratch_store_i32(1, $3 | 0);
      $0 = +wasm2js_scratch_load_f64();
      $9 = $0 - $2 - $14 - $9;
     }
     wasm2js_scratch_store_i32(0, 0);
     wasm2js_scratch_store_i32(1, $19 | 0);
     $14 = +wasm2js_scratch_load_f64();
     $2 = $0 * $14;
     $0 = ($12 - $9) * $1 + ($1 - $14) * $0;
     $1 = $2 + $0;
     wasm2js_scratch_store_f64(+$1);
     $4 = wasm2js_scratch_load_i32(1) | 0;
     $3 = wasm2js_scratch_load_i32(0) | 0;
     label$25 : {
      $5 = $4;
      if (($4 | 0) >= 1083179008) {
       if ($3 | $5 + -1083179008) {
        break folding_inner0
       }
       if (!($0 + 8.008566259537294e-17 > $1 - $2)) {
        break label$25
       }
       break folding_inner0;
      }
      if (($5 & 2147482624) >>> 0 < 1083231232) {
       break label$25
      }
      if ($3 | $5 + 1064252416) {
       break folding_inner1
      }
      if (!($0 <= $1 - $2)) {
       break label$25
      }
      break folding_inner1;
     }
     $3 = 0;
     $9 = $11;
     $6 = $5 & 2147483647;
     if ($6 >>> 0 >= 1071644673) {
      $4 = $5 + (1048576 >>> ($6 >>> 20 | 0) + -1022 | 0) | 0;
      $6 = $4 >>> 20 & 2047;
      $3 = ($4 & 1048575 | 1048576) >>> 1043 - $6 | 0;
      $3 = ($5 | 0) < 0 ? 0 - $3 | 0 : $3;
      $4 = $4 & -1048576 >> $6 + -1023;
      wasm2js_scratch_store_i32(0, 0);
      wasm2js_scratch_store_i32(1, $4 | 0);
      $2 = $2 - +wasm2js_scratch_load_f64();
      wasm2js_scratch_store_f64(+($0 + $2));
      $4 = wasm2js_scratch_load_i32(1) | 0;
      wasm2js_scratch_load_i32(0) | 0;
     }
     wasm2js_scratch_store_i32(0, 0);
     wasm2js_scratch_store_i32(1, $4 | 0);
     $1 = +wasm2js_scratch_load_f64();
     $11 = $1 * .6931471824645996;
     $2 = ($0 - ($1 - $2)) * .6931471805599453 + $1 * -1.904654299957768e-09;
     $0 = $11 + $2;
     $1 = $0 * $0;
     $1 = $0 - $1 * ($1 * ($1 * ($1 * ($1 * 4.1381367970572385e-08 + -1.6533902205465252e-06) + 6.613756321437934e-05) + -2.7777777777015593e-03) + .16666666666666602);
     $13 = $0 * $1 / ($1 + -2.0);
     $1 = $2 - ($0 - $11);
     $0 = $0 - ($13 - ($1 + $0 * $1)) + 1.0;
     wasm2js_scratch_store_f64(+$0);
     $4 = wasm2js_scratch_load_i32(1) | 0;
     $5 = wasm2js_scratch_load_i32(0) | 0;
     $4 = ($3 << 20) + $4 | 0;
     label$29 : {
      if (($4 | 0) <= 1048575) {
       $0 = scalbn($0, $3);
       break label$29;
      }
      wasm2js_scratch_store_i32(0, $5 | 0);
      wasm2js_scratch_store_i32(1, $4 | 0);
      $0 = +wasm2js_scratch_load_f64();
     }
     $2 = $9 * $0;
    }
    return $2;
   }
   return $11 * 1.e+300 * 1.e+300;
  }
  return $11 * 1.0e-300 * 1.0e-300;
 }
 
 function wmemcpy($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  if ($2) {
   $3 = $0;
   while (1) {
    HEAP32[$3 >> 2] = HEAP32[$1 >> 2];
    $3 = $3 + 4 | 0;
    $1 = $1 + 4 | 0;
    $2 = $2 + -1 | 0;
    if ($2) {
     continue
    }
    break;
   };
  }
  return $0 | 0;
 }
 
 function std__uncaught_exception_28_29() {
  return (__cxa_uncaught_exceptions() | 0) > 0 | 0;
 }
 
 function std____2__basic_ios_char_2c_20std____2__char_traits_char__20____basic_ios_28_29($0) {
  $0 = $0 | 0;
  std____2__ios_base___ios_base_28_29($0);
  return $0 | 0;
 }
 
 function std____2__ios_base___ios_base_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  HEAP32[$0 >> 2] = 34016;
  HEAP32[16874] = 0;
  __invoke_void___22class_std____2__vector_13_22__i32(1543, $0 | 0, 0);
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($1 | 0) != 1) {
   std____2__locale___locale_28_29($0 + 28 | 0);
   dlfree(HEAP32[$0 + 32 >> 2]);
   dlfree(HEAP32[$0 + 36 >> 2]);
   dlfree(HEAP32[$0 + 48 >> 2]);
   dlfree(HEAP32[$0 + 60 >> 2]);
   return $0 | 0;
  }
  $0 = __cxa_find_matching_catch_3(0) | 0;
  getTempRet0() | 0;
  __clang_call_terminate($0);
  abort();
 }
 
 function std____2__ios_base____call_callbacks_28std____2__ios_base__event_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0;
  $2 = HEAP32[$0 + 40 >> 2];
  while (1) {
   if ($2) {
    $2 = $2 + -1 | 0;
    $3 = $2 << 2;
    FUNCTION_TABLE[HEAP32[HEAP32[$0 + 32 >> 2] + $3 >> 2]]($1, $0, HEAP32[$3 + HEAP32[$0 + 36 >> 2] >> 2]);
    continue;
   }
   break;
  };
 }
 
 function std____2__basic_ios_char_2c_20std____2__char_traits_char__20____basic_ios_28_29_1($0) {
  $0 = $0 | 0;
  dlfree(std____2__basic_ios_char_2c_20std____2__char_traits_char__20____basic_ios_28_29($0));
 }
 
 function std____2__basic_ios_char_2c_20std____2__char_traits_char__20___exceptions_28_29_20const($0) {
  $0 = $0 | 0;
  return HEAP32[$0 + 20 >> 2];
 }
 
 function std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20____basic_streambuf_28_29($0) {
  $0 = $0 | 0;
  HEAP32[$0 >> 2] = 33592;
  std____2__locale___locale_28_29($0 + 4 | 0);
  return $0 | 0;
 }
 
 function std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20____basic_streambuf_28_29_1($0) {
  $0 = $0 | 0;
  dlfree(std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20____basic_streambuf_28_29($0));
 }
 
 function std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___basic_streambuf_28_29($0) {
  HEAP32[$0 >> 2] = 33592;
  std____2__locale__locale_28_29($0 + 4 | 0);
  HEAP32[$0 + 24 >> 2] = 0;
  HEAP32[$0 + 28 >> 2] = 0;
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP32[$0 + 20 >> 2] = 0;
  HEAP32[$0 + 8 >> 2] = 0;
  HEAP32[$0 + 12 >> 2] = 0;
  return $0;
 }
 
 function std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___seekoff_28long_20long_2c_20std____2__ios_base__seekdir_2c_20unsigned_20int_29($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  std____2__fpos___mbstate_t___fpos_28long_20long_29($0, -1, -1);
 }
 
 function std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___seekpos_28std____2__fpos___mbstate_t__2c_20unsigned_20int_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  std____2__fpos___mbstate_t___fpos_28long_20long_29($0, -1, -1);
 }
 
 function std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___xsgetn_28char__2c_20long_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $4 = global$0 - 16 | 0;
  $5 = $4;
  if ($4 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $5;
  $5 = 0;
  while (1) {
   label$3 : {
    if (($5 | 0) >= ($2 | 0)) {
     break label$3
    }
    $3 = HEAP32[$0 + 12 >> 2];
    $6 = HEAP32[$0 + 16 >> 2];
    label$4 : {
     if ($3 >>> 0 < $6 >>> 0) {
      HEAP32[$4 + 12 >> 2] = 2147483647;
      HEAP32[$4 + 8 >> 2] = $6 - $3;
      HEAP32[$4 + 4 >> 2] = $2 - $5;
      $3 = HEAP32[long_20const__20std____2__min_long__28long_20const__2c_20long_20const__29($4 + 12 | 0, long_20const__20std____2__min_long__28long_20const__2c_20long_20const__29($4 + 8 | 0, $4 + 4 | 0)) >> 2];
      std____2__char_traits_char___copy_28char__2c_20char_20const__2c_20unsigned_20long_29($1, HEAP32[$0 + 12 >> 2], $3);
      std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___gbump_28int_29($0, $3);
      break label$4;
     }
     $3 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 40 >> 2]]($0) | 0;
     if (($3 | 0) == -1) {
      break label$3
     }
     HEAP8[$1 | 0] = std____2__char_traits_char___to_char_type_28int_29($3);
     $3 = 1;
    }
    $1 = $1 + $3 | 0;
    $5 = $3 + $5 | 0;
    continue;
   }
   break;
  };
  $0 = $4 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
  return $5 | 0;
 }
 
 function long_20const__20std____2__min_long__28long_20const__2c_20long_20const__29($0, $1) {
  return long_20const__20std____2__min_long_2c_20std____2____less_long_2c_20long__20__28long_20const__2c_20long_20const__2c_20std____2____less_long_2c_20long__29($0, $1);
 }
 
 function long_20const__20std____2__min_long_2c_20std____2____less_long_2c_20long__20__28long_20const__2c_20long_20const__2c_20std____2____less_long_2c_20long__29($0, $1) {
  var $2 = 0, $3 = 0;
  $2 = global$0 - 16 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  $3 = std____2____less_long_2c_20long___operator_28_29_28long_20const__2c_20long_20const__29_20const($1, $0);
  $2 = $2 + 16 | 0;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  return $3 ? $1 : $0;
 }
 
 function std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___underflow_28_29($0) {
  $0 = $0 | 0;
  return -1;
 }
 
 function std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___uflow_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  if ((FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 36 >> 2]]($0) | 0) == -1) {
   return -1
  }
  $1 = $0;
  $0 = HEAP32[$0 + 12 >> 2];
  HEAP32[$1 + 12 >> 2] = $0 + 1;
  return std____2__char_traits_char___to_int_type_28char_29(HEAP8[$0 | 0]) | 0;
 }
 
 function std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___pbackfail_28int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return -1;
 }
 
 function std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___xsputn_28char_20const__2c_20long_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $5 = global$0 - 16 | 0;
  $3 = $5;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  $3 = 0;
  while (1) {
   label$3 : {
    if (($3 | 0) >= ($2 | 0)) {
     break label$3
    }
    $4 = HEAP32[$0 + 24 >> 2];
    $6 = HEAP32[$0 + 28 >> 2];
    if ($4 >>> 0 >= $6 >>> 0) {
     if (((((wasm2js_i32$1 = $0, wasm2js_i32$2 = std____2__char_traits_char___to_int_type_28char_29(HEAP8[$1 | 0])), wasm2js_i32$0 = HEAP32[HEAP32[$0 >> 2] + 52 >> 2]), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0) | 0) == -1) {
      break label$3
     }
     $3 = $3 + 1 | 0;
     $1 = $1 + 1 | 0;
     continue;
    }
    HEAP32[$5 + 12 >> 2] = $6 - $4;
    HEAP32[$5 + 8 >> 2] = $2 - $3;
    $4 = HEAP32[long_20const__20std____2__min_long__28long_20const__2c_20long_20const__29($5 + 12 | 0, $5 + 8 | 0) >> 2];
    std____2__char_traits_char___copy_28char__2c_20char_20const__2c_20unsigned_20long_29(HEAP32[$0 + 24 >> 2], $1, $4);
    HEAP32[$0 + 24 >> 2] = $4 + HEAP32[$0 + 24 >> 2];
    $3 = $3 + $4 | 0;
    $1 = $1 + $4 | 0;
    continue;
   }
   break;
  };
  $0 = $5 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
  return $3 | 0;
 }
 
 function std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20____basic_streambuf_28_29($0) {
  $0 = $0 | 0;
  HEAP32[$0 >> 2] = 33656;
  std____2__locale___locale_28_29($0 + 4 | 0);
  return $0 | 0;
 }
 
 function std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20____basic_streambuf_28_29_1($0) {
  $0 = $0 | 0;
  dlfree(std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20____basic_streambuf_28_29($0));
 }
 
 function std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___basic_streambuf_28_29($0) {
  HEAP32[$0 >> 2] = 33656;
  std____2__locale__locale_28_29($0 + 4 | 0);
  HEAP32[$0 + 24 >> 2] = 0;
  HEAP32[$0 + 28 >> 2] = 0;
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP32[$0 + 20 >> 2] = 0;
  HEAP32[$0 + 8 >> 2] = 0;
  HEAP32[$0 + 12 >> 2] = 0;
  return $0;
 }
 
 function std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___xsgetn_28wchar_t__2c_20long_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $4 = global$0 - 16 | 0;
  $5 = $4;
  if ($4 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $5;
  $5 = 0;
  while (1) {
   label$3 : {
    if (($5 | 0) >= ($2 | 0)) {
     break label$3
    }
    $3 = HEAP32[$0 + 12 >> 2];
    $6 = HEAP32[$0 + 16 >> 2];
    label$4 : {
     if ($3 >>> 0 < $6 >>> 0) {
      HEAP32[$4 + 12 >> 2] = 2147483647;
      HEAP32[$4 + 8 >> 2] = $6 - $3 >> 2;
      HEAP32[$4 + 4 >> 2] = $2 - $5;
      $3 = HEAP32[long_20const__20std____2__min_long__28long_20const__2c_20long_20const__29($4 + 12 | 0, long_20const__20std____2__min_long__28long_20const__2c_20long_20const__29($4 + 8 | 0, $4 + 4 | 0)) >> 2];
      std____2__char_traits_wchar_t___copy_28wchar_t__2c_20wchar_t_20const__2c_20unsigned_20long_29($1, HEAP32[$0 + 12 >> 2], $3);
      HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 12 >> 2] + ($3 << 2);
      $1 = ($3 << 2) + $1 | 0;
      break label$4;
     }
     $3 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 40 >> 2]]($0) | 0;
     if (($3 | 0) == -1) {
      break label$3
     }
     HEAP32[$1 >> 2] = $3;
     $3 = 1;
     $1 = $1 + 4 | 0;
    }
    $5 = $3 + $5 | 0;
    continue;
   }
   break;
  };
  $0 = $4 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
  return $5 | 0;
 }
 
 function std____2__char_traits_wchar_t___copy_28wchar_t__2c_20wchar_t_20const__2c_20unsigned_20long_29($0, $1, $2) {
  label$1 : {
   if ($2) {
    HEAP32[16874] = 0;
    wmemcpy($0, $1, $2);
    $0 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($0 | 0) == 1) {
     break label$1
    }
   }
   return;
  }
  $0 = __cxa_find_matching_catch_3(0) | 0;
  getTempRet0() | 0;
  __clang_call_terminate($0);
  abort();
 }
 
 function std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___uflow_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  if ((FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 36 >> 2]]($0) | 0) == -1) {
   return -1
  }
  $1 = $0;
  $0 = HEAP32[$0 + 12 >> 2];
  HEAP32[$1 + 12 >> 2] = $0 + 4;
  return HEAP32[$0 >> 2];
 }
 
 function std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___xsputn_28wchar_t_20const__2c_20long_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $4 = global$0 - 16 | 0;
  $3 = $4;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  $3 = 0;
  while (1) {
   label$3 : {
    if (($3 | 0) >= ($2 | 0)) {
     break label$3
    }
    $5 = HEAP32[$0 + 24 >> 2];
    $6 = HEAP32[$0 + 28 >> 2];
    if ($5 >>> 0 >= $6 >>> 0) {
     if ((FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 52 >> 2]]($0, HEAP32[$1 >> 2]) | 0) == -1) {
      break label$3
     }
     $3 = $3 + 1 | 0;
     $1 = $1 + 4 | 0;
     continue;
    }
    HEAP32[$4 + 12 >> 2] = $6 - $5 >> 2;
    HEAP32[$4 + 8 >> 2] = $2 - $3;
    $5 = HEAP32[long_20const__20std____2__min_long__28long_20const__2c_20long_20const__29($4 + 12 | 0, $4 + 8 | 0) >> 2];
    std____2__char_traits_wchar_t___copy_28wchar_t__2c_20wchar_t_20const__2c_20unsigned_20long_29(HEAP32[$0 + 24 >> 2], $1, $5);
    $6 = $5 << 2;
    HEAP32[$0 + 24 >> 2] = $6 + HEAP32[$0 + 24 >> 2];
    $3 = $3 + $5 | 0;
    $1 = $1 + $6 | 0;
    continue;
   }
   break;
  };
  $0 = $4 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
  return $3 | 0;
 }
 
 function std____2__basic_istream_char_2c_20std____2__char_traits_char__20____basic_istream_28_29_1($0) {
  $0 = $0 | 0;
  std____2__basic_ios_char_2c_20std____2__char_traits_char__20____basic_ios_28_29($0 + 8 | 0);
  return $0 | 0;
 }
 
 function virtual_20thunk_20to_20std____2__basic_istream_char_2c_20std____2__char_traits_char__20____basic_istream_28_29($0) {
  $0 = $0 | 0;
  return std____2__basic_istream_char_2c_20std____2__char_traits_char__20____basic_istream_28_29_1(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0) | 0;
 }
 
 function std____2__basic_istream_char_2c_20std____2__char_traits_char__20____basic_istream_28_29_2($0) {
  $0 = $0 | 0;
  dlfree(std____2__basic_istream_char_2c_20std____2__char_traits_char__20____basic_istream_28_29_1($0));
 }
 
 function virtual_20thunk_20to_20std____2__basic_istream_char_2c_20std____2__char_traits_char__20____basic_istream_28_29_1($0) {
  $0 = $0 | 0;
  std____2__basic_istream_char_2c_20std____2__char_traits_char__20____basic_istream_28_29_2(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0);
 }
 
 function std____2__basic_istream_char_2c_20std____2__char_traits_char__20___sentry__sentry_28std____2__basic_istream_char_2c_20std____2__char_traits_char__20___2c_20bool_29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0;
  $3 = global$0 - 32 | 0;
  $2 = $3;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  HEAP8[$0 | 0] = 0;
  $4 = std____2__ios_base__good_28_29_20const(HEAP32[HEAP32[$1 >> 2] + -12 >> 2] + $1 | 0);
  $2 = HEAP32[HEAP32[$1 >> 2] + -12 >> 2] + $1 | 0;
  label$3 : {
   if ($4) {
    if (HEAP32[$2 + 72 >> 2]) {
     std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___flush_28_29(HEAP32[(HEAP32[HEAP32[$1 >> 2] + -12 >> 2] + $1 | 0) + 72 >> 2])
    }
    HEAP8[$0 | 0] = std____2__ios_base__good_28_29_20const(HEAP32[HEAP32[$1 >> 2] + -12 >> 2] + $1 | 0);
    break label$3;
   }
   std____2__basic_ios_char_2c_20std____2__char_traits_char__20___setstate_28unsigned_20int_29($2, 4);
  }
  $1 = $3 + 32 | 0;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  return $0;
 }
 
 function std____2__basic_ios_char_2c_20std____2__char_traits_char__20___good_28_29_20const($0) {
  $0 = $0 | 0;
  return std____2__ios_base__good_28_29_20const($0) | 0;
 }
 
 function std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___flush_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
  $3 = global$0 - 16 | 0;
  $1 = $3;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  $1 = HEAP32[HEAP32[$0 >> 2] + -12 >> 2];
  HEAP32[16874] = 0;
  $1 = HEAP32[($0 + $1 | 0) + 24 >> 2];
  $2 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      label$6 : {
       if (($2 | 0) != 1) {
        if (!$1) {
         break label$3
        }
        HEAP32[16874] = 0;
        $1 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(27, $3 + 8 | 0, $0 | 0) | 0;
        $2 = HEAP32[16874];
        HEAP32[16874] = 0;
        if (($2 | 0) == 1) {
         break label$5
        }
        if (!HEAPU8[$1 | 0]) {
         break label$6
        }
        $2 = HEAP32[HEAP32[$0 >> 2] + -12 >> 2];
        HEAP32[16874] = 0;
        $2 = HEAP32[($0 + $2 | 0) + 24 >> 2];
        $4 = HEAP32[16874];
        HEAP32[16874] = 0;
        label$8 : {
         if (($4 | 0) == 1) {
          break label$8
         }
         HEAP32[16874] = 0;
         $2 = __invoke_i1___22class_std____2__basic_ifstream_22_(1545, $2 | 0) | 0;
         $4 = HEAP32[16874];
         HEAP32[16874] = 0;
         if (($4 | 0) == 1) {
          break label$8
         }
         if (($2 | 0) != -1) {
          break label$6
         }
         $2 = HEAP32[HEAP32[$0 >> 2] + -12 >> 2];
         HEAP32[16874] = 0;
         __invoke_void___22class_std____2__vector_13_22__i32(17, $0 + $2 | 0, 1);
         $2 = HEAP32[16874];
         HEAP32[16874] = 0;
         if (($2 | 0) != 1) {
          break label$6
         }
        }
        $2 = __cxa_find_matching_catch_3(0) | 0;
        getTempRet0() | 0;
        std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___sentry___sentry_28_29($1);
        break label$4;
       }
       $2 = __cxa_find_matching_catch_3(0) | 0;
       getTempRet0() | 0;
       break label$4;
      }
      std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___sentry___sentry_28_29($1);
      break label$3;
     }
     $2 = __cxa_find_matching_catch_3(0) | 0;
     getTempRet0() | 0;
    }
    __cxa_begin_catch($2 | 0) | 0;
    $1 = HEAP32[HEAP32[$0 >> 2] + -12 >> 2];
    HEAP32[16874] = 0;
    __invoke_void___22class_std____2__basic_ifstream_22_(30, $0 + $1 | 0);
    $1 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($1 | 0) == 1) {
     break label$2
    }
    __cxa_end_catch();
   }
   $1 = $3 + 16 | 0;
   if ($1 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $1;
   return $0 | 0;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  HEAP32[16874] = 0;
  __invoke_void(23);
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($1 | 0) != 1) {
   __resumeException($0 | 0);
   abort();
  }
  $0 = __cxa_find_matching_catch_3(0) | 0;
  getTempRet0() | 0;
  __clang_call_terminate($0);
  abort();
 }
 
 function std____2__ios_base__getloc_28_29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  std____2__locale__locale_28std____2__locale_20const__29($0, $1 + 28 | 0);
 }
 
 function std____2__ctype_char___is_28unsigned_20short_2c_20char_29_20const($0, $1, $2) {
  return ($2 | 0) >= 0 ? (HEAPU16[HEAP32[$0 + 8 >> 2] + (($2 & 255) << 1) >> 1] & $1) != 0 : 0;
 }
 
 function bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___equal_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29_20const($0, $1) | 0;
 }
 
 function std____2__ios_base__good_28_29_20const($0) {
  return !HEAP32[$0 + 16 >> 2];
 }
 
 function std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___sentry__sentry_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  HEAP32[$0 + 4 >> 2] = $1;
  HEAP8[$0 | 0] = 0;
  if (std____2__ios_base__good_28_29_20const(HEAP32[HEAP32[$1 >> 2] + -12 >> 2] + $1 | 0)) {
   if (HEAP32[(HEAP32[HEAP32[$1 >> 2] + -12 >> 2] + $1 | 0) + 72 >> 2]) {
    std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___flush_28_29(HEAP32[(HEAP32[HEAP32[$1 >> 2] + -12 >> 2] + $1 | 0) + 72 >> 2])
   }
   HEAP8[$0 | 0] = 1;
  }
  return $0 | 0;
 }
 
 function std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___sentry___sentry_28_29($0) {
  var $1 = 0, $2 = 0;
  $1 = HEAP32[$0 + 4 >> 2];
  $2 = HEAP32[HEAP32[$1 >> 2] + -12 >> 2];
  HEAP32[16874] = 0;
  $1 = HEAP32[($1 + $2 | 0) + 24 >> 2];
  $2 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$1 : {
   if (($2 | 0) == 1) {
    break label$1
   }
   label$2 : {
    if (!$1) {
     break label$2
    }
    $1 = HEAP32[$0 + 4 >> 2];
    $2 = HEAP32[HEAP32[$1 >> 2] + -12 >> 2];
    HEAP32[16874] = 0;
    $1 = std____2__ios_base__good_28_29_20const($1 + $2 | 0);
    $2 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($2 | 0) == 1) {
     break label$1
    }
    if (!$1) {
     break label$2
    }
    $1 = HEAP32[$0 + 4 >> 2];
    if (!(HEAP32[(HEAP32[HEAP32[$1 >> 2] + -12 >> 2] + $1 | 0) + 4 >> 2] & 8192)) {
     break label$2
    }
    if (std__uncaught_exception_28_29()) {
     break label$2
    }
    $1 = HEAP32[$0 + 4 >> 2];
    $2 = HEAP32[HEAP32[$1 >> 2] + -12 >> 2];
    HEAP32[16874] = 0;
    $1 = HEAP32[($1 + $2 | 0) + 24 >> 2];
    $2 = HEAP32[16874];
    HEAP32[16874] = 0;
    label$3 : {
     if (($2 | 0) == 1) {
      break label$3
     }
     HEAP32[16874] = 0;
     $1 = __invoke_i1___22class_std____2__basic_ifstream_22_(1545, $1 | 0) | 0;
     $2 = HEAP32[16874];
     HEAP32[16874] = 0;
     if (($2 | 0) == 1) {
      break label$3
     }
     if (($1 | 0) != -1) {
      break label$2
     }
     $0 = HEAP32[$0 + 4 >> 2];
     $1 = HEAP32[HEAP32[$0 >> 2] + -12 >> 2];
     HEAP32[16874] = 0;
     __invoke_void___22class_std____2__vector_13_22__i32(17, $0 + $1 | 0, 1);
     $0 = HEAP32[16874];
     HEAP32[16874] = 0;
     if (($0 | 0) != 1) {
      break label$2
     }
    }
    $0 = __cxa_find_matching_catch_3(0) | 0;
    getTempRet0() | 0;
    __cxa_begin_catch($0 | 0) | 0;
    HEAP32[16874] = 0;
    __invoke_void(23);
    $0 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($0 | 0) == 1) {
     break label$1
    }
   }
   return;
  }
  $0 = __cxa_find_matching_catch_3(0) | 0;
  getTempRet0() | 0;
  __clang_call_terminate($0);
  abort();
 }
 
 function std____2__ios_base____set_badbit_and_consider_rethrow_28_29($0) {
  $0 = $0 | 0;
  HEAP32[$0 + 16 >> 2] = HEAP32[$0 + 16 >> 2] | 1;
  if (HEAP8[$0 + 20 | 0] & 1) {
   __cxa_rethrow();
   abort();
  }
 }
 
 function std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___sputc_28char_29($0, $1) {
  var $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $2 = HEAP32[$0 + 24 >> 2];
  if (($2 | 0) == HEAP32[$0 + 28 >> 2]) {
   return ((wasm2js_i32$1 = $0, wasm2js_i32$2 = std____2__char_traits_char___to_int_type_28char_29($1)), wasm2js_i32$0 = HEAP32[HEAP32[$0 >> 2] + 52 >> 2]), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0
  }
  HEAP32[$0 + 24 >> 2] = $2 + 1;
  HEAP8[$2 | 0] = $1;
  return std____2__char_traits_char___to_int_type_28char_29($1);
 }
 
 function std____2__ios_base____setstate_nothrow_28unsigned_20int_29($0, $1) {
  HEAP32[$0 + 16 >> 2] = !HEAP32[$0 + 24 >> 2] | (HEAP32[$0 + 16 >> 2] | $1);
 }
 
 function std____2__basic_istream_char_2c_20std____2__char_traits_char__20___read_28char__2c_20long_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0;
  $4 = global$0 - 16 | 0;
  $3 = $4;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  HEAP32[$0 + 4 >> 2] = 0;
  label$2 : {
   label$3 : {
    $5 = !HEAPU8[std____2__basic_istream_char_2c_20std____2__char_traits_char__20___sentry__sentry_28std____2__basic_istream_char_2c_20std____2__char_traits_char__20___2c_20bool_29($4 + 8 | 0, $0) | 0];
    $3 = 4;
    label$4 : {
     if ($5) {
      break label$4
     }
     $3 = HEAP32[HEAP32[$0 >> 2] + -12 >> 2];
     HEAP32[16874] = 0;
     $3 = HEAP32[($0 + $3 | 0) + 24 >> 2];
     $5 = HEAP32[16874];
     HEAP32[16874] = 0;
     label$5 : {
      if (($5 | 0) == 1) {
       break label$5
      }
      HEAP32[16874] = 0;
      $1 = __invoke___22class_std____2__basic_istream_22____22class_std____2__basic_istream_22__i8__i32(1547, $3 | 0, $1 | 0, $2 | 0) | 0;
      $3 = HEAP32[16874];
      HEAP32[16874] = 0;
      if (($3 | 0) == 1) {
       break label$5
      }
      HEAP32[$0 + 4 >> 2] = $1;
      $3 = ($1 | 0) == ($2 | 0) ? 0 : 6;
      break label$4;
     }
     $1 = __cxa_find_matching_catch_3(0) | 0;
     getTempRet0() | 0;
     __cxa_begin_catch($1 | 0) | 0;
     std____2__ios_base____setstate_nothrow_28unsigned_20int_29(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0, 1);
     $1 = HEAP32[HEAP32[$0 >> 2] + -12 >> 2];
     HEAP32[16874] = 0;
     $1 = HEAP32[($0 + $1 | 0) + 20 >> 2];
     $2 = HEAP32[16874];
     HEAP32[16874] = 0;
     label$6 : {
      if (($2 | 0) != 1) {
       if (!($1 & 1)) {
        break label$6
       }
       HEAP32[16874] = 0;
       __invoke_void(934);
       $0 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($0 | 0) != 1) {
        break label$2
       }
      }
      $0 = __cxa_find_matching_catch_2() | 0;
      getTempRet0() | 0;
      HEAP32[16874] = 0;
      __invoke_void(23);
      $1 = HEAP32[16874];
      HEAP32[16874] = 0;
      if (($1 | 0) == 1) {
       break label$3
      }
      __resumeException($0 | 0);
      abort();
     }
     __cxa_end_catch();
     $3 = 1;
    }
    $1 = $3;
    std____2__basic_ios_char_2c_20std____2__char_traits_char__20___setstate_28unsigned_20int_29(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0, $1);
    $1 = $4 + 16 | 0;
    if ($1 >>> 0 < global$2 >>> 0) {
     __handle_stack_overflow()
    }
    global$0 = $1;
    return $0 | 0;
   }
   $0 = __cxa_find_matching_catch_3(0) | 0;
   getTempRet0() | 0;
   __clang_call_terminate($0);
  }
  abort();
 }
 
 function std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___sgetn_28char__2c_20long_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 32 >> 2]]($0, $1, $2) | 0;
 }
 
 function std____2__ios_base__clear_28unsigned_20int_29($0, $1) {
  $1 = !HEAP32[$0 + 24 >> 2] | $1;
  HEAP32[$0 + 16 >> 2] = $1;
  if ($1 & HEAP32[$0 + 20 >> 2]) {
   std____2____throw_failure_28char_20const__29();
   abort();
  }
 }
 
 function std____2__basic_istream_char_2c_20std____2__char_traits_char__20___seekg_28long_20long_2c_20std____2__ios_base__seekdir_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0;
  $4 = global$0 - 48 | 0;
  $5 = $4;
  if ($4 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $5;
  $5 = HEAP32[(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0) + 16 >> 2] & -3;
  std____2__ios_base__clear_28unsigned_20int_29(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0, $5);
  label$2 : {
   label$3 : {
    if (HEAPU8[std____2__basic_istream_char_2c_20std____2__char_traits_char__20___sentry__sentry_28std____2__basic_istream_char_2c_20std____2__char_traits_char__20___2c_20bool_29($4 + 40 | 0, $0) | 0]) {
     $6 = HEAP32[HEAP32[$0 >> 2] + -12 >> 2];
     HEAP32[16874] = 0;
     $6 = HEAP32[($0 + $6 | 0) + 24 >> 2];
     $7 = HEAP32[16874];
     HEAP32[16874] = 0;
     label$5 : {
      label$6 : {
       if (($7 | 0) == 1) {
        break label$6
       }
       HEAP32[16874] = 0;
       legalimport$__invoke_void___22class_std____2__fpos_22____22class_std____2__basic_streambuf_22__i64_i32_i32(1549, $4 + 24 | 0, $6 | 0, $1 | 0, $2 | 0, $3 | 0, 8);
       $1 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($1 | 0) == 1) {
        break label$6
       }
       $1 = std____2__fpos___mbstate_t___fpos_28long_20long_29($4 + 8 | 0, -1, -1);
       HEAP32[16874] = 0;
       $1 = bool_20std____2__operator_____mbstate_t__28std____2__fpos___mbstate_t__20const__2c_20std____2__fpos___mbstate_t__20const__29($4 + 24 | 0, $1);
       $2 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($2 | 0) == 1) {
        break label$6
       }
       $1 = $1 ? $5 | 4 : $5;
       break label$5;
      }
      $1 = __cxa_find_matching_catch_3(0) | 0;
      getTempRet0() | 0;
      __cxa_begin_catch($1 | 0) | 0;
      $1 = $5 | 1;
      std____2__ios_base____setstate_nothrow_28unsigned_20int_29(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0, $1);
      $2 = HEAP32[HEAP32[$0 >> 2] + -12 >> 2];
      HEAP32[16874] = 0;
      $2 = HEAP32[($0 + $2 | 0) + 20 >> 2];
      $3 = HEAP32[16874];
      HEAP32[16874] = 0;
      label$9 : {
       if (($3 | 0) != 1) {
        if (!($2 & 1)) {
         break label$9
        }
        HEAP32[16874] = 0;
        __invoke_void(934);
        $0 = HEAP32[16874];
        HEAP32[16874] = 0;
        if (($0 | 0) != 1) {
         break label$2
        }
       }
       $0 = __cxa_find_matching_catch_2() | 0;
       getTempRet0() | 0;
       HEAP32[16874] = 0;
       __invoke_void(23);
       $1 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($1 | 0) == 1) {
        break label$3
       }
       __resumeException($0 | 0);
       abort();
      }
      __cxa_end_catch();
     }
     std____2__basic_ios_char_2c_20std____2__char_traits_char__20___setstate_28unsigned_20int_29(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0, $1);
    }
    $1 = $4 + 48 | 0;
    if ($1 >>> 0 < global$2 >>> 0) {
     __handle_stack_overflow()
    }
    global$0 = $1;
    return $0 | 0;
   }
   $0 = __cxa_find_matching_catch_3(0) | 0;
   getTempRet0() | 0;
   __clang_call_terminate($0);
  }
  abort();
 }
 
 function std____2__basic_ostream_wchar_t_2c_20std____2__char_traits_wchar_t__20___flush_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
  $3 = global$0 - 16 | 0;
  $1 = $3;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  label$2 : {
   label$3 : {
    if (!HEAP32[(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0) + 24 >> 2]) {
     break label$3
    }
    HEAP32[16874] = 0;
    $1 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1551, $3 + 8 | 0, $0 | 0) | 0;
    $2 = HEAP32[16874];
    HEAP32[16874] = 0;
    label$4 : {
     if (($2 | 0) != 1) {
      label$6 : {
       if (!HEAPU8[$1 | 0]) {
        break label$6
       }
       $2 = HEAP32[(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0) + 24 >> 2];
       HEAP32[16874] = 0;
       $2 = __invoke_i1___22class_std____2__basic_ifstream_22_(1552, $2 | 0) | 0;
       $4 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($4 | 0) != 1) {
        if (($2 | 0) != -1) {
         break label$6
        }
        $2 = HEAP32[HEAP32[$0 >> 2] + -12 >> 2];
        HEAP32[16874] = 0;
        __invoke_void___22class_std____2__vector_13_22__i32(1553, $0 + $2 | 0, 1);
        $2 = HEAP32[16874];
        HEAP32[16874] = 0;
        if (($2 | 0) != 1) {
         break label$6
        }
       }
       $2 = __cxa_find_matching_catch_3(0) | 0;
       getTempRet0() | 0;
       std____2__basic_ostream_wchar_t_2c_20std____2__char_traits_wchar_t__20___sentry___sentry_28_29($1);
       break label$4;
      }
      std____2__basic_ostream_wchar_t_2c_20std____2__char_traits_wchar_t__20___sentry___sentry_28_29($1);
      break label$3;
     }
     $2 = __cxa_find_matching_catch_3(0) | 0;
     getTempRet0() | 0;
    }
    __cxa_begin_catch($2 | 0) | 0;
    $1 = HEAP32[HEAP32[$0 >> 2] + -12 >> 2];
    HEAP32[16874] = 0;
    __invoke_void___22class_std____2__basic_ifstream_22_(30, $0 + $1 | 0);
    $1 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($1 | 0) == 1) {
     break label$2
    }
    __cxa_end_catch();
   }
   $1 = $3 + 16 | 0;
   if ($1 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $1;
   return $0 | 0;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  HEAP32[16874] = 0;
  __invoke_void(23);
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($1 | 0) != 1) {
   __resumeException($0 | 0);
   abort();
  }
  $0 = __cxa_find_matching_catch_3(0) | 0;
  getTempRet0() | 0;
  __clang_call_terminate($0);
  abort();
 }
 
 function std____2__ctype_wchar_t__20const__20std____2__use_facet_std____2__ctype_wchar_t__20__28std____2__locale_20const__29($0) {
  $0 = $0 | 0;
  return std____2__locale__use_facet_28std____2__locale__id__29_20const($0, 69808) | 0;
 }
 
 function bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___equal_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29_20const($0, $1) ^ 1;
 }
 
 function std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator__28_29_20const($0) {
  $0 = $0 | 0;
  return std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___sgetc_28_29(HEAP32[$0 >> 2]) | 0;
 }
 
 function std____2__ctype_wchar_t___is_28unsigned_20short_2c_20wchar_t_29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 12 >> 2]]($0, $1, $2) | 0;
 }
 
 function std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator___28_29($0) {
  $0 = $0 | 0;
  std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___sbumpc_28_29(HEAP32[$0 >> 2]);
  return $0 | 0;
 }
 
 function bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___equal_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29_20const($0, $1) | 0;
 }
 
 function std____2__basic_ostream_wchar_t_2c_20std____2__char_traits_wchar_t__20___sentry__sentry_28std____2__basic_ostream_wchar_t_2c_20std____2__char_traits_wchar_t__20___29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  HEAP32[$0 + 4 >> 2] = $1;
  HEAP8[$0 | 0] = 0;
  if (std____2__ios_base__good_28_29_20const(HEAP32[HEAP32[$1 >> 2] + -12 >> 2] + $1 | 0)) {
   if (HEAP32[(HEAP32[HEAP32[$1 >> 2] + -12 >> 2] + $1 | 0) + 72 >> 2]) {
    std____2__basic_ostream_wchar_t_2c_20std____2__char_traits_wchar_t__20___flush_28_29(HEAP32[(HEAP32[HEAP32[$1 >> 2] + -12 >> 2] + $1 | 0) + 72 >> 2])
   }
   HEAP8[$0 | 0] = 1;
  }
  return $0 | 0;
 }
 
 function std____2__basic_ostream_wchar_t_2c_20std____2__char_traits_wchar_t__20___sentry___sentry_28_29($0) {
  var $1 = 0, $2 = 0;
  label$1 : {
   $1 = HEAP32[$0 + 4 >> 2];
   label$2 : {
    if (!HEAP32[(HEAP32[HEAP32[$1 >> 2] + -12 >> 2] + $1 | 0) + 24 >> 2]) {
     break label$2
    }
    $1 = HEAP32[$0 + 4 >> 2];
    if (!std____2__ios_base__good_28_29_20const(HEAP32[HEAP32[$1 >> 2] + -12 >> 2] + $1 | 0)) {
     break label$2
    }
    $1 = HEAP32[$0 + 4 >> 2];
    if (!(HEAP32[(HEAP32[HEAP32[$1 >> 2] + -12 >> 2] + $1 | 0) + 4 >> 2] & 8192)) {
     break label$2
    }
    if (std__uncaught_exception_28_29()) {
     break label$2
    }
    $1 = HEAP32[$0 + 4 >> 2];
    $1 = HEAP32[(HEAP32[HEAP32[$1 >> 2] + -12 >> 2] + $1 | 0) + 24 >> 2];
    HEAP32[16874] = 0;
    $1 = __invoke_i1___22class_std____2__basic_ifstream_22_(1552, $1 | 0) | 0;
    $2 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($2 | 0) != 1) {
     if (($1 | 0) != -1) {
      break label$2
     }
     $0 = HEAP32[$0 + 4 >> 2];
     $1 = HEAP32[HEAP32[$0 >> 2] + -12 >> 2];
     HEAP32[16874] = 0;
     __invoke_void___22class_std____2__vector_13_22__i32(1553, $0 + $1 | 0, 1);
     $0 = HEAP32[16874];
     HEAP32[16874] = 0;
     if (($0 | 0) != 1) {
      break label$2
     }
    }
    $0 = __cxa_find_matching_catch_3(0) | 0;
    getTempRet0() | 0;
    __cxa_begin_catch($0 | 0) | 0;
    HEAP32[16874] = 0;
    __invoke_void(23);
    $0 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($0 | 0) == 1) {
     break label$1
    }
   }
   return;
  }
  $0 = __cxa_find_matching_catch_3(0) | 0;
  getTempRet0() | 0;
  __clang_call_terminate($0);
  abort();
 }
 
 function std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___equal_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29_20const($0, $1) {
  return std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20_____test_for_eof_28_29_20const($0) ^ std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20_____test_for_eof_28_29_20const($1) ^ 1;
 }
 
 function std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___sgetc_28_29($0) {
  var $1 = 0;
  $1 = HEAP32[$0 + 12 >> 2];
  if (($1 | 0) == HEAP32[$0 + 16 >> 2]) {
   return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 36 >> 2]]($0) | 0
  }
  return HEAP32[$1 >> 2];
 }
 
 function std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___sbumpc_28_29($0) {
  var $1 = 0;
  $1 = HEAP32[$0 + 12 >> 2];
  if (($1 | 0) == HEAP32[$0 + 16 >> 2]) {
   return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 40 >> 2]]($0) | 0
  }
  HEAP32[$0 + 12 >> 2] = $1 + 4;
  return HEAP32[$1 >> 2];
 }
 
 function std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___sputc_28wchar_t_29($0, $1) {
  var $2 = 0;
  $2 = HEAP32[$0 + 24 >> 2];
  if (($2 | 0) == HEAP32[$0 + 28 >> 2]) {
   return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 52 >> 2]]($0, $1) | 0
  }
  HEAP32[$0 + 24 >> 2] = $2 + 4;
  HEAP32[$2 >> 2] = $1;
  return $1;
 }
 
 function std____2__basic_ostream_char_2c_20std____2__char_traits_char__20____basic_ostream_28_29_1($0) {
  $0 = $0 | 0;
  std____2__basic_ios_char_2c_20std____2__char_traits_char__20____basic_ios_28_29($0 + 4 | 0);
  return $0 | 0;
 }
 
 function virtual_20thunk_20to_20std____2__basic_ostream_char_2c_20std____2__char_traits_char__20____basic_ostream_28_29($0) {
  $0 = $0 | 0;
  return std____2__basic_ostream_char_2c_20std____2__char_traits_char__20____basic_ostream_28_29_1(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0) | 0;
 }
 
 function std____2__basic_ostream_char_2c_20std____2__char_traits_char__20____basic_ostream_28_29_2($0) {
  $0 = $0 | 0;
  dlfree(std____2__basic_ostream_char_2c_20std____2__char_traits_char__20____basic_ostream_28_29_1($0));
 }
 
 function virtual_20thunk_20to_20std____2__basic_ostream_char_2c_20std____2__char_traits_char__20____basic_ostream_28_29_1($0) {
  $0 = $0 | 0;
  std____2__basic_ostream_char_2c_20std____2__char_traits_char__20____basic_ostream_28_29_2(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0);
 }
 
 function std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__20const__20std____2__use_facet_std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__20__28std____2__locale_20const__29($0) {
  $0 = $0 | 0;
  return std____2__locale__use_facet_28std____2__locale__id__29_20const($0, 69644) | 0;
 }
 
 function std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28short_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
  $2 = global$0 - 32 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  HEAP32[16874] = 0;
  $3 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(27, $2 + 24 | 0, $0 | 0) | 0;
  $4 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    label$4 : {
     if (($4 | 0) != 1) {
      label$6 : {
       if (!HEAPU8[$3 | 0]) {
        break label$6
       }
       $4 = HEAP32[(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0) + 4 >> 2];
       std____2__ios_base__getloc_28_29_20const($2 + 16 | 0, HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0);
       HEAP32[16874] = 0;
       $6 = __invoke_i1___22class_std____2__basic_ifstream_22_(1554, $2 + 16 | 0) | 0;
       $5 = HEAP32[16874];
       HEAP32[16874] = 0;
       label$7 : {
        label$8 : {
         if (($5 | 0) != 1) {
          std____2__locale___locale_28_29($2 + 16 | 0);
          $5 = std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___istreambuf_iterator_28std____2__basic_istream_char_2c_20std____2__char_traits_char__20___29($2 + 8 | 0, $0);
          $7 = HEAP32[HEAP32[$0 >> 2] + -12 >> 2];
          HEAP32[16874] = 0;
          $7 = $0 + $7 | 0;
          $9 = __invoke_i1___22class_std____2__basic_ifstream_22_(28, $7 | 0) | 0;
          $8 = HEAP32[16874];
          HEAP32[16874] = 0;
          if (($8 | 0) == 1) {
           break label$8
          }
          $5 = HEAP32[$5 >> 2];
          HEAP32[16874] = 0;
          $8 = $6;
          $6 = $1 & 65535;
          $10 = $1;
          $1 = $4 & 74;
          $1 = __invoke___22class_std____2__basic_streambuf_22____22class_std____2__num_put_22____22class_std____2__basic_streambuf_22____22class_std____2__ios_base_22__i8_i32(1555, $8 | 0, $5 | 0, $7 | 0, $9 | 0, (($1 | 0) == 64 ? $6 : ($1 | 0) == 8 ? $6 : $10) | 0) | 0;
          $4 = HEAP32[16874];
          HEAP32[16874] = 0;
          if (($4 | 0) == 1) {
           break label$8
          }
          HEAP32[$2 + 16 >> 2] = $1;
          if (!std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20___failed_28_29_20const($2 + 16 | 0)) {
           break label$6
          }
          $1 = HEAP32[HEAP32[$0 >> 2] + -12 >> 2];
          HEAP32[16874] = 0;
          __invoke_void___22class_std____2__vector_13_22__i32(17, $0 + $1 | 0, 5);
          $1 = HEAP32[16874];
          HEAP32[16874] = 0;
          if (($1 | 0) != 1) {
           break label$6
          }
          $1 = __cxa_find_matching_catch_3(0) | 0;
          getTempRet0() | 0;
          break label$7;
         }
         $1 = __cxa_find_matching_catch_3(0) | 0;
         getTempRet0() | 0;
         std____2__locale___locale_28_29($2 + 16 | 0);
         break label$7;
        }
        $1 = __cxa_find_matching_catch_3(0) | 0;
        getTempRet0() | 0;
       }
       std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___sentry___sentry_28_29($3);
       break label$4;
      }
      std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___sentry___sentry_28_29($3);
      break label$3;
     }
     $1 = __cxa_find_matching_catch_3(0) | 0;
     getTempRet0() | 0;
    }
    __cxa_begin_catch($1 | 0) | 0;
    $1 = HEAP32[HEAP32[$0 >> 2] + -12 >> 2];
    HEAP32[16874] = 0;
    __invoke_void___22class_std____2__basic_ifstream_22_(30, $0 + $1 | 0);
    $1 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($1 | 0) == 1) {
     break label$2
    }
    __cxa_end_catch();
   }
   $1 = $2 + 32 | 0;
   if ($1 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $1;
   return $0 | 0;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  HEAP32[16874] = 0;
  __invoke_void(23);
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($1 | 0) != 1) {
   __resumeException($0 | 0);
   abort();
  }
  $0 = __cxa_find_matching_catch_3(0) | 0;
  getTempRet0() | 0;
  __clang_call_terminate($0);
  abort();
 }
 
 function std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20char_2c_20long_29_20const($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $1, $2, $3, $4) | 0;
 }
 
 function std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20char_2c_20unsigned_20long_29_20const($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($0, $1, $2, $3, $4) | 0;
 }
 
 function std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28int_29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  $2 = global$0 - 32 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  HEAP32[16874] = 0;
  $3 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(27, $2 + 24 | 0, $0 | 0) | 0;
  $4 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    label$4 : {
     if (($4 | 0) != 1) {
      label$6 : {
       if (!HEAPU8[$3 | 0]) {
        break label$6
       }
       std____2__ios_base__getloc_28_29_20const($2 + 16 | 0, HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0);
       HEAP32[16874] = 0;
       $4 = __invoke_i1___22class_std____2__basic_ifstream_22_(1554, $2 + 16 | 0) | 0;
       $5 = HEAP32[16874];
       HEAP32[16874] = 0;
       label$7 : {
        label$8 : {
         if (($5 | 0) != 1) {
          std____2__locale___locale_28_29($2 + 16 | 0);
          $5 = std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___istreambuf_iterator_28std____2__basic_istream_char_2c_20std____2__char_traits_char__20___29($2 + 8 | 0, $0);
          $6 = HEAP32[HEAP32[$0 >> 2] + -12 >> 2];
          HEAP32[16874] = 0;
          $6 = $0 + $6 | 0;
          $7 = __invoke_i1___22class_std____2__basic_ifstream_22_(28, $6 | 0) | 0;
          $8 = HEAP32[16874];
          HEAP32[16874] = 0;
          if (($8 | 0) == 1) {
           break label$8
          }
          $5 = HEAP32[$5 >> 2];
          HEAP32[16874] = 0;
          $1 = __invoke___22class_std____2__basic_streambuf_22____22class_std____2__num_put_22____22class_std____2__basic_streambuf_22____22class_std____2__ios_base_22__i8_i32(1555, $4 | 0, $5 | 0, $6 | 0, $7 | 0, $1 | 0) | 0;
          $4 = HEAP32[16874];
          HEAP32[16874] = 0;
          if (($4 | 0) == 1) {
           break label$8
          }
          HEAP32[$2 + 16 >> 2] = $1;
          if (!std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20___failed_28_29_20const($2 + 16 | 0)) {
           break label$6
          }
          $1 = HEAP32[HEAP32[$0 >> 2] + -12 >> 2];
          HEAP32[16874] = 0;
          __invoke_void___22class_std____2__vector_13_22__i32(17, $0 + $1 | 0, 5);
          $1 = HEAP32[16874];
          HEAP32[16874] = 0;
          if (($1 | 0) != 1) {
           break label$6
          }
          $1 = __cxa_find_matching_catch_3(0) | 0;
          getTempRet0() | 0;
          break label$7;
         }
         $1 = __cxa_find_matching_catch_3(0) | 0;
         getTempRet0() | 0;
         std____2__locale___locale_28_29($2 + 16 | 0);
         break label$7;
        }
        $1 = __cxa_find_matching_catch_3(0) | 0;
        getTempRet0() | 0;
       }
       std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___sentry___sentry_28_29($3);
       break label$4;
      }
      std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___sentry___sentry_28_29($3);
      break label$3;
     }
     $1 = __cxa_find_matching_catch_3(0) | 0;
     getTempRet0() | 0;
    }
    __cxa_begin_catch($1 | 0) | 0;
    $1 = HEAP32[HEAP32[$0 >> 2] + -12 >> 2];
    HEAP32[16874] = 0;
    __invoke_void___22class_std____2__basic_ifstream_22_(30, $0 + $1 | 0);
    $1 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($1 | 0) == 1) {
     break label$2
    }
    __cxa_end_catch();
   }
   $1 = $2 + 32 | 0;
   if ($1 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $1;
   return $0;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  HEAP32[16874] = 0;
  __invoke_void(23);
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($1 | 0) != 1) {
   __resumeException($0 | 0);
   abort();
  }
  $0 = __cxa_find_matching_catch_3(0) | 0;
  getTempRet0() | 0;
  __clang_call_terminate($0);
  abort();
 }
 
 function std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28unsigned_20long_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  $2 = global$0 - 32 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  HEAP32[16874] = 0;
  $3 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(27, $2 + 24 | 0, $0 | 0) | 0;
  $4 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    label$4 : {
     if (($4 | 0) != 1) {
      label$6 : {
       if (!HEAPU8[$3 | 0]) {
        break label$6
       }
       std____2__ios_base__getloc_28_29_20const($2 + 16 | 0, HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0);
       HEAP32[16874] = 0;
       $4 = __invoke_i1___22class_std____2__basic_ifstream_22_(1554, $2 + 16 | 0) | 0;
       $5 = HEAP32[16874];
       HEAP32[16874] = 0;
       label$7 : {
        label$8 : {
         if (($5 | 0) != 1) {
          std____2__locale___locale_28_29($2 + 16 | 0);
          $5 = std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___istreambuf_iterator_28std____2__basic_istream_char_2c_20std____2__char_traits_char__20___29($2 + 8 | 0, $0);
          $6 = HEAP32[HEAP32[$0 >> 2] + -12 >> 2];
          HEAP32[16874] = 0;
          $6 = $0 + $6 | 0;
          $7 = __invoke_i1___22class_std____2__basic_ifstream_22_(28, $6 | 0) | 0;
          $8 = HEAP32[16874];
          HEAP32[16874] = 0;
          if (($8 | 0) == 1) {
           break label$8
          }
          $5 = HEAP32[$5 >> 2];
          HEAP32[16874] = 0;
          $1 = __invoke___22class_std____2__basic_streambuf_22____22class_std____2__num_put_22____22class_std____2__basic_streambuf_22____22class_std____2__ios_base_22__i8_i32(1556, $4 | 0, $5 | 0, $6 | 0, $7 | 0, $1 | 0) | 0;
          $4 = HEAP32[16874];
          HEAP32[16874] = 0;
          if (($4 | 0) == 1) {
           break label$8
          }
          HEAP32[$2 + 16 >> 2] = $1;
          if (!std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20___failed_28_29_20const($2 + 16 | 0)) {
           break label$6
          }
          $1 = HEAP32[HEAP32[$0 >> 2] + -12 >> 2];
          HEAP32[16874] = 0;
          __invoke_void___22class_std____2__vector_13_22__i32(17, $0 + $1 | 0, 5);
          $1 = HEAP32[16874];
          HEAP32[16874] = 0;
          if (($1 | 0) != 1) {
           break label$6
          }
          $1 = __cxa_find_matching_catch_3(0) | 0;
          getTempRet0() | 0;
          break label$7;
         }
         $1 = __cxa_find_matching_catch_3(0) | 0;
         getTempRet0() | 0;
         std____2__locale___locale_28_29($2 + 16 | 0);
         break label$7;
        }
        $1 = __cxa_find_matching_catch_3(0) | 0;
        getTempRet0() | 0;
       }
       std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___sentry___sentry_28_29($3);
       break label$4;
      }
      std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___sentry___sentry_28_29($3);
      break label$3;
     }
     $1 = __cxa_find_matching_catch_3(0) | 0;
     getTempRet0() | 0;
    }
    __cxa_begin_catch($1 | 0) | 0;
    $1 = HEAP32[HEAP32[$0 >> 2] + -12 >> 2];
    HEAP32[16874] = 0;
    __invoke_void___22class_std____2__basic_ifstream_22_(30, $0 + $1 | 0);
    $1 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($1 | 0) == 1) {
     break label$2
    }
    __cxa_end_catch();
   }
   $1 = $2 + 32 | 0;
   if ($1 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $1;
   return $0 | 0;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  HEAP32[16874] = 0;
  __invoke_void(23);
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($1 | 0) != 1) {
   __resumeException($0 | 0);
   abort();
  }
  $0 = __cxa_find_matching_catch_3(0) | 0;
  getTempRet0() | 0;
  __clang_call_terminate($0);
  abort();
 }
 
 function std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator__28char_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = HEAP32[$0 >> 2];
  label$1 : {
   if (!$2) {
    break label$1
   }
   if (!std____2__char_traits_char___eq_int_type_28int_2c_20int_29(std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___sputc_28char_29($2, $1), -1)) {
    break label$1
   }
   HEAP32[$0 >> 2] = 0;
  }
  return $0 | 0;
 }
 
 function std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___put_28char_29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0;
  $3 = global$0 - 16 | 0;
  $2 = $3;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  HEAP32[16874] = 0;
  $2 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(27, $3 + 8 | 0, $0 | 0) | 0;
  $4 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    label$4 : {
     if (($4 | 0) != 1) {
      label$6 : {
       if (!HEAPU8[$2 | 0]) {
        break label$6
       }
       $4 = std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___istreambuf_iterator_28std____2__basic_istream_char_2c_20std____2__char_traits_char__20___29($3, $0);
       HEAP32[16874] = 0;
       __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1557, $4 | 0, $1 | 0) | 0;
       $1 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($1 | 0) != 1) {
        if (!std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20___failed_28_29_20const($4)) {
         break label$6
        }
        $1 = HEAP32[HEAP32[$0 >> 2] + -12 >> 2];
        HEAP32[16874] = 0;
        __invoke_void___22class_std____2__vector_13_22__i32(17, $0 + $1 | 0, 1);
        $1 = HEAP32[16874];
        HEAP32[16874] = 0;
        if (($1 | 0) != 1) {
         break label$6
        }
       }
       $1 = __cxa_find_matching_catch_3(0) | 0;
       getTempRet0() | 0;
       std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___sentry___sentry_28_29($2);
       break label$4;
      }
      std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___sentry___sentry_28_29($2);
      break label$3;
     }
     $1 = __cxa_find_matching_catch_3(0) | 0;
     getTempRet0() | 0;
    }
    __cxa_begin_catch($1 | 0) | 0;
    $1 = HEAP32[HEAP32[$0 >> 2] + -12 >> 2];
    HEAP32[16874] = 0;
    __invoke_void___22class_std____2__basic_ifstream_22_(30, $0 + $1 | 0);
    $0 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($0 | 0) == 1) {
     break label$2
    }
    __cxa_end_catch();
   }
   $0 = $3 + 16 | 0;
   if ($0 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $0;
   return;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  HEAP32[16874] = 0;
  __invoke_void(23);
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($1 | 0) != 1) {
   __resumeException($0 | 0);
   abort();
  }
  $0 = __cxa_find_matching_catch_3(0) | 0;
  getTempRet0() | 0;
  __clang_call_terminate($0);
  abort();
 }
 
 function std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator__28wchar_t_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = HEAP32[$0 >> 2];
  label$1 : {
   if (!$2) {
    break label$1
   }
   if (!std____2__char_traits_char___eq_int_type_28int_2c_20int_29(std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___sputc_28wchar_t_29($2, $1), -1)) {
    break label$1
   }
   HEAP32[$0 >> 2] = 0;
  }
  return $0 | 0;
 }
 
 function std____2____iostream_category__name_28_29_20const($0) {
  $0 = $0 | 0;
  return 33904;
 }
 
 function std____2____iostream_category__message_28int_29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  if (!(($2 | 0) == 1 | ($2 | 0) > 256)) {
   std____2___28anonymous_20namespace_29__do_strerror_r_28int_29($0, $2);
   return;
  }
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28char_20const__29($0, 33913);
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28char_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20_____compressed_pair_true_2c_20void__28_29($0);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____init_28char_20const__2c_20unsigned_20long_29($0, $1, strlen($1));
  return $0 | 0;
 }
 
 function std____2__ios_base__failure__failure_28char_20const__2c_20std____2__error_code_20const__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0;
  $3 = global$0 - 16 | 0;
  $4 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  $4 = HEAP32[$2 + 4 >> 2];
  $2 = HEAP32[$2 >> 2];
  HEAP32[$3 >> 2] = $2;
  HEAP32[$3 + 4 >> 2] = $4;
  HEAP32[$3 + 8 >> 2] = $2;
  HEAP32[$3 + 12 >> 2] = $4;
  std____2__system_error__system_error_28std____2__error_code_2c_20char_20const__29($0, $3, $1);
  HEAP32[$0 >> 2] = 33996;
  $1 = $3 + 16 | 0;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  return $0 | 0;
 }
 
 function std____2__ios_base__failure___failure_28_29($0) {
  $0 = $0 | 0;
  std____2__system_error___system_error_28_29($0);
  return $0 | 0;
 }
 
 function std____2__ios_base__failure___failure_28_29_1($0) {
  $0 = $0 | 0;
  dlfree(std____2__ios_base__failure___failure_28_29($0));
 }
 
 function std____2__ios_base___ios_base_28_29_1($0) {
  $0 = $0 | 0;
  dlfree(std____2__ios_base___ios_base_28_29($0));
 }
 
 function std____2____throw_failure_28char_20const__29() {
  var $0 = 0, $1 = 0;
  $0 = global$0 - 16 | 0;
  $1 = $0;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  $1 = __cxa_allocate_exception(16) | 0;
  $0 = std____2__error_code__error_code_std____2__io_errc__28std____2__io_errc_2c_20std____2__enable_if_is_error_code_enum_std____2__io_errc___value_2c_20void___type__29($0 + 8 | 0);
  HEAP32[16874] = 0;
  __invoke___22class_std____2__basic_istream_22____22class_std____2__basic_istream_22__i8__i32(1559, $1 | 0, 34024, $0 | 0) | 0;
  $0 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    if (($0 | 0) != 1) {
     HEAP32[16874] = 0;
     __invoke_void_i8__i32_i32(1560, $1 | 0, 34096, 1561);
     $1 = HEAP32[16874];
     HEAP32[16874] = 0;
     if (($1 | 0) != 1) {
      break label$2
     }
     $0 = __cxa_find_matching_catch_2() | 0;
     getTempRet0() | 0;
     break label$3;
    }
    $0 = __cxa_find_matching_catch_2() | 0;
    getTempRet0() | 0;
    __cxa_free_exception($1 | 0);
   }
   __resumeException($0 | 0);
  }
  abort();
 }
 
 function std____2__error_code__error_code_std____2__io_errc__28std____2__io_errc_2c_20std____2__enable_if_is_error_code_enum_std____2__io_errc___value_2c_20void___type__29($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  $2 = $1 + 8 | 0;
  __inlined_func$std____2__iostream_category_28_29 : {
   if (HEAP8[67504] & 1) {
    break __inlined_func$std____2__iostream_category_28_29
   }
   if (!__cxa_guard_acquire(67504)) {
    break __inlined_func$std____2__iostream_category_28_29
   }
   __cxa_guard_release(67504);
  }
  std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20_____allocator_destructor_28std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20___2c_20unsigned_20long_29($2, 1, 65172);
  $2 = HEAP32[$1 + 12 >> 2];
  HEAP32[$0 >> 2] = HEAP32[$1 + 8 >> 2];
  HEAP32[$0 + 4 >> 2] = $2;
  $1 = $1 + 16 | 0;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  return $0;
 }
 
 function std____2__ios_base__init_28void__29($0, $1) {
  HEAP32[$0 + 20 >> 2] = 0;
  HEAP32[$0 + 24 >> 2] = $1;
  HEAP32[$0 + 12 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 4098;
  HEAP32[$0 + 8 >> 2] = 6;
  HEAP32[$0 + 16 >> 2] = !$1;
  memset($0 + 32 | 0, 0, 40);
  std____2__locale__locale_28_29($0 + 28 | 0);
 }
 
 function std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20_____test_for_eof_28_29_20const($0) {
  var $1 = 0;
  $1 = HEAP32[$0 >> 2];
  if ($1) {
   if (!std____2__char_traits_char___eq_int_type_28int_2c_20int_29(std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___sgetc_28_29($1), -1)) {
    return !HEAP32[$0 >> 2]
   }
   HEAP32[$0 >> 2] = 0;
  }
  return 1;
 }
 
 function std____2__ctype_wchar_t___widen_28char_29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 44 >> 2]]($0, $1) | 0;
 }
 
 function ungetc($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0;
  $2 = -1;
  label$1 : {
   if (($0 | 0) == -1) {
    break label$1
   }
   $4 = HEAP32[$1 + 76 >> 2] >= 0 ? 1 : $4;
   label$3 : {
    $3 = HEAP32[$1 + 4 >> 2];
    label$4 : {
     if (!$3) {
      __toread($1);
      $3 = HEAP32[$1 + 4 >> 2];
      if (!$3) {
       break label$4
      }
     }
     if ($3 >>> 0 > HEAP32[$1 + 44 >> 2] + -8 >>> 0) {
      break label$3
     }
    }
    if (!$4) {
     break label$1
    }
    return -1;
   }
   $2 = $3 + -1 | 0;
   HEAP32[$1 + 4 >> 2] = $2;
   HEAP8[$2 | 0] = $0;
   HEAP32[$1 >> 2] = HEAP32[$1 >> 2] & -17;
   $2 = $0;
  }
  return $2;
 }
 
 function std____2__ios_base__Init__Init_28_29() {
  var $0 = 0;
  $0 = HEAP32[8676];
  std____2____stdinbuf_char_____stdinbuf_28_IO_FILE__2c_20__mbstate_t__29($0);
  std____2__basic_istream_char_2c_20std____2__char_traits_char__20___basic_istream_28std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___29_1();
  std____2____stdinbuf_wchar_t_____stdinbuf_28_IO_FILE__2c_20__mbstate_t__29($0);
  std____2__basic_istream_wchar_t_2c_20std____2__char_traits_wchar_t__20___basic_istream_28std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___29();
  $0 = HEAP32[7598];
  std____2____stdoutbuf_char_____stdoutbuf_28_IO_FILE__2c_20__mbstate_t__29(69364, $0, 69412);
  std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___basic_ostream_28std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___29(68728, 69364);
  std____2____stdoutbuf_wchar_t_____stdoutbuf_28_IO_FILE__2c_20__mbstate_t__29(69420, $0, 69468);
  std____2__basic_ostream_wchar_t_2c_20std____2__char_traits_wchar_t__20___basic_ostream_28std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___29(68812, 69420);
  $0 = HEAP32[7458];
  std____2____stdoutbuf_char_____stdoutbuf_28_IO_FILE__2c_20__mbstate_t__29(69476, $0, 69524);
  std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___basic_ostream_28std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___29(68896, 69476);
  std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___basic_ostream_28std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___29(69064, HEAP32[(HEAP32[HEAP32[17224] + -12 >> 2] + 68896 | 0) + 24 >> 2]);
  std____2____stdoutbuf_wchar_t_____stdoutbuf_28_IO_FILE__2c_20__mbstate_t__29(69532, $0, 69580);
  std____2__basic_ostream_wchar_t_2c_20std____2__char_traits_wchar_t__20___basic_ostream_28std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___29(68980, 69532);
  std____2__basic_ostream_wchar_t_2c_20std____2__char_traits_wchar_t__20___basic_ostream_28std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___29(69148, HEAP32[(HEAP32[HEAP32[17245] + -12 >> 2] + 68980 | 0) + 24 >> 2]);
  std____2__basic_ios_char_2c_20std____2__char_traits_char__20___tie_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___29(HEAP32[HEAP32[17138] + -12 >> 2] + 68552 | 0, 68728);
  std____2__basic_ios_char_2c_20std____2__char_traits_char__20___tie_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___29(HEAP32[HEAP32[17160] + -12 >> 2] + 68640 | 0, 68812);
  std____2__ios_base__setf_28unsigned_20int_29(HEAP32[HEAP32[17224] + -12 >> 2] + 68896 | 0);
  std____2__ios_base__setf_28unsigned_20int_29(HEAP32[HEAP32[17245] + -12 >> 2] + 68980 | 0);
  std____2__basic_ios_char_2c_20std____2__char_traits_char__20___tie_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___29(HEAP32[HEAP32[17224] + -12 >> 2] + 68896 | 0, 68728);
  std____2__basic_ios_char_2c_20std____2__char_traits_char__20___tie_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___29(HEAP32[HEAP32[17245] + -12 >> 2] + 68980 | 0, 68812);
 }
 
 function __cxx_global_array_dtor_1($0) {
  $0 = $0 | 0;
  std____2__ios_base__Init___Init_28_29();
 }
 
 function std____2__ios_base__Init___Init_28_29() {
  var $0 = 0;
  HEAP32[16874] = 0;
  __invoke_i1___22class_std____2__basic_ifstream_22_(1614, 68728) | 0;
  $0 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$1 : {
   if (($0 | 0) == 1) {
    break label$1
   }
   HEAP32[16874] = 0;
   __invoke_i1___22class_std____2__basic_ifstream_22_(1615, 68812) | 0;
   $0 = HEAP32[16874];
   HEAP32[16874] = 0;
   if (($0 | 0) == 1) {
    break label$1
   }
   HEAP32[16874] = 0;
   __invoke_i1___22class_std____2__basic_ifstream_22_(1614, 69064) | 0;
   $0 = HEAP32[16874];
   HEAP32[16874] = 0;
   if (($0 | 0) == 1) {
    break label$1
   }
   HEAP32[16874] = 0;
   __invoke_i1___22class_std____2__basic_ifstream_22_(1615, 69148) | 0;
   $0 = HEAP32[16874];
   HEAP32[16874] = 0;
   if (($0 | 0) == 1) {
    break label$1
   }
   return;
  }
  $0 = __cxa_find_matching_catch_3(0) | 0;
  getTempRet0() | 0;
  __clang_call_terminate($0);
  abort();
 }
 
 function std____2____stdinbuf_char_____stdinbuf_28_IO_FILE__2c_20__mbstate_t__29($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  $2 = std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___basic_streambuf_28_29(69236);
  HEAP32[17319] = 69292;
  HEAP32[17317] = $0;
  HEAP32[17309] = 34716;
  HEAP8[69288] = 0;
  HEAP32[17321] = -1;
  std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___getloc_28_29_20const($1 + 8 | 0, $2);
  $0 = HEAP32[HEAP32[17309] + 8 >> 2];
  HEAP32[16874] = 0;
  __invoke_void___22class_std____2__vector_13_22__i32($0 | 0, 69236, $1 + 8 | 0);
  $0 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($0 | 0) != 1) {
   std____2__locale___locale_28_29($1 + 8 | 0);
   $0 = $1 + 16 | 0;
   if ($0 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $0;
   return;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__locale___locale_28_29($1 + 8 | 0);
  std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20____basic_streambuf_28_29($2);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2__basic_istream_char_2c_20std____2__char_traits_char__20___basic_istream_28std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___29_1() {
  var $0 = 0, $1 = 0;
  $1 = std____2__basic_ios_char_2c_20std____2__char_traits_char__20___basic_ios_28_29(68560);
  HEAP32[17138] = 33724;
  HEAP32[$1 >> 2] = 33744;
  HEAP32[17139] = 0;
  HEAP32[16874] = 0;
  __invoke_void___22class_std____2__vector_13_22__i32(1616, HEAP32[8428] + 68552 | 0, 69236);
  $0 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($0 | 0) != 1) {
   return
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__basic_ios_char_2c_20std____2__char_traits_char__20____basic_ios_28_29($1);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____stdinbuf_wchar_t_____stdinbuf_28_IO_FILE__2c_20__mbstate_t__29($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  $2 = std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___basic_streambuf_28_29(69300);
  HEAP32[17335] = 69356;
  HEAP32[17333] = $0;
  HEAP32[17325] = 34856;
  HEAP8[69352] = 0;
  HEAP32[17337] = -1;
  std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___getloc_28_29_20const($1 + 8 | 0, $2);
  $0 = HEAP32[HEAP32[17325] + 8 >> 2];
  HEAP32[16874] = 0;
  __invoke_void___22class_std____2__vector_13_22__i32($0 | 0, 69300, $1 + 8 | 0);
  $0 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($0 | 0) != 1) {
   std____2__locale___locale_28_29($1 + 8 | 0);
   $0 = $1 + 16 | 0;
   if ($0 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $0;
   return;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__locale___locale_28_29($1 + 8 | 0);
  std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20____basic_streambuf_28_29($2);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2__basic_istream_wchar_t_2c_20std____2__char_traits_wchar_t__20___basic_istream_28std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___29() {
  var $0 = 0, $1 = 0;
  $1 = std____2__basic_ios_wchar_t_2c_20std____2__char_traits_wchar_t__20___basic_ios_28_29(68648);
  HEAP32[17160] = 33772;
  HEAP32[$1 >> 2] = 33792;
  HEAP32[17161] = 0;
  HEAP32[16874] = 0;
  __invoke_void___22class_std____2__vector_13_22__i32(1617, HEAP32[8440] + 68640 | 0, 69300);
  $0 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($0 | 0) != 1) {
   return
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__basic_ios_char_2c_20std____2__char_traits_char__20____basic_ios_28_29($1);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____stdoutbuf_char_____stdoutbuf_28_IO_FILE__2c_20__mbstate_t__29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0;
  $3 = global$0 - 16 | 0;
  $4 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  $4 = std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___basic_streambuf_28_29($0);
  HEAP32[$0 + 32 >> 2] = $1;
  HEAP32[$0 >> 2] = 34956;
  std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___getloc_28_29_20const($3 + 8 | 0, $4);
  HEAP32[16874] = 0;
  $1 = __invoke_i1___22class_std____2__basic_ifstream_22_(21, $3 + 8 | 0) | 0;
  $5 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($5 | 0) != 1) {
   std____2__locale___locale_28_29($3 + 8 | 0);
   HEAP32[$0 + 40 >> 2] = $2;
   HEAP32[$0 + 36 >> 2] = $1;
   HEAP8[$0 + 44 | 0] = std____2__codecvt_char_2c_20char_2c_20__mbstate_t___always_noconv_28_29_20const($1);
   $0 = $3 + 16 | 0;
   if ($0 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $0;
   return;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__locale___locale_28_29($3 + 8 | 0);
  std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20____basic_streambuf_28_29($4);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___basic_ostream_28std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___29($0, $1) {
  var $2 = 0;
  $2 = std____2__basic_ios_char_2c_20std____2__char_traits_char__20___basic_ios_28_29($0 + 4 | 0);
  HEAP32[$0 >> 2] = 33820;
  HEAP32[$2 >> 2] = 33840;
  HEAP32[16874] = 0;
  __invoke_void___22class_std____2__vector_13_22__i32(1616, HEAP32[8452] + $0 | 0, $1 | 0);
  $0 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($0 | 0) != 1) {
   return
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__basic_ios_char_2c_20std____2__char_traits_char__20____basic_ios_28_29($2);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____stdoutbuf_wchar_t_____stdoutbuf_28_IO_FILE__2c_20__mbstate_t__29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0;
  $3 = global$0 - 16 | 0;
  $4 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  $4 = std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___basic_streambuf_28_29($0);
  HEAP32[$0 + 32 >> 2] = $1;
  HEAP32[$0 >> 2] = 35060;
  std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___getloc_28_29_20const($3 + 8 | 0, $4);
  HEAP32[16874] = 0;
  $1 = __invoke_i1___22class_std____2__basic_ifstream_22_(1618, $3 + 8 | 0) | 0;
  $5 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($5 | 0) != 1) {
   std____2__locale___locale_28_29($3 + 8 | 0);
   HEAP32[$0 + 40 >> 2] = $2;
   HEAP32[$0 + 36 >> 2] = $1;
   HEAP8[$0 + 44 | 0] = std____2__codecvt_char_2c_20char_2c_20__mbstate_t___always_noconv_28_29_20const($1);
   $0 = $3 + 16 | 0;
   if ($0 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $0;
   return;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__locale___locale_28_29($3 + 8 | 0);
  std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20____basic_streambuf_28_29($4);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2__basic_ostream_wchar_t_2c_20std____2__char_traits_wchar_t__20___basic_ostream_28std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___29($0, $1) {
  var $2 = 0;
  $2 = std____2__basic_ios_wchar_t_2c_20std____2__char_traits_wchar_t__20___basic_ios_28_29($0 + 4 | 0);
  HEAP32[$0 >> 2] = 33868;
  HEAP32[$2 >> 2] = 33888;
  HEAP32[16874] = 0;
  __invoke_void___22class_std____2__vector_13_22__i32(1617, HEAP32[8464] + $0 | 0, $1 | 0);
  $0 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($0 | 0) != 1) {
   return
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__basic_ios_char_2c_20std____2__char_traits_char__20____basic_ios_28_29($2);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2__basic_ios_char_2c_20std____2__char_traits_char__20___tie_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___29($0, $1) {
  HEAP32[$0 + 72 >> 2] = $1;
 }
 
 function std____2__basic_ios_wchar_t_2c_20std____2__char_traits_wchar_t__20___basic_ios_28_29($0) {
  std____2__ios_base__ios_base_28_29($0);
  HEAP32[$0 >> 2] = 34188;
  return $0;
 }
 
 function std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t__20const__20std____2__use_facet_std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t__20__28std____2__locale_20const__29($0) {
  $0 = $0 | 0;
  return std____2__locale__use_facet_28std____2__locale__id__29_20const($0, 69832) | 0;
 }
 
 function std____2__ios_base__setf_28unsigned_20int_29($0) {
  HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] | 8192;
 }
 
 function std____2____stdinbuf_char______stdinbuf_28_29($0) {
  $0 = $0 | 0;
  std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20____basic_streambuf_28_29($0);
  dlfree($0);
 }
 
 function std____2____stdinbuf_char___imbue_28std____2__locale_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1 = std____2__codecvt_char_2c_20char_2c_20__mbstate_t__20const__20std____2__use_facet_std____2__codecvt_char_2c_20char_2c_20__mbstate_t__20__28std____2__locale_20const__29($1);
  HEAP32[$0 + 36 >> 2] = $1;
  HEAP32[$0 + 44 >> 2] = std____2__codecvt_char_2c_20char_2c_20__mbstate_t___encoding_28_29_20const($1);
  HEAP8[$0 + 53 | 0] = std____2__codecvt_char_2c_20char_2c_20__mbstate_t___always_noconv_28_29_20const(HEAP32[$0 + 36 >> 2]);
  if (HEAP32[$0 + 44 >> 2] >= 9) {
   std____2____throw_runtime_error_28char_20const__29(34808);
   abort();
  }
 }
 
 function std____2____stdinbuf_char___underflow_28_29($0) {
  $0 = $0 | 0;
  return std____2____stdinbuf_char_____getchar_28bool_29($0, 0) | 0;
 }
 
 function std____2____stdinbuf_char_____getchar_28bool_29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
  $3 = global$0 - 32 | 0;
  $2 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  label$2 : {
   if (HEAPU8[$0 + 52 | 0]) {
    $2 = HEAP32[$0 + 48 >> 2];
    if (!$1) {
     break label$2
    }
    HEAP8[$0 + 52 | 0] = 0;
    HEAP32[$0 + 48 >> 2] = -1;
    break label$2;
   }
   HEAP32[$3 + 24 >> 2] = 1;
   $2 = 0;
   $4 = HEAP32[long_20const__20std____2__max_long__28long_20const__2c_20long_20const__29($3 + 24 | 0, $0 + 44 | 0) >> 2];
   $5 = ($4 | 0) > 0 ? $4 : 0;
   label$4 : {
    label$5 : {
     label$6 : {
      while (1) {
       if (($2 | 0) != ($5 | 0)) {
        $6 = fgetc(HEAP32[$0 + 32 >> 2]);
        if (($6 | 0) == -1) {
         break label$6
        }
        HEAP8[($3 + 24 | 0) + $2 | 0] = $6;
        $2 = $2 + 1 | 0;
        continue;
       }
       break;
      };
      label$9 : {
       if (HEAPU8[$0 + 53 | 0]) {
        HEAP8[$3 + 23 | 0] = HEAPU8[$3 + 24 | 0];
        break label$9;
       }
       $5 = 1;
       $6 = $3 + 24 | 0;
       label$11 : {
        label$12 : {
         while (1) {
          $2 = HEAP32[$0 + 40 >> 2];
          $8 = HEAP32[$2 >> 2];
          $9 = HEAP32[$2 + 4 >> 2];
          $7 = ($3 + 24 | 0) + $4 | 0;
          $2 = std____2__codecvt_char_2c_20char_2c_20__mbstate_t___in_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20char_20const___2c_20char__2c_20char__2c_20char___29_20const(HEAP32[$0 + 36 >> 2], $2, $3 + 24 | 0, $7, $3 + 16 | 0, $3 + 23 | 0, $6, $3 + 12 | 0) + -1 | 0;
          if ($2 >>> 0 > 2) {
           break label$11
          }
          label$14 : {
           switch ($2 - 1 | 0) {
           default:
            $2 = HEAP32[$0 + 40 >> 2];
            HEAP32[$2 >> 2] = $8;
            HEAP32[$2 + 4 >> 2] = $9;
            if (($4 | 0) == 8) {
             break label$12
            }
            $2 = fgetc(HEAP32[$0 + 32 >> 2]);
            if (($2 | 0) == -1) {
             break label$12
            }
            HEAP8[$7 | 0] = $2;
            $4 = $4 + 1 | 0;
            continue;
           case 0:
            break label$12;
           case 1:
            break label$14;
           };
          }
          break;
         };
         HEAP8[$3 + 23 | 0] = HEAPU8[$3 + 24 | 0];
         break label$11;
        }
        $5 = 0;
        $2 = -1;
       }
       if (!$5) {
        break label$2
       }
      }
      if ($1) {
       break label$5
      }
      while (1) {
       if (($4 | 0) < 1) {
        break label$4
       }
       $4 = $4 + -1 | 0;
       if ((ungetc(std____2__char_traits_char___to_int_type_28char_29(HEAP8[$4 + ($3 + 24 | 0) | 0]), HEAP32[$0 + 32 >> 2]) | 0) != -1) {
        continue
       }
       break;
      };
     }
     $2 = -1;
     break label$2;
    }
    HEAP32[$0 + 48 >> 2] = std____2__char_traits_char___to_int_type_28char_29(HEAP8[$3 + 23 | 0]);
   }
   $2 = std____2__char_traits_char___to_int_type_28char_29(HEAP8[$3 + 23 | 0]);
  }
  $0 = $3 + 32 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
  return $2;
 }
 
 function std____2____stdinbuf_char___uflow_28_29($0) {
  $0 = $0 | 0;
  return std____2____stdinbuf_char_____getchar_28bool_29($0, 1) | 0;
 }
 
 function std____2____stdinbuf_char___pbackfail_28int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0;
  $3 = global$0 - 32 | 0;
  $2 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  $2 = std____2__char_traits_char___eq_int_type_28int_2c_20int_29($1, -1);
  $4 = HEAPU8[$0 + 52 | 0];
  label$2 : {
   if ($2) {
    $2 = $1;
    if ($4) {
     break label$2
    }
    $2 = HEAP32[$0 + 48 >> 2];
    HEAP8[$0 + 52 | 0] = std____2__char_traits_char___eq_int_type_28int_2c_20int_29($2, -1) ^ 1;
    break label$2;
   }
   if ($4) {
    HEAP8[$3 + 19 | 0] = std____2__char_traits_char___to_char_type_28int_29(HEAP32[$0 + 48 >> 2]);
    $2 = std____2__codecvt_char_2c_20char_2c_20__mbstate_t___out_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20char_20const___2c_20char__2c_20char__2c_20char___29_20const(HEAP32[$0 + 36 >> 2], HEAP32[$0 + 40 >> 2], $3 + 19 | 0, $3 + 20 | 0, $3 + 12 | 0, $3 + 24 | 0, $3 + 32 | 0, $3 + 20 | 0) + -1 | 0;
    label$5 : {
     label$6 : {
      if ($2 >>> 0 <= 2) {
       if ($2 - 2) {
        break label$6
       }
       $2 = HEAP32[$0 + 48 >> 2];
       HEAP32[$3 + 20 >> 2] = $3 + 25;
       HEAP8[$3 + 24 | 0] = $2;
      }
      while (1) {
       $2 = HEAP32[$3 + 20 >> 2];
       $4 = 1;
       if ($2 >>> 0 <= $3 + 24 >>> 0) {
        break label$5
       }
       $2 = $2 + -1 | 0;
       HEAP32[$3 + 20 >> 2] = $2;
       if ((ungetc(HEAP8[$2 | 0], HEAP32[$0 + 32 >> 2]) | 0) != -1) {
        continue
       }
       break;
      };
     }
     $2 = -1;
     $4 = 0;
    }
    if (!$4) {
     break label$2
    }
   }
   HEAP8[$0 + 52 | 0] = 1;
   HEAP32[$0 + 48 >> 2] = $1;
   $2 = $1;
  }
  $0 = $3 + 32 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
  return $2 | 0;
 }
 
 function std____2____stdinbuf_wchar_t______stdinbuf_28_29($0) {
  $0 = $0 | 0;
  std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20____basic_streambuf_28_29($0);
  dlfree($0);
 }
 
 function std____2____stdinbuf_wchar_t___imbue_28std____2__locale_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1 = std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t__20const__20std____2__use_facet_std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t__20__28std____2__locale_20const__29($1);
  HEAP32[$0 + 36 >> 2] = $1;
  HEAP32[$0 + 44 >> 2] = std____2__codecvt_char_2c_20char_2c_20__mbstate_t___encoding_28_29_20const($1);
  HEAP8[$0 + 53 | 0] = std____2__codecvt_char_2c_20char_2c_20__mbstate_t___always_noconv_28_29_20const(HEAP32[$0 + 36 >> 2]);
  if (HEAP32[$0 + 44 >> 2] >= 9) {
   std____2____throw_runtime_error_28char_20const__29(34808);
   abort();
  }
 }
 
 function std____2____stdinbuf_wchar_t___underflow_28_29($0) {
  $0 = $0 | 0;
  return std____2____stdinbuf_wchar_t_____getchar_28bool_29($0, 0) | 0;
 }
 
 function std____2____stdinbuf_wchar_t_____getchar_28bool_29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
  $3 = global$0 - 32 | 0;
  $2 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  label$2 : {
   if (HEAPU8[$0 + 52 | 0]) {
    $2 = HEAP32[$0 + 48 >> 2];
    if (!$1) {
     break label$2
    }
    HEAP8[$0 + 52 | 0] = 0;
    HEAP32[$0 + 48 >> 2] = -1;
    break label$2;
   }
   HEAP32[$3 + 24 >> 2] = 1;
   $2 = 0;
   $4 = HEAP32[long_20const__20std____2__max_long__28long_20const__2c_20long_20const__29($3 + 24 | 0, $0 + 44 | 0) >> 2];
   $5 = ($4 | 0) > 0 ? $4 : 0;
   label$4 : {
    label$5 : {
     label$6 : {
      while (1) {
       if (($2 | 0) != ($5 | 0)) {
        $6 = fgetc(HEAP32[$0 + 32 >> 2]);
        if (($6 | 0) == -1) {
         break label$6
        }
        HEAP8[($3 + 24 | 0) + $2 | 0] = $6;
        $2 = $2 + 1 | 0;
        continue;
       }
       break;
      };
      label$9 : {
       if (HEAPU8[$0 + 53 | 0]) {
        HEAP32[$3 + 20 >> 2] = HEAP8[$3 + 24 | 0];
        break label$9;
       }
       $6 = $3 + 24 | 0;
       $5 = 1;
       label$11 : {
        label$12 : {
         while (1) {
          $2 = HEAP32[$0 + 40 >> 2];
          $8 = HEAP32[$2 >> 2];
          $9 = HEAP32[$2 + 4 >> 2];
          $7 = ($3 + 24 | 0) + $4 | 0;
          $2 = std____2__codecvt_char_2c_20char_2c_20__mbstate_t___in_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20char_20const___2c_20char__2c_20char__2c_20char___29_20const(HEAP32[$0 + 36 >> 2], $2, $3 + 24 | 0, $7, $3 + 16 | 0, $3 + 20 | 0, $6, $3 + 12 | 0) + -1 | 0;
          if ($2 >>> 0 > 2) {
           break label$11
          }
          label$14 : {
           switch ($2 - 1 | 0) {
           default:
            $2 = HEAP32[$0 + 40 >> 2];
            HEAP32[$2 >> 2] = $8;
            HEAP32[$2 + 4 >> 2] = $9;
            if (($4 | 0) == 8) {
             break label$12
            }
            $2 = fgetc(HEAP32[$0 + 32 >> 2]);
            if (($2 | 0) == -1) {
             break label$12
            }
            HEAP8[$7 | 0] = $2;
            $4 = $4 + 1 | 0;
            continue;
           case 0:
            break label$12;
           case 1:
            break label$14;
           };
          }
          break;
         };
         HEAP32[$3 + 20 >> 2] = HEAP8[$3 + 24 | 0];
         break label$11;
        }
        $5 = 0;
        $2 = -1;
       }
       if (!$5) {
        break label$2
       }
      }
      if ($1) {
       break label$5
      }
      while (1) {
       if (($4 | 0) < 1) {
        break label$4
       }
       $4 = $4 + -1 | 0;
       if ((ungetc(HEAP8[$4 + ($3 + 24 | 0) | 0], HEAP32[$0 + 32 >> 2]) | 0) != -1) {
        continue
       }
       break;
      };
     }
     $2 = -1;
     break label$2;
    }
    HEAP32[$0 + 48 >> 2] = HEAP32[$3 + 20 >> 2];
   }
   $2 = HEAP32[$3 + 20 >> 2];
  }
  $0 = $3 + 32 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
  return $2;
 }
 
 function std____2____stdinbuf_wchar_t___uflow_28_29($0) {
  $0 = $0 | 0;
  return std____2____stdinbuf_wchar_t_____getchar_28bool_29($0, 1) | 0;
 }
 
 function std____2____stdinbuf_wchar_t___pbackfail_28unsigned_20int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0;
  $3 = global$0 - 32 | 0;
  $2 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  $2 = std____2__char_traits_char___eq_int_type_28int_2c_20int_29($1, -1);
  $4 = HEAPU8[$0 + 52 | 0];
  label$2 : {
   if ($2) {
    $2 = $1;
    if ($4) {
     break label$2
    }
    $2 = HEAP32[$0 + 48 >> 2];
    HEAP8[$0 + 52 | 0] = std____2__char_traits_char___eq_int_type_28int_2c_20int_29($2, -1) ^ 1;
    break label$2;
   }
   if ($4) {
    HEAP32[$3 + 16 >> 2] = HEAP32[$0 + 48 >> 2];
    $2 = std____2__codecvt_char_2c_20char_2c_20__mbstate_t___out_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20char_20const___2c_20char__2c_20char__2c_20char___29_20const(HEAP32[$0 + 36 >> 2], HEAP32[$0 + 40 >> 2], $3 + 16 | 0, $3 + 20 | 0, $3 + 12 | 0, $3 + 24 | 0, $3 + 32 | 0, $3 + 20 | 0) + -1 | 0;
    label$5 : {
     label$6 : {
      if ($2 >>> 0 <= 2) {
       if ($2 - 2) {
        break label$6
       }
       $2 = HEAP32[$0 + 48 >> 2];
       HEAP32[$3 + 20 >> 2] = $3 + 25;
       HEAP8[$3 + 24 | 0] = $2;
      }
      while (1) {
       $2 = HEAP32[$3 + 20 >> 2];
       $4 = 1;
       if ($2 >>> 0 <= $3 + 24 >>> 0) {
        break label$5
       }
       $2 = $2 + -1 | 0;
       HEAP32[$3 + 20 >> 2] = $2;
       if ((ungetc(HEAP8[$2 | 0], HEAP32[$0 + 32 >> 2]) | 0) != -1) {
        continue
       }
       break;
      };
     }
     $2 = -1;
     $4 = 0;
    }
    if (!$4) {
     break label$2
    }
   }
   HEAP8[$0 + 52 | 0] = 1;
   HEAP32[$0 + 48 >> 2] = $1;
   $2 = $1;
  }
  $0 = $3 + 32 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
  return $2 | 0;
 }
 
 function std____2____stdoutbuf_char___imbue_28std____2__locale_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($0) | 0;
  $1 = std____2__codecvt_char_2c_20char_2c_20__mbstate_t__20const__20std____2__use_facet_std____2__codecvt_char_2c_20char_2c_20__mbstate_t__20__28std____2__locale_20const__29($1);
  HEAP32[$0 + 36 >> 2] = $1;
  HEAP8[$0 + 44 | 0] = std____2__codecvt_char_2c_20char_2c_20__mbstate_t___always_noconv_28_29_20const($1);
 }
 
 function std____2____stdoutbuf_char___sync_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  $5 = $1 + 16 | 0;
  label$2 : {
   while (1) {
    $3 = std____2__codecvt_char_2c_20char_2c_20__mbstate_t___unshift_28__mbstate_t__2c_20char__2c_20char__2c_20char___29_20const(HEAP32[$0 + 36 >> 2], HEAP32[$0 + 40 >> 2], $1 + 8 | 0, $5, $1 + 4 | 0);
    $2 = -1;
    $4 = HEAP32[$1 + 4 >> 2] - ($1 + 8 | 0) | 0;
    if ((fwrite($1 + 8 | 0, 1, $4, HEAP32[$0 + 32 >> 2]) | 0) != ($4 | 0)) {
     break label$2
    }
    $3 = $3 + -1 | 0;
    if ($3 >>> 0 <= 1) {
     if ($3 - 1) {
      continue
     }
     break label$2;
    }
    break;
   };
   $2 = fflush(HEAP32[$0 + 32 >> 2]) ? -1 : 0;
  }
  $0 = $1 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
  return $2 | 0;
 }
 
 function std____2____stdoutbuf_char___xsputn_28char_20const__2c_20long_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  label$1 : {
   if (!HEAPU8[$0 + 44 | 0]) {
    $2 = ($2 | 0) > 0 ? $2 : 0;
    while (1) {
     if (($2 | 0) == ($3 | 0)) {
      break label$1
     }
     if (((((wasm2js_i32$1 = $0, wasm2js_i32$2 = std____2__char_traits_char___to_int_type_28char_29(HEAP8[$1 | 0])), wasm2js_i32$0 = HEAP32[HEAP32[$0 >> 2] + 52 >> 2]), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0) | 0) == -1) {
      return $3 | 0
     } else {
      $1 = $1 + 1 | 0;
      $3 = $3 + 1 | 0;
      continue;
     }
    };
   }
   $2 = fwrite($1, 1, $2, HEAP32[$0 + 32 >> 2]);
  }
  return $2 | 0;
 }
 
 function std____2____stdoutbuf_char___overflow_28int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $2 = global$0 - 32 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  label$2 : {
   label$3 : {
    label$4 : {
     if (std____2__char_traits_char___eq_int_type_28int_2c_20int_29($1, -1)) {
      break label$4
     }
     HEAP8[$2 + 23 | 0] = std____2__char_traits_char___to_char_type_28int_29($1);
     if (HEAPU8[$0 + 44 | 0]) {
      if ((fwrite($2 + 23 | 0, 1, 1, HEAP32[$0 + 32 >> 2]) | 0) == 1) {
       break label$4
      }
      break label$3;
     }
     HEAP32[$2 + 16 >> 2] = $2 + 24;
     $5 = $2 + 32 | 0;
     $6 = $2 + 24 | 0;
     $3 = $2 + 23 | 0;
     while (1) {
      $4 = std____2__codecvt_char_2c_20char_2c_20__mbstate_t___out_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20char_20const___2c_20char__2c_20char__2c_20char___29_20const(HEAP32[$0 + 36 >> 2], HEAP32[$0 + 40 >> 2], $3, $6, $2 + 12 | 0, $2 + 24 | 0, $5, $2 + 16 | 0);
      if (HEAP32[$2 + 12 >> 2] == ($3 | 0)) {
       break label$3
      }
      if (($4 | 0) == 3) {
       if ((fwrite($3, 1, 1, HEAP32[$0 + 32 >> 2]) | 0) != 1) {
        break label$3
       }
       break label$4;
      }
      if ($4 >>> 0 > 1) {
       break label$3
      }
      $3 = HEAP32[$2 + 16 >> 2] - ($2 + 24 | 0) | 0;
      if ((fwrite($2 + 24 | 0, 1, $3, HEAP32[$0 + 32 >> 2]) | 0) != ($3 | 0)) {
       break label$3
      }
      $3 = HEAP32[$2 + 12 >> 2];
      if (($4 | 0) == 1) {
       continue
      }
      break;
     };
    }
    $0 = std____2__char_traits_char___not_eof_28int_29($1);
    break label$2;
   }
   $0 = -1;
  }
  $1 = $2 + 32 | 0;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  return $0 | 0;
 }
 
 function std____2____stdoutbuf_wchar_t___imbue_28std____2__locale_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($0) | 0;
  $1 = std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t__20const__20std____2__use_facet_std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t__20__28std____2__locale_20const__29($1);
  HEAP32[$0 + 36 >> 2] = $1;
  HEAP8[$0 + 44 | 0] = std____2__codecvt_char_2c_20char_2c_20__mbstate_t___always_noconv_28_29_20const($1);
 }
 
 function std____2____stdoutbuf_wchar_t___xsputn_28wchar_t_20const__2c_20long_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  label$1 : {
   if (!HEAPU8[$0 + 44 | 0]) {
    $2 = ($2 | 0) > 0 ? $2 : 0;
    while (1) {
     if (($2 | 0) == ($3 | 0)) {
      break label$1
     }
     if ((FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 52 >> 2]]($0, HEAP32[$1 >> 2]) | 0) == -1) {
      return $3 | 0
     } else {
      $1 = $1 + 4 | 0;
      $3 = $3 + 1 | 0;
      continue;
     }
    };
   }
   $2 = fwrite($1, 4, $2, HEAP32[$0 + 32 >> 2]);
  }
  return $2 | 0;
 }
 
 function std____2____stdoutbuf_wchar_t___overflow_28unsigned_20int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $2 = global$0 - 32 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  label$2 : {
   label$3 : {
    label$4 : {
     if (std____2__char_traits_char___eq_int_type_28int_2c_20int_29($1, -1)) {
      break label$4
     }
     HEAP32[$2 + 20 >> 2] = $1;
     if (HEAPU8[$0 + 44 | 0]) {
      if ((fwrite($2 + 20 | 0, 4, 1, HEAP32[$0 + 32 >> 2]) | 0) == 1) {
       break label$4
      }
      break label$3;
     }
     HEAP32[$2 + 16 >> 2] = $2 + 24;
     $5 = $2 + 32 | 0;
     $6 = $2 + 24 | 0;
     $3 = $2 + 20 | 0;
     while (1) {
      $4 = std____2__codecvt_char_2c_20char_2c_20__mbstate_t___out_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20char_20const___2c_20char__2c_20char__2c_20char___29_20const(HEAP32[$0 + 36 >> 2], HEAP32[$0 + 40 >> 2], $3, $6, $2 + 12 | 0, $2 + 24 | 0, $5, $2 + 16 | 0);
      if (HEAP32[$2 + 12 >> 2] == ($3 | 0)) {
       break label$3
      }
      if (($4 | 0) == 3) {
       if ((fwrite($3, 1, 1, HEAP32[$0 + 32 >> 2]) | 0) != 1) {
        break label$3
       }
       break label$4;
      }
      if ($4 >>> 0 > 1) {
       break label$3
      }
      $3 = HEAP32[$2 + 16 >> 2] - ($2 + 24 | 0) | 0;
      if ((fwrite($2 + 24 | 0, 1, $3, HEAP32[$0 + 32 >> 2]) | 0) != ($3 | 0)) {
       break label$3
      }
      $3 = HEAP32[$2 + 12 >> 2];
      if (($4 | 0) == 1) {
       continue
      }
      break;
     };
    }
    $0 = std____2__char_traits_char___not_eof_28int_29($1);
    break label$2;
   }
   $0 = -1;
  }
  $1 = $2 + 32 | 0;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  return $0 | 0;
 }
 
 function isspace($0) {
  return ($0 | 0) == 32 | $0 + -9 >>> 0 < 5;
 }
 
 function __shlim($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  HEAP32[$0 + 112 >> 2] = $1;
  HEAP32[$0 + 116 >> 2] = $2;
  $5 = HEAP32[$0 + 8 >> 2];
  $6 = HEAP32[$0 + 4 >> 2];
  $3 = $5 - $6 | 0;
  $4 = $3 >> 31;
  HEAP32[$0 + 120 >> 2] = $3;
  HEAP32[$0 + 124 >> 2] = $4;
  if (!(!($1 | $2) | (($4 | 0) < ($2 | 0) ? 1 : ($4 | 0) <= ($2 | 0) ? ($3 >>> 0 > $1 >>> 0 ? 0 : 1) : 0))) {
   HEAP32[$0 + 104 >> 2] = $1 + $6;
   return;
  }
  HEAP32[$0 + 104 >> 2] = $5;
 }
 
 function __shgetc($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
  $1 = HEAP32[$0 + 116 >> 2];
  $2 = $1;
  label$1 : {
   $5 = HEAP32[$0 + 112 >> 2];
   label$2 : {
    if ($1 | $5) {
     $1 = HEAP32[$0 + 124 >> 2];
     if (($1 | 0) > ($2 | 0) ? 1 : ($1 | 0) >= ($2 | 0) ? (HEAPU32[$0 + 120 >> 2] < $5 >>> 0 ? 0 : 1) : 0) {
      break label$2
     }
    }
    $5 = __uflow($0);
    if (($5 | 0) > -1) {
     break label$1
    }
   }
   HEAP32[$0 + 104 >> 2] = 0;
   return -1;
  }
  $1 = HEAP32[$0 + 8 >> 2];
  $2 = HEAP32[$0 + 116 >> 2];
  $4 = $2;
  label$4 : {
   label$5 : {
    $3 = HEAP32[$0 + 112 >> 2];
    if (!($2 | $3)) {
     break label$5
    }
    $2 = (HEAP32[$0 + 124 >> 2] ^ -1) + $4 | 0;
    $4 = HEAP32[$0 + 120 >> 2] ^ -1;
    $3 = $4 + $3 | 0;
    if ($3 >>> 0 < $4 >>> 0) {
     $2 = $2 + 1 | 0
    }
    $4 = $3;
    $3 = HEAP32[$0 + 4 >> 2];
    $6 = $1 - $3 | 0;
    $7 = $4 >>> 0 < $6 >>> 0 ? 0 : 1;
    $6 = $6 >> 31;
    if (($2 | 0) > ($6 | 0) ? 1 : ($2 | 0) >= ($6 | 0) ? $7 : 0) {
     break label$5
    }
    HEAP32[$0 + 104 >> 2] = $4 + $3;
    break label$4;
   }
   HEAP32[$0 + 104 >> 2] = $1;
  }
  label$6 : {
   if (!$1) {
    $1 = HEAP32[$0 + 4 >> 2];
    break label$6;
   }
   $2 = $0;
   $4 = $1;
   $1 = HEAP32[$0 + 4 >> 2];
   $3 = ($4 - $1 | 0) + 1 | 0;
   $4 = $3 + HEAP32[$0 + 120 >> 2] | 0;
   $0 = HEAP32[$0 + 124 >> 2] + ($3 >> 31) | 0;
   HEAP32[$2 + 120 >> 2] = $4;
   HEAP32[$2 + 124 >> 2] = $4 >>> 0 < $3 >>> 0 ? $0 + 1 | 0 : $0;
  }
  $0 = $1 + -1 | 0;
  if (HEAPU8[$0 | 0] != ($5 | 0)) {
   HEAP8[$0 | 0] = $5
  }
  return $5;
 }
 
 function __multi3($0, $1, $2, $3, $4) {
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
  $9 = $0;
  $7 = __wasm_i64_mul($1, $2, 0, 0);
  $6 = i64toi32_i32$HIGH_BITS;
  $5 = __wasm_i64_mul(0, 0, $3, $4);
  $7 = $7 + $5 | 0;
  $6 = i64toi32_i32$HIGH_BITS + $6 | 0;
  $6 = $7 >>> 0 < $5 >>> 0 ? $6 + 1 | 0 : $6;
  $5 = $7;
  $7 = __wasm_i64_mul($4, 0, $2, 0);
  $5 = $5 + $7 | 0;
  $8 = $5;
  $6 = i64toi32_i32$HIGH_BITS + $6 | 0;
  $7 = $5 >>> 0 < $7 >>> 0 ? $6 + 1 | 0 : $6;
  $6 = __wasm_i64_mul($3, 0, $1, 0);
  $5 = i64toi32_i32$HIGH_BITS;
  $2 = __wasm_i64_mul($2, 0, $3, 0);
  $3 = $5 + $2 | 0;
  $5 = i64toi32_i32$HIGH_BITS;
  $2 = $3 >>> 0 < $2 >>> 0 ? $5 + 1 | 0 : $5;
  $5 = $2 + $8 | 0;
  $8 = $5;
  $2 = $5 >>> 0 < $2 >>> 0 ? $7 + 1 | 0 : $7;
  $4 = __wasm_i64_mul($1, 0, $4, 0);
  $1 = i64toi32_i32$HIGH_BITS;
  $4 = $3 + $4 | 0;
  if ($4 >>> 0 < $3 >>> 0) {
   $1 = $1 + 1 | 0
  }
  $3 = $1 + $8 | 0;
  if ($3 >>> 0 < $1 >>> 0) {
   $2 = $2 + 1 | 0
  }
  HEAP32[$9 + 8 >> 2] = $3;
  HEAP32[$9 + 12 >> 2] = $2;
  HEAP32[$0 >> 2] = $6;
  HEAP32[$0 + 4 >> 2] = $4;
 }
 
 function __intscan($0, $1, $2, $3, $4) {
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
  $13 = global$0 - 16 | 0;
  $5 = $13;
  if ($5 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $5;
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      label$6 : {
       label$7 : {
        if ($1 >>> 0 <= 36) {
         while (1) {
          $5 = HEAP32[$0 + 4 >> 2];
          label$10 : {
           if ($5 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
            HEAP32[$0 + 4 >> 2] = $5 + 1;
            $6 = HEAPU8[$5 | 0];
            break label$10;
           }
           $6 = __shgetc($0);
          }
          if (isspace($6)) {
           continue
          }
          break;
         };
         $5 = $6 + -43 | 0;
         label$12 : {
          if ($5 >>> 0 > 2 | !($5 - 1)) {
           break label$12
          }
          $10 = ($6 | 0) == 45 ? -1 : 0;
          $5 = HEAP32[$0 + 4 >> 2];
          if ($5 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
           HEAP32[$0 + 4 >> 2] = $5 + 1;
           $6 = HEAPU8[$5 | 0];
           break label$12;
          }
          $6 = __shgetc($0);
         }
         label$14 : {
          if (!($1 & -17 | ($6 | 0) != 48)) {
           $5 = HEAP32[$0 + 4 >> 2];
           label$16 : {
            if ($5 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
             HEAP32[$0 + 4 >> 2] = $5 + 1;
             $6 = HEAPU8[$5 | 0];
             break label$16;
            }
            $6 = __shgetc($0);
           }
           if (($6 | 32) == 120) {
            $1 = HEAP32[$0 + 4 >> 2];
            label$19 : {
             if ($1 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
              HEAP32[$0 + 4 >> 2] = $1 + 1;
              $6 = HEAPU8[$1 | 0];
              break label$19;
             }
             $6 = __shgetc($0);
            }
            $1 = 16;
            if (HEAPU8[$6 + 35169 | 0] < 16) {
             break label$6
            }
            if (!HEAP32[$0 + 104 >> 2]) {
             $3 = 0;
             $4 = 0;
             if ($2) {
              break label$2
             }
             break label$3;
            }
            $1 = HEAP32[$0 + 4 >> 2];
            HEAP32[$0 + 4 >> 2] = $1 + -1;
            if (!$2) {
             break label$3
            }
            HEAP32[$0 + 4 >> 2] = $1 + -2;
            $3 = 0;
            $4 = 0;
            break label$2;
           }
           if ($1) {
            break label$14
           }
           $1 = 8;
           break label$6;
          }
          $1 = $1 ? $1 : 10;
          if ($1 >>> 0 > HEAPU8[$6 + 35169 | 0]) {
           break label$14
          }
          if (HEAP32[$0 + 104 >> 2]) {
           HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + -1
          }
          $3 = 0;
          $4 = 0;
          __shlim($0, 0, 0);
          HEAP32[16596] = 28;
          break label$2;
         }
         if (($1 | 0) != 10) {
          break label$6
         }
         $5 = 0;
         $2 = $6 + -48 | 0;
         if ($2 >>> 0 <= 9) {
          $1 = 0;
          while (1) {
           $5 = Math_imul($1, 10);
           $1 = HEAP32[$0 + 4 >> 2];
           label$25 : {
            if ($1 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
             HEAP32[$0 + 4 >> 2] = $1 + 1;
             $6 = HEAPU8[$1 | 0];
             break label$25;
            }
            $6 = __shgetc($0);
           }
           $1 = $2 + $5 | 0;
           $2 = $6 + -48 | 0;
           if ($1 >>> 0 < 429496729 ? $2 >>> 0 <= 9 : 0) {
            continue
           }
           break;
          };
          $7 = $1;
          $5 = 0;
         }
         if ($2 >>> 0 > 9) {
          break label$7
         }
         $9 = __wasm_i64_mul($7, 0, 10, 0);
         $1 = i64toi32_i32$HIGH_BITS;
         while (1) {
          $5 = HEAP32[$0 + 4 >> 2];
          label$28 : {
           if ($5 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
            HEAP32[$0 + 4 >> 2] = $5 + 1;
            $6 = HEAPU8[$5 | 0];
            break label$28;
           }
           $6 = __shgetc($0);
          }
          $5 = $1;
          $7 = $2 + $9 | 0;
          if ($7 >>> 0 < $2 >>> 0) {
           $5 = $5 + 1 | 0
          }
          $2 = $6 + -48 | 0;
          if (($5 | 0) == 429496729 & $7 >>> 0 >= 2576980378 | $5 >>> 0 > 429496729 | $2 >>> 0 > 9) {
           break label$7
          }
          $9 = __wasm_i64_mul($7, $5, 10, 0);
          $1 = i64toi32_i32$HIGH_BITS;
          if (($1 | 0) == -1 & $9 >>> 0 <= ($2 ^ -1) >>> 0 | $1 >>> 0 < 4294967295) {
           continue
          }
          break;
         };
         $1 = 10;
         break label$5;
        }
        HEAP32[16596] = 28;
        $3 = 0;
        $4 = 0;
        break label$2;
       }
       $1 = 10;
       if ($2 >>> 0 <= 9) {
        break label$5
       }
       break label$4;
      }
      if ($1 + -1 & $1) {
       $5 = 0;
       $2 = HEAPU8[$6 + 35169 | 0];
       if ($1 >>> 0 > $2 >>> 0) {
        while (1) {
         $7 = Math_imul($1, $7) + $2 | 0;
         $11 = $7 >>> 0 <= 119304646;
         $8 = $1;
         $2 = HEAP32[$0 + 4 >> 2];
         label$33 : {
          if ($2 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
           HEAP32[$0 + 4 >> 2] = $2 + 1;
           $6 = HEAPU8[$2 | 0];
           break label$33;
          }
          $6 = __shgetc($0);
         }
         $2 = HEAPU8[$6 + 35169 | 0];
         if ($8 >>> 0 > $2 >>> 0 ? $11 : 0) {
          continue
         }
         break;
        }
       }
       if ($1 >>> 0 <= $2 >>> 0) {
        break label$5
       }
       $9 = $1;
       while (1) {
        $12 = __wasm_i64_mul($7, $5, $9, 0);
        $8 = i64toi32_i32$HIGH_BITS;
        $2 = $2 & 255;
        if (($8 | 0) == -1 & $12 >>> 0 > ($2 ^ -1) >>> 0 | $8 >>> 0 > 4294967295) {
         break label$5
        }
        $5 = HEAP32[$0 + 4 >> 2];
        label$36 : {
         if ($5 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
          HEAP32[$0 + 4 >> 2] = $5 + 1;
          $6 = HEAPU8[$5 | 0];
          break label$36;
         }
         $6 = __shgetc($0);
        }
        $5 = $8;
        $7 = $2 + $12 | 0;
        if ($7 >>> 0 < $2 >>> 0) {
         $5 = $5 + 1 | 0
        }
        $2 = HEAPU8[$6 + 35169 | 0];
        if ($1 >>> 0 <= $2 >>> 0) {
         break label$5
        }
        __multi3($13, $9, 0, $7, $5);
        if (!(HEAP32[$13 + 8 >> 2] | HEAP32[$13 + 12 >> 2])) {
         continue
        }
        break;
       };
       break label$5;
      }
      $9 = HEAP8[(Math_imul($1, 23) >>> 5 & 7) + 35425 | 0];
      $5 = 0;
      $2 = HEAPU8[$6 + 35169 | 0];
      if ($1 >>> 0 > $2 >>> 0) {
       while (1) {
        $7 = $7 << $9 | $2;
        $11 = $7 >>> 0 <= 134217727;
        $8 = $1;
        $2 = HEAP32[$0 + 4 >> 2];
        label$40 : {
         if ($2 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
          HEAP32[$0 + 4 >> 2] = $2 + 1;
          $6 = HEAPU8[$2 | 0];
          break label$40;
         }
         $6 = __shgetc($0);
        }
        $2 = HEAPU8[$6 + 35169 | 0];
        if ($8 >>> 0 > $2 >>> 0 ? $11 : 0) {
         continue
        }
        break;
       }
      }
      $8 = $9 & 31;
      if (32 <= ($9 & 63) >>> 0) {
       $11 = -1 >>> $8 | 0
      } else {
       $12 = -1 >>> $8 | 0;
       $11 = (1 << $8) - 1 << 32 - $8 | -1 >>> $8;
      }
      $8 = $11;
      if (!$12 & $8 >>> 0 < $7 >>> 0 | $12 >>> 0 < 0 | $1 >>> 0 <= $2 >>> 0) {
       break label$5
      }
      while (1) {
       $8 = $9 & 31;
       if (32 <= ($9 & 63) >>> 0) {
        $5 = $7 << $8;
        $6 = 0;
       } else {
        $5 = (1 << $8) - 1 & $7 >>> 32 - $8 | $5 << $8;
        $6 = $7 << $8;
       }
       $7 = $6 | $2 & 255;
       $2 = HEAP32[$0 + 4 >> 2];
       label$43 : {
        if ($2 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
         HEAP32[$0 + 4 >> 2] = $2 + 1;
         $6 = HEAPU8[$2 | 0];
         break label$43;
        }
        $6 = __shgetc($0);
       }
       if (($5 | 0) == ($12 | 0) & $7 >>> 0 > $11 >>> 0 | $5 >>> 0 > $12 >>> 0) {
        break label$5
       }
       $2 = HEAPU8[$6 + 35169 | 0];
       if ($1 >>> 0 > $2 >>> 0) {
        continue
       }
       break;
      };
     }
     if ($1 >>> 0 <= HEAPU8[$6 + 35169 | 0]) {
      break label$4
     }
     while (1) {
      $6 = $1;
      $2 = HEAP32[$0 + 4 >> 2];
      label$46 : {
       if ($2 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
        HEAP32[$0 + 4 >> 2] = $2 + 1;
        $2 = HEAPU8[$2 | 0];
        break label$46;
       }
       $2 = __shgetc($0);
      }
      if ($6 >>> 0 > HEAPU8[$2 + 35169 | 0]) {
       continue
      }
      break;
     };
     HEAP32[16596] = 68;
     $10 = $3 & 1 ? 0 : $10;
     $7 = $3;
     $5 = $4;
    }
    if (HEAP32[$0 + 104 >> 2]) {
     HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + -1
    }
    label$49 : {
     if (($4 | 0) == ($5 | 0) & $7 >>> 0 < $3 >>> 0 | $5 >>> 0 < $4 >>> 0) {
      break label$49
     }
     if (!($10 | $3 & 1)) {
      HEAP32[16596] = 68;
      $4 = $4 + -1 | 0;
      $3 = $3 + -1 | 0;
      if ($3 >>> 0 < 4294967295) {
       $4 = $4 + 1 | 0
      }
      break label$2;
     }
     if (($4 | 0) == ($5 | 0) & $7 >>> 0 <= $3 >>> 0 | $5 >>> 0 < $4 >>> 0) {
      break label$49
     }
     HEAP32[16596] = 68;
     break label$2;
    }
    $0 = $7 ^ $10;
    $3 = $0 - $10 | 0;
    $1 = $10 >> 31;
    $4 = ($1 ^ $5) - ($1 + ($0 >>> 0 < $10 >>> 0) | 0) | 0;
    break label$2;
   }
   $3 = 0;
   $4 = 0;
   __shlim($0, 0, 0);
  }
  $0 = $13 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
  i64toi32_i32$HIGH_BITS = $4;
  return $3;
 }
 
 function mbrtowc($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
  $5 = global$0 - 16 | 0;
  $4 = $5;
  if ($5 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  $6 = $3 ? $3 : 69588;
  $3 = HEAP32[$6 >> 2];
  label$2 : {
   label$3 : {
    label$4 : {
     if (!$1) {
      if ($3) {
       break label$4
      }
      $4 = 0;
      break label$2;
     }
     $4 = -2;
     if (!$2) {
      break label$2
     }
     $8 = $0 ? $0 : $5 + 12 | 0;
     label$6 : {
      if ($3) {
       $0 = $2;
       break label$6;
      }
      $0 = HEAPU8[$1 | 0];
      $3 = $0 << 24 >> 24;
      if (($3 | 0) >= 0) {
       HEAP32[$8 >> 2] = $0;
       $4 = ($3 | 0) != 0;
       break label$2;
      }
      $0 = HEAP8[$1 | 0];
      if (!HEAP32[HEAP32[16279] >> 2]) {
       HEAP32[$8 >> 2] = $0 & 57343;
       $4 = 1;
       break label$2;
      }
      $0 = ($0 & 255) + -194 | 0;
      if ($0 >>> 0 > 50) {
       break label$4
      }
      $3 = HEAP32[($0 << 2) + 35440 >> 2];
      $0 = $2 + -1 | 0;
      if (!$0) {
       break label$3
      }
      $1 = $1 + 1 | 0;
     }
     $7 = HEAPU8[$1 | 0];
     $9 = $7 >>> 3 | 0;
     if (($9 + -16 | ($3 >> 26) + $9) >>> 0 > 7) {
      break label$4
     }
     while (1) {
      $0 = $0 + -1 | 0;
      $3 = $7 + -128 | $3 << 6;
      if (($3 | 0) >= 0) {
       HEAP32[$6 >> 2] = 0;
       HEAP32[$8 >> 2] = $3;
       $4 = $2 - $0 | 0;
       break label$2;
      }
      if (!$0) {
       break label$3
      }
      $1 = $1 + 1 | 0;
      $7 = HEAPU8[$1 | 0];
      if (($7 & 192) == 128) {
       continue
      }
      break;
     };
    }
    HEAP32[$6 >> 2] = 0;
    HEAP32[16596] = 25;
    $4 = -1;
    break label$2;
   }
   HEAP32[$6 >> 2] = $3;
  }
  $0 = $5 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
  return $4 | 0;
 }
 
 function __extendsftf2($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  $4 = global$0 - 16 | 0;
  $2 = $4;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  $3 = (wasm2js_scratch_store_f32($1), wasm2js_scratch_load_i32(0));
  $6 = $3 & -2147483648;
  $2 = $3 & 2147483647;
  label$2 : {
   if ($2 + -8388608 >>> 0 <= 2130706431) {
    $3 = $2;
    $2 = $2 >>> 7 | 0;
    $3 = $3 << 25;
    $2 = $2 + 1065353216 | 0;
    $5 = $3;
    $2 = $3 >>> 0 < 0 ? $2 + 1 | 0 : $2;
    break label$2;
   }
   if ($2 >>> 0 >= 2139095040) {
    $5 = $3 << 25;
    $2 = $3 >>> 7 | 2147418112;
    break label$2;
   }
   if (!$2) {
    $2 = 0;
    break label$2;
   }
   $3 = $2;
   $2 = Math_clz32($2);
   __ashlti3($4, $3, 0, 0, 0, $2 + 81 | 0);
   $7 = HEAP32[$4 >> 2];
   $8 = HEAP32[$4 + 4 >> 2];
   $5 = HEAP32[$4 + 8 >> 2];
   $2 = HEAP32[$4 + 12 >> 2] ^ 65536 | 16265 - $2 << 16;
  }
  HEAP32[$0 >> 2] = $7;
  HEAP32[$0 + 4 >> 2] = $8;
  HEAP32[$0 + 8 >> 2] = $5;
  HEAP32[$0 + 12 >> 2] = $2 | $6;
  $0 = $4 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function __floatsitf($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
  $3 = global$0 - 16 | 0;
  $2 = $3;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  $6 = $0;
  $7 = $0;
  label$2 : {
   if (!$1) {
    $1 = 0;
    $2 = 0;
    $5 = 0;
    break label$2;
   }
   $2 = $1 >> 31;
   $4 = $2 + $1 ^ $2;
   $2 = Math_clz32($4);
   __ashlti3($3, $4, 0, 0, 0, $2 + 81 | 0);
   $2 = (HEAP32[$3 + 12 >> 2] ^ 65536) + (16414 - $2 << 16) | 0;
   $4 = 0 + HEAP32[$3 + 8 >> 2] | 0;
   if ($4 >>> 0 < $5 >>> 0) {
    $2 = $2 + 1 | 0
   }
   $1 = $1 & -2147483648 | $2;
   $2 = HEAP32[$3 + 4 >> 2];
   $5 = HEAP32[$3 >> 2];
  }
  HEAP32[$7 >> 2] = $5;
  HEAP32[$6 + 4 >> 2] = $2;
  HEAP32[$0 + 8 >> 2] = $4;
  HEAP32[$0 + 12 >> 2] = $1;
  $0 = $3 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function __multf3($0, $1, $2, $3, $4, $5, $6, $7, $8) {
  var $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
  $12 = global$0 - 96 | 0;
  $9 = $12;
  if ($9 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $9;
  $17 = $2;
  $9 = $6;
  $20 = ($9 & 131071) << 15 | $5 >>> 17;
  $10 = $8 & 65535;
  $22 = $10;
  $18 = $7;
  $9 = $7;
  $25 = $9 << 15 | $6 >>> 17;
  $15 = ($4 ^ $8) & -2147483648;
  $9 = $4 & 65535;
  $13 = $9;
  $16 = $3;
  $26 = $9;
  $9 = $10;
  $24 = ($9 & 131071) << 15 | $7 >>> 17;
  $36 = $8 >>> 16 & 32767;
  $37 = $4 >>> 16 & 32767;
  label$2 : {
   label$3 : {
    if ($37 + -1 >>> 0 <= 32765) {
     $21 = 0;
     if ($36 + -1 >>> 0 < 32766) {
      break label$3
     }
    }
    $11 = $4 & 2147483647;
    $10 = $11;
    $9 = $3;
    if (!(!$3 & ($10 | 0) == 2147418112 ? !($1 | $2) : ($10 | 0) == 2147418112 & $3 >>> 0 < 0 | $10 >>> 0 < 2147418112)) {
     $23 = $3;
     $15 = $4 | 32768;
     break label$2;
    }
    $4 = $8 & 2147483647;
    $14 = $4;
    $3 = $7;
    if (!(!$3 & ($4 | 0) == 2147418112 ? !($5 | $6) : ($4 | 0) == 2147418112 & $3 >>> 0 < 0 | $4 >>> 0 < 2147418112)) {
     $23 = $7;
     $15 = $8 | 32768;
     $1 = $5;
     $2 = $6;
     break label$2;
    }
    if (!($1 | $9 | ($10 ^ 2147418112 | $2))) {
     if (!($3 | $5 | ($6 | $14))) {
      $15 = 2147450880;
      $1 = 0;
      $2 = 0;
      break label$2;
     }
     $15 = $15 | 2147418112;
     $1 = 0;
     $2 = 0;
     break label$2;
    }
    if (!($3 | $5 | ($14 ^ 2147418112 | $6))) {
     $3 = $1 | $9;
     $4 = $2 | $10;
     $1 = 0;
     $2 = 0;
     if (!($3 | $4)) {
      $15 = 2147450880;
      break label$2;
     }
     $15 = $15 | 2147418112;
     break label$2;
    }
    if (!($1 | $9 | ($2 | $10))) {
     $1 = 0;
     $2 = 0;
     break label$2;
    }
    if (!($3 | $5 | ($6 | $14))) {
     $1 = 0;
     $2 = 0;
     break label$2;
    }
    $4 = 0;
    if (($10 | 0) == 65535 & $9 >>> 0 <= 4294967295 | $10 >>> 0 < 65535) {
     $8 = $1;
     $10 = $2;
     $4 = !($13 | $16);
     $7 = $4 << 6;
     $9 = Math_clz32($4 ? $1 : $16) + 32 | 0;
     $1 = Math_clz32($4 ? $2 : $13);
     $1 = $7 + (($1 | 0) == 32 ? $9 : $1) | 0;
     __ashlti3($12 + 80 | 0, $8, $10, $16, $13, $1 + -15 | 0);
     $16 = HEAP32[$12 + 88 >> 2];
     $17 = HEAP32[$12 + 84 >> 2];
     $26 = HEAP32[$12 + 92 >> 2];
     $4 = 16 - $1 | 0;
     $1 = HEAP32[$12 + 80 >> 2];
    }
    $21 = $4;
    if (($14 | 0) == 65535 & $3 >>> 0 > 4294967295 | $14 >>> 0 > 65535) {
     break label$3
    }
    $2 = !($18 | $22);
    $3 = $2 << 6;
    $7 = Math_clz32($2 ? $5 : $18) + 32 | 0;
    $2 = Math_clz32($2 ? $6 : $22);
    $2 = $3 + (($2 | 0) == 32 ? $7 : $2) | 0;
    $8 = $2;
    __ashlti3($12 - -64 | 0, $5, $6, $18, $22, $2 + -15 | 0);
    $5 = HEAP32[$12 + 76 >> 2];
    $2 = $5;
    $7 = HEAP32[$12 + 72 >> 2];
    $3 = $7;
    $3 = $3 << 15;
    $9 = HEAP32[$12 + 68 >> 2];
    $25 = $9 >>> 17 | $3;
    $3 = $9;
    $5 = HEAP32[$12 + 64 >> 2];
    $20 = ($3 & 131071) << 15 | $5 >>> 17;
    $24 = ($2 & 131071) << 15 | $7 >>> 17;
    $21 = ($4 - $8 | 0) + 16 | 0;
   }
   $14 = $20;
   $8 = __wasm_i64_mul($14, 0, $1, 0);
   $2 = i64toi32_i32$HIGH_BITS;
   $27 = $2;
   $3 = $5;
   $18 = $3 << 15 & -32768;
   $4 = __wasm_i64_mul($18, 0, $17, 0);
   $3 = $4 + $8 | 0;
   $11 = i64toi32_i32$HIGH_BITS + $2 | 0;
   $11 = $3 >>> 0 < $4 >>> 0 ? $11 + 1 | 0 : $11;
   $2 = $3;
   $4 = 0;
   $6 = __wasm_i64_mul($18, $28, $1, $29);
   $5 = $6 + $4 | 0;
   $10 = i64toi32_i32$HIGH_BITS + $3 | 0;
   $20 = $5;
   $10 = $5 >>> 0 < $6 >>> 0 ? $10 + 1 | 0 : $10;
   $6 = $10;
   $47 = ($3 | 0) == ($10 | 0) & $5 >>> 0 < $4 >>> 0 | $10 >>> 0 < $3 >>> 0;
   $40 = __wasm_i64_mul($14, $38, $17, $39);
   $31 = i64toi32_i32$HIGH_BITS;
   $41 = $16;
   $4 = __wasm_i64_mul($18, $28, $16, 0);
   $3 = $4 + $40 | 0;
   $13 = i64toi32_i32$HIGH_BITS + $31 | 0;
   $32 = $3;
   $13 = $3 >>> 0 < $4 >>> 0 ? $13 + 1 | 0 : $13;
   $3 = $13;
   $7 = __wasm_i64_mul($25, 0, $1, $29);
   $4 = $7 + $32 | 0;
   $5 = i64toi32_i32$HIGH_BITS + $3 | 0;
   $33 = $4;
   $5 = $4 >>> 0 < $7 >>> 0 ? $5 + 1 | 0 : $5;
   $22 = $5;
   $7 = $5;
   $5 = ($11 | 0) == ($27 | 0) & $2 >>> 0 < $8 >>> 0 | $11 >>> 0 < $27 >>> 0;
   $4 = $11;
   $2 = $4 + $33 | 0;
   $10 = $5 + $7 | 0;
   $27 = $2;
   $10 = $2 >>> 0 < $4 >>> 0 ? $10 + 1 | 0 : $10;
   $4 = $10;
   $7 = $2;
   $43 = __wasm_i64_mul($14, $38, $16, $42);
   $34 = i64toi32_i32$HIGH_BITS;
   $30 = $26 | 65536;
   $13 = $19;
   $5 = __wasm_i64_mul($18, $28, $30, $13);
   $2 = $5 + $43 | 0;
   $10 = i64toi32_i32$HIGH_BITS + $34 | 0;
   $44 = $2;
   $10 = $2 >>> 0 < $5 >>> 0 ? $10 + 1 | 0 : $10;
   $19 = $10;
   $9 = __wasm_i64_mul($17, $39, $25, $45);
   $2 = $9 + $2 | 0;
   $5 = i64toi32_i32$HIGH_BITS + $10 | 0;
   $35 = $2;
   $5 = $2 >>> 0 < $9 >>> 0 ? $5 + 1 | 0 : $5;
   $18 = $5;
   $24 = $24 & 2147483647 | -2147483648;
   $2 = __wasm_i64_mul($24, 0, $1, $29);
   $1 = $2 + $35 | 0;
   $9 = i64toi32_i32$HIGH_BITS + $5 | 0;
   $29 = $1;
   $2 = $1 >>> 0 < $2 >>> 0 ? $9 + 1 | 0 : $9;
   $10 = $4 + $1 | 0;
   $5 = 0;
   $1 = $5 + $7 | 0;
   if ($1 >>> 0 < $5 >>> 0) {
    $10 = $10 + 1 | 0
   }
   $28 = $1;
   $26 = $10;
   $5 = $10;
   $7 = $1 + $47 | 0;
   if ($7 >>> 0 < $1 >>> 0) {
    $5 = $5 + 1 | 0
   }
   $8 = $5;
   $16 = ($21 + ($36 + $37 | 0) | 0) + -16383 | 0;
   $9 = __wasm_i64_mul($41, $42, $25, $45);
   $1 = i64toi32_i32$HIGH_BITS;
   $11 = __wasm_i64_mul($14, $38, $30, $13);
   $5 = $11 + $9 | 0;
   $10 = i64toi32_i32$HIGH_BITS + $1 | 0;
   $14 = $5;
   $10 = $5 >>> 0 < $11 >>> 0 ? $10 + 1 | 0 : $10;
   $5 = $10;
   $21 = ($1 | 0) == ($5 | 0) & $14 >>> 0 < $9 >>> 0 | $5 >>> 0 < $1 >>> 0;
   $11 = __wasm_i64_mul($24, $46, $17, $39);
   $1 = $11 + $14 | 0;
   $9 = i64toi32_i32$HIGH_BITS + $5 | 0;
   $9 = $1 >>> 0 < $11 >>> 0 ? $9 + 1 | 0 : $9;
   $17 = $1;
   $11 = 0;
   $1 = $9;
   $5 = ($5 | 0) == ($1 | 0) & $17 >>> 0 < $14 >>> 0 | $1 >>> 0 < $5 >>> 0;
   $9 = $5 + $21 | 0;
   if ($9 >>> 0 < $5 >>> 0) {
    $11 = 1
   }
   $10 = $9;
   $9 = $1;
   $5 = $11;
   $14 = $10;
   $10 = 0;
   $11 = ($3 | 0) == ($31 | 0) & $32 >>> 0 < $40 >>> 0 | $3 >>> 0 < $31 >>> 0;
   $3 = ($3 | 0) == ($22 | 0) & $33 >>> 0 < $32 >>> 0 | $22 >>> 0 < $3 >>> 0;
   $11 = $11 + $3 | 0;
   if ($11 >>> 0 < $3 >>> 0) {
    $10 = 1
   }
   $3 = $11 + $17 | 0;
   $9 = $10 + $9 | 0;
   $21 = $3;
   $10 = $3;
   $9 = $3 >>> 0 < $11 >>> 0 ? $9 + 1 | 0 : $9;
   $3 = $9;
   $1 = ($1 | 0) == ($3 | 0) & $10 >>> 0 < $17 >>> 0 | $3 >>> 0 < $1 >>> 0;
   $9 = $14 + $1 | 0;
   if ($9 >>> 0 < $1 >>> 0) {
    $5 = $5 + 1 | 0
   }
   $1 = $9;
   $9 = __wasm_i64_mul($24, $46, $30, $13);
   $1 = $1 + $9 | 0;
   $10 = i64toi32_i32$HIGH_BITS + $5 | 0;
   $10 = $1 >>> 0 < $9 >>> 0 ? $10 + 1 | 0 : $10;
   $17 = $1;
   $11 = __wasm_i64_mul($24, $46, $41, $42);
   $5 = i64toi32_i32$HIGH_BITS;
   $13 = __wasm_i64_mul($25, $45, $30, $13);
   $1 = $13 + $11 | 0;
   $9 = i64toi32_i32$HIGH_BITS + $5 | 0;
   $14 = $1;
   $9 = $1 >>> 0 < $13 >>> 0 ? $9 + 1 | 0 : $9;
   $1 = $9;
   $9 = ($5 | 0) == ($1 | 0) & $14 >>> 0 < $11 >>> 0 | $1 >>> 0 < $5 >>> 0;
   $5 = $17 + $1 | 0;
   $11 = $10 + $9 | 0;
   $9 = $5 >>> 0 < $1 >>> 0 ? $11 + 1 | 0 : $11;
   $17 = $5;
   $10 = $3 + $14 | 0;
   $11 = 0;
   $1 = $11 + $21 | 0;
   if ($1 >>> 0 < $11 >>> 0) {
    $10 = $10 + 1 | 0
   }
   $13 = $1;
   $5 = $1;
   $1 = $10;
   $3 = ($3 | 0) == ($1 | 0) & $5 >>> 0 < $21 >>> 0 | $1 >>> 0 < $3 >>> 0;
   $5 = $17 + $3 | 0;
   if ($5 >>> 0 < $3 >>> 0) {
    $9 = $9 + 1 | 0
   }
   $14 = $5;
   $11 = $1;
   $10 = 0;
   $5 = ($19 | 0) == ($18 | 0) & $35 >>> 0 < $44 >>> 0 | $18 >>> 0 < $19 >>> 0;
   $19 = $5 + (($19 | 0) == ($34 | 0) & $44 >>> 0 < $43 >>> 0 | $19 >>> 0 < $34 >>> 0) | 0;
   if ($19 >>> 0 < $5 >>> 0) {
    $10 = 1
   }
   $5 = $19 + (($2 | 0) == ($18 | 0) & $29 >>> 0 < $35 >>> 0 | $2 >>> 0 < $18 >>> 0) | 0;
   $3 = $2;
   $2 = $3 + $13 | 0;
   $11 = $5 + $11 | 0;
   $11 = $2 >>> 0 < $3 >>> 0 ? $11 + 1 | 0 : $11;
   $19 = $2;
   $3 = $2;
   $2 = $11;
   $1 = ($1 | 0) == ($2 | 0) & $3 >>> 0 < $13 >>> 0 | $2 >>> 0 < $1 >>> 0;
   $3 = $1 + $14 | 0;
   if ($3 >>> 0 < $1 >>> 0) {
    $9 = $9 + 1 | 0
   }
   $1 = $2;
   $10 = $9;
   $9 = $3;
   $5 = 0;
   $3 = ($4 | 0) == ($26 | 0) & $28 >>> 0 < $27 >>> 0 | $26 >>> 0 < $4 >>> 0;
   $4 = $3 + (($4 | 0) == ($22 | 0) & $27 >>> 0 < $33 >>> 0 | $4 >>> 0 < $22 >>> 0) | 0;
   if ($4 >>> 0 < $3 >>> 0) {
    $5 = 1
   }
   $3 = $4 + $19 | 0;
   $11 = $1 + $5 | 0;
   $11 = $3 >>> 0 < $4 >>> 0 ? $11 + 1 | 0 : $11;
   $1 = $3;
   $4 = $11;
   $1 = ($2 | 0) == ($4 | 0) & $1 >>> 0 < $19 >>> 0 | $4 >>> 0 < $2 >>> 0;
   $2 = $9 + $1 | 0;
   if ($2 >>> 0 < $1 >>> 0) {
    $10 = $10 + 1 | 0
   }
   $1 = $2;
   $2 = $10;
   label$14 : {
    if ($2 & 65536) {
     $16 = $16 + 1 | 0;
     break label$14;
    }
    $13 = $6 >>> 31 | 0;
    $10 = $2 << 1 | $1 >>> 31;
    $1 = $1 << 1 | $4 >>> 31;
    $2 = $10;
    $10 = $4 << 1 | $3 >>> 31;
    $3 = $3 << 1 | $8 >>> 31;
    $4 = $10;
    $9 = $20;
    $10 = $6 << 1 | $9 >>> 31;
    $20 = $9 << 1;
    $6 = $10;
    $9 = $8 << 1 | $7 >>> 31;
    $7 = $7 << 1 | $13;
    $8 = $9;
   }
   if (($16 | 0) >= 32767) {
    $15 = $15 | 2147418112;
    $1 = 0;
    $2 = 0;
    break label$2;
   }
   label$17 : {
    if (($16 | 0) <= 0) {
     $5 = 1 - $16 | 0;
     if ($5 >>> 0 <= 127) {
      $9 = $16 + 127 | 0;
      __ashlti3($12 + 48 | 0, $20, $6, $7, $8, $9);
      __ashlti3($12 + 32 | 0, $3, $4, $1, $2, $9);
      __lshrti3($12 + 16 | 0, $20, $6, $7, $8, $5);
      __lshrti3($12, $3, $4, $1, $2, $5);
      $20 = (HEAP32[$12 + 48 >> 2] | HEAP32[$12 + 56 >> 2]) != 0 | (HEAP32[$12 + 52 >> 2] | HEAP32[$12 + 60 >> 2]) != 0 | (HEAP32[$12 + 32 >> 2] | HEAP32[$12 + 16 >> 2]);
      $6 = HEAP32[$12 + 36 >> 2] | HEAP32[$12 + 20 >> 2];
      $7 = HEAP32[$12 + 40 >> 2] | HEAP32[$12 + 24 >> 2];
      $8 = HEAP32[$12 + 44 >> 2] | HEAP32[$12 + 28 >> 2];
      $3 = HEAP32[$12 >> 2];
      $4 = HEAP32[$12 + 4 >> 2];
      $2 = HEAP32[$12 + 12 >> 2];
      $1 = HEAP32[$12 + 8 >> 2];
      break label$17;
     }
     $1 = 0;
     $2 = 0;
     break label$2;
    }
    $2 = $2 & 65535 | $16 << 16;
   }
   $23 = $1 | $23;
   $15 = $2 | $15;
   if (!(!$7 & ($8 | 0) == -2147483648 ? !($6 | $20) : ($8 | 0) > -1 ? 1 : ($8 | 0) >= -1 ? ($7 >>> 0 <= 4294967295 ? 0 : 1) : 0)) {
    $11 = $15;
    $13 = $4;
    $1 = $3 + 1 | 0;
    if ($1 >>> 0 < 1) {
     $13 = $13 + 1 | 0
    }
    $2 = $13;
    $3 = ($4 | 0) == ($2 | 0) & $1 >>> 0 < $3 >>> 0 | $2 >>> 0 < $4 >>> 0;
    $4 = $3 + $23 | 0;
    if ($4 >>> 0 < $3 >>> 0) {
     $11 = $11 + 1 | 0
    }
    $23 = $4;
    $15 = $11;
    break label$2;
   }
   if ($7 | $20 | ($8 ^ -2147483648 | $6)) {
    $1 = $3;
    $2 = $4;
    break label$2;
   }
   $13 = $15;
   $10 = $4;
   $1 = $3 & 1;
   $2 = $1 + $3 | 0;
   if ($2 >>> 0 < $1 >>> 0) {
    $10 = $10 + 1 | 0
   }
   $1 = $2;
   $2 = $10;
   $3 = ($4 | 0) == ($2 | 0) & $1 >>> 0 < $3 >>> 0 | $2 >>> 0 < $4 >>> 0;
   $4 = $3 + $23 | 0;
   if ($4 >>> 0 < $3 >>> 0) {
    $13 = $13 + 1 | 0
   }
   $23 = $4;
   $15 = $13;
  }
  HEAP32[$0 >> 2] = $1;
  HEAP32[$0 + 4 >> 2] = $2;
  HEAP32[$0 + 8 >> 2] = $23;
  HEAP32[$0 + 12 >> 2] = $15;
  $0 = $12 + 96 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function __addtf3($0, $1, $2, $3, $4, $5, $6, $7, $8) {
  var $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
  $11 = global$0 - 112 | 0;
  $9 = $11;
  if ($9 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $9;
  $12 = $7;
  $14 = $8 & 2147483647;
  $10 = $2 + -1 | 0;
  $9 = $1 + -1 | 0;
  if ($9 >>> 0 < 4294967295) {
   $10 = $10 + 1 | 0
  }
  $13 = $9;
  $16 = ($9 | 0) == -1 & ($10 | 0) == -1;
  $15 = $4 & 2147483647;
  $9 = $15;
  $17 = $3;
  $10 = ($2 | 0) == ($10 | 0) & $13 >>> 0 < $1 >>> 0 | $10 >>> 0 < $2 >>> 0;
  $13 = $3 + $10 | 0;
  if ($13 >>> 0 < $10 >>> 0) {
   $9 = $9 + 1 | 0
  }
  $13 = $13 + -1 | 0;
  $10 = $9 + -1 | 0;
  $9 = $13;
  label$2 : {
   label$3 : {
    $10 = $9 >>> 0 < 4294967295 ? $10 + 1 | 0 : $10;
    if (!(($9 | 0) == -1 & ($10 | 0) == 2147418111 ? $16 : ($10 | 0) == 2147418111 & $9 >>> 0 > 4294967295 | $10 >>> 0 > 2147418111)) {
     $10 = $6 + -1 | 0;
     $9 = $5 + -1 | 0;
     if ($9 >>> 0 < 4294967295) {
      $10 = $10 + 1 | 0
     }
     $13 = $9;
     $16 = ($9 | 0) != -1 | ($10 | 0) != -1;
     $9 = $14;
     $10 = ($6 | 0) == ($10 | 0) & $13 >>> 0 < $5 >>> 0 | $10 >>> 0 < $6 >>> 0;
     $13 = $10 + $12 | 0;
     if ($13 >>> 0 < $10 >>> 0) {
      $9 = $9 + 1 | 0
     }
     $10 = $13 + -1 | 0;
     $9 = $9 + -1 | 0;
     $9 = $10 >>> 0 < 4294967295 ? $9 + 1 | 0 : $9;
     if (($10 | 0) == -1 & ($9 | 0) == 2147418111 ? $16 : ($9 | 0) == 2147418111 & $10 >>> 0 < 4294967295 | $9 >>> 0 < 2147418111) {
      break label$3
     }
    }
    if (!(!$17 & ($15 | 0) == 2147418112 ? !($1 | $2) : ($15 | 0) == 2147418112 & $17 >>> 0 < 0 | $15 >>> 0 < 2147418112)) {
     $7 = $3;
     $8 = $4 | 32768;
     $5 = $1;
     $6 = $2;
     break label$2;
    }
    if (!(!$12 & ($14 | 0) == 2147418112 ? !($5 | $6) : ($14 | 0) == 2147418112 & $12 >>> 0 < 0 | $14 >>> 0 < 2147418112)) {
     $8 = $8 | 32768;
     break label$2;
    }
    if (!($1 | $17 | ($15 ^ 2147418112 | $2))) {
     $9 = $3;
     $3 = !($1 ^ $5 | $3 ^ $7 | ($2 ^ $6 | $4 ^ $8 ^ -2147483648));
     $7 = $3 ? 0 : $9;
     $8 = $3 ? 2147450880 : $4;
     $5 = $3 ? 0 : $1;
     $6 = $3 ? 0 : $2;
     break label$2;
    }
    if (!($5 | $12 | ($14 ^ 2147418112 | $6))) {
     break label$2
    }
    if (!($1 | $17 | ($2 | $15))) {
     if ($5 | $12 | ($6 | $14)) {
      break label$2
     }
     $5 = $1 & $5;
     $6 = $2 & $6;
     $7 = $3 & $7;
     $8 = $4 & $8;
     break label$2;
    }
    if ($5 | $12 | ($6 | $14)) {
     break label$3
    }
    $5 = $1;
    $6 = $2;
    $7 = $3;
    $8 = $4;
    break label$2;
   }
   $10 = ($12 | 0) == ($17 | 0) & ($14 | 0) == ($15 | 0) ? ($2 | 0) == ($6 | 0) & $5 >>> 0 > $1 >>> 0 | $6 >>> 0 > $2 >>> 0 : ($14 | 0) == ($15 | 0) & $12 >>> 0 > $17 >>> 0 | $14 >>> 0 > $15 >>> 0;
   $9 = $10;
   $15 = $9 ? $5 : $1;
   $14 = $9 ? $6 : $2;
   $12 = $9 ? $8 : $4;
   $17 = $12;
   $18 = $9 ? $7 : $3;
   $13 = $18;
   $9 = $12 & 65535;
   $8 = $10 ? $4 : $8;
   $19 = $8;
   $4 = $10 ? $3 : $7;
   $16 = $8 >>> 16 & 32767;
   $12 = $12 >>> 16 & 32767;
   if (!$12) {
    $3 = !($9 | $13);
    $7 = $3 << 6;
    $8 = Math_clz32($3 ? $15 : $13) + 32 | 0;
    $3 = Math_clz32($3 ? $14 : $9);
    $3 = $7 + (($3 | 0) == 32 ? $8 : $3) | 0;
    __ashlti3($11 + 96 | 0, $15, $14, $13, $9, $3 + -15 | 0);
    $13 = HEAP32[$11 + 104 >> 2];
    $15 = HEAP32[$11 + 96 >> 2];
    $14 = HEAP32[$11 + 100 >> 2];
    $12 = 16 - $3 | 0;
    $9 = HEAP32[$11 + 108 >> 2];
   }
   $5 = $10 ? $1 : $5;
   $6 = $10 ? $2 : $6;
   $1 = $4;
   $2 = $19 & 65535;
   if ($16) {
    $3 = $1;
    $1 = $2;
   } else {
    $8 = $1;
    $3 = !($1 | $2);
    $7 = $3 << 6;
    $10 = Math_clz32($3 ? $5 : $1) + 32 | 0;
    $1 = Math_clz32($3 ? $6 : $2);
    $1 = $7 + (($1 | 0) == 32 ? $10 : $1) | 0;
    __ashlti3($11 + 80 | 0, $5, $6, $8, $2, $1 + -15 | 0);
    $16 = 16 - $1 | 0;
    $5 = HEAP32[$11 + 80 >> 2];
    $6 = HEAP32[$11 + 84 >> 2];
    $3 = HEAP32[$11 + 88 >> 2];
    $1 = HEAP32[$11 + 92 >> 2];
   }
   $2 = $3;
   $10 = $1 << 3 | $2 >>> 29;
   $7 = $2 << 3 | $6 >>> 29;
   $8 = $10 | 524288;
   $1 = $13;
   $3 = $9 << 3 | $1 >>> 29;
   $10 = $1 << 3 | $14 >>> 29;
   $20 = $3;
   $18 = $4 ^ $18;
   $13 = $17 ^ $19;
   $1 = $5;
   $9 = $6 << 3 | $1 >>> 29;
   $1 = $1 << 3;
   $2 = $9;
   $4 = $12 - $16 | 0;
   $3 = $1;
   label$12 : {
    if (!$4) {
     break label$12
    }
    if ($4 >>> 0 > 127) {
     $7 = 0;
     $8 = 0;
     $9 = 0;
     $3 = 1;
     break label$12;
    }
    __ashlti3($11 - -64 | 0, $1, $2, $7, $8, 128 - $4 | 0);
    __lshrti3($11 + 48 | 0, $1, $2, $7, $8, $4);
    $7 = HEAP32[$11 + 56 >> 2];
    $8 = HEAP32[$11 + 60 >> 2];
    $9 = HEAP32[$11 + 52 >> 2];
    $3 = HEAP32[$11 + 48 >> 2] | ((HEAP32[$11 + 64 >> 2] | HEAP32[$11 + 72 >> 2]) != 0 | (HEAP32[$11 + 68 >> 2] | HEAP32[$11 + 76 >> 2]) != 0);
   }
   $6 = $9;
   $4 = $10;
   $16 = $20 | 524288;
   $1 = $15;
   $9 = $14 << 3 | $1 >>> 29;
   $2 = $1 << 3;
   label$14 : {
    if (($13 | 0) < -1 ? 1 : ($13 | 0) <= -1 ? ($18 >>> 0 > 4294967295 ? 0 : 1) : 0) {
     $14 = $3;
     $1 = $2 - $3 | 0;
     $15 = $4 - $7 | 0;
     $3 = ($6 | 0) == ($9 | 0) & $2 >>> 0 < $3 >>> 0 | $9 >>> 0 < $6 >>> 0;
     $5 = $15 - $3 | 0;
     $2 = $9 - (($2 >>> 0 < $14 >>> 0) + $6 | 0) | 0;
     $6 = ($16 - (($4 >>> 0 < $7 >>> 0) + $8 | 0) | 0) - ($15 >>> 0 < $3 >>> 0) | 0;
     if (!($1 | $5 | ($2 | $6))) {
      $5 = 0;
      $6 = 0;
      $7 = 0;
      $8 = 0;
      break label$2;
     }
     if (($6 | 0) == 524287 & $5 >>> 0 > 4294967295 | $6 >>> 0 > 524287) {
      break label$14
     }
     $7 = $1;
     $3 = !($5 | $6);
     $4 = $3 << 6;
     $8 = Math_clz32($3 ? $1 : $5) + 32 | 0;
     $1 = Math_clz32($3 ? $2 : $6);
     $1 = $4 + (($1 | 0) == 32 ? $8 : $1) | 0;
     $1 = $1 + -12 | 0;
     __ashlti3($11 + 32 | 0, $7, $2, $5, $6, $1);
     $12 = $12 - $1 | 0;
     $5 = HEAP32[$11 + 40 >> 2];
     $6 = HEAP32[$11 + 44 >> 2];
     $1 = HEAP32[$11 + 32 >> 2];
     $2 = HEAP32[$11 + 36 >> 2];
     break label$14;
    }
    $10 = $6 + $9 | 0;
    $1 = $3;
    $2 = $1 + $2 | 0;
    if ($2 >>> 0 < $1 >>> 0) {
     $10 = $10 + 1 | 0
    }
    $1 = $2;
    $2 = $10;
    $6 = ($6 | 0) == ($2 | 0) & $1 >>> 0 < $3 >>> 0 | $2 >>> 0 < $6 >>> 0;
    $10 = $8 + $16 | 0;
    $3 = $4 + $7 | 0;
    if ($3 >>> 0 < $4 >>> 0) {
     $10 = $10 + 1 | 0
    }
    $5 = $3;
    $4 = $6 + $3 | 0;
    $3 = $10;
    $3 = $4 >>> 0 < $5 >>> 0 ? $3 + 1 | 0 : $3;
    $5 = $4;
    $6 = $3;
    if (!($3 & 1048576)) {
     break label$14
    }
    $1 = $1 & 1 | (($2 & 1) << 31 | $1 >>> 1);
    $2 = $5 << 31 | $2 >>> 1;
    $12 = $12 + 1 | 0;
    $5 = ($6 & 1) << 31 | $5 >>> 1;
    $6 = $6 >>> 1 | 0;
   }
   $7 = 0;
   $9 = $17 & -2147483648;
   if (($12 | 0) >= 32767) {
    $8 = $9 | 2147418112;
    $5 = 0;
    $6 = 0;
    break label$2;
   }
   $4 = 0;
   label$18 : {
    if (($12 | 0) > 0) {
     $4 = $12;
     break label$18;
    }
    __ashlti3($11 + 16 | 0, $1, $2, $5, $6, $12 + 127 | 0);
    __lshrti3($11, $1, $2, $5, $6, 1 - $12 | 0);
    $1 = HEAP32[$11 >> 2] | ((HEAP32[$11 + 16 >> 2] | HEAP32[$11 + 24 >> 2]) != 0 | (HEAP32[$11 + 20 >> 2] | HEAP32[$11 + 28 >> 2]) != 0);
    $2 = HEAP32[$11 + 4 >> 2];
    $5 = HEAP32[$11 + 8 >> 2];
    $6 = HEAP32[$11 + 12 >> 2];
   }
   $7 = $7 | (($6 & 7) << 29 | $5 >>> 3);
   $4 = $9 | $6 >>> 3 & 65535 | $4 << 16;
   $9 = $5 << 29;
   $3 = 0;
   $5 = $9;
   $6 = ($2 & 7) << 29 | $1 >>> 3 | $3;
   $9 = $4;
   $3 = $2 >>> 3 | $5;
   $10 = $3;
   $4 = $1 & 7;
   $1 = $4 >>> 0 > 4;
   $2 = $1 + $6 | 0;
   if ($2 >>> 0 < $1 >>> 0) {
    $10 = $10 + 1 | 0
   }
   $1 = $2;
   $2 = $10;
   $3 = ($3 | 0) == ($2 | 0) & $1 >>> 0 < $6 >>> 0 | $2 >>> 0 < $3 >>> 0;
   $5 = $3 + $7 | 0;
   if ($5 >>> 0 < $3 >>> 0) {
    $9 = $9 + 1 | 0
   }
   $4 = ($4 | 0) == 4;
   $3 = $4 ? $1 & 1 : 0;
   $8 = $9;
   $7 = $5;
   $4 = 0;
   $9 = $2 + $4 | 0;
   $2 = $1 + $3 | 0;
   if ($2 >>> 0 < $1 >>> 0) {
    $9 = $9 + 1 | 0
   }
   $5 = $2;
   $1 = $2;
   $6 = $9;
   $1 = ($4 | 0) == ($9 | 0) & $1 >>> 0 < $3 >>> 0 | $9 >>> 0 < $4 >>> 0;
   $2 = $7 + $1 | 0;
   if ($2 >>> 0 < $1 >>> 0) {
    $8 = $8 + 1 | 0
   }
   $7 = $2;
  }
  HEAP32[$0 >> 2] = $5;
  HEAP32[$0 + 4 >> 2] = $6;
  HEAP32[$0 + 8 >> 2] = $7;
  HEAP32[$0 + 12 >> 2] = $8;
  $0 = $11 + 112 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function __extenddftf2($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
  $7 = global$0 - 16 | 0;
  $2 = $7;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  wasm2js_scratch_store_f64(+$1);
  $3 = wasm2js_scratch_load_i32(1) | 0;
  $8 = wasm2js_scratch_load_i32(0) | 0;
  $9 = $3 & -2147483648;
  $4 = $3 & 2147483647;
  $2 = $4;
  $5 = $2 + -1048576 | 0;
  $4 = $8;
  $6 = $4;
  if ($4 >>> 0 < 0) {
   $5 = $5 + 1 | 0
  }
  label$2 : {
   if (($5 | 0) == 2145386495 & $6 >>> 0 <= 4294967295 | $5 >>> 0 < 2145386495) {
    $5 = $4 << 28;
    $6 = 0;
    $3 = ($2 & 15) << 28 | $4 >>> 4;
    $2 = ($2 >>> 4 | 0) + 1006632960 | 0;
    $2 = $3 >>> 0 < 0 ? $2 + 1 | 0 : $2;
    break label$2;
   }
   if (($2 | 0) == 2146435072 & $4 >>> 0 >= 0 | $2 >>> 0 > 2146435072) {
    $6 = 0;
    $5 = $8 << 28;
    $2 = $3 >>> 4 | 0;
    $3 = ($3 & 15) << 28 | $8 >>> 4;
    $2 = $2 | 2147418112;
    break label$2;
   }
   if (!($2 | $4)) {
    $6 = 0;
    $5 = 0;
    $3 = 0;
    $2 = 0;
    break label$2;
   }
   $6 = $2;
   $2 = ($2 | 0) == 1 & $4 >>> 0 >= 0 | $2 >>> 0 > 1 ? Math_clz32($2) : Math_clz32($8) + 32 | 0;
   __ashlti3($7, $4, $6, 0, 0, $2 + 49 | 0);
   $6 = HEAP32[$7 >> 2];
   $5 = HEAP32[$7 + 4 >> 2];
   $3 = HEAP32[$7 + 8 >> 2];
   $2 = HEAP32[$7 + 12 >> 2] ^ 65536 | 15372 - $2 << 16;
  }
  HEAP32[$0 >> 2] = $6;
  HEAP32[$0 + 4 >> 2] = $5;
  HEAP32[$0 + 8 >> 2] = $3 | $10;
  HEAP32[$0 + 12 >> 2] = $2 | $9;
  $0 = $7 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function __letf2($0, $1, $2, $3, $4, $5, $6, $7) {
  var $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
  $9 = 1;
  $8 = $3 & 2147483647;
  $12 = $8;
  $10 = $2;
  label$1 : {
   if (!$2 & ($8 | 0) == 2147418112 ? $0 | $1 : ($8 | 0) == 2147418112 & $2 >>> 0 > 0 | $8 >>> 0 > 2147418112) {
    break label$1
   }
   $11 = $7 & 2147483647;
   $13 = $11;
   $8 = $6;
   if (!$6 & ($11 | 0) == 2147418112 ? $4 | $5 : ($11 | 0) == 2147418112 & $6 >>> 0 > 0 | $11 >>> 0 > 2147418112) {
    break label$1
   }
   if (!($0 | $4 | ($8 | $10) | ($1 | $5 | ($12 | $13)))) {
    return 0
   }
   $10 = $3 & $7;
   if (($10 | 0) > 0 ? 1 : ($10 | 0) >= 0 ? (($2 & $6) >>> 0 < 0 ? 0 : 1) : 0) {
    $9 = -1;
    if (($2 | 0) == ($6 | 0) & ($3 | 0) == ($7 | 0) ? ($1 | 0) == ($5 | 0) & $0 >>> 0 < $4 >>> 0 | $1 >>> 0 < $5 >>> 0 : ($3 | 0) < ($7 | 0) ? 1 : ($3 | 0) <= ($7 | 0) ? ($2 >>> 0 >= $6 >>> 0 ? 0 : 1) : 0) {
     break label$1
    }
    return ($0 ^ $4 | $2 ^ $6) != 0 | ($1 ^ $5 | $3 ^ $7) != 0;
   }
   $9 = -1;
   if (($2 | 0) == ($6 | 0) & ($3 | 0) == ($7 | 0) ? ($1 | 0) == ($5 | 0) & $0 >>> 0 > $4 >>> 0 | $1 >>> 0 > $5 >>> 0 : ($3 | 0) > ($7 | 0) ? 1 : ($3 | 0) >= ($7 | 0) ? ($2 >>> 0 <= $6 >>> 0 ? 0 : 1) : 0) {
    break label$1
   }
   $9 = ($0 ^ $4 | $2 ^ $6) != 0 | ($1 ^ $5 | $3 ^ $7) != 0;
  }
  return $9;
 }
 
 function __getf2($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0;
  $6 = -1;
  $4 = $3 & 2147483647;
  $7 = $4;
  $5 = $2;
  label$1 : {
   if (!$2 & ($4 | 0) == 2147418112 ? $0 | $1 : ($4 | 0) == 2147418112 & $2 >>> 0 > 0 | $4 >>> 0 > 2147418112) {
    break label$1
   }
   if (!($0 | $5 | ($1 | ($7 | 1073610752)))) {
    return 0
   }
   $5 = $3 & 1073610752;
   if (($5 | 0) > 0 ? 1 : ($5 | 0) >= 0 ? 1 : 0) {
    if (!$2 & ($3 | 0) == 1073610752 ? !$1 & $0 >>> 0 < 0 | $1 >>> 0 < 0 : ($3 | 0) < 1073610752 ? 1 : ($3 | 0) <= 1073610752 ? ($2 >>> 0 >= 0 ? 0 : 1) : 0) {
     break label$1
    }
    return ($0 | $2) != 0 | ($1 | $3 ^ 1073610752) != 0;
   }
   if (!$2 & ($3 | 0) == 1073610752 ? !$1 & $0 >>> 0 > 0 | $1 >>> 0 > 0 : ($3 | 0) > 1073610752 ? 1 : ($3 | 0) >= 1073610752 ? ($2 >>> 0 <= 0 ? 0 : 1) : 0) {
    break label$1
   }
   $6 = ($0 | $2) != 0 | ($1 | $3 ^ 1073610752) != 0;
  }
  return $6;
 }
 
 function copysignl($0, $1, $2, $3, $4, $5, $6, $7, $8) {
  HEAP32[$0 >> 2] = $1;
  HEAP32[$0 + 4 >> 2] = $2;
  HEAP32[$0 + 8 >> 2] = $3;
  HEAP32[$0 + 12 >> 2] = $4 & 65535 | ($8 >>> 16 & 32768 | $4 >>> 16 & 32767) << 16;
 }
 
 function __floatunsitf($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
  $2 = global$0 - 16 | 0;
  $4 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  $4 = $0;
  $7 = $0;
  label$2 : {
   if (!$1) {
    $1 = 0;
    $3 = 0;
    break label$2;
   }
   $3 = $1;
   $1 = Math_clz32($1) ^ 31;
   __ashlti3($2, $3, 0, 0, 0, 112 - $1 | 0);
   $1 = (HEAP32[$2 + 12 >> 2] ^ 65536) + ($1 + 16383 << 16) | 0;
   $5 = 0 + HEAP32[$2 + 8 >> 2] | 0;
   if ($5 >>> 0 < $6 >>> 0) {
    $1 = $1 + 1 | 0
   }
   $6 = HEAP32[$2 + 4 >> 2];
   $3 = HEAP32[$2 >> 2];
  }
  HEAP32[$7 >> 2] = $3;
  HEAP32[$4 + 4 >> 2] = $6;
  HEAP32[$0 + 8 >> 2] = $5;
  HEAP32[$0 + 12 >> 2] = $1;
  $0 = $2 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function __subtf3($0, $1, $2, $3, $4, $5, $6, $7, $8) {
  var $9 = 0, $10 = 0;
  $9 = global$0 - 16 | 0;
  $10 = $9;
  if ($9 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $10;
  __addtf3($9, $1, $2, $3, $4, $5, $6, $7, $8 ^ -2147483648);
  $1 = HEAP32[$9 >> 2];
  $2 = HEAP32[$9 + 4 >> 2];
  $3 = HEAP32[$9 + 12 >> 2];
  HEAP32[$0 + 8 >> 2] = HEAP32[$9 + 8 >> 2];
  HEAP32[$0 + 12 >> 2] = $3;
  HEAP32[$0 >> 2] = $1;
  HEAP32[$0 + 4 >> 2] = $2;
  $0 = $9 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function scalbnl($0, $1, $2, $3, $4, $5) {
  var $6 = 0, $7 = 0;
  $6 = global$0 - 80 | 0;
  $7 = $6;
  if ($6 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $7;
  label$2 : {
   if (($5 | 0) >= 16384) {
    __multf3($6 + 32 | 0, $1, $2, $3, $4, 0, 0, 0, 2147352576);
    $3 = HEAP32[$6 + 40 >> 2];
    $4 = HEAP32[$6 + 44 >> 2];
    $1 = HEAP32[$6 + 32 >> 2];
    $2 = HEAP32[$6 + 36 >> 2];
    if (($5 | 0) < 32767) {
     $5 = $5 + -16383 | 0;
     break label$2;
    }
    __multf3($6 + 16 | 0, $1, $2, $3, $4, 0, 0, 0, 2147352576);
    $5 = (($5 | 0) < 49149 ? $5 : 49149) + -32766 | 0;
    $3 = HEAP32[$6 + 24 >> 2];
    $4 = HEAP32[$6 + 28 >> 2];
    $1 = HEAP32[$6 + 16 >> 2];
    $2 = HEAP32[$6 + 20 >> 2];
    break label$2;
   }
   if (($5 | 0) > -16383) {
    break label$2
   }
   __multf3($6 - -64 | 0, $1, $2, $3, $4, 0, 0, 0, 65536);
   $3 = HEAP32[$6 + 72 >> 2];
   $4 = HEAP32[$6 + 76 >> 2];
   $1 = HEAP32[$6 + 64 >> 2];
   $2 = HEAP32[$6 + 68 >> 2];
   if (($5 | 0) > -32765) {
    $5 = $5 + 16382 | 0;
    break label$2;
   }
   __multf3($6 + 48 | 0, $1, $2, $3, $4, 0, 0, 0, 65536);
   $5 = (($5 | 0) > -49146 ? $5 : -49146) + 32764 | 0;
   $3 = HEAP32[$6 + 56 >> 2];
   $4 = HEAP32[$6 + 60 >> 2];
   $1 = HEAP32[$6 + 48 >> 2];
   $2 = HEAP32[$6 + 52 >> 2];
  }
  __multf3($6, $1, $2, $3, $4, 0, 0, 0, $5 + 16383 << 16);
  $1 = HEAP32[$6 + 12 >> 2];
  HEAP32[$0 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
  HEAP32[$0 + 12 >> 2] = $1;
  $1 = HEAP32[$6 + 4 >> 2];
  HEAP32[$0 >> 2] = HEAP32[$6 >> 2];
  HEAP32[$0 + 4 >> 2] = $1;
  $0 = $6 + 80 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function __divtf3($0, $1, $2, $3, $4, $5, $6, $7, $8) {
  var $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0;
  $13 = global$0 - 192 | 0;
  $9 = $13;
  if ($9 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $9;
  $29 = $7;
  $33 = $8 & 65535;
  $20 = $3;
  $14 = $4 & 65535;
  $27 = ($4 ^ $8) & -2147483648;
  $17 = $8 >>> 16 & 32767;
  label$2 : {
   $15 = $4 >>> 16 & 32767;
   label$3 : {
    label$4 : {
     if ($15 + -1 >>> 0 <= 32765) {
      if ($17 + -1 >>> 0 < 32766) {
       break label$4
      }
     }
     $10 = $4 & 2147483647;
     $11 = $10;
     $9 = $3;
     if (!(!$9 & ($10 | 0) == 2147418112 ? !($1 | $2) : ($10 | 0) == 2147418112 & $9 >>> 0 < 0 | $10 >>> 0 < 2147418112)) {
      $34 = $3;
      $27 = $4 | 32768;
      break label$3;
     }
     $10 = $8 & 2147483647;
     $4 = $10;
     $3 = $7;
     if (!(!$3 & ($10 | 0) == 2147418112 ? !($5 | $6) : ($10 | 0) == 2147418112 & $3 >>> 0 < 0 | $10 >>> 0 < 2147418112)) {
      $34 = $7;
      $27 = $8 | 32768;
      $1 = $5;
      $2 = $6;
      break label$3;
     }
     if (!($1 | $9 | ($11 ^ 2147418112 | $2))) {
      if (!($3 | $5 | ($4 ^ 2147418112 | $6))) {
       $1 = 0;
       $2 = 0;
       $27 = 2147450880;
       break label$3;
      }
      $27 = $27 | 2147418112;
      $1 = 0;
      $2 = 0;
      break label$3;
     }
     if (!($3 | $5 | ($4 ^ 2147418112 | $6))) {
      $1 = 0;
      $2 = 0;
      break label$3;
     }
     if (!($1 | $9 | ($2 | $11))) {
      break label$2
     }
     if (!($3 | $5 | ($4 | $6))) {
      $27 = $27 | 2147418112;
      $1 = 0;
      $2 = 0;
      break label$3;
     }
     $10 = 0;
     if (($11 | 0) == 65535 & $9 >>> 0 <= 4294967295 | $11 >>> 0 < 65535) {
      $9 = $1;
      $7 = !($14 | $20);
      $8 = $7 << 6;
      $10 = Math_clz32($7 ? $1 : $20) + 32 | 0;
      $1 = Math_clz32($7 ? $2 : $14);
      $1 = $8 + (($1 | 0) == 32 ? $10 : $1) | 0;
      __ashlti3($13 + 176 | 0, $9, $2, $20, $14, $1 + -15 | 0);
      $10 = 16 - $1 | 0;
      $20 = HEAP32[$13 + 184 >> 2];
      $14 = HEAP32[$13 + 188 >> 2];
      $2 = HEAP32[$13 + 180 >> 2];
      $1 = HEAP32[$13 + 176 >> 2];
     }
     if (($4 | 0) == 65535 & $3 >>> 0 > 4294967295 | $4 >>> 0 > 65535) {
      break label$4
     }
     $3 = !($29 | $33);
     $4 = $3 << 6;
     $7 = Math_clz32($3 ? $5 : $29) + 32 | 0;
     $3 = Math_clz32($3 ? $6 : $33);
     $3 = $4 + (($3 | 0) == 32 ? $7 : $3) | 0;
     __ashlti3($13 + 160 | 0, $5, $6, $29, $33, $3 + -15 | 0);
     $10 = ($3 + $10 | 0) + -16 | 0;
     $29 = HEAP32[$13 + 168 >> 2];
     $33 = HEAP32[$13 + 172 >> 2];
     $5 = HEAP32[$13 + 160 >> 2];
     $6 = HEAP32[$13 + 164 >> 2];
    }
    $4 = $33 | 65536;
    $32 = $4;
    $38 = $29;
    $3 = $29;
    $12 = $4 << 15 | $3 >>> 17;
    $3 = $3 << 15 | $6 >>> 17;
    $7 = -102865788 - $3 | 0;
    $4 = $12;
    $9 = $4;
    $8 = 1963258675 - ($9 + (4192101508 < $3 >>> 0) | 0) | 0;
    __multi3($13 + 144 | 0, $3, $9, $7, $8);
    $9 = HEAP32[$13 + 152 >> 2];
    __multi3($13 + 128 | 0, 0 - $9 | 0, 0 - (HEAP32[$13 + 156 >> 2] + (0 < $9 >>> 0) | 0) | 0, $7, $8);
    $7 = HEAP32[$13 + 136 >> 2];
    $8 = $7 << 1 | HEAP32[$13 + 132 >> 2] >>> 31;
    $7 = HEAP32[$13 + 140 >> 2] << 1 | $7 >>> 31;
    __multi3($13 + 112 | 0, $8, $7, $3, $4);
    $9 = $7;
    $7 = HEAP32[$13 + 120 >> 2];
    __multi3($13 + 96 | 0, $8, $9, 0 - $7 | 0, 0 - (HEAP32[$13 + 124 >> 2] + (0 < $7 >>> 0) | 0) | 0);
    $7 = HEAP32[$13 + 104 >> 2];
    $11 = HEAP32[$13 + 108 >> 2] << 1 | $7 >>> 31;
    $8 = $7 << 1 | HEAP32[$13 + 100 >> 2] >>> 31;
    $7 = $11;
    __multi3($13 + 80 | 0, $8, $7, $3, $4);
    $7 = HEAP32[$13 + 88 >> 2];
    __multi3($13 - -64 | 0, $8, $11, 0 - $7 | 0, 0 - (HEAP32[$13 + 92 >> 2] + (0 < $7 >>> 0) | 0) | 0);
    $7 = HEAP32[$13 + 72 >> 2];
    $8 = $7 << 1 | HEAP32[$13 + 68 >> 2] >>> 31;
    $7 = HEAP32[$13 + 76 >> 2] << 1 | $7 >>> 31;
    __multi3($13 + 48 | 0, $8, $7, $3, $4);
    $9 = $7;
    $7 = HEAP32[$13 + 56 >> 2];
    __multi3($13 + 32 | 0, $8, $9, 0 - $7 | 0, 0 - (HEAP32[$13 + 60 >> 2] + (0 < $7 >>> 0) | 0) | 0);
    $7 = HEAP32[$13 + 40 >> 2];
    $11 = HEAP32[$13 + 44 >> 2] << 1 | $7 >>> 31;
    $8 = $7 << 1 | HEAP32[$13 + 36 >> 2] >>> 31;
    $7 = $11;
    __multi3($13 + 16 | 0, $8, $7, $3, $4);
    $7 = HEAP32[$13 + 24 >> 2];
    __multi3($13, $8, $11, 0 - $7 | 0, 0 - (HEAP32[$13 + 28 >> 2] + (0 < $7 >>> 0) | 0) | 0);
    $36 = ($15 - $17 | 0) + $10 | 0;
    $7 = HEAP32[$13 + 8 >> 2];
    $9 = HEAP32[$13 + 12 >> 2] << 1 | $7 >>> 31;
    $8 = $7 << 1;
    $10 = $9 + -1 | 0;
    $8 = (HEAP32[$13 + 4 >> 2] >>> 31 | $8) + -1 | 0;
    if ($8 >>> 0 < 4294967295) {
     $10 = $10 + 1 | 0
    }
    $7 = $8;
    $9 = 0;
    $23 = $9;
    $21 = $4;
    $12 = 0;
    $18 = __wasm_i64_mul($7, $9, $4, $12);
    $4 = i64toi32_i32$HIGH_BITS;
    $16 = $4;
    $22 = $10;
    $17 = 0;
    $9 = $3;
    $15 = 0;
    $7 = __wasm_i64_mul($10, $17, $9, $15);
    $3 = $7 + $18 | 0;
    $10 = i64toi32_i32$HIGH_BITS + $4 | 0;
    $10 = $3 >>> 0 < $7 >>> 0 ? $10 + 1 | 0 : $10;
    $7 = $3;
    $3 = $10;
    $10 = $7;
    $15 = __wasm_i64_mul($8, $23, $9, $15);
    $4 = 0 + $15 | 0;
    $9 = i64toi32_i32$HIGH_BITS + $10 | 0;
    $9 = $4 >>> 0 < $15 >>> 0 ? $9 + 1 | 0 : $9;
    $15 = $4;
    $4 = $9;
    $11 = ($10 | 0) == ($9 | 0) & $15 >>> 0 < $25 >>> 0 | $9 >>> 0 < $10 >>> 0;
    $12 = __wasm_i64_mul($22, $17, $21, $12);
    $10 = ($3 | 0) == ($16 | 0) & $10 >>> 0 < $18 >>> 0 | $3 >>> 0 < $16 >>> 0;
    $18 = 0;
    $9 = $11;
    $11 = $10 + i64toi32_i32$HIGH_BITS | 0;
    $7 = $3 | $18;
    $3 = $7 + $12 | 0;
    if ($3 >>> 0 < $7 >>> 0) {
     $11 = $11 + 1 | 0
    }
    $7 = $3;
    $3 = $9 + $3 | 0;
    $9 = $11;
    $30 = $3;
    $7 = $3 >>> 0 < $7 >>> 0 ? $9 + 1 | 0 : $9;
    $3 = $6;
    $31 = ($3 & 131071) << 15 | $5 >>> 17;
    $25 = __wasm_i64_mul($8, $23, $31, 0);
    $3 = i64toi32_i32$HIGH_BITS;
    $21 = $3;
    $10 = $5;
    $19 = $10 << 15 & -32768;
    $11 = __wasm_i64_mul($22, $17, $19, 0);
    $9 = $11 + $25 | 0;
    $10 = i64toi32_i32$HIGH_BITS + $3 | 0;
    $10 = $9 >>> 0 < $11 >>> 0 ? $10 + 1 | 0 : $10;
    $11 = $9;
    $3 = $10;
    $24 = __wasm_i64_mul($8, $23, $19, $24);
    $19 = 0 + $24 | 0;
    $10 = i64toi32_i32$HIGH_BITS + $9 | 0;
    $9 = $19;
    $10 = $9 >>> 0 < $24 >>> 0 ? $10 + 1 | 0 : $10;
    $10 = ($11 | 0) == ($10 | 0) & $9 >>> 0 < $26 >>> 0 | $10 >>> 0 < $11 >>> 0;
    $16 = __wasm_i64_mul($22, $17, $31, $28);
    $9 = ($3 | 0) == ($21 | 0) & $11 >>> 0 < $25 >>> 0 | $3 >>> 0 < $21 >>> 0;
    $12 = $3;
    $3 = $16 + $3 | 0;
    $11 = $9 + i64toi32_i32$HIGH_BITS | 0;
    $11 = $3 >>> 0 < $12 >>> 0 ? $11 + 1 | 0 : $11;
    $9 = $3;
    $3 = $10 + $9 | 0;
    $12 = $3 >>> 0 < $9 >>> 0 ? $11 + 1 | 0 : $11;
    $10 = $3;
    $3 = $3 + $15 | 0;
    $9 = $12 + $4 | 0;
    $9 = $3 >>> 0 < $10 >>> 0 ? $9 + 1 | 0 : $9;
    $18 = $3;
    $10 = $7;
    $16 = $9;
    $3 = ($4 | 0) == ($9 | 0) & $3 >>> 0 < $15 >>> 0 | $9 >>> 0 < $4 >>> 0;
    $4 = $3 + $30 | 0;
    if ($4 >>> 0 < $3 >>> 0) {
     $10 = $10 + 1 | 0
    }
    $9 = $10;
    $3 = ($18 | 0) != 0 | ($16 | 0) != 0;
    $4 = $4 + $3 | 0;
    if ($4 >>> 0 < $3 >>> 0) {
     $9 = $9 + 1 | 0
    }
    $3 = 0 - $4 | 0;
    $4 = 0 - ((0 < $4 >>> 0) + $9 | 0) | 0;
    $9 = $3;
    $12 = 0;
    $7 = __wasm_i64_mul($9, $12, $8, $23);
    $10 = i64toi32_i32$HIGH_BITS;
    $25 = $10;
    $15 = $10;
    $21 = __wasm_i64_mul($22, $17, $9, $12);
    $9 = i64toi32_i32$HIGH_BITS;
    $26 = $9;
    $10 = $9;
    $19 = $4;
    $9 = 0;
    $4 = __wasm_i64_mul($8, $23, $4, $9);
    $3 = $4 + $21 | 0;
    $10 = i64toi32_i32$HIGH_BITS + $10 | 0;
    $10 = $3 >>> 0 < $4 >>> 0 ? $10 + 1 | 0 : $10;
    $4 = $3;
    $30 = 0;
    $3 = $30 + $7 | 0;
    $11 = $4 + $15 | 0;
    $15 = $3;
    $12 = $3;
    $11 = $3 >>> 0 < $30 >>> 0 ? $11 + 1 | 0 : $11;
    $3 = $11;
    $11 = ($25 | 0) == ($3 | 0) & $12 >>> 0 < $7 >>> 0 | $3 >>> 0 < $25 >>> 0;
    $7 = __wasm_i64_mul($22, $17, $19, $9);
    $12 = ($10 | 0) == ($26 | 0) & $4 >>> 0 < $21 >>> 0 | $10 >>> 0 < $26 >>> 0;
    $4 = $7 + $10 | 0;
    $9 = $12 + i64toi32_i32$HIGH_BITS | 0;
    $9 = $4 >>> 0 < $10 >>> 0 ? $9 + 1 | 0 : $9;
    $7 = $4;
    $4 = $11 + $4 | 0;
    if ($4 >>> 0 < $7 >>> 0) {
     $9 = $9 + 1 | 0
    }
    $31 = $4;
    $7 = $9;
    $4 = 0 - $18 | 0;
    $28 = 0 - ((0 < $18 >>> 0) + $16 | 0) | 0;
    $18 = 0;
    $19 = __wasm_i64_mul($28, $18, $8, $23);
    $26 = i64toi32_i32$HIGH_BITS;
    $16 = $4;
    $24 = 0;
    $9 = __wasm_i64_mul($4, $24, $22, $17);
    $4 = $9 + $19 | 0;
    $10 = i64toi32_i32$HIGH_BITS + $26 | 0;
    $11 = $4;
    $4 = $4 >>> 0 < $9 >>> 0 ? $10 + 1 | 0 : $10;
    $9 = $11;
    $16 = __wasm_i64_mul($8, $23, $16, $24);
    $8 = 0 + $16 | 0;
    $10 = i64toi32_i32$HIGH_BITS + $9 | 0;
    $10 = $8 >>> 0 < $16 >>> 0 ? $10 + 1 | 0 : $10;
    $10 = ($10 | 0) == ($9 | 0) & $8 >>> 0 < $30 >>> 0 | $10 >>> 0 < $9 >>> 0;
    $11 = __wasm_i64_mul($28, $18, $22, $17);
    $9 = ($4 | 0) == ($26 | 0) & $9 >>> 0 < $19 >>> 0 | $4 >>> 0 < $26 >>> 0;
    $8 = $4;
    $4 = $11 + $4 | 0;
    $12 = $9 + i64toi32_i32$HIGH_BITS | 0;
    $12 = $4 >>> 0 < $8 >>> 0 ? $12 + 1 | 0 : $12;
    $8 = $4;
    $4 = $10 + $4 | 0;
    $9 = $12;
    $9 = $4 >>> 0 < $8 >>> 0 ? $9 + 1 | 0 : $9;
    $8 = $4;
    $4 = $4 + $15 | 0;
    $9 = $9 + $3 | 0;
    $9 = $4 >>> 0 < $8 >>> 0 ? $9 + 1 | 0 : $9;
    $8 = $4;
    $10 = $7;
    $4 = $9;
    $3 = ($3 | 0) == ($9 | 0) & $8 >>> 0 < $15 >>> 0 | $9 >>> 0 < $3 >>> 0;
    $7 = $3 + $31 | 0;
    if ($7 >>> 0 < $3 >>> 0) {
     $10 = $10 + 1 | 0
    }
    $3 = $7;
    $9 = $10;
    $10 = $3;
    $11 = $4 + -1 | 0;
    $3 = $8 + -2 | 0;
    if ($3 >>> 0 < 4294967294) {
     $11 = $11 + 1 | 0
    }
    $16 = $3;
    $7 = $3;
    $3 = $11;
    $4 = ($4 | 0) == ($3 | 0) & $7 >>> 0 < $8 >>> 0 | $3 >>> 0 < $4 >>> 0;
    $7 = $10 + $4 | 0;
    if ($7 >>> 0 < $4 >>> 0) {
     $9 = $9 + 1 | 0
    }
    $4 = $7 + -1 | 0;
    $10 = $9 + -1 | 0;
    $10 = $4 >>> 0 < 4294967295 ? $10 + 1 | 0 : $10;
    $7 = 0;
    $22 = $7;
    $17 = $4;
    $8 = $20;
    $19 = $8 << 2 | $2 >>> 30;
    $12 = __wasm_i64_mul($4, $7, $19, 0);
    $7 = i64toi32_i32$HIGH_BITS;
    $18 = $7;
    $11 = $7;
    $7 = $2;
    $31 = ($7 & 1073741823) << 2 | $1 >>> 30;
    $15 = 0;
    $28 = $10;
    $8 = 0;
    $7 = __wasm_i64_mul($31, $15, $10, $8);
    $4 = $7 + $12 | 0;
    $11 = i64toi32_i32$HIGH_BITS + $11 | 0;
    $11 = $4 >>> 0 < $7 >>> 0 ? $11 + 1 | 0 : $11;
    $7 = $4;
    $9 = $11;
    $25 = ($18 | 0) == ($9 | 0) & $4 >>> 0 < $12 >>> 0 | $9 >>> 0 < $18 >>> 0;
    $11 = 0;
    $18 = $11;
    $26 = $3;
    $24 = (($14 & 1073741823) << 2 | $20 >>> 30) & -262145 | 262144;
    $4 = __wasm_i64_mul($3, $11, $24, 0);
    $3 = $4 + $7 | 0;
    $12 = i64toi32_i32$HIGH_BITS + $9 | 0;
    $20 = $3;
    $10 = 0;
    $12 = $3 >>> 0 < $4 >>> 0 ? $12 + 1 | 0 : $12;
    $4 = $12;
    $3 = ($9 | 0) == ($4 | 0) & $3 >>> 0 < $7 >>> 0 | $4 >>> 0 < $9 >>> 0;
    $7 = $3 + $25 | 0;
    if ($7 >>> 0 < $3 >>> 0) {
     $10 = 1
    }
    $2 = $7;
    $7 = __wasm_i64_mul($28, $8, $24, $35);
    $3 = $2 + $7 | 0;
    $9 = i64toi32_i32$HIGH_BITS + $10 | 0;
    $14 = $3;
    $7 = $3 >>> 0 < $7 >>> 0 ? $9 + 1 | 0 : $9;
    $10 = __wasm_i64_mul($17, $22, $24, $35);
    $9 = i64toi32_i32$HIGH_BITS;
    $11 = __wasm_i64_mul($19, $30, $28, $8);
    $3 = $11 + $10 | 0;
    $12 = i64toi32_i32$HIGH_BITS + $9 | 0;
    $12 = $3 >>> 0 < $11 >>> 0 ? $12 + 1 | 0 : $12;
    $11 = $3;
    $3 = $12;
    $12 = ($9 | 0) == ($3 | 0) & $11 >>> 0 < $10 >>> 0 | $3 >>> 0 < $9 >>> 0;
    $14 = $3 + $14 | 0;
    $10 = $7 + $12 | 0;
    $9 = $14;
    $12 = $9 >>> 0 < $3 >>> 0 ? $10 + 1 | 0 : $10;
    $11 = $4 + $11 | 0;
    $10 = 0;
    $3 = $10 + $20 | 0;
    if ($3 >>> 0 < $10 >>> 0) {
     $11 = $11 + 1 | 0
    }
    $14 = $3;
    $7 = $3;
    $3 = $11;
    $4 = ($4 | 0) == ($3 | 0) & $7 >>> 0 < $20 >>> 0 | $3 >>> 0 < $4 >>> 0;
    $7 = $4 + $9 | 0;
    if ($7 >>> 0 < $4 >>> 0) {
     $12 = $12 + 1 | 0
    }
    $21 = $7;
    $4 = $14;
    $10 = $3;
    $20 = __wasm_i64_mul($31, $15, $26, $18);
    $11 = i64toi32_i32$HIGH_BITS;
    $25 = $16;
    $16 = __wasm_i64_mul($16, 0, $19, $30);
    $7 = $16 + $20 | 0;
    $9 = i64toi32_i32$HIGH_BITS + $11 | 0;
    $9 = $7 >>> 0 < $16 >>> 0 ? $9 + 1 | 0 : $9;
    $16 = $7;
    $7 = $9;
    $23 = ($11 | 0) == ($9 | 0) & $16 >>> 0 < $20 >>> 0 | $9 >>> 0 < $11 >>> 0;
    $39 = $1 << 2 & -4;
    $37 = __wasm_i64_mul($17, $22, $39, 0);
    $20 = $37 + $16 | 0;
    $11 = i64toi32_i32$HIGH_BITS + $9 | 0;
    $11 = $20 >>> 0 < $37 >>> 0 ? $11 + 1 | 0 : $11;
    $2 = $4;
    $9 = 0;
    $4 = $11;
    $7 = ($7 | 0) == ($4 | 0) & $20 >>> 0 < $16 >>> 0 | $4 >>> 0 < $7 >>> 0;
    $11 = $7 + $23 | 0;
    if ($11 >>> 0 < $7 >>> 0) {
     $9 = 1
    }
    $7 = $2 + $11 | 0;
    $10 = $9 + $10 | 0;
    $10 = $7 >>> 0 < $11 >>> 0 ? $10 + 1 | 0 : $10;
    $16 = $7;
    $11 = $12;
    $7 = $10;
    $3 = ($3 | 0) == ($10 | 0) & $16 >>> 0 < $14 >>> 0 | $10 >>> 0 < $3 >>> 0;
    $9 = $3 + $21 | 0;
    if ($9 >>> 0 < $3 >>> 0) {
     $11 = $11 + 1 | 0
    }
    $2 = $9;
    $21 = $16;
    $23 = $7;
    $37 = __wasm_i64_mul($28, $8, $39, $41);
    $28 = i64toi32_i32$HIGH_BITS;
    $8 = __wasm_i64_mul($24, $35, $25, $40);
    $3 = $8 + $37 | 0;
    $12 = i64toi32_i32$HIGH_BITS + $28 | 0;
    $24 = $3;
    $12 = $3 >>> 0 < $8 >>> 0 ? $12 + 1 | 0 : $12;
    $8 = $12;
    $9 = __wasm_i64_mul($19, $30, $26, $18);
    $3 = $9 + $3 | 0;
    $10 = i64toi32_i32$HIGH_BITS + $8 | 0;
    $19 = $3;
    $10 = $3 >>> 0 < $9 >>> 0 ? $10 + 1 | 0 : $10;
    $14 = $10;
    $12 = __wasm_i64_mul($17, $22, $31, $15);
    $3 = $12 + $3 | 0;
    $9 = i64toi32_i32$HIGH_BITS + $10 | 0;
    $17 = $3;
    $9 = $3 >>> 0 < $12 >>> 0 ? $9 + 1 | 0 : $9;
    $3 = $9;
    $22 = 0;
    $12 = $11;
    $11 = ($8 | 0) == ($28 | 0) & $24 >>> 0 < $37 >>> 0 | $8 >>> 0 < $28 >>> 0;
    $8 = ($8 | 0) == ($10 | 0) & $19 >>> 0 < $24 >>> 0 | $10 >>> 0 < $8 >>> 0;
    $10 = $11 + $8 | 0;
    $10 >>> 0 < $8 >>> 0;
    $8 = $10 + (($3 | 0) == ($14 | 0) & $17 >>> 0 < $19 >>> 0 | $3 >>> 0 < $14 >>> 0) | 0;
    $10 = $8;
    $9 = $9 | 0;
    $8 = $9 + $21 | 0;
    $10 = ($10 | $22) + $23 | 0;
    $10 = $8 >>> 0 < $9 >>> 0 ? $10 + 1 | 0 : $10;
    $21 = $8;
    $14 = $10;
    $7 = ($7 | 0) == ($10 | 0) & $8 >>> 0 < $16 >>> 0 | $10 >>> 0 < $7 >>> 0;
    $8 = $7 + $2 | 0;
    if ($8 >>> 0 < $7 >>> 0) {
     $12 = $12 + 1 | 0
    }
    $19 = $8;
    $8 = $12;
    $12 = $21;
    $16 = $14;
    $26 = __wasm_i64_mul($26, $18, $39, $41);
    $18 = i64toi32_i32$HIGH_BITS;
    $9 = __wasm_i64_mul($31, $15, $25, $40);
    $7 = $9 + $26 | 0;
    $11 = i64toi32_i32$HIGH_BITS + $18 | 0;
    $11 = $7 >>> 0 < $9 >>> 0 ? $11 + 1 | 0 : $11;
    $10 = $11;
    $15 = $10;
    $11 = 0;
    $9 = ($10 | 0) == ($18 | 0) & $7 >>> 0 < $26 >>> 0 | $10 >>> 0 < $18 >>> 0;
    $7 = $10 + $20 | 0;
    $10 = ($9 | $11) + $4 | 0;
    $10 = $7 >>> 0 < $15 >>> 0 ? $10 + 1 | 0 : $10;
    $15 = $7;
    $9 = $7;
    $7 = $10;
    $9 = ($4 | 0) == ($10 | 0) & $9 >>> 0 < $20 >>> 0 | $10 >>> 0 < $4 >>> 0;
    $2 = $12;
    $4 = $9;
    $9 = $10 + $17 | 0;
    $12 = 0;
    $3 = $12 + $15 | 0;
    if ($3 >>> 0 < $12 >>> 0) {
     $9 = $9 + 1 | 0
    }
    $3 = ($7 | 0) == ($9 | 0) & $3 >>> 0 < $15 >>> 0 | $9 >>> 0 < $7 >>> 0;
    $4 = $4 + $3 | 0;
    if ($4 >>> 0 < $3 >>> 0) {
     $11 = 1
    }
    $3 = $2 + $4 | 0;
    $12 = $11 + $16 | 0;
    $7 = $3;
    $9 = $8;
    $12 = $3 >>> 0 < $4 >>> 0 ? $12 + 1 | 0 : $12;
    $8 = $12;
    $3 = ($14 | 0) == ($8 | 0) & $3 >>> 0 < $21 >>> 0 | $8 >>> 0 < $14 >>> 0;
    $4 = $3 + $19 | 0;
    if ($4 >>> 0 < $3 >>> 0) {
     $9 = $9 + 1 | 0
    }
    $3 = $4;
    $4 = $9;
    label$13 : {
     if (($9 | 0) == 131071 & $3 >>> 0 <= 4294967295 | $9 >>> 0 < 131071) {
      $9 = $1 << 17;
      $10 = 0;
      $23 = 0;
      $12 = $5;
      $22 = 0;
      $1 = __wasm_i64_mul($7, $23, $12, $22);
      $11 = i64toi32_i32$HIGH_BITS;
      $14 = $11;
      $11 = ($1 | 0) != 0 | ($11 | 0) != 0;
      $20 = $10 - $11 | 0;
      $28 = $9 - ($10 >>> 0 < $11 >>> 0) | 0;
      $15 = 0 - $1 | 0;
      $18 = 0 - ((0 < $1 >>> 0) + $14 | 0) | 0;
      $14 = 0;
      $19 = __wasm_i64_mul($8, $14, $12, $22);
      $1 = i64toi32_i32$HIGH_BITS;
      $30 = $1;
      $17 = 0;
      $10 = __wasm_i64_mul($7, $23, $6, $17);
      $9 = $10 + $19 | 0;
      $11 = i64toi32_i32$HIGH_BITS + $1 | 0;
      $11 = $9 >>> 0 < $10 >>> 0 ? $11 + 1 | 0 : $11;
      $1 = $9;
      $10 = $9;
      $16 = 0;
      $9 = $16;
      $25 = $10;
      $9 = ($10 | 0) == ($18 | 0) & $15 >>> 0 < $9 >>> 0 | $18 >>> 0 < $10 >>> 0;
      $21 = $20 - $9 | 0;
      $28 = $28 - ($20 >>> 0 < $9 >>> 0) | 0;
      $9 = __wasm_i64_mul($3, 0, $12, $22);
      $10 = i64toi32_i32$HIGH_BITS;
      $2 = $9;
      $9 = __wasm_i64_mul($7, $23, $29, 0);
      $2 = $2 + $9 | 0;
      $12 = i64toi32_i32$HIGH_BITS + $10 | 0;
      $12 = $2 >>> 0 < $9 >>> 0 ? $12 + 1 | 0 : $12;
      $9 = __wasm_i64_mul($8, $14, $6, $17);
      $2 = $9 + $2 | 0;
      $10 = i64toi32_i32$HIGH_BITS + $12 | 0;
      $10 = $2 >>> 0 < $9 >>> 0 ? $10 + 1 | 0 : $10;
      $9 = $2;
      $2 = $10;
      $10 = ($11 | 0) == ($30 | 0) & $1 >>> 0 < $19 >>> 0 | $11 >>> 0 < $30 >>> 0;
      $1 = $11 + $9 | 0;
      $10 = $2 + $10 | 0;
      $10 = $1 >>> 0 < $11 >>> 0 ? $10 + 1 | 0 : $10;
      $11 = $1;
      $1 = $10;
      $2 = __wasm_i64_mul($7, $8, $32, 0);
      $9 = i64toi32_i32$HIGH_BITS;
      $12 = $11;
      $10 = __wasm_i64_mul($5, $6, $4, 0);
      $2 = $10 + $2 | 0;
      $9 = i64toi32_i32$HIGH_BITS + $9 | 0;
      $9 = $2 >>> 0 < $10 >>> 0 ? $9 + 1 | 0 : $9;
      $11 = __wasm_i64_mul($3, $4, $6, $17);
      $2 = $11 + $2 | 0;
      $10 = i64toi32_i32$HIGH_BITS + $9 | 0;
      $9 = __wasm_i64_mul($8, $14, $29, $33);
      $2 = $9 + $2 | 0;
      $9 = $2;
      $10 = 0;
      $2 = $12 + $10 | 0;
      $9 = $1 + $9 | 0;
      $1 = $2;
      $20 = $21 - $1 | 0;
      $2 = $28 - (($21 >>> 0 < $1 >>> 0) + ($1 >>> 0 < $10 >>> 0 ? $9 + 1 | 0 : $9) | 0) | 0;
      $36 = $36 + -1 | 0;
      $29 = $15 - $16 | 0;
      $1 = $18 - (($15 >>> 0 < $16 >>> 0) + $25 | 0) | 0;
      break label$13;
     }
     $17 = $8 >>> 1 | 0;
     $11 = 0;
     $12 = $1 << 16;
     $2 = 0;
     $10 = $3 << 31;
     $7 = ($8 & 1) << 31 | $7 >>> 1;
     $8 = $8 >>> 1 | $10;
     $15 = $5;
     $31 = 0;
     $1 = __wasm_i64_mul($7, 0, $15, $31);
     $9 = i64toi32_i32$HIGH_BITS;
     $10 = $9;
     $9 = ($1 | 0) != 0 | ($9 | 0) != 0;
     $14 = $2 - $9 | 0;
     $35 = $12 - ($2 >>> 0 < $9 >>> 0) | 0;
     $21 = 0 - $1 | 0;
     $19 = $21;
     $23 = 0 - ((0 < $1 >>> 0) + $10 | 0) | 0;
     $12 = $23;
     $18 = 0;
     $16 = __wasm_i64_mul($7, $30, $6, $18);
     $1 = i64toi32_i32$HIGH_BITS;
     $24 = $1;
     $25 = $17 | $3 << 31;
     $40 = $4 << 31 | $3 >>> 1 | $11;
     $10 = $25;
     $17 = __wasm_i64_mul($10, 0, $15, $31);
     $2 = $17 + $16 | 0;
     $9 = i64toi32_i32$HIGH_BITS + $1 | 0;
     $9 = $2 >>> 0 < $17 >>> 0 ? $9 + 1 | 0 : $9;
     $1 = $9;
     $9 = $2;
     $26 = $9;
     $22 = 0;
     $9 = ($9 | 0) == ($12 | 0) & $19 >>> 0 < $22 >>> 0 | $12 >>> 0 < $9 >>> 0;
     $19 = $14 - $9 | 0;
     $35 = $35 - ($14 >>> 0 < $9 >>> 0) | 0;
     $10 = __wasm_i64_mul($6, $18, $10, $11);
     $11 = i64toi32_i32$HIGH_BITS;
     $9 = $4;
     $12 = $9 >>> 1 | 0;
     $17 = ($9 & 1) << 31 | $3 >>> 1;
     $14 = $12;
     $12 = __wasm_i64_mul($17, 0, $15, $31);
     $9 = $12 + $10 | 0;
     $10 = i64toi32_i32$HIGH_BITS + $11 | 0;
     $10 = $9 >>> 0 < $12 >>> 0 ? $10 + 1 | 0 : $10;
     $12 = __wasm_i64_mul($7, $30, $29, 0);
     $11 = $12 + $9 | 0;
     $9 = i64toi32_i32$HIGH_BITS + $10 | 0;
     $10 = $11;
     $11 = $10 >>> 0 < $12 >>> 0 ? $9 + 1 | 0 : $9;
     $9 = ($1 | 0) == ($24 | 0) & $2 >>> 0 < $16 >>> 0 | $1 >>> 0 < $24 >>> 0;
     $2 = $1;
     $1 = $1 + $10 | 0;
     $11 = $9 + $11 | 0;
     $9 = $1;
     $1 = $9 >>> 0 < $2 >>> 0 ? $11 + 1 | 0 : $11;
     $2 = __wasm_i64_mul($7, $8, $32, 0);
     $10 = i64toi32_i32$HIGH_BITS;
     $11 = $9;
     $3 = __wasm_i64_mul($15, $6, $4 >>> 1 | 0, 0);
     $2 = $3 + $2 | 0;
     $9 = i64toi32_i32$HIGH_BITS + $10 | 0;
     $9 = $2 >>> 0 < $3 >>> 0 ? $9 + 1 | 0 : $9;
     $3 = __wasm_i64_mul($6, $18, $17, $14);
     $2 = $3 + $2 | 0;
     $9 = i64toi32_i32$HIGH_BITS + $9 | 0;
     $3 = __wasm_i64_mul($25, $40, $29, $33);
     $2 = $3 + $2 | 0;
     $9 = $2;
     $3 = 0;
     $2 = $11 + $3 | 0;
     $10 = $1 + $9 | 0;
     $1 = $2;
     $20 = $19 - $1 | 0;
     $2 = $35 - (($19 >>> 0 < $1 >>> 0) + ($1 >>> 0 < $3 >>> 0 ? $10 + 1 | 0 : $10) | 0) | 0;
     $3 = $17;
     $4 = $14;
     $29 = $21 - $22 | 0;
     $1 = $23 - (($21 >>> 0 < $22 >>> 0) + $26 | 0) | 0;
    }
    if (($36 | 0) >= 16384) {
     $27 = $27 | 2147418112;
     $1 = 0;
     $2 = 0;
     break label$3;
    }
    $11 = $36 + 16383 | 0;
    if (($36 | 0) <= -16383) {
     label$17 : {
      if ($11) {
       break label$17
      }
      $11 = $8;
      $14 = $29;
      $12 = $1 << 1 | $14 >>> 31;
      $9 = $14 << 1;
      $6 = ($6 | 0) == ($12 | 0) & $9 >>> 0 > $5 >>> 0 | $12 >>> 0 > $6 >>> 0;
      $9 = $4 & 65535;
      $5 = $20;
      $12 = $2 << 1 | $5 >>> 31;
      $2 = $5 << 1 | $1 >>> 31;
      $4 = $2;
      $1 = $12;
      $1 = ($4 | 0) == ($38 | 0) & ($1 | 0) == ($32 | 0) ? $6 : ($32 | 0) == ($1 | 0) & $4 >>> 0 > $38 >>> 0 | $1 >>> 0 > $32 >>> 0;
      $2 = $1 + $7 | 0;
      if ($2 >>> 0 < $1 >>> 0) {
       $11 = $11 + 1 | 0
      }
      $1 = $2;
      $4 = $1;
      $2 = $11;
      $4 = $3 + (($8 | 0) == ($11 | 0) & $4 >>> 0 < $7 >>> 0 | $11 >>> 0 < $8 >>> 0) | 0;
      if ($4 >>> 0 < $3 >>> 0) {
       $9 = $9 + 1 | 0
      }
      $3 = $9;
      if (!($9 & 65536)) {
       break label$17
      }
      $34 = $4 | $34;
      $27 = $3 | $27;
      break label$3;
     }
     $1 = 0;
     $2 = 0;
     break label$3;
    }
    $10 = $8;
    $4 = $4 & 65535;
    $14 = $29;
    $9 = $1 << 1 | $14 >>> 31;
    $14 = $14 << 1;
    $6 = ($6 | 0) == ($9 | 0) & $14 >>> 0 >= $5 >>> 0 | $9 >>> 0 > $6 >>> 0;
    $5 = $20;
    $9 = $2 << 1 | $5 >>> 31;
    $2 = $5 << 1 | $1 >>> 31;
    $1 = ($2 | 0) == ($38 | 0) & ($9 | 0) == ($32 | 0) ? $6 : ($32 | 0) == ($9 | 0) & $2 >>> 0 >= $38 >>> 0 | $9 >>> 0 > $32 >>> 0;
    $2 = $1 + $7 | 0;
    if ($2 >>> 0 < $1 >>> 0) {
     $10 = $10 + 1 | 0
    }
    $1 = $2;
    $2 = $10;
    $5 = $3;
    $3 = (($8 | 0) == ($10 | 0) & $1 >>> 0 < $7 >>> 0 | $10 >>> 0 < $8 >>> 0) + $3 | 0;
    $10 = $11 << 16 | $4;
    $34 = $3 | $34;
    $27 = $27 | ($3 >>> 0 < $5 >>> 0 ? $10 + 1 | 0 : $10);
   }
   HEAP32[$0 >> 2] = $1;
   HEAP32[$0 + 4 >> 2] = $2;
   HEAP32[$0 + 8 >> 2] = $34;
   HEAP32[$0 + 12 >> 2] = $27;
   $0 = $13 + 192 | 0;
   if ($0 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $0;
   return;
  }
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  $1 = ($3 | $5) != 0 | ($4 | $6) != 0;
  HEAP32[$0 + 8 >> 2] = $1 ? $34 : 0;
  HEAP32[$0 + 12 >> 2] = $1 ? $27 : 2147450880;
  $0 = $13 + 192 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function __floatscan($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
  $6 = global$0 - 48 | 0;
  $4 = $6;
  if ($4 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  label$2 : {
   if ($2 >>> 0 <= 2) {
    $5 = $1 + 4 | 0;
    $2 = $2 << 2;
    $7 = HEAP32[$2 + 35724 >> 2];
    $11 = HEAP32[$2 + 35712 >> 2];
    while (1) {
     $2 = HEAP32[$1 + 4 >> 2];
     label$5 : {
      if ($2 >>> 0 < HEAPU32[$1 + 104 >> 2]) {
       HEAP32[$5 >> 2] = $2 + 1;
       $2 = HEAPU8[$2 | 0];
       break label$5;
      }
      $2 = __shgetc($1);
     }
     if (isspace($2)) {
      continue
     }
     break;
    };
    $4 = $2 + -43 | 0;
    label$7 : {
     if ($4 >>> 0 > 2) {
      $8 = 1;
      break label$7;
     }
     $8 = 1;
     if (!($4 - 1)) {
      break label$7
     }
     $8 = ($2 | 0) == 45 ? -1 : 1;
     $2 = HEAP32[$1 + 4 >> 2];
     if ($2 >>> 0 < HEAPU32[$1 + 104 >> 2]) {
      HEAP32[$5 >> 2] = $2 + 1;
      $2 = HEAPU8[$2 | 0];
      break label$7;
     }
     $2 = __shgetc($1);
    }
    $4 = 0;
    label$10 : {
     label$11 : {
      while (1) {
       if (HEAP8[$4 + 35644 | 0] == ($2 | 32)) {
        label$14 : {
         if ($4 >>> 0 > 6) {
          break label$14
         }
         $2 = HEAP32[$1 + 4 >> 2];
         if ($2 >>> 0 < HEAPU32[$1 + 104 >> 2]) {
          HEAP32[$5 >> 2] = $2 + 1;
          $2 = HEAPU8[$2 | 0];
          break label$14;
         }
         $2 = __shgetc($1);
        }
        $4 = $4 + 1 | 0;
        if (($4 | 0) != 8) {
         continue
        }
        break label$11;
       }
       break;
      };
      if (($4 | 0) != 3) {
       if (($4 | 0) == 8) {
        break label$11
       }
       if (!$3 | $4 >>> 0 < 4) {
        break label$10
       }
       if (($4 | 0) == 8) {
        break label$11
       }
      }
      $1 = HEAP32[$1 + 104 >> 2];
      if ($1) {
       HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + -1
      }
      if (!$3 | $4 >>> 0 < 4) {
       break label$11
      }
      while (1) {
       if ($1) {
        HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + -1
       }
       $4 = $4 + -1 | 0;
       if ($4 >>> 0 > 3) {
        continue
       }
       break;
      };
     }
     __extendsftf2($6, Math_fround(Math_fround($8 | 0) * Math_fround(infinity)));
     $8 = HEAP32[$6 + 8 >> 2];
     $2 = HEAP32[$6 + 12 >> 2];
     $9 = HEAP32[$6 >> 2];
     $10 = HEAP32[$6 + 4 >> 2];
     break label$2;
    }
    label$20 : {
     label$21 : {
      label$22 : {
       if ($4) {
        break label$22
       }
       $4 = 0;
       while (1) {
        if (HEAP8[$4 + 35653 | 0] != ($2 | 32)) {
         break label$22
        }
        label$24 : {
         if ($4 >>> 0 > 1) {
          break label$24
         }
         $2 = HEAP32[$1 + 4 >> 2];
         if ($2 >>> 0 < HEAPU32[$1 + 104 >> 2]) {
          HEAP32[$5 >> 2] = $2 + 1;
          $2 = HEAPU8[$2 | 0];
          break label$24;
         }
         $2 = __shgetc($1);
        }
        $4 = $4 + 1 | 0;
        if (($4 | 0) != 3) {
         continue
        }
        break;
       };
       break label$21;
      }
      label$26 : {
       label$27 : {
        if ($4 >>> 0 > 3) {
         break label$27
        }
        switch ($4 - 1 | 0) {
        case 2:
         break label$21;
        case 0:
        case 1:
         break label$27;
        default:
         break label$26;
        };
       }
       if (HEAP32[$1 + 104 >> 2]) {
        HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + -1
       }
       break label$20;
      }
      label$29 : {
       if (($2 | 0) != 48) {
        break label$29
       }
       $4 = HEAP32[$1 + 4 >> 2];
       label$30 : {
        if ($4 >>> 0 < HEAPU32[$1 + 104 >> 2]) {
         HEAP32[$5 >> 2] = $4 + 1;
         $4 = HEAPU8[$4 | 0];
         break label$30;
        }
        $4 = __shgetc($1);
       }
       if (($4 | 32) == 120) {
        hexfloat($6 + 16 | 0, $1, $11, $7, $8, $3);
        $8 = HEAP32[$6 + 24 >> 2];
        $2 = HEAP32[$6 + 28 >> 2];
        $9 = HEAP32[$6 + 16 >> 2];
        $10 = HEAP32[$6 + 20 >> 2];
        break label$2;
       }
       if (!HEAP32[$1 + 104 >> 2]) {
        break label$29
       }
       HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + -1;
      }
      decfloat($6 + 32 | 0, $1, $2, $11, $7, $8, $3);
      $8 = HEAP32[$6 + 40 >> 2];
      $2 = HEAP32[$6 + 44 >> 2];
      $9 = HEAP32[$6 + 32 >> 2];
      $10 = HEAP32[$6 + 36 >> 2];
      break label$2;
     }
     label$33 : {
      $2 = HEAP32[$1 + 4 >> 2];
      label$34 : {
       if ($2 >>> 0 < HEAPU32[$1 + 104 >> 2]) {
        HEAP32[$5 >> 2] = $2 + 1;
        $2 = HEAPU8[$2 | 0];
        break label$34;
       }
       $2 = __shgetc($1);
      }
      if (($2 | 0) == 40) {
       $4 = 1;
       break label$33;
      }
      $8 = 0;
      $2 = 2147450880;
      if (!HEAP32[$1 + 104 >> 2]) {
       break label$2
      }
      HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + -1;
      break label$2;
     }
     while (1) {
      $2 = HEAP32[$1 + 4 >> 2];
      label$38 : {
       if ($2 >>> 0 < HEAPU32[$1 + 104 >> 2]) {
        HEAP32[$5 >> 2] = $2 + 1;
        $7 = HEAPU8[$2 | 0];
        break label$38;
       }
       $7 = __shgetc($1);
      }
      if (!($7 + -97 >>> 0 >= 26 ? !($7 + -48 >>> 0 < 10 | $7 + -65 >>> 0 < 26 | ($7 | 0) == 95) : 0)) {
       $4 = $4 + 1 | 0;
       continue;
      }
      break;
     };
     $8 = 0;
     $2 = 2147450880;
     if (($7 | 0) == 41) {
      break label$2
     }
     $7 = HEAP32[$1 + 104 >> 2];
     if ($7) {
      HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + -1
     }
     if ($3) {
      if (!$4) {
       break label$2
      }
      while (1) {
       $4 = $4 + -1 | 0;
       if ($7) {
        HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + -1
       }
       if ($4) {
        continue
       }
       break;
      };
      break label$2;
     }
    }
    HEAP32[16596] = 28;
    __shlim($1, 0, 0);
   }
   $8 = 0;
   $2 = 0;
  }
  HEAP32[$0 >> 2] = $9;
  HEAP32[$0 + 4 >> 2] = $10;
  HEAP32[$0 + 8 >> 2] = $8;
  HEAP32[$0 + 12 >> 2] = $2;
  $0 = $6 + 48 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function hexfloat($0, $1, $2, $3, $4, $5) {
  var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
  $6 = global$0 - 432 | 0;
  $7 = $6;
  if ($6 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $7;
  $7 = HEAP32[$1 + 4 >> 2];
  label$2 : {
   if ($7 >>> 0 < HEAPU32[$1 + 104 >> 2]) {
    HEAP32[$1 + 4 >> 2] = $7 + 1;
    $8 = HEAPU8[$7 | 0];
    break label$2;
   }
   $8 = __shgetc($1);
  }
  label$4 : {
   label$5 : {
    while (1) {
     label$7 : {
      if (($8 | 0) != 48) {
       if (($8 | 0) != 46) {
        break label$4
       }
       $7 = HEAP32[$1 + 4 >> 2];
       if ($7 >>> 0 >= HEAPU32[$1 + 104 >> 2]) {
        break label$7
       }
       HEAP32[$1 + 4 >> 2] = $7 + 1;
       $8 = HEAPU8[$7 | 0];
       break label$5;
      }
      $7 = HEAP32[$1 + 4 >> 2];
      if ($7 >>> 0 < HEAPU32[$1 + 104 >> 2]) {
       $22 = 1;
       HEAP32[$1 + 4 >> 2] = $7 + 1;
       $8 = HEAPU8[$7 | 0];
       continue;
      }
      $22 = 1;
      $8 = __shgetc($1);
      continue;
     }
     break;
    };
    $8 = __shgetc($1);
   }
   $21 = 1;
   if (($8 | 0) != 48) {
    break label$4
   }
   while (1) {
    $7 = HEAP32[$1 + 4 >> 2];
    label$11 : {
     if ($7 >>> 0 < HEAPU32[$1 + 104 >> 2]) {
      HEAP32[$1 + 4 >> 2] = $7 + 1;
      $8 = HEAPU8[$7 | 0];
      break label$11;
     }
     $8 = __shgetc($1);
    }
    $15 = $15 + -1 | 0;
    $13 = $13 + -1 | 0;
    if ($13 >>> 0 < 4294967295) {
     $15 = $15 + 1 | 0
    }
    if (($8 | 0) == 48) {
     continue
    }
    break;
   };
   $22 = 1;
  }
  $14 = 1073676288;
  $7 = 0;
  while (1) {
   label$14 : {
    $23 = $8 | 32;
    label$15 : {
     label$16 : {
      $24 = $8 + -48 | 0;
      if ($24 >>> 0 < 10) {
       break label$16
      }
      if ($23 + -97 >>> 0 > 5 ? ($8 | 0) != 46 : 0) {
       break label$14
      }
      if (($8 | 0) != 46) {
       break label$16
      }
      if ($21) {
       break label$14
      }
      $21 = 1;
      $13 = $9;
      $15 = $7;
      break label$15;
     }
     $8 = ($8 | 0) > 57 ? $23 + -87 | 0 : $24;
     label$17 : {
      if (($7 | 0) < 0 ? 1 : ($7 | 0) <= 0 ? ($9 >>> 0 > 7 ? 0 : 1) : 0) {
       $16 = $8 + ($16 << 4) | 0;
       break label$17;
      }
      if (($7 | 0) < 0 ? 1 : ($7 | 0) <= 0 ? ($9 >>> 0 > 28 ? 0 : 1) : 0) {
       __floatsitf($6 + 48 | 0, $8);
       __multf3($6 + 32 | 0, $19, $20, $12, $14, 0, 0, 0, 1073414144);
       $19 = HEAP32[$6 + 32 >> 2];
       $20 = HEAP32[$6 + 36 >> 2];
       $12 = HEAP32[$6 + 40 >> 2];
       $14 = HEAP32[$6 + 44 >> 2];
       __multf3($6 + 16 | 0, $19, $20, $12, $14, HEAP32[$6 + 48 >> 2], HEAP32[$6 + 52 >> 2], HEAP32[$6 + 56 >> 2], HEAP32[$6 + 60 >> 2]);
       __addtf3($6, $10, $11, $17, $18, HEAP32[$6 + 16 >> 2], HEAP32[$6 + 20 >> 2], HEAP32[$6 + 24 >> 2], HEAP32[$6 + 28 >> 2]);
       $17 = HEAP32[$6 + 8 >> 2];
       $18 = HEAP32[$6 + 12 >> 2];
       $10 = HEAP32[$6 >> 2];
       $11 = HEAP32[$6 + 4 >> 2];
       break label$17;
      }
      if (!$8 | $25) {
       break label$17
      }
      __multf3($6 + 80 | 0, $19, $20, $12, $14, 0, 0, 0, 1073610752);
      __addtf3($6 - -64 | 0, $10, $11, $17, $18, HEAP32[$6 + 80 >> 2], HEAP32[$6 + 84 >> 2], HEAP32[$6 + 88 >> 2], HEAP32[$6 + 92 >> 2]);
      $17 = HEAP32[$6 + 72 >> 2];
      $18 = HEAP32[$6 + 76 >> 2];
      $25 = 1;
      $10 = HEAP32[$6 + 64 >> 2];
      $11 = HEAP32[$6 + 68 >> 2];
     }
     $9 = $9 + 1 | 0;
     if ($9 >>> 0 < 1) {
      $7 = $7 + 1 | 0
     }
     $22 = 1;
    }
    $8 = HEAP32[$1 + 4 >> 2];
    if ($8 >>> 0 < HEAPU32[$1 + 104 >> 2]) {
     HEAP32[$1 + 4 >> 2] = $8 + 1;
     $8 = HEAPU8[$8 | 0];
     continue;
    }
    $8 = __shgetc($1);
    continue;
   }
   break;
  };
  label$21 : {
   label$22 : {
    label$23 : {
     if (!$22) {
      if (!HEAP32[$1 + 104 >> 2]) {
       if ($5) {
        break label$22
       }
       break label$23;
      }
      $2 = HEAP32[$1 + 4 >> 2];
      HEAP32[$1 + 4 >> 2] = $2 + -1;
      if (!$5) {
       break label$23
      }
      HEAP32[$1 + 4 >> 2] = $2 + -2;
      if (!$21) {
       break label$22
      }
      HEAP32[$1 + 4 >> 2] = $2 + -3;
      break label$22;
     }
     if (($7 | 0) < 0 ? 1 : ($7 | 0) <= 0 ? ($9 >>> 0 > 7 ? 0 : 1) : 0) {
      $12 = $9;
      $14 = $7;
      while (1) {
       $16 = $16 << 4;
       $12 = $12 + 1 | 0;
       if ($12 >>> 0 < 1) {
        $14 = $14 + 1 | 0
       }
       if (($12 | 0) != 8 | $14) {
        continue
       }
       break;
      };
     }
     label$28 : {
      if (($23 | 0) == 112) {
       $12 = scanexp($1, $5);
       $8 = i64toi32_i32$HIGH_BITS;
       $14 = $8;
       if ($12 | ($8 | 0) != -2147483648) {
        break label$28
       }
       if ($5) {
        $12 = 0;
        $14 = 0;
        if (!HEAP32[$1 + 104 >> 2]) {
         break label$28
        }
        HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] + -1;
        break label$28;
       }
       $10 = 0;
       $11 = 0;
       __shlim($1, 0, 0);
       $2 = 0;
       $1 = 0;
       break label$21;
      }
      $12 = 0;
      $14 = 0;
      if (!HEAP32[$1 + 104 >> 2]) {
       break label$28
      }
      HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] + -1;
     }
     if (!$16) {
      __extenddftf2($6 + 112 | 0, +($4 | 0) * 0.0);
      $10 = HEAP32[$6 + 112 >> 2];
      $11 = HEAP32[$6 + 116 >> 2];
      $2 = HEAP32[$6 + 120 >> 2];
      $1 = HEAP32[$6 + 124 >> 2];
      break label$21;
     }
     $1 = $21 ? $13 : $9;
     $5 = ($21 ? $15 : $7) << 2 | $1 >>> 30;
     $1 = $12 + ($1 << 2) | 0;
     $7 = $1 + -32 | 0;
     $9 = $7;
     $13 = 0 - $3 | 0;
     $5 = $5 + $14 | 0;
     $1 = ($1 >>> 0 < $12 >>> 0 ? $5 + 1 | 0 : $5) + -1 | 0;
     $7 = $7 >>> 0 < 4294967264 ? $1 + 1 | 0 : $1;
     $1 = $13 >> 31;
     if (($7 | 0) > ($1 | 0) ? 1 : ($7 | 0) >= ($1 | 0) ? ($9 >>> 0 <= $13 >>> 0 ? 0 : 1) : 0) {
      HEAP32[16596] = 68;
      __floatsitf($6 + 160 | 0, $4);
      __multf3($6 + 144 | 0, HEAP32[$6 + 160 >> 2], HEAP32[$6 + 164 >> 2], HEAP32[$6 + 168 >> 2], HEAP32[$6 + 172 >> 2], -1, -1, -1, 2147418111);
      __multf3($6 + 128 | 0, HEAP32[$6 + 144 >> 2], HEAP32[$6 + 148 >> 2], HEAP32[$6 + 152 >> 2], HEAP32[$6 + 156 >> 2], -1, -1, -1, 2147418111);
      $10 = HEAP32[$6 + 128 >> 2];
      $11 = HEAP32[$6 + 132 >> 2];
      $2 = HEAP32[$6 + 136 >> 2];
      $1 = HEAP32[$6 + 140 >> 2];
      break label$21;
     }
     $1 = $3 + -226 | 0;
     $5 = $9 >>> 0 < $1 >>> 0 ? 0 : 1;
     $1 = $1 >> 31;
     if (($7 | 0) > ($1 | 0) ? 1 : ($7 | 0) >= ($1 | 0) ? $5 : 0) {
      if (($16 | 0) > -1) {
       while (1) {
        __addtf3($6 + 416 | 0, $10, $11, $17, $18, 0, 0, 0, -1073807360);
        $1 = __getf2($10, $11, $17, $18);
        $5 = ($1 | 0) < 0;
        __addtf3($6 + 400 | 0, $10, $11, $17, $18, $5 ? $10 : HEAP32[$6 + 416 >> 2], $5 ? $11 : HEAP32[$6 + 420 >> 2], $5 ? $17 : HEAP32[$6 + 424 >> 2], $5 ? $18 : HEAP32[$6 + 428 >> 2]);
        $7 = $7 + -1 | 0;
        $9 = $9 + -1 | 0;
        if ($9 >>> 0 < 4294967295) {
         $7 = $7 + 1 | 0
        }
        $17 = HEAP32[$6 + 408 >> 2];
        $18 = HEAP32[$6 + 412 >> 2];
        $10 = HEAP32[$6 + 400 >> 2];
        $11 = HEAP32[$6 + 404 >> 2];
        $16 = $16 << 1 | ($1 | 0) > -1;
        if (($16 | 0) > -1) {
         continue
        }
        break;
       }
      }
      $1 = ($9 - $3 | 0) + 32 | 0;
      $5 = $1;
      $8 = $2;
      $12 = $1 >>> 0 >= $2 >>> 0 ? 0 : 1;
      $3 = $7 - (($3 >> 31) + ($9 >>> 0 < $3 >>> 0) | 0) | 0;
      $1 = $1 >>> 0 < 32 ? $3 + 1 | 0 : $3;
      $2 = $2 >> 31;
      $1 = (($1 | 0) < ($2 | 0) ? 1 : ($1 | 0) <= ($2 | 0) ? $12 : 0) ? (($5 | 0) > 0 ? $5 : 0) : $8;
      label$36 : {
       if (($1 | 0) >= 113) {
        __floatsitf($6 + 384 | 0, $4);
        $13 = HEAP32[$6 + 392 >> 2];
        $15 = HEAP32[$6 + 396 >> 2];
        $19 = HEAP32[$6 + 384 >> 2];
        $20 = HEAP32[$6 + 388 >> 2];
        $5 = 0;
        $4 = 0;
        $3 = 0;
        $2 = 0;
        break label$36;
       }
       __extenddftf2($6 + 352 | 0, scalbn(1.0, 144 - $1 | 0));
       __floatsitf($6 + 336 | 0, $4);
       $19 = HEAP32[$6 + 336 >> 2];
       $20 = HEAP32[$6 + 340 >> 2];
       $13 = HEAP32[$6 + 344 >> 2];
       $15 = HEAP32[$6 + 348 >> 2];
       copysignl($6 + 368 | 0, HEAP32[$6 + 352 >> 2], HEAP32[$6 + 356 >> 2], HEAP32[$6 + 360 >> 2], HEAP32[$6 + 364 >> 2], $19, $20, $13, $15);
       $5 = HEAP32[$6 + 376 >> 2];
       $4 = HEAP32[$6 + 380 >> 2];
       $3 = HEAP32[$6 + 368 >> 2];
       $2 = HEAP32[$6 + 372 >> 2];
      }
      $7 = $6 + 320 | 0;
      $1 = !($16 & 1) & ((__letf2($10, $11, $17, $18, 0, 0, 0, 0) | 0) != 0 & ($1 | 0) < 32);
      __floatunsitf($7, $1 + $16 | 0);
      __multf3($6 + 304 | 0, $19, $20, $13, $15, HEAP32[$6 + 320 >> 2], HEAP32[$6 + 324 >> 2], HEAP32[$6 + 328 >> 2], HEAP32[$6 + 332 >> 2]);
      __addtf3($6 + 272 | 0, HEAP32[$6 + 304 >> 2], HEAP32[$6 + 308 >> 2], HEAP32[$6 + 312 >> 2], HEAP32[$6 + 316 >> 2], $3, $2, $5, $4);
      __multf3($6 + 288 | 0, $1 ? 0 : $10, $1 ? 0 : $11, $1 ? 0 : $17, $1 ? 0 : $18, $19, $20, $13, $15);
      __addtf3($6 + 256 | 0, HEAP32[$6 + 288 >> 2], HEAP32[$6 + 292 >> 2], HEAP32[$6 + 296 >> 2], HEAP32[$6 + 300 >> 2], HEAP32[$6 + 272 >> 2], HEAP32[$6 + 276 >> 2], HEAP32[$6 + 280 >> 2], HEAP32[$6 + 284 >> 2]);
      __subtf3($6 + 240 | 0, HEAP32[$6 + 256 >> 2], HEAP32[$6 + 260 >> 2], HEAP32[$6 + 264 >> 2], HEAP32[$6 + 268 >> 2], $3, $2, $5, $4);
      $1 = HEAP32[$6 + 240 >> 2];
      $2 = HEAP32[$6 + 244 >> 2];
      $3 = HEAP32[$6 + 248 >> 2];
      $4 = HEAP32[$6 + 252 >> 2];
      if (!__letf2($1, $2, $3, $4, 0, 0, 0, 0)) {
       HEAP32[16596] = 68
      }
      scalbnl($6 + 224 | 0, $1, $2, $3, $4, $9);
      $10 = HEAP32[$6 + 224 >> 2];
      $11 = HEAP32[$6 + 228 >> 2];
      $2 = HEAP32[$6 + 232 >> 2];
      $1 = HEAP32[$6 + 236 >> 2];
      break label$21;
     }
     HEAP32[16596] = 68;
     __floatsitf($6 + 208 | 0, $4);
     __multf3($6 + 192 | 0, HEAP32[$6 + 208 >> 2], HEAP32[$6 + 212 >> 2], HEAP32[$6 + 216 >> 2], HEAP32[$6 + 220 >> 2], 0, 0, 0, 65536);
     __multf3($6 + 176 | 0, HEAP32[$6 + 192 >> 2], HEAP32[$6 + 196 >> 2], HEAP32[$6 + 200 >> 2], HEAP32[$6 + 204 >> 2], 0, 0, 0, 65536);
     $10 = HEAP32[$6 + 176 >> 2];
     $11 = HEAP32[$6 + 180 >> 2];
     $2 = HEAP32[$6 + 184 >> 2];
     $1 = HEAP32[$6 + 188 >> 2];
     break label$21;
    }
    __shlim($1, 0, 0);
   }
   __extenddftf2($6 + 96 | 0, +($4 | 0) * 0.0);
   $10 = HEAP32[$6 + 96 >> 2];
   $11 = HEAP32[$6 + 100 >> 2];
   $2 = HEAP32[$6 + 104 >> 2];
   $1 = HEAP32[$6 + 108 >> 2];
  }
  HEAP32[$0 >> 2] = $10;
  HEAP32[$0 + 4 >> 2] = $11;
  HEAP32[$0 + 8 >> 2] = $2;
  HEAP32[$0 + 12 >> 2] = $1;
  $0 = $6 + 432 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function decfloat($0, $1, $2, $3, $4, $5, $6) {
  var $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0;
  $7 = global$0 - 8960 | 0;
  $14 = $7;
  if ($7 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $14;
  $20 = $3 + $4 | 0;
  $25 = 0 - $20 | 0;
  label$2 : {
   label$3 : {
    while (1) {
     label$5 : {
      if (($2 | 0) != 48) {
       if (($2 | 0) != 46) {
        break label$2
       }
       $2 = HEAP32[$1 + 4 >> 2];
       if ($2 >>> 0 >= HEAPU32[$1 + 104 >> 2]) {
        break label$5
       }
       HEAP32[$1 + 4 >> 2] = $2 + 1;
       $2 = HEAPU8[$2 | 0];
       break label$3;
      }
      $2 = HEAP32[$1 + 4 >> 2];
      if ($2 >>> 0 < HEAPU32[$1 + 104 >> 2]) {
       $15 = 1;
       HEAP32[$1 + 4 >> 2] = $2 + 1;
       $2 = HEAPU8[$2 | 0];
       continue;
      }
      $15 = 1;
      $2 = __shgetc($1);
      continue;
     }
     break;
    };
    $2 = __shgetc($1);
   }
   $10 = 1;
   if (($2 | 0) != 48) {
    break label$2
   }
   while (1) {
    $2 = HEAP32[$1 + 4 >> 2];
    label$9 : {
     if ($2 >>> 0 < HEAPU32[$1 + 104 >> 2]) {
      HEAP32[$1 + 4 >> 2] = $2 + 1;
      $2 = HEAPU8[$2 | 0];
      break label$9;
     }
     $2 = __shgetc($1);
    }
    $9 = $9 + -1 | 0;
    $8 = $8 + -1 | 0;
    if ($8 >>> 0 < 4294967295) {
     $9 = $9 + 1 | 0
    }
    if (($2 | 0) == 48) {
     continue
    }
    break;
   };
   $15 = 1;
  }
  HEAP32[$7 + 768 >> 2] = 0;
  label$11 : {
   label$12 : {
    $12 = ($2 | 0) == 46;
    $16 = $2 + -48 | 0;
    label$13 : {
     label$14 : {
      label$15 : {
       label$16 : {
        if (!($12 | $16 >>> 0 <= 9)) {
         $14 = 0;
         break label$16;
        }
        $14 = 0;
        while (1) {
         label$19 : {
          if ($12 & 1) {
           if (!$10) {
            $8 = $13;
            $9 = $11;
            $10 = 1;
            break label$19;
           }
           $15 = ($15 | 0) != 0;
           break label$15;
          }
          $13 = $13 + 1 | 0;
          if ($13 >>> 0 < 1) {
           $11 = $11 + 1 | 0
          }
          if (($14 | 0) <= 2044) {
           $18 = ($2 | 0) != 48 ? $13 : $18;
           $12 = ($7 + 768 | 0) + ($14 << 2) | 0;
           HEAP32[$12 >> 2] = $17 ? (Math_imul(HEAP32[$12 >> 2], 10) + $2 | 0) + -48 | 0 : $16;
           $15 = 1;
           $12 = $17 + 1 | 0;
           $2 = ($12 | 0) == 9;
           $17 = $2 ? 0 : $12;
           $14 = $2 + $14 | 0;
           break label$19;
          }
          if (($2 | 0) == 48) {
           break label$19
          }
          HEAP32[$7 + 8944 >> 2] = HEAP32[$7 + 8944 >> 2] | 1;
         }
         $2 = HEAP32[$1 + 4 >> 2];
         label$25 : {
          if ($2 >>> 0 < HEAPU32[$1 + 104 >> 2]) {
           HEAP32[$1 + 4 >> 2] = $2 + 1;
           $2 = HEAPU8[$2 | 0];
           break label$25;
          }
          $2 = __shgetc($1);
         }
         $12 = ($2 | 0) == 46;
         $16 = $2 + -48 | 0;
         if ($12 | $16 >>> 0 < 10) {
          continue
         }
         break;
        };
       }
       $8 = $10 ? $8 : $13;
       $9 = $10 ? $9 : $11;
       if (!(!$15 | ($2 | 32) != 101)) {
        $2 = scanexp($1, $6);
        $12 = i64toi32_i32$HIGH_BITS;
        $10 = $12;
        label$28 : {
         if ($2 | ($10 | 0) != -2147483648) {
          break label$28
         }
         if (!$6) {
          break label$13
         }
         $2 = 0;
         $10 = 0;
         if (!HEAP32[$1 + 104 >> 2]) {
          break label$28
         }
         HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] + -1;
        }
        $9 = $9 + $10 | 0;
        $8 = $2 + $8 | 0;
        if ($8 >>> 0 < $2 >>> 0) {
         $9 = $9 + 1 | 0
        }
        break label$12;
       }
       $15 = ($15 | 0) != 0;
       if (($2 | 0) < 0) {
        break label$14
       }
      }
      if (!HEAP32[$1 + 104 >> 2]) {
       break label$14
      }
      HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] + -1;
     }
     if ($15) {
      break label$12
     }
     HEAP32[16596] = 28;
    }
    $13 = 0;
    $11 = 0;
    __shlim($1, 0, 0);
    $2 = 0;
    $1 = 0;
    break label$11;
   }
   $1 = HEAP32[$7 + 768 >> 2];
   if (!$1) {
    __extenddftf2($7, +($5 | 0) * 0.0);
    $13 = HEAP32[$7 >> 2];
    $11 = HEAP32[$7 + 4 >> 2];
    $2 = HEAP32[$7 + 12 >> 2];
    $1 = HEAP32[$7 + 8 >> 2];
    break label$11;
   }
   if (!(($8 | 0) != ($13 | 0) | ($9 | 0) != ($11 | 0) | (($11 | 0) > 0 ? 1 : ($11 | 0) >= 0 ? ($13 >>> 0 <= 9 ? 0 : 1) : 0) | ($1 >>> $3 | 0 ? ($3 | 0) <= 30 : 0))) {
    __floatsitf($7 + 48 | 0, $5);
    __floatunsitf($7 + 32 | 0, $1);
    __multf3($7 + 16 | 0, HEAP32[$7 + 48 >> 2], HEAP32[$7 + 52 >> 2], HEAP32[$7 + 56 >> 2], HEAP32[$7 + 60 >> 2], HEAP32[$7 + 32 >> 2], HEAP32[$7 + 36 >> 2], HEAP32[$7 + 40 >> 2], HEAP32[$7 + 44 >> 2]);
    $13 = HEAP32[$7 + 16 >> 2];
    $11 = HEAP32[$7 + 20 >> 2];
    $2 = HEAP32[$7 + 28 >> 2];
    $1 = HEAP32[$7 + 24 >> 2];
    break label$11;
   }
   $1 = ($4 | 0) / -2 | 0;
   $2 = $8 >>> 0 <= $1 >>> 0 ? 0 : 1;
   $1 = $1 >> 31;
   if (($9 | 0) > ($1 | 0) ? 1 : ($9 | 0) >= ($1 | 0) ? $2 : 0) {
    HEAP32[16596] = 68;
    __floatsitf($7 + 96 | 0, $5);
    __multf3($7 + 80 | 0, HEAP32[$7 + 96 >> 2], HEAP32[$7 + 100 >> 2], HEAP32[$7 + 104 >> 2], HEAP32[$7 + 108 >> 2], -1, -1, -1, 2147418111);
    __multf3($7 - -64 | 0, HEAP32[$7 + 80 >> 2], HEAP32[$7 + 84 >> 2], HEAP32[$7 + 88 >> 2], HEAP32[$7 + 92 >> 2], -1, -1, -1, 2147418111);
    $13 = HEAP32[$7 + 64 >> 2];
    $11 = HEAP32[$7 + 68 >> 2];
    $2 = HEAP32[$7 + 76 >> 2];
    $1 = HEAP32[$7 + 72 >> 2];
    break label$11;
   }
   $1 = $4 + -226 | 0;
   $2 = $8 >>> 0 >= $1 >>> 0 ? 0 : 1;
   $1 = $1 >> 31;
   if (($9 | 0) < ($1 | 0) ? 1 : ($9 | 0) <= ($1 | 0) ? $2 : 0) {
    HEAP32[16596] = 68;
    __floatsitf($7 + 144 | 0, $5);
    __multf3($7 + 128 | 0, HEAP32[$7 + 144 >> 2], HEAP32[$7 + 148 >> 2], HEAP32[$7 + 152 >> 2], HEAP32[$7 + 156 >> 2], 0, 0, 0, 65536);
    __multf3($7 + 112 | 0, HEAP32[$7 + 128 >> 2], HEAP32[$7 + 132 >> 2], HEAP32[$7 + 136 >> 2], HEAP32[$7 + 140 >> 2], 0, 0, 0, 65536);
    $13 = HEAP32[$7 + 112 >> 2];
    $11 = HEAP32[$7 + 116 >> 2];
    $2 = HEAP32[$7 + 124 >> 2];
    $1 = HEAP32[$7 + 120 >> 2];
    break label$11;
   }
   if ($17) {
    if (($17 | 0) <= 8) {
     $2 = ($7 + 768 | 0) + ($14 << 2) | 0;
     $1 = HEAP32[$2 >> 2];
     while (1) {
      $1 = Math_imul($1, 10);
      $17 = $17 + 1 | 0;
      if (($17 | 0) != 9) {
       continue
      }
      break;
     };
     HEAP32[$2 >> 2] = $1;
    }
    $14 = $14 + 1 | 0;
   }
   label$36 : {
    $10 = $8;
    if (($18 | 0) > 8 | ($18 | 0) > ($8 | 0) | ($8 | 0) > 17) {
     break label$36
    }
    if (($10 | 0) == 9) {
     __floatsitf($7 + 192 | 0, $5);
     __floatunsitf($7 + 176 | 0, HEAP32[$7 + 768 >> 2]);
     __multf3($7 + 160 | 0, HEAP32[$7 + 192 >> 2], HEAP32[$7 + 196 >> 2], HEAP32[$7 + 200 >> 2], HEAP32[$7 + 204 >> 2], HEAP32[$7 + 176 >> 2], HEAP32[$7 + 180 >> 2], HEAP32[$7 + 184 >> 2], HEAP32[$7 + 188 >> 2]);
     $13 = HEAP32[$7 + 160 >> 2];
     $11 = HEAP32[$7 + 164 >> 2];
     $2 = HEAP32[$7 + 172 >> 2];
     $1 = HEAP32[$7 + 168 >> 2];
     break label$11;
    }
    if (($10 | 0) <= 8) {
     __floatsitf($7 + 272 | 0, $5);
     __floatunsitf($7 + 256 | 0, HEAP32[$7 + 768 >> 2]);
     __multf3($7 + 240 | 0, HEAP32[$7 + 272 >> 2], HEAP32[$7 + 276 >> 2], HEAP32[$7 + 280 >> 2], HEAP32[$7 + 284 >> 2], HEAP32[$7 + 256 >> 2], HEAP32[$7 + 260 >> 2], HEAP32[$7 + 264 >> 2], HEAP32[$7 + 268 >> 2]);
     __floatsitf($7 + 224 | 0, HEAP32[(0 - $10 << 2) + 35712 >> 2]);
     __divtf3($7 + 208 | 0, HEAP32[$7 + 240 >> 2], HEAP32[$7 + 244 >> 2], HEAP32[$7 + 248 >> 2], HEAP32[$7 + 252 >> 2], HEAP32[$7 + 224 >> 2], HEAP32[$7 + 228 >> 2], HEAP32[$7 + 232 >> 2], HEAP32[$7 + 236 >> 2]);
     $13 = HEAP32[$7 + 208 >> 2];
     $11 = HEAP32[$7 + 212 >> 2];
     $2 = HEAP32[$7 + 220 >> 2];
     $1 = HEAP32[$7 + 216 >> 2];
     break label$11;
    }
    $1 = (Math_imul($10, -3) + $3 | 0) + 27 | 0;
    $2 = HEAP32[$7 + 768 >> 2];
    if ($2 >>> $1 | 0 ? ($1 | 0) <= 30 : 0) {
     break label$36
    }
    __floatsitf($7 + 352 | 0, $5);
    __floatunsitf($7 + 336 | 0, $2);
    __multf3($7 + 320 | 0, HEAP32[$7 + 352 >> 2], HEAP32[$7 + 356 >> 2], HEAP32[$7 + 360 >> 2], HEAP32[$7 + 364 >> 2], HEAP32[$7 + 336 >> 2], HEAP32[$7 + 340 >> 2], HEAP32[$7 + 344 >> 2], HEAP32[$7 + 348 >> 2]);
    __floatsitf($7 + 304 | 0, HEAP32[($10 << 2) + 35640 >> 2]);
    __multf3($7 + 288 | 0, HEAP32[$7 + 320 >> 2], HEAP32[$7 + 324 >> 2], HEAP32[$7 + 328 >> 2], HEAP32[$7 + 332 >> 2], HEAP32[$7 + 304 >> 2], HEAP32[$7 + 308 >> 2], HEAP32[$7 + 312 >> 2], HEAP32[$7 + 316 >> 2]);
    $13 = HEAP32[$7 + 288 >> 2];
    $11 = HEAP32[$7 + 292 >> 2];
    $2 = HEAP32[$7 + 300 >> 2];
    $1 = HEAP32[$7 + 296 >> 2];
    break label$11;
   }
   $17 = 0;
   $1 = ($10 | 0) % 9 | 0;
   label$39 : {
    if (!$1) {
     $2 = 0;
     break label$39;
    }
    $6 = ($10 | 0) > -1 ? $1 : $1 + 9 | 0;
    label$41 : {
     if (!$14) {
      $2 = 0;
      $14 = 0;
      break label$41;
     }
     $8 = HEAP32[(0 - $6 << 2) + 35712 >> 2];
     $13 = 1e9 / ($8 | 0) | 0;
     $15 = 0;
     $1 = 0;
     $2 = 0;
     while (1) {
      $9 = ($7 + 768 | 0) + ($1 << 2) | 0;
      $11 = HEAP32[$9 >> 2];
      $16 = ($11 >>> 0) / ($8 >>> 0) | 0;
      $12 = $15 + $16 | 0;
      HEAP32[$9 >> 2] = $12;
      $12 = !$12 & ($1 | 0) == ($2 | 0);
      $2 = $12 ? $2 + 1 & 2047 : $2;
      $10 = $12 ? $10 + -9 | 0 : $10;
      $15 = Math_imul($13, $11 - Math_imul($8, $16) | 0);
      $1 = $1 + 1 | 0;
      if (($14 | 0) != ($1 | 0)) {
       continue
      }
      break;
     };
     if (!$15) {
      break label$41
     }
     HEAP32[($7 + 768 | 0) + ($14 << 2) >> 2] = $15;
     $14 = $14 + 1 | 0;
    }
    $10 = ($10 - $6 | 0) + 9 | 0;
   }
   while (1) {
    $13 = ($7 + 768 | 0) + ($2 << 2) | 0;
    label$45 : {
     while (1) {
      if (($10 | 0) != 36 | HEAPU32[$13 >> 2] >= 10384593 ? ($10 | 0) >= 36 : 0) {
       break label$45
      }
      $16 = $14 + 2047 | 0;
      $15 = 0;
      $12 = $14;
      while (1) {
       $14 = $12;
       $6 = $16 & 2047;
       $12 = ($7 + 768 | 0) + ($6 << 2) | 0;
       $1 = HEAP32[$12 >> 2];
       $9 = $1 >>> 3 | 0;
       $8 = $1 << 29;
       $1 = $8 + $15 | 0;
       if ($1 >>> 0 < $8 >>> 0) {
        $9 = $9 + 1 | 0
       }
       $8 = $1;
       $11 = 0;
       label$49 : {
        if (!$9 & $1 >>> 0 < 1000000001 | $9 >>> 0 < 0) {
         break label$49
        }
        $1 = __wasm_i64_udiv($1, $9, 1e9);
        $8 = $8 - __wasm_i64_mul($1, i64toi32_i32$HIGH_BITS, 1e9, 0) | 0;
        $11 = $1;
       }
       $15 = $11;
       HEAP32[$12 >> 2] = $8;
       $12 = ($6 | 0) != ($14 + -1 & 2047) ? $14 : ($2 | 0) == ($6 | 0) ? $14 : $8 ? $14 : $6;
       $16 = $6 + -1 | 0;
       if (($2 | 0) != ($6 | 0)) {
        continue
       }
       break;
      };
      $17 = $17 + -29 | 0;
      if (!$15) {
       continue
      }
      break;
     };
     $2 = $2 + -1 & 2047;
     if (($12 | 0) == ($2 | 0)) {
      $1 = ($7 + 768 | 0) + (($12 + 2046 & 2047) << 2) | 0;
      $14 = $12 + -1 & 2047;
      HEAP32[$1 >> 2] = HEAP32[$1 >> 2] | HEAP32[($7 + 768 | 0) + ($14 << 2) >> 2];
     }
     $10 = $10 + 9 | 0;
     HEAP32[($7 + 768 | 0) + ($2 << 2) >> 2] = $15;
     continue;
    }
    break;
   };
   label$51 : {
    label$52 : while (1) {
     $6 = $14 + 1 & 2047;
     $13 = ($7 + 768 | 0) + (($14 + -1 & 2047) << 2) | 0;
     while (1) {
      $8 = ($10 | 0) > 45 ? 9 : 1;
      label$54 : {
       while (1) {
        $12 = $2;
        $1 = 0;
        label$56 : {
         while (1) {
          label$58 : {
           $2 = $1 + $12 & 2047;
           if (($2 | 0) == ($14 | 0)) {
            break label$58
           }
           $2 = HEAP32[($7 + 768 | 0) + ($2 << 2) >> 2];
           $9 = HEAP32[($1 << 2) + 35664 >> 2];
           if ($2 >>> 0 < $9 >>> 0) {
            break label$58
           }
           if ($2 >>> 0 > $9 >>> 0) {
            break label$56
           }
           $1 = $1 + 1 | 0;
           if (($1 | 0) != 4) {
            continue
           }
          }
          break;
         };
         if (($10 | 0) != 36) {
          break label$56
         }
         $8 = 0;
         $9 = 0;
         $1 = 0;
         $13 = 0;
         $11 = 0;
         while (1) {
          $2 = $1 + $12 & 2047;
          if (($2 | 0) == ($14 | 0)) {
           $14 = $14 + 1 & 2047;
           HEAP32[(($14 << 2) + $7 | 0) + 764 >> 2] = 0;
          }
          __multf3($7 + 752 | 0, $8, $9, $13, $11, 0, 0, 1342177280, 1075633366);
          __floatunsitf($7 + 736 | 0, HEAP32[($7 + 768 | 0) + ($2 << 2) >> 2]);
          __addtf3($7 + 720 | 0, HEAP32[$7 + 752 >> 2], HEAP32[$7 + 756 >> 2], HEAP32[$7 + 760 >> 2], HEAP32[$7 + 764 >> 2], HEAP32[$7 + 736 >> 2], HEAP32[$7 + 740 >> 2], HEAP32[$7 + 744 >> 2], HEAP32[$7 + 748 >> 2]);
          $13 = HEAP32[$7 + 728 >> 2];
          $11 = HEAP32[$7 + 732 >> 2];
          $8 = HEAP32[$7 + 720 >> 2];
          $9 = HEAP32[$7 + 724 >> 2];
          $1 = $1 + 1 | 0;
          if (($1 | 0) != 4) {
           continue
          }
          break;
         };
         __floatsitf($7 + 704 | 0, $5);
         __multf3($7 + 688 | 0, $8, $9, $13, $11, HEAP32[$7 + 704 >> 2], HEAP32[$7 + 708 >> 2], HEAP32[$7 + 712 >> 2], HEAP32[$7 + 716 >> 2]);
         $13 = HEAP32[$7 + 696 >> 2];
         $11 = HEAP32[$7 + 700 >> 2];
         $8 = 0;
         $9 = 0;
         $2 = HEAP32[$7 + 688 >> 2];
         $10 = HEAP32[$7 + 692 >> 2];
         $21 = $17 + 113 | 0;
         $6 = $21 - $4 | 0;
         $22 = ($6 | 0) < ($3 | 0);
         $4 = $22 ? (($6 | 0) > 0 ? $6 : 0) : $3;
         if (($4 | 0) <= 112) {
          break label$54
         }
         $1 = 0;
         $3 = 0;
         $15 = 0;
         $16 = 0;
         $18 = 0;
         break label$51;
        }
        $17 = $8 + $17 | 0;
        $2 = $14;
        if (($12 | 0) == ($2 | 0)) {
         continue
        }
        break;
       };
       $9 = 1e9 >>> $8 | 0;
       $11 = -1 << $8 ^ -1;
       $1 = 0;
       $2 = $12;
       while (1) {
        $15 = ($7 + 768 | 0) + ($12 << 2) | 0;
        $16 = HEAP32[$15 >> 2];
        $1 = ($16 >>> $8 | 0) + $1 | 0;
        HEAP32[$15 >> 2] = $1;
        $1 = !$1 & ($2 | 0) == ($12 | 0);
        $2 = $1 ? $2 + 1 & 2047 : $2;
        $10 = $1 ? $10 + -9 | 0 : $10;
        $1 = Math_imul($9, $11 & $16);
        $12 = $12 + 1 & 2047;
        if (($12 | 0) != ($14 | 0)) {
         continue
        }
        break;
       };
       if (!$1) {
        continue
       }
       if (($2 | 0) != ($6 | 0)) {
        HEAP32[($7 + 768 | 0) + ($14 << 2) >> 2] = $1;
        $14 = $6;
        continue label$52;
       }
       HEAP32[$13 >> 2] = HEAP32[$13 >> 2] | 1;
       $2 = $6;
       continue;
      }
      break;
     };
     break;
    };
    __extenddftf2($7 + 640 | 0, scalbn(1.0, 225 - $4 | 0));
    copysignl($7 + 672 | 0, HEAP32[$7 + 640 >> 2], HEAP32[$7 + 644 >> 2], HEAP32[$7 + 648 >> 2], HEAP32[$7 + 652 >> 2], $2, $10, $13, $11);
    $18 = HEAP32[$7 + 680 >> 2];
    $23 = HEAP32[$7 + 684 >> 2];
    $15 = HEAP32[$7 + 672 >> 2];
    $16 = HEAP32[$7 + 676 >> 2];
    __extenddftf2($7 + 624 | 0, scalbn(1.0, 113 - $4 | 0));
    fmodl($7 + 656 | 0, $2, $10, $13, $11, HEAP32[$7 + 624 >> 2], HEAP32[$7 + 628 >> 2], HEAP32[$7 + 632 >> 2], HEAP32[$7 + 636 >> 2]);
    $8 = HEAP32[$7 + 656 >> 2];
    $9 = HEAP32[$7 + 660 >> 2];
    $1 = HEAP32[$7 + 664 >> 2];
    $3 = HEAP32[$7 + 668 >> 2];
    __subtf3($7 + 608 | 0, $2, $10, $13, $11, $8, $9, $1, $3);
    __addtf3($7 + 592 | 0, $15, $16, $18, $23, HEAP32[$7 + 608 >> 2], HEAP32[$7 + 612 >> 2], HEAP32[$7 + 616 >> 2], HEAP32[$7 + 620 >> 2]);
    $13 = HEAP32[$7 + 600 >> 2];
    $11 = HEAP32[$7 + 604 >> 2];
    $2 = HEAP32[$7 + 592 >> 2];
    $10 = HEAP32[$7 + 596 >> 2];
   }
   $19 = $12 + 4 & 2047;
   label$63 : {
    if (($19 | 0) == ($14 | 0)) {
     break label$63
    }
    $19 = HEAP32[($7 + 768 | 0) + ($19 << 2) >> 2];
    label$64 : {
     if ($19 >>> 0 <= 499999999) {
      if (($12 + 5 & 2047) == ($14 | 0) ? !$19 : 0) {
       break label$64
      }
      __extenddftf2($7 + 480 | 0, +($5 | 0) * .25);
      __addtf3($7 + 464 | 0, $8, $9, $1, $3, HEAP32[$7 + 480 >> 2], HEAP32[$7 + 484 >> 2], HEAP32[$7 + 488 >> 2], HEAP32[$7 + 492 >> 2]);
      $1 = HEAP32[$7 + 472 >> 2];
      $3 = HEAP32[$7 + 476 >> 2];
      $8 = HEAP32[$7 + 464 >> 2];
      $9 = HEAP32[$7 + 468 >> 2];
      break label$64;
     }
     if (($19 | 0) != 5e8) {
      __extenddftf2($7 + 576 | 0, +($5 | 0) * .75);
      __addtf3($7 + 560 | 0, $8, $9, $1, $3, HEAP32[$7 + 576 >> 2], HEAP32[$7 + 580 >> 2], HEAP32[$7 + 584 >> 2], HEAP32[$7 + 588 >> 2]);
      $1 = HEAP32[$7 + 568 >> 2];
      $3 = HEAP32[$7 + 572 >> 2];
      $8 = HEAP32[$7 + 560 >> 2];
      $9 = HEAP32[$7 + 564 >> 2];
      break label$64;
     }
     $24 = +($5 | 0);
     if (($12 + 5 & 2047) == ($14 | 0)) {
      __extenddftf2($7 + 512 | 0, $24 * .5);
      __addtf3($7 + 496 | 0, $8, $9, $1, $3, HEAP32[$7 + 512 >> 2], HEAP32[$7 + 516 >> 2], HEAP32[$7 + 520 >> 2], HEAP32[$7 + 524 >> 2]);
      $1 = HEAP32[$7 + 504 >> 2];
      $3 = HEAP32[$7 + 508 >> 2];
      $8 = HEAP32[$7 + 496 >> 2];
      $9 = HEAP32[$7 + 500 >> 2];
      break label$64;
     }
     __extenddftf2($7 + 544 | 0, $24 * .75);
     __addtf3($7 + 528 | 0, $8, $9, $1, $3, HEAP32[$7 + 544 >> 2], HEAP32[$7 + 548 >> 2], HEAP32[$7 + 552 >> 2], HEAP32[$7 + 556 >> 2]);
     $1 = HEAP32[$7 + 536 >> 2];
     $3 = HEAP32[$7 + 540 >> 2];
     $8 = HEAP32[$7 + 528 >> 2];
     $9 = HEAP32[$7 + 532 >> 2];
    }
    if (($4 | 0) > 111) {
     break label$63
    }
    fmodl($7 + 448 | 0, $8, $9, $1, $3, 0, 0, 0, 1073676288);
    if (__letf2(HEAP32[$7 + 448 >> 2], HEAP32[$7 + 452 >> 2], HEAP32[$7 + 456 >> 2], HEAP32[$7 + 460 >> 2], 0, 0, 0, 0)) {
     break label$63
    }
    __addtf3($7 + 432 | 0, $8, $9, $1, $3, 0, 0, 0, 1073676288);
    $1 = HEAP32[$7 + 440 >> 2];
    $3 = HEAP32[$7 + 444 >> 2];
    $8 = HEAP32[$7 + 432 >> 2];
    $9 = HEAP32[$7 + 436 >> 2];
   }
   __addtf3($7 + 416 | 0, $2, $10, $13, $11, $8, $9, $1, $3);
   __subtf3($7 + 400 | 0, HEAP32[$7 + 416 >> 2], HEAP32[$7 + 420 >> 2], HEAP32[$7 + 424 >> 2], HEAP32[$7 + 428 >> 2], $15, $16, $18, $23);
   $13 = HEAP32[$7 + 408 >> 2];
   $11 = HEAP32[$7 + 412 >> 2];
   $2 = HEAP32[$7 + 400 >> 2];
   $10 = HEAP32[$7 + 404 >> 2];
   label$68 : {
    if (($21 & 2147483647) <= (-2 - $20 | 0)) {
     break label$68
    }
    __multf3($7 + 384 | 0, $2, $10, $13, $11, 0, 0, 0, 1073610752);
    $3 = __letf2($8, $9, $1, $3, 0, 0, 0, 0);
    $1 = Math_abs(__trunctfdf2($2, $10, $13, $11)) >= 1038459371706965525706099.0e10;
    $13 = $1 ? HEAP32[$7 + 392 >> 2] : $13;
    $11 = $1 ? HEAP32[$7 + 396 >> 2] : $11;
    $2 = $1 ? HEAP32[$7 + 384 >> 2] : $2;
    $10 = $1 ? HEAP32[$7 + 388 >> 2] : $10;
    $17 = $1 + $17 | 0;
    if (($17 + 110 | 0) <= ($25 | 0) ? !($22 & ($1 ^ 1 | ($4 | 0) != ($6 | 0)) & ($3 | 0) != 0) : 0) {
     break label$68
    }
    HEAP32[16596] = 68;
   }
   scalbnl($7 + 368 | 0, $2, $10, $13, $11, $17);
   $13 = HEAP32[$7 + 368 >> 2];
   $11 = HEAP32[$7 + 372 >> 2];
   $2 = HEAP32[$7 + 380 >> 2];
   $1 = HEAP32[$7 + 376 >> 2];
  }
  HEAP32[$0 >> 2] = $13;
  HEAP32[$0 + 4 >> 2] = $11;
  HEAP32[$0 + 8 >> 2] = $1;
  HEAP32[$0 + 12 >> 2] = $2;
  $0 = $7 + 8960 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function scanexp($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  $3 = HEAP32[$0 + 4 >> 2];
  label$2 : {
   if ($3 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
    HEAP32[$0 + 4 >> 2] = $3 + 1;
    $3 = HEAPU8[$3 | 0];
    break label$2;
   }
   $3 = __shgetc($0);
  }
  $2 = $3 + -43 | 0;
  label$1 : {
   if (!($2 - 1 | 0 ? $2 >>> 0 <= 2 : 0)) {
    $2 = $3 + -48 | 0;
    break label$1;
   }
   $2 = HEAP32[$0 + 4 >> 2];
   label$5 : {
    if ($2 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
     HEAP32[$0 + 4 >> 2] = $2 + 1;
     $2 = HEAPU8[$2 | 0];
     break label$5;
    }
    $2 = __shgetc($0);
   }
   $5 = ($3 | 0) == 45;
   $3 = $2;
   $2 = $2 + -48 | 0;
   if (!(!HEAP32[$0 + 104 >> 2] | (!$1 | $2 >>> 0 < 10))) {
    HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + -1
   }
  }
  label$8 : {
   if ($2 >>> 0 < 10) {
    $2 = 0;
    while (1) {
     $2 = Math_imul($2, 10) + $3 | 0;
     $1 = HEAP32[$0 + 4 >> 2];
     label$11 : {
      if ($1 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
       HEAP32[$0 + 4 >> 2] = $1 + 1;
       $3 = HEAPU8[$1 | 0];
       break label$11;
      }
      $3 = __shgetc($0);
     }
     $4 = $3 + -48 | 0;
     $2 = $2 + -48 | 0;
     if (($2 | 0) < 214748364 ? $4 >>> 0 <= 9 : 0) {
      continue
     }
     break;
    };
    $1 = $2;
    $2 = $2 >> 31;
    label$13 : {
     if ($4 >>> 0 >= 10) {
      break label$13
     }
     while (1) {
      $2 = __wasm_i64_mul($1, $2, 10, 0);
      $1 = i64toi32_i32$HIGH_BITS;
      $3 = $2 + $3 | 0;
      if ($3 >>> 0 < $2 >>> 0) {
       $1 = $1 + 1 | 0
      }
      $4 = $3;
      $3 = HEAP32[$0 + 4 >> 2];
      label$15 : {
       if ($3 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
        HEAP32[$0 + 4 >> 2] = $3 + 1;
        $3 = HEAPU8[$3 | 0];
        break label$15;
       }
       $3 = __shgetc($0);
      }
      $2 = $1 + -1 | 0;
      $1 = $4 + -48 | 0;
      if ($1 >>> 0 < 4294967248) {
       $2 = $2 + 1 | 0
      }
      $4 = $3 + -48 | 0;
      if ($4 >>> 0 > 9) {
       break label$13
      }
      if (($2 | 0) < 21474836 ? 1 : ($2 | 0) <= 21474836 ? ($1 >>> 0 >= 2061584302 ? 0 : 1) : 0) {
       continue
      }
      break;
     };
    }
    if ($4 >>> 0 < 10) {
     while (1) {
      $3 = HEAP32[$0 + 4 >> 2];
      label$19 : {
       if ($3 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
        HEAP32[$0 + 4 >> 2] = $3 + 1;
        $3 = HEAPU8[$3 | 0];
        break label$19;
       }
       $3 = __shgetc($0);
      }
      if ($3 + -48 >>> 0 < 10) {
       continue
      }
      break;
     }
    }
    if (HEAP32[$0 + 104 >> 2]) {
     HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + -1
    }
    $0 = $1;
    $1 = $5 ? 0 - $0 | 0 : $0;
    $2 = $5 ? 0 - ($2 + (0 < $0 >>> 0) | 0) | 0 : $2;
    break label$8;
   }
   $1 = 0;
   $2 = -2147483648;
   if (!HEAP32[$0 + 104 >> 2]) {
    break label$8
   }
   HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + -1;
   i64toi32_i32$HIGH_BITS = -2147483648;
   return 0;
  }
  i64toi32_i32$HIGH_BITS = $2;
  return $1;
 }
 
 function __trunctfsf2($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
  $7 = global$0 - 32 | 0;
  $4 = $7;
  if ($4 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  $4 = $3 & 2147483647;
  $6 = $4;
  $5 = $4 + -1065418752 | 0;
  $4 = $2;
  $8 = $4;
  if ($4 >>> 0 < 0) {
   $5 = $5 + 1 | 0
  }
  $10 = $8;
  $9 = $6 + -1082064896 | 0;
  $8 = $4;
  if ($4 >>> 0 < 0) {
   $9 = $9 + 1 | 0
  }
  label$2 : {
   if (($5 | 0) == ($9 | 0) & $10 >>> 0 < $8 >>> 0 | $5 >>> 0 < $9 >>> 0) {
    $6 = ($3 & 33554431) << 7 | $2 >>> 25;
    $4 = 0;
    $9 = $4;
    $8 = $2 & 33554431;
    if (!(!$4 & ($8 | 0) == 16777216 ? !($0 | $1) : !$4 & $8 >>> 0 < 16777216 | $4 >>> 0 < 0)) {
     $5 = $6 + 1073741825 | 0;
     break label$2;
    }
    $5 = $6 + 1073741824 | 0;
    if ($8 ^ 16777216 | $0 | ($1 | $9)) {
     break label$2
    }
    $5 = ($5 & 1) + $5 | 0;
    break label$2;
   }
   if (!(!$4 & ($6 | 0) == 2147418112 ? !($0 | $1) : ($6 | 0) == 2147418112 & $4 >>> 0 < 0 | $6 >>> 0 < 2147418112)) {
    $5 = (($3 & 33554431) << 7 | $2 >>> 25) & 4194303 | 2143289344;
    break label$2;
   }
   $5 = 2139095040;
   if (($6 | 0) == 1082064895 & $4 >>> 0 > 4294967295 | $6 >>> 0 > 1082064895) {
    break label$2
   }
   $5 = 0;
   $6 = $6 >>> 16 | 0;
   if ($6 >>> 0 < 16145) {
    break label$2
   }
   $5 = $3 & 65535 | 65536;
   __ashlti3($7 + 16 | 0, $0, $1, $2, $5, $6 + -16129 | 0);
   __lshrti3($7, $0, $1, $4, $5, 16257 - $6 | 0);
   $1 = HEAP32[$7 + 8 >> 2];
   $5 = (HEAP32[$7 + 12 >> 2] & 33554431) << 7 | $1 >>> 25;
   $4 = HEAP32[$7 + 4 >> 2];
   $6 = $4;
   $0 = 0;
   $8 = $0;
   $9 = HEAP32[$7 >> 2] | ((HEAP32[$7 + 16 >> 2] | HEAP32[$7 + 24 >> 2]) != 0 | (HEAP32[$7 + 20 >> 2] | HEAP32[$7 + 28 >> 2]) != 0);
   $1 = $1 & 33554431;
   if (!(!$0 & ($1 | 0) == 16777216 ? !($4 | $9) : !$0 & $1 >>> 0 < 16777216 | $0 >>> 0 < 0)) {
    $5 = $5 + 1 | 0;
    break label$2;
   }
   if ($1 ^ 16777216 | $9 | ($6 | $8)) {
    break label$2
   }
   $5 = ($5 & 1) + $5 | 0;
  }
  $0 = $7 + 32 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
  return wasm2js_scratch_store_i32(0, $3 & -2147483648 | $5), wasm2js_scratch_load_f32();
 }
 
 function vfscanf($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
  $7 = global$0 - 304 | 0;
  $3 = $7;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  $4 = HEAPU8[$1 | 0];
  label$3 : {
   if (!$4) {
    break label$3
   }
   $9 = $0 + 4 | 0;
   label$4 : {
    while (1) {
     label$6 : {
      label$7 : {
       if (isspace($4 & 255)) {
        while (1) {
         $4 = $1;
         $1 = $1 + 1 | 0;
         if (isspace(HEAPU8[$4 + 1 | 0])) {
          continue
         }
         break;
        };
        __shlim($0, 0, 0);
        while (1) {
         $1 = HEAP32[$0 + 4 >> 2];
         label$11 : {
          if ($1 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
           HEAP32[$9 >> 2] = $1 + 1;
           $1 = HEAPU8[$1 | 0];
           break label$11;
          }
          $1 = __shgetc($0);
         }
         if (isspace($1)) {
          continue
         }
         break;
        };
        label$13 : {
         if (!HEAP32[$0 + 104 >> 2]) {
          $1 = HEAP32[$9 >> 2];
          break label$13;
         }
         $1 = HEAP32[$9 >> 2] + -1 | 0;
         HEAP32[$9 >> 2] = $1;
        }
        $8 = $1 - HEAP32[$0 + 8 >> 2] | 0;
        $5 = $8;
        $1 = $12 + HEAP32[$0 + 124 >> 2] | 0;
        $3 = $10 + HEAP32[$0 + 120 >> 2] | 0;
        if ($3 >>> 0 < $10 >>> 0) {
         $1 = $1 + 1 | 0
        }
        $5 = $3 + $5 | 0;
        $10 = $5;
        $1 = ($8 >> 31) + $1 | 0;
        $12 = $5 >>> 0 < $3 >>> 0 ? $1 + 1 | 0 : $1;
        break label$7;
       }
       label$15 : {
        label$16 : {
         label$17 : {
          $4 = HEAPU8[$1 | 0];
          if (($4 | 0) == 37) {
           $3 = HEAPU8[$1 + 1 | 0];
           if (($3 | 0) == 42) {
            break label$17
           }
           if (($3 | 0) != 37) {
            break label$16
           }
          }
          __shlim($0, 0, 0);
          $4 = (($4 | 0) == 37) + $1 | 0;
          $1 = HEAP32[$0 + 4 >> 2];
          label$19 : {
           if ($1 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
            HEAP32[$9 >> 2] = $1 + 1;
            $1 = HEAPU8[$1 | 0];
            break label$19;
           }
           $1 = __shgetc($0);
          }
          if (($1 | 0) != HEAPU8[$4 | 0]) {
           if (HEAP32[$0 + 104 >> 2]) {
            HEAP32[$9 >> 2] = HEAP32[$9 >> 2] + -1
           }
           $16 = 0;
           if (($1 | 0) >= 0) {
            break label$3
           }
           break label$6;
          }
          $10 = $10 + 1 | 0;
          if ($10 >>> 0 < 1) {
           $12 = $12 + 1 | 0
          }
          break label$7;
         }
         $4 = $1 + 2 | 0;
         $8 = 0;
         break label$15;
        }
        if (!(!isdigit($3) | HEAPU8[$1 + 2 | 0] != 36)) {
         $4 = $1 + 3 | 0;
         $8 = arg_n($2, HEAPU8[$1 + 1 | 0] + -48 | 0);
         break label$15;
        }
        $4 = $1 + 1 | 0;
        $8 = HEAP32[$2 >> 2];
        $2 = $2 + 4 | 0;
       }
       $16 = 0;
       $1 = 0;
       if (isdigit(HEAPU8[$4 | 0])) {
        while (1) {
         $1 = (HEAPU8[$4 | 0] + Math_imul($1, 10) | 0) + -48 | 0;
         $3 = HEAPU8[$4 + 1 | 0];
         $4 = $4 + 1 | 0;
         if (isdigit($3)) {
          continue
         }
         break;
        }
       }
       $6 = HEAPU8[$4 | 0];
       $3 = $4;
       label$26 : {
        if (($6 | 0) != 109) {
         break label$26
        }
        $11 = 0;
        $16 = ($8 | 0) != 0;
        $6 = HEAPU8[$4 + 1 | 0];
        $15 = 0;
        $3 = $4 + 1 | 0;
       }
       $5 = ($6 & 255) + -65 | 0;
       if ($5 >>> 0 > 57) {
        break label$6
       }
       $4 = $3 + 1 | 0;
       $6 = 3;
       label$27 : {
        label$28 : {
         switch ($5 - 1 | 0) {
         case 38:
          $5 = $3 + 2 | 0;
          $3 = HEAPU8[$3 + 1 | 0] == 104;
          $4 = $3 ? $5 : $4;
          $6 = $3 ? -2 : -1;
          break label$27;
         case 42:
          $5 = $3 + 2 | 0;
          $3 = HEAPU8[$3 + 1 | 0] == 108;
          $4 = $3 ? $5 : $4;
          $6 = $3 ? 3 : 1;
          break label$27;
         case 50:
         case 56:
          $6 = 1;
          break label$27;
         case 10:
          $6 = 2;
          break label$27;
         case 40:
          break label$27;
         case 0:
         case 2:
         case 6:
         case 7:
         case 8:
         case 9:
         case 11:
         case 12:
         case 13:
         case 14:
         case 15:
         case 16:
         case 18:
         case 19:
         case 20:
         case 21:
         case 23:
         case 24:
         case 26:
         case 27:
         case 28:
         case 29:
         case 30:
         case 32:
         case 41:
         case 43:
         case 47:
         case 48:
         case 52:
         case 53:
         case 55:
          break label$6;
         default:
          break label$28;
         };
        }
        $6 = 0;
        $4 = $3;
       }
       $3 = HEAPU8[$4 | 0];
       $5 = ($3 & 47) == 3;
       $17 = $5 ? 1 : $6;
       $13 = $5 ? $3 | 32 : $3;
       label$33 : {
        if (($13 | 0) == 91) {
         break label$33
        }
        label$34 : {
         if (($13 | 0) != 110) {
          if (($13 | 0) != 99) {
           break label$34
          }
          $1 = ($1 | 0) > 1 ? $1 : 1;
          break label$33;
         }
         store_int($8, $17, $10, $12);
         break label$7;
        }
        __shlim($0, 0, 0);
        while (1) {
         $3 = HEAP32[$0 + 4 >> 2];
         label$37 : {
          if ($3 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
           HEAP32[$9 >> 2] = $3 + 1;
           $3 = HEAPU8[$3 | 0];
           break label$37;
          }
          $3 = __shgetc($0);
         }
         if (isspace($3)) {
          continue
         }
         break;
        };
        label$39 : {
         if (!HEAP32[$0 + 104 >> 2]) {
          $3 = HEAP32[$9 >> 2];
          break label$39;
         }
         $3 = HEAP32[$9 >> 2] + -1 | 0;
         HEAP32[$9 >> 2] = $3;
        }
        $5 = $3 - HEAP32[$0 + 8 >> 2] | 0;
        $14 = $5;
        $12 = $12 + HEAP32[$0 + 124 >> 2] | 0;
        $3 = $10 + HEAP32[$0 + 120 >> 2] | 0;
        if ($3 >>> 0 < $10 >>> 0) {
         $12 = $12 + 1 | 0
        }
        $10 = $12 + ($5 >> 31) | 0;
        $6 = $10 + 1 | 0;
        $5 = $10;
        $10 = $3 + $14 | 0;
        $12 = $10 >>> 0 < $3 >>> 0 ? $6 : $5;
       }
       $3 = $1 >> 31;
       $19 = $3;
       $20 = $1;
       __shlim($0, $1, $3);
       $5 = HEAP32[$0 + 4 >> 2];
       $3 = HEAP32[$0 + 104 >> 2];
       label$41 : {
        if ($5 >>> 0 < $3 >>> 0) {
         HEAP32[$9 >> 2] = $5 + 1;
         break label$41;
        }
        if ((__shgetc($0) | 0) < 0) {
         break label$6
        }
        $3 = HEAP32[$0 + 104 >> 2];
       }
       if ($3) {
        HEAP32[$9 >> 2] = HEAP32[$9 >> 2] + -1
       }
       label$44 : {
        label$45 : {
         $3 = $13 + -88 | 0;
         if ($3 >>> 0 > 32) {
          $1 = $13 + -65 | 0;
          if ($1 >>> 0 > 6 | !(1 << $1 & 113)) {
           break label$44
          }
          break label$45;
         }
         $6 = 16;
         label$47 : {
          label$48 : {
           label$49 : {
            switch ($3 - 1 | 0) {
            case 16:
             $6 = 0;
             break label$48;
            case 11:
            case 28:
             $6 = 10;
             break label$48;
            case 0:
            case 1:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 9:
            case 15:
            case 17:
            case 18:
            case 19:
            case 20:
            case 21:
            case 24:
            case 25:
            case 27:
            case 29:
            case 30:
             break label$44;
            case 8:
            case 12:
            case 13:
            case 14:
             break label$45;
            case 2:
            case 10:
            case 26:
             break label$47;
            case 22:
             break label$49;
            default:
             break label$48;
            };
           }
           $6 = 8;
          }
          $1 = __intscan($0, $6, 0, -1, -1);
          $3 = HEAP32[$0 + 4 >> 2] - HEAP32[$0 + 8 >> 2] | 0;
          if (HEAP32[$0 + 120 >> 2] == (0 - $3 | 0) & HEAP32[$0 + 124 >> 2] == (0 - (($3 >> 31) + (0 < $3 >>> 0) | 0) | 0)) {
           break label$4
          }
          if (!(!$8 | ($13 | 0) != 112)) {
           HEAP32[$8 >> 2] = $1;
           break label$44;
          }
          store_int($8, $17, $1, i64toi32_i32$HIGH_BITS);
          break label$44;
         }
         label$53 : {
          if (($13 | 16) == 115) {
           memset($7 + 32 | 0, -1, 257);
           HEAP8[$7 + 32 | 0] = 0;
           if (($13 | 0) != 115) {
            break label$53
           }
           HEAP8[$7 + 65 | 0] = 0;
           HEAP8[$7 + 46 | 0] = 0;
           HEAP16[$7 + 42 >> 1] = 0;
           HEAP16[$7 + 44 >> 1] = 0;
           break label$53;
          }
          $3 = HEAPU8[$4 + 1 | 0];
          $5 = ($3 | 0) == 94;
          memset($7 + 32 | 0, $5, 257);
          HEAP8[$7 + 32 | 0] = 0;
          $14 = $5 ? $4 + 2 | 0 : $4 + 1 | 0;
          label$55 : {
           label$56 : {
            label$57 : {
             $4 = HEAPU8[($5 ? 2 : 1) + $4 | 0];
             if (($4 | 0) != 45) {
              if (($4 | 0) == 93) {
               break label$57
              }
              $6 = ($3 | 0) != 94;
              $4 = $14;
              break label$55;
             }
             $6 = ($3 | 0) != 94;
             HEAP8[$7 + 78 | 0] = $6;
             break label$56;
            }
            $6 = ($3 | 0) != 94;
            HEAP8[$7 + 126 | 0] = $6;
           }
           $4 = $14 + 1 | 0;
          }
          while (1) {
           $3 = HEAPU8[$4 | 0];
           label$60 : {
            if (($3 | 0) != 45) {
             if (!$3) {
              break label$6
             }
             if (($3 | 0) != 93) {
              break label$60
             }
             break label$53;
            }
            $3 = 45;
            $5 = HEAPU8[$4 + 1 | 0];
            if (!$5 | ($5 | 0) == 93) {
             break label$60
            }
            $14 = $4 + 1 | 0;
            $4 = HEAPU8[$4 + -1 | 0];
            label$62 : {
             if ($4 >>> 0 >= $5 >>> 0) {
              $3 = $5;
              break label$62;
             }
             while (1) {
              $4 = $4 + 1 | 0;
              HEAP8[$4 + ($7 + 32 | 0) | 0] = $6;
              $3 = HEAPU8[$14 | 0];
              if ($4 >>> 0 < $3 >>> 0) {
               continue
              }
              break;
             };
            }
            $4 = $14;
           }
           HEAP8[($3 + $7 | 0) + 33 | 0] = $6;
           $4 = $4 + 1 | 0;
           continue;
          };
         }
         $5 = ($13 | 0) == 99;
         $6 = $5 ? $1 + 1 | 0 : 31;
         label$65 : {
          label$66 : {
           $14 = ($17 | 0) != 1;
           label$67 : {
            if (!$14) {
             $3 = $8;
             if ($16) {
              $3 = dlmalloc($6 << 2);
              if (!$3) {
               break label$65
              }
             }
             HEAP32[$7 + 296 >> 2] = 0;
             HEAP32[$7 + 300 >> 2] = 0;
             $1 = 0;
             while (1) {
              $15 = $3;
              label$71 : {
               while (1) {
                $3 = HEAP32[$0 + 4 >> 2];
                label$73 : {
                 if ($3 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
                  HEAP32[$9 >> 2] = $3 + 1;
                  $3 = HEAPU8[$3 | 0];
                  break label$73;
                 }
                 $3 = __shgetc($0);
                }
                if (!HEAPU8[($3 + $7 | 0) + 33 | 0]) {
                 break label$71
                }
                HEAP8[$7 + 27 | 0] = $3;
                $3 = mbrtowc($7 + 28 | 0, $7 + 27 | 0, 1, $7 + 296 | 0);
                if (($3 | 0) == -2) {
                 continue
                }
                if (($3 | 0) == -1) {
                 break label$66
                }
                if ($15) {
                 HEAP32[($1 << 2) + $15 >> 2] = HEAP32[$7 + 28 >> 2];
                 $1 = $1 + 1 | 0;
                }
                if (!$16 | ($1 | 0) != ($6 | 0)) {
                 continue
                }
                break;
               };
               $6 = $6 << 1 | 1;
               $3 = dlrealloc($15, $6 << 2);
               if ($3) {
                continue
               }
               break label$66;
              }
              break;
             };
             $3 = $7 + 296 | 0;
             $11 = 1;
             __inlined_func$mbsinit : {
              if (!$3) {
               break __inlined_func$mbsinit
              }
              $11 = !HEAP32[$3 >> 2];
             }
             if (!$11) {
              break label$66
             }
             $11 = 0;
             break label$67;
            }
            if ($16) {
             $1 = 0;
             $3 = dlmalloc($6);
             if (!$3) {
              break label$65
             }
             while (1) {
              $11 = $3;
              while (1) {
               $3 = HEAP32[$0 + 4 >> 2];
               label$79 : {
                if ($3 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
                 HEAP32[$9 >> 2] = $3 + 1;
                 $3 = HEAPU8[$3 | 0];
                 break label$79;
                }
                $3 = __shgetc($0);
               }
               if (!HEAPU8[($3 + $7 | 0) + 33 | 0]) {
                $15 = 0;
                break label$67;
               }
               HEAP8[$1 + $11 | 0] = $3;
               $1 = $1 + 1 | 0;
               if (($6 | 0) != ($1 | 0)) {
                continue
               }
               break;
              };
              $15 = 0;
              $6 = $6 << 1 | 1;
              $3 = dlrealloc($11, $6);
              if ($3) {
               continue
              }
              break;
             };
             break label$6;
            }
            $1 = 0;
            if ($8) {
             while (1) {
              $3 = HEAP32[$0 + 4 >> 2];
              label$84 : {
               if ($3 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
                HEAP32[$9 >> 2] = $3 + 1;
                $3 = HEAPU8[$3 | 0];
                break label$84;
               }
               $3 = __shgetc($0);
              }
              if (HEAPU8[($3 + $7 | 0) + 33 | 0]) {
               HEAP8[$1 + $8 | 0] = $3;
               $1 = $1 + 1 | 0;
               continue;
              } else {
               $15 = 0;
               $11 = $8;
               break label$67;
              }
             }
            }
            while (1) {
             $1 = HEAP32[$0 + 4 >> 2];
             label$89 : {
              if ($1 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
               HEAP32[$9 >> 2] = $1 + 1;
               $1 = HEAPU8[$1 | 0];
               break label$89;
              }
              $1 = __shgetc($0);
             }
             if (HEAPU8[($1 + $7 | 0) + 33 | 0]) {
              continue
             }
             break;
            };
            $11 = 0;
            $15 = 0;
            $1 = 0;
           }
           label$91 : {
            if (!HEAP32[$0 + 104 >> 2]) {
             $3 = HEAP32[$9 >> 2];
             break label$91;
            }
            $3 = HEAP32[$9 >> 2] + -1 | 0;
            HEAP32[$9 >> 2] = $3;
           }
           $3 = $3 - HEAP32[$0 + 8 >> 2] | 0;
           $6 = $3;
           $13 = $3 + HEAP32[$0 + 120 >> 2] | 0;
           $3 = HEAP32[$0 + 124 >> 2] + ($3 >> 31) | 0;
           $3 = $13 >>> 0 < $6 >>> 0 ? $3 + 1 | 0 : $3;
           if (!($13 | $3) | ($5 ? ($13 | 0) != ($20 | 0) | ($3 | 0) != ($19 | 0) : 0)) {
            break label$4
           }
           label$93 : {
            if (!$16) {
             break label$93
            }
            if (!$14) {
             HEAP32[$8 >> 2] = $15;
             break label$93;
            }
            HEAP32[$8 >> 2] = $11;
           }
           if ($5) {
            break label$44
           }
           if ($15) {
            HEAP32[($1 << 2) + $15 >> 2] = 0
           }
           if (!$11) {
            $11 = 0;
            break label$44;
           }
           HEAP8[$1 + $11 | 0] = 0;
           break label$44;
          }
          $11 = 0;
          break label$6;
         }
         $11 = 0;
         $15 = 0;
         break label$6;
        }
        __floatscan($7, $0, $17, 0);
        $1 = HEAP32[$0 + 4 >> 2] - HEAP32[$0 + 8 >> 2] | 0;
        $3 = $1;
        if (HEAP32[$0 + 120 >> 2] == (0 - $3 | 0) & HEAP32[$0 + 124 >> 2] == (0 - (($3 >> 31) + (0 < $3 >>> 0) | 0) | 0)) {
         break label$4
        }
        if (!$8 | $17 >>> 0 > 2) {
         break label$44
        }
        $1 = HEAP32[$7 + 8 >> 2];
        $3 = HEAP32[$7 + 12 >> 2];
        $5 = HEAP32[$7 >> 2];
        $14 = HEAP32[$7 + 4 >> 2];
        label$97 : {
         switch ($17 - 1 | 0) {
         default:
          HEAPF32[$8 >> 2] = __trunctfsf2($5, $14, $1, $3);
          break label$44;
         case 0:
          HEAPF64[$8 >> 3] = __trunctfdf2($5, $14, $1, $3);
          break label$44;
         case 1:
          break label$97;
         };
        }
        HEAP32[$8 >> 2] = $5;
        HEAP32[$8 + 4 >> 2] = $14;
        HEAP32[$8 + 8 >> 2] = $1;
        HEAP32[$8 + 12 >> 2] = $3;
       }
       $1 = HEAP32[$0 + 4 >> 2] - HEAP32[$0 + 8 >> 2] | 0;
       $3 = $1;
       $5 = $3 >> 31;
       $12 = $12 + HEAP32[$0 + 124 >> 2] | 0;
       $1 = $10 + HEAP32[$0 + 120 >> 2] | 0;
       if ($1 >>> 0 < $10 >>> 0) {
        $12 = $12 + 1 | 0
       }
       $10 = $1 + $3 | 0;
       $3 = $5 + $12 | 0;
       $12 = $10 >>> 0 < $1 >>> 0 ? $3 + 1 | 0 : $3;
       $18 = (($8 | 0) != 0) + $18 | 0;
      }
      $1 = $4 + 1 | 0;
      $4 = HEAPU8[$4 + 1 | 0];
      if ($4) {
       continue
      }
      break label$3;
     }
     break;
    };
    $18 = $18 ? $18 : -1;
   }
   if (!$16) {
    break label$3
   }
   dlfree($11);
   dlfree($15);
  }
  $0 = $7 + 304 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
  return $18;
 }
 
 function arg_n($0, $1) {
  var $2 = 0;
  $2 = global$0 - 16 | 0;
  HEAP32[$2 + 12 >> 2] = $0;
  $0 = (($1 << 2) - ((($1 | 0) != 0) << 2) | 0) + $0 | 0;
  HEAP32[$2 + 8 >> 2] = $0 + 4;
  return HEAP32[$0 >> 2];
 }
 
 function store_int($0, $1, $2, $3) {
  label$1 : {
   if (!$0) {
    break label$1
   }
   $1 = $1 + 2 | 0;
   if ($1 >>> 0 > 5) {
    break label$1
   }
   label$2 : {
    switch ($1 - 1 | 0) {
    default:
     HEAP8[$0 | 0] = $2;
     return;
    case 0:
     HEAP16[$0 >> 1] = $2;
     return;
    case 1:
    case 2:
     HEAP32[$0 >> 2] = $2;
     return;
    case 3:
     break label$1;
    case 4:
     break label$2;
    };
   }
   HEAP32[$0 >> 2] = $2;
   HEAP32[$0 + 4 >> 2] = $3;
  }
 }
 
 function __string_read($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0;
  $4 = HEAP32[$0 + 84 >> 2];
  $3 = $2 + 256 | 0;
  $5 = memchr($4, $3);
  $3 = $5 ? $5 - $4 | 0 : $3;
  $2 = $3 >>> 0 < $2 >>> 0 ? $3 : $2;
  memcpy($1, $4, $2);
  $1 = $4 + $3 | 0;
  HEAP32[$0 + 84 >> 2] = $1;
  HEAP32[$0 + 8 >> 2] = $1;
  HEAP32[$0 + 4 >> 2] = $2 + $4;
  return $2;
 }
 
 function vsscanf($0, $1, $2) {
  var $3 = 0, $4 = 0;
  $3 = global$0 - 144 | 0;
  $4 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  $3 = memset($3, 0, 144);
  HEAP32[$3 + 76 >> 2] = -1;
  HEAP32[$3 + 44 >> 2] = $0;
  HEAP32[$3 + 32 >> 2] = 1639;
  HEAP32[$3 + 84 >> 2] = $0;
  $0 = vfscanf($3, $1, $2);
  $1 = $3 + 144 | 0;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  return $0;
 }
 
 function do_read($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  return __string_read($0, $1, $2) | 0;
 }
 
 function strcmp($0, $1) {
  var $2 = 0, $3 = 0;
  $2 = HEAPU8[$0 | 0];
  $3 = HEAPU8[$1 | 0];
  label$1 : {
   if (!$2 | ($2 | 0) != ($3 | 0)) {
    break label$1
   }
   while (1) {
    $3 = HEAPU8[$1 + 1 | 0];
    $2 = HEAPU8[$0 + 1 | 0];
    if (!$2) {
     break label$1
    }
    $1 = $1 + 1 | 0;
    $0 = $0 + 1 | 0;
    if (($2 | 0) == ($3 | 0)) {
     continue
    }
    break;
   };
  }
  return $2 - $3 | 0;
 }
 
 function __mo_lookup($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
  $5 = HEAP32[$0 >> 2] + 1794895138 | 0;
  $4 = swapc(HEAP32[$0 + 8 >> 2], $5);
  $6 = swapc(HEAP32[$0 + 12 >> 2], $5);
  $3 = swapc(HEAP32[$0 + 16 >> 2], $5);
  label$1 : {
   if ($4 >>> 0 >= $1 >>> 2 >>> 0) {
    break label$1
   }
   $7 = $1 - ($4 << 2) | 0;
   if (($3 | $6) & 3 | ($6 >>> 0 >= $7 >>> 0 | $3 >>> 0 >= $7 >>> 0)) {
    break label$1
   }
   $11 = $3 >>> 2 | 0;
   $12 = $6 >>> 2 | 0;
   $6 = 0;
   while (1) {
    $7 = $4 >>> 1 | 0;
    $8 = $7 + $6 | 0;
    $9 = $8 << 1;
    $3 = ($9 + $12 << 2) + $0 | 0;
    $10 = swapc(HEAP32[$3 >> 2], $5);
    $3 = swapc(HEAP32[$3 + 4 >> 2], $5);
    if ($1 >>> 0 <= $3 >>> 0 | $10 >>> 0 >= $1 - $3 >>> 0 | HEAPU8[($3 + $10 | 0) + $0 | 0]) {
     break label$1
    }
    $3 = strcmp($2, $0 + $3 | 0);
    if (!$3) {
     $2 = ($11 + $9 << 2) + $0 | 0;
     $4 = swapc(HEAP32[$2 >> 2], $5);
     $2 = swapc(HEAP32[$2 + 4 >> 2], $5);
     if ($1 >>> 0 <= $2 >>> 0 | $4 >>> 0 >= $1 - $2 >>> 0) {
      break label$1
     }
     $13 = HEAPU8[($2 + $4 | 0) + $0 | 0] ? 0 : $0 + $2 | 0;
     break label$1;
    }
    if (($4 | 0) == 1) {
     break label$1
    }
    $3 = ($3 | 0) < 0;
    $4 = $3 ? $7 : $4 - $7 | 0;
    $6 = $3 ? $6 : $8;
    continue;
   };
  }
  return $13;
 }
 
 function swapc($0, $1) {
  return $1 ? $0 << 8 & 16711680 | $0 << 24 | ($0 >>> 8 & 65280 | $0 >>> 24) : $0;
 }
 
 function __emscripten_environ_constructor() {
  var $0 = 0, $1 = 0, $2 = 0;
  $0 = global$0 - 16 | 0;
  $1 = $0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  label$2 : {
   if (__wasi_environ_sizes_get($0 + 12 | 0, $0 + 8 | 0)) {
    break label$2
   }
   $1 = dlmalloc((HEAP32[$0 + 12 >> 2] << 2) + 4 | 0);
   HEAP32[17398] = $1;
   if (!$1) {
    break label$2
   }
   label$3 : {
    $1 = dlmalloc(HEAP32[$0 + 8 >> 2]);
    if ($1) {
     $2 = HEAP32[17398];
     if ($2) {
      break label$3
     }
    }
    HEAP32[17398] = 0;
    break label$2;
   }
   HEAP32[(HEAP32[$0 + 12 >> 2] << 2) + $2 >> 2] = 0;
   if (!__wasi_environ_get(HEAP32[17398], $1 | 0)) {
    break label$2
   }
   HEAP32[17398] = 0;
  }
  $0 = $0 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function strncmp($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0;
  if (!$2) {
   return 0
  }
  $3 = HEAPU8[$0 | 0];
  label$2 : {
   if (!$3) {
    break label$2
   }
   while (1) {
    label$4 : {
     $4 = HEAPU8[$1 | 0];
     if (($4 | 0) != ($3 | 0)) {
      break label$4
     }
     $2 = $2 + -1 | 0;
     if (!$2 | !$4) {
      break label$4
     }
     $1 = $1 + 1 | 0;
     $3 = HEAPU8[$0 + 1 | 0];
     $0 = $0 + 1 | 0;
     if ($3) {
      continue
     }
     break label$2;
    }
    break;
   };
   $5 = $3;
  }
  return ($5 & 255) - HEAPU8[$1 | 0] | 0;
 }
 
 function getenv($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  $4 = strlen($0);
  label$1 : {
   label$2 : {
    if (!HEAP32[17398] | !HEAPU8[$0 | 0]) {
     break label$2
    }
    if (strchr($0, 61)) {
     break label$2
    }
    $1 = HEAP32[HEAP32[17398] >> 2];
    if (!$1) {
     break label$2
    }
    while (1) {
     $2 = strncmp($0, $1, $4);
     $1 = HEAP32[17398];
     if (!$2) {
      $2 = HEAP32[$1 + ($3 << 2) >> 2];
      $5 = $2 + $4 | 0;
      if (HEAPU8[$5 | 0] == 61) {
       break label$1
      }
     }
     $3 = $3 + 1 | 0;
     $1 = HEAP32[$1 + ($3 << 2) >> 2];
     if ($1) {
      continue
     }
     break;
    };
   }
   return 0;
  }
  return $2 ? $5 + 1 | 0 : 0;
 }
 
 function __get_locale($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
  $4 = global$0 - 272 | 0;
  $3 = $4;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  label$2 : {
   if (HEAPU8[$1 | 0]) {
    break label$2
   }
   $1 = getenv(35840);
   if (HEAPU8[$1 | 0] ? $1 : 0) {
    break label$2
   }
   $1 = getenv(Math_imul($0, 12) + 35856 | 0);
   if (HEAPU8[$1 | 0] ? $1 : 0) {
    break label$2
   }
   $1 = getenv(35928);
   if (HEAPU8[$1 | 0] ? $1 : 0) {
    break label$2
   }
   $1 = 35933;
  }
  label$6 : {
   while (1) {
    $3 = HEAPU8[$1 + $2 | 0];
    if (!(!$3 | ($3 | 0) == 47)) {
     $5 = 15;
     $2 = $2 + 1 | 0;
     if (($2 | 0) != 15) {
      continue
     }
     break label$6;
    }
    break;
   };
   $5 = $2;
  }
  $3 = 35933;
  label$9 : {
   label$10 : {
    $2 = HEAPU8[$1 | 0];
    label$11 : {
     label$12 : {
      if (!(HEAPU8[$1 + $5 | 0] | ($2 | 0) == 46)) {
       $3 = $1;
       if (($2 | 0) != 67) {
        break label$12
       }
      }
      if (!HEAPU8[$3 + 1 | 0]) {
       break label$11
      }
     }
     if (!strcmp($3, 35933)) {
      break label$11
     }
     if (strcmp($3, 35941)) {
      break label$10
     }
    }
    if (!$0) {
     $2 = 35764;
     if (HEAPU8[$3 + 1 | 0] == 46) {
      break label$9
     }
    }
    $2 = 0;
    break label$9;
   }
   $2 = HEAP32[17401];
   if ($2) {
    while (1) {
     if (!strcmp($3, $2 + 8 | 0)) {
      break label$9
     }
     $2 = HEAP32[$2 + 24 >> 2];
     if ($2) {
      continue
     }
     break;
    }
   }
   $2 = HEAP32[17401];
   if ($2) {
    while (1) {
     if (!strcmp($3, $2 + 8 | 0)) {
      break label$9
     }
     $2 = HEAP32[$2 + 24 >> 2];
     if ($2) {
      continue
     }
     break;
    }
   }
   $1 = 0;
   label$20 : {
    label$21 : {
     label$22 : {
      if (HEAP32[16860]) {
       break label$22
      }
      $2 = getenv(35947);
      if (!$2 | !HEAPU8[$2 | 0]) {
       break label$22
      }
      $9 = $5 + 1 | 0;
      $10 = 254 - $5 | 0;
      while (1) {
       $7 = __strchrnul($2, 58);
       $8 = HEAPU8[$7 | 0];
       $11 = $7;
       $6 = ($7 - $2 | 0) - (($8 | 0) != 0) | 0;
       if ($6 >>> 0 < $10 >>> 0) {
        memcpy($4 + 16 | 0, $2, $6);
        $2 = ($4 + 16 | 0) + $6 | 0;
        HEAP8[$2 | 0] = 47;
        memcpy($2 + 1 | 0, $3, $5);
        HEAP8[$4 + 16 + ($6 + $9) | 0] = 0;
        $6 = __map_file($4 + 16 | 0, $4 + 12 | 0) | 0;
        if ($6) {
         $2 = dlmalloc(28);
         if ($2) {
          break label$21
         }
         __syscall_ret(__syscall91($6 | 0, HEAP32[$4 + 12 >> 2]) | 0);
         break label$22;
        }
        $8 = HEAPU8[$7 | 0];
       }
       $2 = $11 + (($8 | 0) != 0) | 0;
       if (HEAPU8[$2 | 0]) {
        continue
       }
       break;
      };
     }
     $2 = dlmalloc(28);
     if (!$2) {
      break label$20
     }
     $1 = HEAP32[8942];
     HEAP32[$2 >> 2] = HEAP32[8941];
     HEAP32[$2 + 4 >> 2] = $1;
     $1 = $2 + 8 | 0;
     memcpy($1, $3, $5);
     HEAP8[$1 + $5 | 0] = 0;
     HEAP32[$2 + 24 >> 2] = HEAP32[17401];
     HEAP32[17401] = $2;
     $1 = $2;
     break label$20;
    }
    HEAP32[$2 >> 2] = $6;
    HEAP32[$2 + 4 >> 2] = HEAP32[$4 + 12 >> 2];
    $1 = $2 + 8 | 0;
    memcpy($1, $3, $5);
    HEAP8[$1 + $5 | 0] = 0;
    HEAP32[$2 + 24 >> 2] = HEAP32[17401];
    HEAP32[17401] = $2;
    $1 = $2;
   }
   $2 = $0 | $1 ? $1 : 35764;
  }
  $0 = $4 + 272 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
  return $2;
 }
 
 function __loc_is_allocated($0) {
  return ($0 | 0) != 0 & ($0 | 0) != 35792 & ($0 | 0) != 35816;
 }
 
 function __newlocale($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  $5 = global$0 - 32 | 0;
  $3 = $5;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  label$2 : {
   label$3 : {
    if (__loc_is_allocated($2)) {
     $3 = 0;
     while (1) {
      if ($0 >>> $3 & 1) {
       HEAP32[($3 << 2) + $2 >> 2] = __get_locale($3, $1)
      }
      $3 = $3 + 1 | 0;
      if (($3 | 0) != 6) {
       continue
      }
      break;
     };
     break label$3;
    }
    $3 = 0;
    while (1) {
     $8 = ($5 + 8 | 0) + ($3 << 2) | 0;
     $4 = 1 << $3 & $0;
     $6 = HEAP32[($3 << 2) + $2 >> 2];
     label$8 : {
      if (!($4 | !$2)) {
       break label$8
      }
      $6 = __get_locale($3, $4 ? $1 : 35960);
     }
     $4 = $6;
     HEAP32[$8 >> 2] = $4;
     $7 = (($4 | 0) != 0) + $7 | 0;
     $3 = $3 + 1 | 0;
     if (($3 | 0) != 6) {
      continue
     }
     break;
    };
    if ($7 >>> 0 > 1) {
     break label$3
    }
    $0 = 35792;
    if ($7 - 1) {
     break label$2
    }
    if (HEAP32[$5 + 8 >> 2] != 35764) {
     break label$3
    }
    $0 = 35816;
    break label$2;
   }
   $0 = $2;
  }
  $1 = $5 + 32 | 0;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  return $0 | 0;
 }
 
 function vasprintf($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0;
  $3 = global$0 - 16 | 0;
  $4 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  HEAP32[$3 + 12 >> 2] = $2;
  HEAP32[$3 + 8 >> 2] = $2;
  $4 = -1;
  $2 = vsnprintf(0, 0, $1, $2);
  label$2 : {
   if (($2 | 0) < 0) {
    break label$2
   }
   $5 = $0;
   $2 = $2 + 1 | 0;
   $0 = dlmalloc($2);
   HEAP32[$5 >> 2] = $0;
   if (!$0) {
    break label$2
   }
   $4 = vsnprintf($0, $2, $1, HEAP32[$3 + 12 >> 2]);
  }
  $0 = $3 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
  return $4 | 0;
 }
 
 function __isxdigit_l($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return (isdigit($0) | 0) != 0 | ($0 | 32) + -97 >>> 0 < 6;
 }
 
 function sscanf($0, $1) {
  var $2 = 0, $3 = 0;
  $2 = global$0 - 16 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  HEAP32[$2 + 12 >> 2] = $1;
  $0 = vsscanf($0, 40096, $1);
  $1 = $2 + 16 | 0;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  return $0;
 }
 
 function snprintf($0, $1, $2, $3) {
  var $4 = 0, $5 = 0;
  $4 = global$0 - 16 | 0;
  $5 = $4;
  if ($4 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $5;
  HEAP32[$4 + 12 >> 2] = $3;
  $0 = vsnprintf($0, $1, $2, $3);
  $1 = $4 + 16 | 0;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  return $0;
 }
 
 function catgets($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  return $3 | 0;
 }
 
 function freelocale($0) {
  $0 = $0 | 0;
  if (__loc_is_allocated($0)) {
   dlfree($0)
  }
 }
 
 function wcslen($0) {
  var $1 = 0, $2 = 0;
  $2 = $0;
  while (1) {
   $1 = $2;
   $2 = $1 + 4 | 0;
   if (HEAP32[$1 >> 2]) {
    continue
   }
   break;
  };
  return $1 - $0 >> 2;
 }
 
 function __ctype_b_loc() {
  return 35964;
 }
 
 function __ctype_toupper_loc() {
  return 36736;
 }
 
 function __ctype_tolower_loc() {
  return 38288;
 }
 
 function wcsrtombs($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
  $7 = global$0 - 16 | 0;
  $3 = $7;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      if ($0) {
       if ($2 >>> 0 >= 4) {
        break label$5
       }
       $3 = $2;
       break label$4;
      }
      $2 = 0;
      $0 = HEAP32[$1 >> 2];
      $3 = HEAP32[$0 >> 2];
      if (!$3) {
       break label$2
      }
      while (1) {
       $5 = 1;
       if ($3 >>> 0 >= 128) {
        $6 = -1;
        $5 = wcrtomb($7 + 12 | 0, $3, 0);
        if (($5 | 0) == -1) {
         break label$2
        }
       }
       $3 = HEAP32[$0 + 4 >> 2];
       $0 = $0 + 4 | 0;
       $2 = $2 + $5 | 0;
       $6 = $2;
       if ($3) {
        continue
       }
       break;
      };
      break label$2;
     }
     $5 = HEAP32[$1 >> 2];
     $3 = $2;
     while (1) {
      $4 = HEAP32[$5 >> 2];
      label$11 : {
       if ($4 + -1 >>> 0 >= 127) {
        if (!$4) {
         HEAP8[$0 | 0] = 0;
         HEAP32[$1 >> 2] = 0;
         break label$3;
        }
        $6 = -1;
        $4 = wcrtomb($0, $4, 0);
        if (($4 | 0) == -1) {
         break label$2
        }
        $3 = $3 - $4 | 0;
        $0 = $0 + $4 | 0;
        break label$11;
       }
       HEAP8[$0 | 0] = $4;
       $3 = $3 + -1 | 0;
       $5 = HEAP32[$1 >> 2];
       $0 = $0 + 1 | 0;
      }
      $5 = $5 + 4 | 0;
      HEAP32[$1 >> 2] = $5;
      if ($3 >>> 0 > 3) {
       continue
      }
      break;
     };
    }
    if ($3) {
     $5 = HEAP32[$1 >> 2];
     while (1) {
      $4 = HEAP32[$5 >> 2];
      label$16 : {
       if ($4 + -1 >>> 0 >= 127) {
        if (!$4) {
         HEAP8[$0 | 0] = 0;
         HEAP32[$1 >> 2] = 0;
         break label$3;
        }
        $6 = -1;
        $4 = wcrtomb($7 + 12 | 0, $4, 0);
        if (($4 | 0) == -1) {
         break label$2
        }
        if ($3 >>> 0 < $4 >>> 0) {
         break label$3
        }
        wcrtomb($0, HEAP32[$5 >> 2], 0);
        $3 = $3 - $4 | 0;
        $0 = $0 + $4 | 0;
        break label$16;
       }
       HEAP8[$0 | 0] = $4;
       $3 = $3 + -1 | 0;
       $5 = HEAP32[$1 >> 2];
       $0 = $0 + 1 | 0;
      }
      $5 = $5 + 4 | 0;
      HEAP32[$1 >> 2] = $5;
      if ($3) {
       continue
      }
      break;
     };
    }
    $6 = $2;
    break label$2;
   }
   $6 = $2 - $3 | 0;
  }
  $0 = $7 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
  return $6;
 }
 
 function wcsnrtombs($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
  $6 = global$0 - 272 | 0;
  $4 = $6;
  if ($6 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  $7 = HEAP32[$1 >> 2];
  HEAP32[$6 + 12 >> 2] = $7;
  $8 = $0 ? $0 : $6 + 16 | 0;
  $4 = 0;
  $3 = $0 ? $3 : 256;
  label$2 : {
   if (!$3 | !$7) {
    break label$2
   }
   label$3 : {
    $5 = $3 >>> 0 <= $2 >>> 0;
    if ($5) {
     break label$3
    }
    if ($2 >>> 0 > 32) {
     break label$3
    }
    break label$2;
   }
   while (1) {
    $5 = $5 ? $3 : $2;
    $2 = $2 - $5 | 0;
    $5 = wcsrtombs($8, $6 + 12 | 0, $5);
    if (($5 | 0) == -1) {
     $3 = 0;
     $7 = HEAP32[$6 + 12 >> 2];
     $4 = -1;
     break label$2;
    }
    $9 = ($6 + 16 | 0) == ($8 | 0);
    $8 = $9 ? $8 : $5 + $8 | 0;
    $4 = $4 + $5 | 0;
    $3 = $3 - ($9 ? 0 : $5) | 0;
    $7 = HEAP32[$6 + 12 >> 2];
    if (!$3 | !$7) {
     break label$2
    }
    $5 = $2 >>> 0 >= $3 >>> 0;
    if ($5 | $2 >>> 0 >= 33) {
     continue
    }
    break;
   };
  }
  label$7 : {
   label$8 : {
    if (!$2 | (!$7 | !$3)) {
     break label$8
    }
    while (1) {
     $9 = wcrtomb($8, HEAP32[$7 >> 2], 0);
     if ($9 + 1 >>> 0 <= 1) {
      $5 = -1;
      if ($9) {
       break label$7
      }
      HEAP32[$6 + 12 >> 2] = 0;
      break label$8;
     }
     $7 = HEAP32[$6 + 12 >> 2] + 4 | 0;
     HEAP32[$6 + 12 >> 2] = $7;
     $4 = $4 + $9 | 0;
     $3 = $3 - $9 | 0;
     if (!$3) {
      break label$8
     }
     $8 = $8 + $9 | 0;
     $5 = $4;
     $2 = $2 + -1 | 0;
     if ($2) {
      continue
     }
     break;
    };
    break label$7;
   }
   $5 = $4;
  }
  if ($0) {
   HEAP32[$1 >> 2] = HEAP32[$6 + 12 >> 2]
  }
  $0 = $6 + 272 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
  return $5 | 0;
 }
 
 function mbsrtowcs($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
  $5 = HEAP32[$1 >> 2];
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            label$11 : {
             label$12 : {
              if (!$3) {
               break label$12
              }
              $6 = HEAP32[$3 >> 2];
              if (!$6) {
               break label$12
              }
              if (!$0) {
               $3 = $2;
               break label$10;
              }
              HEAP32[$3 >> 2] = 0;
              $3 = $2;
              break label$11;
             }
             label$14 : {
              if (!HEAP32[HEAP32[16279] >> 2]) {
               if (!$0) {
                break label$14
               }
               if (!$2) {
                break label$1
               }
               $3 = $2 + $5 | 0;
               $6 = $2;
               label$16 : {
                while (1) {
                 $4 = HEAP8[$5 | 0];
                 if (!$4) {
                  break label$16
                 }
                 HEAP32[$0 >> 2] = $4 & 57343;
                 $0 = $0 + 4 | 0;
                 $5 = $5 + 1 | 0;
                 $6 = $6 + -1 | 0;
                 if ($6) {
                  continue
                 }
                 break;
                };
                $5 = $3;
                break label$1;
               }
               HEAP32[$0 >> 2] = 0;
               HEAP32[$1 >> 2] = 0;
               return $2 - $6 | 0;
              }
              $3 = $2;
              if (!$0) {
               break label$9
              }
              break label$7;
             }
             return strlen($5) | 0;
            }
            $4 = 1;
            break label$7;
           }
           $4 = 0;
           break label$8;
          }
          $4 = 1;
         }
         while (1) {
          if (!$4) {
           $4 = HEAPU8[$5 | 0] >>> 3 | 0;
           if (($4 + -16 | $4 + ($6 >> 26)) >>> 0 > 7) {
            break label$6
           }
           $4 = $5 + 1 | 0;
           $8 = $4;
           label$20 : {
            if (!($6 & 33554432)) {
             break label$20
            }
            if ((HEAPU8[$4 | 0] & 192) != 128) {
             break label$6
            }
            $4 = $5 + 2 | 0;
            $8 = $4;
            if (!($6 & 524288)) {
             break label$20
            }
            if ((HEAPU8[$4 | 0] & 192) != 128) {
             break label$6
            }
            $8 = $5 + 3 | 0;
           }
           $5 = $8;
           $3 = $3 + -1 | 0;
           $4 = 1;
           continue;
          }
          while (1) {
           $6 = HEAPU8[$5 | 0];
           label$22 : {
            if ($5 & 3 | $6 + -1 >>> 0 > 126) {
             break label$22
            }
            $6 = HEAP32[$5 >> 2];
            if (($6 | $6 + -16843009) & -2139062144) {
             break label$22
            }
            while (1) {
             $3 = $3 + -4 | 0;
             $6 = HEAP32[$5 + 4 >> 2];
             $4 = $5 + 4 | 0;
             $5 = $4;
             if (!(($6 + -16843009 | $6) & -2139062144)) {
              continue
             }
             break;
            };
            $5 = $4;
           }
           $4 = $6 & 255;
           if ($4 + -1 >>> 0 <= 126) {
            $3 = $3 + -1 | 0;
            $5 = $5 + 1 | 0;
            continue;
           }
           break;
          };
          $4 = $4 + -194 | 0;
          if ($4 >>> 0 > 50) {
           break label$5
          }
          $5 = $5 + 1 | 0;
          $6 = HEAP32[($4 << 2) + 35440 >> 2];
          $4 = 0;
          continue;
         };
        }
        while (1) {
         if (!$4) {
          if (!$3) {
           break label$1
          }
          while (1) {
           label$28 : {
            $4 = HEAPU8[$5 | 0];
            $7 = $4 + -1 | 0;
            label$29 : {
             label$30 : {
              if ($7 >>> 0 > 126) {
               $6 = $4;
               break label$30;
              }
              if ($5 & 3 | $3 >>> 0 < 5) {
               break label$29
              }
              label$32 : {
               while (1) {
                $6 = HEAP32[$5 >> 2];
                if (($6 | $6 + -16843009) & -2139062144) {
                 break label$32
                }
                HEAP32[$0 >> 2] = $6 & 255;
                HEAP32[$0 + 4 >> 2] = HEAPU8[$5 + 1 | 0];
                HEAP32[$0 + 8 >> 2] = HEAPU8[$5 + 2 | 0];
                HEAP32[$0 + 12 >> 2] = HEAPU8[$5 + 3 | 0];
                $0 = $0 + 16 | 0;
                $5 = $5 + 4 | 0;
                $3 = $3 + -4 | 0;
                if ($3 >>> 0 > 4) {
                 continue
                }
                break;
               };
               $6 = HEAPU8[$5 | 0];
              }
              $4 = $6 & 255;
              $7 = $4 + -1 | 0;
             }
             if ($7 >>> 0 > 126) {
              break label$28
             }
            }
            HEAP32[$0 >> 2] = $4;
            $0 = $0 + 4 | 0;
            $5 = $5 + 1 | 0;
            $3 = $3 + -1 | 0;
            if ($3) {
             continue
            }
            break label$1;
           }
           break;
          };
          $4 = $4 + -194 | 0;
          if ($4 >>> 0 > 50) {
           break label$5
          }
          $5 = $5 + 1 | 0;
          $6 = HEAP32[($4 << 2) + 35440 >> 2];
          $4 = 1;
          continue;
         }
         $4 = HEAPU8[$5 | 0];
         $7 = $4 >>> 3 | 0;
         if (($7 + -16 | $7 + ($6 >> 26)) >>> 0 > 7) {
          break label$6
         }
         label$34 : {
          label$35 : {
           $7 = $5 + 1 | 0;
           $4 = $4 + -128 | $6 << 6;
           $8 = $7;
           label$36 : {
            if (($4 | 0) > -1) {
             break label$36
            }
            $7 = HEAPU8[$7 | 0] + -128 | 0;
            if ($7 >>> 0 > 63) {
             break label$35
            }
            $9 = $5 + 2 | 0;
            $4 = $7 | $4 << 6;
            $8 = $9;
            if (($4 | 0) > -1) {
             break label$36
            }
            $7 = HEAPU8[$9 | 0] + -128 | 0;
            if ($7 >>> 0 > 63) {
             break label$35
            }
            $4 = $7 | $4 << 6;
            $8 = $5 + 3 | 0;
           }
           $5 = $8;
           HEAP32[$0 >> 2] = $4;
           $3 = $3 + -1 | 0;
           $0 = $0 + 4 | 0;
           break label$34;
          }
          HEAP32[16596] = 25;
          $5 = $5 + -1 | 0;
          break label$3;
         }
         $4 = 0;
         continue;
        };
       }
       $5 = $5 + -1 | 0;
       if ($6) {
        break label$4
       }
       $6 = HEAPU8[$5 | 0];
      }
      if ($6 & 255) {
       break label$4
      }
      if ($0) {
       HEAP32[$0 >> 2] = 0;
       HEAP32[$1 >> 2] = 0;
      }
      return $2 - $3 | 0;
     }
     HEAP32[16596] = 25;
     if (!$0) {
      break label$2
     }
    }
    HEAP32[$1 >> 2] = $5;
   }
   return -1;
  }
  HEAP32[$1 >> 2] = $5;
  return $2 | 0;
 }
 
 function mbsnrtowcs($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
  $6 = global$0 - 1040 | 0;
  $5 = $6;
  if ($5 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $5;
  $7 = HEAP32[$1 >> 2];
  HEAP32[$6 + 12 >> 2] = $7;
  $8 = $0 ? $0 : $6 + 16 | 0;
  $3 = $0 ? $3 : 256;
  label$2 : {
   if (!$3 | !$7) {
    break label$2
   }
   $5 = $2 >>> 2 | 0;
   $10 = $5 >>> 0 >= $3 >>> 0;
   if ($5 >>> 0 < $3 >>> 0 ? $2 >>> 0 <= 131 : 0) {
    break label$2
   }
   while (1) {
    $5 = $10 ? $3 : $5;
    $2 = $2 - $5 | 0;
    $5 = mbsrtowcs($8, $6 + 12 | 0, $5, $4);
    if (($5 | 0) == -1) {
     $3 = 0;
     $7 = HEAP32[$6 + 12 >> 2];
     $9 = -1;
     break label$2;
    }
    $10 = ($6 + 16 | 0) == ($8 | 0);
    $8 = $10 ? $8 : ($5 << 2) + $8 | 0;
    $9 = $5 + $9 | 0;
    $3 = $3 - ($10 ? 0 : $5) | 0;
    $7 = HEAP32[$6 + 12 >> 2];
    if (!$3 | !$7) {
     break label$2
    }
    $5 = $2 >>> 2 | 0;
    $10 = $5 >>> 0 >= $3 >>> 0;
    if ($2 >>> 0 > 131 | $5 >>> 0 >= $3 >>> 0) {
     continue
    }
    break;
   };
  }
  label$5 : {
   label$6 : {
    if (!$2 | (!$7 | !$3)) {
     break label$6
    }
    while (1) {
     $5 = mbrtowc($8, $7, $2, $4);
     if ($5 + 2 >>> 0 <= 2) {
      $2 = $5 + 1 | 0;
      if ($2 >>> 0 <= 1) {
       if ($2 - 1) {
        break label$5
       }
       HEAP32[$6 + 12 >> 2] = 0;
       break label$6;
      }
      HEAP32[$4 >> 2] = 0;
      break label$6;
     }
     $7 = HEAP32[$6 + 12 >> 2] + $5 | 0;
     HEAP32[$6 + 12 >> 2] = $7;
     $9 = $9 + 1 | 0;
     $3 = $3 + -1 | 0;
     if (!$3) {
      break label$6
     }
     $8 = $8 + 4 | 0;
     $2 = $2 - $5 | 0;
     $5 = $9;
     if ($2) {
      continue
     }
     break;
    };
    break label$5;
   }
   $5 = $9;
  }
  if ($0) {
   HEAP32[$1 >> 2] = HEAP32[$6 + 12 >> 2]
  }
  $0 = $6 + 1040 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
  return $5 | 0;
 }
 
 function mbtowc($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0;
  $5 = global$0 - 16 | 0;
  $3 = $5;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  $3 = 0;
  label$2 : {
   if (!$1) {
    break label$2
   }
   label$3 : {
    if (!$2) {
     break label$3
    }
    $0 = $0 ? $0 : $5 + 12 | 0;
    $3 = HEAPU8[$1 | 0];
    $4 = $3 << 24 >> 24;
    if (($4 | 0) >= 0) {
     HEAP32[$0 >> 2] = $3;
     $3 = ($4 | 0) != 0;
     break label$2;
    }
    $3 = HEAP8[$1 | 0];
    if (!HEAP32[HEAP32[16279] >> 2]) {
     HEAP32[$0 >> 2] = $3 & 57343;
     $3 = 1;
     break label$2;
    }
    $3 = ($3 & 255) + -194 | 0;
    if ($3 >>> 0 > 50) {
     break label$3
    }
    $3 = HEAP32[($3 << 2) + 35440 >> 2];
    if ($3 << Math_imul($2, 6) + -6 < 0 ? $2 >>> 0 <= 3 : 0) {
     break label$3
    }
    $2 = HEAPU8[$1 + 1 | 0];
    $4 = $2 >>> 3 | 0;
    if (($4 + -16 | $4 + ($3 >> 26)) >>> 0 > 7) {
     break label$3
    }
    $2 = $2 + -128 | $3 << 6;
    if (($2 | 0) >= 0) {
     HEAP32[$0 >> 2] = $2;
     $3 = 2;
     break label$2;
    }
    $3 = HEAPU8[$1 + 2 | 0] + -128 | 0;
    if ($3 >>> 0 > 63) {
     break label$3
    }
    $2 = $3 | $2 << 6;
    if (($2 | 0) >= 0) {
     HEAP32[$0 >> 2] = $2;
     $3 = 3;
     break label$2;
    }
    $1 = HEAPU8[$1 + 3 | 0] + -128 | 0;
    if ($1 >>> 0 > 63) {
     break label$3
    }
    HEAP32[$0 >> 2] = $1 | $2 << 6;
    $3 = 4;
    break label$2;
   }
   HEAP32[16596] = 25;
   $3 = -1;
  }
  $0 = $3;
  $1 = $5 + 16 | 0;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  return $0 | 0;
 }
 
 function __ctype_get_mb_cur_max() {
  return (HEAP32[HEAP32[16279] >> 2] ? 4 : 1) | 0;
 }
 
 function mbrlen($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  return mbrtowc(0, $0, $1, $2 ? $2 : 69608) | 0;
 }
 
 function __uselocale($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = HEAP32[16279];
  if ($0) {
   HEAP32[16279] = ($0 | 0) == -1 ? 67472 : $0
  }
  return (($1 | 0) == 67472 ? -1 : $1) | 0;
 }
 
 function strtox($0, $1, $2, $3, $4) {
  var $5 = 0, $6 = 0;
  $5 = global$0 - 144 | 0;
  $6 = $5;
  if ($5 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $6;
  HEAP32[$5 + 44 >> 2] = $0;
  HEAP32[$5 + 4 >> 2] = $0;
  HEAP32[$5 >> 2] = 0;
  HEAP32[$5 + 76 >> 2] = -1;
  HEAP32[$5 + 8 >> 2] = ($0 | 0) < 0 ? -1 : $0 + 2147483647 | 0;
  __shlim($5, 0, 0);
  $2 = __intscan($5, $2, 1, $3, $4);
  $3 = i64toi32_i32$HIGH_BITS;
  if ($1) {
   HEAP32[$1 >> 2] = ((HEAP32[$5 + 4 >> 2] + HEAP32[$5 + 120 >> 2] | 0) - HEAP32[$5 + 8 >> 2] | 0) + $0
  }
  $0 = $5 + 144 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
  i64toi32_i32$HIGH_BITS = $3;
  return $2;
 }
 
 function strtoull_l($0, $1, $2, $3) {
  return strtox($0, $1, $2, -1, -1);
 }
 
 function strtoll_l($0, $1, $2, $3) {
  return strtox($0, $1, $2, 0, -2147483648);
 }
 
 function strtof($0, $1) {
  var $2 = 0, $3 = 0, $4 = Math_fround(0);
  $2 = global$0 - 16 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  strtox_1($2, $0, $1, 0);
  $4 = __trunctfsf2(HEAP32[$2 >> 2], HEAP32[$2 + 4 >> 2], HEAP32[$2 + 8 >> 2], HEAP32[$2 + 12 >> 2]);
  $0 = $2 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
  return $4;
 }
 
 function strtox_1($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
  $4 = global$0 - 160 | 0;
  $5 = $4;
  if ($4 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $5;
  memset($4 + 16 | 0, 0, 144);
  HEAP32[$4 + 92 >> 2] = -1;
  HEAP32[$4 + 60 >> 2] = $1;
  HEAP32[$4 + 24 >> 2] = -1;
  HEAP32[$4 + 20 >> 2] = $1;
  __shlim($4 + 16 | 0, 0, 0);
  __floatscan($4, $4 + 16 | 0, $3, 1);
  $3 = HEAP32[$4 + 8 >> 2];
  $5 = HEAP32[$4 + 12 >> 2];
  $7 = HEAP32[$4 >> 2];
  $8 = HEAP32[$4 + 4 >> 2];
  if ($2) {
   $9 = $2;
   $6 = $1;
   $1 = HEAP32[$4 + 20 >> 2] - HEAP32[$4 + 24 >> 2] | 0;
   $10 = $1;
   $2 = $1 + HEAP32[$4 + 136 >> 2] | 0;
   $1 = HEAP32[$4 + 140 >> 2] + ($1 >> 31) | 0;
   $1 = $2 >>> 0 < $10 >>> 0 ? $1 + 1 | 0 : $1;
   HEAP32[$9 >> 2] = !($1 | $2) ? $6 : $6 + $2 | 0;
  }
  HEAP32[$0 >> 2] = $7;
  HEAP32[$0 + 4 >> 2] = $8;
  HEAP32[$0 + 8 >> 2] = $3;
  HEAP32[$0 + 12 >> 2] = $5;
  $0 = $4 + 160 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function strtod($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0.0;
  $2 = global$0 - 16 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  strtox_1($2, $0, $1, 1);
  $4 = __trunctfdf2(HEAP32[$2 >> 2], HEAP32[$2 + 4 >> 2], HEAP32[$2 + 8 >> 2], HEAP32[$2 + 12 >> 2]);
  $0 = $2 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
  return $4;
 }
 
 function strtold($0, $1, $2) {
  var $3 = 0, $4 = 0;
  $3 = global$0 - 16 | 0;
  $4 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  strtox_1($3, $1, $2, 2);
  $1 = HEAP32[$3 >> 2];
  $2 = HEAP32[$3 + 4 >> 2];
  $4 = HEAP32[$3 + 12 >> 2];
  HEAP32[$0 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
  HEAP32[$0 + 12 >> 2] = $4;
  HEAP32[$0 >> 2] = $1;
  HEAP32[$0 + 4 >> 2] = $2;
  $0 = $3 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function strtold_l($0, $1, $2, $3) {
  var $4 = 0;
  $3 = global$0 - 16 | 0;
  $4 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  strtold($3, $1, $2);
  $1 = HEAP32[$3 >> 2];
  $2 = HEAP32[$3 + 4 >> 2];
  $4 = HEAP32[$3 + 12 >> 2];
  HEAP32[$0 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
  HEAP32[$0 + 12 >> 2] = $4;
  HEAP32[$0 >> 2] = $1;
  HEAP32[$0 + 4 >> 2] = $2;
  $0 = $3 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function std____2__collate_char___do_compare_28char_20const__2c_20char_20const__2c_20char_20const__2c_20char_20const__29_20const($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0;
  label$1 : {
   while (1) {
    if (($3 | 0) != ($4 | 0)) {
     $0 = -1;
     if (($1 | 0) == ($2 | 0)) {
      break label$1
     }
     $5 = HEAP8[$1 | 0];
     $6 = HEAP8[$3 | 0];
     if (($5 | 0) < ($6 | 0)) {
      break label$1
     }
     if (($6 | 0) < ($5 | 0)) {
      return 1
     } else {
      $3 = $3 + 1 | 0;
      $1 = $1 + 1 | 0;
      continue;
     }
    }
    break;
   };
   $0 = ($1 | 0) != ($2 | 0);
  }
  return $0 | 0;
 }
 
 function std____2__collate_char___do_transform_28char_20const__2c_20char_20const__29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20_____compressed_pair_true_2c_20void__28_29($0);
  std____2__enable_if___is_forward_iterator_char_20const____value_2c_20void___type_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____init_char_20const___28char_20const__2c_20char_20const__29($0, $2, $3);
 }
 
 function std____2__enable_if___is_forward_iterator_char_20const____value_2c_20void___type_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____init_char_20const___28char_20const__2c_20char_20const__29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $5 = global$0 - 16 | 0;
  $3 = $5;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  $4 = std____2__iterator_traits_char_20const____difference_type_20std____2__distance_char_20const___28char_20const__2c_20char_20const__29($1, $2);
  if ($4 >>> 0 <= 4294967279) {
   label$3 : {
    if ($4 >>> 0 <= 10) {
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_short_size_28unsigned_20long_29($0, $4);
     $3 = $0;
     break label$3;
    }
    $6 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____recommend_28unsigned_20long_29($4) + 1 | 0;
    $3 = std____2__allocator_unsigned_20char___allocate_28unsigned_20long_2c_20void_20const__29($6);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_pointer_28char__29($0, $3);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_cap_28unsigned_20long_29($0, $6);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_size_28unsigned_20long_29($0, $4);
   }
   $4 = $2 - $1 | 0;
   $0 = $3;
   while (1) {
    if (($1 | 0) != ($2 | 0)) {
     std____2__char_traits_char___assign_28char__2c_20char_20const__29($0, $1);
     $0 = $0 + 1 | 0;
     $1 = $1 + 1 | 0;
     continue;
    }
    break;
   };
   HEAP8[$5 + 15 | 0] = 0;
   std____2__char_traits_char___assign_28char__2c_20char_20const__29($4 + $3 | 0, $5 + 15 | 0);
   $0 = $5 + 16 | 0;
   if ($0 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $0;
   return;
  }
  std____2____basic_string_common_true_____throw_length_error_28_29_20const();
  abort();
 }
 
 function std____2__collate_char___do_hash_28char_20const__2c_20char_20const__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $0 = 0;
  while (1) {
   if (($1 | 0) != ($2 | 0)) {
    $0 = HEAP8[$1 | 0] + ($0 << 4) | 0;
    $3 = $0 & -268435456;
    $0 = ($3 | $3 >>> 24) ^ $0;
    $1 = $1 + 1 | 0;
    continue;
   }
   break;
  };
  return $0 | 0;
 }
 
 function std____2__collate_wchar_t___do_compare_28wchar_t_20const__2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20wchar_t_20const__29_20const($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0;
  label$1 : {
   while (1) {
    if (($3 | 0) != ($4 | 0)) {
     $0 = -1;
     if (($1 | 0) == ($2 | 0)) {
      break label$1
     }
     $5 = HEAP32[$1 >> 2];
     $6 = HEAP32[$3 >> 2];
     if (($5 | 0) < ($6 | 0)) {
      break label$1
     }
     if (($6 | 0) < ($5 | 0)) {
      return 1
     } else {
      $3 = $3 + 4 | 0;
      $1 = $1 + 4 | 0;
      continue;
     }
    }
    break;
   };
   $0 = ($1 | 0) != ($2 | 0);
  }
  return $0 | 0;
 }
 
 function std____2__collate_wchar_t___do_transform_28wchar_t_20const__2c_20wchar_t_20const__29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20_____compressed_pair_true_2c_20void__28_29($0);
  std____2__enable_if___is_forward_iterator_wchar_t_20const____value_2c_20void___type_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____init_wchar_t_20const___28wchar_t_20const__2c_20wchar_t_20const__29($0, $2, $3);
 }
 
 function std____2__enable_if___is_forward_iterator_wchar_t_20const____value_2c_20void___type_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____init_wchar_t_20const___28wchar_t_20const__2c_20wchar_t_20const__29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $5 = global$0 - 16 | 0;
  $3 = $5;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  $4 = std____2__iterator_traits_wchar_t____difference_type_20std____2__distance_wchar_t___28wchar_t__2c_20wchar_t__29($1, $2);
  if ($4 >>> 0 <= 1073741807) {
   label$3 : {
    if ($4 >>> 0 <= 1) {
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_short_size_28unsigned_20long_29($0, $4);
     $3 = $0;
     break label$3;
    }
    $6 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____recommend_28unsigned_20long_29($4) + 1 | 0;
    $3 = std____2__allocator_wchar_t___allocate_28unsigned_20long_2c_20void_20const__29($6);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_pointer_28char__29($0, $3);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_cap_28unsigned_20long_29($0, $6);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_size_28unsigned_20long_29($0, $4);
   }
   while (1) {
    if (($1 | 0) != ($2 | 0)) {
     std____2____compressed_pair_elem__IO_FILE__2c_200_2c_20false_____compressed_pair_elem__IO_FILE___2c_20void__28_IO_FILE___29($3, $1);
     $3 = $3 + 4 | 0;
     $1 = $1 + 4 | 0;
     continue;
    }
    break;
   };
   HEAP32[$5 + 12 >> 2] = 0;
   std____2____compressed_pair_elem__IO_FILE__2c_200_2c_20false_____compressed_pair_elem__IO_FILE___2c_20void__28_IO_FILE___29($3, $5 + 12 | 0);
   $0 = $5 + 16 | 0;
   if ($0 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $0;
   return;
  }
  std____2____basic_string_common_true_____throw_length_error_28_29_20const();
  abort();
 }
 
 function std____2__collate_wchar_t___do_hash_28wchar_t_20const__2c_20wchar_t_20const__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $0 = 0;
  while (1) {
   if (($1 | 0) != ($2 | 0)) {
    $0 = HEAP32[$1 >> 2] + ($0 << 4) | 0;
    $3 = $0 & -268435456;
    $0 = ($3 | $3 >>> 24) ^ $0;
    $1 = $1 + 4 | 0;
    continue;
   }
   break;
  };
  return $0 | 0;
 }
 
 function std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20bool__29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $7 = 0;
  $6 = global$0 - 32 | 0;
  $7 = $6;
  if ($6 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $7;
  HEAP32[$6 + 24 >> 2] = $1;
  label$2 : {
   label$3 : {
    if (!(HEAP32[$3 + 4 >> 2] & 1)) {
     HEAP32[$6 >> 2] = -1;
     $1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $1, $2, $3, $4, $6) | 0;
     HEAP32[$6 + 24 >> 2] = $1;
     $0 = HEAP32[$6 >> 2];
     if ($0 >>> 0 <= 1) {
      if ($0 - 1) {
       break label$3
      }
      HEAP8[$5 | 0] = 1;
      break label$2;
     }
     HEAP8[$5 | 0] = 1;
     HEAP32[$4 >> 2] = 4;
     break label$2;
    }
    std____2__ios_base__getloc_28_29_20const($6, $3);
    HEAP32[16874] = 0;
    $7 = __invoke_i1___22class_std____2__basic_ifstream_22_(31, $6 | 0) | 0;
    $0 = HEAP32[16874];
    HEAP32[16874] = 0;
    label$6 : {
     label$7 : {
      label$8 : {
       label$9 : {
        if (($0 | 0) != 1) {
         std____2__locale___locale_28_29($6);
         std____2__ios_base__getloc_28_29_20const($6, $3);
         HEAP32[16874] = 0;
         $1 = __invoke_i1___22class_std____2__basic_ifstream_22_(1640, $6 | 0) | 0;
         $0 = HEAP32[16874];
         HEAP32[16874] = 0;
         if (($0 | 0) == 1) {
          break label$9
         }
         std____2__locale___locale_28_29($6);
         $0 = 0;
         HEAP32[16874] = 0;
         __invoke_void___22class_std____2__vector_13_22__i32(1641, $6 | 0, $1 | 0);
         $3 = HEAP32[16874];
         HEAP32[16874] = 0;
         if (($3 | 0) == 1) {
          break label$8
         }
         HEAP32[16874] = 0;
         __invoke_void___22class_std____2__vector_13_22__i32(1642, $6 | 12, $1 | 0);
         $1 = HEAP32[16874];
         HEAP32[16874] = 0;
         $0 = 1;
         if (($1 | 0) == 1) {
          break label$8
         }
         HEAP32[16874] = 0;
         $3 = $6 + 24 | 0;
         $0 = __invoke___22class_std____2__basic_string_22____22class_std____2__istreambuf_iterator_22____22class_std____2__basic_streambuf_22____22class_std____2__basic_string_22____22class_std____2__basic_string_22____22class_std____2__ctype_22__i32__i1(1643, $6 + 24 | 0, $2 | 0, $6 | 0, $3 | 0, $7 | 0, $4 | 0, 1) | 0;
         $1 = HEAP32[16874];
         HEAP32[16874] = 0;
         if (($1 | 0) == 1) {
          break label$7
         }
         HEAP8[$5 | 0] = ($0 | 0) == ($6 | 0);
         $1 = HEAP32[$6 + 24 >> 2];
         while (1) {
          $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($3 + -12 | 0);
          if (($6 | 0) != ($3 | 0)) {
           continue
          }
          break;
         };
         break label$2;
        }
        $1 = __cxa_find_matching_catch_2() | 0;
        getTempRet0() | 0;
        std____2__locale___locale_28_29($6);
        break label$6;
       }
       $1 = __cxa_find_matching_catch_2() | 0;
       getTempRet0() | 0;
       std____2__locale___locale_28_29($6);
       break label$6;
      }
      $1 = __cxa_find_matching_catch_2() | 0;
      getTempRet0() | 0;
      if (!$0) {
       break label$6
      }
      $3 = Math_imul($0, 12) + $6 | 0;
      while (1) {
       $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($3 + -12 | 0);
       if (($6 | 0) != ($3 | 0)) {
        continue
       }
       break;
      };
      break label$6;
     }
     $1 = __cxa_find_matching_catch_2() | 0;
     getTempRet0() | 0;
     while (1) {
      $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($3 + -12 | 0);
      if (($6 | 0) != ($3 | 0)) {
       continue
      }
      break;
     };
    }
    __resumeException($1 | 0);
    abort();
   }
   HEAP8[$5 | 0] = 0;
  }
  $0 = $6 + 32 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
  return $1 | 0;
 }
 
 function std____2__locale___locale_28_29($0) {
  std____2____shared_count____release_shared_28_29(HEAP32[$0 >> 2]);
 }
 
 function std____2__numpunct_char__20const__20std____2__use_facet_std____2__numpunct_char__20__28std____2__locale_20const__29($0) {
  $0 = $0 | 0;
  return std____2__locale__use_facet_28std____2__locale__id__29_20const($0, 69856) | 0;
 }
 
 function std____2__numpunct_char___truename_28_29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 24 >> 2]]($0, $1);
 }
 
 function std____2__numpunct_char___falsename_28_29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 28 >> 2]]($0, $1);
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__20std____2____scan_keyword_std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__ctype_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__ctype_char__20const__2c_20unsigned_20int__2c_20bool_29($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  var $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
  $8 = global$0 - 128 | 0;
  $11 = $8;
  if ($8 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $11;
  HEAP32[$8 + 120 >> 2] = $1;
  $10 = std____2__iterator_traits_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const____difference_type_20std____2__distance_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const___28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29($2, $3);
  HEAP32[$8 + 4 >> 2] = 1644;
  $13 = std____2__unique_ptr__IO_FILE_2c_20int_20_28__29_28_IO_FILE__29___unique_ptr_true_2c_20void__28_IO_FILE__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_int_20_28__29_28_IO_FILE__29__2c_20true_____good_rval_ref_type_29($8 + 8 | 0, 0, $8 + 4 | 0);
  $9 = $8 + 16 | 0;
  label$2 : {
   label$3 : {
    if ($10 >>> 0 >= 101) {
     $9 = dlmalloc($10);
     if (!$9) {
      HEAP32[16874] = 0;
      __invoke_void(1645);
      $0 = HEAP32[16874];
      HEAP32[16874] = 0;
      if (($0 | 0) != 1) {
       break label$2
      }
      break label$3;
     }
     std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___reset_28unsigned_20char__29($13, $9);
    }
    $7 = $9;
    $1 = $2;
    while (1) {
     if (($1 | 0) == ($3 | 0)) {
      label$8 : {
       label$9 : {
        label$10 : while (1) {
         label$11 : {
          HEAP32[16874] = 0;
          $11 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1646, $0 | 0, $8 + 120 | 0) | 0;
          $1 = HEAP32[16874];
          HEAP32[16874] = 0;
          if (($1 | 0) == 1) {
           break label$11
          }
          if (!($11 & ($10 | 0) != 0)) {
           HEAP32[16874] = 0;
           $1 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1647, $0 | 0, $8 + 120 | 0) | 0;
           $0 = HEAP32[16874];
           HEAP32[16874] = 0;
           if (($0 | 0) == 1) {
            break label$8
           }
           if (!$1) {
            break label$9
           }
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 2;
           break label$9;
          }
          HEAP32[16874] = 0;
          $14 = __invoke_i1___22class_std____2__basic_ifstream_22_(1648, $0 | 0) | 0;
          $1 = HEAP32[16874];
          HEAP32[16874] = 0;
          label$13 : {
           if (($1 | 0) != 1) {
            if ($6) {
             break label$13
            }
            HEAP32[16874] = 0;
            $14 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1649, $4 | 0, $14 | 0) | 0;
            $1 = HEAP32[16874];
            HEAP32[16874] = 0;
            if (($1 | 0) != 1) {
             break label$13
            }
           }
           break label$3;
          }
          $11 = $16 + 1 | 0;
          $17 = 0;
          $7 = $9;
          $1 = $2;
          while (1) {
           if (($1 | 0) == ($3 | 0)) {
            $16 = $11;
            if (!$17) {
             continue label$10
            }
            HEAP32[16874] = 0;
            __invoke_i1___22class_std____2__basic_ifstream_22_(1650, $0 | 0) | 0;
            $1 = HEAP32[16874];
            HEAP32[16874] = 0;
            if (($1 | 0) != 1) {
             $7 = $9;
             $1 = $2;
             if ($10 + $12 >>> 0 < 2) {
              continue label$10
             }
             while (1) {
              if (($1 | 0) == ($3 | 0)) {
               continue label$10
              }
              label$20 : {
               if (HEAPU8[$7 | 0] != 2) {
                break label$20
               }
               if ((std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($1) | 0) == ($11 | 0)) {
                break label$20
               }
               HEAP8[$7 | 0] = 0;
               $12 = $12 + -1 | 0;
              }
              $7 = $7 + 1 | 0;
              $1 = $1 + 12 | 0;
              continue;
             };
            }
            break label$3;
           }
           label$21 : {
            if (HEAPU8[$7 | 0] != 1) {
             break label$21
            }
            $15 = HEAPU8[std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29_20const($1, $16) | 0];
            label$22 : {
             if ($6) {
              break label$22
             }
             HEAP32[16874] = 0;
             $15 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1649, $4 | 0, $15 << 24 >> 24) | 0;
             $18 = HEAP32[16874];
             HEAP32[16874] = 0;
             if (($18 | 0) != 1) {
              break label$22
             }
             break label$3;
            }
            label$23 : {
             if (($14 & 255) == ($15 & 255)) {
              $17 = 1;
              if ((std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($1) | 0) != ($11 | 0)) {
               break label$21
              }
              HEAP8[$7 | 0] = 2;
              $12 = $12 + 1 | 0;
              break label$23;
             }
             HEAP8[$7 | 0] = 0;
            }
            $10 = $10 + -1 | 0;
           }
           $7 = $7 + 1 | 0;
           $1 = $1 + 12 | 0;
           continue;
          };
         }
         break;
        };
        break label$3;
       }
       label$25 : {
        label$26 : {
         while (1) {
          if (($2 | 0) == ($3 | 0)) {
           break label$26
          }
          if (HEAPU8[$9 | 0] != 2) {
           $9 = $9 + 1 | 0;
           $2 = $2 + 12 | 0;
           continue;
          }
          break;
         };
         $3 = $2;
         break label$25;
        }
        HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4;
       }
       std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29____unique_ptr_28_29($13);
       $0 = $8 + 128 | 0;
       if ($0 >>> 0 < global$2 >>> 0) {
        __handle_stack_overflow()
       }
       global$0 = $0;
       return $3 | 0;
      }
      break label$3;
     }
     label$30 : {
      if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___empty_28_29_20const($1)) {
       HEAP8[$7 | 0] = 1;
       break label$30;
      }
      HEAP8[$7 | 0] = 2;
      $12 = $12 + 1 | 0;
      $10 = $10 + -1 | 0;
     }
     $7 = $7 + 1 | 0;
     $1 = $1 + 12 | 0;
     continue;
    };
   }
   $1 = __cxa_find_matching_catch_2() | 0;
   getTempRet0() | 0;
   std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29____unique_ptr_28_29($13);
   __resumeException($1 | 0);
  }
  abort();
 }
 
 function std____2__locale__use_facet_28std____2__locale__id__29_20const($0, $1) {
  $0 = HEAP32[$0 >> 2];
  $1 = std____2__locale__id____get_28_29($1);
  if (!std____2__locale____imp__has_facet_28long_29_20const($0, $1)) {
   std____2____throw_bad_cast_28_29();
   abort();
  }
  return HEAP32[std____2__vector_int_2c_20std____2__allocator_int__20___operator_5b_5d_28unsigned_20long_29_20const($0 + 16 | 0, $1) >> 2];
 }
 
 function std____2__iterator_traits_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const____difference_type_20std____2__distance_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const___28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29($0, $1) {
  return ($1 - $0 | 0) / 12 | 0;
 }
 
 function std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___reset_28unsigned_20char__29($0, $1) {
  var $2 = 0;
  $2 = HEAP32[$0 >> 2];
  HEAP32[$0 >> 2] = $1;
  label$1 : {
   if (!$2) {
    break label$1
   }
   $0 = HEAP32[std____2____compressed_pair__IO_FILE__2c_20int_20_28__29_28_IO_FILE__29___second_28_29($0) >> 2];
   HEAP32[16874] = 0;
   __invoke_void___22class_std____2__basic_ifstream_22_($0 | 0, $2 | 0);
   $0 = HEAP32[16874];
   HEAP32[16874] = 0;
   if (($0 | 0) != 1) {
    break label$1
   }
   $0 = __cxa_find_matching_catch_3(0) | 0;
   getTempRet0() | 0;
   __clang_call_terminate($0);
   abort();
  }
 }
 
 function std____2__ctype_char___toupper_28char_29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 12 >> 2]]($0, $1) | 0;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29_20const($0, $1) {
  return std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_pointer_28_29_20const($0) + $1 | 0;
 }
 
 function std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29____unique_ptr_28_29($0) {
  std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___reset_28unsigned_20char__29($0, 0);
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___empty_28_29_20const($0) {
  return !std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($0);
 }
 
 function std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long__29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  return std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____do_get_signed_long__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long__29_20const($1, $2, $3, $4, $5) | 0;
 }
 
 function std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____do_get_signed_long__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long__29_20const($0, $1, $2, $3, $4) {
  var $5 = 0, $6 = 0, $7 = 0;
  $5 = global$0 - 272 | 0;
  $7 = $5;
  if ($5 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $7;
  HEAP32[$5 + 256 >> 2] = $1;
  HEAP32[$5 + 264 >> 2] = $0;
  $7 = std____2____num_get_base____get_base_28std____2__ios_base__29($2);
  std____2____num_get_char_____stage2_int_prep_28std____2__ios_base__2c_20char__29($5 + 208 | 0, $2, $5 + 255 | 0);
  $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($5 + 192 | 0);
  $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($0);
  HEAP32[16874] = 0;
  __invoke_void___22class_std____2__vector_13_22__i32(1652, $0 | 0, $1 | 0);
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    if (($1 | 0) != 1) {
     $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29_20const($0, 0);
     HEAP32[$5 + 188 >> 2] = $1;
     HEAP32[$5 + 12 >> 2] = $5 + 16;
     HEAP32[$5 + 8 >> 2] = 0;
     while (1) {
      label$7 : {
       HEAP32[16874] = 0;
       $2 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1646, $5 + 264 | 0, $5 + 256 | 0) | 0;
       $6 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($6 | 0) == 1) {
        break label$7
       }
       if (!$2) {
        break label$3
       }
       if (HEAP32[$5 + 188 >> 2] == (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($0) + $1 | 0)) {
        $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($0);
        $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($0);
        HEAP32[16874] = 0;
        __invoke_void___22class_std____2__vector_13_22__i32(1652, $0 | 0, $1 << 1);
        $1 = HEAP32[16874];
        HEAP32[16874] = 0;
        if (($1 | 0) == 1) {
         break label$2
        }
        $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($0);
        HEAP32[16874] = 0;
        __invoke_void___22class_std____2__vector_13_22__i32(1652, $0 | 0, $1 | 0);
        $1 = HEAP32[16874];
        HEAP32[16874] = 0;
        if (($1 | 0) == 1) {
         break label$2
        }
        $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29_20const($0, 0);
        HEAP32[$5 + 188 >> 2] = $2 + $1;
       }
       HEAP32[16874] = 0;
       $2 = __invoke_i1___22class_std____2__basic_ifstream_22_(1648, $5 + 264 | 0) | 0;
       $6 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($6 | 0) == 1) {
        break label$7
       }
       HEAP32[16874] = 0;
       $2 = __invoke_i32_i8_i32_i8__i8___i32__i8___22class_std____2__basic_string_22__i32__i32___i8_(1653, $2 | 0, $7 | 0, $1 | 0, $5 + 188 | 0, $5 + 8 | 0, HEAP8[$5 + 255 | 0], $5 + 208 | 0, $5 + 16 | 0, $5 + 12 | 0, 39840) | 0;
       $6 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($6 | 0) == 1) {
        break label$7
       }
       if ($2) {
        break label$3
       }
       HEAP32[16874] = 0;
       __invoke_i1___22class_std____2__basic_ifstream_22_(1650, $5 + 264 | 0) | 0;
       $2 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($2 | 0) != 1) {
        continue
       }
      }
      break;
     };
     break label$2;
    }
    break label$2;
   }
   label$9 : {
    if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($5 + 208 | 0)) {
     break label$9
    }
    $2 = HEAP32[$5 + 12 >> 2];
    if (($2 - ($5 + 16 | 0) | 0) > 159) {
     break label$9
    }
    HEAP32[$5 + 12 >> 2] = $2 + 4;
    HEAP32[$2 >> 2] = HEAP32[$5 + 8 >> 2];
   }
   HEAP32[16874] = 0;
   $1 = __invoke___22class_std____2__shared_ptr_22____22class_std____2__shared_ptr_22___class_maxiOsc____22class_emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc____val_deleter_22__i32(1654, $1 | 0, HEAP32[$5 + 188 >> 2], $3 | 0, $7 | 0) | 0;
   $2 = HEAP32[16874];
   HEAP32[16874] = 0;
   label$10 : {
    if (($2 | 0) == 1) {
     break label$10
    }
    HEAP32[$4 >> 2] = $1;
    HEAP32[16874] = 0;
    __invoke_void___22class_std____2__vector_22__double__double__i32(1655, $5 + 208 | 0, $5 + 16 | 0, HEAP32[$5 + 12 >> 2], $3 | 0);
    $1 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($1 | 0) == 1) {
     break label$10
    }
    HEAP32[16874] = 0;
    $1 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1647, $5 + 264 | 0, $5 + 256 | 0) | 0;
    $2 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($2 | 0) == 1) {
     break label$10
    }
    if ($1) {
     HEAP32[$3 >> 2] = HEAP32[$3 >> 2] | 2
    }
    $1 = HEAP32[$5 + 264 >> 2];
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($0);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($5 + 208 | 0);
    $0 = $5 + 272 | 0;
    if ($0 >>> 0 < global$2 >>> 0) {
     __handle_stack_overflow()
    }
    global$0 = $0;
    return $1;
   }
  }
  $1 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($0);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($5 + 208 | 0);
  __resumeException($1 | 0);
  abort();
 }
 
 function std____2____num_get_base____get_base_28std____2__ios_base__29($0) {
  label$1 : {
   $0 = HEAP32[$0 + 4 >> 2] & 74;
   if ($0) {
    if (($0 | 0) == 64) {
     return 8
    }
    if (($0 | 0) != 8) {
     break label$1
    }
    return 16;
   }
   return 0;
  }
  return 10;
 }
 
 function std____2____num_get_char_____stage2_int_prep_28std____2__ios_base__2c_20char__29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0;
  $3 = global$0 - 16 | 0;
  $4 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  std____2__ios_base__getloc_28_29_20const($3 + 8 | 0, $1);
  HEAP32[16874] = 0;
  $1 = __invoke_i1___22class_std____2__basic_ifstream_22_(1640, $3 + 8 | 0) | 0;
  $4 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   if (($4 | 0) == 1) {
    break label$2
   }
   HEAP32[16874] = 0;
   $4 = __invoke_i1___22class_std____2__basic_ifstream_22_(1656, $1 | 0) | 0;
   $5 = HEAP32[16874];
   HEAP32[16874] = 0;
   if (($5 | 0) == 1) {
    break label$2
   }
   HEAP8[$2 | 0] = $4;
   HEAP32[16874] = 0;
   __invoke_void___22class_std____2__vector_13_22__i32(1657, $0 | 0, $1 | 0);
   $0 = HEAP32[16874];
   HEAP32[16874] = 0;
   if (($0 | 0) == 1) {
    break label$2
   }
   std____2__locale___locale_28_29($3 + 8 | 0);
   $0 = $3 + 16 | 0;
   if ($0 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $0;
   return;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__locale___locale_28_29($3 + 8 | 0);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($0) {
  if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____is_long_28_29_20const($0)) {
   $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_long_cap_28_29_20const($0) + -1 | 0
  } else {
   $0 = 10
  }
  return $0;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_2c_20char_29($0, $1);
 }
 
 function std____2____num_get_char_____stage2_int_loop_28char_2c_20int_2c_20char__2c_20char___2c_20unsigned_20int__2c_20char_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int___2c_20char_20const__29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  $8 = $8 | 0;
  $9 = $9 | 0;
  var $10 = 0, $11 = 0, $12 = 0;
  $10 = global$0 - 16 | 0;
  $11 = $10;
  if ($10 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $11;
  HEAP8[$10 + 15 | 0] = $0;
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      if (HEAP32[$3 >> 2] != ($2 | 0)) {
       break label$5
      }
      $11 = $0 & 255;
      $12 = ($11 | 0) == HEAPU8[$9 + 24 | 0];
      if (($11 | 0) != HEAPU8[$9 + 25 | 0] ? !$12 : 0) {
       break label$5
      }
      HEAP32[$3 >> 2] = $2 + 1;
      HEAP8[$2 | 0] = $12 ? 43 : 45;
      break label$4;
     }
     if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($6) | ($0 | 0) != ($5 | 0)) {
      break label$3
     }
     $0 = 0;
     $1 = HEAP32[$8 >> 2];
     if (($1 - $7 | 0) > 159) {
      break label$2
     }
     $0 = HEAP32[$4 >> 2];
     HEAP32[$8 >> 2] = $1 + 4;
     HEAP32[$1 >> 2] = $0;
    }
    $0 = 0;
    HEAP32[$4 >> 2] = 0;
    break label$2;
   }
   $0 = -1;
   $5 = char_20const__20std____2__find_char_20const__2c_20char__28char_20const__2c_20char_20const__2c_20char_20const__29($9, $9 + 26 | 0, $10 + 15 | 0) - $9 | 0;
   if (($5 | 0) > 23) {
    break label$2
   }
   $6 = $1 + -8 | 0;
   label$7 : {
    if ($6 >>> 0 > 2) {
     if (($1 | 0) != 16 | ($5 | 0) < 22) {
      break label$7
     }
     $1 = HEAP32[$3 >> 2];
     if (($1 | 0) == ($2 | 0) | ($1 - $2 | 0) > 2) {
      break label$2
     }
     if (HEAPU8[$1 + -1 | 0] != 48) {
      break label$2
     }
     $0 = 0;
     HEAP32[$4 >> 2] = 0;
     HEAP32[$3 >> 2] = $1 + 1;
     HEAP8[$1 | 0] = HEAPU8[$5 + 39840 | 0];
     break label$2;
    }
    if (!($6 - 1)) {
     break label$7
    }
    if (($5 | 0) >= ($1 | 0)) {
     break label$2
    }
   }
   $0 = HEAP32[$3 >> 2];
   HEAP32[$3 >> 2] = $0 + 1;
   HEAP8[$0 | 0] = HEAPU8[$5 + 39840 | 0];
   HEAP32[$4 >> 2] = HEAP32[$4 >> 2] + 1;
   $0 = 0;
  }
  $1 = $10 + 16 | 0;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  return $0 | 0;
 }
 
 function long_20std____2____num_get_signed_integral_long__28char_20const__2c_20char_20const__2c_20unsigned_20int__2c_20int_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0;
  $4 = global$0 - 16 | 0;
  $5 = $4;
  if ($4 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $5;
  label$2 : {
   label$3 : {
    label$4 : {
     if (($0 | 0) != ($1 | 0)) {
      $5 = HEAP32[16596];
      HEAP32[16596] = 0;
      $0 = strtoll_l($0, $4 + 12 | 0, $3, std____2____cloc_28_29());
      $3 = i64toi32_i32$HIGH_BITS;
      $6 = HEAP32[16596];
      label$7 : {
       if ($6) {
        if (HEAP32[$4 + 12 >> 2] != ($1 | 0)) {
         break label$7
        }
        if (($6 | 0) == 68) {
         break label$3
        }
        break label$4;
       }
       HEAP32[16596] = $5;
       if (HEAP32[$4 + 12 >> 2] == ($1 | 0)) {
        break label$4
       }
      }
     }
     HEAP32[$2 >> 2] = 4;
     $0 = 0;
     break label$2;
    }
    if ((($3 | 0) < -1 ? 1 : ($3 | 0) <= -1 ? ($0 >>> 0 >= 2147483648 ? 0 : 1) : 0) | (($3 | 0) > 0 ? 1 : ($3 | 0) >= 0 ? ($0 >>> 0 <= 2147483647 ? 0 : 1) : 0)) {
     break label$3
    }
    break label$2;
   }
   HEAP32[$2 >> 2] = 4;
   if (($3 | 0) > 0 ? 1 : ($3 | 0) >= 0 ? ($0 >>> 0 < 1 ? 0 : 1) : 0) {
    $0 = 2147483647;
    break label$2;
   }
   $0 = -2147483648;
  }
  $1 = $4 + 16 | 0;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  return $0 | 0;
 }
 
 function std____2____check_grouping_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int__2c_20unsigned_20int__29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0;
  label$1 : {
   if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($0) | ($2 - $1 | 0) < 5) {
    break label$1
   }
   void_20std____2__reverse_wchar_t___28wchar_t__2c_20wchar_t__29($1, $2);
   $4 = $2 + -4 | 0;
   $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_pointer_28_29_20const($0);
   $5 = $2 + std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($0) | 0;
   while (1) {
    label$3 : {
     $0 = HEAP8[$2 | 0];
     if ($1 >>> 0 >= $4 >>> 0) {
      break label$3
     }
     if (HEAP32[$1 >> 2] == HEAP8[$2 | 0] | ($0 | 0) >= 127 | ($0 | 0) < 1) {
      $2 = ($5 - $2 | 0) > 1 ? $2 + 1 | 0 : $2;
      $1 = $1 + 4 | 0;
      continue;
     } else {
      HEAP32[$3 >> 2] = 4;
      return;
     }
    }
    break;
   };
   if (HEAP32[$4 >> 2] + -1 >>> 0 < HEAP8[$2 | 0] >>> 0 | ($0 | 0) >= 127 | ($0 | 0) < 1) {
    break label$1
   }
   HEAP32[$3 >> 2] = 4;
  }
 }
 
 function std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long_20long__29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  return std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____do_get_signed_long_20long__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long_20long__29_20const($1, $2, $3, $4, $5) | 0;
 }
 
 function std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____do_get_signed_long_20long__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long_20long__29_20const($0, $1, $2, $3, $4) {
  var $5 = 0, $6 = 0, $7 = 0;
  $5 = global$0 - 272 | 0;
  $6 = $5;
  if ($5 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $6;
  HEAP32[$5 + 256 >> 2] = $1;
  HEAP32[$5 + 264 >> 2] = $0;
  $6 = std____2____num_get_base____get_base_28std____2__ios_base__29($2);
  std____2____num_get_char_____stage2_int_prep_28std____2__ios_base__2c_20char__29($5 + 208 | 0, $2, $5 + 255 | 0);
  $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($5 + 192 | 0);
  $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($0);
  HEAP32[16874] = 0;
  __invoke_void___22class_std____2__vector_13_22__i32(1652, $0 | 0, $1 | 0);
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    if (($1 | 0) != 1) {
     $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29_20const($0, 0);
     HEAP32[$5 + 188 >> 2] = $1;
     HEAP32[$5 + 12 >> 2] = $5 + 16;
     HEAP32[$5 + 8 >> 2] = 0;
     while (1) {
      label$7 : {
       HEAP32[16874] = 0;
       $2 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1646, $5 + 264 | 0, $5 + 256 | 0) | 0;
       $7 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($7 | 0) == 1) {
        break label$7
       }
       if (!$2) {
        break label$3
       }
       if (HEAP32[$5 + 188 >> 2] == (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($0) + $1 | 0)) {
        $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($0);
        $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($0);
        HEAP32[16874] = 0;
        __invoke_void___22class_std____2__vector_13_22__i32(1652, $0 | 0, $1 << 1);
        $1 = HEAP32[16874];
        HEAP32[16874] = 0;
        if (($1 | 0) == 1) {
         break label$2
        }
        $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($0);
        HEAP32[16874] = 0;
        __invoke_void___22class_std____2__vector_13_22__i32(1652, $0 | 0, $1 | 0);
        $1 = HEAP32[16874];
        HEAP32[16874] = 0;
        if (($1 | 0) == 1) {
         break label$2
        }
        $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29_20const($0, 0);
        HEAP32[$5 + 188 >> 2] = $2 + $1;
       }
       HEAP32[16874] = 0;
       $2 = __invoke_i1___22class_std____2__basic_ifstream_22_(1648, $5 + 264 | 0) | 0;
       $7 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($7 | 0) == 1) {
        break label$7
       }
       HEAP32[16874] = 0;
       $2 = __invoke_i32_i8_i32_i8__i8___i32__i8___22class_std____2__basic_string_22__i32__i32___i8_(1653, $2 | 0, $6 | 0, $1 | 0, $5 + 188 | 0, $5 + 8 | 0, HEAP8[$5 + 255 | 0], $5 + 208 | 0, $5 + 16 | 0, $5 + 12 | 0, 39840) | 0;
       $7 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($7 | 0) == 1) {
        break label$7
       }
       if ($2) {
        break label$3
       }
       HEAP32[16874] = 0;
       __invoke_i1___22class_std____2__basic_ifstream_22_(1650, $5 + 264 | 0) | 0;
       $2 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($2 | 0) != 1) {
        continue
       }
      }
      break;
     };
     break label$2;
    }
    break label$2;
   }
   label$9 : {
    if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($5 + 208 | 0)) {
     break label$9
    }
    $2 = HEAP32[$5 + 12 >> 2];
    if (($2 - ($5 + 16 | 0) | 0) > 159) {
     break label$9
    }
    HEAP32[$5 + 12 >> 2] = $2 + 4;
    HEAP32[$2 >> 2] = HEAP32[$5 + 8 >> 2];
   }
   HEAP32[16874] = 0;
   $1 = legalfunc$__invoke_i64_i8__i8__i32__i32(1658, $1, HEAP32[$5 + 188 >> 2], $3, $6);
   $2 = i64toi32_i32$HIGH_BITS;
   $6 = HEAP32[16874];
   HEAP32[16874] = 0;
   label$10 : {
    if (($6 | 0) == 1) {
     break label$10
    }
    HEAP32[$4 >> 2] = $1;
    HEAP32[$4 + 4 >> 2] = $2;
    HEAP32[16874] = 0;
    __invoke_void___22class_std____2__vector_22__double__double__i32(1655, $5 + 208 | 0, $5 + 16 | 0, HEAP32[$5 + 12 >> 2], $3 | 0);
    $1 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($1 | 0) == 1) {
     break label$10
    }
    HEAP32[16874] = 0;
    $1 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1647, $5 + 264 | 0, $5 + 256 | 0) | 0;
    $2 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($2 | 0) == 1) {
     break label$10
    }
    if ($1) {
     HEAP32[$3 >> 2] = HEAP32[$3 >> 2] | 2
    }
    $1 = HEAP32[$5 + 264 >> 2];
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($0);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($5 + 208 | 0);
    $0 = $5 + 272 | 0;
    if ($0 >>> 0 < global$2 >>> 0) {
     __handle_stack_overflow()
    }
    global$0 = $0;
    return $1;
   }
  }
  $1 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($0);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($5 + 208 | 0);
  __resumeException($1 | 0);
  abort();
 }
 
 function long_20long_20std____2____num_get_signed_integral_long_20long__28char_20const__2c_20char_20const__2c_20unsigned_20int__2c_20int_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0;
  $5 = global$0 - 16 | 0;
  $4 = $5;
  if ($5 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  label$2 : {
   label$3 : {
    label$4 : {
     if (($0 | 0) != ($1 | 0)) {
      $4 = HEAP32[16596];
      HEAP32[16596] = 0;
      $3 = strtoll_l($0, $5 + 12 | 0, $3, std____2____cloc_28_29());
      $0 = i64toi32_i32$HIGH_BITS;
      $6 = HEAP32[16596];
      label$7 : {
       if ($6) {
        if (HEAP32[$5 + 12 >> 2] != ($1 | 0)) {
         break label$7
        }
        if (($6 | 0) == 68) {
         break label$3
        }
        break label$4;
       }
       HEAP32[16596] = $4;
       if (HEAP32[$5 + 12 >> 2] == ($1 | 0)) {
        break label$4
       }
      }
     }
     HEAP32[$2 >> 2] = 4;
     $3 = 0;
     $0 = 0;
     break label$2;
    }
    $4 = $3 >>> 0 >= std____2__numeric_limits_long_20long___min_28_29() >>> 0 ? 0 : 1;
    $1 = i64toi32_i32$HIGH_BITS;
    if (($0 | 0) < ($1 | 0) ? 1 : ($0 | 0) <= ($1 | 0) ? $4 : 0) {
     break label$3
    }
    $4 = std____2__numeric_limits_long_20long___max_28_29();
    $1 = i64toi32_i32$HIGH_BITS;
    if (($1 | 0) > ($0 | 0) ? 1 : ($1 | 0) >= ($0 | 0) ? ($4 >>> 0 < $3 >>> 0 ? 0 : 1) : 0) {
     break label$2
    }
   }
   HEAP32[$2 >> 2] = 4;
   if (($0 | 0) > 0 ? 1 : ($0 | 0) >= 0 ? ($3 >>> 0 < 1 ? 0 : 1) : 0) {
    $3 = std____2__numeric_limits_long_20long___max_28_29();
    $0 = i64toi32_i32$HIGH_BITS;
    break label$2;
   }
   $3 = std____2__numeric_limits_long_20long___min_28_29();
   $0 = i64toi32_i32$HIGH_BITS;
  }
  $1 = $5 + 16 | 0;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  i64toi32_i32$HIGH_BITS = $0;
  return $3 | 0;
 }
 
 function std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20short__29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  return std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____do_get_unsigned_unsigned_20short__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20short__29_20const($1, $2, $3, $4, $5) | 0;
 }
 
 function std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____do_get_unsigned_unsigned_20short__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20short__29_20const($0, $1, $2, $3, $4) {
  var $5 = 0, $6 = 0, $7 = 0;
  $5 = global$0 - 272 | 0;
  $7 = $5;
  if ($5 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $7;
  HEAP32[$5 + 256 >> 2] = $1;
  HEAP32[$5 + 264 >> 2] = $0;
  $7 = std____2____num_get_base____get_base_28std____2__ios_base__29($2);
  std____2____num_get_char_____stage2_int_prep_28std____2__ios_base__2c_20char__29($5 + 208 | 0, $2, $5 + 255 | 0);
  $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($5 + 192 | 0);
  $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($0);
  HEAP32[16874] = 0;
  __invoke_void___22class_std____2__vector_13_22__i32(1652, $0 | 0, $1 | 0);
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    if (($1 | 0) != 1) {
     $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29_20const($0, 0);
     HEAP32[$5 + 188 >> 2] = $1;
     HEAP32[$5 + 12 >> 2] = $5 + 16;
     HEAP32[$5 + 8 >> 2] = 0;
     while (1) {
      label$7 : {
       HEAP32[16874] = 0;
       $2 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1646, $5 + 264 | 0, $5 + 256 | 0) | 0;
       $6 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($6 | 0) == 1) {
        break label$7
       }
       if (!$2) {
        break label$3
       }
       if (HEAP32[$5 + 188 >> 2] == (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($0) + $1 | 0)) {
        $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($0);
        $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($0);
        HEAP32[16874] = 0;
        __invoke_void___22class_std____2__vector_13_22__i32(1652, $0 | 0, $1 << 1);
        $1 = HEAP32[16874];
        HEAP32[16874] = 0;
        if (($1 | 0) == 1) {
         break label$2
        }
        $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($0);
        HEAP32[16874] = 0;
        __invoke_void___22class_std____2__vector_13_22__i32(1652, $0 | 0, $1 | 0);
        $1 = HEAP32[16874];
        HEAP32[16874] = 0;
        if (($1 | 0) == 1) {
         break label$2
        }
        $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29_20const($0, 0);
        HEAP32[$5 + 188 >> 2] = $2 + $1;
       }
       HEAP32[16874] = 0;
       $2 = __invoke_i1___22class_std____2__basic_ifstream_22_(1648, $5 + 264 | 0) | 0;
       $6 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($6 | 0) == 1) {
        break label$7
       }
       HEAP32[16874] = 0;
       $2 = __invoke_i32_i8_i32_i8__i8___i32__i8___22class_std____2__basic_string_22__i32__i32___i8_(1653, $2 | 0, $7 | 0, $1 | 0, $5 + 188 | 0, $5 + 8 | 0, HEAP8[$5 + 255 | 0], $5 + 208 | 0, $5 + 16 | 0, $5 + 12 | 0, 39840) | 0;
       $6 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($6 | 0) == 1) {
        break label$7
       }
       if ($2) {
        break label$3
       }
       HEAP32[16874] = 0;
       __invoke_i1___22class_std____2__basic_ifstream_22_(1650, $5 + 264 | 0) | 0;
       $2 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($2 | 0) != 1) {
        continue
       }
      }
      break;
     };
     break label$2;
    }
    break label$2;
   }
   label$9 : {
    if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($5 + 208 | 0)) {
     break label$9
    }
    $2 = HEAP32[$5 + 12 >> 2];
    if (($2 - ($5 + 16 | 0) | 0) > 159) {
     break label$9
    }
    HEAP32[$5 + 12 >> 2] = $2 + 4;
    HEAP32[$2 >> 2] = HEAP32[$5 + 8 >> 2];
   }
   HEAP32[16874] = 0;
   $1 = __invoke___22class_std____2__shared_ptr_22____22class_std____2__shared_ptr_22___class_maxiOsc____22class_emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc____val_deleter_22__i32(1659, $1 | 0, HEAP32[$5 + 188 >> 2], $3 | 0, $7 | 0) | 0;
   $2 = HEAP32[16874];
   HEAP32[16874] = 0;
   label$10 : {
    if (($2 | 0) == 1) {
     break label$10
    }
    HEAP16[$4 >> 1] = $1;
    HEAP32[16874] = 0;
    __invoke_void___22class_std____2__vector_22__double__double__i32(1655, $5 + 208 | 0, $5 + 16 | 0, HEAP32[$5 + 12 >> 2], $3 | 0);
    $1 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($1 | 0) == 1) {
     break label$10
    }
    HEAP32[16874] = 0;
    $1 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1647, $5 + 264 | 0, $5 + 256 | 0) | 0;
    $2 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($2 | 0) == 1) {
     break label$10
    }
    if ($1) {
     HEAP32[$3 >> 2] = HEAP32[$3 >> 2] | 2
    }
    $1 = HEAP32[$5 + 264 >> 2];
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($0);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($5 + 208 | 0);
    $0 = $5 + 272 | 0;
    if ($0 >>> 0 < global$2 >>> 0) {
     __handle_stack_overflow()
    }
    global$0 = $0;
    return $1;
   }
  }
  $1 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($0);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($5 + 208 | 0);
  __resumeException($1 | 0);
  abort();
 }
 
 function unsigned_20short_20std____2____num_get_unsigned_integral_unsigned_20short__28char_20const__2c_20char_20const__2c_20unsigned_20int__2c_20int_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0;
  $4 = global$0 - 16 | 0;
  $5 = $4;
  if ($4 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $5;
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      if (($0 | 0) != ($1 | 0)) {
       label$6 : {
        label$8 : {
         $5 = HEAPU8[$0 | 0];
         if (($5 | 0) != 45) {
          break label$8
         }
         $0 = $0 + 1 | 0;
         if (($1 | 0) != ($0 | 0)) {
          break label$8
         }
         break label$6;
        }
        $7 = HEAP32[16596];
        HEAP32[16596] = 0;
        $0 = strtoull_l($0, $4 + 12 | 0, $3, std____2____cloc_28_29());
        $3 = i64toi32_i32$HIGH_BITS;
        $6 = HEAP32[16596];
        label$9 : {
         if ($6) {
          if (HEAP32[$4 + 12 >> 2] != ($1 | 0)) {
           break label$9
          }
          if (($6 | 0) == 68) {
           break label$4
          }
          break label$5;
         }
         HEAP32[16596] = $7;
         if (HEAP32[$4 + 12 >> 2] == ($1 | 0)) {
          break label$5
         }
        }
       }
      }
      HEAP32[$2 >> 2] = 4;
      $0 = 0;
      break label$2;
     }
     if (!$3 & $0 >>> 0 <= 65535 | $3 >>> 0 < 0) {
      break label$3
     }
    }
    HEAP32[$2 >> 2] = 4;
    $0 = 65535;
    break label$2;
   }
   $0 = ($5 | 0) == 45 ? 0 - $0 | 0 : $0;
  }
  $1 = $4 + 16 | 0;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  return $0 & 65535;
 }
 
 function std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20int__29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  return std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____do_get_unsigned_unsigned_20int__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20int__29_20const($1, $2, $3, $4, $5) | 0;
 }
 
 function std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____do_get_unsigned_unsigned_20int__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20int__29_20const($0, $1, $2, $3, $4) {
  var $5 = 0, $6 = 0, $7 = 0;
  $5 = global$0 - 272 | 0;
  $7 = $5;
  if ($5 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $7;
  HEAP32[$5 + 256 >> 2] = $1;
  HEAP32[$5 + 264 >> 2] = $0;
  $7 = std____2____num_get_base____get_base_28std____2__ios_base__29($2);
  std____2____num_get_char_____stage2_int_prep_28std____2__ios_base__2c_20char__29($5 + 208 | 0, $2, $5 + 255 | 0);
  $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($5 + 192 | 0);
  $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($0);
  HEAP32[16874] = 0;
  __invoke_void___22class_std____2__vector_13_22__i32(1652, $0 | 0, $1 | 0);
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    if (($1 | 0) != 1) {
     $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29_20const($0, 0);
     HEAP32[$5 + 188 >> 2] = $1;
     HEAP32[$5 + 12 >> 2] = $5 + 16;
     HEAP32[$5 + 8 >> 2] = 0;
     while (1) {
      label$7 : {
       HEAP32[16874] = 0;
       $2 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1646, $5 + 264 | 0, $5 + 256 | 0) | 0;
       $6 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($6 | 0) == 1) {
        break label$7
       }
       if (!$2) {
        break label$3
       }
       if (HEAP32[$5 + 188 >> 2] == (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($0) + $1 | 0)) {
        $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($0);
        $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($0);
        HEAP32[16874] = 0;
        __invoke_void___22class_std____2__vector_13_22__i32(1652, $0 | 0, $1 << 1);
        $1 = HEAP32[16874];
        HEAP32[16874] = 0;
        if (($1 | 0) == 1) {
         break label$2
        }
        $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($0);
        HEAP32[16874] = 0;
        __invoke_void___22class_std____2__vector_13_22__i32(1652, $0 | 0, $1 | 0);
        $1 = HEAP32[16874];
        HEAP32[16874] = 0;
        if (($1 | 0) == 1) {
         break label$2
        }
        $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29_20const($0, 0);
        HEAP32[$5 + 188 >> 2] = $2 + $1;
       }
       HEAP32[16874] = 0;
       $2 = __invoke_i1___22class_std____2__basic_ifstream_22_(1648, $5 + 264 | 0) | 0;
       $6 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($6 | 0) == 1) {
        break label$7
       }
       HEAP32[16874] = 0;
       $2 = __invoke_i32_i8_i32_i8__i8___i32__i8___22class_std____2__basic_string_22__i32__i32___i8_(1653, $2 | 0, $7 | 0, $1 | 0, $5 + 188 | 0, $5 + 8 | 0, HEAP8[$5 + 255 | 0], $5 + 208 | 0, $5 + 16 | 0, $5 + 12 | 0, 39840) | 0;
       $6 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($6 | 0) == 1) {
        break label$7
       }
       if ($2) {
        break label$3
       }
       HEAP32[16874] = 0;
       __invoke_i1___22class_std____2__basic_ifstream_22_(1650, $5 + 264 | 0) | 0;
       $2 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($2 | 0) != 1) {
        continue
       }
      }
      break;
     };
     break label$2;
    }
    break label$2;
   }
   label$9 : {
    if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($5 + 208 | 0)) {
     break label$9
    }
    $2 = HEAP32[$5 + 12 >> 2];
    if (($2 - ($5 + 16 | 0) | 0) > 159) {
     break label$9
    }
    HEAP32[$5 + 12 >> 2] = $2 + 4;
    HEAP32[$2 >> 2] = HEAP32[$5 + 8 >> 2];
   }
   HEAP32[16874] = 0;
   $1 = __invoke___22class_std____2__shared_ptr_22____22class_std____2__shared_ptr_22___class_maxiOsc____22class_emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc____val_deleter_22__i32(1660, $1 | 0, HEAP32[$5 + 188 >> 2], $3 | 0, $7 | 0) | 0;
   $2 = HEAP32[16874];
   HEAP32[16874] = 0;
   label$10 : {
    if (($2 | 0) == 1) {
     break label$10
    }
    HEAP32[$4 >> 2] = $1;
    HEAP32[16874] = 0;
    __invoke_void___22class_std____2__vector_22__double__double__i32(1655, $5 + 208 | 0, $5 + 16 | 0, HEAP32[$5 + 12 >> 2], $3 | 0);
    $1 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($1 | 0) == 1) {
     break label$10
    }
    HEAP32[16874] = 0;
    $1 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1647, $5 + 264 | 0, $5 + 256 | 0) | 0;
    $2 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($2 | 0) == 1) {
     break label$10
    }
    if ($1) {
     HEAP32[$3 >> 2] = HEAP32[$3 >> 2] | 2
    }
    $1 = HEAP32[$5 + 264 >> 2];
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($0);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($5 + 208 | 0);
    $0 = $5 + 272 | 0;
    if ($0 >>> 0 < global$2 >>> 0) {
     __handle_stack_overflow()
    }
    global$0 = $0;
    return $1;
   }
  }
  $1 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($0);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($5 + 208 | 0);
  __resumeException($1 | 0);
  abort();
 }
 
 function unsigned_20int_20std____2____num_get_unsigned_integral_unsigned_20int__28char_20const__2c_20char_20const__2c_20unsigned_20int__2c_20int_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0;
  $4 = global$0 - 16 | 0;
  $5 = $4;
  if ($4 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $5;
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      if (($0 | 0) != ($1 | 0)) {
       label$6 : {
        label$8 : {
         $5 = HEAPU8[$0 | 0];
         if (($5 | 0) != 45) {
          break label$8
         }
         $0 = $0 + 1 | 0;
         if (($1 | 0) != ($0 | 0)) {
          break label$8
         }
         break label$6;
        }
        $7 = HEAP32[16596];
        HEAP32[16596] = 0;
        $0 = strtoull_l($0, $4 + 12 | 0, $3, std____2____cloc_28_29());
        $3 = i64toi32_i32$HIGH_BITS;
        $6 = HEAP32[16596];
        label$9 : {
         if ($6) {
          if (HEAP32[$4 + 12 >> 2] != ($1 | 0)) {
           break label$9
          }
          if (($6 | 0) == 68) {
           break label$4
          }
          break label$5;
         }
         HEAP32[16596] = $7;
         if (HEAP32[$4 + 12 >> 2] == ($1 | 0)) {
          break label$5
         }
        }
       }
      }
      HEAP32[$2 >> 2] = 4;
      $0 = 0;
      break label$2;
     }
     if (!$3 & $0 >>> 0 <= 4294967295 | $3 >>> 0 < 0) {
      break label$3
     }
    }
    HEAP32[$2 >> 2] = 4;
    $0 = -1;
    break label$2;
   }
   $0 = ($5 | 0) == 45 ? 0 - $0 | 0 : $0;
  }
  $1 = $4 + 16 | 0;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  return $0 | 0;
 }
 
 function std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20long__29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  return std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____do_get_unsigned_unsigned_20long__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20long__29_20const($1, $2, $3, $4, $5) | 0;
 }
 
 function std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____do_get_unsigned_unsigned_20long__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20long__29_20const($0, $1, $2, $3, $4) {
  var $5 = 0, $6 = 0, $7 = 0;
  $5 = global$0 - 272 | 0;
  $7 = $5;
  if ($5 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $7;
  HEAP32[$5 + 256 >> 2] = $1;
  HEAP32[$5 + 264 >> 2] = $0;
  $7 = std____2____num_get_base____get_base_28std____2__ios_base__29($2);
  std____2____num_get_char_____stage2_int_prep_28std____2__ios_base__2c_20char__29($5 + 208 | 0, $2, $5 + 255 | 0);
  $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($5 + 192 | 0);
  $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($0);
  HEAP32[16874] = 0;
  __invoke_void___22class_std____2__vector_13_22__i32(1652, $0 | 0, $1 | 0);
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    if (($1 | 0) != 1) {
     $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29_20const($0, 0);
     HEAP32[$5 + 188 >> 2] = $1;
     HEAP32[$5 + 12 >> 2] = $5 + 16;
     HEAP32[$5 + 8 >> 2] = 0;
     while (1) {
      label$7 : {
       HEAP32[16874] = 0;
       $2 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1646, $5 + 264 | 0, $5 + 256 | 0) | 0;
       $6 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($6 | 0) == 1) {
        break label$7
       }
       if (!$2) {
        break label$3
       }
       if (HEAP32[$5 + 188 >> 2] == (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($0) + $1 | 0)) {
        $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($0);
        $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($0);
        HEAP32[16874] = 0;
        __invoke_void___22class_std____2__vector_13_22__i32(1652, $0 | 0, $1 << 1);
        $1 = HEAP32[16874];
        HEAP32[16874] = 0;
        if (($1 | 0) == 1) {
         break label$2
        }
        $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($0);
        HEAP32[16874] = 0;
        __invoke_void___22class_std____2__vector_13_22__i32(1652, $0 | 0, $1 | 0);
        $1 = HEAP32[16874];
        HEAP32[16874] = 0;
        if (($1 | 0) == 1) {
         break label$2
        }
        $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29_20const($0, 0);
        HEAP32[$5 + 188 >> 2] = $2 + $1;
       }
       HEAP32[16874] = 0;
       $2 = __invoke_i1___22class_std____2__basic_ifstream_22_(1648, $5 + 264 | 0) | 0;
       $6 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($6 | 0) == 1) {
        break label$7
       }
       HEAP32[16874] = 0;
       $2 = __invoke_i32_i8_i32_i8__i8___i32__i8___22class_std____2__basic_string_22__i32__i32___i8_(1653, $2 | 0, $7 | 0, $1 | 0, $5 + 188 | 0, $5 + 8 | 0, HEAP8[$5 + 255 | 0], $5 + 208 | 0, $5 + 16 | 0, $5 + 12 | 0, 39840) | 0;
       $6 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($6 | 0) == 1) {
        break label$7
       }
       if ($2) {
        break label$3
       }
       HEAP32[16874] = 0;
       __invoke_i1___22class_std____2__basic_ifstream_22_(1650, $5 + 264 | 0) | 0;
       $2 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($2 | 0) != 1) {
        continue
       }
      }
      break;
     };
     break label$2;
    }
    break label$2;
   }
   label$9 : {
    if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($5 + 208 | 0)) {
     break label$9
    }
    $2 = HEAP32[$5 + 12 >> 2];
    if (($2 - ($5 + 16 | 0) | 0) > 159) {
     break label$9
    }
    HEAP32[$5 + 12 >> 2] = $2 + 4;
    HEAP32[$2 >> 2] = HEAP32[$5 + 8 >> 2];
   }
   HEAP32[16874] = 0;
   $1 = __invoke___22class_std____2__shared_ptr_22____22class_std____2__shared_ptr_22___class_maxiOsc____22class_emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc____val_deleter_22__i32(1661, $1 | 0, HEAP32[$5 + 188 >> 2], $3 | 0, $7 | 0) | 0;
   $2 = HEAP32[16874];
   HEAP32[16874] = 0;
   label$10 : {
    if (($2 | 0) == 1) {
     break label$10
    }
    HEAP32[$4 >> 2] = $1;
    HEAP32[16874] = 0;
    __invoke_void___22class_std____2__vector_22__double__double__i32(1655, $5 + 208 | 0, $5 + 16 | 0, HEAP32[$5 + 12 >> 2], $3 | 0);
    $1 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($1 | 0) == 1) {
     break label$10
    }
    HEAP32[16874] = 0;
    $1 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1647, $5 + 264 | 0, $5 + 256 | 0) | 0;
    $2 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($2 | 0) == 1) {
     break label$10
    }
    if ($1) {
     HEAP32[$3 >> 2] = HEAP32[$3 >> 2] | 2
    }
    $1 = HEAP32[$5 + 264 >> 2];
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($0);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($5 + 208 | 0);
    $0 = $5 + 272 | 0;
    if ($0 >>> 0 < global$2 >>> 0) {
     __handle_stack_overflow()
    }
    global$0 = $0;
    return $1;
   }
  }
  $1 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($0);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($5 + 208 | 0);
  __resumeException($1 | 0);
  abort();
 }
 
 function std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20long_20long__29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  return std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____do_get_unsigned_unsigned_20long_20long__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20long_20long__29_20const($1, $2, $3, $4, $5) | 0;
 }
 
 function std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____do_get_unsigned_unsigned_20long_20long__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20long_20long__29_20const($0, $1, $2, $3, $4) {
  var $5 = 0, $6 = 0, $7 = 0;
  $5 = global$0 - 272 | 0;
  $6 = $5;
  if ($5 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $6;
  HEAP32[$5 + 256 >> 2] = $1;
  HEAP32[$5 + 264 >> 2] = $0;
  $6 = std____2____num_get_base____get_base_28std____2__ios_base__29($2);
  std____2____num_get_char_____stage2_int_prep_28std____2__ios_base__2c_20char__29($5 + 208 | 0, $2, $5 + 255 | 0);
  $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($5 + 192 | 0);
  $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($0);
  HEAP32[16874] = 0;
  __invoke_void___22class_std____2__vector_13_22__i32(1652, $0 | 0, $1 | 0);
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    if (($1 | 0) != 1) {
     $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29_20const($0, 0);
     HEAP32[$5 + 188 >> 2] = $1;
     HEAP32[$5 + 12 >> 2] = $5 + 16;
     HEAP32[$5 + 8 >> 2] = 0;
     while (1) {
      label$7 : {
       HEAP32[16874] = 0;
       $2 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1646, $5 + 264 | 0, $5 + 256 | 0) | 0;
       $7 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($7 | 0) == 1) {
        break label$7
       }
       if (!$2) {
        break label$3
       }
       if (HEAP32[$5 + 188 >> 2] == (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($0) + $1 | 0)) {
        $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($0);
        $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($0);
        HEAP32[16874] = 0;
        __invoke_void___22class_std____2__vector_13_22__i32(1652, $0 | 0, $1 << 1);
        $1 = HEAP32[16874];
        HEAP32[16874] = 0;
        if (($1 | 0) == 1) {
         break label$2
        }
        $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($0);
        HEAP32[16874] = 0;
        __invoke_void___22class_std____2__vector_13_22__i32(1652, $0 | 0, $1 | 0);
        $1 = HEAP32[16874];
        HEAP32[16874] = 0;
        if (($1 | 0) == 1) {
         break label$2
        }
        $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29_20const($0, 0);
        HEAP32[$5 + 188 >> 2] = $2 + $1;
       }
       HEAP32[16874] = 0;
       $2 = __invoke_i1___22class_std____2__basic_ifstream_22_(1648, $5 + 264 | 0) | 0;
       $7 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($7 | 0) == 1) {
        break label$7
       }
       HEAP32[16874] = 0;
       $2 = __invoke_i32_i8_i32_i8__i8___i32__i8___22class_std____2__basic_string_22__i32__i32___i8_(1653, $2 | 0, $6 | 0, $1 | 0, $5 + 188 | 0, $5 + 8 | 0, HEAP8[$5 + 255 | 0], $5 + 208 | 0, $5 + 16 | 0, $5 + 12 | 0, 39840) | 0;
       $7 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($7 | 0) == 1) {
        break label$7
       }
       if ($2) {
        break label$3
       }
       HEAP32[16874] = 0;
       __invoke_i1___22class_std____2__basic_ifstream_22_(1650, $5 + 264 | 0) | 0;
       $2 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($2 | 0) != 1) {
        continue
       }
      }
      break;
     };
     break label$2;
    }
    break label$2;
   }
   label$9 : {
    if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($5 + 208 | 0)) {
     break label$9
    }
    $2 = HEAP32[$5 + 12 >> 2];
    if (($2 - ($5 + 16 | 0) | 0) > 159) {
     break label$9
    }
    HEAP32[$5 + 12 >> 2] = $2 + 4;
    HEAP32[$2 >> 2] = HEAP32[$5 + 8 >> 2];
   }
   HEAP32[16874] = 0;
   $1 = legalfunc$__invoke_i64_i8__i8__i32__i32(1662, $1, HEAP32[$5 + 188 >> 2], $3, $6);
   $2 = i64toi32_i32$HIGH_BITS;
   $6 = HEAP32[16874];
   HEAP32[16874] = 0;
   label$10 : {
    if (($6 | 0) == 1) {
     break label$10
    }
    HEAP32[$4 >> 2] = $1;
    HEAP32[$4 + 4 >> 2] = $2;
    HEAP32[16874] = 0;
    __invoke_void___22class_std____2__vector_22__double__double__i32(1655, $5 + 208 | 0, $5 + 16 | 0, HEAP32[$5 + 12 >> 2], $3 | 0);
    $1 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($1 | 0) == 1) {
     break label$10
    }
    HEAP32[16874] = 0;
    $1 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1647, $5 + 264 | 0, $5 + 256 | 0) | 0;
    $2 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($2 | 0) == 1) {
     break label$10
    }
    if ($1) {
     HEAP32[$3 >> 2] = HEAP32[$3 >> 2] | 2
    }
    $1 = HEAP32[$5 + 264 >> 2];
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($0);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($5 + 208 | 0);
    $0 = $5 + 272 | 0;
    if ($0 >>> 0 < global$2 >>> 0) {
     __handle_stack_overflow()
    }
    global$0 = $0;
    return $1;
   }
  }
  $1 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($0);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($5 + 208 | 0);
  __resumeException($1 | 0);
  abort();
 }
 
 function unsigned_20long_20long_20std____2____num_get_unsigned_integral_unsigned_20long_20long__28char_20const__2c_20char_20const__2c_20unsigned_20int__2c_20int_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0;
  $4 = global$0 - 16 | 0;
  $5 = $4;
  if ($4 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $5;
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      if (($0 | 0) != ($1 | 0)) {
       label$6 : {
        label$8 : {
         $6 = HEAPU8[$0 | 0];
         if (($6 | 0) != 45) {
          break label$8
         }
         $0 = $0 + 1 | 0;
         if (($1 | 0) != ($0 | 0)) {
          break label$8
         }
         break label$6;
        }
        $7 = HEAP32[16596];
        HEAP32[16596] = 0;
        $3 = strtoull_l($0, $4 + 12 | 0, $3, std____2____cloc_28_29());
        $5 = i64toi32_i32$HIGH_BITS;
        $0 = HEAP32[16596];
        label$9 : {
         if ($0) {
          if (HEAP32[$4 + 12 >> 2] != ($1 | 0)) {
           break label$9
          }
          if (($0 | 0) == 68) {
           break label$4
          }
          break label$5;
         }
         HEAP32[16596] = $7;
         if (HEAP32[$4 + 12 >> 2] == ($1 | 0)) {
          break label$5
         }
        }
       }
      }
      HEAP32[$2 >> 2] = 4;
      $0 = 0;
      $1 = 0;
      break label$2;
     }
     $0 = std____2__numeric_limits_unsigned_20long_20long___max_28_29();
     $1 = i64toi32_i32$HIGH_BITS;
     if (($5 | 0) == ($1 | 0) & $0 >>> 0 >= $3 >>> 0 | $1 >>> 0 > $5 >>> 0) {
      break label$3
     }
    }
    HEAP32[$2 >> 2] = 4;
    $0 = std____2__numeric_limits_unsigned_20long_20long___max_28_29();
    $1 = i64toi32_i32$HIGH_BITS;
    break label$2;
   }
   $1 = ($6 | 0) == 45;
   $0 = $1 ? 0 - $3 | 0 : $3;
   $1 = $1 ? 0 - ($5 + (0 < $3 >>> 0) | 0) | 0 : $5;
  }
  $2 = $4 + 16 | 0;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  i64toi32_i32$HIGH_BITS = $1;
  return $0 | 0;
 }
 
 function std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20float__29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  return std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____do_get_floating_point_float__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20float__29_20const($1, $2, $3, $4, $5) | 0;
 }
 
 function std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____do_get_floating_point_float__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20float__29_20const($0, $1, $2, $3, $4) {
  var $5 = 0, $6 = 0, $7 = Math_fround(0);
  $5 = global$0 - 272 | 0;
  $6 = $5;
  if ($5 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $6;
  HEAP32[$5 + 256 >> 2] = $1;
  HEAP32[$5 + 264 >> 2] = $0;
  std____2____num_get_char_____stage2_float_prep_28std____2__ios_base__2c_20char__2c_20char__2c_20char__29($5 + 208 | 0, $2, $5 + 224 | 0, $5 + 223 | 0, $5 + 222 | 0);
  $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($5 + 192 | 0);
  $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($1);
  HEAP32[16874] = 0;
  __invoke_void___22class_std____2__vector_13_22__i32(1652, $1 | 0, $0 | 0);
  $0 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    if (($0 | 0) != 1) {
     $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29_20const($1, 0);
     HEAP32[$5 + 188 >> 2] = $0;
     HEAP32[$5 + 12 >> 2] = $5 + 16;
     HEAP32[$5 + 8 >> 2] = 0;
     HEAP8[$5 + 7 | 0] = 1;
     HEAP8[$5 + 6 | 0] = 69;
     while (1) {
      label$7 : {
       HEAP32[16874] = 0;
       $2 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1646, $5 + 264 | 0, $5 + 256 | 0) | 0;
       $6 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($6 | 0) == 1) {
        break label$7
       }
       if (!$2) {
        break label$3
       }
       if (HEAP32[$5 + 188 >> 2] == (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($1) + $0 | 0)) {
        $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($1);
        $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($1);
        HEAP32[16874] = 0;
        __invoke_void___22class_std____2__vector_13_22__i32(1652, $1 | 0, $0 << 1);
        $0 = HEAP32[16874];
        HEAP32[16874] = 0;
        if (($0 | 0) == 1) {
         break label$2
        }
        $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($1);
        HEAP32[16874] = 0;
        __invoke_void___22class_std____2__vector_13_22__i32(1652, $1 | 0, $0 | 0);
        $0 = HEAP32[16874];
        HEAP32[16874] = 0;
        if (($0 | 0) == 1) {
         break label$2
        }
        $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29_20const($1, 0);
        HEAP32[$5 + 188 >> 2] = $2 + $0;
       }
       HEAP32[16874] = 0;
       $2 = __invoke_i1___22class_std____2__basic_ifstream_22_(1648, $5 + 264 | 0) | 0;
       $6 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($6 | 0) == 1) {
        break label$7
       }
       HEAP32[16874] = 0;
       $2 = __invoke_i32_i8_i8__i8__i8__i8___i8_i8___22class_std____2__basic_string_22__i32__i32___i32__i8_(1663, $2 | 0, $5 + 7 | 0, $5 + 6 | 0, $0 | 0, $5 + 188 | 0, HEAP8[$5 + 223 | 0], HEAP8[$5 + 222 | 0], $5 + 208 | 0, $5 + 16 | 0, $5 + 12 | 0, $5 + 8 | 0, $5 + 224 | 0) | 0;
       $6 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($6 | 0) == 1) {
        break label$7
       }
       if ($2) {
        break label$3
       }
       HEAP32[16874] = 0;
       __invoke_i1___22class_std____2__basic_ifstream_22_(1650, $5 + 264 | 0) | 0;
       $2 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($2 | 0) != 1) {
        continue
       }
      }
      break;
     };
     break label$2;
    }
    break label$2;
   }
   label$9 : {
    if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($5 + 208 | 0) | !HEAPU8[$5 + 7 | 0]) {
     break label$9
    }
    $2 = HEAP32[$5 + 12 >> 2];
    if (($2 - ($5 + 16 | 0) | 0) > 159) {
     break label$9
    }
    HEAP32[$5 + 12 >> 2] = $2 + 4;
    HEAP32[$2 >> 2] = HEAP32[$5 + 8 >> 2];
   }
   HEAP32[16874] = 0;
   $7 = Math_fround(__invoke_float_i8__i8__i32_(1664, $0 | 0, HEAP32[$5 + 188 >> 2], $3 | 0));
   $0 = HEAP32[16874];
   HEAP32[16874] = 0;
   label$10 : {
    if (($0 | 0) == 1) {
     break label$10
    }
    HEAPF32[$4 >> 2] = $7;
    HEAP32[16874] = 0;
    __invoke_void___22class_std____2__vector_22__double__double__i32(1655, $5 + 208 | 0, $5 + 16 | 0, HEAP32[$5 + 12 >> 2], $3 | 0);
    $0 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($0 | 0) == 1) {
     break label$10
    }
    HEAP32[16874] = 0;
    $0 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1647, $5 + 264 | 0, $5 + 256 | 0) | 0;
    $2 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($2 | 0) == 1) {
     break label$10
    }
    if ($0) {
     HEAP32[$3 >> 2] = HEAP32[$3 >> 2] | 2
    }
    $0 = HEAP32[$5 + 264 >> 2];
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($1);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($5 + 208 | 0);
    $1 = $5 + 272 | 0;
    if ($1 >>> 0 < global$2 >>> 0) {
     __handle_stack_overflow()
    }
    global$0 = $1;
    return $0;
   }
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($1);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($5 + 208 | 0);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____num_get_char_____stage2_float_prep_28std____2__ios_base__2c_20char__2c_20char__2c_20char__29($0, $1, $2, $3, $4) {
  var $5 = 0, $6 = 0;
  $5 = global$0 - 16 | 0;
  $6 = $5;
  if ($5 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $6;
  std____2__ios_base__getloc_28_29_20const($5 + 8 | 0, $1);
  HEAP32[16874] = 0;
  $1 = __invoke_i1___22class_std____2__basic_ifstream_22_(31, $5 + 8 | 0) | 0;
  $6 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   if (($6 | 0) == 1) {
    break label$2
   }
   HEAP32[16874] = 0;
   __invoke___22class_std____2__shared_ptr_22____22class_std____2__shared_ptr_22___class_maxiOsc____22class_emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc____val_deleter_22__i32(1665, $1 | 0, 39840, 39872, $2 | 0) | 0;
   $1 = HEAP32[16874];
   HEAP32[16874] = 0;
   if (($1 | 0) == 1) {
    break label$2
   }
   HEAP32[16874] = 0;
   $1 = __invoke_i1___22class_std____2__basic_ifstream_22_(1640, $5 + 8 | 0) | 0;
   $2 = HEAP32[16874];
   HEAP32[16874] = 0;
   if (($2 | 0) == 1) {
    break label$2
   }
   HEAP32[16874] = 0;
   $2 = __invoke_i1___22class_std____2__basic_ifstream_22_(1666, $1 | 0) | 0;
   $6 = HEAP32[16874];
   HEAP32[16874] = 0;
   if (($6 | 0) == 1) {
    break label$2
   }
   HEAP8[$3 | 0] = $2;
   HEAP32[16874] = 0;
   $2 = __invoke_i1___22class_std____2__basic_ifstream_22_(1656, $1 | 0) | 0;
   $3 = HEAP32[16874];
   HEAP32[16874] = 0;
   if (($3 | 0) == 1) {
    break label$2
   }
   HEAP8[$4 | 0] = $2;
   HEAP32[16874] = 0;
   __invoke_void___22class_std____2__vector_13_22__i32(1657, $0 | 0, $1 | 0);
   $0 = HEAP32[16874];
   HEAP32[16874] = 0;
   if (($0 | 0) == 1) {
    break label$2
   }
   std____2__locale___locale_28_29($5 + 8 | 0);
   $0 = $5 + 16 | 0;
   if ($0 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $0;
   return;
  }
  $2 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__locale___locale_28_29($5 + 8 | 0);
  __resumeException($2 | 0);
  abort();
 }
 
 function std____2____num_get_char_____stage2_float_loop_28char_2c_20bool__2c_20char__2c_20char__2c_20char___2c_20char_2c_20char_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int___2c_20unsigned_20int__2c_20char__29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  $8 = $8 | 0;
  $9 = $9 | 0;
  $10 = $10 | 0;
  $11 = $11 | 0;
  var $12 = 0, $13 = 0;
  $12 = global$0 - 16 | 0;
  $13 = $12;
  if ($12 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $13;
  HEAP8[$12 + 15 | 0] = $0;
  label$2 : {
   label$3 : {
    if (($0 | 0) == ($5 | 0)) {
     if (!HEAPU8[$1 | 0]) {
      break label$3
     }
     $0 = 0;
     HEAP8[$1 | 0] = 0;
     $1 = HEAP32[$4 >> 2];
     HEAP32[$4 >> 2] = $1 + 1;
     HEAP8[$1 | 0] = 46;
     if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($7)) {
      break label$2
     }
     $1 = HEAP32[$9 >> 2];
     if (($1 - $8 | 0) > 159) {
      break label$2
     }
     $2 = HEAP32[$10 >> 2];
     HEAP32[$9 >> 2] = $1 + 4;
     HEAP32[$1 >> 2] = $2;
     break label$2;
    }
    label$5 : {
     if (($0 | 0) != ($6 | 0)) {
      break label$5
     }
     if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($7)) {
      break label$5
     }
     if (!HEAPU8[$1 | 0]) {
      break label$3
     }
     $0 = 0;
     $1 = HEAP32[$9 >> 2];
     if (($1 - $8 | 0) > 159) {
      break label$2
     }
     $0 = HEAP32[$10 >> 2];
     HEAP32[$9 >> 2] = $1 + 4;
     HEAP32[$1 >> 2] = $0;
     $0 = 0;
     HEAP32[$10 >> 2] = 0;
     break label$2;
    }
    $0 = -1;
    $5 = char_20const__20std____2__find_char_20const__2c_20char__28char_20const__2c_20char_20const__2c_20char_20const__29($11, $11 + 32 | 0, $12 + 15 | 0) - $11 | 0;
    if (($5 | 0) > 31) {
     break label$2
    }
    $6 = HEAPU8[$5 + 39840 | 0];
    $0 = $5 + -22 | 0;
    label$6 : {
     if ($0 >>> 0 <= 3) {
      label$8 : {
       switch ($0 - 2 | 0) {
       case 0:
       case 1:
        $1 = HEAP32[$4 >> 2];
        if (($1 | 0) != ($3 | 0)) {
         $0 = -1;
         if ((HEAPU8[$1 + -1 | 0] & 95) != (HEAPU8[$2 | 0] & 127)) {
          break label$2
         }
        }
        HEAP32[$4 >> 2] = $1 + 1;
        HEAP8[$1 | 0] = $6;
        $0 = 0;
        break label$2;
       default:
        break label$8;
       };
      }
      HEAP8[$2 | 0] = 80;
      break label$6;
     }
     $0 = HEAP8[$2 | 0];
     if (($0 | 0) != ($6 & 95)) {
      break label$6
     }
     HEAP8[$2 | 0] = $0 | 128;
     if (!HEAPU8[$1 | 0]) {
      break label$6
     }
     HEAP8[$1 | 0] = 0;
     if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($7)) {
      break label$6
     }
     $0 = HEAP32[$9 >> 2];
     if (($0 - $8 | 0) > 159) {
      break label$6
     }
     $1 = HEAP32[$10 >> 2];
     HEAP32[$9 >> 2] = $0 + 4;
     HEAP32[$0 >> 2] = $1;
    }
    $0 = HEAP32[$4 >> 2];
    HEAP32[$4 >> 2] = $0 + 1;
    HEAP8[$0 | 0] = $6;
    $0 = 0;
    if (($5 | 0) > 21) {
     break label$2
    }
    HEAP32[$10 >> 2] = HEAP32[$10 >> 2] + 1;
    break label$2;
   }
   $0 = -1;
  }
  $1 = $12 + 16 | 0;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  return $0 | 0;
 }
 
 function float_20std____2____num_get_float_float__28char_20const__2c_20char_20const__2c_20unsigned_20int__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = Math_fround(0), $6 = 0;
  $3 = global$0 - 16 | 0;
  $4 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  label$2 : {
   if (($0 | 0) != ($1 | 0)) {
    $4 = HEAP32[16596];
    HEAP32[16596] = 0;
    $6 = $3 + 12 | 0;
    std____2____cloc_28_29();
    $5 = strtof($0, $6);
    $0 = HEAP32[16596];
    label$5 : {
     if ($0) {
      if (HEAP32[$3 + 12 >> 2] != ($1 | 0)) {
       break label$5
      }
      if (($0 | 0) != 68) {
       break label$2
      }
      HEAP32[$2 >> 2] = 4;
      break label$2;
     }
     HEAP32[16596] = $4;
     if (HEAP32[$3 + 12 >> 2] == ($1 | 0)) {
      break label$2
     }
    }
   }
   HEAP32[$2 >> 2] = 4;
   $5 = Math_fround(0.0);
  }
  $0 = $3 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
  return Math_fround($5);
 }
 
 function std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20double__29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  return std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____do_get_floating_point_double__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20double__29_20const($1, $2, $3, $4, $5) | 0;
 }
 
 function std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____do_get_floating_point_double__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20double__29_20const($0, $1, $2, $3, $4) {
  var $5 = 0, $6 = 0, $7 = 0.0;
  $5 = global$0 - 272 | 0;
  $6 = $5;
  if ($5 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $6;
  HEAP32[$5 + 256 >> 2] = $1;
  HEAP32[$5 + 264 >> 2] = $0;
  std____2____num_get_char_____stage2_float_prep_28std____2__ios_base__2c_20char__2c_20char__2c_20char__29($5 + 208 | 0, $2, $5 + 224 | 0, $5 + 223 | 0, $5 + 222 | 0);
  $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($5 + 192 | 0);
  $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($1);
  HEAP32[16874] = 0;
  __invoke_void___22class_std____2__vector_13_22__i32(1652, $1 | 0, $0 | 0);
  $0 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    if (($0 | 0) != 1) {
     $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29_20const($1, 0);
     HEAP32[$5 + 188 >> 2] = $0;
     HEAP32[$5 + 12 >> 2] = $5 + 16;
     HEAP32[$5 + 8 >> 2] = 0;
     HEAP8[$5 + 7 | 0] = 1;
     HEAP8[$5 + 6 | 0] = 69;
     while (1) {
      label$7 : {
       HEAP32[16874] = 0;
       $2 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1646, $5 + 264 | 0, $5 + 256 | 0) | 0;
       $6 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($6 | 0) == 1) {
        break label$7
       }
       if (!$2) {
        break label$3
       }
       if (HEAP32[$5 + 188 >> 2] == (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($1) + $0 | 0)) {
        $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($1);
        $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($1);
        HEAP32[16874] = 0;
        __invoke_void___22class_std____2__vector_13_22__i32(1652, $1 | 0, $0 << 1);
        $0 = HEAP32[16874];
        HEAP32[16874] = 0;
        if (($0 | 0) == 1) {
         break label$2
        }
        $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($1);
        HEAP32[16874] = 0;
        __invoke_void___22class_std____2__vector_13_22__i32(1652, $1 | 0, $0 | 0);
        $0 = HEAP32[16874];
        HEAP32[16874] = 0;
        if (($0 | 0) == 1) {
         break label$2
        }
        $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29_20const($1, 0);
        HEAP32[$5 + 188 >> 2] = $2 + $0;
       }
       HEAP32[16874] = 0;
       $2 = __invoke_i1___22class_std____2__basic_ifstream_22_(1648, $5 + 264 | 0) | 0;
       $6 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($6 | 0) == 1) {
        break label$7
       }
       HEAP32[16874] = 0;
       $2 = __invoke_i32_i8_i8__i8__i8__i8___i8_i8___22class_std____2__basic_string_22__i32__i32___i32__i8_(1663, $2 | 0, $5 + 7 | 0, $5 + 6 | 0, $0 | 0, $5 + 188 | 0, HEAP8[$5 + 223 | 0], HEAP8[$5 + 222 | 0], $5 + 208 | 0, $5 + 16 | 0, $5 + 12 | 0, $5 + 8 | 0, $5 + 224 | 0) | 0;
       $6 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($6 | 0) == 1) {
        break label$7
       }
       if ($2) {
        break label$3
       }
       HEAP32[16874] = 0;
       __invoke_i1___22class_std____2__basic_ifstream_22_(1650, $5 + 264 | 0) | 0;
       $2 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($2 | 0) != 1) {
        continue
       }
      }
      break;
     };
     break label$2;
    }
    break label$2;
   }
   label$9 : {
    if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($5 + 208 | 0) | !HEAPU8[$5 + 7 | 0]) {
     break label$9
    }
    $2 = HEAP32[$5 + 12 >> 2];
    if (($2 - ($5 + 16 | 0) | 0) > 159) {
     break label$9
    }
    HEAP32[$5 + 12 >> 2] = $2 + 4;
    HEAP32[$2 >> 2] = HEAP32[$5 + 8 >> 2];
   }
   HEAP32[16874] = 0;
   $7 = +__invoke_double_i8__i8__i32_(1667, $0 | 0, HEAP32[$5 + 188 >> 2], $3 | 0);
   $0 = HEAP32[16874];
   HEAP32[16874] = 0;
   label$10 : {
    if (($0 | 0) == 1) {
     break label$10
    }
    HEAPF64[$4 >> 3] = $7;
    HEAP32[16874] = 0;
    __invoke_void___22class_std____2__vector_22__double__double__i32(1655, $5 + 208 | 0, $5 + 16 | 0, HEAP32[$5 + 12 >> 2], $3 | 0);
    $0 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($0 | 0) == 1) {
     break label$10
    }
    HEAP32[16874] = 0;
    $0 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1647, $5 + 264 | 0, $5 + 256 | 0) | 0;
    $2 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($2 | 0) == 1) {
     break label$10
    }
    if ($0) {
     HEAP32[$3 >> 2] = HEAP32[$3 >> 2] | 2
    }
    $0 = HEAP32[$5 + 264 >> 2];
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($1);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($5 + 208 | 0);
    $1 = $5 + 272 | 0;
    if ($1 >>> 0 < global$2 >>> 0) {
     __handle_stack_overflow()
    }
    global$0 = $1;
    return $0;
   }
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($1);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($5 + 208 | 0);
  __resumeException($0 | 0);
  abort();
 }
 
 function double_20std____2____num_get_float_double__28char_20const__2c_20char_20const__2c_20unsigned_20int__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0.0, $6 = 0;
  $3 = global$0 - 16 | 0;
  $4 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  label$2 : {
   if (($0 | 0) != ($1 | 0)) {
    $4 = HEAP32[16596];
    HEAP32[16596] = 0;
    $6 = $3 + 12 | 0;
    std____2____cloc_28_29();
    $5 = strtod($0, $6);
    $0 = HEAP32[16596];
    label$5 : {
     if ($0) {
      if (HEAP32[$3 + 12 >> 2] != ($1 | 0)) {
       break label$5
      }
      if (($0 | 0) != 68) {
       break label$2
      }
      HEAP32[$2 >> 2] = 4;
      break label$2;
     }
     HEAP32[16596] = $4;
     if (HEAP32[$3 + 12 >> 2] == ($1 | 0)) {
      break label$2
     }
    }
   }
   HEAP32[$2 >> 2] = 4;
   $5 = 0.0;
  }
  $0 = $3 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
  return +$5;
 }
 
 function std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long_20double__29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  return std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____do_get_floating_point_long_20double__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long_20double__29_20const($1, $2, $3, $4, $5) | 0;
 }
 
 function std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____do_get_floating_point_long_20double__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long_20double__29_20const($0, $1, $2, $3, $4) {
  var $5 = 0, $6 = 0;
  $5 = global$0 - 288 | 0;
  $6 = $5;
  if ($5 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $6;
  HEAP32[$5 + 272 >> 2] = $1;
  HEAP32[$5 + 280 >> 2] = $0;
  std____2____num_get_char_____stage2_float_prep_28std____2__ios_base__2c_20char__2c_20char__2c_20char__29($5 + 224 | 0, $2, $5 + 240 | 0, $5 + 239 | 0, $5 + 238 | 0);
  $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($5 + 208 | 0);
  $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($1);
  HEAP32[16874] = 0;
  __invoke_void___22class_std____2__vector_13_22__i32(1652, $1 | 0, $0 | 0);
  $0 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    if (($0 | 0) != 1) {
     $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29_20const($1, 0);
     HEAP32[$5 + 204 >> 2] = $0;
     HEAP32[$5 + 28 >> 2] = $5 + 32;
     HEAP32[$5 + 24 >> 2] = 0;
     HEAP8[$5 + 23 | 0] = 1;
     HEAP8[$5 + 22 | 0] = 69;
     while (1) {
      label$7 : {
       HEAP32[16874] = 0;
       $2 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1646, $5 + 280 | 0, $5 + 272 | 0) | 0;
       $6 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($6 | 0) == 1) {
        break label$7
       }
       if (!$2) {
        break label$3
       }
       if (HEAP32[$5 + 204 >> 2] == (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($1) + $0 | 0)) {
        $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($1);
        $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($1);
        HEAP32[16874] = 0;
        __invoke_void___22class_std____2__vector_13_22__i32(1652, $1 | 0, $0 << 1);
        $0 = HEAP32[16874];
        HEAP32[16874] = 0;
        if (($0 | 0) == 1) {
         break label$2
        }
        $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($1);
        HEAP32[16874] = 0;
        __invoke_void___22class_std____2__vector_13_22__i32(1652, $1 | 0, $0 | 0);
        $0 = HEAP32[16874];
        HEAP32[16874] = 0;
        if (($0 | 0) == 1) {
         break label$2
        }
        $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29_20const($1, 0);
        HEAP32[$5 + 204 >> 2] = $2 + $0;
       }
       HEAP32[16874] = 0;
       $2 = __invoke_i1___22class_std____2__basic_ifstream_22_(1648, $5 + 280 | 0) | 0;
       $6 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($6 | 0) == 1) {
        break label$7
       }
       HEAP32[16874] = 0;
       $2 = __invoke_i32_i8_i8__i8__i8__i8___i8_i8___22class_std____2__basic_string_22__i32__i32___i32__i8_(1663, $2 | 0, $5 + 23 | 0, $5 + 22 | 0, $0 | 0, $5 + 204 | 0, HEAP8[$5 + 239 | 0], HEAP8[$5 + 238 | 0], $5 + 224 | 0, $5 + 32 | 0, $5 + 28 | 0, $5 + 24 | 0, $5 + 240 | 0) | 0;
       $6 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($6 | 0) == 1) {
        break label$7
       }
       if ($2) {
        break label$3
       }
       HEAP32[16874] = 0;
       __invoke_i1___22class_std____2__basic_ifstream_22_(1650, $5 + 280 | 0) | 0;
       $2 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($2 | 0) != 1) {
        continue
       }
      }
      break;
     };
     break label$2;
    }
    break label$2;
   }
   label$9 : {
    if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($5 + 224 | 0) | !HEAPU8[$5 + 23 | 0]) {
     break label$9
    }
    $2 = HEAP32[$5 + 28 >> 2];
    if (($2 - ($5 + 32 | 0) | 0) > 159) {
     break label$9
    }
    HEAP32[$5 + 28 >> 2] = $2 + 4;
    HEAP32[$2 >> 2] = HEAP32[$5 + 24 >> 2];
   }
   HEAP32[16874] = 0;
   __invoke_void___22class_std____2__vector_22__double__double__i32(1668, $5 | 0, $0 | 0, HEAP32[$5 + 204 >> 2], $3 | 0);
   $0 = HEAP32[16874];
   HEAP32[16874] = 0;
   label$10 : {
    if (($0 | 0) == 1) {
     break label$10
    }
    $0 = HEAP32[$5 + 8 >> 2];
    $2 = HEAP32[$5 + 12 >> 2];
    $6 = HEAP32[$5 + 4 >> 2];
    HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
    HEAP32[$4 + 4 >> 2] = $6;
    HEAP32[$4 + 8 >> 2] = $0;
    HEAP32[$4 + 12 >> 2] = $2;
    HEAP32[16874] = 0;
    __invoke_void___22class_std____2__vector_22__double__double__i32(1655, $5 + 224 | 0, $5 + 32 | 0, HEAP32[$5 + 28 >> 2], $3 | 0);
    $0 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($0 | 0) == 1) {
     break label$10
    }
    HEAP32[16874] = 0;
    $0 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1647, $5 + 280 | 0, $5 + 272 | 0) | 0;
    $2 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($2 | 0) == 1) {
     break label$10
    }
    if ($0) {
     HEAP32[$3 >> 2] = HEAP32[$3 >> 2] | 2
    }
    $0 = HEAP32[$5 + 280 >> 2];
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($1);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($5 + 224 | 0);
    $1 = $5 + 288 | 0;
    if ($1 >>> 0 < global$2 >>> 0) {
     __handle_stack_overflow()
    }
    global$0 = $1;
    return $0;
   }
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($1);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($5 + 224 | 0);
  __resumeException($0 | 0);
  abort();
 }
 
 function long_20double_20std____2____num_get_float_long_20double__28char_20const__2c_20char_20const__2c_20unsigned_20int__29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
  $4 = global$0 - 32 | 0;
  $5 = $4;
  if ($4 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $5;
  label$2 : {
   if (($1 | 0) != ($2 | 0)) {
    $9 = HEAP32[16596];
    HEAP32[16596] = 0;
    long_20double_20std____2____do_strtod_long_20double__28char_20const__2c_20char___29($4, $1, $4 + 28 | 0);
    $1 = HEAP32[$4 + 8 >> 2];
    $5 = HEAP32[$4 + 12 >> 2];
    $6 = HEAP32[$4 >> 2];
    $7 = HEAP32[$4 + 4 >> 2];
    $8 = HEAP32[16596];
    label$5 : {
     if ($8) {
      if (HEAP32[$4 + 28 >> 2] != ($2 | 0)) {
       break label$5
      }
      if (($8 | 0) != 68) {
       break label$2
      }
      HEAP32[$3 >> 2] = 4;
      break label$2;
     }
     HEAP32[16596] = $9;
     if (HEAP32[$4 + 28 >> 2] == ($2 | 0)) {
      break label$2
     }
    }
   }
   HEAP32[$3 >> 2] = 4;
   $6 = 0;
   $7 = 0;
   $1 = 0;
   $5 = 0;
  }
  HEAP32[$0 >> 2] = $6;
  HEAP32[$0 + 4 >> 2] = $7;
  HEAP32[$0 + 8 >> 2] = $1;
  HEAP32[$0 + 12 >> 2] = $5;
  $0 = $4 + 32 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20void___29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $7 = 0;
  $0 = global$0 - 272 | 0;
  $7 = $0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $7;
  HEAP32[$0 + 256 >> 2] = $2;
  HEAP32[$0 + 264 >> 2] = $1;
  $7 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($0 + 208 | 0);
  HEAP32[16874] = 0;
  std____2__ios_base__getloc_28_29_20const($0 + 16 | 0, $3);
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    label$4 : {
     label$7 : {
      if (($1 | 0) != 1) {
       HEAP32[16874] = 0;
       $1 = __invoke_i1___22class_std____2__basic_ifstream_22_(31, $0 + 16 | 0) | 0;
       $2 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($2 | 0) == 1) {
        break label$7
       }
       HEAP32[16874] = 0;
       __invoke___22class_std____2__shared_ptr_22____22class_std____2__shared_ptr_22___class_maxiOsc____22class_emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc____val_deleter_22__i32(1665, $1 | 0, 39840, 39866, $0 + 224 | 0) | 0;
       $1 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($1 | 0) == 1) {
        break label$7
       }
       std____2__locale___locale_28_29($0 + 16 | 0);
       $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($0 + 192 | 0);
       $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($2);
       HEAP32[16874] = 0;
       __invoke_void___22class_std____2__vector_13_22__i32(1652, $2 | 0, $1 | 0);
       $1 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($1 | 0) == 1) {
        break label$3
       }
       $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29_20const($2, 0);
       HEAP32[$0 + 188 >> 2] = $1;
       HEAP32[$0 + 12 >> 2] = $0 + 16;
       HEAP32[$0 + 8 >> 2] = 0;
       while (1) {
        label$10 : {
         HEAP32[16874] = 0;
         $3 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1646, $0 + 264 | 0, $0 + 256 | 0) | 0;
         $6 = HEAP32[16874];
         HEAP32[16874] = 0;
         if (($6 | 0) == 1) {
          break label$10
         }
         if (!$3) {
          break label$4
         }
         if (HEAP32[$0 + 188 >> 2] == (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($2) + $1 | 0)) {
          $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($2);
          $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($2);
          HEAP32[16874] = 0;
          __invoke_void___22class_std____2__vector_13_22__i32(1652, $2 | 0, $1 << 1);
          $1 = HEAP32[16874];
          HEAP32[16874] = 0;
          if (($1 | 0) == 1) {
           break label$3
          }
          $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($2);
          HEAP32[16874] = 0;
          __invoke_void___22class_std____2__vector_13_22__i32(1652, $2 | 0, $1 | 0);
          $1 = HEAP32[16874];
          HEAP32[16874] = 0;
          if (($1 | 0) == 1) {
           break label$3
          }
          $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29_20const($2, 0);
          HEAP32[$0 + 188 >> 2] = $3 + $1;
         }
         HEAP32[16874] = 0;
         $3 = __invoke_i1___22class_std____2__basic_ifstream_22_(1648, $0 + 264 | 0) | 0;
         $6 = HEAP32[16874];
         HEAP32[16874] = 0;
         if (($6 | 0) == 1) {
          break label$10
         }
         HEAP32[16874] = 0;
         $3 = __invoke_i32_i8_i32_i8__i8___i32__i8___22class_std____2__basic_string_22__i32__i32___i8_(1653, $3 | 0, 16, $1 | 0, $0 + 188 | 0, $0 + 8 | 0, 0, $7 | 0, $0 + 16 | 0, $0 + 12 | 0, $0 + 224 | 0) | 0;
         $6 = HEAP32[16874];
         HEAP32[16874] = 0;
         if (($6 | 0) == 1) {
          break label$10
         }
         if ($3) {
          break label$4
         }
         HEAP32[16874] = 0;
         __invoke_i1___22class_std____2__basic_ifstream_22_(1650, $0 + 264 | 0) | 0;
         $3 = HEAP32[16874];
         HEAP32[16874] = 0;
         if (($3 | 0) != 1) {
          continue
         }
        }
        break;
       };
       break label$3;
      }
      $1 = __cxa_find_matching_catch_2() | 0;
      getTempRet0() | 0;
      break label$2;
     }
     $1 = __cxa_find_matching_catch_2() | 0;
     getTempRet0() | 0;
     std____2__locale___locale_28_29($0 + 16 | 0);
     break label$2;
    }
    HEAP32[16874] = 0;
    __invoke_void___22class_std____2__vector_13_22__i32(1652, $2 | 0, HEAP32[$0 + 188 >> 2] - $1 | 0);
    $1 = HEAP32[16874];
    HEAP32[16874] = 0;
    label$12 : {
     if (($1 | 0) == 1) {
      break label$12
     }
     $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_pointer_28_29_20const($2);
     HEAP32[16874] = 0;
     $3 = __invoke__struct___locale_struct_(1670) | 0;
     $6 = HEAP32[16874];
     HEAP32[16874] = 0;
     if (($6 | 0) == 1) {
      break label$12
     }
     HEAP32[$0 >> 2] = $5;
     HEAP32[16874] = 0;
     $1 = __invoke___22class_std____2__shared_ptr_22____22class_std____2__shared_ptr_22___class_maxiOsc____22class_emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc____val_deleter_22__i32(1671, $1 | 0, $3 | 0, 39873, $0 | 0) | 0;
     $3 = HEAP32[16874];
     HEAP32[16874] = 0;
     if (($3 | 0) == 1) {
      break label$12
     }
     if (($1 | 0) != 1) {
      HEAP32[$4 >> 2] = 4
     }
     HEAP32[16874] = 0;
     $1 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1647, $0 + 264 | 0, $0 + 256 | 0) | 0;
     $3 = HEAP32[16874];
     HEAP32[16874] = 0;
     if (($3 | 0) == 1) {
      break label$12
     }
     if ($1) {
      HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2
     }
     $1 = HEAP32[$0 + 264 >> 2];
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($2);
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($7);
     $0 = $0 + 272 | 0;
     if ($0 >>> 0 < global$2 >>> 0) {
      __handle_stack_overflow()
     }
     global$0 = $0;
     return $1 | 0;
    }
   }
   $1 = __cxa_find_matching_catch_2() | 0;
   getTempRet0() | 0;
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($2);
  }
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($7);
  __resumeException($1 | 0);
  abort();
 }
 
 function std____2__ctype_char___widen_28char_20const__2c_20char_20const__2c_20char__29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 32 >> 2]]($0, $1, $2, $3) | 0;
 }
 
 function std____2____cloc_28_29() {
  var $0 = 0, $1 = 0;
  label$1 : {
   label$2 : {
    if (HEAP8[69776] & 1) {
     break label$2
    }
    if (!__cxa_guard_acquire(69776)) {
     break label$2
    }
    HEAP32[16874] = 0;
    $0 = __invoke___22class_std____2__basic_istream_22____22class_std____2__basic_istream_22__i8__i32(1672, 2147483647, 40133, 0) | 0;
    $1 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($1 | 0) == 1) {
     break label$1
    }
    HEAP32[17443] = $0;
    __cxa_guard_release(69776);
   }
   return HEAP32[17443];
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  __cxa_guard_abort(69776);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____libcpp_sscanf_l_28char_20const__2c_20__locale_struct__2c_20char_20const__2c_20____29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0;
  $4 = global$0 - 16 | 0;
  $5 = $4;
  if ($4 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $5;
  HEAP32[$4 + 12 >> 2] = $1;
  HEAP32[$4 + 8 >> 2] = $3;
  $1 = std____2____libcpp_locale_guard____libcpp_locale_guard_28__locale_struct___29($4, $4 + 12 | 0);
  $0 = vsscanf($0, $2, HEAP32[$4 + 8 >> 2]);
  std____2____libcpp_locale_guard_____libcpp_locale_guard_28_29($1);
  $1 = $4 + 16 | 0;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  return $0 | 0;
 }
 
 function char_20const__20std____2__find_char_20const__2c_20char__28char_20const__2c_20char_20const__2c_20char_20const__29($0, $1, $2) {
  $2 = HEAPU8[$2 | 0];
  while (1) {
   label$2 : {
    if (($0 | 0) != ($1 | 0)) {
     if (($2 | 0) != HEAPU8[$0 | 0]) {
      break label$2
     }
    } else {
     $0 = $1
    }
    return $0;
   }
   $0 = $0 + 1 | 0;
   continue;
  };
 }
 
 function std____2____libcpp_locale_guard____libcpp_locale_guard_28__locale_struct___29($0, $1) {
  HEAP32[$0 >> 2] = __uselocale(HEAP32[$1 >> 2]);
  return $0;
 }
 
 function std____2____libcpp_locale_guard_____libcpp_locale_guard_28_29($0) {
  label$1 : {
   $0 = HEAP32[$0 >> 2];
   if ($0) {
    HEAP32[16874] = 0;
    __uselocale($0);
    $0 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($0 | 0) == 1) {
     break label$1
    }
   }
   return;
  }
  $0 = __cxa_find_matching_catch_3(0) | 0;
  getTempRet0() | 0;
  __clang_call_terminate($0);
  abort();
 }
 
 function std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20bool__29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $7 = 0;
  $6 = global$0 - 32 | 0;
  $7 = $6;
  if ($6 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $7;
  HEAP32[$6 + 24 >> 2] = $1;
  label$2 : {
   label$3 : {
    if (!(HEAP32[$3 + 4 >> 2] & 1)) {
     HEAP32[$6 >> 2] = -1;
     $1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $1, $2, $3, $4, $6) | 0;
     HEAP32[$6 + 24 >> 2] = $1;
     $0 = HEAP32[$6 >> 2];
     if ($0 >>> 0 <= 1) {
      if ($0 - 1) {
       break label$3
      }
      HEAP8[$5 | 0] = 1;
      break label$2;
     }
     HEAP8[$5 | 0] = 1;
     HEAP32[$4 >> 2] = 4;
     break label$2;
    }
    std____2__ios_base__getloc_28_29_20const($6, $3);
    HEAP32[16874] = 0;
    $7 = __invoke_i1___22class_std____2__basic_ifstream_22_(1674, $6 | 0) | 0;
    $0 = HEAP32[16874];
    HEAP32[16874] = 0;
    label$6 : {
     label$7 : {
      label$8 : {
       label$9 : {
        if (($0 | 0) != 1) {
         std____2__locale___locale_28_29($6);
         std____2__ios_base__getloc_28_29_20const($6, $3);
         HEAP32[16874] = 0;
         $1 = __invoke_i1___22class_std____2__basic_ifstream_22_(1675, $6 | 0) | 0;
         $0 = HEAP32[16874];
         HEAP32[16874] = 0;
         if (($0 | 0) == 1) {
          break label$9
         }
         std____2__locale___locale_28_29($6);
         $0 = 0;
         HEAP32[16874] = 0;
         __invoke_void___22class_std____2__vector_13_22__i32(1676, $6 | 0, $1 | 0);
         $3 = HEAP32[16874];
         HEAP32[16874] = 0;
         if (($3 | 0) == 1) {
          break label$8
         }
         HEAP32[16874] = 0;
         __invoke_void___22class_std____2__vector_13_22__i32(1677, $6 | 12, $1 | 0);
         $1 = HEAP32[16874];
         HEAP32[16874] = 0;
         $0 = 1;
         if (($1 | 0) == 1) {
          break label$8
         }
         HEAP32[16874] = 0;
         $3 = $6 + 24 | 0;
         $0 = __invoke___22class_std____2__basic_string_22____22class_std____2__istreambuf_iterator_22____22class_std____2__basic_streambuf_22____22class_std____2__basic_string_22____22class_std____2__basic_string_22____22class_std____2__ctype_22__i32__i1(1678, $6 + 24 | 0, $2 | 0, $6 | 0, $3 | 0, $7 | 0, $4 | 0, 1) | 0;
         $1 = HEAP32[16874];
         HEAP32[16874] = 0;
         if (($1 | 0) == 1) {
          break label$7
         }
         HEAP8[$5 | 0] = ($0 | 0) == ($6 | 0);
         $1 = HEAP32[$6 + 24 >> 2];
         while (1) {
          $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($3 + -12 | 0);
          if (($6 | 0) != ($3 | 0)) {
           continue
          }
          break;
         };
         break label$2;
        }
        $1 = __cxa_find_matching_catch_2() | 0;
        getTempRet0() | 0;
        std____2__locale___locale_28_29($6);
        break label$6;
       }
       $1 = __cxa_find_matching_catch_2() | 0;
       getTempRet0() | 0;
       std____2__locale___locale_28_29($6);
       break label$6;
      }
      $1 = __cxa_find_matching_catch_2() | 0;
      getTempRet0() | 0;
      if (!$0) {
       break label$6
      }
      $3 = Math_imul($0, 12) + $6 | 0;
      while (1) {
       $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($3 + -12 | 0);
       if (($6 | 0) != ($3 | 0)) {
        continue
       }
       break;
      };
      break label$6;
     }
     $1 = __cxa_find_matching_catch_2() | 0;
     getTempRet0() | 0;
     while (1) {
      $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($3 + -12 | 0);
      if (($6 | 0) != ($3 | 0)) {
       continue
      }
      break;
     };
    }
    __resumeException($1 | 0);
    abort();
   }
   HEAP8[$5 | 0] = 0;
  }
  $0 = $6 + 32 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
  return $1 | 0;
 }
 
 function std____2__numpunct_wchar_t__20const__20std____2__use_facet_std____2__numpunct_wchar_t__20__28std____2__locale_20const__29($0) {
  $0 = $0 | 0;
  return std____2__locale__use_facet_28std____2__locale__id__29_20const($0, 69864) | 0;
 }
 
 function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__20std____2____scan_keyword_std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__2c_20std____2__ctype_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__2c_20std____2__ctype_wchar_t__20const__2c_20unsigned_20int__2c_20bool_29($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  var $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
  $8 = global$0 - 128 | 0;
  $11 = $8;
  if ($8 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $11;
  HEAP32[$8 + 120 >> 2] = $1;
  $10 = std____2__iterator_traits_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const____difference_type_20std____2__distance_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const___28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29($2, $3);
  HEAP32[$8 + 4 >> 2] = 1644;
  $13 = std____2__unique_ptr__IO_FILE_2c_20int_20_28__29_28_IO_FILE__29___unique_ptr_true_2c_20void__28_IO_FILE__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_int_20_28__29_28_IO_FILE__29__2c_20true_____good_rval_ref_type_29($8 + 8 | 0, 0, $8 + 4 | 0);
  $9 = $8 + 16 | 0;
  label$2 : {
   label$3 : {
    if ($10 >>> 0 >= 101) {
     $9 = dlmalloc($10);
     if (!$9) {
      HEAP32[16874] = 0;
      __invoke_void(1645);
      $0 = HEAP32[16874];
      HEAP32[16874] = 0;
      if (($0 | 0) != 1) {
       break label$2
      }
      break label$3;
     }
     std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___reset_28unsigned_20char__29($13, $9);
    }
    $7 = $9;
    $1 = $2;
    while (1) {
     if (($1 | 0) == ($3 | 0)) {
      label$8 : {
       label$9 : {
        label$10 : while (1) {
         label$11 : {
          HEAP32[16874] = 0;
          $11 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1679, $0 | 0, $8 + 120 | 0) | 0;
          $1 = HEAP32[16874];
          HEAP32[16874] = 0;
          if (($1 | 0) == 1) {
           break label$11
          }
          if (!($11 & ($10 | 0) != 0)) {
           HEAP32[16874] = 0;
           $1 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1680, $0 | 0, $8 + 120 | 0) | 0;
           $0 = HEAP32[16874];
           HEAP32[16874] = 0;
           if (($0 | 0) == 1) {
            break label$8
           }
           if (!$1) {
            break label$9
           }
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 2;
           break label$9;
          }
          HEAP32[16874] = 0;
          $14 = __invoke_i1___22class_std____2__basic_ifstream_22_(1681, $0 | 0) | 0;
          $1 = HEAP32[16874];
          HEAP32[16874] = 0;
          label$13 : {
           if (($1 | 0) != 1) {
            if ($6) {
             break label$13
            }
            HEAP32[16874] = 0;
            $14 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1682, $4 | 0, $14 | 0) | 0;
            $1 = HEAP32[16874];
            HEAP32[16874] = 0;
            if (($1 | 0) != 1) {
             break label$13
            }
           }
           break label$3;
          }
          $11 = $16 + 1 | 0;
          $17 = 0;
          $7 = $9;
          $1 = $2;
          while (1) {
           if (($1 | 0) == ($3 | 0)) {
            $16 = $11;
            if (!$17) {
             continue label$10
            }
            HEAP32[16874] = 0;
            __invoke_i1___22class_std____2__basic_ifstream_22_(1683, $0 | 0) | 0;
            $1 = HEAP32[16874];
            HEAP32[16874] = 0;
            if (($1 | 0) != 1) {
             $7 = $9;
             $1 = $2;
             if ($10 + $12 >>> 0 < 2) {
              continue label$10
             }
             while (1) {
              if (($1 | 0) == ($3 | 0)) {
               continue label$10
              }
              label$20 : {
               if (HEAPU8[$7 | 0] != 2) {
                break label$20
               }
               if ((std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($1) | 0) == ($11 | 0)) {
                break label$20
               }
               HEAP8[$7 | 0] = 0;
               $12 = $12 + -1 | 0;
              }
              $7 = $7 + 1 | 0;
              $1 = $1 + 12 | 0;
              continue;
             };
            }
            break label$3;
           }
           label$21 : {
            if (HEAPU8[$7 | 0] != 1) {
             break label$21
            }
            $15 = HEAP32[std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator_5b_5d_28unsigned_20long_29_20const($1, $16) >> 2];
            label$22 : {
             if ($6) {
              break label$22
             }
             HEAP32[16874] = 0;
             $15 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1682, $4 | 0, $15 | 0) | 0;
             $18 = HEAP32[16874];
             HEAP32[16874] = 0;
             if (($18 | 0) != 1) {
              break label$22
             }
             break label$3;
            }
            label$23 : {
             if (($14 | 0) == ($15 | 0)) {
              $17 = 1;
              if ((std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($1) | 0) != ($11 | 0)) {
               break label$21
              }
              HEAP8[$7 | 0] = 2;
              $12 = $12 + 1 | 0;
              break label$23;
             }
             HEAP8[$7 | 0] = 0;
            }
            $10 = $10 + -1 | 0;
           }
           $7 = $7 + 1 | 0;
           $1 = $1 + 12 | 0;
           continue;
          };
         }
         break;
        };
        break label$3;
       }
       label$25 : {
        label$26 : {
         while (1) {
          if (($2 | 0) == ($3 | 0)) {
           break label$26
          }
          if (HEAPU8[$9 | 0] != 2) {
           $9 = $9 + 1 | 0;
           $2 = $2 + 12 | 0;
           continue;
          }
          break;
         };
         $3 = $2;
         break label$25;
        }
        HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4;
       }
       std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29____unique_ptr_28_29($13);
       $0 = $8 + 128 | 0;
       if ($0 >>> 0 < global$2 >>> 0) {
        __handle_stack_overflow()
       }
       global$0 = $0;
       return $3 | 0;
      }
      break label$3;
     }
     label$30 : {
      if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___empty_28_29_20const($1)) {
       HEAP8[$7 | 0] = 1;
       break label$30;
      }
      HEAP8[$7 | 0] = 2;
      $12 = $12 + 1 | 0;
      $10 = $10 + -1 | 0;
     }
     $7 = $7 + 1 | 0;
     $1 = $1 + 12 | 0;
     continue;
    };
   }
   $1 = __cxa_find_matching_catch_2() | 0;
   getTempRet0() | 0;
   std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29____unique_ptr_28_29($13);
   __resumeException($1 | 0);
  }
  abort();
 }
 
 function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator_5b_5d_28unsigned_20long_29_20const($0, $1) {
  return std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_pointer_28_29_20const($0) + ($1 << 2) | 0;
 }
 
 function std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long__29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  return std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____do_get_signed_long__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long__29_20const($1, $2, $3, $4, $5) | 0;
 }
 
 function std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____do_get_signed_long__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long__29_20const($0, $1, $2, $3, $4) {
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  $5 = global$0 - 352 | 0;
  $7 = $5;
  if ($5 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $7;
  HEAP32[$5 + 336 >> 2] = $1;
  HEAP32[$5 + 344 >> 2] = $0;
  $7 = std____2____num_get_base____get_base_28std____2__ios_base__29($2);
  $8 = std____2____num_get_wchar_t_____do_widen_28std____2__ios_base__2c_20wchar_t__29_20const($2, $5 + 224 | 0);
  std____2____num_get_wchar_t_____stage2_int_prep_28std____2__ios_base__2c_20wchar_t__29($5 + 208 | 0, $2, $5 + 332 | 0);
  $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($5 + 192 | 0);
  $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($0);
  HEAP32[16874] = 0;
  __invoke_void___22class_std____2__vector_13_22__i32(1652, $0 | 0, $1 | 0);
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    if (($1 | 0) != 1) {
     $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29_20const($0, 0);
     HEAP32[$5 + 188 >> 2] = $1;
     HEAP32[$5 + 12 >> 2] = $5 + 16;
     HEAP32[$5 + 8 >> 2] = 0;
     while (1) {
      label$7 : {
       HEAP32[16874] = 0;
       $2 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1679, $5 + 344 | 0, $5 + 336 | 0) | 0;
       $6 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($6 | 0) == 1) {
        break label$7
       }
       if (!$2) {
        break label$3
       }
       if (HEAP32[$5 + 188 >> 2] == (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($0) + $1 | 0)) {
        $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($0);
        $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($0);
        HEAP32[16874] = 0;
        __invoke_void___22class_std____2__vector_13_22__i32(1652, $0 | 0, $1 << 1);
        $1 = HEAP32[16874];
        HEAP32[16874] = 0;
        if (($1 | 0) == 1) {
         break label$2
        }
        $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($0);
        HEAP32[16874] = 0;
        __invoke_void___22class_std____2__vector_13_22__i32(1652, $0 | 0, $1 | 0);
        $1 = HEAP32[16874];
        HEAP32[16874] = 0;
        if (($1 | 0) == 1) {
         break label$2
        }
        $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29_20const($0, 0);
        HEAP32[$5 + 188 >> 2] = $2 + $1;
       }
       HEAP32[16874] = 0;
       $2 = __invoke_i1___22class_std____2__basic_ifstream_22_(1681, $5 + 344 | 0) | 0;
       $6 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($6 | 0) == 1) {
        break label$7
       }
       HEAP32[16874] = 0;
       $2 = __invoke_i32_i8_i32_i8__i8___i32__i8___22class_std____2__basic_string_22__i32__i32___i8_(1684, $2 | 0, $7 | 0, $1 | 0, $5 + 188 | 0, $5 + 8 | 0, HEAP32[$5 + 332 >> 2], $5 + 208 | 0, $5 + 16 | 0, $5 + 12 | 0, $8 | 0) | 0;
       $6 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($6 | 0) == 1) {
        break label$7
       }
       if ($2) {
        break label$3
       }
       HEAP32[16874] = 0;
       __invoke_i1___22class_std____2__basic_ifstream_22_(1683, $5 + 344 | 0) | 0;
       $2 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($2 | 0) != 1) {
        continue
       }
      }
      break;
     };
     break label$2;
    }
    break label$2;
   }
   label$9 : {
    if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($5 + 208 | 0)) {
     break label$9
    }
    $2 = HEAP32[$5 + 12 >> 2];
    if (($2 - ($5 + 16 | 0) | 0) > 159) {
     break label$9
    }
    HEAP32[$5 + 12 >> 2] = $2 + 4;
    HEAP32[$2 >> 2] = HEAP32[$5 + 8 >> 2];
   }
   HEAP32[16874] = 0;
   $1 = __invoke___22class_std____2__shared_ptr_22____22class_std____2__shared_ptr_22___class_maxiOsc____22class_emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc____val_deleter_22__i32(1654, $1 | 0, HEAP32[$5 + 188 >> 2], $3 | 0, $7 | 0) | 0;
   $2 = HEAP32[16874];
   HEAP32[16874] = 0;
   label$10 : {
    if (($2 | 0) == 1) {
     break label$10
    }
    HEAP32[$4 >> 2] = $1;
    HEAP32[16874] = 0;
    __invoke_void___22class_std____2__vector_22__double__double__i32(1655, $5 + 208 | 0, $5 + 16 | 0, HEAP32[$5 + 12 >> 2], $3 | 0);
    $1 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($1 | 0) == 1) {
     break label$10
    }
    HEAP32[16874] = 0;
    $1 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1680, $5 + 344 | 0, $5 + 336 | 0) | 0;
    $2 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($2 | 0) == 1) {
     break label$10
    }
    if ($1) {
     HEAP32[$3 >> 2] = HEAP32[$3 >> 2] | 2
    }
    $1 = HEAP32[$5 + 344 >> 2];
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($0);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($5 + 208 | 0);
    $0 = $5 + 352 | 0;
    if ($0 >>> 0 < global$2 >>> 0) {
     __handle_stack_overflow()
    }
    global$0 = $0;
    return $1;
   }
  }
  $1 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($0);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($5 + 208 | 0);
  __resumeException($1 | 0);
  abort();
 }
 
 function std____2____num_get_wchar_t_____do_widen_28std____2__ios_base__2c_20wchar_t__29_20const($0, $1) {
  return wchar_t_20const__20std____2____num_get_wchar_t_____do_widen_p_wchar_t__28std____2__ios_base__2c_20wchar_t__29_20const($0, $1);
 }
 
 function std____2____num_get_wchar_t_____stage2_int_prep_28std____2__ios_base__2c_20wchar_t__29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0;
  $3 = global$0 - 16 | 0;
  $4 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  std____2__ios_base__getloc_28_29_20const($3 + 8 | 0, $1);
  HEAP32[16874] = 0;
  $1 = __invoke_i1___22class_std____2__basic_ifstream_22_(1675, $3 + 8 | 0) | 0;
  $4 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   if (($4 | 0) == 1) {
    break label$2
   }
   HEAP32[16874] = 0;
   $4 = __invoke_i1___22class_std____2__basic_ifstream_22_(1685, $1 | 0) | 0;
   $5 = HEAP32[16874];
   HEAP32[16874] = 0;
   if (($5 | 0) == 1) {
    break label$2
   }
   HEAP32[$2 >> 2] = $4;
   HEAP32[16874] = 0;
   __invoke_void___22class_std____2__vector_13_22__i32(1686, $0 | 0, $1 | 0);
   $0 = HEAP32[16874];
   HEAP32[16874] = 0;
   if (($0 | 0) == 1) {
    break label$2
   }
   std____2__locale___locale_28_29($3 + 8 | 0);
   $0 = $3 + 16 | 0;
   if ($0 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $0;
   return;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__locale___locale_28_29($3 + 8 | 0);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____num_get_wchar_t_____stage2_int_loop_28wchar_t_2c_20int_2c_20char__2c_20char___2c_20unsigned_20int__2c_20wchar_t_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int___2c_20wchar_t_20const__29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  $8 = $8 | 0;
  $9 = $9 | 0;
  var $10 = 0, $11 = 0;
  $10 = global$0 - 16 | 0;
  $11 = $10;
  if ($10 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $11;
  HEAP32[$10 + 12 >> 2] = $0;
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      if (HEAP32[$3 >> 2] != ($2 | 0)) {
       break label$5
      }
      $11 = HEAP32[$9 + 96 >> 2] == ($0 | 0);
      if (HEAP32[$9 + 100 >> 2] != ($0 | 0) ? !$11 : 0) {
       break label$5
      }
      HEAP32[$3 >> 2] = $2 + 1;
      HEAP8[$2 | 0] = $11 ? 43 : 45;
      break label$4;
     }
     if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($6) | ($0 | 0) != ($5 | 0)) {
      break label$3
     }
     $0 = 0;
     $1 = HEAP32[$8 >> 2];
     if (($1 - $7 | 0) > 159) {
      break label$2
     }
     $0 = HEAP32[$4 >> 2];
     HEAP32[$8 >> 2] = $1 + 4;
     HEAP32[$1 >> 2] = $0;
    }
    $0 = 0;
    HEAP32[$4 >> 2] = 0;
    break label$2;
   }
   $0 = -1;
   $6 = wchar_t_20const__20std____2__find_wchar_t_20const__2c_20wchar_t__28wchar_t_20const__2c_20wchar_t_20const__2c_20wchar_t_20const__29($9, $9 + 104 | 0, $10 + 12 | 0) - $9 | 0;
   if (($6 | 0) > 92) {
    break label$2
   }
   $5 = $6 >> 2;
   $7 = $1 + -8 | 0;
   label$7 : {
    if ($7 >>> 0 > 2) {
     if (($1 | 0) != 16 | ($6 | 0) < 88) {
      break label$7
     }
     $1 = HEAP32[$3 >> 2];
     if (($1 | 0) == ($2 | 0) | ($1 - $2 | 0) > 2) {
      break label$2
     }
     if (HEAPU8[$1 + -1 | 0] != 48) {
      break label$2
     }
     $0 = 0;
     HEAP32[$4 >> 2] = 0;
     HEAP32[$3 >> 2] = $1 + 1;
     HEAP8[$1 | 0] = HEAPU8[$5 + 39840 | 0];
     break label$2;
    }
    if (!($7 - 1)) {
     break label$7
    }
    if (($5 | 0) >= ($1 | 0)) {
     break label$2
    }
   }
   $0 = HEAP32[$3 >> 2];
   HEAP32[$3 >> 2] = $0 + 1;
   HEAP8[$0 | 0] = HEAPU8[$5 + 39840 | 0];
   HEAP32[$4 >> 2] = HEAP32[$4 >> 2] + 1;
   $0 = 0;
  }
  $1 = $10 + 16 | 0;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  return $0 | 0;
 }
 
 function std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long_20long__29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  return std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____do_get_signed_long_20long__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long_20long__29_20const($1, $2, $3, $4, $5) | 0;
 }
 
 function std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____do_get_signed_long_20long__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long_20long__29_20const($0, $1, $2, $3, $4) {
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  $5 = global$0 - 352 | 0;
  $6 = $5;
  if ($5 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $6;
  HEAP32[$5 + 336 >> 2] = $1;
  HEAP32[$5 + 344 >> 2] = $0;
  $6 = std____2____num_get_base____get_base_28std____2__ios_base__29($2);
  $8 = std____2____num_get_wchar_t_____do_widen_28std____2__ios_base__2c_20wchar_t__29_20const($2, $5 + 224 | 0);
  std____2____num_get_wchar_t_____stage2_int_prep_28std____2__ios_base__2c_20wchar_t__29($5 + 208 | 0, $2, $5 + 332 | 0);
  $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($5 + 192 | 0);
  $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($0);
  HEAP32[16874] = 0;
  __invoke_void___22class_std____2__vector_13_22__i32(1652, $0 | 0, $1 | 0);
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    if (($1 | 0) != 1) {
     $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29_20const($0, 0);
     HEAP32[$5 + 188 >> 2] = $1;
     HEAP32[$5 + 12 >> 2] = $5 + 16;
     HEAP32[$5 + 8 >> 2] = 0;
     while (1) {
      label$7 : {
       HEAP32[16874] = 0;
       $2 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1679, $5 + 344 | 0, $5 + 336 | 0) | 0;
       $7 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($7 | 0) == 1) {
        break label$7
       }
       if (!$2) {
        break label$3
       }
       if (HEAP32[$5 + 188 >> 2] == (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($0) + $1 | 0)) {
        $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($0);
        $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($0);
        HEAP32[16874] = 0;
        __invoke_void___22class_std____2__vector_13_22__i32(1652, $0 | 0, $1 << 1);
        $1 = HEAP32[16874];
        HEAP32[16874] = 0;
        if (($1 | 0) == 1) {
         break label$2
        }
        $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($0);
        HEAP32[16874] = 0;
        __invoke_void___22class_std____2__vector_13_22__i32(1652, $0 | 0, $1 | 0);
        $1 = HEAP32[16874];
        HEAP32[16874] = 0;
        if (($1 | 0) == 1) {
         break label$2
        }
        $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29_20const($0, 0);
        HEAP32[$5 + 188 >> 2] = $2 + $1;
       }
       HEAP32[16874] = 0;
       $2 = __invoke_i1___22class_std____2__basic_ifstream_22_(1681, $5 + 344 | 0) | 0;
       $7 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($7 | 0) == 1) {
        break label$7
       }
       HEAP32[16874] = 0;
       $2 = __invoke_i32_i8_i32_i8__i8___i32__i8___22class_std____2__basic_string_22__i32__i32___i8_(1684, $2 | 0, $6 | 0, $1 | 0, $5 + 188 | 0, $5 + 8 | 0, HEAP32[$5 + 332 >> 2], $5 + 208 | 0, $5 + 16 | 0, $5 + 12 | 0, $8 | 0) | 0;
       $7 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($7 | 0) == 1) {
        break label$7
       }
       if ($2) {
        break label$3
       }
       HEAP32[16874] = 0;
       __invoke_i1___22class_std____2__basic_ifstream_22_(1683, $5 + 344 | 0) | 0;
       $2 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($2 | 0) != 1) {
        continue
       }
      }
      break;
     };
     break label$2;
    }
    break label$2;
   }
   label$9 : {
    if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($5 + 208 | 0)) {
     break label$9
    }
    $2 = HEAP32[$5 + 12 >> 2];
    if (($2 - ($5 + 16 | 0) | 0) > 159) {
     break label$9
    }
    HEAP32[$5 + 12 >> 2] = $2 + 4;
    HEAP32[$2 >> 2] = HEAP32[$5 + 8 >> 2];
   }
   HEAP32[16874] = 0;
   $1 = legalfunc$__invoke_i64_i8__i8__i32__i32(1658, $1, HEAP32[$5 + 188 >> 2], $3, $6);
   $2 = i64toi32_i32$HIGH_BITS;
   $6 = HEAP32[16874];
   HEAP32[16874] = 0;
   label$10 : {
    if (($6 | 0) == 1) {
     break label$10
    }
    HEAP32[$4 >> 2] = $1;
    HEAP32[$4 + 4 >> 2] = $2;
    HEAP32[16874] = 0;
    __invoke_void___22class_std____2__vector_22__double__double__i32(1655, $5 + 208 | 0, $5 + 16 | 0, HEAP32[$5 + 12 >> 2], $3 | 0);
    $1 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($1 | 0) == 1) {
     break label$10
    }
    HEAP32[16874] = 0;
    $1 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1680, $5 + 344 | 0, $5 + 336 | 0) | 0;
    $2 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($2 | 0) == 1) {
     break label$10
    }
    if ($1) {
     HEAP32[$3 >> 2] = HEAP32[$3 >> 2] | 2
    }
    $1 = HEAP32[$5 + 344 >> 2];
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($0);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($5 + 208 | 0);
    $0 = $5 + 352 | 0;
    if ($0 >>> 0 < global$2 >>> 0) {
     __handle_stack_overflow()
    }
    global$0 = $0;
    return $1;
   }
  }
  $1 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($0);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($5 + 208 | 0);
  __resumeException($1 | 0);
  abort();
 }
 
 function std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20short__29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  return std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____do_get_unsigned_unsigned_20short__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20short__29_20const($1, $2, $3, $4, $5) | 0;
 }
 
 function std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____do_get_unsigned_unsigned_20short__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20short__29_20const($0, $1, $2, $3, $4) {
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  $5 = global$0 - 352 | 0;
  $7 = $5;
  if ($5 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $7;
  HEAP32[$5 + 336 >> 2] = $1;
  HEAP32[$5 + 344 >> 2] = $0;
  $7 = std____2____num_get_base____get_base_28std____2__ios_base__29($2);
  $8 = std____2____num_get_wchar_t_____do_widen_28std____2__ios_base__2c_20wchar_t__29_20const($2, $5 + 224 | 0);
  std____2____num_get_wchar_t_____stage2_int_prep_28std____2__ios_base__2c_20wchar_t__29($5 + 208 | 0, $2, $5 + 332 | 0);
  $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($5 + 192 | 0);
  $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($0);
  HEAP32[16874] = 0;
  __invoke_void___22class_std____2__vector_13_22__i32(1652, $0 | 0, $1 | 0);
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    if (($1 | 0) != 1) {
     $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29_20const($0, 0);
     HEAP32[$5 + 188 >> 2] = $1;
     HEAP32[$5 + 12 >> 2] = $5 + 16;
     HEAP32[$5 + 8 >> 2] = 0;
     while (1) {
      label$7 : {
       HEAP32[16874] = 0;
       $2 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1679, $5 + 344 | 0, $5 + 336 | 0) | 0;
       $6 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($6 | 0) == 1) {
        break label$7
       }
       if (!$2) {
        break label$3
       }
       if (HEAP32[$5 + 188 >> 2] == (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($0) + $1 | 0)) {
        $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($0);
        $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($0);
        HEAP32[16874] = 0;
        __invoke_void___22class_std____2__vector_13_22__i32(1652, $0 | 0, $1 << 1);
        $1 = HEAP32[16874];
        HEAP32[16874] = 0;
        if (($1 | 0) == 1) {
         break label$2
        }
        $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($0);
        HEAP32[16874] = 0;
        __invoke_void___22class_std____2__vector_13_22__i32(1652, $0 | 0, $1 | 0);
        $1 = HEAP32[16874];
        HEAP32[16874] = 0;
        if (($1 | 0) == 1) {
         break label$2
        }
        $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29_20const($0, 0);
        HEAP32[$5 + 188 >> 2] = $2 + $1;
       }
       HEAP32[16874] = 0;
       $2 = __invoke_i1___22class_std____2__basic_ifstream_22_(1681, $5 + 344 | 0) | 0;
       $6 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($6 | 0) == 1) {
        break label$7
       }
       HEAP32[16874] = 0;
       $2 = __invoke_i32_i8_i32_i8__i8___i32__i8___22class_std____2__basic_string_22__i32__i32___i8_(1684, $2 | 0, $7 | 0, $1 | 0, $5 + 188 | 0, $5 + 8 | 0, HEAP32[$5 + 332 >> 2], $5 + 208 | 0, $5 + 16 | 0, $5 + 12 | 0, $8 | 0) | 0;
       $6 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($6 | 0) == 1) {
        break label$7
       }
       if ($2) {
        break label$3
       }
       HEAP32[16874] = 0;
       __invoke_i1___22class_std____2__basic_ifstream_22_(1683, $5 + 344 | 0) | 0;
       $2 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($2 | 0) != 1) {
        continue
       }
      }
      break;
     };
     break label$2;
    }
    break label$2;
   }
   label$9 : {
    if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($5 + 208 | 0)) {
     break label$9
    }
    $2 = HEAP32[$5 + 12 >> 2];
    if (($2 - ($5 + 16 | 0) | 0) > 159) {
     break label$9
    }
    HEAP32[$5 + 12 >> 2] = $2 + 4;
    HEAP32[$2 >> 2] = HEAP32[$5 + 8 >> 2];
   }
   HEAP32[16874] = 0;
   $1 = __invoke___22class_std____2__shared_ptr_22____22class_std____2__shared_ptr_22___class_maxiOsc____22class_emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc____val_deleter_22__i32(1659, $1 | 0, HEAP32[$5 + 188 >> 2], $3 | 0, $7 | 0) | 0;
   $2 = HEAP32[16874];
   HEAP32[16874] = 0;
   label$10 : {
    if (($2 | 0) == 1) {
     break label$10
    }
    HEAP16[$4 >> 1] = $1;
    HEAP32[16874] = 0;
    __invoke_void___22class_std____2__vector_22__double__double__i32(1655, $5 + 208 | 0, $5 + 16 | 0, HEAP32[$5 + 12 >> 2], $3 | 0);
    $1 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($1 | 0) == 1) {
     break label$10
    }
    HEAP32[16874] = 0;
    $1 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1680, $5 + 344 | 0, $5 + 336 | 0) | 0;
    $2 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($2 | 0) == 1) {
     break label$10
    }
    if ($1) {
     HEAP32[$3 >> 2] = HEAP32[$3 >> 2] | 2
    }
    $1 = HEAP32[$5 + 344 >> 2];
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($0);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($5 + 208 | 0);
    $0 = $5 + 352 | 0;
    if ($0 >>> 0 < global$2 >>> 0) {
     __handle_stack_overflow()
    }
    global$0 = $0;
    return $1;
   }
  }
  $1 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($0);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($5 + 208 | 0);
  __resumeException($1 | 0);
  abort();
 }
 
 function std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20int__29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  return std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____do_get_unsigned_unsigned_20int__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20int__29_20const($1, $2, $3, $4, $5) | 0;
 }
 
 function std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____do_get_unsigned_unsigned_20int__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20int__29_20const($0, $1, $2, $3, $4) {
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  $5 = global$0 - 352 | 0;
  $7 = $5;
  if ($5 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $7;
  HEAP32[$5 + 336 >> 2] = $1;
  HEAP32[$5 + 344 >> 2] = $0;
  $7 = std____2____num_get_base____get_base_28std____2__ios_base__29($2);
  $8 = std____2____num_get_wchar_t_____do_widen_28std____2__ios_base__2c_20wchar_t__29_20const($2, $5 + 224 | 0);
  std____2____num_get_wchar_t_____stage2_int_prep_28std____2__ios_base__2c_20wchar_t__29($5 + 208 | 0, $2, $5 + 332 | 0);
  $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($5 + 192 | 0);
  $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($0);
  HEAP32[16874] = 0;
  __invoke_void___22class_std____2__vector_13_22__i32(1652, $0 | 0, $1 | 0);
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    if (($1 | 0) != 1) {
     $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29_20const($0, 0);
     HEAP32[$5 + 188 >> 2] = $1;
     HEAP32[$5 + 12 >> 2] = $5 + 16;
     HEAP32[$5 + 8 >> 2] = 0;
     while (1) {
      label$7 : {
       HEAP32[16874] = 0;
       $2 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1679, $5 + 344 | 0, $5 + 336 | 0) | 0;
       $6 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($6 | 0) == 1) {
        break label$7
       }
       if (!$2) {
        break label$3
       }
       if (HEAP32[$5 + 188 >> 2] == (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($0) + $1 | 0)) {
        $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($0);
        $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($0);
        HEAP32[16874] = 0;
        __invoke_void___22class_std____2__vector_13_22__i32(1652, $0 | 0, $1 << 1);
        $1 = HEAP32[16874];
        HEAP32[16874] = 0;
        if (($1 | 0) == 1) {
         break label$2
        }
        $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($0);
        HEAP32[16874] = 0;
        __invoke_void___22class_std____2__vector_13_22__i32(1652, $0 | 0, $1 | 0);
        $1 = HEAP32[16874];
        HEAP32[16874] = 0;
        if (($1 | 0) == 1) {
         break label$2
        }
        $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29_20const($0, 0);
        HEAP32[$5 + 188 >> 2] = $2 + $1;
       }
       HEAP32[16874] = 0;
       $2 = __invoke_i1___22class_std____2__basic_ifstream_22_(1681, $5 + 344 | 0) | 0;
       $6 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($6 | 0) == 1) {
        break label$7
       }
       HEAP32[16874] = 0;
       $2 = __invoke_i32_i8_i32_i8__i8___i32__i8___22class_std____2__basic_string_22__i32__i32___i8_(1684, $2 | 0, $7 | 0, $1 | 0, $5 + 188 | 0, $5 + 8 | 0, HEAP32[$5 + 332 >> 2], $5 + 208 | 0, $5 + 16 | 0, $5 + 12 | 0, $8 | 0) | 0;
       $6 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($6 | 0) == 1) {
        break label$7
       }
       if ($2) {
        break label$3
       }
       HEAP32[16874] = 0;
       __invoke_i1___22class_std____2__basic_ifstream_22_(1683, $5 + 344 | 0) | 0;
       $2 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($2 | 0) != 1) {
        continue
       }
      }
      break;
     };
     break label$2;
    }
    break label$2;
   }
   label$9 : {
    if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($5 + 208 | 0)) {
     break label$9
    }
    $2 = HEAP32[$5 + 12 >> 2];
    if (($2 - ($5 + 16 | 0) | 0) > 159) {
     break label$9
    }
    HEAP32[$5 + 12 >> 2] = $2 + 4;
    HEAP32[$2 >> 2] = HEAP32[$5 + 8 >> 2];
   }
   HEAP32[16874] = 0;
   $1 = __invoke___22class_std____2__shared_ptr_22____22class_std____2__shared_ptr_22___class_maxiOsc____22class_emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc____val_deleter_22__i32(1660, $1 | 0, HEAP32[$5 + 188 >> 2], $3 | 0, $7 | 0) | 0;
   $2 = HEAP32[16874];
   HEAP32[16874] = 0;
   label$10 : {
    if (($2 | 0) == 1) {
     break label$10
    }
    HEAP32[$4 >> 2] = $1;
    HEAP32[16874] = 0;
    __invoke_void___22class_std____2__vector_22__double__double__i32(1655, $5 + 208 | 0, $5 + 16 | 0, HEAP32[$5 + 12 >> 2], $3 | 0);
    $1 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($1 | 0) == 1) {
     break label$10
    }
    HEAP32[16874] = 0;
    $1 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1680, $5 + 344 | 0, $5 + 336 | 0) | 0;
    $2 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($2 | 0) == 1) {
     break label$10
    }
    if ($1) {
     HEAP32[$3 >> 2] = HEAP32[$3 >> 2] | 2
    }
    $1 = HEAP32[$5 + 344 >> 2];
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($0);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($5 + 208 | 0);
    $0 = $5 + 352 | 0;
    if ($0 >>> 0 < global$2 >>> 0) {
     __handle_stack_overflow()
    }
    global$0 = $0;
    return $1;
   }
  }
  $1 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($0);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($5 + 208 | 0);
  __resumeException($1 | 0);
  abort();
 }
 
 function std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20long__29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  return std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____do_get_unsigned_unsigned_20long__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20long__29_20const($1, $2, $3, $4, $5) | 0;
 }
 
 function std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____do_get_unsigned_unsigned_20long__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20long__29_20const($0, $1, $2, $3, $4) {
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  $5 = global$0 - 352 | 0;
  $7 = $5;
  if ($5 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $7;
  HEAP32[$5 + 336 >> 2] = $1;
  HEAP32[$5 + 344 >> 2] = $0;
  $7 = std____2____num_get_base____get_base_28std____2__ios_base__29($2);
  $8 = std____2____num_get_wchar_t_____do_widen_28std____2__ios_base__2c_20wchar_t__29_20const($2, $5 + 224 | 0);
  std____2____num_get_wchar_t_____stage2_int_prep_28std____2__ios_base__2c_20wchar_t__29($5 + 208 | 0, $2, $5 + 332 | 0);
  $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($5 + 192 | 0);
  $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($0);
  HEAP32[16874] = 0;
  __invoke_void___22class_std____2__vector_13_22__i32(1652, $0 | 0, $1 | 0);
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    if (($1 | 0) != 1) {
     $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29_20const($0, 0);
     HEAP32[$5 + 188 >> 2] = $1;
     HEAP32[$5 + 12 >> 2] = $5 + 16;
     HEAP32[$5 + 8 >> 2] = 0;
     while (1) {
      label$7 : {
       HEAP32[16874] = 0;
       $2 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1679, $5 + 344 | 0, $5 + 336 | 0) | 0;
       $6 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($6 | 0) == 1) {
        break label$7
       }
       if (!$2) {
        break label$3
       }
       if (HEAP32[$5 + 188 >> 2] == (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($0) + $1 | 0)) {
        $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($0);
        $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($0);
        HEAP32[16874] = 0;
        __invoke_void___22class_std____2__vector_13_22__i32(1652, $0 | 0, $1 << 1);
        $1 = HEAP32[16874];
        HEAP32[16874] = 0;
        if (($1 | 0) == 1) {
         break label$2
        }
        $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($0);
        HEAP32[16874] = 0;
        __invoke_void___22class_std____2__vector_13_22__i32(1652, $0 | 0, $1 | 0);
        $1 = HEAP32[16874];
        HEAP32[16874] = 0;
        if (($1 | 0) == 1) {
         break label$2
        }
        $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29_20const($0, 0);
        HEAP32[$5 + 188 >> 2] = $2 + $1;
       }
       HEAP32[16874] = 0;
       $2 = __invoke_i1___22class_std____2__basic_ifstream_22_(1681, $5 + 344 | 0) | 0;
       $6 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($6 | 0) == 1) {
        break label$7
       }
       HEAP32[16874] = 0;
       $2 = __invoke_i32_i8_i32_i8__i8___i32__i8___22class_std____2__basic_string_22__i32__i32___i8_(1684, $2 | 0, $7 | 0, $1 | 0, $5 + 188 | 0, $5 + 8 | 0, HEAP32[$5 + 332 >> 2], $5 + 208 | 0, $5 + 16 | 0, $5 + 12 | 0, $8 | 0) | 0;
       $6 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($6 | 0) == 1) {
        break label$7
       }
       if ($2) {
        break label$3
       }
       HEAP32[16874] = 0;
       __invoke_i1___22class_std____2__basic_ifstream_22_(1683, $5 + 344 | 0) | 0;
       $2 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($2 | 0) != 1) {
        continue
       }
      }
      break;
     };
     break label$2;
    }
    break label$2;
   }
   label$9 : {
    if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($5 + 208 | 0)) {
     break label$9
    }
    $2 = HEAP32[$5 + 12 >> 2];
    if (($2 - ($5 + 16 | 0) | 0) > 159) {
     break label$9
    }
    HEAP32[$5 + 12 >> 2] = $2 + 4;
    HEAP32[$2 >> 2] = HEAP32[$5 + 8 >> 2];
   }
   HEAP32[16874] = 0;
   $1 = __invoke___22class_std____2__shared_ptr_22____22class_std____2__shared_ptr_22___class_maxiOsc____22class_emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc____val_deleter_22__i32(1661, $1 | 0, HEAP32[$5 + 188 >> 2], $3 | 0, $7 | 0) | 0;
   $2 = HEAP32[16874];
   HEAP32[16874] = 0;
   label$10 : {
    if (($2 | 0) == 1) {
     break label$10
    }
    HEAP32[$4 >> 2] = $1;
    HEAP32[16874] = 0;
    __invoke_void___22class_std____2__vector_22__double__double__i32(1655, $5 + 208 | 0, $5 + 16 | 0, HEAP32[$5 + 12 >> 2], $3 | 0);
    $1 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($1 | 0) == 1) {
     break label$10
    }
    HEAP32[16874] = 0;
    $1 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1680, $5 + 344 | 0, $5 + 336 | 0) | 0;
    $2 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($2 | 0) == 1) {
     break label$10
    }
    if ($1) {
     HEAP32[$3 >> 2] = HEAP32[$3 >> 2] | 2
    }
    $1 = HEAP32[$5 + 344 >> 2];
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($0);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($5 + 208 | 0);
    $0 = $5 + 352 | 0;
    if ($0 >>> 0 < global$2 >>> 0) {
     __handle_stack_overflow()
    }
    global$0 = $0;
    return $1;
   }
  }
  $1 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($0);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($5 + 208 | 0);
  __resumeException($1 | 0);
  abort();
 }
 
 function std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20long_20long__29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  return std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____do_get_unsigned_unsigned_20long_20long__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20long_20long__29_20const($1, $2, $3, $4, $5) | 0;
 }
 
 function std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____do_get_unsigned_unsigned_20long_20long__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20long_20long__29_20const($0, $1, $2, $3, $4) {
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  $5 = global$0 - 352 | 0;
  $6 = $5;
  if ($5 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $6;
  HEAP32[$5 + 336 >> 2] = $1;
  HEAP32[$5 + 344 >> 2] = $0;
  $6 = std____2____num_get_base____get_base_28std____2__ios_base__29($2);
  $8 = std____2____num_get_wchar_t_____do_widen_28std____2__ios_base__2c_20wchar_t__29_20const($2, $5 + 224 | 0);
  std____2____num_get_wchar_t_____stage2_int_prep_28std____2__ios_base__2c_20wchar_t__29($5 + 208 | 0, $2, $5 + 332 | 0);
  $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($5 + 192 | 0);
  $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($0);
  HEAP32[16874] = 0;
  __invoke_void___22class_std____2__vector_13_22__i32(1652, $0 | 0, $1 | 0);
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    if (($1 | 0) != 1) {
     $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29_20const($0, 0);
     HEAP32[$5 + 188 >> 2] = $1;
     HEAP32[$5 + 12 >> 2] = $5 + 16;
     HEAP32[$5 + 8 >> 2] = 0;
     while (1) {
      label$7 : {
       HEAP32[16874] = 0;
       $2 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1679, $5 + 344 | 0, $5 + 336 | 0) | 0;
       $7 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($7 | 0) == 1) {
        break label$7
       }
       if (!$2) {
        break label$3
       }
       if (HEAP32[$5 + 188 >> 2] == (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($0) + $1 | 0)) {
        $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($0);
        $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($0);
        HEAP32[16874] = 0;
        __invoke_void___22class_std____2__vector_13_22__i32(1652, $0 | 0, $1 << 1);
        $1 = HEAP32[16874];
        HEAP32[16874] = 0;
        if (($1 | 0) == 1) {
         break label$2
        }
        $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($0);
        HEAP32[16874] = 0;
        __invoke_void___22class_std____2__vector_13_22__i32(1652, $0 | 0, $1 | 0);
        $1 = HEAP32[16874];
        HEAP32[16874] = 0;
        if (($1 | 0) == 1) {
         break label$2
        }
        $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29_20const($0, 0);
        HEAP32[$5 + 188 >> 2] = $2 + $1;
       }
       HEAP32[16874] = 0;
       $2 = __invoke_i1___22class_std____2__basic_ifstream_22_(1681, $5 + 344 | 0) | 0;
       $7 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($7 | 0) == 1) {
        break label$7
       }
       HEAP32[16874] = 0;
       $2 = __invoke_i32_i8_i32_i8__i8___i32__i8___22class_std____2__basic_string_22__i32__i32___i8_(1684, $2 | 0, $6 | 0, $1 | 0, $5 + 188 | 0, $5 + 8 | 0, HEAP32[$5 + 332 >> 2], $5 + 208 | 0, $5 + 16 | 0, $5 + 12 | 0, $8 | 0) | 0;
       $7 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($7 | 0) == 1) {
        break label$7
       }
       if ($2) {
        break label$3
       }
       HEAP32[16874] = 0;
       __invoke_i1___22class_std____2__basic_ifstream_22_(1683, $5 + 344 | 0) | 0;
       $2 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($2 | 0) != 1) {
        continue
       }
      }
      break;
     };
     break label$2;
    }
    break label$2;
   }
   label$9 : {
    if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($5 + 208 | 0)) {
     break label$9
    }
    $2 = HEAP32[$5 + 12 >> 2];
    if (($2 - ($5 + 16 | 0) | 0) > 159) {
     break label$9
    }
    HEAP32[$5 + 12 >> 2] = $2 + 4;
    HEAP32[$2 >> 2] = HEAP32[$5 + 8 >> 2];
   }
   HEAP32[16874] = 0;
   $1 = legalfunc$__invoke_i64_i8__i8__i32__i32(1662, $1, HEAP32[$5 + 188 >> 2], $3, $6);
   $2 = i64toi32_i32$HIGH_BITS;
   $6 = HEAP32[16874];
   HEAP32[16874] = 0;
   label$10 : {
    if (($6 | 0) == 1) {
     break label$10
    }
    HEAP32[$4 >> 2] = $1;
    HEAP32[$4 + 4 >> 2] = $2;
    HEAP32[16874] = 0;
    __invoke_void___22class_std____2__vector_22__double__double__i32(1655, $5 + 208 | 0, $5 + 16 | 0, HEAP32[$5 + 12 >> 2], $3 | 0);
    $1 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($1 | 0) == 1) {
     break label$10
    }
    HEAP32[16874] = 0;
    $1 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1680, $5 + 344 | 0, $5 + 336 | 0) | 0;
    $2 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($2 | 0) == 1) {
     break label$10
    }
    if ($1) {
     HEAP32[$3 >> 2] = HEAP32[$3 >> 2] | 2
    }
    $1 = HEAP32[$5 + 344 >> 2];
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($0);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($5 + 208 | 0);
    $0 = $5 + 352 | 0;
    if ($0 >>> 0 < global$2 >>> 0) {
     __handle_stack_overflow()
    }
    global$0 = $0;
    return $1;
   }
  }
  $1 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($0);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($5 + 208 | 0);
  __resumeException($1 | 0);
  abort();
 }
 
 function std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20float__29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  return std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____do_get_floating_point_float__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20float__29_20const($1, $2, $3, $4, $5) | 0;
 }
 
 function std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____do_get_floating_point_float__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20float__29_20const($0, $1, $2, $3, $4) {
  var $5 = 0, $6 = 0, $7 = Math_fround(0);
  $5 = global$0 - 368 | 0;
  $6 = $5;
  if ($5 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $6;
  HEAP32[$5 + 352 >> 2] = $1;
  HEAP32[$5 + 360 >> 2] = $0;
  std____2____num_get_wchar_t_____stage2_float_prep_28std____2__ios_base__2c_20wchar_t__2c_20wchar_t__2c_20wchar_t__29($5 + 200 | 0, $2, $5 + 224 | 0, $5 + 220 | 0, $5 + 216 | 0);
  $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($5 + 184 | 0);
  $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($1);
  HEAP32[16874] = 0;
  __invoke_void___22class_std____2__vector_13_22__i32(1652, $1 | 0, $0 | 0);
  $0 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    if (($0 | 0) != 1) {
     $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29_20const($1, 0);
     HEAP32[$5 + 180 >> 2] = $0;
     HEAP32[$5 + 12 >> 2] = $5 + 16;
     HEAP32[$5 + 8 >> 2] = 0;
     HEAP8[$5 + 7 | 0] = 1;
     HEAP8[$5 + 6 | 0] = 69;
     while (1) {
      label$7 : {
       HEAP32[16874] = 0;
       $2 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1679, $5 + 360 | 0, $5 + 352 | 0) | 0;
       $6 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($6 | 0) == 1) {
        break label$7
       }
       if (!$2) {
        break label$3
       }
       if (HEAP32[$5 + 180 >> 2] == (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($1) + $0 | 0)) {
        $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($1);
        $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($1);
        HEAP32[16874] = 0;
        __invoke_void___22class_std____2__vector_13_22__i32(1652, $1 | 0, $0 << 1);
        $0 = HEAP32[16874];
        HEAP32[16874] = 0;
        if (($0 | 0) == 1) {
         break label$2
        }
        $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($1);
        HEAP32[16874] = 0;
        __invoke_void___22class_std____2__vector_13_22__i32(1652, $1 | 0, $0 | 0);
        $0 = HEAP32[16874];
        HEAP32[16874] = 0;
        if (($0 | 0) == 1) {
         break label$2
        }
        $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29_20const($1, 0);
        HEAP32[$5 + 180 >> 2] = $2 + $0;
       }
       HEAP32[16874] = 0;
       $2 = __invoke_i1___22class_std____2__basic_ifstream_22_(1681, $5 + 360 | 0) | 0;
       $6 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($6 | 0) == 1) {
        break label$7
       }
       HEAP32[16874] = 0;
       $2 = __invoke_i32_i8_i8__i8__i8__i8___i8_i8___22class_std____2__basic_string_22__i32__i32___i32__i8_(1687, $2 | 0, $5 + 7 | 0, $5 + 6 | 0, $0 | 0, $5 + 180 | 0, HEAP32[$5 + 220 >> 2], HEAP32[$5 + 216 >> 2], $5 + 200 | 0, $5 + 16 | 0, $5 + 12 | 0, $5 + 8 | 0, $5 + 224 | 0) | 0;
       $6 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($6 | 0) == 1) {
        break label$7
       }
       if ($2) {
        break label$3
       }
       HEAP32[16874] = 0;
       __invoke_i1___22class_std____2__basic_ifstream_22_(1683, $5 + 360 | 0) | 0;
       $2 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($2 | 0) != 1) {
        continue
       }
      }
      break;
     };
     break label$2;
    }
    break label$2;
   }
   label$9 : {
    if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($5 + 200 | 0) | !HEAPU8[$5 + 7 | 0]) {
     break label$9
    }
    $2 = HEAP32[$5 + 12 >> 2];
    if (($2 - ($5 + 16 | 0) | 0) > 159) {
     break label$9
    }
    HEAP32[$5 + 12 >> 2] = $2 + 4;
    HEAP32[$2 >> 2] = HEAP32[$5 + 8 >> 2];
   }
   HEAP32[16874] = 0;
   $7 = Math_fround(__invoke_float_i8__i8__i32_(1664, $0 | 0, HEAP32[$5 + 180 >> 2], $3 | 0));
   $0 = HEAP32[16874];
   HEAP32[16874] = 0;
   label$10 : {
    if (($0 | 0) == 1) {
     break label$10
    }
    HEAPF32[$4 >> 2] = $7;
    HEAP32[16874] = 0;
    __invoke_void___22class_std____2__vector_22__double__double__i32(1655, $5 + 200 | 0, $5 + 16 | 0, HEAP32[$5 + 12 >> 2], $3 | 0);
    $0 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($0 | 0) == 1) {
     break label$10
    }
    HEAP32[16874] = 0;
    $0 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1680, $5 + 360 | 0, $5 + 352 | 0) | 0;
    $2 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($2 | 0) == 1) {
     break label$10
    }
    if ($0) {
     HEAP32[$3 >> 2] = HEAP32[$3 >> 2] | 2
    }
    $0 = HEAP32[$5 + 360 >> 2];
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($1);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($5 + 200 | 0);
    $1 = $5 + 368 | 0;
    if ($1 >>> 0 < global$2 >>> 0) {
     __handle_stack_overflow()
    }
    global$0 = $1;
    return $0;
   }
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($1);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($5 + 200 | 0);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____num_get_wchar_t_____stage2_float_prep_28std____2__ios_base__2c_20wchar_t__2c_20wchar_t__2c_20wchar_t__29($0, $1, $2, $3, $4) {
  var $5 = 0, $6 = 0;
  $5 = global$0 - 16 | 0;
  $6 = $5;
  if ($5 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $6;
  std____2__ios_base__getloc_28_29_20const($5 + 8 | 0, $1);
  HEAP32[16874] = 0;
  $1 = __invoke_i1___22class_std____2__basic_ifstream_22_(1674, $5 + 8 | 0) | 0;
  $6 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   if (($6 | 0) == 1) {
    break label$2
   }
   HEAP32[16874] = 0;
   __invoke___22class_std____2__shared_ptr_22____22class_std____2__shared_ptr_22___class_maxiOsc____22class_emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc____val_deleter_22__i32(1688, $1 | 0, 39840, 39872, $2 | 0) | 0;
   $1 = HEAP32[16874];
   HEAP32[16874] = 0;
   if (($1 | 0) == 1) {
    break label$2
   }
   HEAP32[16874] = 0;
   $1 = __invoke_i1___22class_std____2__basic_ifstream_22_(1675, $5 + 8 | 0) | 0;
   $2 = HEAP32[16874];
   HEAP32[16874] = 0;
   if (($2 | 0) == 1) {
    break label$2
   }
   HEAP32[16874] = 0;
   $2 = __invoke_i1___22class_std____2__basic_ifstream_22_(1689, $1 | 0) | 0;
   $6 = HEAP32[16874];
   HEAP32[16874] = 0;
   if (($6 | 0) == 1) {
    break label$2
   }
   HEAP32[$3 >> 2] = $2;
   HEAP32[16874] = 0;
   $2 = __invoke_i1___22class_std____2__basic_ifstream_22_(1685, $1 | 0) | 0;
   $3 = HEAP32[16874];
   HEAP32[16874] = 0;
   if (($3 | 0) == 1) {
    break label$2
   }
   HEAP32[$4 >> 2] = $2;
   HEAP32[16874] = 0;
   __invoke_void___22class_std____2__vector_13_22__i32(1686, $0 | 0, $1 | 0);
   $0 = HEAP32[16874];
   HEAP32[16874] = 0;
   if (($0 | 0) == 1) {
    break label$2
   }
   std____2__locale___locale_28_29($5 + 8 | 0);
   $0 = $5 + 16 | 0;
   if ($0 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $0;
   return;
  }
  $2 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__locale___locale_28_29($5 + 8 | 0);
  __resumeException($2 | 0);
  abort();
 }
 
 function std____2____num_get_wchar_t_____stage2_float_loop_28wchar_t_2c_20bool__2c_20char__2c_20char__2c_20char___2c_20wchar_t_2c_20wchar_t_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int___2c_20unsigned_20int__2c_20wchar_t__29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  $8 = $8 | 0;
  $9 = $9 | 0;
  $10 = $10 | 0;
  $11 = $11 | 0;
  var $12 = 0, $13 = 0;
  $12 = global$0 - 16 | 0;
  $13 = $12;
  if ($12 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $13;
  HEAP32[$12 + 12 >> 2] = $0;
  label$2 : {
   label$3 : {
    if (($0 | 0) == ($5 | 0)) {
     if (!HEAPU8[$1 | 0]) {
      break label$3
     }
     $0 = 0;
     HEAP8[$1 | 0] = 0;
     $1 = HEAP32[$4 >> 2];
     HEAP32[$4 >> 2] = $1 + 1;
     HEAP8[$1 | 0] = 46;
     if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($7)) {
      break label$2
     }
     $1 = HEAP32[$9 >> 2];
     if (($1 - $8 | 0) > 159) {
      break label$2
     }
     $2 = HEAP32[$10 >> 2];
     HEAP32[$9 >> 2] = $1 + 4;
     HEAP32[$1 >> 2] = $2;
     break label$2;
    }
    label$5 : {
     if (($0 | 0) != ($6 | 0)) {
      break label$5
     }
     if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($7)) {
      break label$5
     }
     if (!HEAPU8[$1 | 0]) {
      break label$3
     }
     $0 = 0;
     $1 = HEAP32[$9 >> 2];
     if (($1 - $8 | 0) > 159) {
      break label$2
     }
     $0 = HEAP32[$10 >> 2];
     HEAP32[$9 >> 2] = $1 + 4;
     HEAP32[$1 >> 2] = $0;
     $0 = 0;
     HEAP32[$10 >> 2] = 0;
     break label$2;
    }
    $0 = -1;
    $5 = wchar_t_20const__20std____2__find_wchar_t_20const__2c_20wchar_t__28wchar_t_20const__2c_20wchar_t_20const__2c_20wchar_t_20const__29($11, $11 + 128 | 0, $12 + 12 | 0) - $11 | 0;
    if (($5 | 0) > 124) {
     break label$2
    }
    $6 = HEAPU8[($5 >> 2) + 39840 | 0];
    $0 = __wasm_rotl_i32($5 + -88 | 0, 30);
    label$6 : {
     if ($0 >>> 0 <= 3) {
      label$8 : {
       switch ($0 - 2 | 0) {
       case 0:
       case 1:
        $1 = HEAP32[$4 >> 2];
        if (($1 | 0) != ($3 | 0)) {
         $0 = -1;
         if ((HEAPU8[$1 + -1 | 0] & 95) != (HEAPU8[$2 | 0] & 127)) {
          break label$2
         }
        }
        HEAP32[$4 >> 2] = $1 + 1;
        HEAP8[$1 | 0] = $6;
        $0 = 0;
        break label$2;
       default:
        break label$8;
       };
      }
      HEAP8[$2 | 0] = 80;
      break label$6;
     }
     $0 = HEAP8[$2 | 0];
     if (($0 | 0) != ($6 & 95)) {
      break label$6
     }
     HEAP8[$2 | 0] = $0 | 128;
     if (!HEAPU8[$1 | 0]) {
      break label$6
     }
     HEAP8[$1 | 0] = 0;
     if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($7)) {
      break label$6
     }
     $0 = HEAP32[$9 >> 2];
     if (($0 - $8 | 0) > 159) {
      break label$6
     }
     $1 = HEAP32[$10 >> 2];
     HEAP32[$9 >> 2] = $0 + 4;
     HEAP32[$0 >> 2] = $1;
    }
    $0 = HEAP32[$4 >> 2];
    HEAP32[$4 >> 2] = $0 + 1;
    HEAP8[$0 | 0] = $6;
    $0 = 0;
    if (($5 | 0) > 84) {
     break label$2
    }
    HEAP32[$10 >> 2] = HEAP32[$10 >> 2] + 1;
    break label$2;
   }
   $0 = -1;
  }
  $1 = $12 + 16 | 0;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  return $0 | 0;
 }
 
 function std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20double__29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  return std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____do_get_floating_point_double__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20double__29_20const($1, $2, $3, $4, $5) | 0;
 }
 
 function std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____do_get_floating_point_double__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20double__29_20const($0, $1, $2, $3, $4) {
  var $5 = 0, $6 = 0, $7 = 0.0;
  $5 = global$0 - 368 | 0;
  $6 = $5;
  if ($5 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $6;
  HEAP32[$5 + 352 >> 2] = $1;
  HEAP32[$5 + 360 >> 2] = $0;
  std____2____num_get_wchar_t_____stage2_float_prep_28std____2__ios_base__2c_20wchar_t__2c_20wchar_t__2c_20wchar_t__29($5 + 200 | 0, $2, $5 + 224 | 0, $5 + 220 | 0, $5 + 216 | 0);
  $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($5 + 184 | 0);
  $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($1);
  HEAP32[16874] = 0;
  __invoke_void___22class_std____2__vector_13_22__i32(1652, $1 | 0, $0 | 0);
  $0 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    if (($0 | 0) != 1) {
     $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29_20const($1, 0);
     HEAP32[$5 + 180 >> 2] = $0;
     HEAP32[$5 + 12 >> 2] = $5 + 16;
     HEAP32[$5 + 8 >> 2] = 0;
     HEAP8[$5 + 7 | 0] = 1;
     HEAP8[$5 + 6 | 0] = 69;
     while (1) {
      label$7 : {
       HEAP32[16874] = 0;
       $2 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1679, $5 + 360 | 0, $5 + 352 | 0) | 0;
       $6 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($6 | 0) == 1) {
        break label$7
       }
       if (!$2) {
        break label$3
       }
       if (HEAP32[$5 + 180 >> 2] == (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($1) + $0 | 0)) {
        $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($1);
        $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($1);
        HEAP32[16874] = 0;
        __invoke_void___22class_std____2__vector_13_22__i32(1652, $1 | 0, $0 << 1);
        $0 = HEAP32[16874];
        HEAP32[16874] = 0;
        if (($0 | 0) == 1) {
         break label$2
        }
        $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($1);
        HEAP32[16874] = 0;
        __invoke_void___22class_std____2__vector_13_22__i32(1652, $1 | 0, $0 | 0);
        $0 = HEAP32[16874];
        HEAP32[16874] = 0;
        if (($0 | 0) == 1) {
         break label$2
        }
        $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29_20const($1, 0);
        HEAP32[$5 + 180 >> 2] = $2 + $0;
       }
       HEAP32[16874] = 0;
       $2 = __invoke_i1___22class_std____2__basic_ifstream_22_(1681, $5 + 360 | 0) | 0;
       $6 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($6 | 0) == 1) {
        break label$7
       }
       HEAP32[16874] = 0;
       $2 = __invoke_i32_i8_i8__i8__i8__i8___i8_i8___22class_std____2__basic_string_22__i32__i32___i32__i8_(1687, $2 | 0, $5 + 7 | 0, $5 + 6 | 0, $0 | 0, $5 + 180 | 0, HEAP32[$5 + 220 >> 2], HEAP32[$5 + 216 >> 2], $5 + 200 | 0, $5 + 16 | 0, $5 + 12 | 0, $5 + 8 | 0, $5 + 224 | 0) | 0;
       $6 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($6 | 0) == 1) {
        break label$7
       }
       if ($2) {
        break label$3
       }
       HEAP32[16874] = 0;
       __invoke_i1___22class_std____2__basic_ifstream_22_(1683, $5 + 360 | 0) | 0;
       $2 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($2 | 0) != 1) {
        continue
       }
      }
      break;
     };
     break label$2;
    }
    break label$2;
   }
   label$9 : {
    if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($5 + 200 | 0) | !HEAPU8[$5 + 7 | 0]) {
     break label$9
    }
    $2 = HEAP32[$5 + 12 >> 2];
    if (($2 - ($5 + 16 | 0) | 0) > 159) {
     break label$9
    }
    HEAP32[$5 + 12 >> 2] = $2 + 4;
    HEAP32[$2 >> 2] = HEAP32[$5 + 8 >> 2];
   }
   HEAP32[16874] = 0;
   $7 = +__invoke_double_i8__i8__i32_(1667, $0 | 0, HEAP32[$5 + 180 >> 2], $3 | 0);
   $0 = HEAP32[16874];
   HEAP32[16874] = 0;
   label$10 : {
    if (($0 | 0) == 1) {
     break label$10
    }
    HEAPF64[$4 >> 3] = $7;
    HEAP32[16874] = 0;
    __invoke_void___22class_std____2__vector_22__double__double__i32(1655, $5 + 200 | 0, $5 + 16 | 0, HEAP32[$5 + 12 >> 2], $3 | 0);
    $0 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($0 | 0) == 1) {
     break label$10
    }
    HEAP32[16874] = 0;
    $0 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1680, $5 + 360 | 0, $5 + 352 | 0) | 0;
    $2 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($2 | 0) == 1) {
     break label$10
    }
    if ($0) {
     HEAP32[$3 >> 2] = HEAP32[$3 >> 2] | 2
    }
    $0 = HEAP32[$5 + 360 >> 2];
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($1);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($5 + 200 | 0);
    $1 = $5 + 368 | 0;
    if ($1 >>> 0 < global$2 >>> 0) {
     __handle_stack_overflow()
    }
    global$0 = $1;
    return $0;
   }
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($1);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($5 + 200 | 0);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long_20double__29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  return std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____do_get_floating_point_long_20double__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long_20double__29_20const($1, $2, $3, $4, $5) | 0;
 }
 
 function std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____do_get_floating_point_long_20double__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long_20double__29_20const($0, $1, $2, $3, $4) {
  var $5 = 0, $6 = 0;
  $5 = global$0 - 384 | 0;
  $6 = $5;
  if ($5 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $6;
  HEAP32[$5 + 368 >> 2] = $1;
  HEAP32[$5 + 376 >> 2] = $0;
  std____2____num_get_wchar_t_____stage2_float_prep_28std____2__ios_base__2c_20wchar_t__2c_20wchar_t__2c_20wchar_t__29($5 + 216 | 0, $2, $5 + 240 | 0, $5 + 236 | 0, $5 + 232 | 0);
  $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($5 + 200 | 0);
  $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($1);
  HEAP32[16874] = 0;
  __invoke_void___22class_std____2__vector_13_22__i32(1652, $1 | 0, $0 | 0);
  $0 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    if (($0 | 0) != 1) {
     $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29_20const($1, 0);
     HEAP32[$5 + 196 >> 2] = $0;
     HEAP32[$5 + 28 >> 2] = $5 + 32;
     HEAP32[$5 + 24 >> 2] = 0;
     HEAP8[$5 + 23 | 0] = 1;
     HEAP8[$5 + 22 | 0] = 69;
     while (1) {
      label$7 : {
       HEAP32[16874] = 0;
       $2 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1679, $5 + 376 | 0, $5 + 368 | 0) | 0;
       $6 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($6 | 0) == 1) {
        break label$7
       }
       if (!$2) {
        break label$3
       }
       if (HEAP32[$5 + 196 >> 2] == (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($1) + $0 | 0)) {
        $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($1);
        $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($1);
        HEAP32[16874] = 0;
        __invoke_void___22class_std____2__vector_13_22__i32(1652, $1 | 0, $0 << 1);
        $0 = HEAP32[16874];
        HEAP32[16874] = 0;
        if (($0 | 0) == 1) {
         break label$2
        }
        $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($1);
        HEAP32[16874] = 0;
        __invoke_void___22class_std____2__vector_13_22__i32(1652, $1 | 0, $0 | 0);
        $0 = HEAP32[16874];
        HEAP32[16874] = 0;
        if (($0 | 0) == 1) {
         break label$2
        }
        $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29_20const($1, 0);
        HEAP32[$5 + 196 >> 2] = $2 + $0;
       }
       HEAP32[16874] = 0;
       $2 = __invoke_i1___22class_std____2__basic_ifstream_22_(1681, $5 + 376 | 0) | 0;
       $6 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($6 | 0) == 1) {
        break label$7
       }
       HEAP32[16874] = 0;
       $2 = __invoke_i32_i8_i8__i8__i8__i8___i8_i8___22class_std____2__basic_string_22__i32__i32___i32__i8_(1687, $2 | 0, $5 + 23 | 0, $5 + 22 | 0, $0 | 0, $5 + 196 | 0, HEAP32[$5 + 236 >> 2], HEAP32[$5 + 232 >> 2], $5 + 216 | 0, $5 + 32 | 0, $5 + 28 | 0, $5 + 24 | 0, $5 + 240 | 0) | 0;
       $6 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($6 | 0) == 1) {
        break label$7
       }
       if ($2) {
        break label$3
       }
       HEAP32[16874] = 0;
       __invoke_i1___22class_std____2__basic_ifstream_22_(1683, $5 + 376 | 0) | 0;
       $2 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($2 | 0) != 1) {
        continue
       }
      }
      break;
     };
     break label$2;
    }
    break label$2;
   }
   label$9 : {
    if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($5 + 216 | 0) | !HEAPU8[$5 + 23 | 0]) {
     break label$9
    }
    $2 = HEAP32[$5 + 28 >> 2];
    if (($2 - ($5 + 32 | 0) | 0) > 159) {
     break label$9
    }
    HEAP32[$5 + 28 >> 2] = $2 + 4;
    HEAP32[$2 >> 2] = HEAP32[$5 + 24 >> 2];
   }
   HEAP32[16874] = 0;
   __invoke_void___22class_std____2__vector_22__double__double__i32(1668, $5 | 0, $0 | 0, HEAP32[$5 + 196 >> 2], $3 | 0);
   $0 = HEAP32[16874];
   HEAP32[16874] = 0;
   label$10 : {
    if (($0 | 0) == 1) {
     break label$10
    }
    $0 = HEAP32[$5 + 8 >> 2];
    $2 = HEAP32[$5 + 12 >> 2];
    $6 = HEAP32[$5 + 4 >> 2];
    HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
    HEAP32[$4 + 4 >> 2] = $6;
    HEAP32[$4 + 8 >> 2] = $0;
    HEAP32[$4 + 12 >> 2] = $2;
    HEAP32[16874] = 0;
    __invoke_void___22class_std____2__vector_22__double__double__i32(1655, $5 + 216 | 0, $5 + 32 | 0, HEAP32[$5 + 28 >> 2], $3 | 0);
    $0 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($0 | 0) == 1) {
     break label$10
    }
    HEAP32[16874] = 0;
    $0 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1680, $5 + 376 | 0, $5 + 368 | 0) | 0;
    $2 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($2 | 0) == 1) {
     break label$10
    }
    if ($0) {
     HEAP32[$3 >> 2] = HEAP32[$3 >> 2] | 2
    }
    $0 = HEAP32[$5 + 376 >> 2];
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($1);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($5 + 216 | 0);
    $1 = $5 + 384 | 0;
    if ($1 >>> 0 < global$2 >>> 0) {
     __handle_stack_overflow()
    }
    global$0 = $1;
    return $0;
   }
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($1);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($5 + 216 | 0);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20void___29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $7 = 0;
  $0 = global$0 - 352 | 0;
  $7 = $0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $7;
  HEAP32[$0 + 336 >> 2] = $2;
  HEAP32[$0 + 344 >> 2] = $1;
  $7 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($0 + 208 | 0);
  HEAP32[16874] = 0;
  std____2__ios_base__getloc_28_29_20const($0 + 16 | 0, $3);
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    label$4 : {
     label$7 : {
      if (($1 | 0) != 1) {
       HEAP32[16874] = 0;
       $1 = __invoke_i1___22class_std____2__basic_ifstream_22_(1674, $0 + 16 | 0) | 0;
       $2 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($2 | 0) == 1) {
        break label$7
       }
       HEAP32[16874] = 0;
       __invoke___22class_std____2__shared_ptr_22____22class_std____2__shared_ptr_22___class_maxiOsc____22class_emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc____val_deleter_22__i32(1688, $1 | 0, 39840, 39866, $0 + 224 | 0) | 0;
       $1 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($1 | 0) == 1) {
        break label$7
       }
       std____2__locale___locale_28_29($0 + 16 | 0);
       $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($0 + 192 | 0);
       $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($2);
       HEAP32[16874] = 0;
       __invoke_void___22class_std____2__vector_13_22__i32(1652, $2 | 0, $1 | 0);
       $1 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($1 | 0) == 1) {
        break label$3
       }
       $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29_20const($2, 0);
       HEAP32[$0 + 188 >> 2] = $1;
       HEAP32[$0 + 12 >> 2] = $0 + 16;
       HEAP32[$0 + 8 >> 2] = 0;
       while (1) {
        label$10 : {
         HEAP32[16874] = 0;
         $3 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1679, $0 + 344 | 0, $0 + 336 | 0) | 0;
         $6 = HEAP32[16874];
         HEAP32[16874] = 0;
         if (($6 | 0) == 1) {
          break label$10
         }
         if (!$3) {
          break label$4
         }
         if (HEAP32[$0 + 188 >> 2] == (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($2) + $1 | 0)) {
          $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($2);
          $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($2);
          HEAP32[16874] = 0;
          __invoke_void___22class_std____2__vector_13_22__i32(1652, $2 | 0, $1 << 1);
          $1 = HEAP32[16874];
          HEAP32[16874] = 0;
          if (($1 | 0) == 1) {
           break label$3
          }
          $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($2);
          HEAP32[16874] = 0;
          __invoke_void___22class_std____2__vector_13_22__i32(1652, $2 | 0, $1 | 0);
          $1 = HEAP32[16874];
          HEAP32[16874] = 0;
          if (($1 | 0) == 1) {
           break label$3
          }
          $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29_20const($2, 0);
          HEAP32[$0 + 188 >> 2] = $3 + $1;
         }
         HEAP32[16874] = 0;
         $3 = __invoke_i1___22class_std____2__basic_ifstream_22_(1681, $0 + 344 | 0) | 0;
         $6 = HEAP32[16874];
         HEAP32[16874] = 0;
         if (($6 | 0) == 1) {
          break label$10
         }
         HEAP32[16874] = 0;
         $3 = __invoke_i32_i8_i32_i8__i8___i32__i8___22class_std____2__basic_string_22__i32__i32___i8_(1684, $3 | 0, 16, $1 | 0, $0 + 188 | 0, $0 + 8 | 0, 0, $7 | 0, $0 + 16 | 0, $0 + 12 | 0, $0 + 224 | 0) | 0;
         $6 = HEAP32[16874];
         HEAP32[16874] = 0;
         if (($6 | 0) == 1) {
          break label$10
         }
         if ($3) {
          break label$4
         }
         HEAP32[16874] = 0;
         __invoke_i1___22class_std____2__basic_ifstream_22_(1683, $0 + 344 | 0) | 0;
         $3 = HEAP32[16874];
         HEAP32[16874] = 0;
         if (($3 | 0) != 1) {
          continue
         }
        }
        break;
       };
       break label$3;
      }
      $1 = __cxa_find_matching_catch_2() | 0;
      getTempRet0() | 0;
      break label$2;
     }
     $1 = __cxa_find_matching_catch_2() | 0;
     getTempRet0() | 0;
     std____2__locale___locale_28_29($0 + 16 | 0);
     break label$2;
    }
    HEAP32[16874] = 0;
    __invoke_void___22class_std____2__vector_13_22__i32(1652, $2 | 0, HEAP32[$0 + 188 >> 2] - $1 | 0);
    $1 = HEAP32[16874];
    HEAP32[16874] = 0;
    label$12 : {
     if (($1 | 0) == 1) {
      break label$12
     }
     $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_pointer_28_29_20const($2);
     HEAP32[16874] = 0;
     $3 = __invoke__struct___locale_struct_(1670) | 0;
     $6 = HEAP32[16874];
     HEAP32[16874] = 0;
     if (($6 | 0) == 1) {
      break label$12
     }
     HEAP32[$0 >> 2] = $5;
     HEAP32[16874] = 0;
     $1 = __invoke___22class_std____2__shared_ptr_22____22class_std____2__shared_ptr_22___class_maxiOsc____22class_emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc____val_deleter_22__i32(1671, $1 | 0, $3 | 0, 39873, $0 | 0) | 0;
     $3 = HEAP32[16874];
     HEAP32[16874] = 0;
     if (($3 | 0) == 1) {
      break label$12
     }
     if (($1 | 0) != 1) {
      HEAP32[$4 >> 2] = 4
     }
     HEAP32[16874] = 0;
     $1 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1680, $0 + 344 | 0, $0 + 336 | 0) | 0;
     $3 = HEAP32[16874];
     HEAP32[16874] = 0;
     if (($3 | 0) == 1) {
      break label$12
     }
     if ($1) {
      HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2
     }
     $1 = HEAP32[$0 + 344 >> 2];
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($2);
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($7);
     $0 = $0 + 352 | 0;
     if ($0 >>> 0 < global$2 >>> 0) {
      __handle_stack_overflow()
     }
     global$0 = $0;
     return $1 | 0;
    }
   }
   $1 = __cxa_find_matching_catch_2() | 0;
   getTempRet0() | 0;
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($2);
  }
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($7);
  __resumeException($1 | 0);
  abort();
 }
 
 function std____2__ctype_wchar_t___widen_28char_20const__2c_20char_20const__2c_20wchar_t__29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0, $1, $2, $3) | 0;
 }
 
 function wchar_t_20const__20std____2__find_wchar_t_20const__2c_20wchar_t__28wchar_t_20const__2c_20wchar_t_20const__2c_20wchar_t_20const__29($0, $1, $2) {
  $2 = HEAP32[$2 >> 2];
  while (1) {
   label$2 : {
    if (($0 | 0) != ($1 | 0)) {
     if (($2 | 0) != HEAP32[$0 >> 2]) {
      break label$2
     }
    } else {
     $0 = $1
    }
    return $0;
   }
   $0 = $0 + 4 | 0;
   continue;
  };
 }
 
 function std____2__numpunct_char___decimal_point_28_29_20const($0) {
  $0 = $0 | 0;
  return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 12 >> 2]]($0) | 0;
 }
 
 function std____2__numpunct_char___thousands_sep_28_29_20const($0) {
  $0 = $0 | 0;
  return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0) | 0;
 }
 
 function std____2__numpunct_char___grouping_28_29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 20 >> 2]]($0, $1);
 }
 
 function wchar_t_20const__20std____2____num_get_wchar_t_____do_widen_p_wchar_t__28std____2__ios_base__2c_20wchar_t__29_20const($0, $1) {
  var $2 = 0, $3 = 0;
  $2 = global$0 - 16 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  std____2__ios_base__getloc_28_29_20const($2 + 8 | 0, $0);
  HEAP32[16874] = 0;
  $0 = __invoke_i1___22class_std____2__basic_ifstream_22_(1674, $2 + 8 | 0) | 0;
  $3 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   if (($3 | 0) == 1) {
    break label$2
   }
   HEAP32[16874] = 0;
   __invoke___22class_std____2__shared_ptr_22____22class_std____2__shared_ptr_22___class_maxiOsc____22class_emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc____val_deleter_22__i32(1688, $0 | 0, 39840, 39866, $1 | 0) | 0;
   $0 = HEAP32[16874];
   HEAP32[16874] = 0;
   if (($0 | 0) == 1) {
    break label$2
   }
   std____2__locale___locale_28_29($2 + 8 | 0);
   $0 = $2 + 16 | 0;
   if ($0 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $0;
   return $1;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__locale___locale_28_29($2 + 8 | 0);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20char_2c_20bool_29_20const($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0;
  $5 = global$0 - 48 | 0;
  $6 = $5;
  if ($5 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $6;
  HEAP32[$5 + 40 >> 2] = $1;
  label$2 : {
   if (!(HEAP32[$2 + 4 >> 2] & 1)) {
    $2 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($0, $1, $2, $3, $4) | 0;
    break label$2;
   }
   std____2__ios_base__getloc_28_29_20const($5 + 24 | 0, $2);
   HEAP32[16874] = 0;
   $0 = __invoke_i1___22class_std____2__basic_ifstream_22_(1640, $5 + 24 | 0) | 0;
   $1 = HEAP32[16874];
   HEAP32[16874] = 0;
   label$4 : {
    if (($1 | 0) != 1) {
     std____2__locale___locale_28_29($5 + 24 | 0);
     label$6 : {
      if ($4) {
       std____2__numpunct_char___truename_28_29_20const($5 + 24 | 0, $0);
       break label$6;
      }
      std____2__numpunct_char___falsename_28_29_20const($5 + 24 | 0, $0);
     }
     HEAP32[$5 + 16 >> 2] = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___begin_28_29($5 + 24 | 0);
     while (1) {
      HEAP32[$5 + 8 >> 2] = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___end_28_29($5 + 24 | 0);
      if (!bool_20std____2__operator___double___28std____2____wrap_iter_double___20const__2c_20std____2____wrap_iter_double___20const__29($5 + 16 | 0, $5 + 8 | 0)) {
       $2 = HEAP32[$5 + 40 >> 2];
       std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($5 + 24 | 0);
       break label$2;
      }
      $0 = HEAP8[HEAP32[$5 + 16 >> 2]];
      HEAP32[16874] = 0;
      __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1557, $5 + 40 | 0, $0 | 0) | 0;
      $0 = HEAP32[16874];
      HEAP32[16874] = 0;
      if (($0 | 0) != 1) {
       std____2____wrap_iter_char____operator___28_29($5 + 16 | 0);
       continue;
      }
      break;
     };
     $2 = __cxa_find_matching_catch_2() | 0;
     getTempRet0() | 0;
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($5 + 24 | 0);
     break label$4;
    }
    $2 = __cxa_find_matching_catch_2() | 0;
    getTempRet0() | 0;
    std____2__locale___locale_28_29($5 + 24 | 0);
   }
   __resumeException($2 | 0);
   abort();
  }
  $0 = $5 + 48 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
  return $2 | 0;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___begin_28_29($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  $0 = HEAP32[std____2____compressed_pair_elem_std____2__allocator_double___2c_201_2c_20false_____compressed_pair_elem_std____2__allocator_double___2c_20void__28std____2__allocator_double___29($1 + 8 | 0, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_pointer_28_29_20const($0)) >> 2];
  $1 = $1 + 16 | 0;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  return $0;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___end_28_29($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  $0 = HEAP32[std____2____compressed_pair_elem_std____2__allocator_double___2c_201_2c_20false_____compressed_pair_elem_std____2__allocator_double___2c_20void__28std____2__allocator_double___29($1 + 8 | 0, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_pointer_28_29_20const($0) + std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($0) | 0) >> 2];
  $1 = $1 + 16 | 0;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  return $0;
 }
 
 function std____2____wrap_iter_char____operator___28_29($0) {
  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
 }
 
 function std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20char_2c_20long_29_20const($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  $0 = global$0 - 32 | 0;
  $5 = $0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $5;
  HEAP16[$0 + 28 >> 1] = HEAPU8[39888] | HEAPU8[39889] << 8;
  HEAP32[$0 + 24 >> 2] = HEAPU8[39884] | HEAPU8[39885] << 8 | (HEAPU8[39886] << 16 | HEAPU8[39887] << 24);
  std____2____num_put_base____format_int_28char__2c_20char_20const__2c_20bool_2c_20unsigned_20int_29($0 + 24 | 1, 39876, 1, HEAP32[$2 + 4 >> 2]);
  $6 = HEAP32[$2 + 4 >> 2];
  $5 = $0 + -16 | 0;
  $7 = $5;
  if ($5 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $5;
  $8 = std____2____cloc_28_29();
  HEAP32[$0 >> 2] = $4;
  $6 = std____2____libcpp_snprintf_l_28char__2c_20unsigned_20long_2c_20__locale_struct__2c_20char_20const__2c_20____29($5, ($6 >>> 9 & 1) + 13 | 0, $8, $0 + 24 | 0, $0) + $5 | 0;
  $8 = std____2____num_put_base____identify_padding_28char__2c_20char__2c_20std____2__ios_base_20const__29($5, $6, $2);
  $4 = $7 + -32 | 0;
  $7 = $4;
  if ($4 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $7;
  std____2__ios_base__getloc_28_29_20const($0 + 8 | 0, $2);
  HEAP32[16874] = 0;
  __invoke_void_i8__i8__i8__i8__i8___i8_____22class_std____2__locale_22_(1690, $5 | 0, $8 | 0, $6 | 0, $4 | 0, $0 + 20 | 0, $0 + 16 | 0, $0 + 8 | 0);
  $5 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($5 | 0) != 1) {
   std____2__locale___locale_28_29($0 + 8 | 0);
   $1 = std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2____pad_and_output_char_2c_20std____2__char_traits_char__20__28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20char_20const__2c_20char_20const__2c_20char_20const__2c_20std____2__ios_base__2c_20char_29($1, $4, HEAP32[$0 + 20 >> 2], HEAP32[$0 + 16 >> 2], $2, $3);
   $0 = $0 + 32 | 0;
   if ($0 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $0;
   return $1 | 0;
  }
  $1 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__locale___locale_28_29($0 + 8 | 0);
  __resumeException($1 | 0);
  abort();
 }
 
 function std____2____num_put_base____format_int_28char__2c_20char_20const__2c_20bool_2c_20unsigned_20int_29($0, $1, $2, $3) {
  var $4 = 0;
  if ($3 & 2048) {
   HEAP8[$0 | 0] = 43;
   $0 = $0 + 1 | 0;
  }
  if ($3 & 512) {
   HEAP8[$0 | 0] = 35;
   $0 = $0 + 1 | 0;
  }
  while (1) {
   $4 = HEAPU8[$1 | 0];
   if ($4) {
    HEAP8[$0 | 0] = $4;
    $0 = $0 + 1 | 0;
    $1 = $1 + 1 | 0;
    continue;
   }
   break;
  };
  $4 = $3 & 74;
  $1 = 111;
  label$5 : {
   if (($4 | 0) == 64) {
    break label$5
   }
   $1 = $3 & 16384 ? 88 : 120;
   if (($4 | 0) == 8) {
    break label$5
   }
   $1 = $2 ? 100 : 117;
  }
  HEAP8[$0 | 0] = $1;
 }
 
 function std____2____libcpp_snprintf_l_28char__2c_20unsigned_20long_2c_20__locale_struct__2c_20char_20const__2c_20____29($0, $1, $2, $3, $4) {
  var $5 = 0, $6 = 0;
  $5 = global$0 - 16 | 0;
  $6 = $5;
  if ($5 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $6;
  HEAP32[$5 + 12 >> 2] = $2;
  HEAP32[$5 + 8 >> 2] = $4;
  $2 = std____2____libcpp_locale_guard____libcpp_locale_guard_28__locale_struct___29($5, $5 + 12 | 0);
  $0 = vsnprintf($0, $1, $3, HEAP32[$5 + 8 >> 2]);
  std____2____libcpp_locale_guard_____libcpp_locale_guard_28_29($2);
  $1 = $5 + 16 | 0;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  return $0;
 }
 
 function std____2____num_put_base____identify_padding_28char__2c_20char__2c_20std____2__ios_base_20const__29($0, $1, $2) {
  var $3 = 0;
  $2 = HEAP32[$2 + 4 >> 2] & 176;
  if (($2 | 0) == 32) {
   return $1
  }
  label$2 : {
   if (($2 | 0) != 16) {
    break label$2
   }
   $2 = HEAPU8[$0 | 0];
   $3 = $2 + -43 | 0;
   if (!($3 >>> 0 > 2 | !($3 - 1))) {
    return $0 + 1 | 0
   }
   if (($2 | 0) != 48 | ($1 - $0 | 0) < 2 | (HEAPU8[$0 + 1 | 0] | 32) != 120) {
    break label$2
   }
   $0 = $0 + 2 | 0;
  }
  return $0;
 }
 
 function std____2____num_put_char_____widen_and_group_int_28char__2c_20char__2c_20char__2c_20char__2c_20char___2c_20char___2c_20std____2__locale_20const__29($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  var $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
  $10 = global$0 - 16 | 0;
  $9 = $10;
  if ($9 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $9;
  $11 = std____2__ctype_char__20const__20std____2__use_facet_std____2__ctype_char__20__28std____2__locale_20const__29($6);
  $6 = std____2__numpunct_char__20const__20std____2__use_facet_std____2__numpunct_char__20__28std____2__locale_20const__29($6);
  std____2__numpunct_char___grouping_28_29_20const($10, $6);
  label$2 : {
   label$3 : {
    if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___empty_28_29_20const($10)) {
     HEAP32[16874] = 0;
     __invoke___22class_std____2__shared_ptr_22____22class_std____2__shared_ptr_22___class_maxiOsc____22class_emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc____val_deleter_22__i32(1665, $11 | 0, $0 | 0, $2 | 0, $3 | 0) | 0;
     $6 = HEAP32[16874];
     HEAP32[16874] = 0;
     if (($6 | 0) == 1) {
      break label$3
     }
     $6 = ($2 - $0 | 0) + $3 | 0;
     HEAP32[$5 >> 2] = $6;
     break label$2;
    }
    HEAP32[$5 >> 2] = $3;
    $9 = $0;
    $7 = HEAPU8[$9 | 0];
    $8 = $7 + -43 | 0;
    label$8 : {
     if ($8 >>> 0 > 2) {
      break label$8
     }
     if (!($8 - 1)) {
      break label$8
     }
     HEAP32[16874] = 0;
     $9 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(32, $11 | 0, $7 << 24 >> 24) | 0;
     $7 = HEAP32[16874];
     HEAP32[16874] = 0;
     if (($7 | 0) == 1) {
      break label$3
     }
     $7 = HEAP32[$5 >> 2];
     HEAP32[$5 >> 2] = $7 + 1;
     HEAP8[$7 | 0] = $9;
     $9 = $0 + 1 | 0;
    }
    if (!(HEAPU8[$9 | 0] != 48 | ($2 - $9 | 0) < 2 | (HEAPU8[$9 + 1 | 0] | 32) != 120)) {
     HEAP32[16874] = 0;
     $7 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(32, $11 | 0, 48) | 0;
     $8 = HEAP32[16874];
     HEAP32[16874] = 0;
     if (($8 | 0) == 1) {
      break label$3
     }
     $8 = HEAP32[$5 >> 2];
     HEAP32[$5 >> 2] = $8 + 1;
     HEAP8[$8 | 0] = $7;
     $7 = HEAP8[$9 + 1 | 0];
     HEAP32[16874] = 0;
     $7 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(32, $11 | 0, $7 | 0) | 0;
     $8 = HEAP32[16874];
     HEAP32[16874] = 0;
     if (($8 | 0) == 1) {
      break label$3
     }
     $8 = HEAP32[$5 >> 2];
     HEAP32[$5 >> 2] = $8 + 1;
     HEAP8[$8 | 0] = $7;
     $9 = $9 + 2 | 0;
    }
    $8 = 0;
    HEAP32[16874] = 0;
    __invoke_void___22class_std____2__vector_13_22__i32(1691, $9 | 0, $2 | 0);
    $7 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($7 | 0) == 1) {
     break label$3
    }
    HEAP32[16874] = 0;
    $14 = __invoke_i1___22class_std____2__basic_ifstream_22_(1656, $6 | 0) | 0;
    $6 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($6 | 0) == 1) {
     break label$3
    }
    $7 = 0;
    $6 = $9;
    while (1) {
     label$10 : {
      if ($6 >>> 0 >= $2 >>> 0) {
       $6 = HEAP32[$5 >> 2];
       HEAP32[16874] = 0;
       __invoke_void___22class_std____2__vector_13_22__i32(1691, ($9 - $0 | 0) + $3 | 0, $6 | 0);
       $6 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($6 | 0) == 1) {
        break label$10
       }
       $6 = HEAP32[$5 >> 2];
       break label$2;
      }
      label$13 : {
       if (!HEAPU8[std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29_20const($10, $7) | 0]) {
        break label$13
       }
       if (HEAP8[std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29_20const($10, $7) | 0] != ($8 | 0)) {
        break label$13
       }
       $8 = HEAP32[$5 >> 2];
       HEAP32[$5 >> 2] = $8 + 1;
       HEAP8[$8 | 0] = $14;
       $7 = ($7 >>> 0 < std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($10) + -1 >>> 0) + $7 | 0;
       $8 = 0;
      }
      $13 = HEAP8[$6 | 0];
      HEAP32[16874] = 0;
      $13 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(32, $11 | 0, $13 | 0) | 0;
      $12 = HEAP32[16874];
      HEAP32[16874] = 0;
      if (($12 | 0) != 1) {
       $12 = HEAP32[$5 >> 2];
       HEAP32[$5 >> 2] = $12 + 1;
       HEAP8[$12 | 0] = $13;
       $6 = $6 + 1 | 0;
       $8 = $8 + 1 | 0;
       continue;
      }
     }
     break;
    };
   }
   $6 = __cxa_find_matching_catch_2() | 0;
   getTempRet0() | 0;
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($10);
   __resumeException($6 | 0);
   abort();
  }
  HEAP32[$4 >> 2] = ($1 | 0) == ($2 | 0) ? $6 : ($1 - $0 | 0) + $3 | 0;
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($10);
  $0 = $10 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function void_20std____2__reverse_char___28char__2c_20char__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  void_20std____2____reverse_char___28char__2c_20char__2c_20std____2__random_access_iterator_tag_29($0, $1);
 }
 
 function std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20char_2c_20long_20long_29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $7 = 0, $8 = 0, $9 = 0;
  $0 = global$0 - 32 | 0;
  $6 = $0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $6;
  HEAP32[$0 + 24 >> 2] = 37;
  HEAP32[$0 + 28 >> 2] = 0;
  std____2____num_put_base____format_int_28char__2c_20char_20const__2c_20bool_2c_20unsigned_20int_29($0 + 24 | 1, 39878, 1, HEAP32[$2 + 4 >> 2]);
  $7 = HEAP32[$2 + 4 >> 2];
  $6 = $0 + -32 | 0;
  $8 = $6;
  if ($6 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $6;
  $9 = std____2____cloc_28_29();
  HEAP32[$0 >> 2] = $4;
  HEAP32[$0 + 4 >> 2] = $5;
  $5 = std____2____libcpp_snprintf_l_28char__2c_20unsigned_20long_2c_20__locale_struct__2c_20char_20const__2c_20____29($6, ($7 >>> 9 & 1) + 23 | 0, $9, $0 + 24 | 0, $0) + $6 | 0;
  $7 = std____2____num_put_base____identify_padding_28char__2c_20char__2c_20std____2__ios_base_20const__29($6, $5, $2);
  $4 = $8 + -48 | 0;
  $8 = $4;
  if ($4 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $8;
  std____2__ios_base__getloc_28_29_20const($0 + 8 | 0, $2);
  HEAP32[16874] = 0;
  __invoke_void_i8__i8__i8__i8__i8___i8_____22class_std____2__locale_22_(1690, $6 | 0, $7 | 0, $5 | 0, $4 | 0, $0 + 20 | 0, $0 + 16 | 0, $0 + 8 | 0);
  $5 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($5 | 0) != 1) {
   std____2__locale___locale_28_29($0 + 8 | 0);
   $1 = std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2____pad_and_output_char_2c_20std____2__char_traits_char__20__28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20char_20const__2c_20char_20const__2c_20char_20const__2c_20std____2__ios_base__2c_20char_29($1, $4, HEAP32[$0 + 20 >> 2], HEAP32[$0 + 16 >> 2], $2, $3);
   $0 = $0 + 32 | 0;
   if ($0 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $0;
   return $1 | 0;
  }
  $1 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__locale___locale_28_29($0 + 8 | 0);
  __resumeException($1 | 0);
  abort();
 }
 
 function std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20char_2c_20unsigned_20long_29_20const($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  $0 = global$0 - 32 | 0;
  $5 = $0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $5;
  HEAP16[$0 + 28 >> 1] = HEAPU8[39888] | HEAPU8[39889] << 8;
  HEAP32[$0 + 24 >> 2] = HEAPU8[39884] | HEAPU8[39885] << 8 | (HEAPU8[39886] << 16 | HEAPU8[39887] << 24);
  std____2____num_put_base____format_int_28char__2c_20char_20const__2c_20bool_2c_20unsigned_20int_29($0 + 24 | 1, 39876, 0, HEAP32[$2 + 4 >> 2]);
  $6 = HEAP32[$2 + 4 >> 2];
  $5 = $0 + -16 | 0;
  $7 = $5;
  if ($5 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $5;
  $8 = std____2____cloc_28_29();
  HEAP32[$0 >> 2] = $4;
  $6 = std____2____libcpp_snprintf_l_28char__2c_20unsigned_20long_2c_20__locale_struct__2c_20char_20const__2c_20____29($5, $6 >>> 9 & 1 | 12, $8, $0 + 24 | 0, $0) + $5 | 0;
  $8 = std____2____num_put_base____identify_padding_28char__2c_20char__2c_20std____2__ios_base_20const__29($5, $6, $2);
  $4 = $7 + -32 | 0;
  $7 = $4;
  if ($4 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $7;
  std____2__ios_base__getloc_28_29_20const($0 + 8 | 0, $2);
  HEAP32[16874] = 0;
  __invoke_void_i8__i8__i8__i8__i8___i8_____22class_std____2__locale_22_(1690, $5 | 0, $8 | 0, $6 | 0, $4 | 0, $0 + 20 | 0, $0 + 16 | 0, $0 + 8 | 0);
  $5 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($5 | 0) != 1) {
   std____2__locale___locale_28_29($0 + 8 | 0);
   $1 = std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2____pad_and_output_char_2c_20std____2__char_traits_char__20__28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20char_20const__2c_20char_20const__2c_20char_20const__2c_20std____2__ios_base__2c_20char_29($1, $4, HEAP32[$0 + 20 >> 2], HEAP32[$0 + 16 >> 2], $2, $3);
   $0 = $0 + 32 | 0;
   if ($0 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $0;
   return $1 | 0;
  }
  $1 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__locale___locale_28_29($0 + 8 | 0);
  __resumeException($1 | 0);
  abort();
 }
 
 function std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20char_2c_20unsigned_20long_20long_29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $7 = 0, $8 = 0, $9 = 0;
  $0 = global$0 - 32 | 0;
  $6 = $0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $6;
  HEAP32[$0 + 24 >> 2] = 37;
  HEAP32[$0 + 28 >> 2] = 0;
  std____2____num_put_base____format_int_28char__2c_20char_20const__2c_20bool_2c_20unsigned_20int_29($0 + 24 | 1, 39878, 0, HEAP32[$2 + 4 >> 2]);
  $7 = HEAP32[$2 + 4 >> 2];
  $6 = $0 + -32 | 0;
  $8 = $6;
  if ($6 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $6;
  $9 = std____2____cloc_28_29();
  HEAP32[$0 >> 2] = $4;
  HEAP32[$0 + 4 >> 2] = $5;
  $5 = std____2____libcpp_snprintf_l_28char__2c_20unsigned_20long_2c_20__locale_struct__2c_20char_20const__2c_20____29($6, ($7 >>> 9 & 1 | 22) + 1 | 0, $9, $0 + 24 | 0, $0) + $6 | 0;
  $7 = std____2____num_put_base____identify_padding_28char__2c_20char__2c_20std____2__ios_base_20const__29($6, $5, $2);
  $4 = $8 + -48 | 0;
  $8 = $4;
  if ($4 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $8;
  std____2__ios_base__getloc_28_29_20const($0 + 8 | 0, $2);
  HEAP32[16874] = 0;
  __invoke_void_i8__i8__i8__i8__i8___i8_____22class_std____2__locale_22_(1690, $6 | 0, $7 | 0, $5 | 0, $4 | 0, $0 + 20 | 0, $0 + 16 | 0, $0 + 8 | 0);
  $5 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($5 | 0) != 1) {
   std____2__locale___locale_28_29($0 + 8 | 0);
   $1 = std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2____pad_and_output_char_2c_20std____2__char_traits_char__20__28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20char_20const__2c_20char_20const__2c_20char_20const__2c_20std____2__ios_base__2c_20char_29($1, $4, HEAP32[$0 + 20 >> 2], HEAP32[$0 + 16 >> 2], $2, $3);
   $0 = $0 + 32 | 0;
   if ($0 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $0;
   return $1 | 0;
  }
  $1 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__locale___locale_28_29($0 + 8 | 0);
  __resumeException($1 | 0);
  abort();
 }
 
 function std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20char_2c_20double_29_20const($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = +$4;
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
  $5 = global$0 - 208 | 0;
  $0 = $5;
  if ($5 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
  HEAP32[$5 + 200 >> 2] = 37;
  HEAP32[$5 + 204 >> 2] = 0;
  $6 = std____2____num_put_base____format_float_28char__2c_20char_20const__2c_20unsigned_20int_29($5 + 200 | 1, 39881, HEAP32[$2 + 4 >> 2]);
  HEAP32[$5 + 156 >> 2] = $5 + 160;
  $0 = std____2____cloc_28_29();
  label$2 : {
   if ($6) {
    $7 = HEAP32[$2 + 8 >> 2];
    HEAPF64[$5 + 40 >> 3] = $4;
    HEAP32[$5 + 32 >> 2] = $7;
    $0 = std____2____libcpp_snprintf_l_28char__2c_20unsigned_20long_2c_20__locale_struct__2c_20char_20const__2c_20____29($5 + 160 | 0, 30, $0, $5 + 200 | 0, $5 + 32 | 0);
    break label$2;
   }
   HEAPF64[$5 + 48 >> 3] = $4;
   $0 = std____2____libcpp_snprintf_l_28char__2c_20unsigned_20long_2c_20__locale_struct__2c_20char_20const__2c_20____29($5 + 160 | 0, 30, $0, $5 + 200 | 0, $5 + 48 | 0);
  }
  HEAP32[$5 + 80 >> 2] = 1644;
  $7 = std____2__unique_ptr__IO_FILE_2c_20int_20_28__29_28_IO_FILE__29___unique_ptr_true_2c_20void__28_IO_FILE__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_int_20_28__29_28_IO_FILE__29__2c_20true_____good_rval_ref_type_29($5 + 144 | 0, 0, $5 + 80 | 0);
  label$4 : {
   label$5 : {
    label$6 : {
     if (($0 | 0) >= 30) {
      label$8 : {
       if ($6) {
        HEAP32[16874] = 0;
        $0 = __invoke__struct___locale_struct_(1670) | 0;
        $6 = HEAP32[16874];
        HEAP32[16874] = 0;
        if (($6 | 0) == 1) {
         break label$5
        }
        HEAP32[$5 >> 2] = HEAP32[$2 + 8 >> 2];
        HEAP32[16874] = 0;
        HEAPF64[$5 + 8 >> 3] = $4;
        $0 = __invoke___22class_std____2__shared_ptr_22____22class_std____2__shared_ptr_22___class_maxiOsc____22class_emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc____val_deleter_22__i32(1692, $5 + 156 | 0, $0 | 0, $5 + 200 | 0, $5 | 0) | 0;
        $6 = HEAP32[16874];
        HEAP32[16874] = 0;
        if (($6 | 0) != 1) {
         break label$8
        }
        break label$5;
       }
       HEAP32[16874] = 0;
       $0 = __invoke__struct___locale_struct_(1670) | 0;
       $6 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($6 | 0) == 1) {
        break label$5
       }
       HEAPF64[$5 + 16 >> 3] = $4;
       HEAP32[16874] = 0;
       $0 = __invoke___22class_std____2__shared_ptr_22____22class_std____2__shared_ptr_22___class_maxiOsc____22class_emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc____val_deleter_22__i32(1692, $5 + 156 | 0, $0 | 0, $5 + 200 | 0, $5 + 16 | 0) | 0;
       $6 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($6 | 0) == 1) {
        break label$5
       }
      }
      $6 = HEAP32[$5 + 156 >> 2];
      if (!$6) {
       HEAP32[16874] = 0;
       __invoke_void(1645);
       $0 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($0 | 0) == 1) {
        break label$5
       }
       break label$6;
      }
      std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___reset_28unsigned_20char__29($7, $6);
     }
     $6 = HEAP32[$5 + 156 >> 2];
     $8 = $6 + $0 | 0;
     $10 = std____2____num_put_base____identify_padding_28char__2c_20char__2c_20std____2__ios_base_20const__29($6, $8, $2);
     HEAP32[$5 + 68 >> 2] = 1644;
     $6 = std____2__unique_ptr__IO_FILE_2c_20int_20_28__29_28_IO_FILE__29___unique_ptr_true_2c_20void__28_IO_FILE__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_int_20_28__29_28_IO_FILE__29__2c_20true_____good_rval_ref_type_29($5 + 72 | 0, 0, $5 + 68 | 0);
     label$11 : {
      label$12 : {
       if (HEAP32[$5 + 156 >> 2] == ($5 + 160 | 0)) {
        $0 = $5 + 80 | 0;
        $9 = $5 + 160 | 0;
        break label$12;
       }
       $0 = dlmalloc($0 << 1);
       if (!$0) {
        HEAP32[16874] = 0;
        __invoke_void(1645);
        $0 = HEAP32[16874];
        HEAP32[16874] = 0;
        if (($0 | 0) != 1) {
         break label$6
        }
        $2 = __cxa_find_matching_catch_2() | 0;
        getTempRet0() | 0;
        break label$11;
       }
       std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___reset_28unsigned_20char__29($6, $0);
       $9 = HEAP32[$5 + 156 >> 2];
      }
      HEAP32[16874] = 0;
      std____2__ios_base__getloc_28_29_20const($5 + 56 | 0, $2);
      $11 = HEAP32[16874];
      HEAP32[16874] = 0;
      label$15 : {
       label$16 : {
        if (($11 | 0) != 1) {
         HEAP32[16874] = 0;
         __invoke_void_i8__i8__i8__i8__i8___i8_____22class_std____2__locale_22_(1693, $9 | 0, $10 | 0, $8 | 0, $0 | 0, $5 + 68 | 0, $5 - -64 | 0, $5 + 56 | 0);
         $8 = HEAP32[16874];
         HEAP32[16874] = 0;
         if (($8 | 0) == 1) {
          break label$16
         }
         std____2__locale___locale_28_29($5 + 56 | 0);
         HEAP32[16874] = 0;
         $0 = __invoke___22class_std____2__basic_streambuf_22____22class_std____2__basic_streambuf_22__i8__i8__i8____22class_std____2__ios_base_22__i8(29, $1 | 0, $0 | 0, HEAP32[$5 + 68 >> 2], HEAP32[$5 + 64 >> 2], $2 | 0, $3 | 0) | 0;
         $1 = HEAP32[16874];
         HEAP32[16874] = 0;
         if (($1 | 0) == 1) {
          break label$15
         }
         std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29____unique_ptr_28_29($6);
         std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29____unique_ptr_28_29($7);
         $1 = $5 + 208 | 0;
         if ($1 >>> 0 < global$2 >>> 0) {
          __handle_stack_overflow()
         }
         global$0 = $1;
         return $0 | 0;
        }
        $2 = __cxa_find_matching_catch_2() | 0;
        getTempRet0() | 0;
        break label$11;
       }
       $2 = __cxa_find_matching_catch_2() | 0;
       getTempRet0() | 0;
       std____2__locale___locale_28_29($5 + 56 | 0);
       break label$11;
      }
      $2 = __cxa_find_matching_catch_2() | 0;
      getTempRet0() | 0;
     }
     std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29____unique_ptr_28_29($6);
     break label$4;
    }
    abort();
   }
   $2 = __cxa_find_matching_catch_2() | 0;
   getTempRet0() | 0;
  }
  std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29____unique_ptr_28_29($7);
  __resumeException($2 | 0);
  abort();
 }
 
 function std____2____num_put_base____format_float_28char__2c_20char_20const__2c_20unsigned_20int_29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0;
  if ($2 & 2048) {
   HEAP8[$0 | 0] = 43;
   $0 = $0 + 1 | 0;
  }
  if ($2 & 1024) {
   HEAP8[$0 | 0] = 35;
   $0 = $0 + 1 | 0;
  }
  $3 = $2 & 260;
  if (($3 | 0) != 260) {
   HEAP8[$0 | 0] = 10798;
   HEAP8[$0 + 1 | 0] = 42;
   $5 = 1;
   $0 = $0 + 2 | 0;
  }
  $2 = $2 & 16384;
  while (1) {
   $4 = HEAPU8[$1 | 0];
   if ($4) {
    HEAP8[$0 | 0] = $4;
    $0 = $0 + 1 | 0;
    $1 = $1 + 1 | 0;
    continue;
   }
   break;
  };
  label$6 : {
   label$7 : {
    if (($3 | 0) != 256) {
     if (($3 | 0) != 4) {
      break label$7
     }
     $1 = $2 ? 70 : 102;
     break label$6;
    }
    $1 = $2 ? 69 : 101;
    break label$6;
   }
   $1 = $2 ? 65 : 97;
   if (($3 | 0) == 260) {
    break label$6
   }
   $1 = $2 ? 71 : 103;
  }
  HEAP8[$0 | 0] = $1;
  return $5;
 }
 
 function std____2____libcpp_asprintf_l_28char___2c_20__locale_struct__2c_20char_20const__2c_20____29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0;
  $4 = global$0 - 16 | 0;
  $5 = $4;
  if ($4 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $5;
  HEAP32[$4 + 12 >> 2] = $1;
  HEAP32[$4 + 8 >> 2] = $3;
  $1 = std____2____libcpp_locale_guard____libcpp_locale_guard_28__locale_struct___29($4, $4 + 12 | 0);
  HEAP32[16874] = 0;
  $0 = __invoke___22class_std____2__basic_istream_22____22class_std____2__basic_istream_22__i8__i32(1695, $0 | 0, $2 | 0, HEAP32[$4 + 8 >> 2]) | 0;
  $2 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($2 | 0) != 1) {
   std____2____libcpp_locale_guard_____libcpp_locale_guard_28_29($1);
   $1 = $4 + 16 | 0;
   if ($1 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $1;
   return $0 | 0;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2____libcpp_locale_guard_____libcpp_locale_guard_28_29($1);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____num_put_char_____widen_and_group_float_28char__2c_20char__2c_20char__2c_20char__2c_20char___2c_20char___2c_20std____2__locale_20const__29($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  var $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
  $10 = global$0 - 16 | 0;
  $7 = $10;
  if ($7 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $7;
  $13 = std____2__ctype_char__20const__20std____2__use_facet_std____2__ctype_char__20__28std____2__locale_20const__29($6);
  $16 = std____2__numpunct_char__20const__20std____2__use_facet_std____2__numpunct_char__20__28std____2__locale_20const__29($6);
  std____2__numpunct_char___grouping_28_29_20const($10, $16);
  HEAP32[$5 >> 2] = $3;
  label$2 : {
   $8 = $0;
   $6 = HEAPU8[$8 | 0];
   $7 = $6 + -43 | 0;
   if (!($7 >>> 0 > 2 | !($7 - 1))) {
    HEAP32[16874] = 0;
    $6 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(32, $13 | 0, $6 << 24 >> 24) | 0;
    $7 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($7 | 0) == 1) {
     break label$2
    }
    $7 = HEAP32[$5 >> 2];
    HEAP32[$5 >> 2] = $7 + 1;
    HEAP8[$7 | 0] = $6;
    $8 = $0 + 1 | 0;
   }
   label$6 : {
    if (!(HEAPU8[$8 | 0] != 48 | ($2 - $8 | 0) < 2 | (HEAPU8[$8 + 1 | 0] | 32) != 120)) {
     HEAP32[16874] = 0;
     $6 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(32, $13 | 0, 48) | 0;
     $7 = HEAP32[16874];
     HEAP32[16874] = 0;
     if (($7 | 0) == 1) {
      break label$2
     }
     $7 = HEAP32[$5 >> 2];
     HEAP32[$5 >> 2] = $7 + 1;
     HEAP8[$7 | 0] = $6;
     $6 = HEAP8[$8 + 1 | 0];
     HEAP32[16874] = 0;
     $6 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(32, $13 | 0, $6 | 0) | 0;
     $7 = HEAP32[16874];
     HEAP32[16874] = 0;
     if (($7 | 0) == 1) {
      break label$2
     }
     $7 = HEAP32[$5 >> 2];
     HEAP32[$5 >> 2] = $7 + 1;
     HEAP8[$7 | 0] = $6;
     $8 = $8 + 2 | 0;
     $6 = $8 >>> 0 < $2 >>> 0 ? $2 : $8;
     $7 = $8;
     while (1) {
      if ($7 >>> 0 >= $2 >>> 0) {
       break label$6
      }
      $11 = HEAP8[$7 | 0];
      HEAP32[16874] = 0;
      $9 = __invoke__struct___locale_struct_(1670) | 0;
      $14 = HEAP32[16874];
      HEAP32[16874] = 0;
      if (($14 | 0) == 1) {
       break label$2
      }
      HEAP32[16874] = 0;
      $11 = __isxdigit_l($11, $9);
      $9 = HEAP32[16874];
      HEAP32[16874] = 0;
      if (($9 | 0) == 1) {
       break label$2
      }
      if (!$11) {
       $6 = $7;
       break label$6;
      }
      $7 = $7 + 1 | 0;
      continue;
     };
    }
    $6 = $8 >>> 0 > $2 >>> 0 ? $8 : $2;
    $7 = $8;
    while (1) {
     if ($7 >>> 0 >= $2 >>> 0) {
      break label$6
     }
     $11 = HEAP8[$7 | 0];
     HEAP32[16874] = 0;
     __invoke__struct___locale_struct_(1670) | 0;
     $9 = HEAP32[16874];
     HEAP32[16874] = 0;
     if (($9 | 0) == 1) {
      break label$2
     }
     HEAP32[16874] = 0;
     $11 = isdigit($11);
     $9 = HEAP32[16874];
     HEAP32[16874] = 0;
     if (($9 | 0) == 1) {
      break label$2
     }
     if ($11) {
      $7 = $7 + 1 | 0;
      continue;
     } else {
      $6 = $7
     }
     break;
    };
   }
   label$16 : {
    if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___empty_28_29_20const($10)) {
     $7 = HEAP32[$5 >> 2];
     HEAP32[16874] = 0;
     __invoke___22class_std____2__shared_ptr_22____22class_std____2__shared_ptr_22___class_maxiOsc____22class_emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc____val_deleter_22__i32(1665, $13 | 0, $8 | 0, $6 | 0, $7 | 0) | 0;
     $7 = HEAP32[16874];
     HEAP32[16874] = 0;
     if (($7 | 0) == 1) {
      break label$2
     }
     HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + ($6 - $8 | 0);
     break label$16;
    }
    HEAP32[16874] = 0;
    __invoke_void___22class_std____2__vector_13_22__i32(1691, $8 | 0, $6 | 0);
    $7 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($7 | 0) == 1) {
     break label$2
    }
    HEAP32[16874] = 0;
    $11 = __invoke_i1___22class_std____2__basic_ifstream_22_(1656, $16 | 0) | 0;
    $7 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($7 | 0) != 1) {
     $7 = $8;
     while (1) {
      if ($7 >>> 0 >= $6 >>> 0) {
       $7 = HEAP32[$5 >> 2];
       HEAP32[16874] = 0;
       __invoke_void___22class_std____2__vector_13_22__i32(1691, ($8 - $0 | 0) + $3 | 0, $7 | 0);
       $7 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($7 | 0) != 1) {
        break label$16
       }
       break label$2;
      }
      label$21 : {
       if (HEAP8[std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29_20const($10, $12) | 0] < 1) {
        break label$21
       }
       if (HEAP8[std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29_20const($10, $12) | 0] != ($15 | 0)) {
        break label$21
       }
       $15 = HEAP32[$5 >> 2];
       HEAP32[$5 >> 2] = $15 + 1;
       HEAP8[$15 | 0] = $11;
       $12 = ($12 >>> 0 < std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($10) + -1 >>> 0) + $12 | 0;
       $15 = 0;
      }
      $9 = HEAP8[$7 | 0];
      HEAP32[16874] = 0;
      $9 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(32, $13 | 0, $9 | 0) | 0;
      $14 = HEAP32[16874];
      HEAP32[16874] = 0;
      if (($14 | 0) != 1) {
       $14 = HEAP32[$5 >> 2];
       HEAP32[$5 >> 2] = $14 + 1;
       HEAP8[$14 | 0] = $9;
       $7 = $7 + 1 | 0;
       $15 = $15 + 1 | 0;
       continue;
      }
      break;
     };
     break label$2;
    }
    break label$2;
   }
   $12 = $6 >>> 0 > $2 >>> 0 ? $6 : $2;
   while (1) {
    label$24 : {
     if ($6 >>> 0 < $2 >>> 0) {
      $7 = HEAPU8[$6 | 0];
      if (($7 | 0) != 46) {
       break label$24
      }
      HEAP32[16874] = 0;
      $7 = __invoke_i1___22class_std____2__basic_ifstream_22_(1666, $16 | 0) | 0;
      $8 = HEAP32[16874];
      HEAP32[16874] = 0;
      if (($8 | 0) == 1) {
       break label$2
      }
      $8 = HEAP32[$5 >> 2];
      HEAP32[$5 >> 2] = $8 + 1;
      HEAP8[$8 | 0] = $7;
      $12 = $6 + 1 | 0;
     }
     $6 = HEAP32[$5 >> 2];
     HEAP32[16874] = 0;
     __invoke___22class_std____2__shared_ptr_22____22class_std____2__shared_ptr_22___class_maxiOsc____22class_emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc____val_deleter_22__i32(1665, $13 | 0, $12 | 0, $2 | 0, $6 | 0) | 0;
     $6 = HEAP32[16874];
     HEAP32[16874] = 0;
     if (($6 | 0) == 1) {
      break label$2
     }
     $6 = $5;
     $5 = HEAP32[$5 >> 2] + ($2 - $12 | 0) | 0;
     HEAP32[$6 >> 2] = $5;
     HEAP32[$4 >> 2] = ($1 | 0) == ($2 | 0) ? $5 : ($1 - $0 | 0) + $3 | 0;
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($10);
     $0 = $10 + 16 | 0;
     if ($0 >>> 0 < global$2 >>> 0) {
      __handle_stack_overflow()
     }
     global$0 = $0;
     return;
    }
    HEAP32[16874] = 0;
    $7 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(32, $13 | 0, $7 << 24 >> 24) | 0;
    $8 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($8 | 0) == 1) {
     break label$2
    }
    $8 = HEAP32[$5 >> 2];
    HEAP32[$5 >> 2] = $8 + 1;
    HEAP8[$8 | 0] = $7;
    $6 = $6 + 1 | 0;
    continue;
   };
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($10);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20char_2c_20long_20double_29_20const($0, $1, $2, $3, $4, $5, $6, $7) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  var $8 = 0, $9 = 0, $10 = 0, $11 = 0;
  $8 = global$0 - 256 | 0;
  $0 = $8;
  if ($8 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
  HEAP32[$8 + 248 >> 2] = 37;
  HEAP32[$8 + 252 >> 2] = 0;
  $9 = std____2____num_put_base____format_float_28char__2c_20char_20const__2c_20unsigned_20int_29($8 + 248 | 1, 39882, HEAP32[$2 + 4 >> 2]);
  HEAP32[$8 + 204 >> 2] = $8 + 208;
  $0 = std____2____cloc_28_29();
  label$2 : {
   if ($9) {
    $10 = HEAP32[$2 + 8 >> 2];
    HEAP32[$8 + 72 >> 2] = $6;
    HEAP32[$8 + 76 >> 2] = $7;
    $11 = $8 - -64 | 0;
    HEAP32[$11 >> 2] = $4;
    HEAP32[$11 + 4 >> 2] = $5;
    HEAP32[$8 + 48 >> 2] = $10;
    $0 = std____2____libcpp_snprintf_l_28char__2c_20unsigned_20long_2c_20__locale_struct__2c_20char_20const__2c_20____29($8 + 208 | 0, 30, $0, $8 + 248 | 0, $8 + 48 | 0);
    break label$2;
   }
   HEAP32[$8 + 80 >> 2] = $4;
   HEAP32[$8 + 84 >> 2] = $5;
   HEAP32[$8 + 88 >> 2] = $6;
   HEAP32[$8 + 92 >> 2] = $7;
   $0 = std____2____libcpp_snprintf_l_28char__2c_20unsigned_20long_2c_20__locale_struct__2c_20char_20const__2c_20____29($8 + 208 | 0, 30, $0, $8 + 248 | 0, $8 + 80 | 0);
  }
  HEAP32[$8 + 128 >> 2] = 1644;
  $10 = std____2__unique_ptr__IO_FILE_2c_20int_20_28__29_28_IO_FILE__29___unique_ptr_true_2c_20void__28_IO_FILE__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_int_20_28__29_28_IO_FILE__29__2c_20true_____good_rval_ref_type_29($8 + 192 | 0, 0, $8 + 128 | 0);
  label$4 : {
   label$5 : {
    label$6 : {
     if (($0 | 0) >= 30) {
      label$8 : {
       if ($9) {
        HEAP32[16874] = 0;
        $0 = __invoke__struct___locale_struct_(1670) | 0;
        $9 = HEAP32[16874];
        HEAP32[16874] = 0;
        if (($9 | 0) == 1) {
         break label$5
        }
        $9 = HEAP32[$2 + 8 >> 2];
        HEAP32[$8 + 16 >> 2] = $4;
        HEAP32[$8 + 20 >> 2] = $5;
        HEAP32[$8 + 24 >> 2] = $6;
        HEAP32[$8 + 28 >> 2] = $7;
        HEAP32[$8 >> 2] = $9;
        HEAP32[16874] = 0;
        $0 = __invoke___22class_std____2__shared_ptr_22____22class_std____2__shared_ptr_22___class_maxiOsc____22class_emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc____val_deleter_22__i32(1692, $8 + 204 | 0, $0 | 0, $8 + 248 | 0, $8 | 0) | 0;
        $4 = HEAP32[16874];
        HEAP32[16874] = 0;
        if (($4 | 0) != 1) {
         break label$8
        }
        break label$5;
       }
       HEAP32[16874] = 0;
       $0 = __invoke__struct___locale_struct_(1670) | 0;
       $9 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($9 | 0) == 1) {
        break label$5
       }
       HEAP32[$8 + 32 >> 2] = $4;
       HEAP32[$8 + 36 >> 2] = $5;
       HEAP32[16874] = 0;
       HEAP32[$8 + 40 >> 2] = $6;
       HEAP32[$8 + 44 >> 2] = $7;
       $0 = __invoke___22class_std____2__shared_ptr_22____22class_std____2__shared_ptr_22___class_maxiOsc____22class_emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc____val_deleter_22__i32(1692, $8 + 204 | 0, $0 | 0, $8 + 248 | 0, $8 + 32 | 0) | 0;
       $4 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($4 | 0) == 1) {
        break label$5
       }
      }
      $4 = HEAP32[$8 + 204 >> 2];
      if (!$4) {
       HEAP32[16874] = 0;
       __invoke_void(1645);
       $0 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($0 | 0) == 1) {
        break label$5
       }
       break label$6;
      }
      std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___reset_28unsigned_20char__29($10, $4);
     }
     $4 = HEAP32[$8 + 204 >> 2];
     $5 = $4 + $0 | 0;
     $6 = std____2____num_put_base____identify_padding_28char__2c_20char__2c_20std____2__ios_base_20const__29($4, $5, $2);
     HEAP32[$8 + 116 >> 2] = 1644;
     $4 = std____2__unique_ptr__IO_FILE_2c_20int_20_28__29_28_IO_FILE__29___unique_ptr_true_2c_20void__28_IO_FILE__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_int_20_28__29_28_IO_FILE__29__2c_20true_____good_rval_ref_type_29($8 + 120 | 0, 0, $8 + 116 | 0);
     label$11 : {
      label$12 : {
       if (HEAP32[$8 + 204 >> 2] == ($8 + 208 | 0)) {
        $0 = $8 + 128 | 0;
        $7 = $8 + 208 | 0;
        break label$12;
       }
       $0 = dlmalloc($0 << 1);
       if (!$0) {
        HEAP32[16874] = 0;
        __invoke_void(1645);
        $0 = HEAP32[16874];
        HEAP32[16874] = 0;
        if (($0 | 0) != 1) {
         break label$6
        }
        $2 = __cxa_find_matching_catch_2() | 0;
        getTempRet0() | 0;
        break label$11;
       }
       std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___reset_28unsigned_20char__29($4, $0);
       $7 = HEAP32[$8 + 204 >> 2];
      }
      HEAP32[16874] = 0;
      std____2__ios_base__getloc_28_29_20const($8 + 104 | 0, $2);
      $9 = HEAP32[16874];
      HEAP32[16874] = 0;
      label$15 : {
       label$16 : {
        if (($9 | 0) != 1) {
         HEAP32[16874] = 0;
         __invoke_void_i8__i8__i8__i8__i8___i8_____22class_std____2__locale_22_(1693, $7 | 0, $6 | 0, $5 | 0, $0 | 0, $8 + 116 | 0, $8 + 112 | 0, $8 + 104 | 0);
         $5 = HEAP32[16874];
         HEAP32[16874] = 0;
         if (($5 | 0) == 1) {
          break label$16
         }
         std____2__locale___locale_28_29($8 + 104 | 0);
         HEAP32[16874] = 0;
         $0 = __invoke___22class_std____2__basic_streambuf_22____22class_std____2__basic_streambuf_22__i8__i8__i8____22class_std____2__ios_base_22__i8(29, $1 | 0, $0 | 0, HEAP32[$8 + 116 >> 2], HEAP32[$8 + 112 >> 2], $2 | 0, $3 | 0) | 0;
         $1 = HEAP32[16874];
         HEAP32[16874] = 0;
         if (($1 | 0) == 1) {
          break label$15
         }
         std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29____unique_ptr_28_29($4);
         std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29____unique_ptr_28_29($10);
         $1 = $8 + 256 | 0;
         if ($1 >>> 0 < global$2 >>> 0) {
          __handle_stack_overflow()
         }
         global$0 = $1;
         return $0 | 0;
        }
        $2 = __cxa_find_matching_catch_2() | 0;
        getTempRet0() | 0;
        break label$11;
       }
       $2 = __cxa_find_matching_catch_2() | 0;
       getTempRet0() | 0;
       std____2__locale___locale_28_29($8 + 104 | 0);
       break label$11;
      }
      $2 = __cxa_find_matching_catch_2() | 0;
      getTempRet0() | 0;
     }
     std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29____unique_ptr_28_29($4);
     break label$4;
    }
    abort();
   }
   $2 = __cxa_find_matching_catch_2() | 0;
   getTempRet0() | 0;
  }
  std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29____unique_ptr_28_29($10);
  __resumeException($2 | 0);
  abort();
 }
 
 function std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20char_2c_20void_20const__29_20const($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  $0 = global$0 - 96 | 0;
  $5 = $0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $5;
  HEAP16[$0 + 92 >> 1] = HEAPU8[39894] | HEAPU8[39895] << 8;
  HEAP32[$0 + 88 >> 2] = HEAPU8[39890] | HEAPU8[39891] << 8 | (HEAPU8[39892] << 16 | HEAPU8[39893] << 24);
  $5 = std____2____cloc_28_29();
  HEAP32[$0 >> 2] = $4;
  $6 = $0 - -64 | 0;
  $7 = std____2____libcpp_snprintf_l_28char__2c_20unsigned_20long_2c_20__locale_struct__2c_20char_20const__2c_20____29($0 - -64 | 0, 20, $5, $0 + 88 | 0, $0);
  $4 = $7 + ($0 - -64 | 0) | 0;
  $5 = std____2____num_put_base____identify_padding_28char__2c_20char__2c_20std____2__ios_base_20const__29($6, $4, $2);
  std____2__ios_base__getloc_28_29_20const($0 + 8 | 0, $2);
  HEAP32[16874] = 0;
  $6 = __invoke_i1___22class_std____2__basic_ifstream_22_(31, $0 + 8 | 0) | 0;
  $8 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($8 | 0) != 1) {
   std____2__locale___locale_28_29($0 + 8 | 0);
   std____2__ctype_char___widen_28char_20const__2c_20char_20const__2c_20char__29_20const($6, $0 - -64 | 0, $4, $0 + 16 | 0);
   $6 = $1;
   $1 = $7 + ($0 + 16 | 0) | 0;
   $1 = std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2____pad_and_output_char_2c_20std____2__char_traits_char__20__28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20char_20const__2c_20char_20const__2c_20char_20const__2c_20std____2__ios_base__2c_20char_29($6, $0 + 16 | 0, ($4 | 0) == ($5 | 0) ? $1 : ($0 + ($5 - $0 | 0) | 0) + -48 | 0, $1, $2, $3);
   $0 = $0 + 96 | 0;
   if ($0 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $0;
   return $1 | 0;
  }
  $1 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__locale___locale_28_29($0 + 8 | 0);
  __resumeException($1 | 0);
  abort();
 }
 
 function std____2__num_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20wchar_t_2c_20bool_29_20const($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0;
  $5 = global$0 - 48 | 0;
  $6 = $5;
  if ($5 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $6;
  HEAP32[$5 + 40 >> 2] = $1;
  label$2 : {
   if (!(HEAP32[$2 + 4 >> 2] & 1)) {
    $2 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($0, $1, $2, $3, $4) | 0;
    break label$2;
   }
   std____2__ios_base__getloc_28_29_20const($5 + 24 | 0, $2);
   HEAP32[16874] = 0;
   $0 = __invoke_i1___22class_std____2__basic_ifstream_22_(1675, $5 + 24 | 0) | 0;
   $1 = HEAP32[16874];
   HEAP32[16874] = 0;
   label$4 : {
    if (($1 | 0) != 1) {
     std____2__locale___locale_28_29($5 + 24 | 0);
     label$6 : {
      if ($4) {
       std____2__numpunct_char___truename_28_29_20const($5 + 24 | 0, $0);
       break label$6;
      }
      std____2__numpunct_char___falsename_28_29_20const($5 + 24 | 0, $0);
     }
     HEAP32[$5 + 16 >> 2] = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___begin_28_29($5 + 24 | 0);
     while (1) {
      HEAP32[$5 + 8 >> 2] = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___end_28_29($5 + 24 | 0);
      if (!bool_20std____2__operator___double___28std____2____wrap_iter_double___20const__2c_20std____2____wrap_iter_double___20const__29($5 + 16 | 0, $5 + 8 | 0)) {
       $2 = HEAP32[$5 + 40 >> 2];
       std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($5 + 24 | 0);
       break label$2;
      }
      $0 = HEAP32[HEAP32[$5 + 16 >> 2] >> 2];
      HEAP32[16874] = 0;
      __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1698, $5 + 40 | 0, $0 | 0) | 0;
      $0 = HEAP32[16874];
      HEAP32[16874] = 0;
      if (($0 | 0) != 1) {
       std____2____wrap_iter_float____operator___28_29($5 + 16 | 0);
       continue;
      }
      break;
     };
     $2 = __cxa_find_matching_catch_2() | 0;
     getTempRet0() | 0;
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($5 + 24 | 0);
     break label$4;
    }
    $2 = __cxa_find_matching_catch_2() | 0;
    getTempRet0() | 0;
    std____2__locale___locale_28_29($5 + 24 | 0);
   }
   __resumeException($2 | 0);
   abort();
  }
  $0 = $5 + 48 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
  return $2 | 0;
 }
 
 function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___end_28_29($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  $0 = HEAP32[std____2____compressed_pair_elem_std____2__allocator_double___2c_201_2c_20false_____compressed_pair_elem_std____2__allocator_double___2c_20void__28std____2__allocator_double___29($1 + 8 | 0, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_pointer_28_29_20const($0) + (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($0) << 2) | 0) >> 2];
  $1 = $1 + 16 | 0;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  return $0;
 }
 
 function std____2__num_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20wchar_t_2c_20long_29_20const($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  $0 = global$0 - 32 | 0;
  $5 = $0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $5;
  HEAP16[$0 + 28 >> 1] = HEAPU8[39888] | HEAPU8[39889] << 8;
  HEAP32[$0 + 24 >> 2] = HEAPU8[39884] | HEAPU8[39885] << 8 | (HEAPU8[39886] << 16 | HEAPU8[39887] << 24);
  std____2____num_put_base____format_int_28char__2c_20char_20const__2c_20bool_2c_20unsigned_20int_29($0 + 24 | 1, 39876, 1, HEAP32[$2 + 4 >> 2]);
  $6 = HEAP32[$2 + 4 >> 2];
  $5 = $0 + -16 | 0;
  $7 = $5;
  if ($5 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $5;
  $8 = std____2____cloc_28_29();
  HEAP32[$0 >> 2] = $4;
  $4 = $6 >>> 9 & 1;
  $6 = std____2____libcpp_snprintf_l_28char__2c_20unsigned_20long_2c_20__locale_struct__2c_20char_20const__2c_20____29($5, $4 + 13 | 0, $8, $0 + 24 | 0, $0) + $5 | 0;
  $8 = std____2____num_put_base____identify_padding_28char__2c_20char__2c_20std____2__ios_base_20const__29($5, $6, $2);
  $4 = $7 - (($4 << 3 | 96) + 11 & 112) | 0;
  $7 = $4;
  if ($4 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $7;
  std____2__ios_base__getloc_28_29_20const($0 + 8 | 0, $2);
  HEAP32[16874] = 0;
  __invoke_void_i8__i8__i8__i8__i8___i8_____22class_std____2__locale_22_(1699, $5 | 0, $8 | 0, $6 | 0, $4 | 0, $0 + 20 | 0, $0 + 16 | 0, $0 + 8 | 0);
  $5 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($5 | 0) != 1) {
   std____2__locale___locale_28_29($0 + 8 | 0);
   $1 = std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20std____2____pad_and_output_wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20std____2__ios_base__2c_20wchar_t_29($1, $4, HEAP32[$0 + 20 >> 2], HEAP32[$0 + 16 >> 2], $2, $3);
   $0 = $0 + 32 | 0;
   if ($0 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $0;
   return $1 | 0;
  }
  $1 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__locale___locale_28_29($0 + 8 | 0);
  __resumeException($1 | 0);
  abort();
 }
 
 function std____2____num_put_wchar_t_____widen_and_group_int_28char__2c_20char__2c_20char__2c_20wchar_t__2c_20wchar_t___2c_20wchar_t___2c_20std____2__locale_20const__29($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  var $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
  $10 = global$0 - 16 | 0;
  $9 = $10;
  if ($9 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $9;
  $11 = std____2__ctype_wchar_t__20const__20std____2__use_facet_std____2__ctype_wchar_t__20__28std____2__locale_20const__29($6);
  $6 = std____2__numpunct_wchar_t__20const__20std____2__use_facet_std____2__numpunct_wchar_t__20__28std____2__locale_20const__29($6);
  std____2__numpunct_char___grouping_28_29_20const($10, $6);
  label$2 : {
   label$3 : {
    if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___empty_28_29_20const($10)) {
     HEAP32[16874] = 0;
     __invoke___22class_std____2__shared_ptr_22____22class_std____2__shared_ptr_22___class_maxiOsc____22class_emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc____val_deleter_22__i32(1688, $11 | 0, $0 | 0, $2 | 0, $3 | 0) | 0;
     $6 = HEAP32[16874];
     HEAP32[16874] = 0;
     if (($6 | 0) == 1) {
      break label$3
     }
     $6 = ($2 - $0 << 2) + $3 | 0;
     HEAP32[$5 >> 2] = $6;
     break label$2;
    }
    HEAP32[$5 >> 2] = $3;
    $9 = $0;
    $7 = HEAPU8[$9 | 0];
    $8 = $7 + -43 | 0;
    label$8 : {
     if ($8 >>> 0 > 2) {
      break label$8
     }
     if (!($8 - 1)) {
      break label$8
     }
     HEAP32[16874] = 0;
     $9 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1700, $11 | 0, $7 << 24 >> 24) | 0;
     $7 = HEAP32[16874];
     HEAP32[16874] = 0;
     if (($7 | 0) == 1) {
      break label$3
     }
     $7 = HEAP32[$5 >> 2];
     HEAP32[$5 >> 2] = $7 + 4;
     HEAP32[$7 >> 2] = $9;
     $9 = $0 + 1 | 0;
    }
    if (!(HEAPU8[$9 | 0] != 48 | ($2 - $9 | 0) < 2 | (HEAPU8[$9 + 1 | 0] | 32) != 120)) {
     HEAP32[16874] = 0;
     $7 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1700, $11 | 0, 48) | 0;
     $8 = HEAP32[16874];
     HEAP32[16874] = 0;
     if (($8 | 0) == 1) {
      break label$3
     }
     $8 = HEAP32[$5 >> 2];
     HEAP32[$5 >> 2] = $8 + 4;
     HEAP32[$8 >> 2] = $7;
     $7 = HEAP8[$9 + 1 | 0];
     HEAP32[16874] = 0;
     $7 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1700, $11 | 0, $7 | 0) | 0;
     $8 = HEAP32[16874];
     HEAP32[16874] = 0;
     if (($8 | 0) == 1) {
      break label$3
     }
     $8 = HEAP32[$5 >> 2];
     HEAP32[$5 >> 2] = $8 + 4;
     HEAP32[$8 >> 2] = $7;
     $9 = $9 + 2 | 0;
    }
    $8 = 0;
    HEAP32[16874] = 0;
    __invoke_void___22class_std____2__vector_13_22__i32(1691, $9 | 0, $2 | 0);
    $7 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($7 | 0) == 1) {
     break label$3
    }
    HEAP32[16874] = 0;
    $14 = __invoke_i1___22class_std____2__basic_ifstream_22_(1685, $6 | 0) | 0;
    $6 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($6 | 0) == 1) {
     break label$3
    }
    $7 = 0;
    $6 = $9;
    while (1) {
     label$10 : {
      if ($6 >>> 0 >= $2 >>> 0) {
       $6 = HEAP32[$5 >> 2];
       HEAP32[16874] = 0;
       __invoke_void___22class_std____2__vector_13_22__i32(1701, ($9 - $0 << 2) + $3 | 0, $6 | 0);
       $6 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($6 | 0) == 1) {
        break label$10
       }
       $6 = HEAP32[$5 >> 2];
       break label$2;
      }
      label$13 : {
       if (!HEAPU8[std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29_20const($10, $7) | 0]) {
        break label$13
       }
       if (HEAP8[std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29_20const($10, $7) | 0] != ($8 | 0)) {
        break label$13
       }
       $8 = HEAP32[$5 >> 2];
       HEAP32[$5 >> 2] = $8 + 4;
       HEAP32[$8 >> 2] = $14;
       $7 = ($7 >>> 0 < std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($10) + -1 >>> 0) + $7 | 0;
       $8 = 0;
      }
      $13 = HEAP8[$6 | 0];
      HEAP32[16874] = 0;
      $13 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1700, $11 | 0, $13 | 0) | 0;
      $12 = HEAP32[16874];
      HEAP32[16874] = 0;
      if (($12 | 0) != 1) {
       $12 = HEAP32[$5 >> 2];
       HEAP32[$5 >> 2] = $12 + 4;
       HEAP32[$12 >> 2] = $13;
       $6 = $6 + 1 | 0;
       $8 = $8 + 1 | 0;
       continue;
      }
     }
     break;
    };
   }
   $6 = __cxa_find_matching_catch_2() | 0;
   getTempRet0() | 0;
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($10);
   __resumeException($6 | 0);
   abort();
  }
  HEAP32[$4 >> 2] = ($1 | 0) == ($2 | 0) ? $6 : ($1 - $0 << 2) + $3 | 0;
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($10);
  $0 = $10 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20std____2____pad_and_output_wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20std____2__ios_base__2c_20wchar_t_29($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $7 = 0, $8 = 0, $9 = 0;
  $9 = global$0 - 16 | 0;
  $8 = $9;
  if ($9 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $8;
  label$2 : {
   label$3 : {
    if (!$0) {
     $8 = 0;
     break label$3;
    }
    $7 = HEAP32[$4 + 12 >> 2];
    $8 = 0;
    $6 = $2 - $1 | 0;
    if (($6 | 0) >= 1) {
     $6 = $6 >> 2;
     if ((std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___sputn_28char_20const__2c_20long_29($0, $1, $6) | 0) != ($6 | 0)) {
      break label$3
     }
    }
    $1 = $3 - $1 >> 2;
    $1 = ($7 | 0) > ($1 | 0) ? $7 - $1 | 0 : 0;
    if (($1 | 0) >= 1) {
     $5 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___basic_string_28unsigned_20long_2c_20wchar_t_29($9, $1, $5);
     $7 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_pointer_28_29_20const($5);
     HEAP32[16874] = 0;
     $7 = __invoke___22class_std____2__basic_istream_22____22class_std____2__basic_istream_22__i8__i32(1702, $0 | 0, $7 | 0, $1 | 0) | 0;
     $6 = HEAP32[16874];
     HEAP32[16874] = 0;
     if (($6 | 0) == 1) {
      break label$2
     }
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($5);
     if (($1 | 0) != ($7 | 0)) {
      break label$3
     }
    }
    $1 = $3 - $2 | 0;
    if (($1 | 0) >= 1) {
     $1 = $1 >> 2;
     if ((std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___sputn_28char_20const__2c_20long_29($0, $2, $1) | 0) != ($1 | 0)) {
      break label$3
     }
    }
    std____2__ios_base__width_28long_29($4);
    $8 = $0;
   }
   $0 = $9 + 16 | 0;
   if ($0 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $0;
   return $8 | 0;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($5);
  __resumeException($0 | 0);
  abort();
 }
 
 function void_20std____2__reverse_wchar_t___28wchar_t__2c_20wchar_t__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  void_20std____2____reverse_wchar_t___28wchar_t__2c_20wchar_t__2c_20std____2__random_access_iterator_tag_29($0, $1);
 }
 
 function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___basic_string_28unsigned_20long_2c_20wchar_t_29($0, $1, $2) {
  std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20_____compressed_pair_true_2c_20void__28_29($0);
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____init_28unsigned_20long_2c_20wchar_t_29($0, $1, $2);
  return $0;
 }
 
 function std____2__num_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20wchar_t_2c_20long_20long_29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $7 = 0, $8 = 0, $9 = 0;
  $0 = global$0 - 32 | 0;
  $6 = $0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $6;
  HEAP32[$0 + 24 >> 2] = 37;
  HEAP32[$0 + 28 >> 2] = 0;
  std____2____num_put_base____format_int_28char__2c_20char_20const__2c_20bool_2c_20unsigned_20int_29($0 + 24 | 1, 39878, 1, HEAP32[$2 + 4 >> 2]);
  $7 = HEAP32[$2 + 4 >> 2];
  $6 = $0 + -32 | 0;
  $8 = $6;
  if ($6 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $6;
  $9 = std____2____cloc_28_29();
  HEAP32[$0 >> 2] = $4;
  HEAP32[$0 + 4 >> 2] = $5;
  $4 = $7 >>> 9 & 1;
  $5 = std____2____libcpp_snprintf_l_28char__2c_20unsigned_20long_2c_20__locale_struct__2c_20char_20const__2c_20____29($6, $4 + 23 | 0, $9, $0 + 24 | 0, $0) + $6 | 0;
  $7 = std____2____num_put_base____identify_padding_28char__2c_20char__2c_20std____2__ios_base_20const__29($6, $5, $2);
  $4 = $8 - (($4 << 3 | 176) + 11 & 240) | 0;
  $8 = $4;
  if ($4 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $8;
  std____2__ios_base__getloc_28_29_20const($0 + 8 | 0, $2);
  HEAP32[16874] = 0;
  __invoke_void_i8__i8__i8__i8__i8___i8_____22class_std____2__locale_22_(1699, $6 | 0, $7 | 0, $5 | 0, $4 | 0, $0 + 20 | 0, $0 + 16 | 0, $0 + 8 | 0);
  $5 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($5 | 0) != 1) {
   std____2__locale___locale_28_29($0 + 8 | 0);
   $1 = std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20std____2____pad_and_output_wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20std____2__ios_base__2c_20wchar_t_29($1, $4, HEAP32[$0 + 20 >> 2], HEAP32[$0 + 16 >> 2], $2, $3);
   $0 = $0 + 32 | 0;
   if ($0 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $0;
   return $1 | 0;
  }
  $1 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__locale___locale_28_29($0 + 8 | 0);
  __resumeException($1 | 0);
  abort();
 }
 
 function std____2__num_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20wchar_t_2c_20unsigned_20long_29_20const($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  $0 = global$0 - 32 | 0;
  $5 = $0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $5;
  HEAP16[$0 + 28 >> 1] = HEAPU8[39888] | HEAPU8[39889] << 8;
  HEAP32[$0 + 24 >> 2] = HEAPU8[39884] | HEAPU8[39885] << 8 | (HEAPU8[39886] << 16 | HEAPU8[39887] << 24);
  std____2____num_put_base____format_int_28char__2c_20char_20const__2c_20bool_2c_20unsigned_20int_29($0 + 24 | 1, 39876, 0, HEAP32[$2 + 4 >> 2]);
  $6 = HEAP32[$2 + 4 >> 2];
  $5 = $0 + -16 | 0;
  $7 = $5;
  if ($5 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $5;
  $8 = std____2____cloc_28_29();
  HEAP32[$0 >> 2] = $4;
  $6 = std____2____libcpp_snprintf_l_28char__2c_20unsigned_20long_2c_20__locale_struct__2c_20char_20const__2c_20____29($5, $6 >>> 9 & 1 | 12, $8, $0 + 24 | 0, $0) + $5 | 0;
  $8 = std____2____num_put_base____identify_padding_28char__2c_20char__2c_20std____2__ios_base_20const__29($5, $6, $2);
  $4 = $7 + -96 | 0;
  $7 = $4;
  if ($4 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $7;
  std____2__ios_base__getloc_28_29_20const($0 + 8 | 0, $2);
  HEAP32[16874] = 0;
  __invoke_void_i8__i8__i8__i8__i8___i8_____22class_std____2__locale_22_(1699, $5 | 0, $8 | 0, $6 | 0, $4 | 0, $0 + 20 | 0, $0 + 16 | 0, $0 + 8 | 0);
  $5 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($5 | 0) != 1) {
   std____2__locale___locale_28_29($0 + 8 | 0);
   $1 = std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20std____2____pad_and_output_wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20std____2__ios_base__2c_20wchar_t_29($1, $4, HEAP32[$0 + 20 >> 2], HEAP32[$0 + 16 >> 2], $2, $3);
   $0 = $0 + 32 | 0;
   if ($0 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $0;
   return $1 | 0;
  }
  $1 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__locale___locale_28_29($0 + 8 | 0);
  __resumeException($1 | 0);
  abort();
 }
 
 function std____2__num_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20wchar_t_2c_20unsigned_20long_20long_29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $7 = 0, $8 = 0, $9 = 0;
  $0 = global$0 - 32 | 0;
  $6 = $0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $6;
  HEAP32[$0 + 24 >> 2] = 37;
  HEAP32[$0 + 28 >> 2] = 0;
  std____2____num_put_base____format_int_28char__2c_20char_20const__2c_20bool_2c_20unsigned_20int_29($0 + 24 | 1, 39878, 0, HEAP32[$2 + 4 >> 2]);
  $7 = HEAP32[$2 + 4 >> 2];
  $6 = $0 + -32 | 0;
  $8 = $6;
  if ($6 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $6;
  $9 = std____2____cloc_28_29();
  HEAP32[$0 >> 2] = $4;
  HEAP32[$0 + 4 >> 2] = $5;
  $4 = $7 >>> 9 & 1 | 22;
  $5 = std____2____libcpp_snprintf_l_28char__2c_20unsigned_20long_2c_20__locale_struct__2c_20char_20const__2c_20____29($6, $4 + 1 | 0, $9, $0 + 24 | 0, $0) + $6 | 0;
  $7 = std____2____num_put_base____identify_padding_28char__2c_20char__2c_20std____2__ios_base_20const__29($6, $5, $2);
  $4 = $8 - (($4 << 3) + 11 & 240) | 0;
  $8 = $4;
  if ($4 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $8;
  std____2__ios_base__getloc_28_29_20const($0 + 8 | 0, $2);
  HEAP32[16874] = 0;
  __invoke_void_i8__i8__i8__i8__i8___i8_____22class_std____2__locale_22_(1699, $6 | 0, $7 | 0, $5 | 0, $4 | 0, $0 + 20 | 0, $0 + 16 | 0, $0 + 8 | 0);
  $5 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($5 | 0) != 1) {
   std____2__locale___locale_28_29($0 + 8 | 0);
   $1 = std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20std____2____pad_and_output_wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20std____2__ios_base__2c_20wchar_t_29($1, $4, HEAP32[$0 + 20 >> 2], HEAP32[$0 + 16 >> 2], $2, $3);
   $0 = $0 + 32 | 0;
   if ($0 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $0;
   return $1 | 0;
  }
  $1 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__locale___locale_28_29($0 + 8 | 0);
  __resumeException($1 | 0);
  abort();
 }
 
 function std____2__num_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20wchar_t_2c_20double_29_20const($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = +$4;
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
  $5 = global$0 - 384 | 0;
  $0 = $5;
  if ($5 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
  HEAP32[$5 + 376 >> 2] = 37;
  HEAP32[$5 + 380 >> 2] = 0;
  $6 = std____2____num_put_base____format_float_28char__2c_20char_20const__2c_20unsigned_20int_29($5 + 376 | 1, 39881, HEAP32[$2 + 4 >> 2]);
  HEAP32[$5 + 332 >> 2] = $5 + 336;
  $0 = std____2____cloc_28_29();
  label$2 : {
   if ($6) {
    $7 = HEAP32[$2 + 8 >> 2];
    HEAPF64[$5 + 40 >> 3] = $4;
    HEAP32[$5 + 32 >> 2] = $7;
    $0 = std____2____libcpp_snprintf_l_28char__2c_20unsigned_20long_2c_20__locale_struct__2c_20char_20const__2c_20____29($5 + 336 | 0, 30, $0, $5 + 376 | 0, $5 + 32 | 0);
    break label$2;
   }
   HEAPF64[$5 + 48 >> 3] = $4;
   $0 = std____2____libcpp_snprintf_l_28char__2c_20unsigned_20long_2c_20__locale_struct__2c_20char_20const__2c_20____29($5 + 336 | 0, 30, $0, $5 + 376 | 0, $5 + 48 | 0);
  }
  HEAP32[$5 + 80 >> 2] = 1644;
  $7 = std____2__unique_ptr__IO_FILE_2c_20int_20_28__29_28_IO_FILE__29___unique_ptr_true_2c_20void__28_IO_FILE__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_int_20_28__29_28_IO_FILE__29__2c_20true_____good_rval_ref_type_29($5 + 320 | 0, 0, $5 + 80 | 0);
  label$4 : {
   label$5 : {
    label$6 : {
     if (($0 | 0) >= 30) {
      label$8 : {
       if ($6) {
        HEAP32[16874] = 0;
        $0 = __invoke__struct___locale_struct_(1670) | 0;
        $6 = HEAP32[16874];
        HEAP32[16874] = 0;
        if (($6 | 0) == 1) {
         break label$5
        }
        HEAP32[$5 >> 2] = HEAP32[$2 + 8 >> 2];
        HEAP32[16874] = 0;
        HEAPF64[$5 + 8 >> 3] = $4;
        $0 = __invoke___22class_std____2__shared_ptr_22____22class_std____2__shared_ptr_22___class_maxiOsc____22class_emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc____val_deleter_22__i32(1692, $5 + 332 | 0, $0 | 0, $5 + 376 | 0, $5 | 0) | 0;
        $6 = HEAP32[16874];
        HEAP32[16874] = 0;
        if (($6 | 0) != 1) {
         break label$8
        }
        break label$5;
       }
       HEAP32[16874] = 0;
       $0 = __invoke__struct___locale_struct_(1670) | 0;
       $6 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($6 | 0) == 1) {
        break label$5
       }
       HEAPF64[$5 + 16 >> 3] = $4;
       HEAP32[16874] = 0;
       $0 = __invoke___22class_std____2__shared_ptr_22____22class_std____2__shared_ptr_22___class_maxiOsc____22class_emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc____val_deleter_22__i32(1692, $5 + 332 | 0, $0 | 0, $5 + 376 | 0, $5 + 16 | 0) | 0;
       $6 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($6 | 0) == 1) {
        break label$5
       }
      }
      $6 = HEAP32[$5 + 332 >> 2];
      if (!$6) {
       HEAP32[16874] = 0;
       __invoke_void(1645);
       $0 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($0 | 0) == 1) {
        break label$5
       }
       break label$6;
      }
      std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___reset_28unsigned_20char__29($7, $6);
     }
     $6 = HEAP32[$5 + 332 >> 2];
     $8 = $6 + $0 | 0;
     $10 = std____2____num_put_base____identify_padding_28char__2c_20char__2c_20std____2__ios_base_20const__29($6, $8, $2);
     HEAP32[$5 + 68 >> 2] = 1644;
     $6 = std____2__unique_ptr__IO_FILE_2c_20int_20_28__29_28_IO_FILE__29___unique_ptr_true_2c_20void__28_IO_FILE__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_int_20_28__29_28_IO_FILE__29__2c_20true_____good_rval_ref_type_29($5 + 72 | 0, 0, $5 + 68 | 0);
     label$11 : {
      label$12 : {
       if (HEAP32[$5 + 332 >> 2] == ($5 + 336 | 0)) {
        $0 = $5 + 80 | 0;
        $9 = $5 + 336 | 0;
        break label$12;
       }
       $0 = dlmalloc($0 << 3);
       if (!$0) {
        HEAP32[16874] = 0;
        __invoke_void(1645);
        $0 = HEAP32[16874];
        HEAP32[16874] = 0;
        if (($0 | 0) != 1) {
         break label$6
        }
        $2 = __cxa_find_matching_catch_2() | 0;
        getTempRet0() | 0;
        break label$11;
       }
       std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___reset_28unsigned_20char__29($6, $0);
       $9 = HEAP32[$5 + 332 >> 2];
      }
      HEAP32[16874] = 0;
      std____2__ios_base__getloc_28_29_20const($5 + 56 | 0, $2);
      $11 = HEAP32[16874];
      HEAP32[16874] = 0;
      label$15 : {
       label$16 : {
        if (($11 | 0) != 1) {
         HEAP32[16874] = 0;
         __invoke_void_i8__i8__i8__i8__i8___i8_____22class_std____2__locale_22_(1703, $9 | 0, $10 | 0, $8 | 0, $0 | 0, $5 + 68 | 0, $5 - -64 | 0, $5 + 56 | 0);
         $8 = HEAP32[16874];
         HEAP32[16874] = 0;
         if (($8 | 0) == 1) {
          break label$16
         }
         std____2__locale___locale_28_29($5 + 56 | 0);
         HEAP32[16874] = 0;
         $0 = __invoke___22class_std____2__basic_streambuf_22____22class_std____2__basic_streambuf_22__i8__i8__i8____22class_std____2__ios_base_22__i8(1704, $1 | 0, $0 | 0, HEAP32[$5 + 68 >> 2], HEAP32[$5 + 64 >> 2], $2 | 0, $3 | 0) | 0;
         $1 = HEAP32[16874];
         HEAP32[16874] = 0;
         if (($1 | 0) == 1) {
          break label$15
         }
         std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29____unique_ptr_28_29($6);
         std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29____unique_ptr_28_29($7);
         $1 = $5 + 384 | 0;
         if ($1 >>> 0 < global$2 >>> 0) {
          __handle_stack_overflow()
         }
         global$0 = $1;
         return $0 | 0;
        }
        $2 = __cxa_find_matching_catch_2() | 0;
        getTempRet0() | 0;
        break label$11;
       }
       $2 = __cxa_find_matching_catch_2() | 0;
       getTempRet0() | 0;
       std____2__locale___locale_28_29($5 + 56 | 0);
       break label$11;
      }
      $2 = __cxa_find_matching_catch_2() | 0;
      getTempRet0() | 0;
     }
     std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29____unique_ptr_28_29($6);
     break label$4;
    }
    abort();
   }
   $2 = __cxa_find_matching_catch_2() | 0;
   getTempRet0() | 0;
  }
  std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29____unique_ptr_28_29($7);
  __resumeException($2 | 0);
  abort();
 }
 
 function std____2____num_put_wchar_t_____widen_and_group_float_28char__2c_20char__2c_20char__2c_20wchar_t__2c_20wchar_t___2c_20wchar_t___2c_20std____2__locale_20const__29($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  var $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
  $11 = global$0 - 16 | 0;
  $7 = $11;
  if ($7 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $7;
  $13 = std____2__ctype_wchar_t__20const__20std____2__use_facet_std____2__ctype_wchar_t__20__28std____2__locale_20const__29($6);
  $16 = std____2__numpunct_wchar_t__20const__20std____2__use_facet_std____2__numpunct_wchar_t__20__28std____2__locale_20const__29($6);
  std____2__numpunct_char___grouping_28_29_20const($11, $16);
  HEAP32[$5 >> 2] = $3;
  label$2 : {
   $8 = $0;
   $6 = HEAPU8[$8 | 0];
   $7 = $6 + -43 | 0;
   if (!($7 >>> 0 > 2 | !($7 - 1))) {
    HEAP32[16874] = 0;
    $6 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1700, $13 | 0, $6 << 24 >> 24) | 0;
    $7 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($7 | 0) == 1) {
     break label$2
    }
    $7 = HEAP32[$5 >> 2];
    HEAP32[$5 >> 2] = $7 + 4;
    HEAP32[$7 >> 2] = $6;
    $8 = $0 + 1 | 0;
   }
   label$6 : {
    if (!(HEAPU8[$8 | 0] != 48 | ($2 - $8 | 0) < 2 | (HEAPU8[$8 + 1 | 0] | 32) != 120)) {
     HEAP32[16874] = 0;
     $6 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1700, $13 | 0, 48) | 0;
     $7 = HEAP32[16874];
     HEAP32[16874] = 0;
     if (($7 | 0) == 1) {
      break label$2
     }
     $7 = HEAP32[$5 >> 2];
     HEAP32[$5 >> 2] = $7 + 4;
     HEAP32[$7 >> 2] = $6;
     $6 = HEAP8[$8 + 1 | 0];
     HEAP32[16874] = 0;
     $6 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1700, $13 | 0, $6 | 0) | 0;
     $7 = HEAP32[16874];
     HEAP32[16874] = 0;
     if (($7 | 0) == 1) {
      break label$2
     }
     $7 = HEAP32[$5 >> 2];
     HEAP32[$5 >> 2] = $7 + 4;
     HEAP32[$7 >> 2] = $6;
     $8 = $8 + 2 | 0;
     $6 = $8 >>> 0 < $2 >>> 0 ? $2 : $8;
     $7 = $8;
     while (1) {
      if ($7 >>> 0 >= $2 >>> 0) {
       break label$6
      }
      $12 = HEAP8[$7 | 0];
      HEAP32[16874] = 0;
      $9 = __invoke__struct___locale_struct_(1670) | 0;
      $14 = HEAP32[16874];
      HEAP32[16874] = 0;
      if (($14 | 0) == 1) {
       break label$2
      }
      HEAP32[16874] = 0;
      $12 = __isxdigit_l($12, $9);
      $9 = HEAP32[16874];
      HEAP32[16874] = 0;
      if (($9 | 0) == 1) {
       break label$2
      }
      if (!$12) {
       $6 = $7;
       break label$6;
      }
      $7 = $7 + 1 | 0;
      continue;
     };
    }
    $6 = $8 >>> 0 > $2 >>> 0 ? $8 : $2;
    $7 = $8;
    while (1) {
     if ($7 >>> 0 >= $2 >>> 0) {
      break label$6
     }
     $12 = HEAP8[$7 | 0];
     HEAP32[16874] = 0;
     __invoke__struct___locale_struct_(1670) | 0;
     $9 = HEAP32[16874];
     HEAP32[16874] = 0;
     if (($9 | 0) == 1) {
      break label$2
     }
     HEAP32[16874] = 0;
     $12 = isdigit($12);
     $9 = HEAP32[16874];
     HEAP32[16874] = 0;
     if (($9 | 0) == 1) {
      break label$2
     }
     if ($12) {
      $7 = $7 + 1 | 0;
      continue;
     } else {
      $6 = $7
     }
     break;
    };
   }
   label$16 : {
    if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___empty_28_29_20const($11)) {
     $7 = HEAP32[$5 >> 2];
     HEAP32[16874] = 0;
     __invoke___22class_std____2__shared_ptr_22____22class_std____2__shared_ptr_22___class_maxiOsc____22class_emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc____val_deleter_22__i32(1688, $13 | 0, $8 | 0, $6 | 0, $7 | 0) | 0;
     $7 = HEAP32[16874];
     HEAP32[16874] = 0;
     if (($7 | 0) == 1) {
      break label$2
     }
     HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + ($6 - $8 << 2);
     break label$16;
    }
    HEAP32[16874] = 0;
    __invoke_void___22class_std____2__vector_13_22__i32(1691, $8 | 0, $6 | 0);
    $7 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($7 | 0) == 1) {
     break label$2
    }
    HEAP32[16874] = 0;
    $12 = __invoke_i1___22class_std____2__basic_ifstream_22_(1685, $16 | 0) | 0;
    $7 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($7 | 0) != 1) {
     $7 = $8;
     while (1) {
      if ($7 >>> 0 >= $6 >>> 0) {
       $7 = HEAP32[$5 >> 2];
       HEAP32[16874] = 0;
       __invoke_void___22class_std____2__vector_13_22__i32(1701, ($8 - $0 << 2) + $3 | 0, $7 | 0);
       $7 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($7 | 0) != 1) {
        break label$16
       }
       break label$2;
      }
      label$21 : {
       if (HEAP8[std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29_20const($11, $10) | 0] < 1) {
        break label$21
       }
       if (HEAP8[std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29_20const($11, $10) | 0] != ($15 | 0)) {
        break label$21
       }
       $15 = HEAP32[$5 >> 2];
       HEAP32[$5 >> 2] = $15 + 4;
       HEAP32[$15 >> 2] = $12;
       $10 = ($10 >>> 0 < std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($11) + -1 >>> 0) + $10 | 0;
       $15 = 0;
      }
      $9 = HEAP8[$7 | 0];
      HEAP32[16874] = 0;
      $9 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1700, $13 | 0, $9 | 0) | 0;
      $14 = HEAP32[16874];
      HEAP32[16874] = 0;
      if (($14 | 0) != 1) {
       $14 = HEAP32[$5 >> 2];
       HEAP32[$5 >> 2] = $14 + 4;
       HEAP32[$14 >> 2] = $9;
       $7 = $7 + 1 | 0;
       $15 = $15 + 1 | 0;
       continue;
      }
      break;
     };
     break label$2;
    }
    break label$2;
   }
   $10 = $6 >>> 0 > $2 >>> 0 ? $6 : $2;
   label$23 : {
    while (1) {
     if ($6 >>> 0 < $2 >>> 0) {
      $7 = HEAPU8[$6 | 0];
      if (($7 | 0) == 46) {
       HEAP32[16874] = 0;
       $8 = __invoke_i1___22class_std____2__basic_ifstream_22_(1689, $16 | 0) | 0;
       $7 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($7 | 0) == 1) {
        break label$2
       }
       $10 = HEAP32[$5 >> 2];
       $7 = $10 + 4 | 0;
       HEAP32[$5 >> 2] = $7;
       HEAP32[$10 >> 2] = $8;
       $10 = $6 + 1 | 0;
       break label$23;
      }
      HEAP32[16874] = 0;
      $7 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1700, $13 | 0, $7 << 24 >> 24) | 0;
      $8 = HEAP32[16874];
      HEAP32[16874] = 0;
      if (($8 | 0) == 1) {
       break label$2
      }
      $8 = HEAP32[$5 >> 2];
      HEAP32[$5 >> 2] = $8 + 4;
      HEAP32[$8 >> 2] = $7;
      $6 = $6 + 1 | 0;
      continue;
     }
     break;
    };
    $7 = HEAP32[$5 >> 2];
   }
   HEAP32[16874] = 0;
   __invoke___22class_std____2__shared_ptr_22____22class_std____2__shared_ptr_22___class_maxiOsc____22class_emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc____val_deleter_22__i32(1688, $13 | 0, $10 | 0, $2 | 0, $7 | 0) | 0;
   $6 = HEAP32[16874];
   HEAP32[16874] = 0;
   if (($6 | 0) == 1) {
    break label$2
   }
   $6 = $5;
   $5 = HEAP32[$5 >> 2] + ($2 - $10 << 2) | 0;
   HEAP32[$6 >> 2] = $5;
   HEAP32[$4 >> 2] = ($1 | 0) == ($2 | 0) ? $5 : ($1 - $0 << 2) + $3 | 0;
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($11);
   $0 = $11 + 16 | 0;
   if ($0 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $0;
   return;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($11);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2__num_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20wchar_t_2c_20long_20double_29_20const($0, $1, $2, $3, $4, $5, $6, $7) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  var $8 = 0, $9 = 0, $10 = 0, $11 = 0;
  $8 = global$0 - 432 | 0;
  $0 = $8;
  if ($8 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
  HEAP32[$8 + 424 >> 2] = 37;
  HEAP32[$8 + 428 >> 2] = 0;
  $9 = std____2____num_put_base____format_float_28char__2c_20char_20const__2c_20unsigned_20int_29($8 + 424 | 1, 39882, HEAP32[$2 + 4 >> 2]);
  HEAP32[$8 + 380 >> 2] = $8 + 384;
  $0 = std____2____cloc_28_29();
  label$2 : {
   if ($9) {
    $10 = HEAP32[$2 + 8 >> 2];
    HEAP32[$8 + 72 >> 2] = $6;
    HEAP32[$8 + 76 >> 2] = $7;
    $11 = $8 - -64 | 0;
    HEAP32[$11 >> 2] = $4;
    HEAP32[$11 + 4 >> 2] = $5;
    HEAP32[$8 + 48 >> 2] = $10;
    $0 = std____2____libcpp_snprintf_l_28char__2c_20unsigned_20long_2c_20__locale_struct__2c_20char_20const__2c_20____29($8 + 384 | 0, 30, $0, $8 + 424 | 0, $8 + 48 | 0);
    break label$2;
   }
   HEAP32[$8 + 80 >> 2] = $4;
   HEAP32[$8 + 84 >> 2] = $5;
   HEAP32[$8 + 88 >> 2] = $6;
   HEAP32[$8 + 92 >> 2] = $7;
   $0 = std____2____libcpp_snprintf_l_28char__2c_20unsigned_20long_2c_20__locale_struct__2c_20char_20const__2c_20____29($8 + 384 | 0, 30, $0, $8 + 424 | 0, $8 + 80 | 0);
  }
  HEAP32[$8 + 128 >> 2] = 1644;
  $10 = std____2__unique_ptr__IO_FILE_2c_20int_20_28__29_28_IO_FILE__29___unique_ptr_true_2c_20void__28_IO_FILE__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_int_20_28__29_28_IO_FILE__29__2c_20true_____good_rval_ref_type_29($8 + 368 | 0, 0, $8 + 128 | 0);
  label$4 : {
   label$5 : {
    label$6 : {
     if (($0 | 0) >= 30) {
      label$8 : {
       if ($9) {
        HEAP32[16874] = 0;
        $0 = __invoke__struct___locale_struct_(1670) | 0;
        $9 = HEAP32[16874];
        HEAP32[16874] = 0;
        if (($9 | 0) == 1) {
         break label$5
        }
        $9 = HEAP32[$2 + 8 >> 2];
        HEAP32[$8 + 16 >> 2] = $4;
        HEAP32[$8 + 20 >> 2] = $5;
        HEAP32[$8 + 24 >> 2] = $6;
        HEAP32[$8 + 28 >> 2] = $7;
        HEAP32[$8 >> 2] = $9;
        HEAP32[16874] = 0;
        $0 = __invoke___22class_std____2__shared_ptr_22____22class_std____2__shared_ptr_22___class_maxiOsc____22class_emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc____val_deleter_22__i32(1692, $8 + 380 | 0, $0 | 0, $8 + 424 | 0, $8 | 0) | 0;
        $4 = HEAP32[16874];
        HEAP32[16874] = 0;
        if (($4 | 0) != 1) {
         break label$8
        }
        break label$5;
       }
       HEAP32[16874] = 0;
       $0 = __invoke__struct___locale_struct_(1670) | 0;
       $9 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($9 | 0) == 1) {
        break label$5
       }
       HEAP32[$8 + 32 >> 2] = $4;
       HEAP32[$8 + 36 >> 2] = $5;
       HEAP32[16874] = 0;
       HEAP32[$8 + 40 >> 2] = $6;
       HEAP32[$8 + 44 >> 2] = $7;
       $0 = __invoke___22class_std____2__shared_ptr_22____22class_std____2__shared_ptr_22___class_maxiOsc____22class_emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc____val_deleter_22__i32(1692, $8 + 380 | 0, $0 | 0, $8 + 424 | 0, $8 + 32 | 0) | 0;
       $4 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($4 | 0) == 1) {
        break label$5
       }
      }
      $4 = HEAP32[$8 + 380 >> 2];
      if (!$4) {
       HEAP32[16874] = 0;
       __invoke_void(1645);
       $0 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($0 | 0) == 1) {
        break label$5
       }
       break label$6;
      }
      std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___reset_28unsigned_20char__29($10, $4);
     }
     $4 = HEAP32[$8 + 380 >> 2];
     $5 = $4 + $0 | 0;
     $6 = std____2____num_put_base____identify_padding_28char__2c_20char__2c_20std____2__ios_base_20const__29($4, $5, $2);
     HEAP32[$8 + 116 >> 2] = 1644;
     $4 = std____2__unique_ptr__IO_FILE_2c_20int_20_28__29_28_IO_FILE__29___unique_ptr_true_2c_20void__28_IO_FILE__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_int_20_28__29_28_IO_FILE__29__2c_20true_____good_rval_ref_type_29($8 + 120 | 0, 0, $8 + 116 | 0);
     label$11 : {
      label$12 : {
       if (HEAP32[$8 + 380 >> 2] == ($8 + 384 | 0)) {
        $0 = $8 + 128 | 0;
        $7 = $8 + 384 | 0;
        break label$12;
       }
       $0 = dlmalloc($0 << 3);
       if (!$0) {
        HEAP32[16874] = 0;
        __invoke_void(1645);
        $0 = HEAP32[16874];
        HEAP32[16874] = 0;
        if (($0 | 0) != 1) {
         break label$6
        }
        $2 = __cxa_find_matching_catch_2() | 0;
        getTempRet0() | 0;
        break label$11;
       }
       std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___reset_28unsigned_20char__29($4, $0);
       $7 = HEAP32[$8 + 380 >> 2];
      }
      HEAP32[16874] = 0;
      std____2__ios_base__getloc_28_29_20const($8 + 104 | 0, $2);
      $9 = HEAP32[16874];
      HEAP32[16874] = 0;
      label$15 : {
       label$16 : {
        if (($9 | 0) != 1) {
         HEAP32[16874] = 0;
         __invoke_void_i8__i8__i8__i8__i8___i8_____22class_std____2__locale_22_(1703, $7 | 0, $6 | 0, $5 | 0, $0 | 0, $8 + 116 | 0, $8 + 112 | 0, $8 + 104 | 0);
         $5 = HEAP32[16874];
         HEAP32[16874] = 0;
         if (($5 | 0) == 1) {
          break label$16
         }
         std____2__locale___locale_28_29($8 + 104 | 0);
         HEAP32[16874] = 0;
         $0 = __invoke___22class_std____2__basic_streambuf_22____22class_std____2__basic_streambuf_22__i8__i8__i8____22class_std____2__ios_base_22__i8(1704, $1 | 0, $0 | 0, HEAP32[$8 + 116 >> 2], HEAP32[$8 + 112 >> 2], $2 | 0, $3 | 0) | 0;
         $1 = HEAP32[16874];
         HEAP32[16874] = 0;
         if (($1 | 0) == 1) {
          break label$15
         }
         std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29____unique_ptr_28_29($4);
         std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29____unique_ptr_28_29($10);
         $1 = $8 + 432 | 0;
         if ($1 >>> 0 < global$2 >>> 0) {
          __handle_stack_overflow()
         }
         global$0 = $1;
         return $0 | 0;
        }
        $2 = __cxa_find_matching_catch_2() | 0;
        getTempRet0() | 0;
        break label$11;
       }
       $2 = __cxa_find_matching_catch_2() | 0;
       getTempRet0() | 0;
       std____2__locale___locale_28_29($8 + 104 | 0);
       break label$11;
      }
      $2 = __cxa_find_matching_catch_2() | 0;
      getTempRet0() | 0;
     }
     std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29____unique_ptr_28_29($4);
     break label$4;
    }
    abort();
   }
   $2 = __cxa_find_matching_catch_2() | 0;
   getTempRet0() | 0;
  }
  std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29____unique_ptr_28_29($10);
  __resumeException($2 | 0);
  abort();
 }
 
 function std____2__num_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20wchar_t_2c_20void_20const__29_20const($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  $0 = global$0 - 208 | 0;
  $5 = $0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $5;
  HEAP16[$0 + 204 >> 1] = HEAPU8[39894] | HEAPU8[39895] << 8;
  HEAP32[$0 + 200 >> 2] = HEAPU8[39890] | HEAPU8[39891] << 8 | (HEAPU8[39892] << 16 | HEAPU8[39893] << 24);
  $5 = std____2____cloc_28_29();
  HEAP32[$0 >> 2] = $4;
  $6 = $0 + 176 | 0;
  $7 = std____2____libcpp_snprintf_l_28char__2c_20unsigned_20long_2c_20__locale_struct__2c_20char_20const__2c_20____29($0 + 176 | 0, 20, $5, $0 + 200 | 0, $0);
  $4 = $7 + ($0 + 176 | 0) | 0;
  $5 = std____2____num_put_base____identify_padding_28char__2c_20char__2c_20std____2__ios_base_20const__29($6, $4, $2);
  std____2__ios_base__getloc_28_29_20const($0 + 8 | 0, $2);
  HEAP32[16874] = 0;
  $6 = __invoke_i1___22class_std____2__basic_ifstream_22_(1674, $0 + 8 | 0) | 0;
  $8 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($8 | 0) != 1) {
   std____2__locale___locale_28_29($0 + 8 | 0);
   std____2__ctype_wchar_t___widen_28char_20const__2c_20char_20const__2c_20wchar_t__29_20const($6, $0 + 176 | 0, $4, $0 + 16 | 0);
   $6 = $1;
   $1 = ($0 + 16 | 0) + ($7 << 2) | 0;
   $1 = std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20std____2____pad_and_output_wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20std____2__ios_base__2c_20wchar_t_29($6, $0 + 16 | 0, ($4 | 0) == ($5 | 0) ? $1 : ($0 + ($5 - $0 << 2) | 0) + -688 | 0, $1, $2, $3);
   $0 = $0 + 208 | 0;
   if ($0 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $0;
   return $1 | 0;
  }
  $1 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__locale___locale_28_29($0 + 8 | 0);
  __resumeException($1 | 0);
  abort();
 }
 
 function void_20std____2____reverse_char___28char__2c_20char__2c_20std____2__random_access_iterator_tag_29($0, $1) {
  label$1 : {
   if (($0 | 0) == ($1 | 0)) {
    break label$1
   }
   while (1) {
    $1 = $1 + -1 | 0;
    if ($0 >>> 0 >= $1 >>> 0) {
     break label$1
    }
    std____2__enable_if__28is_move_constructible_char___value_29_20___20_28is_move_assignable_char___value_29_2c_20void___type_20std____2__swap_char__28char__2c_20char__29($0, $1);
    $0 = $0 + 1 | 0;
    continue;
   };
  }
 }
 
 function void_20std____2____reverse_wchar_t___28wchar_t__2c_20wchar_t__2c_20std____2__random_access_iterator_tag_29($0, $1) {
  label$1 : {
   if (($0 | 0) == ($1 | 0)) {
    break label$1
   }
   while (1) {
    $1 = $1 + -4 | 0;
    if ($0 >>> 0 >= $1 >>> 0) {
     break label$1
    }
    std____2__enable_if__28is_move_constructible_double____value_29_20___20_28is_move_assignable_double____value_29_2c_20void___type_20std____2__swap_double___28double___2c_20double___29($0, $1);
    $0 = $0 + 4 | 0;
    continue;
   };
  }
 }
 
 function std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20char_20const__2c_20char_20const__29_20const($0, $1, $2, $3, $4, $5, $6, $7) {
  var $8 = 0, $9 = 0, $10 = 0, $11 = 0;
  $8 = global$0 - 32 | 0;
  $10 = $8;
  if ($8 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $10;
  HEAP32[$8 + 16 >> 2] = $2;
  HEAP32[$8 + 24 >> 2] = $1;
  std____2__ios_base__getloc_28_29_20const($8 + 8 | 0, $3);
  HEAP32[16874] = 0;
  $9 = __invoke_i1___22class_std____2__basic_ifstream_22_(31, $8 + 8 | 0) | 0;
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($1 | 0) != 1) {
   std____2__locale___locale_28_29($8 + 8 | 0);
   HEAP32[$4 >> 2] = 0;
   $2 = 0;
   label$3 : {
    while (1) {
     if ($2 | ($6 | 0) == ($7 | 0)) {
      break label$3
     }
     label$5 : {
      if (bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29_1($8 + 24 | 0, $8 + 16 | 0)) {
       break label$5
      }
      label$6 : {
       if ((std____2__ctype_char___narrow_28char_2c_20char_29_20const($9, HEAP8[$6 | 0]) | 0) == 37) {
        $2 = $6 + 1 | 0;
        if (($7 | 0) == ($2 | 0)) {
         break label$5
        }
        $10 = 0;
        $1 = std____2__ctype_char___narrow_28char_2c_20char_29_20const($9, HEAP8[$2 | 0]);
        label$8 : {
         if (!(($1 | 0) == 69 | ($1 & 255) == 48)) {
          $11 = $1;
          $2 = $6;
          break label$8;
         }
         $6 = $6 + 2 | 0;
         if (($6 | 0) == ($7 | 0)) {
          break label$5
         }
         $11 = std____2__ctype_char___narrow_28char_2c_20char_29_20const($9, HEAP8[$6 | 0]);
         $10 = $1;
        }
        HEAP32[$8 + 24 >> 2] = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 36 >> 2]]($0, HEAP32[$8 + 24 >> 2], HEAP32[$8 + 16 >> 2], $3, $4, $5, $11, $10);
        $6 = $2 + 2 | 0;
        break label$6;
       }
       if (std____2__ctype_char___is_28unsigned_20short_2c_20char_29_20const($9, 8192, HEAP8[$6 | 0])) {
        while (1) {
         label$12 : {
          $6 = $6 + 1 | 0;
          if (($7 | 0) == ($6 | 0)) {
           $6 = $7;
           break label$12;
          }
          if (std____2__ctype_char___is_28unsigned_20short_2c_20char_29_20const($9, 8192, HEAP8[$6 | 0])) {
           continue
          }
         }
         break;
        };
        while (1) {
         if (!bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29($8 + 24 | 0, $8 + 16 | 0)) {
          break label$6
         }
         if (!std____2__ctype_char___is_28unsigned_20short_2c_20char_29_20const($9, 8192, std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator__28_29_20const($8 + 24 | 0))) {
          break label$6
         }
         std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator___28_29($8 + 24 | 0);
         continue;
        };
       }
       if ((std____2__ctype_char___toupper_28char_29_20const($9, std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator__28_29_20const($8 + 24 | 0)) | 0) == (std____2__ctype_char___toupper_28char_29_20const($9, HEAP8[$6 | 0]) | 0)) {
        $6 = $6 + 1 | 0;
        std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator___28_29($8 + 24 | 0);
        break label$6;
       }
       HEAP32[$4 >> 2] = 4;
      }
      $2 = HEAP32[$4 >> 2];
      continue;
     }
     break;
    };
    HEAP32[$4 >> 2] = 4;
   }
   if (bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29_1($8 + 24 | 0, $8 + 16 | 0)) {
    HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2
   }
   $0 = HEAP32[$8 + 24 >> 2];
   $1 = $8 + 32 | 0;
   if ($1 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $1;
   return $0;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__locale___locale_28_29($8 + 8 | 0);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2__ctype_char___narrow_28char_2c_20char_29_20const($0, $1) {
  return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 36 >> 2]]($0, $1, 0) | 0;
 }
 
 function std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_time_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $7 = 0;
  $6 = global$0 - 16 | 0;
  $7 = $6;
  if ($6 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $7;
  HEAP32[$6 + 8 >> 2] = 624576549;
  HEAP32[$6 + 12 >> 2] = 1394948685;
  $0 = std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20char_20const__2c_20char_20const__29_20const($0, $1, $2, $3, $4, $5, $6 + 8 | 0, $6 + 16 | 0);
  $1 = $6 + 16 | 0;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  return $0 | 0;
 }
 
 function std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_date_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0;
  $6 = $0;
  $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 8 >> 2] + 20 >> 2]]($0 + 8 | 0) | 0;
  return std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20char_20const__2c_20char_20const__29_20const($6, $1, $2, $3, $4, $5, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_pointer_28_29_20const($0), std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_pointer_28_29_20const($0) + std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($0) | 0) | 0;
 }
 
 function std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_weekday_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $7 = 0;
  $6 = global$0 - 16 | 0;
  $7 = $6;
  if ($6 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $7;
  HEAP32[$6 + 8 >> 2] = $1;
  std____2__ios_base__getloc_28_29_20const($6, $3);
  HEAP32[16874] = 0;
  $1 = __invoke_i1___22class_std____2__basic_ifstream_22_(31, $6 | 0) | 0;
  $3 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($3 | 0) != 1) {
   std____2__locale___locale_28_29($6);
   std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_weekdayname_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($0, $5 + 24 | 0, $6 + 8 | 0, $2, $4, $1);
   $0 = HEAP32[$6 + 8 >> 2];
   $1 = $6 + 16 | 0;
   if ($1 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $1;
   return $0 | 0;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__locale___locale_28_29($6);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_weekdayname_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($0, $1, $2, $3, $4, $5) {
  $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 8 >> 2] >> 2]]($0 + 8 | 0) | 0;
  $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__20std____2____scan_keyword_std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__ctype_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__ctype_char__20const__2c_20unsigned_20int__2c_20bool_29($2, $3, $0, $0 + 168 | 0, $5, $4, 0) - $0 | 0;
  if (($0 | 0) <= 167) {
   HEAP32[$1 >> 2] = (($0 | 0) / 12 | 0) % 7
  }
 }
 
 function std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_monthname_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $7 = 0;
  $6 = global$0 - 16 | 0;
  $7 = $6;
  if ($6 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $7;
  HEAP32[$6 + 8 >> 2] = $1;
  std____2__ios_base__getloc_28_29_20const($6, $3);
  HEAP32[16874] = 0;
  $1 = __invoke_i1___22class_std____2__basic_ifstream_22_(31, $6 | 0) | 0;
  $3 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($3 | 0) != 1) {
   std____2__locale___locale_28_29($6);
   std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_monthname_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($0, $5 + 16 | 0, $6 + 8 | 0, $2, $4, $1);
   $0 = HEAP32[$6 + 8 >> 2];
   $1 = $6 + 16 | 0;
   if ($1 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $1;
   return $0 | 0;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__locale___locale_28_29($6);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_monthname_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($0, $1, $2, $3, $4, $5) {
  $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 8 >> 2] + 4 >> 2]]($0 + 8 | 0) | 0;
  $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__20std____2____scan_keyword_std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__ctype_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__ctype_char__20const__2c_20unsigned_20int__2c_20bool_29($2, $3, $0, $0 + 288 | 0, $5, $4, 0) - $0 | 0;
  if (($0 | 0) <= 287) {
   HEAP32[$1 >> 2] = (($0 | 0) / 12 | 0) % 12
  }
 }
 
 function std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_year_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0;
  $6 = global$0 - 16 | 0;
  $0 = $6;
  if ($6 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
  HEAP32[$6 + 8 >> 2] = $1;
  std____2__ios_base__getloc_28_29_20const($6, $3);
  HEAP32[16874] = 0;
  $1 = __invoke_i1___22class_std____2__basic_ifstream_22_(31, $6 | 0) | 0;
  $3 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($3 | 0) != 1) {
   std____2__locale___locale_28_29($6);
   std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_year_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($5 + 20 | 0, $6 + 8 | 0, $2, $4, $1);
   $0 = HEAP32[$6 + 8 >> 2];
   $1 = $6 + 16 | 0;
   if ($1 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $1;
   return $0 | 0;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__locale___locale_28_29($6);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_year_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($0, $1, $2, $3, $4) {
  $1 = int_20std____2____get_up_to_n_digits_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__2c_20int_29($1, $2, $3, $4, 4);
  if (!(HEAPU8[$3 | 0] & 4)) {
   HEAP32[$0 >> 2] = (($1 | 0) < 69 ? $1 + 2e3 | 0 : ($1 | 0) < 100 ? $1 + 1900 | 0 : $1) + -1900
  }
 }
 
 function int_20std____2____get_up_to_n_digits_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__2c_20int_29($0, $1, $2, $3, $4) {
  var $5 = 0, $6 = 0;
  $5 = global$0 - 16 | 0;
  $6 = $5;
  if ($5 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $6;
  HEAP32[$5 + 8 >> 2] = $1;
  label$2 : {
   if (bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29_1($0, $5 + 8 | 0)) {
    HEAP32[$2 >> 2] = HEAP32[$2 >> 2] | 6;
    $1 = 0;
    break label$2;
   }
   $1 = std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator__28_29_20const($0);
   if (!std____2__ctype_char___is_28unsigned_20short_2c_20char_29_20const($3, 2048, $1)) {
    HEAP32[$2 >> 2] = HEAP32[$2 >> 2] | 4;
    $1 = 0;
    break label$2;
   }
   $1 = std____2__ctype_char___narrow_28char_2c_20char_29_20const($3, $1);
   while (1) {
    label$6 : {
     std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator___28_29($0);
     $1 = $1 + -48 | 0;
     if (!bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29($0, $5 + 8 | 0) | ($4 | 0) < 2) {
      break label$6
     }
     $6 = std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator__28_29_20const($0);
     if (!std____2__ctype_char___is_28unsigned_20short_2c_20char_29_20const($3, 2048, $6)) {
      break label$2
     }
     $4 = $4 + -1 | 0;
     $1 = std____2__ctype_char___narrow_28char_2c_20char_29_20const($3, $6) + Math_imul($1, 10) | 0;
     continue;
    }
    break;
   };
   if (!bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29_1($0, $5 + 8 | 0)) {
    break label$2
   }
   HEAP32[$2 >> 2] = HEAP32[$2 >> 2] | 2;
  }
  $0 = $5 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
  return $1;
 }
 
 function std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20char_2c_20char_29_20const($0, $1, $2, $3, $4, $5, $6, $7) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  var $8 = 0, $9 = 0;
  $7 = global$0 - 32 | 0;
  $8 = $7;
  if ($7 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $8;
  HEAP32[$7 + 24 >> 2] = $1;
  HEAP32[$4 >> 2] = 0;
  std____2__ios_base__getloc_28_29_20const($7 + 8 | 0, $3);
  HEAP32[16874] = 0;
  $8 = __invoke_i1___22class_std____2__basic_ifstream_22_(31, $7 + 8 | 0) | 0;
  $9 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      label$6 : {
       label$7 : {
        label$8 : {
         label$9 : {
          label$10 : {
           label$11 : {
            label$12 : {
             label$13 : {
              label$14 : {
               label$15 : {
                label$16 : {
                 label$17 : {
                  label$18 : {
                   label$19 : {
                    label$20 : {
                     label$21 : {
                      label$22 : {
                       label$23 : {
                        label$24 : {
                         label$25 : {
                          label$26 : {
                           if (($9 | 0) != 1) {
                            std____2__locale___locale_28_29($7 + 8 | 0);
                            $9 = $6 + -65 | 0;
                            if ($9 >>> 0 > 56) {
                             if (($6 | 0) != 37) {
                              break label$4
                             }
                             std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_percent_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($7 + 24 | 0, $2, $4, $8);
                             break label$3;
                            }
                            switch ($9 - 1 | 0) {
                            case 18:
                             break label$10;
                            case 17:
                             break label$11;
                            case 16:
                             break label$12;
                            case 48:
                             break label$13;
                            case 46:
                             break label$14;
                            case 44:
                            case 50:
                             break label$15;
                            case 11:
                             break label$16;
                            case 43:
                             break label$17;
                            case 40:
                             break label$18;
                            case 7:
                             break label$19;
                            case 6:
                             break label$20;
                            case 4:
                             break label$21;
                            case 2:
                             break label$22;
                            case 34:
                            case 35:
                             break label$23;
                            case 33:
                             break label$24;
                            case 0:
                            case 32:
                            case 38:
                             break label$25;
                            case 1:
                            case 3:
                            case 5:
                            case 8:
                            case 9:
                            case 10:
                            case 12:
                            case 13:
                            case 14:
                            case 15:
                            case 19:
                            case 20:
                            case 21:
                            case 24:
                            case 25:
                            case 26:
                            case 27:
                            case 28:
                            case 29:
                            case 30:
                            case 36:
                            case 37:
                            case 39:
                            case 41:
                            case 42:
                            case 45:
                            case 47:
                            case 49:
                            case 51:
                            case 52:
                             break label$4;
                            case 23:
                             break label$5;
                            case 55:
                             break label$6;
                            case 22:
                             break label$7;
                            case 54:
                             break label$8;
                            case 53:
                             break label$9;
                            default:
                             break label$26;
                            };
                           }
                           $0 = __cxa_find_matching_catch_2() | 0;
                           getTempRet0() | 0;
                           std____2__locale___locale_28_29($7 + 8 | 0);
                           __resumeException($0 | 0);
                           abort();
                          }
                          std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_weekdayname_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($0, $5 + 24 | 0, $7 + 24 | 0, $2, $4, $8);
                          break label$3;
                         }
                         std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_monthname_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($0, $5 + 16 | 0, $7 + 24 | 0, $2, $4, $8);
                         break label$3;
                        }
                        $1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 8 >> 2] + 12 >> 2]]($0 + 8 | 0) | 0;
                        HEAP32[$7 + 24 >> 2] = std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20char_20const__2c_20char_20const__29_20const($0, HEAP32[$7 + 24 >> 2], $2, $3, $4, $5, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_pointer_28_29_20const($1), std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_pointer_28_29_20const($1) + std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($1) | 0);
                        break label$3;
                       }
                       std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_day_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($5 + 12 | 0, $7 + 24 | 0, $2, $4, $8);
                       break label$3;
                      }
                      HEAP32[$7 + 8 >> 2] = 623865125;
                      HEAP32[$7 + 12 >> 2] = 2032480100;
                      HEAP32[$7 + 24 >> 2] = std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20char_20const__2c_20char_20const__29_20const($0, $1, $2, $3, $4, $5, $7 + 8 | 0, $7 + 16 | 0);
                      break label$3;
                     }
                     HEAP32[$7 + 8 >> 2] = 623728933;
                     HEAP32[$7 + 12 >> 2] = 1680158061;
                     HEAP32[$7 + 24 >> 2] = std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20char_20const__2c_20char_20const__29_20const($0, $1, $2, $3, $4, $5, $7 + 8 | 0, $7 + 16 | 0);
                     break label$3;
                    }
                    std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_hour_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($5 + 8 | 0, $7 + 24 | 0, $2, $4, $8);
                    break label$3;
                   }
                   std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_12_hour_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($5 + 8 | 0, $7 + 24 | 0, $2, $4, $8);
                   break label$3;
                  }
                  std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_day_year_num_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($5 + 28 | 0, $7 + 24 | 0, $2, $4, $8);
                  break label$3;
                 }
                 std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_month_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($5 + 16 | 0, $7 + 24 | 0, $2, $4, $8);
                 break label$3;
                }
                std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_minute_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($5 + 4 | 0, $7 + 24 | 0, $2, $4, $8);
                break label$3;
               }
               std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_white_space_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($7 + 24 | 0, $2, $4, $8);
               break label$3;
              }
              std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_am_pm_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($0, $5 + 8 | 0, $7 + 24 | 0, $2, $4, $8);
              break label$3;
             }
             $6 = HEAPU8[39903] | HEAPU8[39904] << 8 | (HEAPU8[39905] << 16 | HEAPU8[39906] << 24);
             HEAP8[$7 + 15 | 0] = $6;
             HEAP8[$7 + 16 | 0] = $6 >>> 8;
             HEAP8[$7 + 17 | 0] = $6 >>> 16;
             HEAP8[$7 + 18 | 0] = $6 >>> 24;
             $6 = HEAPU8[39900] | HEAPU8[39901] << 8 | (HEAPU8[39902] << 16 | HEAPU8[39903] << 24);
             HEAP32[$7 + 8 >> 2] = HEAPU8[39896] | HEAPU8[39897] << 8 | (HEAPU8[39898] << 16 | HEAPU8[39899] << 24);
             HEAP32[$7 + 12 >> 2] = $6;
             HEAP32[$7 + 24 >> 2] = std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20char_20const__2c_20char_20const__29_20const($0, $1, $2, $3, $4, $5, $7 + 8 | 0, $7 + 19 | 0);
             break label$3;
            }
            HEAP8[$7 + 12 | 0] = HEAPU8[39911];
            HEAP32[$7 + 8 >> 2] = HEAPU8[39907] | HEAPU8[39908] << 8 | (HEAPU8[39909] << 16 | HEAPU8[39910] << 24);
            HEAP32[$7 + 24 >> 2] = std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20char_20const__2c_20char_20const__29_20const($0, $1, $2, $3, $4, $5, $7 + 8 | 0, $7 + 13 | 0);
            break label$3;
           }
           std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_second_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($5, $7 + 24 | 0, $2, $4, $8);
           break label$3;
          }
          HEAP32[$7 + 8 >> 2] = 624576549;
          HEAP32[$7 + 12 >> 2] = 1394948685;
          HEAP32[$7 + 24 >> 2] = std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20char_20const__2c_20char_20const__29_20const($0, $1, $2, $3, $4, $5, $7 + 8 | 0, $7 + 16 | 0);
          break label$3;
         }
         std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_weekday_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($5 + 24 | 0, $7 + 24 | 0, $2, $4, $8);
         break label$3;
        }
        $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0, $1, $2, $3, $4, $5) | 0;
        break label$2;
       }
       $1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 8 >> 2] + 24 >> 2]]($0 + 8 | 0) | 0;
       HEAP32[$7 + 24 >> 2] = std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20char_20const__2c_20char_20const__29_20const($0, HEAP32[$7 + 24 >> 2], $2, $3, $4, $5, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_pointer_28_29_20const($1), std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_pointer_28_29_20const($1) + std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($1) | 0);
       break label$3;
      }
      std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_year_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($5 + 20 | 0, $7 + 24 | 0, $2, $4, $8);
      break label$3;
     }
     std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_year4_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($5 + 20 | 0, $7 + 24 | 0, $2, $4, $8);
     break label$3;
    }
    HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 4;
   }
   $0 = HEAP32[$7 + 24 >> 2];
  }
  $1 = $7 + 32 | 0;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  return $0 | 0;
 }
 
 function std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_percent_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($0, $1, $2, $3) {
  var $4 = 0, $5 = 0;
  $4 = global$0 - 16 | 0;
  $5 = $4;
  if ($4 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $5;
  HEAP32[$4 + 8 >> 2] = $1;
  $1 = 6;
  label$2 : {
   label$3 : {
    if (bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29_1($0, $4 + 8 | 0)) {
     break label$3
    }
    $1 = 4;
    if ((std____2__ctype_char___narrow_28char_2c_20char_29_20const($3, std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator__28_29_20const($0)) | 0) != 37) {
     break label$3
    }
    $1 = 2;
    if (!bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29_1(std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator___28_29($0), $4 + 8 | 0)) {
     break label$2
    }
   }
   HEAP32[$2 >> 2] = HEAP32[$2 >> 2] | $1;
  }
  $0 = $4 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_day_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($0, $1, $2, $3, $4) {
  $1 = int_20std____2____get_up_to_n_digits_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__2c_20int_29($1, $2, $3, $4, 2);
  $2 = HEAP32[$3 >> 2];
  if (!($1 + -1 >>> 0 > 30 | $2 & 4)) {
   HEAP32[$0 >> 2] = $1;
   return;
  }
  HEAP32[$3 >> 2] = $2 | 4;
 }
 
 function std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_hour_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($0, $1, $2, $3, $4) {
  $1 = int_20std____2____get_up_to_n_digits_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__2c_20int_29($1, $2, $3, $4, 2);
  $2 = HEAP32[$3 >> 2];
  if (!(($1 | 0) > 23 | $2 & 4)) {
   HEAP32[$0 >> 2] = $1;
   return;
  }
  HEAP32[$3 >> 2] = $2 | 4;
 }
 
 function std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_12_hour_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($0, $1, $2, $3, $4) {
  $1 = int_20std____2____get_up_to_n_digits_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__2c_20int_29($1, $2, $3, $4, 2);
  $2 = HEAP32[$3 >> 2];
  if (!($1 + -1 >>> 0 > 11 | $2 & 4)) {
   HEAP32[$0 >> 2] = $1;
   return;
  }
  HEAP32[$3 >> 2] = $2 | 4;
 }
 
 function std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_day_year_num_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($0, $1, $2, $3, $4) {
  $1 = int_20std____2____get_up_to_n_digits_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__2c_20int_29($1, $2, $3, $4, 3);
  $2 = HEAP32[$3 >> 2];
  if (!(($1 | 0) > 365 | $2 & 4)) {
   HEAP32[$0 >> 2] = $1;
   return;
  }
  HEAP32[$3 >> 2] = $2 | 4;
 }
 
 function std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_month_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($0, $1, $2, $3, $4) {
  $1 = int_20std____2____get_up_to_n_digits_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__2c_20int_29($1, $2, $3, $4, 2);
  $2 = HEAP32[$3 >> 2];
  if (!(($1 | 0) > 12 | $2 & 4)) {
   HEAP32[$0 >> 2] = $1 + -1;
   return;
  }
  HEAP32[$3 >> 2] = $2 | 4;
 }
 
 function std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_minute_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($0, $1, $2, $3, $4) {
  $1 = int_20std____2____get_up_to_n_digits_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__2c_20int_29($1, $2, $3, $4, 2);
  $2 = HEAP32[$3 >> 2];
  if (!(($1 | 0) > 59 | $2 & 4)) {
   HEAP32[$0 >> 2] = $1;
   return;
  }
  HEAP32[$3 >> 2] = $2 | 4;
 }
 
 function std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_white_space_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($0, $1, $2, $3) {
  var $4 = 0, $5 = 0;
  $4 = global$0 - 16 | 0;
  $5 = $4;
  if ($4 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $5;
  HEAP32[$4 + 8 >> 2] = $1;
  while (1) {
   label$3 : {
    if (!bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29($0, $4 + 8 | 0)) {
     break label$3
    }
    if (!std____2__ctype_char___is_28unsigned_20short_2c_20char_29_20const($3, 8192, std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator__28_29_20const($0))) {
     break label$3
    }
    std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator___28_29($0);
    continue;
   }
   break;
  };
  if (bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29_1($0, $4 + 8 | 0)) {
   HEAP32[$2 >> 2] = HEAP32[$2 >> 2] | 2
  }
  $0 = $4 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_am_pm_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($0, $1, $2, $3, $4, $5) {
  $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 8 >> 2] + 8 >> 2]]($0 + 8 | 0) | 0;
  if ((std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($0) | 0) == (0 - std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($0 + 12 | 0) | 0)) {
   HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 4;
   return;
  }
  $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__20std____2____scan_keyword_std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__ctype_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__ctype_char__20const__2c_20unsigned_20int__2c_20bool_29($2, $3, $0, $0 + 24 | 0, $5, $4, 0) - $0 | 0;
  $2 = HEAP32[$1 >> 2];
  if (!($0 | ($2 | 0) != 12)) {
   HEAP32[$1 >> 2] = 0;
   return;
  }
  if (!(($0 | 0) != 12 | ($2 | 0) > 11)) {
   HEAP32[$1 >> 2] = $2 + 12
  }
 }
 
 function std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_second_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($0, $1, $2, $3, $4) {
  $1 = int_20std____2____get_up_to_n_digits_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__2c_20int_29($1, $2, $3, $4, 2);
  $2 = HEAP32[$3 >> 2];
  if (!(($1 | 0) > 60 | $2 & 4)) {
   HEAP32[$0 >> 2] = $1;
   return;
  }
  HEAP32[$3 >> 2] = $2 | 4;
 }
 
 function std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_weekday_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($0, $1, $2, $3, $4) {
  $1 = int_20std____2____get_up_to_n_digits_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__2c_20int_29($1, $2, $3, $4, 1);
  $2 = HEAP32[$3 >> 2];
  if (!(($1 | 0) > 6 | $2 & 4)) {
   HEAP32[$0 >> 2] = $1;
   return;
  }
  HEAP32[$3 >> 2] = $2 | 4;
 }
 
 function std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____get_year4_28int__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__29_20const($0, $1, $2, $3, $4) {
  $1 = int_20std____2____get_up_to_n_digits_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20unsigned_20int__2c_20std____2__ctype_char__20const__2c_20int_29($1, $2, $3, $4, 4);
  if (!(HEAPU8[$3 | 0] & 4)) {
   HEAP32[$0 >> 2] = $1 + -1900
  }
 }
 
 function std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20wchar_t_20const__2c_20wchar_t_20const__29_20const($0, $1, $2, $3, $4, $5, $6, $7) {
  var $8 = 0, $9 = 0, $10 = 0, $11 = 0;
  $8 = global$0 - 32 | 0;
  $10 = $8;
  if ($8 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $10;
  HEAP32[$8 + 16 >> 2] = $2;
  HEAP32[$8 + 24 >> 2] = $1;
  std____2__ios_base__getloc_28_29_20const($8 + 8 | 0, $3);
  HEAP32[16874] = 0;
  $9 = __invoke_i1___22class_std____2__basic_ifstream_22_(1674, $8 + 8 | 0) | 0;
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($1 | 0) != 1) {
   std____2__locale___locale_28_29($8 + 8 | 0);
   HEAP32[$4 >> 2] = 0;
   $2 = 0;
   label$3 : {
    while (1) {
     if ($2 | ($6 | 0) == ($7 | 0)) {
      break label$3
     }
     label$5 : {
      if (bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29_1($8 + 24 | 0, $8 + 16 | 0)) {
       break label$5
      }
      label$6 : {
       if ((std____2__ctype_wchar_t___narrow_28wchar_t_2c_20char_29_20const($9, HEAP32[$6 >> 2]) | 0) == 37) {
        $2 = $6 + 4 | 0;
        if (($7 | 0) == ($2 | 0)) {
         break label$5
        }
        $10 = 0;
        $1 = std____2__ctype_wchar_t___narrow_28wchar_t_2c_20char_29_20const($9, HEAP32[$2 >> 2]);
        label$8 : {
         if (!(($1 | 0) == 69 | ($1 & 255) == 48)) {
          $11 = $1;
          $2 = $6;
          break label$8;
         }
         $6 = $6 + 8 | 0;
         if (($6 | 0) == ($7 | 0)) {
          break label$5
         }
         $11 = std____2__ctype_wchar_t___narrow_28wchar_t_2c_20char_29_20const($9, HEAP32[$6 >> 2]);
         $10 = $1;
        }
        HEAP32[$8 + 24 >> 2] = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 36 >> 2]]($0, HEAP32[$8 + 24 >> 2], HEAP32[$8 + 16 >> 2], $3, $4, $5, $11, $10);
        $6 = $2 + 8 | 0;
        break label$6;
       }
       if (std____2__ctype_wchar_t___is_28unsigned_20short_2c_20wchar_t_29_20const($9, 8192, HEAP32[$6 >> 2])) {
        while (1) {
         label$12 : {
          $6 = $6 + 4 | 0;
          if (($7 | 0) == ($6 | 0)) {
           $6 = $7;
           break label$12;
          }
          if (std____2__ctype_wchar_t___is_28unsigned_20short_2c_20wchar_t_29_20const($9, 8192, HEAP32[$6 >> 2])) {
           continue
          }
         }
         break;
        };
        while (1) {
         if (!bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29($8 + 24 | 0, $8 + 16 | 0)) {
          break label$6
         }
         if (!std____2__ctype_wchar_t___is_28unsigned_20short_2c_20wchar_t_29_20const($9, 8192, std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator__28_29_20const($8 + 24 | 0))) {
          break label$6
         }
         std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator___28_29($8 + 24 | 0);
         continue;
        };
       }
       if ((std____2__ctype_char___widen_28char_29_20const($9, std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator__28_29_20const($8 + 24 | 0)) | 0) == (std____2__ctype_char___widen_28char_29_20const($9, HEAP32[$6 >> 2]) | 0)) {
        $6 = $6 + 4 | 0;
        std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator___28_29($8 + 24 | 0);
        break label$6;
       }
       HEAP32[$4 >> 2] = 4;
      }
      $2 = HEAP32[$4 >> 2];
      continue;
     }
     break;
    };
    HEAP32[$4 >> 2] = 4;
   }
   if (bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29_1($8 + 24 | 0, $8 + 16 | 0)) {
    HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2
   }
   $0 = HEAP32[$8 + 24 >> 2];
   $1 = $8 + 32 | 0;
   if ($1 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $1;
   return $0;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__locale___locale_28_29($8 + 8 | 0);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2__ctype_wchar_t___narrow_28wchar_t_2c_20char_29_20const($0, $1) {
  return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 52 >> 2]]($0, $1, 0) | 0;
 }
 
 function std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_time_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $7 = 0;
  $6 = global$0 - 32 | 0;
  $7 = $6;
  if ($6 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $7;
  $7 = HEAP32[10023];
  HEAP32[$6 + 24 >> 2] = HEAP32[10022];
  HEAP32[$6 + 28 >> 2] = $7;
  $7 = HEAP32[10021];
  HEAP32[$6 + 16 >> 2] = HEAP32[10020];
  HEAP32[$6 + 20 >> 2] = $7;
  $7 = HEAP32[10019];
  HEAP32[$6 + 8 >> 2] = HEAP32[10018];
  HEAP32[$6 + 12 >> 2] = $7;
  $7 = HEAP32[10017];
  HEAP32[$6 >> 2] = HEAP32[10016];
  HEAP32[$6 + 4 >> 2] = $7;
  $0 = std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20wchar_t_20const__2c_20wchar_t_20const__29_20const($0, $1, $2, $3, $4, $5, $6, $6 + 32 | 0);
  $1 = $6 + 32 | 0;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  return $0 | 0;
 }
 
 function std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_date_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0;
  $6 = $0;
  $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 8 >> 2] + 20 >> 2]]($0 + 8 | 0) | 0;
  return std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20wchar_t_20const__2c_20wchar_t_20const__29_20const($6, $1, $2, $3, $4, $5, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_pointer_28_29_20const($0), std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_pointer_28_29_20const($0) + (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($0) << 2) | 0) | 0;
 }
 
 function std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_weekday_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $7 = 0;
  $6 = global$0 - 16 | 0;
  $7 = $6;
  if ($6 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $7;
  HEAP32[$6 + 8 >> 2] = $1;
  std____2__ios_base__getloc_28_29_20const($6, $3);
  HEAP32[16874] = 0;
  $1 = __invoke_i1___22class_std____2__basic_ifstream_22_(1674, $6 | 0) | 0;
  $3 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($3 | 0) != 1) {
   std____2__locale___locale_28_29($6);
   std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_weekdayname_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($0, $5 + 24 | 0, $6 + 8 | 0, $2, $4, $1);
   $0 = HEAP32[$6 + 8 >> 2];
   $1 = $6 + 16 | 0;
   if ($1 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $1;
   return $0 | 0;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__locale___locale_28_29($6);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_weekdayname_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($0, $1, $2, $3, $4, $5) {
  $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 8 >> 2] >> 2]]($0 + 8 | 0) | 0;
  $0 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__20std____2____scan_keyword_std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__2c_20std____2__ctype_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__2c_20std____2__ctype_wchar_t__20const__2c_20unsigned_20int__2c_20bool_29($2, $3, $0, $0 + 168 | 0, $5, $4, 0) - $0 | 0;
  if (($0 | 0) <= 167) {
   HEAP32[$1 >> 2] = (($0 | 0) / 12 | 0) % 7
  }
 }
 
 function std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_monthname_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $7 = 0;
  $6 = global$0 - 16 | 0;
  $7 = $6;
  if ($6 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $7;
  HEAP32[$6 + 8 >> 2] = $1;
  std____2__ios_base__getloc_28_29_20const($6, $3);
  HEAP32[16874] = 0;
  $1 = __invoke_i1___22class_std____2__basic_ifstream_22_(1674, $6 | 0) | 0;
  $3 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($3 | 0) != 1) {
   std____2__locale___locale_28_29($6);
   std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_monthname_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($0, $5 + 16 | 0, $6 + 8 | 0, $2, $4, $1);
   $0 = HEAP32[$6 + 8 >> 2];
   $1 = $6 + 16 | 0;
   if ($1 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $1;
   return $0 | 0;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__locale___locale_28_29($6);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_monthname_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($0, $1, $2, $3, $4, $5) {
  $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 8 >> 2] + 4 >> 2]]($0 + 8 | 0) | 0;
  $0 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__20std____2____scan_keyword_std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__2c_20std____2__ctype_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__2c_20std____2__ctype_wchar_t__20const__2c_20unsigned_20int__2c_20bool_29($2, $3, $0, $0 + 288 | 0, $5, $4, 0) - $0 | 0;
  if (($0 | 0) <= 287) {
   HEAP32[$1 >> 2] = (($0 | 0) / 12 | 0) % 12
  }
 }
 
 function std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_year_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0;
  $6 = global$0 - 16 | 0;
  $0 = $6;
  if ($6 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
  HEAP32[$6 + 8 >> 2] = $1;
  std____2__ios_base__getloc_28_29_20const($6, $3);
  HEAP32[16874] = 0;
  $1 = __invoke_i1___22class_std____2__basic_ifstream_22_(1674, $6 | 0) | 0;
  $3 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($3 | 0) != 1) {
   std____2__locale___locale_28_29($6);
   std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_year_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($5 + 20 | 0, $6 + 8 | 0, $2, $4, $1);
   $0 = HEAP32[$6 + 8 >> 2];
   $1 = $6 + 16 | 0;
   if ($1 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $1;
   return $0 | 0;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__locale___locale_28_29($6);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_year_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($0, $1, $2, $3, $4) {
  $1 = int_20std____2____get_up_to_n_digits_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__2c_20int_29($1, $2, $3, $4, 4);
  if (!(HEAPU8[$3 | 0] & 4)) {
   HEAP32[$0 >> 2] = (($1 | 0) < 69 ? $1 + 2e3 | 0 : ($1 | 0) < 100 ? $1 + 1900 | 0 : $1) + -1900
  }
 }
 
 function int_20std____2____get_up_to_n_digits_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__2c_20int_29($0, $1, $2, $3, $4) {
  var $5 = 0, $6 = 0;
  $5 = global$0 - 16 | 0;
  $6 = $5;
  if ($5 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $6;
  HEAP32[$5 + 8 >> 2] = $1;
  label$2 : {
   if (bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29_1($0, $5 + 8 | 0)) {
    HEAP32[$2 >> 2] = HEAP32[$2 >> 2] | 6;
    $1 = 0;
    break label$2;
   }
   $1 = std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator__28_29_20const($0);
   if (!std____2__ctype_wchar_t___is_28unsigned_20short_2c_20wchar_t_29_20const($3, 2048, $1)) {
    HEAP32[$2 >> 2] = HEAP32[$2 >> 2] | 4;
    $1 = 0;
    break label$2;
   }
   $1 = std____2__ctype_wchar_t___narrow_28wchar_t_2c_20char_29_20const($3, $1);
   while (1) {
    label$6 : {
     std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator___28_29($0);
     $1 = $1 + -48 | 0;
     if (!bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29($0, $5 + 8 | 0) | ($4 | 0) < 2) {
      break label$6
     }
     $6 = std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator__28_29_20const($0);
     if (!std____2__ctype_wchar_t___is_28unsigned_20short_2c_20wchar_t_29_20const($3, 2048, $6)) {
      break label$2
     }
     $4 = $4 + -1 | 0;
     $1 = std____2__ctype_wchar_t___narrow_28wchar_t_2c_20char_29_20const($3, $6) + Math_imul($1, 10) | 0;
     continue;
    }
    break;
   };
   if (!bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29_1($0, $5 + 8 | 0)) {
    break label$2
   }
   HEAP32[$2 >> 2] = HEAP32[$2 >> 2] | 2;
  }
  $0 = $5 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
  return $1;
 }
 
 function std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20char_2c_20char_29_20const($0, $1, $2, $3, $4, $5, $6, $7) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  var $8 = 0, $9 = 0;
  $7 = global$0 + -64 | 0;
  $8 = $7;
  if ($7 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $8;
  HEAP32[$7 + 56 >> 2] = $1;
  HEAP32[$4 >> 2] = 0;
  std____2__ios_base__getloc_28_29_20const($7, $3);
  HEAP32[16874] = 0;
  $8 = __invoke_i1___22class_std____2__basic_ifstream_22_(1674, $7 | 0) | 0;
  $9 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      label$6 : {
       label$7 : {
        label$8 : {
         label$9 : {
          label$10 : {
           label$11 : {
            label$12 : {
             label$13 : {
              label$14 : {
               label$15 : {
                label$16 : {
                 label$17 : {
                  label$18 : {
                   label$19 : {
                    label$20 : {
                     label$21 : {
                      label$22 : {
                       label$23 : {
                        label$24 : {
                         label$25 : {
                          label$26 : {
                           if (($9 | 0) != 1) {
                            std____2__locale___locale_28_29($7);
                            $9 = $6 + -65 | 0;
                            if ($9 >>> 0 > 56) {
                             if (($6 | 0) != 37) {
                              break label$4
                             }
                             std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_percent_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($7 + 56 | 0, $2, $4, $8);
                             break label$3;
                            }
                            switch ($9 - 1 | 0) {
                            case 18:
                             break label$10;
                            case 17:
                             break label$11;
                            case 16:
                             break label$12;
                            case 48:
                             break label$13;
                            case 46:
                             break label$14;
                            case 44:
                            case 50:
                             break label$15;
                            case 11:
                             break label$16;
                            case 43:
                             break label$17;
                            case 40:
                             break label$18;
                            case 7:
                             break label$19;
                            case 6:
                             break label$20;
                            case 4:
                             break label$21;
                            case 2:
                             break label$22;
                            case 34:
                            case 35:
                             break label$23;
                            case 33:
                             break label$24;
                            case 0:
                            case 32:
                            case 38:
                             break label$25;
                            case 1:
                            case 3:
                            case 5:
                            case 8:
                            case 9:
                            case 10:
                            case 12:
                            case 13:
                            case 14:
                            case 15:
                            case 19:
                            case 20:
                            case 21:
                            case 24:
                            case 25:
                            case 26:
                            case 27:
                            case 28:
                            case 29:
                            case 30:
                            case 36:
                            case 37:
                            case 39:
                            case 41:
                            case 42:
                            case 45:
                            case 47:
                            case 49:
                            case 51:
                            case 52:
                             break label$4;
                            case 23:
                             break label$5;
                            case 55:
                             break label$6;
                            case 22:
                             break label$7;
                            case 54:
                             break label$8;
                            case 53:
                             break label$9;
                            default:
                             break label$26;
                            };
                           }
                           $0 = __cxa_find_matching_catch_2() | 0;
                           getTempRet0() | 0;
                           std____2__locale___locale_28_29($7);
                           __resumeException($0 | 0);
                           abort();
                          }
                          std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_weekdayname_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($0, $5 + 24 | 0, $7 + 56 | 0, $2, $4, $8);
                          break label$3;
                         }
                         std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_monthname_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($0, $5 + 16 | 0, $7 + 56 | 0, $2, $4, $8);
                         break label$3;
                        }
                        $1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 8 >> 2] + 12 >> 2]]($0 + 8 | 0) | 0;
                        HEAP32[$7 + 56 >> 2] = std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20wchar_t_20const__2c_20wchar_t_20const__29_20const($0, HEAP32[$7 + 56 >> 2], $2, $3, $4, $5, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_pointer_28_29_20const($1), std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_pointer_28_29_20const($1) + (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($1) << 2) | 0);
                        break label$3;
                       }
                       std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_day_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($5 + 12 | 0, $7 + 56 | 0, $2, $4, $8);
                       break label$3;
                      }
                      $6 = HEAP32[9987];
                      HEAP32[$7 + 24 >> 2] = HEAP32[9986];
                      HEAP32[$7 + 28 >> 2] = $6;
                      $6 = HEAP32[9985];
                      HEAP32[$7 + 16 >> 2] = HEAP32[9984];
                      HEAP32[$7 + 20 >> 2] = $6;
                      $6 = HEAP32[9983];
                      HEAP32[$7 + 8 >> 2] = HEAP32[9982];
                      HEAP32[$7 + 12 >> 2] = $6;
                      $6 = HEAP32[9981];
                      HEAP32[$7 >> 2] = HEAP32[9980];
                      HEAP32[$7 + 4 >> 2] = $6;
                      HEAP32[$7 + 56 >> 2] = std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20wchar_t_20const__2c_20wchar_t_20const__29_20const($0, $1, $2, $3, $4, $5, $7, $7 + 32 | 0);
                      break label$3;
                     }
                     $6 = HEAP32[9995];
                     HEAP32[$7 + 24 >> 2] = HEAP32[9994];
                     HEAP32[$7 + 28 >> 2] = $6;
                     $6 = HEAP32[9993];
                     HEAP32[$7 + 16 >> 2] = HEAP32[9992];
                     HEAP32[$7 + 20 >> 2] = $6;
                     $6 = HEAP32[9991];
                     HEAP32[$7 + 8 >> 2] = HEAP32[9990];
                     HEAP32[$7 + 12 >> 2] = $6;
                     $6 = HEAP32[9989];
                     HEAP32[$7 >> 2] = HEAP32[9988];
                     HEAP32[$7 + 4 >> 2] = $6;
                     HEAP32[$7 + 56 >> 2] = std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20wchar_t_20const__2c_20wchar_t_20const__29_20const($0, $1, $2, $3, $4, $5, $7, $7 + 32 | 0);
                     break label$3;
                    }
                    std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_hour_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($5 + 8 | 0, $7 + 56 | 0, $2, $4, $8);
                    break label$3;
                   }
                   std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_12_hour_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($5 + 8 | 0, $7 + 56 | 0, $2, $4, $8);
                   break label$3;
                  }
                  std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_day_year_num_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($5 + 28 | 0, $7 + 56 | 0, $2, $4, $8);
                  break label$3;
                 }
                 std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_month_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($5 + 16 | 0, $7 + 56 | 0, $2, $4, $8);
                 break label$3;
                }
                std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_minute_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($5 + 4 | 0, $7 + 56 | 0, $2, $4, $8);
                break label$3;
               }
               std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_white_space_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($7 + 56 | 0, $2, $4, $8);
               break label$3;
              }
              std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_am_pm_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($0, $5 + 8 | 0, $7 + 56 | 0, $2, $4, $8);
              break label$3;
             }
             $6 = memcpy($7, 39984, 44);
             HEAP32[$6 + 56 >> 2] = std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20wchar_t_20const__2c_20wchar_t_20const__29_20const($0, $1, $2, $3, $4, $5, $6, $6 + 44 | 0);
             break label$3;
            }
            HEAP32[$7 + 16 >> 2] = HEAP32[10012];
            $6 = HEAP32[10011];
            HEAP32[$7 + 8 >> 2] = HEAP32[10010];
            HEAP32[$7 + 12 >> 2] = $6;
            $6 = HEAP32[10009];
            HEAP32[$7 >> 2] = HEAP32[10008];
            HEAP32[$7 + 4 >> 2] = $6;
            HEAP32[$7 + 56 >> 2] = std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20wchar_t_20const__2c_20wchar_t_20const__29_20const($0, $1, $2, $3, $4, $5, $7, $7 + 20 | 0);
            break label$3;
           }
           std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_second_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($5, $7 + 56 | 0, $2, $4, $8);
           break label$3;
          }
          $6 = HEAP32[10023];
          HEAP32[$7 + 24 >> 2] = HEAP32[10022];
          HEAP32[$7 + 28 >> 2] = $6;
          $6 = HEAP32[10021];
          HEAP32[$7 + 16 >> 2] = HEAP32[10020];
          HEAP32[$7 + 20 >> 2] = $6;
          $6 = HEAP32[10019];
          HEAP32[$7 + 8 >> 2] = HEAP32[10018];
          HEAP32[$7 + 12 >> 2] = $6;
          $6 = HEAP32[10017];
          HEAP32[$7 >> 2] = HEAP32[10016];
          HEAP32[$7 + 4 >> 2] = $6;
          HEAP32[$7 + 56 >> 2] = std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20wchar_t_20const__2c_20wchar_t_20const__29_20const($0, $1, $2, $3, $4, $5, $7, $7 + 32 | 0);
          break label$3;
         }
         std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_weekday_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($5 + 24 | 0, $7 + 56 | 0, $2, $4, $8);
         break label$3;
        }
        $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0, $1, $2, $3, $4, $5) | 0;
        break label$2;
       }
       $1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 8 >> 2] + 24 >> 2]]($0 + 8 | 0) | 0;
       HEAP32[$7 + 56 >> 2] = std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20wchar_t_20const__2c_20wchar_t_20const__29_20const($0, HEAP32[$7 + 56 >> 2], $2, $3, $4, $5, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_pointer_28_29_20const($1), std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_pointer_28_29_20const($1) + (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($1) << 2) | 0);
       break label$3;
      }
      std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_year_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($5 + 20 | 0, $7 + 56 | 0, $2, $4, $8);
      break label$3;
     }
     std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_year4_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($5 + 20 | 0, $7 + 56 | 0, $2, $4, $8);
     break label$3;
    }
    HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 4;
   }
   $0 = HEAP32[$7 + 56 >> 2];
  }
  $1 = $7 - -64 | 0;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  return $0 | 0;
 }
 
 function std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_percent_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($0, $1, $2, $3) {
  var $4 = 0, $5 = 0;
  $4 = global$0 - 16 | 0;
  $5 = $4;
  if ($4 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $5;
  HEAP32[$4 + 8 >> 2] = $1;
  $1 = 6;
  label$2 : {
   label$3 : {
    if (bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29_1($0, $4 + 8 | 0)) {
     break label$3
    }
    $1 = 4;
    if ((std____2__ctype_wchar_t___narrow_28wchar_t_2c_20char_29_20const($3, std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator__28_29_20const($0)) | 0) != 37) {
     break label$3
    }
    $1 = 2;
    if (!bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29_1(std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator___28_29($0), $4 + 8 | 0)) {
     break label$2
    }
   }
   HEAP32[$2 >> 2] = HEAP32[$2 >> 2] | $1;
  }
  $0 = $4 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_day_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($0, $1, $2, $3, $4) {
  $1 = int_20std____2____get_up_to_n_digits_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__2c_20int_29($1, $2, $3, $4, 2);
  $2 = HEAP32[$3 >> 2];
  if (!($1 + -1 >>> 0 > 30 | $2 & 4)) {
   HEAP32[$0 >> 2] = $1;
   return;
  }
  HEAP32[$3 >> 2] = $2 | 4;
 }
 
 function std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_hour_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($0, $1, $2, $3, $4) {
  $1 = int_20std____2____get_up_to_n_digits_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__2c_20int_29($1, $2, $3, $4, 2);
  $2 = HEAP32[$3 >> 2];
  if (!(($1 | 0) > 23 | $2 & 4)) {
   HEAP32[$0 >> 2] = $1;
   return;
  }
  HEAP32[$3 >> 2] = $2 | 4;
 }
 
 function std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_12_hour_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($0, $1, $2, $3, $4) {
  $1 = int_20std____2____get_up_to_n_digits_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__2c_20int_29($1, $2, $3, $4, 2);
  $2 = HEAP32[$3 >> 2];
  if (!($1 + -1 >>> 0 > 11 | $2 & 4)) {
   HEAP32[$0 >> 2] = $1;
   return;
  }
  HEAP32[$3 >> 2] = $2 | 4;
 }
 
 function std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_day_year_num_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($0, $1, $2, $3, $4) {
  $1 = int_20std____2____get_up_to_n_digits_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__2c_20int_29($1, $2, $3, $4, 3);
  $2 = HEAP32[$3 >> 2];
  if (!(($1 | 0) > 365 | $2 & 4)) {
   HEAP32[$0 >> 2] = $1;
   return;
  }
  HEAP32[$3 >> 2] = $2 | 4;
 }
 
 function std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_month_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($0, $1, $2, $3, $4) {
  $1 = int_20std____2____get_up_to_n_digits_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__2c_20int_29($1, $2, $3, $4, 2);
  $2 = HEAP32[$3 >> 2];
  if (!(($1 | 0) > 12 | $2 & 4)) {
   HEAP32[$0 >> 2] = $1 + -1;
   return;
  }
  HEAP32[$3 >> 2] = $2 | 4;
 }
 
 function std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_minute_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($0, $1, $2, $3, $4) {
  $1 = int_20std____2____get_up_to_n_digits_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__2c_20int_29($1, $2, $3, $4, 2);
  $2 = HEAP32[$3 >> 2];
  if (!(($1 | 0) > 59 | $2 & 4)) {
   HEAP32[$0 >> 2] = $1;
   return;
  }
  HEAP32[$3 >> 2] = $2 | 4;
 }
 
 function std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_white_space_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($0, $1, $2, $3) {
  var $4 = 0, $5 = 0;
  $4 = global$0 - 16 | 0;
  $5 = $4;
  if ($4 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $5;
  HEAP32[$4 + 8 >> 2] = $1;
  while (1) {
   label$3 : {
    if (!bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29($0, $4 + 8 | 0)) {
     break label$3
    }
    if (!std____2__ctype_wchar_t___is_28unsigned_20short_2c_20wchar_t_29_20const($3, 8192, std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator__28_29_20const($0))) {
     break label$3
    }
    std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator___28_29($0);
    continue;
   }
   break;
  };
  if (bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29_1($0, $4 + 8 | 0)) {
   HEAP32[$2 >> 2] = HEAP32[$2 >> 2] | 2
  }
  $0 = $4 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_am_pm_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($0, $1, $2, $3, $4, $5) {
  $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 8 >> 2] + 8 >> 2]]($0 + 8 | 0) | 0;
  if ((std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($0) | 0) == (0 - std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($0 + 12 | 0) | 0)) {
   HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 4;
   return;
  }
  $0 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__20std____2____scan_keyword_std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__2c_20std____2__ctype_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__2c_20std____2__ctype_wchar_t__20const__2c_20unsigned_20int__2c_20bool_29($2, $3, $0, $0 + 24 | 0, $5, $4, 0) - $0 | 0;
  $2 = HEAP32[$1 >> 2];
  if (!($0 | ($2 | 0) != 12)) {
   HEAP32[$1 >> 2] = 0;
   return;
  }
  if (!(($0 | 0) != 12 | ($2 | 0) > 11)) {
   HEAP32[$1 >> 2] = $2 + 12
  }
 }
 
 function std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_second_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($0, $1, $2, $3, $4) {
  $1 = int_20std____2____get_up_to_n_digits_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__2c_20int_29($1, $2, $3, $4, 2);
  $2 = HEAP32[$3 >> 2];
  if (!(($1 | 0) > 60 | $2 & 4)) {
   HEAP32[$0 >> 2] = $1;
   return;
  }
  HEAP32[$3 >> 2] = $2 | 4;
 }
 
 function std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_weekday_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($0, $1, $2, $3, $4) {
  $1 = int_20std____2____get_up_to_n_digits_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__2c_20int_29($1, $2, $3, $4, 1);
  $2 = HEAP32[$3 >> 2];
  if (!(($1 | 0) > 6 | $2 & 4)) {
   HEAP32[$0 >> 2] = $1;
   return;
  }
  HEAP32[$3 >> 2] = $2 | 4;
 }
 
 function std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____get_year4_28int__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__29_20const($0, $1, $2, $3, $4) {
  $1 = int_20std____2____get_up_to_n_digits_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20unsigned_20int__2c_20std____2__ctype_wchar_t__20const__2c_20int_29($1, $2, $3, $4, 4);
  if (!(HEAPU8[$3 | 0] & 4)) {
   HEAP32[$0 >> 2] = $1 + -1900
  }
 }
 
 function std____2__time_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20char_2c_20tm_20const__2c_20char_2c_20char_29_20const($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $2 = global$0 - 128 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  HEAP32[$2 + 12 >> 2] = $2 + 116;
  std____2____time_put____do_put_28char__2c_20char___2c_20tm_20const__2c_20char_2c_20char_29_20const($0 + 8 | 0, $2 + 16 | 0, $2 + 12 | 0, $4, $5, $6);
  $0 = std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2____copy_char__2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__28char__2c_20char__2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__29($2 + 16 | 0, HEAP32[$2 + 12 >> 2], $1);
  $1 = $2 + 128 | 0;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  return $0 | 0;
 }
 
 function std____2____time_put____do_put_28char__2c_20char___2c_20tm_20const__2c_20char_2c_20char_29_20const($0, $1, $2, $3, $4, $5) {
  var $6 = 0, $7 = 0;
  $6 = global$0 - 16 | 0;
  $7 = $6;
  if ($6 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $7;
  HEAP8[$6 + 15 | 0] = 0;
  HEAP8[$6 + 14 | 0] = $5;
  HEAP8[$6 + 13 | 0] = $4;
  HEAP8[$6 + 12 | 0] = 37;
  if ($5) {
   std____2__enable_if__28is_move_constructible_char___value_29_20___20_28is_move_assignable_char___value_29_2c_20void___type_20std____2__swap_char__28char__2c_20char__29($6 + 13 | 0, $6 + 14 | 0)
  }
  HEAP32[$2 >> 2] = (strftime_l($1 | 0, unsigned_20long_20std____2___28anonymous_20namespace_29__countof_char__28char_20const__2c_20char_20const__29($1, HEAP32[$2 >> 2]) | 0, $6 + 12 | 0, $3 | 0, HEAP32[$0 >> 2]) | 0) + $1;
  $0 = $6 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function std____2__enable_if__28is_move_constructible_char___value_29_20___20_28is_move_assignable_char___value_29_2c_20void___type_20std____2__swap_char__28char__2c_20char__29($0, $1) {
  var $2 = 0, $3 = 0;
  $2 = global$0 - 16 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  HEAP8[$2 + 15 | 0] = HEAPU8[$0 | 0];
  HEAP8[$0 | 0] = HEAPU8[$1 | 0];
  HEAP8[$1 | 0] = HEAPU8[$2 + 15 | 0];
  $0 = $2 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function unsigned_20long_20std____2___28anonymous_20namespace_29__countof_char__28char_20const__2c_20char_20const__29($0, $1) {
  return $1 - $0 | 0;
 }
 
 function std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2____copy_char__2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__28char__2c_20char__2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__29($0, $1, $2) {
  var $3 = 0, $4 = 0;
  $3 = global$0 - 16 | 0;
  $4 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  HEAP32[$3 + 8 >> 2] = $2;
  while (1) {
   if (($0 | 0) != ($1 | 0)) {
    std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator__28char_29($3 + 8 | 0, HEAP8[$0 | 0]);
    $0 = $0 + 1 | 0;
    continue;
   }
   break;
  };
  $0 = HEAP32[$3 + 8 >> 2];
  $1 = $3 + 16 | 0;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  return $0;
 }
 
 function std____2__time_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20wchar_t_2c_20tm_20const__2c_20char_2c_20char_29_20const($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $2 = global$0 - 416 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  HEAP32[$2 + 12 >> 2] = $2 + 416;
  std____2____time_put____do_put_28wchar_t__2c_20wchar_t___2c_20tm_20const__2c_20char_2c_20char_29_20const($0 + 8 | 0, $2 + 16 | 0, $2 + 12 | 0, $4, $5, $6);
  $0 = std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20std____2____copy_wchar_t__2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20__28wchar_t__2c_20wchar_t__2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__29($2 + 16 | 0, HEAP32[$2 + 12 >> 2], $1);
  $1 = $2 + 416 | 0;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  return $0 | 0;
 }
 
 function std____2____time_put____do_put_28wchar_t__2c_20wchar_t___2c_20tm_20const__2c_20char_2c_20char_29_20const($0, $1, $2, $3, $4, $5) {
  var $6 = 0, $7 = 0;
  $6 = global$0 - 144 | 0;
  $7 = $6;
  if ($6 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $7;
  HEAP32[$6 + 28 >> 2] = $6 + 132;
  std____2____time_put____do_put_28char__2c_20char___2c_20tm_20const__2c_20char_2c_20char_29_20const($0, $6 + 32 | 0, $6 + 28 | 0, $3, $4, $5);
  HEAP32[$6 + 16 >> 2] = 0;
  HEAP32[$6 + 20 >> 2] = 0;
  HEAP32[$6 + 12 >> 2] = $6 + 32;
  $0 = std____2____libcpp_mbsrtowcs_l_28wchar_t__2c_20char_20const___2c_20unsigned_20long_2c_20__mbstate_t__2c_20__locale_struct__29($1, $6 + 12 | 0, unsigned_20long_20std____2___28anonymous_20namespace_29__countof_wchar_t__28wchar_t_20const__2c_20wchar_t_20const__29($1, HEAP32[$2 >> 2]), $6 + 16 | 0, HEAP32[$0 >> 2]);
  if (($0 | 0) == -1) {
   std____2____throw_runtime_error_28char_20const__29(40660);
   abort();
  }
  HEAP32[$2 >> 2] = ($0 << 2) + $1;
  $0 = $6 + 144 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function unsigned_20long_20std____2___28anonymous_20namespace_29__countof_wchar_t__28wchar_t_20const__2c_20wchar_t_20const__29($0, $1) {
  return $1 - $0 >> 2;
 }
 
 function std____2____libcpp_mbsrtowcs_l_28wchar_t__2c_20char_20const___2c_20unsigned_20long_2c_20__mbstate_t__2c_20__locale_struct__29($0, $1, $2, $3, $4) {
  var $5 = 0, $6 = 0;
  $5 = global$0 - 16 | 0;
  $6 = $5;
  if ($5 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $6;
  HEAP32[$5 + 12 >> 2] = $4;
  $4 = std____2____libcpp_locale_guard____libcpp_locale_guard_28__locale_struct___29($5 + 8 | 0, $5 + 12 | 0);
  HEAP32[16874] = 0;
  $0 = mbsrtowcs($0, $1, $2, $3);
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($1 | 0) != 1) {
   std____2____libcpp_locale_guard_____libcpp_locale_guard_28_29($4);
   $1 = $5 + 16 | 0;
   if ($1 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $1;
   return $0;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2____libcpp_locale_guard_____libcpp_locale_guard_28_29($4);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____throw_runtime_error_28char_20const__29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __cxa_allocate_exception(8) | 0;
  HEAP32[16874] = 0;
  __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1707, $1 | 0, $0 | 0) | 0;
  $0 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($0 | 0) != 1) {
   __cxa_throw($1 | 0, 48892, 1708);
   abort();
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  __cxa_free_exception($1 | 0);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20std____2____copy_wchar_t__2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20__28wchar_t__2c_20wchar_t__2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__29($0, $1, $2) {
  var $3 = 0, $4 = 0;
  $3 = global$0 - 16 | 0;
  $4 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  HEAP32[$3 + 8 >> 2] = $2;
  while (1) {
   if (($0 | 0) != ($1 | 0)) {
    std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator__28wchar_t_29($3 + 8 | 0, HEAP32[$0 >> 2]);
    $0 = $0 + 4 | 0;
    continue;
   }
   break;
  };
  $0 = HEAP32[$3 + 8 >> 2];
  $1 = $3 + 16 | 0;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  return $0;
 }
 
 function std____2__moneypunct_char_2c_20false___do_decimal_point_28_29_20const($0) {
  $0 = $0 | 0;
  return 127;
 }
 
 function std____2__moneypunct_char_2c_20false___do_grouping_28_29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($0);
 }
 
 function std____2__moneypunct_char_2c_20false___do_negative_sign_28_29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28unsigned_20long_2c_20char_29($0, 1, 45);
 }
 
 function std____2__moneypunct_char_2c_20false___do_pos_format_28_29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  HEAP8[$0 | 0] = 67109634;
  HEAP8[$0 + 1 | 0] = 262147;
  HEAP8[$0 + 2 | 0] = 1024;
  HEAP8[$0 + 3 | 0] = 4;
 }
 
 function std____2__moneypunct_wchar_t_2c_20false___do_decimal_point_28_29_20const($0) {
  $0 = $0 | 0;
  return 2147483647;
 }
 
 function std____2__moneypunct_wchar_t_2c_20false___do_curr_symbol_28_29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___basic_string_28_29($0);
 }
 
 function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___basic_string_28_29($0) {
  var $1 = 0;
  HEAP32[16874] = 0;
  std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20_____compressed_pair_true_2c_20void__28_29($0);
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($1 | 0) != 1) {
   std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____zero_28_29($0);
   return $0;
  }
  $0 = __cxa_find_matching_catch_3(0) | 0;
  getTempRet0() | 0;
  __clang_call_terminate($0);
  abort();
 }
 
 function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____zero_28_29($0) {
  var $1 = 0;
  $1 = $0;
  $0 = 0;
  while (1) {
   if (($0 | 0) != 3) {
    HEAP32[($0 << 2) + $1 >> 2] = 0;
    $0 = $0 + 1 | 0;
    continue;
   }
   break;
  };
 }
 
 function std____2__moneypunct_wchar_t_2c_20false___do_negative_sign_28_29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___basic_string_28unsigned_20long_2c_20wchar_t_29($0, 1, 45);
 }
 
 function std____2__money_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20bool_2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long_20double__29_20const($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  var $7 = 0, $8 = 0;
  $0 = global$0 - 288 | 0;
  $7 = $0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $7;
  HEAP32[$0 + 272 >> 2] = $2;
  HEAP32[$0 + 280 >> 2] = $1;
  HEAP32[$0 + 16 >> 2] = 1710;
  $1 = std____2__unique_ptr__IO_FILE_2c_20int_20_28__29_28_IO_FILE__29___unique_ptr_true_2c_20void__28_IO_FILE__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_int_20_28__29_28_IO_FILE__29__2c_20true_____good_rval_ref_type_29($0 + 152 | 0, $0 + 160 | 0, $0 + 16 | 0);
  HEAP32[16874] = 0;
  std____2__ios_base__getloc_28_29_20const($0 + 144 | 0, $4);
  $7 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      label$6 : {
       label$7 : {
        label$8 : {
         label$9 : {
          label$10 : {
           label$11 : {
            if (($7 | 0) != 1) {
             HEAP32[16874] = 0;
             $7 = __invoke_i1___22class_std____2__basic_ifstream_22_(31, $0 + 144 | 0) | 0;
             $8 = HEAP32[16874];
             HEAP32[16874] = 0;
             if (($8 | 0) == 1) {
              break label$11
             }
             HEAP8[$0 + 143 | 0] = 0;
             $4 = HEAP32[$4 + 4 >> 2];
             HEAP32[16874] = 0;
             $2 = __invoke_i1___22class_std____2__istreambuf_iterator_22____22class_std____2__basic_streambuf_22__i1___22class_std____2__locale_22__i32_i32__i8____22class_std____2__ctype_22____22class_std____2__unique_ptr_22__i8___i8_(1711, $0 + 280 | 0, $2 | 0, $3 | 0, $0 + 144 | 0, $4 | 0, $5 | 0, $0 + 143 | 0, $7 | 0, $1 | 0, $0 + 148 | 0, $0 + 260 | 0) | 0;
             $3 = HEAP32[16874];
             HEAP32[16874] = 0;
             if (($3 | 0) == 1) {
              break label$6
             }
             if (!$2) {
              break label$7
             }
             $2 = HEAPU8[40123] | HEAPU8[40124] << 8 | (HEAPU8[40125] << 16 | HEAPU8[40126] << 24);
             HEAP8[$0 + 135 | 0] = $2;
             HEAP8[$0 + 136 | 0] = $2 >>> 8;
             HEAP8[$0 + 137 | 0] = $2 >>> 16;
             HEAP8[$0 + 138 | 0] = $2 >>> 24;
             $2 = HEAPU8[40120] | HEAPU8[40121] << 8 | (HEAPU8[40122] << 16 | HEAPU8[40123] << 24);
             HEAP32[$0 + 128 >> 2] = HEAPU8[40116] | HEAPU8[40117] << 8 | (HEAPU8[40118] << 16 | HEAPU8[40119] << 24);
             HEAP32[$0 + 132 >> 2] = $2;
             HEAP32[16874] = 0;
             __invoke___22class_std____2__shared_ptr_22____22class_std____2__shared_ptr_22___class_maxiOsc____22class_emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc____val_deleter_22__i32(1665, $7 | 0, $0 + 128 | 0, $0 + 138 | 0, $0 + 118 | 0) | 0;
             $2 = HEAP32[16874];
             HEAP32[16874] = 0;
             if (($2 | 0) == 1) {
              break label$10
             }
             HEAP32[$0 + 4 >> 2] = 1644;
             $3 = std____2__unique_ptr__IO_FILE_2c_20int_20_28__29_28_IO_FILE__29___unique_ptr_true_2c_20void__28_IO_FILE__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_int_20_28__29_28_IO_FILE__29__2c_20true_____good_rval_ref_type_29($0 + 8 | 0, 0, $0 + 4 | 0);
             $2 = $0 + 16 | 0;
             if ((HEAP32[$0 + 148 >> 2] - HEAP32[$1 >> 2] | 0) < 99) {
              break label$8
             }
             std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___reset_28unsigned_20char__29($3, dlmalloc((HEAP32[$0 + 148 >> 2] - HEAP32[$1 >> 2] | 0) + 2 | 0));
             if (HEAP32[$3 >> 2]) {
              break label$9
             }
             HEAP32[16874] = 0;
             __invoke_void(1645);
             $2 = HEAP32[16874];
             HEAP32[16874] = 0;
             if (($2 | 0) == 1) {
              break label$5
             }
             break label$2;
            }
            $4 = __cxa_find_matching_catch_2() | 0;
            getTempRet0() | 0;
            break label$3;
           }
           $4 = __cxa_find_matching_catch_2() | 0;
           getTempRet0() | 0;
           break label$4;
          }
          $4 = __cxa_find_matching_catch_2() | 0;
          getTempRet0() | 0;
          break label$4;
         }
         $2 = HEAP32[$3 >> 2];
        }
        if (HEAPU8[$0 + 143 | 0]) {
         HEAP8[$2 | 0] = 45;
         $2 = $2 + 1 | 0;
        }
        $4 = HEAP32[$1 >> 2];
        while (1) {
         if ($4 >>> 0 >= HEAPU32[$0 + 148 >> 2]) {
          HEAP8[$2 | 0] = 0;
          HEAP32[$0 >> 2] = $6;
          if ((sscanf($0 + 16 | 0, $0) | 0) != 1) {
           HEAP32[16874] = 0;
           __invoke_void___22class_std____2__basic_ifstream_22_(1712, 40100);
           $2 = HEAP32[16874];
           HEAP32[16874] = 0;
           if (($2 | 0) != 1) {
            break label$2
           }
           break label$5;
          }
          std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29____unique_ptr_28_29($3);
          break label$7;
         }
         HEAP8[$2 | 0] = HEAPU8[($0 + (char_20const__20std____2__find_char_20const__2c_20char__28char_20const__2c_20char_20const__2c_20char_20const__29($0 + 118 | 0, $0 + 128 | 0, $4) - $0 | 0) | 0) + 10 | 0];
         $2 = $2 + 1 | 0;
         $4 = $4 + 1 | 0;
         continue;
        };
       }
       HEAP32[16874] = 0;
       $2 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1647, $0 + 280 | 0, $0 + 272 | 0) | 0;
       $3 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($3 | 0) == 1) {
        break label$6
       }
       if ($2) {
        HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 2
       }
       $2 = HEAP32[$0 + 280 >> 2];
       std____2__locale___locale_28_29($0 + 144 | 0);
       std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29____unique_ptr_28_29($1);
       $0 = $0 + 288 | 0;
       if ($0 >>> 0 < global$2 >>> 0) {
        __handle_stack_overflow()
       }
       global$0 = $0;
       return $2 | 0;
      }
      $4 = __cxa_find_matching_catch_2() | 0;
      getTempRet0() | 0;
      break label$4;
     }
     $4 = __cxa_find_matching_catch_2() | 0;
     getTempRet0() | 0;
     std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29____unique_ptr_28_29($3);
    }
    std____2__locale___locale_28_29($0 + 144 | 0);
   }
   std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29____unique_ptr_28_29($1);
   __resumeException($4 | 0);
   abort();
  }
  abort();
 }
 
 function std____2__money_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20bool_2c_20std____2__locale_20const__2c_20unsigned_20int_2c_20unsigned_20int__2c_20bool__2c_20std____2__ctype_char__20const__2c_20std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___2c_20char___2c_20char__29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  $8 = $8 | 0;
  $9 = $9 | 0;
  $10 = $10 | 0;
  var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
  $11 = global$0 - 560 | 0;
  $12 = $11;
  if ($11 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $12;
  HEAP32[$11 + 548 >> 2] = $10;
  HEAP32[$11 + 552 >> 2] = $1;
  HEAP32[$11 + 104 >> 2] = 1710;
  $15 = std____2__unique_ptr__IO_FILE_2c_20int_20_28__29_28_IO_FILE__29___unique_ptr_true_2c_20void__28_IO_FILE__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_int_20_28__29_28_IO_FILE__29__2c_20true_____good_rval_ref_type_29($11 + 136 | 0, $11 + 144 | 0, $11 + 104 | 0);
  $1 = HEAP32[$15 >> 2];
  HEAP32[$11 + 132 >> 2] = $1;
  HEAP32[$11 + 128 >> 2] = $1 + 400;
  $17 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($11 + 104 | 0);
  $14 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($11 + 88 | 0);
  $12 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($11 + 72 | 0);
  $13 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($11 + 56 | 0);
  $16 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($11 + 40 | 0);
  HEAP32[16874] = 0;
  __invoke_void_i1___22class_std____2__locale_22____22struct_std____2__money_base__pattern_22__i8__i8____22class_std____2__basic_string_22____22class_std____2__basic_string_22____22class_std____2__basic_string_22____22class_std____2__basic_string_22__i32_(1713, $2 | 0, $3 | 0, $11 + 120 | 0, $11 + 119 | 0, $11 + 118 | 0, $17 | 0, $14 | 0, $12 | 0, $13 | 0, $11 + 36 | 0);
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($1 | 0) != 1) {
   label$2 : {
    HEAP32[$9 >> 2] = HEAP32[$8 >> 2];
    $18 = $4 & 512;
    $1 = 0;
    $4 = 0;
    while (1) {
     $10 = $4;
     label$7 : {
      label$8 : {
       label$12 : {
        label$13 : {
         if (($1 | 0) == 4) {
          break label$13
         }
         HEAP32[16874] = 0;
         $2 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1646, $0 | 0, $11 + 552 | 0) | 0;
         $3 = HEAP32[16874];
         HEAP32[16874] = 0;
         if (($3 | 0) == 1) {
          break label$2
         }
         if (!$2) {
          break label$13
         }
         $3 = HEAP8[($11 + 120 | 0) + $1 | 0];
         if ($3 >>> 0 > 4) {
          break label$8
         }
         $2 = 0;
         label$14 : {
          label$15 : {
           label$16 : {
            label$17 : {
             label$18 : {
              switch ($3 - 1 | 0) {
              case 0:
               if (($1 | 0) == 3) {
                break label$8
               }
               HEAP32[16874] = 0;
               $2 = __invoke_i1___22class_std____2__basic_ifstream_22_(1648, $0 | 0) | 0;
               $3 = HEAP32[16874];
               HEAP32[16874] = 0;
               if (($3 | 0) == 1) {
                break label$2
               }
               if (std____2__ctype_char___is_28unsigned_20short_2c_20char_29_20const($7, 8192, $2)) {
                HEAP32[16874] = 0;
                __invoke_void_i8__i32_i32(1714, $11 + 24 | 0, $0 | 0, 0);
                $2 = HEAP32[16874];
                HEAP32[16874] = 0;
                if (($2 | 0) != 1) {
                 $2 = HEAP8[$11 + 24 | 0];
                 HEAP32[16874] = 0;
                 __invoke_void___22class_std____2__vector_13_22__i32(1715, $16 | 0, $2 | 0);
                 $2 = HEAP32[16874];
                 HEAP32[16874] = 0;
                 if (($2 | 0) != 1) {
                  break label$17
                 }
                }
                break label$2;
               }
               HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4;
               $0 = 0;
               break label$12;
              case 3:
               break label$14;
              case 1:
               break label$15;
              case 2:
               break label$16;
              default:
               break label$18;
              };
             }
             if (($1 | 0) == 3) {
              break label$8
             }
            }
            while (1) {
             HEAP32[16874] = 0;
             $2 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1646, $0 | 0, $11 + 552 | 0) | 0;
             $3 = HEAP32[16874];
             HEAP32[16874] = 0;
             if (($3 | 0) == 1) {
              break label$2
             }
             if (!$2) {
              break label$8
             }
             HEAP32[16874] = 0;
             $2 = __invoke_i1___22class_std____2__basic_ifstream_22_(1648, $0 | 0) | 0;
             $3 = HEAP32[16874];
             HEAP32[16874] = 0;
             if (($3 | 0) == 1) {
              break label$2
             }
             if (!std____2__ctype_char___is_28unsigned_20short_2c_20char_29_20const($7, 8192, $2)) {
              break label$8
             }
             HEAP32[16874] = 0;
             __invoke_void_i8__i32_i32(1714, $11 + 24 | 0, $0 | 0, 0);
             $2 = HEAP32[16874];
             HEAP32[16874] = 0;
             if (($2 | 0) != 1) {
              $2 = HEAP8[$11 + 24 | 0];
              HEAP32[16874] = 0;
              __invoke_void___22class_std____2__vector_13_22__i32(1715, $16 | 0, $2 | 0);
              $2 = HEAP32[16874];
              HEAP32[16874] = 0;
              if (($2 | 0) != 1) {
               continue
              }
             }
             break;
            };
            break label$2;
           }
           if ((std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($12) | 0) == (0 - std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($13) | 0)) {
            break label$8
           }
           label$24 : {
            if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($12)) {
             if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($13)) {
              break label$24
             }
            }
            if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($12)) {
             HEAP32[16874] = 0;
             $2 = __invoke_i1___22class_std____2__basic_ifstream_22_(1648, $0 | 0) | 0;
             $3 = HEAP32[16874];
             HEAP32[16874] = 0;
             if (($3 | 0) == 1) {
              break label$2
             }
             if (HEAPU8[std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29_20const($12, 0) | 0] == ($2 & 255)) {
              HEAP32[16874] = 0;
              __invoke_i1___22class_std____2__basic_ifstream_22_(1650, $0 | 0) | 0;
              $2 = HEAP32[16874];
              HEAP32[16874] = 0;
              if (($2 | 0) == 1) {
               break label$2
              }
              $4 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($12) >>> 0 > 1 ? $12 : $10;
              break label$7;
             }
             HEAP8[$6 | 0] = 1;
             break label$8;
            }
            HEAP32[16874] = 0;
            $2 = __invoke_i1___22class_std____2__basic_ifstream_22_(1648, $0 | 0) | 0;
            $3 = HEAP32[16874];
            HEAP32[16874] = 0;
            if (($3 | 0) == 1) {
             break label$2
            }
            if (HEAPU8[std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29_20const($13, 0) | 0] != ($2 & 255)) {
             break label$8
            }
            HEAP32[16874] = 0;
            __invoke_i1___22class_std____2__basic_ifstream_22_(1650, $0 | 0) | 0;
            $2 = HEAP32[16874];
            HEAP32[16874] = 0;
            if (($2 | 0) == 1) {
             break label$2
            }
            HEAP8[$6 | 0] = 1;
            $4 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($13) >>> 0 > 1 ? $13 : $10;
            break label$7;
           }
           HEAP32[16874] = 0;
           $2 = __invoke_i1___22class_std____2__basic_ifstream_22_(1648, $0 | 0) | 0;
           $3 = HEAP32[16874];
           HEAP32[16874] = 0;
           if (($3 | 0) == 1) {
            break label$2
           }
           if (HEAPU8[std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29_20const($12, 0) | 0] == ($2 & 255)) {
            HEAP32[16874] = 0;
            __invoke_i1___22class_std____2__basic_ifstream_22_(1650, $0 | 0) | 0;
            $2 = HEAP32[16874];
            HEAP32[16874] = 0;
            if (($2 | 0) == 1) {
             break label$2
            }
            $4 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($12) >>> 0 > 1 ? $12 : $10;
            break label$7;
           }
           HEAP32[16874] = 0;
           $2 = __invoke_i1___22class_std____2__basic_ifstream_22_(1648, $0 | 0) | 0;
           $3 = HEAP32[16874];
           HEAP32[16874] = 0;
           if (($3 | 0) == 1) {
            break label$2
           }
           if (HEAPU8[std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29_20const($13, 0) | 0] == ($2 & 255)) {
            HEAP32[16874] = 0;
            __invoke_i1___22class_std____2__basic_ifstream_22_(1650, $0 | 0) | 0;
            $2 = HEAP32[16874];
            HEAP32[16874] = 0;
            if (($2 | 0) == 1) {
             break label$2
            }
            HEAP8[$6 | 0] = 1;
            $4 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($13) >>> 0 > 1 ? $13 : $10;
            break label$7;
           }
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4;
           $0 = 0;
           break label$12;
          }
          if (!($18 | ($10 | $1 >>> 0 < 2))) {
           $4 = 0;
           if (!(($1 | 0) == 2 & HEAPU8[$11 + 123 | 0] != 0)) {
            break label$7
           }
          }
          HEAP32[$11 + 16 >> 2] = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___begin_28_29($14);
          $2 = std____2____wrap_iter_char_20const______wrap_iter_char___28std____2____wrap_iter_char___20const__2c_20std____2__enable_if_is_convertible_char__2c_20char_20const____value_2c_20void___type__29($11 + 24 | 0, $11 + 16 | 0);
          label$31 : {
           if (!$1 | HEAPU8[($1 + $11 | 0) + 119 | 0] > 1) {
            break label$31
           }
           while (1) {
            label$33 : {
             HEAP32[$11 + 16 >> 2] = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___end_28_29($14);
             if (!bool_20std____2__operator___double___28std____2____wrap_iter_double___20const__2c_20std____2____wrap_iter_double___20const__29($2, $11 + 16 | 0)) {
              break label$33
             }
             if (!std____2__ctype_char___is_28unsigned_20short_2c_20char_29_20const($7, 8192, HEAP8[HEAP32[$2 >> 2]])) {
              break label$33
             }
             std____2____wrap_iter_char____operator___28_29($2);
             continue;
            }
            break;
           };
           HEAP32[$11 + 16 >> 2] = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___begin_28_29($14);
           $2 = HEAP32[$2 >> 2] - HEAP32[$11 + 16 >> 2] | 0;
           if ($2 >>> 0 <= std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($16) >>> 0) {
            HEAP32[$11 + 16 >> 2] = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___end_28_29($16);
            $2 = std____2____wrap_iter_char____operator__28long_29_20const($11 + 16 | 0, 0 - $2 | 0);
            $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___end_28_29($16);
            $4 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___begin_28_29($14);
            HEAP32[16874] = 0;
            $2 = __invoke___22class_std____2__basic_istream_22____22class_std____2__basic_istream_22__i8__i32(1716, $2 | 0, $3 | 0, $4 | 0) | 0;
            $3 = HEAP32[16874];
            HEAP32[16874] = 0;
            if (($3 | 0) == 1) {
             break label$2
            }
            if ($2) {
             break label$31
            }
           }
           HEAP32[$11 + 8 >> 2] = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___begin_28_29($14);
           std____2____wrap_iter_char_20const______wrap_iter_char___28std____2____wrap_iter_char___20const__2c_20std____2__enable_if_is_convertible_char__2c_20char_20const____value_2c_20void___type__29($11 + 16 | 0, $11 + 8 | 0);
           HEAP32[$11 + 24 >> 2] = HEAP32[$11 + 16 >> 2];
          }
          HEAP32[$11 + 16 >> 2] = HEAP32[$11 + 24 >> 2];
          label$35 : {
           while (1) {
            HEAP32[$11 + 8 >> 2] = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___end_28_29($14);
            if (!bool_20std____2__operator___double___28std____2____wrap_iter_double___20const__2c_20std____2____wrap_iter_double___20const__29($11 + 16 | 0, $11 + 8 | 0)) {
             break label$35
            }
            HEAP32[16874] = 0;
            $2 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1646, $0 | 0, $11 + 552 | 0) | 0;
            $3 = HEAP32[16874];
            HEAP32[16874] = 0;
            label$38 : {
             if (($3 | 0) == 1) {
              break label$38
             }
             if (!$2) {
              break label$35
             }
             HEAP32[16874] = 0;
             $2 = __invoke_i1___22class_std____2__basic_ifstream_22_(1648, $0 | 0) | 0;
             $3 = HEAP32[16874];
             HEAP32[16874] = 0;
             if (($3 | 0) == 1) {
              break label$38
             }
             if (HEAPU8[HEAP32[$11 + 16 >> 2]] != ($2 & 255)) {
              break label$35
             }
             HEAP32[16874] = 0;
             __invoke_i1___22class_std____2__basic_ifstream_22_(1650, $0 | 0) | 0;
             $2 = HEAP32[16874];
             HEAP32[16874] = 0;
             if (($2 | 0) == 1) {
              break label$2
             }
             std____2____wrap_iter_char____operator___28_29($11 + 16 | 0);
             continue;
            }
            break;
           };
           break label$2;
          }
          if (!$18) {
           break label$8
          }
          HEAP32[$11 + 8 >> 2] = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___end_28_29($14);
          if (!bool_20std____2__operator___double___28std____2____wrap_iter_double___20const__2c_20std____2____wrap_iter_double___20const__29($11 + 16 | 0, $11 + 8 | 0)) {
           break label$8
          }
          HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4;
          $0 = 0;
          break label$12;
         }
         label$39 : {
          while (1) {
           label$41 : {
            HEAP32[16874] = 0;
            $3 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1646, $0 | 0, $11 + 552 | 0) | 0;
            $4 = HEAP32[16874];
            HEAP32[16874] = 0;
            if (($4 | 0) == 1) {
             break label$41
            }
            if (!$3) {
             break label$39
            }
            HEAP32[16874] = 0;
            $4 = __invoke_i1___22class_std____2__basic_ifstream_22_(1648, $0 | 0) | 0;
            $3 = HEAP32[16874];
            HEAP32[16874] = 0;
            if (($3 | 0) == 1) {
             break label$2
            }
            label$42 : {
             if (std____2__ctype_char___is_28unsigned_20short_2c_20char_29_20const($7, 2048, $4)) {
              $3 = HEAP32[$9 >> 2];
              if (($3 | 0) == HEAP32[$11 + 548 >> 2]) {
               HEAP32[16874] = 0;
               __invoke_void_i8__i32_i32(1717, $8 | 0, $9 | 0, $11 + 548 | 0);
               $3 = HEAP32[16874];
               HEAP32[16874] = 0;
               if (($3 | 0) == 1) {
                break label$2
               }
               $3 = HEAP32[$9 >> 2];
              }
              HEAP32[$9 >> 2] = $3 + 1;
              HEAP8[$3 | 0] = $4;
              $2 = $2 + 1 | 0;
              break label$42;
             }
             if (!$2 | !std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($17) | HEAPU8[$11 + 118 | 0] != ($4 & 255)) {
              break label$39
             }
             $4 = HEAP32[$11 + 132 >> 2];
             if (($4 | 0) == HEAP32[$11 + 128 >> 2]) {
              HEAP32[16874] = 0;
              __invoke_void_i8__i32_i32(1718, $15 | 0, $11 + 132 | 0, $11 + 128 | 0);
              $3 = HEAP32[16874];
              HEAP32[16874] = 0;
              if (($3 | 0) == 1) {
               break label$2
              }
              $4 = HEAP32[$11 + 132 >> 2];
             }
             HEAP32[$11 + 132 >> 2] = $4 + 4;
             HEAP32[$4 >> 2] = $2;
             $2 = 0;
            }
            HEAP32[16874] = 0;
            __invoke_i1___22class_std____2__basic_ifstream_22_(1650, $0 | 0) | 0;
            $3 = HEAP32[16874];
            HEAP32[16874] = 0;
            if (($3 | 0) != 1) {
             continue
            }
           }
           break;
          };
          break label$2;
         }
         $3 = HEAP32[$15 >> 2];
         label$46 : {
          if (!$2) {
           break label$46
          }
          $4 = HEAP32[$11 + 132 >> 2];
          if (($3 | 0) == ($4 | 0)) {
           break label$46
          }
          if (HEAP32[$11 + 128 >> 2] == ($4 | 0)) {
           HEAP32[16874] = 0;
           __invoke_void_i8__i32_i32(1718, $15 | 0, $11 + 132 | 0, $11 + 128 | 0);
           $3 = HEAP32[16874];
           HEAP32[16874] = 0;
           if (($3 | 0) == 1) {
            break label$2
           }
           $4 = HEAP32[$11 + 132 >> 2];
          }
          HEAP32[$11 + 132 >> 2] = $4 + 4;
          HEAP32[$4 >> 2] = $2;
         }
         label$48 : {
          if (HEAP32[$11 + 36 >> 2] < 1) {
           break label$48
          }
          HEAP32[16874] = 0;
          $2 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1647, $0 | 0, $11 + 552 | 0) | 0;
          $3 = HEAP32[16874];
          HEAP32[16874] = 0;
          if (($3 | 0) == 1) {
           break label$2
          }
          label$49 : {
           if (!$2) {
            HEAP32[16874] = 0;
            $2 = __invoke_i1___22class_std____2__basic_ifstream_22_(1648, $0 | 0) | 0;
            $3 = HEAP32[16874];
            HEAP32[16874] = 0;
            if (($3 | 0) == 1) {
             break label$2
            }
            if (HEAPU8[$11 + 119 | 0] == ($2 & 255)) {
             break label$49
            }
           }
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4;
           $0 = 0;
           break label$12;
          }
          HEAP32[16874] = 0;
          __invoke_i1___22class_std____2__basic_ifstream_22_(1650, $0 | 0) | 0;
          $2 = HEAP32[16874];
          HEAP32[16874] = 0;
          if (($2 | 0) == 1) {
           break label$2
          }
          while (1) {
           if (HEAP32[$11 + 36 >> 2] < 1) {
            break label$48
           }
           HEAP32[16874] = 0;
           $2 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1647, $0 | 0, $11 + 552 | 0) | 0;
           $3 = HEAP32[16874];
           HEAP32[16874] = 0;
           label$52 : {
            if (($3 | 0) == 1) {
             break label$52
            }
            label$53 : {
             if (!$2) {
              HEAP32[16874] = 0;
              $2 = __invoke_i1___22class_std____2__basic_ifstream_22_(1648, $0 | 0) | 0;
              $3 = HEAP32[16874];
              HEAP32[16874] = 0;
              if (($3 | 0) == 1) {
               break label$52
              }
              if (std____2__ctype_char___is_28unsigned_20short_2c_20char_29_20const($7, 2048, $2)) {
               break label$53
              }
             }
             HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4;
             $0 = 0;
             break label$12;
            }
            if (HEAP32[$9 >> 2] == HEAP32[$11 + 548 >> 2]) {
             HEAP32[16874] = 0;
             __invoke_void_i8__i32_i32(1717, $8 | 0, $9 | 0, $11 + 548 | 0);
             $2 = HEAP32[16874];
             HEAP32[16874] = 0;
             if (($2 | 0) == 1) {
              break label$52
             }
            }
            HEAP32[16874] = 0;
            $2 = __invoke_i1___22class_std____2__basic_ifstream_22_(1648, $0 | 0) | 0;
            $3 = HEAP32[16874];
            HEAP32[16874] = 0;
            if (($3 | 0) == 1) {
             break label$52
            }
            $3 = HEAP32[$9 >> 2];
            HEAP32[$9 >> 2] = $3 + 1;
            HEAP8[$3 | 0] = $2;
            HEAP32[16874] = 0;
            HEAP32[$11 + 36 >> 2] = HEAP32[$11 + 36 >> 2] + -1;
            __invoke_i1___22class_std____2__basic_ifstream_22_(1650, $0 | 0) | 0;
            $2 = HEAP32[16874];
            HEAP32[16874] = 0;
            if (($2 | 0) != 1) {
             continue
            }
           }
           break;
          };
          break label$2;
         }
         $4 = $10;
         if (HEAP32[$8 >> 2] != HEAP32[$9 >> 2]) {
          break label$7
         }
         HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4;
         $0 = 0;
         break label$12;
        }
        label$56 : {
         if (!$10) {
          break label$56
         }
         $4 = 1;
         while (1) {
          if ($4 >>> 0 >= std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($10) >>> 0) {
           break label$56
          }
          HEAP32[16874] = 0;
          $1 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1647, $0 | 0, $11 + 552 | 0) | 0;
          $2 = HEAP32[16874];
          HEAP32[16874] = 0;
          label$58 : {
           if (($2 | 0) == 1) {
            break label$58
           }
           label$59 : {
            if (!$1) {
             HEAP32[16874] = 0;
             $1 = __invoke_i1___22class_std____2__basic_ifstream_22_(1648, $0 | 0) | 0;
             $2 = HEAP32[16874];
             HEAP32[16874] = 0;
             if (($2 | 0) == 1) {
              break label$58
             }
             if (HEAPU8[std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29_20const($10, $4) | 0] == ($1 & 255)) {
              break label$59
             }
            }
            HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4;
            $0 = 0;
            break label$12;
           }
           HEAP32[16874] = 0;
           __invoke_i1___22class_std____2__basic_ifstream_22_(1650, $0 | 0) | 0;
           $1 = HEAP32[16874];
           HEAP32[16874] = 0;
           $4 = $4 + 1 | 0;
           if (($1 | 0) != 1) {
            continue
           }
          }
          break;
         };
         break label$2;
        }
        label$61 : {
         if (HEAP32[$15 >> 2] == HEAP32[$11 + 132 >> 2]) {
          break label$61
         }
         HEAP32[$11 + 24 >> 2] = 0;
         $0 = HEAP32[$15 >> 2];
         HEAP32[16874] = 0;
         __invoke_void___22class_std____2__vector_22__double__double__i32(1655, $17 | 0, $0 | 0, HEAP32[$11 + 132 >> 2], $11 + 24 | 0);
         $0 = HEAP32[16874];
         HEAP32[16874] = 0;
         if (($0 | 0) != 1) {
          if (!HEAP32[$11 + 24 >> 2]) {
           break label$61
          }
          HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4;
          $0 = 0;
          break label$12;
         }
         break label$2;
        }
        $0 = 1;
       }
       std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($16);
       std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($13);
       std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($12);
       std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($14);
       std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($17);
       std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29____unique_ptr_28_29($15);
       $1 = $11 + 560 | 0;
       if ($1 >>> 0 < global$2 >>> 0) {
        __handle_stack_overflow()
       }
       global$0 = $1;
       return $0 | 0;
      }
      $4 = $10;
     }
     $1 = $1 + 1 | 0;
     continue;
    };
   }
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($16);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($13);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($12);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($14);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($17);
  std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29____unique_ptr_28_29($15);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____money_get_char_____gather_info_28bool_2c_20std____2__locale_20const__2c_20std____2__money_base__pattern__2c_20char__2c_20char__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___2c_20int__29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  $8 = $8 | 0;
  $9 = $9 | 0;
  var $10 = 0, $11 = 0;
  $10 = global$0 - 16 | 0;
  $11 = $10;
  if ($10 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $11;
  label$2 : {
   if ($0) {
    $0 = std____2__moneypunct_char_2c_20true__20const__20std____2__use_facet_std____2__moneypunct_char_2c_20true__20__28std____2__locale_20const__29($1);
    std____2__moneypunct_char_2c_20true___neg_format_28_29_20const($10, $0);
    $1 = HEAP32[$10 >> 2];
    HEAP8[$2 | 0] = $1;
    HEAP8[$2 + 1 | 0] = $1 >>> 8;
    HEAP8[$2 + 2 | 0] = $1 >>> 16;
    HEAP8[$2 + 3 | 0] = $1 >>> 24;
    std____2__moneypunct_char_2c_20true___negative_sign_28_29_20const($10, $0);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____29($8, $10);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($10);
    std____2__numpunct_char___falsename_28_29_20const($10, $0);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____29($7, $10);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($10);
    HEAP8[$3 | 0] = std____2__numpunct_char___decimal_point_28_29_20const($0);
    HEAP8[$4 | 0] = std____2__numpunct_char___thousands_sep_28_29_20const($0);
    std____2__numpunct_char___grouping_28_29_20const($10, $0);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____29($5, $10);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($10);
    std____2__numpunct_char___truename_28_29_20const($10, $0);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____29($6, $10);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($10);
    $0 = std____2__moneypunct_char_2c_20true___frac_digits_28_29_20const($0);
    break label$2;
   }
   $0 = std____2__moneypunct_char_2c_20false__20const__20std____2__use_facet_std____2__moneypunct_char_2c_20false__20__28std____2__locale_20const__29($1);
   std____2__moneypunct_char_2c_20true___neg_format_28_29_20const($10, $0);
   $1 = HEAP32[$10 >> 2];
   HEAP8[$2 | 0] = $1;
   HEAP8[$2 + 1 | 0] = $1 >>> 8;
   HEAP8[$2 + 2 | 0] = $1 >>> 16;
   HEAP8[$2 + 3 | 0] = $1 >>> 24;
   std____2__moneypunct_char_2c_20true___negative_sign_28_29_20const($10, $0);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____29($8, $10);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($10);
   std____2__numpunct_char___falsename_28_29_20const($10, $0);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____29($7, $10);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($10);
   HEAP8[$3 | 0] = std____2__numpunct_char___decimal_point_28_29_20const($0);
   HEAP8[$4 | 0] = std____2__numpunct_char___thousands_sep_28_29_20const($0);
   std____2__numpunct_char___grouping_28_29_20const($10, $0);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____29($5, $10);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($10);
   std____2__numpunct_char___truename_28_29_20const($10, $0);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____29($6, $10);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($10);
   $0 = std____2__moneypunct_char_2c_20true___frac_digits_28_29_20const($0);
  }
  HEAP32[$9 >> 2] = $0;
  $0 = $10 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator___28int_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $2 = std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___sbumpc_28_29(HEAP32[$1 >> 2]) << 24 >> 24;
  HEAP32[$0 + 4 >> 2] = HEAP32[$1 >> 2];
  HEAP8[$0 | 0] = $2;
 }
 
 function std____2____wrap_iter_char_20const______wrap_iter_char___28std____2____wrap_iter_char___20const__2c_20std____2__enable_if_is_convertible_char__2c_20char_20const____value_2c_20void___type__29($0, $1) {
  HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
  return $0;
 }
 
 function bool_20std____2__equal_std____2____wrap_iter_char___2c_20std____2____wrap_iter_char___20__28std____2____wrap_iter_char___2c_20std____2____wrap_iter_char___2c_20std____2____wrap_iter_char___29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  return bool_20std____2__equal_std____2____wrap_iter_char___2c_20std____2____wrap_iter_char___2c_20std____2____equal_to_char_2c_20char__20__28std____2____wrap_iter_char___2c_20std____2____wrap_iter_char___2c_20std____2____wrap_iter_char___2c_20std____2____equal_to_char_2c_20char__29($0, $1, $2) | 0;
 }
 
 function void_20std____2____double_or_nothing_char__28std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___2c_20char___2c_20char___29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  $4 = global$0 - 16 | 0;
  $5 = $4;
  if ($4 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $5;
  $5 = HEAP32[std____2____compressed_pair__IO_FILE__2c_20int_20_28__29_28_IO_FILE__29___second_28_29($0) >> 2];
  $6 = HEAP32[$1 >> 2];
  $8 = HEAP32[$0 >> 2];
  $7 = ($5 | 0) == 1710 ? 0 : HEAP32[$0 >> 2];
  $3 = HEAP32[$2 >> 2] - HEAP32[$0 >> 2] | 0;
  label$2 : {
   if ($3 >>> 0 < 2147483647) {
    $3 = $3 << 1;
    break label$2;
   }
   $3 = -1;
  }
  $3 = $3 ? $3 : 1;
  $7 = dlrealloc($7, $3);
  if ($7) {
   if (($5 | 0) != 1710) {
    std____2__unique_ptr__IO_FILE_2c_20int_20_28__29_28_IO_FILE__29___release_28_29($0)
   }
   $5 = $6 - $8 | 0;
   HEAP32[$4 + 4 >> 2] = 1644;
   $6 = std____2__unique_ptr__IO_FILE_2c_20int_20_28__29_28_IO_FILE__29___unique_ptr_true_2c_20void__28_IO_FILE__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_int_20_28__29_28_IO_FILE__29__2c_20true_____good_rval_ref_type_29($4 + 8 | 0, $7, $4 + 4 | 0);
   std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___operator__28std____2__unique_ptr_char_2c_20void_20_28__29_28void__29____29($0, $6);
   std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29____unique_ptr_28_29($6);
   HEAP32[$1 >> 2] = $5 + HEAP32[$0 >> 2];
   HEAP32[$2 >> 2] = $3 + HEAP32[$0 >> 2];
   $0 = $4 + 16 | 0;
   if ($0 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $0;
   return;
  }
  std____throw_bad_alloc_28_29();
  abort();
 }
 
 function void_20std____2____double_or_nothing_unsigned_20int__28std____2__unique_ptr_unsigned_20int_2c_20void_20_28__29_28void__29___2c_20unsigned_20int___2c_20unsigned_20int___29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  $4 = global$0 - 16 | 0;
  $5 = $4;
  if ($4 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $5;
  $5 = HEAP32[std____2____compressed_pair__IO_FILE__2c_20int_20_28__29_28_IO_FILE__29___second_28_29($0) >> 2];
  $6 = HEAP32[$1 >> 2];
  $8 = HEAP32[$0 >> 2];
  $7 = ($5 | 0) == 1710 ? 0 : HEAP32[$0 >> 2];
  $3 = HEAP32[$2 >> 2] - HEAP32[$0 >> 2] | 0;
  label$2 : {
   if ($3 >>> 0 < 2147483647) {
    $3 = $3 << 1;
    break label$2;
   }
   $3 = -1;
  }
  $3 = $3 ? $3 : 4;
  $7 = dlrealloc($7, $3);
  if ($7) {
   if (($5 | 0) != 1710) {
    std____2__unique_ptr__IO_FILE_2c_20int_20_28__29_28_IO_FILE__29___release_28_29($0)
   }
   $5 = $6 - $8 >> 2;
   HEAP32[$4 + 4 >> 2] = 1644;
   $6 = std____2__unique_ptr__IO_FILE_2c_20int_20_28__29_28_IO_FILE__29___unique_ptr_true_2c_20void__28_IO_FILE__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_int_20_28__29_28_IO_FILE__29__2c_20true_____good_rval_ref_type_29($4 + 8 | 0, $7, $4 + 4 | 0);
   std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___operator__28std____2__unique_ptr_char_2c_20void_20_28__29_28void__29____29($0, $6);
   std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29____unique_ptr_28_29($6);
   HEAP32[$1 >> 2] = HEAP32[$0 >> 2] + ($5 << 2);
   HEAP32[$2 >> 2] = HEAP32[$0 >> 2] + ($3 & -4);
   $0 = $4 + 16 | 0;
   if ($0 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $0;
   return;
  }
  std____throw_bad_alloc_28_29();
  abort();
 }
 
 function std____2__money_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20bool_2c_20std____2__ios_base__2c_20unsigned_20int__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___29_20const($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  var $7 = 0, $8 = 0;
  $0 = global$0 - 160 | 0;
  $7 = $0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $7;
  HEAP32[$0 + 144 >> 2] = $2;
  HEAP32[$0 + 152 >> 2] = $1;
  HEAP32[$0 + 20 >> 2] = 1710;
  $1 = std____2__unique_ptr__IO_FILE_2c_20int_20_28__29_28_IO_FILE__29___unique_ptr_true_2c_20void__28_IO_FILE__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_int_20_28__29_28_IO_FILE__29__2c_20true_____good_rval_ref_type_29($0 + 24 | 0, $0 + 32 | 0, $0 + 20 | 0);
  HEAP32[16874] = 0;
  std____2__ios_base__getloc_28_29_20const($0 + 16 | 0, $4);
  $7 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    label$5 : {
     label$6 : {
      if (($7 | 0) != 1) {
       HEAP32[16874] = 0;
       $7 = __invoke_i1___22class_std____2__basic_ifstream_22_(31, $0 + 16 | 0) | 0;
       $8 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($8 | 0) == 1) {
        break label$3
       }
       HEAP8[$0 + 15 | 0] = 0;
       $4 = HEAP32[$4 + 4 >> 2];
       HEAP32[16874] = 0;
       $2 = __invoke_i1___22class_std____2__istreambuf_iterator_22____22class_std____2__basic_streambuf_22__i1___22class_std____2__locale_22__i32_i32__i8____22class_std____2__ctype_22____22class_std____2__unique_ptr_22__i8___i8_(1711, $0 + 152 | 0, $2 | 0, $3 | 0, $0 + 16 | 0, $4 | 0, $5 | 0, $0 + 15 | 0, $7 | 0, $1 | 0, $0 + 20 | 0, $0 + 132 | 0) | 0;
       $3 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($3 | 0) == 1) {
        break label$3
       }
       if (!$2) {
        break label$5
       }
       std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___clear_28_29($6);
       if (!HEAPU8[$0 + 15 | 0]) {
        break label$6
       }
       HEAP32[16874] = 0;
       $2 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(32, $7 | 0, 45) | 0;
       $3 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($3 | 0) == 1) {
        break label$3
       }
       HEAP32[16874] = 0;
       __invoke_void___22class_std____2__vector_13_22__i32(1715, $6 | 0, $2 | 0);
       $2 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($2 | 0) != 1) {
        break label$6
       }
       break label$3;
      }
      $4 = __cxa_find_matching_catch_2() | 0;
      getTempRet0() | 0;
      break label$2;
     }
     HEAP32[16874] = 0;
     $7 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(32, $7 | 0, 48) | 0;
     $2 = HEAP32[16874];
     HEAP32[16874] = 0;
     if (($2 | 0) != 1) {
      $4 = HEAP32[$1 >> 2];
      $8 = HEAP32[$0 + 20 >> 2];
      $2 = $8 + -1 | 0;
      $3 = $4 >>> 0 > $2 >>> 0 ? $4 : $2;
      $7 = $7 & 255;
      while (1) {
       label$11 : {
        if ($4 >>> 0 < $2 >>> 0) {
         if (($7 | 0) == HEAPU8[$4 | 0]) {
          break label$11
         }
         $3 = $4;
        }
        HEAP32[16874] = 0;
        __invoke___22class_std____2__basic_istream_22____22class_std____2__basic_istream_22__i8__i32(1720, $6 | 0, $3 | 0, $8 | 0) | 0;
        $2 = HEAP32[16874];
        HEAP32[16874] = 0;
        if (($2 | 0) != 1) {
         break label$5
        }
        break label$3;
       }
       $4 = $4 + 1 | 0;
       continue;
      };
     }
     break label$3;
    }
    HEAP32[16874] = 0;
    $2 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1647, $0 + 152 | 0, $0 + 144 | 0) | 0;
    $3 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($3 | 0) == 1) {
     break label$3
    }
    if ($2) {
     HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 2
    }
    $2 = HEAP32[$0 + 152 >> 2];
    std____2__locale___locale_28_29($0 + 16 | 0);
    std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29____unique_ptr_28_29($1);
    $0 = $0 + 160 | 0;
    if ($0 >>> 0 < global$2 >>> 0) {
     __handle_stack_overflow()
    }
    global$0 = $0;
    return $2 | 0;
   }
   $4 = __cxa_find_matching_catch_2() | 0;
   getTempRet0() | 0;
   std____2__locale___locale_28_29($0 + 16 | 0);
  }
  std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29____unique_ptr_28_29($1);
  __resumeException($4 | 0);
  abort();
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___clear_28_29($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  label$2 : {
   if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____is_long_28_29_20const($0)) {
    $2 = HEAP32[$0 >> 2];
    HEAP8[$1 + 15 | 0] = 0;
    std____2__char_traits_char___assign_28char__2c_20char_20const__29($2, $1 + 15 | 0);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_size_28unsigned_20long_29($0, 0);
    break label$2;
   }
   HEAP8[$1 + 14 | 0] = 0;
   std____2__char_traits_char___assign_28char__2c_20char_20const__29($0, $1 + 14 | 0);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_short_size_28unsigned_20long_29($0, 0);
  }
  $0 = $1 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function std____2__enable_if__28__is_forward_iterator_char____value_29_20___20_28__libcpp_string_gets_noexcept_iterator_char____value_29_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____type_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___append_char___28char__2c_20char__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  return std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____append_forward_unsafe_char___28char__2c_20char__29($0, $1, $2) | 0;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____append_forward_unsafe_char___28char__2c_20char__29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  $5 = global$0 - 32 | 0;
  $3 = $5;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($0);
  $4 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($0);
  $6 = std____2__iterator_traits_char_20const____difference_type_20std____2__distance_char_20const___28char_20const__2c_20char_20const__29($1, $2);
  label$2 : {
   if (!$6) {
    break label$2
   }
   if (bool_20std____2____ptr_in_range_char__28char_20const__2c_20char_20const__2c_20char_20const__29($1, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_pointer_28_29_20const($0), std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_pointer_28_29_20const($0) + std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($0) | 0)) {
    $3 = $5 + 16 | 0;
    std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20_____compressed_pair_std____2__allocator_char__20const___28std____2____second_tag_2c_20std____2__allocator_char__20const__29($3, $0);
    std____2__enable_if___is_forward_iterator_char_20const____value_2c_20void___type_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____init_char_20const___28char_20const__2c_20char_20const__29($3, $1, $2);
    $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_pointer_28_29_20const($3);
    $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($3);
    HEAP32[16874] = 0;
    __invoke___22class_std____2__basic_istream_22____22class_std____2__basic_istream_22__i8__i32(1721, $0 | 0, $1 | 0, $2 | 0) | 0;
    $1 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($1 | 0) != 1) {
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($3);
     break label$2;
    }
    $0 = __cxa_find_matching_catch_2() | 0;
    getTempRet0() | 0;
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($3);
    __resumeException($0 | 0);
    abort();
   }
   if ($4 - $3 >>> 0 < $6 >>> 0) {
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____grow_by_28unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_29($0, $4, ($3 + $6 | 0) - $4 | 0, $3, $3)
   }
   $8 = ($3 - $1 | 0) + $2 | 0;
   $7 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_pointer_28_29_20const($0);
   $4 = $7 + $3 | 0;
   while (1) {
    if (($1 | 0) != ($2 | 0)) {
     std____2__char_traits_char___assign_28char__2c_20char_20const__29($4, $1);
     $1 = $1 + 1 | 0;
     $4 = $4 + 1 | 0;
     continue;
    }
    break;
   };
   HEAP8[$5 + 15 | 0] = 0;
   std____2__char_traits_char___assign_28char__2c_20char_20const__29($8 + $7 | 0, $5 + 15 | 0);
   std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____set_size_28unsigned_20long_29($0, $3 + $6 | 0);
  }
  $1 = $5 + 32 | 0;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  return $0;
 }
 
 function std____2__moneypunct_char_2c_20true__20const__20std____2__use_facet_std____2__moneypunct_char_2c_20true__20__28std____2__locale_20const__29($0) {
  return std____2__locale__use_facet_28std____2__locale__id__29_20const($0, 69700);
 }
 
 function std____2__moneypunct_char_2c_20true___neg_format_28_29_20const($0, $1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 44 >> 2]]($0, $1);
 }
 
 function std____2__moneypunct_char_2c_20true___negative_sign_28_29_20const($0, $1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 32 >> 2]]($0, $1);
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____29($0, $1) {
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____move_assign_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___2c_20std____2__integral_constant_bool_2c_20true__29($0, $1);
 }
 
 function std____2__moneypunct_char_2c_20true___frac_digits_28_29_20const($0) {
  return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 36 >> 2]]($0) | 0;
 }
 
 function std____2__moneypunct_char_2c_20false__20const__20std____2__use_facet_std____2__moneypunct_char_2c_20false__20__28std____2__locale_20const__29($0) {
  return std____2__locale__use_facet_28std____2__locale__id__29_20const($0, 69692);
 }
 
 function bool_20std____2__equal_std____2____wrap_iter_char___2c_20std____2____wrap_iter_char___2c_20std____2____equal_to_char_2c_20char__20__28std____2____wrap_iter_char___2c_20std____2____wrap_iter_char___2c_20std____2____wrap_iter_char___2c_20std____2____equal_to_char_2c_20char__29($0, $1, $2) {
  var $3 = 0, $4 = 0;
  $3 = global$0 - 32 | 0;
  $4 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  HEAP32[$3 + 16 >> 2] = $1;
  HEAP32[$3 + 24 >> 2] = $0;
  HEAP32[$3 + 8 >> 2] = $2;
  while (1) {
   label$3 : {
    $1 = !bool_20std____2__operator___double___28std____2____wrap_iter_double___20const__2c_20std____2____wrap_iter_double___20const__29($3 + 24 | 0, $3 + 16 | 0);
    $0 = 1;
    label$4 : {
     if ($1) {
      break label$4
     }
     if (HEAPU8[HEAP32[$3 + 24 >> 2]] == HEAPU8[HEAP32[$3 + 8 >> 2]]) {
      break label$3
     }
     $0 = 0;
    }
    $1 = $3 + 32 | 0;
    if ($1 >>> 0 < global$2 >>> 0) {
     __handle_stack_overflow()
    }
    global$0 = $1;
    return $0;
   }
   std____2____wrap_iter_char____operator___28_29($3 + 24 | 0);
   std____2____wrap_iter_char____operator___28_29($3 + 8 | 0);
   continue;
  };
 }
 
 function std____2____wrap_iter_char____operator__28long_29_20const($0, $1) {
  var $2 = 0, $3 = 0;
  $2 = global$0 - 16 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  HEAP32[$2 + 8 >> 2] = HEAP32[$0 >> 2];
  $0 = $2 + 8 | 0;
  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + $1;
  $0 = HEAP32[$2 + 8 >> 2];
  $1 = $2 + 16 | 0;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  return $0;
 }
 
 function std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___operator__28std____2__unique_ptr_char_2c_20void_20_28__29_28void__29____29($0, $1) {
  std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___reset_28unsigned_20char__29($0, std____2__unique_ptr__IO_FILE_2c_20int_20_28__29_28_IO_FILE__29___release_28_29($1));
  $1 = HEAP32[std____2____compressed_pair__IO_FILE__2c_20int_20_28__29_28_IO_FILE__29___second_28_29($1) >> 2];
  HEAP32[std____2____compressed_pair__IO_FILE__2c_20int_20_28__29_28_IO_FILE__29___second_28_29($0) >> 2] = $1;
 }
 
 function std____2__money_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20bool_2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long_20double__29_20const($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  var $7 = 0, $8 = 0;
  $0 = global$0 - 624 | 0;
  $7 = $0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $7;
  HEAP32[$0 + 608 >> 2] = $2;
  HEAP32[$0 + 616 >> 2] = $1;
  HEAP32[$0 + 16 >> 2] = 1710;
  $1 = std____2__unique_ptr__IO_FILE_2c_20int_20_28__29_28_IO_FILE__29___unique_ptr_true_2c_20void__28_IO_FILE__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_int_20_28__29_28_IO_FILE__29__2c_20true_____good_rval_ref_type_29($0 + 200 | 0, $0 + 208 | 0, $0 + 16 | 0);
  HEAP32[16874] = 0;
  std____2__ios_base__getloc_28_29_20const($0 + 192 | 0, $4);
  $7 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      label$6 : {
       label$7 : {
        label$8 : {
         label$9 : {
          label$10 : {
           label$11 : {
            if (($7 | 0) != 1) {
             HEAP32[16874] = 0;
             $7 = __invoke_i1___22class_std____2__basic_ifstream_22_(1674, $0 + 192 | 0) | 0;
             $8 = HEAP32[16874];
             HEAP32[16874] = 0;
             if (($8 | 0) == 1) {
              break label$11
             }
             HEAP8[$0 + 191 | 0] = 0;
             $4 = HEAP32[$4 + 4 >> 2];
             HEAP32[16874] = 0;
             $2 = __invoke_i1___22class_std____2__istreambuf_iterator_22____22class_std____2__basic_streambuf_22__i1___22class_std____2__locale_22__i32_i32__i8____22class_std____2__ctype_22____22class_std____2__unique_ptr_22__i8___i8_(1722, $0 + 616 | 0, $2 | 0, $3 | 0, $0 + 192 | 0, $4 | 0, $5 | 0, $0 + 191 | 0, $7 | 0, $1 | 0, $0 + 196 | 0, $0 + 608 | 0) | 0;
             $3 = HEAP32[16874];
             HEAP32[16874] = 0;
             if (($3 | 0) == 1) {
              break label$6
             }
             if (!$2) {
              break label$7
             }
             $2 = HEAPU8[40123] | HEAPU8[40124] << 8 | (HEAPU8[40125] << 16 | HEAPU8[40126] << 24);
             HEAP8[$0 + 183 | 0] = $2;
             HEAP8[$0 + 184 | 0] = $2 >>> 8;
             HEAP8[$0 + 185 | 0] = $2 >>> 16;
             HEAP8[$0 + 186 | 0] = $2 >>> 24;
             $2 = HEAPU8[40120] | HEAPU8[40121] << 8 | (HEAPU8[40122] << 16 | HEAPU8[40123] << 24);
             HEAP32[$0 + 176 >> 2] = HEAPU8[40116] | HEAPU8[40117] << 8 | (HEAPU8[40118] << 16 | HEAPU8[40119] << 24);
             HEAP32[$0 + 180 >> 2] = $2;
             HEAP32[16874] = 0;
             __invoke___22class_std____2__shared_ptr_22____22class_std____2__shared_ptr_22___class_maxiOsc____22class_emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc____val_deleter_22__i32(1688, $7 | 0, $0 + 176 | 0, $0 + 186 | 0, $0 + 128 | 0) | 0;
             $2 = HEAP32[16874];
             HEAP32[16874] = 0;
             if (($2 | 0) == 1) {
              break label$10
             }
             HEAP32[$0 + 4 >> 2] = 1644;
             $3 = std____2__unique_ptr__IO_FILE_2c_20int_20_28__29_28_IO_FILE__29___unique_ptr_true_2c_20void__28_IO_FILE__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_int_20_28__29_28_IO_FILE__29__2c_20true_____good_rval_ref_type_29($0 + 8 | 0, 0, $0 + 4 | 0);
             $2 = $0 + 16 | 0;
             if ((HEAP32[$0 + 196 >> 2] - HEAP32[$1 >> 2] | 0) < 393) {
              break label$8
             }
             std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___reset_28unsigned_20char__29($3, dlmalloc((HEAP32[$0 + 196 >> 2] - HEAP32[$1 >> 2] >> 2) + 2 | 0));
             if (HEAP32[$3 >> 2]) {
              break label$9
             }
             HEAP32[16874] = 0;
             __invoke_void(1645);
             $2 = HEAP32[16874];
             HEAP32[16874] = 0;
             if (($2 | 0) == 1) {
              break label$5
             }
             break label$2;
            }
            $4 = __cxa_find_matching_catch_2() | 0;
            getTempRet0() | 0;
            break label$3;
           }
           $4 = __cxa_find_matching_catch_2() | 0;
           getTempRet0() | 0;
           break label$4;
          }
          $4 = __cxa_find_matching_catch_2() | 0;
          getTempRet0() | 0;
          break label$4;
         }
         $2 = HEAP32[$3 >> 2];
        }
        if (HEAPU8[$0 + 191 | 0]) {
         HEAP8[$2 | 0] = 45;
         $2 = $2 + 1 | 0;
        }
        $4 = HEAP32[$1 >> 2];
        while (1) {
         if ($4 >>> 0 >= HEAPU32[$0 + 196 >> 2]) {
          HEAP8[$2 | 0] = 0;
          HEAP32[$0 >> 2] = $6;
          if ((sscanf($0 + 16 | 0, $0) | 0) != 1) {
           HEAP32[16874] = 0;
           __invoke_void___22class_std____2__basic_ifstream_22_(1712, 40100);
           $2 = HEAP32[16874];
           HEAP32[16874] = 0;
           if (($2 | 0) != 1) {
            break label$2
           }
           break label$5;
          }
          std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29____unique_ptr_28_29($3);
          break label$7;
         }
         HEAP8[$2 | 0] = HEAPU8[($0 + 176 | 0) + (wchar_t_20const__20std____2__find_wchar_t_20const__2c_20wchar_t__28wchar_t_20const__2c_20wchar_t_20const__2c_20wchar_t_20const__29($0 + 128 | 0, $0 + 168 | 0, $4) - ($0 + 128 | 0) >> 2) | 0];
         $2 = $2 + 1 | 0;
         $4 = $4 + 4 | 0;
         continue;
        };
       }
       HEAP32[16874] = 0;
       $2 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1680, $0 + 616 | 0, $0 + 608 | 0) | 0;
       $3 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($3 | 0) == 1) {
        break label$6
       }
       if ($2) {
        HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 2
       }
       $2 = HEAP32[$0 + 616 >> 2];
       std____2__locale___locale_28_29($0 + 192 | 0);
       std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29____unique_ptr_28_29($1);
       $0 = $0 + 624 | 0;
       if ($0 >>> 0 < global$2 >>> 0) {
        __handle_stack_overflow()
       }
       global$0 = $0;
       return $2 | 0;
      }
      $4 = __cxa_find_matching_catch_2() | 0;
      getTempRet0() | 0;
      break label$4;
     }
     $4 = __cxa_find_matching_catch_2() | 0;
     getTempRet0() | 0;
     std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29____unique_ptr_28_29($3);
    }
    std____2__locale___locale_28_29($0 + 192 | 0);
   }
   std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29____unique_ptr_28_29($1);
   __resumeException($4 | 0);
   abort();
  }
  abort();
 }
 
 function std____2__money_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20bool_2c_20std____2__locale_20const__2c_20unsigned_20int_2c_20unsigned_20int__2c_20bool__2c_20std____2__ctype_wchar_t__20const__2c_20std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29___2c_20wchar_t___2c_20wchar_t__29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  $8 = $8 | 0;
  $9 = $9 | 0;
  $10 = $10 | 0;
  var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
  $11 = global$0 - 560 | 0;
  $12 = $11;
  if ($11 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $12;
  HEAP32[$11 + 548 >> 2] = $10;
  HEAP32[$11 + 552 >> 2] = $1;
  HEAP32[$11 + 96 >> 2] = 1710;
  $15 = std____2__unique_ptr__IO_FILE_2c_20int_20_28__29_28_IO_FILE__29___unique_ptr_true_2c_20void__28_IO_FILE__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_int_20_28__29_28_IO_FILE__29__2c_20true_____good_rval_ref_type_29($11 + 136 | 0, $11 + 144 | 0, $11 + 96 | 0);
  $1 = HEAP32[$15 >> 2];
  HEAP32[$11 + 132 >> 2] = $1;
  HEAP32[$11 + 128 >> 2] = $1 + 400;
  $17 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($11 + 96 | 0);
  $14 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___basic_string_28_29($11 + 80 | 0);
  $12 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___basic_string_28_29($11 - -64 | 0);
  $13 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___basic_string_28_29($11 + 48 | 0);
  $16 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___basic_string_28_29($11 + 32 | 0);
  HEAP32[16874] = 0;
  __invoke_void_i1___22class_std____2__locale_22____22struct_std____2__money_base__pattern_22__i8__i8____22class_std____2__basic_string_22____22class_std____2__basic_string_22____22class_std____2__basic_string_22____22class_std____2__basic_string_22__i32_(1723, $2 | 0, $3 | 0, $11 + 120 | 0, $11 + 116 | 0, $11 + 112 | 0, $17 | 0, $14 | 0, $12 | 0, $13 | 0, $11 + 28 | 0);
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($1 | 0) != 1) {
   label$2 : {
    HEAP32[$9 >> 2] = HEAP32[$8 >> 2];
    $18 = $4 & 512;
    $10 = 0;
    $4 = 0;
    while (1) {
     $1 = $4;
     label$7 : {
      label$8 : {
       label$12 : {
        label$13 : {
         if (($10 | 0) == 4) {
          break label$13
         }
         HEAP32[16874] = 0;
         $2 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1679, $0 | 0, $11 + 552 | 0) | 0;
         $3 = HEAP32[16874];
         HEAP32[16874] = 0;
         if (($3 | 0) == 1) {
          break label$2
         }
         if (!$2) {
          break label$13
         }
         $3 = HEAP8[($11 + 120 | 0) + $10 | 0];
         if ($3 >>> 0 > 4) {
          break label$8
         }
         $2 = 0;
         label$14 : {
          label$15 : {
           label$16 : {
            label$17 : {
             label$18 : {
              switch ($3 - 1 | 0) {
              case 0:
               if (($10 | 0) == 3) {
                break label$8
               }
               HEAP32[16874] = 0;
               $2 = __invoke_i1___22class_std____2__basic_ifstream_22_(1681, $0 | 0) | 0;
               $3 = HEAP32[16874];
               HEAP32[16874] = 0;
               if (($3 | 0) == 1) {
                break label$2
               }
               HEAP32[16874] = 0;
               $2 = __invoke___22class_std____2__basic_istream_22____22class_std____2__basic_istream_22__i8__i32(1724, $7 | 0, 8192, $2 | 0) | 0;
               $3 = HEAP32[16874];
               HEAP32[16874] = 0;
               if (($3 | 0) == 1) {
                break label$2
               }
               if ($2) {
                HEAP32[16874] = 0;
                __invoke_void_i8__i32_i32(1725, $11 + 16 | 0, $0 | 0, 0);
                $2 = HEAP32[16874];
                HEAP32[16874] = 0;
                if (($2 | 0) != 1) {
                 $2 = HEAP32[$11 + 16 >> 2];
                 HEAP32[16874] = 0;
                 __invoke_void___22class_std____2__vector_13_22__i32(1726, $16 | 0, $2 | 0);
                 $2 = HEAP32[16874];
                 HEAP32[16874] = 0;
                 if (($2 | 0) != 1) {
                  break label$17
                 }
                }
                break label$2;
               }
               HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4;
               $0 = 0;
               break label$12;
              case 3:
               break label$14;
              case 1:
               break label$15;
              case 2:
               break label$16;
              default:
               break label$18;
              };
             }
             if (($10 | 0) == 3) {
              break label$8
             }
            }
            while (1) {
             HEAP32[16874] = 0;
             $2 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1679, $0 | 0, $11 + 552 | 0) | 0;
             $3 = HEAP32[16874];
             HEAP32[16874] = 0;
             if (($3 | 0) == 1) {
              break label$2
             }
             if (!$2) {
              break label$8
             }
             HEAP32[16874] = 0;
             $2 = __invoke_i1___22class_std____2__basic_ifstream_22_(1681, $0 | 0) | 0;
             $3 = HEAP32[16874];
             HEAP32[16874] = 0;
             if (($3 | 0) == 1) {
              break label$2
             }
             HEAP32[16874] = 0;
             $2 = __invoke___22class_std____2__basic_istream_22____22class_std____2__basic_istream_22__i8__i32(1724, $7 | 0, 8192, $2 | 0) | 0;
             $3 = HEAP32[16874];
             HEAP32[16874] = 0;
             if (($3 | 0) == 1) {
              break label$2
             }
             if (!$2) {
              break label$8
             }
             HEAP32[16874] = 0;
             __invoke_void_i8__i32_i32(1725, $11 + 16 | 0, $0 | 0, 0);
             $2 = HEAP32[16874];
             HEAP32[16874] = 0;
             if (($2 | 0) != 1) {
              $2 = HEAP32[$11 + 16 >> 2];
              HEAP32[16874] = 0;
              __invoke_void___22class_std____2__vector_13_22__i32(1726, $16 | 0, $2 | 0);
              $2 = HEAP32[16874];
              HEAP32[16874] = 0;
              if (($2 | 0) != 1) {
               continue
              }
             }
             break;
            };
            break label$2;
           }
           if ((std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($12) | 0) == (0 - std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($13) | 0)) {
            break label$8
           }
           label$24 : {
            if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($12)) {
             if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($13)) {
              break label$24
             }
            }
            if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($12)) {
             HEAP32[16874] = 0;
             $2 = __invoke_i1___22class_std____2__basic_ifstream_22_(1681, $0 | 0) | 0;
             $3 = HEAP32[16874];
             HEAP32[16874] = 0;
             if (($3 | 0) == 1) {
              break label$2
             }
             if (($2 | 0) == HEAP32[std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_pointer_28_29_20const($12) >> 2]) {
              HEAP32[16874] = 0;
              __invoke_i1___22class_std____2__basic_ifstream_22_(1683, $0 | 0) | 0;
              $2 = HEAP32[16874];
              HEAP32[16874] = 0;
              if (($2 | 0) == 1) {
               break label$2
              }
              $4 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($12) >>> 0 > 1 ? $12 : $1;
              break label$7;
             }
             HEAP8[$6 | 0] = 1;
             break label$8;
            }
            HEAP32[16874] = 0;
            $2 = __invoke_i1___22class_std____2__basic_ifstream_22_(1681, $0 | 0) | 0;
            $3 = HEAP32[16874];
            HEAP32[16874] = 0;
            if (($3 | 0) == 1) {
             break label$2
            }
            if (($2 | 0) != HEAP32[std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_pointer_28_29_20const($13) >> 2]) {
             break label$8
            }
            HEAP32[16874] = 0;
            __invoke_i1___22class_std____2__basic_ifstream_22_(1683, $0 | 0) | 0;
            $2 = HEAP32[16874];
            HEAP32[16874] = 0;
            if (($2 | 0) == 1) {
             break label$2
            }
            HEAP8[$6 | 0] = 1;
            $4 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($13) >>> 0 > 1 ? $13 : $1;
            break label$7;
           }
           HEAP32[16874] = 0;
           $2 = __invoke_i1___22class_std____2__basic_ifstream_22_(1681, $0 | 0) | 0;
           $3 = HEAP32[16874];
           HEAP32[16874] = 0;
           if (($3 | 0) == 1) {
            break label$2
           }
           if (($2 | 0) == HEAP32[std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_pointer_28_29_20const($12) >> 2]) {
            HEAP32[16874] = 0;
            __invoke_i1___22class_std____2__basic_ifstream_22_(1683, $0 | 0) | 0;
            $2 = HEAP32[16874];
            HEAP32[16874] = 0;
            if (($2 | 0) == 1) {
             break label$2
            }
            $4 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($12) >>> 0 > 1 ? $12 : $1;
            break label$7;
           }
           HEAP32[16874] = 0;
           $2 = __invoke_i1___22class_std____2__basic_ifstream_22_(1681, $0 | 0) | 0;
           $3 = HEAP32[16874];
           HEAP32[16874] = 0;
           if (($3 | 0) == 1) {
            break label$2
           }
           if (($2 | 0) == HEAP32[std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_pointer_28_29_20const($13) >> 2]) {
            HEAP32[16874] = 0;
            __invoke_i1___22class_std____2__basic_ifstream_22_(1683, $0 | 0) | 0;
            $2 = HEAP32[16874];
            HEAP32[16874] = 0;
            if (($2 | 0) == 1) {
             break label$2
            }
            HEAP8[$6 | 0] = 1;
            $4 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($13) >>> 0 > 1 ? $13 : $1;
            break label$7;
           }
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4;
           $0 = 0;
           break label$12;
          }
          if (!($18 | ($1 | $10 >>> 0 < 2))) {
           $4 = 0;
           if (!(($10 | 0) == 2 & HEAPU8[$11 + 123 | 0] != 0)) {
            break label$7
           }
          }
          HEAP32[$11 + 8 >> 2] = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___begin_28_29($14);
          $2 = std____2____wrap_iter_char_20const______wrap_iter_char___28std____2____wrap_iter_char___20const__2c_20std____2__enable_if_is_convertible_char__2c_20char_20const____value_2c_20void___type__29($11 + 16 | 0, $11 + 8 | 0);
          label$31 : {
           if (!$10 | HEAPU8[($10 + $11 | 0) + 119 | 0] > 1) {
            break label$31
           }
           label$32 : {
            while (1) {
             HEAP32[$11 + 8 >> 2] = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___end_28_29($14);
             if (!bool_20std____2__operator___double___28std____2____wrap_iter_double___20const__2c_20std____2____wrap_iter_double___20const__29($2, $11 + 8 | 0)) {
              break label$32
             }
             $3 = HEAP32[HEAP32[$2 >> 2] >> 2];
             HEAP32[16874] = 0;
             $3 = __invoke___22class_std____2__basic_istream_22____22class_std____2__basic_istream_22__i8__i32(1724, $7 | 0, 8192, $3 | 0) | 0;
             $4 = HEAP32[16874];
             HEAP32[16874] = 0;
             if (($4 | 0) != 1) {
              if (!$3) {
               break label$32
              }
              std____2____wrap_iter_float____operator___28_29($2);
              continue;
             }
             break;
            };
            break label$2;
           }
           HEAP32[$11 + 8 >> 2] = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___begin_28_29($14);
           $2 = decltype_28_28fp_base_28_29_29_20__20_28fp0_base_28_29_29_29_20std____2__operator__float__2c_20float___28std____2____wrap_iter_float___20const__2c_20std____2____wrap_iter_float___20const__29($2, $11 + 8 | 0);
           if ($2 >>> 0 <= std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($16) >>> 0) {
            HEAP32[$11 + 8 >> 2] = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___end_28_29($16);
            $2 = std____2____wrap_iter_wchar_t____operator__28long_29_20const($11 + 8 | 0, 0 - $2 | 0);
            $3 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___end_28_29($16);
            $4 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___begin_28_29($14);
            HEAP32[16874] = 0;
            $2 = __invoke___22class_std____2__basic_istream_22____22class_std____2__basic_istream_22__i8__i32(1727, $2 | 0, $3 | 0, $4 | 0) | 0;
            $3 = HEAP32[16874];
            HEAP32[16874] = 0;
            if (($3 | 0) == 1) {
             break label$2
            }
            if ($2) {
             break label$31
            }
           }
           HEAP32[$11 >> 2] = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___begin_28_29($14);
           std____2____wrap_iter_char_20const______wrap_iter_char___28std____2____wrap_iter_char___20const__2c_20std____2__enable_if_is_convertible_char__2c_20char_20const____value_2c_20void___type__29($11 + 8 | 0, $11);
           HEAP32[$11 + 16 >> 2] = HEAP32[$11 + 8 >> 2];
          }
          HEAP32[$11 + 8 >> 2] = HEAP32[$11 + 16 >> 2];
          label$36 : {
           while (1) {
            HEAP32[$11 >> 2] = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___end_28_29($14);
            if (!bool_20std____2__operator___double___28std____2____wrap_iter_double___20const__2c_20std____2____wrap_iter_double___20const__29($11 + 8 | 0, $11)) {
             break label$36
            }
            HEAP32[16874] = 0;
            $2 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1679, $0 | 0, $11 + 552 | 0) | 0;
            $3 = HEAP32[16874];
            HEAP32[16874] = 0;
            label$39 : {
             if (($3 | 0) == 1) {
              break label$39
             }
             if (!$2) {
              break label$36
             }
             HEAP32[16874] = 0;
             $2 = __invoke_i1___22class_std____2__basic_ifstream_22_(1681, $0 | 0) | 0;
             $3 = HEAP32[16874];
             HEAP32[16874] = 0;
             if (($3 | 0) == 1) {
              break label$39
             }
             if (($2 | 0) != HEAP32[HEAP32[$11 + 8 >> 2] >> 2]) {
              break label$36
             }
             HEAP32[16874] = 0;
             __invoke_i1___22class_std____2__basic_ifstream_22_(1683, $0 | 0) | 0;
             $2 = HEAP32[16874];
             HEAP32[16874] = 0;
             if (($2 | 0) == 1) {
              break label$2
             }
             std____2____wrap_iter_float____operator___28_29($11 + 8 | 0);
             continue;
            }
            break;
           };
           break label$2;
          }
          if (!$18) {
           break label$8
          }
          HEAP32[$11 >> 2] = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___end_28_29($14);
          if (!bool_20std____2__operator___double___28std____2____wrap_iter_double___20const__2c_20std____2____wrap_iter_double___20const__29($11 + 8 | 0, $11)) {
           break label$8
          }
          HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4;
          $0 = 0;
          break label$12;
         }
         label$40 : {
          while (1) {
           label$42 : {
            HEAP32[16874] = 0;
            $3 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1679, $0 | 0, $11 + 552 | 0) | 0;
            $4 = HEAP32[16874];
            HEAP32[16874] = 0;
            if (($4 | 0) == 1) {
             break label$42
            }
            if (!$3) {
             break label$40
            }
            HEAP32[16874] = 0;
            $4 = __invoke_i1___22class_std____2__basic_ifstream_22_(1681, $0 | 0) | 0;
            $3 = HEAP32[16874];
            HEAP32[16874] = 0;
            if (($3 | 0) == 1) {
             break label$2
            }
            HEAP32[16874] = 0;
            $3 = __invoke___22class_std____2__basic_istream_22____22class_std____2__basic_istream_22__i8__i32(1724, $7 | 0, 2048, $4 | 0) | 0;
            $19 = HEAP32[16874];
            HEAP32[16874] = 0;
            if (($19 | 0) == 1) {
             break label$2
            }
            label$43 : {
             if ($3) {
              $3 = HEAP32[$9 >> 2];
              if (($3 | 0) == HEAP32[$11 + 548 >> 2]) {
               HEAP32[16874] = 0;
               __invoke_void_i8__i32_i32(1728, $8 | 0, $9 | 0, $11 + 548 | 0);
               $3 = HEAP32[16874];
               HEAP32[16874] = 0;
               if (($3 | 0) == 1) {
                break label$2
               }
               $3 = HEAP32[$9 >> 2];
              }
              HEAP32[$9 >> 2] = $3 + 4;
              HEAP32[$3 >> 2] = $4;
              $2 = $2 + 1 | 0;
              break label$43;
             }
             if (!$2 | !std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($17) | ($4 | 0) != HEAP32[$11 + 112 >> 2]) {
              break label$40
             }
             $4 = HEAP32[$11 + 132 >> 2];
             if (($4 | 0) == HEAP32[$11 + 128 >> 2]) {
              HEAP32[16874] = 0;
              __invoke_void_i8__i32_i32(1718, $15 | 0, $11 + 132 | 0, $11 + 128 | 0);
              $3 = HEAP32[16874];
              HEAP32[16874] = 0;
              if (($3 | 0) == 1) {
               break label$2
              }
              $4 = HEAP32[$11 + 132 >> 2];
             }
             HEAP32[$11 + 132 >> 2] = $4 + 4;
             HEAP32[$4 >> 2] = $2;
             $2 = 0;
            }
            HEAP32[16874] = 0;
            __invoke_i1___22class_std____2__basic_ifstream_22_(1683, $0 | 0) | 0;
            $3 = HEAP32[16874];
            HEAP32[16874] = 0;
            if (($3 | 0) != 1) {
             continue
            }
           }
           break;
          };
          break label$2;
         }
         $3 = HEAP32[$15 >> 2];
         label$47 : {
          if (!$2) {
           break label$47
          }
          $4 = HEAP32[$11 + 132 >> 2];
          if (($3 | 0) == ($4 | 0)) {
           break label$47
          }
          if (HEAP32[$11 + 128 >> 2] == ($4 | 0)) {
           HEAP32[16874] = 0;
           __invoke_void_i8__i32_i32(1718, $15 | 0, $11 + 132 | 0, $11 + 128 | 0);
           $3 = HEAP32[16874];
           HEAP32[16874] = 0;
           if (($3 | 0) == 1) {
            break label$2
           }
           $4 = HEAP32[$11 + 132 >> 2];
          }
          HEAP32[$11 + 132 >> 2] = $4 + 4;
          HEAP32[$4 >> 2] = $2;
         }
         label$49 : {
          if (HEAP32[$11 + 28 >> 2] < 1) {
           break label$49
          }
          HEAP32[16874] = 0;
          $2 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1680, $0 | 0, $11 + 552 | 0) | 0;
          $3 = HEAP32[16874];
          HEAP32[16874] = 0;
          if (($3 | 0) == 1) {
           break label$2
          }
          label$50 : {
           if (!$2) {
            HEAP32[16874] = 0;
            $2 = __invoke_i1___22class_std____2__basic_ifstream_22_(1681, $0 | 0) | 0;
            $3 = HEAP32[16874];
            HEAP32[16874] = 0;
            if (($3 | 0) == 1) {
             break label$2
            }
            if (($2 | 0) == HEAP32[$11 + 116 >> 2]) {
             break label$50
            }
           }
           HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4;
           $0 = 0;
           break label$12;
          }
          HEAP32[16874] = 0;
          __invoke_i1___22class_std____2__basic_ifstream_22_(1683, $0 | 0) | 0;
          $2 = HEAP32[16874];
          HEAP32[16874] = 0;
          if (($2 | 0) == 1) {
           break label$2
          }
          while (1) {
           if (HEAP32[$11 + 28 >> 2] < 1) {
            break label$49
           }
           HEAP32[16874] = 0;
           $2 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1680, $0 | 0, $11 + 552 | 0) | 0;
           $3 = HEAP32[16874];
           HEAP32[16874] = 0;
           label$53 : {
            if (($3 | 0) == 1) {
             break label$53
            }
            label$54 : {
             if (!$2) {
              HEAP32[16874] = 0;
              $2 = __invoke_i1___22class_std____2__basic_ifstream_22_(1681, $0 | 0) | 0;
              $3 = HEAP32[16874];
              HEAP32[16874] = 0;
              if (($3 | 0) == 1) {
               break label$53
              }
              HEAP32[16874] = 0;
              $2 = __invoke___22class_std____2__basic_istream_22____22class_std____2__basic_istream_22__i8__i32(1724, $7 | 0, 2048, $2 | 0) | 0;
              $3 = HEAP32[16874];
              HEAP32[16874] = 0;
              if (($3 | 0) == 1) {
               break label$53
              }
              if ($2) {
               break label$54
              }
             }
             HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4;
             $0 = 0;
             break label$12;
            }
            if (HEAP32[$9 >> 2] == HEAP32[$11 + 548 >> 2]) {
             HEAP32[16874] = 0;
             __invoke_void_i8__i32_i32(1728, $8 | 0, $9 | 0, $11 + 548 | 0);
             $2 = HEAP32[16874];
             HEAP32[16874] = 0;
             if (($2 | 0) == 1) {
              break label$53
             }
            }
            HEAP32[16874] = 0;
            $2 = __invoke_i1___22class_std____2__basic_ifstream_22_(1681, $0 | 0) | 0;
            $3 = HEAP32[16874];
            HEAP32[16874] = 0;
            if (($3 | 0) == 1) {
             break label$53
            }
            $3 = HEAP32[$9 >> 2];
            HEAP32[$9 >> 2] = $3 + 4;
            HEAP32[$3 >> 2] = $2;
            HEAP32[16874] = 0;
            HEAP32[$11 + 28 >> 2] = HEAP32[$11 + 28 >> 2] + -1;
            __invoke_i1___22class_std____2__basic_ifstream_22_(1683, $0 | 0) | 0;
            $2 = HEAP32[16874];
            HEAP32[16874] = 0;
            if (($2 | 0) != 1) {
             continue
            }
           }
           break;
          };
          break label$2;
         }
         $4 = $1;
         if (HEAP32[$8 >> 2] != HEAP32[$9 >> 2]) {
          break label$7
         }
         HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4;
         $0 = 0;
         break label$12;
        }
        label$57 : {
         if (!$1) {
          break label$57
         }
         $4 = 1;
         while (1) {
          if ($4 >>> 0 >= std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($1) >>> 0) {
           break label$57
          }
          HEAP32[16874] = 0;
          $2 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1680, $0 | 0, $11 + 552 | 0) | 0;
          $3 = HEAP32[16874];
          HEAP32[16874] = 0;
          label$59 : {
           if (($3 | 0) == 1) {
            break label$59
           }
           label$60 : {
            if (!$2) {
             HEAP32[16874] = 0;
             $2 = __invoke_i1___22class_std____2__basic_ifstream_22_(1681, $0 | 0) | 0;
             $3 = HEAP32[16874];
             HEAP32[16874] = 0;
             if (($3 | 0) == 1) {
              break label$59
             }
             if (($2 | 0) == HEAP32[std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator_5b_5d_28unsigned_20long_29_20const($1, $4) >> 2]) {
              break label$60
             }
            }
            HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4;
            $0 = 0;
            break label$12;
           }
           HEAP32[16874] = 0;
           __invoke_i1___22class_std____2__basic_ifstream_22_(1683, $0 | 0) | 0;
           $2 = HEAP32[16874];
           HEAP32[16874] = 0;
           $4 = $4 + 1 | 0;
           if (($2 | 0) != 1) {
            continue
           }
          }
          break;
         };
         break label$2;
        }
        label$62 : {
         if (HEAP32[$15 >> 2] == HEAP32[$11 + 132 >> 2]) {
          break label$62
         }
         HEAP32[$11 + 16 >> 2] = 0;
         $0 = HEAP32[$15 >> 2];
         HEAP32[16874] = 0;
         __invoke_void___22class_std____2__vector_22__double__double__i32(1655, $17 | 0, $0 | 0, HEAP32[$11 + 132 >> 2], $11 + 16 | 0);
         $0 = HEAP32[16874];
         HEAP32[16874] = 0;
         if (($0 | 0) != 1) {
          if (!HEAP32[$11 + 16 >> 2]) {
           break label$62
          }
          HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4;
          $0 = 0;
          break label$12;
         }
         break label$2;
        }
        $0 = 1;
       }
       std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($16);
       std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($13);
       std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($12);
       std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($14);
       std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($17);
       std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29____unique_ptr_28_29($15);
       $1 = $11 + 560 | 0;
       if ($1 >>> 0 < global$2 >>> 0) {
        __handle_stack_overflow()
       }
       global$0 = $1;
       return $0 | 0;
      }
      $4 = $1;
     }
     $10 = $10 + 1 | 0;
     continue;
    };
   }
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($16);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($13);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($12);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($14);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($17);
  std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29____unique_ptr_28_29($15);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____money_get_wchar_t_____gather_info_28bool_2c_20std____2__locale_20const__2c_20std____2__money_base__pattern__2c_20wchar_t__2c_20wchar_t__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___2c_20int__29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  $8 = $8 | 0;
  $9 = $9 | 0;
  var $10 = 0, $11 = 0;
  $10 = global$0 - 16 | 0;
  $11 = $10;
  if ($10 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $11;
  label$2 : {
   if ($0) {
    $0 = std____2__moneypunct_wchar_t_2c_20true__20const__20std____2__use_facet_std____2__moneypunct_wchar_t_2c_20true__20__28std____2__locale_20const__29($1);
    std____2__moneypunct_char_2c_20true___neg_format_28_29_20const($10, $0);
    $1 = HEAP32[$10 >> 2];
    HEAP8[$2 | 0] = $1;
    HEAP8[$2 + 1 | 0] = $1 >>> 8;
    HEAP8[$2 + 2 | 0] = $1 >>> 16;
    HEAP8[$2 + 3 | 0] = $1 >>> 24;
    std____2__moneypunct_char_2c_20true___negative_sign_28_29_20const($10, $0);
    std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20____29($8, $10);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($10);
    std____2__numpunct_char___falsename_28_29_20const($10, $0);
    std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20____29($7, $10);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($10);
    HEAP32[$3 >> 2] = std____2__numpunct_char___decimal_point_28_29_20const($0);
    HEAP32[$4 >> 2] = std____2__numpunct_char___thousands_sep_28_29_20const($0);
    std____2__numpunct_char___grouping_28_29_20const($10, $0);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____29($5, $10);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($10);
    std____2__numpunct_char___truename_28_29_20const($10, $0);
    std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20____29($6, $10);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($10);
    $0 = std____2__moneypunct_char_2c_20true___frac_digits_28_29_20const($0);
    break label$2;
   }
   $0 = std____2__moneypunct_wchar_t_2c_20false__20const__20std____2__use_facet_std____2__moneypunct_wchar_t_2c_20false__20__28std____2__locale_20const__29($1);
   std____2__moneypunct_char_2c_20true___neg_format_28_29_20const($10, $0);
   $1 = HEAP32[$10 >> 2];
   HEAP8[$2 | 0] = $1;
   HEAP8[$2 + 1 | 0] = $1 >>> 8;
   HEAP8[$2 + 2 | 0] = $1 >>> 16;
   HEAP8[$2 + 3 | 0] = $1 >>> 24;
   std____2__moneypunct_char_2c_20true___negative_sign_28_29_20const($10, $0);
   std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20____29($8, $10);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($10);
   std____2__numpunct_char___falsename_28_29_20const($10, $0);
   std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20____29($7, $10);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($10);
   HEAP32[$3 >> 2] = std____2__numpunct_char___decimal_point_28_29_20const($0);
   HEAP32[$4 >> 2] = std____2__numpunct_char___thousands_sep_28_29_20const($0);
   std____2__numpunct_char___grouping_28_29_20const($10, $0);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____29($5, $10);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($10);
   std____2__numpunct_char___truename_28_29_20const($10, $0);
   std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20____29($6, $10);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($10);
   $0 = std____2__moneypunct_char_2c_20true___frac_digits_28_29_20const($0);
  }
  HEAP32[$9 >> 2] = $0;
  $0 = $10 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator___28int_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20_____allocator_destructor_28std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20___2c_20unsigned_20long_29($0, std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___sbumpc_28_29(HEAP32[$1 >> 2]), HEAP32[$1 >> 2]);
 }
 
 function bool_20std____2__equal_std____2____wrap_iter_wchar_t___2c_20std____2____wrap_iter_wchar_t___20__28std____2____wrap_iter_wchar_t___2c_20std____2____wrap_iter_wchar_t___2c_20std____2____wrap_iter_wchar_t___29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  return bool_20std____2__equal_std____2____wrap_iter_wchar_t___2c_20std____2____wrap_iter_wchar_t___2c_20std____2____equal_to_wchar_t_2c_20wchar_t__20__28std____2____wrap_iter_wchar_t___2c_20std____2____wrap_iter_wchar_t___2c_20std____2____wrap_iter_wchar_t___2c_20std____2____equal_to_wchar_t_2c_20wchar_t__29($0, $1, $2) | 0;
 }
 
 function std____2__money_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20bool_2c_20std____2__ios_base__2c_20unsigned_20int__2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___29_20const($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  var $7 = 0, $8 = 0;
  $0 = global$0 - 448 | 0;
  $7 = $0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $7;
  HEAP32[$0 + 432 >> 2] = $2;
  HEAP32[$0 + 440 >> 2] = $1;
  HEAP32[$0 + 20 >> 2] = 1710;
  $1 = std____2__unique_ptr__IO_FILE_2c_20int_20_28__29_28_IO_FILE__29___unique_ptr_true_2c_20void__28_IO_FILE__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_int_20_28__29_28_IO_FILE__29__2c_20true_____good_rval_ref_type_29($0 + 24 | 0, $0 + 32 | 0, $0 + 20 | 0);
  HEAP32[16874] = 0;
  std____2__ios_base__getloc_28_29_20const($0 + 16 | 0, $4);
  $7 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    label$6 : {
     label$7 : {
      if (($7 | 0) != 1) {
       HEAP32[16874] = 0;
       $7 = __invoke_i1___22class_std____2__basic_ifstream_22_(1674, $0 + 16 | 0) | 0;
       $8 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($8 | 0) == 1) {
        break label$3
       }
       HEAP8[$0 + 15 | 0] = 0;
       $4 = HEAP32[$4 + 4 >> 2];
       HEAP32[16874] = 0;
       $2 = __invoke_i1___22class_std____2__istreambuf_iterator_22____22class_std____2__basic_streambuf_22__i1___22class_std____2__locale_22__i32_i32__i8____22class_std____2__ctype_22____22class_std____2__unique_ptr_22__i8___i8_(1722, $0 + 440 | 0, $2 | 0, $3 | 0, $0 + 16 | 0, $4 | 0, $5 | 0, $0 + 15 | 0, $7 | 0, $1 | 0, $0 + 20 | 0, $0 + 432 | 0) | 0;
       $3 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($3 | 0) == 1) {
        break label$3
       }
       if (!$2) {
        break label$6
       }
       std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___clear_28_29($6);
       if (!HEAPU8[$0 + 15 | 0]) {
        break label$7
       }
       HEAP32[16874] = 0;
       $2 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1700, $7 | 0, 45) | 0;
       $3 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($3 | 0) == 1) {
        break label$3
       }
       HEAP32[16874] = 0;
       __invoke_void___22class_std____2__vector_13_22__i32(1726, $6 | 0, $2 | 0);
       $2 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($2 | 0) != 1) {
        break label$7
       }
       break label$3;
      }
      $4 = __cxa_find_matching_catch_2() | 0;
      getTempRet0() | 0;
      break label$2;
     }
     HEAP32[16874] = 0;
     $2 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1700, $7 | 0, 48) | 0;
     $3 = HEAP32[16874];
     HEAP32[16874] = 0;
     if (($3 | 0) == 1) {
      break label$3
     }
     $4 = HEAP32[$1 >> 2];
     $3 = HEAP32[$0 + 20 >> 2];
     $7 = $3 + -4 | 0;
     while (1) {
      if (!(($2 | 0) != HEAP32[$4 >> 2] | $4 >>> 0 >= $7 >>> 0)) {
       $4 = $4 + 4 | 0;
       continue;
      }
      break;
     };
     HEAP32[16874] = 0;
     __invoke___22class_std____2__basic_istream_22____22class_std____2__basic_istream_22__i8__i32(1729, $6 | 0, $4 | 0, $3 | 0) | 0;
     $2 = HEAP32[16874];
     HEAP32[16874] = 0;
     if (($2 | 0) != 1) {
      break label$6
     }
     break label$3;
    }
    HEAP32[16874] = 0;
    $2 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1680, $0 + 440 | 0, $0 + 432 | 0) | 0;
    $3 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($3 | 0) == 1) {
     break label$3
    }
    if ($2) {
     HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 2
    }
    $2 = HEAP32[$0 + 440 >> 2];
    std____2__locale___locale_28_29($0 + 16 | 0);
    std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29____unique_ptr_28_29($1);
    $0 = $0 + 448 | 0;
    if ($0 >>> 0 < global$2 >>> 0) {
     __handle_stack_overflow()
    }
    global$0 = $0;
    return $2 | 0;
   }
   $4 = __cxa_find_matching_catch_2() | 0;
   getTempRet0() | 0;
   std____2__locale___locale_28_29($0 + 16 | 0);
  }
  std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29____unique_ptr_28_29($1);
  __resumeException($4 | 0);
  abort();
 }
 
 function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___clear_28_29($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  label$2 : {
   if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____is_long_28_29_20const($0)) {
    $2 = HEAP32[$0 >> 2];
    HEAP32[$1 + 12 >> 2] = 0;
    std____2____compressed_pair_elem__IO_FILE__2c_200_2c_20false_____compressed_pair_elem__IO_FILE___2c_20void__28_IO_FILE___29($2, $1 + 12 | 0);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_size_28unsigned_20long_29($0, 0);
    break label$2;
   }
   HEAP32[$1 + 8 >> 2] = 0;
   std____2____compressed_pair_elem__IO_FILE__2c_200_2c_20false_____compressed_pair_elem__IO_FILE___2c_20void__28_IO_FILE___29($0, $1 + 8 | 0);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_short_size_28unsigned_20long_29($0, 0);
  }
  $0 = $1 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function std____2__enable_if__28__is_forward_iterator_wchar_t____value_29_20___20_28__libcpp_string_gets_noexcept_iterator_wchar_t____value_29_2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____type_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___append_wchar_t___28wchar_t__2c_20wchar_t__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  return std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____append_forward_unsafe_wchar_t___28wchar_t__2c_20wchar_t__29($0, $1, $2) | 0;
 }
 
 function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____append_forward_unsafe_wchar_t___28wchar_t__2c_20wchar_t__29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $5 = global$0 - 16 | 0;
  $3 = $5;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($0);
  $4 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___capacity_28_29_20const($0);
  $6 = std____2__iterator_traits_wchar_t____difference_type_20std____2__distance_wchar_t___28wchar_t__2c_20wchar_t__29($1, $2);
  label$2 : {
   if (!$6) {
    break label$2
   }
   if (bool_20std____2____ptr_in_range_char__28char_20const__2c_20char_20const__2c_20char_20const__29($1, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_pointer_28_29_20const($0), std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_pointer_28_29_20const($0) + (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($0) << 2) | 0)) {
    std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20_____compressed_pair_std____2__allocator_char__20const___28std____2____second_tag_2c_20std____2__allocator_char__20const__29($5, $0);
    std____2__enable_if___is_forward_iterator_wchar_t_20const____value_2c_20void___type_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____init_wchar_t_20const___28wchar_t_20const__2c_20wchar_t_20const__29($5, $1, $2);
    $1 = $5;
    $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_pointer_28_29_20const($1);
    $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($1);
    HEAP32[16874] = 0;
    __invoke___22class_std____2__basic_istream_22____22class_std____2__basic_istream_22__i8__i32(1730, $0 | 0, $2 | 0, $3 | 0) | 0;
    $2 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($2 | 0) != 1) {
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($1);
     break label$2;
    }
    $0 = __cxa_find_matching_catch_2() | 0;
    getTempRet0() | 0;
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($1);
    __resumeException($0 | 0);
    abort();
   }
   if ($4 - $3 >>> 0 < $6 >>> 0) {
    std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____grow_by_28unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_29($0, $4, ($3 + $6 | 0) - $4 | 0, $3, $3)
   }
   $4 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_pointer_28_29_20const($0) + ($3 << 2) | 0;
   while (1) {
    if (($1 | 0) != ($2 | 0)) {
     std____2____compressed_pair_elem__IO_FILE__2c_200_2c_20false_____compressed_pair_elem__IO_FILE___2c_20void__28_IO_FILE___29($4, $1);
     $1 = $1 + 4 | 0;
     $4 = $4 + 4 | 0;
     continue;
    }
    break;
   };
   HEAP32[$5 >> 2] = 0;
   std____2____compressed_pair_elem__IO_FILE__2c_200_2c_20false_____compressed_pair_elem__IO_FILE___2c_20void__28_IO_FILE___29($4, $5);
   std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____set_size_28unsigned_20long_29($0, $3 + $6 | 0);
  }
  $1 = $5 + 16 | 0;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  return $0;
 }
 
 function std____2__moneypunct_wchar_t_2c_20true__20const__20std____2__use_facet_std____2__moneypunct_wchar_t_2c_20true__20__28std____2__locale_20const__29($0) {
  return std____2__locale__use_facet_28std____2__locale__id__29_20const($0, 69716);
 }
 
 function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20____29($0, $1) {
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____move_assign_28std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___2c_20std____2__integral_constant_bool_2c_20true__29($0, $1);
 }
 
 function std____2__moneypunct_wchar_t_2c_20false__20const__20std____2__use_facet_std____2__moneypunct_wchar_t_2c_20false__20__28std____2__locale_20const__29($0) {
  return std____2__locale__use_facet_28std____2__locale__id__29_20const($0, 69708);
 }
 
 function bool_20std____2__equal_std____2____wrap_iter_wchar_t___2c_20std____2____wrap_iter_wchar_t___2c_20std____2____equal_to_wchar_t_2c_20wchar_t__20__28std____2____wrap_iter_wchar_t___2c_20std____2____wrap_iter_wchar_t___2c_20std____2____wrap_iter_wchar_t___2c_20std____2____equal_to_wchar_t_2c_20wchar_t__29($0, $1, $2) {
  var $3 = 0, $4 = 0;
  $3 = global$0 - 32 | 0;
  $4 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  HEAP32[$3 + 16 >> 2] = $1;
  HEAP32[$3 + 24 >> 2] = $0;
  HEAP32[$3 + 8 >> 2] = $2;
  while (1) {
   label$3 : {
    $1 = !bool_20std____2__operator___double___28std____2____wrap_iter_double___20const__2c_20std____2____wrap_iter_double___20const__29($3 + 24 | 0, $3 + 16 | 0);
    $0 = 1;
    label$4 : {
     if ($1) {
      break label$4
     }
     if (HEAP32[HEAP32[$3 + 24 >> 2] >> 2] == HEAP32[HEAP32[$3 + 8 >> 2] >> 2]) {
      break label$3
     }
     $0 = 0;
    }
    $1 = $3 + 32 | 0;
    if ($1 >>> 0 < global$2 >>> 0) {
     __handle_stack_overflow()
    }
    global$0 = $1;
    return $0;
   }
   std____2____wrap_iter_float____operator___28_29($3 + 24 | 0);
   std____2____wrap_iter_float____operator___28_29($3 + 8 | 0);
   continue;
  };
 }
 
 function std____2____wrap_iter_wchar_t____operator__28long_29_20const($0, $1) {
  var $2 = 0, $3 = 0;
  $2 = global$0 - 16 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  HEAP32[$2 + 8 >> 2] = HEAP32[$0 >> 2];
  $0 = $2 + 8 | 0;
  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + ($1 << 2);
  $0 = HEAP32[$2 + 8 >> 2];
  $1 = $2 + 16 | 0;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  return $0;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____move_assign_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___2c_20std____2__integral_constant_bool_2c_20true__29($0, $1) {
  var $2 = 0;
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____clear_and_shrink_28_29($0);
  HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
  $2 = HEAP32[$1 + 4 >> 2];
  HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$0 + 4 >> 2] = $2;
  std____2____compressed_pair_elem_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_200_2c_20false_____compressed_pair_elem_28_29($1);
 }
 
 function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____move_assign_28std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___2c_20std____2__integral_constant_bool_2c_20true__29($0, $1) {
  var $2 = 0;
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____clear_and_shrink_28_29($0);
  HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
  $2 = HEAP32[$1 + 4 >> 2];
  HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$0 + 4 >> 2] = $2;
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____zero_28_29($1);
 }
 
 function std____2__money_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20bool_2c_20std____2__ios_base__2c_20char_2c_20long_20double_29_20const($0, $1, $2, $3, $4, $5, $6, $7, $8) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  $8 = $8 | 0;
  var $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
  $0 = global$0 - 464 | 0;
  $9 = $0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $9;
  HEAP32[$0 + 16 >> 2] = $5;
  HEAP32[$0 + 20 >> 2] = $6;
  HEAP32[$0 + 24 >> 2] = $7;
  HEAP32[$0 + 28 >> 2] = $8;
  HEAP32[$0 + 348 >> 2] = $0 + 352;
  $9 = snprintf($0 + 352 | 0, 100, 40127, $0 + 16 | 0);
  HEAP32[$0 + 48 >> 2] = 1644;
  $13 = std____2__unique_ptr__IO_FILE_2c_20int_20_28__29_28_IO_FILE__29___unique_ptr_true_2c_20void__28_IO_FILE__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_int_20_28__29_28_IO_FILE__29__2c_20true_____good_rval_ref_type_29($0 + 232 | 0, 0, $0 + 48 | 0);
  HEAP32[$0 + 48 >> 2] = 1644;
  $12 = std____2__unique_ptr__IO_FILE_2c_20int_20_28__29_28_IO_FILE__29___unique_ptr_true_2c_20void__28_IO_FILE__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_int_20_28__29_28_IO_FILE__29__2c_20true_____good_rval_ref_type_29($0 + 224 | 0, 0, $0 + 48 | 0);
  $11 = $0 + 240 | 0;
  label$2 : {
   label$3 : {
    label$4 : {
     if ($9 >>> 0 >= 100) {
      HEAP32[16874] = 0;
      $9 = __invoke__struct___locale_struct_(1670) | 0;
      $11 = HEAP32[16874];
      HEAP32[16874] = 0;
      if (($11 | 0) == 1) {
       break label$3
      }
      HEAP32[$0 >> 2] = $5;
      HEAP32[$0 + 4 >> 2] = $6;
      HEAP32[16874] = 0;
      HEAP32[$0 + 8 >> 2] = $7;
      HEAP32[$0 + 12 >> 2] = $8;
      $9 = __invoke___22class_std____2__shared_ptr_22____22class_std____2__shared_ptr_22___class_maxiOsc____22class_emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc____val_deleter_22__i32(1692, $0 + 348 | 0, $9 | 0, 40127, $0 | 0) | 0;
      $5 = HEAP32[16874];
      HEAP32[16874] = 0;
      if (($5 | 0) == 1) {
       break label$3
      }
      $5 = HEAP32[$0 + 348 >> 2];
      if (!$5) {
       HEAP32[16874] = 0;
       __invoke_void(1645);
       $0 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($0 | 0) != 1) {
        break label$4
       }
       break label$3;
      }
      std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___reset_28unsigned_20char__29($13, $5);
      std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___reset_28unsigned_20char__29($12, dlmalloc($9));
      if (bool_20std____2__operator___char_2c_20void_20_28__29_28void__29__28std____2__unique_ptr_char_2c_20void_20_28__29_28void__29__20const__2c_20std__nullptr_t_29($12)) {
       HEAP32[16874] = 0;
       __invoke_void(1645);
       $0 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($0 | 0) == 1) {
        break label$3
       }
       break label$4;
      }
      $11 = HEAP32[$12 >> 2];
     }
     HEAP32[16874] = 0;
     std____2__ios_base__getloc_28_29_20const($0 + 216 | 0, $3);
     $5 = HEAP32[16874];
     HEAP32[16874] = 0;
     label$8 : {
      label$9 : {
       label$10 : {
        label$11 : {
         label$12 : {
          label$13 : {
           label$14 : {
            if (($5 | 0) != 1) {
             HEAP32[16874] = 0;
             $14 = __invoke_i1___22class_std____2__basic_ifstream_22_(31, $0 + 216 | 0) | 0;
             $5 = HEAP32[16874];
             HEAP32[16874] = 0;
             if (($5 | 0) == 1) {
              break label$14
             }
             HEAP32[16874] = 0;
             $5 = HEAP32[$0 + 348 >> 2];
             __invoke___22class_std____2__shared_ptr_22____22class_std____2__shared_ptr_22___class_maxiOsc____22class_emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc____val_deleter_22__i32(1665, $14 | 0, $5 | 0, $5 + $9 | 0, $11 | 0) | 0;
             $5 = HEAP32[16874];
             HEAP32[16874] = 0;
             if (($5 | 0) == 1) {
              break label$14
             }
             $15 = $9 ? HEAPU8[HEAP32[$0 + 348 >> 2]] == 45 : 0;
             $7 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($0 + 192 | 0);
             $6 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($0 + 176 | 0);
             $5 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($0 + 160 | 0);
             HEAP32[16874] = 0;
             __invoke_void_i1___22class_std____2__locale_22____22struct_std____2__money_base__pattern_22__i8__i8____22class_std____2__basic_string_22____22class_std____2__basic_string_22____22class_std____2__basic_string_22____22class_std____2__basic_string_22__i32_(1731, $2 | 0, $15 | 0, $0 + 216 | 0, $0 + 208 | 0, $0 + 207 | 0, $0 + 206 | 0, $7 | 0, $6 | 0, $5 | 0, $0 + 156 | 0);
             $2 = HEAP32[16874];
             HEAP32[16874] = 0;
             if (($2 | 0) == 1) {
              break label$13
             }
             HEAP32[$0 + 36 >> 2] = 1644;
             $8 = std____2__unique_ptr__IO_FILE_2c_20int_20_28__29_28_IO_FILE__29___unique_ptr_true_2c_20void__28_IO_FILE__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_int_20_28__29_28_IO_FILE__29__2c_20true_____good_rval_ref_type_29($0 + 40 | 0, 0, $0 + 36 | 0);
             $2 = HEAP32[$0 + 156 >> 2];
             label$17 : {
              if (($9 | 0) > ($2 | 0)) {
               $10 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($5) + ($9 - $2 << 1 | 1) | 0;
               break label$17;
              }
              $10 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($5) + 2 | 0;
             }
             $2 = $0 + 48 | 0;
             $10 = (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($6) + $10 | 0) + HEAP32[$0 + 156 >> 2] | 0;
             if ($10 >>> 0 < 101) {
              break label$12
             }
             std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___reset_28unsigned_20char__29($8, dlmalloc($10));
             $2 = HEAP32[$8 >> 2];
             if ($2) {
              break label$12
             }
             HEAP32[16874] = 0;
             __invoke_void(1645);
             $1 = HEAP32[16874];
             HEAP32[16874] = 0;
             if (($1 | 0) != 1) {
              break label$4
             }
             break label$11;
            }
            $9 = __cxa_find_matching_catch_2() | 0;
            getTempRet0() | 0;
            break label$2;
           }
           $9 = __cxa_find_matching_catch_2() | 0;
           getTempRet0() | 0;
           break label$9;
          }
          $9 = __cxa_find_matching_catch_2() | 0;
          getTempRet0() | 0;
          break label$10;
         }
         $10 = HEAP32[$3 + 4 >> 2];
         HEAP32[16874] = 0;
         __invoke_void_i8__i8___i8___i32_i8__i8____22class_std____2__ctype_22__i1___22struct_std____2__money_base__pattern_22__i8_i8___22class_std____2__basic_string_22____22class_std____2__basic_string_22____22class_std____2__basic_string_22__i32(1732, $2 | 0, $0 + 36 | 0, $0 + 32 | 0, $10 | 0, $11 | 0, $9 + $11 | 0, $14 | 0, $15 | 0, $0 + 208 | 0, HEAP8[$0 + 207 | 0], HEAP8[$0 + 206 | 0], $7 | 0, $6 | 0, $5 | 0, HEAP32[$0 + 156 >> 2]);
         $9 = HEAP32[16874];
         HEAP32[16874] = 0;
         if (($9 | 0) != 1) {
          HEAP32[16874] = 0;
          $1 = __invoke___22class_std____2__basic_streambuf_22____22class_std____2__basic_streambuf_22__i8__i8__i8____22class_std____2__ios_base_22__i8(29, $1 | 0, $2 | 0, HEAP32[$0 + 36 >> 2], HEAP32[$0 + 32 >> 2], $3 | 0, $4 | 0) | 0;
          $2 = HEAP32[16874];
          HEAP32[16874] = 0;
          if (($2 | 0) != 1) {
           break label$8
          }
         }
        }
        $9 = __cxa_find_matching_catch_2() | 0;
        getTempRet0() | 0;
        std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29____unique_ptr_28_29($8);
       }
       std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($5);
       std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($6);
       std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($7);
      }
      std____2__locale___locale_28_29($0 + 216 | 0);
      break label$2;
     }
     std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29____unique_ptr_28_29($8);
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($5);
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($6);
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($7);
     std____2__locale___locale_28_29($0 + 216 | 0);
     std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29____unique_ptr_28_29($12);
     std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29____unique_ptr_28_29($13);
     $0 = $0 + 464 | 0;
     if ($0 >>> 0 < global$2 >>> 0) {
      __handle_stack_overflow()
     }
     global$0 = $0;
     return $1 | 0;
    }
    abort();
   }
   $9 = __cxa_find_matching_catch_2() | 0;
   getTempRet0() | 0;
  }
  std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29____unique_ptr_28_29($12);
  std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29____unique_ptr_28_29($13);
  __resumeException($9 | 0);
  abort();
 }
 
 function bool_20std____2__operator___char_2c_20void_20_28__29_28void__29__28std____2__unique_ptr_char_2c_20void_20_28__29_28void__29__20const__2c_20std__nullptr_t_29($0) {
  return HEAP32[$0 >> 2] != 0 ^ 1;
 }
 
 function std____2____money_put_char_____gather_info_28bool_2c_20bool_2c_20std____2__locale_20const__2c_20std____2__money_base__pattern__2c_20char__2c_20char__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___2c_20int__29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  $8 = $8 | 0;
  $9 = $9 | 0;
  var $10 = 0, $11 = 0;
  $10 = global$0 - 16 | 0;
  $11 = $10;
  if ($10 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $11;
  label$2 : {
   if ($0) {
    $0 = std____2__moneypunct_char_2c_20true__20const__20std____2__use_facet_std____2__moneypunct_char_2c_20true__20__28std____2__locale_20const__29($2);
    label$4 : {
     if ($1) {
      std____2__moneypunct_char_2c_20true___neg_format_28_29_20const($10, $0);
      $1 = HEAP32[$10 >> 2];
      HEAP8[$3 | 0] = $1;
      HEAP8[$3 + 1 | 0] = $1 >>> 8;
      HEAP8[$3 + 2 | 0] = $1 >>> 16;
      HEAP8[$3 + 3 | 0] = $1 >>> 24;
      std____2__moneypunct_char_2c_20true___negative_sign_28_29_20const($10, $0);
      break label$4;
     }
     std____2__moneypunct_char_2c_20true___pos_format_28_29_20const($10, $0);
     $1 = HEAP32[$10 >> 2];
     HEAP8[$3 | 0] = $1;
     HEAP8[$3 + 1 | 0] = $1 >>> 8;
     HEAP8[$3 + 2 | 0] = $1 >>> 16;
     HEAP8[$3 + 3 | 0] = $1 >>> 24;
     std____2__numpunct_char___falsename_28_29_20const($10, $0);
    }
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____29($8, $10);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($10);
    HEAP8[$4 | 0] = std____2__numpunct_char___decimal_point_28_29_20const($0);
    HEAP8[$5 | 0] = std____2__numpunct_char___thousands_sep_28_29_20const($0);
    std____2__numpunct_char___grouping_28_29_20const($10, $0);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____29($6, $10);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($10);
    std____2__numpunct_char___truename_28_29_20const($10, $0);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____29($7, $10);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($10);
    $0 = std____2__moneypunct_char_2c_20true___frac_digits_28_29_20const($0);
    break label$2;
   }
   $0 = std____2__moneypunct_char_2c_20false__20const__20std____2__use_facet_std____2__moneypunct_char_2c_20false__20__28std____2__locale_20const__29($2);
   label$6 : {
    if ($1) {
     std____2__moneypunct_char_2c_20true___neg_format_28_29_20const($10, $0);
     $1 = HEAP32[$10 >> 2];
     HEAP8[$3 | 0] = $1;
     HEAP8[$3 + 1 | 0] = $1 >>> 8;
     HEAP8[$3 + 2 | 0] = $1 >>> 16;
     HEAP8[$3 + 3 | 0] = $1 >>> 24;
     std____2__moneypunct_char_2c_20true___negative_sign_28_29_20const($10, $0);
     break label$6;
    }
    std____2__moneypunct_char_2c_20true___pos_format_28_29_20const($10, $0);
    $1 = HEAP32[$10 >> 2];
    HEAP8[$3 | 0] = $1;
    HEAP8[$3 + 1 | 0] = $1 >>> 8;
    HEAP8[$3 + 2 | 0] = $1 >>> 16;
    HEAP8[$3 + 3 | 0] = $1 >>> 24;
    std____2__numpunct_char___falsename_28_29_20const($10, $0);
   }
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____29($8, $10);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($10);
   HEAP8[$4 | 0] = std____2__numpunct_char___decimal_point_28_29_20const($0);
   HEAP8[$5 | 0] = std____2__numpunct_char___thousands_sep_28_29_20const($0);
   std____2__numpunct_char___grouping_28_29_20const($10, $0);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____29($6, $10);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($10);
   std____2__numpunct_char___truename_28_29_20const($10, $0);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____29($7, $10);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($10);
   $0 = std____2__moneypunct_char_2c_20true___frac_digits_28_29_20const($0);
  }
  HEAP32[$9 >> 2] = $0;
  $0 = $10 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function std____2____money_put_char_____format_28char__2c_20char___2c_20char___2c_20unsigned_20int_2c_20char_20const__2c_20char_20const__2c_20std____2__ctype_char__20const__2c_20bool_2c_20std____2__money_base__pattern_20const__2c_20char_2c_20char_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20int_29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  $8 = $8 | 0;
  $9 = $9 | 0;
  $10 = $10 | 0;
  $11 = $11 | 0;
  $12 = $12 | 0;
  $13 = $13 | 0;
  $14 = $14 | 0;
  var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
  $20 = global$0 - 16 | 0;
  $15 = $20;
  if ($15 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $15;
  HEAP32[$2 >> 2] = $0;
  $23 = $3 & 512;
  while (1) {
   label$3 : {
    label$4 : {
     label$5 : {
      label$6 : {
       if (($21 | 0) == 4) {
        if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($13) >>> 0 > 1) {
         HEAP32[$20 + 8 >> 2] = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___begin_28_29($13);
         HEAP32[$2 >> 2] = char__20std____2__copy_std____2____wrap_iter_char_20const___2c_20char___28std____2____wrap_iter_char_20const___2c_20std____2____wrap_iter_char_20const___2c_20char__29(std____2____wrap_iter_char____operator__28long_29_20const($20 + 8 | 0, 1), std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___end_28_29($13), HEAP32[$2 >> 2]);
        }
        $3 = $3 & 176;
        if (($3 | 0) == 16) {
         break label$5
        }
        if (($3 | 0) != 32) {
         break label$6
        }
        HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
        break label$5;
       }
       $15 = HEAP8[$8 + $21 | 0];
       if ($15 >>> 0 > 4) {
        break label$3
       }
       label$9 : {
        switch ($15 - 1 | 0) {
        default:
         HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
         break label$3;
        case 0:
         HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
         $15 = std____2__ctype_char___widen_28char_29_20const($6, 32);
         $16 = HEAP32[$2 >> 2];
         HEAP32[$2 >> 2] = $16 + 1;
         HEAP8[$16 | 0] = $15;
         break label$3;
        case 2:
         if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___empty_28_29_20const($13)) {
          break label$3
         }
         $15 = HEAPU8[std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29_20const($13, 0) | 0];
         $16 = HEAP32[$2 >> 2];
         HEAP32[$2 >> 2] = $16 + 1;
         HEAP8[$16 | 0] = $15;
         break label$3;
        case 1:
         if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___empty_28_29_20const($12) | !$23) {
          break label$3
         }
         HEAP32[$2 >> 2] = char__20std____2__copy_std____2____wrap_iter_char_20const___2c_20char___28std____2____wrap_iter_char_20const___2c_20std____2____wrap_iter_char_20const___2c_20char__29(std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___begin_28_29($12), std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___end_28_29($12), HEAP32[$2 >> 2]);
         break label$3;
        case 3:
         break label$9;
        };
       }
       $4 = $7 ? $4 + 1 | 0 : $4;
       $16 = $4 >>> 0 > $5 >>> 0 ? $4 : $5;
       $24 = HEAP32[$2 >> 2];
       $15 = $4;
       while (1) {
        label$15 : {
         if ($15 >>> 0 < $5 >>> 0) {
          if (std____2__ctype_char___is_28unsigned_20short_2c_20char_29_20const($6, 2048, HEAP8[$15 | 0])) {
           break label$15
          }
          $16 = $15;
         }
         $15 = $14;
         if (($15 | 0) >= 1) {
          while (1) {
           $17 = ($15 | 0) < 1;
           if (!($17 | $16 >>> 0 <= $4 >>> 0)) {
            $16 = $16 + -1 | 0;
            $17 = HEAPU8[$16 | 0];
            $18 = HEAP32[$2 >> 2];
            HEAP32[$2 >> 2] = $18 + 1;
            HEAP8[$18 | 0] = $17;
            $15 = $15 + -1 | 0;
            continue;
           }
           break;
          };
          if ($17) {
           $18 = 0
          } else {
           $18 = std____2__ctype_char___widen_28char_29_20const($6, 48)
          }
          while (1) {
           $17 = HEAP32[$2 >> 2];
           HEAP32[$2 >> 2] = $17 + 1;
           if (($15 | 0) >= 1) {
            HEAP8[$17 | 0] = $18;
            $15 = $15 + -1 | 0;
            continue;
           }
           break;
          };
          HEAP8[$17 | 0] = $9;
         }
         if (($4 | 0) == ($16 | 0)) {
          $15 = std____2__ctype_char___widen_28char_29_20const($6, 48);
          $16 = HEAP32[$2 >> 2];
          HEAP32[$2 >> 2] = $16 + 1;
          HEAP8[$16 | 0] = $15;
          break label$4;
         }
         $15 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___empty_28_29_20const($11);
         $17 = -1;
         label$25 : {
          if ($15) {
           break label$25
          }
          $17 = HEAP8[std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29_20const($11, 0) | 0];
         }
         $15 = 0;
         $19 = 0;
         while (1) {
          if (($4 | 0) == ($16 | 0)) {
           break label$4
          }
          label$28 : {
           if (($15 | 0) != ($17 | 0)) {
            $18 = $15;
            break label$28;
           }
           $17 = HEAP32[$2 >> 2];
           HEAP32[$2 >> 2] = $17 + 1;
           HEAP8[$17 | 0] = $10;
           $18 = 0;
           $19 = $19 + 1 | 0;
           if ($19 >>> 0 >= std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($11) >>> 0) {
            $17 = $15;
            break label$28;
           }
           if (HEAPU8[std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29_20const($11, $19) | 0] == 127) {
            $17 = -1;
            break label$28;
           }
           $17 = HEAP8[std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29_20const($11, $19) | 0];
          }
          $16 = $16 + -1 | 0;
          $15 = HEAPU8[$16 | 0];
          $22 = HEAP32[$2 >> 2];
          HEAP32[$2 >> 2] = $22 + 1;
          HEAP8[$22 | 0] = $15;
          $15 = $18 + 1 | 0;
          continue;
         };
        }
        $15 = $15 + 1 | 0;
        continue;
       };
      }
      HEAP32[$1 >> 2] = $0;
     }
     $0 = $20 + 16 | 0;
     if ($0 >>> 0 < global$2 >>> 0) {
      __handle_stack_overflow()
     }
     global$0 = $0;
     return;
    }
    void_20std____2__reverse_char___28char__2c_20char__29($24, HEAP32[$2 >> 2]);
   }
   $21 = $21 + 1 | 0;
   continue;
  };
 }
 
 function std____2__moneypunct_char_2c_20true___pos_format_28_29_20const($0, $1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 40 >> 2]]($0, $1);
 }
 
 function char__20std____2__copy_std____2____wrap_iter_char_20const___2c_20char___28std____2____wrap_iter_char_20const___2c_20std____2____wrap_iter_char_20const___2c_20char__29($0, $1, $2) {
  $0 = std____2__enable_if_is_trivially_copy_assignable_char___value_2c_20char_20const____type_20std____2____unwrap_iter_char__28std____2____wrap_iter_char_20const___29($0);
  $1 = std____2__enable_if_is_trivially_copy_assignable_char___value_2c_20char_20const____type_20std____2____unwrap_iter_char__28std____2____wrap_iter_char_20const___29($1) - $0 | 0;
  if ($1) {
   memmove($2, $0, $1)
  }
  return $1 + $2 | 0;
 }
 
 function std____2__money_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20bool_2c_20std____2__ios_base__2c_20char_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
  $0 = global$0 - 192 | 0;
  $6 = $0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $6;
  std____2__ios_base__getloc_28_29_20const($0 + 184 | 0, $3);
  HEAP32[16874] = 0;
  $11 = __invoke_i1___22class_std____2__basic_ifstream_22_(31, $0 + 184 | 0) | 0;
  $6 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      label$6 : {
       label$8 : {
        label$9 : {
         if (($6 | 0) != 1) {
          if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($5)) {
           $6 = HEAPU8[std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29_20const($5, 0) | 0];
           HEAP32[16874] = 0;
           $8 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(32, $11 | 0, 45) | 0;
           $9 = HEAP32[16874];
           HEAP32[16874] = 0;
           if (($9 | 0) == 1) {
            break label$9
           }
           $12 = ($8 & 255) == ($6 | 0);
          }
          $9 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($0 + 160 | 0);
          $8 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($0 + 144 | 0);
          $6 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($0 + 128 | 0);
          HEAP32[16874] = 0;
          __invoke_void_i1___22class_std____2__locale_22____22struct_std____2__money_base__pattern_22__i8__i8____22class_std____2__basic_string_22____22class_std____2__basic_string_22____22class_std____2__basic_string_22____22class_std____2__basic_string_22__i32_(1731, $2 | 0, $12 | 0, $0 + 184 | 0, $0 + 176 | 0, $0 + 175 | 0, $0 + 174 | 0, $9 | 0, $8 | 0, $6 | 0, $0 + 124 | 0);
          $2 = HEAP32[16874];
          HEAP32[16874] = 0;
          if (($2 | 0) == 1) {
           break label$8
          }
          HEAP32[$0 + 4 >> 2] = 1644;
          $10 = std____2__unique_ptr__IO_FILE_2c_20int_20_28__29_28_IO_FILE__29___unique_ptr_true_2c_20void__28_IO_FILE__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_int_20_28__29_28_IO_FILE__29__2c_20true_____good_rval_ref_type_29($0 + 8 | 0, 0, $0 + 4 | 0);
          label$12 : {
           if ((std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($5) | 0) > HEAP32[$0 + 124 >> 2]) {
            $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($5);
            $7 = HEAP32[$0 + 124 >> 2];
            $7 = (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($6) + ($2 - $7 << 1) | 0) + 1 | 0;
            break label$12;
           }
           $7 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($6) + 2 | 0;
          }
          $2 = $0 + 16 | 0;
          $7 = (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($8) + $7 | 0) + HEAP32[$0 + 124 >> 2] | 0;
          if ($7 >>> 0 < 101) {
           break label$6
          }
          std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___reset_28unsigned_20char__29($10, dlmalloc($7));
          $2 = HEAP32[$10 >> 2];
          if ($2) {
           break label$6
          }
          HEAP32[16874] = 0;
          __invoke_void(1645);
          $1 = HEAP32[16874];
          HEAP32[16874] = 0;
          if (($1 | 0) == 1) {
           break label$5
          }
          abort();
         }
         $5 = __cxa_find_matching_catch_2() | 0;
         getTempRet0() | 0;
         break label$3;
        }
        $5 = __cxa_find_matching_catch_2() | 0;
        getTempRet0() | 0;
        break label$3;
       }
       $5 = __cxa_find_matching_catch_2() | 0;
       getTempRet0() | 0;
       break label$4;
      }
      $7 = HEAP32[$3 + 4 >> 2];
      $13 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_pointer_28_29_20const($5);
      $14 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_pointer_28_29_20const($5);
      $5 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($5);
      HEAP32[16874] = 0;
      __invoke_void_i8__i8___i8___i32_i8__i8____22class_std____2__ctype_22__i1___22struct_std____2__money_base__pattern_22__i8_i8___22class_std____2__basic_string_22____22class_std____2__basic_string_22____22class_std____2__basic_string_22__i32(1732, $2 | 0, $0 + 4 | 0, $0 | 0, $7 | 0, $13 | 0, $5 + $14 | 0, $11 | 0, $12 | 0, $0 + 176 | 0, HEAP8[$0 + 175 | 0], HEAP8[$0 + 174 | 0], $9 | 0, $8 | 0, $6 | 0, HEAP32[$0 + 124 >> 2]);
      $5 = HEAP32[16874];
      HEAP32[16874] = 0;
      if (($5 | 0) != 1) {
       HEAP32[16874] = 0;
       $1 = __invoke___22class_std____2__basic_streambuf_22____22class_std____2__basic_streambuf_22__i8__i8__i8____22class_std____2__ios_base_22__i8(29, $1 | 0, $2 | 0, HEAP32[$0 + 4 >> 2], HEAP32[$0 >> 2], $3 | 0, $4 | 0) | 0;
       $2 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($2 | 0) != 1) {
        break label$2
       }
      }
     }
     $5 = __cxa_find_matching_catch_2() | 0;
     getTempRet0() | 0;
     std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29____unique_ptr_28_29($10);
    }
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($6);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($8);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($9);
   }
   std____2__locale___locale_28_29($0 + 184 | 0);
   __resumeException($5 | 0);
   abort();
  }
  std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29____unique_ptr_28_29($10);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($6);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($8);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($9);
  std____2__locale___locale_28_29($0 + 184 | 0);
  $0 = $0 + 192 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
  return $1 | 0;
 }
 
 function std____2__money_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20bool_2c_20std____2__ios_base__2c_20wchar_t_2c_20long_20double_29_20const($0, $1, $2, $3, $4, $5, $6, $7, $8) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  $8 = $8 | 0;
  var $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
  $0 = global$0 - 1072 | 0;
  $9 = $0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $9;
  HEAP32[$0 + 16 >> 2] = $5;
  HEAP32[$0 + 20 >> 2] = $6;
  HEAP32[$0 + 24 >> 2] = $7;
  HEAP32[$0 + 28 >> 2] = $8;
  HEAP32[$0 + 956 >> 2] = $0 + 960;
  $9 = snprintf($0 + 960 | 0, 100, 40127, $0 + 16 | 0);
  HEAP32[$0 + 48 >> 2] = 1644;
  $13 = std____2__unique_ptr__IO_FILE_2c_20int_20_28__29_28_IO_FILE__29___unique_ptr_true_2c_20void__28_IO_FILE__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_int_20_28__29_28_IO_FILE__29__2c_20true_____good_rval_ref_type_29($0 + 536 | 0, 0, $0 + 48 | 0);
  HEAP32[$0 + 48 >> 2] = 1644;
  $12 = std____2__unique_ptr__IO_FILE_2c_20int_20_28__29_28_IO_FILE__29___unique_ptr_true_2c_20void__28_IO_FILE__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_int_20_28__29_28_IO_FILE__29__2c_20true_____good_rval_ref_type_29($0 + 528 | 0, 0, $0 + 48 | 0);
  $11 = $0 + 544 | 0;
  label$2 : {
   label$3 : {
    label$4 : {
     if ($9 >>> 0 >= 100) {
      HEAP32[16874] = 0;
      $9 = __invoke__struct___locale_struct_(1670) | 0;
      $11 = HEAP32[16874];
      HEAP32[16874] = 0;
      if (($11 | 0) == 1) {
       break label$3
      }
      HEAP32[$0 >> 2] = $5;
      HEAP32[$0 + 4 >> 2] = $6;
      HEAP32[16874] = 0;
      HEAP32[$0 + 8 >> 2] = $7;
      HEAP32[$0 + 12 >> 2] = $8;
      $9 = __invoke___22class_std____2__shared_ptr_22____22class_std____2__shared_ptr_22___class_maxiOsc____22class_emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc____val_deleter_22__i32(1692, $0 + 956 | 0, $9 | 0, 40127, $0 | 0) | 0;
      $5 = HEAP32[16874];
      HEAP32[16874] = 0;
      if (($5 | 0) == 1) {
       break label$3
      }
      $5 = HEAP32[$0 + 956 >> 2];
      if (!$5) {
       HEAP32[16874] = 0;
       __invoke_void(1645);
       $0 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($0 | 0) != 1) {
        break label$4
       }
       break label$3;
      }
      std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___reset_28unsigned_20char__29($13, $5);
      std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___reset_28unsigned_20char__29($12, dlmalloc($9 << 2));
      if (bool_20std____2__operator___char_2c_20void_20_28__29_28void__29__28std____2__unique_ptr_char_2c_20void_20_28__29_28void__29__20const__2c_20std__nullptr_t_29($12)) {
       HEAP32[16874] = 0;
       __invoke_void(1645);
       $0 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($0 | 0) == 1) {
        break label$3
       }
       break label$4;
      }
      $11 = HEAP32[$12 >> 2];
     }
     HEAP32[16874] = 0;
     std____2__ios_base__getloc_28_29_20const($0 + 520 | 0, $3);
     $5 = HEAP32[16874];
     HEAP32[16874] = 0;
     label$8 : {
      label$9 : {
       label$10 : {
        label$11 : {
         label$12 : {
          label$13 : {
           label$14 : {
            if (($5 | 0) != 1) {
             HEAP32[16874] = 0;
             $14 = __invoke_i1___22class_std____2__basic_ifstream_22_(1674, $0 + 520 | 0) | 0;
             $5 = HEAP32[16874];
             HEAP32[16874] = 0;
             if (($5 | 0) == 1) {
              break label$14
             }
             HEAP32[16874] = 0;
             $5 = HEAP32[$0 + 956 >> 2];
             __invoke___22class_std____2__shared_ptr_22____22class_std____2__shared_ptr_22___class_maxiOsc____22class_emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc____val_deleter_22__i32(1688, $14 | 0, $5 | 0, $5 + $9 | 0, $11 | 0) | 0;
             $5 = HEAP32[16874];
             HEAP32[16874] = 0;
             if (($5 | 0) == 1) {
              break label$14
             }
             $15 = $9 ? HEAPU8[HEAP32[$0 + 956 >> 2]] == 45 : 0;
             $7 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($0 + 488 | 0);
             $6 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___basic_string_28_29($0 + 472 | 0);
             $5 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___basic_string_28_29($0 + 456 | 0);
             HEAP32[16874] = 0;
             __invoke_void_i1___22class_std____2__locale_22____22struct_std____2__money_base__pattern_22__i8__i8____22class_std____2__basic_string_22____22class_std____2__basic_string_22____22class_std____2__basic_string_22____22class_std____2__basic_string_22__i32_(1733, $2 | 0, $15 | 0, $0 + 520 | 0, $0 + 512 | 0, $0 + 508 | 0, $0 + 504 | 0, $7 | 0, $6 | 0, $5 | 0, $0 + 452 | 0);
             $2 = HEAP32[16874];
             HEAP32[16874] = 0;
             if (($2 | 0) == 1) {
              break label$13
             }
             HEAP32[$0 + 36 >> 2] = 1644;
             $8 = std____2__unique_ptr__IO_FILE_2c_20int_20_28__29_28_IO_FILE__29___unique_ptr_true_2c_20void__28_IO_FILE__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_int_20_28__29_28_IO_FILE__29__2c_20true_____good_rval_ref_type_29($0 + 40 | 0, 0, $0 + 36 | 0);
             $2 = HEAP32[$0 + 452 >> 2];
             label$17 : {
              if (($9 | 0) > ($2 | 0)) {
               $10 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($5) + ($9 - $2 << 1 | 1) | 0;
               break label$17;
              }
              $10 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($5) + 2 | 0;
             }
             $2 = $0 + 48 | 0;
             $10 = (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($6) + $10 | 0) + HEAP32[$0 + 452 >> 2] | 0;
             if ($10 >>> 0 < 101) {
              break label$12
             }
             std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___reset_28unsigned_20char__29($8, dlmalloc($10 << 2));
             $2 = HEAP32[$8 >> 2];
             if ($2) {
              break label$12
             }
             HEAP32[16874] = 0;
             __invoke_void(1645);
             $1 = HEAP32[16874];
             HEAP32[16874] = 0;
             if (($1 | 0) != 1) {
              break label$4
             }
             break label$11;
            }
            $9 = __cxa_find_matching_catch_2() | 0;
            getTempRet0() | 0;
            break label$2;
           }
           $9 = __cxa_find_matching_catch_2() | 0;
           getTempRet0() | 0;
           break label$9;
          }
          $9 = __cxa_find_matching_catch_2() | 0;
          getTempRet0() | 0;
          break label$10;
         }
         $10 = HEAP32[$3 + 4 >> 2];
         HEAP32[16874] = 0;
         __invoke_void_i8__i8___i8___i32_i8__i8____22class_std____2__ctype_22__i1___22struct_std____2__money_base__pattern_22__i8_i8___22class_std____2__basic_string_22____22class_std____2__basic_string_22____22class_std____2__basic_string_22__i32(1734, $2 | 0, $0 + 36 | 0, $0 + 32 | 0, $10 | 0, $11 | 0, ($9 << 2) + $11 | 0, $14 | 0, $15 | 0, $0 + 512 | 0, HEAP32[$0 + 508 >> 2], HEAP32[$0 + 504 >> 2], $7 | 0, $6 | 0, $5 | 0, HEAP32[$0 + 452 >> 2]);
         $9 = HEAP32[16874];
         HEAP32[16874] = 0;
         if (($9 | 0) != 1) {
          HEAP32[16874] = 0;
          $1 = __invoke___22class_std____2__basic_streambuf_22____22class_std____2__basic_streambuf_22__i8__i8__i8____22class_std____2__ios_base_22__i8(1704, $1 | 0, $2 | 0, HEAP32[$0 + 36 >> 2], HEAP32[$0 + 32 >> 2], $3 | 0, $4 | 0) | 0;
          $2 = HEAP32[16874];
          HEAP32[16874] = 0;
          if (($2 | 0) != 1) {
           break label$8
          }
         }
        }
        $9 = __cxa_find_matching_catch_2() | 0;
        getTempRet0() | 0;
        std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29____unique_ptr_28_29($8);
       }
       std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($5);
       std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($6);
       std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($7);
      }
      std____2__locale___locale_28_29($0 + 520 | 0);
      break label$2;
     }
     std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29____unique_ptr_28_29($8);
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($5);
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($6);
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($7);
     std____2__locale___locale_28_29($0 + 520 | 0);
     std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29____unique_ptr_28_29($12);
     std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29____unique_ptr_28_29($13);
     $0 = $0 + 1072 | 0;
     if ($0 >>> 0 < global$2 >>> 0) {
      __handle_stack_overflow()
     }
     global$0 = $0;
     return $1 | 0;
    }
    abort();
   }
   $9 = __cxa_find_matching_catch_2() | 0;
   getTempRet0() | 0;
  }
  std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29____unique_ptr_28_29($12);
  std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29____unique_ptr_28_29($13);
  __resumeException($9 | 0);
  abort();
 }
 
 function std____2____money_put_wchar_t_____gather_info_28bool_2c_20bool_2c_20std____2__locale_20const__2c_20std____2__money_base__pattern__2c_20wchar_t__2c_20wchar_t__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___2c_20int__29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  $8 = $8 | 0;
  $9 = $9 | 0;
  var $10 = 0, $11 = 0;
  $10 = global$0 - 16 | 0;
  $11 = $10;
  if ($10 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $11;
  label$2 : {
   if ($0) {
    $0 = std____2__moneypunct_wchar_t_2c_20true__20const__20std____2__use_facet_std____2__moneypunct_wchar_t_2c_20true__20__28std____2__locale_20const__29($2);
    label$4 : {
     if ($1) {
      std____2__moneypunct_char_2c_20true___neg_format_28_29_20const($10, $0);
      $1 = HEAP32[$10 >> 2];
      HEAP8[$3 | 0] = $1;
      HEAP8[$3 + 1 | 0] = $1 >>> 8;
      HEAP8[$3 + 2 | 0] = $1 >>> 16;
      HEAP8[$3 + 3 | 0] = $1 >>> 24;
      std____2__moneypunct_char_2c_20true___negative_sign_28_29_20const($10, $0);
      break label$4;
     }
     std____2__moneypunct_char_2c_20true___pos_format_28_29_20const($10, $0);
     $1 = HEAP32[$10 >> 2];
     HEAP8[$3 | 0] = $1;
     HEAP8[$3 + 1 | 0] = $1 >>> 8;
     HEAP8[$3 + 2 | 0] = $1 >>> 16;
     HEAP8[$3 + 3 | 0] = $1 >>> 24;
     std____2__numpunct_char___falsename_28_29_20const($10, $0);
    }
    std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20____29($8, $10);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($10);
    HEAP32[$4 >> 2] = std____2__numpunct_char___decimal_point_28_29_20const($0);
    HEAP32[$5 >> 2] = std____2__numpunct_char___thousands_sep_28_29_20const($0);
    std____2__numpunct_char___grouping_28_29_20const($10, $0);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____29($6, $10);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($10);
    std____2__numpunct_char___truename_28_29_20const($10, $0);
    std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20____29($7, $10);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($10);
    $0 = std____2__moneypunct_char_2c_20true___frac_digits_28_29_20const($0);
    break label$2;
   }
   $0 = std____2__moneypunct_wchar_t_2c_20false__20const__20std____2__use_facet_std____2__moneypunct_wchar_t_2c_20false__20__28std____2__locale_20const__29($2);
   label$6 : {
    if ($1) {
     std____2__moneypunct_char_2c_20true___neg_format_28_29_20const($10, $0);
     $1 = HEAP32[$10 >> 2];
     HEAP8[$3 | 0] = $1;
     HEAP8[$3 + 1 | 0] = $1 >>> 8;
     HEAP8[$3 + 2 | 0] = $1 >>> 16;
     HEAP8[$3 + 3 | 0] = $1 >>> 24;
     std____2__moneypunct_char_2c_20true___negative_sign_28_29_20const($10, $0);
     break label$6;
    }
    std____2__moneypunct_char_2c_20true___pos_format_28_29_20const($10, $0);
    $1 = HEAP32[$10 >> 2];
    HEAP8[$3 | 0] = $1;
    HEAP8[$3 + 1 | 0] = $1 >>> 8;
    HEAP8[$3 + 2 | 0] = $1 >>> 16;
    HEAP8[$3 + 3 | 0] = $1 >>> 24;
    std____2__numpunct_char___falsename_28_29_20const($10, $0);
   }
   std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20____29($8, $10);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($10);
   HEAP32[$4 >> 2] = std____2__numpunct_char___decimal_point_28_29_20const($0);
   HEAP32[$5 >> 2] = std____2__numpunct_char___thousands_sep_28_29_20const($0);
   std____2__numpunct_char___grouping_28_29_20const($10, $0);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____29($6, $10);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($10);
   std____2__numpunct_char___truename_28_29_20const($10, $0);
   std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20____29($7, $10);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($10);
   $0 = std____2__moneypunct_char_2c_20true___frac_digits_28_29_20const($0);
  }
  HEAP32[$9 >> 2] = $0;
  $0 = $10 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function std____2____money_put_wchar_t_____format_28wchar_t__2c_20wchar_t___2c_20wchar_t___2c_20unsigned_20int_2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20std____2__ctype_wchar_t__20const__2c_20bool_2c_20std____2__money_base__pattern_20const__2c_20wchar_t_2c_20wchar_t_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__2c_20int_29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  $8 = $8 | 0;
  $9 = $9 | 0;
  $10 = $10 | 0;
  $11 = $11 | 0;
  $12 = $12 | 0;
  $13 = $13 | 0;
  $14 = $14 | 0;
  var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
  $20 = global$0 - 16 | 0;
  $15 = $20;
  if ($15 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $15;
  HEAP32[$2 >> 2] = $0;
  $23 = $3 & 512;
  label$2 : {
   while (1) {
    label$4 : {
     if (($21 | 0) == 4) {
      if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($13) >>> 0 > 1) {
       HEAP32[$20 + 8 >> 2] = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___begin_28_29($13);
       HEAP32[$2 >> 2] = wchar_t__20std____2__copy_std____2____wrap_iter_wchar_t_20const___2c_20wchar_t___28std____2____wrap_iter_wchar_t_20const___2c_20std____2____wrap_iter_wchar_t_20const___2c_20wchar_t__29(std____2____wrap_iter_wchar_t____operator__28long_29_20const($20 + 8 | 0, 1), std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___end_28_29($13), HEAP32[$2 >> 2]);
      }
      $3 = $3 & 176;
      if (($3 | 0) == 16) {
       break label$2
      }
      if (($3 | 0) != 32) {
       break label$4
      }
      HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
      break label$2;
     }
     $15 = HEAP8[$8 + $21 | 0];
     label$7 : {
      if ($15 >>> 0 > 4) {
       break label$7
      }
      label$8 : {
       switch ($15 - 1 | 0) {
       default:
        HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
        break label$7;
       case 0:
        HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
        $15 = std____2__ctype_wchar_t___widen_28char_29_20const($6, 32);
        $16 = HEAP32[$2 >> 2];
        HEAP32[$2 >> 2] = $16 + 4;
        HEAP32[$16 >> 2] = $15;
        break label$7;
       case 2:
        if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___empty_28_29_20const($13)) {
         break label$7
        }
        $15 = HEAP32[std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator_5b_5d_28unsigned_20long_29_20const($13, 0) >> 2];
        $16 = HEAP32[$2 >> 2];
        HEAP32[$2 >> 2] = $16 + 4;
        HEAP32[$16 >> 2] = $15;
        break label$7;
       case 1:
        if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___empty_28_29_20const($12) | !$23) {
         break label$7
        }
        HEAP32[$2 >> 2] = wchar_t__20std____2__copy_std____2____wrap_iter_wchar_t_20const___2c_20wchar_t___28std____2____wrap_iter_wchar_t_20const___2c_20std____2____wrap_iter_wchar_t_20const___2c_20wchar_t__29(std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___begin_28_29($12), std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___end_28_29($12), HEAP32[$2 >> 2]);
        break label$7;
       case 3:
        break label$8;
       };
      }
      $24 = HEAP32[$2 >> 2];
      $4 = $7 ? $4 + 4 | 0 : $4;
      $17 = $4;
      while (1) {
       label$14 : {
        if ($17 >>> 0 >= $5 >>> 0) {
         break label$14
        }
        if (!std____2__ctype_wchar_t___is_28unsigned_20short_2c_20wchar_t_29_20const($6, 2048, HEAP32[$17 >> 2])) {
         break label$14
        }
        $17 = $17 + 4 | 0;
        continue;
       }
       break;
      };
      $15 = $14;
      if (($15 | 0) >= 1) {
       while (1) {
        $16 = ($15 | 0) < 1;
        if (!($16 | $17 >>> 0 <= $4 >>> 0)) {
         $17 = $17 + -4 | 0;
         $16 = HEAP32[$17 >> 2];
         $18 = HEAP32[$2 >> 2];
         HEAP32[$2 >> 2] = $18 + 4;
         HEAP32[$18 >> 2] = $16;
         $15 = $15 + -1 | 0;
         continue;
        }
        break;
       };
       if ($16) {
        $19 = 0
       } else {
        $19 = std____2__ctype_wchar_t___widen_28char_29_20const($6, 48)
       }
       $16 = HEAP32[$2 >> 2];
       while (1) {
        $18 = $16 + 4 | 0;
        if (($15 | 0) >= 1) {
         HEAP32[$16 >> 2] = $19;
         $15 = $15 + -1 | 0;
         $16 = $18;
         continue;
        }
        break;
       };
       HEAP32[$2 >> 2] = $18;
       HEAP32[$16 >> 2] = $9;
      }
      label$22 : {
       if (($4 | 0) == ($17 | 0)) {
        $15 = std____2__ctype_wchar_t___widen_28char_29_20const($6, 48);
        $16 = HEAP32[$2 >> 2];
        $17 = $16 + 4 | 0;
        HEAP32[$2 >> 2] = $17;
        HEAP32[$16 >> 2] = $15;
        break label$22;
       }
       $15 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___empty_28_29_20const($11);
       $18 = -1;
       label$24 : {
        if ($15) {
         break label$24
        }
        $18 = HEAP8[std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29_20const($11, 0) | 0];
       }
       $15 = 0;
       $19 = 0;
       while (1) {
        if (($4 | 0) != ($17 | 0)) {
         label$28 : {
          if (($15 | 0) != ($18 | 0)) {
           $16 = $15;
           break label$28;
          }
          $16 = HEAP32[$2 >> 2];
          HEAP32[$2 >> 2] = $16 + 4;
          HEAP32[$16 >> 2] = $10;
          $16 = 0;
          $19 = $19 + 1 | 0;
          if ($19 >>> 0 >= std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($11) >>> 0) {
           $18 = $15;
           break label$28;
          }
          if (HEAPU8[std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29_20const($11, $19) | 0] == 127) {
           $18 = -1;
           break label$28;
          }
          $18 = HEAP8[std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator_5b_5d_28unsigned_20long_29_20const($11, $19) | 0];
         }
         $17 = $17 + -4 | 0;
         $15 = HEAP32[$17 >> 2];
         $22 = HEAP32[$2 >> 2];
         HEAP32[$2 >> 2] = $22 + 4;
         HEAP32[$22 >> 2] = $15;
         $15 = $16 + 1 | 0;
         continue;
        }
        break;
       };
       $17 = HEAP32[$2 >> 2];
      }
      void_20std____2__reverse_wchar_t___28wchar_t__2c_20wchar_t__29($24, $17);
     }
     $21 = $21 + 1 | 0;
     continue;
    }
    break;
   };
   HEAP32[$1 >> 2] = $0;
  }
  $0 = $20 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function wchar_t__20std____2__copy_std____2____wrap_iter_wchar_t_20const___2c_20wchar_t___28std____2____wrap_iter_wchar_t_20const___2c_20std____2____wrap_iter_wchar_t_20const___2c_20wchar_t__29($0, $1, $2) {
  return std____2__enable_if__28is_same_std____2__remove_const_wchar_t_20const___type_2c_20wchar_t___value_29_20___20_28is_trivially_copy_assignable_wchar_t___value_29_2c_20wchar_t____type_20std____2____copy_wchar_t_20const_2c_20wchar_t__28wchar_t_20const__2c_20wchar_t_20const__2c_20wchar_t__29(std____2__enable_if_is_trivially_copy_assignable_char___value_2c_20char_20const____type_20std____2____unwrap_iter_char__28std____2____wrap_iter_char_20const___29($0), std____2__enable_if_is_trivially_copy_assignable_char___value_2c_20char_20const____type_20std____2____unwrap_iter_char__28std____2____wrap_iter_char_20const___29($1), $2);
 }
 
 function std____2__money_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20bool_2c_20std____2__ios_base__2c_20wchar_t_2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
  $0 = global$0 - 496 | 0;
  $6 = $0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $6;
  std____2__ios_base__getloc_28_29_20const($0 + 488 | 0, $3);
  HEAP32[16874] = 0;
  $11 = __invoke_i1___22class_std____2__basic_ifstream_22_(1674, $0 + 488 | 0) | 0;
  $6 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      label$6 : {
       label$8 : {
        label$9 : {
         if (($6 | 0) != 1) {
          if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($5)) {
           $6 = HEAP32[std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator_5b_5d_28unsigned_20long_29_20const($5, 0) >> 2];
           HEAP32[16874] = 0;
           $8 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1700, $11 | 0, 45) | 0;
           $9 = HEAP32[16874];
           HEAP32[16874] = 0;
           if (($9 | 0) == 1) {
            break label$9
           }
           $12 = ($6 | 0) == ($8 | 0);
          }
          $9 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($0 + 456 | 0);
          $8 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___basic_string_28_29($0 + 440 | 0);
          $6 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___basic_string_28_29($0 + 424 | 0);
          HEAP32[16874] = 0;
          __invoke_void_i1___22class_std____2__locale_22____22struct_std____2__money_base__pattern_22__i8__i8____22class_std____2__basic_string_22____22class_std____2__basic_string_22____22class_std____2__basic_string_22____22class_std____2__basic_string_22__i32_(1733, $2 | 0, $12 | 0, $0 + 488 | 0, $0 + 480 | 0, $0 + 476 | 0, $0 + 472 | 0, $9 | 0, $8 | 0, $6 | 0, $0 + 420 | 0);
          $2 = HEAP32[16874];
          HEAP32[16874] = 0;
          if (($2 | 0) == 1) {
           break label$8
          }
          HEAP32[$0 + 4 >> 2] = 1644;
          $10 = std____2__unique_ptr__IO_FILE_2c_20int_20_28__29_28_IO_FILE__29___unique_ptr_true_2c_20void__28_IO_FILE__2c_20std____2____dependent_type_std____2____unique_ptr_deleter_sfinae_int_20_28__29_28_IO_FILE__29__2c_20true_____good_rval_ref_type_29($0 + 8 | 0, 0, $0 + 4 | 0);
          label$12 : {
           if ((std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($5) | 0) > HEAP32[$0 + 420 >> 2]) {
            $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($5);
            $7 = HEAP32[$0 + 420 >> 2];
            $7 = (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($6) + ($2 - $7 << 1) | 0) + 1 | 0;
            break label$12;
           }
           $7 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($6) + 2 | 0;
          }
          $2 = $0 + 16 | 0;
          $7 = (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($8) + $7 | 0) + HEAP32[$0 + 420 >> 2] | 0;
          if ($7 >>> 0 < 101) {
           break label$6
          }
          std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29___reset_28unsigned_20char__29($10, dlmalloc($7 << 2));
          $2 = HEAP32[$10 >> 2];
          if ($2) {
           break label$6
          }
          HEAP32[16874] = 0;
          __invoke_void(1645);
          $1 = HEAP32[16874];
          HEAP32[16874] = 0;
          if (($1 | 0) == 1) {
           break label$5
          }
          abort();
         }
         $5 = __cxa_find_matching_catch_2() | 0;
         getTempRet0() | 0;
         break label$3;
        }
        $5 = __cxa_find_matching_catch_2() | 0;
        getTempRet0() | 0;
        break label$3;
       }
       $5 = __cxa_find_matching_catch_2() | 0;
       getTempRet0() | 0;
       break label$4;
      }
      $7 = HEAP32[$3 + 4 >> 2];
      $13 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_pointer_28_29_20const($5);
      $14 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_pointer_28_29_20const($5);
      $5 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($5);
      HEAP32[16874] = 0;
      __invoke_void_i8__i8___i8___i32_i8__i8____22class_std____2__ctype_22__i1___22struct_std____2__money_base__pattern_22__i8_i8___22class_std____2__basic_string_22____22class_std____2__basic_string_22____22class_std____2__basic_string_22__i32(1734, $2 | 0, $0 + 4 | 0, $0 | 0, $7 | 0, $13 | 0, ($5 << 2) + $14 | 0, $11 | 0, $12 | 0, $0 + 480 | 0, HEAP32[$0 + 476 >> 2], HEAP32[$0 + 472 >> 2], $9 | 0, $8 | 0, $6 | 0, HEAP32[$0 + 420 >> 2]);
      $5 = HEAP32[16874];
      HEAP32[16874] = 0;
      if (($5 | 0) != 1) {
       HEAP32[16874] = 0;
       $1 = __invoke___22class_std____2__basic_streambuf_22____22class_std____2__basic_streambuf_22__i8__i8__i8____22class_std____2__ios_base_22__i8(1704, $1 | 0, $2 | 0, HEAP32[$0 + 4 >> 2], HEAP32[$0 >> 2], $3 | 0, $4 | 0) | 0;
       $2 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($2 | 0) != 1) {
        break label$2
       }
      }
     }
     $5 = __cxa_find_matching_catch_2() | 0;
     getTempRet0() | 0;
     std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29____unique_ptr_28_29($10);
    }
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($6);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($8);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($9);
   }
   std____2__locale___locale_28_29($0 + 488 | 0);
   __resumeException($5 | 0);
   abort();
  }
  std____2__unique_ptr_unsigned_20char_2c_20void_20_28__29_28void__29____unique_ptr_28_29($10);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($6);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($8);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($9);
  std____2__locale___locale_28_29($0 + 488 | 0);
  $0 = $0 + 496 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
  return $1 | 0;
 }
 
 function std____2__enable_if_is_trivially_copy_assignable_char___value_2c_20char_20const____type_20std____2____unwrap_iter_char__28std____2____wrap_iter_char_20const___29($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  HEAP32[$1 + 8 >> 2] = $0;
  $0 = HEAP32[$1 + 8 >> 2];
  $1 = $1 + 16 | 0;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  return $0;
 }
 
 function std____2__enable_if__28is_same_std____2__remove_const_wchar_t_20const___type_2c_20wchar_t___value_29_20___20_28is_trivially_copy_assignable_wchar_t___value_29_2c_20wchar_t____type_20std____2____copy_wchar_t_20const_2c_20wchar_t__28wchar_t_20const__2c_20wchar_t_20const__2c_20wchar_t__29($0, $1, $2) {
  var $3 = 0;
  $1 = $1 - $0 | 0;
  $3 = $1 >> 2;
  if ($1) {
   memmove($2, $0, $1)
  }
  return ($3 << 2) + $2 | 0;
 }
 
 function std____2__messages_char___do_open_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__locale_20const__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_pointer_28_29_20const($1);
  return (1 ? -1 : 2147483647) | 0;
 }
 
 function std____2__messages_char___do_get_28long_2c_20int_2c_20int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0;
  $2 = global$0 - 32 | 0;
  $1 = $2;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($2 + 16 | 0);
  HEAP32[16874] = 0;
  $1 = __invoke_i1___22class_std____2__basic_ifstream_22_(1735, $3 | 0) | 0;
  $4 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    if (($4 | 0) == 1) {
     break label$3
    }
    $4 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_pointer_28_29_20const($5);
    $6 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_pointer_28_29_20const($5);
    $5 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($5);
    HEAP32[16874] = 0;
    __invoke___22class_std____2__shared_ptr_22____22class_std____2__shared_ptr_22___class_maxiOsc____22class_emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc____val_deleter_22__i32(1736, $2 + 8 | 0, $1 | 0, $4 | 0, $5 + $6 | 0) | 0;
    $1 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($1 | 0) == 1) {
     break label$3
    }
    $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_pointer_28_29_20const($3);
    HEAP32[16874] = 0;
    $4 = HEAP32[16874];
    HEAP32[16874] = 0;
    label$4 : {
     if (($4 | 0) != 1) {
      $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($0);
      HEAP32[16874] = 0;
      $4 = __invoke_i1___22class_std____2__basic_ifstream_22_(1735, $0 | 0) | 0;
      $5 = HEAP32[16874];
      HEAP32[16874] = 0;
      if (($5 | 0) == 1) {
       break label$4
      }
      $5 = strlen($1);
      HEAP32[16874] = 0;
      __invoke___22class_std____2__shared_ptr_22____22class_std____2__shared_ptr_22___class_maxiOsc____22class_emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc____val_deleter_22__i32(1738, $2 | 0, $4 | 0, $1 | 0, $1 + $5 | 0) | 0;
      $1 = HEAP32[16874];
      HEAP32[16874] = 0;
      if (($1 | 0) == 1) {
       break label$4
      }
      std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($3);
      $0 = $2 + 32 | 0;
      if ($0 >>> 0 < global$2 >>> 0) {
       __handle_stack_overflow()
      }
      global$0 = $0;
      return;
     }
     $1 = __cxa_find_matching_catch_2() | 0;
     getTempRet0() | 0;
     break label$2;
    }
    $1 = __cxa_find_matching_catch_2() | 0;
    getTempRet0() | 0;
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($0);
    break label$2;
   }
   $1 = __cxa_find_matching_catch_2() | 0;
   getTempRet0() | 0;
  }
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($3);
  __resumeException($1 | 0);
  abort();
 }
 
 function std____2__back_insert_iterator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20__20std____2____narrow_to_utf8_8ul___operator_28_29_std____2__back_insert_iterator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20__2c_20char__28std____2__back_insert_iterator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20__2c_20char_20const__2c_20char_20const__29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0;
  $0 = global$0 - 16 | 0;
  $4 = $0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  HEAP32[$0 + 8 >> 2] = $1;
  while (1) {
   if ($2 >>> 0 < $3 >>> 0) {
    std____2__back_insert_iterator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20___operator__28char_20const__29($0 + 8 | 0, $2);
    $2 = $2 + 1 | 0;
    continue;
   }
   break;
  };
  $1 = HEAP32[$0 + 8 >> 2];
  $0 = $0 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
  return $1 | 0;
 }
 
 function std____2__back_insert_iterator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20___operator__28char_20const__29($0, $1) {
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___push_back_28char_29(HEAP32[$0 >> 2], HEAP8[$1 | 0]);
 }
 
 function std____2__messages_wchar_t___do_get_28long_2c_20int_2c_20int_2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $7 = 0;
  $2 = global$0 - 32 | 0;
  $1 = $2;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($2 + 16 | 0);
  HEAP32[16874] = 0;
  $1 = std____2____narrow_to_utf8_32ul_____narrow_to_utf8_28_29($2 + 8 | 0);
  $4 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    label$4 : {
     if (($4 | 0) != 1) {
      HEAP32[16874] = 0;
      $4 = __invoke_i1___22class_std____2__basic_ifstream_22_(1735, $3 | 0) | 0;
      $6 = HEAP32[16874];
      HEAP32[16874] = 0;
      if (($6 | 0) == 1) {
       break label$4
      }
      $6 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_pointer_28_29_20const($5);
      $7 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_pointer_28_29_20const($5);
      $5 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($5);
      HEAP32[16874] = 0;
      __invoke___22class_std____2__shared_ptr_22____22class_std____2__shared_ptr_22___class_maxiOsc____22class_emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc____val_deleter_22__i32(1740, $1 | 0, $4 | 0, $6 | 0, ($5 << 2) + $7 | 0) | 0;
      $1 = HEAP32[16874];
      HEAP32[16874] = 0;
      if (($1 | 0) == 1) {
       break label$4
      }
      $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_pointer_28_29_20const($3);
      HEAP32[16874] = 0;
      $4 = HEAP32[16874];
      HEAP32[16874] = 0;
      if (($4 | 0) != 1) {
       break label$3
      }
      $1 = __cxa_find_matching_catch_2() | 0;
      getTempRet0() | 0;
      break label$2;
     }
     $1 = __cxa_find_matching_catch_2() | 0;
     getTempRet0() | 0;
     break label$2;
    }
    $1 = __cxa_find_matching_catch_2() | 0;
    getTempRet0() | 0;
    break label$2;
   }
   $0 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___basic_string_28_29($0);
   HEAP32[16874] = 0;
   $4 = std____2____widen_from_utf8_32ul_____widen_from_utf8_28_29($2 + 8 | 0);
   $5 = HEAP32[16874];
   HEAP32[16874] = 0;
   if (($5 | 0) != 1) {
    label$6 : {
     HEAP32[16874] = 0;
     $5 = __invoke_i1___22class_std____2__basic_ifstream_22_(1742, $0 | 0) | 0;
     $6 = HEAP32[16874];
     HEAP32[16874] = 0;
     if (($6 | 0) == 1) {
      break label$6
     }
     $6 = strlen($1);
     HEAP32[16874] = 0;
     __invoke___22class_std____2__shared_ptr_22____22class_std____2__shared_ptr_22___class_maxiOsc____22class_emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc____val_deleter_22__i32(1743, $4 | 0, $5 | 0, $1 | 0, $1 + $6 | 0) | 0;
     $1 = HEAP32[16874];
     HEAP32[16874] = 0;
     if (($1 | 0) == 1) {
      break label$6
     }
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($3);
     $0 = $2 + 32 | 0;
     if ($0 >>> 0 < global$2 >>> 0) {
      __handle_stack_overflow()
     }
     global$0 = $0;
     return;
    }
   }
   $1 = __cxa_find_matching_catch_2() | 0;
   getTempRet0() | 0;
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($0);
  }
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($3);
  __resumeException($1 | 0);
  abort();
 }
 
 function std____2____narrow_to_utf8_32ul_____narrow_to_utf8_28_29($0) {
  $0 = $0 | 0;
  std____2__codecvt_char32_t_2c_20char_2c_20__mbstate_t___codecvt_28unsigned_20long_29($0);
  HEAP32[$0 >> 2] = 41276;
  return $0 | 0;
 }
 
 function std____2__back_insert_iterator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20__20std____2____narrow_to_utf8_32ul___operator_28_29_std____2__back_insert_iterator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20__2c_20wchar_t__28std____2__back_insert_iterator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20__2c_20wchar_t_20const__2c_20wchar_t_20const__29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0;
  $4 = global$0 + -64 | 0;
  $5 = $4;
  if ($4 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $5;
  HEAP32[$4 + 56 >> 2] = $1;
  $6 = $4 + 48 | 0;
  $5 = 0;
  label$2 : {
   label$3 : while (1) {
    if (!(($5 | 0) == 2 | $2 >>> 0 >= $3 >>> 0)) {
     HEAP32[$4 + 8 >> 2] = $2;
     $5 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 12 >> 2]]($0, $4 + 48 | 0, $2, $3, $4 + 8 | 0, $4 + 16 | 0, $6, $4 + 12 | 0) | 0;
     if (($5 | 0) == 2) {
      break label$2
     }
     $1 = $4 + 16 | 0;
     if (HEAP32[$4 + 8 >> 2] == ($2 | 0)) {
      break label$2
     }
     while (1) {
      if ($1 >>> 0 >= HEAPU32[$4 + 12 >> 2]) {
       $2 = HEAP32[$4 + 8 >> 2];
       continue label$3;
      }
      std____2__back_insert_iterator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20___operator__28char_20const__29($4 + 56 | 0, $1);
      $1 = $1 + 1 | 0;
      continue;
     };
    }
    break;
   };
   $0 = HEAP32[$4 + 56 >> 2];
   $1 = $4 - -64 | 0;
   if ($1 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $1;
   return $0 | 0;
  }
  std____2____throw_runtime_error_28char_20const__29(40660);
  abort();
 }
 
 function std____2____widen_from_utf8_32ul_____widen_from_utf8_28_29($0) {
  $0 = $0 | 0;
  std____2__codecvt_char32_t_2c_20char_2c_20__mbstate_t___codecvt_28unsigned_20long_29($0);
  HEAP32[$0 >> 2] = 41372;
  return $0 | 0;
 }
 
 function std____2__back_insert_iterator_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20__20std____2____widen_from_utf8_32ul___operator_28_29_std____2__back_insert_iterator_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20__20__28std____2__back_insert_iterator_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20__2c_20char_20const__2c_20char_20const__29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0;
  $4 = global$0 - 160 | 0;
  $5 = $4;
  if ($4 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $5;
  HEAP32[$4 + 152 >> 2] = $1;
  $6 = $4 + 144 | 0;
  $5 = 0;
  label$2 : {
   label$3 : while (1) {
    if (!(($5 | 0) == 2 | $2 >>> 0 >= $3 >>> 0)) {
     HEAP32[$4 + 8 >> 2] = $2;
     $5 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $4 + 144 | 0, $2, ($3 - $2 | 0) > 32 ? $2 + 32 | 0 : $3, $4 + 8 | 0, $4 + 16 | 0, $6, $4 + 12 | 0) | 0;
     if (($5 | 0) == 2) {
      break label$2
     }
     $1 = $4 + 16 | 0;
     if (HEAP32[$4 + 8 >> 2] == ($2 | 0)) {
      break label$2
     }
     while (1) {
      if ($1 >>> 0 >= HEAPU32[$4 + 12 >> 2]) {
       $2 = HEAP32[$4 + 8 >> 2];
       continue label$3;
      }
      HEAP32[$4 + 4 >> 2] = HEAP32[$1 >> 2];
      std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___push_back_28wchar_t_29(HEAP32[$4 + 152 >> 2], HEAP32[$4 + 4 >> 2]);
      $1 = $1 + 4 | 0;
      continue;
     };
    }
    break;
   };
   $0 = HEAP32[$4 + 152 >> 2];
   $1 = $4 + 160 | 0;
   if ($1 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $1;
   return $0 | 0;
  }
  std____2____throw_runtime_error_28char_20const__29(40660);
  abort();
 }
 
 function std____2__codecvt_char32_t_2c_20char_2c_20__mbstate_t___codecvt_28unsigned_20long_29($0) {
  std____2__locale__facet__facet_28unsigned_20long_29($0);
  HEAP32[$0 >> 2] = 41160;
 }
 
 function std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t____codecvt_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0;
  HEAP32[$0 >> 2] = 40216;
  $1 = HEAP32[$0 + 8 >> 2];
  HEAP32[16874] = 0;
  $2 = __invoke__struct___locale_struct_(1670) | 0;
  $3 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$1 : {
   if (($3 | 0) != 1) {
    if (($1 | 0) == ($2 | 0)) {
     break label$1
    }
    $1 = HEAP32[$0 + 8 >> 2];
    HEAP32[16874] = 0;
    freelocale($1);
    $1 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($1 | 0) != 1) {
     break label$1
    }
   }
   $0 = __cxa_find_matching_catch_3(0) | 0;
   getTempRet0() | 0;
   __clang_call_terminate($0);
   abort();
  }
  return $0 | 0;
 }
 
 function std____2__locale____imp____imp_28unsigned_20long_29() {
  var $0 = 0, $1 = 0, $2 = 0, $3 = 0;
  std____2__locale__facet__facet_28unsigned_20long_29(71392);
  HEAP32[17848] = 40144;
  HEAP32[16874] = 0;
  $1 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1745, 71408, 28) | 0;
  $0 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      if (($0 | 0) != 1) {
       HEAP32[16874] = 0;
       $2 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1746, 71568, 40133) | 0;
       $0 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($0 | 0) == 1) {
        break label$4
       }
       $0 = $1;
       $3 = std____2__vector_int_2c_20std____2__allocator_int__20___size_28_29_20const($0);
       std____2____vector_base_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20___clear_28_29($0);
       std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20_____annotate_shrink_28unsigned_20long_29_20const($0, $3);
       std____2__locale__facet__facet_28unsigned_20long_29(71072);
       HEAP32[17768] = 41760;
       HEAP32[16874] = 0;
       __invoke_void___22class_std____2__vector_13_22__i32(1747, 71392, 71072);
       $0 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($0 | 0) == 1) {
        break label$3
       }
       std____2__locale__facet__facet_28unsigned_20long_29(71080);
       HEAP32[17770] = 41792;
       HEAP32[16874] = 0;
       __invoke_void___22class_std____2__vector_13_22__i32(1748, 71392, 71080);
       $0 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($0 | 0) == 1) {
        break label$3
       }
       std____2__ctype_char___ctype_28unsigned_20short_20const__2c_20bool_2c_20unsigned_20long_29();
       HEAP32[16874] = 0;
       __invoke_void___22class_std____2__vector_13_22__i32(1749, 71392, 71088);
       $0 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($0 | 0) == 1) {
        break label$3
       }
       HEAP32[16874] = 0;
       std____2__ctype_wchar_t___ctype_28unsigned_20long_29();
       $0 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($0 | 0) == 1) {
        break label$3
       }
       HEAP32[16874] = 0;
       __invoke_void___22class_std____2__vector_13_22__i32(1751, 71392, 71104);
       $0 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($0 | 0) == 1) {
        break label$3
       }
       HEAP32[16874] = 0;
       std____2__codecvt_char_2c_20char_2c_20__mbstate_t___codecvt_28unsigned_20long_29();
       $0 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($0 | 0) == 1) {
        break label$3
       }
       HEAP32[16874] = 0;
       __invoke_void___22class_std____2__vector_13_22__i32(1753, 71392, 71112);
       $0 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($0 | 0) == 1) {
        break label$3
       }
       HEAP32[16874] = 0;
       __invoke_void(1754);
       $0 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($0 | 0) == 1) {
        break label$3
       }
       HEAP32[16874] = 0;
       __invoke_void___22class_std____2__vector_13_22__i32(1755, 71392, 71120);
       $0 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($0 | 0) == 1) {
        break label$3
       }
       HEAP32[16874] = 0;
       std____2__codecvt_char16_t_2c_20char_2c_20__mbstate_t___codecvt_28unsigned_20long_29();
       $0 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($0 | 0) == 1) {
        break label$3
       }
       HEAP32[16874] = 0;
       __invoke_void___22class_std____2__vector_13_22__i32(1757, 71392, 71136);
       $0 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($0 | 0) == 1) {
        break label$3
       }
       HEAP32[16874] = 0;
       std____2__codecvt_char32_t_2c_20char_2c_20__mbstate_t___codecvt_28unsigned_20long_29(71144);
       $0 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($0 | 0) == 1) {
        break label$3
       }
       HEAP32[16874] = 0;
       __invoke_void___22class_std____2__vector_13_22__i32(1759, 71392, 71144);
       $0 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($0 | 0) == 1) {
        break label$3
       }
       std____2__locale__facet__facet_28unsigned_20long_29(71152);
       HEAP16[35580] = 11310;
       HEAP32[17788] = 40264;
       std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29(71164);
       HEAP32[16874] = 0;
       __invoke_void___22class_std____2__vector_13_22__i32(1760, 71392, 71152);
       $0 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($0 | 0) == 1) {
        break label$3
       }
       std____2__numpunct_wchar_t___numpunct_28unsigned_20long_29();
       HEAP32[16874] = 0;
       __invoke_void___22class_std____2__vector_13_22__i32(1761, 71392, 71184);
       $0 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($0 | 0) == 1) {
        break label$3
       }
       std____2__locale__facet__facet_28unsigned_20long_29(71216);
       HEAP32[17804] = 41824;
       HEAP32[16874] = 0;
       __invoke_void___22class_std____2__vector_13_22__i32(1762, 71392, 71216);
       $0 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($0 | 0) == 1) {
        break label$3
       }
       std____2__locale__facet__facet_28unsigned_20long_29(71224);
       HEAP32[17806] = 42068;
       HEAP32[16874] = 0;
       __invoke_void___22class_std____2__vector_13_22__i32(1763, 71392, 71224);
       $0 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($0 | 0) == 1) {
        break label$3
       }
       std____2__locale__facet__facet_28unsigned_20long_29(71232);
       HEAP32[17808] = 42280;
       HEAP32[16874] = 0;
       __invoke_void___22class_std____2__vector_13_22__i32(1764, 71392, 71232);
       $0 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($0 | 0) == 1) {
        break label$3
       }
       std____2__locale__facet__facet_28unsigned_20long_29(71240);
       HEAP32[17810] = 42512;
       HEAP32[16874] = 0;
       __invoke_void___22class_std____2__vector_13_22__i32(1765, 71392, 71240);
       $0 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($0 | 0) == 1) {
        break label$3
       }
       HEAP32[16874] = 0;
       std____2__moneypunct_char_2c_20false___moneypunct_28unsigned_20long_29();
       $0 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($0 | 0) == 1) {
        break label$3
       }
       HEAP32[16874] = 0;
       __invoke_void___22class_std____2__vector_13_22__i32(1767, 71392, 71248);
       $0 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($0 | 0) == 1) {
        break label$3
       }
       HEAP32[16874] = 0;
       std____2__moneypunct_char_2c_20true___moneypunct_28unsigned_20long_29();
       $0 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($0 | 0) == 1) {
        break label$3
       }
       HEAP32[16874] = 0;
       __invoke_void___22class_std____2__vector_13_22__i32(1769, 71392, 71256);
       $0 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($0 | 0) == 1) {
        break label$3
       }
       HEAP32[16874] = 0;
       std____2__moneypunct_wchar_t_2c_20false___moneypunct_28unsigned_20long_29();
       $0 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($0 | 0) == 1) {
        break label$3
       }
       HEAP32[16874] = 0;
       __invoke_void___22class_std____2__vector_13_22__i32(1771, 71392, 71264);
       $0 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($0 | 0) == 1) {
        break label$3
       }
       HEAP32[16874] = 0;
       std____2__moneypunct_wchar_t_2c_20true___moneypunct_28unsigned_20long_29();
       $0 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($0 | 0) == 1) {
        break label$3
       }
       HEAP32[16874] = 0;
       __invoke_void___22class_std____2__vector_13_22__i32(1773, 71392, 71272);
       $0 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($0 | 0) == 1) {
        break label$3
       }
       HEAP32[16874] = 0;
       std____2__money_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___money_get_28unsigned_20long_29();
       $0 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($0 | 0) == 1) {
        break label$3
       }
       HEAP32[16874] = 0;
       __invoke_void___22class_std____2__vector_13_22__i32(1775, 71392, 71280);
       $0 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($0 | 0) == 1) {
        break label$3
       }
       HEAP32[16874] = 0;
       std____2__money_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___money_get_28unsigned_20long_29();
       $0 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($0 | 0) == 1) {
        break label$3
       }
       HEAP32[16874] = 0;
       __invoke_void___22class_std____2__vector_13_22__i32(1777, 71392, 71288);
       $0 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($0 | 0) == 1) {
        break label$3
       }
       HEAP32[16874] = 0;
       std____2__money_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___money_put_28unsigned_20long_29();
       $0 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($0 | 0) == 1) {
        break label$3
       }
       HEAP32[16874] = 0;
       __invoke_void___22class_std____2__vector_13_22__i32(1779, 71392, 71296);
       $0 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($0 | 0) == 1) {
        break label$3
       }
       HEAP32[16874] = 0;
       std____2__money_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___money_put_28unsigned_20long_29();
       $0 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($0 | 0) == 1) {
        break label$3
       }
       HEAP32[16874] = 0;
       __invoke_void___22class_std____2__vector_13_22__i32(1781, 71392, 71304);
       $0 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($0 | 0) == 1) {
        break label$3
       }
       std____2__locale__facet__facet_28unsigned_20long_29(71312);
       HEAP32[17830] = 46036;
       HEAP32[17828] = 42712;
       HEAP32[17830] = 42760;
       HEAP32[16874] = 0;
       __invoke_void___22class_std____2__vector_13_22__i32(1782, 71392, 71312);
       $0 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($0 | 0) == 1) {
        break label$3
       }
       std____2__locale__facet__facet_28unsigned_20long_29(71328);
       HEAP32[17834] = 46072;
       HEAP32[17832] = 42976;
       HEAP32[17834] = 43024;
       HEAP32[16874] = 0;
       __invoke_void___22class_std____2__vector_13_22__i32(1783, 71392, 71328);
       $0 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($0 | 0) == 1) {
        break label$3
       }
       HEAP32[16874] = 0;
       __invoke_void(1784);
       $0 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($0 | 0) == 1) {
        break label$3
       }
       HEAP32[16874] = 0;
       __invoke_void___22class_std____2__vector_13_22__i32(1785, 71392, 71344);
       $0 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($0 | 0) == 1) {
        break label$3
       }
       HEAP32[16874] = 0;
       __invoke_void(1786);
       $0 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($0 | 0) == 1) {
        break label$3
       }
       HEAP32[16874] = 0;
       __invoke_void___22class_std____2__vector_13_22__i32(1787, 71392, 71360);
       $0 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($0 | 0) == 1) {
        break label$3
       }
       HEAP32[16874] = 0;
       std____2__messages_char___messages_28unsigned_20long_29();
       $0 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($0 | 0) == 1) {
        break label$3
       }
       HEAP32[16874] = 0;
       __invoke_void___22class_std____2__vector_13_22__i32(1789, 71392, 71376);
       $0 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($0 | 0) == 1) {
        break label$3
       }
       HEAP32[16874] = 0;
       std____2__messages_wchar_t___messages_28unsigned_20long_29();
       $0 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($0 | 0) == 1) {
        break label$3
       }
       HEAP32[16874] = 0;
       __invoke_void___22class_std____2__vector_13_22__i32(1791, 71392, 71384);
       $0 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($0 | 0) == 1) {
        break label$3
       }
       return;
      }
      $0 = __cxa_find_matching_catch_2() | 0;
      getTempRet0() | 0;
      break label$1;
     }
     $0 = __cxa_find_matching_catch_2() | 0;
     getTempRet0() | 0;
     break label$2;
    }
    $0 = __cxa_find_matching_catch_2() | 0;
    getTempRet0() | 0;
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($2);
   }
   std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20____vector_28_29($1);
  }
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2__locale__facet__facet_28unsigned_20long_29($0) {
  std____2____shared_count____shared_count_28long_29($0);
  HEAP32[$0 >> 2] = 40692;
  return $0;
 }
 
 function std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20___vector_28unsigned_20long_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0;
  $2 = std____2____vector_base_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20_____vector_base_28_29($0);
  label$1 : {
   if (!$1) {
    break label$1
   }
   HEAP32[16874] = 0;
   __invoke_void___22class_std____2__vector_13_22__i32(1792, $0 | 0, $1 | 0);
   $3 = HEAP32[16874];
   HEAP32[16874] = 0;
   if (($3 | 0) != 1) {
    HEAP32[16874] = 0;
    __invoke_void___22class_std____2__vector_13_22__i32(1793, $0 | 0, $1 | 0);
    $1 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($1 | 0) != 1) {
     break label$1
    }
   }
   $0 = __cxa_find_matching_catch_2() | 0;
   getTempRet0() | 0;
   std____2____vector_base_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20______vector_base_28_29($2);
   __resumeException($0 | 0);
   abort();
  }
  return $0 | 0;
 }
 
 function void_20std____2__locale____imp__install_std____2__collate_char__20__28std____2__collate_char___29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($0, $1, std____2__locale__id____get_28_29(69612));
 }
 
 function void_20std____2__locale____imp__install_std____2__collate_wchar_t__20__28std____2__collate_wchar_t___29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($0, $1, std____2__locale__id____get_28_29(69620));
 }
 
 function void_20std____2__locale____imp__install_std____2__ctype_char__20__28std____2__ctype_char___29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($0, $1, std____2__locale__id____get_28_29(69816));
 }
 
 function std____2__ctype_wchar_t___20std____2___28anonymous_20namespace_29__make_std____2__ctype_wchar_t__2c_20unsigned_20int__28unsigned_20int_29() {
  std____2__ctype_wchar_t___ctype_28unsigned_20long_29();
 }
 
 function void_20std____2__locale____imp__install_std____2__ctype_wchar_t__20__28std____2__ctype_wchar_t___29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($0, $1, std____2__locale__id____get_28_29(69808));
 }
 
 function std____2__codecvt_char_2c_20char_2c_20__mbstate_t___20std____2___28anonymous_20namespace_29__make_std____2__codecvt_char_2c_20char_2c_20__mbstate_t__2c_20unsigned_20int__28unsigned_20int_29() {
  std____2__codecvt_char_2c_20char_2c_20__mbstate_t___codecvt_28unsigned_20long_29();
 }
 
 function void_20std____2__locale____imp__install_std____2__codecvt_char_2c_20char_2c_20__mbstate_t__20__28std____2__codecvt_char_2c_20char_2c_20__mbstate_t___29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($0, $1, std____2__locale__id____get_28_29(69824));
 }
 
 function std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t___20std____2___28anonymous_20namespace_29__make_std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t__2c_20unsigned_20int__28unsigned_20int_29() {
  std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t___codecvt_28unsigned_20long_29();
 }
 
 function void_20std____2__locale____imp__install_std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t__20__28std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t___29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($0, $1, std____2__locale__id____get_28_29(69832));
 }
 
 function std____2__codecvt_char16_t_2c_20char_2c_20__mbstate_t___20std____2___28anonymous_20namespace_29__make_std____2__codecvt_char16_t_2c_20char_2c_20__mbstate_t__2c_20unsigned_20int__28unsigned_20int_29() {
  std____2__codecvt_char16_t_2c_20char_2c_20__mbstate_t___codecvt_28unsigned_20long_29();
 }
 
 function void_20std____2__locale____imp__install_std____2__codecvt_char16_t_2c_20char_2c_20__mbstate_t__20__28std____2__codecvt_char16_t_2c_20char_2c_20__mbstate_t___29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($0, $1, std____2__locale__id____get_28_29(69840));
 }
 
 function std____2__codecvt_char32_t_2c_20char_2c_20__mbstate_t___20std____2___28anonymous_20namespace_29__make_std____2__codecvt_char32_t_2c_20char_2c_20__mbstate_t__2c_20unsigned_20int__28unsigned_20int_29() {
  std____2__codecvt_char32_t_2c_20char_2c_20__mbstate_t___codecvt_28unsigned_20long_29(71144);
 }
 
 function void_20std____2__locale____imp__install_std____2__codecvt_char32_t_2c_20char_2c_20__mbstate_t__20__28std____2__codecvt_char32_t_2c_20char_2c_20__mbstate_t___29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($0, $1, std____2__locale__id____get_28_29(69848));
 }
 
 function void_20std____2__locale____imp__install_std____2__numpunct_char__20__28std____2__numpunct_char___29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($0, $1, std____2__locale__id____get_28_29(69856));
 }
 
 function void_20std____2__locale____imp__install_std____2__numpunct_wchar_t__20__28std____2__numpunct_wchar_t___29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($0, $1, std____2__locale__id____get_28_29(69864));
 }
 
 function void_20std____2__locale____imp__install_std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__20__28std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($0, $1, std____2__locale__id____get_28_29(69628));
 }
 
 function void_20std____2__locale____imp__install_std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20__20__28std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($0, $1, std____2__locale__id____get_28_29(69636));
 }
 
 function void_20std____2__locale____imp__install_std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__20__28std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($0, $1, std____2__locale__id____get_28_29(69644));
 }
 
 function void_20std____2__locale____imp__install_std____2__num_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20__20__28std____2__num_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($0, $1, std____2__locale__id____get_28_29(69652));
 }
 
 function std____2__moneypunct_char_2c_20false___20std____2___28anonymous_20namespace_29__make_std____2__moneypunct_char_2c_20false__2c_20unsigned_20int__28unsigned_20int_29() {
  std____2__moneypunct_char_2c_20false___moneypunct_28unsigned_20long_29();
 }
 
 function void_20std____2__locale____imp__install_std____2__moneypunct_char_2c_20false__20__28std____2__moneypunct_char_2c_20false___29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($0, $1, std____2__locale__id____get_28_29(69692));
 }
 
 function std____2__moneypunct_char_2c_20true___20std____2___28anonymous_20namespace_29__make_std____2__moneypunct_char_2c_20true__2c_20unsigned_20int__28unsigned_20int_29() {
  std____2__moneypunct_char_2c_20true___moneypunct_28unsigned_20long_29();
 }
 
 function void_20std____2__locale____imp__install_std____2__moneypunct_char_2c_20true__20__28std____2__moneypunct_char_2c_20true___29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($0, $1, std____2__locale__id____get_28_29(69700));
 }
 
 function std____2__moneypunct_wchar_t_2c_20false___20std____2___28anonymous_20namespace_29__make_std____2__moneypunct_wchar_t_2c_20false__2c_20unsigned_20int__28unsigned_20int_29() {
  std____2__moneypunct_wchar_t_2c_20false___moneypunct_28unsigned_20long_29();
 }
 
 function void_20std____2__locale____imp__install_std____2__moneypunct_wchar_t_2c_20false__20__28std____2__moneypunct_wchar_t_2c_20false___29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($0, $1, std____2__locale__id____get_28_29(69708));
 }
 
 function std____2__moneypunct_wchar_t_2c_20true___20std____2___28anonymous_20namespace_29__make_std____2__moneypunct_wchar_t_2c_20true__2c_20unsigned_20int__28unsigned_20int_29() {
  std____2__moneypunct_wchar_t_2c_20true___moneypunct_28unsigned_20long_29();
 }
 
 function void_20std____2__locale____imp__install_std____2__moneypunct_wchar_t_2c_20true__20__28std____2__moneypunct_wchar_t_2c_20true___29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($0, $1, std____2__locale__id____get_28_29(69716));
 }
 
 function std____2__money_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___20std____2___28anonymous_20namespace_29__make_std____2__money_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__2c_20unsigned_20int__28unsigned_20int_29() {
  std____2__money_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___money_get_28unsigned_20long_29();
 }
 
 function void_20std____2__locale____imp__install_std____2__money_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__20__28std____2__money_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($0, $1, std____2__locale__id____get_28_29(69724));
 }
 
 function std____2__money_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___20std____2___28anonymous_20namespace_29__make_std____2__money_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20__2c_20unsigned_20int__28unsigned_20int_29() {
  std____2__money_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___money_get_28unsigned_20long_29();
 }
 
 function void_20std____2__locale____imp__install_std____2__money_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20__20__28std____2__money_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($0, $1, std____2__locale__id____get_28_29(69732));
 }
 
 function std____2__money_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___20std____2___28anonymous_20namespace_29__make_std____2__money_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__2c_20unsigned_20int__28unsigned_20int_29() {
  std____2__money_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___money_put_28unsigned_20long_29();
 }
 
 function void_20std____2__locale____imp__install_std____2__money_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__20__28std____2__money_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($0, $1, std____2__locale__id____get_28_29(69740));
 }
 
 function std____2__money_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___20std____2___28anonymous_20namespace_29__make_std____2__money_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20__2c_20unsigned_20int__28unsigned_20int_29() {
  std____2__money_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___money_put_28unsigned_20long_29();
 }
 
 function void_20std____2__locale____imp__install_std____2__money_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20__20__28std____2__money_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($0, $1, std____2__locale__id____get_28_29(69748));
 }
 
 function void_20std____2__locale____imp__install_std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__20__28std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($0, $1, std____2__locale__id____get_28_29(69660));
 }
 
 function void_20std____2__locale____imp__install_std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20__20__28std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($0, $1, std____2__locale__id____get_28_29(69668));
 }
 
 function std____2__time_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___20std____2___28anonymous_20namespace_29__make_std____2__time_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__2c_20unsigned_20int__28unsigned_20int_29() {
  std____2__time_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___time_put_28unsigned_20long_29();
 }
 
 function void_20std____2__locale____imp__install_std____2__time_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__20__28std____2__time_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($0, $1, std____2__locale__id____get_28_29(69676));
 }
 
 function std____2__time_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___20std____2___28anonymous_20namespace_29__make_std____2__time_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20__2c_20unsigned_20int__28unsigned_20int_29() {
  std____2__time_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___time_put_28unsigned_20long_29();
 }
 
 function void_20std____2__locale____imp__install_std____2__time_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20__20__28std____2__time_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($0, $1, std____2__locale__id____get_28_29(69684));
 }
 
 function std____2__messages_char___20std____2___28anonymous_20namespace_29__make_std____2__messages_char__2c_20unsigned_20int__28unsigned_20int_29() {
  std____2__messages_char___messages_28unsigned_20long_29();
 }
 
 function void_20std____2__locale____imp__install_std____2__messages_char__20__28std____2__messages_char___29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($0, $1, std____2__locale__id____get_28_29(69756));
 }
 
 function std____2__messages_wchar_t___20std____2___28anonymous_20namespace_29__make_std____2__messages_wchar_t__2c_20unsigned_20int__28unsigned_20int_29() {
  std____2__messages_wchar_t___messages_28unsigned_20long_29();
 }
 
 function void_20std____2__locale____imp__install_std____2__messages_wchar_t__20__28std____2__messages_wchar_t___29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($0, $1, std____2__locale__id____get_28_29(69764));
 }
 
 function std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20____vector_28_29($0) {
  std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20_____annotate_delete_28_29_20const($0);
  std____2____vector_base_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20______vector_base_28_29($0);
 }
 
 function std____2____vector_base_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20_____vector_base_28_29($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[16874] = 0;
  HEAP32[$1 + 12 >> 2] = 0;
  std____2____compressed_pair_std____2__locale__facet___2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20_____compressed_pair_std__nullptr_t_2c_20true__28std__nullptr_t___29($0 + 16 | 0, $1 + 12 | 0);
  $2 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($2 | 0) != 1) {
   $1 = $1 + 16 | 0;
   if ($1 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $1;
   return $0;
  }
  $0 = __cxa_find_matching_catch_3(0) | 0;
  getTempRet0() | 0;
  __clang_call_terminate($0);
  abort();
 }
 
 function std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20_____vallocate_28unsigned_20long_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  if (std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20___max_size_28_29_20const($0) >>> 0 < $1 >>> 0) {
   std____2____vector_base_common_true_____throw_length_error_28_29_20const();
   abort();
  }
  $2 = std____2__allocator_traits_std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20___allocate_28std____2____sso_allocator_std____2__locale__facet__2c_2028ul___2c_20unsigned_20long_29(std____2____vector_base_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20_____alloc_28_29($0), $1);
  HEAP32[$0 >> 2] = $2;
  HEAP32[$0 + 4 >> 2] = $2;
  HEAP32[std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___get_28_29($0) >> 2] = ($1 << 2) + $2;
  std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20_____annotate_new_28unsigned_20long_29_20const($0, 0);
 }
 
 function std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20_____construct_at_end_28unsigned_20long_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0;
  $2 = global$0 - 16 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  std____2____vector_base_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20_____alloc_28_29($0);
  while (1) {
   void_20std____2__allocator_traits_std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20_____construct_std____2__locale__facet___28std____2__integral_constant_bool_2c_20false__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul___2c_20std____2__locale__facet___29(HEAP32[$0 + 4 >> 2]);
   HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + 4;
   $1 = $1 + -1 | 0;
   if ($1) {
    continue
   }
   break;
  };
  $0 = $2 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function std____2____vector_base_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20______vector_base_28_29($0) {
  if (HEAP32[$0 >> 2]) {
   std____2____vector_base_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20___clear_28_29($0);
   std____2__allocator_traits_std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20___deallocate_28std____2____sso_allocator_std____2__locale__facet__2c_2028ul___2c_20std____2__locale__facet___2c_20unsigned_20long_29(std____2____vector_base_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20_____alloc_28_29($0), HEAP32[$0 >> 2], std____2____vector_base_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20___capacity_28_29_20const($0));
  }
 }
 
 function std____2____vector_base_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20___clear_28_29($0) {
  std____2____vector_base_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20_____destruct_at_end_28std____2__locale__facet___29($0, HEAP32[$0 >> 2]);
 }
 
 function std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20_____annotate_shrink_28unsigned_20long_29_20const($0, $1) {
  std____2____vector_base_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20___capacity_28_29_20const($0);
  std____2__vector_int_2c_20std____2__allocator_int__20___size_28_29_20const($0);
 }
 
 function std____2__locale__id____get_28_29($0) {
  var $1 = 0, $2 = 0, $3 = 0;
  $1 = global$0 - 32 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  HEAP32[$1 + 12 >> 2] = 0;
  HEAP32[$1 + 8 >> 2] = 1795;
  $2 = HEAP32[$1 + 12 >> 2];
  HEAP32[$1 >> 2] = HEAP32[$1 + 8 >> 2];
  HEAP32[$1 + 4 >> 2] = $2;
  $3 = HEAP32[$1 + 4 >> 2];
  $2 = $1 + 16 | 0;
  HEAP32[$2 + 4 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$2 + 8 >> 2] = $3;
  HEAP32[$2 >> 2] = $0;
  void_20std____2__call_once_std____2___28anonymous_20namespace_29____fake_bind__28std____2__once_flag__2c_20std____2___28anonymous_20namespace_29____fake_bind___29($0, $2);
  $0 = HEAP32[$0 + 4 >> 2];
  $1 = $1 + 32 | 0;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  return $0 + -1 | 0;
 }
 
 function std____2__locale____imp__install_28std____2__locale__facet__2c_20long_29($0, $1, $2) {
  var $3 = 0, $4 = 0;
  $4 = global$0 - 16 | 0;
  $3 = $4;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  std____2____shared_count____add_shared_28_29($1);
  $1 = std____2__unique_ptr_std____2__locale__facet_2c_20std____2___28anonymous_20namespace_29__release___unique_ptr_true_2c_20void__28std____2__locale__facet__29($4 + 8 | 0, $1);
  label$2 : {
   $0 = $0 + 16 | 0;
   if (std____2__vector_int_2c_20std____2__allocator_int__20___size_28_29_20const($0) >>> 0 <= $2 >>> 0) {
    HEAP32[16874] = 0;
    __invoke_void___22class_std____2__vector_13_22__i32(1796, $0 | 0, $2 + 1 | 0);
    $3 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($3 | 0) == 1) {
     break label$2
    }
   }
   if (HEAP32[std____2__vector_int_2c_20std____2__allocator_int__20___operator_5b_5d_28unsigned_20long_29_20const($0, $2) >> 2]) {
    std____2____shared_count____release_shared_28_29(HEAP32[std____2__vector_int_2c_20std____2__allocator_int__20___operator_5b_5d_28unsigned_20long_29_20const($0, $2) >> 2])
   }
   $3 = std____2__unique_ptr__IO_FILE_2c_20int_20_28__29_28_IO_FILE__29___release_28_29($1);
   HEAP32[std____2__vector_int_2c_20std____2__allocator_int__20___operator_5b_5d_28unsigned_20long_29_20const($0, $2) >> 2] = $3;
   std____2__unique_ptr_std____2__locale__facet_2c_20std____2___28anonymous_20namespace_29__release___reset_28std____2__locale__facet__29($1);
   $0 = $4 + 16 | 0;
   if ($0 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $0;
   return;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__unique_ptr_std____2__locale__facet_2c_20std____2___28anonymous_20namespace_29__release___reset_28std____2__locale__facet__29($1);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2__ctype_char___ctype_28unsigned_20short_20const__2c_20bool_2c_20unsigned_20long_29() {
  std____2__locale__facet__facet_28unsigned_20long_29(71088);
  HEAP8[71100] = 0;
  HEAP32[17774] = 0;
  HEAP32[17772] = 40164;
  HEAP32[17774] = std____2__ctype_char___classic_table_28_29();
 }
 
 function std____2__ctype_wchar_t___ctype_28unsigned_20long_29() {
  std____2__locale__facet__facet_28unsigned_20long_29(71104);
  HEAP32[17776] = 40748;
 }
 
 function std____2__codecvt_char_2c_20char_2c_20__mbstate_t___codecvt_28unsigned_20long_29() {
  std____2__locale__facet__facet_28unsigned_20long_29(71112);
  HEAP32[17778] = 40896;
 }
 
 function std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t___codecvt_28unsigned_20long_29() {
  var $0 = 0, $1 = 0;
  std____2__locale__facet__facet_28unsigned_20long_29(71120);
  HEAP32[17780] = 40216;
  HEAP32[16874] = 0;
  $0 = __invoke__struct___locale_struct_(1670) | 0;
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($1 | 0) != 1) {
   HEAP32[17782] = $0;
   return;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2__codecvt_char16_t_2c_20char_2c_20__mbstate_t___codecvt_28unsigned_20long_29() {
  std____2__locale__facet__facet_28unsigned_20long_29(71136);
  HEAP32[17784] = 41044;
 }
 
 function std____2__numpunct_wchar_t___numpunct_28unsigned_20long_29() {
  std____2__locale__facet__facet_28unsigned_20long_29(71184);
  HEAP32[17798] = 46;
  HEAP32[17799] = 44;
  HEAP32[17796] = 40304;
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29(71200);
 }
 
 function std____2__moneypunct_char_2c_20false___moneypunct_28unsigned_20long_29() {
  std____2__locale__facet__facet_28unsigned_20long_29(71248);
  HEAP32[17812] = 43496;
 }
 
 function std____2__moneypunct_char_2c_20true___moneypunct_28unsigned_20long_29() {
  std____2__locale__facet__facet_28unsigned_20long_29(71256);
  HEAP32[17814] = 43644;
 }
 
 function std____2__moneypunct_wchar_t_2c_20false___moneypunct_28unsigned_20long_29() {
  std____2__locale__facet__facet_28unsigned_20long_29(71264);
  HEAP32[17816] = 43760;
 }
 
 function std____2__moneypunct_wchar_t_2c_20true___moneypunct_28unsigned_20long_29() {
  std____2__locale__facet__facet_28unsigned_20long_29(71272);
  HEAP32[17818] = 43876;
 }
 
 function std____2__money_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___money_get_28unsigned_20long_29() {
  std____2__locale__facet__facet_28unsigned_20long_29(71280);
  HEAP32[17820] = 43992;
 }
 
 function std____2__money_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___money_get_28unsigned_20long_29() {
  std____2__locale__facet__facet_28unsigned_20long_29(71288);
  HEAP32[17822] = 44156;
 }
 
 function std____2__money_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___money_put_28unsigned_20long_29() {
  std____2__locale__facet__facet_28unsigned_20long_29(71296);
  HEAP32[17824] = 44320;
 }
 
 function std____2__money_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___money_put_28unsigned_20long_29() {
  std____2__locale__facet__facet_28unsigned_20long_29(71304);
  HEAP32[17826] = 44484;
 }
 
 function std____2__time_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___time_put_28unsigned_20long_29() {
  var $0 = 0;
  std____2__locale__facet__facet_28unsigned_20long_29(71344);
  HEAP32[16874] = 0;
  __invoke_i1___22class_std____2__basic_ifstream_22_(1797, 71352) | 0;
  $0 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($0 | 0) != 1) {
   HEAP32[17836] = 43212;
   return;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2__time_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___time_put_28unsigned_20long_29() {
  var $0 = 0;
  std____2__locale__facet__facet_28unsigned_20long_29(71360);
  HEAP32[16874] = 0;
  __invoke_i1___22class_std____2__basic_ifstream_22_(1797, 71368) | 0;
  $0 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($0 | 0) != 1) {
   HEAP32[17840] = 43368;
   return;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2__messages_char___messages_28unsigned_20long_29() {
  std____2__locale__facet__facet_28unsigned_20long_29(71376);
  HEAP32[17844] = 44648;
 }
 
 function std____2__messages_wchar_t___messages_28unsigned_20long_29() {
  std____2__locale__facet__facet_28unsigned_20long_29(71384);
  HEAP32[17846] = 44768;
 }
 
 function std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20_____annotate_delete_28_29_20const($0) {
  std____2____vector_base_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20___capacity_28_29_20const($0);
  std____2__vector_int_2c_20std____2__allocator_int__20___size_28_29_20const($0);
  std____2____vector_base_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20___capacity_28_29_20const($0);
 }
 
 function std____2__locale__classic_28_29() {
  var $0 = 0;
  label$1 : {
   label$2 : {
    if (HEAP8[69788] & 1) {
     break label$2
    }
    if (!__cxa_guard_acquire(69788)) {
     break label$2
    }
    HEAP32[16874] = 0;
    __invoke__struct___locale_struct_(1798) | 0;
    $0 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($0 | 0) == 1) {
     break label$1
    }
    HEAP32[17446] = 69780;
    __cxa_guard_release(69788);
   }
   return HEAP32[17446];
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  __cxa_guard_abort(69788);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____shared_count____add_shared_28_29($0) {
  $0 = $0 + 4 | 0;
  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
 }
 
 function std____2__locale____imp__make_classic_28_29() {
  std____2__locale____imp____imp_28unsigned_20long_29();
  HEAP32[17445] = 71392;
  return 69780;
 }
 
 function std____2__unique_ptr_std____2__locale__facet_2c_20std____2___28anonymous_20namespace_29__release___unique_ptr_true_2c_20void__28std____2__locale__facet__29($0, $1) {
  var $2 = 0, $3 = 0;
  $2 = global$0 - 16 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  HEAP32[$2 + 12 >> 2] = $1;
  std____2____compressed_pair_elem__IO_FILE__2c_200_2c_20false_____compressed_pair_elem__IO_FILE___2c_20void__28_IO_FILE___29($0, $2 + 12 | 0);
  $1 = $2 + 16 | 0;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  return $0;
 }
 
 function std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20___resize_28unsigned_20long_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = std____2__vector_int_2c_20std____2__allocator_int__20___size_28_29_20const($0);
  if ($2 >>> 0 < $1 >>> 0) {
   std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20_____append_28unsigned_20long_29($0, $1 - $2 | 0);
   return;
  }
  if ($2 >>> 0 > $1 >>> 0) {
   $1 = HEAP32[$0 >> 2] + ($1 << 2) | 0;
   $2 = std____2__vector_int_2c_20std____2__allocator_int__20___size_28_29_20const($0);
   std____2____vector_base_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20_____destruct_at_end_28std____2__locale__facet___29($0, $1);
   std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20_____annotate_shrink_28unsigned_20long_29_20const($0, $2);
  }
 }
 
 function std____2__unique_ptr_std____2__locale__facet_2c_20std____2___28anonymous_20namespace_29__release___reset_28std____2__locale__facet__29($0) {
  var $1 = 0;
  $1 = HEAP32[$0 >> 2];
  HEAP32[$0 >> 2] = 0;
  if ($1) {
   std____2____shared_count____release_shared_28_29($1)
  }
 }
 
 function std____2__locale____imp_____imp_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  HEAP32[$0 >> 2] = 40144;
  $1 = $0 + 16 | 0;
  while (1) {
   if ($2 >>> 0 < std____2__vector_int_2c_20std____2__allocator_int__20___size_28_29_20const($1) >>> 0) {
    if (HEAP32[std____2__vector_int_2c_20std____2__allocator_int__20___operator_5b_5d_28unsigned_20long_29_20const($1, $2) >> 2]) {
     std____2____shared_count____release_shared_28_29(HEAP32[std____2__vector_int_2c_20std____2__allocator_int__20___operator_5b_5d_28unsigned_20long_29_20const($1, $2) >> 2])
    }
    $2 = $2 + 1 | 0;
    continue;
   }
   break;
  };
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($0 + 176 | 0);
  std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20____vector_28_29($1);
  return $0 | 0;
 }
 
 function std____2__locale____imp_____imp_28_29_1($0) {
  $0 = $0 | 0;
  dlfree(std____2__locale____imp_____imp_28_29($0));
 }
 
 function std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20_____append_28unsigned_20long_29($0, $1) {
  var $2 = 0, $3 = 0;
  $3 = global$0 - 32 | 0;
  $2 = $3;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  label$2 : {
   label$3 : {
    if (HEAP32[std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___get_28_29($0) >> 2] - HEAP32[$0 + 4 >> 2] >> 2 >>> 0 >= $1 >>> 0) {
     std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20_____construct_at_end_28unsigned_20long_29($0, $1);
     break label$3;
    }
    $2 = std____2____vector_base_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20_____alloc_28_29($0);
    $2 = std____2____split_buffer_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul_______split_buffer_28unsigned_20long_2c_20unsigned_20long_2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul___29($3 + 8 | 0, std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20_____recommend_28unsigned_20long_29_20const($0, std____2__vector_int_2c_20std____2__allocator_int__20___size_28_29_20const($0) + $1 | 0), std____2__vector_int_2c_20std____2__allocator_int__20___size_28_29_20const($0), $2);
    HEAP32[16874] = 0;
    std____2____split_buffer_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul_______construct_at_end_28unsigned_20long_29($2, $1);
    $1 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($1 | 0) == 1) {
     break label$2
    }
    HEAP32[16874] = 0;
    __invoke_void___22class_std____2__vector_13_22__i32(1800, $0 | 0, $2 | 0);
    $0 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($0 | 0) == 1) {
     break label$2
    }
    std____2____split_buffer_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul________split_buffer_28_29($2);
   }
   $0 = $3 + 32 | 0;
   if ($0 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $0;
   return;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2____split_buffer_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul________split_buffer_28_29($2);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2__locale____imp__has_facet_28long_29_20const($0, $1) {
  $0 = $0 + 16 | 0;
  if (std____2__vector_int_2c_20std____2__allocator_int__20___size_28_29_20const($0) >>> 0 > $1 >>> 0) {
   $0 = HEAP32[std____2__vector_int_2c_20std____2__allocator_int__20___operator_5b_5d_28unsigned_20long_29_20const($0, $1) >> 2] != 0
  } else {
   $0 = 0
  }
  return $0;
 }
 
 function std____2__locale____imp__make_global_28_29() {
  std____2__locale__locale_28std____2__locale_20const__29(69792, std____2__locale__classic_28_29());
  return 69792;
 }
 
 function std____2__locale__locale_28std____2__locale_20const__29($0, $1) {
  var $2 = 0;
  $2 = $0;
  $0 = HEAP32[$1 >> 2];
  HEAP32[$2 >> 2] = $0;
  std____2____shared_count____add_shared_28_29($0);
 }
 
 function std____2__locale____global_28_29() {
  var $0 = 0;
  label$1 : {
   label$2 : {
    if (HEAP8[69800] & 1) {
     break label$2
    }
    if (!__cxa_guard_acquire(69800)) {
     break label$2
    }
    HEAP32[16874] = 0;
    __invoke__struct___locale_struct_(1801) | 0;
    $0 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($0 | 0) == 1) {
     break label$1
    }
    HEAP32[17449] = 69792;
    __cxa_guard_release(69800);
   }
   return HEAP32[17449];
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  __cxa_guard_abort(69800);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2__locale__locale_28_29($0) {
  var $1 = 0, $2 = 0;
  HEAP32[16874] = 0;
  $2 = __invoke__struct___locale_struct_(1802) | 0;
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($1 | 0) != 1) {
   $1 = $0;
   $0 = HEAP32[$2 >> 2];
   HEAP32[$1 >> 2] = $0;
   std____2____shared_count____add_shared_28_29($0);
   return;
  }
  $0 = __cxa_find_matching_catch_3(0) | 0;
  getTempRet0() | 0;
  __clang_call_terminate($0);
  abort();
 }
 
 function std____2__locale__has_facet_28std____2__locale__id__29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return std____2__locale____imp__has_facet_28long_29_20const(HEAP32[$0 >> 2], std____2__locale__id____get_28_29($1)) | 0;
 }
 
 function std____2__locale__id____init_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = $0;
  $0 = HEAP32[17451] + 1 | 0;
  HEAP32[17451] = $0;
  HEAP32[$1 + 4 >> 2] = $0;
 }
 
 function void_20std____2__call_once_std____2___28anonymous_20namespace_29____fake_bind__28std____2__once_flag__2c_20std____2___28anonymous_20namespace_29____fake_bind___29($0, $1) {
  var $2 = 0, $3 = 0;
  $2 = global$0 - 16 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  if (HEAP32[$0 >> 2] != -1) {
   $3 = $2 + 8 | 0;
   std____2____compressed_pair_elem_std____2__allocator_double___2c_201_2c_20false_____compressed_pair_elem_std____2__allocator_double___2c_20void__28std____2__allocator_double___29($3, $1);
   std____2____compressed_pair_elem_std____2__allocator_double___2c_201_2c_20false_____compressed_pair_elem_std____2__allocator_double___2c_20void__28std____2__allocator_double___29($2, $3);
   std____2____call_once_28unsigned_20long_20volatile__2c_20void__2c_20void_20_28__29_28void__29_29($0, $2);
  }
  $0 = $2 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function std____2__locale__facet____on_zero_shared_28_29($0) {
  $0 = $0 | 0;
  if ($0) {
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0)
  }
 }
 
 function void_20std____2____call_once_proxy_std____2__tuple_std____2___28anonymous_20namespace_29____fake_bind____20__28void__29($0) {
  $0 = $0 | 0;
  std____2___28anonymous_20namespace_29____fake_bind__operator_28_29_28_29_20const(HEAP32[HEAP32[$0 >> 2] >> 2]);
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____29($0, $1) {
  var $2 = 0;
  $2 = HEAP32[$1 + 4 >> 2];
  HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$0 + 4 >> 2] = $2;
  HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
  std____2____compressed_pair_elem_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_200_2c_20false_____compressed_pair_elem_28_29($1);
 }
 
 function std____2__ctype_wchar_t___do_is_28unsigned_20short_2c_20wchar_t_29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  if ($2 >>> 0 <= 127) {
   $0 = (HEAPU16[std____2__ctype_char___classic_table_28_29() + ($2 << 1) >> 1] & $1) != 0
  } else {
   $0 = 0
  }
  return $0 | 0;
 }
 
 function std____2__ctype_char___classic_table_28_29() {
  var $0 = 0;
  HEAP32[16874] = 0;
  $0 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($0 | 0) != 1) {
   return HEAP32[8991]
  }
  $0 = __cxa_find_matching_catch_3(0) | 0;
  getTempRet0() | 0;
  __clang_call_terminate($0);
  abort();
 }
 
 function std____2__ctype_wchar_t___do_is_28wchar_t_20const__2c_20wchar_t_20const__2c_20unsigned_20short__29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0;
  while (1) {
   if (($1 | 0) != ($2 | 0)) {
    $0 = $3;
    if (HEAPU32[$1 >> 2] <= 127) {
     $4 = HEAPU16[std____2__ctype_char___classic_table_28_29() + (HEAP32[$1 >> 2] << 1) >> 1]
    } else {
     $4 = 0
    }
    HEAP16[$0 >> 1] = $4;
    $3 = $3 + 2 | 0;
    $1 = $1 + 4 | 0;
    continue;
   }
   break;
  };
  return $2 | 0;
 }
 
 function std____2__ctype_wchar_t___do_scan_is_28unsigned_20short_2c_20wchar_t_20const__2c_20wchar_t_20const__29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  while (1) {
   label$2 : {
    if (($2 | 0) != ($3 | 0)) {
     if (HEAPU32[$2 >> 2] > 127) {
      break label$2
     }
     if (!(HEAPU16[std____2__ctype_char___classic_table_28_29() + (HEAP32[$2 >> 2] << 1) >> 1] & $1)) {
      break label$2
     }
    } else {
     $2 = $3
    }
    return $2 | 0;
   }
   $2 = $2 + 4 | 0;
   continue;
  };
 }
 
 function std____2__ctype_wchar_t___do_scan_not_28unsigned_20short_2c_20wchar_t_20const__2c_20wchar_t_20const__29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  label$1 : {
   while (1) {
    if (($2 | 0) == ($3 | 0)) {
     break label$1
    }
    label$3 : {
     if (HEAPU32[$2 >> 2] > 127) {
      break label$3
     }
     if (!(HEAPU16[std____2__ctype_char___classic_table_28_29() + (HEAP32[$2 >> 2] << 1) >> 1] & $1)) {
      break label$3
     }
     $2 = $2 + 4 | 0;
     continue;
    }
    break;
   };
   $3 = $2;
  }
  return $3 | 0;
 }
 
 function std____2__ctype_wchar_t___do_toupper_28wchar_t_29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  if ($1 >>> 0 <= 127) {
   $1 = HEAP32[std____2__ctype_char_____classic_upper_table_28_29() + ($1 << 2) >> 2]
  }
  return $1 | 0;
 }
 
 function std____2__ctype_char_____classic_upper_table_28_29() {
  var $0 = 0;
  HEAP32[16874] = 0;
  $0 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($0 | 0) != 1) {
   return HEAP32[9184]
  }
  $0 = __cxa_find_matching_catch_3(0) | 0;
  getTempRet0() | 0;
  __clang_call_terminate($0);
  abort();
 }
 
 function std____2__ctype_wchar_t___do_toupper_28wchar_t__2c_20wchar_t_20const__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  while (1) {
   if (($1 | 0) != ($2 | 0)) {
    $3 = $1;
    $0 = HEAP32[$1 >> 2];
    if ($0 >>> 0 <= 127) {
     $0 = HEAP32[std____2__ctype_char_____classic_upper_table_28_29() + (HEAP32[$1 >> 2] << 2) >> 2]
    }
    HEAP32[$3 >> 2] = $0;
    $1 = $1 + 4 | 0;
    continue;
   }
   break;
  };
  return $2 | 0;
 }
 
 function std____2__ctype_wchar_t___do_tolower_28wchar_t_29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  if ($1 >>> 0 <= 127) {
   $1 = HEAP32[std____2__ctype_char_____classic_lower_table_28_29() + ($1 << 2) >> 2]
  }
  return $1 | 0;
 }
 
 function std____2__ctype_char_____classic_lower_table_28_29() {
  var $0 = 0;
  HEAP32[16874] = 0;
  $0 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($0 | 0) != 1) {
   return HEAP32[9572]
  }
  $0 = __cxa_find_matching_catch_3(0) | 0;
  getTempRet0() | 0;
  __clang_call_terminate($0);
  abort();
 }
 
 function std____2__ctype_wchar_t___do_tolower_28wchar_t__2c_20wchar_t_20const__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  while (1) {
   if (($1 | 0) != ($2 | 0)) {
    $3 = $1;
    $0 = HEAP32[$1 >> 2];
    if ($0 >>> 0 <= 127) {
     $0 = HEAP32[std____2__ctype_char_____classic_lower_table_28_29() + (HEAP32[$1 >> 2] << 2) >> 2]
    }
    HEAP32[$3 >> 2] = $0;
    $1 = $1 + 4 | 0;
    continue;
   }
   break;
  };
  return $2 | 0;
 }
 
 function std____2__ctype_wchar_t___do_widen_28char_29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return $1 | 0;
 }
 
 function std____2__ctype_wchar_t___do_widen_28char_20const__2c_20char_20const__2c_20wchar_t__29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  while (1) {
   if (($1 | 0) != ($2 | 0)) {
    HEAP32[$3 >> 2] = HEAP8[$1 | 0];
    $3 = $3 + 4 | 0;
    $1 = $1 + 1 | 0;
    continue;
   }
   break;
  };
  return $2 | 0;
 }
 
 function std____2__ctype_wchar_t___do_narrow_28wchar_t_2c_20char_29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  return ($1 >>> 0 < 128 ? $1 : $2) << 24 >> 24;
 }
 
 function std____2__ctype_wchar_t___do_narrow_28wchar_t_20const__2c_20wchar_t_20const__2c_20char_2c_20char__29_20const($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  while (1) {
   if (($1 | 0) != ($2 | 0)) {
    $0 = HEAP32[$1 >> 2];
    HEAP8[$4 | 0] = $0 >>> 0 < 128 ? $0 : $3;
    $4 = $4 + 1 | 0;
    $1 = $1 + 4 | 0;
    continue;
   }
   break;
  };
  return $2 | 0;
 }
 
 function std____2__ctype_char____ctype_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  HEAP32[$0 >> 2] = 40164;
  $1 = HEAP32[$0 + 8 >> 2];
  if (!(!$1 | !HEAPU8[$0 + 12 | 0])) {
   dlfree($1)
  }
  return $0 | 0;
 }
 
 function std____2__ctype_char____ctype_28_29_1($0) {
  $0 = $0 | 0;
  dlfree(std____2__ctype_char____ctype_28_29($0));
 }
 
 function std____2__ctype_char___do_toupper_28char_29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  if (($1 | 0) >= 0) {
   $1 = HEAP32[std____2__ctype_char_____classic_upper_table_28_29() + (($1 & 255) << 2) >> 2]
  }
  return $1 << 24 >> 24;
 }
 
 function std____2__ctype_char___do_toupper_28char__2c_20char_20const__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  while (1) {
   if (($1 | 0) != ($2 | 0)) {
    $3 = $1;
    $0 = HEAP8[$1 | 0];
    if (($0 | 0) >= 0) {
     $0 = HEAP32[std____2__ctype_char_____classic_upper_table_28_29() + (HEAP8[$1 | 0] << 2) >> 2]
    }
    HEAP8[$3 | 0] = $0;
    $1 = $1 + 1 | 0;
    continue;
   }
   break;
  };
  return $2 | 0;
 }
 
 function std____2__ctype_char___do_tolower_28char_29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  if (($1 | 0) >= 0) {
   $1 = HEAP32[std____2__ctype_char_____classic_lower_table_28_29() + (($1 & 255) << 2) >> 2]
  }
  return $1 << 24 >> 24;
 }
 
 function std____2__ctype_char___do_tolower_28char__2c_20char_20const__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  while (1) {
   if (($1 | 0) != ($2 | 0)) {
    $3 = $1;
    $0 = HEAP8[$1 | 0];
    if (($0 | 0) >= 0) {
     $0 = HEAP32[std____2__ctype_char_____classic_lower_table_28_29() + (HEAP8[$1 | 0] << 2) >> 2]
    }
    HEAP8[$3 | 0] = $0;
    $1 = $1 + 1 | 0;
    continue;
   }
   break;
  };
  return $2 | 0;
 }
 
 function std____2__ctype_char___do_widen_28char_20const__2c_20char_20const__2c_20char__29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  while (1) {
   if (($1 | 0) != ($2 | 0)) {
    HEAP8[$3 | 0] = HEAPU8[$1 | 0];
    $3 = $3 + 1 | 0;
    $1 = $1 + 1 | 0;
    continue;
   }
   break;
  };
  return $2 | 0;
 }
 
 function std____2__ctype_char___do_narrow_28char_2c_20char_29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  return (($1 | 0) > -1 ? $1 : $2) | 0;
 }
 
 function std____2__ctype_char___do_narrow_28char_20const__2c_20char_20const__2c_20char_2c_20char__29_20const($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  while (1) {
   if (($1 | 0) != ($2 | 0)) {
    $0 = HEAP8[$1 | 0];
    HEAP8[$4 | 0] = ($0 | 0) > -1 ? $0 : $3;
    $4 = $4 + 1 | 0;
    $1 = $1 + 1 | 0;
    continue;
   }
   break;
  };
  return $2 | 0;
 }
 
 function std____2__codecvt_char_2c_20char_2c_20__mbstate_t___do_out_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20char_20const___2c_20char__2c_20char__2c_20char___29_20const($0, $1, $2, $3, $4, $5, $6, $7) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  HEAP32[$4 >> 2] = $2;
  HEAP32[$7 >> 2] = $5;
  return 3;
 }
 
 function std____2__codecvt_char_2c_20char_2c_20__mbstate_t___do_unshift_28__mbstate_t__2c_20char__2c_20char__2c_20char___29_20const($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  HEAP32[$4 >> 2] = $2;
  return 3;
 }
 
 function std____2__codecvt_char_2c_20char_2c_20__mbstate_t___do_length_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20unsigned_20long_29_20const($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $0 = global$0 - 16 | 0;
  $1 = $0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  HEAP32[$0 + 12 >> 2] = $4;
  HEAP32[$0 + 8 >> 2] = $3 - $2;
  $1 = HEAP32[unsigned_20long_20const__20std____2__min_unsigned_20long__28unsigned_20long_20const__2c_20unsigned_20long_20const__29($0 + 12 | 0, $0 + 8 | 0) >> 2];
  $0 = $0 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
  return $1 | 0;
 }
 
 function std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t____codecvt_28_29_1($0) {
  $0 = $0 | 0;
  dlfree(std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t____codecvt_28_29($0));
 }
 
 function std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t___do_out_28__mbstate_t__2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20wchar_t_20const___2c_20char__2c_20char__2c_20char___29_20const($0, $1, $2, $3, $4, $5, $6, $7) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  var $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0;
  $9 = global$0 - 16 | 0;
  $8 = $9;
  if ($8 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $8;
  $8 = $2;
  while (1) {
   label$3 : {
    if (($3 | 0) == ($8 | 0)) {
     $8 = $3;
     break label$3;
    }
    if (!HEAP32[$8 >> 2]) {
     break label$3
    }
    $8 = $8 + 4 | 0;
    continue;
   }
   break;
  };
  HEAP32[$7 >> 2] = $5;
  HEAP32[$4 >> 2] = $2;
  $11 = 1;
  while (1) {
   label$6 : {
    label$7 : {
     if (!(($5 | 0) == ($6 | 0) | ($2 | 0) == ($3 | 0))) {
      $10 = HEAP32[$1 + 4 >> 2];
      HEAP32[$9 + 8 >> 2] = HEAP32[$1 >> 2];
      HEAP32[$9 + 12 >> 2] = $10;
      label$9 : {
       label$10 : {
        $10 = std____2____libcpp_wcsnrtombs_l_28char__2c_20wchar_t_20const___2c_20unsigned_20long_2c_20unsigned_20long_2c_20__mbstate_t__2c_20__locale_struct__29($5, $4, $8 - $2 >> 2, $6 - $5 | 0, $1, HEAP32[$0 + 8 >> 2]);
        $12 = $10 + 1 | 0;
        label$11 : {
         if ($12 >>> 0 <= 1) {
          if (!($12 - 1)) {
           break label$7
          }
          HEAP32[$7 >> 2] = $5;
          while (1) {
           label$14 : {
            if (HEAP32[$4 >> 2] == ($2 | 0)) {
             break label$14
            }
            $1 = std____2____libcpp_wcrtomb_l_28char__2c_20wchar_t_2c_20__mbstate_t__2c_20__locale_struct__29($5, HEAP32[$2 >> 2], $9 + 8 | 0, HEAP32[$0 + 8 >> 2]);
            if (($1 | 0) == -1) {
             break label$14
            }
            $5 = $1 + HEAP32[$7 >> 2] | 0;
            HEAP32[$7 >> 2] = $5;
            $2 = $2 + 4 | 0;
            continue;
           }
           break;
          };
          HEAP32[$4 >> 2] = $2;
          break label$11;
         }
         $5 = $10 + HEAP32[$7 >> 2] | 0;
         HEAP32[$7 >> 2] = $5;
         if (($5 | 0) == ($6 | 0)) {
          break label$9
         }
         if (($3 | 0) == ($8 | 0)) {
          $2 = HEAP32[$4 >> 2];
          $8 = $3;
          continue;
         }
         $8 = std____2____libcpp_wcrtomb_l_28char__2c_20wchar_t_2c_20__mbstate_t__2c_20__locale_struct__29($9 + 4 | 0, 0, $1, HEAP32[$0 + 8 >> 2]);
         if (($8 | 0) != -1) {
          break label$10
         }
        }
        $11 = 2;
        break label$7;
       }
       $5 = $9 + 4 | 0;
       if ($8 >>> 0 > $6 - HEAP32[$7 >> 2] >>> 0) {
        break label$7
       }
       while (1) {
        if ($8) {
         $2 = HEAPU8[$5 | 0];
         $10 = HEAP32[$7 >> 2];
         HEAP32[$7 >> 2] = $10 + 1;
         HEAP8[$10 | 0] = $2;
         $8 = $8 + -1 | 0;
         $5 = $5 + 1 | 0;
         continue;
        }
        break;
       };
       $2 = HEAP32[$4 >> 2] + 4 | 0;
       HEAP32[$4 >> 2] = $2;
       $8 = $2;
       while (1) {
        if (($3 | 0) == ($8 | 0)) {
         $8 = $3;
         break label$6;
        }
        if (!HEAP32[$8 >> 2]) {
         break label$6
        }
        $8 = $8 + 4 | 0;
        continue;
       };
      }
      $2 = HEAP32[$4 >> 2];
     }
     $11 = ($2 | 0) != ($3 | 0);
    }
    $0 = $9 + 16 | 0;
    if ($0 >>> 0 < global$2 >>> 0) {
     __handle_stack_overflow()
    }
    global$0 = $0;
    return $11 | 0;
   }
   $5 = HEAP32[$7 >> 2];
   continue;
  };
 }
 
 function std____2____libcpp_wcsnrtombs_l_28char__2c_20wchar_t_20const___2c_20unsigned_20long_2c_20unsigned_20long_2c_20__mbstate_t__2c_20__locale_struct__29($0, $1, $2, $3, $4, $5) {
  var $6 = 0, $7 = 0;
  $6 = global$0 - 16 | 0;
  $7 = $6;
  if ($6 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $7;
  HEAP32[$6 + 12 >> 2] = $5;
  $5 = std____2____libcpp_locale_guard____libcpp_locale_guard_28__locale_struct___29($6 + 8 | 0, $6 + 12 | 0);
  HEAP32[16874] = 0;
  $0 = __invoke___22class_std____2__basic_streambuf_22____22class_std____2__num_put_22____22class_std____2__basic_streambuf_22____22class_std____2__ios_base_22__i8_i32(1807, $0 | 0, $1 | 0, $2 | 0, $3 | 0, $4 | 0) | 0;
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($1 | 0) != 1) {
   std____2____libcpp_locale_guard_____libcpp_locale_guard_28_29($5);
   $1 = $6 + 16 | 0;
   if ($1 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $1;
   return $0;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2____libcpp_locale_guard_____libcpp_locale_guard_28_29($5);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____libcpp_wcrtomb_l_28char__2c_20wchar_t_2c_20__mbstate_t__2c_20__locale_struct__29($0, $1, $2, $3) {
  var $4 = 0, $5 = 0;
  $4 = global$0 - 16 | 0;
  $5 = $4;
  if ($4 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $5;
  HEAP32[$4 + 12 >> 2] = $3;
  $3 = std____2____libcpp_locale_guard____libcpp_locale_guard_28__locale_struct___29($4 + 8 | 0, $4 + 12 | 0);
  HEAP32[16874] = 0;
  $0 = wcrtomb($0, $1, $2);
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($1 | 0) != 1) {
   std____2____libcpp_locale_guard_____libcpp_locale_guard_28_29($3);
   $1 = $4 + 16 | 0;
   if ($1 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $1;
   return $0;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2____libcpp_locale_guard_____libcpp_locale_guard_28_29($3);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t___do_in_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20char_20const___2c_20wchar_t__2c_20wchar_t__2c_20wchar_t___29_20const($0, $1, $2, $3, $4, $5, $6, $7) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  var $8 = 0, $9 = 0, $10 = 0;
  $9 = global$0 - 16 | 0;
  $8 = $9;
  if ($8 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $8;
  $8 = $2;
  while (1) {
   label$3 : {
    if (($3 | 0) == ($8 | 0)) {
     $8 = $3;
     break label$3;
    }
    if (!HEAPU8[$8 | 0]) {
     break label$3
    }
    $8 = $8 + 1 | 0;
    continue;
   }
   break;
  };
  HEAP32[$7 >> 2] = $5;
  HEAP32[$4 >> 2] = $2;
  while (1) {
   label$6 : {
    label$7 : {
     label$8 : {
      if (($5 | 0) == ($6 | 0) | ($2 | 0) == ($3 | 0)) {
       break label$8
      }
      $10 = HEAP32[$1 + 4 >> 2];
      HEAP32[$9 + 8 >> 2] = HEAP32[$1 >> 2];
      HEAP32[$9 + 12 >> 2] = $10;
      label$9 : {
       label$10 : {
        label$11 : {
         $10 = std____2____libcpp_mbsnrtowcs_l_28wchar_t__2c_20char_20const___2c_20unsigned_20long_2c_20unsigned_20long_2c_20__mbstate_t__2c_20__locale_struct__29($5, $4, $8 - $2 | 0, $6 - $5 >> 2, $1, HEAP32[$0 + 8 >> 2]);
         label$12 : {
          if (($10 | 0) == -1) {
           while (1) {
            label$15 : {
             HEAP32[$7 >> 2] = $5;
             if (HEAP32[$4 >> 2] == ($2 | 0)) {
              break label$15
             }
             label$16 : {
              $5 = std____2____libcpp_mbrtowc_l_28wchar_t__2c_20char_20const__2c_20unsigned_20long_2c_20__mbstate_t__2c_20__locale_struct__29($5, $2, $8 - $2 | 0, $9 + 8 | 0, HEAP32[$0 + 8 >> 2]);
              $1 = $5 + 2 | 0;
              if ($1 >>> 0 > 2) {
               break label$16
              }
              $5 = 1;
              label$17 : {
               switch ($1 - 1 | 0) {
               case 1:
                break label$16;
               case 0:
                break label$17;
               default:
                break label$10;
               };
              }
              HEAP32[$4 >> 2] = $2;
              break label$12;
             }
             $2 = $2 + $5 | 0;
             $5 = HEAP32[$7 >> 2] + 4 | 0;
             continue;
            }
            break;
           };
           HEAP32[$4 >> 2] = $2;
           break label$8;
          }
          $5 = HEAP32[$7 >> 2] + ($10 << 2) | 0;
          HEAP32[$7 >> 2] = $5;
          if (($5 | 0) == ($6 | 0)) {
           break label$9
          }
          $2 = HEAP32[$4 >> 2];
          if (($3 | 0) == ($8 | 0)) {
           $8 = $3;
           continue;
          }
          if (!std____2____libcpp_mbrtowc_l_28wchar_t__2c_20char_20const__2c_20unsigned_20long_2c_20__mbstate_t__2c_20__locale_struct__29($5, $2, 1, $1, HEAP32[$0 + 8 >> 2])) {
           break label$11
          }
         }
         $0 = 2;
         break label$7;
        }
        HEAP32[$7 >> 2] = HEAP32[$7 >> 2] + 4;
        $2 = HEAP32[$4 >> 2] + 1 | 0;
        HEAP32[$4 >> 2] = $2;
        $8 = $2;
        while (1) {
         if (($3 | 0) == ($8 | 0)) {
          $8 = $3;
          break label$6;
         }
         if (!HEAPU8[$8 | 0]) {
          break label$6
         }
         $8 = $8 + 1 | 0;
         continue;
        };
       }
       HEAP32[$4 >> 2] = $2;
       $0 = 1;
       break label$7;
      }
      $2 = HEAP32[$4 >> 2];
     }
     $0 = ($2 | 0) != ($3 | 0);
    }
    $1 = $9 + 16 | 0;
    if ($1 >>> 0 < global$2 >>> 0) {
     __handle_stack_overflow()
    }
    global$0 = $1;
    return $0 | 0;
   }
   $5 = HEAP32[$7 >> 2];
   continue;
  };
 }
 
 function std____2____libcpp_mbsnrtowcs_l_28wchar_t__2c_20char_20const___2c_20unsigned_20long_2c_20unsigned_20long_2c_20__mbstate_t__2c_20__locale_struct__29($0, $1, $2, $3, $4, $5) {
  var $6 = 0, $7 = 0;
  $6 = global$0 - 16 | 0;
  $7 = $6;
  if ($6 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $7;
  HEAP32[$6 + 12 >> 2] = $5;
  $5 = std____2____libcpp_locale_guard____libcpp_locale_guard_28__locale_struct___29($6 + 8 | 0, $6 + 12 | 0);
  HEAP32[16874] = 0;
  $0 = __invoke___22class_std____2__basic_streambuf_22____22class_std____2__num_put_22____22class_std____2__basic_streambuf_22____22class_std____2__ios_base_22__i8_i32(1809, $0 | 0, $1 | 0, $2 | 0, $3 | 0, $4 | 0) | 0;
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($1 | 0) != 1) {
   std____2____libcpp_locale_guard_____libcpp_locale_guard_28_29($5);
   $1 = $6 + 16 | 0;
   if ($1 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $1;
   return $0;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2____libcpp_locale_guard_____libcpp_locale_guard_28_29($5);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____libcpp_mbrtowc_l_28wchar_t__2c_20char_20const__2c_20unsigned_20long_2c_20__mbstate_t__2c_20__locale_struct__29($0, $1, $2, $3, $4) {
  var $5 = 0, $6 = 0;
  $5 = global$0 - 16 | 0;
  $6 = $5;
  if ($5 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $6;
  HEAP32[$5 + 12 >> 2] = $4;
  $4 = std____2____libcpp_locale_guard____libcpp_locale_guard_28__locale_struct___29($5 + 8 | 0, $5 + 12 | 0);
  HEAP32[16874] = 0;
  $0 = __invoke___22class_std____2__shared_ptr_22____22class_std____2__shared_ptr_22___class_maxiOsc____22class_emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc____val_deleter_22__i32(1810, $0 | 0, $1 | 0, $2 | 0, $3 | 0) | 0;
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($1 | 0) != 1) {
   std____2____libcpp_locale_guard_____libcpp_locale_guard_28_29($4);
   $1 = $5 + 16 | 0;
   if ($1 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $1;
   return $0;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2____libcpp_locale_guard_____libcpp_locale_guard_28_29($4);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t___do_unshift_28__mbstate_t__2c_20char__2c_20char__2c_20char___29_20const($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0;
  $5 = global$0 - 16 | 0;
  $6 = $5;
  if ($5 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $6;
  HEAP32[$4 >> 2] = $2;
  $2 = 2;
  $0 = std____2____libcpp_wcrtomb_l_28char__2c_20wchar_t_2c_20__mbstate_t__2c_20__locale_struct__29($5 + 12 | 0, 0, $1, HEAP32[$0 + 8 >> 2]);
  label$2 : {
   if ($0 + 1 >>> 0 < 2) {
    break label$2
   }
   $2 = 1;
   $1 = $0 + -1 | 0;
   if ($1 >>> 0 > $3 - HEAP32[$4 >> 2] >>> 0) {
    break label$2
   }
   $2 = $5 + 12 | 0;
   while (1) {
    if ($1) {
     $0 = HEAPU8[$2 | 0];
     $3 = HEAP32[$4 >> 2];
     HEAP32[$4 >> 2] = $3 + 1;
     HEAP8[$3 | 0] = $0;
     $1 = $1 + -1 | 0;
     $2 = $2 + 1 | 0;
     continue;
    }
    break;
   };
   $2 = 0;
  }
  $0 = $5 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
  return $2 | 0;
 }
 
 function std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t___do_encoding_28_29_20const($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = HEAP32[$0 + 8 >> 2];
  HEAP32[16874] = 0;
  $1 = __invoke___22class_std____2__shared_ptr_22____22class_std____2__shared_ptr_22___class_maxiOsc____22class_emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc____val_deleter_22__i32(1811, 0, 0, 4, $1 | 0) | 0;
  $2 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$1 : {
   if (($2 | 0) == 1) {
    break label$1
   }
   label$2 : {
    if ($1) {
     $0 = -1
    } else {
     $0 = HEAP32[$0 + 8 >> 2];
     if ($0) {
      break label$2
     }
     $0 = 1;
    }
    return $0 | 0;
   }
   HEAP32[16874] = 0;
   $0 = __invoke_i1___22class_std____2__basic_ifstream_22_(1812, $0 | 0) | 0;
   $1 = HEAP32[16874];
   HEAP32[16874] = 0;
   if (($1 | 0) == 1) {
    break label$1
   }
   return ($0 | 0) == 1 | 0;
  }
  $0 = __cxa_find_matching_catch_3(0) | 0;
  getTempRet0() | 0;
  __clang_call_terminate($0);
  abort();
 }
 
 function std____2____libcpp_mbtowc_l_28wchar_t__2c_20char_20const__2c_20unsigned_20long_2c_20__locale_struct__29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0;
  $4 = global$0 - 16 | 0;
  $5 = $4;
  if ($4 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $5;
  HEAP32[$4 + 12 >> 2] = $3;
  $3 = std____2____libcpp_locale_guard____libcpp_locale_guard_28__locale_struct___29($4 + 8 | 0, $4 + 12 | 0);
  HEAP32[16874] = 0;
  $0 = __invoke___22class_std____2__basic_istream_22____22class_std____2__basic_istream_22__i8__i32(1813, $0 | 0, $1 | 0, $2 | 0) | 0;
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($1 | 0) != 1) {
   std____2____libcpp_locale_guard_____libcpp_locale_guard_28_29($3);
   $1 = $4 + 16 | 0;
   if ($1 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $1;
   return $0 | 0;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2____libcpp_locale_guard_____libcpp_locale_guard_28_29($3);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2____libcpp_mb_cur_max_l_28__locale_struct__29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = std____2____libcpp_locale_guard____libcpp_locale_guard_28__locale_struct___29($1 + 8 | 0, $1 + 12 | 0);
  HEAP32[16874] = 0;
  $2 = __ctype_get_mb_cur_max();
  $3 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($3 | 0) != 1) {
   std____2____libcpp_locale_guard_____libcpp_locale_guard_28_29($0);
   $0 = $1 + 16 | 0;
   if ($0 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $0;
   return $2 | 0;
  }
  $1 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2____libcpp_locale_guard_____libcpp_locale_guard_28_29($0);
  __resumeException($1 | 0);
  abort();
 }
 
 function std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t___do_length_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20unsigned_20long_29_20const($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  while (1) {
   label$2 : {
    if (($2 | 0) == ($3 | 0) | $6 >>> 0 >= $4 >>> 0) {
     break label$2
    }
    $5 = std____2____libcpp_mbrlen_l_28char_20const__2c_20unsigned_20long_2c_20__mbstate_t__2c_20__locale_struct__29($2, $3 - $2 | 0, $1, HEAP32[$0 + 8 >> 2]);
    $7 = $5 + 2 | 0;
    if ($7 >>> 0 <= 2) {
     $5 = 1;
     if ($7 - 2) {
      break label$2
     }
    }
    $6 = $6 + 1 | 0;
    $8 = $8 + $5 | 0;
    $2 = $2 + $5 | 0;
    continue;
   }
   break;
  };
  return $8 | 0;
 }
 
 function std____2____libcpp_mbrlen_l_28char_20const__2c_20unsigned_20long_2c_20__mbstate_t__2c_20__locale_struct__29($0, $1, $2, $3) {
  var $4 = 0, $5 = 0;
  $4 = global$0 - 16 | 0;
  $5 = $4;
  if ($4 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $5;
  HEAP32[$4 + 12 >> 2] = $3;
  $3 = std____2____libcpp_locale_guard____libcpp_locale_guard_28__locale_struct___29($4 + 8 | 0, $4 + 12 | 0);
  HEAP32[16874] = 0;
  $0 = __invoke___22class_std____2__basic_istream_22____22class_std____2__basic_istream_22__i8__i32(1815, $0 | 0, $1 | 0, $2 | 0) | 0;
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($1 | 0) != 1) {
   std____2____libcpp_locale_guard_____libcpp_locale_guard_28_29($3);
   $1 = $4 + 16 | 0;
   if ($1 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $1;
   return $0;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2____libcpp_locale_guard_____libcpp_locale_guard_28_29($3);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t___do_max_length_28_29_20const($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $0 = HEAP32[$0 + 8 >> 2];
  if (!$0) {
   return 1
  }
  HEAP32[16874] = 0;
  $0 = __invoke_i1___22class_std____2__basic_ifstream_22_(1812, $0 | 0) | 0;
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($1 | 0) != 1) {
   return $0 | 0
  }
  $0 = __cxa_find_matching_catch_3(0) | 0;
  getTempRet0() | 0;
  __clang_call_terminate($0);
  abort();
 }
 
 function std____2__codecvt_char16_t_2c_20char_2c_20__mbstate_t___do_out_28__mbstate_t__2c_20char16_t_20const__2c_20char16_t_20const__2c_20char16_t_20const___2c_20char__2c_20char__2c_20char___29_20const($0, $1, $2, $3, $4, $5, $6, $7) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  $0 = global$0 - 16 | 0;
  $1 = $0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  HEAP32[$0 + 12 >> 2] = $2;
  HEAP32[$0 + 8 >> 2] = $5;
  $1 = std____2__utf16_to_utf8_28unsigned_20short_20const__2c_20unsigned_20short_20const__2c_20unsigned_20short_20const___2c_20unsigned_20char__2c_20unsigned_20char__2c_20unsigned_20char___2c_20unsigned_20long_2c_20std____2__codecvt_mode_29($2, $3, $0 + 12 | 0, $5, $6, $0 + 8 | 0);
  HEAP32[$4 >> 2] = HEAP32[$0 + 12 >> 2];
  HEAP32[$7 >> 2] = HEAP32[$0 + 8 >> 2];
  $0 = $0 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
  return $1 | 0;
 }
 
 function std____2__utf16_to_utf8_28unsigned_20short_20const__2c_20unsigned_20short_20const__2c_20unsigned_20short_20const___2c_20unsigned_20char__2c_20unsigned_20char__2c_20unsigned_20char___2c_20unsigned_20long_2c_20std____2__codecvt_mode_29($0, $1, $2, $3, $4, $5) {
  var $6 = 0, $7 = 0;
  HEAP32[$2 >> 2] = $0;
  HEAP32[$5 >> 2] = $3;
  $6 = HEAP32[$2 >> 2];
  label$1 : {
   label$3 : {
    while (1) {
     if ($6 >>> 0 >= $1 >>> 0) {
      $0 = 0;
      break label$1;
     }
     $0 = 2;
     $3 = HEAPU16[$6 >> 1];
     if ($3 >>> 0 > 1114111) {
      break label$1
     }
     label$6 : {
      label$7 : {
       if ($3 >>> 0 <= 127) {
        $0 = 1;
        $6 = HEAP32[$5 >> 2];
        if (($4 - $6 | 0) < 1) {
         break label$1
        }
        HEAP32[$5 >> 2] = $6 + 1;
        HEAP8[$6 | 0] = $3;
        break label$7;
       }
       if ($3 >>> 0 <= 2047) {
        $0 = HEAP32[$5 >> 2];
        if (($4 - $0 | 0) < 2) {
         break label$3
        }
        HEAP32[$5 >> 2] = $0 + 1;
        HEAP8[$0 | 0] = $3 >>> 6 | 192;
        $0 = HEAP32[$5 >> 2];
        HEAP32[$5 >> 2] = $0 + 1;
        HEAP8[$0 | 0] = $3 & 63 | 128;
        break label$7;
       }
       if ($3 >>> 0 <= 55295) {
        $0 = HEAP32[$5 >> 2];
        if (($4 - $0 | 0) < 3) {
         break label$3
        }
        HEAP32[$5 >> 2] = $0 + 1;
        HEAP8[$0 | 0] = $3 >>> 12 | 224;
        $0 = HEAP32[$5 >> 2];
        HEAP32[$5 >> 2] = $0 + 1;
        HEAP8[$0 | 0] = $3 >>> 6 & 63 | 128;
        $0 = HEAP32[$5 >> 2];
        HEAP32[$5 >> 2] = $0 + 1;
        HEAP8[$0 | 0] = $3 & 63 | 128;
        break label$7;
       }
       if ($3 >>> 0 <= 56319) {
        $0 = 1;
        if (($1 - $6 | 0) < 4) {
         break label$1
        }
        $7 = HEAPU16[$6 + 2 >> 1];
        if (($7 & 64512) != 56320) {
         break label$6
        }
        if (($4 - HEAP32[$5 >> 2] | 0) < 4) {
         break label$1
        }
        $0 = $3 & 960;
        if (($7 & 1023 | ($3 << 10 & 64512 | $0 << 10)) + 65536 >>> 0 > 1114111) {
         break label$6
        }
        HEAP32[$2 >> 2] = $6 + 2;
        $6 = HEAP32[$5 >> 2];
        HEAP32[$5 >> 2] = $6 + 1;
        $0 = ($0 >>> 6 | 0) + 1 | 0;
        HEAP8[$6 | 0] = $0 >>> 2 | 240;
        $6 = HEAP32[$5 >> 2];
        HEAP32[$5 >> 2] = $6 + 1;
        HEAP8[$6 | 0] = $0 << 4 & 48 | $3 >>> 2 & 15 | 128;
        $0 = HEAP32[$5 >> 2];
        HEAP32[$5 >> 2] = $0 + 1;
        HEAP8[$0 | 0] = $7 >>> 6 & 15 | $3 << 4 & 48 | 128;
        $0 = HEAP32[$5 >> 2];
        HEAP32[$5 >> 2] = $0 + 1;
        HEAP8[$0 | 0] = $7 & 63 | 128;
        break label$7;
       }
       if ($3 >>> 0 < 57344) {
        break label$1
       }
       $0 = HEAP32[$5 >> 2];
       if (($4 - $0 | 0) < 3) {
        break label$3
       }
       HEAP32[$5 >> 2] = $0 + 1;
       HEAP8[$0 | 0] = $3 >>> 12 | 224;
       $0 = HEAP32[$5 >> 2];
       HEAP32[$5 >> 2] = $0 + 1;
       HEAP8[$0 | 0] = $3 >>> 6 & 63 | 128;
       $0 = HEAP32[$5 >> 2];
       HEAP32[$5 >> 2] = $0 + 1;
       HEAP8[$0 | 0] = $3 & 63 | 128;
      }
      $6 = HEAP32[$2 >> 2] + 2 | 0;
      HEAP32[$2 >> 2] = $6;
      continue;
     }
     break;
    };
    return 2;
   }
   return 1;
  }
  return $0;
 }
 
 function std____2__codecvt_char16_t_2c_20char_2c_20__mbstate_t___do_in_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20char_20const___2c_20char16_t__2c_20char16_t__2c_20char16_t___29_20const($0, $1, $2, $3, $4, $5, $6, $7) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  $0 = global$0 - 16 | 0;
  $1 = $0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  HEAP32[$0 + 12 >> 2] = $2;
  HEAP32[$0 + 8 >> 2] = $5;
  $1 = std____2__utf8_to_utf16_28unsigned_20char_20const__2c_20unsigned_20char_20const__2c_20unsigned_20char_20const___2c_20unsigned_20short__2c_20unsigned_20short__2c_20unsigned_20short___2c_20unsigned_20long_2c_20std____2__codecvt_mode_29($2, $3, $0 + 12 | 0, $5, $6, $0 + 8 | 0);
  HEAP32[$4 >> 2] = HEAP32[$0 + 12 >> 2];
  HEAP32[$7 >> 2] = HEAP32[$0 + 8 >> 2];
  $0 = $0 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
  return $1 | 0;
 }
 
 function std____2__utf8_to_utf16_28unsigned_20char_20const__2c_20unsigned_20char_20const__2c_20unsigned_20char_20const___2c_20unsigned_20short__2c_20unsigned_20short__2c_20unsigned_20short___2c_20unsigned_20long_2c_20std____2__codecvt_mode_29($0, $1, $2, $3, $4, $5) {
  var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
  HEAP32[$2 >> 2] = $0;
  HEAP32[$5 >> 2] = $3;
  label$2 : {
   while (1) {
    $0 = HEAP32[$2 >> 2];
    if ($0 >>> 0 >= $1 >>> 0) {
     $9 = 0;
     break label$2;
    }
    $9 = 1;
    $7 = HEAP32[$5 >> 2];
    if ($7 >>> 0 >= $4 >>> 0) {
     break label$2
    }
    label$5 : {
     $3 = HEAPU8[$0 | 0];
     if ($3 >>> 0 > 1114111) {
      break label$5
     }
     $11 = $2;
     label$6 : {
      if ($3 << 24 >> 24 >= 0) {
       HEAP16[$7 >> 1] = $3;
       $0 = $0 + 1 | 0;
       break label$6;
      }
      if ($3 >>> 0 < 194) {
       break label$5
      }
      if ($3 >>> 0 <= 223) {
       if (($1 - $0 | 0) < 2) {
        break label$2
       }
       $6 = HEAPU8[$0 + 1 | 0];
       if (($6 & 192) != 128) {
        break label$5
       }
       $9 = 2;
       $3 = $6 & 63 | $3 << 6 & 1984;
       if ($3 >>> 0 > 1114111) {
        break label$2
       }
       HEAP16[$7 >> 1] = $3;
       $0 = $0 + 2 | 0;
       break label$6;
      }
      if ($3 >>> 0 <= 239) {
       if (($1 - $0 | 0) < 3) {
        break label$2
       }
       $8 = HEAPU8[$0 + 2 | 0];
       $6 = HEAPU8[$0 + 1 | 0];
       label$10 : {
        label$11 : {
         if (($3 | 0) != 237) {
          if (($3 | 0) != 224) {
           break label$11
          }
          if (($6 & 224) != 160) {
           break label$5
          }
          break label$10;
         }
         if (($6 & 224) != 128) {
          break label$5
         }
         break label$10;
        }
        if (($6 & 192) != 128) {
         break label$5
        }
       }
       if (($8 & 192) != 128) {
        break label$5
       }
       $9 = 2;
       $3 = $8 & 63 | (($6 & 63) << 6 | $3 << 12);
       if (($3 & 65535) >>> 0 > 1114111) {
        break label$2
       }
       HEAP16[$7 >> 1] = $3;
       $0 = $0 + 3 | 0;
       break label$6;
      }
      if ($3 >>> 0 > 244) {
       break label$5
      }
      if (($1 - $0 | 0) < 4) {
       break label$2
      }
      $8 = HEAPU8[$0 + 3 | 0];
      $6 = HEAPU8[$0 + 2 | 0];
      $0 = HEAPU8[$0 + 1 | 0];
      label$13 : {
       label$14 : {
        $10 = $3 + -240 | 0;
        if ($10 >>> 0 > 4) {
         break label$14
        }
        label$15 : {
         switch ($10 - 1 | 0) {
         default:
          if (($0 + 112 & 255) >>> 0 >= 48) {
           break label$5
          }
          break label$13;
         case 0:
         case 1:
         case 2:
          break label$14;
         case 3:
          break label$15;
         };
        }
        if (($0 & 240) != 128) {
         break label$5
        }
        break label$13;
       }
       if (($0 & 192) != 128) {
        break label$5
       }
      }
      if (($6 & 192) != 128 | ($8 & 192) != 128) {
       break label$5
      }
      if (($4 - $7 | 0) < 4) {
       break label$2
      }
      $9 = 2;
      $8 = $8 & 63;
      $10 = $6 << 6;
      $3 = $3 & 7;
      if (($8 | ($10 & 4032 | ($0 << 12 & 258048 | $3 << 18))) >>> 0 > 1114111) {
       break label$2
      }
      $0 = $0 << 2;
      HEAP16[$7 >> 1] = ($0 & 192 | $3 << 8 | ($6 >>> 4 & 3 | $0 & 60)) + 16320 | 55296;
      HEAP32[$5 >> 2] = $7 + 2;
      HEAP16[$7 + 2 >> 1] = $8 | $10 & 960 | 56320;
      $0 = HEAP32[$2 >> 2] + 4 | 0;
     }
     HEAP32[$11 >> 2] = $0;
     HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + 2;
     continue;
    }
    break;
   };
   return 2;
  }
  return $9;
 }
 
 function std____2__codecvt_char16_t_2c_20char_2c_20__mbstate_t___do_length_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20unsigned_20long_29_20const($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  return std____2__utf8_to_utf16_length_28unsigned_20char_20const__2c_20unsigned_20char_20const__2c_20unsigned_20long_2c_20unsigned_20long_2c_20std____2__codecvt_mode_29($2, $3, $4) | 0;
 }
 
 function std____2__utf8_to_utf16_length_28unsigned_20char_20const__2c_20unsigned_20char_20const__2c_20unsigned_20long_2c_20unsigned_20long_2c_20std____2__codecvt_mode_29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
  $4 = $0;
  while (1) {
   label$3 : {
    if ($6 >>> 0 >= $2 >>> 0 | $4 >>> 0 >= $1 >>> 0) {
     break label$3
    }
    $5 = HEAPU8[$4 | 0];
    if ($5 >>> 0 > 1114111) {
     break label$3
    }
    $3 = $4 + 1 | 0;
    label$4 : {
     if ($5 << 24 >> 24 >= 0) {
      break label$4
     }
     if ($5 >>> 0 < 194) {
      break label$3
     }
     if ($5 >>> 0 <= 223) {
      if (($1 - $4 | 0) < 2) {
       break label$3
      }
      $3 = HEAPU8[$4 + 1 | 0];
      if (($3 & 192) != 128 | ($3 & 63 | $5 << 6 & 1984) >>> 0 > 1114111) {
       break label$3
      }
      $3 = $4 + 2 | 0;
      break label$4;
     }
     label$6 : {
      label$7 : {
       label$8 : {
        label$9 : {
         label$10 : {
          if ($5 >>> 0 <= 239) {
           if (($1 - $4 | 0) < 3) {
            break label$3
           }
           $7 = HEAPU8[$4 + 2 | 0];
           $3 = HEAPU8[$4 + 1 | 0];
           if (($5 | 0) == 237) {
            break label$10
           }
           if (($5 | 0) == 224) {
            if (($3 & 224) == 160) {
             break label$6
            }
            break label$3;
           }
           if (($3 & 192) != 128) {
            break label$3
           }
           break label$6;
          }
          if ($2 - $6 >>> 0 < 2 | $5 >>> 0 > 244 | ($1 - $4 | 0) < 4) {
           break label$3
          }
          $7 = HEAPU8[$4 + 3 | 0];
          $8 = HEAPU8[$4 + 2 | 0];
          $3 = HEAPU8[$4 + 1 | 0];
          label$13 : {
           $9 = $5 + -240 | 0;
           if ($9 >>> 0 > 4) {
            break label$13
           }
           switch ($9 - 1 | 0) {
           case 0:
           case 1:
           case 2:
            break label$13;
           case 3:
            break label$8;
           default:
            break label$9;
           };
          }
          if (($3 & 192) != 128) {
           break label$3
          }
          break label$7;
         }
         if (($3 & 224) == 128) {
          break label$6
         }
         break label$3;
        }
        if (($3 + 112 & 255) >>> 0 < 48) {
         break label$7
        }
        break label$3;
       }
       if (($3 & 240) != 128) {
        break label$3
       }
      }
      if (($8 & 192) != 128 | ($7 & 192) != 128 | ($7 & 63 | ($8 << 6 & 4032 | ($5 << 18 & 1835008 | ($3 & 63) << 12))) >>> 0 > 1114111) {
       break label$3
      }
      $6 = $6 + 1 | 0;
      $3 = $4 + 4 | 0;
      break label$4;
     }
     if (($7 & 192) != 128 | ($7 & 63 | ($5 << 12 & 61440 | ($3 & 63) << 6)) >>> 0 > 1114111) {
      break label$3
     }
     $3 = $4 + 3 | 0;
    }
    $4 = $3;
    $6 = $6 + 1 | 0;
    continue;
   }
   break;
  };
  return $4 - $0 | 0;
 }
 
 function std____2__codecvt_char32_t_2c_20char_2c_20__mbstate_t___do_out_28__mbstate_t__2c_20char32_t_20const__2c_20char32_t_20const__2c_20char32_t_20const___2c_20char__2c_20char__2c_20char___29_20const($0, $1, $2, $3, $4, $5, $6, $7) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  $0 = global$0 - 16 | 0;
  $1 = $0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  HEAP32[$0 + 12 >> 2] = $2;
  HEAP32[$0 + 8 >> 2] = $5;
  $1 = std____2__ucs4_to_utf8_28unsigned_20int_20const__2c_20unsigned_20int_20const__2c_20unsigned_20int_20const___2c_20unsigned_20char__2c_20unsigned_20char__2c_20unsigned_20char___2c_20unsigned_20long_2c_20std____2__codecvt_mode_29($2, $3, $0 + 12 | 0, $5, $6, $0 + 8 | 0);
  HEAP32[$4 >> 2] = HEAP32[$0 + 12 >> 2];
  HEAP32[$7 >> 2] = HEAP32[$0 + 8 >> 2];
  $0 = $0 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
  return $1 | 0;
 }
 
 function std____2__ucs4_to_utf8_28unsigned_20int_20const__2c_20unsigned_20int_20const__2c_20unsigned_20int_20const___2c_20unsigned_20char__2c_20unsigned_20char__2c_20unsigned_20char___2c_20unsigned_20long_2c_20std____2__codecvt_mode_29($0, $1, $2, $3, $4, $5) {
  var $6 = 0;
  HEAP32[$2 >> 2] = $0;
  HEAP32[$5 >> 2] = $3;
  $3 = HEAP32[$2 >> 2];
  label$1 : {
   while (1) {
    if ($3 >>> 0 >= $1 >>> 0) {
     $6 = 0;
     break label$1;
    }
    $6 = 2;
    $0 = HEAP32[$3 >> 2];
    if ($0 >>> 0 > 1114111 | ($0 & -2048) == 55296) {
     break label$1
    }
    label$5 : {
     label$6 : {
      if ($0 >>> 0 <= 127) {
       $6 = 1;
       $3 = HEAP32[$5 >> 2];
       if (($4 - $3 | 0) < 1) {
        break label$1
       }
       HEAP32[$5 >> 2] = $3 + 1;
       HEAP8[$3 | 0] = $0;
       break label$6;
      }
      if ($0 >>> 0 <= 2047) {
       $3 = HEAP32[$5 >> 2];
       if (($4 - $3 | 0) < 2) {
        break label$5
       }
       HEAP32[$5 >> 2] = $3 + 1;
       HEAP8[$3 | 0] = $0 >>> 6 | 192;
       $3 = HEAP32[$5 >> 2];
       HEAP32[$5 >> 2] = $3 + 1;
       HEAP8[$3 | 0] = $0 & 63 | 128;
       break label$6;
      }
      $3 = HEAP32[$5 >> 2];
      $6 = $4 - $3 | 0;
      if ($0 >>> 0 <= 65535) {
       if (($6 | 0) < 3) {
        break label$5
       }
       HEAP32[$5 >> 2] = $3 + 1;
       HEAP8[$3 | 0] = $0 >>> 12 | 224;
       $3 = HEAP32[$5 >> 2];
       HEAP32[$5 >> 2] = $3 + 1;
       HEAP8[$3 | 0] = $0 >>> 6 & 63 | 128;
       $3 = HEAP32[$5 >> 2];
       HEAP32[$5 >> 2] = $3 + 1;
       HEAP8[$3 | 0] = $0 & 63 | 128;
       break label$6;
      }
      if (($6 | 0) < 4) {
       break label$5
      }
      HEAP32[$5 >> 2] = $3 + 1;
      HEAP8[$3 | 0] = $0 >>> 18 | 240;
      $3 = HEAP32[$5 >> 2];
      HEAP32[$5 >> 2] = $3 + 1;
      HEAP8[$3 | 0] = $0 >>> 12 & 63 | 128;
      $3 = HEAP32[$5 >> 2];
      HEAP32[$5 >> 2] = $3 + 1;
      HEAP8[$3 | 0] = $0 >>> 6 & 63 | 128;
      $3 = HEAP32[$5 >> 2];
      HEAP32[$5 >> 2] = $3 + 1;
      HEAP8[$3 | 0] = $0 & 63 | 128;
     }
     $3 = HEAP32[$2 >> 2] + 4 | 0;
     HEAP32[$2 >> 2] = $3;
     continue;
    }
    break;
   };
   return 1;
  }
  return $6;
 }
 
 function std____2__codecvt_char32_t_2c_20char_2c_20__mbstate_t___do_in_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20char_20const___2c_20char32_t__2c_20char32_t__2c_20char32_t___29_20const($0, $1, $2, $3, $4, $5, $6, $7) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  $0 = global$0 - 16 | 0;
  $1 = $0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  HEAP32[$0 + 12 >> 2] = $2;
  HEAP32[$0 + 8 >> 2] = $5;
  $1 = std____2__utf8_to_ucs4_28unsigned_20char_20const__2c_20unsigned_20char_20const__2c_20unsigned_20char_20const___2c_20unsigned_20int__2c_20unsigned_20int__2c_20unsigned_20int___2c_20unsigned_20long_2c_20std____2__codecvt_mode_29($2, $3, $0 + 12 | 0, $5, $6, $0 + 8 | 0);
  HEAP32[$4 >> 2] = HEAP32[$0 + 12 >> 2];
  HEAP32[$7 >> 2] = HEAP32[$0 + 8 >> 2];
  $0 = $0 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
  return $1 | 0;
 }
 
 function std____2__utf8_to_ucs4_28unsigned_20char_20const__2c_20unsigned_20char_20const__2c_20unsigned_20char_20const___2c_20unsigned_20int__2c_20unsigned_20int__2c_20unsigned_20int___2c_20unsigned_20long_2c_20std____2__codecvt_mode_29($0, $1, $2, $3, $4, $5) {
  var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
  HEAP32[$2 >> 2] = $0;
  HEAP32[$5 >> 2] = $3;
  while (1) {
   $6 = HEAP32[$2 >> 2];
   if ($6 >>> 0 >= $1 >>> 0) {
    return 0
   }
   $9 = 1;
   label$4 : {
    label$5 : {
     $10 = HEAP32[$5 >> 2];
     label$6 : {
      if ($10 >>> 0 >= $4 >>> 0) {
       break label$6
      }
      $0 = HEAP8[$6 | 0];
      $3 = $0 & 255;
      if (($0 | 0) >= 0) {
       if ($3 >>> 0 > 1114111) {
        break label$4
       }
       $0 = 1;
       break label$5;
      }
      if ($3 >>> 0 < 194) {
       break label$4
      }
      if ($3 >>> 0 <= 223) {
       if (($1 - $6 | 0) < 2) {
        break label$6
       }
       $9 = 2;
       $7 = HEAPU8[$6 + 1 | 0];
       if (($7 & 192) != 128) {
        break label$6
       }
       $0 = 2;
       $3 = $7 & 63 | $3 << 6 & 1984;
       if ($3 >>> 0 <= 1114111) {
        break label$5
       }
       break label$6;
      }
      label$9 : {
       if ($3 >>> 0 <= 239) {
        if (($1 - $6 | 0) < 3) {
         break label$6
        }
        $8 = HEAPU8[$6 + 2 | 0];
        $7 = HEAPU8[$6 + 1 | 0];
        label$11 : {
         label$12 : {
          if (($3 | 0) != 237) {
           if (($3 | 0) != 224) {
            break label$12
           }
           if (($7 & 224) == 160) {
            break label$11
           }
           break label$4;
          }
          if (($7 & 224) == 128) {
           break label$11
          }
          break label$4;
         }
         if (($7 & 192) != 128) {
          break label$4
         }
        }
        if (($8 & 192) == 128) {
         break label$9
        }
        break label$4;
       }
       if ($3 >>> 0 > 244) {
        break label$4
       }
       if (($1 - $6 | 0) < 4) {
        break label$6
       }
       $8 = HEAPU8[$6 + 3 | 0];
       $11 = HEAPU8[$6 + 2 | 0];
       $7 = HEAPU8[$6 + 1 | 0];
       label$14 : {
        label$15 : {
         $0 = $3 + -240 | 0;
         if ($0 >>> 0 > 4) {
          break label$15
         }
         label$16 : {
          switch ($0 - 1 | 0) {
          default:
           if (($7 + 112 & 255) >>> 0 >= 48) {
            break label$4
           }
           break label$14;
          case 0:
          case 1:
          case 2:
           break label$15;
          case 3:
           break label$16;
          };
         }
         if (($7 & 240) != 128) {
          break label$4
         }
         break label$14;
        }
        if (($7 & 192) != 128) {
         break label$4
        }
       }
       if (($11 & 192) != 128 | ($8 & 192) != 128) {
        break label$4
       }
       $0 = 4;
       $9 = 2;
       $3 = $8 & 63 | ($11 << 6 & 4032 | ($3 << 18 & 1835008 | ($7 & 63) << 12));
       if ($3 >>> 0 > 1114111) {
        break label$6
       }
       break label$5;
      }
      $0 = 3;
      $9 = 2;
      $3 = $8 & 63 | ($3 << 12 & 61440 | ($7 & 63) << 6);
      if ($3 >>> 0 <= 1114111) {
       break label$5
      }
     }
     return $9;
    }
    HEAP32[$10 >> 2] = $3;
    HEAP32[$2 >> 2] = $0 + $6;
    HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + 4;
    continue;
   }
   break;
  };
  return 2;
 }
 
 function std____2__codecvt_char32_t_2c_20char_2c_20__mbstate_t___do_length_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20unsigned_20long_29_20const($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  return std____2__utf8_to_ucs4_length_28unsigned_20char_20const__2c_20unsigned_20char_20const__2c_20unsigned_20long_2c_20unsigned_20long_2c_20std____2__codecvt_mode_29($2, $3, $4) | 0;
 }
 
 function std____2__utf8_to_ucs4_length_28unsigned_20char_20const__2c_20unsigned_20char_20const__2c_20unsigned_20long_2c_20unsigned_20long_2c_20std____2__codecvt_mode_29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
  $3 = $0;
  while (1) {
   label$3 : {
    if ($7 >>> 0 >= $2 >>> 0 | $3 >>> 0 >= $1 >>> 0) {
     break label$3
    }
    $4 = HEAP8[$3 | 0];
    $5 = $4 & 255;
    label$4 : {
     if (($4 | 0) >= 0) {
      if ($5 >>> 0 > 1114111) {
       break label$3
      }
      $3 = $3 + 1 | 0;
      break label$4;
     }
     if ($5 >>> 0 < 194) {
      break label$3
     }
     if ($5 >>> 0 <= 223) {
      if (($1 - $3 | 0) < 2) {
       break label$3
      }
      $4 = HEAPU8[$3 + 1 | 0];
      if (($4 & 192) != 128 | ($4 & 63 | $5 << 6 & 1984) >>> 0 > 1114111) {
       break label$3
      }
      $3 = $3 + 2 | 0;
      break label$4;
     }
     label$7 : {
      label$8 : {
       label$9 : {
        label$10 : {
         label$11 : {
          if ($5 >>> 0 <= 239) {
           if (($1 - $3 | 0) < 3) {
            break label$3
           }
           $6 = HEAPU8[$3 + 2 | 0];
           $4 = HEAPU8[$3 + 1 | 0];
           if (($5 | 0) == 237) {
            break label$11
           }
           if (($5 | 0) == 224) {
            if (($4 & 224) == 160) {
             break label$7
            }
            break label$3;
           }
           if (($4 & 192) != 128) {
            break label$3
           }
           break label$7;
          }
          if (($1 - $3 | 0) < 4 | $5 >>> 0 > 244) {
           break label$3
          }
          $6 = HEAPU8[$3 + 3 | 0];
          $8 = HEAPU8[$3 + 2 | 0];
          $4 = HEAPU8[$3 + 1 | 0];
          label$14 : {
           $9 = $5 + -240 | 0;
           if ($9 >>> 0 > 4) {
            break label$14
           }
           switch ($9 - 1 | 0) {
           case 0:
           case 1:
           case 2:
            break label$14;
           case 3:
            break label$9;
           default:
            break label$10;
           };
          }
          if (($4 & 192) != 128) {
           break label$3
          }
          break label$8;
         }
         if (($4 & 224) == 128) {
          break label$7
         }
         break label$3;
        }
        if (($4 + 112 & 255) >>> 0 < 48) {
         break label$8
        }
        break label$3;
       }
       if (($4 & 240) != 128) {
        break label$3
       }
      }
      if (($8 & 192) != 128 | ($6 & 192) != 128 | ($6 & 63 | ($8 << 6 & 4032 | ($5 << 18 & 1835008 | ($4 & 63) << 12))) >>> 0 > 1114111) {
       break label$3
      }
      $3 = $3 + 4 | 0;
      break label$4;
     }
     if (($6 & 192) != 128 | ($6 & 63 | ($5 << 12 & 61440 | ($4 & 63) << 6)) >>> 0 > 1114111) {
      break label$3
     }
     $3 = $3 + 3 | 0;
    }
    $7 = $7 + 1 | 0;
    continue;
   }
   break;
  };
  return $3 - $0 | 0;
 }
 
 function std____2__numpunct_char____numpunct_28_29($0) {
  $0 = $0 | 0;
  HEAP32[$0 >> 2] = 40264;
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($0 + 12 | 0);
  return $0 | 0;
 }
 
 function std____2__numpunct_char____numpunct_28_29_1($0) {
  $0 = $0 | 0;
  dlfree(std____2__numpunct_char____numpunct_28_29($0));
 }
 
 function std____2__numpunct_wchar_t____numpunct_28_29($0) {
  $0 = $0 | 0;
  HEAP32[$0 >> 2] = 40304;
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($0 + 16 | 0);
  return $0 | 0;
 }
 
 function std____2__numpunct_wchar_t____numpunct_28_29_1($0) {
  $0 = $0 | 0;
  dlfree(std____2__numpunct_wchar_t____numpunct_28_29($0));
 }
 
 function std____2__numpunct_char___do_decimal_point_28_29_20const($0) {
  $0 = $0 | 0;
  return HEAP8[$0 + 8 | 0];
 }
 
 function std____2__numpunct_char___do_thousands_sep_28_29_20const($0) {
  $0 = $0 | 0;
  return HEAP8[$0 + 9 | 0];
 }
 
 function std____2__numpunct_char___do_grouping_28_29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29($0, $1 + 12 | 0);
 }
 
 function std____2__numpunct_wchar_t___do_grouping_28_29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29($0, $1 + 16 | 0);
 }
 
 function std____2__numpunct_char___do_truename_28_29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28char_20const__29($0, 40336);
 }
 
 function std____2__numpunct_wchar_t___do_truename_28_29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___basic_string_28wchar_t_20const__29($0, 40344);
 }
 
 function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___basic_string_28wchar_t_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20_____compressed_pair_true_2c_20void__28_29($0);
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____init_28wchar_t_20const__2c_20unsigned_20long_29($0, $1, wcslen($1));
  return $0 | 0;
 }
 
 function std____2__numpunct_char___do_falsename_28_29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28char_20const__29($0, 40364);
 }
 
 function std____2__numpunct_wchar_t___do_falsename_28_29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___basic_string_28wchar_t_20const__29($0, 40372);
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29($0, $1) {
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___assign_28char_20const__2c_20unsigned_20long_29($0, $1, strlen($1));
 }
 
 function std____2____time_get_c_storage_char_____weeks_28_29_20const($0) {
  $0 = $0 | 0;
  label$1 : {
   label$2 : {
    if (HEAP8[69876] & 1) {
     break label$2
    }
    if (!__cxa_guard_acquire(69876)) {
     break label$2
    }
    HEAP32[16874] = 0;
    __invoke_void(1816);
    $0 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($0 | 0) == 1) {
     break label$1
    }
    HEAP32[17468] = 70048;
    __cxa_guard_release(69876);
   }
   return HEAP32[17468];
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  __cxa_guard_abort(69876);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2__init_weeks_28_29() {
  var $0 = 0;
  label$1 : {
   if (HEAP8[70216] & 1) {
    break label$1
   }
   if (!__cxa_guard_acquire(70216)) {
    break label$1
   }
   $0 = 70048;
   while (1) {
    $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($0) + 12 | 0;
    if (($0 | 0) != 70216) {
     continue
    }
    break;
   };
   __cxa_guard_release(70216);
  }
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(70048, 44848);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(70060, 44855);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(70072, 44862);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(70084, 44870);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(70096, 44880);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(70108, 44889);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(70120, 44896);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(70132, 44905);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(70144, 44909);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(70156, 44913);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(70168, 44917);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(70180, 44921);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(70192, 44925);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(70204, 44929);
 }
 
 function __cxx_global_array_dtor_55($0) {
  $0 = $0 | 0;
  $0 = 70216;
  while (1) {
   $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($0 + -12 | 0);
   if (($0 | 0) != 70048) {
    continue
   }
   break;
  };
 }
 
 function std____2____time_get_c_storage_wchar_t_____weeks_28_29_20const($0) {
  $0 = $0 | 0;
  label$1 : {
   label$2 : {
    if (HEAP8[69884] & 1) {
     break label$2
    }
    if (!__cxa_guard_acquire(69884)) {
     break label$2
    }
    HEAP32[16874] = 0;
    __invoke_void(1818);
    $0 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($0 | 0) == 1) {
     break label$1
    }
    HEAP32[17470] = 70224;
    __cxa_guard_release(69884);
   }
   return HEAP32[17470];
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  __cxa_guard_abort(69884);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2__init_wweeks_28_29() {
  var $0 = 0;
  label$1 : {
   if (HEAP8[70392] & 1) {
    break label$1
   }
   if (!__cxa_guard_acquire(70392)) {
    break label$1
   }
   $0 = 70224;
   while (1) {
    $0 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___basic_string_28_29($0) + 12 | 0;
    if (($0 | 0) != 70392) {
     continue
    }
    break;
   };
   __cxa_guard_release(70392);
  }
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(70224, 44936);
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(70236, 44964);
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(70248, 44992);
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(70260, 45024);
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(70272, 45064);
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(70284, 45100);
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(70296, 45128);
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(70308, 45164);
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(70320, 45180);
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(70332, 45196);
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(70344, 45212);
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(70356, 45228);
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(70368, 45244);
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(70380, 45260);
 }
 
 function __cxx_global_array_dtor_70($0) {
  $0 = $0 | 0;
  $0 = 70392;
  while (1) {
   $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($0 + -12 | 0);
   if (($0 | 0) != 70224) {
    continue
   }
   break;
  };
 }
 
 function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29($0, $1) {
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___assign_28wchar_t_20const__2c_20unsigned_20long_29($0, $1, wcslen($1));
 }
 
 function std____2____time_get_c_storage_char_____months_28_29_20const($0) {
  $0 = $0 | 0;
  label$1 : {
   label$2 : {
    if (HEAP8[69892] & 1) {
     break label$2
    }
    if (!__cxa_guard_acquire(69892)) {
     break label$2
    }
    HEAP32[16874] = 0;
    __invoke_void(1820);
    $0 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($0 | 0) == 1) {
     break label$1
    }
    HEAP32[17472] = 70400;
    __cxa_guard_release(69892);
   }
   return HEAP32[17472];
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  __cxa_guard_abort(69892);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2__init_months_28_29() {
  var $0 = 0;
  label$1 : {
   if (HEAP8[70688] & 1) {
    break label$1
   }
   if (!__cxa_guard_acquire(70688)) {
    break label$1
   }
   $0 = 70400;
   while (1) {
    $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($0) + 12 | 0;
    if (($0 | 0) != 70688) {
     continue
    }
    break;
   };
   __cxa_guard_release(70688);
  }
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(70400, 45276);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(70412, 45284);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(70424, 45293);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(70436, 45299);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(70448, 45305);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(70460, 45309);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(70472, 45314);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(70484, 45319);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(70496, 45326);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(70508, 45336);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(70520, 45344);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(70532, 45353);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(70544, 45362);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(70556, 45366);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(70568, 45370);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(70580, 45374);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(70592, 45305);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(70604, 45378);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(70616, 45382);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(70628, 45386);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(70640, 45390);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(70652, 45394);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(70664, 45398);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(70676, 45402);
 }
 
 function __cxx_global_array_dtor_85($0) {
  $0 = $0 | 0;
  $0 = 70688;
  while (1) {
   $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($0 + -12 | 0);
   if (($0 | 0) != 70400) {
    continue
   }
   break;
  };
 }
 
 function std____2____time_get_c_storage_wchar_t_____months_28_29_20const($0) {
  $0 = $0 | 0;
  label$1 : {
   label$2 : {
    if (HEAP8[69900] & 1) {
     break label$2
    }
    if (!__cxa_guard_acquire(69900)) {
     break label$2
    }
    HEAP32[16874] = 0;
    __invoke_void(1822);
    $0 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($0 | 0) == 1) {
     break label$1
    }
    HEAP32[17474] = 70704;
    __cxa_guard_release(69900);
   }
   return HEAP32[17474];
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  __cxa_guard_abort(69900);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2__init_wmonths_28_29() {
  var $0 = 0;
  label$1 : {
   if (HEAP8[70992] & 1) {
    break label$1
   }
   if (!__cxa_guard_acquire(70992)) {
    break label$1
   }
   $0 = 70704;
   while (1) {
    $0 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___basic_string_28_29($0) + 12 | 0;
    if (($0 | 0) != 70992) {
     continue
    }
    break;
   };
   __cxa_guard_release(70992);
  }
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(70704, 45408);
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(70716, 45440);
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(70728, 45476);
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(70740, 45500);
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(70752, 45524);
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(70764, 45540);
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(70776, 45560);
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(70788, 45580);
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(70800, 45608);
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(70812, 45648);
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(70824, 45680);
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(70836, 45716);
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(70848, 45752);
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(70860, 45768);
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(70872, 45784);
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(70884, 45800);
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(70896, 45524);
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(70908, 45816);
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(70920, 45832);
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(70932, 45848);
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(70944, 45864);
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(70956, 45880);
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(70968, 45896);
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(70980, 45912);
 }
 
 function __cxx_global_array_dtor_109($0) {
  $0 = $0 | 0;
  $0 = 70992;
  while (1) {
   $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($0 + -12 | 0);
   if (($0 | 0) != 70704) {
    continue
   }
   break;
  };
 }
 
 function std____2____time_get_c_storage_char_____am_pm_28_29_20const($0) {
  $0 = $0 | 0;
  label$1 : {
   label$2 : {
    if (HEAP8[69908] & 1) {
     break label$2
    }
    if (!__cxa_guard_acquire(69908)) {
     break label$2
    }
    HEAP32[16874] = 0;
    __invoke_void(1824);
    $0 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($0 | 0) == 1) {
     break label$1
    }
    HEAP32[17476] = 71008;
    __cxa_guard_release(69908);
   }
   return HEAP32[17476];
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  __cxa_guard_abort(69908);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2__init_am_pm_28_29() {
  var $0 = 0;
  label$1 : {
   if (HEAP8[71032] & 1) {
    break label$1
   }
   if (!__cxa_guard_acquire(71032)) {
    break label$1
   }
   $0 = 71008;
   while (1) {
    $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28_29($0) + 12 | 0;
    if (($0 | 0) != 71032) {
     continue
    }
    break;
   };
   __cxa_guard_release(71032);
  }
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(71008, 45928);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator__28char_20const__29(71020, 45931);
 }
 
 function __cxx_global_array_dtor_133($0) {
  $0 = $0 | 0;
  $0 = 71032;
  while (1) {
   $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($0 + -12 | 0);
   if (($0 | 0) != 71008) {
    continue
   }
   break;
  };
 }
 
 function std____2____time_get_c_storage_wchar_t_____am_pm_28_29_20const($0) {
  $0 = $0 | 0;
  label$1 : {
   label$2 : {
    if (HEAP8[69916] & 1) {
     break label$2
    }
    if (!__cxa_guard_acquire(69916)) {
     break label$2
    }
    HEAP32[16874] = 0;
    __invoke_void(1826);
    $0 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($0 | 0) == 1) {
     break label$1
    }
    HEAP32[17478] = 71040;
    __cxa_guard_release(69916);
   }
   return HEAP32[17478];
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  __cxa_guard_abort(69916);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2__init_wam_pm_28_29() {
  var $0 = 0;
  label$1 : {
   if (HEAP8[71064] & 1) {
    break label$1
   }
   if (!__cxa_guard_acquire(71064)) {
    break label$1
   }
   $0 = 71040;
   while (1) {
    $0 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___basic_string_28_29($0) + 12 | 0;
    if (($0 | 0) != 71064) {
     continue
    }
    break;
   };
   __cxa_guard_release(71064);
  }
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(71040, 45936);
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___operator__28wchar_t_20const__29(71052, 45948);
 }
 
 function __cxx_global_array_dtor_136($0) {
  $0 = $0 | 0;
  $0 = 71064;
  while (1) {
   $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($0 + -12 | 0);
   if (($0 | 0) != 71040) {
    continue
   }
   break;
  };
 }
 
 function std____2____time_get_c_storage_char_____x_28_29_20const($0) {
  $0 = $0 | 0;
  label$1 : {
   label$2 : {
    if (HEAP8[69932] & 1) {
     break label$2
    }
    if (!__cxa_guard_acquire(69932)) {
     break label$2
    }
    HEAP32[16874] = 0;
    __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1746, 69920, 40396) | 0;
    $0 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($0 | 0) == 1) {
     break label$1
    }
    __cxa_guard_release(69932);
   }
   return 69920;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  __cxa_guard_abort(69932);
  __resumeException($0 | 0);
  abort();
 }
 
 function __cxx_global_array_dtor_2($0) {
  $0 = $0 | 0;
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29(69920);
 }
 
 function std____2____time_get_c_storage_wchar_t_____x_28_29_20const($0) {
  $0 = $0 | 0;
  label$1 : {
   label$2 : {
    if (HEAP8[69948] & 1) {
     break label$2
    }
    if (!__cxa_guard_acquire(69948)) {
     break label$2
    }
    HEAP32[16874] = 0;
    __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1829, 69936, 40408) | 0;
    $0 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($0 | 0) == 1) {
     break label$1
    }
    __cxa_guard_release(69948);
   }
   return 69936;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  __cxa_guard_abort(69948);
  __resumeException($0 | 0);
  abort();
 }
 
 function __cxx_global_array_dtor_32($0) {
  $0 = $0 | 0;
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29(69936);
 }
 
 function std____2____time_get_c_storage_char_____X_28_29_20const($0) {
  $0 = $0 | 0;
  label$1 : {
   label$2 : {
    if (HEAP8[69964] & 1) {
     break label$2
    }
    if (!__cxa_guard_acquire(69964)) {
     break label$2
    }
    HEAP32[16874] = 0;
    __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1746, 69952, 40444) | 0;
    $0 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($0 | 0) == 1) {
     break label$1
    }
    __cxa_guard_release(69964);
   }
   return 69952;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  __cxa_guard_abort(69964);
  __resumeException($0 | 0);
  abort();
 }
 
 function __cxx_global_array_dtor_34($0) {
  $0 = $0 | 0;
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29(69952);
 }
 
 function std____2____time_get_c_storage_wchar_t_____X_28_29_20const($0) {
  $0 = $0 | 0;
  label$1 : {
   label$2 : {
    if (HEAP8[69980] & 1) {
     break label$2
    }
    if (!__cxa_guard_acquire(69980)) {
     break label$2
    }
    HEAP32[16874] = 0;
    __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1829, 69968, 40456) | 0;
    $0 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($0 | 0) == 1) {
     break label$1
    }
    __cxa_guard_release(69980);
   }
   return 69968;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  __cxa_guard_abort(69980);
  __resumeException($0 | 0);
  abort();
 }
 
 function __cxx_global_array_dtor_36($0) {
  $0 = $0 | 0;
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29(69968);
 }
 
 function std____2____time_get_c_storage_char_____c_28_29_20const($0) {
  $0 = $0 | 0;
  label$1 : {
   label$2 : {
    if (HEAP8[69996] & 1) {
     break label$2
    }
    if (!__cxa_guard_acquire(69996)) {
     break label$2
    }
    HEAP32[16874] = 0;
    __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1746, 69984, 40492) | 0;
    $0 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($0 | 0) == 1) {
     break label$1
    }
    __cxa_guard_release(69996);
   }
   return 69984;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  __cxa_guard_abort(69996);
  __resumeException($0 | 0);
  abort();
 }
 
 function __cxx_global_array_dtor_38($0) {
  $0 = $0 | 0;
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29(69984);
 }
 
 function std____2____time_get_c_storage_wchar_t_____c_28_29_20const($0) {
  $0 = $0 | 0;
  label$1 : {
   label$2 : {
    if (HEAP8[70012] & 1) {
     break label$2
    }
    if (!__cxa_guard_acquire(70012)) {
     break label$2
    }
    HEAP32[16874] = 0;
    __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1829, 7e4, 40516) | 0;
    $0 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($0 | 0) == 1) {
     break label$1
    }
    __cxa_guard_release(70012);
   }
   return 7e4;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  __cxa_guard_abort(70012);
  __resumeException($0 | 0);
  abort();
 }
 
 function __cxx_global_array_dtor_40($0) {
  $0 = $0 | 0;
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29(7e4);
 }
 
 function std____2____time_get_c_storage_char_____r_28_29_20const($0) {
  $0 = $0 | 0;
  label$1 : {
   label$2 : {
    if (HEAP8[70028] & 1) {
     break label$2
    }
    if (!__cxa_guard_acquire(70028)) {
     break label$2
    }
    HEAP32[16874] = 0;
    __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1746, 70016, 40600) | 0;
    $0 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($0 | 0) == 1) {
     break label$1
    }
    __cxa_guard_release(70028);
   }
   return 70016;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  __cxa_guard_abort(70028);
  __resumeException($0 | 0);
  abort();
 }
 
 function __cxx_global_array_dtor_42($0) {
  $0 = $0 | 0;
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29(70016);
 }
 
 function std____2____time_get_c_storage_wchar_t_____r_28_29_20const($0) {
  $0 = $0 | 0;
  label$1 : {
   label$2 : {
    if (HEAP8[70044] & 1) {
     break label$2
    }
    if (!__cxa_guard_acquire(70044)) {
     break label$2
    }
    HEAP32[16874] = 0;
    __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(1829, 70032, 40612) | 0;
    $0 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($0 | 0) == 1) {
     break label$1
    }
    __cxa_guard_release(70044);
   }
   return 70032;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  __cxa_guard_abort(70044);
  __resumeException($0 | 0);
  abort();
 }
 
 function __cxx_global_array_dtor_44($0) {
  $0 = $0 | 0;
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29(70032);
 }
 
 function std____2__iterator_traits_wchar_t____difference_type_20std____2__distance_wchar_t___28wchar_t__2c_20wchar_t__29($0, $1) {
  return unsigned_20long_20std____2___28anonymous_20namespace_29__countof_wchar_t__28wchar_t_20const__2c_20wchar_t_20const__29($0, $1);
 }
 
 function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___capacity_28_29_20const($0) {
  if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____is_long_28_29_20const($0)) {
   $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_long_cap_28_29_20const($0) + -1 | 0
  } else {
   $0 = 1
  }
  return $0;
 }
 
 function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____set_size_28unsigned_20long_29($0, $1) {
  if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____is_long_28_29_20const($0)) {
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_size_28unsigned_20long_29($0, $1);
   return;
  }
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_short_size_28unsigned_20long_29($0, $1);
 }
 
 function std____2____time_put_____time_put_28_29($0) {
  var $1 = 0, $2 = 0, $3 = 0;
  $1 = HEAP32[$0 >> 2];
  HEAP32[16874] = 0;
  $2 = __invoke__struct___locale_struct_(1670) | 0;
  $3 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$1 : {
   if (($3 | 0) == 1) {
    break label$1
   }
   if (($1 | 0) != ($2 | 0)) {
    $0 = HEAP32[$0 >> 2];
    HEAP32[16874] = 0;
    freelocale($0);
    $0 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($0 | 0) == 1) {
     break label$1
    }
   }
   return;
  }
  $0 = __cxa_find_matching_catch_3(0) | 0;
  getTempRet0() | 0;
  __clang_call_terminate($0);
  abort();
 }
 
 function std____2__time_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20____time_put_28_29($0) {
  $0 = $0 | 0;
  dlfree(std____2__time_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20____time_put_28_29_1($0));
 }
 
 function std____2__time_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20____time_put_28_29_1($0) {
  $0 = $0 | 0;
  std____2____time_put_____time_put_28_29($0 + 8 | 0);
  return $0 | 0;
 }
 
 function std____2____compressed_pair_std____2__locale__facet___2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20_____compressed_pair_std__nullptr_t_2c_20true__28std__nullptr_t___29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  std____2____compressed_pair_elem_double__2c_200_2c_20false_____compressed_pair_elem_std__nullptr_t_2c_20void__28std__nullptr_t___29($0, $1);
  HEAP8[($0 + 16 | 0) + 112 | 0] = 0;
  return $0 | 0;
 }
 
 function std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20___max_size_28_29_20const($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  std____2____vector_base_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20_____alloc_28_29($0);
  HEAP32[$1 + 12 >> 2] = 1073741823;
  HEAP32[16874] = 0;
  HEAP32[$1 + 8 >> 2] = 2147483647;
  $0 = __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(38, $1 + 12 | 0, $1 + 8 | 0) | 0;
  $2 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($2 | 0) != 1) {
   $0 = HEAP32[$0 >> 2];
   $1 = $1 + 16 | 0;
   if ($1 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $1;
   return $0;
  }
  $0 = __cxa_find_matching_catch_3(0) | 0;
  getTempRet0() | 0;
  __clang_call_terminate($0);
  abort();
 }
 
 function std____2____vector_base_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20_____alloc_28_29($0) {
  return $0 + 32 | 0;
 }
 
 function std____2__allocator_traits_std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20___allocate_28std____2____sso_allocator_std____2__locale__facet__2c_2028ul___2c_20unsigned_20long_29($0, $1) {
  return std____2____sso_allocator_std____2__locale__facet__2c_2028ul___allocate_28unsigned_20long_2c_20void_20const__29($0, $1);
 }
 
 function std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20_____annotate_new_28unsigned_20long_29_20const($0, $1) {
  std____2____vector_base_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20___capacity_28_29_20const($0);
  std____2____vector_base_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20___capacity_28_29_20const($0);
 }
 
 function std____2____vector_base_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20___capacity_28_29_20const($0) {
  return HEAP32[std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___get_28_29($0) >> 2] - HEAP32[$0 >> 2] >> 2;
 }
 
 function std____2__allocator_traits_std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20___deallocate_28std____2____sso_allocator_std____2__locale__facet__2c_2028ul___2c_20std____2__locale__facet___2c_20unsigned_20long_29($0, $1, $2) {
  HEAP32[16874] = 0;
  std____2____sso_allocator_std____2__locale__facet__2c_2028ul___deallocate_28std____2__locale__facet___2c_20unsigned_20long_29($0, $1, $2);
  $0 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($0 | 0) != 1) {
   return
  }
  $0 = __cxa_find_matching_catch_3(0) | 0;
  getTempRet0() | 0;
  __clang_call_terminate($0);
  abort();
 }
 
 function std____2____sso_allocator_std____2__locale__facet__2c_2028ul___allocate_28unsigned_20long_2c_20void_20const__29($0, $1) {
  if (!(HEAPU8[$0 + 112 | 0] | $1 >>> 0 > 28)) {
   HEAP8[$0 + 112 | 0] = 1;
   return $0;
  }
  return operator_20new_28unsigned_20long_29($1 << 2);
 }
 
 function void_20std____2__allocator_traits_std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20_____construct_std____2__locale__facet___28std____2__integral_constant_bool_2c_20false__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul___2c_20std____2__locale__facet___29($0) {
  HEAP32[$0 >> 2] = 0;
 }
 
 function std____2____vector_base_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20_____destruct_at_end_28std____2__locale__facet___29($0, $1) {
  var $2 = 0, $3 = 0;
  $2 = HEAP32[$0 + 4 >> 2];
  label$1 : {
   while (1) {
    if (($1 | 0) == ($2 | 0)) {
     break label$1
    }
    std____2____vector_base_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20_____alloc_28_29($0);
    HEAP32[16874] = 0;
    $2 = $2 + -4 | 0;
    $3 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($3 | 0) != 1) {
     continue
    }
    break;
   };
   $0 = __cxa_find_matching_catch_3(0) | 0;
   getTempRet0() | 0;
   __clang_call_terminate($0);
   abort();
  }
  HEAP32[$0 + 4 >> 2] = $1;
 }
 
 function std____2____sso_allocator_std____2__locale__facet__2c_2028ul___deallocate_28std____2__locale__facet___2c_20unsigned_20long_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  if (($0 | 0) == ($1 | 0)) {
   HEAP8[$0 + 112 | 0] = 0;
   return;
  }
  dlfree($1);
 }
 
 function std____2____time_put____time_put_28_29($0) {
  $0 = $0 | 0;
  HEAP32[$0 >> 2] = std____2____cloc_28_29();
  return $0 | 0;
 }
 
 function std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20_____recommend_28unsigned_20long_29_20const($0, $1) {
  var $2 = 0, $3 = 0;
  $2 = global$0 - 16 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  HEAP32[$2 + 12 >> 2] = $1;
  $3 = std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20___max_size_28_29_20const($0);
  if ($3 >>> 0 >= $1 >>> 0) {
   $0 = std____2____vector_base_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20___capacity_28_29_20const($0);
   if ($0 >>> 0 < $3 >>> 1 >>> 0) {
    HEAP32[$2 + 8 >> 2] = $0 << 1;
    $3 = HEAP32[unsigned_20long_20const__20std____2__max_unsigned_20long__28unsigned_20long_20const__2c_20unsigned_20long_20const__29($2 + 8 | 0, $2 + 12 | 0) >> 2];
   }
   $0 = $2 + 16 | 0;
   if ($0 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $0;
   return $3;
  }
  std____2____vector_base_common_true_____throw_length_error_28_29_20const();
  abort();
 }
 
 function std____2____split_buffer_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul_______split_buffer_28unsigned_20long_2c_20unsigned_20long_2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul___29($0, $1, $2, $3) {
  var $4 = 0, $5 = 0;
  $5 = global$0 - 16 | 0;
  $4 = $5;
  if ($4 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  $4 = 0;
  HEAP32[$5 + 12 >> 2] = 0;
  std____2____compressed_pair_double__2c_20std____2__allocator_double_______compressed_pair_std__nullptr_t_2c_20std____2__allocator_double____28std__nullptr_t___2c_20std____2__allocator_double___29($0 + 12 | 0, $5 + 12 | 0, $3);
  if ($1) {
   $4 = std____2__allocator_traits_std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20___allocate_28std____2____sso_allocator_std____2__locale__facet__2c_2028ul___2c_20unsigned_20long_29(std____2____split_buffer_double_2c_20std____2__allocator_double_______alloc_28_29($0), $1)
  }
  HEAP32[$0 >> 2] = $4;
  $2 = ($2 << 2) + $4 | 0;
  HEAP32[$0 + 8 >> 2] = $2;
  HEAP32[$0 + 4 >> 2] = $2;
  HEAP32[std____2____split_buffer_double_2c_20std____2__allocator_double_______end_cap_28_29($0) >> 2] = ($1 << 2) + $4;
  $1 = $5 + 16 | 0;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  return $0;
 }
 
 function std____2____split_buffer_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul_______construct_at_end_28unsigned_20long_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  std____2____split_buffer_double_2c_20std____2__allocator_double_______alloc_28_29($0);
  $2 = HEAP32[$0 + 8 >> 2];
  while (1) {
   void_20std____2__allocator_traits_std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20_____construct_std____2__locale__facet___28std____2__integral_constant_bool_2c_20false__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul___2c_20std____2__locale__facet___29($2);
   $2 = HEAP32[$0 + 8 >> 2] + 4 | 0;
   HEAP32[$0 + 8 >> 2] = $2;
   $1 = $1 + -1 | 0;
   if ($1) {
    continue
   }
   break;
  };
 }
 
 function std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20_____swap_out_circular_buffer_28std____2____split_buffer_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul_____29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0;
  std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20_____annotate_delete_28_29_20const($0);
  $3 = std____2____vector_base_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20_____alloc_28_29($0);
  $2 = $1 + 4 | 0;
  std____2__enable_if__28_28std____2__integral_constant_bool_2c_20true___value_29_20___20_28__28__has_construct_std____2__allocator_double__2c_20bool__2c_20bool___value_29_29_29_20___20_28is_trivially_move_constructible_bool___value_29_2c_20void___type_20std____2__allocator_traits_std____2__allocator_double__20_____construct_backward_double__28std____2__allocator_double___2c_20bool__2c_20bool__2c_20bool___29($3, HEAP32[$0 >> 2], HEAP32[$0 + 4 >> 2], $2);
  std____2__enable_if__28is_move_constructible_double____value_29_20___20_28is_move_assignable_double____value_29_2c_20void___type_20std____2__swap_double___28double___2c_20double___29($0, $2);
  std____2__enable_if__28is_move_constructible_double____value_29_20___20_28is_move_assignable_double____value_29_2c_20void___type_20std____2__swap_double___28double___2c_20double___29($0 + 4 | 0, $1 + 8 | 0);
  std____2__enable_if__28is_move_constructible_double____value_29_20___20_28is_move_assignable_double____value_29_2c_20void___type_20std____2__swap_double___28double___2c_20double___29(std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___get_28_29($0), std____2____split_buffer_double_2c_20std____2__allocator_double_______end_cap_28_29($1));
  HEAP32[$1 >> 2] = HEAP32[$1 + 4 >> 2];
  std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20_____annotate_new_28unsigned_20long_29_20const($0, std____2__vector_int_2c_20std____2__allocator_int__20___size_28_29_20const($0));
 }
 
 function std____2____split_buffer_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul________split_buffer_28_29($0) {
  std____2____split_buffer_int_2c_20std____2__allocator_int_______destruct_at_end_28int__2c_20std____2__integral_constant_bool_2c_20false__29($0, HEAP32[$0 + 4 >> 2]);
  if (HEAP32[$0 >> 2]) {
   std____2__allocator_traits_std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20___deallocate_28std____2____sso_allocator_std____2__locale__facet__2c_2028ul___2c_20std____2__locale__facet___2c_20unsigned_20long_29(std____2____split_buffer_double_2c_20std____2__allocator_double_______alloc_28_29($0), HEAP32[$0 >> 2], std____2____split_buffer_int_2c_20std____2__allocator_int_____capacity_28_29_20const($0))
  }
 }
 
 function std____2___28anonymous_20namespace_29____fake_bind__operator_28_29_28_29_20const($0) {
  var $1 = 0, $2 = 0, $3 = 0;
  $2 = HEAP32[$0 + 4 >> 2];
  $1 = HEAP32[$0 >> 2];
  $0 = HEAP32[$0 + 8 >> 2];
  $1 = $1 + ($0 >> 1) | 0;
  $3 = $1;
  if ($0 & 1) {
   $2 = HEAP32[$2 + HEAP32[$1 >> 2] >> 2]
  }
  FUNCTION_TABLE[$2]($3);
 }
 
 function std____2__iterator_traits_char_20const____difference_type_20std____2__distance_char_20const___28char_20const__2c_20char_20const__29($0, $1) {
  return unsigned_20long_20std____2___28anonymous_20namespace_29__countof_char__28char_20const__2c_20char_20const__29($0, $1);
 }
 
 function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____recommend_28unsigned_20long_29($0) {
  var $1 = 0;
  if ($0 >>> 0 >= 2) {
   $1 = $0 + 4 & -4;
   $0 = $1 + -1 | 0;
   $0 = ($0 | 0) == 2 ? $1 : $0;
  } else {
   $0 = 1
  }
  return $0;
 }
 
 function std____2__allocator_wchar_t___allocate_28unsigned_20long_2c_20void_20const__29($0) {
  if (1073741823 < $0 >>> 0) {
   std____2____throw_length_error_28char_20const__29(45960);
   abort();
  }
  return operator_20new_28unsigned_20long_29($0 << 2);
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____clear_and_shrink_28_29($0) {
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___clear_28_29($0);
  if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____is_long_28_29_20const($0)) {
   std____2__allocator_traits_std____2__allocator_char__20___deallocate_28std____2__allocator_char___2c_20char__2c_20unsigned_20long_29($0, HEAP32[$0 >> 2], std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($0) + 1 | 0);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_cap_28unsigned_20long_29($0, 0);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_short_size_28unsigned_20long_29($0, 0);
  }
 }
 
 function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____clear_and_shrink_28_29($0) {
  std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___clear_28_29($0);
  if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____is_long_28_29_20const($0)) {
   std____2__allocator_traits_std____2__allocator_char__20___deallocate_28std____2__allocator_char___2c_20char__2c_20unsigned_20long_29($0, HEAP32[$0 >> 2], std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___capacity_28_29_20const($0) + 1 | 0);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_cap_28unsigned_20long_29($0, 0);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_short_size_28unsigned_20long_29($0, 0);
  }
 }
 
 function std____2__numeric_limits_long_20long___min_28_29() {
  i64toi32_i32$HIGH_BITS = -2147483648;
  return 0;
 }
 
 function std____2__numeric_limits_long_20long___max_28_29() {
  i64toi32_i32$HIGH_BITS = 2147483647;
  return -1;
 }
 
 function std____2__numeric_limits_unsigned_20long_20long___max_28_29() {
  i64toi32_i32$HIGH_BITS = -1;
  return -1;
 }
 
 function long_20double_20std____2____do_strtod_long_20double__28char_20const__2c_20char___29($0, $1, $2) {
  var $3 = 0, $4 = 0;
  $3 = global$0 - 16 | 0;
  $4 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  strtold_l($3, $1, $2, std____2____cloc_28_29());
  $1 = HEAP32[$3 >> 2];
  $2 = HEAP32[$3 + 4 >> 2];
  $4 = HEAP32[$3 + 12 >> 2];
  HEAP32[$0 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
  HEAP32[$0 + 12 >> 2] = $4;
  HEAP32[$0 >> 2] = $1;
  HEAP32[$0 + 4 >> 2] = $2;
  $0 = $3 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function bool_20std____2____ptr_in_range_char__28char_20const__2c_20char_20const__2c_20char_20const__29($0, $1, $2) {
  return $0 >>> 0 < $2 >>> 0 & $1 >>> 0 <= $0 >>> 0;
 }
 
 function std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20_____compressed_pair_std____2__allocator_char__20const___28std____2____second_tag_2c_20std____2__allocator_char__20const__29($0, $1) {
  std____2____compressed_pair_elem_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_200_2c_20false_____compressed_pair_elem_28_29($0);
  return $0;
 }
 
 function std____2____shared_weak_count____release_weak_28_29($0) {
  var $1 = 0;
  $1 = $0 + 8 | 0;
  if (!HEAP32[$1 >> 2]) {
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0);
   return;
  }
  if ((long_20std____2____libcpp_atomic_refcount_decrement_long__28long__29($1) | 0) == -1) {
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0)
  }
 }
 
 function std____2____shared_weak_count____get_deleter_28std__type_info_20const__29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return 0;
 }
 
 function std____2____call_once_28unsigned_20long_20volatile__2c_20void__2c_20void_20_28__29_28void__29_29($0, $1) {
  var $2 = 0;
  while (1) {
   if (HEAP32[$0 >> 2] == 1) {
    continue
   }
   break;
  };
  label$3 : {
   label$4 : {
    if (!HEAP32[$0 >> 2]) {
     label$5 : {
      std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_pointer_28char__29($0, 1);
      HEAP32[16874] = 0;
      $2 = HEAP32[16874];
      HEAP32[16874] = 0;
      label$7 : {
       if (($2 | 0) == 1) {
        break label$7
       }
       HEAP32[16874] = 0;
       __invoke_void___22class_std____2__basic_ifstream_22_(1803, $1 | 0);
       $1 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($1 | 0) == 1) {
        break label$7
       }
       HEAP32[16874] = 0;
       $1 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($1 | 0) == 1) {
        break label$7
       }
       HEAP32[$0 >> 2] = -1;
       HEAP32[16874] = 0;
       $1 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($1 | 0) == 1) {
        break label$7
       }
       HEAP32[16874] = 0;
       $1 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($1 | 0) != 1) {
        break label$5
       }
      }
      $1 = __cxa_find_matching_catch_3(0) | 0;
      getTempRet0() | 0;
      __cxa_begin_catch($1 | 0) | 0;
      HEAP32[16874] = 0;
      $1 = HEAP32[16874];
      HEAP32[16874] = 0;
      label$8 : {
       if (($1 | 0) == 1) {
        break label$8
       }
       std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_pointer_28char__29($0, 0);
       HEAP32[16874] = 0;
       $0 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($0 | 0) == 1) {
        break label$8
       }
       HEAP32[16874] = 0;
       $0 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($0 | 0) == 1) {
        break label$8
       }
       HEAP32[16874] = 0;
       __invoke_void(934);
       $0 = HEAP32[16874];
       HEAP32[16874] = 0;
       if (($0 | 0) != 1) {
        break label$3
       }
      }
      $0 = __cxa_find_matching_catch_2() | 0;
      getTempRet0() | 0;
      HEAP32[16874] = 0;
      __invoke_void(23);
      $1 = HEAP32[16874];
      HEAP32[16874] = 0;
      if (($1 | 0) == 1) {
       break label$4
      }
      __resumeException($0 | 0);
      abort();
     }
    }
    return;
   }
   $0 = __cxa_find_matching_catch_3(0) | 0;
   getTempRet0() | 0;
   __clang_call_terminate($0);
  }
  abort();
 }
 
 function std____throw_bad_alloc_28_29() {
  var $0 = 0;
  $0 = __cxa_allocate_exception(4) | 0;
  std__bad_alloc__bad_alloc_28_29($0);
  __cxa_throw($0 | 0, 48740, 2071);
  abort();
 }
 
 function operator_20new_28unsigned_20long_29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $0 = $0 ? $0 : 1;
  label$1 : {
   while (1) {
    $1 = dlmalloc($0);
    if ($1) {
     break label$1
    }
    $1 = HEAP32[17917];
    if ($1) {
     FUNCTION_TABLE[$1]();
     continue;
    }
    break;
   };
   $0 = __cxa_allocate_exception(4) | 0;
   std__bad_alloc__bad_alloc_28_29($0);
   __cxa_throw($0 | 0, 48740, 2071);
   abort();
  }
  return $1 | 0;
 }
 
 function std__exception__exception_28_29($0) {
  HEAP32[$0 >> 2] = 48688;
  return $0;
 }
 
 function std____2____libcpp_refstring____libcpp_refstring_28char_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0;
  $2 = strlen($1);
  $3 = operator_20new_28unsigned_20long_29($2 + 13 | 0);
  HEAP32[$3 + 8 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = $2;
  HEAP32[$3 >> 2] = $2;
  HEAP32[$0 >> 2] = memcpy(std____2____split_buffer_double_2c_20std____2__allocator_double_______end_cap_28_29($3), $1, $2 + 1 | 0);
  return $0 | 0;
 }
 
 function std__logic_error__logic_error_28char_20const__29($0, $1) {
  std__exception__exception_28_29($0);
  HEAP32[$0 >> 2] = 48760;
  HEAP32[16874] = 0;
  __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(2072, $0 + 4 | 0, $1 | 0) | 0;
  $0 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($0 | 0) != 1) {
   return
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  __resumeException($0 | 0);
  abort();
 }
 
 function std__runtime_error__runtime_error_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  std__exception__exception_28_29($0);
  HEAP32[$0 >> 2] = 48780;
  $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_pointer_28_29_20const($1);
  HEAP32[16874] = 0;
  __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(2072, $0 + 4 | 0, $1 | 0) | 0;
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($1 | 0) != 1) {
   return $0 | 0
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  __resumeException($0 | 0);
  abort();
 }
 
 function std__runtime_error__runtime_error_28char_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  std__exception__exception_28_29($0);
  HEAP32[$0 >> 2] = 48780;
  HEAP32[16874] = 0;
  __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(2072, $0 + 4 | 0, $1 | 0) | 0;
  $1 = HEAP32[16874];
  HEAP32[16874] = 0;
  if (($1 | 0) != 1) {
   return $0 | 0
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  __resumeException($0 | 0);
  abort();
 }
 
 function wmemset($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  if ($2) {
   $3 = $0;
   while (1) {
    HEAP32[$3 >> 2] = $1;
    $3 = $3 + 4 | 0;
    $2 = $2 + -1 | 0;
    if ($2) {
     continue
    }
    break;
   };
  }
  return $0 | 0;
 }
 
 function wmemmove($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  label$1 : {
   if ($0 - $1 >> 2 >>> 0 < $2 >>> 0) {
    while (1) {
     $2 = $2 + -1 | 0;
     $3 = $2 << 2;
     HEAP32[$3 + $0 >> 2] = HEAP32[$1 + $3 >> 2];
     if ($2) {
      continue
     }
     break label$1;
    }
   }
   if (!$2) {
    break label$1
   }
   $3 = $0;
   while (1) {
    HEAP32[$3 >> 2] = HEAP32[$1 >> 2];
    $3 = $3 + 4 | 0;
    $1 = $1 + 4 | 0;
    $2 = $2 + -1 | 0;
    if ($2) {
     continue
    }
    break;
   };
  }
  return $0 | 0;
 }
 
 function __strerror_l($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0;
  label$1 : {
   label$2 : {
    while (1) {
     if (HEAPU8[$2 + 46240 | 0] != ($0 | 0)) {
      $3 = 87;
      $2 = $2 + 1 | 0;
      if (($2 | 0) != 87) {
       continue
      }
      break label$2;
     }
     break;
    };
    $3 = $2;
    if ($2) {
     break label$2
    }
    $0 = 46336;
    break label$1;
   }
   $2 = 46336;
   while (1) {
    $4 = HEAPU8[$2 | 0];
    $0 = $2 + 1 | 0;
    $2 = $0;
    if ($4) {
     continue
    }
    $2 = $0;
    $3 = $3 + -1 | 0;
    if ($3) {
     continue
    }
    break;
   };
  }
  $1 = HEAP32[$1 + 20 >> 2];
  if ($1) {
   $1 = __mo_lookup(HEAP32[$1 >> 2], HEAP32[$1 + 4 >> 2], $0)
  } else {
   $1 = 0
  }
  return $1 ? $1 : $0;
 }
 
 function std____2____basic_string_common_true_____throw_length_error_28_29_20const() {
  std____2____throw_length_error_28char_20const__29(48140);
  abort();
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29($0, $1) {
  var $2 = 0, $3 = 0;
  $3 = global$0 - 16 | 0;
  $2 = $3;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  $2 = std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20_____compressed_pair_std____2__allocator_char__20const___28std____2____second_tag_2c_20std____2__allocator_char__20const__29($0, $3 + 8 | 0);
  label$2 : {
   if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____is_long_28_29_20const($1)) {
    HEAP32[$2 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
    $0 = HEAP32[$1 + 4 >> 2];
    HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
    HEAP32[$2 + 4 >> 2] = $0;
    break label$2;
   }
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____init_28char_20const__2c_20unsigned_20long_29($0, HEAP32[$1 >> 2], HEAP32[$1 + 4 >> 2]);
  }
  $0 = $3 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____init_28char_20const__2c_20unsigned_20long_29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0;
  $4 = global$0 - 16 | 0;
  $3 = $4;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  if (4294967279 >= $2 >>> 0) {
   label$3 : {
    if ($2 >>> 0 <= 10) {
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_short_size_28unsigned_20long_29($0, $2);
     $3 = $0;
     break label$3;
    }
    $5 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____recommend_28unsigned_20long_29($2) + 1 | 0;
    $3 = std____2__allocator_unsigned_20char___allocate_28unsigned_20long_2c_20void_20const__29($5);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_pointer_28char__29($0, $3);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_cap_28unsigned_20long_29($0, $5);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_size_28unsigned_20long_29($0, $2);
   }
   std____2__char_traits_char___copy_28char__2c_20char_20const__2c_20unsigned_20long_29($3, $1, $2);
   HEAP8[$4 + 15 | 0] = 0;
   std____2__char_traits_char___assign_28char__2c_20char_20const__29($2 + $3 | 0, $4 + 15 | 0);
   $0 = $4 + 16 | 0;
   if ($0 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $0;
   return;
  }
  std____2____basic_string_common_true_____throw_length_error_28_29_20const();
  abort();
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($0) {
  if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____is_long_28_29_20const($0)) {
   std____2__allocator_traits_std____2__allocator_char__20___deallocate_28std____2__allocator_char___2c_20char__2c_20unsigned_20long_29($0, HEAP32[$0 >> 2], std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_long_cap_28_29_20const($0))
  }
  return $0;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___assign_28char_20const__2c_20unsigned_20long_29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $4 = global$0 - 16 | 0;
  $3 = $4;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($0);
  label$2 : {
   if ($3 >>> 0 >= $2 >>> 0) {
    $5 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_pointer_28_29_20const($0);
    $6 = $5;
    $3 = $2;
    if ($3) {
     memmove($6, $1, $3)
    }
    HEAP8[$4 + 15 | 0] = 0;
    std____2__char_traits_char___assign_28char__2c_20char_20const__29($2 + $5 | 0, $4 + 15 | 0);
    std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____set_size_28unsigned_20long_29($0, $2);
    break label$2;
   }
   $5 = $0;
   $6 = $2 - $3 | 0;
   $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($0);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____grow_by_and_replace_28unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20char_20const__29($5, $3, $6, $0, 0, $0, $2, $1);
  }
  $0 = $4 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____grow_by_and_replace_28unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20char_20const__29($0, $1, $2, $3, $4, $5, $6, $7) {
  var $8 = 0, $9 = 0, $10 = 0;
  $8 = global$0 - 16 | 0;
  $10 = $8;
  if ($8 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $10;
  $9 = -17;
  if ($9 + ($1 ^ -1) >>> 0 >= $2 >>> 0) {
   $10 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_pointer_28_29_20const($0);
   label$3 : {
    if (($9 >>> 1 | 0) + -16 >>> 0 > $1 >>> 0) {
     HEAP32[$8 + 8 >> 2] = $1 << 1;
     HEAP32[$8 + 12 >> 2] = $1 + $2;
     $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____recommend_28unsigned_20long_29(HEAP32[unsigned_20long_20const__20std____2__max_unsigned_20long__28unsigned_20long_20const__2c_20unsigned_20long_20const__29($8 + 12 | 0, $8 + 8 | 0) >> 2]);
     break label$3;
    }
    $2 = $9 + -1 | 0;
   }
   $9 = $2 + 1 | 0;
   $2 = std____2__allocator_unsigned_20char___allocate_28unsigned_20long_2c_20void_20const__29($9);
   if ($4) {
    std____2__char_traits_char___copy_28char__2c_20char_20const__2c_20unsigned_20long_29($2, $10, $4)
   }
   if ($6) {
    std____2__char_traits_char___copy_28char__2c_20char_20const__2c_20unsigned_20long_29($2 + $4 | 0, $7, $6)
   }
   $3 = $3 - $5 | 0;
   $7 = $3 - $4 | 0;
   if ($7) {
    std____2__char_traits_char___copy_28char__2c_20char_20const__2c_20unsigned_20long_29(($2 + $4 | 0) + $6 | 0, ($4 + $10 | 0) + $5 | 0, $7)
   }
   $1 = $1 + 1 | 0;
   if (($1 | 0) != 11) {
    std____2__allocator_traits_std____2__allocator_char__20___deallocate_28std____2__allocator_char___2c_20char__2c_20unsigned_20long_29($0, $10, $1)
   }
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_pointer_28char__29($0, $2);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_cap_28unsigned_20long_29($0, $9);
   $1 = $0;
   $0 = $3 + $6 | 0;
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_size_28unsigned_20long_29($1, $0);
   HEAP8[$8 + 7 | 0] = 0;
   std____2__char_traits_char___assign_28char__2c_20char_20const__29($0 + $2 | 0, $8 + 7 | 0);
   $0 = $8 + 16 | 0;
   if ($0 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $0;
   return;
  }
  std____2____basic_string_common_true_____throw_length_error_28_29_20const();
  abort();
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_2c_20char_29($0, $1) {
  var $2 = 0;
  $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($0);
  if ($2 >>> 0 < $1 >>> 0) {
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___append_28unsigned_20long_2c_20char_29($0, $1 - $2 | 0);
   return;
  }
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____erase_to_end_28unsigned_20long_29($0, $1);
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___append_28unsigned_20long_2c_20char_29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  $4 = global$0 - 16 | 0;
  $2 = $4;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  if ($1) {
   $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($0);
   $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($0);
   $5 = $2 + $1 | 0;
   if ($3 - $2 >>> 0 < $1 >>> 0) {
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____grow_by_28unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_29($0, $3, $5 - $3 | 0, $2, $2)
   }
   $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_pointer_28_29_20const($0);
   std____2__char_traits_char___assign_28char__2c_20unsigned_20long_2c_20char_29($2 + $3 | 0, $1, 0);
   std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____set_size_28unsigned_20long_29($0, $5);
   HEAP8[$4 + 15 | 0] = 0;
   std____2__char_traits_char___assign_28char__2c_20char_20const__29($3 + $5 | 0, $4 + 15 | 0);
  }
  $0 = $4 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____erase_to_end_28unsigned_20long_29($0, $1) {
  var $2 = 0, $3 = 0;
  $2 = global$0 - 16 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  label$2 : {
   if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____is_long_28_29_20const($0)) {
    $3 = HEAP32[$0 >> 2];
    HEAP8[$2 + 15 | 0] = 0;
    std____2__char_traits_char___assign_28char__2c_20char_20const__29($1 + $3 | 0, $2 + 15 | 0);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_size_28unsigned_20long_29($0, $1);
    break label$2;
   }
   HEAP8[$2 + 14 | 0] = 0;
   std____2__char_traits_char___assign_28char__2c_20char_20const__29($0 + $1 | 0, $2 + 14 | 0);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_short_size_28unsigned_20long_29($0, $1);
  }
  $0 = $2 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____grow_by_28unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_29($0, $1, $2, $3, $4) {
  var $5 = 0, $6 = 0, $7 = 0;
  $5 = global$0 - 16 | 0;
  $7 = $5;
  if ($5 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $7;
  $6 = -17;
  if ($6 - $1 >>> 0 >= $2 >>> 0) {
   $7 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_pointer_28_29_20const($0);
   label$3 : {
    if (($6 >>> 1 | 0) + -16 >>> 0 > $1 >>> 0) {
     HEAP32[$5 + 8 >> 2] = $1 << 1;
     HEAP32[$5 + 12 >> 2] = $1 + $2;
     $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____recommend_28unsigned_20long_29(HEAP32[unsigned_20long_20const__20std____2__max_unsigned_20long__28unsigned_20long_20const__2c_20unsigned_20long_20const__29($5 + 12 | 0, $5 + 8 | 0) >> 2]);
     break label$3;
    }
    $2 = $6 + -1 | 0;
   }
   $6 = $2 + 1 | 0;
   $2 = std____2__allocator_unsigned_20char___allocate_28unsigned_20long_2c_20void_20const__29($6);
   if ($4) {
    std____2__char_traits_char___copy_28char__2c_20char_20const__2c_20unsigned_20long_29($2, $7, $4)
   }
   $3 = $3 - $4 | 0;
   if ($3) {
    std____2__char_traits_char___copy_28char__2c_20char_20const__2c_20unsigned_20long_29($2 + $4 | 0, $4 + $7 | 0, $3)
   }
   $1 = $1 + 1 | 0;
   if (($1 | 0) != 11) {
    std____2__allocator_traits_std____2__allocator_char__20___deallocate_28std____2__allocator_char___2c_20char__2c_20unsigned_20long_29($0, $7, $1)
   }
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_pointer_28char__29($0, $2);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_cap_28unsigned_20long_29($0, $6);
   $0 = $5 + 16 | 0;
   if ($0 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $0;
   return;
  }
  std____2____basic_string_common_true_____throw_length_error_28_29_20const();
  abort();
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___append_28char_20const__2c_20unsigned_20long_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0;
  $5 = global$0 - 16 | 0;
  $3 = $5;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  $4 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($0);
  $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($0);
  label$2 : {
   if ($4 - $3 >>> 0 >= $2 >>> 0) {
    if (!$2) {
     break label$2
    }
    $4 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_pointer_28_29_20const($0);
    std____2__char_traits_char___copy_28char__2c_20char_20const__2c_20unsigned_20long_29($4 + $3 | 0, $1, $2);
    $1 = $2 + $3 | 0;
    std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____set_size_28unsigned_20long_29($0, $1);
    HEAP8[$5 + 15 | 0] = 0;
    std____2__char_traits_char___assign_28char__2c_20char_20const__29($1 + $4 | 0, $5 + 15 | 0);
    break label$2;
   }
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____grow_by_and_replace_28unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20char_20const__29($0, $4, ($2 + $3 | 0) - $4 | 0, $3, $3, 0, $2, $1);
  }
  $1 = $5 + 16 | 0;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  return $0 | 0;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___push_back_28char_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0;
  $3 = global$0 - 16 | 0;
  $4 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  HEAP8[$3 + 15 | 0] = $1;
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____is_long_28_29_20const($0)) {
       $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_long_cap_28_29_20const($0) + -1 | 0;
       $4 = HEAP32[$0 + 4 >> 2];
       if (($2 | 0) == ($4 | 0)) {
        break label$5
       }
       break label$3;
      }
      $4 = 10;
      $2 = 10;
      $1 = HEAPU8[$0 + 11 | 0];
      if (($1 | 0) != 10) {
       break label$4
      }
     }
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____grow_by_28unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_29($0, $2, 1, $2, $2);
     $1 = $4;
     if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____is_long_28_29_20const($0)) {
      break label$3
     }
    }
    $2 = $0;
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_short_size_28unsigned_20long_29($0, $1 + 1 | 0);
    break label$2;
   }
   $2 = HEAP32[$0 >> 2];
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_size_28unsigned_20long_29($0, $4 + 1 | 0);
   $1 = $4;
  }
  $0 = $1 + $2 | 0;
  std____2__char_traits_char___assign_28char__2c_20char_20const__29($0, $3 + 15 | 0);
  HEAP8[$3 + 14 | 0] = 0;
  std____2__char_traits_char___assign_28char__2c_20char_20const__29($0 + 1 | 0, $3 + 14 | 0);
  $0 = $3 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____init_28unsigned_20long_2c_20char_29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0;
  $4 = global$0 - 16 | 0;
  $3 = $4;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  if (4294967279 >= $1 >>> 0) {
   label$3 : {
    if ($1 >>> 0 <= 10) {
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_short_size_28unsigned_20long_29($0, $1);
     $3 = $0;
     break label$3;
    }
    $5 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____recommend_28unsigned_20long_29($1) + 1 | 0;
    $3 = std____2__allocator_unsigned_20char___allocate_28unsigned_20long_2c_20void_20const__29($5);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_pointer_28char__29($0, $3);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_cap_28unsigned_20long_29($0, $5);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_size_28unsigned_20long_29($0, $1);
   }
   std____2__char_traits_char___assign_28char__2c_20unsigned_20long_2c_20char_29($3, $1, $2);
   HEAP8[$4 + 15 | 0] = 0;
   std____2__char_traits_char___assign_28char__2c_20char_20const__29($1 + $3 | 0, $4 + 15 | 0);
   $0 = $4 + 16 | 0;
   if ($0 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $0;
   return;
  }
  std____2____basic_string_common_true_____throw_length_error_28_29_20const();
  abort();
 }
 
 function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____init_28wchar_t_20const__2c_20unsigned_20long_29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0;
  $4 = global$0 - 16 | 0;
  $3 = $4;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  if (1073741807 >= $2 >>> 0) {
   label$3 : {
    if ($2 >>> 0 <= 1) {
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_short_size_28unsigned_20long_29($0, $2);
     $3 = $0;
     break label$3;
    }
    $5 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____recommend_28unsigned_20long_29($2) + 1 | 0;
    $3 = std____2__allocator_wchar_t___allocate_28unsigned_20long_2c_20void_20const__29($5);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_pointer_28char__29($0, $3);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_cap_28unsigned_20long_29($0, $5);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_size_28unsigned_20long_29($0, $2);
   }
   std____2__char_traits_wchar_t___copy_28wchar_t__2c_20wchar_t_20const__2c_20unsigned_20long_29($3, $1, $2);
   HEAP32[$4 + 12 >> 2] = 0;
   std____2____compressed_pair_elem__IO_FILE__2c_200_2c_20false_____compressed_pair_elem__IO_FILE___2c_20void__28_IO_FILE___29(($2 << 2) + $3 | 0, $4 + 12 | 0);
   $0 = $4 + 16 | 0;
   if ($0 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $0;
   return;
  }
  std____2____basic_string_common_true_____throw_length_error_28_29_20const();
  abort();
 }
 
 function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___assign_28wchar_t_20const__2c_20unsigned_20long_29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $4 = global$0 - 16 | 0;
  $3 = $4;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  $3 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___capacity_28_29_20const($0);
  label$2 : {
   if ($3 >>> 0 >= $2 >>> 0) {
    $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_pointer_28_29_20const($0);
    std____2__char_traits_wchar_t___move_28wchar_t__2c_20wchar_t_20const__2c_20unsigned_20long_29($3, $1, $2);
    HEAP32[$4 + 12 >> 2] = 0;
    std____2____compressed_pair_elem__IO_FILE__2c_200_2c_20false_____compressed_pair_elem__IO_FILE___2c_20void__28_IO_FILE___29($3 + ($2 << 2) | 0, $4 + 12 | 0);
    std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____set_size_28unsigned_20long_29($0, $2);
    break label$2;
   }
   $5 = $0;
   $6 = $2 - $3 | 0;
   $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($0);
   std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____grow_by_and_replace_28unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20wchar_t_20const__29($5, $3, $6, $0, 0, $0, $2, $1);
  }
  $0 = $4 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function std____2__char_traits_wchar_t___move_28wchar_t__2c_20wchar_t_20const__2c_20unsigned_20long_29($0, $1, $2) {
  label$1 : {
   if ($2) {
    HEAP32[16874] = 0;
    wmemmove($0, $1, $2);
    $0 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($0 | 0) == 1) {
     break label$1
    }
   }
   return;
  }
  $0 = __cxa_find_matching_catch_3(0) | 0;
  getTempRet0() | 0;
  __clang_call_terminate($0);
  abort();
 }
 
 function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____grow_by_and_replace_28unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20wchar_t_20const__29($0, $1, $2, $3, $4, $5, $6, $7) {
  var $8 = 0, $9 = 0, $10 = 0;
  $8 = global$0 - 16 | 0;
  $10 = $8;
  if ($8 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $10;
  $9 = 1073741807;
  if ($9 + ($1 ^ -1) >>> 0 >= $2 >>> 0) {
   $10 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_pointer_28_29_20const($0);
   label$3 : {
    if (($9 >>> 1 | 0) + -16 >>> 0 > $1 >>> 0) {
     HEAP32[$8 + 8 >> 2] = $1 << 1;
     HEAP32[$8 + 12 >> 2] = $1 + $2;
     $2 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____recommend_28unsigned_20long_29(HEAP32[unsigned_20long_20const__20std____2__max_unsigned_20long__28unsigned_20long_20const__2c_20unsigned_20long_20const__29($8 + 12 | 0, $8 + 8 | 0) >> 2]);
     break label$3;
    }
    $2 = $9 + -1 | 0;
   }
   $9 = $2 + 1 | 0;
   $2 = std____2__allocator_wchar_t___allocate_28unsigned_20long_2c_20void_20const__29($9);
   if ($4) {
    std____2__char_traits_wchar_t___copy_28wchar_t__2c_20wchar_t_20const__2c_20unsigned_20long_29($2, $10, $4)
   }
   if ($6) {
    std____2__char_traits_wchar_t___copy_28wchar_t__2c_20wchar_t_20const__2c_20unsigned_20long_29(($4 << 2) + $2 | 0, $7, $6)
   }
   $3 = $3 - $5 | 0;
   $7 = $3 - $4 | 0;
   if ($7) {
    $4 = $4 << 2;
    std____2__char_traits_wchar_t___copy_28wchar_t__2c_20wchar_t_20const__2c_20unsigned_20long_29(($4 + $2 | 0) + ($6 << 2) | 0, ($4 + $10 | 0) + ($5 << 2) | 0, $7);
   }
   $1 = $1 + 1 | 0;
   if (($1 | 0) != 2) {
    std____2__allocator_traits_std____2__allocator_char__20___deallocate_28std____2__allocator_char___2c_20char__2c_20unsigned_20long_29($0, $10, $1)
   }
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_pointer_28char__29($0, $2);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_cap_28unsigned_20long_29($0, $9);
   $1 = $0;
   $0 = $3 + $6 | 0;
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_size_28unsigned_20long_29($1, $0);
   HEAP32[$8 + 4 >> 2] = 0;
   std____2____compressed_pair_elem__IO_FILE__2c_200_2c_20false_____compressed_pair_elem__IO_FILE___2c_20void__28_IO_FILE___29($2 + ($0 << 2) | 0, $8 + 4 | 0);
   $0 = $8 + 16 | 0;
   if ($0 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $0;
   return;
  }
  std____2____basic_string_common_true_____throw_length_error_28_29_20const();
  abort();
 }
 
 function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____grow_by_28unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_29($0, $1, $2, $3, $4) {
  var $5 = 0, $6 = 0, $7 = 0;
  $5 = global$0 - 16 | 0;
  $7 = $5;
  if ($5 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $7;
  $6 = 1073741807;
  if ($6 - $1 >>> 0 >= $2 >>> 0) {
   $7 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_pointer_28_29_20const($0);
   label$3 : {
    if (($6 >>> 1 | 0) + -16 >>> 0 > $1 >>> 0) {
     HEAP32[$5 + 8 >> 2] = $1 << 1;
     HEAP32[$5 + 12 >> 2] = $1 + $2;
     $2 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____recommend_28unsigned_20long_29(HEAP32[unsigned_20long_20const__20std____2__max_unsigned_20long__28unsigned_20long_20const__2c_20unsigned_20long_20const__29($5 + 12 | 0, $5 + 8 | 0) >> 2]);
     break label$3;
    }
    $2 = $6 + -1 | 0;
   }
   $6 = $2 + 1 | 0;
   $2 = std____2__allocator_wchar_t___allocate_28unsigned_20long_2c_20void_20const__29($6);
   if ($4) {
    std____2__char_traits_wchar_t___copy_28wchar_t__2c_20wchar_t_20const__2c_20unsigned_20long_29($2, $7, $4)
   }
   $3 = $3 - $4 | 0;
   if ($3) {
    $4 = $4 << 2;
    std____2__char_traits_wchar_t___copy_28wchar_t__2c_20wchar_t_20const__2c_20unsigned_20long_29($4 + $2 | 0, $4 + $7 | 0, $3);
   }
   $1 = $1 + 1 | 0;
   if (($1 | 0) != 2) {
    std____2__allocator_traits_std____2__allocator_char__20___deallocate_28std____2__allocator_char___2c_20char__2c_20unsigned_20long_29($0, $7, $1)
   }
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_pointer_28char__29($0, $2);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_cap_28unsigned_20long_29($0, $6);
   $0 = $5 + 16 | 0;
   if ($0 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $0;
   return;
  }
  std____2____basic_string_common_true_____throw_length_error_28_29_20const();
  abort();
 }
 
 function std____2__char_traits_wchar_t___assign_28wchar_t__2c_20unsigned_20long_2c_20wchar_t_29($0, $1, $2) {
  label$1 : {
   if ($1) {
    HEAP32[16874] = 0;
    wmemset($0, $2, $1);
    $0 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($0 | 0) == 1) {
     break label$1
    }
   }
   return;
  }
  $0 = __cxa_find_matching_catch_3(0) | 0;
  getTempRet0() | 0;
  __clang_call_terminate($0);
  abort();
 }
 
 function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___append_28wchar_t_20const__2c_20unsigned_20long_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0;
  $5 = global$0 - 16 | 0;
  $3 = $5;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  $4 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___capacity_28_29_20const($0);
  $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($0);
  label$2 : {
   if ($4 - $3 >>> 0 >= $2 >>> 0) {
    if (!$2) {
     break label$2
    }
    $4 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_pointer_28_29_20const($0);
    std____2__char_traits_wchar_t___copy_28wchar_t__2c_20wchar_t_20const__2c_20unsigned_20long_29($4 + ($3 << 2) | 0, $1, $2);
    $1 = $2 + $3 | 0;
    std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____set_size_28unsigned_20long_29($0, $1);
    HEAP32[$5 + 12 >> 2] = 0;
    std____2____compressed_pair_elem__IO_FILE__2c_200_2c_20false_____compressed_pair_elem__IO_FILE___2c_20void__28_IO_FILE___29($4 + ($1 << 2) | 0, $5 + 12 | 0);
    break label$2;
   }
   std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____grow_by_and_replace_28unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20wchar_t_20const__29($0, $4, ($2 + $3 | 0) - $4 | 0, $3, $3, 0, $2, $1);
  }
  $1 = $5 + 16 | 0;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  return $0 | 0;
 }
 
 function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___push_back_28wchar_t_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0;
  $3 = global$0 - 16 | 0;
  $4 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  HEAP32[$3 + 12 >> 2] = $1;
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____is_long_28_29_20const($0)) {
       $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_long_cap_28_29_20const($0) + -1 | 0;
       $4 = HEAP32[$0 + 4 >> 2];
       if (($2 | 0) == ($4 | 0)) {
        break label$5
       }
       break label$3;
      }
      $4 = 1;
      $2 = 1;
      $1 = HEAPU8[$0 + 11 | 0];
      if (($1 | 0) != 1) {
       break label$4
      }
     }
     std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____grow_by_28unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_29($0, $2, 1, $2, $2);
     $1 = $4;
     if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____is_long_28_29_20const($0)) {
      break label$3
     }
    }
    $2 = $0;
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_short_size_28unsigned_20long_29($0, $1 + 1 | 0);
    break label$2;
   }
   $2 = HEAP32[$0 >> 2];
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_size_28unsigned_20long_29($0, $4 + 1 | 0);
   $1 = $4;
  }
  $0 = ($1 << 2) + $2 | 0;
  std____2____compressed_pair_elem__IO_FILE__2c_200_2c_20false_____compressed_pair_elem__IO_FILE___2c_20void__28_IO_FILE___29($0, $3 + 12 | 0);
  HEAP32[$3 + 8 >> 2] = 0;
  std____2____compressed_pair_elem__IO_FILE__2c_200_2c_20false_____compressed_pair_elem__IO_FILE___2c_20void__28_IO_FILE___29($0 + 4 | 0, $3 + 8 | 0);
  $0 = $3 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____init_28unsigned_20long_2c_20wchar_t_29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0;
  $4 = global$0 - 16 | 0;
  $3 = $4;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  if (1073741807 >= $1 >>> 0) {
   label$3 : {
    if ($1 >>> 0 <= 1) {
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_short_size_28unsigned_20long_29($0, $1);
     $3 = $0;
     break label$3;
    }
    $5 = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____recommend_28unsigned_20long_29($1) + 1 | 0;
    $3 = std____2__allocator_wchar_t___allocate_28unsigned_20long_2c_20void_20const__29($5);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_pointer_28char__29($0, $3);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_cap_28unsigned_20long_29($0, $5);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_size_28unsigned_20long_29($0, $1);
   }
   std____2__char_traits_wchar_t___assign_28wchar_t__2c_20unsigned_20long_2c_20wchar_t_29($3, $1, $2);
   HEAP32[$4 + 12 >> 2] = 0;
   std____2____compressed_pair_elem__IO_FILE__2c_200_2c_20false_____compressed_pair_elem__IO_FILE___2c_20void__28_IO_FILE___29(($1 << 2) + $3 | 0, $4 + 12 | 0);
   $0 = $4 + 16 | 0;
   if ($0 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $0;
   return;
  }
  std____2____basic_string_common_true_____throw_length_error_28_29_20const();
  abort();
 }
 
 function strerror_r($0, $1) {
  var $2 = 0;
  $0 = __strerror_l($0, HEAP32[16279]);
  $2 = strlen($0);
  if ($2 >>> 0 >= 1024) {
   memcpy($1, $0, 1023);
   HEAP8[$1 + 1023 | 0] = 0;
   return 68;
  }
  memcpy($1, $0, $2 + 1 | 0);
  return 0;
 }
 
 function std____2__error_category__default_error_condition_28int_29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20_____allocator_destructor_28std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20___2c_20unsigned_20long_29($0, $2, $1);
 }
 
 function std____2__error_category__equivalent_28int_2c_20std____2__error_condition_20const__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0;
  $3 = global$0 - 16 | 0;
  $4 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 12 >> 2]]($3 + 8 | 0, $0, $1);
  $0 = $3 + 8 | 0;
  if (std____2__char_traits_char___eq_int_type_28int_2c_20int_29(HEAP32[$0 + 4 >> 2], HEAP32[$2 + 4 >> 2])) {
   $0 = HEAP32[$0 >> 2] == HEAP32[$2 >> 2]
  } else {
   $0 = 0
  }
  $1 = $3 + 16 | 0;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  return $0 | 0;
 }
 
 function std____2__error_category__equivalent_28std____2__error_code_20const__2c_20int_29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  if (std____2__char_traits_char___eq_int_type_28int_2c_20int_29($0, HEAP32[$1 + 4 >> 2])) {
   $0 = ($2 | 0) == HEAP32[$1 >> 2]
  } else {
   $0 = 0
  }
  return $0 | 0;
 }
 
 function std____2___28anonymous_20namespace_29__do_strerror_r_28int_29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0;
  $2 = global$0 - 1040 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  $4 = HEAP32[16596];
  $3 = std____2___28anonymous_20namespace_29__handle_strerror_r_return_28int_2c_20char__29(strerror_r($1, $2 + 16 | 0), $2 + 16 | 0);
  if (!HEAPU8[$3 | 0]) {
   HEAP32[$2 >> 2] = $1;
   snprintf($2 + 16 | 0, 1024, 48284, $2);
   $3 = $2 + 16 | 0;
  }
  HEAP32[16596] = $4;
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28char_20const__29($0, $3);
  $0 = $2 + 1040 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function std____2___28anonymous_20namespace_29__handle_strerror_r_return_28int_2c_20char__29($0, $1) {
  var $2 = 0;
  $2 = $0 + 1 | 0;
  label$1 : {
   if ($2 >>> 0 <= 1) {
    if (!($2 - 1)) {
     break label$1
    }
    $0 = HEAP32[16596];
   }
   $1 = 48176;
   if (($0 | 0) == 28) {
    break label$1
   }
   abort();
   abort();
  }
  return $1;
 }
 
 function std____2__system_error____init_28std____2__error_code_20const__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0;
  $3 = global$0 - 16 | 0;
  $4 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  label$2 : {
   if (HEAP32[$1 >> 2]) {
    if (!std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___empty_28_29_20const($2)) {
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___append_28char_20const__2c_20unsigned_20long_29($2, 48153, strlen(48153))
    }
    $4 = HEAP32[$1 + 4 >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 24 >> 2]]($3, $4, HEAP32[$1 >> 2]);
    HEAP32[16874] = 0;
    __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(2075, $2 | 0, $3 | 0) | 0;
    $1 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($1 | 0) == 1) {
     break label$2
    }
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($3);
   }
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____29($0, $2);
   $0 = $3 + 16 | 0;
   if ($0 >>> 0 < global$2 >>> 0) {
    __handle_stack_overflow()
   }
   global$0 = $0;
   return;
  }
  $0 = __cxa_find_matching_catch_2() | 0;
  getTempRet0() | 0;
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($3);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator___28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___append_28char_20const__2c_20unsigned_20long_29($0, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_pointer_28_29_20const($1), std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($1)) | 0;
 }
 
 function std____2__system_error__system_error_28std____2__error_code_2c_20char_20const__29($0, $1, $2) {
  var $3 = 0, $4 = 0;
  $3 = global$0 - 32 | 0;
  $4 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28char_20const__29($3, $2);
  HEAP32[16874] = 0;
  __invoke_void_i8__i32_i32(2076, $3 + 16 | 0, $1 | 0, $2 | 0);
  $4 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$2 : {
   label$3 : {
    if (($4 | 0) != 1) {
     HEAP32[16874] = 0;
     __invoke___22class_std____2__basic_ostream_22____22class_std____2__basic_ostream_22__i8_(2077, $0 | 0, $3 + 16 | 0) | 0;
     $4 = HEAP32[16874];
     HEAP32[16874] = 0;
     if (($4 | 0) == 1) {
      break label$3
     }
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($3 + 16 | 0);
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($2);
     HEAP32[$0 >> 2] = 48164;
     $2 = HEAP32[$1 + 4 >> 2];
     HEAP32[$0 + 8 >> 2] = HEAP32[$1 >> 2];
     HEAP32[$0 + 12 >> 2] = $2;
     $0 = $3 + 32 | 0;
     if ($0 >>> 0 < global$2 >>> 0) {
      __handle_stack_overflow()
     }
     global$0 = $0;
     return;
    }
    $0 = __cxa_find_matching_catch_2() | 0;
    getTempRet0() | 0;
    break label$2;
   }
   $0 = __cxa_find_matching_catch_2() | 0;
   getTempRet0() | 0;
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($3 + 16 | 0);
  }
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($2);
  __resumeException($0 | 0);
  abort();
 }
 
 function std____2__system_error___system_error_28_29($0) {
  $0 = $0 | 0;
  std__runtime_error___runtime_error_28_29($0);
  return $0 | 0;
 }
 
 function std____2__system_error___system_error_28_29_1($0) {
  $0 = $0 | 0;
  dlfree(std____2__system_error___system_error_28_29($0));
 }
 
 function std____2____vector_base_common_true_____throw_length_error_28_29_20const() {
  std____2____throw_length_error_28char_20const__29(48301);
  abort();
 }
 
 function abort_message($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0;
  $2 = global$0 - 16 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  HEAP32[$2 + 12 >> 2] = $1;
  $2 = HEAP32[7458];
  vfprintf($2, $0, $1);
  fputc($2);
  abort();
  abort();
 }
 
 function __cxa_guard_acquire($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  $0 = __cxxabiv1___28anonymous_20namespace_29__GuardObject___cxxabiv1___28anonymous_20namespace_29__InitByteNoThreads___cxa_guard_acquire_28_29(__cxxabiv1___28anonymous_20namespace_29__InitByteNoThreads__InitByteNoThreads_28unsigned_20int__29($1, $0));
  $1 = $1 + 16 | 0;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  return $0;
 }
 
 function __cxxabiv1___28anonymous_20namespace_29__InitByteNoThreads__InitByteNoThreads_28unsigned_20int__29($0, $1) {
  HEAP32[$0 + 12 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = $1;
  HEAP32[$0 >> 2] = $1;
  HEAP32[$0 + 8 >> 2] = $1 + 1;
  return $0;
 }
 
 function __cxxabiv1___28anonymous_20namespace_29__GuardObject___cxxabiv1___28anonymous_20namespace_29__InitByteNoThreads___cxa_guard_acquire_28_29($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  $2 = 0;
  if (HEAPU8[HEAP32[std____2____compressed_pair_elem_std____2__allocator_double___2c_201_2c_20false_____compressed_pair_elem_std____2__allocator_double___2c_20void__28std____2__allocator_double___29($1 + 8 | 0, HEAP32[$0 + 4 >> 2]) >> 2]] != 1) {
   $2 = __cxxabiv1___28anonymous_20namespace_29__InitByteNoThreads__acquire_init_byte_28_29($0)
  }
  $0 = $1 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
  return $2;
 }
 
 function __cxxabiv1___28anonymous_20namespace_29__InitByteNoThreads__acquire_init_byte_28_29($0) {
  var $1 = 0;
  label$1 : {
   $0 = HEAP32[$0 + 8 >> 2];
   $1 = HEAPU8[$0 | 0];
   if (($1 | 0) != 1) {
    if ($1 & 2) {
     break label$1
    }
    HEAP8[$0 | 0] = 2;
    $0 = 1;
   } else {
    $0 = 0
   }
   return $0;
  }
  abort_message(48308, 0);
  abort();
 }
 
 function __cxa_guard_release($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  __cxxabiv1___28anonymous_20namespace_29__GuardObject___cxxabiv1___28anonymous_20namespace_29__InitByteNoThreads___cxa_guard_release_28_29(__cxxabiv1___28anonymous_20namespace_29__InitByteNoThreads__InitByteNoThreads_28unsigned_20int__29($1, $0));
  $0 = $1 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function __cxxabiv1___28anonymous_20namespace_29__GuardObject___cxxabiv1___28anonymous_20namespace_29__InitByteNoThreads___cxa_guard_release_28_29($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  HEAP8[HEAP32[std____2____compressed_pair_elem_std____2__allocator_double___2c_201_2c_20false_____compressed_pair_elem_std____2__allocator_double___2c_20void__28std____2__allocator_double___29($1 + 8 | 0, HEAP32[$0 + 4 >> 2]) >> 2]] = 1;
  HEAP8[HEAP32[$0 + 8 >> 2]] = 1;
  $0 = $1 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function __cxa_guard_abort($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  HEAP8[HEAP32[__cxxabiv1___28anonymous_20namespace_29__InitByteNoThreads__InitByteNoThreads_28unsigned_20int__29($1, $0) + 8 >> 2]] = 0;
  $0 = $1 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function __cxa_get_globals_fast() {
  return 71660;
 }
 
 function demangling_terminate_handler_28_29() {
  var $0 = 0, $1 = 0, $2 = 0, $3 = 0;
  $0 = global$0 - 48 | 0;
  $1 = $0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  $1 = HEAP32[17915];
  label$2 : {
   label$3 : {
    if (!$1) {
     break label$3
    }
    $2 = $1 + 48 | 0;
    if (__cxxabiv1____isOurExceptionClass_28_Unwind_Exception_20const__29($2)) {
     $3 = $0;
     label$5 : {
      if ((__cxxabiv1____getExceptionClass_28_Unwind_Exception_20const__29($2) | 0) == 1126902529 & (i64toi32_i32$HIGH_BITS | 0) == 1129074247) {
       $2 = HEAP32[$1 + 44 >> 2];
       break label$5;
      }
      $2 = $1 + 80 | 0;
     }
     HEAP32[$3 + 44 >> 2] = $2;
     $2 = HEAP32[$1 >> 2];
     $1 = HEAP32[$2 + 4 >> 2];
     if (FUNCTION_TABLE[HEAP32[HEAP32[12179] + 16 >> 2]](48716, $2, $0 + 44 | 0)) {
      break label$2
     }
     HEAP32[$0 + 20 >> 2] = $1;
     HEAP32[$0 + 16 >> 2] = HEAP32[16331];
     abort_message(48407, $0 + 16 | 0);
     abort();
    }
    HEAP32[$0 + 32 >> 2] = HEAP32[16331];
    abort_message(48448, $0 + 32 | 0);
    abort();
   }
   abort_message(48486, 0);
   abort();
  }
  $2 = HEAP32[16331];
  $3 = HEAP32[$0 + 44 >> 2];
  HEAP32[$0 + 8 >> 2] = FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 8 >> 2]]($3);
  HEAP32[$0 + 4 >> 2] = $1;
  HEAP32[$0 >> 2] = $2;
  abort_message(48362, $0);
  abort();
 }
 
 function __cxxabiv1____getExceptionClass_28_Unwind_Exception_20const__29($0) {
  i64toi32_i32$HIGH_BITS = HEAP32[$0 + 4 >> 2];
  return HEAP32[$0 >> 2];
 }
 
 function __cxxabiv1____isOurExceptionClass_28_Unwind_Exception_20const__29($0) {
  return (__cxxabiv1____getExceptionClass_28_Unwind_Exception_20const__29($0) & -256) == 1126902528 & (i64toi32_i32$HIGH_BITS | 0) == 1129074247;
 }
 
 function std__terminate_28_29() {
  var $0 = 0;
  HEAP32[16874] = 0;
  $0 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$1 : {
   if (($0 | 0) != 1) {
    $0 = HEAP32[17915];
    if (!$0) {
     break label$1
    }
    if (!__cxxabiv1____isOurExceptionClass_28_Unwind_Exception_20const__29($0 + 48 | 0)) {
     break label$1
    }
    std____terminate_28void_20_28__29_28_29_29(HEAP32[$0 + 12 >> 2]);
    abort();
   }
   $0 = __cxa_find_matching_catch_3(0) | 0;
   getTempRet0() | 0;
   __clang_call_terminate($0);
   abort();
  }
  std____terminate_28void_20_28__29_28_29_29(HEAP32[16330]);
  abort();
 }
 
 function std____terminate_28void_20_28__29_28_29_29($0) {
  var $1 = 0;
  HEAP32[16874] = 0;
  __invoke_void($0 | 0);
  $0 = HEAP32[16874];
  HEAP32[16874] = 0;
  label$1 : {
   label$2 : {
    if (($0 | 0) != 1) {
     HEAP32[16874] = 0;
     __invoke_void___22class_std____2__vector_13_22__i32(2082, 48507, 0);
     $0 = HEAP32[16874];
     HEAP32[16874] = 0;
     if (($0 | 0) != 1) {
      break label$2
     }
    }
    $0 = __cxa_find_matching_catch_3(0) | 0;
    getTempRet0() | 0;
    __cxa_begin_catch($0 | 0) | 0;
    HEAP32[16874] = 0;
    __invoke_void___22class_std____2__vector_13_22__i32(2082, 48547, 0);
    $0 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($0 | 0) != 1) {
     break label$2
    }
    $0 = __cxa_find_matching_catch_3(0) | 0;
    getTempRet0() | 0;
    HEAP32[16874] = 0;
    __invoke_void(23);
    $1 = HEAP32[16874];
    HEAP32[16874] = 0;
    if (($1 | 0) == 1) {
     break label$1
    }
    __clang_call_terminate($0);
   }
   abort();
  }
  $0 = __cxa_find_matching_catch_3(0) | 0;
  getTempRet0() | 0;
  __clang_call_terminate($0);
  abort();
 }
 
 function __cxa_pure_virtual() {
  abort_message(48597, 0);
  abort();
 }
 
 function std__exception__what_28_29_20const($0) {
  $0 = $0 | 0;
  return 48627;
 }
 
 function std__bad_alloc__bad_alloc_28_29($0) {
  std__exception__exception_28_29($0);
  HEAP32[$0 >> 2] = 48652;
 }
 
 function std__bad_alloc__what_28_29_20const($0) {
  $0 = $0 | 0;
  return 48664;
 }
 
 function std__logic_error___logic_error_28_29($0) {
  $0 = $0 | 0;
  HEAP32[$0 >> 2] = 48760;
  std____2____libcpp_refstring_____libcpp_refstring_28_29($0 + 4 | 0);
  return $0 | 0;
 }
 
 function std____2____libcpp_refstring_____libcpp_refstring_28_29($0) {
  label$1 : {
   $0 = HEAP32[$0 >> 2] + -12 | 0;
   if ((long_20std____2____libcpp_atomic_refcount_decrement_long__28long__29($0 + 8 | 0) | 0) > -1) {
    break label$1
   }
   dlfree($0);
  }
 }
 
 function std__logic_error___logic_error_28_29_1($0) {
  $0 = $0 | 0;
  dlfree(std__logic_error___logic_error_28_29($0));
 }
 
 function std__runtime_error___runtime_error_28_29($0) {
  $0 = $0 | 0;
  HEAP32[$0 >> 2] = 48780;
  std____2____libcpp_refstring_____libcpp_refstring_28_29($0 + 4 | 0);
  return $0 | 0;
 }
 
 function std__runtime_error___runtime_error_28_29_1($0) {
  $0 = $0 | 0;
  dlfree(std__runtime_error___runtime_error_28_29($0));
 }
 
 function std__length_error___length_error_28_29($0) {
  $0 = $0 | 0;
  std__logic_error___logic_error_28_29($0);
  dlfree($0);
 }
 
 function std__bad_cast__what_28_29_20const($0) {
  $0 = $0 | 0;
  return 48924;
 }
 
 function __cxxabiv1____fundamental_type_info__can_catch_28__cxxabiv1____shim_type_info_20const__2c_20void___29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  return is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, $1, 0) | 0;
 }
 
 function is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, $1, $2) {
  if (!$2) {
   return std__type_info__operator___28std__type_info_20const__29_20const($0, $1)
  }
  if (($0 | 0) == ($1 | 0)) {
   return 1
  }
  return !strcmp(HEAP32[$0 + 4 >> 2], HEAP32[$1 + 4 >> 2]);
 }
 
 function __cxxabiv1____class_type_info__can_catch_28__cxxabiv1____shim_type_info_20const__2c_20void___29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0;
  $3 = global$0 + -64 | 0;
  $4 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  $4 = 1;
  label$2 : {
   if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, $1, 0)) {
    break label$2
   }
   $4 = 0;
   if (!$1) {
    break label$2
   }
   $1 = __dynamic_cast($1, 49068);
   if (!$1) {
    break label$2
   }
   HEAP32[$3 + 20 >> 2] = -1;
   HEAP32[$3 + 16 >> 2] = $0;
   HEAP32[$3 + 12 >> 2] = 0;
   HEAP32[$3 + 8 >> 2] = $1;
   memset($3 + 24 | 0, 0, 39);
   HEAP32[$3 + 56 >> 2] = 1;
   FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 28 >> 2]]($1, $3 + 8 | 0, HEAP32[$2 >> 2], 1);
   if (HEAP32[$3 + 32 >> 2] != 1) {
    break label$2
   }
   HEAP32[$2 >> 2] = HEAP32[$3 + 24 >> 2];
   $4 = 1;
  }
  $0 = $3 - -64 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
  return $4 | 0;
 }
 
 function __dynamic_cast($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  $2 = global$0 + -64 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  $4 = HEAP32[$0 >> 2];
  $3 = HEAP32[$4 + -4 >> 2];
  $5 = HEAP32[$4 + -8 >> 2];
  HEAP32[$2 + 20 >> 2] = 0;
  HEAP32[$2 + 16 >> 2] = 49020;
  HEAP32[$2 + 12 >> 2] = $0;
  HEAP32[$2 + 8 >> 2] = $1;
  $4 = 0;
  memset($2 + 24 | 0, 0, 39);
  $0 = $0 + $5 | 0;
  label$2 : {
   if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($3, $1, 0)) {
    HEAP32[$2 + 56 >> 2] = 1;
    FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 20 >> 2]]($3, $2 + 8 | 0, $0, $0, 1, 0);
    $4 = HEAP32[$2 + 32 >> 2] == 1 ? $0 : 0;
    break label$2;
   }
   FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 24 >> 2]]($3, $2 + 8 | 0, $0, 1, 0);
   $0 = HEAP32[$2 + 44 >> 2];
   if ($0 >>> 0 > 1) {
    break label$2
   }
   if ($0 - 1) {
    $4 = HEAP32[$2 + 48 >> 2] == 1 ? (HEAP32[$2 + 36 >> 2] == 1 ? (HEAP32[$2 + 40 >> 2] == 1 ? HEAP32[$2 + 28 >> 2] : 0) : 0) : 0;
    break label$2;
   }
   if (HEAP32[$2 + 48 >> 2] | HEAP32[$2 + 36 >> 2] != 1 | HEAP32[$2 + 40 >> 2] != 1 ? HEAP32[$2 + 32 >> 2] != 1 : 0) {
    break label$2
   }
   $4 = HEAP32[$2 + 24 >> 2];
  }
  $0 = $2 - -64 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
  return $4;
 }
 
 function __cxxabiv1____class_type_info__process_found_base_class_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($0, $1, $2) {
  var $3 = 0;
  $3 = HEAP32[$0 + 16 >> 2];
  if (!$3) {
   HEAP32[$0 + 36 >> 2] = 1;
   HEAP32[$0 + 24 >> 2] = $2;
   HEAP32[$0 + 16 >> 2] = $1;
   return;
  }
  label$2 : {
   if (($1 | 0) == ($3 | 0)) {
    if (HEAP32[$0 + 24 >> 2] != 2) {
     break label$2
    }
    HEAP32[$0 + 24 >> 2] = $2;
    return;
   }
   HEAP8[$0 + 54 | 0] = 1;
   HEAP32[$0 + 24 >> 2] = 2;
   HEAP32[$0 + 36 >> 2] = HEAP32[$0 + 36 >> 2] + 1;
  }
 }
 
 function __cxxabiv1____class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[$1 + 8 >> 2], 0)) {
   __cxxabiv1____class_type_info__process_found_base_class_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($1, $2, $3)
  }
 }
 
 function __cxxabiv1____si_class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[$1 + 8 >> 2], 0)) {
   __cxxabiv1____class_type_info__process_found_base_class_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($1, $2, $3);
   return;
  }
  $0 = HEAP32[$0 + 8 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($0, $1, $2, $3);
 }
 
 function __cxxabiv1____base_class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0;
  $5 = HEAP32[$0 + 4 >> 2];
  $0 = HEAP32[$0 >> 2];
  $6 = $0;
  $7 = $1;
  $4 = 0;
  label$1 : {
   if (!$2) {
    break label$1
   }
   $1 = $5 >> 8;
   $4 = $1;
   if (!($5 & 1)) {
    break label$1
   }
   $4 = HEAP32[$1 + HEAP32[$2 >> 2] >> 2];
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($6, $7, $4 + $2 | 0, $5 & 2 ? $3 : 2);
 }
 
 function __cxxabiv1____vmi_class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0;
  if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[$1 + 8 >> 2], 0)) {
   __cxxabiv1____class_type_info__process_found_base_class_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($1, $2, $3);
   return;
  }
  $4 = HEAP32[$0 + 12 >> 2];
  $5 = $0 + 16 | 0;
  __cxxabiv1____base_class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($5, $1, $2, $3);
  label$2 : {
   if (($4 | 0) < 2) {
    break label$2
   }
   $4 = ($4 << 3) + $5 | 0;
   $0 = $0 + 24 | 0;
   while (1) {
    __cxxabiv1____base_class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($0, $1, $2, $3);
    if (HEAPU8[$1 + 54 | 0]) {
     break label$2
    }
    $0 = $0 + 8 | 0;
    if ($0 >>> 0 < $4 >>> 0) {
     continue
    }
    break;
   };
  }
 }
 
 function __cxxabiv1____pbase_type_info__can_catch_28__cxxabiv1____shim_type_info_20const__2c_20void___29_20const($0, $1) {
  var $2 = 0, $3 = 0;
  $2 = $0;
  $3 = $1;
  label$1 : {
   if (HEAPU8[$0 + 8 | 0] & 24) {
    $0 = 1
   } else {
    $0 = 0;
    if (!$1) {
     break label$1
    }
    $1 = __dynamic_cast($1, 49116);
    if (!$1) {
     break label$1
    }
    $0 = (HEAPU8[$1 + 8 | 0] & 24) != 0;
   }
   $0 = is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($2, $3, $0);
  }
  return $0;
 }
 
 function __cxxabiv1____pointer_type_info__can_catch_28__cxxabiv1____shim_type_info_20const__2c_20void___29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $4 = global$0 + -64 | 0;
  $5 = $4;
  if ($4 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $5;
  label$2 : {
   label$3 : {
    label$4 : {
     if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($1, 49384, 0)) {
      HEAP32[$2 >> 2] = 0;
      break label$4;
     }
     if (__cxxabiv1____pbase_type_info__can_catch_28__cxxabiv1____shim_type_info_20const__2c_20void___29_20const($0, $1)) {
      $5 = 1;
      $0 = HEAP32[$2 >> 2];
      if (!$0) {
       break label$2
      }
      HEAP32[$2 >> 2] = HEAP32[$0 >> 2];
      break label$2;
     }
     if (!$1) {
      break label$3
     }
     $5 = 0;
     $1 = __dynamic_cast($1, 49164);
     if (!$1) {
      break label$2
     }
     $3 = HEAP32[$2 >> 2];
     if ($3) {
      HEAP32[$2 >> 2] = HEAP32[$3 >> 2]
     }
     $6 = HEAP32[$1 + 8 >> 2];
     $3 = HEAP32[$0 + 8 >> 2];
     if ($6 & ($3 ^ -1) & 7 | ($6 ^ -1) & $3 & 96) {
      break label$2
     }
     $5 = 1;
     if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29(HEAP32[$0 + 12 >> 2], HEAP32[$1 + 12 >> 2], 0)) {
      break label$2
     }
     if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29(HEAP32[$0 + 12 >> 2], 49372, 0)) {
      $0 = HEAP32[$1 + 12 >> 2];
      if (!$0) {
       break label$2
      }
      $5 = !__dynamic_cast($0, 49216);
      break label$2;
     }
     $3 = HEAP32[$0 + 12 >> 2];
     if (!$3) {
      break label$3
     }
     $5 = 0;
     $3 = __dynamic_cast($3, 49164);
     if ($3) {
      if (!(HEAP8[$0 + 8 | 0] & 1)) {
       break label$2
      }
      $5 = __cxxabiv1____pointer_type_info__can_catch_nested_28__cxxabiv1____shim_type_info_20const__29_20const($3, HEAP32[$1 + 12 >> 2]);
      break label$2;
     }
     $3 = HEAP32[$0 + 12 >> 2];
     if (!$3) {
      break label$2
     }
     $3 = __dynamic_cast($3, 49276);
     if ($3) {
      if (!(HEAP8[$0 + 8 | 0] & 1)) {
       break label$2
      }
      $5 = __cxxabiv1____pointer_to_member_type_info__can_catch_nested_28__cxxabiv1____shim_type_info_20const__29_20const($3, HEAP32[$1 + 12 >> 2]);
      break label$2;
     }
     $0 = HEAP32[$0 + 12 >> 2];
     if (!$0) {
      break label$2
     }
     $3 = __dynamic_cast($0, 49068);
     if (!$3) {
      break label$2
     }
     $0 = HEAP32[$1 + 12 >> 2];
     if (!$0) {
      break label$2
     }
     $0 = __dynamic_cast($0, 49068);
     if (!$0) {
      break label$2
     }
     HEAP32[$4 + 20 >> 2] = -1;
     HEAP32[$4 + 16 >> 2] = $3;
     HEAP32[$4 + 12 >> 2] = 0;
     HEAP32[$4 + 8 >> 2] = $0;
     memset($4 + 24 | 0, 0, 39);
     HEAP32[$4 + 56 >> 2] = 1;
     FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($0, $4 + 8 | 0, HEAP32[$2 >> 2], 1);
     if (HEAP32[$4 + 32 >> 2] != 1) {
      break label$2
     }
     if (!HEAP32[$2 >> 2]) {
      break label$4
     }
     HEAP32[$2 >> 2] = HEAP32[$4 + 24 >> 2];
    }
    $5 = 1;
    break label$2;
   }
   $5 = 0;
  }
  $0 = $4 - -64 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
  return $5 | 0;
 }
 
 function __cxxabiv1____pointer_type_info__can_catch_nested_28__cxxabiv1____shim_type_info_20const__29_20const($0, $1) {
  var $2 = 0, $3 = 0;
  label$1 : {
   while (1) {
    if (!$1) {
     return 0
    }
    $1 = __dynamic_cast($1, 49164);
    if (!$1 | HEAP32[$1 + 8 >> 2] & (HEAP32[$0 + 8 >> 2] ^ -1)) {
     break label$1
    }
    if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29(HEAP32[$0 + 12 >> 2], HEAP32[$1 + 12 >> 2], 0)) {
     return 1
    }
    if (!(HEAP8[$0 + 8 | 0] & 1)) {
     break label$1
    }
    $2 = HEAP32[$0 + 12 >> 2];
    if (!$2) {
     break label$1
    }
    $2 = __dynamic_cast($2, 49164);
    if ($2) {
     $1 = HEAP32[$1 + 12 >> 2];
     $0 = $2;
     continue;
    }
    break;
   };
   $0 = HEAP32[$0 + 12 >> 2];
   if (!$0) {
    break label$1
   }
   $0 = __dynamic_cast($0, 49276);
   if (!$0) {
    break label$1
   }
   $3 = __cxxabiv1____pointer_to_member_type_info__can_catch_nested_28__cxxabiv1____shim_type_info_20const__29_20const($0, HEAP32[$1 + 12 >> 2]);
  }
  return $3;
 }
 
 function __cxxabiv1____pointer_to_member_type_info__can_catch_nested_28__cxxabiv1____shim_type_info_20const__29_20const($0, $1) {
  var $2 = 0;
  label$1 : {
   if (!$1) {
    break label$1
   }
   $1 = __dynamic_cast($1, 49276);
   if (!$1 | HEAP32[$1 + 8 >> 2] & (HEAP32[$0 + 8 >> 2] ^ -1)) {
    break label$1
   }
   if (!is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29(HEAP32[$0 + 12 >> 2], HEAP32[$1 + 12 >> 2], 0)) {
    break label$1
   }
   $2 = is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29(HEAP32[$0 + 16 >> 2], HEAP32[$1 + 16 >> 2], 0);
  }
  return $2;
 }
 
 function __cxxabiv1____class_type_info__process_static_type_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_29_20const($0, $1, $2, $3) {
  HEAP8[$0 + 53 | 0] = 1;
  label$1 : {
   if (HEAP32[$0 + 4 >> 2] != ($2 | 0)) {
    break label$1
   }
   HEAP8[$0 + 52 | 0] = 1;
   $2 = HEAP32[$0 + 16 >> 2];
   if (!$2) {
    HEAP32[$0 + 36 >> 2] = 1;
    HEAP32[$0 + 24 >> 2] = $3;
    HEAP32[$0 + 16 >> 2] = $1;
    if (($3 | 0) != 1 | HEAP32[$0 + 48 >> 2] != 1) {
     break label$1
    }
    HEAP8[$0 + 54 | 0] = 1;
    return;
   }
   if (($1 | 0) == ($2 | 0)) {
    $2 = HEAP32[$0 + 24 >> 2];
    if (($2 | 0) == 2) {
     HEAP32[$0 + 24 >> 2] = $3;
     $2 = $3;
    }
    if (HEAP32[$0 + 48 >> 2] != 1 | ($2 | 0) != 1) {
     break label$1
    }
    HEAP8[$0 + 54 | 0] = 1;
    return;
   }
   HEAP8[$0 + 54 | 0] = 1;
   HEAP32[$0 + 36 >> 2] = HEAP32[$0 + 36 >> 2] + 1;
  }
 }
 
 function __cxxabiv1____class_type_info__process_static_type_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_29_20const($0, $1, $2) {
  if (!(HEAP32[$0 + 28 >> 2] == 1 | HEAP32[$0 + 4 >> 2] != ($1 | 0))) {
   HEAP32[$0 + 28 >> 2] = $2
  }
 }
 
 function __cxxabiv1____vmi_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
  if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[$1 + 8 >> 2], $4)) {
   __cxxabiv1____class_type_info__process_static_type_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_29_20const($1, $2, $3);
   return;
  }
  label$2 : {
   if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[$1 >> 2], $4)) {
    if (!(HEAP32[$1 + 20 >> 2] != ($2 | 0) ? HEAP32[$1 + 16 >> 2] != ($2 | 0) : 0)) {
     if (($3 | 0) != 1) {
      break label$2
     }
     HEAP32[$1 + 32 >> 2] = 1;
     return;
    }
    HEAP32[$1 + 32 >> 2] = $3;
    if (HEAP32[$1 + 44 >> 2] != 4) {
     $5 = $0 + 16 | 0;
     $8 = $5 + (HEAP32[$0 + 12 >> 2] << 3) | 0;
     $9 = $1;
     label$7 : {
      label$8 : {
       while (1) {
        label$10 : {
         if ($5 >>> 0 >= $8 >>> 0) {
          break label$10
         }
         HEAP16[$1 + 52 >> 1] = 0;
         __cxxabiv1____base_class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const($5, $1, $2, $2, 1, $4);
         if (HEAPU8[$1 + 54 | 0]) {
          break label$10
         }
         label$11 : {
          if (!HEAPU8[$1 + 53 | 0]) {
           break label$11
          }
          if (HEAPU8[$1 + 52 | 0]) {
           $3 = 1;
           if (HEAP32[$1 + 24 >> 2] == 1) {
            break label$8
           }
           $7 = 1;
           $6 = 1;
           if (HEAPU8[$0 + 8 | 0] & 2) {
            break label$11
           }
           break label$8;
          }
          $7 = 1;
          $3 = $6;
          if (!(HEAP8[$0 + 8 | 0] & 1)) {
           break label$8
          }
         }
         $5 = $5 + 8 | 0;
         continue;
        }
        break;
       };
       $3 = $6;
       $0 = 4;
       if (!$7) {
        break label$7
       }
      }
      $0 = 3;
     }
     HEAP32[$9 + 44 >> 2] = $0;
     if ($3 & 1) {
      break label$2
     }
    }
    HEAP32[$1 + 20 >> 2] = $2;
    HEAP32[$1 + 40 >> 2] = HEAP32[$1 + 40 >> 2] + 1;
    if (HEAP32[$1 + 36 >> 2] != 1 | HEAP32[$1 + 24 >> 2] != 2) {
     break label$2
    }
    HEAP8[$1 + 54 | 0] = 1;
    return;
   }
   $6 = HEAP32[$0 + 12 >> 2];
   $5 = $0 + 16 | 0;
   __cxxabiv1____base_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const($5, $1, $2, $3, $4);
   if (($6 | 0) < 2) {
    break label$2
   }
   $6 = $5 + ($6 << 3) | 0;
   $5 = $0 + 24 | 0;
   $0 = HEAP32[$0 + 8 >> 2];
   if (!(HEAP32[$1 + 36 >> 2] != 1 ? !($0 & 2) : 0)) {
    while (1) {
     if (HEAPU8[$1 + 54 | 0]) {
      break label$2
     }
     __cxxabiv1____base_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const($5, $1, $2, $3, $4);
     $5 = $5 + 8 | 0;
     if ($5 >>> 0 < $6 >>> 0) {
      continue
     }
     break;
    };
    break label$2;
   }
   if (!($0 & 1)) {
    while (1) {
     if (HEAPU8[$1 + 54 | 0] | HEAP32[$1 + 36 >> 2] == 1) {
      break label$2
     }
     __cxxabiv1____base_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const($5, $1, $2, $3, $4);
     $5 = $5 + 8 | 0;
     if ($5 >>> 0 < $6 >>> 0) {
      continue
     }
     break label$2;
    }
   }
   while (1) {
    if (HEAPU8[$1 + 54 | 0] | (HEAP32[$1 + 24 >> 2] == 1 ? HEAP32[$1 + 36 >> 2] == 1 : 0)) {
     break label$2
    }
    __cxxabiv1____base_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const($5, $1, $2, $3, $4);
    $5 = $5 + 8 | 0;
    if ($5 >>> 0 < $6 >>> 0) {
     continue
    }
    break;
   };
  }
 }
 
 function __cxxabiv1____base_class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const($0, $1, $2, $3, $4, $5) {
  var $6 = 0, $7 = 0, $8 = 0;
  $6 = HEAP32[$0 + 4 >> 2];
  $7 = $6 >> 8;
  $0 = HEAP32[$0 >> 2];
  $8 = $0;
  if ($6 & 1) {
   $7 = HEAP32[HEAP32[$3 >> 2] + $7 >> 2]
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($8, $1, $2, $3 + $7 | 0, $6 & 2 ? $4 : 2, $5);
 }
 
 function __cxxabiv1____base_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const($0, $1, $2, $3, $4) {
  var $5 = 0, $6 = 0, $7 = 0;
  $5 = HEAP32[$0 + 4 >> 2];
  $6 = $5 >> 8;
  $0 = HEAP32[$0 >> 2];
  $7 = $0;
  if ($5 & 1) {
   $6 = HEAP32[HEAP32[$2 >> 2] + $6 >> 2]
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($7, $1, $2 + $6 | 0, $5 & 2 ? $3 : 2, $4);
 }
 
 function __cxxabiv1____si_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[$1 + 8 >> 2], $4)) {
   __cxxabiv1____class_type_info__process_static_type_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_29_20const($1, $2, $3);
   return;
  }
  label$2 : {
   if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[$1 >> 2], $4)) {
    if (!(HEAP32[$1 + 20 >> 2] != ($2 | 0) ? HEAP32[$1 + 16 >> 2] != ($2 | 0) : 0)) {
     if (($3 | 0) != 1) {
      break label$2
     }
     HEAP32[$1 + 32 >> 2] = 1;
     return;
    }
    HEAP32[$1 + 32 >> 2] = $3;
    label$6 : {
     if (HEAP32[$1 + 44 >> 2] == 4) {
      break label$6
     }
     HEAP16[$1 + 52 >> 1] = 0;
     $0 = HEAP32[$0 + 8 >> 2];
     FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0, $1, $2, $2, 1, $4);
     if (HEAPU8[$1 + 53 | 0]) {
      HEAP32[$1 + 44 >> 2] = 3;
      if (!HEAPU8[$1 + 52 | 0]) {
       break label$6
      }
      break label$2;
     }
     HEAP32[$1 + 44 >> 2] = 4;
    }
    HEAP32[$1 + 20 >> 2] = $2;
    HEAP32[$1 + 40 >> 2] = HEAP32[$1 + 40 >> 2] + 1;
    if (HEAP32[$1 + 36 >> 2] != 1 | HEAP32[$1 + 24 >> 2] != 2) {
     break label$2
    }
    HEAP8[$1 + 54 | 0] = 1;
    return;
   }
   $0 = HEAP32[$0 + 8 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($0, $1, $2, $3, $4);
  }
 }
 
 function __cxxabiv1____class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[$1 + 8 >> 2], $4)) {
   __cxxabiv1____class_type_info__process_static_type_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_29_20const($1, $2, $3);
   return;
  }
  label$2 : {
   if (!is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[$1 >> 2], $4)) {
    break label$2
   }
   if (!(HEAP32[$1 + 20 >> 2] != ($2 | 0) ? HEAP32[$1 + 16 >> 2] != ($2 | 0) : 0)) {
    if (($3 | 0) != 1) {
     break label$2
    }
    HEAP32[$1 + 32 >> 2] = 1;
    return;
   }
   HEAP32[$1 + 20 >> 2] = $2;
   HEAP32[$1 + 32 >> 2] = $3;
   HEAP32[$1 + 40 >> 2] = HEAP32[$1 + 40 >> 2] + 1;
   if (!(HEAP32[$1 + 36 >> 2] != 1 | HEAP32[$1 + 24 >> 2] != 2)) {
    HEAP8[$1 + 54 | 0] = 1
   }
   HEAP32[$1 + 44 >> 2] = 4;
  }
 }
 
 function __cxxabiv1____vmi_class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
  if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[$1 + 8 >> 2], $5)) {
   __cxxabiv1____class_type_info__process_static_type_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_29_20const($1, $2, $3, $4);
   return;
  }
  $7 = HEAPU8[$1 + 53 | 0];
  $6 = HEAP32[$0 + 12 >> 2];
  HEAP8[$1 + 53 | 0] = 0;
  $8 = HEAPU8[$1 + 52 | 0];
  HEAP8[$1 + 52 | 0] = 0;
  $9 = $0 + 16 | 0;
  __cxxabiv1____base_class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const($9, $1, $2, $3, $4, $5);
  $10 = HEAPU8[$1 + 53 | 0];
  $7 = $7 | $10;
  $11 = HEAPU8[$1 + 52 | 0];
  $8 = $8 | $11;
  label$2 : {
   if (($6 | 0) < 2) {
    break label$2
   }
   $9 = $9 + ($6 << 3) | 0;
   $6 = $0 + 24 | 0;
   while (1) {
    if (HEAPU8[$1 + 54 | 0]) {
     break label$2
    }
    label$4 : {
     if ($11) {
      if (HEAP32[$1 + 24 >> 2] == 1) {
       break label$2
      }
      if (HEAPU8[$0 + 8 | 0] & 2) {
       break label$4
      }
      break label$2;
     }
     if (!$10) {
      break label$4
     }
     if (!(HEAP8[$0 + 8 | 0] & 1)) {
      break label$2
     }
    }
    HEAP16[$1 + 52 >> 1] = 0;
    __cxxabiv1____base_class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const($6, $1, $2, $3, $4, $5);
    $10 = HEAPU8[$1 + 53 | 0];
    $7 = $10 | $7;
    $11 = HEAPU8[$1 + 52 | 0];
    $8 = $11 | $8;
    $6 = $6 + 8 | 0;
    if ($6 >>> 0 < $9 >>> 0) {
     continue
    }
    break;
   };
  }
  HEAP8[$1 + 53 | 0] = ($7 & 255) != 0;
  HEAP8[$1 + 52 | 0] = ($8 & 255) != 0;
 }
 
 function __cxxabiv1____si_class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[$1 + 8 >> 2], $5)) {
   __cxxabiv1____class_type_info__process_static_type_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_29_20const($1, $2, $3, $4);
   return;
  }
  $0 = HEAP32[$0 + 8 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0, $1, $2, $3, $4, $5);
 }
 
 function __cxxabiv1____class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[$1 + 8 >> 2], $5)) {
   __cxxabiv1____class_type_info__process_static_type_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_29_20const($1, $2, $3, $4)
  }
 }
 
 function __cxa_can_catch($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0;
  $3 = global$0 - 16 | 0;
  $4 = $3;
  if ($3 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $4;
  HEAP32[$3 + 12 >> 2] = HEAP32[$2 >> 2];
  $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $1, $3 + 12 | 0) | 0;
  if ($0) {
   HEAP32[$2 >> 2] = HEAP32[$3 + 12 >> 2]
  }
  $1 = $3 + 16 | 0;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  return $0 | 0;
 }
 
 function __cxa_is_pointer_type($0) {
  $0 = $0 | 0;
  if (!$0) {
   return 0
  }
  return (__dynamic_cast($0, 49164) | 0) != 0 | 0;
 }
 
 function __strdup($0) {
  var $1 = 0, $2 = 0;
  $1 = strlen($0) + 1 | 0;
  $2 = dlmalloc($1);
  if (!$2) {
   return 0
  }
  return memcpy($2, $0, $1);
 }
 
 function __getTypeName($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = __strdup(HEAP32[HEAP32[$1 + 12 >> 2] + 4 >> 2]);
  $1 = $1 + 16 | 0;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  return $0 | 0;
 }
 
 function __embind_register_native_and_builtin_types() {
  _embind_register_void(49372, 49864);
  _embind_register_bool(49396, 49869, 1, 1, 0);
  void_20_28anonymous_20namespace_29__register_integer_char__28char_20const__29();
  void_20_28anonymous_20namespace_29__register_integer_signed_20char__28char_20const__29();
  void_20_28anonymous_20namespace_29__register_integer_unsigned_20char__28char_20const__29();
  void_20_28anonymous_20namespace_29__register_integer_short__28char_20const__29();
  void_20_28anonymous_20namespace_29__register_integer_unsigned_20short__28char_20const__29();
  void_20_28anonymous_20namespace_29__register_integer_int__28char_20const__29();
  void_20_28anonymous_20namespace_29__register_integer_unsigned_20int__28char_20const__29();
  void_20_28anonymous_20namespace_29__register_integer_long__28char_20const__29();
  void_20_28anonymous_20namespace_29__register_integer_unsigned_20long__28char_20const__29();
  void_20_28anonymous_20namespace_29__register_float_float__28char_20const__29();
  void_20_28anonymous_20namespace_29__register_float_double__28char_20const__29();
  _embind_register_std_string(11392, 49975);
  _embind_register_std_string(50720, 49987);
  _embind_register_std_wstring(50808, 4, 50020);
  _embind_register_std_wstring(50900, 2, 50033);
  _embind_register_std_wstring(50992, 4, 50048);
  _embind_register_emval(4788, 50063);
  void_20_28anonymous_20namespace_29__register_memory_view_char__28char_20const__29();
  void_20_28anonymous_20namespace_29__register_memory_view_signed_20char__28char_20const__29(50109);
  void_20_28anonymous_20namespace_29__register_memory_view_unsigned_20char__28char_20const__29(50146);
  void_20_28anonymous_20namespace_29__register_memory_view_short__28char_20const__29(50185);
  void_20_28anonymous_20namespace_29__register_memory_view_unsigned_20short__28char_20const__29(50216);
  void_20_28anonymous_20namespace_29__register_memory_view_int__28char_20const__29(50256);
  void_20_28anonymous_20namespace_29__register_memory_view_unsigned_20int__28char_20const__29(50285);
  void_20_28anonymous_20namespace_29__register_memory_view_long__28char_20const__29();
  void_20_28anonymous_20namespace_29__register_memory_view_unsigned_20long__28char_20const__29();
  void_20_28anonymous_20namespace_29__register_memory_view_signed_20char__28char_20const__29(50392);
  void_20_28anonymous_20namespace_29__register_memory_view_unsigned_20char__28char_20const__29(50424);
  void_20_28anonymous_20namespace_29__register_memory_view_short__28char_20const__29(50457);
  void_20_28anonymous_20namespace_29__register_memory_view_unsigned_20short__28char_20const__29(50490);
  void_20_28anonymous_20namespace_29__register_memory_view_int__28char_20const__29(50524);
  void_20_28anonymous_20namespace_29__register_memory_view_unsigned_20int__28char_20const__29(50557);
  void_20_28anonymous_20namespace_29__register_memory_view_float__28char_20const__29();
  void_20_28anonymous_20namespace_29__register_memory_view_double__28char_20const__29();
 }
 
 function void_20_28anonymous_20namespace_29__register_integer_char__28char_20const__29() {
  var $0 = 0, $1 = 0;
  $0 = global$0 - 16 | 0;
  $1 = $0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  HEAP32[$0 + 12 >> 2] = 49874;
  _embind_register_integer(49408, HEAP32[$0 + 12 >> 2], 1, -128, 127);
  $0 = $0 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function void_20_28anonymous_20namespace_29__register_integer_signed_20char__28char_20const__29() {
  var $0 = 0, $1 = 0;
  $0 = global$0 - 16 | 0;
  $1 = $0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  HEAP32[$0 + 12 >> 2] = 49879;
  _embind_register_integer(49432, HEAP32[$0 + 12 >> 2], 1, -128, 127);
  $0 = $0 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function void_20_28anonymous_20namespace_29__register_integer_unsigned_20char__28char_20const__29() {
  var $0 = 0, $1 = 0;
  $0 = global$0 - 16 | 0;
  $1 = $0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  HEAP32[$0 + 12 >> 2] = 49891;
  _embind_register_integer(49420, HEAP32[$0 + 12 >> 2], 1, 0, 255);
  $0 = $0 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function void_20_28anonymous_20namespace_29__register_integer_short__28char_20const__29() {
  var $0 = 0, $1 = 0;
  $0 = global$0 - 16 | 0;
  $1 = $0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  HEAP32[$0 + 12 >> 2] = 49905;
  _embind_register_integer(49444, HEAP32[$0 + 12 >> 2], 2, -32768, 32767);
  $0 = $0 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function void_20_28anonymous_20namespace_29__register_integer_unsigned_20short__28char_20const__29() {
  var $0 = 0, $1 = 0;
  $0 = global$0 - 16 | 0;
  $1 = $0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  HEAP32[$0 + 12 >> 2] = 49911;
  _embind_register_integer(49456, HEAP32[$0 + 12 >> 2], 2, 0, 65535);
  $0 = $0 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function void_20_28anonymous_20namespace_29__register_integer_int__28char_20const__29() {
  var $0 = 0, $1 = 0;
  $0 = global$0 - 16 | 0;
  $1 = $0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  HEAP32[$0 + 12 >> 2] = 49926;
  _embind_register_integer(49468, HEAP32[$0 + 12 >> 2], 4, -2147483648, 2147483647);
  $0 = $0 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function void_20_28anonymous_20namespace_29__register_integer_unsigned_20int__28char_20const__29() {
  var $0 = 0, $1 = 0;
  $0 = global$0 - 16 | 0;
  $1 = $0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  HEAP32[$0 + 12 >> 2] = 49930;
  _embind_register_integer(49480, HEAP32[$0 + 12 >> 2], 4, 0, -1);
  $0 = $0 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function void_20_28anonymous_20namespace_29__register_integer_long__28char_20const__29() {
  var $0 = 0, $1 = 0;
  $0 = global$0 - 16 | 0;
  $1 = $0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  HEAP32[$0 + 12 >> 2] = 49943;
  _embind_register_integer(49492, HEAP32[$0 + 12 >> 2], 4, -2147483648, 2147483647);
  $0 = $0 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function void_20_28anonymous_20namespace_29__register_integer_unsigned_20long__28char_20const__29() {
  var $0 = 0, $1 = 0;
  $0 = global$0 - 16 | 0;
  $1 = $0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  HEAP32[$0 + 12 >> 2] = 49948;
  _embind_register_integer(49504, HEAP32[$0 + 12 >> 2], 4, 0, -1);
  $0 = $0 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function void_20_28anonymous_20namespace_29__register_float_float__28char_20const__29() {
  var $0 = 0, $1 = 0;
  $0 = global$0 - 16 | 0;
  $1 = $0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  HEAP32[$0 + 12 >> 2] = 49962;
  _embind_register_float(49516, HEAP32[$0 + 12 >> 2], 4);
  $0 = $0 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function void_20_28anonymous_20namespace_29__register_float_double__28char_20const__29() {
  var $0 = 0, $1 = 0;
  $0 = global$0 - 16 | 0;
  $1 = $0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  HEAP32[$0 + 12 >> 2] = 49968;
  _embind_register_float(49528, HEAP32[$0 + 12 >> 2], 8);
  $0 = $0 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function void_20_28anonymous_20namespace_29__register_memory_view_char__28char_20const__29() {
  var $0 = 0, $1 = 0;
  $0 = global$0 - 16 | 0;
  $1 = $0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  HEAP32[$0 + 12 >> 2] = 50079;
  _embind_register_memory_view(51048, 0, HEAP32[$0 + 12 >> 2]);
  $0 = $0 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function void_20_28anonymous_20namespace_29__register_memory_view_signed_20char__28char_20const__29($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  HEAP32[$1 + 12 >> 2] = $0;
  _embind_register_memory_view(51088, 0, HEAP32[$1 + 12 >> 2]);
  $0 = $1 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function void_20_28anonymous_20namespace_29__register_memory_view_unsigned_20char__28char_20const__29($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  HEAP32[$1 + 12 >> 2] = $0;
  _embind_register_memory_view(51128, 1, HEAP32[$1 + 12 >> 2]);
  $0 = $1 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function void_20_28anonymous_20namespace_29__register_memory_view_short__28char_20const__29($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  HEAP32[$1 + 12 >> 2] = $0;
  _embind_register_memory_view(51168, 2, HEAP32[$1 + 12 >> 2]);
  $0 = $1 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function void_20_28anonymous_20namespace_29__register_memory_view_unsigned_20short__28char_20const__29($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  HEAP32[$1 + 12 >> 2] = $0;
  _embind_register_memory_view(51208, 3, HEAP32[$1 + 12 >> 2]);
  $0 = $1 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function void_20_28anonymous_20namespace_29__register_memory_view_int__28char_20const__29($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  HEAP32[$1 + 12 >> 2] = $0;
  _embind_register_memory_view(51248, 4, HEAP32[$1 + 12 >> 2]);
  $0 = $1 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function void_20_28anonymous_20namespace_29__register_memory_view_unsigned_20int__28char_20const__29($0) {
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  HEAP32[$1 + 12 >> 2] = $0;
  _embind_register_memory_view(51288, 5, HEAP32[$1 + 12 >> 2]);
  $0 = $1 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function void_20_28anonymous_20namespace_29__register_memory_view_long__28char_20const__29() {
  var $0 = 0, $1 = 0;
  $0 = global$0 - 16 | 0;
  $1 = $0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  HEAP32[$0 + 12 >> 2] = 50323;
  _embind_register_memory_view(51328, 4, HEAP32[$0 + 12 >> 2]);
  $0 = $0 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function void_20_28anonymous_20namespace_29__register_memory_view_unsigned_20long__28char_20const__29() {
  var $0 = 0, $1 = 0;
  $0 = global$0 - 16 | 0;
  $1 = $0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  HEAP32[$0 + 12 >> 2] = 50353;
  _embind_register_memory_view(51368, 5, HEAP32[$0 + 12 >> 2]);
  $0 = $0 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function void_20_28anonymous_20namespace_29__register_memory_view_float__28char_20const__29() {
  var $0 = 0, $1 = 0;
  $0 = global$0 - 16 | 0;
  $1 = $0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  HEAP32[$0 + 12 >> 2] = 50591;
  _embind_register_memory_view(51408, 6, HEAP32[$0 + 12 >> 2]);
  $0 = $0 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function void_20_28anonymous_20namespace_29__register_memory_view_double__28char_20const__29() {
  var $0 = 0, $1 = 0;
  $0 = global$0 - 16 | 0;
  $1 = $0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  HEAP32[$0 + 12 >> 2] = 50622;
  _embind_register_memory_view(51448, 7, HEAP32[$0 + 12 >> 2]);
  $0 = $0 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function EmscriptenBindingInitializer_native_and_builtin_types__EmscriptenBindingInitializer_native_and_builtin_types_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = HEAP32[$1 + 12 >> 2];
  __embind_register_native_and_builtin_types();
  $1 = $1 + 16 | 0;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  return $0 | 0;
 }
 
 function dlmalloc($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
  $11 = global$0 - 16 | 0;
  $1 = $11;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      label$6 : {
       label$7 : {
        label$8 : {
         label$9 : {
          label$10 : {
           label$11 : {
            label$12 : {
             if ($0 >>> 0 <= 244) {
              $6 = HEAP32[17919];
              $5 = $0 >>> 0 < 11 ? 16 : $0 + 11 & -8;
              $0 = $5 >>> 3 | 0;
              $1 = $6 >>> $0 | 0;
              if ($1 & 3) {
               $2 = $0 + (($1 ^ -1) & 1) | 0;
               $5 = $2 << 3;
               $1 = HEAP32[$5 + 71724 >> 2];
               $0 = $1 + 8 | 0;
               $3 = HEAP32[$1 + 8 >> 2];
               $5 = $5 + 71716 | 0;
               label$15 : {
                if (($3 | 0) == ($5 | 0)) {
                 HEAP32[17919] = __wasm_rotl_i32(-2, $2) & $6;
                 break label$15;
                }
                HEAP32[$3 + 12 >> 2] = $5;
                HEAP32[$5 + 8 >> 2] = $3;
               }
               $2 = $2 << 3;
               HEAP32[$1 + 4 >> 2] = $2 | 3;
               $1 = $1 + $2 | 0;
               HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] | 1;
               break label$2;
              }
              $7 = HEAP32[17921];
              if ($5 >>> 0 <= $7 >>> 0) {
               break label$12
              }
              if ($1) {
               $2 = 2 << $0;
               $0 = (0 - $2 | $2) & $1 << $0;
               $0 = (0 - $0 & $0) + -1 | 0;
               $1 = $0 >>> 12 & 16;
               $2 = $1;
               $0 = $0 >>> $1 | 0;
               $1 = $0 >>> 5 & 8;
               $2 = $2 | $1;
               $0 = $0 >>> $1 | 0;
               $1 = $0 >>> 2 & 4;
               $2 = $2 | $1;
               $0 = $0 >>> $1 | 0;
               $1 = $0 >>> 1 & 2;
               $2 = $2 | $1;
               $0 = $0 >>> $1 | 0;
               $1 = $0 >>> 1 & 1;
               $2 = ($2 | $1) + ($0 >>> $1 | 0) | 0;
               $3 = $2 << 3;
               $1 = HEAP32[$3 + 71724 >> 2];
               $0 = HEAP32[$1 + 8 >> 2];
               $3 = $3 + 71716 | 0;
               label$18 : {
                if (($0 | 0) == ($3 | 0)) {
                 $6 = __wasm_rotl_i32(-2, $2) & $6;
                 HEAP32[17919] = $6;
                 break label$18;
                }
                HEAP32[$0 + 12 >> 2] = $3;
                HEAP32[$3 + 8 >> 2] = $0;
               }
               $0 = $1 + 8 | 0;
               HEAP32[$1 + 4 >> 2] = $5 | 3;
               $4 = $1 + $5 | 0;
               $2 = $2 << 3;
               $3 = $2 - $5 | 0;
               HEAP32[$4 + 4 >> 2] = $3 | 1;
               HEAP32[$1 + $2 >> 2] = $3;
               if ($7) {
                $5 = $7 >>> 3 | 0;
                $1 = ($5 << 3) + 71716 | 0;
                $2 = HEAP32[17924];
                $5 = 1 << $5;
                label$21 : {
                 if (!($5 & $6)) {
                  HEAP32[17919] = $5 | $6;
                  $5 = $1;
                  break label$21;
                 }
                 $5 = HEAP32[$1 + 8 >> 2];
                }
                HEAP32[$1 + 8 >> 2] = $2;
                HEAP32[$5 + 12 >> 2] = $2;
                HEAP32[$2 + 12 >> 2] = $1;
                HEAP32[$2 + 8 >> 2] = $5;
               }
               HEAP32[17924] = $4;
               HEAP32[17921] = $3;
               break label$2;
              }
              $10 = HEAP32[17920];
              if (!$10) {
               break label$12
              }
              $0 = ($10 & 0 - $10) + -1 | 0;
              $1 = $0 >>> 12 & 16;
              $2 = $1;
              $0 = $0 >>> $1 | 0;
              $1 = $0 >>> 5 & 8;
              $2 = $2 | $1;
              $0 = $0 >>> $1 | 0;
              $1 = $0 >>> 2 & 4;
              $2 = $2 | $1;
              $0 = $0 >>> $1 | 0;
              $1 = $0 >>> 1 & 2;
              $2 = $2 | $1;
              $0 = $0 >>> $1 | 0;
              $1 = $0 >>> 1 & 1;
              $1 = HEAP32[(($2 | $1) + ($0 >>> $1 | 0) << 2) + 71980 >> 2];
              $3 = (HEAP32[$1 + 4 >> 2] & -8) - $5 | 0;
              $2 = $1;
              while (1) {
               label$24 : {
                $0 = HEAP32[$2 + 16 >> 2];
                if (!$0) {
                 $0 = HEAP32[$2 + 20 >> 2];
                 if (!$0) {
                  break label$24
                 }
                }
                $4 = (HEAP32[$0 + 4 >> 2] & -8) - $5 | 0;
                $2 = $4 >>> 0 < $3 >>> 0;
                $3 = $2 ? $4 : $3;
                $1 = $2 ? $0 : $1;
                $2 = $0;
                continue;
               }
               break;
              };
              $9 = HEAP32[$1 + 24 >> 2];
              $4 = HEAP32[$1 + 12 >> 2];
              if (($4 | 0) != ($1 | 0)) {
               $0 = HEAP32[$1 + 8 >> 2];
               HEAP32[$0 + 12 >> 2] = $4;
               HEAP32[$4 + 8 >> 2] = $0;
               break label$3;
              }
              $2 = $1 + 20 | 0;
              $0 = HEAP32[$2 >> 2];
              if (!$0) {
               $0 = HEAP32[$1 + 16 >> 2];
               if (!$0) {
                break label$11
               }
               $2 = $1 + 16 | 0;
              }
              while (1) {
               $8 = $2;
               $4 = $0;
               $2 = $0 + 20 | 0;
               $0 = HEAP32[$2 >> 2];
               if ($0) {
                continue
               }
               $2 = $4 + 16 | 0;
               $0 = HEAP32[$4 + 16 >> 2];
               if ($0) {
                continue
               }
               break;
              };
              HEAP32[$8 >> 2] = 0;
              break label$3;
             }
             $5 = -1;
             if ($0 >>> 0 > 4294967231) {
              break label$12
             }
             $0 = $0 + 11 | 0;
             $5 = $0 & -8;
             $8 = HEAP32[17920];
             if (!$8) {
              break label$12
             }
             $2 = 0 - $5 | 0;
             $0 = $0 >>> 8 | 0;
             $7 = 0;
             label$30 : {
              if (!$0) {
               break label$30
              }
              $7 = 31;
              if ($5 >>> 0 > 16777215) {
               break label$30
              }
              $3 = $0 + 1048320 >>> 16 & 8;
              $1 = $0 << $3;
              $0 = $1 + 520192 >>> 16 & 4;
              $6 = $1 << $0;
              $1 = $6 + 245760 >>> 16 & 2;
              $0 = ($6 << $1 >>> 15 | 0) - ($1 | ($0 | $3)) | 0;
              $7 = ($0 << 1 | $5 >>> $0 + 21 & 1) + 28 | 0;
             }
             $3 = HEAP32[($7 << 2) + 71980 >> 2];
             label$31 : {
              label$32 : {
               label$33 : {
                if (!$3) {
                 $0 = 0;
                 break label$33;
                }
                $1 = $5 << (($7 | 0) == 31 ? 0 : 25 - ($7 >>> 1 | 0) | 0);
                $0 = 0;
                while (1) {
                 label$36 : {
                  $6 = (HEAP32[$3 + 4 >> 2] & -8) - $5 | 0;
                  if ($6 >>> 0 >= $2 >>> 0) {
                   break label$36
                  }
                  $4 = $3;
                  $2 = $6;
                  if ($2) {
                   break label$36
                  }
                  $2 = 0;
                  $0 = $3;
                  break label$32;
                 }
                 $6 = HEAP32[$3 + 20 >> 2];
                 $3 = HEAP32[(($1 >>> 29 & 4) + $3 | 0) + 16 >> 2];
                 $0 = $6 ? (($6 | 0) == ($3 | 0) ? $0 : $6) : $0;
                 $1 = $1 << (($3 | 0) != 0);
                 if ($3) {
                  continue
                 }
                 break;
                };
               }
               if (!($0 | $4)) {
                $0 = 2 << $7;
                $0 = (0 - $0 | $0) & $8;
                if (!$0) {
                 break label$12
                }
                $0 = ($0 & 0 - $0) + -1 | 0;
                $1 = $0 >>> 12 & 16;
                $3 = $1;
                $0 = $0 >>> $1 | 0;
                $1 = $0 >>> 5 & 8;
                $3 = $3 | $1;
                $0 = $0 >>> $1 | 0;
                $1 = $0 >>> 2 & 4;
                $3 = $3 | $1;
                $0 = $0 >>> $1 | 0;
                $1 = $0 >>> 1 & 2;
                $3 = $3 | $1;
                $0 = $0 >>> $1 | 0;
                $1 = $0 >>> 1 & 1;
                $0 = HEAP32[(($3 | $1) + ($0 >>> $1 | 0) << 2) + 71980 >> 2];
               }
               if (!$0) {
                break label$31
               }
              }
              while (1) {
               $3 = (HEAP32[$0 + 4 >> 2] & -8) - $5 | 0;
               $1 = $3 >>> 0 < $2 >>> 0;
               $2 = $1 ? $3 : $2;
               $4 = $1 ? $0 : $4;
               $1 = HEAP32[$0 + 16 >> 2];
               if ($1) {
                $0 = $1
               } else {
                $0 = HEAP32[$0 + 20 >> 2]
               }
               if ($0) {
                continue
               }
               break;
              };
             }
             if (!$4 | $2 >>> 0 >= HEAP32[17921] - $5 >>> 0) {
              break label$12
             }
             $7 = HEAP32[$4 + 24 >> 2];
             $1 = HEAP32[$4 + 12 >> 2];
             if (($4 | 0) != ($1 | 0)) {
              $0 = HEAP32[$4 + 8 >> 2];
              HEAP32[$0 + 12 >> 2] = $1;
              HEAP32[$1 + 8 >> 2] = $0;
              break label$4;
             }
             $3 = $4 + 20 | 0;
             $0 = HEAP32[$3 >> 2];
             if (!$0) {
              $0 = HEAP32[$4 + 16 >> 2];
              if (!$0) {
               break label$10
              }
              $3 = $4 + 16 | 0;
             }
             while (1) {
              $6 = $3;
              $1 = $0;
              $3 = $0 + 20 | 0;
              $0 = HEAP32[$3 >> 2];
              if ($0) {
               continue
              }
              $3 = $1 + 16 | 0;
              $0 = HEAP32[$1 + 16 >> 2];
              if ($0) {
               continue
              }
              break;
             };
             HEAP32[$6 >> 2] = 0;
             break label$4;
            }
            $1 = HEAP32[17921];
            if ($1 >>> 0 >= $5 >>> 0) {
             $0 = HEAP32[17924];
             $2 = $1 - $5 | 0;
             label$46 : {
              if ($2 >>> 0 >= 16) {
               HEAP32[17921] = $2;
               $3 = $0 + $5 | 0;
               HEAP32[17924] = $3;
               HEAP32[$3 + 4 >> 2] = $2 | 1;
               HEAP32[$0 + $1 >> 2] = $2;
               HEAP32[$0 + 4 >> 2] = $5 | 3;
               break label$46;
              }
              HEAP32[17924] = 0;
              HEAP32[17921] = 0;
              HEAP32[$0 + 4 >> 2] = $1 | 3;
              $1 = $0 + $1 | 0;
              HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] | 1;
             }
             $0 = $0 + 8 | 0;
             break label$2;
            }
            $1 = HEAP32[17922];
            if ($1 >>> 0 > $5 >>> 0) {
             $1 = $1 - $5 | 0;
             HEAP32[17922] = $1;
             $0 = HEAP32[17925];
             $2 = $0 + $5 | 0;
             HEAP32[17925] = $2;
             HEAP32[$2 + 4 >> 2] = $1 | 1;
             HEAP32[$0 + 4 >> 2] = $5 | 3;
             $0 = $0 + 8 | 0;
             break label$2;
            }
            $0 = 0;
            $4 = $5 + 47 | 0;
            $3 = $4;
            if (HEAP32[18037]) {
             $2 = HEAP32[18039]
            } else {
             HEAP32[18040] = -1;
             HEAP32[18041] = -1;
             HEAP32[18038] = 4096;
             HEAP32[18039] = 4096;
             HEAP32[18037] = $11 + 12 & -16 ^ 1431655768;
             HEAP32[18042] = 0;
             HEAP32[18030] = 0;
             $2 = 4096;
            }
            $6 = $3 + $2 | 0;
            $8 = 0 - $2 | 0;
            $2 = $6 & $8;
            if ($2 >>> 0 <= $5 >>> 0) {
             break label$2
            }
            $3 = HEAP32[18029];
            if ($3) {
             $7 = HEAP32[18027];
             $9 = $7 + $2 | 0;
             if ($9 >>> 0 <= $7 >>> 0 | $9 >>> 0 > $3 >>> 0) {
              break label$2
             }
            }
            if (HEAPU8[72120] & 4) {
             break label$7
            }
            label$52 : {
             label$53 : {
              $3 = HEAP32[17925];
              if ($3) {
               $0 = 72124;
               while (1) {
                $7 = HEAP32[$0 >> 2];
                if ($7 + HEAP32[$0 + 4 >> 2] >>> 0 > $3 >>> 0 ? $7 >>> 0 <= $3 >>> 0 : 0) {
                 break label$53
                }
                $0 = HEAP32[$0 + 8 >> 2];
                if ($0) {
                 continue
                }
                break;
               };
              }
              $1 = sbrk(0);
              if (($1 | 0) == -1) {
               break label$8
              }
              $6 = $2;
              $0 = HEAP32[18038];
              $3 = $0 + -1 | 0;
              if ($3 & $1) {
               $6 = ($2 - $1 | 0) + ($1 + $3 & 0 - $0) | 0
              }
              if ($6 >>> 0 <= $5 >>> 0 | $6 >>> 0 > 2147483646) {
               break label$8
              }
              $0 = HEAP32[18029];
              if ($0) {
               $3 = HEAP32[18027];
               $8 = $3 + $6 | 0;
               if ($8 >>> 0 <= $3 >>> 0 | $8 >>> 0 > $0 >>> 0) {
                break label$8
               }
              }
              $0 = sbrk($6);
              if (($1 | 0) != ($0 | 0)) {
               break label$52
              }
              break label$6;
             }
             $6 = $8 & $6 - $1;
             if ($6 >>> 0 > 2147483646) {
              break label$8
             }
             $1 = sbrk($6);
             if (($1 | 0) == (HEAP32[$0 >> 2] + HEAP32[$0 + 4 >> 2] | 0)) {
              break label$9
             }
             $0 = $1;
            }
            if (!(($0 | 0) == -1 | $5 + 48 >>> 0 <= $6 >>> 0)) {
             $1 = HEAP32[18039];
             $1 = $1 + ($4 - $6 | 0) & 0 - $1;
             if ($1 >>> 0 > 2147483646) {
              $1 = $0;
              break label$6;
             }
             if ((sbrk($1) | 0) != -1) {
              $6 = $1 + $6 | 0;
              $1 = $0;
              break label$6;
             }
             sbrk(0 - $6 | 0);
             break label$8;
            }
            $1 = $0;
            if (($0 | 0) != -1) {
             break label$6
            }
            break label$8;
           }
           $4 = 0;
           break label$3;
          }
          $1 = 0;
          break label$4;
         }
         if (($1 | 0) != -1) {
          break label$6
         }
        }
        HEAP32[18030] = HEAP32[18030] | 4;
       }
       if ($2 >>> 0 > 2147483646) {
        break label$5
       }
       $1 = sbrk($2);
       $0 = sbrk(0);
       if ($1 >>> 0 >= $0 >>> 0 | ($1 | 0) == -1 | ($0 | 0) == -1) {
        break label$5
       }
       $6 = $0 - $1 | 0;
       if ($6 >>> 0 <= $5 + 40 >>> 0) {
        break label$5
       }
      }
      $0 = HEAP32[18027] + $6 | 0;
      HEAP32[18027] = $0;
      if ($0 >>> 0 > HEAPU32[18028]) {
       HEAP32[18028] = $0
      }
      label$63 : {
       label$64 : {
        label$65 : {
         $3 = HEAP32[17925];
         if ($3) {
          $0 = 72124;
          while (1) {
           $2 = HEAP32[$0 >> 2];
           $4 = HEAP32[$0 + 4 >> 2];
           if (($2 + $4 | 0) == ($1 | 0)) {
            break label$65
           }
           $0 = HEAP32[$0 + 8 >> 2];
           if ($0) {
            continue
           }
           break;
          };
          break label$64;
         }
         $0 = HEAP32[17923];
         if (!($1 >>> 0 >= $0 >>> 0 ? $0 : 0)) {
          HEAP32[17923] = $1
         }
         $0 = 0;
         HEAP32[18032] = $6;
         HEAP32[18031] = $1;
         HEAP32[17927] = -1;
         HEAP32[17928] = HEAP32[18037];
         HEAP32[18034] = 0;
         while (1) {
          $2 = $0 << 3;
          $3 = $2 + 71716 | 0;
          HEAP32[$2 + 71724 >> 2] = $3;
          HEAP32[$2 + 71728 >> 2] = $3;
          $0 = $0 + 1 | 0;
          if (($0 | 0) != 32) {
           continue
          }
          break;
         };
         $0 = $6 + -40 | 0;
         $2 = $1 + 8 & 7 ? -8 - $1 & 7 : 0;
         $3 = $0 - $2 | 0;
         HEAP32[17922] = $3;
         $2 = $1 + $2 | 0;
         HEAP32[17925] = $2;
         HEAP32[$2 + 4 >> 2] = $3 | 1;
         HEAP32[($0 + $1 | 0) + 4 >> 2] = 40;
         HEAP32[17926] = HEAP32[18041];
         break label$63;
        }
        if (HEAPU8[$0 + 12 | 0] & 8 | $1 >>> 0 <= $3 >>> 0 | $2 >>> 0 > $3 >>> 0) {
         break label$64
        }
        HEAP32[$0 + 4 >> 2] = $4 + $6;
        $0 = $3 + 8 & 7 ? -8 - $3 & 7 : 0;
        $1 = $0 + $3 | 0;
        HEAP32[17925] = $1;
        $2 = HEAP32[17922] + $6 | 0;
        $0 = $2 - $0 | 0;
        HEAP32[17922] = $0;
        HEAP32[$1 + 4 >> 2] = $0 | 1;
        HEAP32[($2 + $3 | 0) + 4 >> 2] = 40;
        HEAP32[17926] = HEAP32[18041];
        break label$63;
       }
       $0 = HEAP32[17923];
       if ($1 >>> 0 < $0 >>> 0) {
        HEAP32[17923] = $1;
        $0 = 0;
       }
       $2 = $1 + $6 | 0;
       $0 = 72124;
       label$71 : {
        label$72 : {
         label$73 : {
          label$74 : {
           label$75 : {
            label$76 : {
             while (1) {
              if (($2 | 0) != HEAP32[$0 >> 2]) {
               $0 = HEAP32[$0 + 8 >> 2];
               if ($0) {
                continue
               }
               break label$76;
              }
              break;
             };
             if (!(HEAPU8[$0 + 12 | 0] & 8)) {
              break label$75
             }
            }
            $0 = 72124;
            while (1) {
             $2 = HEAP32[$0 >> 2];
             if ($2 >>> 0 <= $3 >>> 0) {
              $4 = $2 + HEAP32[$0 + 4 >> 2] | 0;
              if ($4 >>> 0 > $3 >>> 0) {
               break label$74
              }
             }
             $0 = HEAP32[$0 + 8 >> 2];
             continue;
            };
           }
           HEAP32[$0 >> 2] = $1;
           HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + $6;
           $7 = ($1 + 8 & 7 ? -8 - $1 & 7 : 0) + $1 | 0;
           HEAP32[$7 + 4 >> 2] = $5 | 3;
           $1 = $2 + ($2 + 8 & 7 ? -8 - $2 & 7 : 0) | 0;
           $0 = ($1 - $7 | 0) - $5 | 0;
           $4 = $5 + $7 | 0;
           if (($1 | 0) == ($3 | 0)) {
            HEAP32[17925] = $4;
            $0 = HEAP32[17922] + $0 | 0;
            HEAP32[17922] = $0;
            HEAP32[$4 + 4 >> 2] = $0 | 1;
            break label$72;
           }
           if (HEAP32[17924] == ($1 | 0)) {
            HEAP32[17924] = $4;
            $0 = HEAP32[17921] + $0 | 0;
            HEAP32[17921] = $0;
            HEAP32[$4 + 4 >> 2] = $0 | 1;
            HEAP32[$0 + $4 >> 2] = $0;
            break label$72;
           }
           $2 = HEAP32[$1 + 4 >> 2];
           if (($2 & 3) == 1) {
            $9 = $2 & -8;
            label$84 : {
             if ($2 >>> 0 <= 255) {
              $3 = HEAP32[$1 + 8 >> 2];
              $5 = $2 >>> 3 | 0;
              $2 = HEAP32[$1 + 12 >> 2];
              if (($2 | 0) == ($3 | 0)) {
               HEAP32[17919] = HEAP32[17919] & __wasm_rotl_i32(-2, $5);
               break label$84;
              }
              HEAP32[$3 + 12 >> 2] = $2;
              HEAP32[$2 + 8 >> 2] = $3;
              break label$84;
             }
             $8 = HEAP32[$1 + 24 >> 2];
             $6 = HEAP32[$1 + 12 >> 2];
             label$87 : {
              if (($6 | 0) != ($1 | 0)) {
               $2 = HEAP32[$1 + 8 >> 2];
               HEAP32[$2 + 12 >> 2] = $6;
               HEAP32[$6 + 8 >> 2] = $2;
               break label$87;
              }
              label$90 : {
               $3 = $1 + 20 | 0;
               $5 = HEAP32[$3 >> 2];
               if ($5) {
                break label$90
               }
               $3 = $1 + 16 | 0;
               $5 = HEAP32[$3 >> 2];
               if ($5) {
                break label$90
               }
               $6 = 0;
               break label$87;
              }
              while (1) {
               $2 = $3;
               $6 = $5;
               $3 = $5 + 20 | 0;
               $5 = HEAP32[$3 >> 2];
               if ($5) {
                continue
               }
               $3 = $6 + 16 | 0;
               $5 = HEAP32[$6 + 16 >> 2];
               if ($5) {
                continue
               }
               break;
              };
              HEAP32[$2 >> 2] = 0;
             }
             if (!$8) {
              break label$84
             }
             $2 = HEAP32[$1 + 28 >> 2];
             $3 = ($2 << 2) + 71980 | 0;
             label$92 : {
              if (HEAP32[$3 >> 2] == ($1 | 0)) {
               HEAP32[$3 >> 2] = $6;
               if ($6) {
                break label$92
               }
               HEAP32[17920] = HEAP32[17920] & __wasm_rotl_i32(-2, $2);
               break label$84;
              }
              HEAP32[$8 + (HEAP32[$8 + 16 >> 2] == ($1 | 0) ? 16 : 20) >> 2] = $6;
              if (!$6) {
               break label$84
              }
             }
             HEAP32[$6 + 24 >> 2] = $8;
             $2 = HEAP32[$1 + 16 >> 2];
             if ($2) {
              HEAP32[$6 + 16 >> 2] = $2;
              HEAP32[$2 + 24 >> 2] = $6;
             }
             $2 = HEAP32[$1 + 20 >> 2];
             if (!$2) {
              break label$84
             }
             HEAP32[$6 + 20 >> 2] = $2;
             HEAP32[$2 + 24 >> 2] = $6;
            }
            $1 = $1 + $9 | 0;
            $0 = $0 + $9 | 0;
           }
           HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] & -2;
           HEAP32[$4 + 4 >> 2] = $0 | 1;
           HEAP32[$0 + $4 >> 2] = $0;
           if ($0 >>> 0 <= 255) {
            $1 = $0 >>> 3 | 0;
            $0 = ($1 << 3) + 71716 | 0;
            $2 = HEAP32[17919];
            $1 = 1 << $1;
            label$96 : {
             if (!($2 & $1)) {
              HEAP32[17919] = $1 | $2;
              $1 = $0;
              break label$96;
             }
             $1 = HEAP32[$0 + 8 >> 2];
            }
            HEAP32[$0 + 8 >> 2] = $4;
            HEAP32[$1 + 12 >> 2] = $4;
            HEAP32[$4 + 12 >> 2] = $0;
            HEAP32[$4 + 8 >> 2] = $1;
            break label$72;
           }
           $6 = $4;
           $1 = $0 >>> 8 | 0;
           $2 = 0;
           label$98 : {
            if (!$1) {
             break label$98
            }
            $2 = 31;
            if ($0 >>> 0 > 16777215) {
             break label$98
            }
            $3 = $1 + 1048320 >>> 16 & 8;
            $2 = $1 << $3;
            $1 = $2 + 520192 >>> 16 & 4;
            $5 = $2 << $1;
            $2 = $5 + 245760 >>> 16 & 2;
            $1 = ($5 << $2 >>> 15 | 0) - ($2 | ($1 | $3)) | 0;
            $2 = ($1 << 1 | $0 >>> $1 + 21 & 1) + 28 | 0;
           }
           $1 = $2;
           HEAP32[$6 + 28 >> 2] = $1;
           HEAP32[$4 + 16 >> 2] = 0;
           HEAP32[$4 + 20 >> 2] = 0;
           $2 = ($1 << 2) + 71980 | 0;
           $3 = HEAP32[17920];
           $5 = 1 << $1;
           label$99 : {
            if (!($3 & $5)) {
             HEAP32[17920] = $3 | $5;
             HEAP32[$2 >> 2] = $4;
             break label$99;
            }
            $3 = $0 << (($1 | 0) == 31 ? 0 : 25 - ($1 >>> 1 | 0) | 0);
            $1 = HEAP32[$2 >> 2];
            while (1) {
             $2 = $1;
             if ((HEAP32[$1 + 4 >> 2] & -8) == ($0 | 0)) {
              break label$73
             }
             $1 = $3 >>> 29 | 0;
             $3 = $3 << 1;
             $5 = ($2 + ($1 & 4) | 0) + 16 | 0;
             $1 = HEAP32[$5 >> 2];
             if ($1) {
              continue
             }
             break;
            };
            HEAP32[$5 >> 2] = $4;
           }
           HEAP32[$4 + 24 >> 2] = $2;
           HEAP32[$4 + 12 >> 2] = $4;
           HEAP32[$4 + 8 >> 2] = $4;
           break label$72;
          }
          $0 = $6 + -40 | 0;
          $2 = $1 + 8 & 7 ? -8 - $1 & 7 : 0;
          $8 = $0 - $2 | 0;
          HEAP32[17922] = $8;
          $2 = $1 + $2 | 0;
          HEAP32[17925] = $2;
          HEAP32[$2 + 4 >> 2] = $8 | 1;
          HEAP32[($0 + $1 | 0) + 4 >> 2] = 40;
          HEAP32[17926] = HEAP32[18041];
          $0 = ($4 + ($4 + -39 & 7 ? 39 - $4 & 7 : 0) | 0) + -47 | 0;
          $2 = $0 >>> 0 < $3 + 16 >>> 0 ? $3 : $0;
          HEAP32[$2 + 4 >> 2] = 27;
          $0 = HEAP32[18034];
          HEAP32[$2 + 16 >> 2] = HEAP32[18033];
          HEAP32[$2 + 20 >> 2] = $0;
          $0 = HEAP32[18032];
          HEAP32[$2 + 8 >> 2] = HEAP32[18031];
          HEAP32[$2 + 12 >> 2] = $0;
          HEAP32[18033] = $2 + 8;
          HEAP32[18032] = $6;
          HEAP32[18031] = $1;
          HEAP32[18034] = 0;
          $0 = $2 + 24 | 0;
          while (1) {
           HEAP32[$0 + 4 >> 2] = 7;
           $1 = $0 + 8 | 0;
           $0 = $0 + 4 | 0;
           if ($4 >>> 0 > $1 >>> 0) {
            continue
           }
           break;
          };
          if (($2 | 0) == ($3 | 0)) {
           break label$63
          }
          HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 4 >> 2] & -2;
          $6 = $2 - $3 | 0;
          HEAP32[$3 + 4 >> 2] = $6 | 1;
          HEAP32[$2 >> 2] = $6;
          if ($6 >>> 0 <= 255) {
           $1 = $6 >>> 3 | 0;
           $0 = ($1 << 3) + 71716 | 0;
           $2 = HEAP32[17919];
           $1 = 1 << $1;
           label$104 : {
            if (!($2 & $1)) {
             HEAP32[17919] = $1 | $2;
             $1 = $0;
             break label$104;
            }
            $1 = HEAP32[$0 + 8 >> 2];
           }
           HEAP32[$0 + 8 >> 2] = $3;
           HEAP32[$1 + 12 >> 2] = $3;
           HEAP32[$3 + 12 >> 2] = $0;
           HEAP32[$3 + 8 >> 2] = $1;
           break label$63;
          }
          HEAP32[$3 + 16 >> 2] = 0;
          HEAP32[$3 + 20 >> 2] = 0;
          $7 = $3;
          $0 = $6 >>> 8 | 0;
          $1 = 0;
          label$106 : {
           if (!$0) {
            break label$106
           }
           $1 = 31;
           if ($6 >>> 0 > 16777215) {
            break label$106
           }
           $2 = $0 + 1048320 >>> 16 & 8;
           $1 = $0 << $2;
           $0 = $1 + 520192 >>> 16 & 4;
           $4 = $1 << $0;
           $1 = $4 + 245760 >>> 16 & 2;
           $0 = ($4 << $1 >>> 15 | 0) - ($1 | ($0 | $2)) | 0;
           $1 = ($0 << 1 | $6 >>> $0 + 21 & 1) + 28 | 0;
          }
          $0 = $1;
          HEAP32[$7 + 28 >> 2] = $0;
          $1 = ($0 << 2) + 71980 | 0;
          $2 = HEAP32[17920];
          $4 = 1 << $0;
          label$107 : {
           if (!($2 & $4)) {
            HEAP32[17920] = $2 | $4;
            HEAP32[$1 >> 2] = $3;
            HEAP32[$3 + 24 >> 2] = $1;
            break label$107;
           }
           $0 = $6 << (($0 | 0) == 31 ? 0 : 25 - ($0 >>> 1 | 0) | 0);
           $1 = HEAP32[$1 >> 2];
           while (1) {
            $2 = $1;
            if (($6 | 0) == (HEAP32[$1 + 4 >> 2] & -8)) {
             break label$71
            }
            $1 = $0 >>> 29 | 0;
            $0 = $0 << 1;
            $4 = ($2 + ($1 & 4) | 0) + 16 | 0;
            $1 = HEAP32[$4 >> 2];
            if ($1) {
             continue
            }
            break;
           };
           HEAP32[$4 >> 2] = $3;
           HEAP32[$3 + 24 >> 2] = $2;
          }
          HEAP32[$3 + 12 >> 2] = $3;
          HEAP32[$3 + 8 >> 2] = $3;
          break label$63;
         }
         $0 = HEAP32[$2 + 8 >> 2];
         HEAP32[$0 + 12 >> 2] = $4;
         HEAP32[$2 + 8 >> 2] = $4;
         HEAP32[$4 + 24 >> 2] = 0;
         HEAP32[$4 + 12 >> 2] = $2;
         HEAP32[$4 + 8 >> 2] = $0;
        }
        $0 = $7 + 8 | 0;
        break label$2;
       }
       $0 = HEAP32[$2 + 8 >> 2];
       HEAP32[$0 + 12 >> 2] = $3;
       HEAP32[$2 + 8 >> 2] = $3;
       HEAP32[$3 + 24 >> 2] = 0;
       HEAP32[$3 + 12 >> 2] = $2;
       HEAP32[$3 + 8 >> 2] = $0;
      }
      $0 = HEAP32[17922];
      if ($0 >>> 0 <= $5 >>> 0) {
       break label$5
      }
      $1 = $0 - $5 | 0;
      HEAP32[17922] = $1;
      $0 = HEAP32[17925];
      $2 = $0 + $5 | 0;
      HEAP32[17925] = $2;
      HEAP32[$2 + 4 >> 2] = $1 | 1;
      HEAP32[$0 + 4 >> 2] = $5 | 3;
      $0 = $0 + 8 | 0;
      break label$2;
     }
     HEAP32[16596] = 48;
     $0 = 0;
     break label$2;
    }
    label$110 : {
     if (!$7) {
      break label$110
     }
     $0 = HEAP32[$4 + 28 >> 2];
     $3 = ($0 << 2) + 71980 | 0;
     label$111 : {
      if (HEAP32[$3 >> 2] == ($4 | 0)) {
       HEAP32[$3 >> 2] = $1;
       if ($1) {
        break label$111
       }
       $8 = __wasm_rotl_i32(-2, $0) & $8;
       HEAP32[17920] = $8;
       break label$110;
      }
      HEAP32[$7 + (HEAP32[$7 + 16 >> 2] == ($4 | 0) ? 16 : 20) >> 2] = $1;
      if (!$1) {
       break label$110
      }
     }
     HEAP32[$1 + 24 >> 2] = $7;
     $0 = HEAP32[$4 + 16 >> 2];
     if ($0) {
      HEAP32[$1 + 16 >> 2] = $0;
      HEAP32[$0 + 24 >> 2] = $1;
     }
     $0 = HEAP32[$4 + 20 >> 2];
     if (!$0) {
      break label$110
     }
     HEAP32[$1 + 20 >> 2] = $0;
     HEAP32[$0 + 24 >> 2] = $1;
    }
    label$114 : {
     if ($2 >>> 0 <= 15) {
      $0 = $2 + $5 | 0;
      HEAP32[$4 + 4 >> 2] = $0 | 3;
      $0 = $0 + $4 | 0;
      HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] | 1;
      break label$114;
     }
     HEAP32[$4 + 4 >> 2] = $5 | 3;
     $1 = $4 + $5 | 0;
     HEAP32[$1 + 4 >> 2] = $2 | 1;
     HEAP32[$1 + $2 >> 2] = $2;
     if ($2 >>> 0 <= 255) {
      $2 = $2 >>> 3 | 0;
      $0 = ($2 << 3) + 71716 | 0;
      $3 = HEAP32[17919];
      $2 = 1 << $2;
      label$117 : {
       if (!($3 & $2)) {
        HEAP32[17919] = $2 | $3;
        $2 = $0;
        break label$117;
       }
       $2 = HEAP32[$0 + 8 >> 2];
      }
      HEAP32[$0 + 8 >> 2] = $1;
      HEAP32[$2 + 12 >> 2] = $1;
      HEAP32[$1 + 12 >> 2] = $0;
      HEAP32[$1 + 8 >> 2] = $2;
      break label$114;
     }
     $7 = $1;
     $0 = $2 >>> 8 | 0;
     $3 = 0;
     label$119 : {
      if (!$0) {
       break label$119
      }
      $3 = 31;
      if ($2 >>> 0 > 16777215) {
       break label$119
      }
      $5 = $0 + 1048320 >>> 16 & 8;
      $3 = $0 << $5;
      $0 = $3 + 520192 >>> 16 & 4;
      $6 = $3 << $0;
      $3 = $6 + 245760 >>> 16 & 2;
      $0 = ($6 << $3 >>> 15 | 0) - ($3 | ($0 | $5)) | 0;
      $3 = ($0 << 1 | $2 >>> $0 + 21 & 1) + 28 | 0;
     }
     $0 = $3;
     HEAP32[$7 + 28 >> 2] = $0;
     HEAP32[$1 + 16 >> 2] = 0;
     HEAP32[$1 + 20 >> 2] = 0;
     $3 = ($0 << 2) + 71980 | 0;
     label$120 : {
      $5 = 1 << $0;
      label$121 : {
       if (!($5 & $8)) {
        HEAP32[17920] = $5 | $8;
        HEAP32[$3 >> 2] = $1;
        break label$121;
       }
       $0 = $2 << (($0 | 0) == 31 ? 0 : 25 - ($0 >>> 1 | 0) | 0);
       $5 = HEAP32[$3 >> 2];
       while (1) {
        $3 = $5;
        if ((HEAP32[$3 + 4 >> 2] & -8) == ($2 | 0)) {
         break label$120
        }
        $5 = $0 >>> 29 | 0;
        $0 = $0 << 1;
        $6 = ($3 + ($5 & 4) | 0) + 16 | 0;
        $5 = HEAP32[$6 >> 2];
        if ($5) {
         continue
        }
        break;
       };
       HEAP32[$6 >> 2] = $1;
      }
      HEAP32[$1 + 24 >> 2] = $3;
      HEAP32[$1 + 12 >> 2] = $1;
      HEAP32[$1 + 8 >> 2] = $1;
      break label$114;
     }
     $0 = HEAP32[$3 + 8 >> 2];
     HEAP32[$0 + 12 >> 2] = $1;
     HEAP32[$3 + 8 >> 2] = $1;
     HEAP32[$1 + 24 >> 2] = 0;
     HEAP32[$1 + 12 >> 2] = $3;
     HEAP32[$1 + 8 >> 2] = $0;
    }
    $0 = $4 + 8 | 0;
    break label$2;
   }
   label$124 : {
    if (!$9) {
     break label$124
    }
    $0 = HEAP32[$1 + 28 >> 2];
    $2 = ($0 << 2) + 71980 | 0;
    label$125 : {
     if (HEAP32[$2 >> 2] == ($1 | 0)) {
      HEAP32[$2 >> 2] = $4;
      if ($4) {
       break label$125
      }
      HEAP32[17920] = __wasm_rotl_i32(-2, $0) & $10;
      break label$124;
     }
     HEAP32[(HEAP32[$9 + 16 >> 2] == ($1 | 0) ? 16 : 20) + $9 >> 2] = $4;
     if (!$4) {
      break label$124
     }
    }
    HEAP32[$4 + 24 >> 2] = $9;
    $0 = HEAP32[$1 + 16 >> 2];
    if ($0) {
     HEAP32[$4 + 16 >> 2] = $0;
     HEAP32[$0 + 24 >> 2] = $4;
    }
    $0 = HEAP32[$1 + 20 >> 2];
    if (!$0) {
     break label$124
    }
    HEAP32[$4 + 20 >> 2] = $0;
    HEAP32[$0 + 24 >> 2] = $4;
   }
   label$128 : {
    if ($3 >>> 0 <= 15) {
     $0 = $3 + $5 | 0;
     HEAP32[$1 + 4 >> 2] = $0 | 3;
     $0 = $0 + $1 | 0;
     HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] | 1;
     break label$128;
    }
    HEAP32[$1 + 4 >> 2] = $5 | 3;
    $5 = $1 + $5 | 0;
    HEAP32[$5 + 4 >> 2] = $3 | 1;
    HEAP32[$3 + $5 >> 2] = $3;
    if ($7) {
     $4 = $7 >>> 3 | 0;
     $0 = ($4 << 3) + 71716 | 0;
     $2 = HEAP32[17924];
     $4 = 1 << $4;
     label$131 : {
      if (!($4 & $6)) {
       HEAP32[17919] = $4 | $6;
       $6 = $0;
       break label$131;
      }
      $6 = HEAP32[$0 + 8 >> 2];
     }
     HEAP32[$0 + 8 >> 2] = $2;
     HEAP32[$6 + 12 >> 2] = $2;
     HEAP32[$2 + 12 >> 2] = $0;
     HEAP32[$2 + 8 >> 2] = $6;
    }
    HEAP32[17924] = $5;
    HEAP32[17921] = $3;
   }
   $0 = $1 + 8 | 0;
  }
  $1 = $11 + 16 | 0;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  return $0 | 0;
 }
 
 function dlfree($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
  label$1 : {
   if (!$0) {
    break label$1
   }
   $3 = $0 + -8 | 0;
   $2 = HEAP32[$0 + -4 >> 2];
   $0 = $2 & -8;
   $5 = $3 + $0 | 0;
   label$2 : {
    if ($2 & 1) {
     break label$2
    }
    if (!($2 & 3)) {
     break label$1
    }
    $2 = HEAP32[$3 >> 2];
    $3 = $3 - $2 | 0;
    if ($3 >>> 0 < HEAPU32[17923]) {
     break label$1
    }
    $0 = $0 + $2 | 0;
    if (HEAP32[17924] != ($3 | 0)) {
     if ($2 >>> 0 <= 255) {
      $4 = HEAP32[$3 + 8 >> 2];
      $2 = $2 >>> 3 | 0;
      $1 = HEAP32[$3 + 12 >> 2];
      if (($1 | 0) == ($4 | 0)) {
       HEAP32[17919] = HEAP32[17919] & __wasm_rotl_i32(-2, $2);
       break label$2;
      }
      HEAP32[$4 + 12 >> 2] = $1;
      HEAP32[$1 + 8 >> 2] = $4;
      break label$2;
     }
     $7 = HEAP32[$3 + 24 >> 2];
     $2 = HEAP32[$3 + 12 >> 2];
     label$6 : {
      if (($2 | 0) != ($3 | 0)) {
       $1 = HEAP32[$3 + 8 >> 2];
       HEAP32[$1 + 12 >> 2] = $2;
       HEAP32[$2 + 8 >> 2] = $1;
       break label$6;
      }
      label$9 : {
       $4 = $3 + 20 | 0;
       $1 = HEAP32[$4 >> 2];
       if ($1) {
        break label$9
       }
       $4 = $3 + 16 | 0;
       $1 = HEAP32[$4 >> 2];
       if ($1) {
        break label$9
       }
       $2 = 0;
       break label$6;
      }
      while (1) {
       $6 = $4;
       $2 = $1;
       $4 = $2 + 20 | 0;
       $1 = HEAP32[$4 >> 2];
       if ($1) {
        continue
       }
       $4 = $2 + 16 | 0;
       $1 = HEAP32[$2 + 16 >> 2];
       if ($1) {
        continue
       }
       break;
      };
      HEAP32[$6 >> 2] = 0;
     }
     if (!$7) {
      break label$2
     }
     $4 = HEAP32[$3 + 28 >> 2];
     $1 = ($4 << 2) + 71980 | 0;
     label$11 : {
      if (HEAP32[$1 >> 2] == ($3 | 0)) {
       HEAP32[$1 >> 2] = $2;
       if ($2) {
        break label$11
       }
       HEAP32[17920] = HEAP32[17920] & __wasm_rotl_i32(-2, $4);
       break label$2;
      }
      HEAP32[$7 + (HEAP32[$7 + 16 >> 2] == ($3 | 0) ? 16 : 20) >> 2] = $2;
      if (!$2) {
       break label$2
      }
     }
     HEAP32[$2 + 24 >> 2] = $7;
     $1 = HEAP32[$3 + 16 >> 2];
     if ($1) {
      HEAP32[$2 + 16 >> 2] = $1;
      HEAP32[$1 + 24 >> 2] = $2;
     }
     $1 = HEAP32[$3 + 20 >> 2];
     if (!$1) {
      break label$2
     }
     HEAP32[$2 + 20 >> 2] = $1;
     HEAP32[$1 + 24 >> 2] = $2;
     break label$2;
    }
    $2 = HEAP32[$5 + 4 >> 2];
    if (($2 & 3) != 3) {
     break label$2
    }
    HEAP32[17921] = $0;
    HEAP32[$5 + 4 >> 2] = $2 & -2;
    HEAP32[$3 + 4 >> 2] = $0 | 1;
    HEAP32[$0 + $3 >> 2] = $0;
    return;
   }
   if ($5 >>> 0 <= $3 >>> 0) {
    break label$1
   }
   $2 = HEAP32[$5 + 4 >> 2];
   if (!($2 & 1)) {
    break label$1
   }
   label$14 : {
    if (!($2 & 2)) {
     if (($5 | 0) == HEAP32[17925]) {
      HEAP32[17925] = $3;
      $0 = HEAP32[17922] + $0 | 0;
      HEAP32[17922] = $0;
      HEAP32[$3 + 4 >> 2] = $0 | 1;
      if (HEAP32[17924] != ($3 | 0)) {
       break label$1
      }
      HEAP32[17921] = 0;
      HEAP32[17924] = 0;
      return;
     }
     if (($5 | 0) == HEAP32[17924]) {
      HEAP32[17924] = $3;
      $0 = HEAP32[17921] + $0 | 0;
      HEAP32[17921] = $0;
      HEAP32[$3 + 4 >> 2] = $0 | 1;
      HEAP32[$0 + $3 >> 2] = $0;
      return;
     }
     $0 = ($2 & -8) + $0 | 0;
     label$18 : {
      if ($2 >>> 0 <= 255) {
       $1 = HEAP32[$5 + 8 >> 2];
       $2 = $2 >>> 3 | 0;
       $4 = HEAP32[$5 + 12 >> 2];
       if (($1 | 0) == ($4 | 0)) {
        HEAP32[17919] = HEAP32[17919] & __wasm_rotl_i32(-2, $2);
        break label$18;
       }
       HEAP32[$1 + 12 >> 2] = $4;
       HEAP32[$4 + 8 >> 2] = $1;
       break label$18;
      }
      $7 = HEAP32[$5 + 24 >> 2];
      $2 = HEAP32[$5 + 12 >> 2];
      label$23 : {
       if (($5 | 0) != ($2 | 0)) {
        $1 = HEAP32[$5 + 8 >> 2];
        HEAP32[$1 + 12 >> 2] = $2;
        HEAP32[$2 + 8 >> 2] = $1;
        break label$23;
       }
       label$26 : {
        $4 = $5 + 20 | 0;
        $1 = HEAP32[$4 >> 2];
        if ($1) {
         break label$26
        }
        $4 = $5 + 16 | 0;
        $1 = HEAP32[$4 >> 2];
        if ($1) {
         break label$26
        }
        $2 = 0;
        break label$23;
       }
       while (1) {
        $6 = $4;
        $2 = $1;
        $4 = $2 + 20 | 0;
        $1 = HEAP32[$4 >> 2];
        if ($1) {
         continue
        }
        $4 = $2 + 16 | 0;
        $1 = HEAP32[$2 + 16 >> 2];
        if ($1) {
         continue
        }
        break;
       };
       HEAP32[$6 >> 2] = 0;
      }
      if (!$7) {
       break label$18
      }
      $4 = HEAP32[$5 + 28 >> 2];
      $1 = ($4 << 2) + 71980 | 0;
      label$28 : {
       if (($5 | 0) == HEAP32[$1 >> 2]) {
        HEAP32[$1 >> 2] = $2;
        if ($2) {
         break label$28
        }
        HEAP32[17920] = HEAP32[17920] & __wasm_rotl_i32(-2, $4);
        break label$18;
       }
       HEAP32[$7 + (($5 | 0) == HEAP32[$7 + 16 >> 2] ? 16 : 20) >> 2] = $2;
       if (!$2) {
        break label$18
       }
      }
      HEAP32[$2 + 24 >> 2] = $7;
      $1 = HEAP32[$5 + 16 >> 2];
      if ($1) {
       HEAP32[$2 + 16 >> 2] = $1;
       HEAP32[$1 + 24 >> 2] = $2;
      }
      $1 = HEAP32[$5 + 20 >> 2];
      if (!$1) {
       break label$18
      }
      HEAP32[$2 + 20 >> 2] = $1;
      HEAP32[$1 + 24 >> 2] = $2;
     }
     HEAP32[$3 + 4 >> 2] = $0 | 1;
     HEAP32[$0 + $3 >> 2] = $0;
     if (HEAP32[17924] != ($3 | 0)) {
      break label$14
     }
     HEAP32[17921] = $0;
     return;
    }
    HEAP32[$5 + 4 >> 2] = $2 & -2;
    HEAP32[$3 + 4 >> 2] = $0 | 1;
    HEAP32[$0 + $3 >> 2] = $0;
   }
   if ($0 >>> 0 <= 255) {
    $0 = $0 >>> 3 | 0;
    $2 = ($0 << 3) + 71716 | 0;
    $1 = HEAP32[17919];
    $0 = 1 << $0;
    label$32 : {
     if (!($1 & $0)) {
      HEAP32[17919] = $0 | $1;
      $0 = $2;
      break label$32;
     }
     $0 = HEAP32[$2 + 8 >> 2];
    }
    HEAP32[$2 + 8 >> 2] = $3;
    HEAP32[$0 + 12 >> 2] = $3;
    HEAP32[$3 + 12 >> 2] = $2;
    HEAP32[$3 + 8 >> 2] = $0;
    return;
   }
   HEAP32[$3 + 16 >> 2] = 0;
   HEAP32[$3 + 20 >> 2] = 0;
   $2 = $3;
   $4 = $0 >>> 8 | 0;
   $1 = 0;
   label$34 : {
    if (!$4) {
     break label$34
    }
    $1 = 31;
    if ($0 >>> 0 > 16777215) {
     break label$34
    }
    $1 = $4;
    $4 = $4 + 1048320 >>> 16 & 8;
    $1 = $1 << $4;
    $7 = $1 + 520192 >>> 16 & 4;
    $1 = $1 << $7;
    $6 = $1 + 245760 >>> 16 & 2;
    $1 = ($1 << $6 >>> 15 | 0) - ($6 | ($4 | $7)) | 0;
    $1 = ($1 << 1 | $0 >>> $1 + 21 & 1) + 28 | 0;
   }
   HEAP32[$2 + 28 >> 2] = $1;
   $6 = ($1 << 2) + 71980 | 0;
   label$35 : {
    label$36 : {
     $4 = HEAP32[17920];
     $2 = 1 << $1;
     label$37 : {
      if (!($4 & $2)) {
       HEAP32[17920] = $2 | $4;
       HEAP32[$6 >> 2] = $3;
       HEAP32[$3 + 24 >> 2] = $6;
       break label$37;
      }
      $4 = $0 << (($1 | 0) == 31 ? 0 : 25 - ($1 >>> 1 | 0) | 0);
      $2 = HEAP32[$6 >> 2];
      while (1) {
       $1 = $2;
       if ((HEAP32[$2 + 4 >> 2] & -8) == ($0 | 0)) {
        break label$36
       }
       $2 = $4 >>> 29 | 0;
       $4 = $4 << 1;
       $6 = ($1 + ($2 & 4) | 0) + 16 | 0;
       $2 = HEAP32[$6 >> 2];
       if ($2) {
        continue
       }
       break;
      };
      HEAP32[$6 >> 2] = $3;
      HEAP32[$3 + 24 >> 2] = $1;
     }
     HEAP32[$3 + 12 >> 2] = $3;
     HEAP32[$3 + 8 >> 2] = $3;
     break label$35;
    }
    $0 = HEAP32[$1 + 8 >> 2];
    HEAP32[$0 + 12 >> 2] = $3;
    HEAP32[$1 + 8 >> 2] = $3;
    HEAP32[$3 + 24 >> 2] = 0;
    HEAP32[$3 + 12 >> 2] = $1;
    HEAP32[$3 + 8 >> 2] = $0;
   }
   $0 = HEAP32[17927] + -1 | 0;
   HEAP32[17927] = $0;
   if ($0) {
    break label$1
   }
   $3 = 72132;
   while (1) {
    $0 = HEAP32[$3 >> 2];
    $3 = $0 + 8 | 0;
    if ($0) {
     continue
    }
    break;
   };
   HEAP32[17927] = -1;
  }
 }
 
 function dlrealloc($0, $1) {
  var $2 = 0, $3 = 0;
  if (!$0) {
   return dlmalloc($1)
  }
  if ($1 >>> 0 >= 4294967232) {
   HEAP32[16596] = 48;
   return 0;
  }
  $2 = try_realloc_chunk($0 + -8 | 0, $1 >>> 0 < 11 ? 16 : $1 + 11 & -8);
  if ($2) {
   return $2 + 8 | 0
  }
  $2 = dlmalloc($1);
  if (!$2) {
   return 0
  }
  $3 = HEAP32[$0 + -4 >> 2];
  $3 = ($3 & -8) - ($3 & 3 ? 4 : 8) | 0;
  memcpy($2, $0, $3 >>> 0 < $1 >>> 0 ? $3 : $1);
  dlfree($0);
  return $2;
 }
 
 function try_realloc_chunk($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
  $7 = HEAP32[$0 + 4 >> 2];
  $2 = $7 & 3;
  $3 = $7 & -8;
  $5 = $3 + $0 | 0;
  label$2 : {
   if (!$2) {
    $2 = 0;
    if ($1 >>> 0 < 256) {
     break label$2
    }
    if ($3 >>> 0 >= $1 + 4 >>> 0) {
     $2 = $0;
     if ($3 - $1 >>> 0 <= HEAP32[18039] << 1 >>> 0) {
      break label$2
     }
    }
    return 0;
   }
   label$5 : {
    if ($3 >>> 0 >= $1 >>> 0) {
     $2 = $3 - $1 | 0;
     if ($2 >>> 0 < 16) {
      break label$5
     }
     HEAP32[$0 + 4 >> 2] = $7 & 1 | $1 | 2;
     $1 = $0 + $1 | 0;
     HEAP32[$1 + 4 >> 2] = $2 | 3;
     HEAP32[$5 + 4 >> 2] = HEAP32[$5 + 4 >> 2] | 1;
     dispose_chunk($1, $2);
     break label$5;
    }
    $2 = 0;
    if (($5 | 0) == HEAP32[17925]) {
     $4 = $3 + HEAP32[17922] | 0;
     if ($4 >>> 0 <= $1 >>> 0) {
      break label$2
     }
     HEAP32[$0 + 4 >> 2] = $7 & 1 | $1 | 2;
     $2 = $0 + $1 | 0;
     $1 = $4 - $1 | 0;
     HEAP32[$2 + 4 >> 2] = $1 | 1;
     HEAP32[17922] = $1;
     HEAP32[17925] = $2;
     break label$5;
    }
    if (($5 | 0) == HEAP32[17924]) {
     $4 = $3 + HEAP32[17921] | 0;
     if ($4 >>> 0 < $1 >>> 0) {
      break label$2
     }
     $2 = $4 - $1 | 0;
     label$9 : {
      if ($2 >>> 0 >= 16) {
       HEAP32[$0 + 4 >> 2] = $7 & 1 | $1 | 2;
       $1 = $0 + $1 | 0;
       HEAP32[$1 + 4 >> 2] = $2 | 1;
       $4 = $0 + $4 | 0;
       HEAP32[$4 >> 2] = $2;
       HEAP32[$4 + 4 >> 2] = HEAP32[$4 + 4 >> 2] & -2;
       break label$9;
      }
      HEAP32[$0 + 4 >> 2] = $4 | $7 & 1 | 2;
      $1 = $0 + $4 | 0;
      HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] | 1;
      $2 = 0;
      $1 = 0;
     }
     HEAP32[17924] = $1;
     HEAP32[17921] = $2;
     break label$5;
    }
    $6 = HEAP32[$5 + 4 >> 2];
    if ($6 & 2) {
     break label$2
    }
    $8 = $3 + ($6 & -8) | 0;
    if ($8 >>> 0 < $1 >>> 0) {
     break label$2
    }
    $10 = $8 - $1 | 0;
    label$11 : {
     if ($6 >>> 0 <= 255) {
      $2 = $6 >>> 3 | 0;
      $6 = HEAP32[$5 + 8 >> 2];
      $4 = HEAP32[$5 + 12 >> 2];
      if (($6 | 0) == ($4 | 0)) {
       HEAP32[17919] = HEAP32[17919] & __wasm_rotl_i32(-2, $2);
       break label$11;
      }
      HEAP32[$6 + 12 >> 2] = $4;
      HEAP32[$4 + 8 >> 2] = $6;
      break label$11;
     }
     $9 = HEAP32[$5 + 24 >> 2];
     $3 = HEAP32[$5 + 12 >> 2];
     label$14 : {
      if (($5 | 0) != ($3 | 0)) {
       $2 = HEAP32[$5 + 8 >> 2];
       HEAP32[$2 + 12 >> 2] = $3;
       HEAP32[$3 + 8 >> 2] = $2;
       break label$14;
      }
      label$17 : {
       $2 = $5 + 20 | 0;
       $6 = HEAP32[$2 >> 2];
       if ($6) {
        break label$17
       }
       $2 = $5 + 16 | 0;
       $6 = HEAP32[$2 >> 2];
       if ($6) {
        break label$17
       }
       $3 = 0;
       break label$14;
      }
      while (1) {
       $4 = $2;
       $3 = $6;
       $2 = $3 + 20 | 0;
       $6 = HEAP32[$2 >> 2];
       if ($6) {
        continue
       }
       $2 = $3 + 16 | 0;
       $6 = HEAP32[$3 + 16 >> 2];
       if ($6) {
        continue
       }
       break;
      };
      HEAP32[$4 >> 2] = 0;
     }
     if (!$9) {
      break label$11
     }
     $4 = HEAP32[$5 + 28 >> 2];
     $2 = ($4 << 2) + 71980 | 0;
     label$19 : {
      if (($5 | 0) == HEAP32[$2 >> 2]) {
       HEAP32[$2 >> 2] = $3;
       if ($3) {
        break label$19
       }
       HEAP32[17920] = HEAP32[17920] & __wasm_rotl_i32(-2, $4);
       break label$11;
      }
      HEAP32[(($5 | 0) == HEAP32[$9 + 16 >> 2] ? 16 : 20) + $9 >> 2] = $3;
      if (!$3) {
       break label$11
      }
     }
     HEAP32[$3 + 24 >> 2] = $9;
     $2 = HEAP32[$5 + 16 >> 2];
     if ($2) {
      HEAP32[$3 + 16 >> 2] = $2;
      HEAP32[$2 + 24 >> 2] = $3;
     }
     $2 = HEAP32[$5 + 20 >> 2];
     if (!$2) {
      break label$11
     }
     HEAP32[$3 + 20 >> 2] = $2;
     HEAP32[$2 + 24 >> 2] = $3;
    }
    if ($10 >>> 0 <= 15) {
     HEAP32[$0 + 4 >> 2] = $7 & 1 | $8 | 2;
     $1 = $0 + $8 | 0;
     HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] | 1;
     break label$5;
    }
    HEAP32[$0 + 4 >> 2] = $7 & 1 | $1 | 2;
    $2 = $0 + $1 | 0;
    HEAP32[$2 + 4 >> 2] = $10 | 3;
    $1 = $0 + $8 | 0;
    HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] | 1;
    dispose_chunk($2, $10);
   }
   $2 = $0;
  }
  return $2;
 }
 
 function dispose_chunk($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
  $5 = $0 + $1 | 0;
  label$1 : {
   label$2 : {
    $2 = HEAP32[$0 + 4 >> 2];
    if ($2 & 1) {
     break label$2
    }
    if (!($2 & 3)) {
     break label$1
    }
    $2 = HEAP32[$0 >> 2];
    $1 = $2 + $1 | 0;
    $0 = $0 - $2 | 0;
    if (($0 | 0) != HEAP32[17924]) {
     if ($2 >>> 0 <= 255) {
      $4 = $2 >>> 3 | 0;
      $2 = HEAP32[$0 + 8 >> 2];
      $3 = HEAP32[$0 + 12 >> 2];
      if (($3 | 0) == ($2 | 0)) {
       HEAP32[17919] = HEAP32[17919] & __wasm_rotl_i32(-2, $4);
       break label$2;
      }
      HEAP32[$2 + 12 >> 2] = $3;
      HEAP32[$3 + 8 >> 2] = $2;
      break label$2;
     }
     $7 = HEAP32[$0 + 24 >> 2];
     $2 = HEAP32[$0 + 12 >> 2];
     label$6 : {
      if (($2 | 0) != ($0 | 0)) {
       $3 = HEAP32[$0 + 8 >> 2];
       HEAP32[$3 + 12 >> 2] = $2;
       HEAP32[$2 + 8 >> 2] = $3;
       break label$6;
      }
      label$9 : {
       $3 = $0 + 20 | 0;
       $4 = HEAP32[$3 >> 2];
       if ($4) {
        break label$9
       }
       $3 = $0 + 16 | 0;
       $4 = HEAP32[$3 >> 2];
       if ($4) {
        break label$9
       }
       $2 = 0;
       break label$6;
      }
      while (1) {
       $6 = $3;
       $2 = $4;
       $3 = $2 + 20 | 0;
       $4 = HEAP32[$3 >> 2];
       if ($4) {
        continue
       }
       $3 = $2 + 16 | 0;
       $4 = HEAP32[$2 + 16 >> 2];
       if ($4) {
        continue
       }
       break;
      };
      HEAP32[$6 >> 2] = 0;
     }
     if (!$7) {
      break label$2
     }
     $3 = HEAP32[$0 + 28 >> 2];
     $4 = ($3 << 2) + 71980 | 0;
     label$11 : {
      if (HEAP32[$4 >> 2] == ($0 | 0)) {
       HEAP32[$4 >> 2] = $2;
       if ($2) {
        break label$11
       }
       HEAP32[17920] = HEAP32[17920] & __wasm_rotl_i32(-2, $3);
       break label$2;
      }
      HEAP32[$7 + (HEAP32[$7 + 16 >> 2] == ($0 | 0) ? 16 : 20) >> 2] = $2;
      if (!$2) {
       break label$2
      }
     }
     HEAP32[$2 + 24 >> 2] = $7;
     $3 = HEAP32[$0 + 16 >> 2];
     if ($3) {
      HEAP32[$2 + 16 >> 2] = $3;
      HEAP32[$3 + 24 >> 2] = $2;
     }
     $3 = HEAP32[$0 + 20 >> 2];
     if (!$3) {
      break label$2
     }
     HEAP32[$2 + 20 >> 2] = $3;
     HEAP32[$3 + 24 >> 2] = $2;
     break label$2;
    }
    $2 = HEAP32[$5 + 4 >> 2];
    if (($2 & 3) != 3) {
     break label$2
    }
    HEAP32[17921] = $1;
    HEAP32[$5 + 4 >> 2] = $2 & -2;
    HEAP32[$0 + 4 >> 2] = $1 | 1;
    HEAP32[$5 >> 2] = $1;
    return;
   }
   $2 = HEAP32[$5 + 4 >> 2];
   label$14 : {
    if (!($2 & 2)) {
     if (($5 | 0) == HEAP32[17925]) {
      HEAP32[17925] = $0;
      $1 = HEAP32[17922] + $1 | 0;
      HEAP32[17922] = $1;
      HEAP32[$0 + 4 >> 2] = $1 | 1;
      if (HEAP32[17924] != ($0 | 0)) {
       break label$1
      }
      HEAP32[17921] = 0;
      HEAP32[17924] = 0;
      return;
     }
     if (($5 | 0) == HEAP32[17924]) {
      HEAP32[17924] = $0;
      $1 = HEAP32[17921] + $1 | 0;
      HEAP32[17921] = $1;
      HEAP32[$0 + 4 >> 2] = $1 | 1;
      HEAP32[$0 + $1 >> 2] = $1;
      return;
     }
     $1 = ($2 & -8) + $1 | 0;
     label$18 : {
      if ($2 >>> 0 <= 255) {
       $4 = $2 >>> 3 | 0;
       $2 = HEAP32[$5 + 8 >> 2];
       $3 = HEAP32[$5 + 12 >> 2];
       if (($2 | 0) == ($3 | 0)) {
        HEAP32[17919] = HEAP32[17919] & __wasm_rotl_i32(-2, $4);
        break label$18;
       }
       HEAP32[$2 + 12 >> 2] = $3;
       HEAP32[$3 + 8 >> 2] = $2;
       break label$18;
      }
      $7 = HEAP32[$5 + 24 >> 2];
      $2 = HEAP32[$5 + 12 >> 2];
      label$21 : {
       if (($5 | 0) != ($2 | 0)) {
        $3 = HEAP32[$5 + 8 >> 2];
        HEAP32[$3 + 12 >> 2] = $2;
        HEAP32[$2 + 8 >> 2] = $3;
        break label$21;
       }
       label$24 : {
        $3 = $5 + 20 | 0;
        $4 = HEAP32[$3 >> 2];
        if ($4) {
         break label$24
        }
        $3 = $5 + 16 | 0;
        $4 = HEAP32[$3 >> 2];
        if ($4) {
         break label$24
        }
        $2 = 0;
        break label$21;
       }
       while (1) {
        $6 = $3;
        $2 = $4;
        $3 = $2 + 20 | 0;
        $4 = HEAP32[$3 >> 2];
        if ($4) {
         continue
        }
        $3 = $2 + 16 | 0;
        $4 = HEAP32[$2 + 16 >> 2];
        if ($4) {
         continue
        }
        break;
       };
       HEAP32[$6 >> 2] = 0;
      }
      if (!$7) {
       break label$18
      }
      $3 = HEAP32[$5 + 28 >> 2];
      $4 = ($3 << 2) + 71980 | 0;
      label$26 : {
       if (($5 | 0) == HEAP32[$4 >> 2]) {
        HEAP32[$4 >> 2] = $2;
        if ($2) {
         break label$26
        }
        HEAP32[17920] = HEAP32[17920] & __wasm_rotl_i32(-2, $3);
        break label$18;
       }
       HEAP32[$7 + (($5 | 0) == HEAP32[$7 + 16 >> 2] ? 16 : 20) >> 2] = $2;
       if (!$2) {
        break label$18
       }
      }
      HEAP32[$2 + 24 >> 2] = $7;
      $3 = HEAP32[$5 + 16 >> 2];
      if ($3) {
       HEAP32[$2 + 16 >> 2] = $3;
       HEAP32[$3 + 24 >> 2] = $2;
      }
      $3 = HEAP32[$5 + 20 >> 2];
      if (!$3) {
       break label$18
      }
      HEAP32[$2 + 20 >> 2] = $3;
      HEAP32[$3 + 24 >> 2] = $2;
     }
     HEAP32[$0 + 4 >> 2] = $1 | 1;
     HEAP32[$0 + $1 >> 2] = $1;
     if (HEAP32[17924] != ($0 | 0)) {
      break label$14
     }
     HEAP32[17921] = $1;
     return;
    }
    HEAP32[$5 + 4 >> 2] = $2 & -2;
    HEAP32[$0 + 4 >> 2] = $1 | 1;
    HEAP32[$0 + $1 >> 2] = $1;
   }
   if ($1 >>> 0 <= 255) {
    $2 = $1 >>> 3 | 0;
    $1 = ($2 << 3) + 71716 | 0;
    $3 = HEAP32[17919];
    $2 = 1 << $2;
    label$30 : {
     if (!($3 & $2)) {
      HEAP32[17919] = $2 | $3;
      $2 = $1;
      break label$30;
     }
     $2 = HEAP32[$1 + 8 >> 2];
    }
    HEAP32[$1 + 8 >> 2] = $0;
    HEAP32[$2 + 12 >> 2] = $0;
    HEAP32[$0 + 12 >> 2] = $1;
    HEAP32[$0 + 8 >> 2] = $2;
    return;
   }
   HEAP32[$0 + 16 >> 2] = 0;
   HEAP32[$0 + 20 >> 2] = 0;
   $3 = $0;
   $4 = $1 >>> 8 | 0;
   $2 = 0;
   label$32 : {
    if (!$4) {
     break label$32
    }
    $2 = 31;
    if ($1 >>> 0 > 16777215) {
     break label$32
    }
    $6 = $4 + 1048320 >>> 16 & 8;
    $4 = $4 << $6;
    $2 = $4 + 520192 >>> 16 & 4;
    $5 = $4 << $2;
    $4 = $5 + 245760 >>> 16 & 2;
    $2 = ($5 << $4 >>> 15 | 0) - ($4 | ($2 | $6)) | 0;
    $2 = ($2 << 1 | $1 >>> $2 + 21 & 1) + 28 | 0;
   }
   HEAP32[$3 + 28 >> 2] = $2;
   $4 = ($2 << 2) + 71980 | 0;
   label$33 : {
    $3 = HEAP32[17920];
    $6 = 1 << $2;
    label$34 : {
     if (!($3 & $6)) {
      HEAP32[17920] = $3 | $6;
      HEAP32[$4 >> 2] = $0;
      break label$34;
     }
     $3 = $1 << (($2 | 0) == 31 ? 0 : 25 - ($2 >>> 1 | 0) | 0);
     $2 = HEAP32[$4 >> 2];
     while (1) {
      $4 = $2;
      if ((HEAP32[$2 + 4 >> 2] & -8) == ($1 | 0)) {
       break label$33
      }
      $2 = $3 >>> 29 | 0;
      $3 = $3 << 1;
      $6 = ($4 + ($2 & 4) | 0) + 16 | 0;
      $2 = HEAP32[$6 >> 2];
      if ($2) {
       continue
      }
      break;
     };
     HEAP32[$6 >> 2] = $0;
    }
    HEAP32[$0 + 24 >> 2] = $4;
    HEAP32[$0 + 12 >> 2] = $0;
    HEAP32[$0 + 8 >> 2] = $0;
    return;
   }
   $1 = HEAP32[$4 + 8 >> 2];
   HEAP32[$1 + 12 >> 2] = $0;
   HEAP32[$4 + 8 >> 2] = $0;
   HEAP32[$0 + 24 >> 2] = 0;
   HEAP32[$0 + 12 >> 2] = $4;
   HEAP32[$0 + 8 >> 2] = $1;
  }
 }
 
 function sbrk($0) {
  var $1 = 0, $2 = 0;
  $2 = __wasm_memory_size();
  label$1 : {
   $1 = HEAP32[18044];
   $0 = $1 + ($0 + 3 & -4) | 0;
   if ($0 >>> 0 <= $2 << 16 >>> 0) {
    break label$1
   }
   if (emscripten_resize_heap($0 | 0)) {
    break label$1
   }
   HEAP32[16596] = 48;
   return -1;
  }
  HEAP32[18044] = $0;
  return $1;
 }
 
 function fmod($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
  wasm2js_scratch_store_f64(+$1);
  $3 = wasm2js_scratch_load_i32(1) | 0;
  $10 = wasm2js_scratch_load_i32(0) | 0;
  $8 = $3;
  $4 = $10;
  $2 = $3 << 1 | $4 >>> 31;
  label$1 : {
   $5 = $4 << 1;
   $4 = $2;
   label$2 : {
    if (!($5 | $2)) {
     break label$2
    }
    $3 = $8 & 2147483647;
    if (($3 | 0) == 2146435072 & $10 >>> 0 > 0 | $3 >>> 0 > 2146435072) {
     break label$2
    }
    wasm2js_scratch_store_f64(+$0);
    $3 = wasm2js_scratch_load_i32(1) | 0;
    $2 = wasm2js_scratch_load_i32(0) | 0;
    $11 = $3;
    $7 = $3 >>> 20 & 2047;
    if (($7 | 0) != 2047) {
     break label$1
    }
   }
   $0 = $0 * $1;
   return $0 / $0;
  }
  $9 = $2 << 1;
  $3 = $11 << 1 | $2 >>> 31;
  $6 = $3;
  if (($4 | 0) == ($3 | 0) & $9 >>> 0 > $5 >>> 0 | $3 >>> 0 > $4 >>> 0) {
   $9 = $8 >>> 20 & 2047;
   label$4 : {
    if (!$7) {
     $7 = 0;
     $4 = $11 << 12 | $2 >>> 20;
     $6 = $2 << 12;
     $3 = $4;
     if (($3 | 0) > 0 ? 1 : ($3 | 0) >= 0 ? ($6 >>> 0 < 0 ? 0 : 1) : 0) {
      while (1) {
       $7 = $7 + -1 | 0;
       $4 = $3 << 1 | $6 >>> 31;
       $6 = $6 << 1;
       $3 = $4;
       if (($3 | 0) > -1 ? 1 : ($3 | 0) >= -1 ? ($6 >>> 0 <= 4294967295 ? 0 : 1) : 0) {
        continue
       }
       break;
      }
     }
     $3 = $11;
     $6 = $2;
     $4 = 1 - $7 | 0;
     $2 = $4 & 31;
     if (32 <= ($4 & 63) >>> 0) {
      $4 = $6 << $2;
      $2 = 0;
     } else {
      $4 = (1 << $2) - 1 & $6 >>> 32 - $2 | $3 << $2;
      $2 = $6 << $2;
     }
     $3 = $4;
     break label$4;
    }
    $3 = $11 & 1048575 | 1048576;
   }
   $6 = $2;
   $12 = $2;
   $13 = $3;
   label$8 : {
    if (!$9) {
     $9 = 0;
     $5 = $10;
     $4 = $8 << 12 | $5 >>> 20;
     $5 = $5 << 12;
     $2 = $4;
     if (($2 | 0) > 0 ? 1 : ($2 | 0) >= 0 ? ($5 >>> 0 < 0 ? 0 : 1) : 0) {
      while (1) {
       $9 = $9 + -1 | 0;
       $4 = $2 << 1 | $5 >>> 31;
       $5 = $5 << 1;
       $2 = $4;
       if (($2 | 0) > -1 ? 1 : ($2 | 0) >= -1 ? ($5 >>> 0 <= 4294967295 ? 0 : 1) : 0) {
        continue
       }
       break;
      }
     }
     $5 = $10;
     $4 = 1 - $9 | 0;
     $2 = $4 & 31;
     if (32 <= ($4 & 63) >>> 0) {
      $4 = $5 << $2;
      $10 = 0;
     } else {
      $4 = (1 << $2) - 1 & $5 >>> 32 - $2 | $8 << $2;
      $10 = $5 << $2;
     }
     break label$8;
    }
    $4 = $8 & 1048575 | 1048576;
   }
   $5 = $10;
   $2 = $13 - (($12 >>> 0 < $5 >>> 0) + $4 | 0) | 0;
   $5 = $12 - $5 | 0;
   $8 = ($2 | 0) > -1 ? 1 : ($2 | 0) >= -1 ? ($5 >>> 0 <= 4294967295 ? 0 : 1) : 0;
   if (($7 | 0) > ($9 | 0)) {
    while (1) {
     label$14 : {
      if (!$8) {
       break label$14
      }
      $3 = $2;
      $6 = $5;
      if ($5 | $2) {
       break label$14
      }
      return $0 * 0.0;
     }
     $2 = $6;
     $3 = $3 << 1 | $2 >>> 31;
     $6 = $2 << 1;
     $2 = $6;
     $5 = $10;
     $8 = $3 - (($2 >>> 0 < $5 >>> 0) + $4 | 0) | 0;
     $5 = $2 - $5 | 0;
     $2 = $8;
     $8 = ($2 | 0) > -1 ? 1 : ($2 | 0) >= -1 ? ($5 >>> 0 <= 4294967295 ? 0 : 1) : 0;
     $7 = $7 + -1 | 0;
     if (($7 | 0) > ($9 | 0)) {
      continue
     }
     break;
    };
    $7 = $9;
   }
   label$15 : {
    if (!$8) {
     break label$15
    }
    $3 = $2;
    $6 = $5;
    if ($5 | $2) {
     break label$15
    }
    return $0 * 0.0;
   }
   label$16 : {
    if (($3 | 0) == 1048575 & $6 >>> 0 > 4294967295 | $3 >>> 0 > 1048575) {
     $5 = $6;
     $2 = $3;
     break label$16;
    }
    while (1) {
     $7 = $7 + -1 | 0;
     $8 = ($3 | 0) == 524288 & $6 >>> 0 < 0 | $3 >>> 0 < 524288;
     $4 = $6;
     $2 = $3 << 1 | $4 >>> 31;
     $5 = $4 << 1;
     $6 = $5;
     $3 = $2;
     if ($8) {
      continue
     }
     break;
    };
   }
   if (($7 | 0) >= 1) {
    $4 = $2 + -1048576 | 0;
    $3 = $5;
    $4 = $7 << 20 | ($3 >>> 0 < 0 ? $4 + 1 | 0 : $4);
   } else {
    $6 = $5;
    $4 = 1 - $7 | 0;
    $3 = $4 & 31;
    if (32 <= ($4 & 63) >>> 0) {
     $4 = 0;
     $3 = $2 >>> $3 | 0;
    } else {
     $4 = $2 >>> $3 | 0;
     $3 = ((1 << $3) - 1 & $2) << 32 - $3 | $6 >>> $3;
    }
   }
   $2 = $11 & -2147483648 | $4;
   wasm2js_scratch_store_i32(0, $3 | 0);
   wasm2js_scratch_store_i32(1, $2 | 0);
   return +wasm2js_scratch_load_f64();
  }
  return ($5 | 0) == ($9 | 0) & ($4 | 0) == ($6 | 0) ? $0 * 0.0 : $0;
 }
 
 function fmodl($0, $1, $2, $3, $4, $5, $6, $7, $8) {
  var $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
  $9 = global$0 - 128 | 0;
  $10 = $9;
  if ($9 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $10;
  label$2 : {
   label$3 : {
    label$4 : {
     if (!__letf2($5, $6, $7, $8, 0, 0, 0, 0)) {
      break label$4
     }
     $11 = __fpclassifyl($5, $6, $7, $8);
     $19 = $4 >>> 16 | 0;
     $14 = $19 & 32767;
     if (($14 | 0) == 32767) {
      break label$4
     }
     if ($11) {
      break label$3
     }
    }
    __multf3($9 + 16 | 0, $1, $2, $3, $4, $5, $6, $7, $8);
    $4 = HEAP32[$9 + 16 >> 2];
    $3 = HEAP32[$9 + 20 >> 2];
    $2 = HEAP32[$9 + 24 >> 2];
    $1 = HEAP32[$9 + 28 >> 2];
    __divtf3($9, $4, $3, $2, $1, $4, $3, $2, $1);
    $3 = HEAP32[$9 + 8 >> 2];
    $4 = HEAP32[$9 + 12 >> 2];
    $7 = HEAP32[$9 >> 2];
    $8 = HEAP32[$9 + 4 >> 2];
    break label$2;
   }
   $10 = $4 & 65535 | $14 << 16;
   $13 = $10;
   $12 = $3;
   $15 = $7;
   $18 = $8 >>> 16 & 32767;
   $11 = $8 & 65535 | $18 << 16;
   if ((__letf2($1, $2, $12, $10, $5, $6, $7, $11) | 0) <= 0) {
    if (__letf2($1, $2, $12, $13, $5, $6, $15, $11)) {
     $7 = $1;
     $8 = $2;
     break label$2;
    }
    __multf3($9 + 112 | 0, $1, $2, $3, $4, 0, 0, 0, 0);
    $3 = HEAP32[$9 + 120 >> 2];
    $4 = HEAP32[$9 + 124 >> 2];
    $7 = HEAP32[$9 + 112 >> 2];
    $8 = HEAP32[$9 + 116 >> 2];
    break label$2;
   }
   if ($14) {
    $8 = $2;
    $7 = $1;
   } else {
    __multf3($9 + 96 | 0, $1, $2, $12, $13, 0, 0, 0, 1081540608);
    $7 = HEAP32[$9 + 108 >> 2];
    $13 = $7;
    $12 = HEAP32[$9 + 104 >> 2];
    $14 = ($7 >>> 16 | 0) + -120 | 0;
    $8 = HEAP32[$9 + 100 >> 2];
    $7 = HEAP32[$9 + 96 >> 2];
   }
   if (!$18) {
    __multf3($9 + 80 | 0, $5, $6, $15, $11, 0, 0, 0, 1081540608);
    $5 = HEAP32[$9 + 92 >> 2];
    $11 = $5;
    $15 = HEAP32[$9 + 88 >> 2];
    $18 = ($11 >>> 16 | 0) + -120 | 0;
    $6 = HEAP32[$9 + 84 >> 2];
    $5 = HEAP32[$9 + 80 >> 2];
   }
   $21 = $15;
   $10 = $15;
   $15 = $12 - $10 | 0;
   $13 = $13 & 65535 | 65536;
   $20 = $11 & 65535 | 65536;
   $11 = ($6 | 0) == ($8 | 0) & $7 >>> 0 < $5 >>> 0 | $8 >>> 0 < $6 >>> 0;
   $10 = ($13 - ($20 + ($12 >>> 0 < $10 >>> 0) | 0) | 0) - ($15 >>> 0 < $11 >>> 0) | 0;
   $16 = $15 - $11 | 0;
   $17 = ($10 | 0) > -1 ? 1 : ($10 | 0) >= -1 ? ($16 >>> 0 <= 4294967295 ? 0 : 1) : 0;
   $15 = $7 - $5 | 0;
   $11 = $8 - (($7 >>> 0 < $5 >>> 0) + $6 | 0) | 0;
   if (($14 | 0) > ($18 | 0)) {
    while (1) {
     label$12 : {
      if ($17 & 1) {
       if (!($15 | $16 | ($10 | $11))) {
        __multf3($9 + 32 | 0, $1, $2, $3, $4, 0, 0, 0, 0);
        $3 = HEAP32[$9 + 40 >> 2];
        $4 = HEAP32[$9 + 44 >> 2];
        $7 = HEAP32[$9 + 32 >> 2];
        $8 = HEAP32[$9 + 36 >> 2];
        break label$2;
       }
       $7 = $16;
       $17 = $10 << 1 | $7 >>> 31;
       $16 = $7 << 1;
       $10 = $17;
       $17 = 0;
       $7 = $11 >>> 31 | 0;
       break label$12;
      }
      $10 = 0;
      $11 = $8;
      $16 = $8 >>> 31 | 0;
      $15 = $7;
      $7 = $12;
      $17 = $13 << 1 | $7 >>> 31;
      $7 = $7 << 1;
     }
     $12 = $7 | $16;
     $8 = $12;
     $7 = $21;
     $16 = $8 - $7 | 0;
     $13 = $10 | $17;
     $10 = $13 - (($8 >>> 0 < $7 >>> 0) + $20 | 0) | 0;
     $7 = $15;
     $17 = $11 << 1 | $7 >>> 31;
     $7 = $7 << 1;
     $8 = $17;
     $11 = ($6 | 0) == ($8 | 0) & $7 >>> 0 < $5 >>> 0 | $8 >>> 0 < $6 >>> 0;
     $10 = $10 - ($16 >>> 0 < $11 >>> 0) | 0;
     $16 = $16 - $11 | 0;
     $17 = ($10 | 0) > -1 ? 1 : ($10 | 0) >= -1 ? ($16 >>> 0 <= 4294967295 ? 0 : 1) : 0;
     $15 = $7 - $5 | 0;
     $11 = $8 - (($7 >>> 0 < $5 >>> 0) + $6 | 0) | 0;
     $14 = $14 + -1 | 0;
     if (($14 | 0) > ($18 | 0)) {
      continue
     }
     break;
    };
    $14 = $18;
   }
   label$15 : {
    if (!$17) {
     break label$15
    }
    $7 = $15;
    $12 = $16;
    $8 = $11;
    $13 = $10;
    if ($7 | $12 | ($8 | $10)) {
     break label$15
    }
    __multf3($9 + 48 | 0, $1, $2, $3, $4, 0, 0, 0, 0);
    $3 = HEAP32[$9 + 56 >> 2];
    $4 = HEAP32[$9 + 60 >> 2];
    $7 = HEAP32[$9 + 48 >> 2];
    $8 = HEAP32[$9 + 52 >> 2];
    break label$2;
   }
   if (($13 | 0) == 65535 & $12 >>> 0 <= 4294967295 | $13 >>> 0 < 65535) {
    while (1) {
     $3 = $8 >>> 31 | 0;
     $1 = 0;
     $14 = $14 + -1 | 0;
     $10 = $8 << 1 | $7 >>> 31;
     $7 = $7 << 1;
     $8 = $10;
     $17 = $13 << 1 | $12 >>> 31;
     $12 = $12 << 1 | $3;
     $1 = $1 | $17;
     $13 = $1;
     if (($1 | 0) == 65536 & $12 >>> 0 < 0 | $1 >>> 0 < 65536) {
      continue
     }
     break;
    }
   }
   $1 = $19 & 32768;
   if (($14 | 0) <= 0) {
    __multf3($9 - -64 | 0, $7, $8, $12, $13 & 65535 | ($1 | $14 + 120) << 16, 0, 0, 0, 1065811968);
    $3 = HEAP32[$9 + 72 >> 2];
    $4 = HEAP32[$9 + 76 >> 2];
    $7 = HEAP32[$9 + 64 >> 2];
    $8 = HEAP32[$9 + 68 >> 2];
    break label$2;
   }
   $3 = $12;
   $4 = $13 & 65535 | ($1 | $14) << 16;
  }
  HEAP32[$0 >> 2] = $7;
  HEAP32[$0 + 4 >> 2] = $8;
  HEAP32[$0 + 8 >> 2] = $3;
  HEAP32[$0 + 12 >> 2] = $4;
  $0 = $9 + 128 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function log10($0) {
  var $1 = 0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      wasm2js_scratch_store_f64(+$0);
      $1 = wasm2js_scratch_load_i32(1) | 0;
      $2 = wasm2js_scratch_load_i32(0) | 0;
      if (($1 | 0) > 0 ? 1 : ($1 | 0) >= 0 ? ($2 >>> 0 < 0 ? 0 : 1) : 0) {
       $4 = $1;
       if ($1 >>> 0 > 1048575) {
        break label$4
       }
      }
      if (!($1 & 2147483647 | $2)) {
       return -1.0 / ($0 * $0)
      }
      if (($1 | 0) > -1 ? 1 : ($1 | 0) >= -1 ? ($2 >>> 0 <= 4294967295 ? 0 : 1) : 0) {
       break label$3
      }
      return ($0 - $0) / 0.0;
     }
     if ($4 >>> 0 > 2146435071) {
      break label$1
     }
     $1 = 1072693248;
     $9 = -1023;
     if (($4 | 0) != 1072693248) {
      $1 = $4;
      break label$2;
     }
     if ($2) {
      break label$2
     }
     return 0.0;
    }
    wasm2js_scratch_store_f64(+($0 * 18014398509481984.0));
    $1 = wasm2js_scratch_load_i32(1) | 0;
    $2 = wasm2js_scratch_load_i32(0) | 0;
    $9 = -1077;
   }
   $1 = $1 + 614242 | 0;
   $10 = +(($1 >>> 20 | 0) + $9 | 0);
   $11 = $10 * .30102999566361177;
   $0 = $11;
   $1 = ($1 & 1048575) + 1072079006 | 0;
   wasm2js_scratch_store_i32(0, $2 | 0);
   wasm2js_scratch_store_i32(1, $1 | 0);
   $3 = +wasm2js_scratch_load_f64() + -1.0;
   $5 = $3 * ($3 * .5);
   wasm2js_scratch_store_f64(+($3 - $5));
   $1 = wasm2js_scratch_load_i32(1) | 0;
   wasm2js_scratch_load_i32(0) | 0;
   wasm2js_scratch_store_i32(0, 0);
   wasm2js_scratch_store_i32(1, $1 | 0);
   $6 = +wasm2js_scratch_load_f64();
   $12 = $6 * .4342944818781689;
   $13 = $0 + $12;
   $7 = $3 / ($3 + 2.0);
   $8 = $7 * $7;
   $0 = $8 * $8;
   $0 = $3 - $6 - $5 + $7 * ($5 + ($0 * ($0 * ($0 * .15313837699209373 + .22222198432149784) + .3999999999940942) + $8 * ($0 * ($0 * ($0 * .14798198605116586 + .1818357216161805) + .2857142874366239) + .6666666666666735)));
   $0 = $13 + ($12 + ($11 - $13) + ($0 * .4342944818781689 + ($10 * 3.694239077158931e-13 + ($0 + $6) * 2.5082946711645275e-11)));
  }
  return $0;
 }
 
 function log10f($0) {
  var $1 = 0, $2 = Math_fround(0), $3 = Math_fround(0), $4 = Math_fround(0), $5 = Math_fround(0), $6 = 0, $7 = Math_fround(0), $8 = Math_fround(0);
  $1 = (wasm2js_scratch_store_f32($0), wasm2js_scratch_load_i32(0));
  label$1 : {
   label$2 : {
    if (!(($1 | 0) > -1 ? $1 >>> 0 >= 8388608 : 0)) {
     if (!($1 & 2147483647)) {
      return Math_fround(Math_fround(-1.0) / Math_fround($0 * $0))
     }
     if (($1 | 0) <= -1) {
      return Math_fround(Math_fround($0 - $0) / Math_fround(0.0))
     }
     $1 = (wasm2js_scratch_store_f32(Math_fround($0 * Math_fround(33554432.0))), wasm2js_scratch_load_i32(0));
     $6 = -152;
     break label$2;
    }
    if ($1 >>> 0 > 2139095039) {
     break label$1
    }
    $6 = -127;
    $0 = Math_fround(0.0);
    if (($1 | 0) == 1065353216) {
     break label$1
    }
   }
   $1 = $1 + 4913933 | 0;
   $7 = Math_fround(($1 >>> 23 | 0) + $6 | 0);
   $0 = Math_fround((wasm2js_scratch_store_i32(0, ($1 & 8388607) + 1060439283 | 0), wasm2js_scratch_load_f32()) + Math_fround(-1.0));
   $2 = Math_fround($0 * Math_fround($0 * Math_fround(.5)));
   $3 = Math_fround($0 / Math_fround($0 + Math_fround(2.0)));
   $4 = Math_fround($3 * $3);
   $5 = Math_fround($4 * $4);
   $8 = $0;
   $0 = (wasm2js_scratch_store_i32(0, (wasm2js_scratch_store_f32(Math_fround($0 - $2)), wasm2js_scratch_load_i32(0)) & -4096), wasm2js_scratch_load_f32());
   $2 = Math_fround(Math_fround(Math_fround($8 - $0) - $2) + Math_fround($3 * Math_fround($2 + Math_fround(Math_fround($4 * Math_fround(Math_fround($5 * Math_fround(.2849878668785095)) + Math_fround(.6666666269302368))) + Math_fround($5 * Math_fround(Math_fround($5 * Math_fround(.24279078841209412)) + Math_fround(.40000972151756287)))))));
   $0 = Math_fround(Math_fround($7 * Math_fround(.3010292053222656)) + Math_fround(Math_fround($0 * Math_fround(.434326171875)) + Math_fround(Math_fround($2 * Math_fround(.434326171875)) + Math_fround(Math_fround($7 * Math_fround(7.903415166765626e-07)) + Math_fround(Math_fround($2 + $0) * Math_fround(-3.168997136526741e-05))))));
  }
  return $0;
 }
 
 function scalbn($0, $1) {
  label$1 : {
   if (($1 | 0) >= 1024) {
    $0 = $0 * 8988465674311579538646525.0e283;
    if (($1 | 0) < 2047) {
     $1 = $1 + -1023 | 0;
     break label$1;
    }
    $0 = $0 * 8988465674311579538646525.0e283;
    $1 = (($1 | 0) < 3069 ? $1 : 3069) + -2046 | 0;
    break label$1;
   }
   if (($1 | 0) > -1023) {
    break label$1
   }
   $0 = $0 * 2.2250738585072014e-308;
   if (($1 | 0) > -2045) {
    $1 = $1 + 1022 | 0;
    break label$1;
   }
   $0 = $0 * 2.2250738585072014e-308;
   $1 = (($1 | 0) > -3066 ? $1 : -3066) + 2044 | 0;
  }
  $1 = $1 + 1023 << 20;
  wasm2js_scratch_store_i32(0, 0);
  wasm2js_scratch_store_i32(1, $1 | 0);
  return $0 * +wasm2js_scratch_load_f64();
 }
 
 function __fpclassifyl($0, $1, $2, $3) {
  var $4 = 0, $5 = 0;
  $5 = $3 & 65535;
  $3 = $3 >>> 16 & 32767;
  label$1 : {
   if (($3 | 0) != 32767) {
    $4 = 4;
    if ($3) {
     break label$1
    }
    return $0 | $2 | ($1 | $5) ? 3 : 2;
   }
   $4 = !($0 | $2 | ($1 | $5));
  }
  return $4;
 }
 
 function memcpy($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0;
  if ($2 >>> 0 >= 512) {
   emscripten_memcpy_big($0 | 0, $1 | 0, $2 | 0) | 0;
   return $0;
  }
  $4 = $0 + $2 | 0;
  label$2 : {
   if (!(($0 ^ $1) & 3)) {
    label$4 : {
     if (($2 | 0) < 1) {
      $2 = $0;
      break label$4;
     }
     if (!($0 & 3)) {
      $2 = $0;
      break label$4;
     }
     $2 = $0;
     while (1) {
      HEAP8[$2 | 0] = HEAPU8[$1 | 0];
      $1 = $1 + 1 | 0;
      $2 = $2 + 1 | 0;
      if ($2 >>> 0 >= $4 >>> 0) {
       break label$4
      }
      if ($2 & 3) {
       continue
      }
      break;
     };
    }
    $3 = $4 & -4;
    label$8 : {
     if ($3 >>> 0 < 64) {
      break label$8
     }
     $5 = $3 + -64 | 0;
     if ($2 >>> 0 > $5 >>> 0) {
      break label$8
     }
     while (1) {
      HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
      HEAP32[$2 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
      HEAP32[$2 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
      HEAP32[$2 + 12 >> 2] = HEAP32[$1 + 12 >> 2];
      HEAP32[$2 + 16 >> 2] = HEAP32[$1 + 16 >> 2];
      HEAP32[$2 + 20 >> 2] = HEAP32[$1 + 20 >> 2];
      HEAP32[$2 + 24 >> 2] = HEAP32[$1 + 24 >> 2];
      HEAP32[$2 + 28 >> 2] = HEAP32[$1 + 28 >> 2];
      HEAP32[$2 + 32 >> 2] = HEAP32[$1 + 32 >> 2];
      HEAP32[$2 + 36 >> 2] = HEAP32[$1 + 36 >> 2];
      HEAP32[$2 + 40 >> 2] = HEAP32[$1 + 40 >> 2];
      HEAP32[$2 + 44 >> 2] = HEAP32[$1 + 44 >> 2];
      HEAP32[$2 + 48 >> 2] = HEAP32[$1 + 48 >> 2];
      HEAP32[$2 + 52 >> 2] = HEAP32[$1 + 52 >> 2];
      HEAP32[$2 + 56 >> 2] = HEAP32[$1 + 56 >> 2];
      HEAP32[$2 + 60 >> 2] = HEAP32[$1 + 60 >> 2];
      $1 = $1 - -64 | 0;
      $2 = $2 - -64 | 0;
      if ($2 >>> 0 <= $5 >>> 0) {
       continue
      }
      break;
     };
    }
    if ($2 >>> 0 >= $3 >>> 0) {
     break label$2
    }
    while (1) {
     HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
     $1 = $1 + 4 | 0;
     $2 = $2 + 4 | 0;
     if ($2 >>> 0 < $3 >>> 0) {
      continue
     }
     break;
    };
    break label$2;
   }
   if ($4 >>> 0 < 4) {
    $2 = $0;
    break label$2;
   }
   $3 = $4 + -4 | 0;
   if ($3 >>> 0 < $0 >>> 0) {
    $2 = $0;
    break label$2;
   }
   $2 = $0;
   while (1) {
    HEAP8[$2 | 0] = HEAPU8[$1 | 0];
    HEAP8[$2 + 1 | 0] = HEAPU8[$1 + 1 | 0];
    HEAP8[$2 + 2 | 0] = HEAPU8[$1 + 2 | 0];
    HEAP8[$2 + 3 | 0] = HEAPU8[$1 + 3 | 0];
    $1 = $1 + 4 | 0;
    $2 = $2 + 4 | 0;
    if ($2 >>> 0 <= $3 >>> 0) {
     continue
    }
    break;
   };
  }
  if ($2 >>> 0 < $4 >>> 0) {
   while (1) {
    HEAP8[$2 | 0] = HEAPU8[$1 | 0];
    $1 = $1 + 1 | 0;
    $2 = $2 + 1 | 0;
    if (($4 | 0) != ($2 | 0)) {
     continue
    }
    break;
   }
  }
  return $0;
 }
 
 function memset($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  label$1 : {
   if (!$2) {
    break label$1
   }
   $3 = $0 + $2 | 0;
   HEAP8[$3 + -1 | 0] = $1;
   HEAP8[$0 | 0] = $1;
   if ($2 >>> 0 < 3) {
    break label$1
   }
   HEAP8[$3 + -2 | 0] = $1;
   HEAP8[$0 + 1 | 0] = $1;
   HEAP8[$3 + -3 | 0] = $1;
   HEAP8[$0 + 2 | 0] = $1;
   if ($2 >>> 0 < 7) {
    break label$1
   }
   HEAP8[$3 + -4 | 0] = $1;
   HEAP8[$0 + 3 | 0] = $1;
   if ($2 >>> 0 < 9) {
    break label$1
   }
   $3 = 0 - $0 & 3;
   $4 = $3 + $0 | 0;
   $1 = Math_imul($1 & 255, 16843009);
   HEAP32[$4 >> 2] = $1;
   $2 = $2 - $3 & -4;
   $3 = $2 + $4 | 0;
   HEAP32[$3 + -4 >> 2] = $1;
   if ($2 >>> 0 < 9) {
    break label$1
   }
   HEAP32[$4 + 8 >> 2] = $1;
   HEAP32[$4 + 4 >> 2] = $1;
   HEAP32[$3 + -8 >> 2] = $1;
   HEAP32[$3 + -12 >> 2] = $1;
   if ($2 >>> 0 < 25) {
    break label$1
   }
   HEAP32[$4 + 24 >> 2] = $1;
   HEAP32[$4 + 20 >> 2] = $1;
   HEAP32[$4 + 16 >> 2] = $1;
   HEAP32[$4 + 12 >> 2] = $1;
   HEAP32[$3 + -16 >> 2] = $1;
   HEAP32[$3 + -20 >> 2] = $1;
   HEAP32[$3 + -24 >> 2] = $1;
   HEAP32[$3 + -28 >> 2] = $1;
   $6 = $4 & 4 | 24;
   $2 = $2 - $6 | 0;
   if ($2 >>> 0 < 32) {
    break label$1
   }
   $3 = $1;
   $5 = $1;
   $1 = $4 + $6 | 0;
   while (1) {
    HEAP32[$1 + 24 >> 2] = $5;
    HEAP32[$1 + 28 >> 2] = $3;
    HEAP32[$1 + 16 >> 2] = $5;
    HEAP32[$1 + 20 >> 2] = $3;
    HEAP32[$1 + 8 >> 2] = $5;
    HEAP32[$1 + 12 >> 2] = $3;
    HEAP32[$1 >> 2] = $5;
    HEAP32[$1 + 4 >> 2] = $3;
    $1 = $1 + 32 | 0;
    $2 = $2 + -32 | 0;
    if ($2 >>> 0 > 31) {
     continue
    }
    break;
   };
  }
  return $0;
 }
 
 function memmove($0, $1, $2) {
  var $3 = 0, $4 = 0;
  label$1 : {
   if (($0 | 0) == ($1 | 0)) {
    break label$1
   }
   label$2 : {
    if ($1 + $2 >>> 0 > $0 >>> 0) {
     $4 = $0 + $2 | 0;
     if ($4 >>> 0 > $1 >>> 0) {
      break label$2
     }
    }
    memcpy($0, $1, $2);
    return;
   }
   $3 = ($0 ^ $1) & 3;
   label$4 : {
    label$5 : {
     if ($0 >>> 0 < $1 >>> 0) {
      if ($3) {
       break label$4
      }
      if (!($0 & 3)) {
       break label$5
      }
      while (1) {
       if (!$2) {
        break label$1
       }
       HEAP8[$0 | 0] = HEAPU8[$1 | 0];
       $1 = $1 + 1 | 0;
       $2 = $2 + -1 | 0;
       $0 = $0 + 1 | 0;
       if ($0 & 3) {
        continue
       }
       break;
      };
      break label$5;
     }
     label$10 : {
      if ($3) {
       break label$10
      }
      if ($4 & 3) {
       while (1) {
        if (!$2) {
         break label$1
        }
        $2 = $2 + -1 | 0;
        $3 = $2 + $0 | 0;
        HEAP8[$3 | 0] = HEAPU8[$1 + $2 | 0];
        if ($3 & 3) {
         continue
        }
        break;
       }
      }
      if ($2 >>> 0 <= 3) {
       break label$10
      }
      while (1) {
       $2 = $2 + -4 | 0;
       HEAP32[$2 + $0 >> 2] = HEAP32[$1 + $2 >> 2];
       if ($2 >>> 0 > 3) {
        continue
       }
       break;
      };
     }
     if (!$2) {
      break label$1
     }
     while (1) {
      $2 = $2 + -1 | 0;
      HEAP8[$2 + $0 | 0] = HEAPU8[$1 + $2 | 0];
      if ($2) {
       continue
      }
      break;
     };
     break label$1;
    }
    if ($2 >>> 0 <= 3) {
     break label$4
    }
    while (1) {
     HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
     $1 = $1 + 4 | 0;
     $0 = $0 + 4 | 0;
     $2 = $2 + -4 | 0;
     if ($2 >>> 0 > 3) {
      continue
     }
     break;
    };
   }
   if (!$2) {
    break label$1
   }
   while (1) {
    HEAP8[$0 | 0] = HEAPU8[$1 | 0];
    $0 = $0 + 1 | 0;
    $1 = $1 + 1 | 0;
    $2 = $2 + -1 | 0;
    if ($2) {
     continue
    }
    break;
   };
  }
 }
 
 function __towrite($0) {
  var $1 = 0;
  $1 = HEAPU8[$0 + 74 | 0];
  HEAP8[$0 + 74 | 0] = $1 + -1 | $1;
  $1 = HEAP32[$0 >> 2];
  if ($1 & 8) {
   HEAP32[$0 >> 2] = $1 | 32;
   return -1;
  }
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$0 + 8 >> 2] = 0;
  $1 = HEAP32[$0 + 44 >> 2];
  HEAP32[$0 + 28 >> 2] = $1;
  HEAP32[$0 + 20 >> 2] = $1;
  HEAP32[$0 + 16 >> 2] = $1 + HEAP32[$0 + 48 >> 2];
  return 0;
 }
 
 function __overflow($0) {
  var $1 = 0, $2 = 0, $3 = 0;
  $1 = global$0 - 16 | 0;
  $2 = $1;
  if ($1 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $2;
  HEAP8[$1 + 15 | 0] = 10;
  $2 = HEAP32[$0 + 16 >> 2];
  label$2 : {
   if (!$2) {
    if (__towrite($0)) {
     break label$2
    }
    $2 = HEAP32[$0 + 16 >> 2];
   }
   $3 = HEAP32[$0 + 20 >> 2];
   if (!(HEAP8[$0 + 75 | 0] == 10 | $3 >>> 0 >= $2 >>> 0)) {
    HEAP32[$0 + 20 >> 2] = $3 + 1;
    HEAP8[$3 | 0] = 10;
    break label$2;
   }
   if ((FUNCTION_TABLE[HEAP32[$0 + 36 >> 2]]($0, $1 + 15 | 0, 1) | 0) != 1) {
    break label$2
   }
  }
  $0 = $1 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function __fwritex($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $3 = HEAP32[$2 + 16 >> 2];
  label$1 : {
   if (!$3) {
    if (__towrite($2)) {
     break label$1
    }
    $3 = HEAP32[$2 + 16 >> 2];
   }
   $5 = HEAP32[$2 + 20 >> 2];
   if ($3 - $5 >>> 0 < $1 >>> 0) {
    return FUNCTION_TABLE[HEAP32[$2 + 36 >> 2]]($2, $0, $1) | 0
   }
   label$5 : {
    if (HEAP8[$2 + 75 | 0] < 0) {
     break label$5
    }
    $4 = $1;
    while (1) {
     $3 = $4;
     if (!$3) {
      break label$5
     }
     $4 = $3 + -1 | 0;
     if (HEAPU8[$4 + $0 | 0] != 10) {
      continue
     }
     break;
    };
    $4 = FUNCTION_TABLE[HEAP32[$2 + 36 >> 2]]($2, $0, $3) | 0;
    if ($4 >>> 0 < $3 >>> 0) {
     break label$1
    }
    $1 = $1 - $3 | 0;
    $0 = $0 + $3 | 0;
    $5 = HEAP32[$2 + 20 >> 2];
    $6 = $3;
   }
   memcpy($5, $0, $1);
   HEAP32[$2 + 20 >> 2] = HEAP32[$2 + 20 >> 2] + $1;
   $4 = $1 + $6 | 0;
  }
  return $4;
 }
 
 function fwrite($0, $1, $2, $3) {
  var $4 = 0, $5 = 0;
  $4 = Math_imul($1, $2);
  label$1 : {
   if (HEAP32[$3 + 76 >> 2] <= -1) {
    $0 = __fwritex($0, $4, $3);
    break label$1;
   }
   $5 = 1;
   $0 = __fwritex($0, $4, $3);
   if (!$5) {
    break label$1
   }
  }
  if (($0 | 0) == ($4 | 0)) {
   return $1 ? $2 : 0
  }
  return ($0 >>> 0) / ($1 >>> 0) | 0;
 }
 
 function iprintf($0, $1) {
  var $2 = 0, $3 = 0;
  $2 = global$0 - 16 | 0;
  $3 = $2;
  if ($2 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $3;
  HEAP32[$2 + 12 >> 2] = $1;
  vfiprintf(HEAP32[7598], $0, $1);
  $0 = $2 + 16 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function strlen($0) {
  var $1 = 0, $2 = 0, $3 = 0;
  label$1 : {
   label$2 : {
    $1 = $0;
    if (!($1 & 3)) {
     break label$2
    }
    if (!HEAPU8[$0 | 0]) {
     return 0
    }
    while (1) {
     $1 = $1 + 1 | 0;
     if (!($1 & 3)) {
      break label$2
     }
     if (HEAPU8[$1 | 0]) {
      continue
     }
     break;
    };
    break label$1;
   }
   while (1) {
    $2 = $1;
    $1 = $1 + 4 | 0;
    $3 = HEAP32[$2 >> 2];
    if (!(($3 ^ -1) & $3 + -16843009 & -2139062144)) {
     continue
    }
    break;
   };
   if (!($3 & 255)) {
    return $2 - $0 | 0
   }
   while (1) {
    $3 = HEAPU8[$2 + 1 | 0];
    $1 = $2 + 1 | 0;
    $2 = $1;
    if ($3) {
     continue
    }
    break;
   };
  }
  return $1 - $0 | 0;
 }
 
 function dynCall_v($0) {
  $0 = $0 | 0;
  FUNCTION_TABLE[$0]();
 }
 
 function dynCall_vii($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  FUNCTION_TABLE[$0]($1, $2);
 }
 
 function dynCall_viiii($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  FUNCTION_TABLE[$0]($1, $2, $3, $4);
 }
 
 function dynCall_viiiiiii($0, $1, $2, $3, $4, $5, $6, $7) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  FUNCTION_TABLE[$0]($1, $2, $3, $4, $5, $6, $7);
 }
 
 function dynCall_viiiiiiiiii($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  $8 = $8 | 0;
  $9 = $9 | 0;
  $10 = $10 | 0;
  FUNCTION_TABLE[$0]($1, $2, $3, $4, $5, $6, $7, $8, $9, $10);
 }
 
 function dynCall_viiiiiiiiiiiiiii($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  $8 = $8 | 0;
  $9 = $9 | 0;
  $10 = $10 | 0;
  $11 = $11 | 0;
  $12 = $12 | 0;
  $13 = $13 | 0;
  $14 = $14 | 0;
  $15 = $15 | 0;
  FUNCTION_TABLE[$0]($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15);
 }
 
 function dynCall_viiid($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = +$4;
  FUNCTION_TABLE[$0]($1, $2, $3, $4);
 }
 
 function dynCall_viid($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = +$3;
  FUNCTION_TABLE[$0]($1, $2, $3);
 }
 
 function dynCall_ii($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return FUNCTION_TABLE[$0]($1) | 0;
 }
 
 function dynCall_iii($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  return FUNCTION_TABLE[$0]($1, $2) | 0;
 }
 
 function dynCall_iiii($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  return FUNCTION_TABLE[$0]($1, $2, $3) | 0;
 }
 
 function dynCall_iiiii($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  return FUNCTION_TABLE[$0]($1, $2, $3, $4) | 0;
 }
 
 function dynCall_iiiiii($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  return FUNCTION_TABLE[$0]($1, $2, $3, $4, $5) | 0;
 }
 
 function dynCall_iiiiiii($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  return FUNCTION_TABLE[$0]($1, $2, $3, $4, $5, $6) | 0;
 }
 
 function dynCall_iiiiiiii($0, $1, $2, $3, $4, $5, $6, $7) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  return FUNCTION_TABLE[$0]($1, $2, $3, $4, $5, $6, $7) | 0;
 }
 
 function dynCall_iiiiiiiiiii($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  $8 = $8 | 0;
  $9 = $9 | 0;
  $10 = $10 | 0;
  return FUNCTION_TABLE[$0]($1, $2, $3, $4, $5, $6, $7, $8, $9, $10) | 0;
 }
 
 function dynCall_iiiiiiiiiiii($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  $8 = $8 | 0;
  $9 = $9 | 0;
  $10 = $10 | 0;
  $11 = $11 | 0;
  return FUNCTION_TABLE[$0]($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11) | 0;
 }
 
 function dynCall_iiiiiiiiiiiii($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  $8 = $8 | 0;
  $9 = $9 | 0;
  $10 = $10 | 0;
  $11 = $11 | 0;
  $12 = $12 | 0;
  return FUNCTION_TABLE[$0]($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12) | 0;
 }
 
 function dynCall_iiidddi($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = +$3;
  $4 = +$4;
  $5 = +$5;
  $6 = $6 | 0;
  return FUNCTION_TABLE[$0]($1, $2, $3, $4, $5, $6) | 0;
 }
 
 function dynCall_fiii($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  return Math_fround(Math_fround(FUNCTION_TABLE[$0]($1, $2, $3)));
 }
 
 function dynCall_diii($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  return +FUNCTION_TABLE[$0]($1, $2, $3);
 }
 
 function dynCall_didi($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = +$2;
  $3 = $3 | 0;
  return +FUNCTION_TABLE[$0]($1, $2, $3);
 }
 
 function dynCall_didii($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = +$2;
  $3 = $3 | 0;
  $4 = $4 | 0;
  return +FUNCTION_TABLE[$0]($1, $2, $3, $4);
 }
 
 function dynCall_diddi($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = +$2;
  $3 = +$3;
  $4 = $4 | 0;
  return +FUNCTION_TABLE[$0]($1, $2, $3, $4);
 }
 
 function __set_stack_limit($0) {
  $0 = $0 | 0;
  global$2 = $0;
 }
 
 function stackSave() {
  return global$0 | 0;
 }
 
 function stackAlloc($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $0 = global$0 - $0 & -16;
  $1 = $0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $1;
  return $0 | 0;
 }
 
 function stackRestore($0) {
  $0 = $0 | 0;
  if ($0 >>> 0 < global$2 >>> 0) {
   __handle_stack_overflow()
  }
  global$0 = $0;
 }
 
 function __growWasmMemory($0) {
  $0 = $0 | 0;
  return abort() | 0;
 }
 
 function dynCall_did($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = +$2;
  return +FUNCTION_TABLE[$0]($1, $2);
 }
 
 function dynCall_diddd($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = +$2;
  $3 = +$3;
  $4 = +$4;
  return +FUNCTION_TABLE[$0]($1, $2, $3, $4);
 }
 
 function dynCall_didd($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = +$2;
  $3 = +$3;
  return +FUNCTION_TABLE[$0]($1, $2, $3);
 }
 
 function dynCall_di($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return +FUNCTION_TABLE[$0]($1);
 }
 
 function dynCall_vid($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = +$2;
  FUNCTION_TABLE[$0]($1, $2);
 }
 
 function dynCall_dii($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  return +FUNCTION_TABLE[$0]($1, $2);
 }
 
 function dynCall_didid($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = +$2;
  $3 = $3 | 0;
  $4 = +$4;
  return +FUNCTION_TABLE[$0]($1, $2, $3, $4);
 }
 
 function dynCall_dididi($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = +$2;
  $3 = $3 | 0;
  $4 = +$4;
  $5 = $5 | 0;
  return +FUNCTION_TABLE[$0]($1, $2, $3, $4, $5);
 }
 
 function dynCall_vidid($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = +$2;
  $3 = $3 | 0;
  $4 = +$4;
  FUNCTION_TABLE[$0]($1, $2, $3, $4);
 }
 
 function dynCall_vididd($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = +$2;
  $3 = $3 | 0;
  $4 = +$4;
  $5 = +$5;
  FUNCTION_TABLE[$0]($1, $2, $3, $4, $5);
 }
 
 function dynCall_vididdd($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = +$2;
  $3 = $3 | 0;
  $4 = +$4;
  $5 = +$5;
  $6 = +$6;
  FUNCTION_TABLE[$0]($1, $2, $3, $4, $5, $6);
 }
 
 function dynCall_vidddi($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = +$2;
  $3 = +$3;
  $4 = +$4;
  $5 = $5 | 0;
  FUNCTION_TABLE[$0]($1, $2, $3, $4, $5);
 }
 
 function dynCall_iiiid($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = +$4;
  return FUNCTION_TABLE[$0]($1, $2, $3, $4) | 0;
 }
 
 function dynCall_dddd($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = +$2;
  $3 = +$3;
  return +FUNCTION_TABLE[$0]($1, $2, $3);
 }
 
 function dynCall_vidd($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = +$2;
  $3 = +$3;
  FUNCTION_TABLE[$0]($1, $2, $3);
 }
 
 function dynCall_viffii($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = Math_fround($2);
  $3 = Math_fround($3);
  $4 = $4 | 0;
  $5 = $5 | 0;
  FUNCTION_TABLE[$0]($1, $2, $3, $4, $5);
 }
 
 function dynCall_dddddd($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = +$2;
  $3 = +$3;
  $4 = +$4;
  $5 = +$5;
  return +FUNCTION_TABLE[$0]($1, $2, $3, $4, $5);
 }
 
 function dynCall_diddddd($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = +$2;
  $3 = +$3;
  $4 = +$4;
  $5 = +$5;
  $6 = +$6;
  return +FUNCTION_TABLE[$0]($1, $2, $3, $4, $5, $6);
 }
 
 function dynCall_diddidd($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = +$2;
  $3 = +$3;
  $4 = $4 | 0;
  $5 = +$5;
  $6 = +$6;
  return +FUNCTION_TABLE[$0]($1, $2, $3, $4, $5, $6);
 }
 
 function dynCall_didddii($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = +$2;
  $3 = +$3;
  $4 = +$4;
  $5 = $5 | 0;
  $6 = $6 | 0;
  return +FUNCTION_TABLE[$0]($1, $2, $3, $4, $5, $6);
 }
 
 function dynCall_didddddii($0, $1, $2, $3, $4, $5, $6, $7, $8) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = +$2;
  $3 = +$3;
  $4 = +$4;
  $5 = +$5;
  $6 = +$6;
  $7 = $7 | 0;
  $8 = $8 | 0;
  return +FUNCTION_TABLE[$0]($1, $2, $3, $4, $5, $6, $7, $8);
 }
 
 function dynCall_dd($0, $1) {
  $0 = $0 | 0;
  $1 = +$1;
  return +FUNCTION_TABLE[$0]($1);
 }
 
 function dynCall_dididdd($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = +$2;
  $3 = $3 | 0;
  $4 = +$4;
  $5 = +$5;
  $6 = +$6;
  return +FUNCTION_TABLE[$0]($1, $2, $3, $4, $5, $6);
 }
 
 function dynCall_ddd($0, $1, $2) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = +$2;
  return +FUNCTION_TABLE[$0]($1, $2);
 }
 
 function dynCall_vidi($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = +$2;
  $3 = $3 | 0;
  FUNCTION_TABLE[$0]($1, $2, $3);
 }
 
 function dynCall_iifi($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = Math_fround($2);
  $3 = $3 | 0;
  return FUNCTION_TABLE[$0]($1, $2, $3) | 0;
 }
 
 function dynCall_fi($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return Math_fround(Math_fround(FUNCTION_TABLE[$0]($1)));
 }
 
 function dynCall_fiiii($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  return Math_fround(Math_fround(FUNCTION_TABLE[$0]($1, $2, $3, $4)));
 }
 
 function dynCall_viiiidd($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = +$5;
  $6 = +$6;
  FUNCTION_TABLE[$0]($1, $2, $3, $4, $5, $6);
 }
 
 function dynCall_diid($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = +$3;
  return +FUNCTION_TABLE[$0]($1, $2, $3);
 }
 
 function dynCall_diiddd($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = +$3;
  $4 = +$4;
  $5 = +$5;
  return +FUNCTION_TABLE[$0]($1, $2, $3, $4, $5);
 }
 
 function dynCall_diidd($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = +$3;
  $4 = +$4;
  return +FUNCTION_TABLE[$0]($1, $2, $3, $4);
 }
 
 function dynCall_diiii($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  return +FUNCTION_TABLE[$0]($1, $2, $3, $4);
 }
 
 function dynCall_diidid($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = +$3;
  $4 = $4 | 0;
  $5 = +$5;
  return +FUNCTION_TABLE[$0]($1, $2, $3, $4, $5);
 }
 
 function dynCall_diididi($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = +$3;
  $4 = $4 | 0;
  $5 = +$5;
  $6 = $6 | 0;
  return +FUNCTION_TABLE[$0]($1, $2, $3, $4, $5, $6);
 }
 
 function dynCall_viidid($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = +$3;
  $4 = $4 | 0;
  $5 = +$5;
  FUNCTION_TABLE[$0]($1, $2, $3, $4, $5);
 }
 
 function dynCall_viididd($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = +$3;
  $4 = $4 | 0;
  $5 = +$5;
  $6 = +$6;
  FUNCTION_TABLE[$0]($1, $2, $3, $4, $5, $6);
 }
 
 function dynCall_viididdd($0, $1, $2, $3, $4, $5, $6, $7) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = +$3;
  $4 = $4 | 0;
  $5 = +$5;
  $6 = +$6;
  $7 = +$7;
  FUNCTION_TABLE[$0]($1, $2, $3, $4, $5, $6, $7);
 }
 
 function dynCall_viidddi($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = +$3;
  $4 = +$4;
  $5 = +$5;
  $6 = $6 | 0;
  FUNCTION_TABLE[$0]($1, $2, $3, $4, $5, $6);
 }
 
 function dynCall_viidd($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = +$3;
  $4 = +$4;
  FUNCTION_TABLE[$0]($1, $2, $3, $4);
 }
 
 function dynCall_viiffii($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = Math_fround($3);
  $4 = Math_fround($4);
  $5 = $5 | 0;
  $6 = $6 | 0;
  FUNCTION_TABLE[$0]($1, $2, $3, $4, $5, $6);
 }
 
 function dynCall_diiddidd($0, $1, $2, $3, $4, $5, $6, $7) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = +$3;
  $4 = +$4;
  $5 = $5 | 0;
  $6 = +$6;
  $7 = +$7;
  return +FUNCTION_TABLE[$0]($1, $2, $3, $4, $5, $6, $7);
 }
 
 function dynCall_diiddddd($0, $1, $2, $3, $4, $5, $6, $7) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = +$3;
  $4 = +$4;
  $5 = +$5;
  $6 = +$6;
  $7 = +$7;
  return +FUNCTION_TABLE[$0]($1, $2, $3, $4, $5, $6, $7);
 }
 
 function dynCall_diidddii($0, $1, $2, $3, $4, $5, $6, $7) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = +$3;
  $4 = +$4;
  $5 = +$5;
  $6 = $6 | 0;
  $7 = $7 | 0;
  return +FUNCTION_TABLE[$0]($1, $2, $3, $4, $5, $6, $7);
 }
 
 function dynCall_diidddddii($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = +$3;
  $4 = +$4;
  $5 = +$5;
  $6 = +$6;
  $7 = +$7;
  $8 = $8 | 0;
  $9 = $9 | 0;
  return +FUNCTION_TABLE[$0]($1, $2, $3, $4, $5, $6, $7, $8, $9);
 }
 
 function dynCall_diidi($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = +$3;
  $4 = $4 | 0;
  return +FUNCTION_TABLE[$0]($1, $2, $3, $4);
 }
 
 function dynCall_diididdd($0, $1, $2, $3, $4, $5, $6, $7) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = +$3;
  $4 = $4 | 0;
  $5 = +$5;
  $6 = +$6;
  $7 = +$7;
  return +FUNCTION_TABLE[$0]($1, $2, $3, $4, $5, $6, $7);
 }
 
 function dynCall_diiddi($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = +$3;
  $4 = +$4;
  $5 = $5 | 0;
  return +FUNCTION_TABLE[$0]($1, $2, $3, $4, $5);
 }
 
 function dynCall_viidi($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = +$3;
  $4 = $4 | 0;
  FUNCTION_TABLE[$0]($1, $2, $3, $4);
 }
 
 function dynCall_viiiii($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  FUNCTION_TABLE[$0]($1, $2, $3, $4, $5);
 }
 
 function dynCall_iiifi($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = Math_fround($3);
  $4 = $4 | 0;
  return FUNCTION_TABLE[$0]($1, $2, $3, $4) | 0;
 }
 
 function dynCall_fii($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  return Math_fround(Math_fround(FUNCTION_TABLE[$0]($1, $2)));
 }
 
 function dynCall_fiiiii($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  return Math_fround(Math_fround(FUNCTION_TABLE[$0]($1, $2, $3, $4, $5)));
 }
 
 function dynCall_viiiiidd($0, $1, $2, $3, $4, $5, $6, $7) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = +$6;
  $7 = +$7;
  FUNCTION_TABLE[$0]($1, $2, $3, $4, $5, $6, $7);
 }
 
 function dynCall_viif($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = Math_fround($3);
  FUNCTION_TABLE[$0]($1, $2, $3);
 }
 
 function dynCall_viiif($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = Math_fround($4);
  FUNCTION_TABLE[$0]($1, $2, $3, $4);
 }
 
 function dynCall_iiiif($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = Math_fround($4);
  return FUNCTION_TABLE[$0]($1, $2, $3, $4) | 0;
 }
 
 function dynCall_diddid($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = +$2;
  $3 = +$3;
  $4 = $4 | 0;
  $5 = +$5;
  return +FUNCTION_TABLE[$0]($1, $2, $3, $4, $5);
 }
 
 function dynCall_didddid($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = +$2;
  $3 = +$3;
  $4 = +$4;
  $5 = $5 | 0;
  $6 = +$6;
  return +FUNCTION_TABLE[$0]($1, $2, $3, $4, $5, $6);
 }
 
 function dynCall_didddi($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = +$2;
  $3 = +$3;
  $4 = +$4;
  $5 = $5 | 0;
  return +FUNCTION_TABLE[$0]($1, $2, $3, $4, $5);
 }
 
 function dynCall_diiddid($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = +$3;
  $4 = +$4;
  $5 = $5 | 0;
  $6 = +$6;
  return +FUNCTION_TABLE[$0]($1, $2, $3, $4, $5, $6);
 }
 
 function dynCall_diidddid($0, $1, $2, $3, $4, $5, $6, $7) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = +$3;
  $4 = +$4;
  $5 = +$5;
  $6 = $6 | 0;
  $7 = +$7;
  return +FUNCTION_TABLE[$0]($1, $2, $3, $4, $5, $6, $7);
 }
 
 function dynCall_diidddi($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = +$3;
  $4 = +$4;
  $5 = +$5;
  $6 = $6 | 0;
  return +FUNCTION_TABLE[$0]($1, $2, $3, $4, $5, $6);
 }
 
 function dynCall_iid($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = +$2;
  return FUNCTION_TABLE[$0]($1, $2) | 0;
 }
 
 function dynCall_id($0, $1) {
  $0 = $0 | 0;
  $1 = +$1;
  return FUNCTION_TABLE[$0]($1) | 0;
 }
 
 function dynCall_diidii($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = +$3;
  $4 = $4 | 0;
  $5 = $5 | 0;
  return +FUNCTION_TABLE[$0]($1, $2, $3, $4, $5);
 }
 
 function dynCall_iidiiii($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = +$2;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  return FUNCTION_TABLE[$0]($1, $2, $3, $4, $5, $6) | 0;
 }
 
 function dynCall_iiiiiiiii($0, $1, $2, $3, $4, $5, $6, $7, $8) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  $8 = $8 | 0;
  return FUNCTION_TABLE[$0]($1, $2, $3, $4, $5, $6, $7, $8) | 0;
 }
 
 function dynCall_iiiiid($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = +$5;
  return FUNCTION_TABLE[$0]($1, $2, $3, $4, $5) | 0;
 }
 
 function dynCall_viiiiii($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  FUNCTION_TABLE[$0]($1, $2, $3, $4, $5, $6);
 }
 
 function legalstub$dynCall_jiiii($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $0 = FUNCTION_TABLE[$0]($1, $2, $3, $4) | 0;
  setTempRet0(i64toi32_i32$HIGH_BITS | 0);
  return $0 | 0;
 }
 
 function legalstub$dynCall_iiiiiijj($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  $8 = $8 | 0;
  $9 = $9 | 0;
  return FUNCTION_TABLE[$0]($1, $2, $3, $4, $5, $6, $7, $8, $9) | 0;
 }
 
 function legalfunc$__invoke___22class_std____2__basic_istream_22____22class_std____2__basic_istream_22__i64_i32($0, $1, $2) {
  legalimport$__invoke___22class_std____2__basic_istream_22____22class_std____2__basic_istream_22__i64_i32(6, $0 | 0, $1 | 0, $2 | 0, 0) | 0;
 }
 
 function legalfunc$__invoke_i64_i8__i8__i32__i32($0, $1, $2, $3, $4) {
  $1 = legalimport$__invoke_i64_i8__i8__i32__i32($0 | 0, $1 | 0, $2 | 0, $3 | 0, $4 | 0) | 0;
  $0 = getTempRet0() | 0;
  $1 = $1 | 0;
  i64toi32_i32$HIGH_BITS = $0;
  return $1;
 }
 
 function legalfunc$wasm2js_scratch_store_i64($0, $1) {
  legalimport$wasm2js_scratch_store_i64($0 | 0, $1 | 0);
 }
 
 function _ZN17compiler_builtins3int3mul3Mul3mul17h070e9a1c69faec5bE($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
  $4 = $2 >>> 16 | 0;
  $5 = $0 >>> 16 | 0;
  $9 = Math_imul($4, $5);
  $6 = $2 & 65535;
  $7 = $0 & 65535;
  $8 = Math_imul($6, $7);
  $5 = ($8 >>> 16 | 0) + Math_imul($5, $6) | 0;
  $4 = ($5 & 65535) + Math_imul($4, $7) | 0;
  $0 = (Math_imul($1, $2) + $9 | 0) + Math_imul($0, $3) + ($5 >>> 16) + ($4 >>> 16) | 0;
  $1 = $8 & 65535 | $4 << 16;
  i64toi32_i32$HIGH_BITS = $0;
  return $1;
 }
 
 function _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$9 : {
          label$11 : {
           $3 = $1;
           if ($3) {
            $4 = $2;
            if (!$4) {
             break label$11
            }
            break label$9;
           }
           $1 = $0;
           $0 = ($0 >>> 0) / ($2 >>> 0) | 0;
           legalfunc$wasm2js_scratch_store_i64($1 - Math_imul($0, $2) | 0, 0);
           i64toi32_i32$HIGH_BITS = 0;
           return $0;
          }
          if (!$0) {
           break label$7
          }
          break label$6;
         }
         $5 = $4 + -1 | 0;
         if (!($5 & $4)) {
          break label$5
         }
         $8 = (Math_clz32($4) + 33 | 0) - Math_clz32($3) | 0;
         $7 = 0 - $8 | 0;
         break label$3;
        }
        $0 = ($3 >>> 0) / 0 | 0;
        legalfunc$wasm2js_scratch_store_i64(0, $3 - Math_imul($0, 0) | 0);
        i64toi32_i32$HIGH_BITS = 0;
        return $0;
       }
       $3 = 32 - Math_clz32($3) | 0;
       if ($3 >>> 0 < 31) {
        break label$4
       }
       break label$2;
      }
      legalfunc$wasm2js_scratch_store_i64($0 & $5, 0);
      if (($4 | 0) == 1) {
       break label$1
      }
      $3 = __wasm_ctz_i32($4);
      $2 = $3 & 31;
      if (32 <= ($3 & 63) >>> 0) {
       $3 = 0;
       $0 = $1 >>> $2 | 0;
      } else {
       $3 = $1 >>> $2 | 0;
       $0 = ((1 << $2) - 1 & $1) << 32 - $2 | $0 >>> $2;
      }
      i64toi32_i32$HIGH_BITS = $3;
      return $0;
     }
     $8 = $3 + 1 | 0;
     $7 = 63 - $3 | 0;
    }
    $4 = $1;
    $5 = $0;
    $3 = $8 & 63;
    $6 = $3 & 31;
    if (32 <= $3 >>> 0) {
     $3 = 0;
     $6 = $4 >>> $6 | 0;
    } else {
     $3 = $4 >>> $6 | 0;
     $6 = ((1 << $6) - 1 & $4) << 32 - $6 | $5 >>> $6;
    }
    $4 = $3;
    $3 = $7 & 63;
    $5 = $3 & 31;
    if (32 <= $3 >>> 0) {
     $3 = $0 << $5;
     $0 = 0;
    } else {
     $3 = (1 << $5) - 1 & $0 >>> 32 - $5 | $1 << $5;
     $0 = $0 << $5;
    }
    $1 = $3;
    if ($8) {
     $3 = -1;
     $5 = $2 + -1 | 0;
     if ($5 >>> 0 < 4294967295) {
      $3 = 0
     }
     while (1) {
      $7 = $6 << 1 | $1 >>> 31;
      $9 = $7;
      $4 = $4 << 1 | $6 >>> 31;
      $7 = $3 - ($4 + ($5 >>> 0 < $7 >>> 0) | 0) >> 31;
      $10 = $2 & $7;
      $6 = $9 - $10 | 0;
      $4 = $4 - ($9 >>> 0 < $10 >>> 0) | 0;
      $1 = $1 << 1 | $0 >>> 31;
      $0 = $11 | $0 << 1;
      $9 = $7 & 1;
      $11 = $9;
      $8 = $8 + -1 | 0;
      if ($8) {
       continue
      }
      break;
     };
    }
    legalfunc$wasm2js_scratch_store_i64($6, $4);
    i64toi32_i32$HIGH_BITS = $1 << 1 | $0 >>> 31;
    return $9 | $0 << 1;
   }
   legalfunc$wasm2js_scratch_store_i64($0, $1);
   $0 = 0;
   $1 = 0;
  }
  i64toi32_i32$HIGH_BITS = $1;
  return $0;
 }
 
 function __wasm_ctz_i32($0) {
  if ($0) {
   return 31 - Math_clz32($0 + -1 ^ $0) | 0
  }
  return 32;
 }
 
 function __wasm_i64_mul($0, $1, $2, $3) {
  $0 = _ZN17compiler_builtins3int3mul3Mul3mul17h070e9a1c69faec5bE($0, $1, $2, $3);
  return $0;
 }
 
 function __wasm_i64_udiv($0, $1, $2) {
  return _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E($0, $1, $2);
 }
 
 function __wasm_rotl_i32($0, $1) {
  var $2 = 0, $3 = 0;
  $2 = $1 & 31;
  $3 = (-1 >>> $2 & $0) << $2;
  $2 = $0;
  $0 = 0 - $1 & 31;
  return $3 | ($2 & -1 << $0) >>> $0;
 }
 
 // EMSCRIPTEN_END_FUNCS
;
 FUNCTION_TABLE[1] = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20char_20const__29;
 FUNCTION_TABLE[2] = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__operator___char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29;
 FUNCTION_TABLE[3] = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20_28__29_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___29_29;
 FUNCTION_TABLE[4] = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___20std____2__endl_char_2c_20std____2__char_traits_char__20__28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___29;
 FUNCTION_TABLE[5] = std____2__basic_ifstream_char_2c_20std____2__char_traits_char__20___is_open_28_29_20const;
 FUNCTION_TABLE[6] = std____2__basic_istream_char_2c_20std____2__char_traits_char__20___seekg_28long_20long_2c_20std____2__ios_base__seekdir_29;
 FUNCTION_TABLE[7] = std____2__basic_istream_char_2c_20std____2__char_traits_char__20___read_28char__2c_20long_29;
 FUNCTION_TABLE[8] = std____2__basic_ios_char_2c_20std____2__char_traits_char__20___eof_28_29_20const;
 FUNCTION_TABLE[9] = std____2__vector_short_2c_20std____2__allocator_short__20___resize_28unsigned_20long_29;
 FUNCTION_TABLE[10] = std____2__basic_ifstream_char_2c_20std____2__char_traits_char__20___close_28_29;
 FUNCTION_TABLE[11] = std____2__vector_double_2c_20std____2__allocator_double__20___resize_28unsigned_20long_29;
 FUNCTION_TABLE[12] = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28short_29;
 FUNCTION_TABLE[13] = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___operator___28unsigned_20long_29;
 FUNCTION_TABLE[14] = std____2__basic_istream_char_2c_20std____2__char_traits_char__20___basic_istream_28std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___29;
 FUNCTION_TABLE[15] = std____2__basic_filebuf_char_2c_20std____2__char_traits_char__20___basic_filebuf_28_29;
 FUNCTION_TABLE[16] = std____2__basic_filebuf_char_2c_20std____2__char_traits_char__20___open_28char_20const__2c_20unsigned_20int_29;
 FUNCTION_TABLE[17] = std____2__basic_ios_char_2c_20std____2__char_traits_char__20___setstate_28unsigned_20int_29;
 FUNCTION_TABLE[18] = std____2__vector_short_2c_20std____2__allocator_short__20_____annotate_delete_28_29_20const;
 FUNCTION_TABLE[19] = std____2__basic_ios_char_2c_20std____2__char_traits_char__20___rdbuf_28_29_20const;
 FUNCTION_TABLE[20] = std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20_____annotate_delete_28_29_20const;
 FUNCTION_TABLE[21] = std____2__codecvt_char_2c_20char_2c_20__mbstate_t__20const__20std____2__use_facet_std____2__codecvt_char_2c_20char_2c_20__mbstate_t__20__28std____2__locale_20const__29;
 FUNCTION_TABLE[22] = std____2__basic_filebuf_char_2c_20std____2__char_traits_char__20___close_28_29;
 FUNCTION_TABLE[23] = __cxa_end_catch;
 FUNCTION_TABLE[24] = std____2____compressed_pair_unsigned_20char__2c_20std____2__allocator_unsigned_20char__20_____compressed_pair_std__nullptr_t_2c_20true__28std__nullptr_t___29;
 FUNCTION_TABLE[25] = std____2____split_buffer_double_2c_20std____2__allocator_double_______construct_at_end_28unsigned_20long_29;
 FUNCTION_TABLE[26] = std____2__vector_double_2c_20std____2__allocator_double__20_____swap_out_circular_buffer_28std____2____split_buffer_double_2c_20std____2__allocator_double_____29;
 FUNCTION_TABLE[27] = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___sentry__sentry_28std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___29;
 FUNCTION_TABLE[28] = std____2__basic_ios_char_2c_20std____2__char_traits_char__20___fill_28_29_20const;
 FUNCTION_TABLE[29] = std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20std____2____pad_and_output_char_2c_20std____2__char_traits_char__20__28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20char_20const__2c_20char_20const__2c_20char_20const__2c_20std____2__ios_base__2c_20char_29;
 FUNCTION_TABLE[30] = std____2__ios_base____set_badbit_and_consider_rethrow_28_29;
 FUNCTION_TABLE[31] = std____2__ctype_char__20const__20std____2__use_facet_std____2__ctype_char__20__28std____2__locale_20const__29;
 FUNCTION_TABLE[32] = std____2__ctype_char___widen_28char_29_20const;
 FUNCTION_TABLE[33] = std____2____compressed_pair_unsigned_20char__2c_20std____2__allocator_unsigned_20char__20_____compressed_pair_std__nullptr_t_2c_20true__28std__nullptr_t___29;
 FUNCTION_TABLE[34] = std____2____split_buffer_short_2c_20std____2__allocator_short_______construct_at_end_28unsigned_20long_29;
 FUNCTION_TABLE[35] = std____2__vector_short_2c_20std____2__allocator_short__20_____swap_out_circular_buffer_28std____2____split_buffer_short_2c_20std____2__allocator_short_____29;
 FUNCTION_TABLE[36] = fclose;
 FUNCTION_TABLE[37] = std____2__vector_double_2c_20std____2__allocator_double__20___operator__28std____2__vector_double_2c_20std____2__allocator_double__20__20const__29;
 FUNCTION_TABLE[38] = unsigned_20long_20const__20std____2__min_unsigned_20long__28unsigned_20long_20const__2c_20unsigned_20long_20const__29;
 FUNCTION_TABLE[39] = std____2__vector_double_2c_20std____2__allocator_double__20_____vallocate_28unsigned_20long_29;
 FUNCTION_TABLE[40] = std____2__vector_double_2c_20std____2__allocator_double__20_____construct_at_end_28unsigned_20long_29;
 FUNCTION_TABLE[41] = std____2__vector_double_2c_20std____2__allocator_double__20_____annotate_delete_28_29_20const;
 FUNCTION_TABLE[42] = std____2____compressed_pair__IO_FILE__2c_20int_20_28__29_28_IO_FILE__29_____compressed_pair__IO_FILE___2c_20int_20_28__29_28_IO_FILE__29__28_IO_FILE___2c_20int_20_28____29_28_IO_FILE__29_29;
 FUNCTION_TABLE[43] = unsigned_20char__20std____2____to_raw_pointer_unsigned_20char__28unsigned_20char__29;
 FUNCTION_TABLE[44] = std____2____libcpp_deallocate_28void__2c_20unsigned_20long_2c_20unsigned_20long_29;
 FUNCTION_TABLE[45] = std____2____vector_base_double_2c_20std____2__allocator_double__20_____copy_assign_alloc_28std____2____vector_base_double_2c_20std____2__allocator_double__20__20const__29;
 FUNCTION_TABLE[46] = std__length_error__length_error_28char_20const__29;
 FUNCTION_TABLE[47] = std__logic_error___logic_error_28_29;
 FUNCTION_TABLE[48] = std____2__locale__has_facet_28std____2__locale__id__29_20const;
 FUNCTION_TABLE[49] = std____2____vector_base_double_2c_20std____2__allocator_double__20_____copy_assign_alloc_28std____2____vector_base_double_2c_20std____2__allocator_double__20__20const__29;
 FUNCTION_TABLE[50] = std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___sputn_28char_20const__2c_20long_29;
 FUNCTION_TABLE[51] = std____2____vector_base_double_2c_20std____2__allocator_double__20_____copy_assign_alloc_28std____2____vector_base_double_2c_20std____2__allocator_double__20__20const__29;
 FUNCTION_TABLE[52] = std____2__basic_ifstream_char_2c_20std____2__char_traits_char__20____basic_ifstream_28_29;
 FUNCTION_TABLE[53] = std____2__basic_ifstream_char_2c_20std____2__char_traits_char__20____basic_ifstream_28_29_2;
 FUNCTION_TABLE[54] = virtual_20thunk_20to_20std____2__basic_ifstream_char_2c_20std____2__char_traits_char__20____basic_ifstream_28_29;
 FUNCTION_TABLE[55] = virtual_20thunk_20to_20std____2__basic_ifstream_char_2c_20std____2__char_traits_char__20____basic_ifstream_28_29_1;
 FUNCTION_TABLE[56] = std____2__basic_istream_char_2c_20std____2__char_traits_char__20____basic_istream_28_29_1;
 FUNCTION_TABLE[57] = std____2__basic_istream_char_2c_20std____2__char_traits_char__20____basic_istream_28_29_2;
 FUNCTION_TABLE[58] = virtual_20thunk_20to_20std____2__basic_istream_char_2c_20std____2__char_traits_char__20____basic_istream_28_29;
 FUNCTION_TABLE[59] = virtual_20thunk_20to_20std____2__basic_istream_char_2c_20std____2__char_traits_char__20____basic_istream_28_29_1;
 FUNCTION_TABLE[60] = std____2__basic_filebuf_char_2c_20std____2__char_traits_char__20____basic_filebuf_28_29;
 FUNCTION_TABLE[61] = std____2__basic_filebuf_char_2c_20std____2__char_traits_char__20____basic_filebuf_28_29_1;
 FUNCTION_TABLE[62] = std____2__basic_filebuf_char_2c_20std____2__char_traits_char__20___imbue_28std____2__locale_20const__29;
 FUNCTION_TABLE[63] = std____2__basic_filebuf_char_2c_20std____2__char_traits_char__20___setbuf_28char__2c_20long_29;
 FUNCTION_TABLE[64] = std____2__basic_filebuf_char_2c_20std____2__char_traits_char__20___seekoff_28long_20long_2c_20std____2__ios_base__seekdir_2c_20unsigned_20int_29;
 FUNCTION_TABLE[65] = std____2__basic_filebuf_char_2c_20std____2__char_traits_char__20___seekpos_28std____2__fpos___mbstate_t__2c_20unsigned_20int_29;
 FUNCTION_TABLE[66] = std____2__basic_filebuf_char_2c_20std____2__char_traits_char__20___sync_28_29;
 FUNCTION_TABLE[67] = emscripten__internal__WithPolicies____ArgTypeList____getCount_28_29_20const;
 FUNCTION_TABLE[68] = std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___xsgetn_28char__2c_20long_29;
 FUNCTION_TABLE[69] = std____2__basic_filebuf_char_2c_20std____2__char_traits_char__20___underflow_28_29;
 FUNCTION_TABLE[70] = std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___uflow_28_29;
 FUNCTION_TABLE[71] = std____2__basic_filebuf_char_2c_20std____2__char_traits_char__20___pbackfail_28int_29;
 FUNCTION_TABLE[72] = std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___xsputn_28char_20const__2c_20long_29;
 FUNCTION_TABLE[73] = std____2__basic_filebuf_char_2c_20std____2__char_traits_char__20___overflow_28int_29;
 FUNCTION_TABLE[74] = void_20const__20emscripten__internal__getActualType_vectorTools__28vectorTools__29;
 FUNCTION_TABLE[75] = void_20emscripten__internal__raw_destructor_vectorTools__28vectorTools__29;
 FUNCTION_TABLE[76] = vectorTools__20emscripten__internal__operator_new_vectorTools__28_29;
 FUNCTION_TABLE[77] = emscripten__internal__Invoker_void_2c_20std____2__vector_double_2c_20std____2__allocator_double__20_____invoke_28void_20_28__29_28std____2__vector_double_2c_20std____2__allocator_double__20___29_2c_20std____2__vector_double_2c_20std____2__allocator_double__20___29;
 FUNCTION_TABLE[78] = vectorTools__clearVectorDbl_28std____2__vector_double_2c_20std____2__allocator_double__20___29;
 FUNCTION_TABLE[79] = emscripten__internal__Invoker_void_2c_20std____2__vector_double_2c_20std____2__allocator_double__20_____invoke_28void_20_28__29_28std____2__vector_double_2c_20std____2__allocator_double__20___29_2c_20std____2__vector_double_2c_20std____2__allocator_double__20___29;
 FUNCTION_TABLE[80] = vectorTools__clearVectorFloat_28std____2__vector_float_2c_20std____2__allocator_float__20___29;
 FUNCTION_TABLE[81] = void_20const__20emscripten__internal__getActualType_maxiSettings__28maxiSettings__29;
 FUNCTION_TABLE[82] = void_20emscripten__internal__raw_destructor_vectorTools__28vectorTools__29;
 FUNCTION_TABLE[83] = vectorTools__20emscripten__internal__operator_new_vectorTools__28_29;
 FUNCTION_TABLE[84] = emscripten__internal__Invoker_void_2c_20int_2c_20int_2c_20int___invoke_28void_20_28__29_28int_2c_20int_2c_20int_29_2c_20int_2c_20int_2c_20int_29;
 FUNCTION_TABLE[85] = maxiSettings__setup_28int_2c_20int_2c_20int_29;
 FUNCTION_TABLE[86] = maxiSettings__getSampleRate_28_29_20const;
 FUNCTION_TABLE[87] = maxiSettings__setSampleRate_28int_29;
 FUNCTION_TABLE[88] = int_20emscripten__internal__GetterPolicy_int_20_28maxiSettings____29_28_29_20const___get_maxiSettings__28int_20_28maxiSettings____20const__29_28_29_20const_2c_20maxiSettings_20const__29;
 FUNCTION_TABLE[89] = void_20emscripten__internal__SetterPolicy_void_20_28maxiSettings____29_28int_29___set_maxiSettings__28void_20_28maxiSettings____20const__29_28int_29_2c_20maxiSettings__2c_20int_29;
 FUNCTION_TABLE[90] = maxiSettings__getNumChannels_28_29_20const;
 FUNCTION_TABLE[91] = maxiSettings__setNumChannels_28int_29;
 FUNCTION_TABLE[92] = maxiSettings__getBufferSize_28_29_20const;
 FUNCTION_TABLE[93] = maxiSettings__setBufferSize_28int_29;
 FUNCTION_TABLE[94] = void_20const__20emscripten__internal__getActualType_maxiOsc__28maxiOsc__29;
 FUNCTION_TABLE[95] = void_20emscripten__internal__raw_destructor_vectorTools__28vectorTools__29;
 FUNCTION_TABLE[96] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___get_28std____2__shared_ptr_maxiOsc__20const__29;
 FUNCTION_TABLE[97] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___construct_null_28_29;
 FUNCTION_TABLE[98] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___share_28maxiOsc__2c_20emscripten__internal___EM_VAL__29;
 FUNCTION_TABLE[99] = void_20emscripten__internal__raw_destructor_std____2__shared_ptr_maxiOsc__20__28std____2__shared_ptr_maxiOsc___29;
 FUNCTION_TABLE[100] = emscripten__internal__Invoker_std____2__shared_ptr_maxiOsc__20___invoke_28std____2__shared_ptr_maxiOsc__20_28__29_28_29_29;
 FUNCTION_TABLE[101] = std____2__enable_if___28is_array_maxiOsc___value_29_2c_20std____2__shared_ptr_maxiOsc__20___type_20std____2__make_shared_maxiOsc__28_29;
 FUNCTION_TABLE[102] = maxiOsc__sinewave_28double_29;
 FUNCTION_TABLE[103] = maxiOsc__coswave_28double_29;
 FUNCTION_TABLE[104] = maxiOsc__phasor_28double_29;
 FUNCTION_TABLE[105] = maxiOsc__phasor_28double_2c_20double_2c_20double_29;
 FUNCTION_TABLE[106] = maxiOsc__saw_28double_29;
 FUNCTION_TABLE[107] = maxiOsc__triangle_28double_29;
 FUNCTION_TABLE[108] = maxiOsc__square_28double_29;
 FUNCTION_TABLE[109] = maxiOsc__pulse_28double_2c_20double_29;
 FUNCTION_TABLE[110] = maxiOsc__impulse_28double_29;
 FUNCTION_TABLE[111] = maxiOsc__noise_28_29;
 FUNCTION_TABLE[112] = maxiOsc__sinebuf_28double_29;
 FUNCTION_TABLE[113] = maxiOsc__sinebuf4_28double_29;
 FUNCTION_TABLE[114] = maxiOsc__sawn_28double_29;
 FUNCTION_TABLE[115] = maxiOsc__phaseReset_28double_29;
 FUNCTION_TABLE[116] = void_20const__20emscripten__internal__getActualType_maxiEnvelope__28maxiEnvelope__29;
 FUNCTION_TABLE[117] = void_20emscripten__internal__raw_destructor_vectorTools__28vectorTools__29;
 FUNCTION_TABLE[118] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___get_28std____2__shared_ptr_maxiOsc__20const__29;
 FUNCTION_TABLE[119] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___construct_null_28_29;
 FUNCTION_TABLE[120] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiEnvelope__20___share_28maxiEnvelope__2c_20emscripten__internal___EM_VAL__29;
 FUNCTION_TABLE[121] = void_20emscripten__internal__raw_destructor_std____2__shared_ptr_maxiOsc__20__28std____2__shared_ptr_maxiOsc___29;
 FUNCTION_TABLE[122] = emscripten__internal__Invoker_std____2__shared_ptr_maxiEnvelope__20___invoke_28std____2__shared_ptr_maxiEnvelope__20_28__29_28_29_29;
 FUNCTION_TABLE[123] = std____2__enable_if___28is_array_maxiEnvelope___value_29_2c_20std____2__shared_ptr_maxiEnvelope__20___type_20std____2__make_shared_maxiEnvelope__28_29;
 FUNCTION_TABLE[124] = maxiEnvelope__line_28int_2c_20std____2__vector_double_2c_20std____2__allocator_double__20___29;
 FUNCTION_TABLE[125] = maxiEnvelope__trigger_28int_2c_20double_29;
 FUNCTION_TABLE[126] = maxiEnvelope__getAmplitude_28_29_20const;
 FUNCTION_TABLE[127] = maxiEnvelope__setAmplitude_28double_29;
 FUNCTION_TABLE[128] = double_20emscripten__internal__GetterPolicy_double_20_28maxiEnvelope____29_28_29_20const___get_maxiEnvelope__28double_20_28maxiEnvelope____20const__29_28_29_20const_2c_20maxiEnvelope_20const__29;
 FUNCTION_TABLE[129] = void_20emscripten__internal__SetterPolicy_void_20_28maxiEnvelope____29_28double_29___set_maxiEnvelope__28void_20_28maxiEnvelope____20const__29_28double_29_2c_20maxiEnvelope__2c_20double_29;
 FUNCTION_TABLE[130] = maxiEnvelope__getValindex_28_29_20const;
 FUNCTION_TABLE[131] = maxiEnvelope__setValindex_28int_29;
 FUNCTION_TABLE[132] = int_20emscripten__internal__GetterPolicy_int_20_28maxiSettings____29_28_29_20const___get_maxiSettings__28int_20_28maxiSettings____20const__29_28_29_20const_2c_20maxiSettings_20const__29;
 FUNCTION_TABLE[133] = void_20emscripten__internal__SetterPolicy_void_20_28maxiSettings____29_28int_29___set_maxiSettings__28void_20_28maxiSettings____20const__29_28int_29_2c_20maxiSettings__2c_20int_29;
 FUNCTION_TABLE[134] = void_20const__20emscripten__internal__getActualType_maxiDelayline__28maxiDelayline__29;
 FUNCTION_TABLE[135] = void_20emscripten__internal__raw_destructor_vectorTools__28vectorTools__29;
 FUNCTION_TABLE[136] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___get_28std____2__shared_ptr_maxiOsc__20const__29;
 FUNCTION_TABLE[137] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___construct_null_28_29;
 FUNCTION_TABLE[138] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiDelayline__20___share_28maxiDelayline__2c_20emscripten__internal___EM_VAL__29;
 FUNCTION_TABLE[139] = void_20emscripten__internal__raw_destructor_std____2__shared_ptr_maxiOsc__20__28std____2__shared_ptr_maxiOsc___29;
 FUNCTION_TABLE[140] = emscripten__internal__Invoker_std____2__shared_ptr_maxiDelayline__20___invoke_28std____2__shared_ptr_maxiDelayline__20_28__29_28_29_29;
 FUNCTION_TABLE[141] = std____2__enable_if___28is_array_maxiDelayline___value_29_2c_20std____2__shared_ptr_maxiDelayline__20___type_20std____2__make_shared_maxiDelayline__28_29;
 FUNCTION_TABLE[142] = maxiDelayline__dl_28double_2c_20int_2c_20double_29;
 FUNCTION_TABLE[143] = maxiDelayline__dl_28double_2c_20int_2c_20double_2c_20int_29;
 FUNCTION_TABLE[144] = void_20const__20emscripten__internal__getActualType_maxiFilter__28maxiFilter__29;
 FUNCTION_TABLE[145] = void_20emscripten__internal__raw_destructor_vectorTools__28vectorTools__29;
 FUNCTION_TABLE[146] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___get_28std____2__shared_ptr_maxiOsc__20const__29;
 FUNCTION_TABLE[147] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___construct_null_28_29;
 FUNCTION_TABLE[148] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiFilter__20___share_28maxiFilter__2c_20emscripten__internal___EM_VAL__29;
 FUNCTION_TABLE[149] = void_20emscripten__internal__raw_destructor_std____2__shared_ptr_maxiOsc__20__28std____2__shared_ptr_maxiOsc___29;
 FUNCTION_TABLE[150] = emscripten__internal__Invoker_std____2__shared_ptr_maxiFilter__20___invoke_28std____2__shared_ptr_maxiFilter__20_28__29_28_29_29;
 FUNCTION_TABLE[151] = std____2__enable_if___28is_array_maxiFilter___value_29_2c_20std____2__shared_ptr_maxiFilter__20___type_20std____2__make_shared_maxiFilter__28_29;
 FUNCTION_TABLE[152] = maxiFilter__lores_28double_2c_20double_2c_20double_29;
 FUNCTION_TABLE[153] = maxiFilter__hires_28double_2c_20double_2c_20double_29;
 FUNCTION_TABLE[154] = maxiFilter__bandpass_28double_2c_20double_2c_20double_29;
 FUNCTION_TABLE[155] = maxiFilter__lopass_28double_2c_20double_29;
 FUNCTION_TABLE[156] = maxiFilter__hipass_28double_2c_20double_29;
 FUNCTION_TABLE[157] = maxiFilter__getCutoff_28_29_20const;
 FUNCTION_TABLE[158] = maxiFilter__setCutoff_28double_29;
 FUNCTION_TABLE[159] = double_20emscripten__internal__GetterPolicy_double_20_28maxiEnvelope____29_28_29_20const___get_maxiEnvelope__28double_20_28maxiEnvelope____20const__29_28_29_20const_2c_20maxiEnvelope_20const__29;
 FUNCTION_TABLE[160] = void_20emscripten__internal__SetterPolicy_void_20_28maxiEnvelope____29_28double_29___set_maxiEnvelope__28void_20_28maxiEnvelope____20const__29_28double_29_2c_20maxiEnvelope__2c_20double_29;
 FUNCTION_TABLE[161] = maxiFilter__getResonance_28_29_20const;
 FUNCTION_TABLE[162] = maxiFilter__setResonance_28double_29;
 FUNCTION_TABLE[163] = void_20const__20emscripten__internal__getActualType_maxiMix__28maxiMix__29;
 FUNCTION_TABLE[164] = void_20emscripten__internal__raw_destructor_vectorTools__28vectorTools__29;
 FUNCTION_TABLE[165] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___get_28std____2__shared_ptr_maxiOsc__20const__29;
 FUNCTION_TABLE[166] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___construct_null_28_29;
 FUNCTION_TABLE[167] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiMix__20___share_28maxiMix__2c_20emscripten__internal___EM_VAL__29;
 FUNCTION_TABLE[168] = void_20emscripten__internal__raw_destructor_std____2__shared_ptr_maxiOsc__20__28std____2__shared_ptr_maxiOsc___29;
 FUNCTION_TABLE[169] = emscripten__internal__Invoker_std____2__shared_ptr_maxiMix__20___invoke_28std____2__shared_ptr_maxiMix__20_28__29_28_29_29;
 FUNCTION_TABLE[170] = std____2__enable_if___28is_array_maxiMix___value_29_2c_20std____2__shared_ptr_maxiMix__20___type_20std____2__make_shared_maxiMix__28_29;
 FUNCTION_TABLE[171] = maxiMix__stereo_28double_2c_20std____2__vector_double_2c_20std____2__allocator_double__20___2c_20double_29;
 FUNCTION_TABLE[172] = maxiMix__quad_28double_2c_20std____2__vector_double_2c_20std____2__allocator_double__20___2c_20double_2c_20double_29;
 FUNCTION_TABLE[173] = maxiMix__ambisonic_28double_2c_20std____2__vector_double_2c_20std____2__allocator_double__20___2c_20double_2c_20double_2c_20double_29;
 FUNCTION_TABLE[174] = void_20const__20emscripten__internal__getActualType_maxiLine__28maxiLine__29;
 FUNCTION_TABLE[175] = void_20emscripten__internal__raw_destructor_vectorTools__28vectorTools__29;
 FUNCTION_TABLE[176] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___get_28std____2__shared_ptr_maxiOsc__20const__29;
 FUNCTION_TABLE[177] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___construct_null_28_29;
 FUNCTION_TABLE[178] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiLine__20___share_28maxiLine__2c_20emscripten__internal___EM_VAL__29;
 FUNCTION_TABLE[179] = void_20emscripten__internal__raw_destructor_std____2__shared_ptr_maxiOsc__20__28std____2__shared_ptr_maxiOsc___29;
 FUNCTION_TABLE[180] = emscripten__internal__Invoker_std____2__shared_ptr_maxiLine__20___invoke_28std____2__shared_ptr_maxiLine__20_28__29_28_29_29;
 FUNCTION_TABLE[181] = std____2__enable_if___28is_array_maxiLine___value_29_2c_20std____2__shared_ptr_maxiLine__20___type_20std____2__make_shared_maxiLine__28_29;
 FUNCTION_TABLE[182] = maxiLine__play_28double_29;
 FUNCTION_TABLE[183] = maxiLine__prepare_28double_2c_20double_2c_20double_2c_20bool_29;
 FUNCTION_TABLE[184] = maxiLine__triggerEnable_28double_29;
 FUNCTION_TABLE[185] = maxiLine__isLineComplete_28_29;
 FUNCTION_TABLE[186] = void_20const__20emscripten__internal__getActualType_maxiXFade__28maxiXFade__29;
 FUNCTION_TABLE[187] = void_20emscripten__internal__raw_destructor_vectorTools__28vectorTools__29;
 FUNCTION_TABLE[188] = maxiXFade__xfade_28std____2__vector_double_2c_20std____2__allocator_double__20___2c_20std____2__vector_double_2c_20std____2__allocator_double__20___2c_20double_29;
 FUNCTION_TABLE[189] = emscripten__internal__Invoker_std____2__vector_double_2c_20std____2__allocator_double__20__2c_20std____2__vector_double_2c_20std____2__allocator_double__20___2c_20std____2__vector_double_2c_20std____2__allocator_double__20___2c_20double___invoke_28std____2__vector_double_2c_20std____2__allocator_double__20__20_28__29_28std____2__vector_double_2c_20std____2__allocator_double__20___2c_20std____2__vector_double_2c_20std____2__allocator_double__20___2c_20double_29_2c_20std____2__vector_double_2c_20std____2__allocator_double__20___2c_20std____2__vector_double_2c_20std____2__allocator_double__20___2c_20double_29;
 FUNCTION_TABLE[190] = maxiXFade__xfade_28double_2c_20double_2c_20double_29;
 FUNCTION_TABLE[191] = emscripten__internal__Invoker_double_2c_20double_2c_20double_2c_20double___invoke_28double_20_28__29_28double_2c_20double_2c_20double_29_2c_20double_2c_20double_2c_20double_29;
 FUNCTION_TABLE[192] = void_20const__20emscripten__internal__getActualType_maxiLagExp_double__20__28maxiLagExp_double___29;
 FUNCTION_TABLE[193] = void_20emscripten__internal__raw_destructor_vectorTools__28vectorTools__29;
 FUNCTION_TABLE[194] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___get_28std____2__shared_ptr_maxiOsc__20const__29;
 FUNCTION_TABLE[195] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___construct_null_28_29;
 FUNCTION_TABLE[196] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiLagExp_double__20__20___share_28maxiLagExp_double___2c_20emscripten__internal___EM_VAL__29;
 FUNCTION_TABLE[197] = void_20emscripten__internal__raw_destructor_std____2__shared_ptr_maxiOsc__20__28std____2__shared_ptr_maxiOsc___29;
 FUNCTION_TABLE[198] = emscripten__internal__Invoker_std____2__shared_ptr_maxiLagExp_double__20__20___invoke_28std____2__shared_ptr_maxiLagExp_double__20__20_28__29_28_29_29;
 FUNCTION_TABLE[199] = std____2__enable_if___28is_array_maxiLagExp_double__20___value_29_2c_20std____2__shared_ptr_maxiLagExp_double__20__20___type_20std____2__make_shared_maxiLagExp_double__20__28_29;
 FUNCTION_TABLE[200] = maxiLagExp_double___init_28double_2c_20double_29;
 FUNCTION_TABLE[201] = maxiLagExp_double___addSample_28double_29;
 FUNCTION_TABLE[202] = maxiLagExp_double___value_28_29_20const;
 FUNCTION_TABLE[203] = maxiLagExp_double___getAlpha_28_29_20const;
 FUNCTION_TABLE[204] = maxiLagExp_double___setAlpha_28double_29;
 FUNCTION_TABLE[205] = double_20emscripten__internal__GetterPolicy_double_20_28maxiEnvelope____29_28_29_20const___get_maxiEnvelope__28double_20_28maxiEnvelope____20const__29_28_29_20const_2c_20maxiEnvelope_20const__29;
 FUNCTION_TABLE[206] = void_20emscripten__internal__SetterPolicy_void_20_28maxiEnvelope____29_28double_29___set_maxiEnvelope__28void_20_28maxiEnvelope____20const__29_28double_29_2c_20maxiEnvelope__2c_20double_29;
 FUNCTION_TABLE[207] = maxiLagExp_double___getAlphaReciprocal_28_29_20const;
 FUNCTION_TABLE[208] = maxiOsc__phaseReset_28double_29;
 FUNCTION_TABLE[209] = maxiLagExp_double___setVal_28double_29;
 FUNCTION_TABLE[210] = void_20const__20emscripten__internal__getActualType_maxiSample__28maxiSample__29;
 FUNCTION_TABLE[211] = void_20emscripten__internal__raw_destructor_maxiSample__28maxiSample__29;
 FUNCTION_TABLE[212] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___get_28std____2__shared_ptr_maxiOsc__20const__29;
 FUNCTION_TABLE[213] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___construct_null_28_29;
 FUNCTION_TABLE[214] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiSample__20___share_28maxiSample__2c_20emscripten__internal___EM_VAL__29;
 FUNCTION_TABLE[215] = void_20emscripten__internal__raw_destructor_std____2__shared_ptr_maxiOsc__20__28std____2__shared_ptr_maxiOsc___29;
 FUNCTION_TABLE[216] = emscripten__internal__Invoker_std____2__shared_ptr_maxiSample__20___invoke_28std____2__shared_ptr_maxiSample__20_28__29_28_29_29;
 FUNCTION_TABLE[217] = std____2__enable_if___28is_array_maxiSample___value_29_2c_20std____2__shared_ptr_maxiSample__20___type_20std____2__make_shared_maxiSample__28_29;
 FUNCTION_TABLE[218] = maxiSample__getLength_28_29_20const;
 FUNCTION_TABLE[219] = maxiSample__setSample_28std____2__vector_double_2c_20std____2__allocator_double__20___29;
 FUNCTION_TABLE[220] = maxiSample__setSample_28std____2__vector_double_2c_20std____2__allocator_double__20___2c_20int_29;
 FUNCTION_TABLE[221] = maxiSample__setSampleFromOggBlob_28std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20___2c_20int_29;
 FUNCTION_TABLE[222] = maxiSample__isReady_28_29;
 FUNCTION_TABLE[223] = maxiSample__playOnce_28_29;
 FUNCTION_TABLE[224] = maxiSample__playOnce_28double_29;
 FUNCTION_TABLE[225] = maxiSample__setPosition_28double_29;
 FUNCTION_TABLE[226] = maxiSample__playUntil_28double_2c_20double_29;
 FUNCTION_TABLE[227] = maxiSample__playOnZX_28double_29;
 FUNCTION_TABLE[228] = maxiSample__playOnZX_28double_2c_20double_29;
 FUNCTION_TABLE[229] = maxiSample__playOnZX_28double_2c_20double_2c_20double_29;
 FUNCTION_TABLE[230] = maxiSample__play_28_29;
 FUNCTION_TABLE[231] = maxiSample__play_28double_29;
 FUNCTION_TABLE[232] = maxiSample__play_28double_2c_20double_2c_20double_29;
 FUNCTION_TABLE[233] = maxiSample__play4_28double_2c_20double_2c_20double_29;
 FUNCTION_TABLE[234] = maxiSample__trigger_28_29;
 FUNCTION_TABLE[235] = maxiSample__clear_28_29;
 FUNCTION_TABLE[236] = maxiSample__normalise_28double_29;
 FUNCTION_TABLE[237] = maxiSample__autoTrim_28float_2c_20float_2c_20bool_2c_20bool_29;
 FUNCTION_TABLE[238] = maxiSample__load_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20int_29;
 FUNCTION_TABLE[239] = maxiSample__read_28_29;
 FUNCTION_TABLE[240] = maxiSample__loopSetPosOnZX_28double_2c_20double_29;
 FUNCTION_TABLE[241] = void_20const__20emscripten__internal__getActualType_maxiMap__28maxiMap__29;
 FUNCTION_TABLE[242] = void_20emscripten__internal__raw_destructor_vectorTools__28vectorTools__29;
 FUNCTION_TABLE[243] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___get_28std____2__shared_ptr_maxiOsc__20const__29;
 FUNCTION_TABLE[244] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___construct_null_28_29;
 FUNCTION_TABLE[245] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiMap__20___share_28maxiMap__2c_20emscripten__internal___EM_VAL__29;
 FUNCTION_TABLE[246] = void_20emscripten__internal__raw_destructor_std____2__shared_ptr_maxiOsc__20__28std____2__shared_ptr_maxiOsc___29;
 FUNCTION_TABLE[247] = emscripten__internal__Invoker_std____2__shared_ptr_maxiMap__20___invoke_28std____2__shared_ptr_maxiMap__20_28__29_28_29_29;
 FUNCTION_TABLE[248] = std____2__enable_if___28is_array_maxiMap___value_29_2c_20std____2__shared_ptr_maxiMap__20___type_20std____2__make_shared_maxiMap__28_29;
 FUNCTION_TABLE[249] = maxiMap__linlin_28double_2c_20double_2c_20double_2c_20double_2c_20double_29;
 FUNCTION_TABLE[250] = maxiMap__linexp_28double_2c_20double_2c_20double_2c_20double_2c_20double_29;
 FUNCTION_TABLE[251] = maxiMap__explin_28double_2c_20double_2c_20double_2c_20double_2c_20double_29;
 FUNCTION_TABLE[252] = double_20maxiMap__clamp_double__28double_2c_20double_2c_20double_29;
 FUNCTION_TABLE[253] = emscripten__internal__Invoker_double_2c_20double_2c_20double_2c_20double_2c_20double_2c_20double___invoke_28double_20_28__29_28double_2c_20double_2c_20double_2c_20double_2c_20double_29_2c_20double_2c_20double_2c_20double_2c_20double_2c_20double_29;
 FUNCTION_TABLE[254] = void_20const__20emscripten__internal__getActualType_maxiDyn__28maxiDyn__29;
 FUNCTION_TABLE[255] = void_20emscripten__internal__raw_destructor_vectorTools__28vectorTools__29;
 FUNCTION_TABLE[256] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___get_28std____2__shared_ptr_maxiOsc__20const__29;
 FUNCTION_TABLE[257] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___construct_null_28_29;
 FUNCTION_TABLE[258] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiDyn__20___share_28maxiDyn__2c_20emscripten__internal___EM_VAL__29;
 FUNCTION_TABLE[259] = void_20emscripten__internal__raw_destructor_std____2__shared_ptr_maxiOsc__20__28std____2__shared_ptr_maxiOsc___29;
 FUNCTION_TABLE[260] = emscripten__internal__Invoker_std____2__shared_ptr_maxiDyn__20___invoke_28std____2__shared_ptr_maxiDyn__20_28__29_28_29_29;
 FUNCTION_TABLE[261] = std____2__enable_if___28is_array_maxiDyn___value_29_2c_20std____2__shared_ptr_maxiDyn__20___type_20std____2__make_shared_maxiDyn__28_29;
 FUNCTION_TABLE[262] = maxiDyn__gate_28double_2c_20double_2c_20long_2c_20double_2c_20double_29;
 FUNCTION_TABLE[263] = maxiDyn__compressor_28double_2c_20double_2c_20double_2c_20double_2c_20double_29;
 FUNCTION_TABLE[264] = maxiDyn__compress_28double_29;
 FUNCTION_TABLE[265] = maxiDyn__setAttack_28double_29;
 FUNCTION_TABLE[266] = maxiDyn__setRelease_28double_29;
 FUNCTION_TABLE[267] = maxiDyn__setThreshold_28double_29;
 FUNCTION_TABLE[268] = maxiOsc__phaseReset_28double_29;
 FUNCTION_TABLE[269] = void_20const__20emscripten__internal__getActualType_maxiEnv__28maxiEnv__29;
 FUNCTION_TABLE[270] = void_20emscripten__internal__raw_destructor_vectorTools__28vectorTools__29;
 FUNCTION_TABLE[271] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___get_28std____2__shared_ptr_maxiOsc__20const__29;
 FUNCTION_TABLE[272] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___construct_null_28_29;
 FUNCTION_TABLE[273] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiEnv__20___share_28maxiEnv__2c_20emscripten__internal___EM_VAL__29;
 FUNCTION_TABLE[274] = void_20emscripten__internal__raw_destructor_std____2__shared_ptr_maxiOsc__20__28std____2__shared_ptr_maxiOsc___29;
 FUNCTION_TABLE[275] = emscripten__internal__Invoker_std____2__shared_ptr_maxiEnv__20___invoke_28std____2__shared_ptr_maxiEnv__20_28__29_28_29_29;
 FUNCTION_TABLE[276] = std____2__enable_if___28is_array_maxiEnv___value_29_2c_20std____2__shared_ptr_maxiEnv__20___type_20std____2__make_shared_maxiEnv__28_29;
 FUNCTION_TABLE[277] = maxiEnv__ar_28double_2c_20double_2c_20double_2c_20long_2c_20int_29;
 FUNCTION_TABLE[278] = maxiEnv__adsr_28double_2c_20double_2c_20double_2c_20double_2c_20double_2c_20long_2c_20int_29;
 FUNCTION_TABLE[279] = maxiEnv__adsr_28double_2c_20int_29;
 FUNCTION_TABLE[280] = maxiEnv__setAttack_28double_29;
 FUNCTION_TABLE[281] = maxiDyn__setAttack_28double_29;
 FUNCTION_TABLE[282] = maxiEnv__setDecay_28double_29;
 FUNCTION_TABLE[283] = maxiEnv__setSustain_28double_29;
 FUNCTION_TABLE[284] = maxiEnv__getTrigger_28_29_20const;
 FUNCTION_TABLE[285] = maxiEnv__setTrigger_28int_29;
 FUNCTION_TABLE[286] = int_20emscripten__internal__GetterPolicy_int_20_28maxiSettings____29_28_29_20const___get_maxiSettings__28int_20_28maxiSettings____20const__29_28_29_20const_2c_20maxiSettings_20const__29;
 FUNCTION_TABLE[287] = void_20emscripten__internal__SetterPolicy_void_20_28maxiSettings____29_28int_29___set_maxiSettings__28void_20_28maxiSettings____20const__29_28int_29_2c_20maxiSettings__2c_20int_29;
 FUNCTION_TABLE[288] = void_20const__20emscripten__internal__getActualType_convert__28convert__29;
 FUNCTION_TABLE[289] = void_20emscripten__internal__raw_destructor_vectorTools__28vectorTools__29;
 FUNCTION_TABLE[290] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___get_28std____2__shared_ptr_maxiOsc__20const__29;
 FUNCTION_TABLE[291] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___construct_null_28_29;
 FUNCTION_TABLE[292] = emscripten__smart_ptr_trait_std____2__shared_ptr_convert__20___share_28convert__2c_20emscripten__internal___EM_VAL__29;
 FUNCTION_TABLE[293] = void_20emscripten__internal__raw_destructor_std____2__shared_ptr_maxiOsc__20__28std____2__shared_ptr_maxiOsc___29;
 FUNCTION_TABLE[294] = emscripten__internal__Invoker_std____2__shared_ptr_convert__20___invoke_28std____2__shared_ptr_convert__20_28__29_28_29_29;
 FUNCTION_TABLE[295] = std____2__enable_if___28is_array_convert___value_29_2c_20std____2__shared_ptr_convert__20___type_20std____2__make_shared_convert__28_29;
 FUNCTION_TABLE[296] = convert__mtof_28int_29;
 FUNCTION_TABLE[297] = emscripten__internal__Invoker_double_2c_20int___invoke_28double_20_28__29_28int_29_2c_20int_29;
 FUNCTION_TABLE[298] = convert__msToSamps_28double_29;
 FUNCTION_TABLE[299] = emscripten__internal__Invoker_double_2c_20double___invoke_28double_20_28__29_28double_29_2c_20double_29;
 FUNCTION_TABLE[300] = void_20const__20emscripten__internal__getActualType_maxiSampleAndHold__28maxiSampleAndHold__29;
 FUNCTION_TABLE[301] = void_20emscripten__internal__raw_destructor_vectorTools__28vectorTools__29;
 FUNCTION_TABLE[302] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___get_28std____2__shared_ptr_maxiOsc__20const__29;
 FUNCTION_TABLE[303] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___construct_null_28_29;
 FUNCTION_TABLE[304] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiSampleAndHold__20___share_28maxiSampleAndHold__2c_20emscripten__internal___EM_VAL__29;
 FUNCTION_TABLE[305] = void_20emscripten__internal__raw_destructor_std____2__shared_ptr_maxiOsc__20__28std____2__shared_ptr_maxiOsc___29;
 FUNCTION_TABLE[306] = emscripten__internal__Invoker_std____2__shared_ptr_maxiSampleAndHold__20___invoke_28std____2__shared_ptr_maxiSampleAndHold__20_28__29_28_29_29;
 FUNCTION_TABLE[307] = std____2__enable_if___28is_array_maxiSampleAndHold___value_29_2c_20std____2__shared_ptr_maxiSampleAndHold__20___type_20std____2__make_shared_maxiSampleAndHold__28_29;
 FUNCTION_TABLE[308] = maxiSampleAndHold__sah_28double_2c_20double_29;
 FUNCTION_TABLE[309] = void_20const__20emscripten__internal__getActualType_maxiNonlinearity__28maxiNonlinearity__29;
 FUNCTION_TABLE[310] = void_20emscripten__internal__raw_destructor_vectorTools__28vectorTools__29;
 FUNCTION_TABLE[311] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___get_28std____2__shared_ptr_maxiOsc__20const__29;
 FUNCTION_TABLE[312] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___construct_null_28_29;
 FUNCTION_TABLE[313] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiNonlinearity__20___share_28maxiNonlinearity__2c_20emscripten__internal___EM_VAL__29;
 FUNCTION_TABLE[314] = void_20emscripten__internal__raw_destructor_std____2__shared_ptr_maxiOsc__20__28std____2__shared_ptr_maxiOsc___29;
 FUNCTION_TABLE[315] = emscripten__internal__Invoker_std____2__shared_ptr_maxiNonlinearity__20___invoke_28std____2__shared_ptr_maxiNonlinearity__20_28__29_28_29_29;
 FUNCTION_TABLE[316] = std____2__enable_if___28is_array_maxiNonlinearity___value_29_2c_20std____2__shared_ptr_maxiNonlinearity__20___type_20std____2__make_shared_maxiNonlinearity__28_29;
 FUNCTION_TABLE[317] = maxiNonlinearity__fastatan_28double_29;
 FUNCTION_TABLE[318] = maxiNonlinearity__atanDist_28double_2c_20double_29;
 FUNCTION_TABLE[319] = maxiNonlinearity__fastAtanDist_28double_2c_20double_29;
 FUNCTION_TABLE[320] = maxiNonlinearity__softclip_28double_29;
 FUNCTION_TABLE[321] = maxiNonlinearity__hardclip_28double_29;
 FUNCTION_TABLE[322] = maxiNonlinearity__asymclip_28double_2c_20double_2c_20double_29;
 FUNCTION_TABLE[323] = void_20const__20emscripten__internal__getActualType_maxiFlanger__28maxiFlanger__29;
 FUNCTION_TABLE[324] = void_20emscripten__internal__raw_destructor_vectorTools__28vectorTools__29;
 FUNCTION_TABLE[325] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___get_28std____2__shared_ptr_maxiOsc__20const__29;
 FUNCTION_TABLE[326] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___construct_null_28_29;
 FUNCTION_TABLE[327] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiFlanger__20___share_28maxiFlanger__2c_20emscripten__internal___EM_VAL__29;
 FUNCTION_TABLE[328] = void_20emscripten__internal__raw_destructor_std____2__shared_ptr_maxiOsc__20__28std____2__shared_ptr_maxiOsc___29;
 FUNCTION_TABLE[329] = emscripten__internal__Invoker_std____2__shared_ptr_maxiFlanger__20___invoke_28std____2__shared_ptr_maxiFlanger__20_28__29_28_29_29;
 FUNCTION_TABLE[330] = std____2__enable_if___28is_array_maxiFlanger___value_29_2c_20std____2__shared_ptr_maxiFlanger__20___type_20std____2__make_shared_maxiFlanger__28_29;
 FUNCTION_TABLE[331] = maxiFlanger__flange_28double_2c_20unsigned_20int_2c_20double_2c_20double_2c_20double_29;
 FUNCTION_TABLE[332] = void_20const__20emscripten__internal__getActualType_maxiChorus__28maxiChorus__29;
 FUNCTION_TABLE[333] = void_20emscripten__internal__raw_destructor_vectorTools__28vectorTools__29;
 FUNCTION_TABLE[334] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___get_28std____2__shared_ptr_maxiOsc__20const__29;
 FUNCTION_TABLE[335] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___construct_null_28_29;
 FUNCTION_TABLE[336] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiChorus__20___share_28maxiChorus__2c_20emscripten__internal___EM_VAL__29;
 FUNCTION_TABLE[337] = void_20emscripten__internal__raw_destructor_std____2__shared_ptr_maxiOsc__20__28std____2__shared_ptr_maxiOsc___29;
 FUNCTION_TABLE[338] = emscripten__internal__Invoker_std____2__shared_ptr_maxiChorus__20___invoke_28std____2__shared_ptr_maxiChorus__20_28__29_28_29_29;
 FUNCTION_TABLE[339] = std____2__enable_if___28is_array_maxiChorus___value_29_2c_20std____2__shared_ptr_maxiChorus__20___type_20std____2__make_shared_maxiChorus__28_29;
 FUNCTION_TABLE[340] = maxiChorus__chorus_28double_2c_20unsigned_20int_2c_20double_2c_20double_2c_20double_29;
 FUNCTION_TABLE[341] = void_20const__20emscripten__internal__getActualType_maxiDCBlocker__28maxiDCBlocker__29;
 FUNCTION_TABLE[342] = void_20emscripten__internal__raw_destructor_vectorTools__28vectorTools__29;
 FUNCTION_TABLE[343] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___get_28std____2__shared_ptr_maxiOsc__20const__29;
 FUNCTION_TABLE[344] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___construct_null_28_29;
 FUNCTION_TABLE[345] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiDCBlocker__20___share_28maxiDCBlocker__2c_20emscripten__internal___EM_VAL__29;
 FUNCTION_TABLE[346] = void_20emscripten__internal__raw_destructor_std____2__shared_ptr_maxiOsc__20__28std____2__shared_ptr_maxiOsc___29;
 FUNCTION_TABLE[347] = emscripten__internal__Invoker_std____2__shared_ptr_maxiDCBlocker__20___invoke_28std____2__shared_ptr_maxiDCBlocker__20_28__29_28_29_29;
 FUNCTION_TABLE[348] = std____2__enable_if___28is_array_maxiDCBlocker___value_29_2c_20std____2__shared_ptr_maxiDCBlocker__20___type_20std____2__make_shared_maxiDCBlocker__28_29;
 FUNCTION_TABLE[349] = maxiDCBlocker__play_28double_2c_20double_29;
 FUNCTION_TABLE[350] = void_20const__20emscripten__internal__getActualType_maxiSVF__28maxiSVF__29;
 FUNCTION_TABLE[351] = void_20emscripten__internal__raw_destructor_vectorTools__28vectorTools__29;
 FUNCTION_TABLE[352] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___get_28std____2__shared_ptr_maxiOsc__20const__29;
 FUNCTION_TABLE[353] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___construct_null_28_29;
 FUNCTION_TABLE[354] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiSVF__20___share_28maxiSVF__2c_20emscripten__internal___EM_VAL__29;
 FUNCTION_TABLE[355] = void_20emscripten__internal__raw_destructor_std____2__shared_ptr_maxiOsc__20__28std____2__shared_ptr_maxiOsc___29;
 FUNCTION_TABLE[356] = emscripten__internal__Invoker_std____2__shared_ptr_maxiSVF__20___invoke_28std____2__shared_ptr_maxiSVF__20_28__29_28_29_29;
 FUNCTION_TABLE[357] = std____2__enable_if___28is_array_maxiSVF___value_29_2c_20std____2__shared_ptr_maxiSVF__20___type_20std____2__make_shared_maxiSVF__28_29;
 FUNCTION_TABLE[358] = maxiSVF__setCutoff_28double_29;
 FUNCTION_TABLE[359] = maxiSVF__setResonance_28double_29;
 FUNCTION_TABLE[360] = maxiSVF__play_28double_2c_20double_2c_20double_2c_20double_2c_20double_29;
 FUNCTION_TABLE[361] = void_20const__20emscripten__internal__getActualType_maxiMath__28maxiMath__29;
 FUNCTION_TABLE[362] = void_20emscripten__internal__raw_destructor_vectorTools__28vectorTools__29;
 FUNCTION_TABLE[363] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___get_28std____2__shared_ptr_maxiOsc__20const__29;
 FUNCTION_TABLE[364] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___construct_null_28_29;
 FUNCTION_TABLE[365] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiMath__20___share_28maxiMath__2c_20emscripten__internal___EM_VAL__29;
 FUNCTION_TABLE[366] = void_20emscripten__internal__raw_destructor_std____2__shared_ptr_maxiOsc__20__28std____2__shared_ptr_maxiOsc___29;
 FUNCTION_TABLE[367] = emscripten__internal__Invoker_std____2__shared_ptr_maxiMath__20___invoke_28std____2__shared_ptr_maxiMath__20_28__29_28_29_29;
 FUNCTION_TABLE[368] = std____2__enable_if___28is_array_maxiMath___value_29_2c_20std____2__shared_ptr_maxiMath__20___type_20std____2__make_shared_maxiMath__28_29;
 FUNCTION_TABLE[369] = emscripten__internal__Invoker_double_2c_20double_2c_20double___invoke_28double_20_28__29_28double_2c_20double_29_2c_20double_2c_20double_29;
 FUNCTION_TABLE[370] = maxiMath__add_28double_2c_20double_29;
 FUNCTION_TABLE[371] = maxiMath__sub_28double_2c_20double_29;
 FUNCTION_TABLE[372] = maxiMath__mul_28double_2c_20double_29;
 FUNCTION_TABLE[373] = maxiMath__div_28double_2c_20double_29;
 FUNCTION_TABLE[374] = maxiMath__gt_28double_2c_20double_29;
 FUNCTION_TABLE[375] = maxiMath__lt_28double_2c_20double_29;
 FUNCTION_TABLE[376] = maxiMath__gte_28double_2c_20double_29;
 FUNCTION_TABLE[377] = maxiMath__lte_28double_2c_20double_29;
 FUNCTION_TABLE[378] = maxiMath__mod_28double_2c_20double_29;
 FUNCTION_TABLE[379] = abs_28double_29;
 FUNCTION_TABLE[380] = maxiMath__xpowy_28double_2c_20double_29;
 FUNCTION_TABLE[381] = void_20const__20emscripten__internal__getActualType_maxiClock__28maxiClock__29;
 FUNCTION_TABLE[382] = void_20emscripten__internal__raw_destructor_vectorTools__28vectorTools__29;
 FUNCTION_TABLE[383] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___get_28std____2__shared_ptr_maxiOsc__20const__29;
 FUNCTION_TABLE[384] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___construct_null_28_29;
 FUNCTION_TABLE[385] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiClock__20___share_28maxiClock__2c_20emscripten__internal___EM_VAL__29;
 FUNCTION_TABLE[386] = void_20emscripten__internal__raw_destructor_std____2__shared_ptr_maxiOsc__20__28std____2__shared_ptr_maxiOsc___29;
 FUNCTION_TABLE[387] = emscripten__internal__Invoker_std____2__shared_ptr_maxiClock__20___invoke_28std____2__shared_ptr_maxiClock__20_28__29_28_29_29;
 FUNCTION_TABLE[388] = std____2__enable_if___28is_array_maxiClock___value_29_2c_20std____2__shared_ptr_maxiClock__20___type_20std____2__make_shared_maxiClock__28_29;
 FUNCTION_TABLE[389] = maxiClock__ticker_28_29;
 FUNCTION_TABLE[390] = maxiClock__setTempo_28double_29;
 FUNCTION_TABLE[391] = maxiClock__setTicksPerBeat_28int_29;
 FUNCTION_TABLE[392] = maxiClock__isTick_28_29_20const;
 FUNCTION_TABLE[393] = maxiClock__getCurrentCount_28_29_20const;
 FUNCTION_TABLE[394] = maxiClock__setCurrentCount_28int_29;
 FUNCTION_TABLE[395] = int_20emscripten__internal__GetterPolicy_int_20_28maxiSettings____29_28_29_20const___get_maxiSettings__28int_20_28maxiSettings____20const__29_28_29_20const_2c_20maxiSettings_20const__29;
 FUNCTION_TABLE[396] = void_20emscripten__internal__SetterPolicy_void_20_28maxiSettings____29_28int_29___set_maxiSettings__28void_20_28maxiSettings____20const__29_28int_29_2c_20maxiSettings__2c_20int_29;
 FUNCTION_TABLE[397] = maxiClock__getLastCount_28_29_20const;
 FUNCTION_TABLE[398] = maxiClock__setLastCount_28int_29;
 FUNCTION_TABLE[399] = maxiEnv__getTrigger_28_29_20const;
 FUNCTION_TABLE[400] = maxiEnv__setTrigger_28int_29;
 FUNCTION_TABLE[401] = maxiClock__getBps_28_29_20const;
 FUNCTION_TABLE[402] = maxiClock__setBps_28int_29;
 FUNCTION_TABLE[403] = double_20emscripten__internal__GetterPolicy_double_20_28maxiEnvelope____29_28_29_20const___get_maxiEnvelope__28double_20_28maxiEnvelope____20const__29_28_29_20const_2c_20maxiEnvelope_20const__29;
 FUNCTION_TABLE[404] = maxiClock__getBpm_28_29_20const;
 FUNCTION_TABLE[405] = maxiClock__setBpm_28int_29;
 FUNCTION_TABLE[406] = maxiClock__isTick_28_29_20const;
 FUNCTION_TABLE[407] = maxiClock__setTick_28int_29;
 FUNCTION_TABLE[408] = bool_20emscripten__internal__GetterPolicy_bool_20_28maxiClock____29_28_29_20const___get_maxiClock__28bool_20_28maxiClock____20const__29_28_29_20const_2c_20maxiClock_20const__29;
 FUNCTION_TABLE[409] = maxiClock__getTicks_28_29_20const;
 FUNCTION_TABLE[410] = maxiClock__setTicks_28int_29;
 FUNCTION_TABLE[411] = void_20const__20emscripten__internal__getActualType_maxiKuramotoOscillator__28maxiKuramotoOscillator__29;
 FUNCTION_TABLE[412] = void_20emscripten__internal__raw_destructor_vectorTools__28vectorTools__29;
 FUNCTION_TABLE[413] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___get_28std____2__shared_ptr_maxiOsc__20const__29;
 FUNCTION_TABLE[414] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___construct_null_28_29;
 FUNCTION_TABLE[415] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiKuramotoOscillator__20___share_28maxiKuramotoOscillator__2c_20emscripten__internal___EM_VAL__29;
 FUNCTION_TABLE[416] = void_20emscripten__internal__raw_destructor_std____2__shared_ptr_maxiOsc__20__28std____2__shared_ptr_maxiOsc___29;
 FUNCTION_TABLE[417] = emscripten__internal__Invoker_std____2__shared_ptr_maxiKuramotoOscillator__20___invoke_28std____2__shared_ptr_maxiKuramotoOscillator__20_28__29_28_29_29;
 FUNCTION_TABLE[418] = std____2__enable_if___28is_array_maxiKuramotoOscillator___value_29_2c_20std____2__shared_ptr_maxiKuramotoOscillator__20___type_20std____2__make_shared_maxiKuramotoOscillator__28_29;
 FUNCTION_TABLE[419] = maxiKuramotoOscillator__play_28double_2c_20double_2c_20std____2__vector_double_2c_20std____2__allocator_double__20__29;
 FUNCTION_TABLE[420] = maxiLagExp_double___setAlpha_28double_29;
 FUNCTION_TABLE[421] = maxiLagExp_double___getAlpha_28_29_20const;
 FUNCTION_TABLE[422] = void_20const__20emscripten__internal__getActualType_maxiKuramotoOscillatorSet__28maxiKuramotoOscillatorSet__29;
 FUNCTION_TABLE[423] = void_20emscripten__internal__raw_destructor_maxiKuramotoOscillatorSet__28maxiKuramotoOscillatorSet__29;
 FUNCTION_TABLE[424] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___get_28std____2__shared_ptr_maxiOsc__20const__29;
 FUNCTION_TABLE[425] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___construct_null_28_29;
 FUNCTION_TABLE[426] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiKuramotoOscillatorSet__20___share_28maxiKuramotoOscillatorSet__2c_20emscripten__internal___EM_VAL__29;
 FUNCTION_TABLE[427] = void_20emscripten__internal__raw_destructor_std____2__shared_ptr_maxiOsc__20__28std____2__shared_ptr_maxiOsc___29;
 FUNCTION_TABLE[428] = emscripten__internal__Invoker_std____2__shared_ptr_maxiKuramotoOscillatorSet__2c_20unsigned_20long_20const_____invoke_28std____2__shared_ptr_maxiKuramotoOscillatorSet__20_28__29_28unsigned_20long_20const___29_2c_20unsigned_20long_29;
 FUNCTION_TABLE[429] = std____2__enable_if___28is_array_maxiKuramotoOscillatorSet___value_29_2c_20std____2__shared_ptr_maxiKuramotoOscillatorSet__20___type_20std____2__make_shared_maxiKuramotoOscillatorSet_2c_20unsigned_20long_20const__28unsigned_20long_20const___29;
 FUNCTION_TABLE[430] = maxiKuramotoOscillatorSet__play_28double_2c_20double_29;
 FUNCTION_TABLE[431] = maxiKuramotoOscillatorSet__setPhase_28double_2c_20unsigned_20long_29;
 FUNCTION_TABLE[432] = maxiKuramotoOscillatorSet__setPhases_28std____2__vector_double_2c_20std____2__allocator_double__20__20const__29;
 FUNCTION_TABLE[433] = maxiKuramotoOscillatorSet__getPhase_28unsigned_20long_29;
 FUNCTION_TABLE[434] = maxiKuramotoOscillatorSet__size_28_29;
 FUNCTION_TABLE[435] = void_20const__20emscripten__internal__getActualType_maxiAsyncKuramotoOscillator__28maxiAsyncKuramotoOscillator__29;
 FUNCTION_TABLE[436] = void_20emscripten__internal__raw_destructor_maxiAsyncKuramotoOscillator__28maxiAsyncKuramotoOscillator__29;
 FUNCTION_TABLE[437] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___get_28std____2__shared_ptr_maxiOsc__20const__29;
 FUNCTION_TABLE[438] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___construct_null_28_29;
 FUNCTION_TABLE[439] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiAsyncKuramotoOscillator__20___share_28maxiAsyncKuramotoOscillator__2c_20emscripten__internal___EM_VAL__29;
 FUNCTION_TABLE[440] = void_20emscripten__internal__raw_destructor_std____2__shared_ptr_maxiOsc__20__28std____2__shared_ptr_maxiOsc___29;
 FUNCTION_TABLE[441] = emscripten__internal__Invoker_std____2__shared_ptr_maxiAsyncKuramotoOscillator__2c_20unsigned_20long_20const_____invoke_28std____2__shared_ptr_maxiAsyncKuramotoOscillator__20_28__29_28unsigned_20long_20const___29_2c_20unsigned_20long_29;
 FUNCTION_TABLE[442] = std____2__enable_if___28is_array_maxiAsyncKuramotoOscillator___value_29_2c_20std____2__shared_ptr_maxiAsyncKuramotoOscillator__20___type_20std____2__make_shared_maxiAsyncKuramotoOscillator_2c_20unsigned_20long_20const__28unsigned_20long_20const___29;
 FUNCTION_TABLE[443] = maxiAsyncKuramotoOscillator__play_28double_2c_20double_29;
 FUNCTION_TABLE[444] = maxiAsyncKuramotoOscillator__setPhase_28double_2c_20unsigned_20long_29;
 FUNCTION_TABLE[445] = maxiAsyncKuramotoOscillator__setPhases_28std____2__vector_double_2c_20std____2__allocator_double__20__20const__29;
 FUNCTION_TABLE[446] = maxiAsyncKuramotoOscillator__getPhase_28unsigned_20long_29;
 FUNCTION_TABLE[447] = maxiKuramotoOscillatorSet__size_28_29;
 FUNCTION_TABLE[448] = void_20const__20emscripten__internal__getActualType_maxiFFT__28maxiFFT__29;
 FUNCTION_TABLE[449] = void_20emscripten__internal__raw_destructor_maxiFFT__28maxiFFT__29;
 FUNCTION_TABLE[450] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___get_28std____2__shared_ptr_maxiOsc__20const__29;
 FUNCTION_TABLE[451] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___construct_null_28_29;
 FUNCTION_TABLE[452] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiFFT__20___share_28maxiFFT__2c_20emscripten__internal___EM_VAL__29;
 FUNCTION_TABLE[453] = void_20emscripten__internal__raw_destructor_std____2__shared_ptr_maxiOsc__20__28std____2__shared_ptr_maxiOsc___29;
 FUNCTION_TABLE[454] = emscripten__internal__Invoker_std____2__shared_ptr_maxiFFT__20___invoke_28std____2__shared_ptr_maxiFFT__20_28__29_28_29_29;
 FUNCTION_TABLE[455] = std____2__enable_if___28is_array_maxiFFT___value_29_2c_20std____2__shared_ptr_maxiFFT__20___type_20std____2__make_shared_maxiFFT__28_29;
 FUNCTION_TABLE[456] = maxiFFT__setup_28int_2c_20int_2c_20int_29;
 FUNCTION_TABLE[457] = maxiFFT__process_28float_2c_20maxiFFT__fftModes_29;
 FUNCTION_TABLE[458] = maxiFFT__spectralFlatness_28_29;
 FUNCTION_TABLE[459] = maxiFFT__spectralCentroid_28_29;
 FUNCTION_TABLE[460] = unsigned_20char__20std____2____to_raw_pointer_unsigned_20char__28unsigned_20char__29;
 FUNCTION_TABLE[461] = maxiFFT__getMagnitudesDB_28_29;
 FUNCTION_TABLE[462] = std____2____split_buffer_double_2c_20std____2__allocator_double_______end_cap_28_29;
 FUNCTION_TABLE[463] = maxiFFT__getNumBins_28_29;
 FUNCTION_TABLE[464] = maxiFFT__getFFTSize_28_29;
 FUNCTION_TABLE[465] = maxiFFT__getHopSize_28_29;
 FUNCTION_TABLE[466] = maxiFFT__getWindowSize_28_29;
 FUNCTION_TABLE[467] = void_20const__20emscripten__internal__getActualType_maxiIFFT__28maxiIFFT__29;
 FUNCTION_TABLE[468] = void_20emscripten__internal__raw_destructor_maxiIFFT__28maxiIFFT__29;
 FUNCTION_TABLE[469] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___get_28std____2__shared_ptr_maxiOsc__20const__29;
 FUNCTION_TABLE[470] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___construct_null_28_29;
 FUNCTION_TABLE[471] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiIFFT__20___share_28maxiIFFT__2c_20emscripten__internal___EM_VAL__29;
 FUNCTION_TABLE[472] = void_20emscripten__internal__raw_destructor_std____2__shared_ptr_maxiOsc__20__28std____2__shared_ptr_maxiOsc___29;
 FUNCTION_TABLE[473] = emscripten__internal__Invoker_std____2__shared_ptr_maxiIFFT__20___invoke_28std____2__shared_ptr_maxiIFFT__20_28__29_28_29_29;
 FUNCTION_TABLE[474] = std____2__enable_if___28is_array_maxiIFFT___value_29_2c_20std____2__shared_ptr_maxiIFFT__20___type_20std____2__make_shared_maxiIFFT__28_29;
 FUNCTION_TABLE[475] = maxiIFFT__setup_28int_2c_20int_2c_20int_29;
 FUNCTION_TABLE[476] = maxiIFFT__process_28std____2__vector_float_2c_20std____2__allocator_float__20___2c_20std____2__vector_float_2c_20std____2__allocator_float__20___2c_20maxiIFFT__fftModes_29;
 FUNCTION_TABLE[477] = void_20const__20emscripten__internal__getActualType_maxiMFCCAnalyser_double__20__28maxiMFCCAnalyser_double___29;
 FUNCTION_TABLE[478] = void_20emscripten__internal__raw_destructor_maxiMFCCAnalyser_double__20__28maxiMFCCAnalyser_double___29;
 FUNCTION_TABLE[479] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___get_28std____2__shared_ptr_maxiOsc__20const__29;
 FUNCTION_TABLE[480] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___construct_null_28_29;
 FUNCTION_TABLE[481] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiMFCCAnalyser_double__20__20___share_28maxiMFCCAnalyser_double___2c_20emscripten__internal___EM_VAL__29;
 FUNCTION_TABLE[482] = void_20emscripten__internal__raw_destructor_std____2__shared_ptr_maxiOsc__20__28std____2__shared_ptr_maxiOsc___29;
 FUNCTION_TABLE[483] = emscripten__internal__Invoker_std____2__shared_ptr_maxiMFCCAnalyser_double__20__20___invoke_28std____2__shared_ptr_maxiMFCCAnalyser_double__20__20_28__29_28_29_29;
 FUNCTION_TABLE[484] = std____2__enable_if___28is_array_maxiMFCCAnalyser_double__20___value_29_2c_20std____2__shared_ptr_maxiMFCCAnalyser_double__20__20___type_20std____2__make_shared_maxiMFCCAnalyser_double__20__28_29;
 FUNCTION_TABLE[485] = maxiMFCCAnalyser_double___setup_28unsigned_20int_2c_20unsigned_20int_2c_20unsigned_20int_2c_20double_2c_20double_29;
 FUNCTION_TABLE[486] = maxiMFCCAnalyser_double___mfcc_28std____2__vector_float_2c_20std____2__allocator_float__20___29;
 FUNCTION_TABLE[487] = void_20const__20emscripten__internal__getActualType_std____2__vector_int_2c_20std____2__allocator_int__20__20__28std____2__vector_int_2c_20std____2__allocator_int__20___29;
 FUNCTION_TABLE[488] = void_20emscripten__internal__raw_destructor_std____2__vector_int_2c_20std____2__allocator_int__20__20__28std____2__vector_int_2c_20std____2__allocator_int__20___29;
 FUNCTION_TABLE[489] = std____2__vector_int_2c_20std____2__allocator_int__20___20emscripten__internal__operator_new_std____2__vector_int_2c_20std____2__allocator_int__20__20__28_29;
 FUNCTION_TABLE[490] = std____2__vector_int_2c_20std____2__allocator_int__20___push_back_28int_20const__29;
 FUNCTION_TABLE[491] = std____2__vector_int_2c_20std____2__allocator_int__20___resize_28unsigned_20long_2c_20int_20const__29;
 FUNCTION_TABLE[492] = std____2__vector_int_2c_20std____2__allocator_int__20___size_28_29_20const;
 FUNCTION_TABLE[493] = emscripten__internal__VectorAccess_std____2__vector_int_2c_20std____2__allocator_int__20__20___get_28std____2__vector_int_2c_20std____2__allocator_int__20__20const__2c_20unsigned_20long_29;
 FUNCTION_TABLE[494] = emscripten__internal__VectorAccess_std____2__vector_int_2c_20std____2__allocator_int__20__20___set_28std____2__vector_int_2c_20std____2__allocator_int__20___2c_20unsigned_20long_2c_20int_20const__29;
 FUNCTION_TABLE[495] = void_20const__20emscripten__internal__getActualType_std____2__vector_double_2c_20std____2__allocator_double__20__20__28std____2__vector_double_2c_20std____2__allocator_double__20___29;
 FUNCTION_TABLE[496] = void_20emscripten__internal__raw_destructor_std____2__vector_double_2c_20std____2__allocator_double__20__20__28std____2__vector_double_2c_20std____2__allocator_double__20___29;
 FUNCTION_TABLE[497] = std____2__vector_int_2c_20std____2__allocator_int__20___20emscripten__internal__operator_new_std____2__vector_int_2c_20std____2__allocator_int__20__20__28_29;
 FUNCTION_TABLE[498] = std____2__vector_double_2c_20std____2__allocator_double__20___push_back_28double_20const__29;
 FUNCTION_TABLE[499] = std____2__vector_double_2c_20std____2__allocator_double__20___resize_28unsigned_20long_2c_20double_20const__29;
 FUNCTION_TABLE[500] = std____2__vector_double_2c_20std____2__allocator_double__20___size_28_29_20const;
 FUNCTION_TABLE[501] = emscripten__internal__VectorAccess_std____2__vector_double_2c_20std____2__allocator_double__20__20___get_28std____2__vector_double_2c_20std____2__allocator_double__20__20const__2c_20unsigned_20long_29;
 FUNCTION_TABLE[502] = emscripten__internal__VectorAccess_std____2__vector_double_2c_20std____2__allocator_double__20__20___set_28std____2__vector_double_2c_20std____2__allocator_double__20___2c_20unsigned_20long_2c_20double_20const__29;
 FUNCTION_TABLE[503] = void_20const__20emscripten__internal__getActualType_std____2__vector_char_2c_20std____2__allocator_char__20__20__28std____2__vector_char_2c_20std____2__allocator_char__20___29;
 FUNCTION_TABLE[504] = void_20emscripten__internal__raw_destructor_std____2__vector_char_2c_20std____2__allocator_char__20__20__28std____2__vector_char_2c_20std____2__allocator_char__20___29;
 FUNCTION_TABLE[505] = std____2__vector_int_2c_20std____2__allocator_int__20___20emscripten__internal__operator_new_std____2__vector_int_2c_20std____2__allocator_int__20__20__28_29;
 FUNCTION_TABLE[506] = std____2__vector_char_2c_20std____2__allocator_char__20___push_back_28char_20const__29;
 FUNCTION_TABLE[507] = std____2__vector_char_2c_20std____2__allocator_char__20___resize_28unsigned_20long_2c_20char_20const__29;
 FUNCTION_TABLE[508] = std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20___size_28_29_20const;
 FUNCTION_TABLE[509] = emscripten__internal__VectorAccess_std____2__vector_char_2c_20std____2__allocator_char__20__20___get_28std____2__vector_char_2c_20std____2__allocator_char__20__20const__2c_20unsigned_20long_29;
 FUNCTION_TABLE[510] = emscripten__internal__VectorAccess_std____2__vector_char_2c_20std____2__allocator_char__20__20___set_28std____2__vector_char_2c_20std____2__allocator_char__20___2c_20unsigned_20long_2c_20char_20const__29;
 FUNCTION_TABLE[511] = void_20const__20emscripten__internal__getActualType_std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20__20__28std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20___29;
 FUNCTION_TABLE[512] = void_20emscripten__internal__raw_destructor_std____2__vector_char_2c_20std____2__allocator_char__20__20__28std____2__vector_char_2c_20std____2__allocator_char__20___29;
 FUNCTION_TABLE[513] = std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20___20emscripten__internal__operator_new_std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20__20__28_29;
 FUNCTION_TABLE[514] = std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20___push_back_28unsigned_20char_20const__29;
 FUNCTION_TABLE[515] = std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20___resize_28unsigned_20long_2c_20unsigned_20char_20const__29;
 FUNCTION_TABLE[516] = std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20___size_28_29_20const;
 FUNCTION_TABLE[517] = emscripten__internal__VectorAccess_std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20__20___get_28std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20__20const__2c_20unsigned_20long_29;
 FUNCTION_TABLE[518] = emscripten__internal__VectorAccess_std____2__vector_char_2c_20std____2__allocator_char__20__20___set_28std____2__vector_char_2c_20std____2__allocator_char__20___2c_20unsigned_20long_2c_20char_20const__29;
 FUNCTION_TABLE[519] = void_20const__20emscripten__internal__getActualType_std____2__vector_float_2c_20std____2__allocator_float__20__20__28std____2__vector_float_2c_20std____2__allocator_float__20___29;
 FUNCTION_TABLE[520] = void_20emscripten__internal__raw_destructor_std____2__vector_float_2c_20std____2__allocator_float__20__20__28std____2__vector_float_2c_20std____2__allocator_float__20___29;
 FUNCTION_TABLE[521] = std____2__vector_int_2c_20std____2__allocator_int__20___20emscripten__internal__operator_new_std____2__vector_int_2c_20std____2__allocator_int__20__20__28_29;
 FUNCTION_TABLE[522] = std____2__vector_float_2c_20std____2__allocator_float__20___push_back_28float_20const__29;
 FUNCTION_TABLE[523] = std____2__vector_float_2c_20std____2__allocator_float__20___resize_28unsigned_20long_2c_20float_20const__29;
 FUNCTION_TABLE[524] = std____2__vector_int_2c_20std____2__allocator_int__20___size_28_29_20const;
 FUNCTION_TABLE[525] = emscripten__internal__VectorAccess_std____2__vector_float_2c_20std____2__allocator_float__20__20___get_28std____2__vector_float_2c_20std____2__allocator_float__20__20const__2c_20unsigned_20long_29;
 FUNCTION_TABLE[526] = emscripten__internal__VectorAccess_std____2__vector_int_2c_20std____2__allocator_int__20__20___set_28std____2__vector_int_2c_20std____2__allocator_int__20___2c_20unsigned_20long_2c_20int_20const__29;
 FUNCTION_TABLE[527] = emscripten__internal__Invoker_std____2__vector_int_2c_20std____2__allocator_int__20_____invoke_28std____2__vector_int_2c_20std____2__allocator_int__20___20_28__29_28_29_29;
 FUNCTION_TABLE[528] = emscripten__internal__Invoker_std____2__vector_int_2c_20std____2__allocator_int__20_____invoke_28std____2__vector_int_2c_20std____2__allocator_int__20___20_28__29_28_29_29;
 FUNCTION_TABLE[529] = emscripten__val__take_ownership_28emscripten__internal___EM_VAL__29;
 FUNCTION_TABLE[530] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__val_deleter_28emscripten__val_29;
 FUNCTION_TABLE[531] = std____2__shared_ptr_maxiOsc___shared_ptr_maxiOsc_2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__28maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_2c_20std____2__enable_if_is_convertible_maxiOsc__2c_20maxiOsc____value_2c_20std____2__shared_ptr_maxiOsc_____nat___type_29;
 FUNCTION_TABLE[532] = emscripten__internal__GenericBindingType_std____2__shared_ptr_maxiOsc__20___toWireType_28std____2__shared_ptr_maxiOsc____29;
 FUNCTION_TABLE[533] = emscripten__internal__MethodInvoker_double_20_28maxiOsc____29_28double_29_2c_20double_2c_20maxiOsc__2c_20double___invoke_28double_20_28maxiOsc____20const__29_28double_29_2c_20maxiOsc__2c_20double_29;
 FUNCTION_TABLE[534] = emscripten__internal__MethodInvoker_double_20_28maxiOsc____29_28double_2c_20double_2c_20double_29_2c_20double_2c_20maxiOsc__2c_20double_2c_20double_2c_20double___invoke_28double_20_28maxiOsc____20const__29_28double_2c_20double_2c_20double_29_2c_20maxiOsc__2c_20double_2c_20double_2c_20double_29;
 FUNCTION_TABLE[535] = emscripten__internal__MethodInvoker_double_20_28maxiOsc____29_28double_2c_20double_29_2c_20double_2c_20maxiOsc__2c_20double_2c_20double___invoke_28double_20_28maxiOsc____20const__29_28double_2c_20double_29_2c_20maxiOsc__2c_20double_2c_20double_29;
 FUNCTION_TABLE[536] = emscripten__internal__MethodInvoker_double_20_28maxiOsc____29_28_29_2c_20double_2c_20maxiOsc____invoke_28double_20_28maxiOsc____20const__29_28_29_2c_20maxiOsc__29;
 FUNCTION_TABLE[537] = void_20emscripten__internal__SetterPolicy_void_20_28maxiEnvelope____29_28double_29___set_maxiEnvelope__28void_20_28maxiEnvelope____20const__29_28double_29_2c_20maxiEnvelope__2c_20double_29;
 FUNCTION_TABLE[538] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__val_deleter_28emscripten__val_29;
 FUNCTION_TABLE[539] = std____2__shared_ptr_maxiEnvelope___shared_ptr_maxiEnvelope_2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiEnvelope__20___val_deleter__28maxiEnvelope__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiEnvelope__20___val_deleter_2c_20std____2__enable_if_is_convertible_maxiEnvelope__2c_20maxiEnvelope____value_2c_20std____2__shared_ptr_maxiEnvelope_____nat___type_29;
 FUNCTION_TABLE[540] = emscripten__internal__GenericBindingType_std____2__shared_ptr_maxiOsc__20___toWireType_28std____2__shared_ptr_maxiOsc____29;
 FUNCTION_TABLE[541] = emscripten__internal__MethodInvoker_double_20_28maxiEnvelope____29_28int_2c_20std____2__vector_double_2c_20std____2__allocator_double__20___29_2c_20double_2c_20maxiEnvelope__2c_20int_2c_20std____2__vector_double_2c_20std____2__allocator_double__20_____invoke_28double_20_28maxiEnvelope____20const__29_28int_2c_20std____2__vector_double_2c_20std____2__allocator_double__20___29_2c_20maxiEnvelope__2c_20int_2c_20std____2__vector_double_2c_20std____2__allocator_double__20___29;
 FUNCTION_TABLE[542] = emscripten__internal__MethodInvoker_void_20_28maxiEnvelope____29_28int_2c_20double_29_2c_20void_2c_20maxiEnvelope__2c_20int_2c_20double___invoke_28void_20_28maxiEnvelope____20const__29_28int_2c_20double_29_2c_20maxiEnvelope__2c_20int_2c_20double_29;
 FUNCTION_TABLE[543] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__val_deleter_28emscripten__val_29;
 FUNCTION_TABLE[544] = std____2__shared_ptr_maxiDelayline___shared_ptr_maxiDelayline_2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiDelayline__20___val_deleter__28maxiDelayline__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiDelayline__20___val_deleter_2c_20std____2__enable_if_is_convertible_maxiDelayline__2c_20maxiDelayline____value_2c_20std____2__shared_ptr_maxiDelayline_____nat___type_29;
 FUNCTION_TABLE[545] = emscripten__internal__GenericBindingType_std____2__shared_ptr_maxiOsc__20___toWireType_28std____2__shared_ptr_maxiOsc____29;
 FUNCTION_TABLE[546] = emscripten__internal__MethodInvoker_double_20_28maxiDelayline____29_28double_2c_20int_2c_20double_29_2c_20double_2c_20maxiDelayline__2c_20double_2c_20int_2c_20double___invoke_28double_20_28maxiDelayline____20const__29_28double_2c_20int_2c_20double_29_2c_20maxiDelayline__2c_20double_2c_20int_2c_20double_29;
 FUNCTION_TABLE[547] = emscripten__internal__MethodInvoker_double_20_28maxiDelayline____29_28double_2c_20int_2c_20double_2c_20int_29_2c_20double_2c_20maxiDelayline__2c_20double_2c_20int_2c_20double_2c_20int___invoke_28double_20_28maxiDelayline____20const__29_28double_2c_20int_2c_20double_2c_20int_29_2c_20maxiDelayline__2c_20double_2c_20int_2c_20double_2c_20int_29;
 FUNCTION_TABLE[548] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__val_deleter_28emscripten__val_29;
 FUNCTION_TABLE[549] = std____2__shared_ptr_maxiFilter___shared_ptr_maxiFilter_2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiFilter__20___val_deleter__28maxiFilter__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiFilter__20___val_deleter_2c_20std____2__enable_if_is_convertible_maxiFilter__2c_20maxiFilter____value_2c_20std____2__shared_ptr_maxiFilter_____nat___type_29;
 FUNCTION_TABLE[550] = emscripten__internal__GenericBindingType_std____2__shared_ptr_maxiOsc__20___toWireType_28std____2__shared_ptr_maxiOsc____29;
 FUNCTION_TABLE[551] = emscripten__internal__MethodInvoker_double_20_28maxiOsc____29_28double_2c_20double_2c_20double_29_2c_20double_2c_20maxiOsc__2c_20double_2c_20double_2c_20double___invoke_28double_20_28maxiOsc____20const__29_28double_2c_20double_2c_20double_29_2c_20maxiOsc__2c_20double_2c_20double_2c_20double_29;
 FUNCTION_TABLE[552] = emscripten__internal__MethodInvoker_double_20_28maxiOsc____29_28double_2c_20double_29_2c_20double_2c_20maxiOsc__2c_20double_2c_20double___invoke_28double_20_28maxiOsc____20const__29_28double_2c_20double_29_2c_20maxiOsc__2c_20double_2c_20double_29;
 FUNCTION_TABLE[553] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__val_deleter_28emscripten__val_29;
 FUNCTION_TABLE[554] = std____2__shared_ptr_maxiMix___shared_ptr_maxiMix_2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiMix__20___val_deleter__28maxiMix__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiMix__20___val_deleter_2c_20std____2__enable_if_is_convertible_maxiMix__2c_20maxiMix____value_2c_20std____2__shared_ptr_maxiMix_____nat___type_29;
 FUNCTION_TABLE[555] = emscripten__internal__GenericBindingType_std____2__shared_ptr_maxiOsc__20___toWireType_28std____2__shared_ptr_maxiOsc____29;
 FUNCTION_TABLE[556] = emscripten__internal__MethodInvoker_void_20_28maxiMix____29_28double_2c_20std____2__vector_double_2c_20std____2__allocator_double__20___2c_20double_29_2c_20void_2c_20maxiMix__2c_20double_2c_20std____2__vector_double_2c_20std____2__allocator_double__20___2c_20double___invoke_28void_20_28maxiMix____20const__29_28double_2c_20std____2__vector_double_2c_20std____2__allocator_double__20___2c_20double_29_2c_20maxiMix__2c_20double_2c_20std____2__vector_double_2c_20std____2__allocator_double__20___2c_20double_29;
 FUNCTION_TABLE[557] = emscripten__internal__MethodInvoker_void_20_28maxiMix____29_28double_2c_20std____2__vector_double_2c_20std____2__allocator_double__20___2c_20double_2c_20double_29_2c_20void_2c_20maxiMix__2c_20double_2c_20std____2__vector_double_2c_20std____2__allocator_double__20___2c_20double_2c_20double___invoke_28void_20_28maxiMix____20const__29_28double_2c_20std____2__vector_double_2c_20std____2__allocator_double__20___2c_20double_2c_20double_29_2c_20maxiMix__2c_20double_2c_20std____2__vector_double_2c_20std____2__allocator_double__20___2c_20double_2c_20double_29;
 FUNCTION_TABLE[558] = emscripten__internal__MethodInvoker_void_20_28maxiMix____29_28double_2c_20std____2__vector_double_2c_20std____2__allocator_double__20___2c_20double_2c_20double_2c_20double_29_2c_20void_2c_20maxiMix__2c_20double_2c_20std____2__vector_double_2c_20std____2__allocator_double__20___2c_20double_2c_20double_2c_20double___invoke_28void_20_28maxiMix____20const__29_28double_2c_20std____2__vector_double_2c_20std____2__allocator_double__20___2c_20double_2c_20double_2c_20double_29_2c_20maxiMix__2c_20double_2c_20std____2__vector_double_2c_20std____2__allocator_double__20___2c_20double_2c_20double_2c_20double_29;
 FUNCTION_TABLE[559] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__val_deleter_28emscripten__val_29;
 FUNCTION_TABLE[560] = std____2__shared_ptr_maxiLine___shared_ptr_maxiLine_2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiLine__20___val_deleter__28maxiLine__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiLine__20___val_deleter_2c_20std____2__enable_if_is_convertible_maxiLine__2c_20maxiLine____value_2c_20std____2__shared_ptr_maxiLine_____nat___type_29;
 FUNCTION_TABLE[561] = emscripten__internal__GenericBindingType_std____2__shared_ptr_maxiOsc__20___toWireType_28std____2__shared_ptr_maxiOsc____29;
 FUNCTION_TABLE[562] = emscripten__internal__MethodInvoker_double_20_28maxiOsc____29_28double_29_2c_20double_2c_20maxiOsc__2c_20double___invoke_28double_20_28maxiOsc____20const__29_28double_29_2c_20maxiOsc__2c_20double_29;
 FUNCTION_TABLE[563] = emscripten__internal__MethodInvoker_void_20_28maxiLine____29_28double_2c_20double_2c_20double_2c_20bool_29_2c_20void_2c_20maxiLine__2c_20double_2c_20double_2c_20double_2c_20bool___invoke_28void_20_28maxiLine____20const__29_28double_2c_20double_2c_20double_2c_20bool_29_2c_20maxiLine__2c_20double_2c_20double_2c_20double_2c_20bool_29;
 FUNCTION_TABLE[564] = void_20emscripten__internal__SetterPolicy_void_20_28maxiEnvelope____29_28double_29___set_maxiEnvelope__28void_20_28maxiEnvelope____20const__29_28double_29_2c_20maxiEnvelope__2c_20double_29;
 FUNCTION_TABLE[565] = emscripten__internal__MethodInvoker_bool_20_28maxiLine____29_28_29_2c_20bool_2c_20maxiLine____invoke_28bool_20_28maxiLine____20const__29_28_29_2c_20maxiLine__29;
 FUNCTION_TABLE[566] = emscripten__internal__GenericBindingType_std____2__vector_double_2c_20std____2__allocator_double__20__20___toWireType_28std____2__vector_double_2c_20std____2__allocator_double__20____29;
 FUNCTION_TABLE[567] = std____2__vector_double_2c_20std____2__allocator_double__20___vector_28std__initializer_list_double__29;
 FUNCTION_TABLE[568] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__val_deleter_28emscripten__val_29;
 FUNCTION_TABLE[569] = std____2__shared_ptr_maxiLagExp_double__20___shared_ptr_maxiLagExp_double__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiLagExp_double__20__20___val_deleter__28maxiLagExp_double___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiLagExp_double__20__20___val_deleter_2c_20std____2__enable_if_is_convertible_maxiLagExp_double___2c_20maxiLagExp_double_____value_2c_20std____2__shared_ptr_maxiLagExp_double__20_____nat___type_29;
 FUNCTION_TABLE[570] = emscripten__internal__GenericBindingType_std____2__shared_ptr_maxiOsc__20___toWireType_28std____2__shared_ptr_maxiOsc____29;
 FUNCTION_TABLE[571] = emscripten__internal__MethodInvoker_void_20_28maxiLagExp_double_____29_28double_2c_20double_29_2c_20void_2c_20maxiLagExp_double___2c_20double_2c_20double___invoke_28void_20_28maxiLagExp_double_____20const__29_28double_2c_20double_29_2c_20maxiLagExp_double___2c_20double_2c_20double_29;
 FUNCTION_TABLE[572] = void_20emscripten__internal__SetterPolicy_void_20_28maxiEnvelope____29_28double_29___set_maxiEnvelope__28void_20_28maxiEnvelope____20const__29_28double_29_2c_20maxiEnvelope__2c_20double_29;
 FUNCTION_TABLE[573] = emscripten__internal__MethodInvoker_double_20_28maxiOsc____29_28_29_2c_20double_2c_20maxiOsc____invoke_28double_20_28maxiOsc____20const__29_28_29_2c_20maxiOsc__29;
 FUNCTION_TABLE[574] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__val_deleter_28emscripten__val_29;
 FUNCTION_TABLE[575] = std____2__shared_ptr_maxiSample___shared_ptr_maxiSample_2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiSample__20___val_deleter__28maxiSample__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiSample__20___val_deleter_2c_20std____2__enable_if_is_convertible_maxiSample__2c_20maxiSample____value_2c_20std____2__shared_ptr_maxiSample_____nat___type_29;
 FUNCTION_TABLE[576] = emscripten__internal__GenericBindingType_std____2__shared_ptr_maxiOsc__20___toWireType_28std____2__shared_ptr_maxiOsc____29;
 FUNCTION_TABLE[577] = emscripten__internal__MethodInvoker_unsigned_20long_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28_29_20const_2c_20unsigned_20long_2c_20std____2__vector_int_2c_20std____2__allocator_int__20__20const____invoke_28unsigned_20long_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28_29_20const_2c_20std____2__vector_int_2c_20std____2__allocator_int__20__20const__29;
 FUNCTION_TABLE[578] = void_20emscripten__internal__SetterPolicy_void_20_28maxiSettings____29_28int_29___set_maxiSettings__28void_20_28maxiSettings____20const__29_28int_29_2c_20maxiSettings__2c_20int_29;
 FUNCTION_TABLE[579] = emscripten__internal__MethodInvoker_void_20_28maxiSample____29_28std____2__vector_double_2c_20std____2__allocator_double__20___2c_20int_29_2c_20void_2c_20maxiSample__2c_20std____2__vector_double_2c_20std____2__allocator_double__20___2c_20int___invoke_28void_20_28maxiSample____20const__29_28std____2__vector_double_2c_20std____2__allocator_double__20___2c_20int_29_2c_20maxiSample__2c_20std____2__vector_double_2c_20std____2__allocator_double__20___2c_20int_29;
 FUNCTION_TABLE[580] = emscripten__internal__MethodInvoker_int_20_28maxiSample____29_28std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20___2c_20int_29_2c_20int_2c_20maxiSample__2c_20std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20___2c_20int___invoke_28int_20_28maxiSample____20const__29_28std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20___2c_20int_29_2c_20maxiSample__2c_20std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20___2c_20int_29;
 FUNCTION_TABLE[581] = emscripten__internal__MethodInvoker_bool_20_28maxiLine____29_28_29_2c_20bool_2c_20maxiLine____invoke_28bool_20_28maxiLine____20const__29_28_29_2c_20maxiLine__29;
 FUNCTION_TABLE[582] = emscripten__internal__MethodInvoker_double_20_28maxiOsc____29_28_29_2c_20double_2c_20maxiOsc____invoke_28double_20_28maxiOsc____20const__29_28_29_2c_20maxiOsc__29;
 FUNCTION_TABLE[583] = emscripten__internal__MethodInvoker_double_20_28maxiOsc____29_28double_29_2c_20double_2c_20maxiOsc__2c_20double___invoke_28double_20_28maxiOsc____20const__29_28double_29_2c_20maxiOsc__2c_20double_29;
 FUNCTION_TABLE[584] = void_20emscripten__internal__SetterPolicy_void_20_28maxiEnvelope____29_28double_29___set_maxiEnvelope__28void_20_28maxiEnvelope____20const__29_28double_29_2c_20maxiEnvelope__2c_20double_29;
 FUNCTION_TABLE[585] = emscripten__internal__MethodInvoker_double_20_28maxiOsc____29_28double_2c_20double_29_2c_20double_2c_20maxiOsc__2c_20double_2c_20double___invoke_28double_20_28maxiOsc____20const__29_28double_2c_20double_29_2c_20maxiOsc__2c_20double_2c_20double_29;
 FUNCTION_TABLE[586] = emscripten__internal__MethodInvoker_double_20_28maxiOsc____29_28double_2c_20double_2c_20double_29_2c_20double_2c_20maxiOsc__2c_20double_2c_20double_2c_20double___invoke_28double_20_28maxiOsc____20const__29_28double_2c_20double_2c_20double_29_2c_20maxiOsc__2c_20double_2c_20double_2c_20double_29;
 FUNCTION_TABLE[587] = emscripten__internal__MethodInvoker_void_20_28maxiSample____29_28_29_2c_20void_2c_20maxiSample____invoke_28void_20_28maxiSample____20const__29_28_29_2c_20maxiSample__29;
 FUNCTION_TABLE[588] = emscripten__internal__MethodInvoker_void_20_28maxiSample____29_28float_2c_20float_2c_20bool_2c_20bool_29_2c_20void_2c_20maxiSample__2c_20float_2c_20float_2c_20bool_2c_20bool___invoke_28void_20_28maxiSample____20const__29_28float_2c_20float_2c_20bool_2c_20bool_29_2c_20maxiSample__2c_20float_2c_20float_2c_20bool_2c_20bool_29;
 FUNCTION_TABLE[589] = emscripten__internal__MethodInvoker_bool_20_28maxiSample____29_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20int_29_2c_20bool_2c_20maxiSample__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20int___invoke_28bool_20_28maxiSample____20const__29_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20int_29_2c_20maxiSample__2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20void____unnamed___2c_20int_29;
 FUNCTION_TABLE[590] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__val_deleter_28emscripten__val_29;
 FUNCTION_TABLE[591] = std____2__shared_ptr_maxiMap___shared_ptr_maxiMap_2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiMap__20___val_deleter__28maxiMap__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiMap__20___val_deleter_2c_20std____2__enable_if_is_convertible_maxiMap__2c_20maxiMap____value_2c_20std____2__shared_ptr_maxiMap_____nat___type_29;
 FUNCTION_TABLE[592] = emscripten__internal__GenericBindingType_std____2__shared_ptr_maxiOsc__20___toWireType_28std____2__shared_ptr_maxiOsc____29;
 FUNCTION_TABLE[593] = emscripten__internal__FunctionInvoker_double_20_28__29_28double_2c_20double_2c_20double_2c_20double_2c_20double_29_2c_20double_2c_20double_2c_20double_2c_20double_2c_20double_2c_20double___invoke_28double_20_28___29_28double_2c_20double_2c_20double_2c_20double_2c_20double_29_2c_20double_2c_20double_2c_20double_2c_20double_2c_20double_29;
 FUNCTION_TABLE[594] = emscripten__internal__FunctionInvoker_double_20_28__29_28double_2c_20double_2c_20double_29_2c_20double_2c_20double_2c_20double_2c_20double___invoke_28double_20_28___29_28double_2c_20double_2c_20double_29_2c_20double_2c_20double_2c_20double_29;
 FUNCTION_TABLE[595] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__val_deleter_28emscripten__val_29;
 FUNCTION_TABLE[596] = std____2__shared_ptr_maxiDyn___shared_ptr_maxiDyn_2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiDyn__20___val_deleter__28maxiDyn__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiDyn__20___val_deleter_2c_20std____2__enable_if_is_convertible_maxiDyn__2c_20maxiDyn____value_2c_20std____2__shared_ptr_maxiDyn_____nat___type_29;
 FUNCTION_TABLE[597] = emscripten__internal__GenericBindingType_std____2__shared_ptr_maxiOsc__20___toWireType_28std____2__shared_ptr_maxiOsc____29;
 FUNCTION_TABLE[598] = emscripten__internal__MethodInvoker_double_20_28maxiDyn____29_28double_2c_20double_2c_20long_2c_20double_2c_20double_29_2c_20double_2c_20maxiDyn__2c_20double_2c_20double_2c_20long_2c_20double_2c_20double___invoke_28double_20_28maxiDyn____20const__29_28double_2c_20double_2c_20long_2c_20double_2c_20double_29_2c_20maxiDyn__2c_20double_2c_20double_2c_20long_2c_20double_2c_20double_29;
 FUNCTION_TABLE[599] = emscripten__internal__MethodInvoker_double_20_28maxiDyn____29_28double_2c_20double_2c_20double_2c_20double_2c_20double_29_2c_20double_2c_20maxiDyn__2c_20double_2c_20double_2c_20double_2c_20double_2c_20double___invoke_28double_20_28maxiDyn____20const__29_28double_2c_20double_2c_20double_2c_20double_2c_20double_29_2c_20maxiDyn__2c_20double_2c_20double_2c_20double_2c_20double_2c_20double_29;
 FUNCTION_TABLE[600] = emscripten__internal__MethodInvoker_double_20_28maxiOsc____29_28double_29_2c_20double_2c_20maxiOsc__2c_20double___invoke_28double_20_28maxiOsc____20const__29_28double_29_2c_20maxiOsc__2c_20double_29;
 FUNCTION_TABLE[601] = void_20emscripten__internal__SetterPolicy_void_20_28maxiEnvelope____29_28double_29___set_maxiEnvelope__28void_20_28maxiEnvelope____20const__29_28double_29_2c_20maxiEnvelope__2c_20double_29;
 FUNCTION_TABLE[602] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__val_deleter_28emscripten__val_29;
 FUNCTION_TABLE[603] = std____2__shared_ptr_maxiEnv___shared_ptr_maxiEnv_2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiEnv__20___val_deleter__28maxiEnv__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiEnv__20___val_deleter_2c_20std____2__enable_if_is_convertible_maxiEnv__2c_20maxiEnv____value_2c_20std____2__shared_ptr_maxiEnv_____nat___type_29;
 FUNCTION_TABLE[604] = emscripten__internal__GenericBindingType_std____2__shared_ptr_maxiOsc__20___toWireType_28std____2__shared_ptr_maxiOsc____29;
 FUNCTION_TABLE[605] = emscripten__internal__MethodInvoker_double_20_28maxiEnv____29_28double_2c_20double_2c_20double_2c_20long_2c_20int_29_2c_20double_2c_20maxiEnv__2c_20double_2c_20double_2c_20double_2c_20long_2c_20int___invoke_28double_20_28maxiEnv____20const__29_28double_2c_20double_2c_20double_2c_20long_2c_20int_29_2c_20maxiEnv__2c_20double_2c_20double_2c_20double_2c_20long_2c_20int_29;
 FUNCTION_TABLE[606] = emscripten__internal__MethodInvoker_double_20_28maxiEnv____29_28double_2c_20double_2c_20double_2c_20double_2c_20double_2c_20long_2c_20int_29_2c_20double_2c_20maxiEnv__2c_20double_2c_20double_2c_20double_2c_20double_2c_20double_2c_20long_2c_20int___invoke_28double_20_28maxiEnv____20const__29_28double_2c_20double_2c_20double_2c_20double_2c_20double_2c_20long_2c_20int_29_2c_20maxiEnv__2c_20double_2c_20double_2c_20double_2c_20double_2c_20double_2c_20long_2c_20int_29;
 FUNCTION_TABLE[607] = emscripten__internal__MethodInvoker_double_20_28maxiEnv____29_28double_2c_20int_29_2c_20double_2c_20maxiEnv__2c_20double_2c_20int___invoke_28double_20_28maxiEnv____20const__29_28double_2c_20int_29_2c_20maxiEnv__2c_20double_2c_20int_29;
 FUNCTION_TABLE[608] = void_20emscripten__internal__SetterPolicy_void_20_28maxiEnvelope____29_28double_29___set_maxiEnvelope__28void_20_28maxiEnvelope____20const__29_28double_29_2c_20maxiEnvelope__2c_20double_29;
 FUNCTION_TABLE[609] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__val_deleter_28emscripten__val_29;
 FUNCTION_TABLE[610] = std____2__shared_ptr_convert___shared_ptr_convert_2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_convert__20___val_deleter__28convert__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_convert__20___val_deleter_2c_20std____2__enable_if_is_convertible_convert__2c_20convert____value_2c_20std____2__shared_ptr_convert_____nat___type_29;
 FUNCTION_TABLE[611] = emscripten__internal__GenericBindingType_std____2__shared_ptr_maxiOsc__20___toWireType_28std____2__shared_ptr_maxiOsc____29;
 FUNCTION_TABLE[612] = emscripten__internal__FunctionInvoker_double_20_28__29_28int_29_2c_20double_2c_20int___invoke_28double_20_28___29_28int_29_2c_20int_29;
 FUNCTION_TABLE[613] = emscripten__internal__FunctionInvoker_double_20_28__29_28double_29_2c_20double_2c_20double___invoke_28double_20_28___29_28double_29_2c_20double_29;
 FUNCTION_TABLE[614] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__val_deleter_28emscripten__val_29;
 FUNCTION_TABLE[615] = std____2__shared_ptr_maxiSampleAndHold___shared_ptr_maxiSampleAndHold_2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiSampleAndHold__20___val_deleter__28maxiSampleAndHold__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiSampleAndHold__20___val_deleter_2c_20std____2__enable_if_is_convertible_maxiSampleAndHold__2c_20maxiSampleAndHold____value_2c_20std____2__shared_ptr_maxiSampleAndHold_____nat___type_29;
 FUNCTION_TABLE[616] = emscripten__internal__GenericBindingType_std____2__shared_ptr_maxiOsc__20___toWireType_28std____2__shared_ptr_maxiOsc____29;
 FUNCTION_TABLE[617] = emscripten__internal__MethodInvoker_double_20_28maxiOsc____29_28double_2c_20double_29_2c_20double_2c_20maxiOsc__2c_20double_2c_20double___invoke_28double_20_28maxiOsc____20const__29_28double_2c_20double_29_2c_20maxiOsc__2c_20double_2c_20double_29;
 FUNCTION_TABLE[618] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__val_deleter_28emscripten__val_29;
 FUNCTION_TABLE[619] = std____2__shared_ptr_maxiNonlinearity___shared_ptr_maxiNonlinearity_2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiNonlinearity__20___val_deleter__28maxiNonlinearity__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiNonlinearity__20___val_deleter_2c_20std____2__enable_if_is_convertible_maxiNonlinearity__2c_20maxiNonlinearity____value_2c_20std____2__shared_ptr_maxiNonlinearity_____nat___type_29;
 FUNCTION_TABLE[620] = emscripten__internal__GenericBindingType_std____2__shared_ptr_maxiOsc__20___toWireType_28std____2__shared_ptr_maxiOsc____29;
 FUNCTION_TABLE[621] = emscripten__internal__MethodInvoker_double_20_28maxiOsc____29_28double_29_2c_20double_2c_20maxiOsc__2c_20double___invoke_28double_20_28maxiOsc____20const__29_28double_29_2c_20maxiOsc__2c_20double_29;
 FUNCTION_TABLE[622] = emscripten__internal__MethodInvoker_double_20_28maxiOsc____29_28double_2c_20double_29_2c_20double_2c_20maxiOsc__2c_20double_2c_20double___invoke_28double_20_28maxiOsc____20const__29_28double_2c_20double_29_2c_20maxiOsc__2c_20double_2c_20double_29;
 FUNCTION_TABLE[623] = emscripten__internal__MethodInvoker_double_20_28maxiOsc____29_28double_2c_20double_2c_20double_29_2c_20double_2c_20maxiOsc__2c_20double_2c_20double_2c_20double___invoke_28double_20_28maxiOsc____20const__29_28double_2c_20double_2c_20double_29_2c_20maxiOsc__2c_20double_2c_20double_2c_20double_29;
 FUNCTION_TABLE[624] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__val_deleter_28emscripten__val_29;
 FUNCTION_TABLE[625] = std____2__shared_ptr_maxiFlanger___shared_ptr_maxiFlanger_2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiFlanger__20___val_deleter__28maxiFlanger__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiFlanger__20___val_deleter_2c_20std____2__enable_if_is_convertible_maxiFlanger__2c_20maxiFlanger____value_2c_20std____2__shared_ptr_maxiFlanger_____nat___type_29;
 FUNCTION_TABLE[626] = emscripten__internal__GenericBindingType_std____2__shared_ptr_maxiOsc__20___toWireType_28std____2__shared_ptr_maxiOsc____29;
 FUNCTION_TABLE[627] = emscripten__internal__MethodInvoker_double_20_28maxiFlanger____29_28double_2c_20unsigned_20int_2c_20double_2c_20double_2c_20double_29_2c_20double_2c_20maxiFlanger__2c_20double_2c_20unsigned_20int_2c_20double_2c_20double_2c_20double___invoke_28double_20_28maxiFlanger____20const__29_28double_2c_20unsigned_20int_2c_20double_2c_20double_2c_20double_29_2c_20maxiFlanger__2c_20double_2c_20unsigned_20int_2c_20double_2c_20double_2c_20double_29;
 FUNCTION_TABLE[628] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__val_deleter_28emscripten__val_29;
 FUNCTION_TABLE[629] = std____2__shared_ptr_maxiChorus___shared_ptr_maxiChorus_2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiChorus__20___val_deleter__28maxiChorus__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiChorus__20___val_deleter_2c_20std____2__enable_if_is_convertible_maxiChorus__2c_20maxiChorus____value_2c_20std____2__shared_ptr_maxiChorus_____nat___type_29;
 FUNCTION_TABLE[630] = emscripten__internal__GenericBindingType_std____2__shared_ptr_maxiOsc__20___toWireType_28std____2__shared_ptr_maxiOsc____29;
 FUNCTION_TABLE[631] = emscripten__internal__MethodInvoker_double_20_28maxiFlanger____29_28double_2c_20unsigned_20int_2c_20double_2c_20double_2c_20double_29_2c_20double_2c_20maxiFlanger__2c_20double_2c_20unsigned_20int_2c_20double_2c_20double_2c_20double___invoke_28double_20_28maxiFlanger____20const__29_28double_2c_20unsigned_20int_2c_20double_2c_20double_2c_20double_29_2c_20maxiFlanger__2c_20double_2c_20unsigned_20int_2c_20double_2c_20double_2c_20double_29;
 FUNCTION_TABLE[632] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__val_deleter_28emscripten__val_29;
 FUNCTION_TABLE[633] = std____2__shared_ptr_maxiDCBlocker___shared_ptr_maxiDCBlocker_2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiDCBlocker__20___val_deleter__28maxiDCBlocker__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiDCBlocker__20___val_deleter_2c_20std____2__enable_if_is_convertible_maxiDCBlocker__2c_20maxiDCBlocker____value_2c_20std____2__shared_ptr_maxiDCBlocker_____nat___type_29;
 FUNCTION_TABLE[634] = emscripten__internal__GenericBindingType_std____2__shared_ptr_maxiOsc__20___toWireType_28std____2__shared_ptr_maxiOsc____29;
 FUNCTION_TABLE[635] = emscripten__internal__MethodInvoker_double_20_28maxiOsc____29_28double_2c_20double_29_2c_20double_2c_20maxiOsc__2c_20double_2c_20double___invoke_28double_20_28maxiOsc____20const__29_28double_2c_20double_29_2c_20maxiOsc__2c_20double_2c_20double_29;
 FUNCTION_TABLE[636] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__val_deleter_28emscripten__val_29;
 FUNCTION_TABLE[637] = std____2__shared_ptr_maxiSVF___shared_ptr_maxiSVF_2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiSVF__20___val_deleter__28maxiSVF__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiSVF__20___val_deleter_2c_20std____2__enable_if_is_convertible_maxiSVF__2c_20maxiSVF____value_2c_20std____2__shared_ptr_maxiSVF_____nat___type_29;
 FUNCTION_TABLE[638] = emscripten__internal__GenericBindingType_std____2__shared_ptr_maxiOsc__20___toWireType_28std____2__shared_ptr_maxiOsc____29;
 FUNCTION_TABLE[639] = void_20emscripten__internal__SetterPolicy_void_20_28maxiEnvelope____29_28double_29___set_maxiEnvelope__28void_20_28maxiEnvelope____20const__29_28double_29_2c_20maxiEnvelope__2c_20double_29;
 FUNCTION_TABLE[640] = emscripten__internal__MethodInvoker_double_20_28maxiDyn____29_28double_2c_20double_2c_20double_2c_20double_2c_20double_29_2c_20double_2c_20maxiDyn__2c_20double_2c_20double_2c_20double_2c_20double_2c_20double___invoke_28double_20_28maxiDyn____20const__29_28double_2c_20double_2c_20double_2c_20double_2c_20double_29_2c_20maxiDyn__2c_20double_2c_20double_2c_20double_2c_20double_2c_20double_29;
 FUNCTION_TABLE[641] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__val_deleter_28emscripten__val_29;
 FUNCTION_TABLE[642] = std____2__shared_ptr_maxiMath___shared_ptr_maxiMath_2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiMath__20___val_deleter__28maxiMath__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiMath__20___val_deleter_2c_20std____2__enable_if_is_convertible_maxiMath__2c_20maxiMath____value_2c_20std____2__shared_ptr_maxiMath_____nat___type_29;
 FUNCTION_TABLE[643] = emscripten__internal__GenericBindingType_std____2__shared_ptr_maxiOsc__20___toWireType_28std____2__shared_ptr_maxiOsc____29;
 FUNCTION_TABLE[644] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__val_deleter_28emscripten__val_29;
 FUNCTION_TABLE[645] = std____2__shared_ptr_maxiClock___shared_ptr_maxiClock_2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiClock__20___val_deleter__28maxiClock__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiClock__20___val_deleter_2c_20std____2__enable_if_is_convertible_maxiClock__2c_20maxiClock____value_2c_20std____2__shared_ptr_maxiClock_____nat___type_29;
 FUNCTION_TABLE[646] = emscripten__internal__GenericBindingType_std____2__shared_ptr_maxiOsc__20___toWireType_28std____2__shared_ptr_maxiOsc____29;
 FUNCTION_TABLE[647] = emscripten__internal__MethodInvoker_void_20_28maxiSample____29_28_29_2c_20void_2c_20maxiSample____invoke_28void_20_28maxiSample____20const__29_28_29_2c_20maxiSample__29;
 FUNCTION_TABLE[648] = void_20emscripten__internal__SetterPolicy_void_20_28maxiEnvelope____29_28double_29___set_maxiEnvelope__28void_20_28maxiEnvelope____20const__29_28double_29_2c_20maxiEnvelope__2c_20double_29;
 FUNCTION_TABLE[649] = void_20emscripten__internal__SetterPolicy_void_20_28maxiSettings____29_28int_29___set_maxiSettings__28void_20_28maxiSettings____20const__29_28int_29_2c_20maxiSettings__2c_20int_29;
 FUNCTION_TABLE[650] = emscripten__internal__MethodInvoker_unsigned_20long_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28_29_20const_2c_20unsigned_20long_2c_20std____2__vector_int_2c_20std____2__allocator_int__20__20const____invoke_28unsigned_20long_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28_29_20const_2c_20std____2__vector_int_2c_20std____2__allocator_int__20__20const__29;
 FUNCTION_TABLE[651] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__val_deleter_28emscripten__val_29;
 FUNCTION_TABLE[652] = std____2__shared_ptr_maxiKuramotoOscillator___shared_ptr_maxiKuramotoOscillator_2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiKuramotoOscillator__20___val_deleter__28maxiKuramotoOscillator__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiKuramotoOscillator__20___val_deleter_2c_20std____2__enable_if_is_convertible_maxiKuramotoOscillator__2c_20maxiKuramotoOscillator____value_2c_20std____2__shared_ptr_maxiKuramotoOscillator_____nat___type_29;
 FUNCTION_TABLE[653] = emscripten__internal__GenericBindingType_std____2__shared_ptr_maxiOsc__20___toWireType_28std____2__shared_ptr_maxiOsc____29;
 FUNCTION_TABLE[654] = emscripten__internal__MethodInvoker_double_20_28maxiKuramotoOscillator____29_28double_2c_20double_2c_20std____2__vector_double_2c_20std____2__allocator_double__20__29_2c_20double_2c_20maxiKuramotoOscillator__2c_20double_2c_20double_2c_20std____2__vector_double_2c_20std____2__allocator_double__20__20___invoke_28double_20_28maxiKuramotoOscillator____20const__29_28double_2c_20double_2c_20std____2__vector_double_2c_20std____2__allocator_double__20__29_2c_20maxiKuramotoOscillator__2c_20double_2c_20double_2c_20std____2__vector_double_2c_20std____2__allocator_double__20___29;
 FUNCTION_TABLE[655] = void_20emscripten__internal__SetterPolicy_void_20_28maxiEnvelope____29_28double_29___set_maxiEnvelope__28void_20_28maxiEnvelope____20const__29_28double_29_2c_20maxiEnvelope__2c_20double_29;
 FUNCTION_TABLE[656] = emscripten__internal__MethodInvoker_double_20_28maxiOsc____29_28_29_2c_20double_2c_20maxiOsc____invoke_28double_20_28maxiOsc____20const__29_28_29_2c_20maxiOsc__29;
 FUNCTION_TABLE[657] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__val_deleter_28emscripten__val_29;
 FUNCTION_TABLE[658] = std____2__shared_ptr_maxiKuramotoOscillatorSet___shared_ptr_maxiKuramotoOscillatorSet_2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiKuramotoOscillatorSet__20___val_deleter__28maxiKuramotoOscillatorSet__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiKuramotoOscillatorSet__20___val_deleter_2c_20std____2__enable_if_is_convertible_maxiKuramotoOscillatorSet__2c_20maxiKuramotoOscillatorSet____value_2c_20std____2__shared_ptr_maxiKuramotoOscillatorSet_____nat___type_29;
 FUNCTION_TABLE[659] = emscripten__internal__GenericBindingType_std____2__shared_ptr_maxiOsc__20___toWireType_28std____2__shared_ptr_maxiOsc____29;
 FUNCTION_TABLE[660] = emscripten__internal__MethodInvoker_double_20_28maxiOsc____29_28double_2c_20double_29_2c_20double_2c_20maxiOsc__2c_20double_2c_20double___invoke_28double_20_28maxiOsc____20const__29_28double_2c_20double_29_2c_20maxiOsc__2c_20double_2c_20double_29;
 FUNCTION_TABLE[661] = emscripten__internal__MethodInvoker_void_20_28maxiKuramotoOscillatorSet____29_28double_2c_20unsigned_20long_29_2c_20void_2c_20maxiKuramotoOscillatorSet__2c_20double_2c_20unsigned_20long___invoke_28void_20_28maxiKuramotoOscillatorSet____20const__29_28double_2c_20unsigned_20long_29_2c_20maxiKuramotoOscillatorSet__2c_20double_2c_20unsigned_20long_29;
 FUNCTION_TABLE[662] = void_20emscripten__internal__SetterPolicy_void_20_28maxiSettings____29_28int_29___set_maxiSettings__28void_20_28maxiSettings____20const__29_28int_29_2c_20maxiSettings__2c_20int_29;
 FUNCTION_TABLE[663] = emscripten__internal__MethodInvoker_double_20_28maxiKuramotoOscillatorSet____29_28unsigned_20long_29_2c_20double_2c_20maxiKuramotoOscillatorSet__2c_20unsigned_20long___invoke_28double_20_28maxiKuramotoOscillatorSet____20const__29_28unsigned_20long_29_2c_20maxiKuramotoOscillatorSet__2c_20unsigned_20long_29;
 FUNCTION_TABLE[664] = emscripten__internal__MethodInvoker_unsigned_20long_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28_29_20const_2c_20unsigned_20long_2c_20std____2__vector_int_2c_20std____2__allocator_int__20__20const____invoke_28unsigned_20long_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28_29_20const_2c_20std____2__vector_int_2c_20std____2__allocator_int__20__20const__29;
 FUNCTION_TABLE[665] = unsigned_20char__20std____2____to_raw_pointer_unsigned_20char__28unsigned_20char__29;
 FUNCTION_TABLE[666] = unsigned_20char__20std____2____to_raw_pointer_unsigned_20char__28unsigned_20char__29;
 FUNCTION_TABLE[667] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__val_deleter_28emscripten__val_29;
 FUNCTION_TABLE[668] = std____2__shared_ptr_maxiAsyncKuramotoOscillator___shared_ptr_maxiAsyncKuramotoOscillator_2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiAsyncKuramotoOscillator__20___val_deleter__28maxiAsyncKuramotoOscillator__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiAsyncKuramotoOscillator__20___val_deleter_2c_20std____2__enable_if_is_convertible_maxiAsyncKuramotoOscillator__2c_20maxiAsyncKuramotoOscillator____value_2c_20std____2__shared_ptr_maxiAsyncKuramotoOscillator_____nat___type_29;
 FUNCTION_TABLE[669] = emscripten__internal__GenericBindingType_std____2__shared_ptr_maxiOsc__20___toWireType_28std____2__shared_ptr_maxiOsc____29;
 FUNCTION_TABLE[670] = emscripten__internal__MethodInvoker_double_20_28maxiOsc____29_28double_2c_20double_29_2c_20double_2c_20maxiOsc__2c_20double_2c_20double___invoke_28double_20_28maxiOsc____20const__29_28double_2c_20double_29_2c_20maxiOsc__2c_20double_2c_20double_29;
 FUNCTION_TABLE[671] = emscripten__internal__MethodInvoker_void_20_28maxiKuramotoOscillatorSet____29_28double_2c_20unsigned_20long_29_2c_20void_2c_20maxiKuramotoOscillatorSet__2c_20double_2c_20unsigned_20long___invoke_28void_20_28maxiKuramotoOscillatorSet____20const__29_28double_2c_20unsigned_20long_29_2c_20maxiKuramotoOscillatorSet__2c_20double_2c_20unsigned_20long_29;
 FUNCTION_TABLE[672] = void_20emscripten__internal__SetterPolicy_void_20_28maxiSettings____29_28int_29___set_maxiSettings__28void_20_28maxiSettings____20const__29_28int_29_2c_20maxiSettings__2c_20int_29;
 FUNCTION_TABLE[673] = emscripten__internal__MethodInvoker_double_20_28maxiKuramotoOscillatorSet____29_28unsigned_20long_29_2c_20double_2c_20maxiKuramotoOscillatorSet__2c_20unsigned_20long___invoke_28double_20_28maxiKuramotoOscillatorSet____20const__29_28unsigned_20long_29_2c_20maxiKuramotoOscillatorSet__2c_20unsigned_20long_29;
 FUNCTION_TABLE[674] = emscripten__internal__MethodInvoker_unsigned_20long_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28_29_20const_2c_20unsigned_20long_2c_20std____2__vector_int_2c_20std____2__allocator_int__20__20const____invoke_28unsigned_20long_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28_29_20const_2c_20std____2__vector_int_2c_20std____2__allocator_int__20__20const__29;
 FUNCTION_TABLE[675] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__val_deleter_28emscripten__val_29;
 FUNCTION_TABLE[676] = std____2__shared_ptr_maxiFFT___shared_ptr_maxiFFT_2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiFFT__20___val_deleter__28maxiFFT__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiFFT__20___val_deleter_2c_20std____2__enable_if_is_convertible_maxiFFT__2c_20maxiFFT____value_2c_20std____2__shared_ptr_maxiFFT_____nat___type_29;
 FUNCTION_TABLE[677] = emscripten__internal__GenericBindingType_std____2__shared_ptr_maxiOsc__20___toWireType_28std____2__shared_ptr_maxiOsc____29;
 FUNCTION_TABLE[678] = emscripten__internal__MethodInvoker_void_20_28maxiFFT____29_28int_2c_20int_2c_20int_29_2c_20void_2c_20maxiFFT__2c_20int_2c_20int_2c_20int___invoke_28void_20_28maxiFFT____20const__29_28int_2c_20int_2c_20int_29_2c_20maxiFFT__2c_20int_2c_20int_2c_20int_29;
 FUNCTION_TABLE[679] = emscripten__internal__MethodInvoker_bool_20_28maxiFFT____29_28float_2c_20maxiFFT__fftModes_29_2c_20bool_2c_20maxiFFT__2c_20float_2c_20maxiFFT__fftModes___invoke_28bool_20_28maxiFFT____20const__29_28float_2c_20maxiFFT__fftModes_29_2c_20maxiFFT__2c_20float_2c_20maxiFFT__fftModes_29;
 FUNCTION_TABLE[680] = emscripten__internal__MethodInvoker_float_20_28maxiFFT____29_28_29_2c_20float_2c_20maxiFFT____invoke_28float_20_28maxiFFT____20const__29_28_29_2c_20maxiFFT__29;
 FUNCTION_TABLE[681] = emscripten__internal__MethodInvoker_std____2__vector_float_2c_20std____2__allocator_float__20___20_28maxiFFT____29_28_29_2c_20std____2__vector_float_2c_20std____2__allocator_float__20___2c_20maxiFFT____invoke_28std____2__vector_float_2c_20std____2__allocator_float__20___20_28maxiFFT____20const__29_28_29_2c_20maxiFFT__29;
 FUNCTION_TABLE[682] = emscripten__internal__MethodInvoker_unsigned_20long_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28_29_20const_2c_20unsigned_20long_2c_20std____2__vector_int_2c_20std____2__allocator_int__20__20const____invoke_28unsigned_20long_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28_29_20const_2c_20std____2__vector_int_2c_20std____2__allocator_int__20__20const__29;
 FUNCTION_TABLE[683] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__val_deleter_28emscripten__val_29;
 FUNCTION_TABLE[684] = std____2__shared_ptr_maxiIFFT___shared_ptr_maxiIFFT_2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiIFFT__20___val_deleter__28maxiIFFT__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiIFFT__20___val_deleter_2c_20std____2__enable_if_is_convertible_maxiIFFT__2c_20maxiIFFT____value_2c_20std____2__shared_ptr_maxiIFFT_____nat___type_29;
 FUNCTION_TABLE[685] = emscripten__internal__GenericBindingType_std____2__shared_ptr_maxiOsc__20___toWireType_28std____2__shared_ptr_maxiOsc____29;
 FUNCTION_TABLE[686] = emscripten__internal__MethodInvoker_void_20_28maxiFFT____29_28int_2c_20int_2c_20int_29_2c_20void_2c_20maxiFFT__2c_20int_2c_20int_2c_20int___invoke_28void_20_28maxiFFT____20const__29_28int_2c_20int_2c_20int_29_2c_20maxiFFT__2c_20int_2c_20int_2c_20int_29;
 FUNCTION_TABLE[687] = emscripten__internal__MethodInvoker_float_20_28maxiIFFT____29_28std____2__vector_float_2c_20std____2__allocator_float__20___2c_20std____2__vector_float_2c_20std____2__allocator_float__20___2c_20maxiIFFT__fftModes_29_2c_20float_2c_20maxiIFFT__2c_20std____2__vector_float_2c_20std____2__allocator_float__20___2c_20std____2__vector_float_2c_20std____2__allocator_float__20___2c_20maxiIFFT__fftModes___invoke_28float_20_28maxiIFFT____20const__29_28std____2__vector_float_2c_20std____2__allocator_float__20___2c_20std____2__vector_float_2c_20std____2__allocator_float__20___2c_20maxiIFFT__fftModes_29_2c_20maxiIFFT__2c_20std____2__vector_float_2c_20std____2__allocator_float__20___2c_20std____2__vector_float_2c_20std____2__allocator_float__20___2c_20maxiIFFT__fftModes_29;
 FUNCTION_TABLE[688] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__val_deleter_28emscripten__val_29;
 FUNCTION_TABLE[689] = std____2__shared_ptr_maxiMFCCAnalyser_double__20___shared_ptr_maxiMFCCAnalyser_double__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiMFCCAnalyser_double__20__20___val_deleter__28maxiMFCCAnalyser_double___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiMFCCAnalyser_double__20__20___val_deleter_2c_20std____2__enable_if_is_convertible_maxiMFCCAnalyser_double___2c_20maxiMFCCAnalyser_double_____value_2c_20std____2__shared_ptr_maxiMFCCAnalyser_double__20_____nat___type_29;
 FUNCTION_TABLE[690] = emscripten__internal__GenericBindingType_std____2__shared_ptr_maxiOsc__20___toWireType_28std____2__shared_ptr_maxiOsc____29;
 FUNCTION_TABLE[691] = emscripten__internal__MethodInvoker_void_20_28maxiMFCCAnalyser_double_____29_28unsigned_20int_2c_20unsigned_20int_2c_20unsigned_20int_2c_20double_2c_20double_29_2c_20void_2c_20maxiMFCCAnalyser_double___2c_20unsigned_20int_2c_20unsigned_20int_2c_20unsigned_20int_2c_20double_2c_20double___invoke_28void_20_28maxiMFCCAnalyser_double_____20const__29_28unsigned_20int_2c_20unsigned_20int_2c_20unsigned_20int_2c_20double_2c_20double_29_2c_20maxiMFCCAnalyser_double___2c_20unsigned_20int_2c_20unsigned_20int_2c_20unsigned_20int_2c_20double_2c_20double_29;
 FUNCTION_TABLE[692] = emscripten__internal__MethodInvoker_std____2__vector_double_2c_20std____2__allocator_double__20___20_28maxiMFCCAnalyser_double_____29_28std____2__vector_float_2c_20std____2__allocator_float__20___29_2c_20std____2__vector_double_2c_20std____2__allocator_double__20___2c_20maxiMFCCAnalyser_double___2c_20std____2__vector_float_2c_20std____2__allocator_float__20_____invoke_28std____2__vector_double_2c_20std____2__allocator_double__20___20_28maxiMFCCAnalyser_double_____20const__29_28std____2__vector_float_2c_20std____2__allocator_float__20___29_2c_20maxiMFCCAnalyser_double___2c_20std____2__vector_float_2c_20std____2__allocator_float__20___29;
 FUNCTION_TABLE[693] = emscripten__internal__Invoker_std____2__vector_int_2c_20std____2__allocator_int__20_____invoke_28std____2__vector_int_2c_20std____2__allocator_int__20___20_28__29_28_29_29;
 FUNCTION_TABLE[694] = emscripten__internal__MethodInvoker_void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28int_20const__29_2c_20void_2c_20std____2__vector_int_2c_20std____2__allocator_int__20___2c_20int_20const____invoke_28void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28int_20const__29_2c_20std____2__vector_int_2c_20std____2__allocator_int__20___2c_20int_29;
 FUNCTION_TABLE[695] = emscripten__internal__MethodInvoker_void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28unsigned_20long_2c_20int_20const__29_2c_20void_2c_20std____2__vector_int_2c_20std____2__allocator_int__20___2c_20unsigned_20long_2c_20int_20const____invoke_28void_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28unsigned_20long_2c_20int_20const__29_2c_20std____2__vector_int_2c_20std____2__allocator_int__20___2c_20unsigned_20long_2c_20int_29;
 FUNCTION_TABLE[696] = emscripten__internal__MethodInvoker_unsigned_20long_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28_29_20const_2c_20unsigned_20long_2c_20std____2__vector_int_2c_20std____2__allocator_int__20__20const____invoke_28unsigned_20long_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28_29_20const_2c_20std____2__vector_int_2c_20std____2__allocator_int__20__20const__29;
 FUNCTION_TABLE[697] = emscripten__internal__FunctionInvoker_emscripten__val_20_28__29_28std____2__vector_int_2c_20std____2__allocator_int__20__20const__2c_20unsigned_20long_29_2c_20emscripten__val_2c_20std____2__vector_int_2c_20std____2__allocator_int__20__20const__2c_20unsigned_20long___invoke_28emscripten__val_20_28___29_28std____2__vector_int_2c_20std____2__allocator_int__20__20const__2c_20unsigned_20long_29_2c_20std____2__vector_int_2c_20std____2__allocator_int__20___2c_20unsigned_20long_29;
 FUNCTION_TABLE[698] = emscripten__internal__FunctionInvoker_bool_20_28__29_28std____2__vector_int_2c_20std____2__allocator_int__20___2c_20unsigned_20long_2c_20int_20const__29_2c_20bool_2c_20std____2__vector_int_2c_20std____2__allocator_int__20___2c_20unsigned_20long_2c_20int_20const____invoke_28bool_20_28___29_28std____2__vector_int_2c_20std____2__allocator_int__20___2c_20unsigned_20long_2c_20int_20const__29_2c_20std____2__vector_int_2c_20std____2__allocator_int__20___2c_20unsigned_20long_2c_20int_29;
 FUNCTION_TABLE[699] = emscripten__internal__Invoker_std____2__vector_int_2c_20std____2__allocator_int__20_____invoke_28std____2__vector_int_2c_20std____2__allocator_int__20___20_28__29_28_29_29;
 FUNCTION_TABLE[700] = emscripten__internal__MethodInvoker_void_20_28std____2__vector_double_2c_20std____2__allocator_double__20_____29_28double_20const__29_2c_20void_2c_20std____2__vector_double_2c_20std____2__allocator_double__20___2c_20double_20const____invoke_28void_20_28std____2__vector_double_2c_20std____2__allocator_double__20_____20const__29_28double_20const__29_2c_20std____2__vector_double_2c_20std____2__allocator_double__20___2c_20double_29;
 FUNCTION_TABLE[701] = emscripten__internal__MethodInvoker_void_20_28std____2__vector_double_2c_20std____2__allocator_double__20_____29_28unsigned_20long_2c_20double_20const__29_2c_20void_2c_20std____2__vector_double_2c_20std____2__allocator_double__20___2c_20unsigned_20long_2c_20double_20const____invoke_28void_20_28std____2__vector_double_2c_20std____2__allocator_double__20_____20const__29_28unsigned_20long_2c_20double_20const__29_2c_20std____2__vector_double_2c_20std____2__allocator_double__20___2c_20unsigned_20long_2c_20double_29;
 FUNCTION_TABLE[702] = emscripten__internal__MethodInvoker_unsigned_20long_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28_29_20const_2c_20unsigned_20long_2c_20std____2__vector_int_2c_20std____2__allocator_int__20__20const____invoke_28unsigned_20long_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28_29_20const_2c_20std____2__vector_int_2c_20std____2__allocator_int__20__20const__29;
 FUNCTION_TABLE[703] = emscripten__internal__FunctionInvoker_emscripten__val_20_28__29_28std____2__vector_int_2c_20std____2__allocator_int__20__20const__2c_20unsigned_20long_29_2c_20emscripten__val_2c_20std____2__vector_int_2c_20std____2__allocator_int__20__20const__2c_20unsigned_20long___invoke_28emscripten__val_20_28___29_28std____2__vector_int_2c_20std____2__allocator_int__20__20const__2c_20unsigned_20long_29_2c_20std____2__vector_int_2c_20std____2__allocator_int__20___2c_20unsigned_20long_29;
 FUNCTION_TABLE[704] = emscripten__internal__FunctionInvoker_bool_20_28__29_28std____2__vector_double_2c_20std____2__allocator_double__20___2c_20unsigned_20long_2c_20double_20const__29_2c_20bool_2c_20std____2__vector_double_2c_20std____2__allocator_double__20___2c_20unsigned_20long_2c_20double_20const____invoke_28bool_20_28___29_28std____2__vector_double_2c_20std____2__allocator_double__20___2c_20unsigned_20long_2c_20double_20const__29_2c_20std____2__vector_double_2c_20std____2__allocator_double__20___2c_20unsigned_20long_2c_20double_29;
 FUNCTION_TABLE[705] = emscripten__internal__Invoker_std____2__vector_int_2c_20std____2__allocator_int__20_____invoke_28std____2__vector_int_2c_20std____2__allocator_int__20___20_28__29_28_29_29;
 FUNCTION_TABLE[706] = emscripten__internal__MethodInvoker_void_20_28std____2__vector_char_2c_20std____2__allocator_char__20_____29_28char_20const__29_2c_20void_2c_20std____2__vector_char_2c_20std____2__allocator_char__20___2c_20char_20const____invoke_28void_20_28std____2__vector_char_2c_20std____2__allocator_char__20_____20const__29_28char_20const__29_2c_20std____2__vector_char_2c_20std____2__allocator_char__20___2c_20char_29;
 FUNCTION_TABLE[707] = emscripten__internal__MethodInvoker_void_20_28std____2__vector_char_2c_20std____2__allocator_char__20_____29_28unsigned_20long_2c_20char_20const__29_2c_20void_2c_20std____2__vector_char_2c_20std____2__allocator_char__20___2c_20unsigned_20long_2c_20char_20const____invoke_28void_20_28std____2__vector_char_2c_20std____2__allocator_char__20_____20const__29_28unsigned_20long_2c_20char_20const__29_2c_20std____2__vector_char_2c_20std____2__allocator_char__20___2c_20unsigned_20long_2c_20char_29;
 FUNCTION_TABLE[708] = emscripten__internal__MethodInvoker_unsigned_20long_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28_29_20const_2c_20unsigned_20long_2c_20std____2__vector_int_2c_20std____2__allocator_int__20__20const____invoke_28unsigned_20long_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28_29_20const_2c_20std____2__vector_int_2c_20std____2__allocator_int__20__20const__29;
 FUNCTION_TABLE[709] = emscripten__internal__FunctionInvoker_emscripten__val_20_28__29_28std____2__vector_int_2c_20std____2__allocator_int__20__20const__2c_20unsigned_20long_29_2c_20emscripten__val_2c_20std____2__vector_int_2c_20std____2__allocator_int__20__20const__2c_20unsigned_20long___invoke_28emscripten__val_20_28___29_28std____2__vector_int_2c_20std____2__allocator_int__20__20const__2c_20unsigned_20long_29_2c_20std____2__vector_int_2c_20std____2__allocator_int__20___2c_20unsigned_20long_29;
 FUNCTION_TABLE[710] = emscripten__internal__FunctionInvoker_bool_20_28__29_28std____2__vector_char_2c_20std____2__allocator_char__20___2c_20unsigned_20long_2c_20char_20const__29_2c_20bool_2c_20std____2__vector_char_2c_20std____2__allocator_char__20___2c_20unsigned_20long_2c_20char_20const____invoke_28bool_20_28___29_28std____2__vector_char_2c_20std____2__allocator_char__20___2c_20unsigned_20long_2c_20char_20const__29_2c_20std____2__vector_char_2c_20std____2__allocator_char__20___2c_20unsigned_20long_2c_20char_29;
 FUNCTION_TABLE[711] = emscripten__internal__Invoker_std____2__vector_int_2c_20std____2__allocator_int__20_____invoke_28std____2__vector_int_2c_20std____2__allocator_int__20___20_28__29_28_29_29;
 FUNCTION_TABLE[712] = emscripten__internal__MethodInvoker_void_20_28std____2__vector_char_2c_20std____2__allocator_char__20_____29_28char_20const__29_2c_20void_2c_20std____2__vector_char_2c_20std____2__allocator_char__20___2c_20char_20const____invoke_28void_20_28std____2__vector_char_2c_20std____2__allocator_char__20_____20const__29_28char_20const__29_2c_20std____2__vector_char_2c_20std____2__allocator_char__20___2c_20char_29;
 FUNCTION_TABLE[713] = emscripten__internal__MethodInvoker_void_20_28std____2__vector_char_2c_20std____2__allocator_char__20_____29_28unsigned_20long_2c_20char_20const__29_2c_20void_2c_20std____2__vector_char_2c_20std____2__allocator_char__20___2c_20unsigned_20long_2c_20char_20const____invoke_28void_20_28std____2__vector_char_2c_20std____2__allocator_char__20_____20const__29_28unsigned_20long_2c_20char_20const__29_2c_20std____2__vector_char_2c_20std____2__allocator_char__20___2c_20unsigned_20long_2c_20char_29;
 FUNCTION_TABLE[714] = emscripten__internal__MethodInvoker_unsigned_20long_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28_29_20const_2c_20unsigned_20long_2c_20std____2__vector_int_2c_20std____2__allocator_int__20__20const____invoke_28unsigned_20long_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28_29_20const_2c_20std____2__vector_int_2c_20std____2__allocator_int__20__20const__29;
 FUNCTION_TABLE[715] = emscripten__internal__FunctionInvoker_emscripten__val_20_28__29_28std____2__vector_int_2c_20std____2__allocator_int__20__20const__2c_20unsigned_20long_29_2c_20emscripten__val_2c_20std____2__vector_int_2c_20std____2__allocator_int__20__20const__2c_20unsigned_20long___invoke_28emscripten__val_20_28___29_28std____2__vector_int_2c_20std____2__allocator_int__20__20const__2c_20unsigned_20long_29_2c_20std____2__vector_int_2c_20std____2__allocator_int__20___2c_20unsigned_20long_29;
 FUNCTION_TABLE[716] = emscripten__internal__FunctionInvoker_bool_20_28__29_28std____2__vector_char_2c_20std____2__allocator_char__20___2c_20unsigned_20long_2c_20char_20const__29_2c_20bool_2c_20std____2__vector_char_2c_20std____2__allocator_char__20___2c_20unsigned_20long_2c_20char_20const____invoke_28bool_20_28___29_28std____2__vector_char_2c_20std____2__allocator_char__20___2c_20unsigned_20long_2c_20char_20const__29_2c_20std____2__vector_char_2c_20std____2__allocator_char__20___2c_20unsigned_20long_2c_20char_29;
 FUNCTION_TABLE[717] = emscripten__internal__Invoker_std____2__vector_int_2c_20std____2__allocator_int__20_____invoke_28std____2__vector_int_2c_20std____2__allocator_int__20___20_28__29_28_29_29;
 FUNCTION_TABLE[718] = emscripten__internal__MethodInvoker_void_20_28std____2__vector_float_2c_20std____2__allocator_float__20_____29_28float_20const__29_2c_20void_2c_20std____2__vector_float_2c_20std____2__allocator_float__20___2c_20float_20const____invoke_28void_20_28std____2__vector_float_2c_20std____2__allocator_float__20_____20const__29_28float_20const__29_2c_20std____2__vector_float_2c_20std____2__allocator_float__20___2c_20float_29;
 FUNCTION_TABLE[719] = emscripten__internal__MethodInvoker_void_20_28std____2__vector_float_2c_20std____2__allocator_float__20_____29_28unsigned_20long_2c_20float_20const__29_2c_20void_2c_20std____2__vector_float_2c_20std____2__allocator_float__20___2c_20unsigned_20long_2c_20float_20const____invoke_28void_20_28std____2__vector_float_2c_20std____2__allocator_float__20_____20const__29_28unsigned_20long_2c_20float_20const__29_2c_20std____2__vector_float_2c_20std____2__allocator_float__20___2c_20unsigned_20long_2c_20float_29;
 FUNCTION_TABLE[720] = emscripten__internal__MethodInvoker_unsigned_20long_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28_29_20const_2c_20unsigned_20long_2c_20std____2__vector_int_2c_20std____2__allocator_int__20__20const____invoke_28unsigned_20long_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28_29_20const_2c_20std____2__vector_int_2c_20std____2__allocator_int__20__20const__29;
 FUNCTION_TABLE[721] = emscripten__internal__FunctionInvoker_emscripten__val_20_28__29_28std____2__vector_int_2c_20std____2__allocator_int__20__20const__2c_20unsigned_20long_29_2c_20emscripten__val_2c_20std____2__vector_int_2c_20std____2__allocator_int__20__20const__2c_20unsigned_20long___invoke_28emscripten__val_20_28___29_28std____2__vector_int_2c_20std____2__allocator_int__20__20const__2c_20unsigned_20long_29_2c_20std____2__vector_int_2c_20std____2__allocator_int__20___2c_20unsigned_20long_29;
 FUNCTION_TABLE[722] = emscripten__internal__FunctionInvoker_bool_20_28__29_28std____2__vector_float_2c_20std____2__allocator_float__20___2c_20unsigned_20long_2c_20float_20const__29_2c_20bool_2c_20std____2__vector_float_2c_20std____2__allocator_float__20___2c_20unsigned_20long_2c_20float_20const____invoke_28bool_20_28___29_28std____2__vector_float_2c_20std____2__allocator_float__20___2c_20unsigned_20long_2c_20float_20const__29_2c_20std____2__vector_float_2c_20std____2__allocator_float__20___2c_20unsigned_20long_2c_20float_29;
 FUNCTION_TABLE[723] = std____2__vector_float_2c_20std____2__allocator_float__20_____annotate_shrink_28unsigned_20long_29_20const;
 FUNCTION_TABLE[724] = std____2__vector_double_2c_20std____2__allocator_double__20_____construct_at_end_28unsigned_20long_2c_20double_20const__29;
 FUNCTION_TABLE[725] = std____2__enable_if___is_forward_iterator_double____value_2c_20void___type_20std____2__vector_double_2c_20std____2__allocator_double__20_____construct_at_end_double___28double__2c_20double__2c_20unsigned_20long_29;
 FUNCTION_TABLE[726] = std____2__enable_if___is_forward_iterator_double____value_2c_20void___type_20std____2__vector_double_2c_20std____2__allocator_double__20_____construct_at_end_double___28double__2c_20double__2c_20unsigned_20long_29;
 FUNCTION_TABLE[727] = void_20const__20emscripten__internal__getActualType_maxiTimeStretch_hannWinFunctor__20__28maxiTimeStretch_hannWinFunctor___29;
 FUNCTION_TABLE[728] = void_20emscripten__internal__raw_destructor_maxiTimeStretch_hannWinFunctor__20__28maxiTimeStretch_hannWinFunctor___29;
 FUNCTION_TABLE[729] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___get_28std____2__shared_ptr_maxiOsc__20const__29;
 FUNCTION_TABLE[730] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___construct_null_28_29;
 FUNCTION_TABLE[731] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiTimeStretch_hannWinFunctor__20__20___share_28maxiTimeStretch_hannWinFunctor___2c_20emscripten__internal___EM_VAL__29;
 FUNCTION_TABLE[732] = void_20emscripten__internal__raw_destructor_std____2__shared_ptr_maxiOsc__20__28std____2__shared_ptr_maxiOsc___29;
 FUNCTION_TABLE[733] = emscripten__internal__Invoker_std____2__shared_ptr_maxiTimeStretch_hannWinFunctor__20__20___invoke_28std____2__shared_ptr_maxiTimeStretch_hannWinFunctor__20__20_28__29_28_29_29;
 FUNCTION_TABLE[734] = std____2__enable_if___28is_array_maxiTimeStretch_hannWinFunctor__20___value_29_2c_20std____2__shared_ptr_maxiTimeStretch_hannWinFunctor__20__20___type_20std____2__make_shared_maxiTimeStretch_hannWinFunctor__20__28_29;
 FUNCTION_TABLE[735] = maxiTimeStretch_hannWinFunctor___setSample_28maxiSample__29;
 FUNCTION_TABLE[736] = maxiTimeStretch_hannWinFunctor___getNormalisedPosition_28_29;
 FUNCTION_TABLE[737] = maxiLagExp_double___getAlpha_28_29_20const;
 FUNCTION_TABLE[738] = maxiTimeStretch_hannWinFunctor___setPosition_28double_29;
 FUNCTION_TABLE[739] = maxiTimeStretch_hannWinFunctor___play_28double_2c_20double_2c_20int_2c_20double_29;
 FUNCTION_TABLE[740] = maxiTimeStretch_hannWinFunctor___playAtPosition_28double_2c_20double_2c_20int_29;
 FUNCTION_TABLE[741] = void_20const__20emscripten__internal__getActualType_maxiPitchShift_hannWinFunctor__20__28maxiPitchShift_hannWinFunctor___29;
 FUNCTION_TABLE[742] = void_20emscripten__internal__raw_destructor_maxiPitchShift_hannWinFunctor__20__28maxiPitchShift_hannWinFunctor___29;
 FUNCTION_TABLE[743] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___get_28std____2__shared_ptr_maxiOsc__20const__29;
 FUNCTION_TABLE[744] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___construct_null_28_29;
 FUNCTION_TABLE[745] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiPitchShift_hannWinFunctor__20__20___share_28maxiPitchShift_hannWinFunctor___2c_20emscripten__internal___EM_VAL__29;
 FUNCTION_TABLE[746] = void_20emscripten__internal__raw_destructor_std____2__shared_ptr_maxiOsc__20__28std____2__shared_ptr_maxiOsc___29;
 FUNCTION_TABLE[747] = emscripten__internal__Invoker_std____2__shared_ptr_maxiPitchShift_hannWinFunctor__20__20___invoke_28std____2__shared_ptr_maxiPitchShift_hannWinFunctor__20__20_28__29_28_29_29;
 FUNCTION_TABLE[748] = std____2__enable_if___28is_array_maxiPitchShift_hannWinFunctor__20___value_29_2c_20std____2__shared_ptr_maxiPitchShift_hannWinFunctor__20__20___type_20std____2__make_shared_maxiPitchShift_hannWinFunctor__20__28_29;
 FUNCTION_TABLE[749] = maxiPitchShift_hannWinFunctor___setSample_28maxiSample__29;
 FUNCTION_TABLE[750] = maxiPitchShift_hannWinFunctor___play_28double_2c_20double_2c_20int_2c_20double_29;
 FUNCTION_TABLE[751] = void_20const__20emscripten__internal__getActualType_maxiStretch_hannWinFunctor__20__28maxiStretch_hannWinFunctor___29;
 FUNCTION_TABLE[752] = void_20emscripten__internal__raw_destructor_maxiTimeStretch_hannWinFunctor__20__28maxiTimeStretch_hannWinFunctor___29;
 FUNCTION_TABLE[753] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___get_28std____2__shared_ptr_maxiOsc__20const__29;
 FUNCTION_TABLE[754] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___construct_null_28_29;
 FUNCTION_TABLE[755] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiStretch_hannWinFunctor__20__20___share_28maxiStretch_hannWinFunctor___2c_20emscripten__internal___EM_VAL__29;
 FUNCTION_TABLE[756] = void_20emscripten__internal__raw_destructor_std____2__shared_ptr_maxiOsc__20__28std____2__shared_ptr_maxiOsc___29;
 FUNCTION_TABLE[757] = emscripten__internal__Invoker_std____2__shared_ptr_maxiStretch_hannWinFunctor__20__20___invoke_28std____2__shared_ptr_maxiStretch_hannWinFunctor__20__20_28__29_28_29_29;
 FUNCTION_TABLE[758] = std____2__enable_if___28is_array_maxiStretch_hannWinFunctor__20___value_29_2c_20std____2__shared_ptr_maxiStretch_hannWinFunctor__20__20___type_20std____2__make_shared_maxiStretch_hannWinFunctor__20__28_29;
 FUNCTION_TABLE[759] = maxiStretch_hannWinFunctor___setSample_28maxiSample__29;
 FUNCTION_TABLE[760] = maxiTimeStretch_hannWinFunctor___getNormalisedPosition_28_29;
 FUNCTION_TABLE[761] = maxiLagExp_double___getAlpha_28_29_20const;
 FUNCTION_TABLE[762] = maxiTimeStretch_hannWinFunctor___setPosition_28double_29;
 FUNCTION_TABLE[763] = maxiStretch_hannWinFunctor___setLoopStart_28double_29;
 FUNCTION_TABLE[764] = maxiStretch_hannWinFunctor___setLoopEnd_28double_29;
 FUNCTION_TABLE[765] = maxiStretch_hannWinFunctor___getLoopEnd_28_29;
 FUNCTION_TABLE[766] = maxiStretch_hannWinFunctor___play_28double_2c_20double_2c_20double_2c_20int_2c_20double_29;
 FUNCTION_TABLE[767] = maxiStretch_hannWinFunctor___playAtPosition_28double_2c_20double_2c_20double_2c_20int_29;
 FUNCTION_TABLE[768] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__val_deleter_28emscripten__val_29;
 FUNCTION_TABLE[769] = std____2__shared_ptr_maxiTimeStretch_hannWinFunctor__20___shared_ptr_maxiTimeStretch_hannWinFunctor__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiTimeStretch_hannWinFunctor__20__20___val_deleter__28maxiTimeStretch_hannWinFunctor___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiTimeStretch_hannWinFunctor__20__20___val_deleter_2c_20std____2__enable_if_is_convertible_maxiTimeStretch_hannWinFunctor___2c_20maxiTimeStretch_hannWinFunctor_____value_2c_20std____2__shared_ptr_maxiTimeStretch_hannWinFunctor__20_____nat___type_29;
 FUNCTION_TABLE[770] = emscripten__internal__GenericBindingType_std____2__shared_ptr_maxiOsc__20___toWireType_28std____2__shared_ptr_maxiOsc____29;
 FUNCTION_TABLE[771] = void_20emscripten__internal__SetterPolicy_void_20_28maxiSettings____29_28int_29___set_maxiSettings__28void_20_28maxiSettings____20const__29_28int_29_2c_20maxiSettings__2c_20int_29;
 FUNCTION_TABLE[772] = emscripten__internal__MethodInvoker_double_20_28maxiOsc____29_28_29_2c_20double_2c_20maxiOsc____invoke_28double_20_28maxiOsc____20const__29_28_29_2c_20maxiOsc__29;
 FUNCTION_TABLE[773] = void_20emscripten__internal__SetterPolicy_void_20_28maxiEnvelope____29_28double_29___set_maxiEnvelope__28void_20_28maxiEnvelope____20const__29_28double_29_2c_20maxiEnvelope__2c_20double_29;
 FUNCTION_TABLE[774] = double_20const__20std____2__min_double__28double_20const__2c_20double_20const__29;
 FUNCTION_TABLE[775] = double_20const__20std____2__max_double__28double_20const__2c_20double_20const__29;
 FUNCTION_TABLE[776] = maxiGrain_hannWinFunctor___maxiGrain_28maxiSample__2c_20double_2c_20double_2c_20double_2c_20maxiGrainWindowCache_hannWinFunctor___29;
 FUNCTION_TABLE[777] = emscripten__internal__MethodInvoker_double_20_28maxiTimeStretch_hannWinFunctor_____29_28double_2c_20double_2c_20int_2c_20double_29_2c_20double_2c_20maxiTimeStretch_hannWinFunctor___2c_20double_2c_20double_2c_20int_2c_20double___invoke_28double_20_28maxiTimeStretch_hannWinFunctor_____20const__29_28double_2c_20double_2c_20int_2c_20double_29_2c_20maxiTimeStretch_hannWinFunctor___2c_20double_2c_20double_2c_20int_2c_20double_29;
 FUNCTION_TABLE[778] = emscripten__internal__MethodInvoker_double_20_28maxiTimeStretch_hannWinFunctor_____29_28double_2c_20double_2c_20int_29_2c_20double_2c_20maxiTimeStretch_hannWinFunctor___2c_20double_2c_20double_2c_20int___invoke_28double_20_28maxiTimeStretch_hannWinFunctor_____20const__29_28double_2c_20double_2c_20int_29_2c_20maxiTimeStretch_hannWinFunctor___2c_20double_2c_20double_2c_20int_29;
 FUNCTION_TABLE[779] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__val_deleter_28emscripten__val_29;
 FUNCTION_TABLE[780] = std____2__shared_ptr_maxiPitchShift_hannWinFunctor__20___shared_ptr_maxiPitchShift_hannWinFunctor__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiPitchShift_hannWinFunctor__20__20___val_deleter__28maxiPitchShift_hannWinFunctor___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiPitchShift_hannWinFunctor__20__20___val_deleter_2c_20std____2__enable_if_is_convertible_maxiPitchShift_hannWinFunctor___2c_20maxiPitchShift_hannWinFunctor_____value_2c_20std____2__shared_ptr_maxiPitchShift_hannWinFunctor__20_____nat___type_29;
 FUNCTION_TABLE[781] = emscripten__internal__GenericBindingType_std____2__shared_ptr_maxiOsc__20___toWireType_28std____2__shared_ptr_maxiOsc____29;
 FUNCTION_TABLE[782] = void_20emscripten__internal__SetterPolicy_void_20_28maxiSettings____29_28int_29___set_maxiSettings__28void_20_28maxiSettings____20const__29_28int_29_2c_20maxiSettings__2c_20int_29;
 FUNCTION_TABLE[783] = emscripten__internal__MethodInvoker_double_20_28maxiTimeStretch_hannWinFunctor_____29_28double_2c_20double_2c_20int_2c_20double_29_2c_20double_2c_20maxiTimeStretch_hannWinFunctor___2c_20double_2c_20double_2c_20int_2c_20double___invoke_28double_20_28maxiTimeStretch_hannWinFunctor_____20const__29_28double_2c_20double_2c_20int_2c_20double_29_2c_20maxiTimeStretch_hannWinFunctor___2c_20double_2c_20double_2c_20int_2c_20double_29;
 FUNCTION_TABLE[784] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__val_deleter_28emscripten__val_29;
 FUNCTION_TABLE[785] = std____2__shared_ptr_maxiStretch_hannWinFunctor__20___shared_ptr_maxiStretch_hannWinFunctor__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiStretch_hannWinFunctor__20__20___val_deleter__28maxiStretch_hannWinFunctor___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiStretch_hannWinFunctor__20__20___val_deleter_2c_20std____2__enable_if_is_convertible_maxiStretch_hannWinFunctor___2c_20maxiStretch_hannWinFunctor_____value_2c_20std____2__shared_ptr_maxiStretch_hannWinFunctor__20_____nat___type_29;
 FUNCTION_TABLE[786] = emscripten__internal__GenericBindingType_std____2__shared_ptr_maxiOsc__20___toWireType_28std____2__shared_ptr_maxiOsc____29;
 FUNCTION_TABLE[787] = void_20emscripten__internal__SetterPolicy_void_20_28maxiSettings____29_28int_29___set_maxiSettings__28void_20_28maxiSettings____20const__29_28int_29_2c_20maxiSettings__2c_20int_29;
 FUNCTION_TABLE[788] = emscripten__internal__MethodInvoker_double_20_28maxiOsc____29_28_29_2c_20double_2c_20maxiOsc____invoke_28double_20_28maxiOsc____20const__29_28_29_2c_20maxiOsc__29;
 FUNCTION_TABLE[789] = void_20emscripten__internal__SetterPolicy_void_20_28maxiEnvelope____29_28double_29___set_maxiEnvelope__28void_20_28maxiEnvelope____20const__29_28double_29_2c_20maxiEnvelope__2c_20double_29;
 FUNCTION_TABLE[790] = emscripten__internal__MethodInvoker_unsigned_20long_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____29_28_29_20const_2c_20unsigned_20long_2c_20std____2__vector_int_2c_20std____2__allocator_int__20__20const____invoke_28unsigned_20long_20_28std____2__vector_int_2c_20std____2__allocator_int__20_____20const__29_28_29_20const_2c_20std____2__vector_int_2c_20std____2__allocator_int__20__20const__29;
 FUNCTION_TABLE[791] = emscripten__internal__MethodInvoker_double_20_28maxiStretch_hannWinFunctor_____29_28double_2c_20double_2c_20double_2c_20int_2c_20double_29_2c_20double_2c_20maxiStretch_hannWinFunctor___2c_20double_2c_20double_2c_20double_2c_20int_2c_20double___invoke_28double_20_28maxiStretch_hannWinFunctor_____20const__29_28double_2c_20double_2c_20double_2c_20int_2c_20double_29_2c_20maxiStretch_hannWinFunctor___2c_20double_2c_20double_2c_20double_2c_20int_2c_20double_29;
 FUNCTION_TABLE[792] = emscripten__internal__MethodInvoker_double_20_28maxiStretch_hannWinFunctor_____29_28double_2c_20double_2c_20double_2c_20int_29_2c_20double_2c_20maxiStretch_hannWinFunctor___2c_20double_2c_20double_2c_20double_2c_20int___invoke_28double_20_28maxiStretch_hannWinFunctor_____20const__29_28double_2c_20double_2c_20double_2c_20int_29_2c_20maxiStretch_hannWinFunctor___2c_20double_2c_20double_2c_20double_2c_20int_29;
 FUNCTION_TABLE[793] = maxiGrainWindowCache_hannWinFunctor___getWindow_28unsigned_20int_29;
 FUNCTION_TABLE[794] = void_20const__20emscripten__internal__getActualType_maxiBits__28maxiBits__29;
 FUNCTION_TABLE[795] = void_20emscripten__internal__raw_destructor_vectorTools__28vectorTools__29;
 FUNCTION_TABLE[796] = emscripten__internal__Invoker_unsigned_20int_2c_20unsigned_20int___invoke_28unsigned_20int_20_28__29_28unsigned_20int_29_2c_20unsigned_20int_29;
 FUNCTION_TABLE[797] = unsigned_20char__20std____2____to_raw_pointer_unsigned_20char__28unsigned_20char__29;
 FUNCTION_TABLE[798] = emscripten__internal__Invoker_unsigned_20int_2c_20unsigned_20int_2c_20unsigned_20int___invoke_28unsigned_20int_20_28__29_28unsigned_20int_2c_20unsigned_20int_29_2c_20unsigned_20int_2c_20unsigned_20int_29;
 FUNCTION_TABLE[799] = maxiBits__at_28unsigned_20int_2c_20unsigned_20int_29;
 FUNCTION_TABLE[800] = maxiBits__shl_28unsigned_20int_2c_20unsigned_20int_29;
 FUNCTION_TABLE[801] = maxiBits__shr_28unsigned_20int_2c_20unsigned_20int_29;
 FUNCTION_TABLE[802] = emscripten__internal__Invoker_unsigned_20int_2c_20unsigned_20int_2c_20unsigned_20int_2c_20unsigned_20int___invoke_28unsigned_20int_20_28__29_28unsigned_20int_2c_20unsigned_20int_2c_20unsigned_20int_29_2c_20unsigned_20int_2c_20unsigned_20int_2c_20unsigned_20int_29;
 FUNCTION_TABLE[803] = maxiBits__r_28unsigned_20int_2c_20unsigned_20int_2c_20unsigned_20int_29;
 FUNCTION_TABLE[804] = maxiBits__land_28unsigned_20int_2c_20unsigned_20int_29;
 FUNCTION_TABLE[805] = maxiBits__lor_28unsigned_20int_2c_20unsigned_20int_29;
 FUNCTION_TABLE[806] = maxiBits__lxor_28unsigned_20int_2c_20unsigned_20int_29;
 FUNCTION_TABLE[807] = maxiBits__neg_28unsigned_20int_29;
 FUNCTION_TABLE[808] = maxiBits__inc_28unsigned_20int_29;
 FUNCTION_TABLE[809] = maxiBits__dec_28unsigned_20int_29;
 FUNCTION_TABLE[810] = maxiBits__add_28unsigned_20int_2c_20unsigned_20int_29;
 FUNCTION_TABLE[811] = maxiBits__sub_28unsigned_20int_2c_20unsigned_20int_29;
 FUNCTION_TABLE[812] = maxiBits__mul_28unsigned_20int_2c_20unsigned_20int_29;
 FUNCTION_TABLE[813] = maxiBits__div_28unsigned_20int_2c_20unsigned_20int_29;
 FUNCTION_TABLE[814] = maxiBits__gt_28unsigned_20int_2c_20unsigned_20int_29;
 FUNCTION_TABLE[815] = maxiBits__lt_28unsigned_20int_2c_20unsigned_20int_29;
 FUNCTION_TABLE[816] = maxiBits__gte_28unsigned_20int_2c_20unsigned_20int_29;
 FUNCTION_TABLE[817] = maxiBits__lte_28unsigned_20int_2c_20unsigned_20int_29;
 FUNCTION_TABLE[818] = std____2__char_traits_char___eq_int_type_28int_2c_20int_29;
 FUNCTION_TABLE[819] = emscripten__internal__Invoker_unsigned_20int___invoke_28unsigned_20int_20_28__29_28_29_29;
 FUNCTION_TABLE[820] = maxiBits__noise_28_29;
 FUNCTION_TABLE[821] = emscripten__internal__Invoker_double_2c_20int___invoke_28double_20_28__29_28int_29_2c_20int_29;
 FUNCTION_TABLE[822] = maxiBits__toSignal_28unsigned_20int_29;
 FUNCTION_TABLE[823] = maxiBits__toTrigSignal_28unsigned_20int_29;
 FUNCTION_TABLE[824] = emscripten__internal__Invoker_unsigned_20int_2c_20double___invoke_28unsigned_20int_20_28__29_28double_29_2c_20double_29;
 FUNCTION_TABLE[825] = maxiBits__fromSignal_28double_29;
 FUNCTION_TABLE[826] = void_20const__20emscripten__internal__getActualType_maxiTrigger__28maxiTrigger__29;
 FUNCTION_TABLE[827] = void_20emscripten__internal__raw_destructor_vectorTools__28vectorTools__29;
 FUNCTION_TABLE[828] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___get_28std____2__shared_ptr_maxiOsc__20const__29;
 FUNCTION_TABLE[829] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___construct_null_28_29;
 FUNCTION_TABLE[830] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiTrigger__20___share_28maxiTrigger__2c_20emscripten__internal___EM_VAL__29;
 FUNCTION_TABLE[831] = void_20emscripten__internal__raw_destructor_std____2__shared_ptr_maxiOsc__20__28std____2__shared_ptr_maxiOsc___29;
 FUNCTION_TABLE[832] = emscripten__internal__Invoker_std____2__shared_ptr_maxiTrigger__20___invoke_28std____2__shared_ptr_maxiTrigger__20_28__29_28_29_29;
 FUNCTION_TABLE[833] = std____2__enable_if___28is_array_maxiTrigger___value_29_2c_20std____2__shared_ptr_maxiTrigger__20___type_20std____2__make_shared_maxiTrigger__28_29;
 FUNCTION_TABLE[834] = maxiTrigger__onZX_28double_29;
 FUNCTION_TABLE[835] = maxiTrigger__onChanged_28double_2c_20double_29;
 FUNCTION_TABLE[836] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__val_deleter_28emscripten__val_29;
 FUNCTION_TABLE[837] = std____2__shared_ptr_maxiTrigger___shared_ptr_maxiTrigger_2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiTrigger__20___val_deleter__28maxiTrigger__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiTrigger__20___val_deleter_2c_20std____2__enable_if_is_convertible_maxiTrigger__2c_20maxiTrigger____value_2c_20std____2__shared_ptr_maxiTrigger_____nat___type_29;
 FUNCTION_TABLE[838] = emscripten__internal__GenericBindingType_std____2__shared_ptr_maxiOsc__20___toWireType_28std____2__shared_ptr_maxiOsc____29;
 FUNCTION_TABLE[839] = emscripten__internal__MethodInvoker_double_20_28maxiOsc____29_28double_29_2c_20double_2c_20maxiOsc__2c_20double___invoke_28double_20_28maxiOsc____20const__29_28double_29_2c_20maxiOsc__2c_20double_29;
 FUNCTION_TABLE[840] = emscripten__internal__MethodInvoker_double_20_28maxiOsc____29_28double_2c_20double_29_2c_20double_2c_20maxiOsc__2c_20double_2c_20double___invoke_28double_20_28maxiOsc____20const__29_28double_2c_20double_29_2c_20maxiOsc__2c_20double_2c_20double_29;
 FUNCTION_TABLE[841] = void_20const__20emscripten__internal__getActualType_maxiCounter__28maxiCounter__29;
 FUNCTION_TABLE[842] = void_20emscripten__internal__raw_destructor_vectorTools__28vectorTools__29;
 FUNCTION_TABLE[843] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___get_28std____2__shared_ptr_maxiOsc__20const__29;
 FUNCTION_TABLE[844] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___construct_null_28_29;
 FUNCTION_TABLE[845] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiCounter__20___share_28maxiCounter__2c_20emscripten__internal___EM_VAL__29;
 FUNCTION_TABLE[846] = void_20emscripten__internal__raw_destructor_std____2__shared_ptr_maxiOsc__20__28std____2__shared_ptr_maxiOsc___29;
 FUNCTION_TABLE[847] = emscripten__internal__Invoker_std____2__shared_ptr_maxiCounter__20___invoke_28std____2__shared_ptr_maxiCounter__20_28__29_28_29_29;
 FUNCTION_TABLE[848] = std____2__enable_if___28is_array_maxiCounter___value_29_2c_20std____2__shared_ptr_maxiCounter__20___type_20std____2__make_shared_maxiCounter__28_29;
 FUNCTION_TABLE[849] = maxiCounter__count_28double_2c_20double_29;
 FUNCTION_TABLE[850] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__val_deleter_28emscripten__val_29;
 FUNCTION_TABLE[851] = std____2__shared_ptr_maxiCounter___shared_ptr_maxiCounter_2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiCounter__20___val_deleter__28maxiCounter__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiCounter__20___val_deleter_2c_20std____2__enable_if_is_convertible_maxiCounter__2c_20maxiCounter____value_2c_20std____2__shared_ptr_maxiCounter_____nat___type_29;
 FUNCTION_TABLE[852] = emscripten__internal__GenericBindingType_std____2__shared_ptr_maxiOsc__20___toWireType_28std____2__shared_ptr_maxiOsc____29;
 FUNCTION_TABLE[853] = emscripten__internal__MethodInvoker_double_20_28maxiOsc____29_28double_2c_20double_29_2c_20double_2c_20maxiOsc__2c_20double_2c_20double___invoke_28double_20_28maxiOsc____20const__29_28double_2c_20double_29_2c_20maxiOsc__2c_20double_2c_20double_29;
 FUNCTION_TABLE[854] = void_20const__20emscripten__internal__getActualType_maxiIndex__28maxiIndex__29;
 FUNCTION_TABLE[855] = void_20emscripten__internal__raw_destructor_vectorTools__28vectorTools__29;
 FUNCTION_TABLE[856] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___get_28std____2__shared_ptr_maxiOsc__20const__29;
 FUNCTION_TABLE[857] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___construct_null_28_29;
 FUNCTION_TABLE[858] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiIndex__20___share_28maxiIndex__2c_20emscripten__internal___EM_VAL__29;
 FUNCTION_TABLE[859] = void_20emscripten__internal__raw_destructor_std____2__shared_ptr_maxiOsc__20__28std____2__shared_ptr_maxiOsc___29;
 FUNCTION_TABLE[860] = emscripten__internal__Invoker_std____2__shared_ptr_maxiIndex__20___invoke_28std____2__shared_ptr_maxiIndex__20_28__29_28_29_29;
 FUNCTION_TABLE[861] = std____2__enable_if___28is_array_maxiIndex___value_29_2c_20std____2__shared_ptr_maxiIndex__20___type_20std____2__make_shared_maxiIndex__28_29;
 FUNCTION_TABLE[862] = maxiIndex__pull_28double_2c_20double_2c_20std____2__vector_double_2c_20std____2__allocator_double__20__29;
 FUNCTION_TABLE[863] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__val_deleter_28emscripten__val_29;
 FUNCTION_TABLE[864] = std____2__shared_ptr_maxiIndex___shared_ptr_maxiIndex_2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiIndex__20___val_deleter__28maxiIndex__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiIndex__20___val_deleter_2c_20std____2__enable_if_is_convertible_maxiIndex__2c_20maxiIndex____value_2c_20std____2__shared_ptr_maxiIndex_____nat___type_29;
 FUNCTION_TABLE[865] = emscripten__internal__GenericBindingType_std____2__shared_ptr_maxiOsc__20___toWireType_28std____2__shared_ptr_maxiOsc____29;
 FUNCTION_TABLE[866] = emscripten__internal__MethodInvoker_double_20_28maxiKuramotoOscillator____29_28double_2c_20double_2c_20std____2__vector_double_2c_20std____2__allocator_double__20__29_2c_20double_2c_20maxiKuramotoOscillator__2c_20double_2c_20double_2c_20std____2__vector_double_2c_20std____2__allocator_double__20__20___invoke_28double_20_28maxiKuramotoOscillator____20const__29_28double_2c_20double_2c_20std____2__vector_double_2c_20std____2__allocator_double__20__29_2c_20maxiKuramotoOscillator__2c_20double_2c_20double_2c_20std____2__vector_double_2c_20std____2__allocator_double__20___29;
 FUNCTION_TABLE[867] = void_20const__20emscripten__internal__getActualType_maxiRatioSeq__28maxiRatioSeq__29;
 FUNCTION_TABLE[868] = void_20emscripten__internal__raw_destructor_vectorTools__28vectorTools__29;
 FUNCTION_TABLE[869] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___get_28std____2__shared_ptr_maxiOsc__20const__29;
 FUNCTION_TABLE[870] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___construct_null_28_29;
 FUNCTION_TABLE[871] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiRatioSeq__20___share_28maxiRatioSeq__2c_20emscripten__internal___EM_VAL__29;
 FUNCTION_TABLE[872] = void_20emscripten__internal__raw_destructor_std____2__shared_ptr_maxiOsc__20__28std____2__shared_ptr_maxiOsc___29;
 FUNCTION_TABLE[873] = emscripten__internal__Invoker_std____2__shared_ptr_maxiRatioSeq__20___invoke_28std____2__shared_ptr_maxiRatioSeq__20_28__29_28_29_29;
 FUNCTION_TABLE[874] = std____2__enable_if___28is_array_maxiRatioSeq___value_29_2c_20std____2__shared_ptr_maxiRatioSeq__20___type_20std____2__make_shared_maxiRatioSeq__28_29;
 FUNCTION_TABLE[875] = maxiRatioSeq__playTrig_28double_2c_20std____2__vector_double_2c_20std____2__allocator_double__20__29;
 FUNCTION_TABLE[876] = maxiRatioSeq__playValues_28double_2c_20std____2__vector_double_2c_20std____2__allocator_double__20__2c_20std____2__vector_double_2c_20std____2__allocator_double__20__29;
 FUNCTION_TABLE[877] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__val_deleter_28emscripten__val_29;
 FUNCTION_TABLE[878] = std____2__shared_ptr_maxiRatioSeq___shared_ptr_maxiRatioSeq_2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiRatioSeq__20___val_deleter__28maxiRatioSeq__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiRatioSeq__20___val_deleter_2c_20std____2__enable_if_is_convertible_maxiRatioSeq__2c_20maxiRatioSeq____value_2c_20std____2__shared_ptr_maxiRatioSeq_____nat___type_29;
 FUNCTION_TABLE[879] = emscripten__internal__GenericBindingType_std____2__shared_ptr_maxiOsc__20___toWireType_28std____2__shared_ptr_maxiOsc____29;
 FUNCTION_TABLE[880] = emscripten__internal__MethodInvoker_double_20_28maxiRatioSeq____29_28double_2c_20std____2__vector_double_2c_20std____2__allocator_double__20__29_2c_20double_2c_20maxiRatioSeq__2c_20double_2c_20std____2__vector_double_2c_20std____2__allocator_double__20__20___invoke_28double_20_28maxiRatioSeq____20const__29_28double_2c_20std____2__vector_double_2c_20std____2__allocator_double__20__29_2c_20maxiRatioSeq__2c_20double_2c_20std____2__vector_double_2c_20std____2__allocator_double__20___29;
 FUNCTION_TABLE[881] = emscripten__internal__MethodInvoker_double_20_28maxiRatioSeq____29_28double_2c_20std____2__vector_double_2c_20std____2__allocator_double__20__2c_20std____2__vector_double_2c_20std____2__allocator_double__20__29_2c_20double_2c_20maxiRatioSeq__2c_20double_2c_20std____2__vector_double_2c_20std____2__allocator_double__20__2c_20std____2__vector_double_2c_20std____2__allocator_double__20__20___invoke_28double_20_28maxiRatioSeq____20const__29_28double_2c_20std____2__vector_double_2c_20std____2__allocator_double__20__2c_20std____2__vector_double_2c_20std____2__allocator_double__20__29_2c_20maxiRatioSeq__2c_20double_2c_20std____2__vector_double_2c_20std____2__allocator_double__20___2c_20std____2__vector_double_2c_20std____2__allocator_double__20___29;
 FUNCTION_TABLE[882] = void_20const__20emscripten__internal__getActualType_maxiSatReverb__28maxiSatReverb__29;
 FUNCTION_TABLE[883] = void_20emscripten__internal__raw_destructor_maxiSatReverb__28maxiSatReverb__29;
 FUNCTION_TABLE[884] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___get_28std____2__shared_ptr_maxiOsc__20const__29;
 FUNCTION_TABLE[885] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___construct_null_28_29;
 FUNCTION_TABLE[886] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiSatReverb__20___share_28maxiSatReverb__2c_20emscripten__internal___EM_VAL__29;
 FUNCTION_TABLE[887] = void_20emscripten__internal__raw_destructor_std____2__shared_ptr_maxiOsc__20__28std____2__shared_ptr_maxiOsc___29;
 FUNCTION_TABLE[888] = emscripten__internal__Invoker_std____2__shared_ptr_maxiSatReverb__20___invoke_28std____2__shared_ptr_maxiSatReverb__20_28__29_28_29_29;
 FUNCTION_TABLE[889] = std____2__enable_if___28is_array_maxiSatReverb___value_29_2c_20std____2__shared_ptr_maxiSatReverb__20___type_20std____2__make_shared_maxiSatReverb__28_29;
 FUNCTION_TABLE[890] = maxiSatReverb__play_28double_29;
 FUNCTION_TABLE[891] = void_20const__20emscripten__internal__getActualType_maxiFreeVerb__28maxiFreeVerb__29;
 FUNCTION_TABLE[892] = void_20emscripten__internal__raw_destructor_maxiSatReverb__28maxiSatReverb__29;
 FUNCTION_TABLE[893] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___get_28std____2__shared_ptr_maxiOsc__20const__29;
 FUNCTION_TABLE[894] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___construct_null_28_29;
 FUNCTION_TABLE[895] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiFreeVerb__20___share_28maxiFreeVerb__2c_20emscripten__internal___EM_VAL__29;
 FUNCTION_TABLE[896] = void_20emscripten__internal__raw_destructor_std____2__shared_ptr_maxiOsc__20__28std____2__shared_ptr_maxiOsc___29;
 FUNCTION_TABLE[897] = emscripten__internal__Invoker_std____2__shared_ptr_maxiFreeVerb__20___invoke_28std____2__shared_ptr_maxiFreeVerb__20_28__29_28_29_29;
 FUNCTION_TABLE[898] = std____2__enable_if___28is_array_maxiFreeVerb___value_29_2c_20std____2__shared_ptr_maxiFreeVerb__20___type_20std____2__make_shared_maxiFreeVerb__28_29;
 FUNCTION_TABLE[899] = maxiFreeVerb__play_28double_2c_20double_2c_20double_29;
 FUNCTION_TABLE[900] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__val_deleter_28emscripten__val_29;
 FUNCTION_TABLE[901] = std____2__shared_ptr_maxiSatReverb___shared_ptr_maxiSatReverb_2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiSatReverb__20___val_deleter__28maxiSatReverb__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiSatReverb__20___val_deleter_2c_20std____2__enable_if_is_convertible_maxiSatReverb__2c_20maxiSatReverb____value_2c_20std____2__shared_ptr_maxiSatReverb_____nat___type_29;
 FUNCTION_TABLE[902] = emscripten__internal__GenericBindingType_std____2__shared_ptr_maxiOsc__20___toWireType_28std____2__shared_ptr_maxiOsc____29;
 FUNCTION_TABLE[903] = emscripten__internal__MethodInvoker_double_20_28maxiOsc____29_28double_29_2c_20double_2c_20maxiOsc__2c_20double___invoke_28double_20_28maxiOsc____20const__29_28double_29_2c_20maxiOsc__2c_20double_29;
 FUNCTION_TABLE[904] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__val_deleter_28emscripten__val_29;
 FUNCTION_TABLE[905] = std____2__shared_ptr_maxiFreeVerb___shared_ptr_maxiFreeVerb_2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiFreeVerb__20___val_deleter__28maxiFreeVerb__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiFreeVerb__20___val_deleter_2c_20std____2__enable_if_is_convertible_maxiFreeVerb__2c_20maxiFreeVerb____value_2c_20std____2__shared_ptr_maxiFreeVerb_____nat___type_29;
 FUNCTION_TABLE[906] = emscripten__internal__GenericBindingType_std____2__shared_ptr_maxiOsc__20___toWireType_28std____2__shared_ptr_maxiOsc____29;
 FUNCTION_TABLE[907] = emscripten__internal__MethodInvoker_double_20_28maxiOsc____29_28double_2c_20double_2c_20double_29_2c_20double_2c_20maxiOsc__2c_20double_2c_20double_2c_20double___invoke_28double_20_28maxiOsc____20const__29_28double_2c_20double_2c_20double_29_2c_20maxiOsc__2c_20double_2c_20double_2c_20double_29;
 FUNCTION_TABLE[908] = std____2____vector_base_double_2c_20std____2__allocator_double__20_____copy_assign_alloc_28std____2____vector_base_double_2c_20std____2__allocator_double__20__20const__29;
 FUNCTION_TABLE[909] = std____2____compressed_pair_double__2c_20std____2__allocator_double__20_____compressed_pair_std__nullptr_t_2c_20std____2__allocator_double__20__28std__nullptr_t___2c_20std____2__allocator_double____29;
 FUNCTION_TABLE[910] = void_20std____2__allocator_traits_std____2__allocator_int__20___construct_int_2c_20int_20const___28std____2__allocator_int___2c_20int__2c_20int_20const__29;
 FUNCTION_TABLE[911] = std____2__vector_int_2c_20std____2__allocator_int__20_____swap_out_circular_buffer_28std____2____split_buffer_int_2c_20std____2__allocator_int_____29;
 FUNCTION_TABLE[912] = std____2____split_buffer_int_2c_20std____2__allocator_int_______construct_at_end_28unsigned_20long_2c_20int_20const__29;
 FUNCTION_TABLE[913] = std____2____vector_base_double_2c_20std____2__allocator_double__20_____copy_assign_alloc_28std____2____vector_base_double_2c_20std____2__allocator_double__20__20const__29;
 FUNCTION_TABLE[914] = std____2__vector_int_2c_20std____2__allocator_int__20_____annotate_delete_28_29_20const;
 FUNCTION_TABLE[915] = emscripten__internal__BindingType_emscripten__val_2c_20void___toWireType_28emscripten__val_20const__29;
 FUNCTION_TABLE[916] = _emval_decref;
 FUNCTION_TABLE[917] = void_20std____2__allocator_traits_std____2__allocator_double__20___construct_double_2c_20double_20const___28std____2__allocator_double___2c_20double__2c_20double_20const__29;
 FUNCTION_TABLE[918] = std____2____split_buffer_double_2c_20std____2__allocator_double_______construct_at_end_28unsigned_20long_2c_20double_20const__29;
 FUNCTION_TABLE[919] = void_20std____2__allocator_traits_std____2__allocator_char__20___construct_char_2c_20char_20const___28std____2__allocator_char___2c_20char__2c_20char_20const__29;
 FUNCTION_TABLE[920] = std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20_____swap_out_circular_buffer_28std____2____split_buffer_unsigned_20char_2c_20std____2__allocator_unsigned_20char_____29;
 FUNCTION_TABLE[921] = std____2____split_buffer_char_2c_20std____2__allocator_char_______construct_at_end_28unsigned_20long_2c_20char_20const__29;
 FUNCTION_TABLE[922] = std____2____vector_base_double_2c_20std____2__allocator_double__20_____copy_assign_alloc_28std____2____vector_base_double_2c_20std____2__allocator_double__20__20const__29;
 FUNCTION_TABLE[923] = std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20_____annotate_delete_28_29_20const;
 FUNCTION_TABLE[924] = void_20std____2__allocator_traits_std____2__allocator_char__20___construct_char_2c_20char_20const___28std____2__allocator_char___2c_20char__2c_20char_20const__29;
 FUNCTION_TABLE[925] = std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char__20_____swap_out_circular_buffer_28std____2____split_buffer_unsigned_20char_2c_20std____2__allocator_unsigned_20char_____29;
 FUNCTION_TABLE[926] = std____2____split_buffer_char_2c_20std____2__allocator_char_______construct_at_end_28unsigned_20long_2c_20char_20const__29;
 FUNCTION_TABLE[927] = void_20std____2__allocator_traits_std____2__allocator_int__20___construct_int_2c_20int_20const___28std____2__allocator_int___2c_20int__2c_20int_20const__29;
 FUNCTION_TABLE[928] = std____2__vector_int_2c_20std____2__allocator_int__20_____swap_out_circular_buffer_28std____2____split_buffer_int_2c_20std____2__allocator_int_____29;
 FUNCTION_TABLE[929] = std____2____split_buffer_int_2c_20std____2__allocator_int_______construct_at_end_28unsigned_20long_2c_20int_20const__29;
 FUNCTION_TABLE[930] = operator_20new_28unsigned_20long_29;
 FUNCTION_TABLE[931] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__val_deleter_28emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_20const__29;
 FUNCTION_TABLE[932] = std____2____shared_ptr_pointer_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_2c_20std____2__allocator_maxiOsc__20_____shared_ptr_pointer_28maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_2c_20std____2__allocator_maxiOsc__29;
 FUNCTION_TABLE[933] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__operator_28_29_28void_20const__29;
 FUNCTION_TABLE[934] = __cxa_rethrow;
 FUNCTION_TABLE[935] = std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_____compressed_pair_maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__28maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter___29;
 FUNCTION_TABLE[936] = std____2____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20_____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20__28std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter____2c_20std____2__allocator_maxiOsc____29;
 FUNCTION_TABLE[937] = emscripten__val__operator__28emscripten__val___29;
 FUNCTION_TABLE[938] = _emval_call;
 FUNCTION_TABLE[939] = std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20_____shared_ptr_emplace_28std____2__allocator_maxiOsc__29;
 FUNCTION_TABLE[940] = std____2____compressed_pair_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20_____compressed_pair_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20____2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20__28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20____2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20____29;
 FUNCTION_TABLE[941] = std____2____compressed_pair_std____2__allocator_maxiOsc__2c_20maxiOsc_____compressed_pair_std____2__allocator_maxiOsc__2c_20true__28std____2__allocator_maxiOsc____29;
 FUNCTION_TABLE[942] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__val_deleter_28emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_20const__29;
 FUNCTION_TABLE[943] = std____2____shared_ptr_pointer_maxiEnvelope__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiEnvelope__20___val_deleter_2c_20std____2__allocator_maxiEnvelope__20_____shared_ptr_pointer_28maxiEnvelope__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiEnvelope__20___val_deleter_2c_20std____2__allocator_maxiEnvelope__29;
 FUNCTION_TABLE[944] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__operator_28_29_28void_20const__29;
 FUNCTION_TABLE[945] = std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_____compressed_pair_maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__28maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter___29;
 FUNCTION_TABLE[946] = std____2____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20_____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20__28std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter____2c_20std____2__allocator_maxiOsc____29;
 FUNCTION_TABLE[947] = std____2____shared_ptr_emplace_maxiEnvelope_2c_20std____2__allocator_maxiEnvelope__20_____shared_ptr_emplace_28std____2__allocator_maxiEnvelope__29;
 FUNCTION_TABLE[948] = std____2____compressed_pair_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20_____compressed_pair_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20____2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20__28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20____2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20____29;
 FUNCTION_TABLE[949] = std____2____compressed_pair_std____2__allocator_maxiEnvelope__2c_20maxiEnvelope_____compressed_pair_std____2__allocator_maxiEnvelope__2c_20true__28std____2__allocator_maxiEnvelope____29;
 FUNCTION_TABLE[950] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__val_deleter_28emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_20const__29;
 FUNCTION_TABLE[951] = std____2____shared_ptr_pointer_maxiDelayline__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiDelayline__20___val_deleter_2c_20std____2__allocator_maxiDelayline__20_____shared_ptr_pointer_28maxiDelayline__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiDelayline__20___val_deleter_2c_20std____2__allocator_maxiDelayline__29;
 FUNCTION_TABLE[952] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__operator_28_29_28void_20const__29;
 FUNCTION_TABLE[953] = std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_____compressed_pair_maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__28maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter___29;
 FUNCTION_TABLE[954] = std____2____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20_____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20__28std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter____2c_20std____2__allocator_maxiOsc____29;
 FUNCTION_TABLE[955] = std____2____shared_ptr_emplace_maxiDelayline_2c_20std____2__allocator_maxiDelayline__20_____shared_ptr_emplace_28std____2__allocator_maxiDelayline__29;
 FUNCTION_TABLE[956] = std____2____compressed_pair_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20_____compressed_pair_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20____2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20__28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20____2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20____29;
 FUNCTION_TABLE[957] = std____2____compressed_pair_std____2__allocator_maxiDelayline__2c_20maxiDelayline_____compressed_pair_std____2__allocator_maxiDelayline__2c_20true__28std____2__allocator_maxiDelayline____29;
 FUNCTION_TABLE[958] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__val_deleter_28emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_20const__29;
 FUNCTION_TABLE[959] = std____2____shared_ptr_pointer_maxiFilter__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiFilter__20___val_deleter_2c_20std____2__allocator_maxiFilter__20_____shared_ptr_pointer_28maxiFilter__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiFilter__20___val_deleter_2c_20std____2__allocator_maxiFilter__29;
 FUNCTION_TABLE[960] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__operator_28_29_28void_20const__29;
 FUNCTION_TABLE[961] = std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_____compressed_pair_maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__28maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter___29;
 FUNCTION_TABLE[962] = std____2____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20_____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20__28std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter____2c_20std____2__allocator_maxiOsc____29;
 FUNCTION_TABLE[963] = std____2____shared_ptr_emplace_maxiFilter_2c_20std____2__allocator_maxiFilter__20_____shared_ptr_emplace_28std____2__allocator_maxiFilter__29;
 FUNCTION_TABLE[964] = std____2____compressed_pair_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20_____compressed_pair_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20____2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20__28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20____2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20____29;
 FUNCTION_TABLE[965] = std____2____compressed_pair_std____2__allocator_maxiFilter__2c_20maxiFilter_____compressed_pair_std____2__allocator_maxiFilter__2c_20true__28std____2__allocator_maxiFilter____29;
 FUNCTION_TABLE[966] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__val_deleter_28emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_20const__29;
 FUNCTION_TABLE[967] = std____2____shared_ptr_pointer_maxiMix__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiMix__20___val_deleter_2c_20std____2__allocator_maxiMix__20_____shared_ptr_pointer_28maxiMix__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiMix__20___val_deleter_2c_20std____2__allocator_maxiMix__29;
 FUNCTION_TABLE[968] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__operator_28_29_28void_20const__29;
 FUNCTION_TABLE[969] = std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_____compressed_pair_maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__28maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter___29;
 FUNCTION_TABLE[970] = std____2____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20_____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20__28std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter____2c_20std____2__allocator_maxiOsc____29;
 FUNCTION_TABLE[971] = std____2____shared_ptr_emplace_maxiMix_2c_20std____2__allocator_maxiMix__20_____shared_ptr_emplace_28std____2__allocator_maxiMix__29;
 FUNCTION_TABLE[972] = std____2____compressed_pair_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20_____compressed_pair_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20____2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20__28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20____2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20____29;
 FUNCTION_TABLE[973] = std____2____compressed_pair_std____2__allocator_maxiMix__2c_20maxiMix_____compressed_pair_std____2__allocator_maxiMix__2c_20true__28std____2__allocator_maxiMix____29;
 FUNCTION_TABLE[974] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__val_deleter_28emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_20const__29;
 FUNCTION_TABLE[975] = std____2____shared_ptr_pointer_maxiLine__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiLine__20___val_deleter_2c_20std____2__allocator_maxiLine__20_____shared_ptr_pointer_28maxiLine__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiLine__20___val_deleter_2c_20std____2__allocator_maxiLine__29;
 FUNCTION_TABLE[976] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__operator_28_29_28void_20const__29;
 FUNCTION_TABLE[977] = std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_____compressed_pair_maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__28maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter___29;
 FUNCTION_TABLE[978] = std____2____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20_____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20__28std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter____2c_20std____2__allocator_maxiOsc____29;
 FUNCTION_TABLE[979] = std____2____shared_ptr_emplace_maxiLine_2c_20std____2__allocator_maxiLine__20_____shared_ptr_emplace_28std____2__allocator_maxiLine__29;
 FUNCTION_TABLE[980] = std____2____compressed_pair_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20_____compressed_pair_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20____2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20__28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20____2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20____29;
 FUNCTION_TABLE[981] = std____2____compressed_pair_std____2__allocator_maxiLine__2c_20maxiLine_____compressed_pair_std____2__allocator_maxiLine__2c_20true__28std____2__allocator_maxiLine____29;
 FUNCTION_TABLE[982] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__val_deleter_28emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_20const__29;
 FUNCTION_TABLE[983] = std____2____shared_ptr_pointer_maxiLagExp_double___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiLagExp_double__20__20___val_deleter_2c_20std____2__allocator_maxiLagExp_double__20__20_____shared_ptr_pointer_28maxiLagExp_double___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiLagExp_double__20__20___val_deleter_2c_20std____2__allocator_maxiLagExp_double__20__29;
 FUNCTION_TABLE[984] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__operator_28_29_28void_20const__29;
 FUNCTION_TABLE[985] = std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_____compressed_pair_maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__28maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter___29;
 FUNCTION_TABLE[986] = std____2____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20_____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20__28std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter____2c_20std____2__allocator_maxiOsc____29;
 FUNCTION_TABLE[987] = std____2____shared_ptr_emplace_maxiLagExp_double__2c_20std____2__allocator_maxiLagExp_double__20__20_____shared_ptr_emplace_28std____2__allocator_maxiLagExp_double__20__29;
 FUNCTION_TABLE[988] = std____2____compressed_pair_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20_____compressed_pair_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20____2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20__28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20____2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20____29;
 FUNCTION_TABLE[989] = std____2____compressed_pair_std____2__allocator_maxiLagExp_double__20__2c_20maxiLagExp_double__20_____compressed_pair_std____2__allocator_maxiLagExp_double__20__2c_20true__28std____2__allocator_maxiLagExp_double__20____29;
 FUNCTION_TABLE[990] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__val_deleter_28emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_20const__29;
 FUNCTION_TABLE[991] = std____2____shared_ptr_pointer_maxiSample__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiSample__20___val_deleter_2c_20std____2__allocator_maxiSample__20_____shared_ptr_pointer_28maxiSample__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiSample__20___val_deleter_2c_20std____2__allocator_maxiSample__29;
 FUNCTION_TABLE[992] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__operator_28_29_28void_20const__29;
 FUNCTION_TABLE[993] = std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_____compressed_pair_maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__28maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter___29;
 FUNCTION_TABLE[994] = std____2____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20_____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20__28std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter____2c_20std____2__allocator_maxiOsc____29;
 FUNCTION_TABLE[995] = std____2____shared_ptr_emplace_maxiSample_2c_20std____2__allocator_maxiSample__20_____shared_ptr_emplace_28std____2__allocator_maxiSample__29;
 FUNCTION_TABLE[996] = std____2____compressed_pair_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20_____compressed_pair_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20____2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20__28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20____2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20____29;
 FUNCTION_TABLE[997] = std____2____compressed_pair_std____2__allocator_maxiSample__2c_20maxiSample_____compressed_pair_std____2__allocator_maxiSample__2c_20true__28std____2__allocator_maxiSample____29;
 FUNCTION_TABLE[998] = maxiLagExp_double___maxiLagExp_28_29;
 FUNCTION_TABLE[999] = std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20_____compressed_pair_true_2c_20void__28_29;
 FUNCTION_TABLE[1e3] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__val_deleter_28emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_20const__29;
 FUNCTION_TABLE[1001] = std____2____shared_ptr_pointer_maxiMap__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiMap__20___val_deleter_2c_20std____2__allocator_maxiMap__20_____shared_ptr_pointer_28maxiMap__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiMap__20___val_deleter_2c_20std____2__allocator_maxiMap__29;
 FUNCTION_TABLE[1002] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__operator_28_29_28void_20const__29;
 FUNCTION_TABLE[1003] = std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_____compressed_pair_maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__28maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter___29;
 FUNCTION_TABLE[1004] = std____2____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20_____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20__28std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter____2c_20std____2__allocator_maxiOsc____29;
 FUNCTION_TABLE[1005] = std____2____shared_ptr_emplace_maxiMap_2c_20std____2__allocator_maxiMap__20_____shared_ptr_emplace_28std____2__allocator_maxiMap__29;
 FUNCTION_TABLE[1006] = std____2____compressed_pair_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20_____compressed_pair_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20____2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20__28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20____2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20____29;
 FUNCTION_TABLE[1007] = std____2____compressed_pair_std____2__allocator_maxiMap__2c_20maxiMap_____compressed_pair_std____2__allocator_maxiMap__2c_20true__28std____2__allocator_maxiMap____29;
 FUNCTION_TABLE[1008] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__val_deleter_28emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_20const__29;
 FUNCTION_TABLE[1009] = std____2____shared_ptr_pointer_maxiDyn__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiDyn__20___val_deleter_2c_20std____2__allocator_maxiDyn__20_____shared_ptr_pointer_28maxiDyn__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiDyn__20___val_deleter_2c_20std____2__allocator_maxiDyn__29;
 FUNCTION_TABLE[1010] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__operator_28_29_28void_20const__29;
 FUNCTION_TABLE[1011] = std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_____compressed_pair_maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__28maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter___29;
 FUNCTION_TABLE[1012] = std____2____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20_____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20__28std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter____2c_20std____2__allocator_maxiOsc____29;
 FUNCTION_TABLE[1013] = std____2____shared_ptr_emplace_maxiDyn_2c_20std____2__allocator_maxiDyn__20_____shared_ptr_emplace_28std____2__allocator_maxiDyn__29;
 FUNCTION_TABLE[1014] = std____2____compressed_pair_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20_____compressed_pair_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20____2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20__28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20____2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20____29;
 FUNCTION_TABLE[1015] = std____2____compressed_pair_std____2__allocator_maxiDyn__2c_20maxiDyn_____compressed_pair_std____2__allocator_maxiDyn__2c_20true__28std____2__allocator_maxiDyn____29;
 FUNCTION_TABLE[1016] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__val_deleter_28emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_20const__29;
 FUNCTION_TABLE[1017] = std____2____shared_ptr_pointer_maxiEnv__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiEnv__20___val_deleter_2c_20std____2__allocator_maxiEnv__20_____shared_ptr_pointer_28maxiEnv__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiEnv__20___val_deleter_2c_20std____2__allocator_maxiEnv__29;
 FUNCTION_TABLE[1018] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__operator_28_29_28void_20const__29;
 FUNCTION_TABLE[1019] = std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_____compressed_pair_maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__28maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter___29;
 FUNCTION_TABLE[1020] = std____2____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20_____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20__28std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter____2c_20std____2__allocator_maxiOsc____29;
 FUNCTION_TABLE[1021] = std____2____shared_ptr_emplace_maxiEnv_2c_20std____2__allocator_maxiEnv__20_____shared_ptr_emplace_28std____2__allocator_maxiEnv__29;
 FUNCTION_TABLE[1022] = std____2____compressed_pair_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20_____compressed_pair_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20____2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20__28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20____2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20____29;
 FUNCTION_TABLE[1023] = std____2____compressed_pair_std____2__allocator_maxiEnv__2c_20maxiEnv_____compressed_pair_std____2__allocator_maxiEnv__2c_20true__28std____2__allocator_maxiEnv____29;
 FUNCTION_TABLE[1024] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__val_deleter_28emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_20const__29;
 FUNCTION_TABLE[1025] = std____2____shared_ptr_pointer_convert__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_convert__20___val_deleter_2c_20std____2__allocator_convert__20_____shared_ptr_pointer_28convert__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_convert__20___val_deleter_2c_20std____2__allocator_convert__29;
 FUNCTION_TABLE[1026] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__operator_28_29_28void_20const__29;
 FUNCTION_TABLE[1027] = std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_____compressed_pair_maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__28maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter___29;
 FUNCTION_TABLE[1028] = std____2____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20_____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20__28std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter____2c_20std____2__allocator_maxiOsc____29;
 FUNCTION_TABLE[1029] = std____2____shared_ptr_emplace_convert_2c_20std____2__allocator_convert__20_____shared_ptr_emplace_28std____2__allocator_convert__29;
 FUNCTION_TABLE[1030] = std____2____compressed_pair_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20_____compressed_pair_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20____2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20__28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20____2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20____29;
 FUNCTION_TABLE[1031] = std____2____compressed_pair_std____2__allocator_maxiMap__2c_20maxiMap_____compressed_pair_std____2__allocator_maxiMap__2c_20true__28std____2__allocator_maxiMap____29;
 FUNCTION_TABLE[1032] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__val_deleter_28emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_20const__29;
 FUNCTION_TABLE[1033] = std____2____shared_ptr_pointer_maxiSampleAndHold__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiSampleAndHold__20___val_deleter_2c_20std____2__allocator_maxiSampleAndHold__20_____shared_ptr_pointer_28maxiSampleAndHold__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiSampleAndHold__20___val_deleter_2c_20std____2__allocator_maxiSampleAndHold__29;
 FUNCTION_TABLE[1034] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__operator_28_29_28void_20const__29;
 FUNCTION_TABLE[1035] = std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_____compressed_pair_maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__28maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter___29;
 FUNCTION_TABLE[1036] = std____2____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20_____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20__28std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter____2c_20std____2__allocator_maxiOsc____29;
 FUNCTION_TABLE[1037] = std____2____shared_ptr_emplace_maxiSampleAndHold_2c_20std____2__allocator_maxiSampleAndHold__20_____shared_ptr_emplace_28std____2__allocator_maxiSampleAndHold__29;
 FUNCTION_TABLE[1038] = std____2____compressed_pair_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20_____compressed_pair_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20____2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20__28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20____2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20____29;
 FUNCTION_TABLE[1039] = std____2____compressed_pair_std____2__allocator_maxiSampleAndHold__2c_20maxiSampleAndHold_____compressed_pair_std____2__allocator_maxiSampleAndHold__2c_20true__28std____2__allocator_maxiSampleAndHold____29;
 FUNCTION_TABLE[1040] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__val_deleter_28emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_20const__29;
 FUNCTION_TABLE[1041] = std____2____shared_ptr_pointer_maxiNonlinearity__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiNonlinearity__20___val_deleter_2c_20std____2__allocator_maxiNonlinearity__20_____shared_ptr_pointer_28maxiNonlinearity__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiNonlinearity__20___val_deleter_2c_20std____2__allocator_maxiNonlinearity__29;
 FUNCTION_TABLE[1042] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__operator_28_29_28void_20const__29;
 FUNCTION_TABLE[1043] = std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_____compressed_pair_maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__28maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter___29;
 FUNCTION_TABLE[1044] = std____2____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20_____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20__28std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter____2c_20std____2__allocator_maxiOsc____29;
 FUNCTION_TABLE[1045] = std____2____shared_ptr_emplace_maxiNonlinearity_2c_20std____2__allocator_maxiNonlinearity__20_____shared_ptr_emplace_28std____2__allocator_maxiNonlinearity__29;
 FUNCTION_TABLE[1046] = std____2____compressed_pair_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20_____compressed_pair_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20____2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20__28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20____2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20____29;
 FUNCTION_TABLE[1047] = std____2____compressed_pair_std____2__allocator_maxiMap__2c_20maxiMap_____compressed_pair_std____2__allocator_maxiMap__2c_20true__28std____2__allocator_maxiMap____29;
 FUNCTION_TABLE[1048] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__val_deleter_28emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_20const__29;
 FUNCTION_TABLE[1049] = std____2____shared_ptr_pointer_maxiFlanger__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiFlanger__20___val_deleter_2c_20std____2__allocator_maxiFlanger__20_____shared_ptr_pointer_28maxiFlanger__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiFlanger__20___val_deleter_2c_20std____2__allocator_maxiFlanger__29;
 FUNCTION_TABLE[1050] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__operator_28_29_28void_20const__29;
 FUNCTION_TABLE[1051] = std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_____compressed_pair_maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__28maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter___29;
 FUNCTION_TABLE[1052] = std____2____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20_____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20__28std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter____2c_20std____2__allocator_maxiOsc____29;
 FUNCTION_TABLE[1053] = std____2____shared_ptr_emplace_maxiFlanger_2c_20std____2__allocator_maxiFlanger__20_____shared_ptr_emplace_28std____2__allocator_maxiFlanger__29;
 FUNCTION_TABLE[1054] = std____2____compressed_pair_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20_____compressed_pair_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20____2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20__28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20____2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20____29;
 FUNCTION_TABLE[1055] = std____2____compressed_pair_std____2__allocator_maxiFlanger__2c_20maxiFlanger_____compressed_pair_std____2__allocator_maxiFlanger__2c_20true__28std____2__allocator_maxiFlanger____29;
 FUNCTION_TABLE[1056] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__val_deleter_28emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_20const__29;
 FUNCTION_TABLE[1057] = std____2____shared_ptr_pointer_maxiChorus__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiChorus__20___val_deleter_2c_20std____2__allocator_maxiChorus__20_____shared_ptr_pointer_28maxiChorus__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiChorus__20___val_deleter_2c_20std____2__allocator_maxiChorus__29;
 FUNCTION_TABLE[1058] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__operator_28_29_28void_20const__29;
 FUNCTION_TABLE[1059] = std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_____compressed_pair_maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__28maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter___29;
 FUNCTION_TABLE[1060] = std____2____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20_____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20__28std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter____2c_20std____2__allocator_maxiOsc____29;
 FUNCTION_TABLE[1061] = std____2____shared_ptr_emplace_maxiChorus_2c_20std____2__allocator_maxiChorus__20_____shared_ptr_emplace_28std____2__allocator_maxiChorus__29;
 FUNCTION_TABLE[1062] = std____2____compressed_pair_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20_____compressed_pair_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20____2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20__28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20____2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20____29;
 FUNCTION_TABLE[1063] = std____2____compressed_pair_std____2__allocator_maxiChorus__2c_20maxiChorus_____compressed_pair_std____2__allocator_maxiChorus__2c_20true__28std____2__allocator_maxiChorus____29;
 FUNCTION_TABLE[1064] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__val_deleter_28emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_20const__29;
 FUNCTION_TABLE[1065] = std____2____shared_ptr_pointer_maxiDCBlocker__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiDCBlocker__20___val_deleter_2c_20std____2__allocator_maxiDCBlocker__20_____shared_ptr_pointer_28maxiDCBlocker__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiDCBlocker__20___val_deleter_2c_20std____2__allocator_maxiDCBlocker__29;
 FUNCTION_TABLE[1066] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__operator_28_29_28void_20const__29;
 FUNCTION_TABLE[1067] = std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_____compressed_pair_maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__28maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter___29;
 FUNCTION_TABLE[1068] = std____2____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20_____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20__28std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter____2c_20std____2__allocator_maxiOsc____29;
 FUNCTION_TABLE[1069] = std____2____shared_ptr_emplace_maxiDCBlocker_2c_20std____2__allocator_maxiDCBlocker__20_____shared_ptr_emplace_28std____2__allocator_maxiDCBlocker__29;
 FUNCTION_TABLE[1070] = std____2____compressed_pair_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20_____compressed_pair_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20____2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20__28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20____2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20____29;
 FUNCTION_TABLE[1071] = std____2____compressed_pair_std____2__allocator_maxiDCBlocker__2c_20maxiDCBlocker_____compressed_pair_std____2__allocator_maxiDCBlocker__2c_20true__28std____2__allocator_maxiDCBlocker____29;
 FUNCTION_TABLE[1072] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__val_deleter_28emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_20const__29;
 FUNCTION_TABLE[1073] = std____2____shared_ptr_pointer_maxiSVF__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiSVF__20___val_deleter_2c_20std____2__allocator_maxiSVF__20_____shared_ptr_pointer_28maxiSVF__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiSVF__20___val_deleter_2c_20std____2__allocator_maxiSVF__29;
 FUNCTION_TABLE[1074] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__operator_28_29_28void_20const__29;
 FUNCTION_TABLE[1075] = std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_____compressed_pair_maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__28maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter___29;
 FUNCTION_TABLE[1076] = std____2____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20_____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20__28std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter____2c_20std____2__allocator_maxiOsc____29;
 FUNCTION_TABLE[1077] = std____2____shared_ptr_emplace_maxiSVF_2c_20std____2__allocator_maxiSVF__20_____shared_ptr_emplace_28std____2__allocator_maxiSVF__29;
 FUNCTION_TABLE[1078] = std____2____compressed_pair_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20_____compressed_pair_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20____2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20__28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20____2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20____29;
 FUNCTION_TABLE[1079] = std____2____compressed_pair_std____2__allocator_maxiSVF__2c_20maxiSVF_____compressed_pair_std____2__allocator_maxiSVF__2c_20true__28std____2__allocator_maxiSVF____29;
 FUNCTION_TABLE[1080] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__val_deleter_28emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_20const__29;
 FUNCTION_TABLE[1081] = std____2____shared_ptr_pointer_maxiMath__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiMath__20___val_deleter_2c_20std____2__allocator_maxiMath__20_____shared_ptr_pointer_28maxiMath__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiMath__20___val_deleter_2c_20std____2__allocator_maxiMath__29;
 FUNCTION_TABLE[1082] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__operator_28_29_28void_20const__29;
 FUNCTION_TABLE[1083] = std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_____compressed_pair_maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__28maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter___29;
 FUNCTION_TABLE[1084] = std____2____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20_____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20__28std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter____2c_20std____2__allocator_maxiOsc____29;
 FUNCTION_TABLE[1085] = std____2____shared_ptr_emplace_maxiMath_2c_20std____2__allocator_maxiMath__20_____shared_ptr_emplace_28std____2__allocator_maxiMath__29;
 FUNCTION_TABLE[1086] = std____2____compressed_pair_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20_____compressed_pair_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20____2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20__28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20____2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20____29;
 FUNCTION_TABLE[1087] = std____2____compressed_pair_std____2__allocator_maxiMap__2c_20maxiMap_____compressed_pair_std____2__allocator_maxiMap__2c_20true__28std____2__allocator_maxiMap____29;
 FUNCTION_TABLE[1088] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__val_deleter_28emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_20const__29;
 FUNCTION_TABLE[1089] = std____2____shared_ptr_pointer_maxiClock__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiClock__20___val_deleter_2c_20std____2__allocator_maxiClock__20_____shared_ptr_pointer_28maxiClock__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiClock__20___val_deleter_2c_20std____2__allocator_maxiClock__29;
 FUNCTION_TABLE[1090] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__operator_28_29_28void_20const__29;
 FUNCTION_TABLE[1091] = std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_____compressed_pair_maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__28maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter___29;
 FUNCTION_TABLE[1092] = std____2____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20_____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20__28std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter____2c_20std____2__allocator_maxiOsc____29;
 FUNCTION_TABLE[1093] = std____2____shared_ptr_emplace_maxiClock_2c_20std____2__allocator_maxiClock__20_____shared_ptr_emplace_28std____2__allocator_maxiClock__29;
 FUNCTION_TABLE[1094] = std____2____compressed_pair_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20_____compressed_pair_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20____2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20__28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20____2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20____29;
 FUNCTION_TABLE[1095] = std____2____compressed_pair_std____2__allocator_maxiClock__2c_20maxiClock_____compressed_pair_std____2__allocator_maxiClock__2c_20true__28std____2__allocator_maxiClock____29;
 FUNCTION_TABLE[1096] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__val_deleter_28emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_20const__29;
 FUNCTION_TABLE[1097] = std____2____shared_ptr_pointer_maxiKuramotoOscillator__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiKuramotoOscillator__20___val_deleter_2c_20std____2__allocator_maxiKuramotoOscillator__20_____shared_ptr_pointer_28maxiKuramotoOscillator__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiKuramotoOscillator__20___val_deleter_2c_20std____2__allocator_maxiKuramotoOscillator__29;
 FUNCTION_TABLE[1098] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__operator_28_29_28void_20const__29;
 FUNCTION_TABLE[1099] = std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_____compressed_pair_maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__28maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter___29;
 FUNCTION_TABLE[1100] = std____2____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20_____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20__28std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter____2c_20std____2__allocator_maxiOsc____29;
 FUNCTION_TABLE[1101] = std____2____shared_ptr_emplace_maxiKuramotoOscillator_2c_20std____2__allocator_maxiKuramotoOscillator__20_____shared_ptr_emplace_28std____2__allocator_maxiKuramotoOscillator__29;
 FUNCTION_TABLE[1102] = std____2____compressed_pair_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20_____compressed_pair_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20____2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20__28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20____2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20____29;
 FUNCTION_TABLE[1103] = std____2____compressed_pair_std____2__allocator_maxiKuramotoOscillator__2c_20maxiKuramotoOscillator_____compressed_pair_std____2__allocator_maxiKuramotoOscillator__2c_20true__28std____2__allocator_maxiKuramotoOscillator____29;
 FUNCTION_TABLE[1104] = std____2__vector_maxiKuramotoOscillator_2c_20std____2__allocator_maxiKuramotoOscillator__20_____annotate_delete_28_29_20const;
 FUNCTION_TABLE[1105] = std____2____vector_base_double_2c_20std____2__allocator_double__20_____copy_assign_alloc_28std____2____vector_base_double_2c_20std____2__allocator_double__20__20const__29;
 FUNCTION_TABLE[1106] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__val_deleter_28emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_20const__29;
 FUNCTION_TABLE[1107] = std____2____shared_ptr_pointer_maxiKuramotoOscillatorSet__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiKuramotoOscillatorSet__20___val_deleter_2c_20std____2__allocator_maxiKuramotoOscillatorSet__20_____shared_ptr_pointer_28maxiKuramotoOscillatorSet__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiKuramotoOscillatorSet__20___val_deleter_2c_20std____2__allocator_maxiKuramotoOscillatorSet__29;
 FUNCTION_TABLE[1108] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__operator_28_29_28void_20const__29;
 FUNCTION_TABLE[1109] = std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_____compressed_pair_maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__28maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter___29;
 FUNCTION_TABLE[1110] = std____2____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20_____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20__28std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter____2c_20std____2__allocator_maxiOsc____29;
 FUNCTION_TABLE[1111] = std____2____shared_ptr_emplace_maxiKuramotoOscillatorSet_2c_20std____2__allocator_maxiKuramotoOscillatorSet__20_____shared_ptr_emplace_unsigned_20long_20const__28std____2__allocator_maxiKuramotoOscillatorSet__2c_20unsigned_20long_20const___29;
 FUNCTION_TABLE[1112] = std____2____compressed_pair_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20_____compressed_pair_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20____2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20__28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20____2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20____29;
 FUNCTION_TABLE[1113] = std____2____compressed_pair_std____2__allocator_maxiKuramotoOscillatorSet__2c_20maxiKuramotoOscillatorSet_____compressed_pair_std____2__allocator_maxiKuramotoOscillatorSet___2c_20unsigned_20long_20const____28std____2__piecewise_construct_t_2c_20std____2__tuple_std____2__allocator_maxiKuramotoOscillatorSet____2c_20std____2__tuple_unsigned_20long_20const____29;
 FUNCTION_TABLE[1114] = std____2__vector_maxiKuramotoOscillator_2c_20std____2__allocator_maxiKuramotoOscillator__20___resize_28unsigned_20long_29;
 FUNCTION_TABLE[1115] = std____2____compressed_pair_unsigned_20char__2c_20std____2__allocator_unsigned_20char__20_____compressed_pair_std__nullptr_t_2c_20true__28std__nullptr_t___29;
 FUNCTION_TABLE[1116] = std____2____split_buffer_maxiKuramotoOscillator_2c_20std____2__allocator_maxiKuramotoOscillator_______construct_at_end_28unsigned_20long_29;
 FUNCTION_TABLE[1117] = std____2__vector_maxiKuramotoOscillator_2c_20std____2__allocator_maxiKuramotoOscillator__20_____swap_out_circular_buffer_28std____2____split_buffer_maxiKuramotoOscillator_2c_20std____2__allocator_maxiKuramotoOscillator_____29;
 FUNCTION_TABLE[1118] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__val_deleter_28emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_20const__29;
 FUNCTION_TABLE[1119] = std____2____shared_ptr_pointer_maxiAsyncKuramotoOscillator__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiAsyncKuramotoOscillator__20___val_deleter_2c_20std____2__allocator_maxiAsyncKuramotoOscillator__20_____shared_ptr_pointer_28maxiAsyncKuramotoOscillator__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiAsyncKuramotoOscillator__20___val_deleter_2c_20std____2__allocator_maxiAsyncKuramotoOscillator__29;
 FUNCTION_TABLE[1120] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__operator_28_29_28void_20const__29;
 FUNCTION_TABLE[1121] = std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_____compressed_pair_maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__28maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter___29;
 FUNCTION_TABLE[1122] = std____2____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20_____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20__28std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter____2c_20std____2__allocator_maxiOsc____29;
 FUNCTION_TABLE[1123] = std____2____shared_ptr_emplace_maxiAsyncKuramotoOscillator_2c_20std____2__allocator_maxiAsyncKuramotoOscillator__20_____shared_ptr_emplace_unsigned_20long_20const__28std____2__allocator_maxiAsyncKuramotoOscillator__2c_20unsigned_20long_20const___29;
 FUNCTION_TABLE[1124] = std____2____compressed_pair_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20_____compressed_pair_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20____2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20__28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20____2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20____29;
 FUNCTION_TABLE[1125] = std____2____compressed_pair_std____2__allocator_maxiAsyncKuramotoOscillator__2c_20maxiAsyncKuramotoOscillator_____compressed_pair_std____2__allocator_maxiAsyncKuramotoOscillator___2c_20unsigned_20long_20const____28std____2__piecewise_construct_t_2c_20std____2__tuple_std____2__allocator_maxiAsyncKuramotoOscillator____2c_20std____2__tuple_unsigned_20long_20const____29;
 FUNCTION_TABLE[1126] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__val_deleter_28emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_20const__29;
 FUNCTION_TABLE[1127] = std____2____shared_ptr_pointer_maxiFFT__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiFFT__20___val_deleter_2c_20std____2__allocator_maxiFFT__20_____shared_ptr_pointer_28maxiFFT__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiFFT__20___val_deleter_2c_20std____2__allocator_maxiFFT__29;
 FUNCTION_TABLE[1128] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__operator_28_29_28void_20const__29;
 FUNCTION_TABLE[1129] = std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_____compressed_pair_maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__28maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter___29;
 FUNCTION_TABLE[1130] = std____2____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20_____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20__28std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter____2c_20std____2__allocator_maxiOsc____29;
 FUNCTION_TABLE[1131] = std____2____shared_ptr_emplace_maxiFFT_2c_20std____2__allocator_maxiFFT__20_____shared_ptr_emplace_28std____2__allocator_maxiFFT__29;
 FUNCTION_TABLE[1132] = std____2____compressed_pair_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20_____compressed_pair_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20____2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20__28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20____2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20____29;
 FUNCTION_TABLE[1133] = std____2____compressed_pair_std____2__allocator_maxiFFT__2c_20maxiFFT_____compressed_pair_std____2__allocator_maxiFFT__2c_20true__28std____2__allocator_maxiFFT____29;
 FUNCTION_TABLE[1134] = std____2__vector_float_2c_20std____2__allocator_float__20___vector_28std____2__vector_float_2c_20std____2__allocator_float__20__20const__29;
 FUNCTION_TABLE[1135] = std____2__vector_float_2c_20std____2__allocator_float__20_____vallocate_28unsigned_20long_29;
 FUNCTION_TABLE[1136] = std____2__enable_if___is_forward_iterator_double____value_2c_20void___type_20std____2__vector_double_2c_20std____2__allocator_double__20_____construct_at_end_double___28double__2c_20double__2c_20unsigned_20long_29;
 FUNCTION_TABLE[1137] = std____2____compressed_pair_double__2c_20std____2__allocator_double__20_____compressed_pair_std__nullptr_t_2c_20std____2__allocator_double__20__28std__nullptr_t___2c_20std____2__allocator_double____29;
 FUNCTION_TABLE[1138] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__val_deleter_28emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_20const__29;
 FUNCTION_TABLE[1139] = std____2____shared_ptr_pointer_maxiIFFT__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiIFFT__20___val_deleter_2c_20std____2__allocator_maxiIFFT__20_____shared_ptr_pointer_28maxiIFFT__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiIFFT__20___val_deleter_2c_20std____2__allocator_maxiIFFT__29;
 FUNCTION_TABLE[1140] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__operator_28_29_28void_20const__29;
 FUNCTION_TABLE[1141] = std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_____compressed_pair_maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__28maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter___29;
 FUNCTION_TABLE[1142] = std____2____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20_____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20__28std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter____2c_20std____2__allocator_maxiOsc____29;
 FUNCTION_TABLE[1143] = std____2____shared_ptr_emplace_maxiIFFT_2c_20std____2__allocator_maxiIFFT__20_____shared_ptr_emplace_28std____2__allocator_maxiIFFT__29;
 FUNCTION_TABLE[1144] = std____2____compressed_pair_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20_____compressed_pair_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20____2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20__28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20____2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20____29;
 FUNCTION_TABLE[1145] = std____2____compressed_pair_std____2__allocator_maxiIFFT__2c_20maxiIFFT_____compressed_pair_std____2__allocator_maxiIFFT__2c_20true__28std____2__allocator_maxiIFFT____29;
 FUNCTION_TABLE[1146] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__val_deleter_28emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_20const__29;
 FUNCTION_TABLE[1147] = std____2____shared_ptr_pointer_maxiMFCCAnalyser_double___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiMFCCAnalyser_double__20__20___val_deleter_2c_20std____2__allocator_maxiMFCCAnalyser_double__20__20_____shared_ptr_pointer_28maxiMFCCAnalyser_double___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiMFCCAnalyser_double__20__20___val_deleter_2c_20std____2__allocator_maxiMFCCAnalyser_double__20__29;
 FUNCTION_TABLE[1148] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__operator_28_29_28void_20const__29;
 FUNCTION_TABLE[1149] = std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_____compressed_pair_maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__28maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter___29;
 FUNCTION_TABLE[1150] = std____2____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20_____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20__28std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter____2c_20std____2__allocator_maxiOsc____29;
 FUNCTION_TABLE[1151] = std____2____shared_ptr_emplace_maxiMFCCAnalyser_double__2c_20std____2__allocator_maxiMFCCAnalyser_double__20__20_____shared_ptr_emplace_28std____2__allocator_maxiMFCCAnalyser_double__20__29;
 FUNCTION_TABLE[1152] = std____2____compressed_pair_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20_____compressed_pair_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20____2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20__28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20____2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20____29;
 FUNCTION_TABLE[1153] = std____2____compressed_pair_std____2__allocator_maxiMFCCAnalyser_double__20__2c_20maxiMFCCAnalyser_double__20_____compressed_pair_std____2__allocator_maxiMFCCAnalyser_double__20__2c_20true__28std____2__allocator_maxiMFCCAnalyser_double__20____29;
 FUNCTION_TABLE[1154] = std____2__vector_double_2c_20std____2__allocator_double__20___vector_28std____2__vector_double_2c_20std____2__allocator_double__20__20const__29;
 FUNCTION_TABLE[1155] = std____2____vector_base_double_2c_20std____2__allocator_double__20_____copy_assign_alloc_28std____2____vector_base_double_2c_20std____2__allocator_double__20__20const__29;
 FUNCTION_TABLE[1156] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__val_deleter_28emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_20const__29;
 FUNCTION_TABLE[1157] = std____2____shared_ptr_pointer_maxiTimeStretch_hannWinFunctor___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiTimeStretch_hannWinFunctor__20__20___val_deleter_2c_20std____2__allocator_maxiTimeStretch_hannWinFunctor__20__20_____shared_ptr_pointer_28maxiTimeStretch_hannWinFunctor___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiTimeStretch_hannWinFunctor__20__20___val_deleter_2c_20std____2__allocator_maxiTimeStretch_hannWinFunctor__20__29;
 FUNCTION_TABLE[1158] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__operator_28_29_28void_20const__29;
 FUNCTION_TABLE[1159] = std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_____compressed_pair_maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__28maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter___29;
 FUNCTION_TABLE[1160] = std____2____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20_____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20__28std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter____2c_20std____2__allocator_maxiOsc____29;
 FUNCTION_TABLE[1161] = std____2____shared_ptr_emplace_maxiTimeStretch_hannWinFunctor__2c_20std____2__allocator_maxiTimeStretch_hannWinFunctor__20__20_____shared_ptr_emplace_28std____2__allocator_maxiTimeStretch_hannWinFunctor__20__29;
 FUNCTION_TABLE[1162] = std____2____compressed_pair_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20_____compressed_pair_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20____2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20__28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20____2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20____29;
 FUNCTION_TABLE[1163] = std____2____compressed_pair_std____2__allocator_maxiTimeStretch_hannWinFunctor__20__2c_20maxiTimeStretch_hannWinFunctor__20_____compressed_pair_std____2__allocator_maxiTimeStretch_hannWinFunctor__20__2c_20true__28std____2__allocator_maxiTimeStretch_hannWinFunctor__20____29;
 FUNCTION_TABLE[1164] = std____2____compressed_pair_unsigned_20long_2c_20std____2__allocator_std____2____list_node_maxiGrainBase__2c_20void___20__20_____compressed_pair_int_2c_20true__28int___29;
 FUNCTION_TABLE[1165] = void_20std____2__allocator_traits_std____2__allocator_int__20___construct_int_2c_20int_20const___28std____2__allocator_int___2c_20int__2c_20int_20const__29;
 FUNCTION_TABLE[1166] = std____2____compressed_pair_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20_____compressed_pair_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20____2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20__28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20____2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20____29;
 FUNCTION_TABLE[1167] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__val_deleter_28emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_20const__29;
 FUNCTION_TABLE[1168] = std____2____shared_ptr_pointer_maxiPitchShift_hannWinFunctor___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiPitchShift_hannWinFunctor__20__20___val_deleter_2c_20std____2__allocator_maxiPitchShift_hannWinFunctor__20__20_____shared_ptr_pointer_28maxiPitchShift_hannWinFunctor___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiPitchShift_hannWinFunctor__20__20___val_deleter_2c_20std____2__allocator_maxiPitchShift_hannWinFunctor__20__29;
 FUNCTION_TABLE[1169] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__operator_28_29_28void_20const__29;
 FUNCTION_TABLE[1170] = std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_____compressed_pair_maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__28maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter___29;
 FUNCTION_TABLE[1171] = std____2____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20_____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20__28std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter____2c_20std____2__allocator_maxiOsc____29;
 FUNCTION_TABLE[1172] = std____2____shared_ptr_emplace_maxiPitchShift_hannWinFunctor__2c_20std____2__allocator_maxiPitchShift_hannWinFunctor__20__20_____shared_ptr_emplace_28std____2__allocator_maxiPitchShift_hannWinFunctor__20__29;
 FUNCTION_TABLE[1173] = std____2____compressed_pair_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20_____compressed_pair_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20____2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20__28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20____2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20____29;
 FUNCTION_TABLE[1174] = std____2____compressed_pair_std____2__allocator_maxiPitchShift_hannWinFunctor__20__2c_20maxiPitchShift_hannWinFunctor__20_____compressed_pair_std____2__allocator_maxiPitchShift_hannWinFunctor__20__2c_20true__28std____2__allocator_maxiPitchShift_hannWinFunctor__20____29;
 FUNCTION_TABLE[1175] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__val_deleter_28emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_20const__29;
 FUNCTION_TABLE[1176] = std____2____shared_ptr_pointer_maxiStretch_hannWinFunctor___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiStretch_hannWinFunctor__20__20___val_deleter_2c_20std____2__allocator_maxiStretch_hannWinFunctor__20__20_____shared_ptr_pointer_28maxiStretch_hannWinFunctor___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiStretch_hannWinFunctor__20__20___val_deleter_2c_20std____2__allocator_maxiStretch_hannWinFunctor__20__29;
 FUNCTION_TABLE[1177] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__operator_28_29_28void_20const__29;
 FUNCTION_TABLE[1178] = std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_____compressed_pair_maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__28maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter___29;
 FUNCTION_TABLE[1179] = std____2____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20_____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20__28std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter____2c_20std____2__allocator_maxiOsc____29;
 FUNCTION_TABLE[1180] = std____2____shared_ptr_emplace_maxiStretch_hannWinFunctor__2c_20std____2__allocator_maxiStretch_hannWinFunctor__20__20_____shared_ptr_emplace_28std____2__allocator_maxiStretch_hannWinFunctor__20__29;
 FUNCTION_TABLE[1181] = std____2____compressed_pair_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20_____compressed_pair_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20____2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20__28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20____2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20____29;
 FUNCTION_TABLE[1182] = std____2____compressed_pair_std____2__allocator_maxiStretch_hannWinFunctor__20__2c_20maxiStretch_hannWinFunctor__20_____compressed_pair_std____2__allocator_maxiStretch_hannWinFunctor__20__2c_20true__28std____2__allocator_maxiStretch_hannWinFunctor__20____29;
 FUNCTION_TABLE[1183] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__val_deleter_28emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_20const__29;
 FUNCTION_TABLE[1184] = std____2____shared_ptr_pointer_maxiTrigger__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiTrigger__20___val_deleter_2c_20std____2__allocator_maxiTrigger__20_____shared_ptr_pointer_28maxiTrigger__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiTrigger__20___val_deleter_2c_20std____2__allocator_maxiTrigger__29;
 FUNCTION_TABLE[1185] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__operator_28_29_28void_20const__29;
 FUNCTION_TABLE[1186] = std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_____compressed_pair_maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__28maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter___29;
 FUNCTION_TABLE[1187] = std____2____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20_____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20__28std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter____2c_20std____2__allocator_maxiOsc____29;
 FUNCTION_TABLE[1188] = std____2____shared_ptr_emplace_maxiTrigger_2c_20std____2__allocator_maxiTrigger__20_____shared_ptr_emplace_28std____2__allocator_maxiTrigger__29;
 FUNCTION_TABLE[1189] = std____2____compressed_pair_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20_____compressed_pair_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20____2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20__28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20____2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20____29;
 FUNCTION_TABLE[1190] = std____2____compressed_pair_std____2__allocator_maxiTrigger__2c_20maxiTrigger_____compressed_pair_std____2__allocator_maxiTrigger__2c_20true__28std____2__allocator_maxiTrigger____29;
 FUNCTION_TABLE[1191] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__val_deleter_28emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_20const__29;
 FUNCTION_TABLE[1192] = std____2____shared_ptr_pointer_maxiCounter__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiCounter__20___val_deleter_2c_20std____2__allocator_maxiCounter__20_____shared_ptr_pointer_28maxiCounter__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiCounter__20___val_deleter_2c_20std____2__allocator_maxiCounter__29;
 FUNCTION_TABLE[1193] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__operator_28_29_28void_20const__29;
 FUNCTION_TABLE[1194] = std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_____compressed_pair_maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__28maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter___29;
 FUNCTION_TABLE[1195] = std____2____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20_____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20__28std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter____2c_20std____2__allocator_maxiOsc____29;
 FUNCTION_TABLE[1196] = std____2____shared_ptr_emplace_maxiCounter_2c_20std____2__allocator_maxiCounter__20_____shared_ptr_emplace_28std____2__allocator_maxiCounter__29;
 FUNCTION_TABLE[1197] = std____2____compressed_pair_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20_____compressed_pair_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20____2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20__28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20____2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20____29;
 FUNCTION_TABLE[1198] = std____2____compressed_pair_std____2__allocator_maxiCounter__2c_20maxiCounter_____compressed_pair_std____2__allocator_maxiCounter__2c_20true__28std____2__allocator_maxiCounter____29;
 FUNCTION_TABLE[1199] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__val_deleter_28emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_20const__29;
 FUNCTION_TABLE[1200] = std____2____shared_ptr_pointer_maxiIndex__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiIndex__20___val_deleter_2c_20std____2__allocator_maxiIndex__20_____shared_ptr_pointer_28maxiIndex__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiIndex__20___val_deleter_2c_20std____2__allocator_maxiIndex__29;
 FUNCTION_TABLE[1201] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__operator_28_29_28void_20const__29;
 FUNCTION_TABLE[1202] = std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_____compressed_pair_maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__28maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter___29;
 FUNCTION_TABLE[1203] = std____2____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20_____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20__28std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter____2c_20std____2__allocator_maxiOsc____29;
 FUNCTION_TABLE[1204] = std____2____shared_ptr_emplace_maxiIndex_2c_20std____2__allocator_maxiIndex__20_____shared_ptr_emplace_28std____2__allocator_maxiIndex__29;
 FUNCTION_TABLE[1205] = std____2____compressed_pair_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20_____compressed_pair_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20____2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20__28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20____2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20____29;
 FUNCTION_TABLE[1206] = std____2____compressed_pair_std____2__allocator_maxiIndex__2c_20maxiIndex_____compressed_pair_std____2__allocator_maxiIndex__2c_20true__28std____2__allocator_maxiIndex____29;
 FUNCTION_TABLE[1207] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__val_deleter_28emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_20const__29;
 FUNCTION_TABLE[1208] = std____2____shared_ptr_pointer_maxiRatioSeq__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiRatioSeq__20___val_deleter_2c_20std____2__allocator_maxiRatioSeq__20_____shared_ptr_pointer_28maxiRatioSeq__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiRatioSeq__20___val_deleter_2c_20std____2__allocator_maxiRatioSeq__29;
 FUNCTION_TABLE[1209] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__operator_28_29_28void_20const__29;
 FUNCTION_TABLE[1210] = std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_____compressed_pair_maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__28maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter___29;
 FUNCTION_TABLE[1211] = std____2____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20_____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20__28std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter____2c_20std____2__allocator_maxiOsc____29;
 FUNCTION_TABLE[1212] = std____2____shared_ptr_emplace_maxiRatioSeq_2c_20std____2__allocator_maxiRatioSeq__20_____shared_ptr_emplace_28std____2__allocator_maxiRatioSeq__29;
 FUNCTION_TABLE[1213] = std____2____compressed_pair_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20_____compressed_pair_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20____2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20__28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20____2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20____29;
 FUNCTION_TABLE[1214] = std____2____compressed_pair_std____2__allocator_maxiRatioSeq__2c_20maxiRatioSeq_____compressed_pair_std____2__allocator_maxiRatioSeq__2c_20true__28std____2__allocator_maxiRatioSeq____29;
 FUNCTION_TABLE[1215] = std____2__valarray_double_____clear_28unsigned_20long_29;
 FUNCTION_TABLE[1216] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__val_deleter_28emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_20const__29;
 FUNCTION_TABLE[1217] = std____2____shared_ptr_pointer_maxiSatReverb__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiSatReverb__20___val_deleter_2c_20std____2__allocator_maxiSatReverb__20_____shared_ptr_pointer_28maxiSatReverb__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiSatReverb__20___val_deleter_2c_20std____2__allocator_maxiSatReverb__29;
 FUNCTION_TABLE[1218] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__operator_28_29_28void_20const__29;
 FUNCTION_TABLE[1219] = std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_____compressed_pair_maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__28maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter___29;
 FUNCTION_TABLE[1220] = std____2____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20_____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20__28std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter____2c_20std____2__allocator_maxiOsc____29;
 FUNCTION_TABLE[1221] = std____2____shared_ptr_emplace_maxiSatReverb_2c_20std____2__allocator_maxiSatReverb__20_____shared_ptr_emplace_28std____2__allocator_maxiSatReverb__29;
 FUNCTION_TABLE[1222] = std____2____compressed_pair_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20_____compressed_pair_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20____2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20__28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20____2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20____29;
 FUNCTION_TABLE[1223] = std____2____compressed_pair_std____2__allocator_maxiSatReverb__2c_20maxiSatReverb_____compressed_pair_std____2__allocator_maxiSatReverb__2c_20true__28std____2__allocator_maxiSatReverb____29;
 FUNCTION_TABLE[1224] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__val_deleter_28emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_20const__29;
 FUNCTION_TABLE[1225] = std____2____shared_ptr_pointer_maxiFreeVerb__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiFreeVerb__20___val_deleter_2c_20std____2__allocator_maxiFreeVerb__20_____shared_ptr_pointer_28maxiFreeVerb__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiFreeVerb__20___val_deleter_2c_20std____2__allocator_maxiFreeVerb__29;
 FUNCTION_TABLE[1226] = emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__operator_28_29_28void_20const__29;
 FUNCTION_TABLE[1227] = std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_____compressed_pair_maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__28maxiOsc___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter___29;
 FUNCTION_TABLE[1228] = std____2____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20_____compressed_pair_std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter__2c_20std____2__allocator_maxiOsc__20__28std____2____compressed_pair_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter____2c_20std____2__allocator_maxiOsc____29;
 FUNCTION_TABLE[1229] = std____2____shared_ptr_emplace_maxiFreeVerb_2c_20std____2__allocator_maxiFreeVerb__20_____shared_ptr_emplace_28std____2__allocator_maxiFreeVerb__29;
 FUNCTION_TABLE[1230] = std____2____compressed_pair_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20___2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20_____compressed_pair_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20____2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20__20__28std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20____2c_20std____2____allocator_destructor_std____2__allocator_std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20__20__20____29;
 FUNCTION_TABLE[1231] = std____2____compressed_pair_std____2__allocator_maxiFreeVerb__2c_20maxiFreeVerb_____compressed_pair_std____2__allocator_maxiFreeVerb__2c_20true__28std____2__allocator_maxiFreeVerb____29;
 FUNCTION_TABLE[1232] = std____2____shared_ptr_pointer_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_2c_20std____2__allocator_maxiOsc__20______shared_ptr_pointer_28_29;
 FUNCTION_TABLE[1233] = std____2____shared_ptr_pointer_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_2c_20std____2__allocator_maxiOsc__20______shared_ptr_pointer_28_29_1;
 FUNCTION_TABLE[1234] = std____2____shared_ptr_pointer_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_2c_20std____2__allocator_maxiOsc__20_____on_zero_shared_28_29;
 FUNCTION_TABLE[1235] = std____2____shared_ptr_pointer_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_2c_20std____2__allocator_maxiOsc__20_____get_deleter_28std__type_info_20const__29_20const;
 FUNCTION_TABLE[1236] = std____2____shared_ptr_pointer_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_2c_20std____2__allocator_maxiOsc__20_____on_zero_shared_weak_28_29;
 FUNCTION_TABLE[1237] = unsigned_20char__20std____2____to_raw_pointer_unsigned_20char__28unsigned_20char__29;
 FUNCTION_TABLE[1238] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[1239] = std____2__vector_double_2c_20std____2__allocator_double__20_____invalidate_all_iterators_28_29;
 FUNCTION_TABLE[1240] = std____2____shared_weak_count____get_deleter_28std__type_info_20const__29_20const;
 FUNCTION_TABLE[1241] = std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20_____on_zero_shared_weak_28_29;
 FUNCTION_TABLE[1242] = std____2____shared_ptr_pointer_maxiEnvelope__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiEnvelope__20___val_deleter_2c_20std____2__allocator_maxiEnvelope__20______shared_ptr_pointer_28_29;
 FUNCTION_TABLE[1243] = std____2____shared_ptr_pointer_maxiEnvelope__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiEnvelope__20___val_deleter_2c_20std____2__allocator_maxiEnvelope__20______shared_ptr_pointer_28_29_1;
 FUNCTION_TABLE[1244] = std____2____shared_ptr_pointer_maxiEnvelope__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiEnvelope__20___val_deleter_2c_20std____2__allocator_maxiEnvelope__20_____on_zero_shared_28_29;
 FUNCTION_TABLE[1245] = std____2____shared_ptr_pointer_maxiEnvelope__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiEnvelope__20___val_deleter_2c_20std____2__allocator_maxiEnvelope__20_____get_deleter_28std__type_info_20const__29_20const;
 FUNCTION_TABLE[1246] = std____2____shared_ptr_pointer_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_2c_20std____2__allocator_maxiOsc__20_____on_zero_shared_weak_28_29;
 FUNCTION_TABLE[1247] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[1248] = std____2__vector_double_2c_20std____2__allocator_double__20_____invalidate_all_iterators_28_29;
 FUNCTION_TABLE[1249] = std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20_____on_zero_shared_weak_28_29;
 FUNCTION_TABLE[1250] = std____2____shared_ptr_pointer_maxiDelayline__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiDelayline__20___val_deleter_2c_20std____2__allocator_maxiDelayline__20______shared_ptr_pointer_28_29;
 FUNCTION_TABLE[1251] = std____2____shared_ptr_pointer_maxiDelayline__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiDelayline__20___val_deleter_2c_20std____2__allocator_maxiDelayline__20______shared_ptr_pointer_28_29_1;
 FUNCTION_TABLE[1252] = std____2____shared_ptr_pointer_maxiDelayline__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiDelayline__20___val_deleter_2c_20std____2__allocator_maxiDelayline__20_____on_zero_shared_28_29;
 FUNCTION_TABLE[1253] = std____2____shared_ptr_pointer_maxiDelayline__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiDelayline__20___val_deleter_2c_20std____2__allocator_maxiDelayline__20_____get_deleter_28std__type_info_20const__29_20const;
 FUNCTION_TABLE[1254] = std____2____shared_ptr_pointer_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_2c_20std____2__allocator_maxiOsc__20_____on_zero_shared_weak_28_29;
 FUNCTION_TABLE[1255] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[1256] = std____2__vector_double_2c_20std____2__allocator_double__20_____invalidate_all_iterators_28_29;
 FUNCTION_TABLE[1257] = std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20_____on_zero_shared_weak_28_29;
 FUNCTION_TABLE[1258] = std____2____shared_ptr_pointer_maxiFilter__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiFilter__20___val_deleter_2c_20std____2__allocator_maxiFilter__20______shared_ptr_pointer_28_29;
 FUNCTION_TABLE[1259] = std____2____shared_ptr_pointer_maxiFilter__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiFilter__20___val_deleter_2c_20std____2__allocator_maxiFilter__20______shared_ptr_pointer_28_29_1;
 FUNCTION_TABLE[1260] = std____2____shared_ptr_pointer_maxiFilter__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiFilter__20___val_deleter_2c_20std____2__allocator_maxiFilter__20_____on_zero_shared_28_29;
 FUNCTION_TABLE[1261] = std____2____shared_ptr_pointer_maxiFilter__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiFilter__20___val_deleter_2c_20std____2__allocator_maxiFilter__20_____get_deleter_28std__type_info_20const__29_20const;
 FUNCTION_TABLE[1262] = std____2____shared_ptr_pointer_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_2c_20std____2__allocator_maxiOsc__20_____on_zero_shared_weak_28_29;
 FUNCTION_TABLE[1263] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[1264] = std____2__vector_double_2c_20std____2__allocator_double__20_____invalidate_all_iterators_28_29;
 FUNCTION_TABLE[1265] = std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20_____on_zero_shared_weak_28_29;
 FUNCTION_TABLE[1266] = std____2____shared_ptr_pointer_maxiMix__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiMix__20___val_deleter_2c_20std____2__allocator_maxiMix__20______shared_ptr_pointer_28_29;
 FUNCTION_TABLE[1267] = std____2____shared_ptr_pointer_maxiMix__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiMix__20___val_deleter_2c_20std____2__allocator_maxiMix__20______shared_ptr_pointer_28_29_1;
 FUNCTION_TABLE[1268] = std____2____shared_ptr_pointer_maxiMix__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiMix__20___val_deleter_2c_20std____2__allocator_maxiMix__20_____on_zero_shared_28_29;
 FUNCTION_TABLE[1269] = std____2____shared_ptr_pointer_maxiMix__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiMix__20___val_deleter_2c_20std____2__allocator_maxiMix__20_____get_deleter_28std__type_info_20const__29_20const;
 FUNCTION_TABLE[1270] = std____2____shared_ptr_pointer_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_2c_20std____2__allocator_maxiOsc__20_____on_zero_shared_weak_28_29;
 FUNCTION_TABLE[1271] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[1272] = std____2__vector_double_2c_20std____2__allocator_double__20_____invalidate_all_iterators_28_29;
 FUNCTION_TABLE[1273] = std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20_____on_zero_shared_weak_28_29;
 FUNCTION_TABLE[1274] = std____2____shared_ptr_pointer_maxiLine__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiLine__20___val_deleter_2c_20std____2__allocator_maxiLine__20______shared_ptr_pointer_28_29;
 FUNCTION_TABLE[1275] = std____2____shared_ptr_pointer_maxiLine__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiLine__20___val_deleter_2c_20std____2__allocator_maxiLine__20______shared_ptr_pointer_28_29_1;
 FUNCTION_TABLE[1276] = std____2____shared_ptr_pointer_maxiLine__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiLine__20___val_deleter_2c_20std____2__allocator_maxiLine__20_____on_zero_shared_28_29;
 FUNCTION_TABLE[1277] = std____2____shared_ptr_pointer_maxiLine__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiLine__20___val_deleter_2c_20std____2__allocator_maxiLine__20_____get_deleter_28std__type_info_20const__29_20const;
 FUNCTION_TABLE[1278] = std____2____shared_ptr_pointer_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_2c_20std____2__allocator_maxiOsc__20_____on_zero_shared_weak_28_29;
 FUNCTION_TABLE[1279] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[1280] = std____2__vector_double_2c_20std____2__allocator_double__20_____invalidate_all_iterators_28_29;
 FUNCTION_TABLE[1281] = std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20_____on_zero_shared_weak_28_29;
 FUNCTION_TABLE[1282] = std____2____shared_ptr_pointer_maxiLagExp_double___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiLagExp_double__20__20___val_deleter_2c_20std____2__allocator_maxiLagExp_double__20__20______shared_ptr_pointer_28_29;
 FUNCTION_TABLE[1283] = std____2____shared_ptr_pointer_maxiLagExp_double___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiLagExp_double__20__20___val_deleter_2c_20std____2__allocator_maxiLagExp_double__20__20______shared_ptr_pointer_28_29_1;
 FUNCTION_TABLE[1284] = std____2____shared_ptr_pointer_maxiLagExp_double___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiLagExp_double__20__20___val_deleter_2c_20std____2__allocator_maxiLagExp_double__20__20_____on_zero_shared_28_29;
 FUNCTION_TABLE[1285] = std____2____shared_ptr_pointer_maxiLagExp_double___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiLagExp_double__20__20___val_deleter_2c_20std____2__allocator_maxiLagExp_double__20__20_____get_deleter_28std__type_info_20const__29_20const;
 FUNCTION_TABLE[1286] = std____2____shared_ptr_pointer_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_2c_20std____2__allocator_maxiOsc__20_____on_zero_shared_weak_28_29;
 FUNCTION_TABLE[1287] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[1288] = std____2__vector_double_2c_20std____2__allocator_double__20_____invalidate_all_iterators_28_29;
 FUNCTION_TABLE[1289] = std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20_____on_zero_shared_weak_28_29;
 FUNCTION_TABLE[1290] = std____2____shared_ptr_pointer_maxiSample__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiSample__20___val_deleter_2c_20std____2__allocator_maxiSample__20______shared_ptr_pointer_28_29;
 FUNCTION_TABLE[1291] = std____2____shared_ptr_pointer_maxiSample__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiSample__20___val_deleter_2c_20std____2__allocator_maxiSample__20______shared_ptr_pointer_28_29_1;
 FUNCTION_TABLE[1292] = std____2____shared_ptr_pointer_maxiSample__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiSample__20___val_deleter_2c_20std____2__allocator_maxiSample__20_____on_zero_shared_28_29;
 FUNCTION_TABLE[1293] = std____2____shared_ptr_pointer_maxiSample__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiSample__20___val_deleter_2c_20std____2__allocator_maxiSample__20_____get_deleter_28std__type_info_20const__29_20const;
 FUNCTION_TABLE[1294] = std____2____shared_ptr_pointer_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_2c_20std____2__allocator_maxiOsc__20_____on_zero_shared_weak_28_29;
 FUNCTION_TABLE[1295] = std____2____shared_ptr_emplace_maxiSample_2c_20std____2__allocator_maxiSample__20______shared_ptr_emplace_28_29;
 FUNCTION_TABLE[1296] = std____2____shared_ptr_emplace_maxiSample_2c_20std____2__allocator_maxiSample__20______shared_ptr_emplace_28_29_1;
 FUNCTION_TABLE[1297] = std____2____shared_ptr_emplace_maxiSample_2c_20std____2__allocator_maxiSample__20_____on_zero_shared_28_29;
 FUNCTION_TABLE[1298] = std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20_____on_zero_shared_weak_28_29;
 FUNCTION_TABLE[1299] = std____2____shared_ptr_pointer_maxiMap__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiMap__20___val_deleter_2c_20std____2__allocator_maxiMap__20______shared_ptr_pointer_28_29;
 FUNCTION_TABLE[1300] = std____2____shared_ptr_pointer_maxiMap__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiMap__20___val_deleter_2c_20std____2__allocator_maxiMap__20______shared_ptr_pointer_28_29_1;
 FUNCTION_TABLE[1301] = std____2____shared_ptr_pointer_maxiMap__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiMap__20___val_deleter_2c_20std____2__allocator_maxiMap__20_____on_zero_shared_28_29;
 FUNCTION_TABLE[1302] = std____2____shared_ptr_pointer_maxiMap__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiMap__20___val_deleter_2c_20std____2__allocator_maxiMap__20_____get_deleter_28std__type_info_20const__29_20const;
 FUNCTION_TABLE[1303] = std____2____shared_ptr_pointer_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_2c_20std____2__allocator_maxiOsc__20_____on_zero_shared_weak_28_29;
 FUNCTION_TABLE[1304] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[1305] = std____2__vector_double_2c_20std____2__allocator_double__20_____invalidate_all_iterators_28_29;
 FUNCTION_TABLE[1306] = std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20_____on_zero_shared_weak_28_29;
 FUNCTION_TABLE[1307] = std____2____shared_ptr_pointer_maxiDyn__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiDyn__20___val_deleter_2c_20std____2__allocator_maxiDyn__20______shared_ptr_pointer_28_29;
 FUNCTION_TABLE[1308] = std____2____shared_ptr_pointer_maxiDyn__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiDyn__20___val_deleter_2c_20std____2__allocator_maxiDyn__20______shared_ptr_pointer_28_29_1;
 FUNCTION_TABLE[1309] = std____2____shared_ptr_pointer_maxiDyn__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiDyn__20___val_deleter_2c_20std____2__allocator_maxiDyn__20_____on_zero_shared_28_29;
 FUNCTION_TABLE[1310] = std____2____shared_ptr_pointer_maxiDyn__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiDyn__20___val_deleter_2c_20std____2__allocator_maxiDyn__20_____get_deleter_28std__type_info_20const__29_20const;
 FUNCTION_TABLE[1311] = std____2____shared_ptr_pointer_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_2c_20std____2__allocator_maxiOsc__20_____on_zero_shared_weak_28_29;
 FUNCTION_TABLE[1312] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[1313] = std____2__vector_double_2c_20std____2__allocator_double__20_____invalidate_all_iterators_28_29;
 FUNCTION_TABLE[1314] = std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20_____on_zero_shared_weak_28_29;
 FUNCTION_TABLE[1315] = std____2____shared_ptr_pointer_maxiEnv__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiEnv__20___val_deleter_2c_20std____2__allocator_maxiEnv__20______shared_ptr_pointer_28_29;
 FUNCTION_TABLE[1316] = std____2____shared_ptr_pointer_maxiEnv__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiEnv__20___val_deleter_2c_20std____2__allocator_maxiEnv__20______shared_ptr_pointer_28_29_1;
 FUNCTION_TABLE[1317] = std____2____shared_ptr_pointer_maxiEnv__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiEnv__20___val_deleter_2c_20std____2__allocator_maxiEnv__20_____on_zero_shared_28_29;
 FUNCTION_TABLE[1318] = std____2____shared_ptr_pointer_maxiEnv__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiEnv__20___val_deleter_2c_20std____2__allocator_maxiEnv__20_____get_deleter_28std__type_info_20const__29_20const;
 FUNCTION_TABLE[1319] = std____2____shared_ptr_pointer_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_2c_20std____2__allocator_maxiOsc__20_____on_zero_shared_weak_28_29;
 FUNCTION_TABLE[1320] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[1321] = std____2__vector_double_2c_20std____2__allocator_double__20_____invalidate_all_iterators_28_29;
 FUNCTION_TABLE[1322] = std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20_____on_zero_shared_weak_28_29;
 FUNCTION_TABLE[1323] = std____2____shared_ptr_pointer_convert__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_convert__20___val_deleter_2c_20std____2__allocator_convert__20______shared_ptr_pointer_28_29;
 FUNCTION_TABLE[1324] = std____2____shared_ptr_pointer_convert__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_convert__20___val_deleter_2c_20std____2__allocator_convert__20______shared_ptr_pointer_28_29_1;
 FUNCTION_TABLE[1325] = std____2____shared_ptr_pointer_convert__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_convert__20___val_deleter_2c_20std____2__allocator_convert__20_____on_zero_shared_28_29;
 FUNCTION_TABLE[1326] = std____2____shared_ptr_pointer_convert__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_convert__20___val_deleter_2c_20std____2__allocator_convert__20_____get_deleter_28std__type_info_20const__29_20const;
 FUNCTION_TABLE[1327] = std____2____shared_ptr_pointer_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_2c_20std____2__allocator_maxiOsc__20_____on_zero_shared_weak_28_29;
 FUNCTION_TABLE[1328] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[1329] = std____2__vector_double_2c_20std____2__allocator_double__20_____invalidate_all_iterators_28_29;
 FUNCTION_TABLE[1330] = std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20_____on_zero_shared_weak_28_29;
 FUNCTION_TABLE[1331] = std____2____shared_ptr_pointer_maxiSampleAndHold__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiSampleAndHold__20___val_deleter_2c_20std____2__allocator_maxiSampleAndHold__20______shared_ptr_pointer_28_29;
 FUNCTION_TABLE[1332] = std____2____shared_ptr_pointer_maxiSampleAndHold__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiSampleAndHold__20___val_deleter_2c_20std____2__allocator_maxiSampleAndHold__20______shared_ptr_pointer_28_29_1;
 FUNCTION_TABLE[1333] = std____2____shared_ptr_pointer_maxiSampleAndHold__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiSampleAndHold__20___val_deleter_2c_20std____2__allocator_maxiSampleAndHold__20_____on_zero_shared_28_29;
 FUNCTION_TABLE[1334] = std____2____shared_ptr_pointer_maxiSampleAndHold__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiSampleAndHold__20___val_deleter_2c_20std____2__allocator_maxiSampleAndHold__20_____get_deleter_28std__type_info_20const__29_20const;
 FUNCTION_TABLE[1335] = std____2____shared_ptr_pointer_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_2c_20std____2__allocator_maxiOsc__20_____on_zero_shared_weak_28_29;
 FUNCTION_TABLE[1336] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[1337] = std____2__vector_double_2c_20std____2__allocator_double__20_____invalidate_all_iterators_28_29;
 FUNCTION_TABLE[1338] = std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20_____on_zero_shared_weak_28_29;
 FUNCTION_TABLE[1339] = std____2____shared_ptr_pointer_maxiNonlinearity__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiNonlinearity__20___val_deleter_2c_20std____2__allocator_maxiNonlinearity__20______shared_ptr_pointer_28_29;
 FUNCTION_TABLE[1340] = std____2____shared_ptr_pointer_maxiNonlinearity__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiNonlinearity__20___val_deleter_2c_20std____2__allocator_maxiNonlinearity__20______shared_ptr_pointer_28_29_1;
 FUNCTION_TABLE[1341] = std____2____shared_ptr_pointer_maxiNonlinearity__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiNonlinearity__20___val_deleter_2c_20std____2__allocator_maxiNonlinearity__20_____on_zero_shared_28_29;
 FUNCTION_TABLE[1342] = std____2____shared_ptr_pointer_maxiNonlinearity__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiNonlinearity__20___val_deleter_2c_20std____2__allocator_maxiNonlinearity__20_____get_deleter_28std__type_info_20const__29_20const;
 FUNCTION_TABLE[1343] = std____2____shared_ptr_pointer_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_2c_20std____2__allocator_maxiOsc__20_____on_zero_shared_weak_28_29;
 FUNCTION_TABLE[1344] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[1345] = std____2__vector_double_2c_20std____2__allocator_double__20_____invalidate_all_iterators_28_29;
 FUNCTION_TABLE[1346] = std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20_____on_zero_shared_weak_28_29;
 FUNCTION_TABLE[1347] = std____2____shared_ptr_pointer_maxiFlanger__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiFlanger__20___val_deleter_2c_20std____2__allocator_maxiFlanger__20______shared_ptr_pointer_28_29;
 FUNCTION_TABLE[1348] = std____2____shared_ptr_pointer_maxiFlanger__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiFlanger__20___val_deleter_2c_20std____2__allocator_maxiFlanger__20______shared_ptr_pointer_28_29_1;
 FUNCTION_TABLE[1349] = std____2____shared_ptr_pointer_maxiFlanger__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiFlanger__20___val_deleter_2c_20std____2__allocator_maxiFlanger__20_____on_zero_shared_28_29;
 FUNCTION_TABLE[1350] = std____2____shared_ptr_pointer_maxiFlanger__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiFlanger__20___val_deleter_2c_20std____2__allocator_maxiFlanger__20_____get_deleter_28std__type_info_20const__29_20const;
 FUNCTION_TABLE[1351] = std____2____shared_ptr_pointer_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_2c_20std____2__allocator_maxiOsc__20_____on_zero_shared_weak_28_29;
 FUNCTION_TABLE[1352] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[1353] = std____2__vector_double_2c_20std____2__allocator_double__20_____invalidate_all_iterators_28_29;
 FUNCTION_TABLE[1354] = std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20_____on_zero_shared_weak_28_29;
 FUNCTION_TABLE[1355] = std____2____shared_ptr_pointer_maxiChorus__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiChorus__20___val_deleter_2c_20std____2__allocator_maxiChorus__20______shared_ptr_pointer_28_29;
 FUNCTION_TABLE[1356] = std____2____shared_ptr_pointer_maxiChorus__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiChorus__20___val_deleter_2c_20std____2__allocator_maxiChorus__20______shared_ptr_pointer_28_29_1;
 FUNCTION_TABLE[1357] = std____2____shared_ptr_pointer_maxiChorus__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiChorus__20___val_deleter_2c_20std____2__allocator_maxiChorus__20_____on_zero_shared_28_29;
 FUNCTION_TABLE[1358] = std____2____shared_ptr_pointer_maxiChorus__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiChorus__20___val_deleter_2c_20std____2__allocator_maxiChorus__20_____get_deleter_28std__type_info_20const__29_20const;
 FUNCTION_TABLE[1359] = std____2____shared_ptr_pointer_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_2c_20std____2__allocator_maxiOsc__20_____on_zero_shared_weak_28_29;
 FUNCTION_TABLE[1360] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[1361] = std____2__vector_double_2c_20std____2__allocator_double__20_____invalidate_all_iterators_28_29;
 FUNCTION_TABLE[1362] = std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20_____on_zero_shared_weak_28_29;
 FUNCTION_TABLE[1363] = std____2____shared_ptr_pointer_maxiDCBlocker__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiDCBlocker__20___val_deleter_2c_20std____2__allocator_maxiDCBlocker__20______shared_ptr_pointer_28_29;
 FUNCTION_TABLE[1364] = std____2____shared_ptr_pointer_maxiDCBlocker__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiDCBlocker__20___val_deleter_2c_20std____2__allocator_maxiDCBlocker__20______shared_ptr_pointer_28_29_1;
 FUNCTION_TABLE[1365] = std____2____shared_ptr_pointer_maxiDCBlocker__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiDCBlocker__20___val_deleter_2c_20std____2__allocator_maxiDCBlocker__20_____on_zero_shared_28_29;
 FUNCTION_TABLE[1366] = std____2____shared_ptr_pointer_maxiDCBlocker__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiDCBlocker__20___val_deleter_2c_20std____2__allocator_maxiDCBlocker__20_____get_deleter_28std__type_info_20const__29_20const;
 FUNCTION_TABLE[1367] = std____2____shared_ptr_pointer_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_2c_20std____2__allocator_maxiOsc__20_____on_zero_shared_weak_28_29;
 FUNCTION_TABLE[1368] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[1369] = std____2__vector_double_2c_20std____2__allocator_double__20_____invalidate_all_iterators_28_29;
 FUNCTION_TABLE[1370] = std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20_____on_zero_shared_weak_28_29;
 FUNCTION_TABLE[1371] = std____2____shared_ptr_pointer_maxiSVF__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiSVF__20___val_deleter_2c_20std____2__allocator_maxiSVF__20______shared_ptr_pointer_28_29;
 FUNCTION_TABLE[1372] = std____2____shared_ptr_pointer_maxiSVF__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiSVF__20___val_deleter_2c_20std____2__allocator_maxiSVF__20______shared_ptr_pointer_28_29_1;
 FUNCTION_TABLE[1373] = std____2____shared_ptr_pointer_maxiSVF__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiSVF__20___val_deleter_2c_20std____2__allocator_maxiSVF__20_____on_zero_shared_28_29;
 FUNCTION_TABLE[1374] = std____2____shared_ptr_pointer_maxiSVF__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiSVF__20___val_deleter_2c_20std____2__allocator_maxiSVF__20_____get_deleter_28std__type_info_20const__29_20const;
 FUNCTION_TABLE[1375] = std____2____shared_ptr_pointer_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_2c_20std____2__allocator_maxiOsc__20_____on_zero_shared_weak_28_29;
 FUNCTION_TABLE[1376] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[1377] = std____2__vector_double_2c_20std____2__allocator_double__20_____invalidate_all_iterators_28_29;
 FUNCTION_TABLE[1378] = std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20_____on_zero_shared_weak_28_29;
 FUNCTION_TABLE[1379] = std____2____shared_ptr_pointer_maxiMath__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiMath__20___val_deleter_2c_20std____2__allocator_maxiMath__20______shared_ptr_pointer_28_29;
 FUNCTION_TABLE[1380] = std____2____shared_ptr_pointer_maxiMath__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiMath__20___val_deleter_2c_20std____2__allocator_maxiMath__20______shared_ptr_pointer_28_29_1;
 FUNCTION_TABLE[1381] = std____2____shared_ptr_pointer_maxiMath__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiMath__20___val_deleter_2c_20std____2__allocator_maxiMath__20_____on_zero_shared_28_29;
 FUNCTION_TABLE[1382] = std____2____shared_ptr_pointer_maxiMath__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiMath__20___val_deleter_2c_20std____2__allocator_maxiMath__20_____get_deleter_28std__type_info_20const__29_20const;
 FUNCTION_TABLE[1383] = std____2____shared_ptr_pointer_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_2c_20std____2__allocator_maxiOsc__20_____on_zero_shared_weak_28_29;
 FUNCTION_TABLE[1384] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[1385] = std____2__vector_double_2c_20std____2__allocator_double__20_____invalidate_all_iterators_28_29;
 FUNCTION_TABLE[1386] = std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20_____on_zero_shared_weak_28_29;
 FUNCTION_TABLE[1387] = std____2____shared_ptr_pointer_maxiClock__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiClock__20___val_deleter_2c_20std____2__allocator_maxiClock__20______shared_ptr_pointer_28_29;
 FUNCTION_TABLE[1388] = std____2____shared_ptr_pointer_maxiClock__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiClock__20___val_deleter_2c_20std____2__allocator_maxiClock__20______shared_ptr_pointer_28_29_1;
 FUNCTION_TABLE[1389] = std____2____shared_ptr_pointer_maxiClock__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiClock__20___val_deleter_2c_20std____2__allocator_maxiClock__20_____on_zero_shared_28_29;
 FUNCTION_TABLE[1390] = std____2____shared_ptr_pointer_maxiClock__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiClock__20___val_deleter_2c_20std____2__allocator_maxiClock__20_____get_deleter_28std__type_info_20const__29_20const;
 FUNCTION_TABLE[1391] = std____2____shared_ptr_pointer_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_2c_20std____2__allocator_maxiOsc__20_____on_zero_shared_weak_28_29;
 FUNCTION_TABLE[1392] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[1393] = std____2__vector_double_2c_20std____2__allocator_double__20_____invalidate_all_iterators_28_29;
 FUNCTION_TABLE[1394] = std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20_____on_zero_shared_weak_28_29;
 FUNCTION_TABLE[1395] = std____2____shared_ptr_pointer_maxiKuramotoOscillator__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiKuramotoOscillator__20___val_deleter_2c_20std____2__allocator_maxiKuramotoOscillator__20______shared_ptr_pointer_28_29;
 FUNCTION_TABLE[1396] = std____2____shared_ptr_pointer_maxiKuramotoOscillator__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiKuramotoOscillator__20___val_deleter_2c_20std____2__allocator_maxiKuramotoOscillator__20______shared_ptr_pointer_28_29_1;
 FUNCTION_TABLE[1397] = std____2____shared_ptr_pointer_maxiKuramotoOscillator__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiKuramotoOscillator__20___val_deleter_2c_20std____2__allocator_maxiKuramotoOscillator__20_____on_zero_shared_28_29;
 FUNCTION_TABLE[1398] = std____2____shared_ptr_pointer_maxiKuramotoOscillator__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiKuramotoOscillator__20___val_deleter_2c_20std____2__allocator_maxiKuramotoOscillator__20_____get_deleter_28std__type_info_20const__29_20const;
 FUNCTION_TABLE[1399] = std____2____shared_ptr_pointer_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_2c_20std____2__allocator_maxiOsc__20_____on_zero_shared_weak_28_29;
 FUNCTION_TABLE[1400] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[1401] = std____2__vector_double_2c_20std____2__allocator_double__20_____invalidate_all_iterators_28_29;
 FUNCTION_TABLE[1402] = std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20_____on_zero_shared_weak_28_29;
 FUNCTION_TABLE[1403] = std____2____shared_ptr_pointer_maxiKuramotoOscillatorSet__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiKuramotoOscillatorSet__20___val_deleter_2c_20std____2__allocator_maxiKuramotoOscillatorSet__20______shared_ptr_pointer_28_29;
 FUNCTION_TABLE[1404] = std____2____shared_ptr_pointer_maxiKuramotoOscillatorSet__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiKuramotoOscillatorSet__20___val_deleter_2c_20std____2__allocator_maxiKuramotoOscillatorSet__20______shared_ptr_pointer_28_29_1;
 FUNCTION_TABLE[1405] = std____2____shared_ptr_pointer_maxiKuramotoOscillatorSet__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiKuramotoOscillatorSet__20___val_deleter_2c_20std____2__allocator_maxiKuramotoOscillatorSet__20_____on_zero_shared_28_29;
 FUNCTION_TABLE[1406] = std____2____shared_ptr_pointer_maxiKuramotoOscillatorSet__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiKuramotoOscillatorSet__20___val_deleter_2c_20std____2__allocator_maxiKuramotoOscillatorSet__20_____get_deleter_28std__type_info_20const__29_20const;
 FUNCTION_TABLE[1407] = std____2____shared_ptr_pointer_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_2c_20std____2__allocator_maxiOsc__20_____on_zero_shared_weak_28_29;
 FUNCTION_TABLE[1408] = std____2____shared_ptr_emplace_maxiKuramotoOscillatorSet_2c_20std____2__allocator_maxiKuramotoOscillatorSet__20______shared_ptr_emplace_28_29;
 FUNCTION_TABLE[1409] = std____2____shared_ptr_emplace_maxiKuramotoOscillatorSet_2c_20std____2__allocator_maxiKuramotoOscillatorSet__20______shared_ptr_emplace_28_29_1;
 FUNCTION_TABLE[1410] = std____2____shared_ptr_emplace_maxiKuramotoOscillatorSet_2c_20std____2__allocator_maxiKuramotoOscillatorSet__20_____on_zero_shared_28_29;
 FUNCTION_TABLE[1411] = std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20_____on_zero_shared_weak_28_29;
 FUNCTION_TABLE[1412] = std____2____shared_ptr_pointer_maxiAsyncKuramotoOscillator__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiAsyncKuramotoOscillator__20___val_deleter_2c_20std____2__allocator_maxiAsyncKuramotoOscillator__20______shared_ptr_pointer_28_29;
 FUNCTION_TABLE[1413] = std____2____shared_ptr_pointer_maxiAsyncKuramotoOscillator__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiAsyncKuramotoOscillator__20___val_deleter_2c_20std____2__allocator_maxiAsyncKuramotoOscillator__20______shared_ptr_pointer_28_29_1;
 FUNCTION_TABLE[1414] = std____2____shared_ptr_pointer_maxiAsyncKuramotoOscillator__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiAsyncKuramotoOscillator__20___val_deleter_2c_20std____2__allocator_maxiAsyncKuramotoOscillator__20_____on_zero_shared_28_29;
 FUNCTION_TABLE[1415] = std____2____shared_ptr_pointer_maxiAsyncKuramotoOscillator__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiAsyncKuramotoOscillator__20___val_deleter_2c_20std____2__allocator_maxiAsyncKuramotoOscillator__20_____get_deleter_28std__type_info_20const__29_20const;
 FUNCTION_TABLE[1416] = std____2____shared_ptr_pointer_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_2c_20std____2__allocator_maxiOsc__20_____on_zero_shared_weak_28_29;
 FUNCTION_TABLE[1417] = std____2____shared_ptr_emplace_maxiAsyncKuramotoOscillator_2c_20std____2__allocator_maxiAsyncKuramotoOscillator__20______shared_ptr_emplace_28_29;
 FUNCTION_TABLE[1418] = std____2____shared_ptr_emplace_maxiAsyncKuramotoOscillator_2c_20std____2__allocator_maxiAsyncKuramotoOscillator__20______shared_ptr_emplace_28_29_1;
 FUNCTION_TABLE[1419] = std____2____shared_ptr_emplace_maxiKuramotoOscillatorSet_2c_20std____2__allocator_maxiKuramotoOscillatorSet__20_____on_zero_shared_28_29;
 FUNCTION_TABLE[1420] = std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20_____on_zero_shared_weak_28_29;
 FUNCTION_TABLE[1421] = std____2____shared_ptr_pointer_maxiFFT__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiFFT__20___val_deleter_2c_20std____2__allocator_maxiFFT__20______shared_ptr_pointer_28_29;
 FUNCTION_TABLE[1422] = std____2____shared_ptr_pointer_maxiFFT__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiFFT__20___val_deleter_2c_20std____2__allocator_maxiFFT__20______shared_ptr_pointer_28_29_1;
 FUNCTION_TABLE[1423] = std____2____shared_ptr_pointer_maxiFFT__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiFFT__20___val_deleter_2c_20std____2__allocator_maxiFFT__20_____on_zero_shared_28_29;
 FUNCTION_TABLE[1424] = std____2____shared_ptr_pointer_maxiFFT__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiFFT__20___val_deleter_2c_20std____2__allocator_maxiFFT__20_____get_deleter_28std__type_info_20const__29_20const;
 FUNCTION_TABLE[1425] = std____2____shared_ptr_pointer_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_2c_20std____2__allocator_maxiOsc__20_____on_zero_shared_weak_28_29;
 FUNCTION_TABLE[1426] = std____2____shared_ptr_emplace_maxiFFT_2c_20std____2__allocator_maxiFFT__20______shared_ptr_emplace_28_29;
 FUNCTION_TABLE[1427] = std____2____shared_ptr_emplace_maxiFFT_2c_20std____2__allocator_maxiFFT__20______shared_ptr_emplace_28_29_1;
 FUNCTION_TABLE[1428] = std____2____shared_ptr_emplace_maxiFFT_2c_20std____2__allocator_maxiFFT__20_____on_zero_shared_28_29;
 FUNCTION_TABLE[1429] = std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20_____on_zero_shared_weak_28_29;
 FUNCTION_TABLE[1430] = std____2____shared_ptr_pointer_maxiIFFT__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiIFFT__20___val_deleter_2c_20std____2__allocator_maxiIFFT__20______shared_ptr_pointer_28_29;
 FUNCTION_TABLE[1431] = std____2____shared_ptr_pointer_maxiIFFT__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiIFFT__20___val_deleter_2c_20std____2__allocator_maxiIFFT__20______shared_ptr_pointer_28_29_1;
 FUNCTION_TABLE[1432] = std____2____shared_ptr_pointer_maxiIFFT__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiIFFT__20___val_deleter_2c_20std____2__allocator_maxiIFFT__20_____on_zero_shared_28_29;
 FUNCTION_TABLE[1433] = std____2____shared_ptr_pointer_maxiIFFT__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiIFFT__20___val_deleter_2c_20std____2__allocator_maxiIFFT__20_____get_deleter_28std__type_info_20const__29_20const;
 FUNCTION_TABLE[1434] = std____2____shared_ptr_pointer_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_2c_20std____2__allocator_maxiOsc__20_____on_zero_shared_weak_28_29;
 FUNCTION_TABLE[1435] = std____2____shared_ptr_emplace_maxiIFFT_2c_20std____2__allocator_maxiIFFT__20______shared_ptr_emplace_28_29;
 FUNCTION_TABLE[1436] = std____2____shared_ptr_emplace_maxiIFFT_2c_20std____2__allocator_maxiIFFT__20______shared_ptr_emplace_28_29_1;
 FUNCTION_TABLE[1437] = std____2____shared_ptr_emplace_maxiIFFT_2c_20std____2__allocator_maxiIFFT__20_____on_zero_shared_28_29;
 FUNCTION_TABLE[1438] = std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20_____on_zero_shared_weak_28_29;
 FUNCTION_TABLE[1439] = std____2____shared_ptr_pointer_maxiMFCCAnalyser_double___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiMFCCAnalyser_double__20__20___val_deleter_2c_20std____2__allocator_maxiMFCCAnalyser_double__20__20______shared_ptr_pointer_28_29;
 FUNCTION_TABLE[1440] = std____2____shared_ptr_pointer_maxiMFCCAnalyser_double___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiMFCCAnalyser_double__20__20___val_deleter_2c_20std____2__allocator_maxiMFCCAnalyser_double__20__20______shared_ptr_pointer_28_29_1;
 FUNCTION_TABLE[1441] = std____2____shared_ptr_pointer_maxiMFCCAnalyser_double___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiMFCCAnalyser_double__20__20___val_deleter_2c_20std____2__allocator_maxiMFCCAnalyser_double__20__20_____on_zero_shared_28_29;
 FUNCTION_TABLE[1442] = std____2____shared_ptr_pointer_maxiMFCCAnalyser_double___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiMFCCAnalyser_double__20__20___val_deleter_2c_20std____2__allocator_maxiMFCCAnalyser_double__20__20_____get_deleter_28std__type_info_20const__29_20const;
 FUNCTION_TABLE[1443] = std____2____shared_ptr_pointer_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_2c_20std____2__allocator_maxiOsc__20_____on_zero_shared_weak_28_29;
 FUNCTION_TABLE[1444] = std____2____shared_ptr_emplace_maxiMFCCAnalyser_double__2c_20std____2__allocator_maxiMFCCAnalyser_double__20__20______shared_ptr_emplace_28_29;
 FUNCTION_TABLE[1445] = std____2____shared_ptr_emplace_maxiMFCCAnalyser_double__2c_20std____2__allocator_maxiMFCCAnalyser_double__20__20______shared_ptr_emplace_28_29_1;
 FUNCTION_TABLE[1446] = std____2____shared_ptr_emplace_maxiMFCCAnalyser_double__2c_20std____2__allocator_maxiMFCCAnalyser_double__20__20_____on_zero_shared_28_29;
 FUNCTION_TABLE[1447] = std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20_____on_zero_shared_weak_28_29;
 FUNCTION_TABLE[1448] = std____2____shared_ptr_pointer_maxiTimeStretch_hannWinFunctor___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiTimeStretch_hannWinFunctor__20__20___val_deleter_2c_20std____2__allocator_maxiTimeStretch_hannWinFunctor__20__20______shared_ptr_pointer_28_29;
 FUNCTION_TABLE[1449] = std____2____shared_ptr_pointer_maxiTimeStretch_hannWinFunctor___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiTimeStretch_hannWinFunctor__20__20___val_deleter_2c_20std____2__allocator_maxiTimeStretch_hannWinFunctor__20__20______shared_ptr_pointer_28_29_1;
 FUNCTION_TABLE[1450] = std____2____shared_ptr_pointer_maxiTimeStretch_hannWinFunctor___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiTimeStretch_hannWinFunctor__20__20___val_deleter_2c_20std____2__allocator_maxiTimeStretch_hannWinFunctor__20__20_____on_zero_shared_28_29;
 FUNCTION_TABLE[1451] = std____2____shared_ptr_pointer_maxiTimeStretch_hannWinFunctor___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiTimeStretch_hannWinFunctor__20__20___val_deleter_2c_20std____2__allocator_maxiTimeStretch_hannWinFunctor__20__20_____get_deleter_28std__type_info_20const__29_20const;
 FUNCTION_TABLE[1452] = std____2____shared_ptr_pointer_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_2c_20std____2__allocator_maxiOsc__20_____on_zero_shared_weak_28_29;
 FUNCTION_TABLE[1453] = std____2____shared_ptr_emplace_maxiTimeStretch_hannWinFunctor__2c_20std____2__allocator_maxiTimeStretch_hannWinFunctor__20__20______shared_ptr_emplace_28_29;
 FUNCTION_TABLE[1454] = std____2____shared_ptr_emplace_maxiTimeStretch_hannWinFunctor__2c_20std____2__allocator_maxiTimeStretch_hannWinFunctor__20__20______shared_ptr_emplace_28_29_1;
 FUNCTION_TABLE[1455] = std____2____shared_ptr_emplace_maxiTimeStretch_hannWinFunctor__2c_20std____2__allocator_maxiTimeStretch_hannWinFunctor__20__20_____on_zero_shared_28_29;
 FUNCTION_TABLE[1456] = std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20_____on_zero_shared_weak_28_29;
 FUNCTION_TABLE[1457] = maxiGrain_hannWinFunctor___play_28_29;
 FUNCTION_TABLE[1458] = unsigned_20char__20std____2____to_raw_pointer_unsigned_20char__28unsigned_20char__29;
 FUNCTION_TABLE[1459] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[1460] = __cxa_pure_virtual;
 FUNCTION_TABLE[1461] = maxiGrainBase___maxiGrainBase_28_29_1;
 FUNCTION_TABLE[1462] = std____2____shared_ptr_pointer_maxiPitchShift_hannWinFunctor___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiPitchShift_hannWinFunctor__20__20___val_deleter_2c_20std____2__allocator_maxiPitchShift_hannWinFunctor__20__20______shared_ptr_pointer_28_29;
 FUNCTION_TABLE[1463] = std____2____shared_ptr_pointer_maxiPitchShift_hannWinFunctor___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiPitchShift_hannWinFunctor__20__20___val_deleter_2c_20std____2__allocator_maxiPitchShift_hannWinFunctor__20__20______shared_ptr_pointer_28_29_1;
 FUNCTION_TABLE[1464] = std____2____shared_ptr_pointer_maxiPitchShift_hannWinFunctor___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiPitchShift_hannWinFunctor__20__20___val_deleter_2c_20std____2__allocator_maxiPitchShift_hannWinFunctor__20__20_____on_zero_shared_28_29;
 FUNCTION_TABLE[1465] = std____2____shared_ptr_pointer_maxiPitchShift_hannWinFunctor___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiPitchShift_hannWinFunctor__20__20___val_deleter_2c_20std____2__allocator_maxiPitchShift_hannWinFunctor__20__20_____get_deleter_28std__type_info_20const__29_20const;
 FUNCTION_TABLE[1466] = std____2____shared_ptr_pointer_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_2c_20std____2__allocator_maxiOsc__20_____on_zero_shared_weak_28_29;
 FUNCTION_TABLE[1467] = std____2____shared_ptr_emplace_maxiPitchShift_hannWinFunctor__2c_20std____2__allocator_maxiPitchShift_hannWinFunctor__20__20______shared_ptr_emplace_28_29;
 FUNCTION_TABLE[1468] = std____2____shared_ptr_emplace_maxiPitchShift_hannWinFunctor__2c_20std____2__allocator_maxiPitchShift_hannWinFunctor__20__20______shared_ptr_emplace_28_29_1;
 FUNCTION_TABLE[1469] = std____2____shared_ptr_emplace_maxiPitchShift_hannWinFunctor__2c_20std____2__allocator_maxiPitchShift_hannWinFunctor__20__20_____on_zero_shared_28_29;
 FUNCTION_TABLE[1470] = std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20_____on_zero_shared_weak_28_29;
 FUNCTION_TABLE[1471] = std____2____shared_ptr_pointer_maxiStretch_hannWinFunctor___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiStretch_hannWinFunctor__20__20___val_deleter_2c_20std____2__allocator_maxiStretch_hannWinFunctor__20__20______shared_ptr_pointer_28_29;
 FUNCTION_TABLE[1472] = std____2____shared_ptr_pointer_maxiStretch_hannWinFunctor___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiStretch_hannWinFunctor__20__20___val_deleter_2c_20std____2__allocator_maxiStretch_hannWinFunctor__20__20______shared_ptr_pointer_28_29_1;
 FUNCTION_TABLE[1473] = std____2____shared_ptr_pointer_maxiStretch_hannWinFunctor___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiStretch_hannWinFunctor__20__20___val_deleter_2c_20std____2__allocator_maxiStretch_hannWinFunctor__20__20_____on_zero_shared_28_29;
 FUNCTION_TABLE[1474] = std____2____shared_ptr_pointer_maxiStretch_hannWinFunctor___2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiStretch_hannWinFunctor__20__20___val_deleter_2c_20std____2__allocator_maxiStretch_hannWinFunctor__20__20_____get_deleter_28std__type_info_20const__29_20const;
 FUNCTION_TABLE[1475] = std____2____shared_ptr_pointer_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_2c_20std____2__allocator_maxiOsc__20_____on_zero_shared_weak_28_29;
 FUNCTION_TABLE[1476] = std____2____shared_ptr_emplace_maxiStretch_hannWinFunctor__2c_20std____2__allocator_maxiStretch_hannWinFunctor__20__20______shared_ptr_emplace_28_29;
 FUNCTION_TABLE[1477] = std____2____shared_ptr_emplace_maxiStretch_hannWinFunctor__2c_20std____2__allocator_maxiStretch_hannWinFunctor__20__20______shared_ptr_emplace_28_29_1;
 FUNCTION_TABLE[1478] = std____2____shared_ptr_emplace_maxiTimeStretch_hannWinFunctor__2c_20std____2__allocator_maxiTimeStretch_hannWinFunctor__20__20_____on_zero_shared_28_29;
 FUNCTION_TABLE[1479] = std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20_____on_zero_shared_weak_28_29;
 FUNCTION_TABLE[1480] = std____2____shared_ptr_pointer_maxiTrigger__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiTrigger__20___val_deleter_2c_20std____2__allocator_maxiTrigger__20______shared_ptr_pointer_28_29;
 FUNCTION_TABLE[1481] = std____2____shared_ptr_pointer_maxiTrigger__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiTrigger__20___val_deleter_2c_20std____2__allocator_maxiTrigger__20______shared_ptr_pointer_28_29_1;
 FUNCTION_TABLE[1482] = std____2____shared_ptr_pointer_maxiTrigger__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiTrigger__20___val_deleter_2c_20std____2__allocator_maxiTrigger__20_____on_zero_shared_28_29;
 FUNCTION_TABLE[1483] = std____2____shared_ptr_pointer_maxiTrigger__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiTrigger__20___val_deleter_2c_20std____2__allocator_maxiTrigger__20_____get_deleter_28std__type_info_20const__29_20const;
 FUNCTION_TABLE[1484] = std____2____shared_ptr_pointer_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_2c_20std____2__allocator_maxiOsc__20_____on_zero_shared_weak_28_29;
 FUNCTION_TABLE[1485] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[1486] = std____2__vector_double_2c_20std____2__allocator_double__20_____invalidate_all_iterators_28_29;
 FUNCTION_TABLE[1487] = std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20_____on_zero_shared_weak_28_29;
 FUNCTION_TABLE[1488] = std____2____shared_ptr_pointer_maxiCounter__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiCounter__20___val_deleter_2c_20std____2__allocator_maxiCounter__20______shared_ptr_pointer_28_29;
 FUNCTION_TABLE[1489] = std____2____shared_ptr_pointer_maxiCounter__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiCounter__20___val_deleter_2c_20std____2__allocator_maxiCounter__20______shared_ptr_pointer_28_29_1;
 FUNCTION_TABLE[1490] = std____2____shared_ptr_pointer_maxiCounter__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiCounter__20___val_deleter_2c_20std____2__allocator_maxiCounter__20_____on_zero_shared_28_29;
 FUNCTION_TABLE[1491] = std____2____shared_ptr_pointer_maxiCounter__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiCounter__20___val_deleter_2c_20std____2__allocator_maxiCounter__20_____get_deleter_28std__type_info_20const__29_20const;
 FUNCTION_TABLE[1492] = std____2____shared_ptr_pointer_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_2c_20std____2__allocator_maxiOsc__20_____on_zero_shared_weak_28_29;
 FUNCTION_TABLE[1493] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[1494] = std____2__vector_double_2c_20std____2__allocator_double__20_____invalidate_all_iterators_28_29;
 FUNCTION_TABLE[1495] = std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20_____on_zero_shared_weak_28_29;
 FUNCTION_TABLE[1496] = std____2____shared_ptr_pointer_maxiIndex__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiIndex__20___val_deleter_2c_20std____2__allocator_maxiIndex__20______shared_ptr_pointer_28_29;
 FUNCTION_TABLE[1497] = std____2____shared_ptr_pointer_maxiIndex__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiIndex__20___val_deleter_2c_20std____2__allocator_maxiIndex__20______shared_ptr_pointer_28_29_1;
 FUNCTION_TABLE[1498] = std____2____shared_ptr_pointer_maxiIndex__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiIndex__20___val_deleter_2c_20std____2__allocator_maxiIndex__20_____on_zero_shared_28_29;
 FUNCTION_TABLE[1499] = std____2____shared_ptr_pointer_maxiIndex__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiIndex__20___val_deleter_2c_20std____2__allocator_maxiIndex__20_____get_deleter_28std__type_info_20const__29_20const;
 FUNCTION_TABLE[1500] = std____2____shared_ptr_pointer_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_2c_20std____2__allocator_maxiOsc__20_____on_zero_shared_weak_28_29;
 FUNCTION_TABLE[1501] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[1502] = std____2__vector_double_2c_20std____2__allocator_double__20_____invalidate_all_iterators_28_29;
 FUNCTION_TABLE[1503] = std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20_____on_zero_shared_weak_28_29;
 FUNCTION_TABLE[1504] = std____2____shared_ptr_pointer_maxiRatioSeq__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiRatioSeq__20___val_deleter_2c_20std____2__allocator_maxiRatioSeq__20______shared_ptr_pointer_28_29;
 FUNCTION_TABLE[1505] = std____2____shared_ptr_pointer_maxiRatioSeq__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiRatioSeq__20___val_deleter_2c_20std____2__allocator_maxiRatioSeq__20______shared_ptr_pointer_28_29_1;
 FUNCTION_TABLE[1506] = std____2____shared_ptr_pointer_maxiRatioSeq__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiRatioSeq__20___val_deleter_2c_20std____2__allocator_maxiRatioSeq__20_____on_zero_shared_28_29;
 FUNCTION_TABLE[1507] = std____2____shared_ptr_pointer_maxiRatioSeq__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiRatioSeq__20___val_deleter_2c_20std____2__allocator_maxiRatioSeq__20_____get_deleter_28std__type_info_20const__29_20const;
 FUNCTION_TABLE[1508] = std____2____shared_ptr_pointer_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_2c_20std____2__allocator_maxiOsc__20_____on_zero_shared_weak_28_29;
 FUNCTION_TABLE[1509] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[1510] = std____2__vector_double_2c_20std____2__allocator_double__20_____invalidate_all_iterators_28_29;
 FUNCTION_TABLE[1511] = std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20_____on_zero_shared_weak_28_29;
 FUNCTION_TABLE[1512] = std____2____shared_ptr_pointer_maxiSatReverb__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiSatReverb__20___val_deleter_2c_20std____2__allocator_maxiSatReverb__20______shared_ptr_pointer_28_29;
 FUNCTION_TABLE[1513] = std____2____shared_ptr_pointer_maxiSatReverb__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiSatReverb__20___val_deleter_2c_20std____2__allocator_maxiSatReverb__20______shared_ptr_pointer_28_29_1;
 FUNCTION_TABLE[1514] = std____2____shared_ptr_pointer_maxiSatReverb__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiSatReverb__20___val_deleter_2c_20std____2__allocator_maxiSatReverb__20_____on_zero_shared_28_29;
 FUNCTION_TABLE[1515] = std____2____shared_ptr_pointer_maxiSatReverb__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiSatReverb__20___val_deleter_2c_20std____2__allocator_maxiSatReverb__20_____get_deleter_28std__type_info_20const__29_20const;
 FUNCTION_TABLE[1516] = std____2____shared_ptr_pointer_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_2c_20std____2__allocator_maxiOsc__20_____on_zero_shared_weak_28_29;
 FUNCTION_TABLE[1517] = std____2____shared_ptr_emplace_maxiSatReverb_2c_20std____2__allocator_maxiSatReverb__20______shared_ptr_emplace_28_29;
 FUNCTION_TABLE[1518] = std____2____shared_ptr_emplace_maxiSatReverb_2c_20std____2__allocator_maxiSatReverb__20______shared_ptr_emplace_28_29_1;
 FUNCTION_TABLE[1519] = std____2____shared_ptr_emplace_maxiSatReverb_2c_20std____2__allocator_maxiSatReverb__20_____on_zero_shared_28_29;
 FUNCTION_TABLE[1520] = std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20_____on_zero_shared_weak_28_29;
 FUNCTION_TABLE[1521] = std____2____shared_ptr_pointer_maxiFreeVerb__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiFreeVerb__20___val_deleter_2c_20std____2__allocator_maxiFreeVerb__20______shared_ptr_pointer_28_29;
 FUNCTION_TABLE[1522] = std____2____shared_ptr_pointer_maxiFreeVerb__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiFreeVerb__20___val_deleter_2c_20std____2__allocator_maxiFreeVerb__20______shared_ptr_pointer_28_29_1;
 FUNCTION_TABLE[1523] = std____2____shared_ptr_pointer_maxiFreeVerb__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiFreeVerb__20___val_deleter_2c_20std____2__allocator_maxiFreeVerb__20_____on_zero_shared_28_29;
 FUNCTION_TABLE[1524] = std____2____shared_ptr_pointer_maxiFreeVerb__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiFreeVerb__20___val_deleter_2c_20std____2__allocator_maxiFreeVerb__20_____get_deleter_28std__type_info_20const__29_20const;
 FUNCTION_TABLE[1525] = std____2____shared_ptr_pointer_maxiOsc__2c_20emscripten__smart_ptr_trait_std____2__shared_ptr_maxiOsc__20___val_deleter_2c_20std____2__allocator_maxiOsc__20_____on_zero_shared_weak_28_29;
 FUNCTION_TABLE[1526] = std____2____shared_ptr_emplace_maxiFreeVerb_2c_20std____2__allocator_maxiFreeVerb__20______shared_ptr_emplace_28_29;
 FUNCTION_TABLE[1527] = std____2____shared_ptr_emplace_maxiFreeVerb_2c_20std____2__allocator_maxiFreeVerb__20______shared_ptr_emplace_28_29_1;
 FUNCTION_TABLE[1528] = std____2____shared_ptr_emplace_maxiSatReverb_2c_20std____2__allocator_maxiSatReverb__20_____on_zero_shared_28_29;
 FUNCTION_TABLE[1529] = std____2____shared_ptr_emplace_maxiOsc_2c_20std____2__allocator_maxiOsc__20_____on_zero_shared_weak_28_29;
 FUNCTION_TABLE[1530] = std____2__valarray_double___resize_28unsigned_20long_2c_20double_29;
 FUNCTION_TABLE[1531] = maxiReverbFilters__maxiReverbFilters_28_29;
 FUNCTION_TABLE[1532] = point_compare_28void_20const__2c_20void_20const__29;
 FUNCTION_TABLE[1533] = uint32_compare_28void_20const__2c_20void_20const__29;
 FUNCTION_TABLE[1534] = __stdio_close;
 FUNCTION_TABLE[1535] = __stdio_write;
 FUNCTION_TABLE[1536] = __stdio_seek;
 FUNCTION_TABLE[1537] = fmt_fp;
 FUNCTION_TABLE[1538] = pop_arg_long_double;
 FUNCTION_TABLE[1539] = emscripten__internal__WithPolicies____ArgTypeList____getCount_28_29_20const;
 FUNCTION_TABLE[1540] = __emscripten_stdout_seek;
 FUNCTION_TABLE[1541] = __stdio_read;
 FUNCTION_TABLE[1542] = sn_write;
 FUNCTION_TABLE[1543] = std____2__ios_base____call_callbacks_28std____2__ios_base__event_29;
 FUNCTION_TABLE[1544] = wmemcpy;
 FUNCTION_TABLE[1545] = std____2__codecvt_char_2c_20char_2c_20__mbstate_t___encoding_28_29_20const;
 FUNCTION_TABLE[1546] = std____2__basic_ios_char_2c_20std____2__char_traits_char__20___good_28_29_20const;
 FUNCTION_TABLE[1547] = std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___sgetn_28char__2c_20long_29;
 FUNCTION_TABLE[1548] = std____2__basic_ios_char_2c_20std____2__char_traits_char__20___exceptions_28_29_20const;
 FUNCTION_TABLE[1549] = std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___pubseekoff_28long_20long_2c_20std____2__ios_base__seekdir_2c_20unsigned_20int_29;
 FUNCTION_TABLE[1550] = bool_20std____2__operator_____mbstate_t__28std____2__fpos___mbstate_t__20const__2c_20std____2__fpos___mbstate_t__20const__29;
 FUNCTION_TABLE[1551] = std____2__basic_ostream_wchar_t_2c_20std____2__char_traits_wchar_t__20___sentry__sentry_28std____2__basic_ostream_wchar_t_2c_20std____2__char_traits_wchar_t__20___29;
 FUNCTION_TABLE[1552] = std____2__codecvt_char_2c_20char_2c_20__mbstate_t___encoding_28_29_20const;
 FUNCTION_TABLE[1553] = std____2__basic_ios_char_2c_20std____2__char_traits_char__20___setstate_28unsigned_20int_29;
 FUNCTION_TABLE[1554] = std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__20const__20std____2__use_facet_std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__20__28std____2__locale_20const__29;
 FUNCTION_TABLE[1555] = std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20char_2c_20long_29_20const;
 FUNCTION_TABLE[1556] = std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20char_2c_20unsigned_20long_29_20const;
 FUNCTION_TABLE[1557] = std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator__28char_29;
 FUNCTION_TABLE[1558] = std____2__vector_double_2c_20std____2__allocator_double__20_____invalidate_all_iterators_28_29;
 FUNCTION_TABLE[1559] = std____2__ios_base__failure__failure_28char_20const__2c_20std____2__error_code_20const__29;
 FUNCTION_TABLE[1560] = __cxa_throw;
 FUNCTION_TABLE[1561] = std____2__ios_base__failure___failure_28_29;
 FUNCTION_TABLE[1562] = std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20____basic_streambuf_28_29;
 FUNCTION_TABLE[1563] = std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20____basic_streambuf_28_29_1;
 FUNCTION_TABLE[1564] = std____2____vector_base_double_2c_20std____2__allocator_double__20_____copy_assign_alloc_28std____2____vector_base_double_2c_20std____2__allocator_double__20__20const__29;
 FUNCTION_TABLE[1565] = std____2__vector_double_2c_20std____2__allocator_double__20_____RAII_IncreaseAnnotator____RAII_IncreaseAnnotator_28std____2__vector_double_2c_20std____2__allocator_double__20__20const__2c_20unsigned_20long_29;
 FUNCTION_TABLE[1566] = std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___seekoff_28long_20long_2c_20std____2__ios_base__seekdir_2c_20unsigned_20int_29;
 FUNCTION_TABLE[1567] = std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___seekpos_28std____2__fpos___mbstate_t__2c_20unsigned_20int_29;
 FUNCTION_TABLE[1568] = emscripten__internal__WithPolicies____ArgTypeList____getCount_28_29_20const;
 FUNCTION_TABLE[1569] = std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___underflow_28_29;
 FUNCTION_TABLE[1570] = std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___pbackfail_28int_29;
 FUNCTION_TABLE[1571] = std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___pbackfail_28int_29;
 FUNCTION_TABLE[1572] = std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20____basic_streambuf_28_29;
 FUNCTION_TABLE[1573] = std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20____basic_streambuf_28_29_1;
 FUNCTION_TABLE[1574] = std____2____vector_base_double_2c_20std____2__allocator_double__20_____copy_assign_alloc_28std____2____vector_base_double_2c_20std____2__allocator_double__20__20const__29;
 FUNCTION_TABLE[1575] = std____2__vector_double_2c_20std____2__allocator_double__20_____RAII_IncreaseAnnotator____RAII_IncreaseAnnotator_28std____2__vector_double_2c_20std____2__allocator_double__20__20const__2c_20unsigned_20long_29;
 FUNCTION_TABLE[1576] = std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___seekoff_28long_20long_2c_20std____2__ios_base__seekdir_2c_20unsigned_20int_29;
 FUNCTION_TABLE[1577] = std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___seekpos_28std____2__fpos___mbstate_t__2c_20unsigned_20int_29;
 FUNCTION_TABLE[1578] = emscripten__internal__WithPolicies____ArgTypeList____getCount_28_29_20const;
 FUNCTION_TABLE[1579] = emscripten__internal__WithPolicies____ArgTypeList____getCount_28_29_20const;
 FUNCTION_TABLE[1580] = std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___xsgetn_28wchar_t__2c_20long_29;
 FUNCTION_TABLE[1581] = std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___underflow_28_29;
 FUNCTION_TABLE[1582] = std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___uflow_28_29;
 FUNCTION_TABLE[1583] = std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___pbackfail_28int_29;
 FUNCTION_TABLE[1584] = std____2__basic_streambuf_wchar_t_2c_20std____2__char_traits_wchar_t__20___xsputn_28wchar_t_20const__2c_20long_29;
 FUNCTION_TABLE[1585] = std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___pbackfail_28int_29;
 FUNCTION_TABLE[1586] = std____2__basic_istream_char_2c_20std____2__char_traits_char__20____basic_istream_28_29_1;
 FUNCTION_TABLE[1587] = std____2__basic_istream_char_2c_20std____2__char_traits_char__20____basic_istream_28_29_2;
 FUNCTION_TABLE[1588] = virtual_20thunk_20to_20std____2__basic_istream_char_2c_20std____2__char_traits_char__20____basic_istream_28_29;
 FUNCTION_TABLE[1589] = virtual_20thunk_20to_20std____2__basic_istream_char_2c_20std____2__char_traits_char__20____basic_istream_28_29_1;
 FUNCTION_TABLE[1590] = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20____basic_ostream_28_29_1;
 FUNCTION_TABLE[1591] = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20____basic_ostream_28_29_2;
 FUNCTION_TABLE[1592] = virtual_20thunk_20to_20std____2__basic_ostream_char_2c_20std____2__char_traits_char__20____basic_ostream_28_29;
 FUNCTION_TABLE[1593] = virtual_20thunk_20to_20std____2__basic_ostream_char_2c_20std____2__char_traits_char__20____basic_ostream_28_29_1;
 FUNCTION_TABLE[1594] = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20____basic_ostream_28_29_1;
 FUNCTION_TABLE[1595] = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20____basic_ostream_28_29_2;
 FUNCTION_TABLE[1596] = virtual_20thunk_20to_20std____2__basic_ostream_char_2c_20std____2__char_traits_char__20____basic_ostream_28_29;
 FUNCTION_TABLE[1597] = virtual_20thunk_20to_20std____2__basic_ostream_char_2c_20std____2__char_traits_char__20____basic_ostream_28_29_1;
 FUNCTION_TABLE[1598] = unsigned_20char__20std____2____to_raw_pointer_unsigned_20char__28unsigned_20char__29;
 FUNCTION_TABLE[1599] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[1600] = std____2____iostream_category__name_28_29_20const;
 FUNCTION_TABLE[1601] = std____2__error_category__default_error_condition_28int_29_20const;
 FUNCTION_TABLE[1602] = std____2__error_category__equivalent_28int_2c_20std____2__error_condition_20const__29_20const;
 FUNCTION_TABLE[1603] = std____2__error_category__equivalent_28std____2__error_code_20const__2c_20int_29_20const;
 FUNCTION_TABLE[1604] = std____2____iostream_category__message_28int_29_20const;
 FUNCTION_TABLE[1605] = std____2__ios_base__failure___failure_28_29_1;
 FUNCTION_TABLE[1606] = std____2____compressed_pair_double__2c_20std____2__allocator_double_____second_28_29;
 FUNCTION_TABLE[1607] = std____2__ios_base___ios_base_28_29;
 FUNCTION_TABLE[1608] = std____2__ios_base___ios_base_28_29_1;
 FUNCTION_TABLE[1609] = std____2__basic_ios_char_2c_20std____2__char_traits_char__20____basic_ios_28_29;
 FUNCTION_TABLE[1610] = std____2__basic_ios_char_2c_20std____2__char_traits_char__20____basic_ios_28_29_1;
 FUNCTION_TABLE[1611] = std____2__basic_ios_char_2c_20std____2__char_traits_char__20____basic_ios_28_29;
 FUNCTION_TABLE[1612] = std____2__basic_ios_char_2c_20std____2__char_traits_char__20____basic_ios_28_29_1;
 FUNCTION_TABLE[1613] = __cxx_global_array_dtor_1;
 FUNCTION_TABLE[1614] = std____2__basic_ostream_char_2c_20std____2__char_traits_char__20___flush_28_29;
 FUNCTION_TABLE[1615] = std____2__basic_ostream_wchar_t_2c_20std____2__char_traits_wchar_t__20___flush_28_29;
 FUNCTION_TABLE[1616] = std____2__basic_ios_char_2c_20std____2__char_traits_char__20___init_28std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___29;
 FUNCTION_TABLE[1617] = std____2__basic_ios_char_2c_20std____2__char_traits_char__20___init_28std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___29;
 FUNCTION_TABLE[1618] = std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t__20const__20std____2__use_facet_std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t__20__28std____2__locale_20const__29;
 FUNCTION_TABLE[1619] = std____2____stdinbuf_char______stdinbuf_28_29;
 FUNCTION_TABLE[1620] = std____2____stdinbuf_char___imbue_28std____2__locale_20const__29;
 FUNCTION_TABLE[1621] = std____2____stdinbuf_char___underflow_28_29;
 FUNCTION_TABLE[1622] = std____2____stdinbuf_char___uflow_28_29;
 FUNCTION_TABLE[1623] = std____2____stdinbuf_char___pbackfail_28int_29;
 FUNCTION_TABLE[1624] = std____2____stdinbuf_wchar_t______stdinbuf_28_29;
 FUNCTION_TABLE[1625] = std____2____stdinbuf_wchar_t___imbue_28std____2__locale_20const__29;
 FUNCTION_TABLE[1626] = std____2____stdinbuf_wchar_t___underflow_28_29;
 FUNCTION_TABLE[1627] = std____2____stdinbuf_wchar_t___uflow_28_29;
 FUNCTION_TABLE[1628] = std____2____stdinbuf_wchar_t___pbackfail_28unsigned_20int_29;
 FUNCTION_TABLE[1629] = std____2____stdinbuf_char______stdinbuf_28_29;
 FUNCTION_TABLE[1630] = std____2____stdoutbuf_char___imbue_28std____2__locale_20const__29;
 FUNCTION_TABLE[1631] = std____2____stdoutbuf_char___sync_28_29;
 FUNCTION_TABLE[1632] = std____2____stdoutbuf_char___xsputn_28char_20const__2c_20long_29;
 FUNCTION_TABLE[1633] = std____2____stdoutbuf_char___overflow_28int_29;
 FUNCTION_TABLE[1634] = std____2____stdinbuf_wchar_t______stdinbuf_28_29;
 FUNCTION_TABLE[1635] = std____2____stdoutbuf_wchar_t___imbue_28std____2__locale_20const__29;
 FUNCTION_TABLE[1636] = std____2____stdoutbuf_char___sync_28_29;
 FUNCTION_TABLE[1637] = std____2____stdoutbuf_wchar_t___xsputn_28wchar_t_20const__2c_20long_29;
 FUNCTION_TABLE[1638] = std____2____stdoutbuf_wchar_t___overflow_28unsigned_20int_29;
 FUNCTION_TABLE[1639] = do_read;
 FUNCTION_TABLE[1640] = std____2__numpunct_char__20const__20std____2__use_facet_std____2__numpunct_char__20__28std____2__locale_20const__29;
 FUNCTION_TABLE[1641] = std____2__numpunct_char___truename_28_29_20const;
 FUNCTION_TABLE[1642] = std____2__numpunct_char___falsename_28_29_20const;
 FUNCTION_TABLE[1643] = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__20std____2____scan_keyword_std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__ctype_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__ctype_char__20const__2c_20unsigned_20int__2c_20bool_29;
 FUNCTION_TABLE[1644] = dlfree;
 FUNCTION_TABLE[1645] = std____throw_bad_alloc_28_29;
 FUNCTION_TABLE[1646] = bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29;
 FUNCTION_TABLE[1647] = bool_20std____2__operator___char_2c_20std____2__char_traits_char__20__28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20const__29_1;
 FUNCTION_TABLE[1648] = std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator__28_29_20const;
 FUNCTION_TABLE[1649] = std____2__ctype_char___toupper_28char_29_20const;
 FUNCTION_TABLE[1650] = std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator___28_29;
 FUNCTION_TABLE[1651] = std____2____compressed_pair__IO_FILE__2c_20int_20_28__29_28_IO_FILE__29_____compressed_pair__IO_FILE___2c_20int_20_28__29_28_IO_FILE__29__28_IO_FILE___2c_20int_20_28____29_28_IO_FILE__29_29;
 FUNCTION_TABLE[1652] = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___resize_28unsigned_20long_29;
 FUNCTION_TABLE[1653] = std____2____num_get_char_____stage2_int_loop_28char_2c_20int_2c_20char__2c_20char___2c_20unsigned_20int__2c_20char_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int___2c_20char_20const__29;
 FUNCTION_TABLE[1654] = long_20std____2____num_get_signed_integral_long__28char_20const__2c_20char_20const__2c_20unsigned_20int__2c_20int_29;
 FUNCTION_TABLE[1655] = std____2____check_grouping_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int__2c_20unsigned_20int__29;
 FUNCTION_TABLE[1656] = std____2__numpunct_char___thousands_sep_28_29_20const;
 FUNCTION_TABLE[1657] = std____2__numpunct_char___grouping_28_29_20const;
 FUNCTION_TABLE[1658] = long_20long_20std____2____num_get_signed_integral_long_20long__28char_20const__2c_20char_20const__2c_20unsigned_20int__2c_20int_29;
 FUNCTION_TABLE[1659] = unsigned_20short_20std____2____num_get_unsigned_integral_unsigned_20short__28char_20const__2c_20char_20const__2c_20unsigned_20int__2c_20int_29;
 FUNCTION_TABLE[1660] = unsigned_20int_20std____2____num_get_unsigned_integral_unsigned_20int__28char_20const__2c_20char_20const__2c_20unsigned_20int__2c_20int_29;
 FUNCTION_TABLE[1661] = unsigned_20int_20std____2____num_get_unsigned_integral_unsigned_20int__28char_20const__2c_20char_20const__2c_20unsigned_20int__2c_20int_29;
 FUNCTION_TABLE[1662] = unsigned_20long_20long_20std____2____num_get_unsigned_integral_unsigned_20long_20long__28char_20const__2c_20char_20const__2c_20unsigned_20int__2c_20int_29;
 FUNCTION_TABLE[1663] = std____2____num_get_char_____stage2_float_loop_28char_2c_20bool__2c_20char__2c_20char__2c_20char___2c_20char_2c_20char_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int___2c_20unsigned_20int__2c_20char__29;
 FUNCTION_TABLE[1664] = float_20std____2____num_get_float_float__28char_20const__2c_20char_20const__2c_20unsigned_20int__29;
 FUNCTION_TABLE[1665] = std____2__ctype_char___widen_28char_20const__2c_20char_20const__2c_20char__29_20const;
 FUNCTION_TABLE[1666] = std____2__numpunct_char___decimal_point_28_29_20const;
 FUNCTION_TABLE[1667] = double_20std____2____num_get_float_double__28char_20const__2c_20char_20const__2c_20unsigned_20int__29;
 FUNCTION_TABLE[1668] = long_20double_20std____2____num_get_float_long_20double__28char_20const__2c_20char_20const__2c_20unsigned_20int__29;
 FUNCTION_TABLE[1669] = std____2__ios_base__getloc_28_29_20const;
 FUNCTION_TABLE[1670] = std____2____cloc_28_29;
 FUNCTION_TABLE[1671] = std____2____libcpp_sscanf_l_28char_20const__2c_20__locale_struct__2c_20char_20const__2c_20____29;
 FUNCTION_TABLE[1672] = __newlocale;
 FUNCTION_TABLE[1673] = __uselocale;
 FUNCTION_TABLE[1674] = std____2__ctype_wchar_t__20const__20std____2__use_facet_std____2__ctype_wchar_t__20__28std____2__locale_20const__29;
 FUNCTION_TABLE[1675] = std____2__numpunct_wchar_t__20const__20std____2__use_facet_std____2__numpunct_wchar_t__20__28std____2__locale_20const__29;
 FUNCTION_TABLE[1676] = std____2__numpunct_char___truename_28_29_20const;
 FUNCTION_TABLE[1677] = std____2__numpunct_char___falsename_28_29_20const;
 FUNCTION_TABLE[1678] = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__20std____2____scan_keyword_std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__2c_20std____2__ctype_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__2c_20std____2__ctype_wchar_t__20const__2c_20unsigned_20int__2c_20bool_29;
 FUNCTION_TABLE[1679] = bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29;
 FUNCTION_TABLE[1680] = bool_20std____2__operator___wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20const__29_1;
 FUNCTION_TABLE[1681] = std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator__28_29_20const;
 FUNCTION_TABLE[1682] = std____2__ctype_char___widen_28char_29_20const;
 FUNCTION_TABLE[1683] = std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator___28_29;
 FUNCTION_TABLE[1684] = std____2____num_get_wchar_t_____stage2_int_loop_28wchar_t_2c_20int_2c_20char__2c_20char___2c_20unsigned_20int__2c_20wchar_t_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int___2c_20wchar_t_20const__29;
 FUNCTION_TABLE[1685] = std____2__numpunct_char___thousands_sep_28_29_20const;
 FUNCTION_TABLE[1686] = std____2__numpunct_char___grouping_28_29_20const;
 FUNCTION_TABLE[1687] = std____2____num_get_wchar_t_____stage2_float_loop_28wchar_t_2c_20bool__2c_20char__2c_20char__2c_20char___2c_20wchar_t_2c_20wchar_t_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20unsigned_20int__2c_20unsigned_20int___2c_20unsigned_20int__2c_20wchar_t__29;
 FUNCTION_TABLE[1688] = std____2__ctype_wchar_t___widen_28char_20const__2c_20char_20const__2c_20wchar_t__29_20const;
 FUNCTION_TABLE[1689] = std____2__numpunct_char___decimal_point_28_29_20const;
 FUNCTION_TABLE[1690] = std____2____num_put_char_____widen_and_group_int_28char__2c_20char__2c_20char__2c_20char__2c_20char___2c_20char___2c_20std____2__locale_20const__29;
 FUNCTION_TABLE[1691] = void_20std____2__reverse_char___28char__2c_20char__29;
 FUNCTION_TABLE[1692] = std____2____libcpp_asprintf_l_28char___2c_20__locale_struct__2c_20char_20const__2c_20____29;
 FUNCTION_TABLE[1693] = std____2____num_put_char_____widen_and_group_float_28char__2c_20char__2c_20char__2c_20char__2c_20char___2c_20char___2c_20std____2__locale_20const__29;
 FUNCTION_TABLE[1694] = std____2____compressed_pair__IO_FILE__2c_20int_20_28__29_28_IO_FILE__29_____compressed_pair__IO_FILE___2c_20int_20_28__29_28_IO_FILE__29__28_IO_FILE___2c_20int_20_28____29_28_IO_FILE__29_29;
 FUNCTION_TABLE[1695] = vasprintf;
 FUNCTION_TABLE[1696] = __isxdigit_l;
 FUNCTION_TABLE[1697] = __isdigit_l;
 FUNCTION_TABLE[1698] = std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator__28wchar_t_29;
 FUNCTION_TABLE[1699] = std____2____num_put_wchar_t_____widen_and_group_int_28char__2c_20char__2c_20char__2c_20wchar_t__2c_20wchar_t___2c_20wchar_t___2c_20std____2__locale_20const__29;
 FUNCTION_TABLE[1700] = std____2__ctype_wchar_t___widen_28char_29_20const;
 FUNCTION_TABLE[1701] = void_20std____2__reverse_wchar_t___28wchar_t__2c_20wchar_t__29;
 FUNCTION_TABLE[1702] = std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___sputn_28char_20const__2c_20long_29;
 FUNCTION_TABLE[1703] = std____2____num_put_wchar_t_____widen_and_group_float_28char__2c_20char__2c_20char__2c_20wchar_t__2c_20wchar_t___2c_20wchar_t___2c_20std____2__locale_20const__29;
 FUNCTION_TABLE[1704] = std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20std____2____pad_and_output_wchar_t_2c_20std____2__char_traits_wchar_t__20__28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20std____2__ios_base__2c_20wchar_t_29;
 FUNCTION_TABLE[1705] = std____2____compressed_pair__IO_FILE__2c_20int_20_28__29_28_IO_FILE__29_____compressed_pair__IO_FILE___2c_20int_20_28__29_28_IO_FILE__29__28_IO_FILE___2c_20int_20_28____29_28_IO_FILE__29_29;
 FUNCTION_TABLE[1706] = mbsrtowcs;
 FUNCTION_TABLE[1707] = std__runtime_error__runtime_error_28char_20const__29;
 FUNCTION_TABLE[1708] = std__runtime_error___runtime_error_28_29;
 FUNCTION_TABLE[1709] = std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20_____compressed_pair_true_2c_20void__28_29;
 FUNCTION_TABLE[1710] = std____2__vector_double_2c_20std____2__allocator_double__20_____invalidate_all_iterators_28_29;
 FUNCTION_TABLE[1711] = std____2__money_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20_____do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20bool_2c_20std____2__locale_20const__2c_20unsigned_20int_2c_20unsigned_20int__2c_20bool__2c_20std____2__ctype_char__20const__2c_20std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___2c_20char___2c_20char__29;
 FUNCTION_TABLE[1712] = std____2____throw_runtime_error_28char_20const__29;
 FUNCTION_TABLE[1713] = std____2____money_get_char_____gather_info_28bool_2c_20std____2__locale_20const__2c_20std____2__money_base__pattern__2c_20char__2c_20char__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___2c_20int__29;
 FUNCTION_TABLE[1714] = std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20___operator___28int_29;
 FUNCTION_TABLE[1715] = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___push_back_28char_29;
 FUNCTION_TABLE[1716] = bool_20std____2__equal_std____2____wrap_iter_char___2c_20std____2____wrap_iter_char___20__28std____2____wrap_iter_char___2c_20std____2____wrap_iter_char___2c_20std____2____wrap_iter_char___29;
 FUNCTION_TABLE[1717] = void_20std____2____double_or_nothing_char__28std____2__unique_ptr_char_2c_20void_20_28__29_28void__29___2c_20char___2c_20char___29;
 FUNCTION_TABLE[1718] = void_20std____2____double_or_nothing_unsigned_20int__28std____2__unique_ptr_unsigned_20int_2c_20void_20_28__29_28void__29___2c_20unsigned_20int___2c_20unsigned_20int___29;
 FUNCTION_TABLE[1719] = std____2____compressed_pair__IO_FILE__2c_20int_20_28__29_28_IO_FILE__29_____compressed_pair__IO_FILE___2c_20int_20_28__29_28_IO_FILE__29__28_IO_FILE___2c_20int_20_28____29_28_IO_FILE__29_29;
 FUNCTION_TABLE[1720] = std____2__enable_if__28__is_forward_iterator_char____value_29_20___20_28__libcpp_string_gets_noexcept_iterator_char____value_29_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____type_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___append_char___28char__2c_20char__29;
 FUNCTION_TABLE[1721] = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___append_28char_20const__2c_20unsigned_20long_29;
 FUNCTION_TABLE[1722] = std____2__money_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20_____do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20bool_2c_20std____2__locale_20const__2c_20unsigned_20int_2c_20unsigned_20int__2c_20bool__2c_20std____2__ctype_wchar_t__20const__2c_20std____2__unique_ptr_wchar_t_2c_20void_20_28__29_28void__29___2c_20wchar_t___2c_20wchar_t__29;
 FUNCTION_TABLE[1723] = std____2____money_get_wchar_t_____gather_info_28bool_2c_20std____2__locale_20const__2c_20std____2__money_base__pattern__2c_20wchar_t__2c_20wchar_t__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___2c_20int__29;
 FUNCTION_TABLE[1724] = std____2__ctype_wchar_t___is_28unsigned_20short_2c_20wchar_t_29_20const;
 FUNCTION_TABLE[1725] = std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20___operator___28int_29;
 FUNCTION_TABLE[1726] = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___push_back_28wchar_t_29;
 FUNCTION_TABLE[1727] = bool_20std____2__equal_std____2____wrap_iter_wchar_t___2c_20std____2____wrap_iter_wchar_t___20__28std____2____wrap_iter_wchar_t___2c_20std____2____wrap_iter_wchar_t___2c_20std____2____wrap_iter_wchar_t___29;
 FUNCTION_TABLE[1728] = void_20std____2____double_or_nothing_unsigned_20int__28std____2__unique_ptr_unsigned_20int_2c_20void_20_28__29_28void__29___2c_20unsigned_20int___2c_20unsigned_20int___29;
 FUNCTION_TABLE[1729] = std____2__enable_if__28__is_forward_iterator_wchar_t____value_29_20___20_28__libcpp_string_gets_noexcept_iterator_wchar_t____value_29_2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20_____type_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___append_wchar_t___28wchar_t__2c_20wchar_t__29;
 FUNCTION_TABLE[1730] = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___append_28wchar_t_20const__2c_20unsigned_20long_29;
 FUNCTION_TABLE[1731] = std____2____money_put_char_____gather_info_28bool_2c_20bool_2c_20std____2__locale_20const__2c_20std____2__money_base__pattern__2c_20char__2c_20char__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___2c_20int__29;
 FUNCTION_TABLE[1732] = std____2____money_put_char_____format_28char__2c_20char___2c_20char___2c_20unsigned_20int_2c_20char_20const__2c_20char_20const__2c_20std____2__ctype_char__20const__2c_20bool_2c_20std____2__money_base__pattern_20const__2c_20char_2c_20char_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20int_29;
 FUNCTION_TABLE[1733] = std____2____money_put_wchar_t_____gather_info_28bool_2c_20bool_2c_20std____2__locale_20const__2c_20std____2__money_base__pattern__2c_20wchar_t__2c_20wchar_t__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___2c_20int__29;
 FUNCTION_TABLE[1734] = std____2____money_put_wchar_t_____format_28wchar_t__2c_20wchar_t___2c_20wchar_t___2c_20unsigned_20int_2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20std____2__ctype_wchar_t__20const__2c_20bool_2c_20std____2__money_base__pattern_20const__2c_20wchar_t_2c_20wchar_t_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__2c_20int_29;
 FUNCTION_TABLE[1735] = std____2__vector_double_2c_20std____2__allocator_double__20_____make_iter_28double__29;
 FUNCTION_TABLE[1736] = std____2__back_insert_iterator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20__20std____2____narrow_to_utf8_8ul___operator_28_29_std____2__back_insert_iterator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20__2c_20char__28std____2__back_insert_iterator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20__2c_20char_20const__2c_20char_20const__29_20const;
 FUNCTION_TABLE[1737] = catgets;
 FUNCTION_TABLE[1738] = std____2__back_insert_iterator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20__20std____2____narrow_to_utf8_8ul___operator_28_29_std____2__back_insert_iterator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20__2c_20char__28std____2__back_insert_iterator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20__2c_20char_20const__2c_20char_20const__29_20const;
 FUNCTION_TABLE[1739] = std____2____narrow_to_utf8_32ul_____narrow_to_utf8_28_29;
 FUNCTION_TABLE[1740] = std____2__back_insert_iterator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20__20std____2____narrow_to_utf8_32ul___operator_28_29_std____2__back_insert_iterator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20__2c_20wchar_t__28std____2__back_insert_iterator_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20__2c_20wchar_t_20const__2c_20wchar_t_20const__29_20const;
 FUNCTION_TABLE[1741] = std____2____widen_from_utf8_32ul_____widen_from_utf8_28_29;
 FUNCTION_TABLE[1742] = std____2__vector_double_2c_20std____2__allocator_double__20_____make_iter_28double__29;
 FUNCTION_TABLE[1743] = std____2__back_insert_iterator_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20__20std____2____widen_from_utf8_32ul___operator_28_29_std____2__back_insert_iterator_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20__20__28std____2__back_insert_iterator_std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20__2c_20char_20const__2c_20char_20const__29_20const;
 FUNCTION_TABLE[1744] = freelocale;
 FUNCTION_TABLE[1745] = std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20___vector_28unsigned_20long_29;
 FUNCTION_TABLE[1746] = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28char_20const__29;
 FUNCTION_TABLE[1747] = void_20std____2__locale____imp__install_std____2__collate_char__20__28std____2__collate_char___29;
 FUNCTION_TABLE[1748] = void_20std____2__locale____imp__install_std____2__collate_wchar_t__20__28std____2__collate_wchar_t___29;
 FUNCTION_TABLE[1749] = void_20std____2__locale____imp__install_std____2__ctype_char__20__28std____2__ctype_char___29;
 FUNCTION_TABLE[1750] = std____2__ctype_wchar_t___20std____2___28anonymous_20namespace_29__make_std____2__ctype_wchar_t__2c_20unsigned_20int__28unsigned_20int_29;
 FUNCTION_TABLE[1751] = void_20std____2__locale____imp__install_std____2__ctype_wchar_t__20__28std____2__ctype_wchar_t___29;
 FUNCTION_TABLE[1752] = std____2__codecvt_char_2c_20char_2c_20__mbstate_t___20std____2___28anonymous_20namespace_29__make_std____2__codecvt_char_2c_20char_2c_20__mbstate_t__2c_20unsigned_20int__28unsigned_20int_29;
 FUNCTION_TABLE[1753] = void_20std____2__locale____imp__install_std____2__codecvt_char_2c_20char_2c_20__mbstate_t__20__28std____2__codecvt_char_2c_20char_2c_20__mbstate_t___29;
 FUNCTION_TABLE[1754] = std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t___20std____2___28anonymous_20namespace_29__make_std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t__2c_20unsigned_20int__28unsigned_20int_29;
 FUNCTION_TABLE[1755] = void_20std____2__locale____imp__install_std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t__20__28std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t___29;
 FUNCTION_TABLE[1756] = std____2__codecvt_char16_t_2c_20char_2c_20__mbstate_t___20std____2___28anonymous_20namespace_29__make_std____2__codecvt_char16_t_2c_20char_2c_20__mbstate_t__2c_20unsigned_20int__28unsigned_20int_29;
 FUNCTION_TABLE[1757] = void_20std____2__locale____imp__install_std____2__codecvt_char16_t_2c_20char_2c_20__mbstate_t__20__28std____2__codecvt_char16_t_2c_20char_2c_20__mbstate_t___29;
 FUNCTION_TABLE[1758] = std____2__codecvt_char32_t_2c_20char_2c_20__mbstate_t___20std____2___28anonymous_20namespace_29__make_std____2__codecvt_char32_t_2c_20char_2c_20__mbstate_t__2c_20unsigned_20int__28unsigned_20int_29;
 FUNCTION_TABLE[1759] = void_20std____2__locale____imp__install_std____2__codecvt_char32_t_2c_20char_2c_20__mbstate_t__20__28std____2__codecvt_char32_t_2c_20char_2c_20__mbstate_t___29;
 FUNCTION_TABLE[1760] = void_20std____2__locale____imp__install_std____2__numpunct_char__20__28std____2__numpunct_char___29;
 FUNCTION_TABLE[1761] = void_20std____2__locale____imp__install_std____2__numpunct_wchar_t__20__28std____2__numpunct_wchar_t___29;
 FUNCTION_TABLE[1762] = void_20std____2__locale____imp__install_std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__20__28std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___29;
 FUNCTION_TABLE[1763] = void_20std____2__locale____imp__install_std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20__20__28std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___29;
 FUNCTION_TABLE[1764] = void_20std____2__locale____imp__install_std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__20__28std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___29;
 FUNCTION_TABLE[1765] = void_20std____2__locale____imp__install_std____2__num_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20__20__28std____2__num_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___29;
 FUNCTION_TABLE[1766] = std____2__moneypunct_char_2c_20false___20std____2___28anonymous_20namespace_29__make_std____2__moneypunct_char_2c_20false__2c_20unsigned_20int__28unsigned_20int_29;
 FUNCTION_TABLE[1767] = void_20std____2__locale____imp__install_std____2__moneypunct_char_2c_20false__20__28std____2__moneypunct_char_2c_20false___29;
 FUNCTION_TABLE[1768] = std____2__moneypunct_char_2c_20true___20std____2___28anonymous_20namespace_29__make_std____2__moneypunct_char_2c_20true__2c_20unsigned_20int__28unsigned_20int_29;
 FUNCTION_TABLE[1769] = void_20std____2__locale____imp__install_std____2__moneypunct_char_2c_20true__20__28std____2__moneypunct_char_2c_20true___29;
 FUNCTION_TABLE[1770] = std____2__moneypunct_wchar_t_2c_20false___20std____2___28anonymous_20namespace_29__make_std____2__moneypunct_wchar_t_2c_20false__2c_20unsigned_20int__28unsigned_20int_29;
 FUNCTION_TABLE[1771] = void_20std____2__locale____imp__install_std____2__moneypunct_wchar_t_2c_20false__20__28std____2__moneypunct_wchar_t_2c_20false___29;
 FUNCTION_TABLE[1772] = std____2__moneypunct_wchar_t_2c_20true___20std____2___28anonymous_20namespace_29__make_std____2__moneypunct_wchar_t_2c_20true__2c_20unsigned_20int__28unsigned_20int_29;
 FUNCTION_TABLE[1773] = void_20std____2__locale____imp__install_std____2__moneypunct_wchar_t_2c_20true__20__28std____2__moneypunct_wchar_t_2c_20true___29;
 FUNCTION_TABLE[1774] = std____2__money_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___20std____2___28anonymous_20namespace_29__make_std____2__money_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__2c_20unsigned_20int__28unsigned_20int_29;
 FUNCTION_TABLE[1775] = void_20std____2__locale____imp__install_std____2__money_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__20__28std____2__money_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___29;
 FUNCTION_TABLE[1776] = std____2__money_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___20std____2___28anonymous_20namespace_29__make_std____2__money_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20__2c_20unsigned_20int__28unsigned_20int_29;
 FUNCTION_TABLE[1777] = void_20std____2__locale____imp__install_std____2__money_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20__20__28std____2__money_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___29;
 FUNCTION_TABLE[1778] = std____2__money_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___20std____2___28anonymous_20namespace_29__make_std____2__money_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__2c_20unsigned_20int__28unsigned_20int_29;
 FUNCTION_TABLE[1779] = void_20std____2__locale____imp__install_std____2__money_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__20__28std____2__money_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___29;
 FUNCTION_TABLE[1780] = std____2__money_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___20std____2___28anonymous_20namespace_29__make_std____2__money_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20__2c_20unsigned_20int__28unsigned_20int_29;
 FUNCTION_TABLE[1781] = void_20std____2__locale____imp__install_std____2__money_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20__20__28std____2__money_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___29;
 FUNCTION_TABLE[1782] = void_20std____2__locale____imp__install_std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__20__28std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___29;
 FUNCTION_TABLE[1783] = void_20std____2__locale____imp__install_std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20__20__28std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___29;
 FUNCTION_TABLE[1784] = std____2__time_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___20std____2___28anonymous_20namespace_29__make_std____2__time_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__2c_20unsigned_20int__28unsigned_20int_29;
 FUNCTION_TABLE[1785] = void_20std____2__locale____imp__install_std____2__time_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20__20__28std____2__time_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___29;
 FUNCTION_TABLE[1786] = std____2__time_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___20std____2___28anonymous_20namespace_29__make_std____2__time_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20__2c_20unsigned_20int__28unsigned_20int_29;
 FUNCTION_TABLE[1787] = void_20std____2__locale____imp__install_std____2__time_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20__20__28std____2__time_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___29;
 FUNCTION_TABLE[1788] = std____2__messages_char___20std____2___28anonymous_20namespace_29__make_std____2__messages_char__2c_20unsigned_20int__28unsigned_20int_29;
 FUNCTION_TABLE[1789] = void_20std____2__locale____imp__install_std____2__messages_char__20__28std____2__messages_char___29;
 FUNCTION_TABLE[1790] = std____2__messages_wchar_t___20std____2___28anonymous_20namespace_29__make_std____2__messages_wchar_t__2c_20unsigned_20int__28unsigned_20int_29;
 FUNCTION_TABLE[1791] = void_20std____2__locale____imp__install_std____2__messages_wchar_t__20__28std____2__messages_wchar_t___29;
 FUNCTION_TABLE[1792] = std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20_____vallocate_28unsigned_20long_29;
 FUNCTION_TABLE[1793] = std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20_____construct_at_end_28unsigned_20long_29;
 FUNCTION_TABLE[1794] = std____2____compressed_pair_std____2__locale__facet___2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20_____compressed_pair_std__nullptr_t_2c_20true__28std__nullptr_t___29;
 FUNCTION_TABLE[1795] = std____2__locale__id____init_28_29;
 FUNCTION_TABLE[1796] = std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20___resize_28unsigned_20long_29;
 FUNCTION_TABLE[1797] = std____2____time_put____time_put_28_29;
 FUNCTION_TABLE[1798] = std____2__locale____imp__make_classic_28_29;
 FUNCTION_TABLE[1799] = std____2____split_buffer_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul_______construct_at_end_28unsigned_20long_29;
 FUNCTION_TABLE[1800] = std____2__vector_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul__20_____swap_out_circular_buffer_28std____2____split_buffer_std____2__locale__facet__2c_20std____2____sso_allocator_std____2__locale__facet__2c_2028ul_____29;
 FUNCTION_TABLE[1801] = std____2__locale____imp__make_global_28_29;
 FUNCTION_TABLE[1802] = std____2__locale____global_28_29;
 FUNCTION_TABLE[1803] = void_20std____2____call_once_proxy_std____2__tuple_std____2___28anonymous_20namespace_29____fake_bind____20__28void__29;
 FUNCTION_TABLE[1804] = __ctype_b_loc;
 FUNCTION_TABLE[1805] = __ctype_toupper_loc;
 FUNCTION_TABLE[1806] = __ctype_tolower_loc;
 FUNCTION_TABLE[1807] = wcsnrtombs;
 FUNCTION_TABLE[1808] = wcrtomb;
 FUNCTION_TABLE[1809] = mbsnrtowcs;
 FUNCTION_TABLE[1810] = mbrtowc;
 FUNCTION_TABLE[1811] = std____2____libcpp_mbtowc_l_28wchar_t__2c_20char_20const__2c_20unsigned_20long_2c_20__locale_struct__29;
 FUNCTION_TABLE[1812] = std____2____libcpp_mb_cur_max_l_28__locale_struct__29;
 FUNCTION_TABLE[1813] = mbtowc;
 FUNCTION_TABLE[1814] = __ctype_get_mb_cur_max;
 FUNCTION_TABLE[1815] = mbrlen;
 FUNCTION_TABLE[1816] = std____2__init_weeks_28_29;
 FUNCTION_TABLE[1817] = __cxx_global_array_dtor_55;
 FUNCTION_TABLE[1818] = std____2__init_wweeks_28_29;
 FUNCTION_TABLE[1819] = __cxx_global_array_dtor_70;
 FUNCTION_TABLE[1820] = std____2__init_months_28_29;
 FUNCTION_TABLE[1821] = __cxx_global_array_dtor_85;
 FUNCTION_TABLE[1822] = std____2__init_wmonths_28_29;
 FUNCTION_TABLE[1823] = __cxx_global_array_dtor_109;
 FUNCTION_TABLE[1824] = std____2__init_am_pm_28_29;
 FUNCTION_TABLE[1825] = __cxx_global_array_dtor_133;
 FUNCTION_TABLE[1826] = std____2__init_wam_pm_28_29;
 FUNCTION_TABLE[1827] = __cxx_global_array_dtor_136;
 FUNCTION_TABLE[1828] = __cxx_global_array_dtor_2;
 FUNCTION_TABLE[1829] = std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___basic_string_28wchar_t_20const__29;
 FUNCTION_TABLE[1830] = __cxx_global_array_dtor_32;
 FUNCTION_TABLE[1831] = __cxx_global_array_dtor_34;
 FUNCTION_TABLE[1832] = __cxx_global_array_dtor_36;
 FUNCTION_TABLE[1833] = __cxx_global_array_dtor_38;
 FUNCTION_TABLE[1834] = __cxx_global_array_dtor_40;
 FUNCTION_TABLE[1835] = __cxx_global_array_dtor_42;
 FUNCTION_TABLE[1836] = __cxx_global_array_dtor_44;
 FUNCTION_TABLE[1837] = std____2____sso_allocator_std____2__locale__facet__2c_2028ul___deallocate_28std____2__locale__facet___2c_20unsigned_20long_29;
 FUNCTION_TABLE[1838] = std____2____vector_base_double_2c_20std____2__allocator_double__20_____copy_assign_alloc_28std____2____vector_base_double_2c_20std____2__allocator_double__20__20const__29;
 FUNCTION_TABLE[1839] = std____2__locale____imp_____imp_28_29;
 FUNCTION_TABLE[1840] = std____2__locale____imp_____imp_28_29_1;
 FUNCTION_TABLE[1841] = std____2__locale__facet____on_zero_shared_28_29;
 FUNCTION_TABLE[1842] = std____2__ctype_char____ctype_28_29;
 FUNCTION_TABLE[1843] = std____2__ctype_char____ctype_28_29_1;
 FUNCTION_TABLE[1844] = std____2__ctype_char___do_toupper_28char_29_20const;
 FUNCTION_TABLE[1845] = std____2__ctype_char___do_toupper_28char__2c_20char_20const__29_20const;
 FUNCTION_TABLE[1846] = std____2__ctype_char___do_tolower_28char_29_20const;
 FUNCTION_TABLE[1847] = std____2__ctype_char___do_tolower_28char__2c_20char_20const__29_20const;
 FUNCTION_TABLE[1848] = std____2__ctype_wchar_t___do_widen_28char_29_20const;
 FUNCTION_TABLE[1849] = std____2__ctype_char___do_widen_28char_20const__2c_20char_20const__2c_20char__29_20const;
 FUNCTION_TABLE[1850] = std____2__ctype_char___do_narrow_28char_2c_20char_29_20const;
 FUNCTION_TABLE[1851] = std____2__ctype_char___do_narrow_28char_20const__2c_20char_20const__2c_20char_2c_20char__29_20const;
 FUNCTION_TABLE[1852] = std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t____codecvt_28_29;
 FUNCTION_TABLE[1853] = std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t____codecvt_28_29_1;
 FUNCTION_TABLE[1854] = std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t___do_out_28__mbstate_t__2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20wchar_t_20const___2c_20char__2c_20char__2c_20char___29_20const;
 FUNCTION_TABLE[1855] = std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t___do_in_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20char_20const___2c_20wchar_t__2c_20wchar_t__2c_20wchar_t___29_20const;
 FUNCTION_TABLE[1856] = std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t___do_unshift_28__mbstate_t__2c_20char__2c_20char__2c_20char___29_20const;
 FUNCTION_TABLE[1857] = std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t___do_encoding_28_29_20const;
 FUNCTION_TABLE[1858] = emscripten__internal__WithPolicies____ArgTypeList____getCount_28_29_20const;
 FUNCTION_TABLE[1859] = std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t___do_length_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20unsigned_20long_29_20const;
 FUNCTION_TABLE[1860] = std____2__codecvt_wchar_t_2c_20char_2c_20__mbstate_t___do_max_length_28_29_20const;
 FUNCTION_TABLE[1861] = std____2__numpunct_char____numpunct_28_29;
 FUNCTION_TABLE[1862] = std____2__numpunct_char____numpunct_28_29_1;
 FUNCTION_TABLE[1863] = std____2__numpunct_char___do_decimal_point_28_29_20const;
 FUNCTION_TABLE[1864] = std____2__numpunct_char___do_thousands_sep_28_29_20const;
 FUNCTION_TABLE[1865] = std____2__numpunct_char___do_grouping_28_29_20const;
 FUNCTION_TABLE[1866] = std____2__numpunct_char___do_truename_28_29_20const;
 FUNCTION_TABLE[1867] = std____2__numpunct_char___do_falsename_28_29_20const;
 FUNCTION_TABLE[1868] = std____2__numpunct_wchar_t____numpunct_28_29;
 FUNCTION_TABLE[1869] = std____2__numpunct_wchar_t____numpunct_28_29_1;
 FUNCTION_TABLE[1870] = std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___eback_28_29_20const;
 FUNCTION_TABLE[1871] = std____2__basic_streambuf_char_2c_20std____2__char_traits_char__20___gptr_28_29_20const;
 FUNCTION_TABLE[1872] = std____2__numpunct_wchar_t___do_grouping_28_29_20const;
 FUNCTION_TABLE[1873] = std____2__numpunct_wchar_t___do_truename_28_29_20const;
 FUNCTION_TABLE[1874] = std____2__numpunct_wchar_t___do_falsename_28_29_20const;
 FUNCTION_TABLE[1875] = unsigned_20char__20std____2____to_raw_pointer_unsigned_20char__28unsigned_20char__29;
 FUNCTION_TABLE[1876] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[1877] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[1878] = std____2__ctype_wchar_t___do_is_28unsigned_20short_2c_20wchar_t_29_20const;
 FUNCTION_TABLE[1879] = std____2__ctype_wchar_t___do_is_28wchar_t_20const__2c_20wchar_t_20const__2c_20unsigned_20short__29_20const;
 FUNCTION_TABLE[1880] = std____2__ctype_wchar_t___do_scan_is_28unsigned_20short_2c_20wchar_t_20const__2c_20wchar_t_20const__29_20const;
 FUNCTION_TABLE[1881] = std____2__ctype_wchar_t___do_scan_not_28unsigned_20short_2c_20wchar_t_20const__2c_20wchar_t_20const__29_20const;
 FUNCTION_TABLE[1882] = std____2__ctype_wchar_t___do_toupper_28wchar_t_29_20const;
 FUNCTION_TABLE[1883] = std____2__ctype_wchar_t___do_toupper_28wchar_t__2c_20wchar_t_20const__29_20const;
 FUNCTION_TABLE[1884] = std____2__ctype_wchar_t___do_tolower_28wchar_t_29_20const;
 FUNCTION_TABLE[1885] = std____2__ctype_wchar_t___do_tolower_28wchar_t__2c_20wchar_t_20const__29_20const;
 FUNCTION_TABLE[1886] = std____2__ctype_wchar_t___do_widen_28char_29_20const;
 FUNCTION_TABLE[1887] = std____2__ctype_wchar_t___do_widen_28char_20const__2c_20char_20const__2c_20wchar_t__29_20const;
 FUNCTION_TABLE[1888] = std____2__ctype_wchar_t___do_narrow_28wchar_t_2c_20char_29_20const;
 FUNCTION_TABLE[1889] = std____2__ctype_wchar_t___do_narrow_28wchar_t_20const__2c_20wchar_t_20const__2c_20char_2c_20char__29_20const;
 FUNCTION_TABLE[1890] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[1891] = std____2__codecvt_char_2c_20char_2c_20__mbstate_t___do_out_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20char_20const___2c_20char__2c_20char__2c_20char___29_20const;
 FUNCTION_TABLE[1892] = std____2__codecvt_char_2c_20char_2c_20__mbstate_t___do_out_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20char_20const___2c_20char__2c_20char__2c_20char___29_20const;
 FUNCTION_TABLE[1893] = std____2__codecvt_char_2c_20char_2c_20__mbstate_t___do_unshift_28__mbstate_t__2c_20char__2c_20char__2c_20char___29_20const;
 FUNCTION_TABLE[1894] = emscripten__internal__WithPolicies____ArgTypeList_std____2__shared_ptr_maxiOsc__20___getCount_28_29_20const;
 FUNCTION_TABLE[1895] = emscripten__internal__WithPolicies____ArgTypeList_std____2__shared_ptr_maxiOsc__20___getCount_28_29_20const;
 FUNCTION_TABLE[1896] = std____2__codecvt_char_2c_20char_2c_20__mbstate_t___do_length_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20unsigned_20long_29_20const;
 FUNCTION_TABLE[1897] = emscripten__internal__WithPolicies____ArgTypeList_std____2__shared_ptr_maxiOsc__20___getCount_28_29_20const;
 FUNCTION_TABLE[1898] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[1899] = std____2__codecvt_char16_t_2c_20char_2c_20__mbstate_t___do_out_28__mbstate_t__2c_20char16_t_20const__2c_20char16_t_20const__2c_20char16_t_20const___2c_20char__2c_20char__2c_20char___29_20const;
 FUNCTION_TABLE[1900] = std____2__codecvt_char16_t_2c_20char_2c_20__mbstate_t___do_in_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20char_20const___2c_20char16_t__2c_20char16_t__2c_20char16_t___29_20const;
 FUNCTION_TABLE[1901] = std____2__codecvt_char_2c_20char_2c_20__mbstate_t___do_unshift_28__mbstate_t__2c_20char__2c_20char__2c_20char___29_20const;
 FUNCTION_TABLE[1902] = emscripten__internal__WithPolicies____ArgTypeList____getCount_28_29_20const;
 FUNCTION_TABLE[1903] = emscripten__internal__WithPolicies____ArgTypeList____getCount_28_29_20const;
 FUNCTION_TABLE[1904] = std____2__codecvt_char16_t_2c_20char_2c_20__mbstate_t___do_length_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20unsigned_20long_29_20const;
 FUNCTION_TABLE[1905] = emscripten__internal__WithPolicies____ArgTypeList_void_2c_20int_2c_20int_2c_20int___getCount_28_29_20const;
 FUNCTION_TABLE[1906] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[1907] = std____2__codecvt_char32_t_2c_20char_2c_20__mbstate_t___do_out_28__mbstate_t__2c_20char32_t_20const__2c_20char32_t_20const__2c_20char32_t_20const___2c_20char__2c_20char__2c_20char___29_20const;
 FUNCTION_TABLE[1908] = std____2__codecvt_char32_t_2c_20char_2c_20__mbstate_t___do_in_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20char_20const___2c_20char32_t__2c_20char32_t__2c_20char32_t___29_20const;
 FUNCTION_TABLE[1909] = std____2__codecvt_char_2c_20char_2c_20__mbstate_t___do_unshift_28__mbstate_t__2c_20char__2c_20char__2c_20char___29_20const;
 FUNCTION_TABLE[1910] = emscripten__internal__WithPolicies____ArgTypeList____getCount_28_29_20const;
 FUNCTION_TABLE[1911] = emscripten__internal__WithPolicies____ArgTypeList____getCount_28_29_20const;
 FUNCTION_TABLE[1912] = std____2__codecvt_char32_t_2c_20char_2c_20__mbstate_t___do_length_28__mbstate_t__2c_20char_20const__2c_20char_20const__2c_20unsigned_20long_29_20const;
 FUNCTION_TABLE[1913] = emscripten__internal__WithPolicies____ArgTypeList_void_2c_20int_2c_20int_2c_20int___getCount_28_29_20const;
 FUNCTION_TABLE[1914] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[1915] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[1916] = unsigned_20char__20std____2____to_raw_pointer_unsigned_20char__28unsigned_20char__29;
 FUNCTION_TABLE[1917] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[1918] = std____2__collate_char___do_compare_28char_20const__2c_20char_20const__2c_20char_20const__2c_20char_20const__29_20const;
 FUNCTION_TABLE[1919] = std____2__collate_char___do_transform_28char_20const__2c_20char_20const__29_20const;
 FUNCTION_TABLE[1920] = std____2__collate_char___do_hash_28char_20const__2c_20char_20const__29_20const;
 FUNCTION_TABLE[1921] = unsigned_20char__20std____2____to_raw_pointer_unsigned_20char__28unsigned_20char__29;
 FUNCTION_TABLE[1922] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[1923] = std____2__collate_wchar_t___do_compare_28wchar_t_20const__2c_20wchar_t_20const__2c_20wchar_t_20const__2c_20wchar_t_20const__29_20const;
 FUNCTION_TABLE[1924] = std____2__collate_wchar_t___do_transform_28wchar_t_20const__2c_20wchar_t_20const__29_20const;
 FUNCTION_TABLE[1925] = std____2__collate_wchar_t___do_hash_28wchar_t_20const__2c_20wchar_t_20const__29_20const;
 FUNCTION_TABLE[1926] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[1927] = std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20bool__29_20const;
 FUNCTION_TABLE[1928] = std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long__29_20const;
 FUNCTION_TABLE[1929] = std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long_20long__29_20const;
 FUNCTION_TABLE[1930] = std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20short__29_20const;
 FUNCTION_TABLE[1931] = std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20int__29_20const;
 FUNCTION_TABLE[1932] = std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20long__29_20const;
 FUNCTION_TABLE[1933] = std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20long_20long__29_20const;
 FUNCTION_TABLE[1934] = std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20float__29_20const;
 FUNCTION_TABLE[1935] = std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20double__29_20const;
 FUNCTION_TABLE[1936] = std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long_20double__29_20const;
 FUNCTION_TABLE[1937] = std____2__num_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20void___29_20const;
 FUNCTION_TABLE[1938] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[1939] = std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20bool__29_20const;
 FUNCTION_TABLE[1940] = std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long__29_20const;
 FUNCTION_TABLE[1941] = std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long_20long__29_20const;
 FUNCTION_TABLE[1942] = std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20short__29_20const;
 FUNCTION_TABLE[1943] = std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20int__29_20const;
 FUNCTION_TABLE[1944] = std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20long__29_20const;
 FUNCTION_TABLE[1945] = std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20unsigned_20long_20long__29_20const;
 FUNCTION_TABLE[1946] = std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20float__29_20const;
 FUNCTION_TABLE[1947] = std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20double__29_20const;
 FUNCTION_TABLE[1948] = std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long_20double__29_20const;
 FUNCTION_TABLE[1949] = std____2__num_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20void___29_20const;
 FUNCTION_TABLE[1950] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[1951] = std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20char_2c_20bool_29_20const;
 FUNCTION_TABLE[1952] = std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20char_2c_20long_29_20const;
 FUNCTION_TABLE[1953] = std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20char_2c_20long_20long_29_20const;
 FUNCTION_TABLE[1954] = std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20char_2c_20unsigned_20long_29_20const;
 FUNCTION_TABLE[1955] = std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20char_2c_20unsigned_20long_20long_29_20const;
 FUNCTION_TABLE[1956] = std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20char_2c_20double_29_20const;
 FUNCTION_TABLE[1957] = std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20char_2c_20long_20double_29_20const;
 FUNCTION_TABLE[1958] = std____2__num_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20char_2c_20void_20const__29_20const;
 FUNCTION_TABLE[1959] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[1960] = std____2__num_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20wchar_t_2c_20bool_29_20const;
 FUNCTION_TABLE[1961] = std____2__num_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20wchar_t_2c_20long_29_20const;
 FUNCTION_TABLE[1962] = std____2__num_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20wchar_t_2c_20long_20long_29_20const;
 FUNCTION_TABLE[1963] = std____2__num_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20wchar_t_2c_20unsigned_20long_29_20const;
 FUNCTION_TABLE[1964] = std____2__num_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20wchar_t_2c_20unsigned_20long_20long_29_20const;
 FUNCTION_TABLE[1965] = std____2__num_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20wchar_t_2c_20double_29_20const;
 FUNCTION_TABLE[1966] = std____2__num_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20wchar_t_2c_20long_20double_29_20const;
 FUNCTION_TABLE[1967] = std____2__num_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20wchar_t_2c_20void_20const__29_20const;
 FUNCTION_TABLE[1968] = unsigned_20char__20std____2____to_raw_pointer_unsigned_20char__28unsigned_20char__29;
 FUNCTION_TABLE[1969] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[1970] = emscripten__internal__WithPolicies____ArgTypeList_void_2c_20std____2__vector_double_2c_20std____2__allocator_double__20_____getCount_28_29_20const;
 FUNCTION_TABLE[1971] = std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_time_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__29_20const;
 FUNCTION_TABLE[1972] = std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_date_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__29_20const;
 FUNCTION_TABLE[1973] = std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_weekday_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__29_20const;
 FUNCTION_TABLE[1974] = std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_monthname_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__29_20const;
 FUNCTION_TABLE[1975] = std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_year_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__29_20const;
 FUNCTION_TABLE[1976] = std____2__time_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20char_2c_20char_29_20const;
 FUNCTION_TABLE[1977] = std____2____time_get_c_storage_char_____weeks_28_29_20const;
 FUNCTION_TABLE[1978] = std____2____time_get_c_storage_char_____months_28_29_20const;
 FUNCTION_TABLE[1979] = std____2____time_get_c_storage_char_____am_pm_28_29_20const;
 FUNCTION_TABLE[1980] = std____2____time_get_c_storage_char_____c_28_29_20const;
 FUNCTION_TABLE[1981] = std____2____time_get_c_storage_char_____r_28_29_20const;
 FUNCTION_TABLE[1982] = std____2____time_get_c_storage_char_____x_28_29_20const;
 FUNCTION_TABLE[1983] = std____2____time_get_c_storage_char_____X_28_29_20const;
 FUNCTION_TABLE[1984] = unsigned_20char__20std____2____to_raw_pointer_unsigned_20char__28unsigned_20char__29;
 FUNCTION_TABLE[1985] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[1986] = emscripten__internal__WithPolicies____ArgTypeList_void_2c_20std____2__vector_double_2c_20std____2__allocator_double__20_____getCount_28_29_20const;
 FUNCTION_TABLE[1987] = std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_time_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__29_20const;
 FUNCTION_TABLE[1988] = std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_date_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__29_20const;
 FUNCTION_TABLE[1989] = std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_weekday_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__29_20const;
 FUNCTION_TABLE[1990] = std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_monthname_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__29_20const;
 FUNCTION_TABLE[1991] = std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_year_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__29_20const;
 FUNCTION_TABLE[1992] = std____2__time_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20unsigned_20int__2c_20tm__2c_20char_2c_20char_29_20const;
 FUNCTION_TABLE[1993] = std____2____time_get_c_storage_wchar_t_____weeks_28_29_20const;
 FUNCTION_TABLE[1994] = std____2____time_get_c_storage_wchar_t_____months_28_29_20const;
 FUNCTION_TABLE[1995] = std____2____time_get_c_storage_wchar_t_____am_pm_28_29_20const;
 FUNCTION_TABLE[1996] = std____2____time_get_c_storage_wchar_t_____c_28_29_20const;
 FUNCTION_TABLE[1997] = std____2____time_get_c_storage_wchar_t_____r_28_29_20const;
 FUNCTION_TABLE[1998] = std____2____time_get_c_storage_wchar_t_____x_28_29_20const;
 FUNCTION_TABLE[1999] = std____2____time_get_c_storage_wchar_t_____X_28_29_20const;
 FUNCTION_TABLE[2e3] = std____2__time_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20____time_put_28_29_1;
 FUNCTION_TABLE[2001] = std____2__time_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20____time_put_28_29;
 FUNCTION_TABLE[2002] = std____2__time_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__ios_base__2c_20char_2c_20tm_20const__2c_20char_2c_20char_29_20const;
 FUNCTION_TABLE[2003] = std____2__time_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20____time_put_28_29_1;
 FUNCTION_TABLE[2004] = std____2__time_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20____time_put_28_29;
 FUNCTION_TABLE[2005] = std____2__time_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__ios_base__2c_20wchar_t_2c_20tm_20const__2c_20char_2c_20char_29_20const;
 FUNCTION_TABLE[2006] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[2007] = std____2__moneypunct_char_2c_20false___do_decimal_point_28_29_20const;
 FUNCTION_TABLE[2008] = std____2__moneypunct_char_2c_20false___do_decimal_point_28_29_20const;
 FUNCTION_TABLE[2009] = std____2__moneypunct_char_2c_20false___do_grouping_28_29_20const;
 FUNCTION_TABLE[2010] = std____2__moneypunct_char_2c_20false___do_grouping_28_29_20const;
 FUNCTION_TABLE[2011] = std____2__moneypunct_char_2c_20false___do_grouping_28_29_20const;
 FUNCTION_TABLE[2012] = std____2__moneypunct_char_2c_20false___do_negative_sign_28_29_20const;
 FUNCTION_TABLE[2013] = emscripten__internal__WithPolicies____ArgTypeList____getCount_28_29_20const;
 FUNCTION_TABLE[2014] = std____2__moneypunct_char_2c_20false___do_pos_format_28_29_20const;
 FUNCTION_TABLE[2015] = std____2__moneypunct_char_2c_20false___do_pos_format_28_29_20const;
 FUNCTION_TABLE[2016] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[2017] = std____2__moneypunct_char_2c_20false___do_decimal_point_28_29_20const;
 FUNCTION_TABLE[2018] = std____2__moneypunct_char_2c_20false___do_decimal_point_28_29_20const;
 FUNCTION_TABLE[2019] = std____2__moneypunct_char_2c_20false___do_grouping_28_29_20const;
 FUNCTION_TABLE[2020] = std____2__moneypunct_char_2c_20false___do_grouping_28_29_20const;
 FUNCTION_TABLE[2021] = std____2__moneypunct_char_2c_20false___do_grouping_28_29_20const;
 FUNCTION_TABLE[2022] = std____2__moneypunct_char_2c_20false___do_negative_sign_28_29_20const;
 FUNCTION_TABLE[2023] = emscripten__internal__WithPolicies____ArgTypeList____getCount_28_29_20const;
 FUNCTION_TABLE[2024] = std____2__moneypunct_char_2c_20false___do_pos_format_28_29_20const;
 FUNCTION_TABLE[2025] = std____2__moneypunct_char_2c_20false___do_pos_format_28_29_20const;
 FUNCTION_TABLE[2026] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[2027] = std____2__moneypunct_wchar_t_2c_20false___do_decimal_point_28_29_20const;
 FUNCTION_TABLE[2028] = std____2__moneypunct_wchar_t_2c_20false___do_decimal_point_28_29_20const;
 FUNCTION_TABLE[2029] = std____2__moneypunct_char_2c_20false___do_grouping_28_29_20const;
 FUNCTION_TABLE[2030] = std____2__moneypunct_wchar_t_2c_20false___do_curr_symbol_28_29_20const;
 FUNCTION_TABLE[2031] = std____2__moneypunct_wchar_t_2c_20false___do_curr_symbol_28_29_20const;
 FUNCTION_TABLE[2032] = std____2__moneypunct_wchar_t_2c_20false___do_negative_sign_28_29_20const;
 FUNCTION_TABLE[2033] = emscripten__internal__WithPolicies____ArgTypeList____getCount_28_29_20const;
 FUNCTION_TABLE[2034] = std____2__moneypunct_char_2c_20false___do_pos_format_28_29_20const;
 FUNCTION_TABLE[2035] = std____2__moneypunct_char_2c_20false___do_pos_format_28_29_20const;
 FUNCTION_TABLE[2036] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[2037] = std____2__moneypunct_wchar_t_2c_20false___do_decimal_point_28_29_20const;
 FUNCTION_TABLE[2038] = std____2__moneypunct_wchar_t_2c_20false___do_decimal_point_28_29_20const;
 FUNCTION_TABLE[2039] = std____2__moneypunct_char_2c_20false___do_grouping_28_29_20const;
 FUNCTION_TABLE[2040] = std____2__moneypunct_wchar_t_2c_20false___do_curr_symbol_28_29_20const;
 FUNCTION_TABLE[2041] = std____2__moneypunct_wchar_t_2c_20false___do_curr_symbol_28_29_20const;
 FUNCTION_TABLE[2042] = std____2__moneypunct_wchar_t_2c_20false___do_negative_sign_28_29_20const;
 FUNCTION_TABLE[2043] = emscripten__internal__WithPolicies____ArgTypeList____getCount_28_29_20const;
 FUNCTION_TABLE[2044] = std____2__moneypunct_char_2c_20false___do_pos_format_28_29_20const;
 FUNCTION_TABLE[2045] = std____2__moneypunct_char_2c_20false___do_pos_format_28_29_20const;
 FUNCTION_TABLE[2046] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[2047] = std____2__money_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20bool_2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long_20double__29_20const;
 FUNCTION_TABLE[2048] = std____2__money_get_char_2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_get_28std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20std____2__istreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20bool_2c_20std____2__ios_base__2c_20unsigned_20int__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___29_20const;
 FUNCTION_TABLE[2049] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[2050] = std____2__money_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20bool_2c_20std____2__ios_base__2c_20unsigned_20int__2c_20long_20double__29_20const;
 FUNCTION_TABLE[2051] = std____2__money_get_wchar_t_2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_get_28std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20std____2__istreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20bool_2c_20std____2__ios_base__2c_20unsigned_20int__2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20___29_20const;
 FUNCTION_TABLE[2052] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[2053] = std____2__money_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20bool_2c_20std____2__ios_base__2c_20char_2c_20long_20double_29_20const;
 FUNCTION_TABLE[2054] = std____2__money_put_char_2c_20std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__20___do_put_28std____2__ostreambuf_iterator_char_2c_20std____2__char_traits_char__20__2c_20bool_2c_20std____2__ios_base__2c_20char_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29_20const;
 FUNCTION_TABLE[2055] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[2056] = std____2__money_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20bool_2c_20std____2__ios_base__2c_20wchar_t_2c_20long_20double_29_20const;
 FUNCTION_TABLE[2057] = std____2__money_put_wchar_t_2c_20std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__20___do_put_28std____2__ostreambuf_iterator_wchar_t_2c_20std____2__char_traits_wchar_t__20__2c_20bool_2c_20std____2__ios_base__2c_20wchar_t_2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__29_20const;
 FUNCTION_TABLE[2058] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[2059] = std____2__messages_char___do_open_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__locale_20const__29_20const;
 FUNCTION_TABLE[2060] = std____2__messages_char___do_get_28long_2c_20int_2c_20int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29_20const;
 FUNCTION_TABLE[2061] = std____2____vector_base_double_2c_20std____2__allocator_double__20_____copy_assign_alloc_28std____2____vector_base_double_2c_20std____2__allocator_double__20__20const__29;
 FUNCTION_TABLE[2062] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[2063] = std____2__messages_char___do_open_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__2c_20std____2__locale_20const__29_20const;
 FUNCTION_TABLE[2064] = std____2__messages_wchar_t___do_get_28long_2c_20int_2c_20int_2c_20std____2__basic_string_wchar_t_2c_20std____2__char_traits_wchar_t__2c_20std____2__allocator_wchar_t__20__20const__29_20const;
 FUNCTION_TABLE[2065] = std____2____vector_base_double_2c_20std____2__allocator_double__20_____copy_assign_alloc_28std____2____vector_base_double_2c_20std____2__allocator_double__20__20const__29;
 FUNCTION_TABLE[2066] = maxiGrainBase___maxiGrainBase_28_29_1;
 FUNCTION_TABLE[2067] = maxiGrainBase___maxiGrainBase_28_29_1;
 FUNCTION_TABLE[2068] = emscripten__internal__WithPolicies____ArgTypeList____getCount_28_29_20const;
 FUNCTION_TABLE[2069] = emscripten__internal__WithPolicies____ArgTypeList____getCount_28_29_20const;
 FUNCTION_TABLE[2070] = emscripten__internal__WithPolicies____ArgTypeList____getCount_28_29_20const;
 FUNCTION_TABLE[2071] = unsigned_20char__20std____2____to_raw_pointer_unsigned_20char__28unsigned_20char__29;
 FUNCTION_TABLE[2072] = std____2____libcpp_refstring____libcpp_refstring_28char_20const__29;
 FUNCTION_TABLE[2073] = wmemmove;
 FUNCTION_TABLE[2074] = wmemset;
 FUNCTION_TABLE[2075] = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator___28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29;
 FUNCTION_TABLE[2076] = std____2__system_error____init_28std____2__error_code_20const__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__29;
 FUNCTION_TABLE[2077] = std__runtime_error__runtime_error_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29;
 FUNCTION_TABLE[2078] = std____2__system_error___system_error_28_29;
 FUNCTION_TABLE[2079] = std____2__system_error___system_error_28_29_1;
 FUNCTION_TABLE[2080] = demangling_terminate_handler_28_29;
 FUNCTION_TABLE[2081] = __cxa_get_globals_fast;
 FUNCTION_TABLE[2082] = abort_message;
 FUNCTION_TABLE[2083] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[2084] = std__bad_alloc__what_28_29_20const;
 FUNCTION_TABLE[2085] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[2086] = std__exception__what_28_29_20const;
 FUNCTION_TABLE[2087] = std__logic_error___logic_error_28_29_1;
 FUNCTION_TABLE[2088] = std____2____compressed_pair_double__2c_20std____2__allocator_double_____second_28_29;
 FUNCTION_TABLE[2089] = std__runtime_error___runtime_error_28_29_1;
 FUNCTION_TABLE[2090] = std__length_error___length_error_28_29;
 FUNCTION_TABLE[2091] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[2092] = std__bad_cast__what_28_29_20const;
 FUNCTION_TABLE[2093] = unsigned_20char__20std____2____to_raw_pointer_unsigned_20char__28unsigned_20char__29;
 FUNCTION_TABLE[2094] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[2095] = std____2__vector_double_2c_20std____2__allocator_double__20_____invalidate_all_iterators_28_29;
 FUNCTION_TABLE[2096] = std____2__vector_double_2c_20std____2__allocator_double__20_____invalidate_all_iterators_28_29;
 FUNCTION_TABLE[2097] = __cxxabiv1____fundamental_type_info__can_catch_28__cxxabiv1____shim_type_info_20const__2c_20void___29_20const;
 FUNCTION_TABLE[2098] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[2099] = __cxxabiv1____fundamental_type_info__can_catch_28__cxxabiv1____shim_type_info_20const__2c_20void___29_20const;
 FUNCTION_TABLE[2100] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[2101] = __cxxabiv1____class_type_info__can_catch_28__cxxabiv1____shim_type_info_20const__2c_20void___29_20const;
 FUNCTION_TABLE[2102] = __cxxabiv1____class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const;
 FUNCTION_TABLE[2103] = __cxxabiv1____class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const;
 FUNCTION_TABLE[2104] = __cxxabiv1____class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const;
 FUNCTION_TABLE[2105] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[2106] = __cxxabiv1____si_class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const;
 FUNCTION_TABLE[2107] = __cxxabiv1____si_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const;
 FUNCTION_TABLE[2108] = __cxxabiv1____si_class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const;
 FUNCTION_TABLE[2109] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[2110] = __cxxabiv1____vmi_class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const;
 FUNCTION_TABLE[2111] = __cxxabiv1____vmi_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const;
 FUNCTION_TABLE[2112] = __cxxabiv1____vmi_class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const;
 FUNCTION_TABLE[2113] = std____2___DeallocateCaller____do_call_28void__29;
 FUNCTION_TABLE[2114] = __cxxabiv1____pointer_type_info__can_catch_28__cxxabiv1____shim_type_info_20const__2c_20void___29_20const;
 FUNCTION_TABLE[2115] = EmscriptenBindingInitializer_native_and_builtin_types__EmscriptenBindingInitializer_native_and_builtin_types_28_29;
 function __wasm_memory_size() {
  return buffer.byteLength / 65536 | 0;
 }
 
 return {
  "__wasm_call_ctors": __wasm_call_ctors, 
  "free": dlfree, 
  "fflush": fflush, 
  "malloc": dlmalloc, 
  "__errno_location": __errno_location, 
  "setThrew": setThrew, 
  "_ZSt18uncaught_exceptionv": std__uncaught_exception_28_29, 
  "__cxa_can_catch": __cxa_can_catch, 
  "__cxa_is_pointer_type": __cxa_is_pointer_type, 
  "__getTypeName": __getTypeName, 
  "__embind_register_native_and_builtin_types": __embind_register_native_and_builtin_types, 
  "dynCall_v": dynCall_v, 
  "dynCall_vi": emscripten__internal__Invoker_void_2c_20std____2__vector_double_2c_20std____2__allocator_double__20_____invoke_28void_20_28__29_28std____2__vector_double_2c_20std____2__allocator_double__20___29_2c_20std____2__vector_double_2c_20std____2__allocator_double__20___29, 
  "dynCall_vii": dynCall_vii, 
  "dynCall_viii": emscripten__internal__Invoker_void_2c_20int_2c_20int_2c_20int___invoke_28void_20_28__29_28int_2c_20int_2c_20int_29_2c_20int_2c_20int_2c_20int_29, 
  "dynCall_viiii": dynCall_viiii, 
  "dynCall_viiiiiii": dynCall_viiiiiii, 
  "dynCall_viiiiiiiiii": dynCall_viiiiiiiiii, 
  "dynCall_viiiiiiiiiiiiiii": dynCall_viiiiiiiiiiiiiii, 
  "dynCall_viiid": dynCall_viiid, 
  "dynCall_viijii": dynCall_viiiiii, 
  "dynCall_viid": dynCall_viid, 
  "dynCall_i": emscripten__internal__Invoker_std____2__vector_int_2c_20std____2__allocator_int__20_____invoke_28std____2__vector_int_2c_20std____2__allocator_int__20___20_28__29_28_29_29, 
  "dynCall_ii": dynCall_ii, 
  "dynCall_iii": dynCall_iii, 
  "dynCall_iiii": dynCall_iiii, 
  "dynCall_iiiii": dynCall_iiiii, 
  "dynCall_iiiiii": dynCall_iiiiii, 
  "dynCall_iiiiiii": dynCall_iiiiiii, 
  "dynCall_iiiiiiii": dynCall_iiiiiiii, 
  "dynCall_iiiiiiiiiii": dynCall_iiiiiiiiiii, 
  "dynCall_iiiiiiiiiiii": dynCall_iiiiiiiiiiii, 
  "dynCall_iiiiiiiiiiiii": dynCall_iiiiiiiiiiiii, 
  "dynCall_iiidddi": dynCall_iiidddi, 
  "dynCall_iiji": dynCall_iiiii, 
  "dynCall_jiiii": legalstub$dynCall_jiiii, 
  "dynCall_fiii": dynCall_fiii, 
  "dynCall_diii": dynCall_diii, 
  "dynCall_didi": dynCall_didi, 
  "dynCall_didii": dynCall_didii, 
  "dynCall_diddi": dynCall_diddi, 
  "__set_stack_limit": __set_stack_limit, 
  "stackSave": stackSave, 
  "stackAlloc": stackAlloc, 
  "stackRestore": stackRestore, 
  "__growWasmMemory": __growWasmMemory, 
  "dynCall_did": dynCall_did, 
  "dynCall_diddd": dynCall_diddd, 
  "dynCall_didd": dynCall_didd, 
  "dynCall_di": dynCall_di, 
  "dynCall_vid": dynCall_vid, 
  "dynCall_dii": dynCall_dii, 
  "dynCall_didid": dynCall_didid, 
  "dynCall_dididi": dynCall_dididi, 
  "dynCall_vidid": dynCall_vidid, 
  "dynCall_vididd": dynCall_vididd, 
  "dynCall_vididdd": dynCall_vididdd, 
  "dynCall_vidddi": dynCall_vidddi, 
  "dynCall_iiiid": dynCall_iiiid, 
  "dynCall_dddd": dynCall_dddd, 
  "dynCall_vidd": dynCall_vidd, 
  "dynCall_viffii": dynCall_viffii, 
  "dynCall_dddddd": dynCall_dddddd, 
  "dynCall_diddddd": dynCall_diddddd, 
  "dynCall_diddidd": dynCall_diddidd, 
  "dynCall_didddii": dynCall_didddii, 
  "dynCall_didddddii": dynCall_didddddii, 
  "dynCall_dd": dynCall_dd, 
  "dynCall_dididdd": dynCall_dididdd, 
  "dynCall_ddd": dynCall_ddd, 
  "dynCall_vidi": dynCall_vidi, 
  "dynCall_iifi": dynCall_iifi, 
  "dynCall_fi": dynCall_fi, 
  "dynCall_fiiii": dynCall_fiiii, 
  "dynCall_viiiidd": dynCall_viiiidd, 
  "dynCall_diid": dynCall_diid, 
  "dynCall_diiddd": dynCall_diiddd, 
  "dynCall_diidd": dynCall_diidd, 
  "dynCall_diiii": dynCall_diiii, 
  "dynCall_diidid": dynCall_diidid, 
  "dynCall_diididi": dynCall_diididi, 
  "dynCall_viidid": dynCall_viidid, 
  "dynCall_viididd": dynCall_viididd, 
  "dynCall_viididdd": dynCall_viididdd, 
  "dynCall_viidddi": dynCall_viidddi, 
  "dynCall_viidd": dynCall_viidd, 
  "dynCall_viiffii": dynCall_viiffii, 
  "dynCall_diiddidd": dynCall_diiddidd, 
  "dynCall_diiddddd": dynCall_diiddddd, 
  "dynCall_diidddii": dynCall_diidddii, 
  "dynCall_diidddddii": dynCall_diidddddii, 
  "dynCall_diidi": dynCall_diidi, 
  "dynCall_diididdd": dynCall_diididdd, 
  "dynCall_diiddi": dynCall_diiddi, 
  "dynCall_viidi": dynCall_viidi, 
  "dynCall_viiiii": dynCall_viiiii, 
  "dynCall_iiifi": dynCall_iiifi, 
  "dynCall_fii": dynCall_fii, 
  "dynCall_fiiiii": dynCall_fiiiii, 
  "dynCall_viiiiidd": dynCall_viiiiidd, 
  "dynCall_viif": dynCall_viif, 
  "dynCall_viiif": dynCall_viiif, 
  "dynCall_iiiif": dynCall_iiiif, 
  "dynCall_diddid": dynCall_diddid, 
  "dynCall_didddid": dynCall_didddid, 
  "dynCall_didddi": dynCall_didddi, 
  "dynCall_diiddid": dynCall_diiddid, 
  "dynCall_diidddid": dynCall_diidddid, 
  "dynCall_diidddi": dynCall_diidddi, 
  "dynCall_iid": dynCall_iid, 
  "dynCall_id": dynCall_id, 
  "dynCall_diidii": dynCall_diidii, 
  "dynCall_jiji": legalstub$dynCall_jiiii, 
  "dynCall_iidiiii": dynCall_iidiiii, 
  "dynCall_iiiiiiiii": dynCall_iiiiiiiii, 
  "dynCall_iiiiij": dynCall_iiiiiii, 
  "dynCall_iiiiid": dynCall_iiiiid, 
  "dynCall_iiiiijj": dynCall_iiiiiiiii, 
  "dynCall_iiiiiijj": legalstub$dynCall_iiiiiijj, 
  "dynCall_viiiiii": dynCall_viiiiii
 };
}

for (var base64ReverseLookup = new Uint8Array(123/*'z'+1*/), i = 25; i >= 0; --i) {
    base64ReverseLookup[48+i] = 52+i; // '0-9'
    base64ReverseLookup[65+i] = i; // 'A-Z'
    base64ReverseLookup[97+i] = 26+i; // 'a-z'
  }
  base64ReverseLookup[43] = 62; // '+'
  base64ReverseLookup[47] = 63; // '/'
  /** @noinline Inlining this function would mean expanding the base64 string 4x times in the source code, which Closure seems to be happy to do. */
  function base64DecodeToExistingUint8Array(uint8Array, offset, b64) {
    var b1, b2, i = 0, j = offset, bLength = b64.length, end = offset + (bLength*3>>2);
    if (b64[bLength-2] == '=') --end;
    if (b64[bLength-1] == '=') --end;
    for (; i < bLength; i += 4, j += 3) {
      b1 = base64ReverseLookup[b64.charCodeAt(i+1)];
      b2 = base64ReverseLookup[b64.charCodeAt(i+2)];
      uint8Array[j] = base64ReverseLookup[b64.charCodeAt(i)] << 2 | b1 >> 4;
      if (j+1 < end) uint8Array[j+1] = b1 << 4 | b2 >> 2;
      if (j+2 < end) uint8Array[j+2] = b2 << 6 | base64ReverseLookup[b64.charCodeAt(i+3)];
    }
  }
var bufferView = new Uint8Array(wasmMemory.buffer);
base64DecodeToExistingUint8Array(bufferView, 1024, "CmNoYW5uZWxzID0gJWQKbGVuZ3RoID0gJWQATG9hZGluZzogAGRhdGEAQ2g6IAAsIGxlbjogAEVSUk9SOiBDb3VsZCBub3QgbG9hZCBzYW1wbGUuAEF1dG90cmltOiBzdGFydDogACwgZW5kOiAAAGwAAAAAAAAAAAUAADQAAAA1AAAAlP///5T///8ABQAANgAAADcAAAB8BAAAtAQAAMgEAACQBAAAbAAAAAAAAAB0hgAAOAAAADkAAACU////lP///3SGAAA6AAAAOwAAAE5TdDNfXzIxNGJhc2ljX2lmc3RyZWFtSWNOU18xMWNoYXJfdHJhaXRzSWNFRUVFAPzBAADQBAAAdIYAAAAAAAB8BQAAPAAAAD0AAAA+AAAAPwAAAEAAAABBAAAAQgAAAEMAAABEAAAARQAAAEYAAABHAAAASAAAAEkAAABOU3QzX18yMTNiYXNpY19maWxlYnVmSWNOU18xMWNoYXJfdHJhaXRzSWNFRUVFAAD8wQAATAUAAACGAABhbGxvY2F0b3I8VD46OmFsbG9jYXRlKHNpemVfdCBuKSAnbicgZXhjZWVkcyBtYXhpbXVtIHN1cHBvcnRlZCBzaXplAHcAYQByAHIrAHcrAGErAHdiAGFiAHJiAHIrYgB3K2IAYStiAFZlY3RvckludABWZWN0b3JEb3VibGUAVmVjdG9yQ2hhcgBWZWN0b3JVQ2hhcgBWZWN0b3JGbG9hdAB2ZWN0b3JUb29scwBjbGVhclZlY3RvckRibABjbGVhclZlY3RvckZsb2F0AG1heGlTZXR0aW5ncwBzZXR1cABzYW1wbGVSYXRlAGNoYW5uZWxzAGJ1ZmZlclNpemUAbWF4aU9zYwBzaGFyZWRfcHRyPG1heGlPc2M+AHNpbmV3YXZlAGNvc3dhdmUAcGhhc29yAHNhdwB0cmlhbmdsZQBzcXVhcmUAcHVsc2UAaW1wdWxzZQBub2lzZQBzaW5lYnVmAHNpbmVidWY0AHNhd24AcGhhc2VSZXNldABtYXhpRW52ZWxvcGUAc2hhcmVkX3B0cjxtYXhpRW52ZWxvcGU+AGxpbmUAdHJpZ2dlcgBhbXBsaXR1ZGUAdmFsaW5kZXgAbWF4aURlbGF5bGluZQBzaGFyZWRfcHRyPG1heGlEZWxheWxpbmU+AGRsAG1heGlGaWx0ZXIAc2hhcmVkX3B0cjxtYXhpRmlsdGVyPgBsb3JlcwBoaXJlcwBiYW5kcGFzcwBsb3Bhc3MAaGlwYXNzAGN1dG9mZgByZXNvbmFuY2UAbWF4aU1peABzaGFyZWRfcHRyPG1heGlNaXg+AHN0ZXJlbwBxdWFkAGFtYmlzb25pYwBtYXhpTGluZQBzaGFyZWRfcHRyPG1heGlMaW5lPgBwbGF5AHByZXBhcmUAdHJpZ2dlckVuYWJsZQBpc0xpbmVDb21wbGV0ZQBtYXhpWEZhZGUAeGZhZGUAbWF4aUxhZ0V4cABzaGFyZWRfcHRyPG1heGlMYWdFeHA8ZG91YmxlPj4AaW5pdABhZGRTYW1wbGUAdmFsdWUAYWxwaGEAYWxwaGFSZWNpcHJvY2FsAHZhbABtYXhpU2FtcGxlAHNoYXJlZF9wdHI8bWF4aVNhbXBsZT4AZ2V0TGVuZ3RoAHNldFNhbXBsZQBzZXRTYW1wbGVGcm9tT2dnQmxvYgBpc1JlYWR5AHBsYXlPbmNlAHNldFBvc2l0aW9uAHBsYXlVbnRpbABwbGF5T25aWABwbGF5NABjbGVhcgBub3JtYWxpc2UAYXV0b1RyaW0AbG9hZAByZWFkAGxvb3BTZXRQb3NPblpYAG1heGlNYXAAc2hhcmVkX3B0cjxtYXhpTWFwPgBsaW5saW4AbGluZXhwAGV4cGxpbgBjbGFtcABtYXhpRHluAHNoYXJlZF9wdHI8bWF4aUR5bj4AZ2F0ZQBjb21wcmVzc29yAGNvbXByZXNzAHNldEF0dGFjawBzZXRSZWxlYXNlAHNldFRocmVzaG9sZABzZXRSYXRpbwBtYXhpRW52AHNoYXJlZF9wdHI8bWF4aUVudj4AYXIAYWRzcgBzZXREZWNheQBzZXRTdXN0YWluAGNvbnZlcnQAc2hhcmVkX3B0cjxjb252ZXJ0PgBtdG9mAG1zVG9TYW1wcwBtYXhpU2FtcGxlQW5kSG9sZABzaGFyZWRfcHRyPG1heGlTYW1wbGVBbmRIb2xkPgBzYWgAbWF4aU5vbmxpbmVhcml0eQBzaGFyZWRfcHRyPG1heGlOb25saW5lYXJpdHk+AGZhc3RBdGFuAGF0YW5EaXN0AGZhc3RBdGFuRGlzdABzb2Z0Y2xpcABoYXJkY2xpcABhc3ltY2xpcABtYXhpRmxhbmdlcgBzaGFyZWRfcHRyPG1heGlGbGFuZ2VyPgBmbGFuZ2UAbWF4aUNob3J1cwBzaGFyZWRfcHRyPG1heGlDaG9ydXM+AGNob3J1cwBtYXhpRENCbG9ja2VyAHNoYXJlZF9wdHI8bWF4aURDQmxvY2tlcj4AbWF4aVNWRgBzaGFyZWRfcHRyPG1heGlTVkY+AHNldEN1dG9mZgBzZXRSZXNvbmFuY2UAbWF4aU1hdGgAc2hhcmVkX3B0cjxtYXhpTWF0aD4AYWRkAHN1YgBtdWwAZGl2AGd0AGx0AGd0ZQBsdGUAbW9kAGFicwBwb3cAbWF4aUNsb2NrAHNoYXJlZF9wdHI8bWF4aUNsb2NrPgB0aWNrZXIAc2V0VGVtcG8Ac2V0VGlja3NQZXJCZWF0AGlzVGljawBjdXJyZW50Q291bnQAcGxheUhlYWQAYnBzAGJwbQB0aWNrAHRpY2tzAG1heGlLdXJhbW90b09zY2lsbGF0b3IAc2hhcmVkX3B0cjxtYXhpS3VyYW1vdG9Pc2NpbGxhdG9yPgBzZXRQaGFzZQBnZXRQaGFzZQBtYXhpS3VyYW1vdG9Pc2NpbGxhdG9yU2V0AHNoYXJlZF9wdHI8bWF4aUt1cmFtb3RvT3NjaWxsYXRvclNldD4Ac2V0UGhhc2VzAHNpemUAbWF4aUFzeW5jS3VyYW1vdG9Pc2NpbGxhdG9yAHNoYXJlZF9wdHI8bWF4aUFzeW5jS3VyYW1vdG9Pc2NpbGxhdG9yPgBtYXhpRkZUAHNoYXJlZF9wdHI8bWF4aUZGVD4AcHJvY2VzcwBzcGVjdHJhbEZsYXRuZXNzAHNwZWN0cmFsQ2VudHJvaWQAZ2V0TWFnbml0dWRlcwBnZXRNYWduaXR1ZGVzREIAZ2V0UGhhc2VzAGdldE51bUJpbnMAZ2V0RkZUU2l6ZQBnZXRIb3BTaXplAGdldFdpbmRvd1NpemUAbWF4aUZGVE1vZGVzAFdJVEhfUE9MQVJfQ09OVkVSU0lPTgBOT19QT0xBUl9DT05WRVJTSU9OAG1heGlJRkZUAHNoYXJlZF9wdHI8bWF4aUlGRlQ+AG1heGlJRkZUTW9kZXMAU1BFQ1RSVU0AQ09NUExFWABtYXhpTUZDQwBzaGFyZWRfcHRyPG1heGlNRkNDPgBtZmNjAG1heGlUaW1lU3RyZXRjaABzaGFyZWRfcHRyPG1heGlUaW1lc3RyZXRjaDxoYW5uV2luRnVuY3Rvcj4gPgBnZXROb3JtYWxpc2VkUG9zaXRpb24AZ2V0UG9zaXRpb24AcGxheUF0UG9zaXRpb24AbWF4aVBpdGNoU2hpZnQAc2hhcmVkX3B0cjxtYXhpUGl0Y2hTaGlmdDxoYW5uV2luRnVuY3Rvcj4gPgBtYXhpU3RyZXRjaABzaGFyZWRfcHRyPG1heGlTdHJldGNoPGhhbm5XaW5GdW5jdG9yPiA+AHNldExvb3BTdGFydABzZXRMb29wRW5kAGdldExvb3BFbmQAbWF4aUJpdHMAc2lnAGF0AHNobABzaHIAcgBsYW5kAGxvcgBseG9yAG5lZwBpbmMAZGVjAGVxAHRvU2lnbmFsAHRvVHJpZ1NpZ25hbABmcm9tU2lnbmFsAG1heGlUcmlnZ2VyAHNoYXJlZF9wdHI8bWF4aVRyaWdnZXI+AG9uWlgAb25DaGFuZ2VkAG1heGlDb3VudGVyAHNoYXJlZF9wdHI8bWF4aUNvdW50ZXI+AGNvdW50AG1heGlJbmRleABzaGFyZWRfcHRyPG1heGlJbmRleD4AcHVsbABtYXhpUmF0aW9TZXEAc2hhcmVkX3B0cjxtYXhpUmF0aW9TZXE+AHBsYXlUcmlnAHBsYXlWYWx1ZXMAbWF4aVNhdFJldmVyYgBzaGFyZWRfcHRyPG1heGlTYXRSZXZlcmI+AG1heGlGcmVlVmVyYgBzaGFyZWRfcHRyPG1heGlGcmVlVmVyYj4AYWxsb2NhdG9yPFQ+OjphbGxvY2F0ZShzaXplX3QgbikgJ24nIGV4Y2VlZHMgbWF4aW11bSBzdXBwb3J0ZWQgc2l6ZQBwdXNoX2JhY2sAcmVzaXplAGdldABzZXQATlN0M19fMjZ2ZWN0b3JJaU5TXzlhbGxvY2F0b3JJaUVFRUUATlN0M19fMjEzX192ZWN0b3JfYmFzZUlpTlNfOWFsbG9jYXRvcklpRUVFRQBOU3QzX18yMjBfX3ZlY3Rvcl9iYXNlX2NvbW1vbklMYjFFRUUAANTBAACCEQAAWMIAAFYRAAAAAAAAAQAAAKgRAAAAAAAAWMIAADIRAAAAAAAAAQAAALARAAAAAAAAUE5TdDNfXzI2dmVjdG9ySWlOU185YWxsb2NhdG9ySWlFRUVFAAAAALTCAADgEQAAAAAAAMgRAABQS05TdDNfXzI2dmVjdG9ySWlOU185YWxsb2NhdG9ySWlFRUVFAAAAtMIAABgSAAABAAAAyBEAAGlpAHYAdmkACBIAANzAAAAIEgAAPMEAAHZpaWkAAAAA3MAAAAgSAABgwQAAPMEAAHZpaWlpAAAAYMEAAEASAABpaWkAtBIAAMgRAABgwQAATjEwZW1zY3JpcHRlbjN2YWxFAADUwQAAoBIAAGlpaWk=");
base64DecodeToExistingUint8Array(bufferView, 4816, "9MAAAMgRAABgwQAAPMEAAGlpaWlpAE5TdDNfXzI2dmVjdG9ySWROU185YWxsb2NhdG9ySWRFRUVFAE5TdDNfXzIxM19fdmVjdG9yX2Jhc2VJZE5TXzlhbGxvY2F0b3JJZEVFRUUAAABYwgAAChMAAAAAAAABAAAAqBEAAAAAAABYwgAA5hIAAAAAAAABAAAAOBMAAAAAAABQTlN0M19fMjZ2ZWN0b3JJZE5TXzlhbGxvY2F0b3JJZEVFRUUAAAAAtMIAAGgTAAAAAAAAUBMAAFBLTlN0M19fMjZ2ZWN0b3JJZE5TXzlhbGxvY2F0b3JJZEVFRUUAAAC0wgAAoBMAAAEAAABQEwAAkBMAANzAAACQEwAAeMEAAHZpaWQAAAAA3MAAAJATAABgwQAAeMEAAHZpaWlkAAAAYMEAAMgTAAC0EgAAUBMAAGDBAAAAAAAA9MAAAFATAABgwQAAeMEAAGlpaWlkAE5TdDNfXzI2dmVjdG9ySWNOU185YWxsb2NhdG9ySWNFRUVFAE5TdDNfXzIxM19fdmVjdG9yX2Jhc2VJY05TXzlhbGxvY2F0b3JJY0VFRUUAAABYwgAAWhQAAAAAAAABAAAAqBEAAAAAAABYwgAANhQAAAAAAAABAAAAiBQAAAAAAABQTlN0M19fMjZ2ZWN0b3JJY05TXzlhbGxvY2F0b3JJY0VFRUUAAAAAtMIAALgUAAAAAAAAoBQAAFBLTlN0M19fMjZ2ZWN0b3JJY05TXzlhbGxvY2F0b3JJY0VFRUUAAAC0wgAA8BQAAAEAAACgFAAA4BQAANzAAADgFAAAAME=");
base64DecodeToExistingUint8Array(bufferView, 5440, "3MAAAOAUAABgwQAAAMEAAGDBAAAYFQAAtBIAAKAUAABgwQ==");
base64DecodeToExistingUint8Array(bufferView, 5488, "9MAAAKAUAABgwQAAAMEAAE5TdDNfXzI2dmVjdG9ySWhOU185YWxsb2NhdG9ySWhFRUVFAE5TdDNfXzIxM19fdmVjdG9yX2Jhc2VJaE5TXzlhbGxvY2F0b3JJaEVFRUUAWMIAAKQVAAAAAAAAAQAAAKgRAAAAAAAAWMIAAIAVAAAAAAAAAQAAANAVAAAAAAAAUE5TdDNfXzI2dmVjdG9ySWhOU185YWxsb2NhdG9ySWhFRUVFAAAAALTCAAAAFgAAAAAAAOgVAABQS05TdDNfXzI2dmVjdG9ySWhOU185YWxsb2NhdG9ySWhFRUVFAAAAtMIAADgWAAABAAAA6BUAACgWAADcwAAAKBYAAAzBAADcwAAAKBYAAGDBAAAMwQAAYMEAAGAWAAC0EgAA6BUAAGDB");
base64DecodeToExistingUint8Array(bufferView, 5808, "9MAAAOgVAABgwQAADMEAAE5TdDNfXzI2dmVjdG9ySWZOU185YWxsb2NhdG9ySWZFRUVFAE5TdDNfXzIxM19fdmVjdG9yX2Jhc2VJZk5TXzlhbGxvY2F0b3JJZkVFRUUAWMIAAOQWAAAAAAAAAQAAAKgRAAAAAAAAWMIAAMAWAAAAAAAAAQAAABAXAAAAAAAAUE5TdDNfXzI2dmVjdG9ySWZOU185YWxsb2NhdG9ySWZFRUVFAAAAALTCAABAFwAAAAAAACgXAABQS05TdDNfXzI2dmVjdG9ySWZOU185YWxsb2NhdG9ySWZFRUVFAAAAtMIAAHgXAAABAAAAKBcAAGgXAADcwAAAaBcAAGzBAAB2aWlm");
base64DecodeToExistingUint8Array(bufferView, 6096, "3MAAAGgXAABgwQAAbMEAAHZpaWlmAAAAYMEAAKAXAAC0EgAAKBcAAGDBAAAAAAAA9MAAACgXAABgwQAAbMEAAGlpaWlmADExdmVjdG9yVG9vbHMA1MEAABYYAABQMTF2ZWN0b3JUb29scwAAtMIAACwYAAAAAAAAJBgAAFBLMTF2ZWN0b3JUb29scwC0wgAATBgAAAEAAAAkGAAAPBgAANzAAABQEwAAdmlpANzAAAAoFwAAMTJtYXhpU2V0dGluZ3MAANTBAACEGAAAUDEybWF4aVNldHRpbmdzALTCAACcGAAAAAAAAJQYAABQSzEybWF4aVNldHRpbmdzAAAAALTCAAC8GAAAAQAAAJQYAACsGA==");
base64DecodeToExistingUint8Array(bufferView, 6384, "3MAAADzBAAA8wQAAPMEAADdtYXhpT3NjAAAAANTBAAAAGQAAUDdtYXhpT3NjAAAAtMIAABQZAAAAAAAADBkAAFBLN21heGlPc2MAALTCAAAwGQAAAQAAAAwZAAAAAAAA6BkAANAEAADRBAAA0gQAANMEAADUBAAATlN0M19fMjIwX19zaGFyZWRfcHRyX3BvaW50ZXJJUDdtYXhpT3NjTjEwZW1zY3JpcHRlbjE1c21hcnRfcHRyX3RyYWl0SU5TXzEwc2hhcmVkX3B0cklTMV9FRUUxMXZhbF9kZWxldGVyRU5TXzlhbGxvY2F0b3JJUzFfRUVFRQD8wQAAaBkAAIi0AABOMTBlbXNjcmlwdGVuMTVzbWFydF9wdHJfdHJhaXRJTlN0M19fMjEwc2hhcmVkX3B0ckk3bWF4aU9zY0VFRTExdmFsX2RlbGV0ZXJFAAAAANTBAAD0GQAATlN0M19fMjEwc2hhcmVkX3B0ckk3bWF4aU9zY0VFAADUwQAATBoAAGkAAABsGgAAAAAAANQaAADVBAAA1gQAANcEAADYBAAA2QQAAE5TdDNfXzIyMF9fc2hhcmVkX3B0cl9lbXBsYWNlSTdtYXhpT3NjTlNfOWFsbG9jYXRvcklTMV9FRUVFAPzBAACYGgAAiLQAAHjBAAAgGQAAeMEAAGRpaWQ=");
base64DecodeToExistingUint8Array(bufferView, 6912, "eMEAACAZAAB4wQAAeMEAAHjBAABkaWlkZGQAAAAAAAB4wQAAIBkAAHjBAAB4wQAAZGlpZGQAAAB4wQAAIBkAAGRpaQDcwAAAIBkAAHjBAAAxMm1heGlFbnZlbG9wZQAA1MEAAFAbAABQMTJtYXhpRW52ZWxvcGUAtMIAAGgbAAAAAAAAYBsAAFBLMTJtYXhpRW52ZWxvcGUAAAAAtMIAAIgbAAABAAAAYBsAAAAAAABQHAAA2gQAANsEAADcBAAA3QQAAN4EAABOU3QzX18yMjBfX3NoYXJlZF9wdHJfcG9pbnRlcklQMTJtYXhpRW52ZWxvcGVOMTBlbXNjcmlwdGVuMTVzbWFydF9wdHJfdHJhaXRJTlNfMTBzaGFyZWRfcHRySVMxX0VFRTExdmFsX2RlbGV0ZXJFTlNfOWFsbG9jYXRvcklTMV9FRUVFAAAA/MEAAMgbAACItAAATjEwZW1zY3JpcHRlbjE1c21hcnRfcHRyX3RyYWl0SU5TdDNfXzIxMHNoYXJlZF9wdHJJMTJtYXhpRW52ZWxvcGVFRUUxMXZhbF9kZWxldGVyRQAA1MEAAFwcAABOU3QzX18yMTBzaGFyZWRfcHRySTEybWF4aUVudmVsb3BlRUUAAAAA1MEAALgcAADgHAAAAAAAAEwdAADVBAAA3wQAAOAEAADYBAAA4QQAAE5TdDNfXzIyMF9fc2hhcmVkX3B0cl9lbXBsYWNlSTEybWF4aUVudmVsb3BlTlNfOWFsbG9jYXRvcklTMV9FRUVFAAAA/MEAAAgdAACItA==");
base64DecodeToExistingUint8Array(bufferView, 7520, "eMEAAHgbAAA8wQAAUBMAAGRpaWlp");
base64DecodeToExistingUint8Array(bufferView, 7552, "3MAAAHgbAAA8wQAAeMEAADEzbWF4aURlbGF5bGluZQDUwQAAkB0AAFAxM21heGlEZWxheWxpbmUAAAAAtMIAAKgdAAAAAAAAoB0AAFBLMTNtYXhpRGVsYXlsaW5lAAAAtMIAAMwdAAABAAAAoB0AAAAAAACUHgAA4gQAAOMEAADkBAAA5QQAAOYEAABOU3QzX18yMjBfX3NoYXJlZF9wdHJfcG9pbnRlcklQMTNtYXhpRGVsYXlsaW5lTjEwZW1zY3JpcHRlbjE1c21hcnRfcHRyX3RyYWl0SU5TXzEwc2hhcmVkX3B0cklTMV9FRUUxMXZhbF9kZWxldGVyRU5TXzlhbGxvY2F0b3JJUzFfRUVFRQAA/MEAAAweAACItAAATjEwZW1zY3JpcHRlbjE1c21hcnRfcHRyX3RyYWl0SU5TdDNfXzIxMHNoYXJlZF9wdHJJMTNtYXhpRGVsYXlsaW5lRUVFMTF2YWxfZGVsZXRlckUA1MEAAKAeAABOU3QzX18yMTBzaGFyZWRfcHRySTEzbWF4aURlbGF5bGluZUVFAAAA1MEAAPweAAAkHwAAAAAAAJAfAADVBAAA5wQAAOgEAADYBAAA6QQAAE5TdDNfXzIyMF9fc2hhcmVkX3B0cl9lbXBsYWNlSTEzbWF4aURlbGF5bGluZU5TXzlhbGxvY2F0b3JJUzFfRUVFRQAA/MEAAEwfAACItAAAAAAAAHjBAAC8HQAAeMEAADzBAAB4wQAAZGlpZGlkAAAAAAAAeMEAALwdAAB4wQAAPMEAAHjBAAA8wQAAZGlpZGlkaQAxMG1heGlGaWx0ZXIAAAAA1MEAAOAfAABQMTBtYXhpRmlsdGVyAAAAtMIAAPgfAAAAAAAA8B8AAFBLMTBtYXhpRmlsdGVyAAC0wgAAGCAAAAEAAADwHwAAAAAAANggAADqBAAA6wQAAOwEAADtBAAA7gQAAE5TdDNfXzIyMF9fc2hhcmVkX3B0cl9wb2ludGVySVAxMG1heGlGaWx0ZXJOMTBlbXNjcmlwdGVuMTVzbWFydF9wdHJfdHJhaXRJTlNfMTBzaGFyZWRfcHRySVMxX0VFRTExdmFsX2RlbGV0ZXJFTlNfOWFsbG9jYXRvcklTMV9FRUVFAPzBAABUIAAAiLQAAE4xMGVtc2NyaXB0ZW4xNXNtYXJ0X3B0cl90cmFpdElOU3QzX18yMTBzaGFyZWRfcHRySTEwbWF4aUZpbHRlckVFRTExdmFsX2RlbGV0ZXJFAAAAANTBAADkIAAATlN0M19fMjEwc2hhcmVkX3B0ckkxMG1heGlGaWx0ZXJFRQAA1MEAAEAhAABkIQAAAAAAAMwhAADVBAAA7wQAAPAEAADYBAAA8QQAAE5TdDNfXzIyMF9fc2hhcmVkX3B0cl9lbXBsYWNlSTEwbWF4aUZpbHRlck5TXzlhbGxvY2F0b3JJUzFfRUVFRQD8wQAAjCEAAIi0");
base64DecodeToExistingUint8Array(bufferView, 8672, "eMEAAAggAAB4wQAAeMEAAHjB");
base64DecodeToExistingUint8Array(bufferView, 8704, "eMEAAAggAAB4wQAAeMEAADdtYXhpTWl4AAAAANTBAAAQIgAAUDdtYXhpTWl4AAAAtMIAACQiAAAAAAAAHCIAAFBLN21heGlNaXgAALTCAABAIgAAAQAAABwiAAAAAAAA+CIAAPIEAADzBAAA9AQAAPUEAAD2BAAATlN0M19fMjIwX19zaGFyZWRfcHRyX3BvaW50ZXJJUDdtYXhpTWl4TjEwZW1zY3JpcHRlbjE1c21hcnRfcHRyX3RyYWl0SU5TXzEwc2hhcmVkX3B0cklTMV9FRUUxMXZhbF9kZWxldGVyRU5TXzlhbGxvY2F0b3JJUzFfRUVFRQD8wQAAeCIAAIi0AABOMTBlbXNjcmlwdGVuMTVzbWFydF9wdHJfdHJhaXRJTlN0M19fMjEwc2hhcmVkX3B0ckk3bWF4aU1peEVFRTExdmFsX2RlbGV0ZXJFAAAAANTBAAAEIwAATlN0M19fMjEwc2hhcmVkX3B0ckk3bWF4aU1peEVFAADUwQAAXCMAAHwjAAAAAAAA4CMAANUEAAD3BAAA+AQAANgEAAD5BAAATlN0M19fMjIwX19zaGFyZWRfcHRyX2VtcGxhY2VJN21heGlNaXhOU185YWxsb2NhdG9ySVMxX0VFRUUA/MEAAKQjAACItAAAAAAAANzAAAAwIgAAeMEAAFATAAB4wQAAdmlpZGlkAAAAAAAA3MAAADAiAAB4wQAAUBMAAHjBAAB4wQAAdmlpZGlkZADcwAAAMCIAAHjBAABQEwAAeMEAAHjBAAB4wQAAdmlpZGlkZGQAOG1heGlMaW5lAADUwQAAVSQAAFA4bWF4aUxpbmUAALTCAABoJAAAAAAAAGAkAABQSzhtYXhpTGluZQC0wgAAhCQAAAEAAABgJAAAAAAAAEAlAAD6BAAA+wQAAPwEAAD9BAAA/gQAAE5TdDNfXzIyMF9fc2hhcmVkX3B0cl9wb2ludGVySVA4bWF4aUxpbmVOMTBlbXNjcmlwdGVuMTVzbWFydF9wdHJfdHJhaXRJTlNfMTBzaGFyZWRfcHRySVMxX0VFRTExdmFsX2RlbGV0ZXJFTlNfOWFsbG9jYXRvcklTMV9FRUVFAAAAAPzBAAC8JAAAiLQAAE4xMGVtc2NyaXB0ZW4xNXNtYXJ0X3B0cl90cmFpdElOU3QzX18yMTBzaGFyZWRfcHRySThtYXhpTGluZUVFRTExdmFsX2RlbGV0ZXJFAAAA1MEAAEwlAABOU3QzX18yMTBzaGFyZWRfcHRySThtYXhpTGluZUVFANTBAACkJQAAxCUAAAAAAAAsJgAA1QQAAP8EAAAABQAA2AQAAAEFAABOU3QzX18yMjBfX3NoYXJlZF9wdHJfZW1wbGFjZUk4bWF4aUxpbmVOU185YWxsb2NhdG9ySVMxX0VFRUUAAAAA/MEAAOwlAACItAAAeMEAAHQkAAB4wQ==");
base64DecodeToExistingUint8Array(bufferView, 9808, "3MAAAHQkAAB4wQAAeMEAAHjBAAD0wAAAdmlpZGRkaQDcwAAAdCQAAHjBAAD0wAAAdCQAADltYXhpWEZhZGUAANTBAACEJgAAUDltYXhpWEZhZGUAtMIAAJgmAAAAAAAAkCYAAFBLOW1heGlYRmFkZQAAAAC0wgAAtCYAAAEAAACQJg==");
base64DecodeToExistingUint8Array(bufferView, 9952, "UBMAAFATAABQEwAAeMEAAHjBAAB4wQAAeMEAAHjBAABkaWRkZAAxMG1heGlMYWdFeHBJZEUAAADUwQAABicAAFAxMG1heGlMYWdFeHBJZEUAAAAAtMIAACAnAAAAAAAAGCcAAFBLMTBtYXhpTGFnRXhwSWRFAAAAtMIAAEQnAAABAAAAGCcAAAAAAAAMKAAAAgUAAAMFAAAEBQAABQUAAAYFAABOU3QzX18yMjBfX3NoYXJlZF9wdHJfcG9pbnRlcklQMTBtYXhpTGFnRXhwSWRFTjEwZW1zY3JpcHRlbjE1c21hcnRfcHRyX3RyYWl0SU5TXzEwc2hhcmVkX3B0cklTMl9FRUUxMXZhbF9kZWxldGVyRU5TXzlhbGxvY2F0b3JJUzJfRUVFRQAA/MEAAIQnAACItAAATjEwZW1zY3JpcHRlbjE1c21hcnRfcHRyX3RyYWl0SU5TdDNfXzIxMHNoYXJlZF9wdHJJMTBtYXhpTGFnRXhwSWRFRUVFMTF2YWxfZGVsZXRlckUA1MEAABgoAABOU3QzX18yMTBzaGFyZWRfcHRySTEwbWF4aUxhZ0V4cElkRUVFAAAA1MEAAHQoAACcKAAAAAAAAAgpAADVBAAABwUAAAgFAADYBAAACQUAAE5TdDNfXzIyMF9fc2hhcmVkX3B0cl9lbXBsYWNlSTEwbWF4aUxhZ0V4cElkRU5TXzlhbGxvY2F0b3JJUzJfRUVFRQAA/MEAAMQoAACItA==");
base64DecodeToExistingUint8Array(bufferView, 10528, "3MAAADQnAAB4wQAAeMEAAHZpaWRkAAAA3MAAADQnAAB4wQAAeMEAAFgnAAAxMG1heGlTYW1wbGUAAAAA1MEAAEwpAABQMTBtYXhpU2FtcGxlAAAAtMIAAGQpAAAAAAAAXCkAAFBLMTBtYXhpU2FtcGxlAAC0wgAAhCkAAAEAAABcKQAAAAAAAEQqAAAKBQAACwUAAAwFAAANBQAADgUAAE5TdDNfXzIyMF9fc2hhcmVkX3B0cl9wb2ludGVySVAxMG1heGlTYW1wbGVOMTBlbXNjcmlwdGVuMTVzbWFydF9wdHJfdHJhaXRJTlNfMTBzaGFyZWRfcHRySVMxX0VFRTExdmFsX2RlbGV0ZXJFTlNfOWFsbG9jYXRvcklTMV9FRUVFAPzBAADAKQAAiLQAAE4xMGVtc2NyaXB0ZW4xNXNtYXJ0X3B0cl90cmFpdElOU3QzX18yMTBzaGFyZWRfcHRySTEwbWF4aVNhbXBsZUVFRTExdmFsX2RlbGV0ZXJFAAAAANTBAABQKgAATlN0M19fMjEwc2hhcmVkX3B0ckkxMG1heGlTYW1wbGVFRQAA1MEAAKwqAADQKgAAAAAAADgrAAAPBQAAEAUAABEFAADYBAAAEgUAAE5TdDNfXzIyMF9fc2hhcmVkX3B0cl9lbXBsYWNlSTEwbWF4aVNhbXBsZU5TXzlhbGxvY2F0b3JJUzFfRUVFRQD8wQAA+CoAAIi0AABgwQAAlCkAANzAAAB0KQAAUBM=");
base64DecodeToExistingUint8Array(bufferView, 11104, "3MAAAHQpAABQEwAAPMEAADzBAAB0KQAA6BUAADzBAAD0wAAAdCkAAHjBAAB0KQAAeMEAAHQpAAB4wQAA3MAAAHQpAAB4wQ==");
base64DecodeToExistingUint8Array(bufferView, 11184, "eMEAAHQpAAB4wQAAeMEAAHjBAAB0KQAAeMEAAHjBAAB4wQAA3MAAAHQpAAAAAAAA3MAAAHQpAABswQAAbMEAAPTAAAD0wAAAdmlpZmZpaQD0wAAAdCkAAIAsAAA8wQAATlN0M19fMjEyYmFzaWNfc3RyaW5nSWNOU18xMWNoYXJfdHJhaXRzSWNFRU5TXzlhbGxvY2F0b3JJY0VFRUUATlN0M19fMjIxX19iYXNpY19zdHJpbmdfY29tbW9uSUxiMUVFRQAAAADUwQAATywAAFjCAAAQLAAAAAAAAAEAAAB4LAAAAAAAADdtYXhpTWFwAAAAANTBAACYLAAAUDdtYXhpTWFwAAAAtMIAAKwsAAAAAAAApCwAAFBLN21heGlNYXAAALTCAADILAAAAQAAAKQsAAAAAAAAgC0AABMFAAAUBQAAFQUAABYFAAAXBQAATlN0M19fMjIwX19zaGFyZWRfcHRyX3BvaW50ZXJJUDdtYXhpTWFwTjEwZW1zY3JpcHRlbjE1c21hcnRfcHRyX3RyYWl0SU5TXzEwc2hhcmVkX3B0cklTMV9FRUUxMXZhbF9kZWxldGVyRU5TXzlhbGxvY2F0b3JJUzFfRUVFRQD8wQAAAC0AAIi0AABOMTBlbXNjcmlwdGVuMTVzbWFydF9wdHJfdHJhaXRJTlN0M19fMjEwc2hhcmVkX3B0ckk3bWF4aU1hcEVFRTExdmFsX2RlbGV0ZXJFAAAAANTBAACMLQAATlN0M19fMjEwc2hhcmVkX3B0ckk3bWF4aU1hcEVFAADUwQAA5C0AAAQuAAAAAAAAaC4AANUEAAAYBQAAGQUAANgEAAAaBQAATlN0M19fMjIwX19zaGFyZWRfcHRyX2VtcGxhY2VJN21heGlNYXBOU185YWxsb2NhdG9ySVMxX0VFRUUA/MEAACwuAACItA==");
base64DecodeToExistingUint8Array(bufferView, 11904, "eMEAAHjBAAB4wQAAeMEAAHjBAAB4wQAAZGlkZGRkZAA3bWF4aUR5bgAAAADUwQAAoC4AAFA3bWF4aUR5bgAAALTCAAC0LgAAAAAAAKwuAABQSzdtYXhpRHluAAC0wgAA0C4AAAEAAACsLgAAAAAAAIgvAAAbBQAAHAUAAB0FAAAeBQAAHwUAAE5TdDNfXzIyMF9fc2hhcmVkX3B0cl9wb2ludGVySVA3bWF4aUR5bk4xMGVtc2NyaXB0ZW4xNXNtYXJ0X3B0cl90cmFpdElOU18xMHNoYXJlZF9wdHJJUzFfRUVFMTF2YWxfZGVsZXRlckVOU185YWxsb2NhdG9ySVMxX0VFRUUA/MEAAAgvAACItAAATjEwZW1zY3JpcHRlbjE1c21hcnRfcHRyX3RyYWl0SU5TdDNfXzIxMHNoYXJlZF9wdHJJN21heGlEeW5FRUUxMXZhbF9kZWxldGVyRQAAAADUwQAAlC8AAE5TdDNfXzIxMHNoYXJlZF9wdHJJN21heGlEeW5FRQAA1MEAAOwvAAAMMAAAAAAAAHAwAADVBAAAIAUAACEFAADYBAAAIgUAAE5TdDNfXzIyMF9fc2hhcmVkX3B0cl9lbXBsYWNlSTdtYXhpRHluTlNfOWFsbG9jYXRvcklTMV9FRUVFAPzBAAA0MAAAiLQAAAAAAAB4wQAAwC4AAHjBAAB4wQAAVMEAAHjBAAB4wQAAZGlpZGRpZGQ=");
base64DecodeToExistingUint8Array(bufferView, 12464, "eMEAAMAuAAB4wQAAeMEAAHjBAAB4wQAAeMEAAGRpaWRkZGRkAAAAAHjBAADALgAAeMEAANzAAADALgAAeMEAADdtYXhpRW52AAAAANTBAADwMAAAUDdtYXhpRW52AAAAtMIAAAQxAAAAAAAA/DAAAFBLN21heGlFbnYAALTCAAAgMQAAAQAAAPwwAAAAAAAA2DEAACMFAAAkBQAAJQUAACYFAAAnBQAATlN0M19fMjIwX19zaGFyZWRfcHRyX3BvaW50ZXJJUDdtYXhpRW52TjEwZW1zY3JpcHRlbjE1c21hcnRfcHRyX3RyYWl0SU5TXzEwc2hhcmVkX3B0cklTMV9FRUUxMXZhbF9kZWxldGVyRU5TXzlhbGxvY2F0b3JJUzFfRUVFRQD8wQAAWDEAAIi0AABOMTBlbXNjcmlwdGVuMTVzbWFydF9wdHJfdHJhaXRJTlN0M19fMjEwc2hhcmVkX3B0ckk3bWF4aUVudkVFRTExdmFsX2RlbGV0ZXJFAAAAANTBAADkMQAATlN0M19fMjEwc2hhcmVkX3B0ckk3bWF4aUVudkVFAADUwQAAPDIAAFwyAAAAAAAAwDIAANUEAAAoBQAAKQUAANgEAAAqBQAATlN0M19fMjIwX19zaGFyZWRfcHRyX2VtcGxhY2VJN21heGlFbnZOU185YWxsb2NhdG9ySVMxX0VFRUUA/MEAAIQyAACItAAAAAAAAHjBAAAQMQAAeMEAAHjBAAB4wQAAVMEAADzBAABkaWlkZGRpaQ==");
base64DecodeToExistingUint8Array(bufferView, 13056, "eMEAABAxAAB4wQAAeMEAAHjBAAB4wQAAeMEAAFTBAAA8wQAAZGlpZGRkZGRpaQAAeMEAABAxAAB4wQAAPMEAAGRpaWRpAAAA3MAAABAxAAB4wQAAN2NvbnZlcnQAAAAA1MEAAFQzAABQN2NvbnZlcnQAAAC0wgAAaDMAAAAAAABgMwAAUEs3Y29udmVydAAAtMIAAIQzAAABAAAAYDMAAAAAAAA8NAAAKwUAACwFAAAtBQAALgUAAC8FAABOU3QzX18yMjBfX3NoYXJlZF9wdHJfcG9pbnRlcklQN2NvbnZlcnROMTBlbXNjcmlwdGVuMTVzbWFydF9wdHJfdHJhaXRJTlNfMTBzaGFyZWRfcHRySVMxX0VFRTExdmFsX2RlbGV0ZXJFTlNfOWFsbG9jYXRvcklTMV9FRUVFAPzBAAC8MwAAiLQAAE4xMGVtc2NyaXB0ZW4xNXNtYXJ0X3B0cl90cmFpdElOU3QzX18yMTBzaGFyZWRfcHRySTdjb252ZXJ0RUVFMTF2YWxfZGVsZXRlckUAAAAA1MEAAEg0AABOU3QzX18yMTBzaGFyZWRfcHRySTdjb252ZXJ0RUUAANTBAACgNAAAwDQAAAAAAAAkNQAA1QQAADAFAAAxBQAA2AQAADIFAABOU3QzX18yMjBfX3NoYXJlZF9wdHJfZW1wbGFjZUk3Y29udmVydE5TXzlhbGxvY2F0b3JJUzFfRUVFRQD8wQAA6DQAAIi0AAB4wQAAPMEAAHjBAAB4wQAAZGlkADE3bWF4aVNhbXBsZUFuZEhvbGQA1MEAAEQ1AABQMTdtYXhpU2FtcGxlQW5kSG9sZAAAAAC0wgAAYDUAAAAAAABYNQAAUEsxN21heGlTYW1wbGVBbmRIb2xkAAAAtMIAAIg1AAABAAAAWDUAAAAAAABYNgAAMwUAADQFAAA1BQAANgUAADcFAABOU3QzX18yMjBfX3NoYXJlZF9wdHJfcG9pbnRlcklQMTdtYXhpU2FtcGxlQW5kSG9sZE4xMGVtc2NyaXB0ZW4xNXNtYXJ0X3B0cl90cmFpdElOU18xMHNoYXJlZF9wdHJJUzFfRUVFMTF2YWxfZGVsZXRlckVOU185YWxsb2NhdG9ySVMxX0VFRUUAAPzBAADMNQAAiLQAAE4xMGVtc2NyaXB0ZW4xNXNtYXJ0X3B0cl90cmFpdElOU3QzX18yMTBzaGFyZWRfcHRySTE3bWF4aVNhbXBsZUFuZEhvbGRFRUUxMXZhbF9kZWxldGVyRQDUwQAAZDYAAE5TdDNfXzIxMHNoYXJlZF9wdHJJMTdtYXhpU2FtcGxlQW5kSG9sZEVFAAAA1MEAAMQ2AADwNgAAAAAAAGA3AADVBAAAOAUAADkFAADYBAAAOgUAAE5TdDNfXzIyMF9fc2hhcmVkX3B0cl9lbXBsYWNlSTE3bWF4aVNhbXBsZUFuZEhvbGROU185YWxsb2NhdG9ySVMxX0VFRUUAAPzBAAAYNwAAiLQAAAAAAAB4wQAAeDUAAHjBAAB4wQAAMTZtYXhpTm9ubGluZWFyaXR5AADUwQAAgDcAAFAxNm1heGlOb25saW5lYXJpdHkAtMIAAJw3AAAAAAAAlDcAAFBLMTZtYXhpTm9ubGluZWFyaXR5AAAAALTCAADANwAAAQAAAJQ3AAAAAAAAkDgAADsFAAA8BQAAPQUAAD4FAAA/BQAATlN0M19fMjIwX19zaGFyZWRfcHRyX3BvaW50ZXJJUDE2bWF4aU5vbmxpbmVhcml0eU4xMGVtc2NyaXB0ZW4xNXNtYXJ0X3B0cl90cmFpdElOU18xMHNoYXJlZF9wdHJJUzFfRUVFMTF2YWxfZGVsZXRlckVOU185YWxsb2NhdG9ySVMxX0VFRUUAAAD8wQAABDgAAIi0AABOMTBlbXNjcmlwdGVuMTVzbWFydF9wdHJfdHJhaXRJTlN0M19fMjEwc2hhcmVkX3B0ckkxNm1heGlOb25saW5lYXJpdHlFRUUxMXZhbF9kZWxldGVyRQAA1MEAAJw4AABOU3QzX18yMTBzaGFyZWRfcHRySTE2bWF4aU5vbmxpbmVhcml0eUVFAAAAANTBAAD8OAAAKDkAAAAAAACYOQAA1QQAAEAFAABBBQAA2AQAAEIFAABOU3QzX18yMjBfX3NoYXJlZF9wdHJfZW1wbGFjZUkxNm1heGlOb25saW5lYXJpdHlOU185YWxsb2NhdG9ySVMxX0VFRUUAAAD8wQAAUDkAAIi0AAB4wQAAsDcAAHjBAAB4wQAAsDcAAHjBAAB4wQAAeMEAALA3AAB4wQAAeMEAAHjBAAAxMW1heGlGbGFuZ2VyAAAA1MEAANQ5AABQMTFtYXhpRmxhbmdlcgAAtMIAAOw5AAAAAAAA5DkAAFBLMTFtYXhpRmxhbmdlcgC0wgAADDoAAAEAAADkOQAAAAAAANA6AABDBQAARAUAAEUFAABGBQAARwUAAE5TdDNfXzIyMF9fc2hhcmVkX3B0cl9wb2ludGVySVAxMW1heGlGbGFuZ2VyTjEwZW1zY3JpcHRlbjE1c21hcnRfcHRyX3RyYWl0SU5TXzEwc2hhcmVkX3B0cklTMV9FRUUxMXZhbF9kZWxldGVyRU5TXzlhbGxvY2F0b3JJUzFfRUVFRQAAAAD8wQAASDoAAIi0AABOMTBlbXNjcmlwdGVuMTVzbWFydF9wdHJfdHJhaXRJTlN0M19fMjEwc2hhcmVkX3B0ckkxMW1heGlGbGFuZ2VyRUVFMTF2YWxfZGVsZXRlckUAAADUwQAA3DoAAE5TdDNfXzIxMHNoYXJlZF9wdHJJMTFtYXhpRmxhbmdlckVFANTBAAA4OwAAXDsAAAAAAADIOwAA1QQAAEgFAABJBQAA2AQAAEoFAABOU3QzX18yMjBfX3NoYXJlZF9wdHJfZW1wbGFjZUkxMW1heGlGbGFuZ2VyTlNfOWFsbG9jYXRvcklTMV9FRUVFAAAAAPzBAACEOwAAiLQ=");
base64DecodeToExistingUint8Array(bufferView, 15328, "eMEAAPw5AAB4wQAASMEAAHjBAAB4wQAAeMEAAGRpaWRpZGRkADEwbWF4aUNob3J1cwAAANTBAAAFPAAAUDEwbWF4aUNob3J1cwAAALTCAAAcPAAAAAAAABQ8AABQSzEwbWF4aUNob3J1cwAAtMIAADw8AAABAAAAFDwAAAAAAAD8PAAASwUAAEwFAABNBQAATgUAAE8FAABOU3QzX18yMjBfX3NoYXJlZF9wdHJfcG9pbnRlcklQMTBtYXhpQ2hvcnVzTjEwZW1zY3JpcHRlbjE1c21hcnRfcHRyX3RyYWl0SU5TXzEwc2hhcmVkX3B0cklTMV9FRUUxMXZhbF9kZWxldGVyRU5TXzlhbGxvY2F0b3JJUzFfRUVFRQD8wQAAeDwAAIi0AABOMTBlbXNjcmlwdGVuMTVzbWFydF9wdHJfdHJhaXRJTlN0M19fMjEwc2hhcmVkX3B0ckkxMG1heGlDaG9ydXNFRUUxMXZhbF9kZWxldGVyRQAAAADUwQAACD0AAE5TdDNfXzIxMHNoYXJlZF9wdHJJMTBtYXhpQ2hvcnVzRUUAANTBAABkPQAAiD0AAAAAAADwPQAA1QQAAFAFAABRBQAA2AQAAFIFAABOU3QzX18yMjBfX3NoYXJlZF9wdHJfZW1wbGFjZUkxMG1heGlDaG9ydXNOU185YWxsb2NhdG9ySVMxX0VFRUUA/MEAALA9AACItAAAAAAAAHjBAAAsPAAAeMEAAEjBAAB4wQAAeMEAAHjBAAAxM21heGlEQ0Jsb2NrZXIA1MEAABw+AABQMTNtYXhpRENCbG9ja2VyAAAAALTCAAA0PgAAAAAAACw+AABQSzEzbWF4aURDQmxvY2tlcgAAALTCAABYPgAAAQAAACw+AAAAAAAAID8AAFMFAABUBQAAVQUAAFYFAABXBQAATlN0M19fMjIwX19zaGFyZWRfcHRyX3BvaW50ZXJJUDEzbWF4aURDQmxvY2tlck4xMGVtc2NyaXB0ZW4xNXNtYXJ0X3B0cl90cmFpdElOU18xMHNoYXJlZF9wdHJJUzFfRUVFMTF2YWxfZGVsZXRlckVOU185YWxsb2NhdG9ySVMxX0VFRUUAAPzBAACYPgAAiLQAAE4xMGVtc2NyaXB0ZW4xNXNtYXJ0X3B0cl90cmFpdElOU3QzX18yMTBzaGFyZWRfcHRySTEzbWF4aURDQmxvY2tlckVFRTExdmFsX2RlbGV0ZXJFANTBAAAsPwAATlN0M19fMjEwc2hhcmVkX3B0ckkxM21heGlEQ0Jsb2NrZXJFRQAAANTBAACIPwAAsD8AAAAAAAAcQAAA1QQAAFgFAABZBQAA2AQAAFoFAABOU3QzX18yMjBfX3NoYXJlZF9wdHJfZW1wbGFjZUkxM21heGlEQ0Jsb2NrZXJOU185YWxsb2NhdG9ySVMxX0VFRUUAAPzBAADYPwAAiLQ=");
base64DecodeToExistingUint8Array(bufferView, 16432, "eMEAAEg+AAB4wQAAeMEAADdtYXhpU1ZGAAAAANTBAABAQAAAUDdtYXhpU1ZGAAAAtMIAAFRAAAAAAAAATEAAAFBLN21heGlTVkYAALTCAABwQAAAAQAAAExAAAAAAAAAKEEAAFsFAABcBQAAXQUAAF4FAABfBQAATlN0M19fMjIwX19zaGFyZWRfcHRyX3BvaW50ZXJJUDdtYXhpU1ZGTjEwZW1zY3JpcHRlbjE1c21hcnRfcHRyX3RyYWl0SU5TXzEwc2hhcmVkX3B0cklTMV9FRUUxMXZhbF9kZWxldGVyRU5TXzlhbGxvY2F0b3JJUzFfRUVFRQD8wQAAqEAAAIi0AABOMTBlbXNjcmlwdGVuMTVzbWFydF9wdHJfdHJhaXRJTlN0M19fMjEwc2hhcmVkX3B0ckk3bWF4aVNWRkVFRTExdmFsX2RlbGV0ZXJFAAAAANTBAAA0QQAATlN0M19fMjEwc2hhcmVkX3B0ckk3bWF4aVNWRkVFAADUwQAAjEEAAKxBAAAAAAAAEEIAANUEAABgBQAAYQUAANgEAABiBQAATlN0M19fMjIwX19zaGFyZWRfcHRyX2VtcGxhY2VJN21heGlTVkZOU185YWxsb2NhdG9ySVMxX0VFRUUA/MEAANRBAACItAAA3MAAAGBAAAB4wQ==");
base64DecodeToExistingUint8Array(bufferView, 16944, "eMEAAGBAAAB4wQAAeMEAAHjBAAB4wQAAeMEAADhtYXhpTWF0aAAAANTBAABMQgAAUDhtYXhpTWF0aAAAtMIAAGBCAAAAAAAAWEIAAFBLOG1heGlNYXRoALTCAAB8QgAAAQAAAFhCAAAAAAAAOEMAAGMFAABkBQAAZQUAAGYFAABnBQAATlN0M19fMjIwX19zaGFyZWRfcHRyX3BvaW50ZXJJUDhtYXhpTWF0aE4xMGVtc2NyaXB0ZW4xNXNtYXJ0X3B0cl90cmFpdElOU18xMHNoYXJlZF9wdHJJUzFfRUVFMTF2YWxfZGVsZXRlckVOU185YWxsb2NhdG9ySVMxX0VFRUUAAAAA/MEAALRCAACItAAATjEwZW1zY3JpcHRlbjE1c21hcnRfcHRyX3RyYWl0SU5TdDNfXzIxMHNoYXJlZF9wdHJJOG1heGlNYXRoRUVFMTF2YWxfZGVsZXRlckUAAADUwQAAREMAAE5TdDNfXzIxMHNoYXJlZF9wdHJJOG1heGlNYXRoRUUA1MEAAJxDAAC8QwAAAAAAACREAADVBAAAaAUAAGkFAADYBAAAagUAAE5TdDNfXzIyMF9fc2hhcmVkX3B0cl9lbXBsYWNlSThtYXhpTWF0aE5TXzlhbGxvY2F0b3JJUzFfRUVFRQAAAAD8wQAA5EMAAIi0AAB4wQAAeMEAAHjBAABkaWRkADltYXhpQ2xvY2sA1MEAAEFEAABQOW1heGlDbG9jawC0wgAAVEQAAAAAAABMRAAAUEs5bWF4aUNsb2NrAAAAALTCAABwRAAAAQAAAExEAAAAAAAAMEUAAGsFAABsBQAAbQUAAG4FAABvBQAATlN0M19fMjIwX19zaGFyZWRfcHRyX3BvaW50ZXJJUDltYXhpQ2xvY2tOMTBlbXNjcmlwdGVuMTVzbWFydF9wdHJfdHJhaXRJTlNfMTBzaGFyZWRfcHRySVMxX0VFRTExdmFsX2RlbGV0ZXJFTlNfOWFsbG9jYXRvcklTMV9FRUVFAAAA/MEAAKxEAACItAAATjEwZW1zY3JpcHRlbjE1c21hcnRfcHRyX3RyYWl0SU5TdDNfXzIxMHNoYXJlZF9wdHJJOW1heGlDbG9ja0VFRTExdmFsX2RlbGV0ZXJFAADUwQAAPEUAAE5TdDNfXzIxMHNoYXJlZF9wdHJJOW1heGlDbG9ja0VFAAAAANTBAACURQAAuEUAAAAAAAAgRgAA1QQAAHAFAABxBQAA2AQAAHIFAABOU3QzX18yMjBfX3NoYXJlZF9wdHJfZW1wbGFjZUk5bWF4aUNsb2NrTlNfOWFsbG9jYXRvcklTMV9FRUVFAAAA/MEAAOBFAACItAAA3MAAAGBEAADcwAAAYEQAAHjBAADcwAAAYEQAADzBAAA8wQAAgEQAADIybWF4aUt1cmFtb3RvT3NjaWxsYXRvcgAAAADUwQAAVEYAAFAyMm1heGlLdXJhbW90b09zY2lsbGF0b3IAAAC0wgAAeEYAAAAAAABwRgAAUEsyMm1heGlLdXJhbW90b09zY2lsbGF0b3IAALTCAACkRgAAAQAAAHBGAAAAAAAAfEcAAHMFAAB0BQAAdQUAAHYFAAB3BQAATlN0M19fMjIwX19zaGFyZWRfcHRyX3BvaW50ZXJJUDIybWF4aUt1cmFtb3RvT3NjaWxsYXRvck4xMGVtc2NyaXB0ZW4xNXNtYXJ0X3B0cl90cmFpdElOU18xMHNoYXJlZF9wdHJJUzFfRUVFMTF2YWxfZGVsZXRlckVOU185YWxsb2NhdG9ySVMxX0VFRUUA/MEAAOxGAACItAAATjEwZW1zY3JpcHRlbjE1c21hcnRfcHRyX3RyYWl0SU5TdDNfXzIxMHNoYXJlZF9wdHJJMjJtYXhpS3VyYW1vdG9Pc2NpbGxhdG9yRUVFMTF2YWxfZGVsZXRlckUAAAAA1MEAAIhHAABOU3QzX18yMTBzaGFyZWRfcHRySTIybWF4aUt1cmFtb3RvT3NjaWxsYXRvckVFAADUwQAA8EcAACBIAAAAAAAAlEgAANUEAAB4BQAAeQUAANgEAAB6BQAATlN0M19fMjIwX19zaGFyZWRfcHRyX2VtcGxhY2VJMjJtYXhpS3VyYW1vdG9Pc2NpbGxhdG9yTlNfOWFsbG9jYXRvcklTMV9FRUVFAPzBAABISAAAiLQAAHjBAACURgAAeMEAAHjBAABQEwAAZGlpZGRpAADcwAAAlEYAAHjBAAB4wQAAlEYAADI1bWF4aUt1cmFtb3RvT3NjaWxsYXRvclNldADUwQAA0EgAAFAyNW1heGlLdXJhbW90b09zY2lsbGF0b3JTZXQAAAAAtMIAAPRIAAAAAAAA7EgAAFBLMjVtYXhpS3VyYW1vdG9Pc2NpbGxhdG9yU2V0AAAAtMIAACRJAAABAAAA7EgAAAAAAAAESgAAewUAAHwFAAB9BQAAfgUAAH8FAABOU3QzX18yMjBfX3NoYXJlZF9wdHJfcG9pbnRlcklQMjVtYXhpS3VyYW1vdG9Pc2NpbGxhdG9yU2V0TjEwZW1zY3JpcHRlbjE1c21hcnRfcHRyX3RyYWl0SU5TXzEwc2hhcmVkX3B0cklTMV9FRUUxMXZhbF9kZWxldGVyRU5TXzlhbGxvY2F0b3JJUzFfRUVFRQAA/MEAAHBJAACItAAATjEwZW1zY3JpcHRlbjE1c21hcnRfcHRyX3RyYWl0SU5TdDNfXzIxMHNoYXJlZF9wdHJJMjVtYXhpS3VyYW1vdG9Pc2NpbGxhdG9yU2V0RUVFMTF2YWxfZGVsZXRlckUA1MEAABBKAABOU3QzX18yMTBzaGFyZWRfcHRySTI1bWF4aUt1cmFtb3RvT3NjaWxsYXRvclNldEVFAAAA1MEAAHhKAACsSgAAYMEAAAAAAAAoSwAAgAUAAIEFAACCBQAA2AQAAIMFAABOU3QzX18yMjBfX3NoYXJlZF9wdHJfZW1wbGFjZUkyNW1heGlLdXJhbW90b09zY2lsbGF0b3JTZXROU185YWxsb2NhdG9ySVMxX0VFRUUAAPzBAADYSgAAiLQ=");
base64DecodeToExistingUint8Array(bufferView, 19264, "eMEAABRJAAB4wQAAeMEAANzAAAAUSQAAeMEAAGDBAAB2aWlkaQAAANzAAAAUSQAAUBMAAHjBAAAUSQAAYMEAAGRpaWkAAAAAYMEAABRJAAAyN21heGlBc3luY0t1cmFtb3RvT3NjaWxsYXRvcgAAAPzBAACQSwAA7EgAAFAyN21heGlBc3luY0t1cmFtb3RvT3NjaWxsYXRvcgAAtMIAALxLAAAAAAAAsEsAAFBLMjdtYXhpQXN5bmNLdXJhbW90b09zY2lsbGF0b3IAtMIAAOxLAAABAAAAsEsAAAAAAADQTAAAhAUAAIUFAACGBQAAhwUAAIgFAABOU3QzX18yMjBfX3NoYXJlZF9wdHJfcG9pbnRlcklQMjdtYXhpQXN5bmNLdXJhbW90b09zY2lsbGF0b3JOMTBlbXNjcmlwdGVuMTVzbWFydF9wdHJfdHJhaXRJTlNfMTBzaGFyZWRfcHRySVMxX0VFRTExdmFsX2RlbGV0ZXJFTlNfOWFsbG9jYXRvcklTMV9FRUVFAAAAAPzBAAA4TAAAiLQAAE4xMGVtc2NyaXB0ZW4xNXNtYXJ0X3B0cl90cmFpdElOU3QzX18yMTBzaGFyZWRfcHRySTI3bWF4aUFzeW5jS3VyYW1vdG9Pc2NpbGxhdG9yRUVFMTF2YWxfZGVsZXRlckUAAADUwQAA3EwAAE5TdDNfXzIxMHNoYXJlZF9wdHJJMjdtYXhpQXN5bmNLdXJhbW90b09zY2lsbGF0b3JFRQDUwQAASE0AAHxNAABgwQAAAAAAAPxNAACJBQAAigUAAIsFAADYBAAAjAUAAE5TdDNfXzIyMF9fc2hhcmVkX3B0cl9lbXBsYWNlSTI3bWF4aUFzeW5jS3VyYW1vdG9Pc2NpbGxhdG9yTlNfOWFsbG9jYXRvcklTMV9FRUVFAAAAAPzBAACoTQAAiLQ=");
base64DecodeToExistingUint8Array(bufferView, 19984, "eMEAANxLAAB4wQAAeMEAANzAAADcSwAAeMEAAGDBAADcwAAA3EsAAFATAAB4wQAA3EsAAGDBAABgwQAA3EsAADdtYXhpRkZUAAAAANTBAABQTgAAUDdtYXhpRkZUAAAAtMIAAGROAAAAAAAAXE4AAFBLN21heGlGRlQAALTCAACATgAAAQAAAFxOAAAAAAAAOE8AAI0FAACOBQAAjwUAAJAFAACRBQAATlN0M19fMjIwX19zaGFyZWRfcHRyX3BvaW50ZXJJUDdtYXhpRkZUTjEwZW1zY3JpcHRlbjE1c21hcnRfcHRyX3RyYWl0SU5TXzEwc2hhcmVkX3B0cklTMV9FRUUxMXZhbF9kZWxldGVyRU5TXzlhbGxvY2F0b3JJUzFfRUVFRQD8wQAAuE4AAIi0AABOMTBlbXNjcmlwdGVuMTVzbWFydF9wdHJfdHJhaXRJTlN0M19fMjEwc2hhcmVkX3B0ckk3bWF4aUZGVEVFRTExdmFsX2RlbGV0ZXJFAAAAANTBAABETwAATlN0M19fMjEwc2hhcmVkX3B0ckk3bWF4aUZGVEVFAADUwQAAnE8AALxPAAAAAAAAIFAAAJIFAACTBQAAlAUAANgEAACVBQAATlN0M19fMjIwX19zaGFyZWRfcHRyX2VtcGxhY2VJN21heGlGRlROU185YWxsb2NhdG9ySVMxX0VFRUUA/MEAAORPAACItAAAAAAAANzAAABwTgAAPMEAADzBAAA8wQAAdmlpaWlpAAAAAAAA9MAAAHBOAABswQAAdFAAAE43bWF4aUZGVDhmZnRNb2Rlc0UAiMEAAGBQAABpaWlmaQAAAGzBAABwTgAAZmlpACgXAABwTgAAPMEAAHBOAAA4bWF4aUlGRlQAAADUwQAAoFAAAFA4bWF4aUlGRlQAALTCAAC0UAAAAAAAAKxQAABQSzhtYXhpSUZGVAC0wgAA0FAAAAEAAACsUAAAAAAAAIxRAACWBQAAlwUAAJgFAACZBQAAmgUAAE5TdDNfXzIyMF9fc2hhcmVkX3B0cl9wb2ludGVySVA4bWF4aUlGRlROMTBlbXNjcmlwdGVuMTVzbWFydF9wdHJfdHJhaXRJTlNfMTBzaGFyZWRfcHRySVMxX0VFRTExdmFsX2RlbGV0ZXJFTlNfOWFsbG9jYXRvcklTMV9FRUVFAAAAAPzBAAAIUQAAiLQAAE4xMGVtc2NyaXB0ZW4xNXNtYXJ0X3B0cl90cmFpdElOU3QzX18yMTBzaGFyZWRfcHRySThtYXhpSUZGVEVFRTExdmFsX2RlbGV0ZXJFAAAA1MEAAJhRAABOU3QzX18yMTBzaGFyZWRfcHRySThtYXhpSUZGVEVFANTBAADwUQAAEFIAAAAAAAB4UgAAmwUAAJwFAACdBQAA2AQAAJ4FAABOU3QzX18yMjBfX3NoYXJlZF9wdHJfZW1wbGFjZUk4bWF4aUlGRlROU185YWxsb2NhdG9ySVMxX0VFRUUAAAAA/MEAADhSAACItA==");
base64DecodeToExistingUint8Array(bufferView, 21136, "3MAAAMBQAAA8wQAAPMEAADzB");
base64DecodeToExistingUint8Array(bufferView, 21168, "bMEAAMBQAAAoFwAAKBcAANxSAABOOG1heGlJRkZUOGZmdE1vZGVzRQAAAACIwQAAxFIAAGZpaWlpaQAxNm1heGlNRkNDQW5hbHlzZXJJZEUAAAAA1MEAAOtSAABQMTZtYXhpTUZDQ0FuYWx5c2VySWRFAAC0wgAADFMAAAAAAAAEUwAAUEsxNm1heGlNRkNDQW5hbHlzZXJJZEUAtMIAADRTAAABAAAABFMAAAAAAAAIVAAAnwUAAKAFAAChBQAAogUAAKMFAABOU3QzX18yMjBfX3NoYXJlZF9wdHJfcG9pbnRlcklQMTZtYXhpTUZDQ0FuYWx5c2VySWRFTjEwZW1zY3JpcHRlbjE1c21hcnRfcHRyX3RyYWl0SU5TXzEwc2hhcmVkX3B0cklTMl9FRUUxMXZhbF9kZWxldGVyRU5TXzlhbGxvY2F0b3JJUzJfRUVFRQAAAAD8wQAAeFMAAIi0AABOMTBlbXNjcmlwdGVuMTVzbWFydF9wdHJfdHJhaXRJTlN0M19fMjEwc2hhcmVkX3B0ckkxNm1heGlNRkNDQW5hbHlzZXJJZEVFRUUxMXZhbF9kZWxldGVyRQAAANTBAAAUVAAATlN0M19fMjEwc2hhcmVkX3B0ckkxNm1heGlNRkNDQW5hbHlzZXJJZEVFRQDUwQAAeFQAAKRUAAAAAAAAGFUAAKQFAAClBQAApgUAANgEAACnBQAATlN0M19fMjIwX19zaGFyZWRfcHRyX2VtcGxhY2VJMTZtYXhpTUZDQ0FuYWx5c2VySWRFTlNfOWFsbG9jYXRvcklTMl9FRUVFAAAAAPzBAADMVAAAiLQ=");
base64DecodeToExistingUint8Array(bufferView, 21808, "3MAAACRTAABIwQAASMEAAEjBAAB4wQAAeMEAAHZpaWlpaWRkAAAAAFATAAAkUwAAKBcAADE1bWF4aVRpbWVTdHJldGNoSTE0aGFubldpbkZ1bmN0b3JFANTBAABkVQAAUDE1bWF4aVRpbWVTdHJldGNoSTE0aGFubldpbkZ1bmN0b3JFAAAAALTCAACQVQAAAAAAAIhVAABQSzE1bWF4aVRpbWVTdHJldGNoSTE0aGFubldpbkZ1bmN0b3JFAAAAtMIAAMhVAAABAAAAiFUAAAAAAAC4VgAAqAUAAKkFAACqBQAAqwUAAKwFAABOU3QzX18yMjBfX3NoYXJlZF9wdHJfcG9pbnRlcklQMTVtYXhpVGltZVN0cmV0Y2hJMTRoYW5uV2luRnVuY3RvckVOMTBlbXNjcmlwdGVuMTVzbWFydF9wdHJfdHJhaXRJTlNfMTBzaGFyZWRfcHRySVMzX0VFRTExdmFsX2RlbGV0ZXJFTlNfOWFsbG9jYXRvcklTM19FRUVFAAD8wQAAHFYAAIi0AABOMTBlbXNjcmlwdGVuMTVzbWFydF9wdHJfdHJhaXRJTlN0M19fMjEwc2hhcmVkX3B0ckkxNW1heGlUaW1lU3RyZXRjaEkxNGhhbm5XaW5GdW5jdG9yRUVFRTExdmFsX2RlbGV0ZXJFANTBAADEVgAATlN0M19fMjEwc2hhcmVkX3B0ckkxNW1heGlUaW1lU3RyZXRjaEkxNGhhbm5XaW5GdW5jdG9yRUVFAAAA1MEAADRXAABwVwAAAAAAAPBXAACtBQAArgUAAK8FAADYBAAAsAUAAE5TdDNfXzIyMF9fc2hhcmVkX3B0cl9lbXBsYWNlSTE1bWF4aVRpbWVTdHJldGNoSTE0aGFubldpbkZ1bmN0b3JFTlNfOWFsbG9jYXRvcklTM19FRUVFAAD8wQAAmFcAAIi0AADcwAAAuFUAAHQpAAB4wQAAuFUAANzAAAC4VQAAeMEAAAAAAABoWAAAsQUAALIFAACzBQAAOW1heGlHcmFpbkkxNGhhbm5XaW5GdW5jdG9yRQAxM21heGlHcmFpbkJhc2UAAAAA1MEAAE1YAAD8wQAAMFgAAGBYAAAAAAAAYFgAALQFAACyBQAAtQU=");
base64DecodeToExistingUint8Array(bufferView, 22672, "eMEAALhVAAB4wQAAeMEAADzBAAB4wQAAZGlpZGRpZAB4wQAAuFUAAHjBAAB4wQAAPMEAADE0bWF4aVBpdGNoU2hpZnRJMTRoYW5uV2luRnVuY3RvckUAANTBAADEWAAAUDE0bWF4aVBpdGNoU2hpZnRJMTRoYW5uV2luRnVuY3RvckUAtMIAAPBYAAAAAAAA6FgAAFBLMTRtYXhpUGl0Y2hTaGlmdEkxNGhhbm5XaW5GdW5jdG9yRQAAAAC0wgAAJFkAAAEAAADoWAAAAAAAABRaAAC2BQAAtwUAALgFAAC5BQAAugUAAE5TdDNfXzIyMF9fc2hhcmVkX3B0cl9wb2ludGVySVAxNG1heGlQaXRjaFNoaWZ0STE0aGFubldpbkZ1bmN0b3JFTjEwZW1zY3JpcHRlbjE1c21hcnRfcHRyX3RyYWl0SU5TXzEwc2hhcmVkX3B0cklTM19FRUUxMXZhbF9kZWxldGVyRU5TXzlhbGxvY2F0b3JJUzNfRUVFRQAAAPzBAAB4WQAAiLQAAE4xMGVtc2NyaXB0ZW4xNXNtYXJ0X3B0cl90cmFpdElOU3QzX18yMTBzaGFyZWRfcHRySTE0bWF4aVBpdGNoU2hpZnRJMTRoYW5uV2luRnVuY3RvckVFRUUxMXZhbF9kZWxldGVyRQAA1MEAACBaAABOU3QzX18yMTBzaGFyZWRfcHRySTE0bWF4aVBpdGNoU2hpZnRJMTRoYW5uV2luRnVuY3RvckVFRQAAAADUwQAAkFoAAMxaAAAAAAAATFsAALsFAAC8BQAAvQUAANgEAAC+BQAATlN0M19fMjIwX19zaGFyZWRfcHRyX2VtcGxhY2VJMTRtYXhpUGl0Y2hTaGlmdEkxNGhhbm5XaW5GdW5jdG9yRU5TXzlhbGxvY2F0b3JJUzNfRUVFRQAAAPzBAAD0WgAAiLQAANzAAAAUWQAAdCk=");
base64DecodeToExistingUint8Array(bufferView, 23408, "eMEAABRZAAB4wQAAeMEAADzBAAB4wQAAMTFtYXhpU3RyZXRjaEkxNGhhbm5XaW5GdW5jdG9yRQDUwQAAiFsAAFAxMW1heGlTdHJldGNoSTE0aGFubldpbkZ1bmN0b3JFAAAAALTCAACwWwAAAAAAAKhbAABQSzExbWF4aVN0cmV0Y2hJMTRoYW5uV2luRnVuY3RvckUAAAC0wgAA5FsAAAEAAACoWwAAAAAAAMxcAAC/BQAAwAUAAMEFAADCBQAAwwUAAE5TdDNfXzIyMF9fc2hhcmVkX3B0cl9wb2ludGVySVAxMW1heGlTdHJldGNoSTE0aGFubldpbkZ1bmN0b3JFTjEwZW1zY3JpcHRlbjE1c21hcnRfcHRyX3RyYWl0SU5TXzEwc2hhcmVkX3B0cklTM19FRUUxMXZhbF9kZWxldGVyRU5TXzlhbGxvY2F0b3JJUzNfRUVFRQAA/MEAADRcAACItAAATjEwZW1zY3JpcHRlbjE1c21hcnRfcHRyX3RyYWl0SU5TdDNfXzIxMHNoYXJlZF9wdHJJMTFtYXhpU3RyZXRjaEkxNGhhbm5XaW5GdW5jdG9yRUVFRTExdmFsX2RlbGV0ZXJFANTBAADYXAAATlN0M19fMjEwc2hhcmVkX3B0ckkxMW1heGlTdHJldGNoSTE0aGFubldpbkZ1bmN0b3JFRUUAAADUwQAARF0AAHxdAAAAAAAA+F0AAMQFAADFBQAAxgUAANgEAADHBQAATlN0M19fMjIwX19zaGFyZWRfcHRyX2VtcGxhY2VJMTFtYXhpU3RyZXRjaEkxNGhhbm5XaW5GdW5jdG9yRU5TXzlhbGxvY2F0b3JJUzNfRUVFRQAA/MEAAKRdAACItAAA3MAAANRbAAB0KQAAeMEAANRbAADcwAAA1FsAAHjBAABgwQAA1FsAAAAAAAB4wQAA1FsAAHjBAAB4wQAAeMEAADzBAAB4wQAAZGlpZGRkaWQ=");
base64DecodeToExistingUint8Array(bufferView, 24160, "eMEAANRbAAB4wQAAeMEAAHjBAAA8wQAAZGlpZGRkaQA4bWF4aUJpdHMAAADUwQAAgF4AAFA4bWF4aUJpdHMAALTCAACUXgAAAAAAAIxeAABQSzhtYXhpQml0cwC0wgAAsF4AAAEAAACMXgAASMEAAEjBAABIwQAASMEAAEjBAABIwQAASMEAAEjBAABIwQAASMEAAHjBAABIwQAASMEAAHjBAABpaWQAMTFtYXhpVHJpZ2dlcgAAANTBAAAIXwAAUDExbWF4aVRyaWdnZXIAALTCAAAgXwAAAAAAABhfAABQSzExbWF4aVRyaWdnZXIAtMIAAEBfAAABAAAAGF8AAAAAAAAEYAAAyAUAAMkFAADKBQAAywUAAMwFAABOU3QzX18yMjBfX3NoYXJlZF9wdHJfcG9pbnRlcklQMTFtYXhpVHJpZ2dlck4xMGVtc2NyaXB0ZW4xNXNtYXJ0X3B0cl90cmFpdElOU18xMHNoYXJlZF9wdHJJUzFfRUVFMTF2YWxfZGVsZXRlckVOU185YWxsb2NhdG9ySVMxX0VFRUUAAAAA/MEAAHxfAACItAAATjEwZW1zY3JpcHRlbjE1c21hcnRfcHRyX3RyYWl0SU5TdDNfXzIxMHNoYXJlZF9wdHJJMTFtYXhpVHJpZ2dlckVFRTExdmFsX2RlbGV0ZXJFAAAA1MEAABBgAABOU3QzX18yMTBzaGFyZWRfcHRySTExbWF4aVRyaWdnZXJFRQDUwQAAbGAAAJBgAAAAAAAA/GAAANUEAADNBQAAzgUAANgEAADPBQAATlN0M19fMjIwX19zaGFyZWRfcHRyX2VtcGxhY2VJMTFtYXhpVHJpZ2dlck5TXzlhbGxvY2F0b3JJUzFfRUVFRQAAAAD8wQAAuGAAAIi0AAB4wQAAMF8AAHjB");
base64DecodeToExistingUint8Array(bufferView, 24864, "eMEAADBfAAB4wQAAeMEAADExbWF4aUNvdW50ZXIAAADUwQAAMGEAAFAxMW1heGlDb3VudGVyAAC0wgAASGEAAAAAAABAYQAAUEsxMW1heGlDb3VudGVyALTCAABoYQAAAQAAAEBhAAAAAAAALGIAANAFAADRBQAA0gUAANMFAADUBQAATlN0M19fMjIwX19zaGFyZWRfcHRyX3BvaW50ZXJJUDExbWF4aUNvdW50ZXJOMTBlbXNjcmlwdGVuMTVzbWFydF9wdHJfdHJhaXRJTlNfMTBzaGFyZWRfcHRySVMxX0VFRTExdmFsX2RlbGV0ZXJFTlNfOWFsbG9jYXRvcklTMV9FRUVFAAAAAPzBAACkYQAAiLQAAE4xMGVtc2NyaXB0ZW4xNXNtYXJ0X3B0cl90cmFpdElOU3QzX18yMTBzaGFyZWRfcHRySTExbWF4aUNvdW50ZXJFRUUxMXZhbF9kZWxldGVyRQAAANTBAAA4YgAATlN0M19fMjEwc2hhcmVkX3B0ckkxMW1heGlDb3VudGVyRUUA1MEAAJRiAAC4YgAAAAAAACRjAADVBAAA1QUAANYFAADYBAAA1wUAAE5TdDNfXzIyMF9fc2hhcmVkX3B0cl9lbXBsYWNlSTExbWF4aUNvdW50ZXJOU185YWxsb2NhdG9ySVMxX0VFRUUAAAAA/MEAAOBiAACItAAAeMEAAFhhAAB4wQAAeMEAADltYXhpSW5kZXgAANTBAABAYwAAUDltYXhpSW5kZXgAtMIAAFRjAAAAAAAATGMAAFBLOW1heGlJbmRleAAAAAC0wgAAcGMAAAEAAABMYwAAAAAAADBkAADYBQAA2QUAANoFAADbBQAA3AUAAE5TdDNfXzIyMF9fc2hhcmVkX3B0cl9wb2ludGVySVA5bWF4aUluZGV4TjEwZW1zY3JpcHRlbjE1c21hcnRfcHRyX3RyYWl0SU5TXzEwc2hhcmVkX3B0cklTMV9FRUUxMXZhbF9kZWxldGVyRU5TXzlhbGxvY2F0b3JJUzFfRUVFRQAAAPzBAACsYwAAiLQAAE4xMGVtc2NyaXB0ZW4xNXNtYXJ0X3B0cl90cmFpdElOU3QzX18yMTBzaGFyZWRfcHRySTltYXhpSW5kZXhFRUUxMXZhbF9kZWxldGVyRQAA1MEAADxkAABOU3QzX18yMTBzaGFyZWRfcHRySTltYXhpSW5kZXhFRQAAAADUwQAAlGQAALhkAAAAAAAAIGUAANUEAADdBQAA3gUAANgEAADfBQAATlN0M19fMjIwX19zaGFyZWRfcHRyX2VtcGxhY2VJOW1heGlJbmRleE5TXzlhbGxvY2F0b3JJUzFfRUVFRQAAAPzBAADgZAAAiLQAAAAAAAB4wQAAYGMAAHjBAAB4wQAAUBMAADEybWF4aVJhdGlvU2VxAADUwQAARGUAAFAxMm1heGlSYXRpb1NlcQC0wgAAXGUAAAAAAABUZQAAUEsxMm1heGlSYXRpb1NlcQAAAAC0wgAAfGUAAAEAAABUZQAAAAAAAERmAADgBQAA4QUAAOIFAADjBQAA5AUAAE5TdDNfXzIyMF9fc2hhcmVkX3B0cl9wb2ludGVySVAxMm1heGlSYXRpb1NlcU4xMGVtc2NyaXB0ZW4xNXNtYXJ0X3B0cl90cmFpdElOU18xMHNoYXJlZF9wdHJJUzFfRUVFMTF2YWxfZGVsZXRlckVOU185YWxsb2NhdG9ySVMxX0VFRUUAAAD8wQAAvGUAAIi0AABOMTBlbXNjcmlwdGVuMTVzbWFydF9wdHJfdHJhaXRJTlN0M19fMjEwc2hhcmVkX3B0ckkxMm1heGlSYXRpb1NlcUVFRTExdmFsX2RlbGV0ZXJFAADUwQAAUGYAAE5TdDNfXzIxMHNoYXJlZF9wdHJJMTJtYXhpUmF0aW9TZXFFRQAAAADUwQAArGYAANRmAAAAAAAAQGcAANUEAADlBQAA5gUAANgEAADnBQAATlN0M19fMjIwX19zaGFyZWRfcHRyX2VtcGxhY2VJMTJtYXhpUmF0aW9TZXFOU185YWxsb2NhdG9ySVMxX0VFRUUAAAD8wQAA/GYAAIi0AAAAAAAAeMEAAGxlAAB4wQAAUBMAAHjBAABsZQAAeMEAAFATAABQEwAAZGlpZGlpADEzbWF4aVNhdFJldmVyYgAxNG1heGlSZXZlcmJCYXNlANTBAACLZwAAWMIAAHtnAAAAAAAAAQAAAJxnAAAAAAAAUDEzbWF4aVNhdFJldmVyYgAAAAC0wgAAvGcAAAAAAACkZwAAUEsxM21heGlTYXRSZXZlcmIAAAC0wgAA4GcAAAEAAACkZwAAAAAAAKhoAADoBQAA6QUAAOoFAADrBQAA7AUAAE5TdDNfXzIyMF9fc2hhcmVkX3B0cl9wb2ludGVySVAxM21heGlTYXRSZXZlcmJOMTBlbXNjcmlwdGVuMTVzbWFydF9wdHJfdHJhaXRJTlNfMTBzaGFyZWRfcHRySVMxX0VFRTExdmFsX2RlbGV0ZXJFTlNfOWFsbG9jYXRvcklTMV9FRUVFAAD8wQAAIGgAAIi0AABOMTBlbXNjcmlwdGVuMTVzbWFydF9wdHJfdHJhaXRJTlN0M19fMjEwc2hhcmVkX3B0ckkxM21heGlTYXRSZXZlcmJFRUUxMXZhbF9kZWxldGVyRQDUwQAAtGgAAE5TdDNfXzIxMHNoYXJlZF9wdHJJMTNtYXhpU2F0UmV2ZXJiRUUAAADUwQAAEGkAADhpAAAAAAAApGkAAO0FAADuBQAA7wUAANgEAADwBQAATlN0M19fMjIwX19zaGFyZWRfcHRyX2VtcGxhY2VJMTNtYXhpU2F0UmV2ZXJiTlNfOWFsbG9jYXRvcklTMV9FRUVFAAD8wQAAYGkAAIi0AAB4wQAA0GcAAHjBAAAxMm1heGlGcmVlVmVyYgAAWMIAALxpAAAAAAAAAQAAAJxnAAAAAAAAUDEybWF4aUZyZWVWZXJiALTCAADkaQAAAAAAAMxpAABQSzEybWF4aUZyZWVWZXJiAAAAALTCAAAEagAAAQAAAMxpAAAAAAAAzGoAAPEFAADyBQAA8wUAAPQFAAD1BQAATlN0M19fMjIwX19zaGFyZWRfcHRyX3BvaW50ZXJJUDEybWF4aUZyZWVWZXJiTjEwZW1zY3JpcHRlbjE1c21hcnRfcHRyX3RyYWl0SU5TXzEwc2hhcmVkX3B0cklTMV9FRUUxMXZhbF9kZWxldGVyRU5TXzlhbGxvY2F0b3JJUzFfRUVFRQAAAPzBAABEagAAiLQAAE4xMGVtc2NyaXB0ZW4xNXNtYXJ0X3B0cl90cmFpdElOU3QzX18yMTBzaGFyZWRfcHRySTEybWF4aUZyZWVWZXJiRUVFMTF2YWxfZGVsZXRlckUAANTBAADYagAATlN0M19fMjEwc2hhcmVkX3B0ckkxMm1heGlGcmVlVmVyYkVFAAAAANTBAAA0awAAXGsAAAAAAADIawAA9gUAAPcFAAD4BQAA2AQAAPkFAABOU3QzX18yMjBfX3NoYXJlZF9wdHJfZW1wbGFjZUkxMm1heGlGcmVlVmVyYk5TXzlhbGxvY2F0b3JJUzFfRUVFRQAAAPzBAACEawAAiLQ=");
base64DecodeToExistingUint8Array(bufferView, 27616, "eMEAAPRpAAB4wQAAeMEAAHjBAAAlZCBpcyBub3QgYSBwb3dlciBvZiB0d28KAEVycm9yOiBGRlQgY2FsbGVkIHdpdGggc2l6ZSAlZAoAAAAKAwAAhQMAAPMDAABjBAAAw/UoXI/C6T8QWDm0yHbqP3WTGARWDuk/ppvEILBy6D99AAAAKgAAAAwAAAAAAAAAZmZmZmZm5j9mZmZmZmbmP2ZmZmZmZuY/AAAAAAAAAAAVBgAAUQYAANMFAACOBQAA/QQAAEwFAACkBAAAXAQAAOEAAAAsAgAAuQEAAFUBAAAAAAAAAADgPwAAAAAAAOA/AAAAAAAA4D8AAAAAAADgP2YtPmFsbG9jLmFsbG9jX2J1ZmZlcl9sZW5ndGhfaW5fYnl0ZXMgPT0gZi0+dGVtcF9vZmZzZXQALi4vLi4vc3JjL2xpYnMvc3RiX3ZvcmJpcy5jAHZvcmJpc19kZWNvZGVfaW5pdGlhbABmLT5ieXRlc19pbl9zZWcgPiAwAGdldDhfcGFja2V0X3JhdwBmLT5ieXRlc19pbl9zZWcgPT0gMABuZXh0X3NlZ21lbnQAAAECAgMDAwMEBAQEBAQEBAABAACAAAAAVgAAAEAAAAB2b3JiaXNfZGVjb2RlX3BhY2tldF9yZXN0AGMtPnNvcnRlZF9jb2Rld29yZHMgfHwgYy0+Y29kZXdvcmRzAGNvZGVib29rX2RlY29kZV9zY2FsYXJfcmF3ACFjLT5zcGFyc2UAIWMtPnNwYXJzZSB8fCB6IDwgYy0+c29ydGVkX2VudHJpZXMAY29kZWJvb2tfZGVjb2RlX2RlaW50ZXJsZWF2ZV9yZXBlYXQAeiA8IGMtPnNvcnRlZF9lbnRyaWVzAGNvZGVib29rX2RlY29kZV9zdGFydA==");
base64DecodeToExistingUint8Array(bufferView, 28304, "PrTkMwmR8zOLsgE0PCAKNCMaEzRgqRw0p9cmNEuvMTRQOz00cIdJNCOgVjS4kmQ0VW1zNIifgTT8C4o0kwSTNGmSnDQyv6Y0P5WxNJMfvTTkack0rYDWNDZx5DSmSfM0iIwBNcD3CTUG7xI1dnscNcCmJjU3ezE12gM9NV5MSTU7YVY1uU9kNfwlczWKeYE1huOJNXzZkjWFZJw1Uo6mNTNhsTUl6Lw13C7JNc5B1jVBLuQ1VwLzNY9mATZPzwk29cMSNphNHDbodSY2MkcxNnTMPDZeEUk2ZSJWNs4MZDa43nI2l1OBNhy7iTZyrpI2rzacNoFdpjY1LbE2x7C8NuTzyDYBA9Y2YOvjNh678jaiQAE366YJN/GYEjfJHxw3HkUmNz0TMTcelTw3b9ZIN6LjVTf3yWM3iZdyN68tgTe+kok3dIOSN+YInDe+LKY3R/mwN3l5vDf+uMg3R8TVN5Ko4zf4c/I3wBoBOJN+CTj5bRI4BvIbOGIUJjhW3zA42F08OJKbSDjypFU4M4djOG5QcjjTB4E4a2qJOIJYkjgq25s4CfylOGjFsDg7Qrw4KX7IOKCF1TjZZeM46CzyOOn0ADlGVgk5DkMSOVHEGzm14yU5f6swOaImPDnFYEg5U2ZVOYNEYzloCXI5AeKAOSRCiTmdLZI5e62bOWPLpTmZkbA5DQu8OWZDyDkLR9U5MiPjOe3l8TkdzwA6BS4JOjAYEjqplhs6FbMlOrd3MDp87zs6CiZIOscnVTrmAWM6eMJxOju8gDrpGYk6xgKSOtt/mzrLmqU62F2wOu/TuzqzCMg6iAjVOp/g4joHn/E6XKkAO9AFCTte7RE7D2kbO4SCJTv9QzA7Z7g7O2HrRztN6VQ7Xb9iO5x7cTt/loA7uvGIO/nXkTtHUps7QWqlOycqsDvinLs7Es7HOxfK1DsgnuI7NVjxO6aDADyn3Qg8mMIRPII7GzwBUiU8VBAwPGGBOzzIsEc85apUPOh8YjzUNHE8z3CAPJbJiDw6rZE8wCSbPMU5pTyF9q885WW7PIKTxzy5i9Q8tFviPHkR8Tz7XQA9ibUIPd+XET0CDhs9jSElPbncLz1tSjs9QHZHPZFsVD2FOmI9Iu5wPSpLgD1/oYg9iIKRPUj3mj1YCaU98sKvPfguuz0DWcc9bU3UPVwZ4j3RyvA9WzgAPneNCD4zbRE+kOAaPifxJD4uqS8+hxM7Pso7Rz5NLlQ+N/hhPoSncD6PJYA+c3mIPuJXkT7cyZo++dikPm2Prz4b+Lo+lR7HPjMP1D4X1+E+PYTwPsYSAD9yZQg/k0IRPyuzGj/OwCQ/sXUvP7LcOj9lAUc/HfBTP/u1YT/7YHA/AACAPyhuICYgMykgPT0gMABpbWRjdF9zdGVwM19pdGVyMF9sb29wADAAZ2V0X3dpbmRvdwBmLT50ZW1wX29mZnNldCA9PSBmLT5hbGxvYy5hbGxvY19idWZmZXJfbGVuZ3RoX2luX2J5dGVzAHN0YXJ0X2RlY29kZXIAYy0+c29ydGVkX2VudHJpZXMgPT0gMABjb21wdXRlX2NvZGV3b3JkcwBhdmFpbGFibGVbeV0gPT0gMABrID09IGMtPnNvcnRlZF9lbnRyaWVzAGNvbXB1dGVfc29ydGVkX2h1ZmZtYW4AYy0+c29ydGVkX2NvZGV3b3Jkc1t4XSA9PSBjb2RlAGxlbiAhPSBOT19DT0RFAGluY2x1ZGVfaW5fc29ydABwb3coKGZsb2F0KSByKzEsIGRpbSkgPiBlbnRyaWVzAGxvb2t1cDFfdmFsdWVzAChpbnQpIGZsb29yKHBvdygoZmxvYXQpIHIsIGRpbSkpIDw9IGVudHJpZXM=");
base64DecodeToExistingUint8Array(bufferView, 29720, "AQAAAAAAAAACAAAABA==");
base64DecodeToExistingUint8Array(bufferView, 29750, "BwAAAAAAAwUAAAAAAwcFAAAAAwUDBQAAAwcFAwUAAwcFAwUHYnVmX2MgPT0gMgBjb252ZXJ0X2NoYW5uZWxzX3Nob3J0X2ludGVybGVhdmVkAIj8AAByd2EALSsgICAwWDB4AChudWxsKQ==");
base64DecodeToExistingUint8Array(bufferView, 29872, "EQAKABEREQAAAAAFAAAAAAAACQAAAAALAAAAAAAAAAARAA8KERERAwoHAAETCQsLAAAJBgsAAAsABhEAAAARERE=");
base64DecodeToExistingUint8Array(bufferView, 29953, "CwAAAAAAAAAAEQAKChEREQAKAAACAAkLAAAACQALAAAL");
base64DecodeToExistingUint8Array(bufferView, 30011, "DA==");
base64DecodeToExistingUint8Array(bufferView, 30023, "DAAAAAAMAAAAAAkMAAAAAAAMAAAM");
base64DecodeToExistingUint8Array(bufferView, 30069, "Dg==");
base64DecodeToExistingUint8Array(bufferView, 30081, "DQAAAAQNAAAAAAkOAAAAAAAOAAAO");
base64DecodeToExistingUint8Array(bufferView, 30127, "EA==");
base64DecodeToExistingUint8Array(bufferView, 30139, "DwAAAAAPAAAAAAkQAAAAAAAQAAAQAAASAAAAEhIS");
base64DecodeToExistingUint8Array(bufferView, 30194, "EgAAABISEgAAAAAAAAk=");
base64DecodeToExistingUint8Array(bufferView, 30243, "Cw==");
base64DecodeToExistingUint8Array(bufferView, 30255, "CgAAAAAKAAAAAAkLAAAAAAALAAAL");
base64DecodeToExistingUint8Array(bufferView, 30301, "DA==");
base64DecodeToExistingUint8Array(bufferView, 30313, "DAAAAAAMAAAAAAkMAAAAAAAMAAAMAAAwMTIzNDU2Nzg5QUJDREVGLTBYKzBYIDBYLTB4KzB4IDB4AGluZgBJTkYAbmFuAE5BTgAuAAAAABj9AAByd2E=");
base64DecodeToExistingUint8Array(bufferView, 30436, "BgY=");
base64DecodeToExistingUint8Array(bufferView, 30475, "//////8=");
base64DecodeToExistingUint8Array(bufferView, 30544, "AwAAAAQAAAAEAAAABgAAAIP5ogBETm4A/CkVANFXJwDdNPUAYtvAADyZlQBBkEMAY1H+ALveqwC3YcUAOm4kANJNQgBJBuAACeouAByS0QDrHf4AKbEcAOg+pwD1NYIARLsuAJzphAC0JnAAQX5fANaROQBTgzkAnPQ5AItfhAAo+b0A+B87AN7/lwAPmAUAES/vAApaiwBtH20Az342AAnLJwBGT7cAnmY/AC3qXwC6J3UA5evHAD178QD3OQcAklKKAPtr6gAfsV8ACF2NADADVgB7/EYA8KtrACC8zwA29JoA46kdAF5hkQAIG+YAhZllAKAUXwCNQGgAgNj/ACdzTQAGBjEAylYVAMmocwB74mAAa4zAABnERwDNZ8MACejcAFmDKgCLdsQAphyWAESv3QAZV9EApT4FAAUH/wAzfj8AwjLoAJhP3gC7fTIAJj3DAB5r7wCf+F4ANR86AH/yygDxhx0AfJAhAGokfADVbvoAMC13ABU7QwC1FMYAwxmdAK3EwgAsTUEADABdAIZ9RgDjcS0Am8aaADNiAAC00nwAtKeXADdV1QDXPvYAoxAYAE12/ABknSoAcNerAGN8+AB6sFcAFxXnAMBJVgA71tkAp4Q4ACQjywDWincAWlQjAAAfuQDxChsAGc7fAJ8x/wBmHmoAmVdhAKz7RwB+f9gAImW3ADLoiQDmv2AA78TNAGw2CQBdP9QAFt7XAFg73gDem5IA0iIoACiG6ADiWE0AxsoyAAjjFgDgfcsAF8BQAPMdpwAY4FsALhM0AIMSYgCDSAEA9Y5bAK2wfwAe6fIASEpDABBn0wCq3dgArl9CAGphzgAKKKQA05m0AAam8gBcd38Ao8KDAGE8iACKc3gAr4xaAG/XvQAtpmMA9L/LAI2B7wAmwWcAVcpFAMrZNgAoqNIAwmGNABLJdwAEJhQAEkabAMRZxADIxUQATbKRAAAX8wDUQ60AKUnlAP3VEAAAvvwAHpTMAHDO7gATPvUA7PGAALPnwwDH+CgAkwWUAMFxPgAuCbMAC0XzAIgSnACrIHsALrWfAEeSwgB7Mi8ADFVtAHKnkABr5x8AMcuWAHkWSgBBeeIA9N+JAOiUlwDi5oQAmTGXAIjtawBfXzYAu/0OAEiatABnpGwAcXJCAI1dMgCfFbgAvOUJAI0xJQD3dDkAMAUcAA0MAQBLCGgALO5YAEeqkAB05wIAvdYkAPd9pgBuSHIAnxbvAI6UpgC0kfYA0VNRAM8K8gAgmDMA9Ut+ALJjaADdPl8AQF0DAIWJfwBVUikAN2TAAG3YEAAySDIAW0x1AE5x1ABFVG4ACwnBACr1aQAUZtUAJwedAF0EUAC0O9sA6nbFAIf5FwBJa30AHSe6AJZpKQDGzKwArRRUAJDiagCI2YkALHJQAASkvgB3B5QA8zBwAAD8JwDqcagAZsJJAGTgPQCX3YMAoz+XAEOU/QANhowAMUHeAJI5nQDdcIwAF7fnAAjfOwAVNysAXICgAFqAkwAQEZIAD+jYAGyArwDb/0sAOJAPAFkYdgBipRUAYcu7AMeJuQAQQL0A0vIEAEl1JwDrtvYA2yK7AAoUqgCJJi8AZIN2AAk7MwAOlBoAUTqqAB2jwgCv7a4AXCYSAG3CTQAtepwAwFaXAAM/gwAJ8PYAK0CMAG0xmQA5tAcADCAVANjDWwD1ksQAxq1LAE7KpQCnN80A5qk2AKuSlADdQmgAGWPeAHaM7wBoi1IA/Ns3AK6hqwDfFTEAAK6hAAz72gBkTWYA7QW3ACllMABXVr8AR/86AGr5uQB1vvMAKJPfAKuAMABmjPYABMsVAPoiBgDZ5B0APbOkAFcbjwA2zQkATkLpABO+pAAzI7UA8KoaAE9lqADSwaUACz8PAFt4zQAj+XYAe4sEAIkXcgDGplMAb27iAO/rAACbSlgAxNq3AKpmugB2z88A0QIdALHxLQCMmcEAw613AIZI2gD3XaAAxoD0AKzwLwDd7JoAP1y8ANDebQCQxx8AKtu2AKMlOgAAr5oArVOTALZXBAApLbQAS4B+ANoHpwB2qg4Ae1mhABYSKgDcty0A+uX9AInb/gCJvv0A5HZsAAap/AA+gHAAhW4VAP2H/wAoPgcAYWczACoYhgBNveoAs+evAI9tbgCVZzkAMb9bAITXSAAw3xYAxy1DACVhNQDJcM4AMMu4AL9s/QCkAKIABWzkAFrdoAAhb0cAYhLSALlchABwYUkAa1bgAJlSAQBQVTcAHtW3ADPxxAATbl8AXTDkAIUuqQAdssMAoTI2AAi3pADqsdQAFvchAI9p5AAn/3cADAOAAI1ALQBPzaAAIKWZALOi0wAvXQoAtPlCABHaywB9vtAAm9vBAKsXvQDKooEACGpcAC5VFwAnAFUAfxTwAOEHhgAUC2QAlkGNAIe+3gDa/SoAayW2AHuJNAAF8/4Aub+eAGhqTwBKKqgAT8RaAC34vADXWpgA9MeVAA1NjQAgOqYApFdfABQ/sQCAOJUAzCABAHHdhgDJ3rYAv2D1AE1lEQABB2sAjLCsALLA0ABRVUgAHvsOAJVywwCjBjsAwEA1AAbcewDgRcwATin6ANbKyADo80EAfGTeAJtk2ADZvjEApJfDAHdY1ABp48UA8NoTALo6PABGGEYAVXVfANK99QBuksYArC5dAA5E7QAcPkIAYcSHACn96QDn1vMAInzKAG+RNQAI4MUA/9eNAG5q4gCw/cYAkwjBAHxddABrrbIAzW6dAD5yewDGEWoA98+pAClz3wC1yboAtwBRAOKyDQB0uiQA5X1gAHTYigANFSwAgRgMAH5mlAABKRYAn3p2AP39vgBWRe8A2X42AOzZEwCLurkAxJf8ADGoJwDxbsMAlMU2ANioVgC0qLUAz8wOABKJLQBvVzQALFaJAJnO4wDWILkAa16qAD4qnAARX8wA/QtKAOH0+wCOO20A4oYsAOnUhAD8tKkA7+7RAC41yQAvOWEAOCFEABvZyACB/AoA+0pqAC8c2ABTtIQATpmMAFQizAAqVdwAwMbWAAsZlgAacLgAaZVkACZaYAA/Uu4AfxEPAPS1EQD8y/UANLwtADS87gDoXcwA3V5gAGeOmwCSM+8AyRe4AGFYmwDhV7wAUYPGANg+EADdcUgALRzdAK8YoQAhLEYAWfPXANl6mACeVMAAT4b6AFYG/ADlea4AiSI2ADitIgBnk9wAVeiqAIImOADK55sAUQ2kAJkzsQCp1w4AaQVIAGWy8AB/iKcAiEyXAPnRNgAhkrMAe4JKAJjPIQBAn9wA3EdVAOF0OgBn60IA/p3fAF7UXwB7Z6QAuqx6AFX2ogAriCMAQbpVAFluCAAhKoYAOUeDAInj5gDlntQASftAAP9W6QAcD8oAxVmKAJT6KwDTwcUAD8XPANtargBHxYYAhUNiACGGOwAseZQAEGGHACpMewCALBoAQ78SAIgmkAB4PIkAqMTkAOXbewDEOsIAJvTqAPdnigANkr8AZaMrAD2TsQC9fAsApFHcACfdYwBp4d0AmpQZAKgplQBozigACe20AESfIABOmMoAcIJjAH58IwAPuTIAp/WOABRW5wAh8QgAtZ0qAG9+TQClGVEAtfmrAILf1gCW3WEAFjYCAMQ6nwCDoqEAcu1tADmNegCCuKkAazJcAEYnWwAANO0A0gB3APz0VQABWU0A4HGA");
base64DecodeToExistingUint8Array(bufferView, 33331, "QPsh+T8AAAAALUR0PgAAAICYRvg8AAAAYFHMeDsAAACAgxvwOQAAAEAgJXo4AAAAgCKC4zYAAAAAHfNpNU+7YQVnrN0/GC1EVPsh6T+b9oHSC3PvPxgtRFT7Ifk/4mUvIn8rejwHXBQzJqaBPL3L8HqIB3A8B1wUMyamkTw4Y+0+2g9JP16Yez/aD8k/aTesMWghIjO0DxQzaCGiM9sPST/bD0m/5MsWQOTLFsAAAAAAAAAAgNsPSUDbD0nAAAAAPwAAAL8=");
base64DecodeToExistingUint8Array(bufferView, 33542, "8D8AAAAAAAD4PwAAAAAAAAAABtDPQ+v9TD4=");
base64DecodeToExistingUint8Array(bufferView, 33579, "QAO44j8AAAAAAIYAABoGAAAbBgAAHAYAAB0GAAAeBgAAHwYAACAGAABDAAAARAAAACEGAABGAAAAIgYAAEgAAAAjBgAAAAAAADyGAAAkBgAAJQYAACYGAAAnBgAAKAYAACkGAAAqBgAAKwYAACwGAAAtBgAALgYAAC8GAAAwBgAAMQYAAAgAAAAAAAAAdIYAADgAAAA5AAAA+P////j///90hgAAOgAAADsAAAC8gwAA0IMAAAgAAAAAAAAAvIYAADIGAAAzBgAA+P////j///+8hgAANAYAADUGAADsgwAAAIQAAAQAAAAAAAAABIcAADYGAAA3BgAA/P////z///8EhwAAOAYAADkGAAAchAAAMIQAAAQAAAAAAAAATIcAADoGAAA7BgAA/P////z///9MhwAAPAYAAD0GAABMhAAAYIQAAGlvc3RyZWFtAHVuc3BlY2lmaWVkIGlvc3RyZWFtX2NhdGVnb3J5IGVycm9yAAAAAAAAAACEhwAAPgYAAD8GAABABgAAQQYAAEIGAABDBgAARAYAAAAAAAAwhQAAGQYAAEUGAABGBgAAAAAAAAyFAABHBgAASAYAAGlvc19iYXNlOjpjbGVhcgBOU3QzX18yOGlvc19iYXNlRQAAANTBAAD4hAAATlN0M19fMjhpb3NfYmFzZTdmYWlsdXJlRQAAAPzBAAAUhQAASLwAAAAAAAB4hQAASQYAAEoGAABOU3QzX18yOWJhc2ljX2lvc0ljTlNfMTFjaGFyX3RyYWl0c0ljRUVFRQAAAPzBAABMhQAADIUAAAAAAADAhQAASwYAAEwGAABOU3QzX18yOWJhc2ljX2lvc0l3TlNfMTFjaGFyX3RyYWl0c0l3RUVFRQAAAPzBAACUhQAADIUAAE5TdDNfXzIxNWJhc2ljX3N0cmVhbWJ1ZkljTlNfMTFjaGFyX3RyYWl0c0ljRUVFRQAAAADUwQAAzIUAAE5TdDNfXzIxNWJhc2ljX3N0cmVhbWJ1Zkl3TlNfMTFjaGFyX3RyYWl0c0l3RUVFRQAAAADUwQAACIYAAE5TdDNfXzIxM2Jhc2ljX2lzdHJlYW1JY05TXzExY2hhcl90cmFpdHNJY0VFRUUAAFjCAABEhgAAAAAAAAEAAAB4hQAAA/T//05TdDNfXzIxM2Jhc2ljX2lzdHJlYW1Jd05TXzExY2hhcl90cmFpdHNJd0VFRUUAAFjCAACMhgAAAAAAAAEAAADAhQAAA/T//05TdDNfXzIxM2Jhc2ljX29zdHJlYW1JY05TXzExY2hhcl90cmFpdHNJY0VFRUUAAFjCAADUhgAAAAAAAAEAAAB4hQAAA/T//05TdDNfXzIxM2Jhc2ljX29zdHJlYW1Jd05TXzExY2hhcl90cmFpdHNJd0VFRUUAAFjCAAAchwAAAAAAAAEAAADAhQAAA/T//05TdDNfXzIxOV9faW9zdHJlYW1fY2F0ZWdvcnlFAAAA/MEAAGSHAACQvAAAmP4AAAAAAADshwAAGgYAAFMGAABUBgAAHQYAAB4GAAAfBgAAIAYAAEMAAABEAAAAVQYAAFYGAABXBgAASAAAACMGAABOU3QzX18yMTBfX3N0ZGluYnVmSWNFRQD8wQAA1IcAAACGAAB1bnN1cHBvcnRlZCBsb2NhbGUgZm9yIHN0YW5kYXJkIGlucHV0AAAAAAAAAHiIAAAkBgAAWAYAAFkGAAAnBgAAKAYAACkGAAAqBgAAKwYAACwGAABaBgAAWwYAAFwGAAAwBgAAMQYAAE5TdDNfXzIxMF9fc3RkaW5idWZJd0VFAPzBAABgiAAAPIYAAAAAAADgiAAAGgYAAF0GAABeBgAAHQYAAB4GAAAfBgAAXwYAAEMAAABEAAAAIQYAAEYAAAAiBgAAYAYAAGEGAABOU3QzX18yMTFfX3N0ZG91dGJ1ZkljRUUAAAAA/MEAAMSIAAAAhgAAAAAAAEiJAAAkBgAAYgYAAGMGAAAnBgAAKAYAACkGAABkBgAAKwYAACwGAAAtBgAALgYAAC8GAABlBgAAZgYAAE5TdDNfXzIxMV9fc3Rkb3V0YnVmSXdFRQAAAAD8wQAALIkAADyG");
base64DecodeToExistingUint8Array(bufferView, 35168, "/////////////////////////////////////////////////////////////////wABAgMEBQYHCAn/////////CgsMDQ4PEBESExQVFhcYGRobHB0eHyAhIiP///////8KCwwNDg8QERITFBUWFxgZGhscHR4fICEiI/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////8AAQIEBwMGBQAAAAAAAAACAADAAwAAwAQAAMAFAADABgAAwAcAAMAIAADACQAAwAoAAMALAADADAAAwA0AAMAOAADADwAAwBAAAMARAADAEgAAwBMAAMAUAADAFQAAwBYAAMAXAADAGAAAwBkAAMAaAADAGwAAwBwAAMAdAADAHgAAwB8AAMAAAACzAQAAwwIAAMMDAADDBAAAwwUAAMMGAADDBwAAwwgAAMMJAADDCgAAwwsAAMMMAADDDQAA0w4AAMMPAADDAAAMuwEADMMCAAzDAwAMwwQADNNpbmZpbml0eQBuYW4AAAAAAAAAANF0ngBXnb0qgHBSD///PicKAAAAZAAAAOgDAAAQJwAAoIYBAEBCDwCAlpgAAOH1BRgAAAA1AAAAcQAAAGv////O+///kr///wAAAAAAAAAA3hIElQAAAAD///////////////+giwAAFAAAAEMuVVRGLTg=");
base64DecodeToExistingUint8Array(bufferView, 35816, "tIs=");
base64DecodeToExistingUint8Array(bufferView, 35840, "TENfQUxM");
base64DecodeToExistingUint8Array(bufferView, 35856, "TENfQ1RZUEUAAAAATENfTlVNRVJJQwAATENfVElNRQAAAAAATENfQ09MTEFURQAATENfTU9ORVRBUlkATENfTUVTU0FHRVMATEFORwBDLlVURi04AFBPU0lYAE1VU0xfTE9DUEFUSAAAAAAAgI0=");
base64DecodeToExistingUint8Array(bufferView, 36224, "AgACAAIAAgACAAIAAgACAAIAAyACIAIgAiACIAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAFgBMAEwATABMAEwATABMAEwATABMAEwATABMAEwATACNgI2AjYCNgI2AjYCNgI2AjYCNgEwATABMAEwATABMAEwAjVCNUI1QjVCNUI1QjFCMUIxQjFCMUIxQjFCMUIxQjFCMUIxQjFCMUIxQjFCMUIxQjFCMUEwATABMAEwATABMAI1gjWCNYI1gjWCNYIxgjGCMYIxgjGCMYIxgjGCMYIxgjGCMYIxgjGCMYIxgjGCMYIxgjGBMAEwATABMAC");
base64DecodeToExistingUint8Array(bufferView, 36736, "kJE=");
base64DecodeToExistingUint8Array(bufferView, 37268, "AQAAAAIAAAADAAAABAAAAAUAAAAGAAAABwAAAAgAAAAJAAAACgAAAAsAAAAMAAAADQAAAA4AAAAPAAAAEAAAABEAAAASAAAAEwAAABQAAAAVAAAAFgAAABcAAAAYAAAAGQAAABoAAAAbAAAAHAAAAB0AAAAeAAAAHwAAACAAAAAhAAAAIgAAACMAAAAkAAAAJQAAACYAAAAnAAAAKAAAACkAAAAqAAAAKwAAACwAAAAtAAAALgAAAC8AAAAwAAAAMQAAADIAAAAzAAAANAAAADUAAAA2AAAANwAAADgAAAA5AAAAOgAAADsAAAA8AAAAPQAAAD4AAAA/AAAAQAAAAEEAAABCAAAAQwAAAEQAAABFAAAARgAAAEcAAABIAAAASQAAAEoAAABLAAAATAAAAE0AAABOAAAATwAAAFAAAABRAAAAUgAAAFMAAABUAAAAVQAAAFYAAABXAAAAWAAAAFkAAABaAAAAWwAAAFwAAABdAAAAXgAAAF8AAABgAAAAQQAAAEIAAABDAAAARAAAAEUAAABGAAAARwAAAEgAAABJAAAASgAAAEsAAABMAAAATQAAAE4AAABPAAAAUAAAAFEAAABSAAAAUwAAAFQAAABVAAAAVgAAAFcAAABYAAAAWQAAAFoAAAB7AAAAfAAAAH0AAAB+AAAAfw==");
base64DecodeToExistingUint8Array(bufferView, 38288, "oJc=");
base64DecodeToExistingUint8Array(bufferView, 38820, "AQAAAAIAAAADAAAABAAAAAUAAAAGAAAABwAAAAgAAAAJAAAACgAAAAsAAAAMAAAADQAAAA4AAAAPAAAAEAAAABEAAAASAAAAEwAAABQAAAAVAAAAFgAAABcAAAAYAAAAGQAAABoAAAAbAAAAHAAAAB0AAAAeAAAAHwAAACAAAAAhAAAAIgAAACMAAAAkAAAAJQAAACYAAAAnAAAAKAAAACkAAAAqAAAAKwAAACwAAAAtAAAALgAAAC8AAAAwAAAAMQAAADIAAAAzAAAANAAAADUAAAA2AAAANwAAADgAAAA5AAAAOgAAADsAAAA8AAAAPQAAAD4AAAA/AAAAQAAAAGEAAABiAAAAYwAAAGQAAABlAAAAZgAAAGcAAABoAAAAaQAAAGoAAABrAAAAbAAAAG0AAABuAAAAbwAAAHAAAABxAAAAcgAAAHMAAAB0AAAAdQAAAHYAAAB3AAAAeAAAAHkAAAB6AAAAWwAAAFwAAABdAAAAXgAAAF8AAABgAAAAYQAAAGIAAABjAAAAZAAAAGUAAABmAAAAZwAAAGgAAABpAAAAagAAAGsAAABsAAAAbQAAAG4AAABvAAAAcAAAAHEAAAByAAAAcwAAAHQAAAB1AAAAdgAAAHcAAAB4AAAAeQAAAHoAAAB7AAAAfAAAAH0AAAB+AAAAfw==");
base64DecodeToExistingUint8Array(bufferView, 39840, "MDEyMzQ1Njc4OWFiY2RlZkFCQ0RFRnhYKy1wUGlJbk4AJXAAbABsbAAATAAlAAAAAAAlcAAAAAAlSTolTTolUyAlcCVIOiVNAAAAAAAAAAAlAAAAbQAAAC8AAAAlAAAAZAAAAC8AAAAlAAAAeQAAACUAAABZAAAALQAAACUAAABtAAAALQAAACUAAABkAAAAJQAAAEkAAAA6AAAAJQAAAE0AAAA6AAAAJQAAAFMAAAAgAAAAJQAAAHAAAAAAAAAAJQAAAEgAAAA6AAAAJQAAAE0=");
base64DecodeToExistingUint8Array(bufferView, 40064, "JQAAAEgAAAA6AAAAJQAAAE0AAAA6AAAAJQAAAFMAAAAlTGYAbW9uZXlfZ2V0IGVycm9yADAxMjM0NTY3ODkAJS4wTGYAQwAAAAAAAFCiAAAvBwAAMAcAADEHAAAAAAAAsKIAADIHAAAzBwAAMQcAADQHAAA1BwAANgcAADcHAAA4BwAAOQcAADoHAAA7BwAAAAAAABiiAAA8BwAAPQcAADEHAAA+BwAAPwcAAEAHAABBBwAAQgcAAEMHAABEBwAAAAAAAOiiAABFBwAARgcAADEHAABHBwAASAcAAEkHAABKBwAASwcAAAAAAAAMowAATAcAAE0HAAAxBwAATgcAAE8HAABQBwAAUQcAAFIHAAB0cnVlAAAAAHQAAAByAAAAdQAAAGUAAAAAAAAAZmFsc2UAAABmAAAAYQAAAGwAAABzAAAAZQAAAAAAAAAlbS8lZC8leQAAAAAlAAAAbQAAAC8AAAAlAAAAZAAAAC8AAAAlAAAAeQAAAAAAAAAlSDolTTolUwAAAAAlAAAASAAAADoAAAAlAAAATQAAADoAAAAlAAAAUwAAAAAAAAAlYSAlYiAlZCAlSDolTTolUyAlWQAAAAAlAAAAYQAAACAAAAAlAAAAYgAAACAAAAAlAAAAZAAAACAAAAAlAAAASAAAADoAAAAlAAAATQAAADoAAAAlAAAAUwAAACAAAAAlAAAAWQAAAAAAAAAlSTolTTolUyAlcAAlAAAASQAAADoAAAAlAAAATQAAADoAAAAlAAAAUwAAACAAAAAlAAAAcAAAAAAAAABsb2NhbGUgbm90IHN1cHBvcnRlZAAAAAAAAAAAGJ8AAFMHAABUBwAAMQcAAE5TdDNfXzI2bG9jYWxlNWZhY2V0RQAAAPzBAAAAnwAARLQAAAAAAACYnwAAUwcAAFUHAAAxBwAAVgcAAFcHAABYBwAAWQcAAFoHAABbBwAAXAcAAF0HAABeBwAAXwcAAGAHAABhBwAATlN0M19fMjVjdHlwZUl3RUUATlN0M19fMjEwY3R5cGVfYmFzZUUAANTBAAB6nwAAWMIAAGifAAAAAAAAAgAAABifAAACAAAAkJ8AAAIAAAAAAAAALKAAAFMHAABiBwAAMQcAAGMHAABkBwAAZQcAAGYHAABnBwAAaAcAAGkHAABOU3QzX18yN2NvZGVjdnRJY2MxMV9fbWJzdGF0ZV90RUUATlN0M19fMjEyY29kZWN2dF9iYXNlRQAAAADUwQAACqAAAFjCAADonwAAAAAAAAIAAAAYnwAAAgAAACSgAAACAAAAAAAAAKCgAABTBwAAagcAADEHAABrBwAAbAcAAG0HAABuBwAAbwcAAHAHAABxBwAATlN0M19fMjdjb2RlY3Z0SURzYzExX19tYnN0YXRlX3RFRQAAWMIAAHygAAAAAAAAAgAAABifAAACAAAAJKAAAAIAAAAAAAAAFKEAAFMHAAByBwAAMQcAAHMHAAB0BwAAdQcAAHYHAAB3BwAAeAcAAHkHAABOU3QzX18yN2NvZGVjdnRJRGljMTFfX21ic3RhdGVfdEVFAABYwgAA8KAAAAAAAAACAAAAGJ8AAAIAAAAkoAAAAgAAAAAAAACIoQAAUwcAAHoHAAAxBwAAcwcAAHQHAAB1BwAAdgcAAHcHAAB4BwAAeQcAAE5TdDNfXzIxNl9fbmFycm93X3RvX3V0ZjhJTG0zMkVFRQAAAPzBAABkoQAAFKEAAAAAAADooQAAUwcAAHsHAAAxBwAAcwcAAHQHAAB1BwAAdgcAAHcHAAB4BwAAeQcAAE5TdDNfXzIxN19fd2lkZW5fZnJvbV91dGY4SUxtMzJFRUUAAPzBAADEoQAAFKEAAE5TdDNfXzI3Y29kZWN2dEl3YzExX19tYnN0YXRlX3RFRQAAAFjCAAD0oQAAAAAAAAIAAAAYnwAAAgAAACSgAAACAAAATlN0M19fMjZsb2NhbGU1X19pbXBFAAAA/MEAADiiAAAYnwAATlN0M19fMjdjb2xsYXRlSWNFRQD8wQAAXKIAABifAABOU3QzX18yN2NvbGxhdGVJd0VFAPzBAAB8ogAAGJ8AAE5TdDNfXzI1Y3R5cGVJY0VFAAAAWMIAAJyiAAAAAAAAAgAAABifAAACAAAAkJ8AAAIAAABOU3QzX18yOG51bXB1bmN0SWNFRQAAAAD8wQAA0KIAABifAABOU3QzX18yOG51bXB1bmN0SXdFRQAAAAD8wQAA9KIAABifAAAAAAAAcKIAAHwHAAB9BwAAMQcAAH4HAAB/BwAAgAcAAAAAAACQogAAgQcAAIIHAAAxBwAAgwcAAIQHAACFBwAAAAAAACykAABTBwAAhgcAADEHAACHBwAAiAcAAIkHAACKBwAAiwcAAIwHAACNBwAAjgcAAI8HAACQBwAAkQcAAE5TdDNfXzI3bnVtX2dldEljTlNfMTlpc3RyZWFtYnVmX2l0ZXJhdG9ySWNOU18xMWNoYXJfdHJhaXRzSWNFRUVFRUUATlN0M19fMjlfX251bV9nZXRJY0VFAE5TdDNfXzIxNF9fbnVtX2dldF9iYXNlRQAA1MEAAPKjAABYwgAA3KMAAAAAAAABAAAADKQAAAAAAABYwgAAmKMAAAAAAAACAAAAGJ8AAAIAAAAUpA==");
base64DecodeToExistingUint8Array(bufferView, 42065, "pQAAUwcAAJIHAAAxBwAAkwcAAJQHAACVBwAAlgcAAJcHAACYBwAAmQcAAJoHAACbBwAAnAcAAJ0HAABOU3QzX18yN251bV9nZXRJd05TXzE5aXN0cmVhbWJ1Zl9pdGVyYXRvckl3TlNfMTFjaGFyX3RyYWl0c0l3RUVFRUVFAE5TdDNfXzI5X19udW1fZ2V0SXdFRQAAAFjCAADQpAAAAAAAAAEAAAAMpAAAAAAAAFjCAACMpAAAAAAAAAIAAAAYnwAAAgAAAOik");
base64DecodeToExistingUint8Array(bufferView, 42276, "6KUAAFMHAACeBwAAMQcAAJ8HAACgBwAAoQcAAKIHAACjBwAApAcAAKUHAACmBwAATlN0M19fMjdudW1fcHV0SWNOU18xOW9zdHJlYW1idWZfaXRlcmF0b3JJY05TXzExY2hhcl90cmFpdHNJY0VFRUVFRQBOU3QzX18yOV9fbnVtX3B1dEljRUUATlN0M19fMjE0X19udW1fcHV0X2Jhc2VFAADUwQAArqUAAFjCAACYpQAAAAAAAAEAAADIpQAAAAAAAFjCAABUpQAAAAAAAAIAAAAYnwAAAgAAANCl");
base64DecodeToExistingUint8Array(bufferView, 42508, "sKYAAFMHAACnBwAAMQcAAKgHAACpBwAAqgcAAKsHAACsBwAArQcAAK4HAACvBwAATlN0M19fMjdudW1fcHV0SXdOU18xOW9zdHJlYW1idWZfaXRlcmF0b3JJd05TXzExY2hhcl90cmFpdHNJd0VFRUVFRQBOU3QzX18yOV9fbnVtX3B1dEl3RUUAAABYwgAAgKYAAAAAAAABAAAAyKUAAAAAAABYwgAAPKYAAAAAAAACAAAAGJ8AAAIAAACYpg==");
base64DecodeToExistingUint8Array(bufferView, 42708, "sKcAALAHAACxBwAAMQcAALIHAACzBwAAtAcAALUHAAC2BwAAtwcAALgHAAD4////sKcAALkHAAC6BwAAuwcAALwHAAC9BwAAvgcAAL8HAABOU3QzX18yOHRpbWVfZ2V0SWNOU18xOWlzdHJlYW1idWZfaXRlcmF0b3JJY05TXzExY2hhcl90cmFpdHNJY0VFRUVFRQBOU3QzX18yOXRpbWVfYmFzZUUA1MEAAGmnAABOU3QzX18yMjBfX3RpbWVfZ2V0X2Nfc3RvcmFnZUljRUUAAADUwQAAhKcAAFjCAAAkpwAAAAAAAAMAAAAYnwAAAgAAAHynAAACAAAAqKcAAAAIAAAAAAAAnKgAAMAHAADBBwAAMQcAAMIHAADDBwAAxAcAAMUHAADGBwAAxwcAAMgHAAD4////nKgAAMkHAADKBwAAywcAAMwHAADNBwAAzgcAAM8HAABOU3QzX18yOHRpbWVfZ2V0SXdOU18xOWlzdHJlYW1idWZfaXRlcmF0b3JJd05TXzExY2hhcl90cmFpdHNJd0VFRUVFRQBOU3QzX18yMjBfX3RpbWVfZ2V0X2Nfc3RvcmFnZUl3RUUAANTBAABxqAAAWMIAACyoAAAAAAAAAwAAABifAAACAAAAfKcAAAIAAACUqAAAAAgAAAAAAABAqQAA0AcAANEHAAAxBwAA0gcAAE5TdDNfXzI4dGltZV9wdXRJY05TXzE5b3N0cmVhbWJ1Zl9pdGVyYXRvckljTlNfMTFjaGFyX3RyYWl0c0ljRUVFRUVFAE5TdDNfXzIxMF9fdGltZV9wdXRFAAAA1MEAACGpAABYwgAA3KgAAAAAAAACAAAAGJ8AAAIAAAA4qQAAAAgAAAAAAADAqQAA0wcAANQHAAAxBwAA1QcAAE5TdDNfXzI4dGltZV9wdXRJd05TXzE5b3N0cmVhbWJ1Zl9pdGVyYXRvckl3TlNfMTFjaGFyX3RyYWl0c0l3RUVFRUVFAAAAAFjCAAB4qQAAAAAAAAIAAAAYnwAAAgAAADipAAAACAAAAAAAAFSqAABTBwAA1gcAADEHAADXBwAA2AcAANkHAADaBwAA2wcAANwHAADdBwAA3gcAAN8HAABOU3QzX18yMTBtb25leXB1bmN0SWNMYjBFRUUATlN0M19fMjEwbW9uZXlfYmFzZUUAAAAA1MEAADSqAABYwgAAGKoAAAAAAAACAAAAGJ8AAAIAAABMqgAAAgAAAAAAAADIqgAAUwcAAOAHAAAxBwAA4QcAAOIHAADjBwAA5AcAAOUHAADmBwAA5wcAAOgHAADpBwAATlN0M19fMjEwbW9uZXlwdW5jdEljTGIxRUVFAFjCAACsqgAAAAAAAAIAAAAYnwAAAgAAAEyqAAACAAAAAAAAADyrAABTBwAA6gcAADEHAADrBwAA7AcAAO0HAADuBwAA7wcAAPAHAADxBwAA8gcAAPMHAABOU3QzX18yMTBtb25leXB1bmN0SXdMYjBFRUUAWMIAACCrAAAAAAAAAgAAABifAAACAAAATKoAAAIAAAAAAAAAsKsAAFMHAAD0BwAAMQcAAPUHAAD2BwAA9wcAAPgHAAD5BwAA+gcAAPsHAAD8BwAA/QcAAE5TdDNfXzIxMG1vbmV5cHVuY3RJd0xiMUVFRQBYwgAAlKsAAAAAAAACAAAAGJ8AAAIAAABMqgAAAgAAAAAAAABUrAAAUwcAAP4HAAAxBwAA/wcAAAAIAABOU3QzX18yOW1vbmV5X2dldEljTlNfMTlpc3RyZWFtYnVmX2l0ZXJhdG9ySWNOU18xMWNoYXJfdHJhaXRzSWNFRUVFRUUATlN0M19fMjExX19tb25leV9nZXRJY0VFAADUwQAAMqwAAFjCAADsqwAAAAAAAAIAAAAYnwAAAgAAAEys");
base64DecodeToExistingUint8Array(bufferView, 44152, "+KwAAFMHAAABCAAAMQcAAAIIAAADCAAATlN0M19fMjltb25leV9nZXRJd05TXzE5aXN0cmVhbWJ1Zl9pdGVyYXRvckl3TlNfMTFjaGFyX3RyYWl0c0l3RUVFRUVFAE5TdDNfXzIxMV9fbW9uZXlfZ2V0SXdFRQAA1MEAANasAABYwgAAkKwAAAAAAAACAAAAGJ8AAAIAAADwrA==");
base64DecodeToExistingUint8Array(bufferView, 44316, "nK0AAFMHAAAECAAAMQcAAAUIAAAGCAAATlN0M19fMjltb25leV9wdXRJY05TXzE5b3N0cmVhbWJ1Zl9pdGVyYXRvckljTlNfMTFjaGFyX3RyYWl0c0ljRUVFRUVFAE5TdDNfXzIxMV9fbW9uZXlfcHV0SWNFRQAA1MEAAHqtAABYwgAANK0AAAAAAAACAAAAGJ8AAAIAAACUrQ==");
base64DecodeToExistingUint8Array(bufferView, 44480, "QK4AAFMHAAAHCAAAMQcAAAgIAAAJCAAATlN0M19fMjltb25leV9wdXRJd05TXzE5b3N0cmVhbWJ1Zl9pdGVyYXRvckl3TlNfMTFjaGFyX3RyYWl0c0l3RUVFRUVFAE5TdDNfXzIxMV9fbW9uZXlfcHV0SXdFRQAA1MEAAB6uAABYwgAA2K0AAAAAAAACAAAAGJ8AAAIAAAA4rg==");
base64DecodeToExistingUint8Array(bufferView, 44644, "uK4AAFMHAAAKCAAAMQcAAAsIAAAMCAAADQgAAE5TdDNfXzI4bWVzc2FnZXNJY0VFAE5TdDNfXzIxM21lc3NhZ2VzX2Jhc2VFAAAAANTBAACVrgAAWMIAAICuAAAAAAAAAgAAABifAAACAAAAsK4AAAIAAAAAAAAAEK8AAFMHAAAOCAAAMQcAAA8IAAAQCAAAEQgAAE5TdDNfXzI4bWVzc2FnZXNJd0VFAAAAAFjCAAD4rgAAAAAAAAIAAAAYnwAAAgAAALCuAAACAAAAU3VuZGF5AE1vbmRheQBUdWVzZGF5AFdlZG5lc2RheQBUaHVyc2RheQBGcmlkYXkAU2F0dXJkYXkAU3VuAE1vbgBUdWUAV2VkAFRodQBGcmkAU2F0AAAAAFMAAAB1AAAAbgAAAGQAAABhAAAAeQAAAAAAAABNAAAAbwAAAG4AAABkAAAAYQAAAHkAAAAAAAAAVAAAAHUAAABlAAAAcwAAAGQAAABhAAAAeQAAAAAAAABXAAAAZQAAAGQAAABuAAAAZQAAAHMAAABkAAAAYQAAAHkAAAAAAAAAVAAAAGgAAAB1AAAAcgAAAHMAAABkAAAAYQAAAHkAAAAAAAAARgAAAHIAAABpAAAAZAAAAGEAAAB5AAAAAAAAAFMAAABhAAAAdAAAAHUAAAByAAAAZAAAAGEAAAB5AAAAAAAAAFMAAAB1AAAAbgAAAAAAAABNAAAAbwAAAG4AAAAAAAAAVAAAAHUAAABlAAAAAAAAAFcAAABlAAAAZAAAAAAAAABUAAAAaAAAAHUAAAAAAAAARgAAAHIAAABpAAAAAAAAAFMAAABhAAAAdAAAAAAAAABKYW51YXJ5AEZlYnJ1YXJ5AE1hcmNoAEFwcmlsAE1heQBKdW5lAEp1bHkAQXVndXN0AFNlcHRlbWJlcgBPY3RvYmVyAE5vdmVtYmVyAERlY2VtYmVyAEphbgBGZWIATWFyAEFwcgBKdW4ASnVsAEF1ZwBTZXAAT2N0AE5vdgBEZWMAAABKAAAAYQAAAG4AAAB1AAAAYQAAAHIAAAB5AAAAAAAAAEYAAABlAAAAYgAAAHIAAAB1AAAAYQAAAHIAAAB5AAAAAAAAAE0AAABhAAAAcgAAAGMAAABoAAAAAAAAAEEAAABwAAAAcgAAAGkAAABsAAAAAAAAAE0AAABhAAAAeQAAAAAAAABKAAAAdQAAAG4AAABlAAAAAAAAAEoAAAB1AAAAbAAAAHkAAAAAAAAAQQAAAHUAAABnAAAAdQAAAHMAAAB0AAAAAAAAAFMAAABlAAAAcAAAAHQAAABlAAAAbQAAAGIAAABlAAAAcgAAAAAAAABPAAAAYwAAAHQAAABvAAAAYgAAAGUAAAByAAAAAAAAAE4AAABvAAAAdgAAAGUAAABtAAAAYgAAAGUAAAByAAAAAAAAAEQAAABlAAAAYwAAAGUAAABtAAAAYgAAAGUAAAByAAAAAAAAAEoAAABhAAAAbgAAAAAAAABGAAAAZQAAAGIAAAAAAAAATQAAAGEAAAByAAAAAAAAAEEAAABwAAAAcgAAAAAAAABKAAAAdQAAAG4AAAAAAAAASgAAAHUAAABsAAAAAAAAAEEAAAB1AAAAZwAAAAAAAABTAAAAZQAAAHAAAAAAAAAATwAAAGMAAAB0AAAAAAAAAE4AAABvAAAAdgAAAAAAAABEAAAAZQAAAGMAAAAAAAAAQU0AUE0AAABBAAAATQAAAAAAAABQAAAATQAAAAAAAABhbGxvY2F0b3I8VD46OmFsbG9jYXRlKHNpemVfdCBuKSAnbicgZXhjZWVkcyBtYXhpbXVtIHN1cHBvcnRlZCBzaXplAAAAAACopwAAuQcAALoHAAC7BwAAvAcAAL0HAAC+BwAAvwcAAAAAAACUqAAAyQcAAMoHAADLBwAAzAcAAM0HAADOBwAAzwcAAAAAAABEtAAA1QQAABIIAAC0BQAATlN0M19fMjE0X19zaGFyZWRfY291bnRFAAAAANTBAAAotAAAAAAAAIi0AADVBAAAEwgAALQFAADYBAAAtAUAAE5TdDNfXzIxOV9fc2hhcmVkX3dlYWtfY291bnRFAAAAWMIAAGi0AAAAAAAAAQAAAES0AAAAAAAAGRJEOwI/LEcUPTMwChsGRktFNw9JDo4XA0AdPGkrNh9KLRwBICUpIQgMFRYiLhA4Pgs0MRhkdHV2L0EJfzkRI0MyQomKiwUEJignDSoeNYwHGkiTE5SV");
base64DecodeToExistingUint8Array(bufferView, 46336, "SWxsZWdhbCBieXRlIHNlcXVlbmNlAERvbWFpbiBlcnJvcgBSZXN1bHQgbm90IHJlcHJlc2VudGFibGUATm90IGEgdHR5AFBlcm1pc3Npb24gZGVuaWVkAE9wZXJhdGlvbiBub3QgcGVybWl0dGVkAE5vIHN1Y2ggZmlsZSBvciBkaXJlY3RvcnkATm8gc3VjaCBwcm9jZXNzAEZpbGUgZXhpc3RzAFZhbHVlIHRvbyBsYXJnZSBmb3IgZGF0YSB0eXBlAE5vIHNwYWNlIGxlZnQgb24gZGV2aWNlAE91dCBvZiBtZW1vcnkAUmVzb3VyY2UgYnVzeQBJbnRlcnJ1cHRlZCBzeXN0ZW0gY2FsbABSZXNvdXJjZSB0ZW1wb3JhcmlseSB1bmF2YWlsYWJsZQBJbnZhbGlkIHNlZWsAQ3Jvc3MtZGV2aWNlIGxpbmsAUmVhZC1vbmx5IGZpbGUgc3lzdGVtAERpcmVjdG9yeSBub3QgZW1wdHkAQ29ubmVjdGlvbiByZXNldCBieSBwZWVyAE9wZXJhdGlvbiB0aW1lZCBvdXQAQ29ubmVjdGlvbiByZWZ1c2VkAEhvc3QgaXMgZG93bgBIb3N0IGlzIHVucmVhY2hhYmxlAEFkZHJlc3MgaW4gdXNlAEJyb2tlbiBwaXBlAEkvTyBlcnJvcgBObyBzdWNoIGRldmljZSBvciBhZGRyZXNzAEJsb2NrIGRldmljZSByZXF1aXJlZABObyBzdWNoIGRldmljZQBOb3QgYSBkaXJlY3RvcnkASXMgYSBkaXJlY3RvcnkAVGV4dCBmaWxlIGJ1c3kARXhlYyBmb3JtYXQgZXJyb3IASW52YWxpZCBhcmd1bWVudABBcmd1bWVudCBsaXN0IHRvbyBsb25nAFN5bWJvbGljIGxpbmsgbG9vcABGaWxlbmFtZSB0b28gbG9uZwBUb28gbWFueSBvcGVuIGZpbGVzIGluIHN5c3RlbQBObyBmaWxlIGRlc2NyaXB0b3JzIGF2YWlsYWJsZQBCYWQgZmlsZSBkZXNjcmlwdG9yAE5vIGNoaWxkIHByb2Nlc3MAQmFkIGFkZHJlc3MARmlsZSB0b28gbGFyZ2UAVG9vIG1hbnkgbGlua3MATm8gbG9ja3MgYXZhaWxhYmxlAFJlc291cmNlIGRlYWRsb2NrIHdvdWxkIG9jY3VyAFN0YXRlIG5vdCByZWNvdmVyYWJsZQBQcmV2aW91cyBvd25lciBkaWVkAE9wZXJhdGlvbiBjYW5jZWxlZABGdW5jdGlvbiBub3QgaW1wbGVtZW50ZWQATm8gbWVzc2FnZSBvZiBkZXNpcmVkIHR5cGUASWRlbnRpZmllciByZW1vdmVkAERldmljZSBub3QgYSBzdHJlYW0ATm8gZGF0YSBhdmFpbGFibGUARGV2aWNlIHRpbWVvdXQAT3V0IG9mIHN0cmVhbXMgcmVzb3VyY2VzAExpbmsgaGFzIGJlZW4gc2V2ZXJlZABQcm90b2NvbCBlcnJvcgBCYWQgbWVzc2FnZQBGaWxlIGRlc2NyaXB0b3IgaW4gYmFkIHN0YXRlAE5vdCBhIHNvY2tldABEZXN0aW5hdGlvbiBhZGRyZXNzIHJlcXVpcmVkAE1lc3NhZ2UgdG9vIGxhcmdlAFByb3RvY29sIHdyb25nIHR5cGUgZm9yIHNvY2tldABQcm90b2NvbCBub3QgYXZhaWxhYmxlAFByb3RvY29sIG5vdCBzdXBwb3J0ZWQAU29ja2V0IHR5cGUgbm90IHN1cHBvcnRlZABOb3Qgc3VwcG9ydGVkAFByb3RvY29sIGZhbWlseSBub3Qgc3VwcG9ydGVkAEFkZHJlc3MgZmFtaWx5IG5vdCBzdXBwb3J0ZWQgYnkgcHJvdG9jb2wAQWRkcmVzcyBub3QgYXZhaWxhYmxlAE5ldHdvcmsgaXMgZG93bgBOZXR3b3JrIHVucmVhY2hhYmxlAENvbm5lY3Rpb24gcmVzZXQgYnkgbmV0d29yawBDb25uZWN0aW9uIGFib3J0ZWQATm8gYnVmZmVyIHNwYWNlIGF2YWlsYWJsZQBTb2NrZXQgaXMgY29ubmVjdGVkAFNvY2tldCBub3QgY29ubmVjdGVkAENhbm5vdCBzZW5kIGFmdGVyIHNvY2tldCBzaHV0ZG93bgBPcGVyYXRpb24gYWxyZWFkeSBpbiBwcm9ncmVzcwBPcGVyYXRpb24gaW4gcHJvZ3Jlc3MAU3RhbGUgZmlsZSBoYW5kbGUAUmVtb3RlIEkvTyBlcnJvcgBRdW90YSBleGNlZWRlZABObyBtZWRpdW0gZm91bmQAV3JvbmcgbWVkaXVtIHR5cGUATm8gZXJyb3IgaW5mb3JtYXRpb24AAGJhc2ljX3N0cmluZwA6IAAAAAAASLwAAB4IAAAfCAAARgYAAABOU3QzX18yMTJzeXN0ZW1fZXJyb3JFAPzBAAAxvAAA/L4AAE5TdDNfXzIxNGVycm9yX2NhdGVnb3J5RQAAAADUwQAAVLwAAE5TdDNfXzIxMl9fZG9fbWVzc2FnZUUAAPzBAAB4vAAAcLwAAFVua25vd24gZXJyb3IgJWQAdmVjdG9yAF9fY3hhX2d1YXJkX2FjcXVpcmUgZGV0ZWN0ZWQgcmVjdXJzaXZlIGluaXRpYWxpemF0aW9uAHRlcm1pbmF0aW5nIHdpdGggJXMgZXhjZXB0aW9uIG9mIHR5cGUgJXM6ICVzAHRlcm1pbmF0aW5nIHdpdGggJXMgZXhjZXB0aW9uIG9mIHR5cGUgJXMAdGVybWluYXRpbmcgd2l0aCAlcyBmb3JlaWduIGV4Y2VwdGlvbgB0ZXJtaW5hdGluZwB1bmNhdWdodAB0ZXJtaW5hdGVfaGFuZGxlciB1bmV4cGVjdGVkbHkgcmV0dXJuZWQAdGVybWluYXRlX2hhbmRsZXIgdW5leHBlY3RlZGx5IHRocmV3IGFuIGV4Y2VwdGlvbgBQdXJlIHZpcnR1YWwgZnVuY3Rpb24gY2FsbGVkIQBzdGQ6OmV4Y2VwdGlvbgAAAAAAAABkvgAAFwgAACMIAAAkCAAAc3RkOjpiYWRfYWxsb2MAAAAAAABMvgAAFwgAACUIAAAmCAAAU3Q5ZXhjZXB0aW9uAAAAANTBAAA8vgAAU3Q5YmFkX2FsbG9jAAAAAPzBAABUvgAATL4AAAAAAACovgAALwAAACcIAAAoCAAAAAAAAPy+AACsBgAAKQgAAEYGAABTdDExbG9naWNfZXJyb3IA/MEAAJi+AABMvgAAAAAAANy+AAAvAAAAKggAACgIAABTdDEybGVuZ3RoX2Vycm9yAAAAAPzBAADIvgAAqL4AAFN0MTNydW50aW1lX2Vycm9yAAAA/MEAAOi+AABMvgAAAAAAAEy/AAArAAAAKwgAACwIAABzdGQ6OmJhZF9jYXN0AFN0OXR5cGVfaW5mbwAA1MEAACq/AABTdDhiYWRfY2FzdAD8wQAAQL8AAEy+AABOMTBfX2N4eGFiaXYxMTZfX3NoaW1fdHlwZV9pbmZvRQAAAAD8wQAAWL8AADi/AABOMTBfX2N4eGFiaXYxMTdfX2NsYXNzX3R5cGVfaW5mb0UAAAD8wQAAiL8AAHy/AABOMTBfX2N4eGFiaXYxMTdfX3BiYXNlX3R5cGVfaW5mb0UAAAD8wQAAuL8AAHy/AABOMTBfX2N4eGFiaXYxMTlfX3BvaW50ZXJfdHlwZV9pbmZvRQD8wQAA6L8AANy/AABOMTBfX2N4eGFiaXYxMjBfX2Z1bmN0aW9uX3R5cGVfaW5mb0UAAAAA/MEAABjAAAB8vwAATjEwX19jeHhhYml2MTI5X19wb2ludGVyX3RvX21lbWJlcl90eXBlX2luZm9FAAAA/MEAAEzAAADcvwAAAAAAAMzAAAAtCAAALggAAC8IAAAwCAAAMQgAAE4xMF9fY3h4YWJpdjEyM19fZnVuZGFtZW50YWxfdHlwZV9pbmZvRQD8wQAApMAAAHy/AAB2AAAAkMAAANjAAABEbgAAkMAAAOTAAABiAAAAkMAAAPDAAABjAAAAkMAAAPzAAABoAAAAkMAAAAjBAABhAAAAkMAAABTBAABzAAAAkMAAACDBAAB0AAAAkMAAACzBAABpAAAAkMAAADjBAABqAAAAkMAAAETBAABsAAAAkMAAAFDBAABtAAAAkMAAAFzBAABmAAAAkMAAAGjBAABkAAAAkMAAAHTBAAAAAAAAwMEAAC0IAAAyCAAALwgAADAIAAAzCAAATjEwX19jeHhhYml2MTE2X19lbnVtX3R5cGVfaW5mb0UAAAAA/MEAAJzBAAB8vwAAAAAAAKy/AAAtCAAANAgAAC8IAAAwCAAANQgAADYIAAA3CAAAOAgAAAAAAABEwgAALQgAADkIAAAvCAAAMAgAADUIAAA6CAAAOwgAADwIAABOMTBfX2N4eGFiaXYxMjBfX3NpX2NsYXNzX3R5cGVfaW5mb0UAAAAA/MEAABzCAACsvwAAAAAAAKDCAAAtCAAAPQgAAC8IAAAwCAAANQgAAD4IAAA/CAAAQAgAAE4xMF9fY3h4YWJpdjEyMV9fdm1pX2NsYXNzX3R5cGVfaW5mb0UAAAD8wQAAeMIAAKy/AAAAAAAADMAAAC0IAABBCAAALwgAADAIAABCCAAAdm9pZABib29sAGNoYXIAc2lnbmVkIGNoYXIAdW5zaWduZWQgY2hhcgBzaG9ydAB1bnNpZ25lZCBzaG9ydABpbnQAdW5zaWduZWQgaW50AGxvbmcAdW5zaWduZWQgbG9uZwBmbG9hdABkb3VibGUAc3RkOjpzdHJpbmcAc3RkOjpiYXNpY19zdHJpbmc8dW5zaWduZWQgY2hhcj4Ac3RkOjp3c3RyaW5nAHN0ZDo6dTE2c3RyaW5nAHN0ZDo6dTMyc3RyaW5nAGVtc2NyaXB0ZW46OnZhbABlbXNjcmlwdGVuOjptZW1vcnlfdmlldzxjaGFyPgBlbXNjcmlwdGVuOjptZW1vcnlfdmlldzxzaWduZWQgY2hhcj4AZW1zY3JpcHRlbjo6bWVtb3J5X3ZpZXc8dW5zaWduZWQgY2hhcj4AZW1zY3JpcHRlbjo6bWVtb3J5X3ZpZXc8c2hvcnQ+AGVtc2NyaXB0ZW46Om1lbW9yeV92aWV3PHVuc2lnbmVkIHNob3J0PgBlbXNjcmlwdGVuOjptZW1vcnlfdmlldzxpbnQ+AGVtc2NyaXB0ZW46Om1lbW9yeV92aWV3PHVuc2lnbmVkIGludD4AZW1zY3JpcHRlbjo6bWVtb3J5X3ZpZXc8bG9uZz4AZW1zY3JpcHRlbjo6bWVtb3J5X3ZpZXc8dW5zaWduZWQgbG9uZz4AZW1zY3JpcHRlbjo6bWVtb3J5X3ZpZXc8aW50OF90PgBlbXNjcmlwdGVuOjptZW1vcnlfdmlldzx1aW50OF90PgBlbXNjcmlwdGVuOjptZW1vcnlfdmlldzxpbnQxNl90PgBlbXNjcmlwdGVuOjptZW1vcnlfdmlldzx1aW50MTZfdD4AZW1zY3JpcHRlbjo6bWVtb3J5X3ZpZXc8aW50MzJfdD4AZW1zY3JpcHRlbjo6bWVtb3J5X3ZpZXc8dWludDMyX3Q+AGVtc2NyaXB0ZW46Om1lbW9yeV92aWV3PGZsb2F0PgBlbXNjcmlwdGVuOjptZW1vcnlfdmlldzxkb3VibGU+AE5TdDNfXzIxMmJhc2ljX3N0cmluZ0loTlNfMTFjaGFyX3RyYWl0c0loRUVOU185YWxsb2NhdG9ySWhFRUVFAAAAAFjCAADexQAAAAAAAAEAAAB4LAAAAAAAAE5TdDNfXzIxMmJhc2ljX3N0cmluZ0l3TlNfMTFjaGFyX3RyYWl0c0l3RUVOU185YWxsb2NhdG9ySXdFRUVFAABYwgAAOMYAAAAAAAABAAAAeCwAAAAAAABOU3QzX18yMTJiYXNpY19zdHJpbmdJRHNOU18xMWNoYXJfdHJhaXRzSURzRUVOU185YWxsb2NhdG9ySURzRUVFRQAAAFjCAACQxgAAAAAAAAEAAAB4LAAAAAAAAE5TdDNfXzIxMmJhc2ljX3N0cmluZ0lEaU5TXzExY2hhcl90cmFpdHNJRGlFRU5TXzlhbGxvY2F0b3JJRGlFRUVFAAAAWMIAAOzGAAAAAAAAAQAAAHgsAAAAAAAATjEwZW1zY3JpcHRlbjExbWVtb3J5X3ZpZXdJY0VFAADUwQAASMcAAE4xMGVtc2NyaXB0ZW4xMW1lbW9yeV92aWV3SWFFRQAA1MEAAHDHAABOMTBlbXNjcmlwdGVuMTFtZW1vcnlfdmlld0loRUUAANTBAACYxwAATjEwZW1zY3JpcHRlbjExbWVtb3J5X3ZpZXdJc0VFAADUwQAAwMcAAE4xMGVtc2NyaXB0ZW4xMW1lbW9yeV92aWV3SXRFRQAA1MEAAOjHAABOMTBlbXNjcmlwdGVuMTFtZW1vcnlfdmlld0lpRUUAANTBAAAQyAAATjEwZW1zY3JpcHRlbjExbWVtb3J5X3ZpZXdJakVFAADUwQAAOMgAAE4xMGVtc2NyaXB0ZW4xMW1lbW9yeV92aWV3SWxFRQAA1MEAAGDIAABOMTBlbXNjcmlwdGVuMTFtZW1vcnlfdmlld0ltRUUAANTBAACIyAAATjEwZW1zY3JpcHRlbjExbWVtb3J5X3ZpZXdJZkVFAADUwQAAsMgAAE4xMGVtc2NyaXB0ZW4xMW1lbW9yeV92aWV3SWRFRQAA1MEAANjI");
base64DecodeToExistingUint8Array(bufferView, 51458, "gD9ErAAAAgAAAAAE");
base64DecodeToExistingUint8Array(bufferView, 51480, "");
base64DecodeToExistingUint8Array(bufferView, 63608, "b7ckB+xSIUDWNsXjoloiQAh2/BcIciNAmpmZmZmZJEDaccPvptMlQEdy+Q/pHydAAAAAAACAKEAcQL/v3/QpQAAAAAAAgCtAqU4Hsp4iLUAAi/z6Id4uQGpOXmQCWjBAb7ckB+xSMUDWNsXjoloyQAh2/BcIcjNAQkC+hAqaNEA6evzeptM1QOhpwCDpHzdAAAAAAACAOEC9N4YA4PQ5QAAAAAAAgDtASkbOwp4iPUAAi/z6Id4+QJrS+lsCWkBAnzvB/utSQUDWNsXjolpCQNjxXyAIckNAcsRafAqaREA6evzeptNFQOhpwCDpH0dAAAAAAACASEC9N4YA4PRJQAAAAAAAgEtASkbOwp4iTUDRBmADIt5OQIKQLGACWlBAnzvB/utSUUDueJPfolpSQNjxXyAIclNAWoKMgAqaVEA6evzeptNVQOhpwCDpH1dAdVq3Qe1/WEC9N4YA4PRZQAAAAAAAgFtAYYicvp4iXUDpSC7/Id5eQIKQLGACWmBAkxraAOxSYUDueJPfolpiQNjxXyAIcmNAWoKMgAqaZEA6evzeptNlQOhpwCDpH2dAgXueP+1/aEC9N4YA4PRpQAAAAAAAgGtAVWe1wJ4ibUDpSC7/Id5uQIKQLGACWnBAGavN/+tScUDueJPfolpyQNjxXyAIcnNA4BKAfwqadEC06QjgptN1QG76sx/pH3dAgXueP+1/eEC9N4YA4PR5QAAAAAAAgHtA2/eov54ifUBjuDoAIt5+QIKQLGACWoBAGavN/+tSgUCrsBngolqCQBu62R8IcoNAnUoGgAqahEC06QjgptOFQCsyOiDpH4dAPrMkQO1/iEAAAAAA4PSJQAAAAAAAgItAmC8vwJ4ijUBjuDoAIt6OQKN06V8CWpBA+MYQAOxSkUCrsBngolqSQPrVHCAIcpNAnUoGgAqalEC06QjgptOVQEwW9x/pH5dAX5fhP+1/mEAAAAAA4PSZQAAAAAAAgJtAuhPsv54inUCEnPf/Id6eQJMCC2ACWqBA+MYQAOxSoUC8IvjfolqiQApI+x8IcqNAnUoGgAqapEC06QjgptOlQEwW9x/pH6dATiUDQO1/qEAAAAAA4PSpQAAAAAAAgKtAhetRuJ4irUCEnPf/Id6uQJs7+l8CWrBAAAAAAOxSsUC8IvjfolqyQApI+x8IcrNAnUoGgAqatEC8IvjfptO1QETdByDpH7dATiUDQO1/uEAAAAAA4PS5QAAAAAAAgLtAstr8v54ivUCEnPf/Id6+QBefAmACWsBAAAAAAOxSwUA4hgDgolrCQIarAyAIcsNAIef9fwqaxEA4hgDgptPFQMh5/x/pH8dATiUDQO1/yEAAAAAA4PTJQE9nZ1N2b3JiaXMAAAAAAAAF");
base64DecodeToExistingUint8Array(bufferView, 64660, "/gU=");
base64DecodeToExistingUint8Array(bufferView, 64684, "/wUAAAAGAABQAwE=");
base64DecodeToExistingUint8Array(bufferView, 64708, "Ag==");
base64DecodeToExistingUint8Array(bufferView, 64723, "//////8=");
base64DecodeToExistingUint8Array(bufferView, 64792, "BQ==");
base64DecodeToExistingUint8Array(bufferView, 64804, "AwY=");
base64DecodeToExistingUint8Array(bufferView, 64828, "/wUAAAQGAABoAwEAAAQ=");
base64DecodeToExistingUint8Array(bufferView, 64852, "AQ==");
base64DecodeToExistingUint8Array(bufferView, 64867, "Cv////8=");
base64DecodeToExistingUint8Array(bufferView, 64936, "GP0=");
base64DecodeToExistingUint8Array(bufferView, 65116, "kAcB");
base64DecodeToExistingUint8Array(bufferView, 65172, "qIQAAAk=");
base64DecodeToExistingUint8Array(bufferView, 65188, "/gU=");
base64DecodeToExistingUint8Array(bufferView, 65208, "BQYAAAAAAAAABgAAyAcBAAAE");
base64DecodeToExistingUint8Array(bufferView, 65252, "/////w==");
base64DecodeToExistingUint8Array(bufferView, 65320, "IAgAAHK9");
return asmFunc({
    'Int8Array': Int8Array,
    'Int16Array': Int16Array,
    'Int32Array': Int32Array,
    'Uint8Array': Uint8Array,
    'Uint16Array': Uint16Array,
    'Uint32Array': Uint32Array,
    'Float32Array': Float32Array,
    'Float64Array': Float64Array,
    'NaN': NaN,
    'Infinity': Infinity,
    'Math': Math
  },
  asmLibraryArg,
  wasmMemory.buffer
)

}
)(asmLibraryArg, wasmMemory, wasmTable);
    return {
      'exports': exports
    };
  },

  instantiate: /** @suppress{checkTypes} */ function(binary, info) {
    return {
      then: function(ok) {
        ok({
          'instance': new WebAssembly.Instance(new WebAssembly.Module(binary))
        });
        // Emulate a simple WebAssembly.instantiate(..).then(()=>{}).catch(()=>{}) syntax.
        return { catch: function() {} };
      }
    };
  },

  RuntimeError: Error
};

// We don't need to actually download a wasm binary, mark it as present but empty.
wasmBinary = [];



if (typeof WebAssembly !== 'object') {
  abort('No WebAssembly support found. Build with -s WASM=0 to target JavaScript instead.');
}


// In MINIMAL_RUNTIME, setValue() and getValue() are only available when building with safe heap enabled, for heap safety checking.
// In traditional runtime, setValue() and getValue() are always available (although their use is highly discouraged due to perf penalties)

/** @param {number} ptr
    @param {number} value
    @param {string} type
    @param {number|boolean=} noSafe */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}

/** @param {number} ptr
    @param {string} type
    @param {number|boolean=} noSafe */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for getValue: ' + type);
    }
  return null;
}





// Wasm globals

var wasmMemory;

// In fastcomp asm.js, we don't need a wasm Table at all.
// In the wasm backend, we polyfill the WebAssembly object,
// so this creates a (non-native-wasm) table for us.
var wasmTable = new WebAssembly.Table({
  'initial': 2116,
  'maximum': 2116 + 0,
  'element': 'anyfunc'
});


//========================================
// Runtime essentials
//========================================

// whether we are quitting the application. no code should run after this.
// set in exit() and abort()
var ABORT = false;

// set by exit() and abort().  Passed to 'onExit' handler.
// NOTE: This is also used as the process return code code in shell environments
// but only when noExitRuntime is false.
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
  return func;
}

// C calling interface.
/** @param {Array=} argTypes
    @param {Arguments|Array=} args
    @param {Object=} opts */
function ccall(ident, returnType, argTypes, args, opts) {
  // For fast lookup of conversion functions
  var toC = {
    'string': function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        var len = (str.length << 2) + 1;
        ret = stackAlloc(len);
        stringToUTF8(str, ret, len);
      }
      return ret;
    },
    'array': function(arr) {
      var ret = stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    }
  };

  function convertReturnValue(ret) {
    if (returnType === 'string') return UTF8ToString(ret);
    if (returnType === 'boolean') return Boolean(ret);
    return ret;
  }

  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  assert(returnType !== 'array', 'Return type should not be "array".');
  if (args) {
    for (var i = 0; i < args.length; i++) {
      var converter = toC[argTypes[i]];
      if (converter) {
        if (stack === 0) stack = stackSave();
        cArgs[i] = converter(args[i]);
      } else {
        cArgs[i] = args[i];
      }
    }
  }
  var ret = func.apply(null, cArgs);

  ret = convertReturnValue(ret);
  if (stack !== 0) stackRestore(stack);
  return ret;
}

/** @param {Array=} argTypes
    @param {Object=} opts */
function cwrap(ident, returnType, argTypes, opts) {
  return function() {
    return ccall(ident, returnType, argTypes, arguments, opts);
  }
}

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_DYNAMIC = 2; // Cannot be freed except through sbrk
var ALLOC_NONE = 3; // Do not allocate

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc,
    stackAlloc,
    dynamicAlloc][allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var stop;
    ptr = ret;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!runtimeInitialized) return dynamicAlloc(size);
  return _malloc(size);
}


// runtime_strings.js: Strings related runtime functions that are part of both MINIMAL_RUNTIME and regular runtime.

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;

/**
 * @param {number} idx
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ArrayToString(u8Array, idx, maxBytesToRead) {
  var endIdx = idx + maxBytesToRead;
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  // (As a tiny code save trick, compare endPtr against endIdx using a negation, so that undefined means Infinity)
  while (u8Array[endPtr] && !(endPtr >= endIdx)) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var str = '';
    // If building with TextDecoder, we have already computed the string length above, so test loop end condition against that
    while (idx < endPtr) {
      // For UTF8 byte structure, see:
      // http://en.wikipedia.org/wiki/UTF-8#Description
      // https://www.ietf.org/rfc/rfc2279.txt
      // https://tools.ietf.org/html/rfc3629
      var u0 = u8Array[idx++];
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      var u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      var u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        if ((u0 & 0xF8) != 0xF0) warnOnce('Invalid UTF-8 leading byte 0x' + u0.toString(16) + ' encountered when deserializing a UTF-8 string on the asm.js/wasm heap to a JS string!');
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | (u8Array[idx++] & 63);
      }

      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
  return str;
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns a
// copy of that string as a Javascript String object.
// maxBytesToRead: an optional length that specifies the maximum number of bytes to read. You can omit
//                 this parameter to scan the string until the first \0 byte. If maxBytesToRead is
//                 passed, and the string at [ptr, ptr+maxBytesToReadr[ contains a null byte in the
//                 middle, then the string will cut short at that byte index (i.e. maxBytesToRead will
//                 not produce a string of exact length [ptr, ptr+maxBytesToRead[)
//                 N.B. mixing frequent uses of UTF8ToString() with and without maxBytesToRead may
//                 throw JS JIT optimizations off, so it is worth to consider consistently using one
//                 style or the other.
/**
 * @param {number} ptr
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ToString(ptr, maxBytesToRead) {
  return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : '';
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array.
//                    This count should include the null terminator,
//                    i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) {
      var u1 = str.charCodeAt(++i);
      u = 0x10000 + ((u & 0x3FF) << 10) | (u1 & 0x3FF);
    }
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 3 >= endIdx) break;
      if (u >= 0x200000) warnOnce('Invalid Unicode code point 0x' + u.toString(16) + ' encountered when serializing a JS string to an UTF-8 string on the asm.js/wasm heap! (Valid unicode code points should be in range 0-0x1FFFFF).');
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.
function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) ++len;
    else if (u <= 0x7FF) len += 2;
    else if (u <= 0xFFFF) len += 3;
    else len += 4;
  }
  return len;
}



// runtime_strings_extra.js: Strings related runtime functions that are available only in regular runtime.

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAPU8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;

function UTF16ToString(ptr) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}

function UTF32ToString(ptr) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}

// Allocate heap space for a JS string, and write it there.
// It is the responsibility of the caller to free() that memory.
function allocateUTF8(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = _malloc(size);
  if (ret) stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Allocate stack space for a JS string, and write it there.
function allocateUTF8OnStack(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = stackAlloc(size);
  stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated
    @param {boolean=} dontAddNull */
function writeStringToMemory(string, buffer, dontAddNull) {
  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}

/** @param {boolean=} dontAddNull */
function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}



// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBufferAndViews(buf) {
  buffer = buf;
  Module['HEAP8'] = HEAP8 = new Int8Array(buf);
  Module['HEAP16'] = HEAP16 = new Int16Array(buf);
  Module['HEAP32'] = HEAP32 = new Int32Array(buf);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buf);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buf);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buf);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buf);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buf);
}

var STATIC_BASE = 1024,
    STACK_BASE = 5315232,
    STACKTOP = STACK_BASE,
    STACK_MAX = 72352,
    DYNAMIC_BASE = 5315232,
    DYNAMICTOP_PTR = 72176;

assert(STACK_BASE % 16 === 0, 'stack must start aligned');
assert(DYNAMIC_BASE % 16 === 0, 'heap must start aligned');



var TOTAL_STACK = 5242880;
if (Module['TOTAL_STACK']) assert(TOTAL_STACK === Module['TOTAL_STACK'], 'the stack size can no longer be determined at runtime')

var INITIAL_INITIAL_MEMORY = Module['INITIAL_MEMORY'] || 67108864;if (!Object.getOwnPropertyDescriptor(Module, 'INITIAL_MEMORY')) Object.defineProperty(Module, 'INITIAL_MEMORY', { configurable: true, get: function() { abort('Module.INITIAL_MEMORY has been replaced with plain INITIAL_INITIAL_MEMORY') } });

assert(INITIAL_INITIAL_MEMORY >= TOTAL_STACK, 'INITIAL_MEMORY should be larger than TOTAL_STACK, was ' + INITIAL_INITIAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray !== undefined && Int32Array.prototype.set !== undefined,
       'JS engine does not provide full typed array support');






// In standalone mode, the wasm creates the memory, and the user can't provide it.
// In non-standalone/normal mode, we create the memory here.

// Create the main memory. (Note: this isn't used in STANDALONE_WASM mode since the wasm
// memory is created in the wasm, not in JS.)

  if (Module['wasmMemory']) {
    wasmMemory = Module['wasmMemory'];
  } else
  {
    wasmMemory = new WebAssembly.Memory({
      'initial': INITIAL_INITIAL_MEMORY / WASM_PAGE_SIZE
      ,
      'maximum': INITIAL_INITIAL_MEMORY / WASM_PAGE_SIZE
    });
  }


if (wasmMemory) {
  buffer = wasmMemory.buffer;
}

// If the user provides an incorrect length, just use that length instead rather than providing the user to
// specifically provide the memory length with Module['INITIAL_MEMORY'].
INITIAL_INITIAL_MEMORY = buffer.byteLength;
assert(INITIAL_INITIAL_MEMORY % WASM_PAGE_SIZE === 0);
updateGlobalBufferAndViews(buffer);

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;




// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  assert((STACK_MAX & 3) == 0);
  // The stack grows downwards
  HEAPU32[(STACK_MAX >> 2)+1] = 0x2135467;
  HEAPU32[(STACK_MAX >> 2)+2] = 0x89BACDFE;
  // Also test the global address 0 for integrity.
  // We don't do this with ASan because ASan does its own checks for this.
  HEAP32[0] = 0x63736d65; /* 'emsc' */
}

function checkStackCookie() {
  var cookie1 = HEAPU32[(STACK_MAX >> 2)+1];
  var cookie2 = HEAPU32[(STACK_MAX >> 2)+2];
  if (cookie1 != 0x2135467 || cookie2 != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x2135467, but received 0x' + cookie2.toString(16) + ' ' + cookie1.toString(16));
  }
  // Also test the global address 0 for integrity.
  // We don't do this with ASan because ASan does its own checks for this.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) abort('Runtime error: The application has corrupted its heap memory area (address zero)!');
}

function abortStackOverflow(allocSize) {
  abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - stackSave() + allocSize) + ' bytes available!');
}




// Endianness check (note: assumes compiler arch was little-endian)
(function() {
  var h16 = new Int16Array(1);
  var h8 = new Int8Array(h16.buffer);
  h16[0] = 0x6373;
  if (h8[0] !== 0x73 || h8[1] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';
})();

function abortFnPtrError(ptr, sig) {
	abort("Invalid function pointer " + ptr + " called with signature '" + sig + "'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this). Build with ASSERTIONS=2 for more info.");
}



function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the main() is called

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {

  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }

  callRuntimeCallbacks(__ATPRERUN__);
}

function initRuntime() {
  checkStackCookie();
  assert(!runtimeInitialized);
  runtimeInitialized = true;
  if (!Module["noFSInit"] && !FS.init.initialized) FS.init();
TTY.init();
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  FS.ignorePermissions = false;
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();

  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }

  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}

function addOnExit(cb) {
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

/** @param {number|boolean=} ignore */
function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
/** @param {number|boolean=} ignore */
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}


// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/imul

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/fround

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/trunc

assert(Math.imul, 'This browser does not support Math.imul(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.fround, 'This browser does not support Math.fround(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.clz32, 'This browser does not support Math.clz32(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.trunc, 'This browser does not support Math.trunc(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_max = Math.max;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;



// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// Module.preRun (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
}

function addRunDependency(id) {
  runDependencies++;

  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }

  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            err('still waiting on run dependencies:');
          }
          err('dependency: ' + dep);
        }
        if (shown) {
          err('(end of list)');
        }
      }, 10000);
    }
  } else {
    err('warning: run dependency added without ID');
  }
}

function removeRunDependency(id) {
  runDependencies--;

  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }

  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    err('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data


/** @param {string|number=} what */
function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  what += '';
  out(what);
  err(what);

  ABORT = true;
  EXITSTATUS = 1;

  var output = 'abort(' + what + ') at ' + stackTrace();
  what = output;

  // Throw a wasm runtime error, because a JS error might be seen as a foreign
  // exception, which means we'd run destructors on it. We need the error to
  // simply make the program stop.
  throw new WebAssembly.RuntimeError(what);
}


var memoryInitializer = null;








// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  return String.prototype.startsWith ?
      filename.startsWith(dataURIPrefix) :
      filename.indexOf(dataURIPrefix) === 0;
}




var wasmBinaryFile = '';
if (!isDataURI(wasmBinaryFile)) {
  wasmBinaryFile = locateFile(wasmBinaryFile);
}

function getBinary() {
  try {
    if (wasmBinary) {
      return new Uint8Array(wasmBinary);
    }

    var binary = tryParseAsDataURI(wasmBinaryFile);
    if (binary) {
      return binary;
    }
    if (readBinary) {
      return readBinary(wasmBinaryFile);
    } else {
      throw "both async and sync fetching of the wasm failed";
    }
  }
  catch (err) {
    abort(err);
  }
}

function getBinaryPromise() {
  // if we don't have the binary yet, and have the Fetch api, use that
  // in some environments, like Electron's render process, Fetch api may be present, but have a different context than expected, let's only use it on the Web
  if (!wasmBinary && (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) && typeof fetch === 'function') {
    return fetch(wasmBinaryFile, { credentials: 'same-origin' }).then(function(response) {
      if (!response['ok']) {
        throw "failed to load wasm binary file at '" + wasmBinaryFile + "'";
      }
      return response['arrayBuffer']();
    }).catch(function () {
      return getBinary();
    });
  }
  // Otherwise, getBinary should be able to get it synchronously
  return new Promise(function(resolve, reject) {
    resolve(getBinary());
  });
}



// Create the wasm instance.
// Receives the wasm imports, returns the exports.
function createWasm() {
  // prepare imports
  var info = {
    'env': asmLibraryArg,
    'wasi_snapshot_preview1': asmLibraryArg
  };
  // Load the wasm module and create an instance of using native support in the JS engine.
  // handle a generated wasm instance, receiving its exports and
  // performing other necessary setup
  /** @param {WebAssembly.Module=} module*/
  function receiveInstance(instance, module) {
    var exports = instance.exports;
    Module['asm'] = exports;
    removeRunDependency('wasm-instantiate');
  }
   // we can't run yet (except in a pthread, where we have a custom sync instantiator)
  addRunDependency('wasm-instantiate');


  // Async compilation can be confusing when an error on the page overwrites Module
  // (for example, if the order of elements is wrong, and the one defining Module is
  // later), so we save Module and check it later.
  var trueModule = Module;
  function receiveInstantiatedSource(output) {
    // 'output' is a WebAssemblyInstantiatedSource object which has both the module and instance.
    // receiveInstance() will swap in the exports (to Module.asm) so they can be called
    assert(Module === trueModule, 'the Module object should not be replaced during async compilation - perhaps the order of HTML elements is wrong?');
    trueModule = null;
      // TODO: Due to Closure regression https://github.com/google/closure-compiler/issues/3193, the above line no longer optimizes out down to the following line.
      // When the regression is fixed, can restore the above USE_PTHREADS-enabled path.
    receiveInstance(output['instance']);
  }


  function instantiateArrayBuffer(receiver) {
    return getBinaryPromise().then(function(binary) {
      return WebAssembly.instantiate(binary, info);
    }).then(receiver, function(reason) {
      err('failed to asynchronously prepare wasm: ' + reason);
      abort(reason);
    });
  }

  // Prefer streaming instantiation if available.
  function instantiateAsync() {
    if (!wasmBinary &&
        typeof WebAssembly.instantiateStreaming === 'function' &&
        !isDataURI(wasmBinaryFile) &&
        typeof fetch === 'function') {
      fetch(wasmBinaryFile, { credentials: 'same-origin' }).then(function (response) {
        var result = WebAssembly.instantiateStreaming(response, info);
        return result.then(receiveInstantiatedSource, function(reason) {
            // We expect the most common failure cause to be a bad MIME type for the binary,
            // in which case falling back to ArrayBuffer instantiation should work.
            err('wasm streaming compile failed: ' + reason);
            err('falling back to ArrayBuffer instantiation');
            instantiateArrayBuffer(receiveInstantiatedSource);
          });
      });
    } else {
      return instantiateArrayBuffer(receiveInstantiatedSource);
    }
  }
  // User shell pages can write their own Module.instantiateWasm = function(imports, successCallback) callback
  // to manually instantiate the Wasm module themselves. This allows pages to run the instantiation parallel
  // to any other async startup actions they are performing.
  if (Module['instantiateWasm']) {
    try {
      var exports = Module['instantiateWasm'](info, receiveInstance);
      return exports;
    } catch(e) {
      err('Module.instantiateWasm callback failed with error: ' + e);
      return false;
    }
  }

  instantiateAsync();
  return {}; // no exports yet; we'll fill them in later
}


// Globals used by JS i64 conversions
var tempDouble;
var tempI64;

// === Body ===

var ASM_CONSTS = {
  
};




// STATICTOP = STATIC_BASE + 71328;
/* global initializers */  __ATINIT__.push({ func: function() { ___wasm_call_ctors() } });




/* no memory initializer */
// {{PRE_LIBRARY}}


  function demangle(func) {
      warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
      return func;
    }

  function demangleAll(text) {
      var regex =
        /\b_Z[\w\d_]+/g;
      return text.replace(regex,
        function(x) {
          var y = demangle(x);
          return x === y ? x : (y + ' [' + x + ']');
        });
    }

  function jsStackTrace() {
      var err = new Error();
      if (!err.stack) {
        // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
        // so try that as a special-case.
        try {
          throw new Error();
        } catch(e) {
          err = e;
        }
        if (!err.stack) {
          return '(no stack trace available)';
        }
      }
      return err.stack.toString();
    }

  function stackTrace() {
      var js = jsStackTrace();
      if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
      return demangleAll(js);
    }

  function ___assert_fail(condition, filename, line, func) {
      abort('Assertion failed: ' + UTF8ToString(condition) + ', at: ' + [filename ? UTF8ToString(filename) : 'unknown filename', line, func ? UTF8ToString(func) : 'unknown function']);
    }

  function ___cxa_allocate_exception(size) {
      return _malloc(size);
    }

  
  function _atexit(func, arg) {
      warnOnce('atexit() called, but EXIT_RUNTIME is not set, so atexits() will not be called. set EXIT_RUNTIME to 1 (see the FAQ)');
      __ATEXIT__.unshift({ func: func, arg: arg });
    }function ___cxa_atexit(a0,a1
  ) {
  return _atexit(a0,a1);
  }

  
  var ___exception_infos={};
  
  var ___exception_caught= [];
  
  function ___exception_addRef(ptr) {
      if (!ptr) return;
      var info = ___exception_infos[ptr];
      info.refcount++;
    }
  
  function ___exception_deAdjust(adjusted) {
      if (!adjusted || ___exception_infos[adjusted]) return adjusted;
      for (var key in ___exception_infos) {
        var ptr = +key; // the iteration key is a string, and if we throw this, it must be an integer as that is what we look for
        var adj = ___exception_infos[ptr].adjusted;
        var len = adj.length;
        for (var i = 0; i < len; i++) {
          if (adj[i] === adjusted) {
            return ptr;
          }
        }
      }
      return adjusted;
    }function ___cxa_begin_catch(ptr) {
      var info = ___exception_infos[ptr];
      if (info && !info.caught) {
        info.caught = true;
        __ZSt18uncaught_exceptionv.uncaught_exceptions--;
      }
      if (info) info.rethrown = false;
      ___exception_caught.push(ptr);
      ___exception_addRef(___exception_deAdjust(ptr));
      return ptr;
    }

  
  var ___exception_last=0;
  
  
  function ___cxa_free_exception(ptr) {
      try {
        return _free(ptr);
      } catch(e) {
        err('exception during cxa_free_exception: ' + e);
      }
    }function ___exception_decRef(ptr) {
      if (!ptr) return;
      var info = ___exception_infos[ptr];
      assert(info.refcount > 0);
      info.refcount--;
      // A rethrown exception can reach refcount 0; it must not be discarded
      // Its next handler will clear the rethrown flag and addRef it, prior to
      // final decRef and destruction here
      if (info.refcount === 0 && !info.rethrown) {
        if (info.destructor) {
          // In Wasm, destructors return 'this' as in ARM
          Module['dynCall_ii'](info.destructor, ptr);
        }
        delete ___exception_infos[ptr];
        ___cxa_free_exception(ptr);
      }
    }function ___cxa_end_catch() {
      // Clear state flag.
      _setThrew(0);
      // Call destructor if one is registered then clear it.
      var ptr = ___exception_caught.pop();
      if (ptr) {
        ___exception_decRef(___exception_deAdjust(ptr));
        ___exception_last = 0; // XXX in decRef?
      }
    }

  function ___cxa_find_matching_catch_2() {
      var thrown = ___exception_last;
      if (!thrown) {
        // just pass through the null ptr
        return ((setTempRet0(0),0)|0);
      }
      var info = ___exception_infos[thrown];
      var throwntype = info.type;
      if (!throwntype) {
        // just pass through the thrown ptr
        return ((setTempRet0(0),thrown)|0);
      }
      var typeArray = Array.prototype.slice.call(arguments);
  
      var pointer = ___cxa_is_pointer_type(throwntype);
      // can_catch receives a **, add indirection
      var buffer = 72336;
      HEAP32[((buffer)>>2)]=thrown;
      thrown = buffer;
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (typeArray[i] && ___cxa_can_catch(typeArray[i], throwntype, thrown)) {
          thrown = HEAP32[((thrown)>>2)]; // undo indirection
          info.adjusted.push(thrown);
          return ((setTempRet0(typeArray[i]),thrown)|0);
        }
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      thrown = HEAP32[((thrown)>>2)]; // undo indirection
      return ((setTempRet0(throwntype),thrown)|0);
    }

  function ___cxa_find_matching_catch_3() {
      var thrown = ___exception_last;
      if (!thrown) {
        // just pass through the null ptr
        return ((setTempRet0(0),0)|0);
      }
      var info = ___exception_infos[thrown];
      var throwntype = info.type;
      if (!throwntype) {
        // just pass through the thrown ptr
        return ((setTempRet0(0),thrown)|0);
      }
      var typeArray = Array.prototype.slice.call(arguments);
  
      var pointer = ___cxa_is_pointer_type(throwntype);
      // can_catch receives a **, add indirection
      var buffer = 72336;
      HEAP32[((buffer)>>2)]=thrown;
      thrown = buffer;
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (typeArray[i] && ___cxa_can_catch(typeArray[i], throwntype, thrown)) {
          thrown = HEAP32[((thrown)>>2)]; // undo indirection
          info.adjusted.push(thrown);
          return ((setTempRet0(typeArray[i]),thrown)|0);
        }
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      thrown = HEAP32[((thrown)>>2)]; // undo indirection
      return ((setTempRet0(throwntype),thrown)|0);
    }


  function ___cxa_rethrow() {
      var ptr = ___exception_caught.pop();
      ptr = ___exception_deAdjust(ptr);
      if (!___exception_infos[ptr].rethrown) {
        // Only pop if the corresponding push was through rethrow_primary_exception
        ___exception_caught.push(ptr);
        ___exception_infos[ptr].rethrown = true;
      }
      ___exception_last = ptr;
      throw ptr;
    }

  function ___cxa_throw(ptr, type, destructor) {
      ___exception_infos[ptr] = {
        ptr: ptr,
        adjusted: [ptr],
        type: type,
        destructor: destructor,
        refcount: 0,
        caught: false,
        rethrown: false
      };
      ___exception_last = ptr;
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exceptions = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exceptions++;
      }
      throw ptr;
    }

  function ___cxa_uncaught_exceptions() {
      return __ZSt18uncaught_exceptionv.uncaught_exceptions;
    }

  function ___handle_stack_overflow() {
      abort('stack overflow')
    }

  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else err('failed to set errno from JS');
      return value;
    }function ___map_file(pathname, size) {
      ___setErrNo(63);
      return -1;
    }

  function ___resumeException(ptr) {
      if (!___exception_last) { ___exception_last = ptr; }
      throw ptr;
    }

  
  
  var PATH={splitPath:function(filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function(parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up; up--) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function(path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function(path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function(path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function(path) {
        return PATH.splitPath(path)[3];
      },join:function() {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function(l, r) {
        return PATH.normalize(l + '/' + r);
      }};
  
  
  var PATH_FS={resolve:function() {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function(from, to) {
        from = PATH_FS.resolve(from).substr(1);
        to = PATH_FS.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/emscripten-core/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function() {
        // https://github.com/emscripten-core/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function(dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function(stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(43);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function(stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function(stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function(stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(60);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(29);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(6);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function(stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(60);
          }
          try {
            for (var i = 0; i < length; i++) {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            }
          } catch (e) {
            throw new FS.ErrnoError(29);
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function(tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = Buffer.alloc ? Buffer.alloc(BUFSIZE) : new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              try {
                bytesRead = nodeFS.readSync(process.stdin.fd, buf, 0, BUFSIZE, null);
              } catch(e) {
                // Cross-platform differences: on Windows, reading EOF throws an exception, but on other OSes,
                // reading EOF returns 0. Uniformize behavior by treating the EOF exception to return 0.
                if (e.toString().indexOf('EOF') != -1) bytesRead = 0;
                else throw e;
              }
  
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
            } else
            if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function(tty, val) {
          if (val === null || val === 10) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function(tty) {
          if (tty.output && tty.output.length > 0) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function(tty, val) {
          if (val === null || val === 10) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function(tty) {
          if (tty.output && tty.output.length > 0) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function(mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function(parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(63);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function(node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function(node) {
        if (!node.contents) return new Uint8Array(0);
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function(node, newCapacity) {
        var prevCapacity = node.contents ? node.contents.length : 0;
        if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
        // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
        // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
        // avoid overshooting the allocation cap by a very large margin.
        var CAPACITY_DOUBLING_MAX = 1024 * 1024;
        newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
        if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
        var oldContents = node.contents;
        node.contents = new Uint8Array(newCapacity); // Allocate new storage.
        if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
        return;
      },resizeFileStorage:function(node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newSize); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function(node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function(node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function(parent, name) {
          throw FS.genericErrors[44];
        },mknod:function(parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function(old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(55);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function(parent, name) {
          delete parent.contents[name];
        },rmdir:function(parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(55);
          }
          delete parent.contents[name];
        },readdir:function(node) {
          var entries = ['.', '..'];
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function(parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function(node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(28);
          }
          return node.link;
        }},stream_ops:{read:function(stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function(stream, buffer, offset, length, position, canOwn) {
          // The data buffer should be a typed array view
          assert(!(buffer instanceof ArrayBuffer));
  
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) {
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = buffer.slice(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function(stream, offset, whence) {
          var position = offset;
          if (whence === 1) {
            position += stream.position;
          } else if (whence === 2) {
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(28);
          }
          return position;
        },allocate:function(stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function(stream, buffer, offset, length, position, prot, flags) {
          // The data buffer should be a typed array view
          assert(!(buffer instanceof ArrayBuffer));
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(43);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                contents.buffer === buffer.buffer ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < contents.length) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            // malloc() can lead to growing the heap. If targeting the heap, we need to
            // re-acquire the heap buffer object in case growth had occurred.
            var fromHeap = (buffer.buffer == HEAP8.buffer);
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(48);
            }
            (fromHeap ? HEAP8 : buffer).set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function(stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(43);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var ERRNO_MESSAGES={0:"Success",1:"Arg list too long",2:"Permission denied",3:"Address already in use",4:"Address not available",5:"Address family not supported by protocol family",6:"No more processes",7:"Socket already connected",8:"Bad file number",9:"Trying to read unreadable message",10:"Mount device busy",11:"Operation canceled",12:"No children",13:"Connection aborted",14:"Connection refused",15:"Connection reset by peer",16:"File locking deadlock error",17:"Destination address required",18:"Math arg out of domain of func",19:"Quota exceeded",20:"File exists",21:"Bad address",22:"File too large",23:"Host is unreachable",24:"Identifier removed",25:"Illegal byte sequence",26:"Connection already in progress",27:"Interrupted system call",28:"Invalid argument",29:"I/O error",30:"Socket is already connected",31:"Is a directory",32:"Too many symbolic links",33:"Too many open files",34:"Too many links",35:"Message too long",36:"Multihop attempted",37:"File or path name too long",38:"Network interface is not configured",39:"Connection reset by network",40:"Network is unreachable",41:"Too many open files in system",42:"No buffer space available",43:"No such device",44:"No such file or directory",45:"Exec format error",46:"No record locks available",47:"The link has been severed",48:"Not enough core",49:"No message of desired type",50:"Protocol not available",51:"No space left on device",52:"Function not implemented",53:"Socket is not connected",54:"Not a directory",55:"Directory not empty",56:"State not recoverable",57:"Socket operation on non-socket",59:"Not a typewriter",60:"No such device or address",61:"Value too large for defined data type",62:"Previous owner died",63:"Not super-user",64:"Broken pipe",65:"Protocol error",66:"Unknown protocol",67:"Protocol wrong type for socket",68:"Math result not representable",69:"Read only file system",70:"Illegal seek",71:"No such process",72:"Stale file handle",73:"Connection timed out",74:"Text file busy",75:"Cross-device link",100:"Device not a stream",101:"Bad font file fmt",102:"Invalid slot",103:"Invalid request code",104:"No anode",105:"Block device required",106:"Channel number out of range",107:"Level 3 halted",108:"Level 3 reset",109:"Link number out of range",110:"Protocol driver not attached",111:"No CSI structure available",112:"Level 2 halted",113:"Invalid exchange",114:"Invalid request descriptor",115:"Exchange full",116:"No data (for no delay io)",117:"Timer expired",118:"Out of streams resources",119:"Machine is not on the network",120:"Package not installed",121:"The object is remote",122:"Advertise error",123:"Srmount error",124:"Communication error on send",125:"Cross mount point (not really error)",126:"Given log. name not unique",127:"f.d. invalid for this operation",128:"Remote address changed",129:"Can   access a needed shared lib",130:"Accessing a corrupted shared lib",131:".lib section in a.out corrupted",132:"Attempting to link in too many libs",133:"Attempting to exec a shared library",135:"Streams pipe error",136:"Too many users",137:"Socket type not supported",138:"Not supported",139:"Protocol family not supported",140:"Can't send after socket shutdown",141:"Too many references",142:"Host is down",148:"No medium (in tape drive)",156:"Level 2 not synchronized"};
  
  var ERRNO_CODES={EPERM:63,ENOENT:44,ESRCH:71,EINTR:27,EIO:29,ENXIO:60,E2BIG:1,ENOEXEC:45,EBADF:8,ECHILD:12,EAGAIN:6,EWOULDBLOCK:6,ENOMEM:48,EACCES:2,EFAULT:21,ENOTBLK:105,EBUSY:10,EEXIST:20,EXDEV:75,ENODEV:43,ENOTDIR:54,EISDIR:31,EINVAL:28,ENFILE:41,EMFILE:33,ENOTTY:59,ETXTBSY:74,EFBIG:22,ENOSPC:51,ESPIPE:70,EROFS:69,EMLINK:34,EPIPE:64,EDOM:18,ERANGE:68,ENOMSG:49,EIDRM:24,ECHRNG:106,EL2NSYNC:156,EL3HLT:107,EL3RST:108,ELNRNG:109,EUNATCH:110,ENOCSI:111,EL2HLT:112,EDEADLK:16,ENOLCK:46,EBADE:113,EBADR:114,EXFULL:115,ENOANO:104,EBADRQC:103,EBADSLT:102,EDEADLOCK:16,EBFONT:101,ENOSTR:100,ENODATA:116,ETIME:117,ENOSR:118,ENONET:119,ENOPKG:120,EREMOTE:121,ENOLINK:47,EADV:122,ESRMNT:123,ECOMM:124,EPROTO:65,EMULTIHOP:36,EDOTDOT:125,EBADMSG:9,ENOTUNIQ:126,EBADFD:127,EREMCHG:128,ELIBACC:129,ELIBBAD:130,ELIBSCN:131,ELIBMAX:132,ELIBEXEC:133,ENOSYS:52,ENOTEMPTY:55,ENAMETOOLONG:37,ELOOP:32,EOPNOTSUPP:138,EPFNOSUPPORT:139,ECONNRESET:15,ENOBUFS:42,EAFNOSUPPORT:5,EPROTOTYPE:67,ENOTSOCK:57,ENOPROTOOPT:50,ESHUTDOWN:140,ECONNREFUSED:14,EADDRINUSE:3,ECONNABORTED:13,ENETUNREACH:40,ENETDOWN:38,ETIMEDOUT:73,EHOSTDOWN:142,EHOSTUNREACH:23,EINPROGRESS:26,EALREADY:7,EDESTADDRREQ:17,EMSGSIZE:35,EPROTONOSUPPORT:66,ESOCKTNOSUPPORT:137,EADDRNOTAVAIL:4,ENETRESET:39,EISCONN:30,ENOTCONN:53,ETOOMANYREFS:141,EUSERS:136,EDQUOT:19,ESTALE:72,ENOTSUP:138,ENOMEDIUM:148,EILSEQ:25,EOVERFLOW:61,ECANCELED:11,ENOTRECOVERABLE:56,EOWNERDEAD:62,ESTRPIPE:135};var FS={root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function(e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function(path, opts) {
        path = PATH_FS.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(32);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH_FS.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(32);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function(node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function(parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function(node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function(node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function(parent, name) {
        var errCode = FS.mayLookup(parent);
        if (errCode) {
          throw new FS.ErrnoError(errCode, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function(parent, name, mode, rdev) {
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function(node) {
        FS.hashRemoveNode(node);
      },isRoot:function(node) {
        return node === node.parent;
      },isMountpoint:function(node) {
        return !!node.mounted;
      },isFile:function(mode) {
        return (mode & 61440) === 32768;
      },isDir:function(mode) {
        return (mode & 61440) === 16384;
      },isLink:function(mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function(mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function(mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function(mode) {
        return (mode & 61440) === 4096;
      },isSocket:function(mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function(str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function(flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function(node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return 2;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return 2;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return 2;
        }
        return 0;
      },mayLookup:function(dir) {
        var errCode = FS.nodePermissions(dir, 'x');
        if (errCode) return errCode;
        if (!dir.node_ops.lookup) return 2;
        return 0;
      },mayCreate:function(dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return 20;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function(dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var errCode = FS.nodePermissions(dir, 'wx');
        if (errCode) {
          return errCode;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return 54;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return 10;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return 31;
          }
        }
        return 0;
      },mayOpen:function(node, flags) {
        if (!node) {
          return 44;
        }
        if (FS.isLink(node.mode)) {
          return 32;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return 31;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function(fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(33);
      },getStream:function(fd) {
        return FS.streams[fd];
      },createStream:function(stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = /** @constructor */ function(){};
          FS.FSStream.prototype = {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          };
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function(fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function(stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function() {
          throw new FS.ErrnoError(70);
        }},major:function(dev) {
        return ((dev) >> 8);
      },minor:function(dev) {
        return ((dev) & 0xff);
      },makedev:function(ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function(dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function(dev) {
        return FS.devices[dev];
      },getMounts:function(mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function(populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          err('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(errCode) {
          assert(FS.syncFSRequests > 0);
          FS.syncFSRequests--;
          return callback(errCode);
        }
  
        function done(errCode) {
          if (errCode) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(errCode);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function(type, opts, mountpoint) {
        if (typeof type === 'string') {
          // The filesystem was not included, and instead we have an error
          // message stored in the variable.
          throw type;
        }
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(10);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(10);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(54);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(28);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function(parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function(path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(28);
        }
        var errCode = FS.mayCreate(parent, name);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(63);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function(path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function(path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdirTree:function(path, mode) {
        var dirs = path.split('/');
        var d = '';
        for (var i = 0; i < dirs.length; ++i) {
          if (!dirs[i]) continue;
          d += '/' + dirs[i];
          try {
            FS.mkdir(d, mode);
          } catch(e) {
            if (e.errno != 20) throw e;
          }
        }
      },mkdev:function(path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function(oldpath, newpath) {
        if (!PATH_FS.resolve(oldpath)) {
          throw new FS.ErrnoError(44);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(44);
        }
        var newname = PATH.basename(newpath);
        var errCode = FS.mayCreate(parent, newname);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(63);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function(old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(10);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(44);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(75);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH_FS.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(28);
        }
        // new path should not be an ancestor of the old path
        relative = PATH_FS.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(55);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var errCode = FS.mayDelete(old_dir, old_name, isdir);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        errCode = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(10);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          errCode = FS.nodePermissions(old_dir, 'w');
          if (errCode) {
            throw new FS.ErrnoError(errCode);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          err("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          err("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function(path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var errCode = FS.mayDelete(parent, name, true);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(10);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          err("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          err("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function(path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(54);
        }
        return node.node_ops.readdir(node);
      },unlink:function(path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var errCode = FS.mayDelete(parent, name, false);
        if (errCode) {
          // According to POSIX, we should map EISDIR to EPERM, but
          // we instead do what Linux does (and we must, as we use
          // the musl linux libc).
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(10);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          err("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          err("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function(path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(44);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(28);
        }
        return PATH_FS.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function(path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(44);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(63);
        }
        return node.node_ops.getattr(node);
      },lstat:function(path) {
        return FS.stat(path, true);
      },chmod:function(path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(63);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function(path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function(fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(8);
        }
        FS.chmod(stream.node, mode);
      },chown:function(path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(63);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function(path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function(fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(8);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function(path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(28);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(28);
        }
        var errCode = FS.nodePermissions(node, 'w');
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function(fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(8);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(28);
        }
        FS.truncate(stream.node, len);
      },utime:function(path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function(path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(44);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(20);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(44);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(54);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var errCode = FS.mayOpen(node, flags);
          if (errCode) {
            throw new FS.ErrnoError(errCode);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            err("FS.trackingDelegate error on read file: " + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          err("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function(stream) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
        stream.fd = null;
      },isClosed:function(stream) {
        return stream.fd === null;
      },llseek:function(stream, offset, whence) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(70);
        }
        if (whence != 0 && whence != 1 && whence != 2) {
          throw new FS.ErrnoError(28);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function(stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(28);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(8);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(28);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(70);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function(stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(28);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(8);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(28);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(70);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          err("FS.trackingDelegate['onWriteToFile']('"+stream.path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function(stream, offset, length) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(28);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(8);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(43);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(138);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function(stream, buffer, offset, length, position, prot, flags) {
        // User requests writing to file (prot & PROT_WRITE != 0).
        // Checking if we have permissions to write to the file unless
        // MAP_PRIVATE flag is set. According to POSIX spec it is possible
        // to write to file opened in read-only mode with MAP_PRIVATE flag,
        // as all modifications will be visible only in the memory of
        // the current process.
        if ((prot & 2) !== 0
            && (flags & 2) === 0
            && (stream.flags & 2097155) !== 2) {
          throw new FS.ErrnoError(2);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(2);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(43);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function(stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function(stream) {
        return 0;
      },ioctl:function(stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(59);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function(path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function(path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        var stream = FS.open(path, opts.flags, opts.mode);
        if (typeof data === 'string') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, undefined, opts.canOwn);
        } else if (ArrayBuffer.isView(data)) {
          FS.write(stream, data, 0, data.byteLength, undefined, opts.canOwn);
        } else {
          throw new Error('Unsupported data type');
        }
        FS.close(stream);
      },cwd:function() {
        return FS.currentPath;
      },chdir:function(path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (lookup.node === null) {
          throw new FS.ErrnoError(44);
        }
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(54);
        }
        var errCode = FS.nodePermissions(lookup.node, 'x');
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function() {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function() {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto === 'object' && typeof crypto['getRandomValues'] === 'function') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else
        if (ENVIRONMENT_IS_NODE) {
          // for nodejs with or without crypto support included
          try {
            var crypto_module = require('crypto');
            // nodejs has crypto support
            random_device = function() { return crypto_module['randomBytes'](1)[0]; };
          } catch (e) {
            // nodejs doesn't have crypto support
          }
        } else
        {}
        if (!random_device) {
          // we couldn't find a proper implementation, as Math.random() is not suitable for /dev/random, see emscripten-core/emscripten/pull/7096
          random_device = function() { abort("no cryptographic support found for random_device. consider polyfilling it if you want to use something insecure like Math.random(), e.g. put this in a --pre-js: var crypto = { getRandomValues: function(array) { for (var i = 0; i < array.length; i++) array[i] = (Math.random()*256)|0 } };"); };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function() {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 511 /* 0777 */, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(8);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function() {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        var stdout = FS.open('/dev/stdout', 'w');
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function() {
        if (FS.ErrnoError) return;
        FS.ErrnoError = /** @this{Object} */ function ErrnoError(errno, node) {
          this.node = node;
          this.setErrno = /** @this{Object} */ function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
  
          // Try to get a maximally helpful stack trace. On Node.js, getting Error.stack
          // now ensures it shows what we want.
          if (this.stack) {
            // Define the stack property for Node.js 4, which otherwise errors on the next line.
            Object.defineProperty(this, "stack", { value: (new Error).stack, writable: true });
            this.stack = demangleAll(this.stack);
          }
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [44].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function() {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
        };
      },init:function(input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function() {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function(canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function(parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function(relative, base) {
        return PATH_FS.resolve(base, relative);
      },standardizePath:function(path) {
        return PATH.normalize(path);
      },findObject:function(path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function(path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function(parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function(parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function(parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function(parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function(parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(29);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(6);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(29);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function(parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function(obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (read_) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(read_(obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(29);
        return success;
      },createLazyFile:function(parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        /** @constructor */
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = /** @this{Object} */ function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        };
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        };
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(/** @type{Array<number>} */(xhr.response || []));
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            out("LazyFiles on gzip forces download of the whole file when length is accessed");
          }
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        };
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: /** @this{Object} */ function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: /** @this{Object} */ function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: /** @this {FSNode} */ function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(29);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(29);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function(parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init(); // XXX perhaps this method should move onto Browser?
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH_FS.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function() {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function() {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function(paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          out('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function(paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var SYSCALLS={mappings:{},DEFAULT_POLLMASK:5,umask:511,calculateAt:function(dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(8);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function(func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -54;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        (tempI64 = [stat.size>>>0,(tempDouble=stat.size,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((buf)+(40))>>2)]=tempI64[0],HEAP32[(((buf)+(44))>>2)]=tempI64[1]);
        HEAP32[(((buf)+(48))>>2)]=4096;
        HEAP32[(((buf)+(52))>>2)]=stat.blocks;
        HEAP32[(((buf)+(56))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(76))>>2)]=0;
        (tempI64 = [stat.ino>>>0,(tempDouble=stat.ino,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((buf)+(80))>>2)]=tempI64[0],HEAP32[(((buf)+(84))>>2)]=tempI64[1]);
        return 0;
      },doMsync:function(addr, stream, len, flags, offset) {
        var buffer = HEAPU8.slice(addr, addr + len);
        FS.msync(stream, buffer, offset, len, flags);
      },doMkdir:function(path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function(path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -28;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function(path, buf, bufsize) {
        if (bufsize <= 0) return -28;
        var ret = FS.readlink(path);
  
        var len = Math.min(bufsize, lengthBytesUTF8(ret));
        var endChar = HEAP8[buf+len];
        stringToUTF8(ret, buf, bufsize+1);
        // readlink is one of the rare functions that write out a C string, but does never append a null to the output buffer(!)
        // stringToUTF8() always appends a null byte, so restore the character under the null byte after the write.
        HEAP8[buf+len] = endChar;
  
        return len;
      },doAccess:function(path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -28;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        if (!node) {
          return -44;
        }
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -2;
        }
        return 0;
      },doDup:function(path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function(stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function(stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:undefined,get:function() {
        assert(SYSCALLS.varargs != undefined);
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function(ptr) {
        var ret = UTF8ToString(ptr);
        return ret;
      },getStreamFromFD:function(fd) {
        var stream = FS.getStream(fd);
        if (!stream) throw new FS.ErrnoError(8);
        return stream;
      },get64:function(low, high) {
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      }};function ___syscall221(fd, cmd, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fcntl64
      var stream = SYSCALLS.getStreamFromFD(fd);
      switch (cmd) {
        case 0: {
          var arg = SYSCALLS.get();
          if (arg < 0) {
            return -28;
          }
          var newStream;
          newStream = FS.open(stream.path, stream.flags, 0, arg);
          return newStream.fd;
        }
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4: {
          var arg = SYSCALLS.get();
          stream.flags |= arg;
          return 0;
        }
        case 12:
        /* case 12: Currently in musl F_GETLK64 has same value as F_GETLK, so omitted to avoid duplicate case blocks. If that changes, uncomment this */ {
          
          var arg = SYSCALLS.get();
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)]=2;
          return 0;
        }
        case 13:
        case 14:
        /* case 13: Currently in musl F_SETLK64 has same value as F_SETLK, so omitted to avoid duplicate case blocks. If that changes, uncomment this */
        /* case 14: Currently in musl F_SETLKW64 has same value as F_SETLKW, so omitted to avoid duplicate case blocks. If that changes, uncomment this */
          
          
          return 0; // Pretend that the locking is successful.
        case 16:
        case 8:
          return -28; // These are for sockets. We don't have them fully implemented yet.
        case 9:
          // musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fnctl() returns that, and we set errno ourselves.
          ___setErrNo(28);
          return -1;
        default: {
          return -28;
        }
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall5(path, flags, varargs) {SYSCALLS.varargs = varargs;
  try {
   // open
      var pathname = SYSCALLS.getStr(path);
      var mode = SYSCALLS.get();
      var stream = FS.open(pathname, flags, mode);
      return stream.fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall54(fd, op, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      var stream = SYSCALLS.getStreamFromFD(fd);
      switch (op) {
        case 21509:
        case 21505: {
          if (!stream.tty) return -59;
          return 0;
        }
        case 21510:
        case 21511:
        case 21512:
        case 21506:
        case 21507:
        case 21508: {
          if (!stream.tty) return -59;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -59;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -59;
          return -28; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        case 21523: {
          // TODO: in theory we should write to the winsize struct that gets
          // passed in, but for now musl doesn't read anything on it
          if (!stream.tty) return -59;
          return 0;
        }
        case 21524: {
          // TODO: technically, this ioctl call should change the window size.
          // but, since emscripten doesn't have any concept of a terminal window
          // yet, we'll just silently throw it away as we do TIOCGWINSZ
          if (!stream.tty) return -59;
          return 0;
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  function syscallMunmap(addr, len) {
      if (addr === -1 || len === 0) {
        return -28;
      }
      // TODO: support unmmap'ing parts of allocations
      var info = SYSCALLS.mappings[addr];
      if (!info) return 0;
      if (len === info.len) {
        var stream = FS.getStream(info.fd);
        SYSCALLS.doMsync(addr, stream, len, info.flags, info.offset);
        FS.munmap(stream);
        SYSCALLS.mappings[addr] = null;
        if (info.allocated) {
          _free(info.malloc);
        }
      }
      return 0;
    }function ___syscall91(addr, len) {try {
   // munmap
      return syscallMunmap(addr, len);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  function getShiftFromSize(size) {
      switch (size) {
          case 1: return 0;
          case 2: return 1;
          case 4: return 2;
          case 8: return 3;
          default:
              throw new TypeError('Unknown type size: ' + size);
      }
    }
  
  
  
  function embind_init_charCodes() {
      var codes = new Array(256);
      for (var i = 0; i < 256; ++i) {
          codes[i] = String.fromCharCode(i);
      }
      embind_charCodes = codes;
    }var embind_charCodes=undefined;function readLatin1String(ptr) {
      var ret = "";
      var c = ptr;
      while (HEAPU8[c]) {
          ret += embind_charCodes[HEAPU8[c++]];
      }
      return ret;
    }
  
  
  var awaitingDependencies={};
  
  var registeredTypes={};
  
  var typeDependencies={};
  
  
  
  
  
  
  var char_0=48;
  
  var char_9=57;function makeLegalFunctionName(name) {
      if (undefined === name) {
          return '_unknown';
      }
      name = name.replace(/[^a-zA-Z0-9_]/g, '$');
      var f = name.charCodeAt(0);
      if (f >= char_0 && f <= char_9) {
          return '_' + name;
      } else {
          return name;
      }
    }function createNamedFunction(name, body) {
      name = makeLegalFunctionName(name);
      /*jshint evil:true*/
      return new Function(
          "body",
          "return function " + name + "() {\n" +
          "    \"use strict\";" +
          "    return body.apply(this, arguments);\n" +
          "};\n"
      )(body);
    }function extendError(baseErrorType, errorName) {
      var errorClass = createNamedFunction(errorName, function(message) {
          this.name = errorName;
          this.message = message;
  
          var stack = (new Error(message)).stack;
          if (stack !== undefined) {
              this.stack = this.toString() + '\n' +
                  stack.replace(/^Error(:[^\n]*)?\n/, '');
          }
      });
      errorClass.prototype = Object.create(baseErrorType.prototype);
      errorClass.prototype.constructor = errorClass;
      errorClass.prototype.toString = function() {
          if (this.message === undefined) {
              return this.name;
          } else {
              return this.name + ': ' + this.message;
          }
      };
  
      return errorClass;
    }var BindingError=undefined;function throwBindingError(message) {
      throw new BindingError(message);
    }
  
  
  
  var InternalError=undefined;function throwInternalError(message) {
      throw new InternalError(message);
    }function whenDependentTypesAreResolved(myTypes, dependentTypes, getTypeConverters) {
      myTypes.forEach(function(type) {
          typeDependencies[type] = dependentTypes;
      });
  
      function onComplete(typeConverters) {
          var myTypeConverters = getTypeConverters(typeConverters);
          if (myTypeConverters.length !== myTypes.length) {
              throwInternalError('Mismatched type converter count');
          }
          for (var i = 0; i < myTypes.length; ++i) {
              registerType(myTypes[i], myTypeConverters[i]);
          }
      }
  
      var typeConverters = new Array(dependentTypes.length);
      var unregisteredTypes = [];
      var registered = 0;
      dependentTypes.forEach(function(dt, i) {
          if (registeredTypes.hasOwnProperty(dt)) {
              typeConverters[i] = registeredTypes[dt];
          } else {
              unregisteredTypes.push(dt);
              if (!awaitingDependencies.hasOwnProperty(dt)) {
                  awaitingDependencies[dt] = [];
              }
              awaitingDependencies[dt].push(function() {
                  typeConverters[i] = registeredTypes[dt];
                  ++registered;
                  if (registered === unregisteredTypes.length) {
                      onComplete(typeConverters);
                  }
              });
          }
      });
      if (0 === unregisteredTypes.length) {
          onComplete(typeConverters);
      }
    }/** @param {Object=} options */
  function registerType(rawType, registeredInstance, options) {
      options = options || {};
  
      if (!('argPackAdvance' in registeredInstance)) {
          throw new TypeError('registerType registeredInstance requires argPackAdvance');
      }
  
      var name = registeredInstance.name;
      if (!rawType) {
          throwBindingError('type "' + name + '" must have a positive integer typeid pointer');
      }
      if (registeredTypes.hasOwnProperty(rawType)) {
          if (options.ignoreDuplicateRegistrations) {
              return;
          } else {
              throwBindingError("Cannot register type '" + name + "' twice");
          }
      }
  
      registeredTypes[rawType] = registeredInstance;
      delete typeDependencies[rawType];
  
      if (awaitingDependencies.hasOwnProperty(rawType)) {
          var callbacks = awaitingDependencies[rawType];
          delete awaitingDependencies[rawType];
          callbacks.forEach(function(cb) {
              cb();
          });
      }
    }function __embind_register_bool(rawType, name, size, trueValue, falseValue) {
      var shift = getShiftFromSize(size);
  
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(wt) {
              // ambiguous emscripten ABI: sometimes return values are
              // true or false, and sometimes integers (0 or 1)
              return !!wt;
          },
          'toWireType': function(destructors, o) {
              return o ? trueValue : falseValue;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': function(pointer) {
              // TODO: if heap is fixed (like in asm.js) this could be executed outside
              var heap;
              if (size === 1) {
                  heap = HEAP8;
              } else if (size === 2) {
                  heap = HEAP16;
              } else if (size === 4) {
                  heap = HEAP32;
              } else {
                  throw new TypeError("Unknown boolean type size: " + name);
              }
              return this['fromWireType'](heap[pointer >> shift]);
          },
          destructorFunction: null, // This type does not need a destructor
      });
    }

  
  
  
  function ClassHandle_isAliasOf(other) {
      if (!(this instanceof ClassHandle)) {
          return false;
      }
      if (!(other instanceof ClassHandle)) {
          return false;
      }
  
      var leftClass = this.$$.ptrType.registeredClass;
      var left = this.$$.ptr;
      var rightClass = other.$$.ptrType.registeredClass;
      var right = other.$$.ptr;
  
      while (leftClass.baseClass) {
          left = leftClass.upcast(left);
          leftClass = leftClass.baseClass;
      }
  
      while (rightClass.baseClass) {
          right = rightClass.upcast(right);
          rightClass = rightClass.baseClass;
      }
  
      return leftClass === rightClass && left === right;
    }
  
  
  function shallowCopyInternalPointer(o) {
      return {
          count: o.count,
          deleteScheduled: o.deleteScheduled,
          preservePointerOnDelete: o.preservePointerOnDelete,
          ptr: o.ptr,
          ptrType: o.ptrType,
          smartPtr: o.smartPtr,
          smartPtrType: o.smartPtrType,
      };
    }
  
  function throwInstanceAlreadyDeleted(obj) {
      function getInstanceTypeName(handle) {
        return handle.$$.ptrType.registeredClass.name;
      }
      throwBindingError(getInstanceTypeName(obj) + ' instance already deleted');
    }
  
  
  var finalizationGroup=false;
  
  function detachFinalizer(handle) {}
  
  
  function runDestructor($$) {
      if ($$.smartPtr) {
          $$.smartPtrType.rawDestructor($$.smartPtr);
      } else {
          $$.ptrType.registeredClass.rawDestructor($$.ptr);
      }
    }function releaseClassHandle($$) {
      $$.count.value -= 1;
      var toDelete = 0 === $$.count.value;
      if (toDelete) {
          runDestructor($$);
      }
    }function attachFinalizer(handle) {
      if ('undefined' === typeof FinalizationGroup) {
          attachFinalizer = function (handle) { return handle; };
          return handle;
      }
      // If the running environment has a FinalizationGroup (see
      // https://github.com/tc39/proposal-weakrefs), then attach finalizers
      // for class handles.  We check for the presence of FinalizationGroup
      // at run-time, not build-time.
      finalizationGroup = new FinalizationGroup(function (iter) {
          for (var result = iter.next(); !result.done; result = iter.next()) {
              var $$ = result.value;
              if (!$$.ptr) {
                  console.warn('object already deleted: ' + $$.ptr);
              } else {
                  releaseClassHandle($$);
              }
          }
      });
      attachFinalizer = function(handle) {
          finalizationGroup.register(handle, handle.$$, handle.$$);
          return handle;
      };
      detachFinalizer = function(handle) {
          finalizationGroup.unregister(handle.$$);
      };
      return attachFinalizer(handle);
    }function ClassHandle_clone() {
      if (!this.$$.ptr) {
          throwInstanceAlreadyDeleted(this);
      }
  
      if (this.$$.preservePointerOnDelete) {
          this.$$.count.value += 1;
          return this;
      } else {
          var clone = attachFinalizer(Object.create(Object.getPrototypeOf(this), {
              $$: {
                  value: shallowCopyInternalPointer(this.$$),
              }
          }));
  
          clone.$$.count.value += 1;
          clone.$$.deleteScheduled = false;
          return clone;
      }
    }
  
  function ClassHandle_delete() {
      if (!this.$$.ptr) {
          throwInstanceAlreadyDeleted(this);
      }
  
      if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) {
          throwBindingError('Object already scheduled for deletion');
      }
  
      detachFinalizer(this);
      releaseClassHandle(this.$$);
  
      if (!this.$$.preservePointerOnDelete) {
          this.$$.smartPtr = undefined;
          this.$$.ptr = undefined;
      }
    }
  
  function ClassHandle_isDeleted() {
      return !this.$$.ptr;
    }
  
  
  var delayFunction=undefined;
  
  var deletionQueue=[];
  
  function flushPendingDeletes() {
      while (deletionQueue.length) {
          var obj = deletionQueue.pop();
          obj.$$.deleteScheduled = false;
          obj['delete']();
      }
    }function ClassHandle_deleteLater() {
      if (!this.$$.ptr) {
          throwInstanceAlreadyDeleted(this);
      }
      if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) {
          throwBindingError('Object already scheduled for deletion');
      }
      deletionQueue.push(this);
      if (deletionQueue.length === 1 && delayFunction) {
          delayFunction(flushPendingDeletes);
      }
      this.$$.deleteScheduled = true;
      return this;
    }function init_ClassHandle() {
      ClassHandle.prototype['isAliasOf'] = ClassHandle_isAliasOf;
      ClassHandle.prototype['clone'] = ClassHandle_clone;
      ClassHandle.prototype['delete'] = ClassHandle_delete;
      ClassHandle.prototype['isDeleted'] = ClassHandle_isDeleted;
      ClassHandle.prototype['deleteLater'] = ClassHandle_deleteLater;
    }function ClassHandle() {
    }
  
  var registeredPointers={};
  
  
  function ensureOverloadTable(proto, methodName, humanName) {
      if (undefined === proto[methodName].overloadTable) {
          var prevFunc = proto[methodName];
          // Inject an overload resolver function that routes to the appropriate overload based on the number of arguments.
          proto[methodName] = function() {
              // TODO This check can be removed in -O3 level "unsafe" optimizations.
              if (!proto[methodName].overloadTable.hasOwnProperty(arguments.length)) {
                  throwBindingError("Function '" + humanName + "' called with an invalid number of arguments (" + arguments.length + ") - expects one of (" + proto[methodName].overloadTable + ")!");
              }
              return proto[methodName].overloadTable[arguments.length].apply(this, arguments);
          };
          // Move the previous function into the overload table.
          proto[methodName].overloadTable = [];
          proto[methodName].overloadTable[prevFunc.argCount] = prevFunc;
      }
    }/** @param {number=} numArguments */
  function exposePublicSymbol(name, value, numArguments) {
      if (Module.hasOwnProperty(name)) {
          if (undefined === numArguments || (undefined !== Module[name].overloadTable && undefined !== Module[name].overloadTable[numArguments])) {
              throwBindingError("Cannot register public name '" + name + "' twice");
          }
  
          // We are exposing a function with the same name as an existing function. Create an overload table and a function selector
          // that routes between the two.
          ensureOverloadTable(Module, name, name);
          if (Module.hasOwnProperty(numArguments)) {
              throwBindingError("Cannot register multiple overloads of a function with the same number of arguments (" + numArguments + ")!");
          }
          // Add the new function into the overload table.
          Module[name].overloadTable[numArguments] = value;
      }
      else {
          Module[name] = value;
          if (undefined !== numArguments) {
              Module[name].numArguments = numArguments;
          }
      }
    }
  
  /** @constructor */
  function RegisteredClass(
      name,
      constructor,
      instancePrototype,
      rawDestructor,
      baseClass,
      getActualType,
      upcast,
      downcast
    ) {
      this.name = name;
      this.constructor = constructor;
      this.instancePrototype = instancePrototype;
      this.rawDestructor = rawDestructor;
      this.baseClass = baseClass;
      this.getActualType = getActualType;
      this.upcast = upcast;
      this.downcast = downcast;
      this.pureVirtualFunctions = [];
    }
  
  
  
  function upcastPointer(ptr, ptrClass, desiredClass) {
      while (ptrClass !== desiredClass) {
          if (!ptrClass.upcast) {
              throwBindingError("Expected null or instance of " + desiredClass.name + ", got an instance of " + ptrClass.name);
          }
          ptr = ptrClass.upcast(ptr);
          ptrClass = ptrClass.baseClass;
      }
      return ptr;
    }function constNoSmartPtrRawPointerToWireType(destructors, handle) {
      if (handle === null) {
          if (this.isReference) {
              throwBindingError('null is not a valid ' + this.name);
          }
          return 0;
      }
  
      if (!handle.$$) {
          throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
      }
      if (!handle.$$.ptr) {
          throwBindingError('Cannot pass deleted object as a pointer of type ' + this.name);
      }
      var handleClass = handle.$$.ptrType.registeredClass;
      var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
      return ptr;
    }
  
  function genericPointerToWireType(destructors, handle) {
      var ptr;
      if (handle === null) {
          if (this.isReference) {
              throwBindingError('null is not a valid ' + this.name);
          }
  
          if (this.isSmartPointer) {
              ptr = this.rawConstructor();
              if (destructors !== null) {
                  destructors.push(this.rawDestructor, ptr);
              }
              return ptr;
          } else {
              return 0;
          }
      }
  
      if (!handle.$$) {
          throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
      }
      if (!handle.$$.ptr) {
          throwBindingError('Cannot pass deleted object as a pointer of type ' + this.name);
      }
      if (!this.isConst && handle.$$.ptrType.isConst) {
          throwBindingError('Cannot convert argument of type ' + (handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name) + ' to parameter type ' + this.name);
      }
      var handleClass = handle.$$.ptrType.registeredClass;
      ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
  
      if (this.isSmartPointer) {
          // TODO: this is not strictly true
          // We could support BY_EMVAL conversions from raw pointers to smart pointers
          // because the smart pointer can hold a reference to the handle
          if (undefined === handle.$$.smartPtr) {
              throwBindingError('Passing raw pointer to smart pointer is illegal');
          }
  
          switch (this.sharingPolicy) {
              case 0: // NONE
                  // no upcasting
                  if (handle.$$.smartPtrType === this) {
                      ptr = handle.$$.smartPtr;
                  } else {
                      throwBindingError('Cannot convert argument of type ' + (handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name) + ' to parameter type ' + this.name);
                  }
                  break;
  
              case 1: // INTRUSIVE
                  ptr = handle.$$.smartPtr;
                  break;
  
              case 2: // BY_EMVAL
                  if (handle.$$.smartPtrType === this) {
                      ptr = handle.$$.smartPtr;
                  } else {
                      var clonedHandle = handle['clone']();
                      ptr = this.rawShare(
                          ptr,
                          __emval_register(function() {
                              clonedHandle['delete']();
                          })
                      );
                      if (destructors !== null) {
                          destructors.push(this.rawDestructor, ptr);
                      }
                  }
                  break;
  
              default:
                  throwBindingError('Unsupporting sharing policy');
          }
      }
      return ptr;
    }
  
  function nonConstNoSmartPtrRawPointerToWireType(destructors, handle) {
      if (handle === null) {
          if (this.isReference) {
              throwBindingError('null is not a valid ' + this.name);
          }
          return 0;
      }
  
      if (!handle.$$) {
          throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
      }
      if (!handle.$$.ptr) {
          throwBindingError('Cannot pass deleted object as a pointer of type ' + this.name);
      }
      if (handle.$$.ptrType.isConst) {
          throwBindingError('Cannot convert argument of type ' + handle.$$.ptrType.name + ' to parameter type ' + this.name);
      }
      var handleClass = handle.$$.ptrType.registeredClass;
      var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
      return ptr;
    }
  
  
  function simpleReadValueFromPointer(pointer) {
      return this['fromWireType'](HEAPU32[pointer >> 2]);
    }
  
  function RegisteredPointer_getPointee(ptr) {
      if (this.rawGetPointee) {
          ptr = this.rawGetPointee(ptr);
      }
      return ptr;
    }
  
  function RegisteredPointer_destructor(ptr) {
      if (this.rawDestructor) {
          this.rawDestructor(ptr);
      }
    }
  
  function RegisteredPointer_deleteObject(handle) {
      if (handle !== null) {
          handle['delete']();
      }
    }
  
  
  function downcastPointer(ptr, ptrClass, desiredClass) {
      if (ptrClass === desiredClass) {
          return ptr;
      }
      if (undefined === desiredClass.baseClass) {
          return null; // no conversion
      }
  
      var rv = downcastPointer(ptr, ptrClass, desiredClass.baseClass);
      if (rv === null) {
          return null;
      }
      return desiredClass.downcast(rv);
    }
  
  
  
  
  function getInheritedInstanceCount() {
      return Object.keys(registeredInstances).length;
    }
  
  function getLiveInheritedInstances() {
      var rv = [];
      for (var k in registeredInstances) {
          if (registeredInstances.hasOwnProperty(k)) {
              rv.push(registeredInstances[k]);
          }
      }
      return rv;
    }
  
  function setDelayFunction(fn) {
      delayFunction = fn;
      if (deletionQueue.length && delayFunction) {
          delayFunction(flushPendingDeletes);
      }
    }function init_embind() {
      Module['getInheritedInstanceCount'] = getInheritedInstanceCount;
      Module['getLiveInheritedInstances'] = getLiveInheritedInstances;
      Module['flushPendingDeletes'] = flushPendingDeletes;
      Module['setDelayFunction'] = setDelayFunction;
    }var registeredInstances={};
  
  function getBasestPointer(class_, ptr) {
      if (ptr === undefined) {
          throwBindingError('ptr should not be undefined');
      }
      while (class_.baseClass) {
          ptr = class_.upcast(ptr);
          class_ = class_.baseClass;
      }
      return ptr;
    }function getInheritedInstance(class_, ptr) {
      ptr = getBasestPointer(class_, ptr);
      return registeredInstances[ptr];
    }
  
  function makeClassHandle(prototype, record) {
      if (!record.ptrType || !record.ptr) {
          throwInternalError('makeClassHandle requires ptr and ptrType');
      }
      var hasSmartPtrType = !!record.smartPtrType;
      var hasSmartPtr = !!record.smartPtr;
      if (hasSmartPtrType !== hasSmartPtr) {
          throwInternalError('Both smartPtrType and smartPtr must be specified');
      }
      record.count = { value: 1 };
      return attachFinalizer(Object.create(prototype, {
          $$: {
              value: record,
          },
      }));
    }function RegisteredPointer_fromWireType(ptr) {
      // ptr is a raw pointer (or a raw smartpointer)
  
      // rawPointer is a maybe-null raw pointer
      var rawPointer = this.getPointee(ptr);
      if (!rawPointer) {
          this.destructor(ptr);
          return null;
      }
  
      var registeredInstance = getInheritedInstance(this.registeredClass, rawPointer);
      if (undefined !== registeredInstance) {
          // JS object has been neutered, time to repopulate it
          if (0 === registeredInstance.$$.count.value) {
              registeredInstance.$$.ptr = rawPointer;
              registeredInstance.$$.smartPtr = ptr;
              return registeredInstance['clone']();
          } else {
              // else, just increment reference count on existing object
              // it already has a reference to the smart pointer
              var rv = registeredInstance['clone']();
              this.destructor(ptr);
              return rv;
          }
      }
  
      function makeDefaultHandle() {
          if (this.isSmartPointer) {
              return makeClassHandle(this.registeredClass.instancePrototype, {
                  ptrType: this.pointeeType,
                  ptr: rawPointer,
                  smartPtrType: this,
                  smartPtr: ptr,
              });
          } else {
              return makeClassHandle(this.registeredClass.instancePrototype, {
                  ptrType: this,
                  ptr: ptr,
              });
          }
      }
  
      var actualType = this.registeredClass.getActualType(rawPointer);
      var registeredPointerRecord = registeredPointers[actualType];
      if (!registeredPointerRecord) {
          return makeDefaultHandle.call(this);
      }
  
      var toType;
      if (this.isConst) {
          toType = registeredPointerRecord.constPointerType;
      } else {
          toType = registeredPointerRecord.pointerType;
      }
      var dp = downcastPointer(
          rawPointer,
          this.registeredClass,
          toType.registeredClass);
      if (dp === null) {
          return makeDefaultHandle.call(this);
      }
      if (this.isSmartPointer) {
          return makeClassHandle(toType.registeredClass.instancePrototype, {
              ptrType: toType,
              ptr: dp,
              smartPtrType: this,
              smartPtr: ptr,
          });
      } else {
          return makeClassHandle(toType.registeredClass.instancePrototype, {
              ptrType: toType,
              ptr: dp,
          });
      }
    }function init_RegisteredPointer() {
      RegisteredPointer.prototype.getPointee = RegisteredPointer_getPointee;
      RegisteredPointer.prototype.destructor = RegisteredPointer_destructor;
      RegisteredPointer.prototype['argPackAdvance'] = 8;
      RegisteredPointer.prototype['readValueFromPointer'] = simpleReadValueFromPointer;
      RegisteredPointer.prototype['deleteObject'] = RegisteredPointer_deleteObject;
      RegisteredPointer.prototype['fromWireType'] = RegisteredPointer_fromWireType;
    }/** @constructor
      @param {*=} pointeeType,
      @param {*=} sharingPolicy,
      @param {*=} rawGetPointee,
      @param {*=} rawConstructor,
      @param {*=} rawShare,
      @param {*=} rawDestructor,
       */
  function RegisteredPointer(
      name,
      registeredClass,
      isReference,
      isConst,
  
      // smart pointer properties
      isSmartPointer,
      pointeeType,
      sharingPolicy,
      rawGetPointee,
      rawConstructor,
      rawShare,
      rawDestructor
    ) {
      this.name = name;
      this.registeredClass = registeredClass;
      this.isReference = isReference;
      this.isConst = isConst;
  
      // smart pointer properties
      this.isSmartPointer = isSmartPointer;
      this.pointeeType = pointeeType;
      this.sharingPolicy = sharingPolicy;
      this.rawGetPointee = rawGetPointee;
      this.rawConstructor = rawConstructor;
      this.rawShare = rawShare;
      this.rawDestructor = rawDestructor;
  
      if (!isSmartPointer && registeredClass.baseClass === undefined) {
          if (isConst) {
              this['toWireType'] = constNoSmartPtrRawPointerToWireType;
              this.destructorFunction = null;
          } else {
              this['toWireType'] = nonConstNoSmartPtrRawPointerToWireType;
              this.destructorFunction = null;
          }
      } else {
          this['toWireType'] = genericPointerToWireType;
          // Here we must leave this.destructorFunction undefined, since whether genericPointerToWireType returns
          // a pointer that needs to be freed up is runtime-dependent, and cannot be evaluated at registration time.
          // TODO: Create an alternative mechanism that allows removing the use of var destructors = []; array in
          //       craftInvokerFunction altogether.
      }
    }
  
  /** @param {number=} numArguments */
  function replacePublicSymbol(name, value, numArguments) {
      if (!Module.hasOwnProperty(name)) {
          throwInternalError('Replacing nonexistant public symbol');
      }
      // If there's an overload table for this symbol, replace the symbol in the overload table instead.
      if (undefined !== Module[name].overloadTable && undefined !== numArguments) {
          Module[name].overloadTable[numArguments] = value;
      }
      else {
          Module[name] = value;
          Module[name].argCount = numArguments;
      }
    }
  
  function embind__requireFunction(signature, rawFunction) {
      signature = readLatin1String(signature);
  
      function makeDynCaller(dynCall) {
          var args = [];
          for (var i = 1; i < signature.length; ++i) {
              args.push('a' + i);
          }
  
          var name = 'dynCall_' + signature + '_' + rawFunction;
          var body = 'return function ' + name + '(' + args.join(', ') + ') {\n';
          body    += '    return dynCall(rawFunction' + (args.length ? ', ' : '') + args.join(', ') + ');\n';
          body    += '};\n';
  
          return (new Function('dynCall', 'rawFunction', body))(dynCall, rawFunction);
      }
  
      var dc = Module['dynCall_' + signature];
      var fp = makeDynCaller(dc);
  
      if (typeof fp !== "function") {
          throwBindingError("unknown function pointer with signature " + signature + ": " + rawFunction);
      }
      return fp;
    }
  
  
  var UnboundTypeError=undefined;
  
  function getTypeName(type) {
      var ptr = ___getTypeName(type);
      var rv = readLatin1String(ptr);
      _free(ptr);
      return rv;
    }function throwUnboundTypeError(message, types) {
      var unboundTypes = [];
      var seen = {};
      function visit(type) {
          if (seen[type]) {
              return;
          }
          if (registeredTypes[type]) {
              return;
          }
          if (typeDependencies[type]) {
              typeDependencies[type].forEach(visit);
              return;
          }
          unboundTypes.push(type);
          seen[type] = true;
      }
      types.forEach(visit);
  
      throw new UnboundTypeError(message + ': ' + unboundTypes.map(getTypeName).join([', ']));
    }function __embind_register_class(
      rawType,
      rawPointerType,
      rawConstPointerType,
      baseClassRawType,
      getActualTypeSignature,
      getActualType,
      upcastSignature,
      upcast,
      downcastSignature,
      downcast,
      name,
      destructorSignature,
      rawDestructor
    ) {
      name = readLatin1String(name);
      getActualType = embind__requireFunction(getActualTypeSignature, getActualType);
      if (upcast) {
          upcast = embind__requireFunction(upcastSignature, upcast);
      }
      if (downcast) {
          downcast = embind__requireFunction(downcastSignature, downcast);
      }
      rawDestructor = embind__requireFunction(destructorSignature, rawDestructor);
      var legalFunctionName = makeLegalFunctionName(name);
  
      exposePublicSymbol(legalFunctionName, function() {
          // this code cannot run if baseClassRawType is zero
          throwUnboundTypeError('Cannot construct ' + name + ' due to unbound types', [baseClassRawType]);
      });
  
      whenDependentTypesAreResolved(
          [rawType, rawPointerType, rawConstPointerType],
          baseClassRawType ? [baseClassRawType] : [],
          function(base) {
              base = base[0];
  
              var baseClass;
              var basePrototype;
              if (baseClassRawType) {
                  baseClass = base.registeredClass;
                  basePrototype = baseClass.instancePrototype;
              } else {
                  basePrototype = ClassHandle.prototype;
              }
  
              var constructor = createNamedFunction(legalFunctionName, function() {
                  if (Object.getPrototypeOf(this) !== instancePrototype) {
                      throw new BindingError("Use 'new' to construct " + name);
                  }
                  if (undefined === registeredClass.constructor_body) {
                      throw new BindingError(name + " has no accessible constructor");
                  }
                  var body = registeredClass.constructor_body[arguments.length];
                  if (undefined === body) {
                      throw new BindingError("Tried to invoke ctor of " + name + " with invalid number of parameters (" + arguments.length + ") - expected (" + Object.keys(registeredClass.constructor_body).toString() + ") parameters instead!");
                  }
                  return body.apply(this, arguments);
              });
  
              var instancePrototype = Object.create(basePrototype, {
                  constructor: { value: constructor },
              });
  
              constructor.prototype = instancePrototype;
  
              var registeredClass = new RegisteredClass(
                  name,
                  constructor,
                  instancePrototype,
                  rawDestructor,
                  baseClass,
                  getActualType,
                  upcast,
                  downcast);
  
              var referenceConverter = new RegisteredPointer(
                  name,
                  registeredClass,
                  true,
                  false,
                  false);
  
              var pointerConverter = new RegisteredPointer(
                  name + '*',
                  registeredClass,
                  false,
                  false,
                  false);
  
              var constPointerConverter = new RegisteredPointer(
                  name + ' const*',
                  registeredClass,
                  false,
                  true,
                  false);
  
              registeredPointers[rawType] = {
                  pointerType: pointerConverter,
                  constPointerType: constPointerConverter
              };
  
              replacePublicSymbol(legalFunctionName, constructor);
  
              return [referenceConverter, pointerConverter, constPointerConverter];
          }
      );
    }

  
  
  function new_(constructor, argumentList) {
      if (!(constructor instanceof Function)) {
          throw new TypeError('new_ called with constructor type ' + typeof(constructor) + " which is not a function");
      }
  
      /*
       * Previously, the following line was just:
  
       function dummy() {};
  
       * Unfortunately, Chrome was preserving 'dummy' as the object's name, even though at creation, the 'dummy' has the
       * correct constructor name.  Thus, objects created with IMVU.new would show up in the debugger as 'dummy', which
       * isn't very helpful.  Using IMVU.createNamedFunction addresses the issue.  Doublely-unfortunately, there's no way
       * to write a test for this behavior.  -NRD 2013.02.22
       */
      var dummy = createNamedFunction(constructor.name || 'unknownFunctionName', function(){});
      dummy.prototype = constructor.prototype;
      var obj = new dummy;
  
      var r = constructor.apply(obj, argumentList);
      return (r instanceof Object) ? r : obj;
    }
  
  function runDestructors(destructors) {
      while (destructors.length) {
          var ptr = destructors.pop();
          var del = destructors.pop();
          del(ptr);
      }
    }function craftInvokerFunction(humanName, argTypes, classType, cppInvokerFunc, cppTargetFunc) {
      // humanName: a human-readable string name for the function to be generated.
      // argTypes: An array that contains the embind type objects for all types in the function signature.
      //    argTypes[0] is the type object for the function return value.
      //    argTypes[1] is the type object for function this object/class type, or null if not crafting an invoker for a class method.
      //    argTypes[2...] are the actual function parameters.
      // classType: The embind type object for the class to be bound, or null if this is not a method of a class.
      // cppInvokerFunc: JS Function object to the C++-side function that interops into C++ code.
      // cppTargetFunc: Function pointer (an integer to FUNCTION_TABLE) to the target C++ function the cppInvokerFunc will end up calling.
      var argCount = argTypes.length;
  
      if (argCount < 2) {
          throwBindingError("argTypes array size mismatch! Must at least get return value and 'this' types!");
      }
  
      var isClassMethodFunc = (argTypes[1] !== null && classType !== null);
  
      // Free functions with signature "void function()" do not need an invoker that marshalls between wire types.
  // TODO: This omits argument count check - enable only at -O3 or similar.
  //    if (ENABLE_UNSAFE_OPTS && argCount == 2 && argTypes[0].name == "void" && !isClassMethodFunc) {
  //       return FUNCTION_TABLE[fn];
  //    }
  
  
      // Determine if we need to use a dynamic stack to store the destructors for the function parameters.
      // TODO: Remove this completely once all function invokers are being dynamically generated.
      var needsDestructorStack = false;
  
      for(var i = 1; i < argTypes.length; ++i) { // Skip return value at index 0 - it's not deleted here.
          if (argTypes[i] !== null && argTypes[i].destructorFunction === undefined) { // The type does not define a destructor function - must use dynamic stack
              needsDestructorStack = true;
              break;
          }
      }
  
      var returns = (argTypes[0].name !== "void");
  
      var argsList = "";
      var argsListWired = "";
      for(var i = 0; i < argCount - 2; ++i) {
          argsList += (i!==0?", ":"")+"arg"+i;
          argsListWired += (i!==0?", ":"")+"arg"+i+"Wired";
      }
  
      var invokerFnBody =
          "return function "+makeLegalFunctionName(humanName)+"("+argsList+") {\n" +
          "if (arguments.length !== "+(argCount - 2)+") {\n" +
              "throwBindingError('function "+humanName+" called with ' + arguments.length + ' arguments, expected "+(argCount - 2)+" args!');\n" +
          "}\n";
  
  
      if (needsDestructorStack) {
          invokerFnBody +=
              "var destructors = [];\n";
      }
  
      var dtorStack = needsDestructorStack ? "destructors" : "null";
      var args1 = ["throwBindingError", "invoker", "fn", "runDestructors", "retType", "classParam"];
      var args2 = [throwBindingError, cppInvokerFunc, cppTargetFunc, runDestructors, argTypes[0], argTypes[1]];
  
  
      if (isClassMethodFunc) {
          invokerFnBody += "var thisWired = classParam.toWireType("+dtorStack+", this);\n";
      }
  
      for(var i = 0; i < argCount - 2; ++i) {
          invokerFnBody += "var arg"+i+"Wired = argType"+i+".toWireType("+dtorStack+", arg"+i+"); // "+argTypes[i+2].name+"\n";
          args1.push("argType"+i);
          args2.push(argTypes[i+2]);
      }
  
      if (isClassMethodFunc) {
          argsListWired = "thisWired" + (argsListWired.length > 0 ? ", " : "") + argsListWired;
      }
  
      invokerFnBody +=
          (returns?"var rv = ":"") + "invoker(fn"+(argsListWired.length>0?", ":"")+argsListWired+");\n";
  
      if (needsDestructorStack) {
          invokerFnBody += "runDestructors(destructors);\n";
      } else {
          for(var i = isClassMethodFunc?1:2; i < argTypes.length; ++i) { // Skip return value at index 0 - it's not deleted here. Also skip class type if not a method.
              var paramName = (i === 1 ? "thisWired" : ("arg"+(i - 2)+"Wired"));
              if (argTypes[i].destructorFunction !== null) {
                  invokerFnBody += paramName+"_dtor("+paramName+"); // "+argTypes[i].name+"\n";
                  args1.push(paramName+"_dtor");
                  args2.push(argTypes[i].destructorFunction);
              }
          }
      }
  
      if (returns) {
          invokerFnBody += "var ret = retType.fromWireType(rv);\n" +
                           "return ret;\n";
      } else {
      }
      invokerFnBody += "}\n";
  
      args1.push(invokerFnBody);
  
      var invokerFunction = new_(Function, args1).apply(null, args2);
      return invokerFunction;
    }
  
  function heap32VectorToArray(count, firstElement) {
      var array = [];
      for (var i = 0; i < count; i++) {
          array.push(HEAP32[(firstElement >> 2) + i]);
      }
      return array;
    }function __embind_register_class_class_function(
      rawClassType,
      methodName,
      argCount,
      rawArgTypesAddr,
      invokerSignature,
      rawInvoker,
      fn
    ) {
      var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
      methodName = readLatin1String(methodName);
      rawInvoker = embind__requireFunction(invokerSignature, rawInvoker);
      whenDependentTypesAreResolved([], [rawClassType], function(classType) {
          classType = classType[0];
          var humanName = classType.name + '.' + methodName;
  
          function unboundTypesHandler() {
              throwUnboundTypeError('Cannot call ' + humanName + ' due to unbound types', rawArgTypes);
          }
  
          var proto = classType.registeredClass.constructor;
          if (undefined === proto[methodName]) {
              // This is the first function to be registered with this name.
              unboundTypesHandler.argCount = argCount-1;
              proto[methodName] = unboundTypesHandler;
          } else {
              // There was an existing function with the same name registered. Set up a function overload routing table.
              ensureOverloadTable(proto, methodName, humanName);
              proto[methodName].overloadTable[argCount-1] = unboundTypesHandler;
          }
  
          whenDependentTypesAreResolved([], rawArgTypes, function(argTypes) {
              // Replace the initial unbound-types-handler stub with the proper function. If multiple overloads are registered,
              // the function handlers go into an overload table.
              var invokerArgsArray = [argTypes[0] /* return value */, null /* no class 'this'*/].concat(argTypes.slice(1) /* actual params */);
              var func = craftInvokerFunction(humanName, invokerArgsArray, null /* no class 'this'*/, rawInvoker, fn);
              if (undefined === proto[methodName].overloadTable) {
                  func.argCount = argCount-1;
                  proto[methodName] = func;
              } else {
                  proto[methodName].overloadTable[argCount-1] = func;
              }
              return [];
          });
          return [];
      });
    }

  function __embind_register_class_constructor(
      rawClassType,
      argCount,
      rawArgTypesAddr,
      invokerSignature,
      invoker,
      rawConstructor
    ) {
      assert(argCount > 0);
      var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
      invoker = embind__requireFunction(invokerSignature, invoker);
      var args = [rawConstructor];
      var destructors = [];
  
      whenDependentTypesAreResolved([], [rawClassType], function(classType) {
          classType = classType[0];
          var humanName = 'constructor ' + classType.name;
  
          if (undefined === classType.registeredClass.constructor_body) {
              classType.registeredClass.constructor_body = [];
          }
          if (undefined !== classType.registeredClass.constructor_body[argCount - 1]) {
              throw new BindingError("Cannot register multiple constructors with identical number of parameters (" + (argCount-1) + ") for class '" + classType.name + "'! Overload resolution is currently only performed using the parameter count, not actual type info!");
          }
          classType.registeredClass.constructor_body[argCount - 1] = function unboundTypeHandler() {
              throwUnboundTypeError('Cannot construct ' + classType.name + ' due to unbound types', rawArgTypes);
          };
  
          whenDependentTypesAreResolved([], rawArgTypes, function(argTypes) {
              classType.registeredClass.constructor_body[argCount - 1] = function constructor_body() {
                  if (arguments.length !== argCount - 1) {
                      throwBindingError(humanName + ' called with ' + arguments.length + ' arguments, expected ' + (argCount-1));
                  }
                  destructors.length = 0;
                  args.length = argCount;
                  for (var i = 1; i < argCount; ++i) {
                      args[i] = argTypes[i]['toWireType'](destructors, arguments[i - 1]);
                  }
  
                  var ptr = invoker.apply(null, args);
                  runDestructors(destructors);
  
                  return argTypes[0]['fromWireType'](ptr);
              };
              return [];
          });
          return [];
      });
    }

  function __embind_register_class_function(
      rawClassType,
      methodName,
      argCount,
      rawArgTypesAddr, // [ReturnType, ThisType, Args...]
      invokerSignature,
      rawInvoker,
      context,
      isPureVirtual
    ) {
      var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
      methodName = readLatin1String(methodName);
      rawInvoker = embind__requireFunction(invokerSignature, rawInvoker);
  
      whenDependentTypesAreResolved([], [rawClassType], function(classType) {
          classType = classType[0];
          var humanName = classType.name + '.' + methodName;
  
          if (isPureVirtual) {
              classType.registeredClass.pureVirtualFunctions.push(methodName);
          }
  
          function unboundTypesHandler() {
              throwUnboundTypeError('Cannot call ' + humanName + ' due to unbound types', rawArgTypes);
          }
  
          var proto = classType.registeredClass.instancePrototype;
          var method = proto[methodName];
          if (undefined === method || (undefined === method.overloadTable && method.className !== classType.name && method.argCount === argCount - 2)) {
              // This is the first overload to be registered, OR we are replacing a function in the base class with a function in the derived class.
              unboundTypesHandler.argCount = argCount - 2;
              unboundTypesHandler.className = classType.name;
              proto[methodName] = unboundTypesHandler;
          } else {
              // There was an existing function with the same name registered. Set up a function overload routing table.
              ensureOverloadTable(proto, methodName, humanName);
              proto[methodName].overloadTable[argCount - 2] = unboundTypesHandler;
          }
  
          whenDependentTypesAreResolved([], rawArgTypes, function(argTypes) {
  
              var memberFunction = craftInvokerFunction(humanName, argTypes, classType, rawInvoker, context);
  
              // Replace the initial unbound-handler-stub function with the appropriate member function, now that all types
              // are resolved. If multiple overloads are registered for this function, the function goes into an overload table.
              if (undefined === proto[methodName].overloadTable) {
                  // Set argCount in case an overload is registered later
                  memberFunction.argCount = argCount - 2;
                  proto[methodName] = memberFunction;
              } else {
                  proto[methodName].overloadTable[argCount - 2] = memberFunction;
              }
  
              return [];
          });
          return [];
      });
    }

  
  function validateThis(this_, classType, humanName) {
      if (!(this_ instanceof Object)) {
          throwBindingError(humanName + ' with invalid "this": ' + this_);
      }
      if (!(this_ instanceof classType.registeredClass.constructor)) {
          throwBindingError(humanName + ' incompatible with "this" of type ' + this_.constructor.name);
      }
      if (!this_.$$.ptr) {
          throwBindingError('cannot call emscripten binding method ' + humanName + ' on deleted object');
      }
  
      // todo: kill this
      return upcastPointer(
          this_.$$.ptr,
          this_.$$.ptrType.registeredClass,
          classType.registeredClass);
    }function __embind_register_class_property(
      classType,
      fieldName,
      getterReturnType,
      getterSignature,
      getter,
      getterContext,
      setterArgumentType,
      setterSignature,
      setter,
      setterContext
    ) {
      fieldName = readLatin1String(fieldName);
      getter = embind__requireFunction(getterSignature, getter);
  
      whenDependentTypesAreResolved([], [classType], function(classType) {
          classType = classType[0];
          var humanName = classType.name + '.' + fieldName;
          var desc = {
              get: function() {
                  throwUnboundTypeError('Cannot access ' + humanName + ' due to unbound types', [getterReturnType, setterArgumentType]);
              },
              enumerable: true,
              configurable: true
          };
          if (setter) {
              desc.set = function() {
                  throwUnboundTypeError('Cannot access ' + humanName + ' due to unbound types', [getterReturnType, setterArgumentType]);
              };
          } else {
              desc.set = function(v) {
                  throwBindingError(humanName + ' is a read-only property');
              };
          }
  
          Object.defineProperty(classType.registeredClass.instancePrototype, fieldName, desc);
  
          whenDependentTypesAreResolved(
              [],
              (setter ? [getterReturnType, setterArgumentType] : [getterReturnType]),
          function(types) {
              var getterReturnType = types[0];
              var desc = {
                  get: function() {
                      var ptr = validateThis(this, classType, humanName + ' getter');
                      return getterReturnType['fromWireType'](getter(getterContext, ptr));
                  },
                  enumerable: true
              };
  
              if (setter) {
                  setter = embind__requireFunction(setterSignature, setter);
                  var setterArgumentType = types[1];
                  desc.set = function(v) {
                      var ptr = validateThis(this, classType, humanName + ' setter');
                      var destructors = [];
                      setter(setterContext, ptr, setterArgumentType['toWireType'](destructors, v));
                      runDestructors(destructors);
                  };
              }
  
              Object.defineProperty(classType.registeredClass.instancePrototype, fieldName, desc);
              return [];
          });
  
          return [];
      });
    }

  
  
  var emval_free_list=[];
  
  var emval_handle_array=[{},{value:undefined},{value:null},{value:true},{value:false}];function __emval_decref(handle) {
      if (handle > 4 && 0 === --emval_handle_array[handle].refcount) {
          emval_handle_array[handle] = undefined;
          emval_free_list.push(handle);
      }
    }
  
  
  
  function count_emval_handles() {
      var count = 0;
      for (var i = 5; i < emval_handle_array.length; ++i) {
          if (emval_handle_array[i] !== undefined) {
              ++count;
          }
      }
      return count;
    }
  
  function get_first_emval() {
      for (var i = 5; i < emval_handle_array.length; ++i) {
          if (emval_handle_array[i] !== undefined) {
              return emval_handle_array[i];
          }
      }
      return null;
    }function init_emval() {
      Module['count_emval_handles'] = count_emval_handles;
      Module['get_first_emval'] = get_first_emval;
    }function __emval_register(value) {
  
      switch(value){
        case undefined :{ return 1; }
        case null :{ return 2; }
        case true :{ return 3; }
        case false :{ return 4; }
        default:{
          var handle = emval_free_list.length ?
              emval_free_list.pop() :
              emval_handle_array.length;
  
          emval_handle_array[handle] = {refcount: 1, value: value};
          return handle;
          }
        }
    }function __embind_register_emval(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(handle) {
              var rv = emval_handle_array[handle].value;
              __emval_decref(handle);
              return rv;
          },
          'toWireType': function(destructors, value) {
              return __emval_register(value);
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: null, // This type does not need a destructor
  
          // TODO: do we need a deleteObject here?  write a test where
          // emval is passed into JS via an interface
      });
    }

  
  function enumReadValueFromPointer(name, shift, signed) {
      switch (shift) {
          case 0: return function(pointer) {
              var heap = signed ? HEAP8 : HEAPU8;
              return this['fromWireType'](heap[pointer]);
          };
          case 1: return function(pointer) {
              var heap = signed ? HEAP16 : HEAPU16;
              return this['fromWireType'](heap[pointer >> 1]);
          };
          case 2: return function(pointer) {
              var heap = signed ? HEAP32 : HEAPU32;
              return this['fromWireType'](heap[pointer >> 2]);
          };
          default:
              throw new TypeError("Unknown integer type: " + name);
      }
    }function __embind_register_enum(
      rawType,
      name,
      size,
      isSigned
    ) {
      var shift = getShiftFromSize(size);
      name = readLatin1String(name);
  
      function ctor() {
      }
      ctor.values = {};
  
      registerType(rawType, {
          name: name,
          constructor: ctor,
          'fromWireType': function(c) {
              return this.constructor.values[c];
          },
          'toWireType': function(destructors, c) {
              return c.value;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': enumReadValueFromPointer(name, shift, isSigned),
          destructorFunction: null,
      });
      exposePublicSymbol(name, ctor);
    }

  
  function requireRegisteredType(rawType, humanName) {
      var impl = registeredTypes[rawType];
      if (undefined === impl) {
          throwBindingError(humanName + " has unknown type " + getTypeName(rawType));
      }
      return impl;
    }function __embind_register_enum_value(
      rawEnumType,
      name,
      enumValue
    ) {
      var enumType = requireRegisteredType(rawEnumType, 'enum');
      name = readLatin1String(name);
  
      var Enum = enumType.constructor;
  
      var Value = Object.create(enumType.constructor.prototype, {
          value: {value: enumValue},
          constructor: {value: createNamedFunction(enumType.name + '_' + name, function() {})},
      });
      Enum.values[enumValue] = Value;
      Enum[name] = Value;
    }

  
  function _embind_repr(v) {
      if (v === null) {
          return 'null';
      }
      var t = typeof v;
      if (t === 'object' || t === 'array' || t === 'function') {
          return v.toString();
      } else {
          return '' + v;
      }
    }
  
  function floatReadValueFromPointer(name, shift) {
      switch (shift) {
          case 2: return function(pointer) {
              return this['fromWireType'](HEAPF32[pointer >> 2]);
          };
          case 3: return function(pointer) {
              return this['fromWireType'](HEAPF64[pointer >> 3]);
          };
          default:
              throw new TypeError("Unknown float type: " + name);
      }
    }function __embind_register_float(rawType, name, size) {
      var shift = getShiftFromSize(size);
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              return value;
          },
          'toWireType': function(destructors, value) {
              // todo: Here we have an opportunity for -O3 level "unsafe" optimizations: we could
              // avoid the following if() and assume value is of proper type.
              if (typeof value !== "number" && typeof value !== "boolean") {
                  throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
              }
              return value;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': floatReadValueFromPointer(name, shift),
          destructorFunction: null, // This type does not need a destructor
      });
    }

  
  function integerReadValueFromPointer(name, shift, signed) {
      // integers are quite common, so generate very specialized functions
      switch (shift) {
          case 0: return signed ?
              function readS8FromPointer(pointer) { return HEAP8[pointer]; } :
              function readU8FromPointer(pointer) { return HEAPU8[pointer]; };
          case 1: return signed ?
              function readS16FromPointer(pointer) { return HEAP16[pointer >> 1]; } :
              function readU16FromPointer(pointer) { return HEAPU16[pointer >> 1]; };
          case 2: return signed ?
              function readS32FromPointer(pointer) { return HEAP32[pointer >> 2]; } :
              function readU32FromPointer(pointer) { return HEAPU32[pointer >> 2]; };
          default:
              throw new TypeError("Unknown integer type: " + name);
      }
    }function __embind_register_integer(primitiveType, name, size, minRange, maxRange) {
      name = readLatin1String(name);
      if (maxRange === -1) { // LLVM doesn't have signed and unsigned 32-bit types, so u32 literals come out as 'i32 -1'. Always treat those as max u32.
          maxRange = 4294967295;
      }
  
      var shift = getShiftFromSize(size);
  
      var fromWireType = function(value) {
          return value;
      };
  
      if (minRange === 0) {
          var bitshift = 32 - 8*size;
          fromWireType = function(value) {
              return (value << bitshift) >>> bitshift;
          };
      }
  
      var isUnsignedType = (name.indexOf('unsigned') != -1);
  
      registerType(primitiveType, {
          name: name,
          'fromWireType': fromWireType,
          'toWireType': function(destructors, value) {
              // todo: Here we have an opportunity for -O3 level "unsafe" optimizations: we could
              // avoid the following two if()s and assume value is of proper type.
              if (typeof value !== "number" && typeof value !== "boolean") {
                  throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
              }
              if (value < minRange || value > maxRange) {
                  throw new TypeError('Passing a number "' + _embind_repr(value) + '" from JS side to C/C++ side to an argument of type "' + name + '", which is outside the valid range [' + minRange + ', ' + maxRange + ']!');
              }
              return isUnsignedType ? (value >>> 0) : (value | 0);
          },
          'argPackAdvance': 8,
          'readValueFromPointer': integerReadValueFromPointer(name, shift, minRange !== 0),
          destructorFunction: null, // This type does not need a destructor
      });
    }

  function __embind_register_memory_view(rawType, dataTypeIndex, name) {
      var typeMapping = [
          Int8Array,
          Uint8Array,
          Int16Array,
          Uint16Array,
          Int32Array,
          Uint32Array,
          Float32Array,
          Float64Array,
      ];
  
      var TA = typeMapping[dataTypeIndex];
  
      function decodeMemoryView(handle) {
          handle = handle >> 2;
          var heap = HEAPU32;
          var size = heap[handle]; // in elements
          var data = heap[handle + 1]; // byte offset into emscripten heap
          return new TA(buffer, data, size);
      }
  
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': decodeMemoryView,
          'argPackAdvance': 8,
          'readValueFromPointer': decodeMemoryView,
      }, {
          ignoreDuplicateRegistrations: true,
      });
    }

  function __embind_register_smart_ptr(
      rawType,
      rawPointeeType,
      name,
      sharingPolicy,
      getPointeeSignature,
      rawGetPointee,
      constructorSignature,
      rawConstructor,
      shareSignature,
      rawShare,
      destructorSignature,
      rawDestructor
    ) {
      name = readLatin1String(name);
      rawGetPointee = embind__requireFunction(getPointeeSignature, rawGetPointee);
      rawConstructor = embind__requireFunction(constructorSignature, rawConstructor);
      rawShare = embind__requireFunction(shareSignature, rawShare);
      rawDestructor = embind__requireFunction(destructorSignature, rawDestructor);
  
      whenDependentTypesAreResolved([rawType], [rawPointeeType], function(pointeeType) {
          pointeeType = pointeeType[0];
  
          var registeredPointer = new RegisteredPointer(
              name,
              pointeeType.registeredClass,
              false,
              false,
              // smart pointer properties
              true,
              pointeeType,
              sharingPolicy,
              rawGetPointee,
              rawConstructor,
              rawShare,
              rawDestructor);
          return [registeredPointer];
      });
    }

  function __embind_register_std_string(rawType, name) {
      name = readLatin1String(name);
      var stdStringIsUTF8
      //process only std::string bindings with UTF8 support, in contrast to e.g. std::basic_string<unsigned char>
      = (name === "std::string");
  
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              var length = HEAPU32[value >> 2];
  
              var str;
              if (stdStringIsUTF8) {
                  //ensure null termination at one-past-end byte if not present yet
                  var endChar = HEAPU8[value + 4 + length];
                  var endCharSwap = 0;
                  if (endChar != 0) {
                      endCharSwap = endChar;
                      HEAPU8[value + 4 + length] = 0;
                  }
  
                  var decodeStartPtr = value + 4;
                  // Looping here to support possible embedded '0' bytes
                  for (var i = 0; i <= length; ++i) {
                      var currentBytePtr = value + 4 + i;
                      if (HEAPU8[currentBytePtr] == 0) {
                          var stringSegment = UTF8ToString(decodeStartPtr);
                          if (str === undefined) {
                              str = stringSegment;
                          } else {
                              str += String.fromCharCode(0);
                              str += stringSegment;
                          }
                          decodeStartPtr = currentBytePtr + 1;
                      }
                  }
  
                  if (endCharSwap != 0) {
                      HEAPU8[value + 4 + length] = endCharSwap;
                  }
              } else {
                  var a = new Array(length);
                  for (var i = 0; i < length; ++i) {
                      a[i] = String.fromCharCode(HEAPU8[value + 4 + i]);
                  }
                  str = a.join('');
              }
  
              _free(value);
  
              return str;
          },
          'toWireType': function(destructors, value) {
              if (value instanceof ArrayBuffer) {
                  value = new Uint8Array(value);
              }
  
              var getLength;
              var valueIsOfTypeString = (typeof value === 'string');
  
              if (!(valueIsOfTypeString || value instanceof Uint8Array || value instanceof Uint8ClampedArray || value instanceof Int8Array)) {
                  throwBindingError('Cannot pass non-string to std::string');
              }
              if (stdStringIsUTF8 && valueIsOfTypeString) {
                  getLength = function() {return lengthBytesUTF8(value);};
              } else {
                  getLength = function() {return value.length;};
              }
  
              // assumes 4-byte alignment
              var length = getLength();
              var ptr = _malloc(4 + length + 1);
              HEAPU32[ptr >> 2] = length;
  
              if (stdStringIsUTF8 && valueIsOfTypeString) {
                  stringToUTF8(value, ptr + 4, length + 1);
              } else {
                  if (valueIsOfTypeString) {
                      for (var i = 0; i < length; ++i) {
                          var charCode = value.charCodeAt(i);
                          if (charCode > 255) {
                              _free(ptr);
                              throwBindingError('String has UTF-16 code units that do not fit in 8 bits');
                          }
                          HEAPU8[ptr + 4 + i] = charCode;
                      }
                  } else {
                      for (var i = 0; i < length; ++i) {
                          HEAPU8[ptr + 4 + i] = value[i];
                      }
                  }
              }
  
              if (destructors !== null) {
                  destructors.push(_free, ptr);
              }
              return ptr;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: function(ptr) { _free(ptr); },
      });
    }

  function __embind_register_std_wstring(rawType, charSize, name) {
      name = readLatin1String(name);
      var decodeString, encodeString, getHeap, lengthBytesUTF, shift;
      if (charSize === 2) {
          decodeString = UTF16ToString;
          encodeString = stringToUTF16;
          lengthBytesUTF = lengthBytesUTF16;
          getHeap = function() { return HEAPU16; };
          shift = 1;
      } else if (charSize === 4) {
          decodeString = UTF32ToString;
          encodeString = stringToUTF32;
          lengthBytesUTF = lengthBytesUTF32;
          getHeap = function() { return HEAPU32; };
          shift = 2;
      }
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              // Code mostly taken from _embind_register_std_string fromWireType
              var length = HEAPU32[value >> 2];
              var HEAP = getHeap();
              var str;
              // Ensure null termination at one-past-end byte if not present yet
              var endChar = HEAP[(value + 4 + length * charSize) >> shift];
              var endCharSwap = 0;
              if (endChar != 0) {
                  endCharSwap = endChar;
                  HEAP[(value + 4 + length * charSize) >> shift] = 0;
              }
  
              var decodeStartPtr = value + 4;
              // Looping here to support possible embedded '0' bytes
              for (var i = 0; i <= length; ++i) {
                  var currentBytePtr = value + 4 + i * charSize;
                  if (HEAP[currentBytePtr >> shift] == 0) {
                      var stringSegment = decodeString(decodeStartPtr);
                      if (str === undefined) {
                          str = stringSegment;
                      } else {
                          str += String.fromCharCode(0);
                          str += stringSegment;
                      }
                      decodeStartPtr = currentBytePtr + charSize;
                  }
              }
  
              if (endCharSwap != 0) {
                  HEAP[(value + 4 + length * charSize) >> shift] = endCharSwap;
              }
  
              _free(value);
  
              return str;
          },
          'toWireType': function(destructors, value) {
              if (!(typeof value === 'string')) {
                  throwBindingError('Cannot pass non-string to C++ string type ' + name);
              }
  
              // assumes 4-byte alignment
              var length = lengthBytesUTF(value);
              var ptr = _malloc(4 + length + charSize);
              HEAPU32[ptr >> 2] = length >> shift;
  
              encodeString(value, ptr + 4, length + charSize);
  
              if (destructors !== null) {
                  destructors.push(_free, ptr);
              }
              return ptr;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: function(ptr) { _free(ptr); },
      });
    }

  function __embind_register_void(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          isVoid: true, // void return values can be optimized out sometimes
          name: name,
          'argPackAdvance': 0,
          'fromWireType': function() {
              return undefined;
          },
          'toWireType': function(destructors, o) {
              // TODO: assert if anything else is given?
              return undefined;
          },
      });
    }

  
  function __emval_lookupTypes(argCount, argTypes) {
      var a = new Array(argCount);
      for (var i = 0; i < argCount; ++i) {
          a[i] = requireRegisteredType(
              HEAP32[(argTypes >> 2) + i],
              "parameter " + i);
      }
      return a;
    }
  
  function requireHandle(handle) {
      if (!handle) {
          throwBindingError('Cannot use deleted val. handle = ' + handle);
      }
      return emval_handle_array[handle].value;
    }function __emval_call(handle, argCount, argTypes, argv) {
      handle = requireHandle(handle);
      var types = __emval_lookupTypes(argCount, argTypes);
  
      var args = new Array(argCount);
      for (var i = 0; i < argCount; ++i) {
          var type = types[i];
          args[i] = type['readValueFromPointer'](argv);
          argv += type['argPackAdvance'];
      }
  
      var rv = handle.apply(undefined, args);
      return __emval_register(rv);
    }


  function __emval_incref(handle) {
      if (handle > 4) {
          emval_handle_array[handle].refcount += 1;
      }
    }

  function __emval_take_value(type, argv) {
      type = requireRegisteredType(type, '_emval_take_value');
      var v = type['readValueFromPointer'](argv);
      return __emval_register(v);
    }

  function _abort() {
      abort();
    }

  function _emscripten_get_sbrk_ptr() {
      return 72176;
    }

  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.copyWithin(dest, src, src + num);
    }

  
  function _emscripten_get_heap_size() {
      return HEAPU8.length;
    }
  
  function abortOnCannotGrowMemory(requestedSize) {
      abort('Cannot enlarge memory arrays to size ' + requestedSize + ' bytes (OOM). Either (1) compile with  -s INITIAL_MEMORY=X  with X higher than the current value ' + HEAP8.length + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime, or (3) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
    }function _emscripten_resize_heap(requestedSize) {
      abortOnCannotGrowMemory(requestedSize);
    }

  
  
  var ENV={};
  
  function __getExecutableName() {
      return thisProgram || './this.program';
    }function _emscripten_get_environ() {
      if (!_emscripten_get_environ.strings) {
        // Default values.
        var env = {
          'USER': 'web_user',
          'LOGNAME': 'web_user',
          'PATH': '/',
          'PWD': '/',
          'HOME': '/home/web_user',
          // Browser language detection #8751
          'LANG': ((typeof navigator === 'object' && navigator.languages && navigator.languages[0]) || 'C').replace('-', '_') + '.UTF-8',
          '_': __getExecutableName()
        };
        // Apply the user-provided values, if any.
        for (var x in ENV) {
          env[x] = ENV[x];
        }
        var strings = [];
        for (var x in env) {
          strings.push(x + '=' + env[x]);
        }
        _emscripten_get_environ.strings = strings;
      }
      return _emscripten_get_environ.strings;
    }function _environ_get(__environ, environ_buf) {
      var strings = _emscripten_get_environ();
      var bufSize = 0;
      strings.forEach(function(string, i) {
        var ptr = environ_buf + bufSize;
        HEAP32[(((__environ)+(i * 4))>>2)]=ptr;
        writeAsciiToMemory(string, ptr);
        bufSize += string.length + 1;
      });
      return 0;
    }

  function _environ_sizes_get(penviron_count, penviron_buf_size) {
      var strings = _emscripten_get_environ();
      HEAP32[((penviron_count)>>2)]=strings.length;
      var bufSize = 0;
      strings.forEach(function(string) {
        bufSize += string.length + 1;
      });
      HEAP32[((penviron_buf_size)>>2)]=bufSize;
      return 0;
    }

  function _exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      exit(status);
    }

  function _fd_close(fd) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }

  function _fd_read(fd, iov, iovcnt, pnum) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      var num = SYSCALLS.doReadv(stream, iov, iovcnt);
      HEAP32[((pnum)>>2)]=num
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }

  function _fd_seek(fd, offset_low, offset_high, whence, newOffset) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      var HIGH_OFFSET = 0x100000000; // 2^32
      // use an unsigned operator on low and shift high by 32-bits
      var offset = offset_high * HIGH_OFFSET + (offset_low >>> 0);
  
      var DOUBLE_LIMIT = 0x20000000000000; // 2^53
      // we also check for equality since DOUBLE_LIMIT + 1 == DOUBLE_LIMIT
      if (offset <= -DOUBLE_LIMIT || offset >= DOUBLE_LIMIT) {
        return -61;
      }
  
      FS.llseek(stream, offset, whence);
      (tempI64 = [stream.position>>>0,(tempDouble=stream.position,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((newOffset)>>2)]=tempI64[0],HEAP32[(((newOffset)+(4))>>2)]=tempI64[1]);
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }

  function _fd_write(fd, iov, iovcnt, pnum) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      var num = SYSCALLS.doWritev(stream, iov, iovcnt);
      HEAP32[((pnum)>>2)]=num
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }

  function _getTempRet0() {
      return (getTempRet0() | 0);
    }

  
  function _round(d) {
      d = +d;
      return d >= +0 ? +Math_floor(d + +0.5) : +Math_ceil(d - +0.5);
    }

  function _setTempRet0($i) {
      setTempRet0(($i) | 0);
    }

  
  
  function __isLeapYear(year) {
        return year%4 === 0 && (year%100 !== 0 || year%400 === 0);
    }
  
  function __arraySum(array, index) {
      var sum = 0;
      for (var i = 0; i <= index; sum += array[i++]) {
        // no-op
      }
      return sum;
    }
  
  
  var __MONTH_DAYS_LEAP=[31,29,31,30,31,30,31,31,30,31,30,31];
  
  var __MONTH_DAYS_REGULAR=[31,28,31,30,31,30,31,31,30,31,30,31];function __addDays(date, days) {
      var newDate = new Date(date.getTime());
      while(days > 0) {
        var leap = __isLeapYear(newDate.getFullYear());
        var currentMonth = newDate.getMonth();
        var daysInCurrentMonth = (leap ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR)[currentMonth];
  
        if (days > daysInCurrentMonth-newDate.getDate()) {
          // we spill over to next month
          days -= (daysInCurrentMonth-newDate.getDate()+1);
          newDate.setDate(1);
          if (currentMonth < 11) {
            newDate.setMonth(currentMonth+1)
          } else {
            newDate.setMonth(0);
            newDate.setFullYear(newDate.getFullYear()+1);
          }
        } else {
          // we stay in current month
          newDate.setDate(newDate.getDate()+days);
          return newDate;
        }
      }
  
      return newDate;
    }function _strftime(s, maxsize, format, tm) {
      // size_t strftime(char *restrict s, size_t maxsize, const char *restrict format, const struct tm *restrict timeptr);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/strftime.html
  
      var tm_zone = HEAP32[(((tm)+(40))>>2)];
  
      var date = {
        tm_sec: HEAP32[((tm)>>2)],
        tm_min: HEAP32[(((tm)+(4))>>2)],
        tm_hour: HEAP32[(((tm)+(8))>>2)],
        tm_mday: HEAP32[(((tm)+(12))>>2)],
        tm_mon: HEAP32[(((tm)+(16))>>2)],
        tm_year: HEAP32[(((tm)+(20))>>2)],
        tm_wday: HEAP32[(((tm)+(24))>>2)],
        tm_yday: HEAP32[(((tm)+(28))>>2)],
        tm_isdst: HEAP32[(((tm)+(32))>>2)],
        tm_gmtoff: HEAP32[(((tm)+(36))>>2)],
        tm_zone: tm_zone ? UTF8ToString(tm_zone) : ''
      };
  
      var pattern = UTF8ToString(format);
  
      // expand format
      var EXPANSION_RULES_1 = {
        '%c': '%a %b %d %H:%M:%S %Y',     // Replaced by the locale's appropriate date and time representation - e.g., Mon Aug  3 14:02:01 2013
        '%D': '%m/%d/%y',                 // Equivalent to %m / %d / %y
        '%F': '%Y-%m-%d',                 // Equivalent to %Y - %m - %d
        '%h': '%b',                       // Equivalent to %b
        '%r': '%I:%M:%S %p',              // Replaced by the time in a.m. and p.m. notation
        '%R': '%H:%M',                    // Replaced by the time in 24-hour notation
        '%T': '%H:%M:%S',                 // Replaced by the time
        '%x': '%m/%d/%y',                 // Replaced by the locale's appropriate date representation
        '%X': '%H:%M:%S',                 // Replaced by the locale's appropriate time representation
        // Modified Conversion Specifiers
        '%Ec': '%c',                      // Replaced by the locale's alternative appropriate date and time representation.
        '%EC': '%C',                      // Replaced by the name of the base year (period) in the locale's alternative representation.
        '%Ex': '%m/%d/%y',                // Replaced by the locale's alternative date representation.
        '%EX': '%H:%M:%S',                // Replaced by the locale's alternative time representation.
        '%Ey': '%y',                      // Replaced by the offset from %EC (year only) in the locale's alternative representation.
        '%EY': '%Y',                      // Replaced by the full alternative year representation.
        '%Od': '%d',                      // Replaced by the day of the month, using the locale's alternative numeric symbols, filled as needed with leading zeros if there is any alternative symbol for zero; otherwise, with leading <space> characters.
        '%Oe': '%e',                      // Replaced by the day of the month, using the locale's alternative numeric symbols, filled as needed with leading <space> characters.
        '%OH': '%H',                      // Replaced by the hour (24-hour clock) using the locale's alternative numeric symbols.
        '%OI': '%I',                      // Replaced by the hour (12-hour clock) using the locale's alternative numeric symbols.
        '%Om': '%m',                      // Replaced by the month using the locale's alternative numeric symbols.
        '%OM': '%M',                      // Replaced by the minutes using the locale's alternative numeric symbols.
        '%OS': '%S',                      // Replaced by the seconds using the locale's alternative numeric symbols.
        '%Ou': '%u',                      // Replaced by the weekday as a number in the locale's alternative representation (Monday=1).
        '%OU': '%U',                      // Replaced by the week number of the year (Sunday as the first day of the week, rules corresponding to %U ) using the locale's alternative numeric symbols.
        '%OV': '%V',                      // Replaced by the week number of the year (Monday as the first day of the week, rules corresponding to %V ) using the locale's alternative numeric symbols.
        '%Ow': '%w',                      // Replaced by the number of the weekday (Sunday=0) using the locale's alternative numeric symbols.
        '%OW': '%W',                      // Replaced by the week number of the year (Monday as the first day of the week) using the locale's alternative numeric symbols.
        '%Oy': '%y',                      // Replaced by the year (offset from %C ) using the locale's alternative numeric symbols.
      };
      for (var rule in EXPANSION_RULES_1) {
        pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_1[rule]);
      }
  
      var WEEKDAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
      var MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
  
      function leadingSomething(value, digits, character) {
        var str = typeof value === 'number' ? value.toString() : (value || '');
        while (str.length < digits) {
          str = character[0]+str;
        }
        return str;
      }
  
      function leadingNulls(value, digits) {
        return leadingSomething(value, digits, '0');
      }
  
      function compareByDay(date1, date2) {
        function sgn(value) {
          return value < 0 ? -1 : (value > 0 ? 1 : 0);
        }
  
        var compare;
        if ((compare = sgn(date1.getFullYear()-date2.getFullYear())) === 0) {
          if ((compare = sgn(date1.getMonth()-date2.getMonth())) === 0) {
            compare = sgn(date1.getDate()-date2.getDate());
          }
        }
        return compare;
      }
  
      function getFirstWeekStartDate(janFourth) {
          switch (janFourth.getDay()) {
            case 0: // Sunday
              return new Date(janFourth.getFullYear()-1, 11, 29);
            case 1: // Monday
              return janFourth;
            case 2: // Tuesday
              return new Date(janFourth.getFullYear(), 0, 3);
            case 3: // Wednesday
              return new Date(janFourth.getFullYear(), 0, 2);
            case 4: // Thursday
              return new Date(janFourth.getFullYear(), 0, 1);
            case 5: // Friday
              return new Date(janFourth.getFullYear()-1, 11, 31);
            case 6: // Saturday
              return new Date(janFourth.getFullYear()-1, 11, 30);
          }
      }
  
      function getWeekBasedYear(date) {
          var thisDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          var janFourthThisYear = new Date(thisDate.getFullYear(), 0, 4);
          var janFourthNextYear = new Date(thisDate.getFullYear()+1, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          if (compareByDay(firstWeekStartThisYear, thisDate) <= 0) {
            // this date is after the start of the first week of this year
            if (compareByDay(firstWeekStartNextYear, thisDate) <= 0) {
              return thisDate.getFullYear()+1;
            } else {
              return thisDate.getFullYear();
            }
          } else {
            return thisDate.getFullYear()-1;
          }
      }
  
      var EXPANSION_RULES_2 = {
        '%a': function(date) {
          return WEEKDAYS[date.tm_wday].substring(0,3);
        },
        '%A': function(date) {
          return WEEKDAYS[date.tm_wday];
        },
        '%b': function(date) {
          return MONTHS[date.tm_mon].substring(0,3);
        },
        '%B': function(date) {
          return MONTHS[date.tm_mon];
        },
        '%C': function(date) {
          var year = date.tm_year+1900;
          return leadingNulls((year/100)|0,2);
        },
        '%d': function(date) {
          return leadingNulls(date.tm_mday, 2);
        },
        '%e': function(date) {
          return leadingSomething(date.tm_mday, 2, ' ');
        },
        '%g': function(date) {
          // %g, %G, and %V give values according to the ISO 8601:2000 standard week-based year.
          // In this system, weeks begin on a Monday and week 1 of the year is the week that includes
          // January 4th, which is also the week that includes the first Thursday of the year, and
          // is also the first week that contains at least four days in the year.
          // If the first Monday of January is the 2nd, 3rd, or 4th, the preceding days are part of
          // the last week of the preceding year; thus, for Saturday 2nd January 1999,
          // %G is replaced by 1998 and %V is replaced by 53. If December 29th, 30th,
          // or 31st is a Monday, it and any following days are part of week 1 of the following year.
          // Thus, for Tuesday 30th December 1997, %G is replaced by 1998 and %V is replaced by 01.
  
          return getWeekBasedYear(date).toString().substring(2);
        },
        '%G': function(date) {
          return getWeekBasedYear(date);
        },
        '%H': function(date) {
          return leadingNulls(date.tm_hour, 2);
        },
        '%I': function(date) {
          var twelveHour = date.tm_hour;
          if (twelveHour == 0) twelveHour = 12;
          else if (twelveHour > 12) twelveHour -= 12;
          return leadingNulls(twelveHour, 2);
        },
        '%j': function(date) {
          // Day of the year (001-366)
          return leadingNulls(date.tm_mday+__arraySum(__isLeapYear(date.tm_year+1900) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, date.tm_mon-1), 3);
        },
        '%m': function(date) {
          return leadingNulls(date.tm_mon+1, 2);
        },
        '%M': function(date) {
          return leadingNulls(date.tm_min, 2);
        },
        '%n': function() {
          return '\n';
        },
        '%p': function(date) {
          if (date.tm_hour >= 0 && date.tm_hour < 12) {
            return 'AM';
          } else {
            return 'PM';
          }
        },
        '%S': function(date) {
          return leadingNulls(date.tm_sec, 2);
        },
        '%t': function() {
          return '\t';
        },
        '%u': function(date) {
          return date.tm_wday || 7;
        },
        '%U': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53].
          // The first Sunday of January is the first day of week 1;
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year+1900, 0, 1);
          var firstSunday = janFirst.getDay() === 0 ? janFirst : __addDays(janFirst, 7-janFirst.getDay());
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
  
          // is target date after the first Sunday?
          if (compareByDay(firstSunday, endDate) < 0) {
            // calculate difference in days between first Sunday and endDate
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstSundayUntilEndJanuary = 31-firstSunday.getDate();
            var days = firstSundayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
  
          return compareByDay(firstSunday, janFirst) === 0 ? '01': '00';
        },
        '%V': function(date) {
          // Replaced by the week number of the year (Monday as the first day of the week)
          // as a decimal number [01,53]. If the week containing 1 January has four
          // or more days in the new year, then it is considered week 1.
          // Otherwise, it is the last week of the previous year, and the next week is week 1.
          // Both January 4th and the first Thursday of January are always in week 1. [ tm_year, tm_wday, tm_yday]
          var janFourthThisYear = new Date(date.tm_year+1900, 0, 4);
          var janFourthNextYear = new Date(date.tm_year+1901, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          var endDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          if (compareByDay(endDate, firstWeekStartThisYear) < 0) {
            // if given date is before this years first week, then it belongs to the 53rd week of last year
            return '53';
          }
  
          if (compareByDay(firstWeekStartNextYear, endDate) <= 0) {
            // if given date is after next years first week, then it belongs to the 01th week of next year
            return '01';
          }
  
          // given date is in between CW 01..53 of this calendar year
          var daysDifference;
          if (firstWeekStartThisYear.getFullYear() < date.tm_year+1900) {
            // first CW of this year starts last year
            daysDifference = date.tm_yday+32-firstWeekStartThisYear.getDate()
          } else {
            // first CW of this year starts this year
            daysDifference = date.tm_yday+1-firstWeekStartThisYear.getDate();
          }
          return leadingNulls(Math.ceil(daysDifference/7), 2);
        },
        '%w': function(date) {
          return date.tm_wday;
        },
        '%W': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53].
          // The first Monday of January is the first day of week 1;
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year, 0, 1);
          var firstMonday = janFirst.getDay() === 1 ? janFirst : __addDays(janFirst, janFirst.getDay() === 0 ? 1 : 7-janFirst.getDay()+1);
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
  
          // is target date after the first Monday?
          if (compareByDay(firstMonday, endDate) < 0) {
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstMondayUntilEndJanuary = 31-firstMonday.getDate();
            var days = firstMondayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
          return compareByDay(firstMonday, janFirst) === 0 ? '01': '00';
        },
        '%y': function(date) {
          // Replaced by the last two digits of the year as a decimal number [00,99]. [ tm_year]
          return (date.tm_year+1900).toString().substring(2);
        },
        '%Y': function(date) {
          // Replaced by the year as a decimal number (for example, 1997). [ tm_year]
          return date.tm_year+1900;
        },
        '%z': function(date) {
          // Replaced by the offset from UTC in the ISO 8601:2000 standard format ( +hhmm or -hhmm ).
          // For example, "-0430" means 4 hours 30 minutes behind UTC (west of Greenwich).
          var off = date.tm_gmtoff;
          var ahead = off >= 0;
          off = Math.abs(off) / 60;
          // convert from minutes into hhmm format (which means 60 minutes = 100 units)
          off = (off / 60)*100 + (off % 60);
          return (ahead ? '+' : '-') + String("0000" + off).slice(-4);
        },
        '%Z': function(date) {
          return date.tm_zone;
        },
        '%%': function() {
          return '%';
        }
      };
      for (var rule in EXPANSION_RULES_2) {
        if (pattern.indexOf(rule) >= 0) {
          pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_2[rule](date));
        }
      }
  
      var bytes = intArrayFromString(pattern, false);
      if (bytes.length > maxsize) {
        return 0;
      }
  
      writeArrayToMemory(bytes, s);
      return bytes.length-1;
    }function _strftime_l(s, maxsize, format, tm) {
      return _strftime(s, maxsize, format, tm); // no locale support yet
    }
var FSNode = /** @constructor */ function(parent, name, mode, rdev) {
    if (!parent) {
      parent = this;  // root node sets parent to itself
    }
    this.parent = parent;
    this.mount = parent.mount;
    this.mounted = null;
    this.id = FS.nextInode++;
    this.name = name;
    this.mode = mode;
    this.node_ops = {};
    this.stream_ops = {};
    this.rdev = rdev;
  };
  var readMode = 292/*292*/ | 73/*73*/;
  var writeMode = 146/*146*/;
  Object.defineProperties(FSNode.prototype, {
   read: {
    get: /** @this{FSNode} */function() {
     return (this.mode & readMode) === readMode;
    },
    set: /** @this{FSNode} */function(val) {
     val ? this.mode |= readMode : this.mode &= ~readMode;
    }
   },
   write: {
    get: /** @this{FSNode} */function() {
     return (this.mode & writeMode) === writeMode;
    },
    set: /** @this{FSNode} */function(val) {
     val ? this.mode |= writeMode : this.mode &= ~writeMode;
    }
   },
   isFolder: {
    get: /** @this{FSNode} */function() {
     return FS.isDir(this.mode);
    }
   },
   isDevice: {
    get: /** @this{FSNode} */function() {
     return FS.isChrdev(this.mode);
    }
   }
  });
  FS.FSNode = FSNode;
  FS.staticInit();;
embind_init_charCodes();
BindingError = Module['BindingError'] = extendError(Error, 'BindingError');;
InternalError = Module['InternalError'] = extendError(Error, 'InternalError');;
init_ClassHandle();
init_RegisteredPointer();
init_embind();;
UnboundTypeError = Module['UnboundTypeError'] = extendError(Error, 'UnboundTypeError');;
init_emval();;
var ASSERTIONS = true;

// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      if (ASSERTIONS) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      }
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}


// Copied from https://github.com/strophe/strophejs/blob/e06d027/src/polyfills.js#L149

// This code was written by Tyler Akins and has been placed in the
// public domain.  It would be nice if you left this header intact.
// Base64 code from Tyler Akins -- http://rumkin.com

/**
 * Decodes a base64 string.
 * @param {string} input The string to decode.
 */
var decodeBase64 = typeof atob === 'function' ? atob : function (input) {
  var keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

  var output = '';
  var chr1, chr2, chr3;
  var enc1, enc2, enc3, enc4;
  var i = 0;
  // remove all characters that are not A-Z, a-z, 0-9, +, /, or =
  input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');
  do {
    enc1 = keyStr.indexOf(input.charAt(i++));
    enc2 = keyStr.indexOf(input.charAt(i++));
    enc3 = keyStr.indexOf(input.charAt(i++));
    enc4 = keyStr.indexOf(input.charAt(i++));

    chr1 = (enc1 << 2) | (enc2 >> 4);
    chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
    chr3 = ((enc3 & 3) << 6) | enc4;

    output = output + String.fromCharCode(chr1);

    if (enc3 !== 64) {
      output = output + String.fromCharCode(chr2);
    }
    if (enc4 !== 64) {
      output = output + String.fromCharCode(chr3);
    }
  } while (i < input.length);
  return output;
};

// Converts a string of base64 into a byte array.
// Throws error on invalid input.
function intArrayFromBase64(s) {
  if (typeof ENVIRONMENT_IS_NODE === 'boolean' && ENVIRONMENT_IS_NODE) {
    var buf;
    try {
      // TODO: Update Node.js externs, Closure does not recognize the following Buffer.from()
      /**@suppress{checkTypes}*/
      buf = Buffer.from(s, 'base64');
    } catch (_) {
      buf = new Buffer(s, 'base64');
    }
    return new Uint8Array(buf['buffer'], buf['byteOffset'], buf['byteLength']);
  }

  try {
    var decoded = decodeBase64(s);
    var bytes = new Uint8Array(decoded.length);
    for (var i = 0 ; i < decoded.length ; ++i) {
      bytes[i] = decoded.charCodeAt(i);
    }
    return bytes;
  } catch (_) {
    throw new Error('Converting base64 string to bytes failed.');
  }
}

// If filename is a base64 data URI, parses and returns data (Buffer on node,
// Uint8Array otherwise). If filename is not a base64 data URI, returns undefined.
function tryParseAsDataURI(filename) {
  if (!isDataURI(filename)) {
    return;
  }

  return intArrayFromBase64(filename.slice(dataURIPrefix.length));
}


// ASM_LIBRARY EXTERN PRIMITIVES: Math_floor,Math_ceil

var asmGlobalArg = {};
var asmLibraryArg = { "__assert_fail": ___assert_fail, "__cxa_allocate_exception": ___cxa_allocate_exception, "__cxa_atexit": ___cxa_atexit, "__cxa_begin_catch": ___cxa_begin_catch, "__cxa_end_catch": ___cxa_end_catch, "__cxa_find_matching_catch_2": ___cxa_find_matching_catch_2, "__cxa_find_matching_catch_3": ___cxa_find_matching_catch_3, "__cxa_free_exception": ___cxa_free_exception, "__cxa_rethrow": ___cxa_rethrow, "__cxa_throw": ___cxa_throw, "__cxa_uncaught_exceptions": ___cxa_uncaught_exceptions, "__handle_stack_overflow": ___handle_stack_overflow, "__map_file": ___map_file, "__resumeException": ___resumeException, "__syscall221": ___syscall221, "__syscall5": ___syscall5, "__syscall54": ___syscall54, "__syscall91": ___syscall91, "_embind_register_bool": __embind_register_bool, "_embind_register_class": __embind_register_class, "_embind_register_class_class_function": __embind_register_class_class_function, "_embind_register_class_constructor": __embind_register_class_constructor, "_embind_register_class_function": __embind_register_class_function, "_embind_register_class_property": __embind_register_class_property, "_embind_register_emval": __embind_register_emval, "_embind_register_enum": __embind_register_enum, "_embind_register_enum_value": __embind_register_enum_value, "_embind_register_float": __embind_register_float, "_embind_register_integer": __embind_register_integer, "_embind_register_memory_view": __embind_register_memory_view, "_embind_register_smart_ptr": __embind_register_smart_ptr, "_embind_register_std_string": __embind_register_std_string, "_embind_register_std_wstring": __embind_register_std_wstring, "_embind_register_void": __embind_register_void, "_emval_call": __emval_call, "_emval_decref": __emval_decref, "_emval_incref": __emval_incref, "_emval_take_value": __emval_take_value, "abort": _abort, "emscripten_get_sbrk_ptr": _emscripten_get_sbrk_ptr, "emscripten_memcpy_big": _emscripten_memcpy_big, "emscripten_resize_heap": _emscripten_resize_heap, "environ_get": _environ_get, "environ_sizes_get": _environ_sizes_get, "exit": _exit, "fd_close": _fd_close, "fd_read": _fd_read, "fd_seek": _fd_seek, "fd_write": _fd_write, "getTempRet0": getTempRet0, "invoke_diddi": invoke_diddi, "invoke_didi": invoke_didi, "invoke_didii": invoke_didii, "invoke_diii": invoke_diii, "invoke_fiii": invoke_fiii, "invoke_i": invoke_i, "invoke_ii": invoke_ii, "invoke_iii": invoke_iii, "invoke_iiidddi": invoke_iiidddi, "invoke_iiii": invoke_iiii, "invoke_iiiii": invoke_iiiii, "invoke_iiiiii": invoke_iiiiii, "invoke_iiiiiii": invoke_iiiiiii, "invoke_iiiiiiii": invoke_iiiiiiii, "invoke_iiiiiiiiiii": invoke_iiiiiiiiiii, "invoke_iiiiiiiiiiii": invoke_iiiiiiiiiiii, "invoke_iiiiiiiiiiiii": invoke_iiiiiiiiiiiii, "invoke_iiji": invoke_iiji, "invoke_jiiii": invoke_jiiii, "invoke_v": invoke_v, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_viid": invoke_viid, "invoke_viii": invoke_viii, "invoke_viiid": invoke_viiid, "invoke_viiii": invoke_viiii, "invoke_viiiiiii": invoke_viiiiiii, "invoke_viiiiiiiiii": invoke_viiiiiiiiii, "invoke_viiiiiiiiiiiiiii": invoke_viiiiiiiiiiiiiii, "invoke_viijii": invoke_viijii, "memory": wasmMemory, "round": _round, "setTempRet0": setTempRet0, "strftime_l": _strftime_l, "table": wasmTable };
var asm = createWasm();
Module["asm"] = asm;
/** @type {function(...*):?} */
var ___wasm_call_ctors = Module["___wasm_call_ctors"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__wasm_call_ctors"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _free = Module["_free"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["free"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _fflush = Module["_fflush"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["fflush"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _malloc = Module["_malloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["malloc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___errno_location = Module["___errno_location"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__errno_location"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _setThrew = Module["_setThrew"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["setThrew"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZSt18uncaught_exceptionv = Module["__ZSt18uncaught_exceptionv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZSt18uncaught_exceptionv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___cxa_can_catch = Module["___cxa_can_catch"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__cxa_can_catch"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___cxa_is_pointer_type = Module["___cxa_is_pointer_type"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__cxa_is_pointer_type"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___getTypeName = Module["___getTypeName"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__getTypeName"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___embind_register_native_and_builtin_types = Module["___embind_register_native_and_builtin_types"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__embind_register_native_and_builtin_types"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_v = Module["dynCall_v"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_v"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_vi = Module["dynCall_vi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_vi"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_vii = Module["dynCall_vii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_vii"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_viii = Module["dynCall_viii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viii"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_viiii = Module["dynCall_viiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viiii"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_viiiiiii = Module["dynCall_viiiiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viiiiiii"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_viiiiiiiiii = Module["dynCall_viiiiiiiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viiiiiiiiii"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_viiiiiiiiiiiiiii = Module["dynCall_viiiiiiiiiiiiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viiiiiiiiiiiiiii"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_viiid = Module["dynCall_viiid"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viiid"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_viijii = Module["dynCall_viijii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viijii"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_viid = Module["dynCall_viid"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viid"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_i = Module["dynCall_i"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_i"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_ii = Module["dynCall_ii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_ii"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_iii = Module["dynCall_iii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iii"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_iiii = Module["dynCall_iiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iiii"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_iiiii = Module["dynCall_iiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iiiii"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_iiiiii = Module["dynCall_iiiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iiiiii"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_iiiiiii = Module["dynCall_iiiiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iiiiiii"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_iiiiiiii = Module["dynCall_iiiiiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iiiiiiii"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_iiiiiiiiiii = Module["dynCall_iiiiiiiiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iiiiiiiiiii"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_iiiiiiiiiiii = Module["dynCall_iiiiiiiiiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iiiiiiiiiiii"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_iiiiiiiiiiiii = Module["dynCall_iiiiiiiiiiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iiiiiiiiiiiii"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_iiidddi = Module["dynCall_iiidddi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iiidddi"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_iiji = Module["dynCall_iiji"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iiji"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_jiiii = Module["dynCall_jiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_jiiii"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_fiii = Module["dynCall_fiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_fiii"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_diii = Module["dynCall_diii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_diii"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_didi = Module["dynCall_didi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_didi"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_didii = Module["dynCall_didii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_didii"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_diddi = Module["dynCall_diddi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_diddi"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___set_stack_limit = Module["___set_stack_limit"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__set_stack_limit"].apply(null, arguments)
};

/** @type {function(...*):?} */
var stackSave = Module["stackSave"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["stackSave"].apply(null, arguments)
};

/** @type {function(...*):?} */
var stackAlloc = Module["stackAlloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["stackAlloc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var stackRestore = Module["stackRestore"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["stackRestore"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __growWasmMemory = Module["__growWasmMemory"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__growWasmMemory"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_did = Module["dynCall_did"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_did"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_diddd = Module["dynCall_diddd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_diddd"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_didd = Module["dynCall_didd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_didd"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_di = Module["dynCall_di"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_di"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_vid = Module["dynCall_vid"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_vid"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_dii = Module["dynCall_dii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_dii"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_didid = Module["dynCall_didid"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_didid"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_dididi = Module["dynCall_dididi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_dididi"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_vidid = Module["dynCall_vidid"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_vidid"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_vididd = Module["dynCall_vididd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_vididd"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_vididdd = Module["dynCall_vididdd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_vididdd"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_vidddi = Module["dynCall_vidddi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_vidddi"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_iiiid = Module["dynCall_iiiid"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iiiid"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_dddd = Module["dynCall_dddd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_dddd"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_vidd = Module["dynCall_vidd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_vidd"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_viffii = Module["dynCall_viffii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viffii"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_dddddd = Module["dynCall_dddddd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_dddddd"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_diddddd = Module["dynCall_diddddd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_diddddd"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_diddidd = Module["dynCall_diddidd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_diddidd"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_didddii = Module["dynCall_didddii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_didddii"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_didddddii = Module["dynCall_didddddii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_didddddii"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_dd = Module["dynCall_dd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_dd"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_dididdd = Module["dynCall_dididdd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_dididdd"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_ddd = Module["dynCall_ddd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_ddd"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_vidi = Module["dynCall_vidi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_vidi"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_iifi = Module["dynCall_iifi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iifi"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_fi = Module["dynCall_fi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_fi"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_fiiii = Module["dynCall_fiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_fiiii"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_viiiidd = Module["dynCall_viiiidd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viiiidd"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_diid = Module["dynCall_diid"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_diid"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_diiddd = Module["dynCall_diiddd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_diiddd"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_diidd = Module["dynCall_diidd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_diidd"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_diiii = Module["dynCall_diiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_diiii"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_diidid = Module["dynCall_diidid"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_diidid"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_diididi = Module["dynCall_diididi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_diididi"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_viidid = Module["dynCall_viidid"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viidid"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_viididd = Module["dynCall_viididd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viididd"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_viididdd = Module["dynCall_viididdd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viididdd"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_viidddi = Module["dynCall_viidddi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viidddi"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_viidd = Module["dynCall_viidd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viidd"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_viiffii = Module["dynCall_viiffii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viiffii"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_diiddidd = Module["dynCall_diiddidd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_diiddidd"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_diiddddd = Module["dynCall_diiddddd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_diiddddd"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_diidddii = Module["dynCall_diidddii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_diidddii"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_diidddddii = Module["dynCall_diidddddii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_diidddddii"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_diidi = Module["dynCall_diidi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_diidi"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_diididdd = Module["dynCall_diididdd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_diididdd"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_diiddi = Module["dynCall_diiddi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_diiddi"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_viidi = Module["dynCall_viidi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viidi"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_viiiii = Module["dynCall_viiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viiiii"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_iiifi = Module["dynCall_iiifi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iiifi"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_fii = Module["dynCall_fii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_fii"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_fiiiii = Module["dynCall_fiiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_fiiiii"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_viiiiidd = Module["dynCall_viiiiidd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viiiiidd"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_viif = Module["dynCall_viif"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viif"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_viiif = Module["dynCall_viiif"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viiif"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_iiiif = Module["dynCall_iiiif"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iiiif"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_diddid = Module["dynCall_diddid"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_diddid"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_didddid = Module["dynCall_didddid"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_didddid"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_didddi = Module["dynCall_didddi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_didddi"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_diiddid = Module["dynCall_diiddid"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_diiddid"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_diidddid = Module["dynCall_diidddid"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_diidddid"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_diidddi = Module["dynCall_diidddi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_diidddi"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_iid = Module["dynCall_iid"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iid"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_id = Module["dynCall_id"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_id"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_diidii = Module["dynCall_diidii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_diidii"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_jiji = Module["dynCall_jiji"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_jiji"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_iidiiii = Module["dynCall_iidiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iidiiii"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_iiiiiiiii = Module["dynCall_iiiiiiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iiiiiiiii"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_iiiiij = Module["dynCall_iiiiij"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iiiiij"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_iiiiid = Module["dynCall_iiiiid"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iiiiid"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_iiiiijj = Module["dynCall_iiiiijj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iiiiijj"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_iiiiiijj = Module["dynCall_iiiiiijj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iiiiiijj"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_viiiiii = Module["dynCall_viiiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viiiiii"].apply(null, arguments)
};


function invoke_iii(index,a1,a2) {
  var sp = stackSave();
  try {
    return dynCall_iii(index,a1,a2);
  } catch(e) {
    stackRestore(sp);
    if (e !== e+0 && e !== 'longjmp') throw e;
    _setThrew(1, 0);
  }
}

function invoke_ii(index,a1) {
  var sp = stackSave();
  try {
    return dynCall_ii(index,a1);
  } catch(e) {
    stackRestore(sp);
    if (e !== e+0 && e !== 'longjmp') throw e;
    _setThrew(1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  var sp = stackSave();
  try {
    return dynCall_iiii(index,a1,a2,a3);
  } catch(e) {
    stackRestore(sp);
    if (e !== e+0 && e !== 'longjmp') throw e;
    _setThrew(1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  var sp = stackSave();
  try {
    dynCall_vii(index,a1,a2);
  } catch(e) {
    stackRestore(sp);
    if (e !== e+0 && e !== 'longjmp') throw e;
    _setThrew(1, 0);
  }
}

function invoke_vi(index,a1) {
  var sp = stackSave();
  try {
    dynCall_vi(index,a1);
  } catch(e) {
    stackRestore(sp);
    if (e !== e+0 && e !== 'longjmp') throw e;
    _setThrew(1, 0);
  }
}

function invoke_v(index) {
  var sp = stackSave();
  try {
    dynCall_v(index);
  } catch(e) {
    stackRestore(sp);
    if (e !== e+0 && e !== 'longjmp') throw e;
    _setThrew(1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  var sp = stackSave();
  try {
    dynCall_viii(index,a1,a2,a3);
  } catch(e) {
    stackRestore(sp);
    if (e !== e+0 && e !== 'longjmp') throw e;
    _setThrew(1, 0);
  }
}

function invoke_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
  var sp = stackSave();
  try {
    return dynCall_iiiiiii(index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    stackRestore(sp);
    if (e !== e+0 && e !== 'longjmp') throw e;
    _setThrew(1, 0);
  }
}

function invoke_viiid(index,a1,a2,a3,a4) {
  var sp = stackSave();
  try {
    dynCall_viiid(index,a1,a2,a3,a4);
  } catch(e) {
    stackRestore(sp);
    if (e !== e+0 && e !== 'longjmp') throw e;
    _setThrew(1, 0);
  }
}

function invoke_iiidddi(index,a1,a2,a3,a4,a5,a6) {
  var sp = stackSave();
  try {
    return dynCall_iiidddi(index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    stackRestore(sp);
    if (e !== e+0 && e !== 'longjmp') throw e;
    _setThrew(1, 0);
  }
}

function invoke_didi(index,a1,a2,a3) {
  var sp = stackSave();
  try {
    return dynCall_didi(index,a1,a2,a3);
  } catch(e) {
    stackRestore(sp);
    if (e !== e+0 && e !== 'longjmp') throw e;
    _setThrew(1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  var sp = stackSave();
  try {
    dynCall_viiii(index,a1,a2,a3,a4);
  } catch(e) {
    stackRestore(sp);
    if (e !== e+0 && e !== 'longjmp') throw e;
    _setThrew(1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  var sp = stackSave();
  try {
    return dynCall_iiiii(index,a1,a2,a3,a4);
  } catch(e) {
    stackRestore(sp);
    if (e !== e+0 && e !== 'longjmp') throw e;
    _setThrew(1, 0);
  }
}

function invoke_diddi(index,a1,a2,a3,a4) {
  var sp = stackSave();
  try {
    return dynCall_diddi(index,a1,a2,a3,a4);
  } catch(e) {
    stackRestore(sp);
    if (e !== e+0 && e !== 'longjmp') throw e;
    _setThrew(1, 0);
  }
}

function invoke_didii(index,a1,a2,a3,a4) {
  var sp = stackSave();
  try {
    return dynCall_didii(index,a1,a2,a3,a4);
  } catch(e) {
    stackRestore(sp);
    if (e !== e+0 && e !== 'longjmp') throw e;
    _setThrew(1, 0);
  }
}

function invoke_viid(index,a1,a2,a3) {
  var sp = stackSave();
  try {
    dynCall_viid(index,a1,a2,a3);
  } catch(e) {
    stackRestore(sp);
    if (e !== e+0 && e !== 'longjmp') throw e;
    _setThrew(1, 0);
  }
}

function invoke_iiiiii(index,a1,a2,a3,a4,a5) {
  var sp = stackSave();
  try {
    return dynCall_iiiiii(index,a1,a2,a3,a4,a5);
  } catch(e) {
    stackRestore(sp);
    if (e !== e+0 && e !== 'longjmp') throw e;
    _setThrew(1, 0);
  }
}

function invoke_iiiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  var sp = stackSave();
  try {
    return dynCall_iiiiiiii(index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    stackRestore(sp);
    if (e !== e+0 && e !== 'longjmp') throw e;
    _setThrew(1, 0);
  }
}

function invoke_iiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10) {
  var sp = stackSave();
  try {
    return dynCall_iiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10);
  } catch(e) {
    stackRestore(sp);
    if (e !== e+0 && e !== 'longjmp') throw e;
    _setThrew(1, 0);
  }
}

function invoke_iiiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12) {
  var sp = stackSave();
  try {
    return dynCall_iiiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12);
  } catch(e) {
    stackRestore(sp);
    if (e !== e+0 && e !== 'longjmp') throw e;
    _setThrew(1, 0);
  }
}

function invoke_fiii(index,a1,a2,a3) {
  var sp = stackSave();
  try {
    return dynCall_fiii(index,a1,a2,a3);
  } catch(e) {
    stackRestore(sp);
    if (e !== e+0 && e !== 'longjmp') throw e;
    _setThrew(1, 0);
  }
}

function invoke_diii(index,a1,a2,a3) {
  var sp = stackSave();
  try {
    return dynCall_diii(index,a1,a2,a3);
  } catch(e) {
    stackRestore(sp);
    if (e !== e+0 && e !== 'longjmp') throw e;
    _setThrew(1, 0);
  }
}

function invoke_i(index) {
  var sp = stackSave();
  try {
    return dynCall_i(index);
  } catch(e) {
    stackRestore(sp);
    if (e !== e+0 && e !== 'longjmp') throw e;
    _setThrew(1, 0);
  }
}

function invoke_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  var sp = stackSave();
  try {
    dynCall_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    stackRestore(sp);
    if (e !== e+0 && e !== 'longjmp') throw e;
    _setThrew(1, 0);
  }
}

function invoke_iiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11) {
  var sp = stackSave();
  try {
    return dynCall_iiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11);
  } catch(e) {
    stackRestore(sp);
    if (e !== e+0 && e !== 'longjmp') throw e;
    _setThrew(1, 0);
  }
}

function invoke_viiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10) {
  var sp = stackSave();
  try {
    dynCall_viiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10);
  } catch(e) {
    stackRestore(sp);
    if (e !== e+0 && e !== 'longjmp') throw e;
    _setThrew(1, 0);
  }
}

function invoke_viiiiiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15) {
  var sp = stackSave();
  try {
    dynCall_viiiiiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15);
  } catch(e) {
    stackRestore(sp);
    if (e !== e+0 && e !== 'longjmp') throw e;
    _setThrew(1, 0);
  }
}

function invoke_iiji(index,a1,a2,a3,a4) {
  var sp = stackSave();
  try {
    return dynCall_iiji(index,a1,a2,a3,a4);
  } catch(e) {
    stackRestore(sp);
    if (e !== e+0 && e !== 'longjmp') throw e;
    _setThrew(1, 0);
  }
}

function invoke_viijii(index,a1,a2,a3,a4,a5,a6) {
  var sp = stackSave();
  try {
    dynCall_viijii(index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    stackRestore(sp);
    if (e !== e+0 && e !== 'longjmp') throw e;
    _setThrew(1, 0);
  }
}

function invoke_jiiii(index,a1,a2,a3,a4) {
  var sp = stackSave();
  try {
    return dynCall_jiiii(index,a1,a2,a3,a4);
  } catch(e) {
    stackRestore(sp);
    if (e !== e+0 && e !== 'longjmp') throw e;
    _setThrew(1, 0);
  }
}



// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;

if (!Object.getOwnPropertyDescriptor(Module, "intArrayFromString")) Module["intArrayFromString"] = function() { abort("'intArrayFromString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "intArrayToString")) Module["intArrayToString"] = function() { abort("'intArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ccall")) Module["ccall"] = function() { abort("'ccall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "cwrap")) Module["cwrap"] = function() { abort("'cwrap' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setValue")) Module["setValue"] = function() { abort("'setValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getValue")) Module["getValue"] = function() { abort("'getValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "allocate")) Module["allocate"] = function() { abort("'allocate' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getMemory")) Module["getMemory"] = function() { abort("'getMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF8ArrayToString")) Module["UTF8ArrayToString"] = function() { abort("'UTF8ArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF8ToString")) Module["UTF8ToString"] = function() { abort("'UTF8ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF8Array")) Module["stringToUTF8Array"] = function() { abort("'stringToUTF8Array' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF8")) Module["stringToUTF8"] = function() { abort("'stringToUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "lengthBytesUTF8")) Module["lengthBytesUTF8"] = function() { abort("'lengthBytesUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackTrace")) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnPreRun")) Module["addOnPreRun"] = function() { abort("'addOnPreRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnInit")) Module["addOnInit"] = function() { abort("'addOnInit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnPreMain")) Module["addOnPreMain"] = function() { abort("'addOnPreMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnExit")) Module["addOnExit"] = function() { abort("'addOnExit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnPostRun")) Module["addOnPostRun"] = function() { abort("'addOnPostRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeStringToMemory")) Module["writeStringToMemory"] = function() { abort("'writeStringToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeArrayToMemory")) Module["writeArrayToMemory"] = function() { abort("'writeArrayToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeAsciiToMemory")) Module["writeAsciiToMemory"] = function() { abort("'writeAsciiToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addRunDependency")) Module["addRunDependency"] = function() { abort("'addRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "removeRunDependency")) Module["removeRunDependency"] = function() { abort("'removeRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createFolder")) Module["FS_createFolder"] = function() { abort("'FS_createFolder' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createPath")) Module["FS_createPath"] = function() { abort("'FS_createPath' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createDataFile")) Module["FS_createDataFile"] = function() { abort("'FS_createDataFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createPreloadedFile")) Module["FS_createPreloadedFile"] = function() { abort("'FS_createPreloadedFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createLazyFile")) Module["FS_createLazyFile"] = function() { abort("'FS_createLazyFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createLink")) Module["FS_createLink"] = function() { abort("'FS_createLink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createDevice")) Module["FS_createDevice"] = function() { abort("'FS_createDevice' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_unlink")) Module["FS_unlink"] = function() { abort("'FS_unlink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "dynamicAlloc")) Module["dynamicAlloc"] = function() { abort("'dynamicAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "loadDynamicLibrary")) Module["loadDynamicLibrary"] = function() { abort("'loadDynamicLibrary' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "loadWebAssemblyModule")) Module["loadWebAssemblyModule"] = function() { abort("'loadWebAssemblyModule' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getLEB")) Module["getLEB"] = function() { abort("'getLEB' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getFunctionTables")) Module["getFunctionTables"] = function() { abort("'getFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "alignFunctionTables")) Module["alignFunctionTables"] = function() { abort("'alignFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerFunctions")) Module["registerFunctions"] = function() { abort("'registerFunctions' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addFunction")) Module["addFunction"] = function() { abort("'addFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "removeFunction")) Module["removeFunction"] = function() { abort("'removeFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getFuncWrapper")) Module["getFuncWrapper"] = function() { abort("'getFuncWrapper' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "prettyPrint")) Module["prettyPrint"] = function() { abort("'prettyPrint' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "makeBigInt")) Module["makeBigInt"] = function() { abort("'makeBigInt' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "dynCall")) Module["dynCall"] = function() { abort("'dynCall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getCompilerSetting")) Module["getCompilerSetting"] = function() { abort("'getCompilerSetting' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "print")) Module["print"] = function() { abort("'print' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "printErr")) Module["printErr"] = function() { abort("'printErr' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getTempRet0")) Module["getTempRet0"] = function() { abort("'getTempRet0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setTempRet0")) Module["setTempRet0"] = function() { abort("'setTempRet0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "callMain")) Module["callMain"] = function() { abort("'callMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "abort")) Module["abort"] = function() { abort("'abort' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToNewUTF8")) Module["stringToNewUTF8"] = function() { abort("'stringToNewUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "abortOnCannotGrowMemory")) Module["abortOnCannotGrowMemory"] = function() { abort("'abortOnCannotGrowMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscripten_realloc_buffer")) Module["emscripten_realloc_buffer"] = function() { abort("'emscripten_realloc_buffer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ENV")) Module["ENV"] = function() { abort("'ENV' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setjmpId")) Module["setjmpId"] = function() { abort("'setjmpId' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ERRNO_CODES")) Module["ERRNO_CODES"] = function() { abort("'ERRNO_CODES' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ERRNO_MESSAGES")) Module["ERRNO_MESSAGES"] = function() { abort("'ERRNO_MESSAGES' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "DNS")) Module["DNS"] = function() { abort("'DNS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GAI_ERRNO_MESSAGES")) Module["GAI_ERRNO_MESSAGES"] = function() { abort("'GAI_ERRNO_MESSAGES' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "Protocols")) Module["Protocols"] = function() { abort("'Protocols' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "Sockets")) Module["Sockets"] = function() { abort("'Sockets' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UNWIND_CACHE")) Module["UNWIND_CACHE"] = function() { abort("'UNWIND_CACHE' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "readAsmConstArgs")) Module["readAsmConstArgs"] = function() { abort("'readAsmConstArgs' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "jstoi_q")) Module["jstoi_q"] = function() { abort("'jstoi_q' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "jstoi_s")) Module["jstoi_s"] = function() { abort("'jstoi_s' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "PATH")) Module["PATH"] = function() { abort("'PATH' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "PATH_FS")) Module["PATH_FS"] = function() { abort("'PATH_FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SYSCALLS")) Module["SYSCALLS"] = function() { abort("'SYSCALLS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "syscallMmap2")) Module["syscallMmap2"] = function() { abort("'syscallMmap2' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "syscallMunmap")) Module["syscallMunmap"] = function() { abort("'syscallMunmap' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "JSEvents")) Module["JSEvents"] = function() { abort("'JSEvents' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "demangle")) Module["demangle"] = function() { abort("'demangle' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "demangleAll")) Module["demangleAll"] = function() { abort("'demangleAll' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "jsStackTrace")) Module["jsStackTrace"] = function() { abort("'jsStackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackTrace")) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToI64")) Module["writeI53ToI64"] = function() { abort("'writeI53ToI64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToI64Clamped")) Module["writeI53ToI64Clamped"] = function() { abort("'writeI53ToI64Clamped' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToI64Signaling")) Module["writeI53ToI64Signaling"] = function() { abort("'writeI53ToI64Signaling' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToU64Clamped")) Module["writeI53ToU64Clamped"] = function() { abort("'writeI53ToU64Clamped' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToU64Signaling")) Module["writeI53ToU64Signaling"] = function() { abort("'writeI53ToU64Signaling' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "readI53FromI64")) Module["readI53FromI64"] = function() { abort("'readI53FromI64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "readI53FromU64")) Module["readI53FromU64"] = function() { abort("'readI53FromU64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "convertI32PairToI53")) Module["convertI32PairToI53"] = function() { abort("'convertI32PairToI53' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "convertU32PairToI53")) Module["convertU32PairToI53"] = function() { abort("'convertU32PairToI53' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "Browser")) Module["Browser"] = function() { abort("'Browser' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "FS")) Module["FS"] = function() { abort("'FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "MEMFS")) Module["MEMFS"] = function() { abort("'MEMFS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "TTY")) Module["TTY"] = function() { abort("'TTY' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "PIPEFS")) Module["PIPEFS"] = function() { abort("'PIPEFS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SOCKFS")) Module["SOCKFS"] = function() { abort("'SOCKFS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GL")) Module["GL"] = function() { abort("'GL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGet")) Module["emscriptenWebGLGet"] = function() { abort("'emscriptenWebGLGet' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGetTexPixelData")) Module["emscriptenWebGLGetTexPixelData"] = function() { abort("'emscriptenWebGLGetTexPixelData' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGetUniform")) Module["emscriptenWebGLGetUniform"] = function() { abort("'emscriptenWebGLGetUniform' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGetVertexAttrib")) Module["emscriptenWebGLGetVertexAttrib"] = function() { abort("'emscriptenWebGLGetVertexAttrib' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "AL")) Module["AL"] = function() { abort("'AL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL")) Module["SDL"] = function() { abort("'SDL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL_gfx")) Module["SDL_gfx"] = function() { abort("'SDL_gfx' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GLUT")) Module["GLUT"] = function() { abort("'GLUT' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "EGL")) Module["EGL"] = function() { abort("'EGL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GLFW_Window")) Module["GLFW_Window"] = function() { abort("'GLFW_Window' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GLFW")) Module["GLFW"] = function() { abort("'GLFW' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GLEW")) Module["GLEW"] = function() { abort("'GLEW' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "IDBStore")) Module["IDBStore"] = function() { abort("'IDBStore' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "runAndAbortIfError")) Module["runAndAbortIfError"] = function() { abort("'runAndAbortIfError' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emval_handle_array")) Module["emval_handle_array"] = function() { abort("'emval_handle_array' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emval_free_list")) Module["emval_free_list"] = function() { abort("'emval_free_list' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emval_symbols")) Module["emval_symbols"] = function() { abort("'emval_symbols' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "init_emval")) Module["init_emval"] = function() { abort("'init_emval' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "count_emval_handles")) Module["count_emval_handles"] = function() { abort("'count_emval_handles' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "get_first_emval")) Module["get_first_emval"] = function() { abort("'get_first_emval' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getStringOrSymbol")) Module["getStringOrSymbol"] = function() { abort("'getStringOrSymbol' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "requireHandle")) Module["requireHandle"] = function() { abort("'requireHandle' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emval_newers")) Module["emval_newers"] = function() { abort("'emval_newers' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "craftEmvalAllocator")) Module["craftEmvalAllocator"] = function() { abort("'craftEmvalAllocator' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emval_get_global")) Module["emval_get_global"] = function() { abort("'emval_get_global' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emval_methodCallers")) Module["emval_methodCallers"] = function() { abort("'emval_methodCallers' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "InternalError")) Module["InternalError"] = function() { abort("'InternalError' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "BindingError")) Module["BindingError"] = function() { abort("'BindingError' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UnboundTypeError")) Module["UnboundTypeError"] = function() { abort("'UnboundTypeError' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "PureVirtualError")) Module["PureVirtualError"] = function() { abort("'PureVirtualError' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "init_embind")) Module["init_embind"] = function() { abort("'init_embind' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "throwInternalError")) Module["throwInternalError"] = function() { abort("'throwInternalError' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "throwBindingError")) Module["throwBindingError"] = function() { abort("'throwBindingError' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "throwUnboundTypeError")) Module["throwUnboundTypeError"] = function() { abort("'throwUnboundTypeError' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ensureOverloadTable")) Module["ensureOverloadTable"] = function() { abort("'ensureOverloadTable' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "exposePublicSymbol")) Module["exposePublicSymbol"] = function() { abort("'exposePublicSymbol' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "replacePublicSymbol")) Module["replacePublicSymbol"] = function() { abort("'replacePublicSymbol' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "extendError")) Module["extendError"] = function() { abort("'extendError' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "createNamedFunction")) Module["createNamedFunction"] = function() { abort("'createNamedFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registeredInstances")) Module["registeredInstances"] = function() { abort("'registeredInstances' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getBasestPointer")) Module["getBasestPointer"] = function() { abort("'getBasestPointer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerInheritedInstance")) Module["registerInheritedInstance"] = function() { abort("'registerInheritedInstance' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "unregisterInheritedInstance")) Module["unregisterInheritedInstance"] = function() { abort("'unregisterInheritedInstance' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getInheritedInstance")) Module["getInheritedInstance"] = function() { abort("'getInheritedInstance' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getInheritedInstanceCount")) Module["getInheritedInstanceCount"] = function() { abort("'getInheritedInstanceCount' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getLiveInheritedInstances")) Module["getLiveInheritedInstances"] = function() { abort("'getLiveInheritedInstances' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registeredTypes")) Module["registeredTypes"] = function() { abort("'registeredTypes' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "awaitingDependencies")) Module["awaitingDependencies"] = function() { abort("'awaitingDependencies' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "typeDependencies")) Module["typeDependencies"] = function() { abort("'typeDependencies' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registeredPointers")) Module["registeredPointers"] = function() { abort("'registeredPointers' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerType")) Module["registerType"] = function() { abort("'registerType' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "whenDependentTypesAreResolved")) Module["whenDependentTypesAreResolved"] = function() { abort("'whenDependentTypesAreResolved' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "embind_charCodes")) Module["embind_charCodes"] = function() { abort("'embind_charCodes' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "embind_init_charCodes")) Module["embind_init_charCodes"] = function() { abort("'embind_init_charCodes' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "readLatin1String")) Module["readLatin1String"] = function() { abort("'readLatin1String' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getTypeName")) Module["getTypeName"] = function() { abort("'getTypeName' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "heap32VectorToArray")) Module["heap32VectorToArray"] = function() { abort("'heap32VectorToArray' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "requireRegisteredType")) Module["requireRegisteredType"] = function() { abort("'requireRegisteredType' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getShiftFromSize")) Module["getShiftFromSize"] = function() { abort("'getShiftFromSize' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "integerReadValueFromPointer")) Module["integerReadValueFromPointer"] = function() { abort("'integerReadValueFromPointer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "enumReadValueFromPointer")) Module["enumReadValueFromPointer"] = function() { abort("'enumReadValueFromPointer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "floatReadValueFromPointer")) Module["floatReadValueFromPointer"] = function() { abort("'floatReadValueFromPointer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "simpleReadValueFromPointer")) Module["simpleReadValueFromPointer"] = function() { abort("'simpleReadValueFromPointer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "runDestructors")) Module["runDestructors"] = function() { abort("'runDestructors' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "new_")) Module["new_"] = function() { abort("'new_' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "craftInvokerFunction")) Module["craftInvokerFunction"] = function() { abort("'craftInvokerFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "embind__requireFunction")) Module["embind__requireFunction"] = function() { abort("'embind__requireFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "tupleRegistrations")) Module["tupleRegistrations"] = function() { abort("'tupleRegistrations' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "structRegistrations")) Module["structRegistrations"] = function() { abort("'structRegistrations' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "genericPointerToWireType")) Module["genericPointerToWireType"] = function() { abort("'genericPointerToWireType' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "constNoSmartPtrRawPointerToWireType")) Module["constNoSmartPtrRawPointerToWireType"] = function() { abort("'constNoSmartPtrRawPointerToWireType' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "nonConstNoSmartPtrRawPointerToWireType")) Module["nonConstNoSmartPtrRawPointerToWireType"] = function() { abort("'nonConstNoSmartPtrRawPointerToWireType' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "init_RegisteredPointer")) Module["init_RegisteredPointer"] = function() { abort("'init_RegisteredPointer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "RegisteredPointer")) Module["RegisteredPointer"] = function() { abort("'RegisteredPointer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "RegisteredPointer_getPointee")) Module["RegisteredPointer_getPointee"] = function() { abort("'RegisteredPointer_getPointee' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "RegisteredPointer_destructor")) Module["RegisteredPointer_destructor"] = function() { abort("'RegisteredPointer_destructor' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "RegisteredPointer_deleteObject")) Module["RegisteredPointer_deleteObject"] = function() { abort("'RegisteredPointer_deleteObject' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "RegisteredPointer_fromWireType")) Module["RegisteredPointer_fromWireType"] = function() { abort("'RegisteredPointer_fromWireType' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "runDestructor")) Module["runDestructor"] = function() { abort("'runDestructor' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "releaseClassHandle")) Module["releaseClassHandle"] = function() { abort("'releaseClassHandle' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "finalizationGroup")) Module["finalizationGroup"] = function() { abort("'finalizationGroup' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "detachFinalizer_deps")) Module["detachFinalizer_deps"] = function() { abort("'detachFinalizer_deps' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "detachFinalizer")) Module["detachFinalizer"] = function() { abort("'detachFinalizer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "attachFinalizer")) Module["attachFinalizer"] = function() { abort("'attachFinalizer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "makeClassHandle")) Module["makeClassHandle"] = function() { abort("'makeClassHandle' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "init_ClassHandle")) Module["init_ClassHandle"] = function() { abort("'init_ClassHandle' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ClassHandle")) Module["ClassHandle"] = function() { abort("'ClassHandle' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ClassHandle_isAliasOf")) Module["ClassHandle_isAliasOf"] = function() { abort("'ClassHandle_isAliasOf' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "throwInstanceAlreadyDeleted")) Module["throwInstanceAlreadyDeleted"] = function() { abort("'throwInstanceAlreadyDeleted' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ClassHandle_clone")) Module["ClassHandle_clone"] = function() { abort("'ClassHandle_clone' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ClassHandle_delete")) Module["ClassHandle_delete"] = function() { abort("'ClassHandle_delete' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "deletionQueue")) Module["deletionQueue"] = function() { abort("'deletionQueue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ClassHandle_isDeleted")) Module["ClassHandle_isDeleted"] = function() { abort("'ClassHandle_isDeleted' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ClassHandle_deleteLater")) Module["ClassHandle_deleteLater"] = function() { abort("'ClassHandle_deleteLater' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "flushPendingDeletes")) Module["flushPendingDeletes"] = function() { abort("'flushPendingDeletes' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "delayFunction")) Module["delayFunction"] = function() { abort("'delayFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setDelayFunction")) Module["setDelayFunction"] = function() { abort("'setDelayFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "RegisteredClass")) Module["RegisteredClass"] = function() { abort("'RegisteredClass' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "shallowCopyInternalPointer")) Module["shallowCopyInternalPointer"] = function() { abort("'shallowCopyInternalPointer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "downcastPointer")) Module["downcastPointer"] = function() { abort("'downcastPointer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "upcastPointer")) Module["upcastPointer"] = function() { abort("'upcastPointer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "validateThis")) Module["validateThis"] = function() { abort("'validateThis' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "char_0")) Module["char_0"] = function() { abort("'char_0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "char_9")) Module["char_9"] = function() { abort("'char_9' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "makeLegalFunctionName")) Module["makeLegalFunctionName"] = function() { abort("'makeLegalFunctionName' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "warnOnce")) Module["warnOnce"] = function() { abort("'warnOnce' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackSave")) Module["stackSave"] = function() { abort("'stackSave' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackRestore")) Module["stackRestore"] = function() { abort("'stackRestore' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackAlloc")) Module["stackAlloc"] = function() { abort("'stackAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "AsciiToString")) Module["AsciiToString"] = function() { abort("'AsciiToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToAscii")) Module["stringToAscii"] = function() { abort("'stringToAscii' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF16ToString")) Module["UTF16ToString"] = function() { abort("'UTF16ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF16")) Module["stringToUTF16"] = function() { abort("'stringToUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "lengthBytesUTF16")) Module["lengthBytesUTF16"] = function() { abort("'lengthBytesUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF32ToString")) Module["UTF32ToString"] = function() { abort("'UTF32ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF32")) Module["stringToUTF32"] = function() { abort("'stringToUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "lengthBytesUTF32")) Module["lengthBytesUTF32"] = function() { abort("'lengthBytesUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "allocateUTF8")) Module["allocateUTF8"] = function() { abort("'allocateUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "allocateUTF8OnStack")) Module["allocateUTF8OnStack"] = function() { abort("'allocateUTF8OnStack' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["writeStackCookie"] = writeStackCookie;
Module["checkStackCookie"] = checkStackCookie;
Module["abortStackOverflow"] = abortStackOverflow;
if (!Object.getOwnPropertyDescriptor(Module, "intArrayFromBase64")) Module["intArrayFromBase64"] = function() { abort("'intArrayFromBase64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "tryParseAsDataURI")) Module["tryParseAsDataURI"] = function() { abort("'tryParseAsDataURI' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_NORMAL")) Object.defineProperty(Module, "ALLOC_NORMAL", { configurable: true, get: function() { abort("'ALLOC_NORMAL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_STACK")) Object.defineProperty(Module, "ALLOC_STACK", { configurable: true, get: function() { abort("'ALLOC_STACK' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_DYNAMIC")) Object.defineProperty(Module, "ALLOC_DYNAMIC", { configurable: true, get: function() { abort("'ALLOC_DYNAMIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_NONE")) Object.defineProperty(Module, "ALLOC_NONE", { configurable: true, get: function() { abort("'ALLOC_NONE' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });



var calledRun;

// Modularize mode returns a function, which can be called to
// create instances. The instances provide a then() method,
// must like a Promise, that receives a callback. The callback
// is called when the module is ready to run, with the module
// as a parameter. (Like a Promise, it also returns the module
// so you can use the output of .then(..)).
Module['then'] = function(func) {
  // We may already be ready to run code at this time. if
  // so, just queue a call to the callback.
  if (calledRun) {
    func(Module);
  } else {
    // we are not ready to call then() yet. we must call it
    // at the same time we would call onRuntimeInitialized.
    var old = Module['onRuntimeInitialized'];
    Module['onRuntimeInitialized'] = function() {
      if (old) old();
      func(Module);
    };
  }
  return Module;
};

/**
 * @constructor
 * @this {ExitStatus}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
}

var calledMain = false;


dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!calledRun) run();
  if (!calledRun) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
};





/** @type {function(Array=)} */
function run(args) {
  args = args || arguments_;

  if (runDependencies > 0) {
    return;
  }

  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later

  function doRun() {
    // run may have just been called through dependencies being fulfilled just in this very frame,
    // or while the async setStatus time below was happening
    if (calledRun) return;
    calledRun = true;
    Module['calledRun'] = true;

    if (ABORT) return;

    initRuntime();

    preMain();

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    assert(!Module['_main'], 'compiled without a main, but one is present. if you added it from JS, use Module["onRuntimeInitialized"]');

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else
  {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = run;

function checkUnflushedContent() {
  // Compiler settings do not allow exiting the runtime, so flushing
  // the streams is not possible. but in ASSERTIONS mode we check
  // if there was something to flush, and if so tell the user they
  // should request that the runtime be exitable.
  // Normally we would not even include flush() at all, but in ASSERTIONS
  // builds we do so just for this check, and here we see if there is any
  // content to flush, that is, we check if there would have been
  // something a non-ASSERTIONS build would have not seen.
  // How we flush the streams depends on whether we are in SYSCALLS_REQUIRE_FILESYSTEM=0
  // mode (which has its own special function for this; otherwise, all
  // the code is inside libc)
  var print = out;
  var printErr = err;
  var has = false;
  out = err = function(x) {
    has = true;
  }
  try { // it doesn't matter if it fails
    var flush = Module['_fflush'];
    if (flush) flush(0);
    // also flush in the JS FS layer
    ['stdout', 'stderr'].forEach(function(name) {
      var info = FS.analyzePath('/dev/' + name);
      if (!info) return;
      var stream = info.object;
      var rdev = stream.rdev;
      var tty = TTY.ttys[rdev];
      if (tty && tty.output && tty.output.length) {
        has = true;
      }
    });
  } catch(e) {}
  out = print;
  err = printErr;
  if (has) {
    warnOnce('stdio streams had content in them that was not flushed. you should set EXIT_RUNTIME to 1 (see the FAQ), or make sure to emit a newline when you printf etc.');
  }
}

/** @param {boolean|number=} implicit */
function exit(status, implicit) {
  checkUnflushedContent();

  // if this is just main exit-ing implicitly, and the status is 0, then we
  // don't need to do anything here and can just leave. if the status is
  // non-zero, though, then we need to report it.
  // (we may have warned about this earlier, if a situation justifies doing so)
  if (implicit && noExitRuntime && status === 0) {
    return;
  }

  if (noExitRuntime) {
    // if exit() was called, we may warn the user if the runtime isn't actually being shut down
    if (!implicit) {
      err('program exited (with status: ' + status + '), but EXIT_RUNTIME is not set, so halting execution but not exiting the runtime or preventing further async execution (build with EXIT_RUNTIME=1, if you want a true shutdown)');
    }
  } else {

    ABORT = true;
    EXITSTATUS = status;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  quit_(status, new ExitStatus(status));
}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}


  noExitRuntime = true;

run();





// {{MODULE_ADDITIONS}}



/*
Copyright notice for the base64 to arraybuffer conversion algorithm.

Copyright (c) 2011, Daniel Guerrero
All rights reserved.
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL DANIEL GUERRERO BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/* global Module */

"use strict";

console.log("running%c Maximilian v2.1.0 (asm.js)", "font-weight: bold; background: #222; color: #fa7a55");


// ------------------------------------------------
// maxiArray - could extend Array object?
// cheaty array method to avoid mixing vector terminology with arrays
// but have to copy everything?!
// better to use GetArrayAsVectorDbl function ???
Module.maxiArray = function maxiArray() {
  this.length = 0;
  var vec = new Module.VectorDouble();

  // this.update = function(){
  //     var lengthsMatch = this.length !== this.vec.size();
  //     if(!lengthsMatch){
  //         if(this.length < this.vec.size()){
  //             for(var i = this.length; i < this.vec.size(); i++){
  //                 this[i] = this.vec.get(i);
  //             }
  //         } else{
  //             for(var i = this.length; i < this.vec.size(); i++){
  //                 delete this[i];
  //             }
  //         }

  //         // reset length var
  //         this.length = this.vec.size();
  //     }
  // };
};

Module.maxiArray.prototype.asVector = function(arrayIn) {
  return this.vec;
};

Module.maxiArray.prototype.asJsArray = function(arrayIn) {
  var arrayOut = [];

  for (var i = 0; i < this.length; i++) {
    array.push(this.vec.get(i)); //FIXME: mz I think this must be a bug? What is "array"? arrayOut maybe?
  }

  return arrayOut;
};

Module.maxiArray.prototype.set = function(arrayIn) {
  this.clear();
  this.vec = GetArrayAsVectorDbl(arrayIn); //FIXME: mz this is part of maxiTools
  this.length = this.vec.size();
  this.SetSqBrackets(true);
};

Module.maxiArray.prototype.push = function(num) {
  this.vec.push_back(num);
  this[this.length] = num;
  this.length++;
};

// set object properties to mimic array
// this doesn't seem particularly efficient or smart
Module.maxiArray.prototype.SetSqBrackets = function(useSq) {
  for (var i = 0; i < this.length; i++) {
    if (useSq) {
      this[i] = this.vec.get(i);
    } else {
      delete this[i];
    }
  }
};

Module.maxiArray.prototype.clear = function(useSq) {
  for (var i = 0; i < this.length; i++) {
    delete this[i];
  }
  Module.vectorTools.clearVectorDbl(this.vec); //FIXME: mz this is also part of maxiTools
  this.length = 0;
};


// tools
Module.maxiTools = function() {};

// not sure this is good
// Module.maxiTools.arrayOfObj = function(obj, num){
//     var array = [];

//     for(var i = 0; i < num; i++){
//         array.push(new obj());
//     }
//     return array;
// };

Module.maxiTools.getArrayAsVectorDbl = function(arrayIn) {
  var vecOut = new Module.VectorDouble();
  for (var i = 0; i < arrayIn.length; i++) {
    vecOut.push_back(arrayIn[i]);
  }

  return vecOut;
};

Module.maxiTools.getBase64 = function(str) {
  //check if the string is a data URI
  if (str.indexOf(';base64,') !== -1) {
    //see where the actual data begins
    var dataStart = str.indexOf(';base64,') + 8;
    //check if the data is base64-encoded, if yes, return it
    // taken from
    // http://stackoverflow.com/a/8571649
    return str.slice(dataStart).match(/^([A-Za-z0-9+\/]{4})*([A-Za-z0-9+\/]{4}|[A-Za-z0-9+\/]{3}=|[A-Za-z0-9+\/]{2}==)$/) ? str.slice(dataStart) : false;
  } else return false;
};

Module.maxiTools._keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";

Module.maxiTools.removePaddingFromBase64 = function(input) {
  var lkey = Module.maxiTools._keyStr.indexOf(input.charAt(input.length - 1));
  if (lkey === 64) {
    return input.substring(0, input.length - 1);
  }
  return input;
};


// ------------------------------------------------
Module.maxiAudio = function() {
  this.numChannels = 2;
  this.output = 0;

  this.context = null;
  this.source = null;
  this.analyser = null;
  this.maxiAudioProcessor = null;
  this.bufferSize = 1024;
  this.initDone = false;
};

Module.maxiAudio.play = function() {};


Module.INPUT_TYPE = {
  NONE: -2,
  DEFAULT: -1
};
Module.maxiAudio.prototype.init = function(audioIn = Module.INPUT_TYPE.NONE) {
  // Temporary patch until all browsers support unprefixed context.
  this.context = new(window.AudioContext || window.webkitAudioContext)();
  this.source = this.context.createBufferSource();
  this.maxiAudioProcessor = this.context.createScriptProcessor(this.bufferSize, this.numChannels, this.numChannels);
  let handleConnection = function(stream) {
    console.log("Connecting audio input");
    console.log(stream);
    this.audioInputSource = this.context.createMediaStreamSource(stream);
    this.audioInputSource.connect(this.maxiAudioProcessor);
  }.bind(this);
  if (audioIn == Module.INPUT_TYPE.DEFAULT) {
    navigator.mediaDevices.getUserMedia({
        audio: true,
        video: false
      })
      .then(handleConnection);
  } else if (audioIn > Module.INPUT_TYPE.DEFAULT) {
    navigator.mediaDevices.enumerateDevices().then((devices) => {
      devices = devices.filter((d) => d.kind === 'audioinput');
      navigator.mediaDevices.getUserMedia({
          audio: {
            deviceId: devices[audioIn].deviceId
          },
          video: false
        })
        .then(handleConnection);
    });
  } else {
    this.source.connect(this.maxiAudioProcessor);
  }
  this.maxiAudioProcessor.onaudioprocess = function(event) {
      var numInputChannels = event.inputBuffer.numberOfChannels;
      var numChannels = event.outputBuffer.numberOfChannels;
      var outputLength = event.outputBuffer.getChannelData(0).length;
      var audioIn = new Array(numChannels);
      for (var i = 0; i < outputLength; ++i) {
        for (let channel = 0; channel < numInputChannels; channel++) {
          audioIn[channel] = event.inputBuffer.getChannelData(channel)[i];
        }
        var w = this.play(audioIn);
        // var channel = 0;
        if (w instanceof Array) {
          for (channel = 0; channel < numChannels; channel++) {
            event.outputBuffer.getChannelData(channel)[i] = w[channel];
          }
        } else {
          for (channel = 0; channel < numChannels; channel++) {
            event.outputBuffer.getChannelData(channel)[i] = w;
          }
        }
      }
    }
    .bind(this);

  // Connect the processing graph: source -> maxiAudioProcessor -> analyser -> destination
  // this.maxiAudioProcessor.connect(this.analyser);
  this.maxiAudioProcessor.connect(this.context.destination);
  this.initDone = true;
};


Module.maxiAudio.prototype.listInputDevices = function() {
  window.navigator.mediaDevices.enumerateDevices().then((devices) => {
    devices = devices.filter((d) => d.kind === 'audioinput');
    console.log(devices);
  });
}


Module.maxiAudio.prototype.getNumChannels = function() {
  return this.numChannels;
};

// isArray should be second param really
// set num channels and set output as an array
// use this if you want to change number of channels
Module.maxiAudio.prototype.setNumChannels = function(isArray, numChannels_) {

  this.numChannels = numChannels_;
  this.outputIsArray(isArray, numChannels_);

  this.resetAudio();
};

Module.maxiAudio.prototype.setBufferSize = function(newBufferSize) {
  this.bufferSize = newBufferSize;
  this.resetAudio();
};

// use this if you want to keep num of outputs but change
// method e.g. array or not
Module.maxiAudio.prototype.outputIsArray = function(isArray) {
  if (isArray) {
    this.output = new Array(this.numChannels);

    for (var i = 0; i < this.numChannels; i++) {
      this.output[i] = 0;
    }
  } else {
    this.output = 0;
  }
};


Module.maxiAudio.prototype.resetAudio = function() {
  if (this.initDone) {
    this.source.disconnect();
    this.maxiAudioProcessor.disconnect();
    this.analyser.disconnect();
  }

  this.init();
};


// option to load sample if a different context is used
Module.maxiAudio.prototype.loadSample = function(url, samplePlayer, onLoaded, contextIn) {
  var data = [];
  var context;

  if (!contextIn) {
    context = this.context;
  } else {
    context = contextIn;
  }

  samplePlayer.clear();

  //check if url is actually a base64-encoded string
  var b64 = Module.maxiTools.getBase64(url);
  if (b64) {
    //convert to arraybuffer
    //modified version of this:
    // https://github.com/danguer/blog-examples/blob/master/js/base64-binary.js
    var ab_bytes = (b64.length / 4) * 3;
    var arrayBuffer = new ArrayBuffer(ab_bytes);

    b64 = Module.maxiTools.removePaddingFromBase64(Module.maxiTools.removePaddingFromBase64(b64));

    var bytes = parseInt((b64.length / 4) * 3, 10);

    var uarray;
    var chr1, chr2, chr3;
    var enc1, enc2, enc3, enc4;
    var i = 0;
    var j = 0;

    uarray = new Uint8Array(arrayBuffer);

    b64 = b64.replace(/[^A-Za-z0-9\+\/\=]/g, "");

    for (i = 0; i < bytes; i += 3) {
      //get the 3 octects in 4 ascii chars
      enc1 = Module.maxiTools._keyStr.indexOf(b64.charAt(j++));
      enc2 = Module.maxiTools._keyStr.indexOf(b64.charAt(j++));
      enc3 = Module.maxiTools._keyStr.indexOf(b64.charAt(j++));
      enc4 = Module.maxiTools._keyStr.indexOf(b64.charAt(j++));

      chr1 = (enc1 << 2) | (enc2 >> 4);
      chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
      chr3 = ((enc3 & 3) << 6) | enc4;

      uarray[i] = chr1;
      if (enc3 !== 64) uarray[i + 1] = chr2;
      if (enc4 !== 64) uarray[i + 2] = chr3;
    }

    context.decodeAudioData(
      arrayBuffer,
      function(buffer) {
        // source.buffer = buffer;
        // source.loop = true;
        // source.start(0);
        data = buffer.getChannelData(0);

        if (data) {
          var myBufferData = new Module.VectorDouble();
          // Module.vectorTools.clearVectorDbl(myBufferData);

          for (var n = 0; n < data.length; n++) {
            myBufferData.push_back(data[n]);
          }

          samplePlayer.setSample(myBufferData /*, context.sampleRate*/ );
        }

      },

      function(buffer) {
        console.log("Error decoding source!");
      }
    );


  } else {
    // Load asynchronously
    var request = new XMLHttpRequest();
    request.addEventListener("load",
      function(evt) {
        console.log("The transfer is complete.");
      });
    request.open("GET", url, true);

    request.responseType = "arraybuffer";

    if (url.split(".").pop() == "ogg") {
      request.onload = function() {
        var oggData = request.response; // Note: not oReq.responseText
        if (oggData) {
          var oggDataBytes = new Uint8Array(oggData);
          console.log(oggDataBytes);
          var myBufferData = new Module.VectorUChar();
          for (var n = 0; n < oggDataBytes.length; n++) {
            myBufferData.push_back(oggDataBytes[n]);
          }
          console.log(myBufferData);
          let res = samplePlayer.setSampleFromOggBlob(myBufferData, 0);
          if (onLoaded) {
            onLoaded(samplePlayer);
          };
        }
      }
    } else {
      request.onload = function() {
        context.decodeAudioData(
          request.response,
          function(buffer) {
            data = buffer.getChannelData(0);
            if (data) {
              var myBufferData = new Module.VectorDouble();
              // Module.vectorTools.clearVectorDbl(myBufferData);

              for (var n = 0; n < data.length; n++) {
                myBufferData.push_back(data[n]);
              }

              samplePlayer.setSample(myBufferData /*, context.sampleRate*/ );
              if (onLoaded) {
                onLoaded(samplePlayer);
              };
            }

          },

          function(buffer) {
            console.log("Error decoding source!");
          }
        );
      };
    }
    request.send();
  }

};



  return maximilian
}
);
})();
if (typeof exports === 'object' && typeof module === 'object')
      module.exports = maximilian;
    else if (typeof define === 'function' && define['amd'])
      define([], function() { return maximilian; });
    else if (typeof exports === 'object')
      exports["maximilian"] = maximilian;
    