
var maximilian = (function() {
  var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;
  return (
function(maximilian) {
  maximilian = maximilian || {};

// Copyright 2010 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof maximilian !== 'undefined' ? maximilian : {};

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)


// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
var key;
for (key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

Module['arguments'] = [];
Module['thisProgram'] = './this.program';
Module['quit'] = function(status, toThrow) {
  throw toThrow;
};
Module['preRun'] = [];
Module['postRun'] = [];

// Determine the runtime environment we are in. You can customize this by
// setting the ENVIRONMENT setting at compile time (see settings.js).

var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;
ENVIRONMENT_IS_WEB = typeof window === 'object';
ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (Module['ENVIRONMENT']) {
  throw new Error('Module.ENVIRONMENT has been deprecated. To force the environment, use the ENVIRONMENT compile-time option (for example, -s ENVIRONMENT=web or -s ENVIRONMENT=node)');
}


// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)




// `/` should be present at the end if `scriptDirectory` is not empty
var scriptDirectory = '';
function locateFile(path) {
  if (Module['locateFile']) {
    return Module['locateFile'](path, scriptDirectory);
  } else {
    return scriptDirectory + path;
  }
}

if (ENVIRONMENT_IS_NODE) {
  scriptDirectory = __dirname + '/';

  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  var nodeFS;
  var nodePath;

  Module['read'] = function shell_read(filename, binary) {
    var ret;
    ret = tryParseAsDataURI(filename);
    if (!ret) {
      if (!nodeFS) nodeFS = require('fs');
      if (!nodePath) nodePath = require('path');
      filename = nodePath['normalize'](filename);
      ret = nodeFS['readFileSync'](filename);
    }
    return binary ? ret : ret.toString();
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  if (process['argv'].length > 1) {
    Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
  }

  Module['arguments'] = process['argv'].slice(2);

  // MODULARIZE will export the module in the proper place outside, we don't need to export here

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });
  // Currently node will swallow unhandled rejections, but this behavior is
  // deprecated, and in the future it will exit with error status.
  process['on']('unhandledRejection', abort);

  Module['quit'] = function(status) {
    process['exit'](status);
  };

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
} else
if (ENVIRONMENT_IS_SHELL) {


  if (typeof read != 'undefined') {
    Module['read'] = function shell_read(f) {
      var data = tryParseAsDataURI(f);
      if (data) {
        return intArrayToString(data);
      }
      return read(f);
    };
  }

  Module['readBinary'] = function readBinary(f) {
    var data;
    data = tryParseAsDataURI(f);
    if (data) {
      return data;
    }
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof quit === 'function') {
    Module['quit'] = function(status) {
      quit(status);
    }
  }
} else
if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  if (ENVIRONMENT_IS_WORKER) { // Check worker, not web, since window could be polyfilled
    scriptDirectory = self.location.href;
  } else if (document.currentScript) { // web
    scriptDirectory = document.currentScript.src;
  }
  // When MODULARIZE (and not _INSTANCE), this JS may be executed later, after document.currentScript
  // is gone, so we saved it, and we use it here instead of any other info.
  if (_scriptDir) {
    scriptDirectory = _scriptDir;
  }
  // blob urls look like blob:http://site.com/etc/etc and we cannot infer anything from them.
  // otherwise, slice off the final part of the url to find the script directory.
  // if scriptDirectory does not contain a slash, lastIndexOf will return -1,
  // and scriptDirectory will correctly be replaced with an empty string.
  if (scriptDirectory.indexOf('blob:') !== 0) {
    scriptDirectory = scriptDirectory.substr(0, scriptDirectory.lastIndexOf('/')+1);
  } else {
    scriptDirectory = '';
  }


  Module['read'] = function shell_read(url) {
    try {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
    } catch (err) {
      var data = tryParseAsDataURI(url);
      if (data) {
        return intArrayToString(data);
      }
      throw err;
    }
  };

  if (ENVIRONMENT_IS_WORKER) {
    Module['readBinary'] = function readBinary(url) {
      try {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(xhr.response);
      } catch (err) {
        var data = tryParseAsDataURI(url);
        if (data) {
          return data;
        }
        throw err;
      }
    };
  }

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      var data = tryParseAsDataURI(url);
      if (data) {
        onload(data.buffer);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  Module['setWindowTitle'] = function(title) { document.title = title };
} else
{
  throw new Error('environment detection error');
}

// Set up the out() and err() hooks, which are how we can print to stdout or
// stderr, respectively.
// If the user provided Module.print or printErr, use that. Otherwise,
// console.log is checked first, as 'print' on the web will open a print dialogue
// printErr is preferable to console.warn (works better in shells)
// bind(console) is necessary to fix IE/Edge closed dev tools panel behavior.
var out = Module['print'] || (typeof console !== 'undefined' ? console.log.bind(console) : (typeof print !== 'undefined' ? print : null));
var err = Module['printErr'] || (typeof printErr !== 'undefined' ? printErr : ((typeof console !== 'undefined' && console.warn.bind(console)) || out));

// Merge back in the overrides
for (key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;

// perform assertions in shell.js after we set up out() and err(), as otherwise if an assertion fails it cannot print the message
assert(typeof Module['memoryInitializerPrefixURL'] === 'undefined', 'Module.memoryInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['pthreadMainPrefixURL'] === 'undefined', 'Module.pthreadMainPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['cdInitializerPrefixURL'] === 'undefined', 'Module.cdInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['filePackagePrefixURL'] === 'undefined', 'Module.filePackagePrefixURL option was removed, use Module.locateFile instead');



// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// {{PREAMBLE_ADDITIONS}}

var STACK_ALIGN = 16;

// stack management, and other functionality that is provided by the compiled code,
// should not be used before it is ready
stackSave = stackRestore = stackAlloc = function() {
  abort('cannot use the stack before compiled code is ready to run, and has provided stack access');
};

function staticAlloc(size) {
  abort('staticAlloc is no longer available at runtime; instead, perform static allocations at compile time (using makeStaticAlloc)');
}

function dynamicAlloc(size) {
  assert(DYNAMICTOP_PTR);
  var ret = HEAP32[DYNAMICTOP_PTR>>2];
  var end = (ret + size + 15) & -16;
  if (end <= _emscripten_get_heap_size()) {
    HEAP32[DYNAMICTOP_PTR>>2] = end;
  } else {
    return 0;
  }
  return ret;
}

function alignMemory(size, factor) {
  if (!factor) factor = STACK_ALIGN; // stack alignment (16-byte) by default
  return Math.ceil(size / factor) * factor;
}

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': return 1;
    case 'i16': return 2;
    case 'i32': return 4;
    case 'i64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length-1] === '*') {
        return 4; // A pointer
      } else if (type[0] === 'i') {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 === 0, 'getNativeTypeSize invalid bits ' + bits + ', type ' + type);
        return bits / 8;
      } else {
        return 0;
      }
    }
  }
}

function warnOnce(text) {
  if (!warnOnce.shown) warnOnce.shown = {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    err(text);
  }
}

var asm2wasmImports = { // special asm2wasm imports
    "f64-rem": function(x, y) {
        return x % y;
    },
    "debugger": function() {
        debugger;
    }
};



var jsCallStartIndex = 1;
var functionPointers = new Array(0);


// 'sig' parameter is currently only used for LLVM backend under certain
// circumstance: RESERVED_FUNCTION_POINTERS=1, EMULATED_FUNCTION_POINTERS=0.
function addFunction(func, sig) {

  var base = 0;
  for (var i = base; i < base + 0; i++) {
    if (!functionPointers[i]) {
      functionPointers[i] = func;
      return jsCallStartIndex + i;
    }
  }
  throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';

}

function removeFunction(index) {
  functionPointers[index-jsCallStartIndex] = null;
}

var funcWrappers = {};

function getFuncWrapper(func, sig) {
  if (!func) return; // on null pointer, return undefined
  assert(sig);
  if (!funcWrappers[sig]) {
    funcWrappers[sig] = {};
  }
  var sigCache = funcWrappers[sig];
  if (!sigCache[func]) {
    // optimize away arguments usage in common cases
    if (sig.length === 1) {
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func);
      };
    } else if (sig.length === 2) {
      sigCache[func] = function dynCall_wrapper(arg) {
        return dynCall(sig, func, [arg]);
      };
    } else {
      // general case
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func, Array.prototype.slice.call(arguments));
      };
    }
  }
  return sigCache[func];
}


function makeBigInt(low, high, unsigned) {
  return unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0));
}

function dynCall(sig, ptr, args) {
  if (args && args.length) {
    assert(args.length == sig.length-1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
  } else {
    assert(sig.length == 1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].call(null, ptr);
  }
}

var tempRet0 = 0;

var setTempRet0 = function(value) {
  tempRet0 = value;
}

var getTempRet0 = function() {
  return tempRet0;
}

function getCompilerSetting(name) {
  throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for getCompilerSetting or emscripten_get_compiler_setting to work';
}

var Runtime = {
  // helpful errors
  getTempRet0: function() { abort('getTempRet0() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  staticAlloc: function() { abort('staticAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  stackAlloc: function() { abort('stackAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
};

// The address globals begin at. Very low in memory, for code size and optimization opportunities.
// Above 0 is static memory, starting with globals.
// Then the stack.
// Then 'dynamic' memory for sbrk.
var GLOBAL_BASE = 8;




// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html




/** @type {function(number, string, boolean=)} */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for getValue: ' + type);
    }
  return null;
}




// Wasm globals

var wasmMemory;

// Potentially used for direct table calls.
var wasmTable;


//========================================
// Runtime essentials
//========================================

// whether we are quitting the application. no code should run after this.
// set in exit() and abort()
var ABORT = false;

// set by exit() and abort().  Passed to 'onExit' handler.
// NOTE: This is also used as the process return code code in shell environments
// but only when noExitRuntime is false.
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
  return func;
}

// C calling interface.
function ccall(ident, returnType, argTypes, args, opts) {
  // For fast lookup of conversion functions
  var toC = {
    'string': function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        var len = (str.length << 2) + 1;
        ret = stackAlloc(len);
        stringToUTF8(str, ret, len);
      }
      return ret;
    },
    'array': function(arr) {
      var ret = stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    }
  };

  function convertReturnValue(ret) {
    if (returnType === 'string') return UTF8ToString(ret);
    if (returnType === 'boolean') return Boolean(ret);
    return ret;
  }

  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  assert(returnType !== 'array', 'Return type should not be "array".');
  if (args) {
    for (var i = 0; i < args.length; i++) {
      var converter = toC[argTypes[i]];
      if (converter) {
        if (stack === 0) stack = stackSave();
        cArgs[i] = converter(args[i]);
      } else {
        cArgs[i] = args[i];
      }
    }
  }
  var ret = func.apply(null, cArgs);
  ret = convertReturnValue(ret);
  if (stack !== 0) stackRestore(stack);
  return ret;
}

function cwrap(ident, returnType, argTypes, opts) {
  return function() {
    return ccall(ident, returnType, argTypes, arguments, opts);
  }
}

/** @type {function(number, number, string, boolean=)} */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_DYNAMIC = 2; // Cannot be freed except through sbrk
var ALLOC_NONE = 3; // Do not allocate

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc,
    stackAlloc,
    dynamicAlloc][allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var stop;
    ptr = ret;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!runtimeInitialized) return dynamicAlloc(size);
  return _malloc(size);
}




/** @type {function(number, number=)} */
function Pointer_stringify(ptr, length) {
  abort("this function has been removed - you should use UTF8ToString(ptr, maxBytesToRead) instead!");
}

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}


// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;

/**
 * @param {number} idx
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ArrayToString(u8Array, idx, maxBytesToRead) {
  var endIdx = idx + maxBytesToRead;
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  // (As a tiny code save trick, compare endPtr against endIdx using a negation, so that undefined means Infinity)
  while (u8Array[endPtr] && !(endPtr >= endIdx)) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var str = '';
    // If building with TextDecoder, we have already computed the string length above, so test loop end condition against that
    while (idx < endPtr) {
      // For UTF8 byte structure, see:
      // http://en.wikipedia.org/wiki/UTF-8#Description
      // https://www.ietf.org/rfc/rfc2279.txt
      // https://tools.ietf.org/html/rfc3629
      var u0 = u8Array[idx++];
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      var u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      var u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        if ((u0 & 0xF8) != 0xF0) warnOnce('Invalid UTF-8 leading byte 0x' + u0.toString(16) + ' encountered when deserializing a UTF-8 string on the asm.js/wasm heap to a JS string!');
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | (u8Array[idx++] & 63);
      }

      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
  return str;
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns a
// copy of that string as a Javascript String object.
// maxBytesToRead: an optional length that specifies the maximum number of bytes to read. You can omit
//                 this parameter to scan the string until the first \0 byte. If maxBytesToRead is
//                 passed, and the string at [ptr, ptr+maxBytesToReadr[ contains a null byte in the
//                 middle, then the string will cut short at that byte index (i.e. maxBytesToRead will
//                 not produce a string of exact length [ptr, ptr+maxBytesToRead[)
//                 N.B. mixing frequent uses of UTF8ToString() with and without maxBytesToRead may
//                 throw JS JIT optimizations off, so it is worth to consider consistently using one
//                 style or the other.
/**
 * @param {number} ptr
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ToString(ptr, maxBytesToRead) {
  return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : '';
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array.
//                    This count should include the null terminator,
//                    i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) {
      var u1 = str.charCodeAt(++i);
      u = 0x10000 + ((u & 0x3FF) << 10) | (u1 & 0x3FF);
    }
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 3 >= endIdx) break;
      if (u >= 0x200000) warnOnce('Invalid Unicode code point 0x' + u.toString(16) + ' encountered when serializing a JS string to an UTF-8 string on the asm.js/wasm heap! (Valid unicode code points should be in range 0-0x1FFFFF).');
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.
function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) ++len;
    else if (u <= 0x7FF) len += 2;
    else if (u <= 0xFFFF) len += 3;
    else len += 4;
  }
  return len;
}


// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}

function UTF32ToString(ptr) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}

// Allocate heap space for a JS string, and write it there.
// It is the responsibility of the caller to free() that memory.
function allocateUTF8(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = _malloc(size);
  if (ret) stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Allocate stack space for a JS string, and write it there.
function allocateUTF8OnStack(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = stackAlloc(size);
  stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated */
function writeStringToMemory(string, buffer, dontAddNull) {
  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}





function demangle(func) {
  warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  return func;
}

function demangleAll(text) {
  var regex =
    /__Z[\w\d_]+/g;
  return text.replace(regex,
    function(x) {
      var y = demangle(x);
      return x === y ? x : (y + ' [' + x + ']');
    });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  var js = jsStackTrace();
  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
  return demangleAll(js);
}



// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBuffer(buf) {
  Module['buffer'] = buffer = buf;
}

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}


var STATIC_BASE = 8,
    STACK_BASE = 51472,
    STACKTOP = STACK_BASE,
    STACK_MAX = 5294352,
    DYNAMIC_BASE = 5294352,
    DYNAMICTOP_PTR = 51216;

assert(STACK_BASE % 16 === 0, 'stack must start aligned');
assert(DYNAMIC_BASE % 16 === 0, 'heap must start aligned');



var TOTAL_STACK = 5242880;
if (Module['TOTAL_STACK']) assert(TOTAL_STACK === Module['TOTAL_STACK'], 'the stack size can no longer be determined at runtime')

var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
if (TOTAL_MEMORY < TOTAL_STACK) err('TOTAL_MEMORY should be larger than TOTAL_STACK, was ' + TOTAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray !== undefined && Int32Array.prototype.set !== undefined,
       'JS engine does not provide full typed array support');







// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
  assert(buffer.byteLength === TOTAL_MEMORY, 'provided buffer should be ' + TOTAL_MEMORY + ' bytes, but it is ' + buffer.byteLength);
} else {
  // Use a WebAssembly memory where available
  {
    buffer = new ArrayBuffer(TOTAL_MEMORY);
  }
  assert(buffer.byteLength === TOTAL_MEMORY);
  Module['buffer'] = buffer;
}
updateGlobalBufferViews();


HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;


// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  assert((STACK_MAX & 3) == 0);
  HEAPU32[(STACK_MAX >> 2)-1] = 0x02135467;
  HEAPU32[(STACK_MAX >> 2)-2] = 0x89BACDFE;
}

function checkStackCookie() {
  if (HEAPU32[(STACK_MAX >> 2)-1] != 0x02135467 || HEAPU32[(STACK_MAX >> 2)-2] != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x02135467, but received 0x' + HEAPU32[(STACK_MAX >> 2)-2].toString(16) + ' ' + HEAPU32[(STACK_MAX >> 2)-1].toString(16));
  }
  // Also test the global address 0 for integrity.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) throw 'Runtime error: The application has corrupted its heap memory area (address zero)!';
}

function abortStackOverflow(allocSize) {
  abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - stackSave() + allocSize) + ' bytes available!');
}


  HEAP32[0] = 0x63736d65; /* 'emsc' */



// Endianness check (note: assumes compiler arch was little-endian)
HEAP16[1] = 0x6373;
if (HEAPU8[2] !== 0x73 || HEAPU8[3] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the main() is called

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  checkStackCookie();
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}


assert(Math.imul, 'This browser does not support Math.imul(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.fround, 'This browser does not support Math.fround(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.clz32, 'This browser does not support Math.clz32(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.trunc, 'This browser does not support Math.trunc(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_max = Math.max;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;



// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// Module.preRun (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            err('still waiting on run dependencies:');
          }
          err('dependency: ' + dep);
        }
        if (shown) {
          err('(end of list)');
        }
      }, 10000);
    }
  } else {
    err('warning: run dependency added without ID');
  }
}

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    err('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;






// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  return String.prototype.startsWith ?
      filename.startsWith(dataURIPrefix) :
      filename.indexOf(dataURIPrefix) === 0;
}





// === Body ===

var ASM_CONSTS = [];





// STATICTOP = STATIC_BASE + 51464;
/* global initializers */  __ATINIT__.push({ func: function() { globalCtors() } });


memoryInitializer = "data:application/octet-stream;base64,";





/* no memory initializer */
var tempDoublePtr = 51456
assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
}

function copyTempDouble(ptr) {
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];
  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];
  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];
  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];
}

// {{PRE_LIBRARY}}


  function ___cxa_allocate_exception(size) {
      return _malloc(size);
    }

  
  
  function ___cxa_free_exception(ptr) {
      try {
        return _free(ptr);
      } catch(e) { // XXX FIXME
        err('exception during cxa_free_exception: ' + e);
      }
    }var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:function (adjusted) {
        if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted;
        for (var key in EXCEPTIONS.infos) {
          var ptr = +key; // the iteration key is a string, and if we throw this, it must be an integer as that is what we look for
          var adj = EXCEPTIONS.infos[ptr].adjusted;
          var len = adj.length;
          for (var i = 0; i < len; i++) {
            if (adj[i] === adjusted) {
              return ptr;
            }
          }
        }
        return adjusted;
      },addRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount++;
      },decRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        assert(info.refcount > 0);
        info.refcount--;
        // A rethrown exception can reach refcount 0; it must not be discarded
        // Its next handler will clear the rethrown flag and addRef it, prior to
        // final decRef and destruction here
        if (info.refcount === 0 && !info.rethrown) {
          if (info.destructor) {
            Module['dynCall_vi'](info.destructor, ptr);
          }
          delete EXCEPTIONS.infos[ptr];
          ___cxa_free_exception(ptr);
        }
      },clearRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount = 0;
      }};function ___cxa_begin_catch(ptr) {
      var info = EXCEPTIONS.infos[ptr];
      if (info && !info.caught) {
        info.caught = true;
        __ZSt18uncaught_exceptionv.uncaught_exception--;
      }
      if (info) info.rethrown = false;
      EXCEPTIONS.caught.push(ptr);
      EXCEPTIONS.addRef(EXCEPTIONS.deAdjust(ptr));
      return ptr;
    }

  
   function ___cxa_end_catch() {
      // Clear state flag.
      _setThrew(0);
      // Call destructor if one is registered then clear it.
      var ptr = EXCEPTIONS.caught.pop();
      if (ptr) {
        EXCEPTIONS.decRef(EXCEPTIONS.deAdjust(ptr));
        EXCEPTIONS.last = 0; // XXX in decRef?
      }
    }

  function ___cxa_find_matching_catch_2() {
          return ___cxa_find_matching_catch.apply(null, arguments);
        }

  function ___cxa_find_matching_catch_3() {
          return ___cxa_find_matching_catch.apply(null, arguments);
        }


  function ___cxa_rethrow() {
      var ptr = EXCEPTIONS.caught.pop();
      ptr = EXCEPTIONS.deAdjust(ptr);
      if (!EXCEPTIONS.infos[ptr].rethrown) {
        // Only pop if the corresponding push was through rethrow_primary_exception
        EXCEPTIONS.caught.push(ptr)
        EXCEPTIONS.infos[ptr].rethrown = true;
      }
      EXCEPTIONS.last = ptr;
      throw ptr;
    }

  
  
  function ___resumeException(ptr) {
      if (!EXCEPTIONS.last) { EXCEPTIONS.last = ptr; }
      throw ptr;
    }function ___cxa_find_matching_catch() {
      var thrown = EXCEPTIONS.last;
      if (!thrown) {
        // just pass through the null ptr
        return ((setTempRet0(0),0)|0);
      }
      var info = EXCEPTIONS.infos[thrown];
      var throwntype = info.type;
      if (!throwntype) {
        // just pass through the thrown ptr
        return ((setTempRet0(0),thrown)|0);
      }
      var typeArray = Array.prototype.slice.call(arguments);
  
      var pointer = Module['___cxa_is_pointer_type'](throwntype);
      // can_catch receives a **, add indirection
      if (!___cxa_find_matching_catch.buffer) ___cxa_find_matching_catch.buffer = _malloc(4);
      HEAP32[((___cxa_find_matching_catch.buffer)>>2)]=thrown;
      thrown = ___cxa_find_matching_catch.buffer;
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (typeArray[i] && Module['___cxa_can_catch'](typeArray[i], throwntype, thrown)) {
          thrown = HEAP32[((thrown)>>2)]; // undo indirection
          info.adjusted.push(thrown);
          return ((setTempRet0(typeArray[i]),thrown)|0);
        }
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      thrown = HEAP32[((thrown)>>2)]; // undo indirection
      return ((setTempRet0(throwntype),thrown)|0);
    }function ___cxa_throw(ptr, type, destructor) {
      EXCEPTIONS.infos[ptr] = {
        ptr: ptr,
        adjusted: [ptr],
        type: type,
        destructor: destructor,
        refcount: 0,
        caught: false,
        rethrown: false
      };
      EXCEPTIONS.last = ptr;
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr;
    }

  function ___cxa_uncaught_exception() {
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }

  function ___gxx_personality_v0() {
    }

  function ___lock() {}

  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else err('failed to set errno from JS');
      return value;
    }function ___map_file(pathname, size) {
      ___setErrNo(1);
      return -1;
    }

  
  
  var _Math_imul=undefined;  


  
  
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up; up--) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/emscripten-core/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/emscripten-core/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          try {
            for (var i = 0; i < length; i++) {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            }
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var isPosixPlatform = (process.platform != 'win32'); // Node doesn't offer a direct check, so test by exclusion
  
              var fd = process.stdin.fd;
              if (isPosixPlatform) {
                // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
                var usingDevice = false;
                try {
                  fd = fs.openSync('/dev/stdin', 'r');
                  usingDevice = true;
                } catch (e) {}
              }
  
              try {
                bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
              } catch(e) {
                // Cross-platform differences: on Windows, reading EOF throws an exception, but on other OSes,
                // reading EOF returns 0. Uniformize behavior by treating the EOF exception to return 0.
                if (e.toString().indexOf('EOF') != -1) bytesRead = 0;
                else throw e;
              }
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
            } else
            if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        var prevCapacity = node.contents ? node.contents.length : 0;
        if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
        // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
        // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
        // avoid overshooting the allocation cap by a very large margin.
        var CAPACITY_DOUBLING_MAX = 1024 * 1024;
        newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
        if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
        var oldContents = node.contents;
        node.contents = new Uint8Array(newCapacity); // Allocate new storage.
        if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
        return;
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
  
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) {
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        if (!req) {
          return callback("Unable to connect to IndexedDB");
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          try {
            var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
            transaction.onerror = function(e) {
              callback(this.error);
              e.preventDefault();
            };
  
            var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
            var index = store.index('timestamp');
  
            index.openKeyCursor().onsuccess = function(event) {
              var cursor = event.target.result;
  
              if (!cursor) {
                return callback(null, { type: 'remote', db: db, entries: entries });
              }
  
              entries[cursor.primaryKey] = { timestamp: cursor.key };
  
              cursor.continue();
            };
          } catch (e) {
            return callback(e);
          }
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
        var flags = process["binding"]("constants");
        // Node.js 4 compatibility: it has no namespaces for constants
        if (flags["fs"]) {
          flags = flags["fs"];
        }
        NODEFS.flagsForNodeMap = {
          "1024": flags["O_APPEND"],
          "64": flags["O_CREAT"],
          "128": flags["O_EXCL"],
          "0": flags["O_RDONLY"],
          "2": flags["O_RDWR"],
          "4096": flags["O_SYNC"],
          "512": flags["O_TRUNC"],
          "1": flags["O_WRONLY"]
        };
      },bufferFrom:function (arrayBuffer) {
        // Node.js < 4.5 compatibility: Buffer.from does not support ArrayBuffer
        // Buffer.from before 4.5 was just a method inherited from Uint8Array
        // Buffer.alloc has been added with Buffer.from together, so check it instead
        return Buffer.alloc ? Buffer.from(arrayBuffer) : new Buffer(arrayBuffer);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // Node.js on Windows never represents permission bit 'x', so
            // propagate read bits to execute bits
            stat.mode = stat.mode | ((stat.mode & 292) >> 2);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsForNode:function (flags) {
        flags &= ~0x200000 /*O_PATH*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x800 /*O_NONBLOCK*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x8000 /*O_LARGEFILE*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x80000 /*O_CLOEXEC*/; // Some applications may pass it; it makes no sense for a single process.
        var newFlags = 0;
        for (var k in NODEFS.flagsForNodeMap) {
          if (flags & k) {
            newFlags |= NODEFS.flagsForNodeMap[k];
            flags ^= k;
          }
        }
  
        if (!flags) {
          return newFlags;
        } else {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsForNode(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          // Node.js < 6 compatibility: node errors on 0 length reads
          if (length === 0) return 0;
          try {
            return fs.readSync(stream.nfd, NODEFS.bufferFrom(buffer.buffer), offset, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },write:function (stream, buffer, offset, length, position) {
          try {
            return fs.writeSync(stream.nfd, NODEFS.bufferFrom(buffer.buffer), offset, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var WORKERFS={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:function (mount) {
        assert(ENVIRONMENT_IS_WORKER);
        if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync();
        var root = WORKERFS.createNode(null, '/', WORKERFS.DIR_MODE, 0);
        var createdParents = {};
        function ensureParent(path) {
          // return the parent node, creating subdirs as necessary
          var parts = path.split('/');
          var parent = root;
          for (var i = 0; i < parts.length-1; i++) {
            var curr = parts.slice(0, i+1).join('/');
            // Issue 4254: Using curr as a node name will prevent the node
            // from being found in FS.nameTable when FS.open is called on
            // a path which holds a child of this node,
            // given that all FS functions assume node names
            // are just their corresponding parts within their given path,
            // rather than incremental aggregates which include their parent's
            // directories.
            if (!createdParents[curr]) {
              createdParents[curr] = WORKERFS.createNode(parent, parts[i], WORKERFS.DIR_MODE, 0);
            }
            parent = createdParents[curr];
          }
          return parent;
        }
        function base(path) {
          var parts = path.split('/');
          return parts[parts.length-1];
        }
        // We also accept FileList here, by using Array.prototype
        Array.prototype.forEach.call(mount.opts["files"] || [], function(file) {
          WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
        });
        (mount.opts["blobs"] || []).forEach(function(obj) {
          WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
        });
        (mount.opts["packages"] || []).forEach(function(pack) {
          pack['metadata'].files.forEach(function(file) {
            var name = file.filename.substr(1); // remove initial slash
            WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack['blob'].slice(file.start, file.end));
          });
        });
        return root;
      },createNode:function (parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = WORKERFS.node_ops;
        node.stream_ops = WORKERFS.stream_ops;
        node.timestamp = (mtime || new Date).getTime();
        assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
        if (mode === WORKERFS.FILE_MODE) {
          node.size = contents.size;
          node.contents = contents;
        } else {
          node.size = 4096;
          node.contents = {};
        }
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },node_ops:{getattr:function (node) {
          return {
            dev: 1,
            ino: undefined,
            mode: node.mode,
            nlink: 1,
            uid: 0,
            gid: 0,
            rdev: undefined,
            size: node.size,
            atime: new Date(node.timestamp),
            mtime: new Date(node.timestamp),
            ctime: new Date(node.timestamp),
            blksize: 4096,
            blocks: Math.ceil(node.size / 4096),
          };
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
        },lookup:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        },mknod:function (parent, name, mode, dev) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rename:function (oldNode, newDir, newName) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },unlink:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rmdir:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readdir:function (node) {
          var entries = ['.', '..'];
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newName, oldPath) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readlink:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          if (position >= stream.node.size) return 0;
          var chunk = stream.node.contents.slice(position, position + length);
          var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
          buffer.set(new Uint8Array(ab), offset);
          return chunk.size;
        },write:function (stream, buffer, offset, length, position) {
          throw new FS.ErrnoError(ERRNO_CODES.EIO);
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.size;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        }}};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  var _stdin=51232;
  
  var _stdout=51248;
  
  var _stderr=51264;var FS={root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(40);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(40);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return 13;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return 13;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return 13;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return 13;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return 17;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return 20;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return 16;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return 21;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return 2;
        }
        if (FS.isLink(node.mode)) {
          return 40;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return 21;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(24);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(29);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          console.log('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(err) {
          assert(FS.syncFSRequests > 0);
          FS.syncFSRequests--;
          return callback(err);
        }
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(16);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(16);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(20);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(22);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(22);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(1);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdirTree:function (path, mode) {
        var dirs = path.split('/');
        var d = '';
        for (var i = 0; i < dirs.length; ++i) {
          if (!dirs[i]) continue;
          d += '/' + dirs[i];
          try {
            FS.mkdir(d, mode);
          } catch(e) {
            if (e.errno != 17) throw e;
          }
        }
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(2);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(2);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(1);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(16);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(2);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(18);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(22);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(39);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(1);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(16);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(1);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(16);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(20);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // According to POSIX, we should map EISDIR to EPERM, but
          // we instead do what Linux does (and we must, as we use
          // the musl linux libc).
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(1);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(16);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(2);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(22);
        }
        return PATH.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(2);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(1);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(1);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(9);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(1);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(9);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(22);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(1);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(21);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(22);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(9);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(22);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(2);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(17);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(2);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(20);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            console.log("FS.trackingDelegate error on read file: " + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(9);
        }
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
        stream.fd = null;
      },isClosed:function (stream) {
        return stream.fd === null;
      },llseek:function (stream, offset, whence) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(9);
        }
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(29);
        }
        if (whence != 0 /* SEEK_SET */ && whence != 1 /* SEEK_CUR */ && whence != 2 /* SEEK_END */) {
          throw new FS.ErrnoError(22);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(22);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(9);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(9);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(21);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(22);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(29);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(22);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(9);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(9);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(21);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(22);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(29);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+stream.path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(9);
        }
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(22);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(9);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(19);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(95);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(13);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(19);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(25);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        var stream = FS.open(path, opts.flags, opts.mode);
        if (typeof data === 'string') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, undefined, opts.canOwn);
        } else if (ArrayBuffer.isView(data)) {
          FS.write(stream, data, 0, data.byteLength, undefined, opts.canOwn);
        } else {
          throw new Error('Unsupported data type');
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (lookup.node === null) {
          throw new FS.ErrnoError(2);
        }
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(20);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto === 'object' && typeof crypto['getRandomValues'] === 'function') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs with or without crypto support included
          try {
              var crypto_module = require('crypto');
              // nodejs has crypto support
              random_device = function() { return crypto_module['randomBytes'](1)[0]; };
          } catch (e) {
              // nodejs doesn't have crypto support so fallback to Math.random
              random_device = function() { return (Math.random()*256)|0; };
          }
        } else {
          // default for ES5 platforms
          random_device = function() { abort("random_device"); /*Math.random() is not safe for random number generation, so this fallback random_device implementation aborts... see emscripten-core/emscripten/pull/7096 */ };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function () {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 511 /* 0777 */, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(9);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          // Node.js compatibility: assigning on this.stack fails on Node 4 (but fixed on Node 8)
          if (this.stack) Object.defineProperty(this, "stack", { value: (new Error).stack, writable: true });
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [2].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
          'IDBFS': IDBFS,
          'NODEFS': NODEFS,
          'WORKERFS': WORKERFS,
        };
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(5);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(11);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(5);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(5);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            console.log("LazyFiles on gzip forces download of the whole file when length is accessed");
          }
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(5);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(5);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init(); // XXX perhaps this method should move onto Browser?
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function (dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function (func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -ERRNO_CODES.ENOTDIR;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        HEAP32[(((buf)+(36))>>2)]=stat.size;
        HEAP32[(((buf)+(40))>>2)]=4096;
        HEAP32[(((buf)+(44))>>2)]=stat.blocks;
        HEAP32[(((buf)+(48))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(52))>>2)]=0;
        HEAP32[(((buf)+(56))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=stat.ino;
        return 0;
      },doMsync:function (addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function (path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function (path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -ERRNO_CODES.EINVAL;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function (path, buf, bufsize) {
        if (bufsize <= 0) return -ERRNO_CODES.EINVAL;
        var ret = FS.readlink(path);
  
        var len = Math.min(bufsize, lengthBytesUTF8(ret));
        var endChar = HEAP8[buf+len];
        stringToUTF8(ret, buf, bufsize+1);
        // readlink is one of the rare functions that write out a C string, but does never append a null to the output buffer(!)
        // stringToUTF8() always appends a null byte, so restore the character under the null byte after the write.
        HEAP8[buf+len] = endChar;
  
        return len;
      },doAccess:function (path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -ERRNO_CODES.EINVAL;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -ERRNO_CODES.EACCES;
        }
        return 0;
      },doDup:function (path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = UTF8ToString(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function () {
        var stream = FS.getStream(SYSCALLS.get());
        if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return stream;
      },getSocketFromFD:function () {
        var socket = SOCKFS.getSocket(SYSCALLS.get());
        if (!socket) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return socket;
      },getSocketAddress:function (allowNull) {
        var addrp = SYSCALLS.get(), addrlen = SYSCALLS.get();
        if (allowNull && addrp === 0) return null;
        var info = __read_sockaddr(addrp, addrlen);
        if (info.errno) throw new FS.ErrnoError(info.errno);
        info.addr = DNS.lookup_addr(info.addr) || info.addr;
        return info;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      // NOTE: offset_high is unused - Emscripten's off_t is 32-bit
      var offset = offset_low;
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall145(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // readv
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doReadv(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doWritev(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall221(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fcntl64
      var stream = SYSCALLS.getStreamFromFD(), cmd = SYSCALLS.get();
      switch (cmd) {
        case 0: {
          var arg = SYSCALLS.get();
          if (arg < 0) {
            return -ERRNO_CODES.EINVAL;
          }
          var newStream;
          newStream = FS.open(stream.path, stream.flags, 0, arg);
          return newStream.fd;
        }
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4: {
          var arg = SYSCALLS.get();
          stream.flags |= arg;
          return 0;
        }
        case 12:
        /* case 12: Currently in musl F_GETLK64 has same value as F_GETLK, so omitted to avoid duplicate case blocks. If that changes, uncomment this */ {
          
          var arg = SYSCALLS.get();
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)]=2;
          return 0;
        }
        case 13:
        case 14:
        /* case 13: Currently in musl F_SETLK64 has same value as F_SETLK, so omitted to avoid duplicate case blocks. If that changes, uncomment this */
        /* case 14: Currently in musl F_SETLKW64 has same value as F_SETLKW, so omitted to avoid duplicate case blocks. If that changes, uncomment this */
          
          
          return 0; // Pretend that the locking is successful.
        case 16:
        case 8:
          return -ERRNO_CODES.EINVAL; // These are for sockets. We don't have them fully implemented yet.
        case 9:
          // musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fnctl() returns that, and we set errno ourselves.
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
        default: {
          return -ERRNO_CODES.EINVAL;
        }
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall5(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // open
      var pathname = SYSCALLS.getStr(), flags = SYSCALLS.get(), mode = SYSCALLS.get() // optional TODO
      var stream = FS.open(pathname, flags, mode);
      return stream.fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      switch (op) {
        case 21509:
        case 21505: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21510:
        case 21511:
        case 21512:
        case 21506:
        case 21507:
        case 21508: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return -ERRNO_CODES.EINVAL; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        case 21523: {
          // TODO: in theory we should write to the winsize struct that gets
          // passed in, but for now musl doesn't read anything on it
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21524: {
          // TODO: technically, this ioctl call should change the window size.
          // but, since emscripten doesn't have any concept of a terminal window
          // yet, we'll just silently throw it away as we do TIOCGWINSZ
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall91(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // munmap
      var addr = SYSCALLS.get(), len = SYSCALLS.get();
      // TODO: support unmmap'ing parts of allocations
      var info = SYSCALLS.mappings[addr];
      if (!info) return 0;
      if (len === info.len) {
        var stream = FS.getStream(info.fd);
        SYSCALLS.doMsync(addr, stream, len, info.flags)
        FS.munmap(stream);
        SYSCALLS.mappings[addr] = null;
        if (info.allocated) {
          _free(info.malloc);
        }
      }
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  
   
  
   
  
  
  var _Math_clz32=undefined;   

  function ___unlock() {}

  
  function getShiftFromSize(size) {
      switch (size) {
          case 1: return 0;
          case 2: return 1;
          case 4: return 2;
          case 8: return 3;
          default:
              throw new TypeError('Unknown type size: ' + size);
      }
    }
  
  
  
  function embind_init_charCodes() {
      var codes = new Array(256);
      for (var i = 0; i < 256; ++i) {
          codes[i] = String.fromCharCode(i);
      }
      embind_charCodes = codes;
    }var embind_charCodes=undefined;function readLatin1String(ptr) {
      var ret = "";
      var c = ptr;
      while (HEAPU8[c]) {
          ret += embind_charCodes[HEAPU8[c++]];
      }
      return ret;
    }
  
  
  var awaitingDependencies={};
  
  var registeredTypes={};
  
  var typeDependencies={};
  
  
  
  
  
  
  var char_0=48;
  
  var char_9=57;function makeLegalFunctionName(name) {
      if (undefined === name) {
          return '_unknown';
      }
      name = name.replace(/[^a-zA-Z0-9_]/g, '$');
      var f = name.charCodeAt(0);
      if (f >= char_0 && f <= char_9) {
          return '_' + name;
      } else {
          return name;
      }
    }function createNamedFunction(name, body) {
      name = makeLegalFunctionName(name);
      /*jshint evil:true*/
      return new Function(
          "body",
          "return function " + name + "() {\n" +
          "    \"use strict\";" +
          "    return body.apply(this, arguments);\n" +
          "};\n"
      )(body);
    }function extendError(baseErrorType, errorName) {
      var errorClass = createNamedFunction(errorName, function(message) {
          this.name = errorName;
          this.message = message;
  
          var stack = (new Error(message)).stack;
          if (stack !== undefined) {
              this.stack = this.toString() + '\n' +
                  stack.replace(/^Error(:[^\n]*)?\n/, '');
          }
      });
      errorClass.prototype = Object.create(baseErrorType.prototype);
      errorClass.prototype.constructor = errorClass;
      errorClass.prototype.toString = function() {
          if (this.message === undefined) {
              return this.name;
          } else {
              return this.name + ': ' + this.message;
          }
      };
  
      return errorClass;
    }var BindingError=undefined;function throwBindingError(message) {
      throw new BindingError(message);
    }
  
  
  
  var InternalError=undefined;function throwInternalError(message) {
      throw new InternalError(message);
    }function whenDependentTypesAreResolved(myTypes, dependentTypes, getTypeConverters) {
      myTypes.forEach(function(type) {
          typeDependencies[type] = dependentTypes;
      });
  
      function onComplete(typeConverters) {
          var myTypeConverters = getTypeConverters(typeConverters);
          if (myTypeConverters.length !== myTypes.length) {
              throwInternalError('Mismatched type converter count');
          }
          for (var i = 0; i < myTypes.length; ++i) {
              registerType(myTypes[i], myTypeConverters[i]);
          }
      }
  
      var typeConverters = new Array(dependentTypes.length);
      var unregisteredTypes = [];
      var registered = 0;
      dependentTypes.forEach(function(dt, i) {
          if (registeredTypes.hasOwnProperty(dt)) {
              typeConverters[i] = registeredTypes[dt];
          } else {
              unregisteredTypes.push(dt);
              if (!awaitingDependencies.hasOwnProperty(dt)) {
                  awaitingDependencies[dt] = [];
              }
              awaitingDependencies[dt].push(function() {
                  typeConverters[i] = registeredTypes[dt];
                  ++registered;
                  if (registered === unregisteredTypes.length) {
                      onComplete(typeConverters);
                  }
              });
          }
      });
      if (0 === unregisteredTypes.length) {
          onComplete(typeConverters);
      }
    }function registerType(rawType, registeredInstance, options) {
      options = options || {};
  
      if (!('argPackAdvance' in registeredInstance)) {
          throw new TypeError('registerType registeredInstance requires argPackAdvance');
      }
  
      var name = registeredInstance.name;
      if (!rawType) {
          throwBindingError('type "' + name + '" must have a positive integer typeid pointer');
      }
      if (registeredTypes.hasOwnProperty(rawType)) {
          if (options.ignoreDuplicateRegistrations) {
              return;
          } else {
              throwBindingError("Cannot register type '" + name + "' twice");
          }
      }
  
      registeredTypes[rawType] = registeredInstance;
      delete typeDependencies[rawType];
  
      if (awaitingDependencies.hasOwnProperty(rawType)) {
          var callbacks = awaitingDependencies[rawType];
          delete awaitingDependencies[rawType];
          callbacks.forEach(function(cb) {
              cb();
          });
      }
    }function __embind_register_bool(rawType, name, size, trueValue, falseValue) {
      var shift = getShiftFromSize(size);
  
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(wt) {
              // ambiguous emscripten ABI: sometimes return values are
              // true or false, and sometimes integers (0 or 1)
              return !!wt;
          },
          'toWireType': function(destructors, o) {
              return o ? trueValue : falseValue;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': function(pointer) {
              // TODO: if heap is fixed (like in asm.js) this could be executed outside
              var heap;
              if (size === 1) {
                  heap = HEAP8;
              } else if (size === 2) {
                  heap = HEAP16;
              } else if (size === 4) {
                  heap = HEAP32;
              } else {
                  throw new TypeError("Unknown boolean type size: " + name);
              }
              return this['fromWireType'](heap[pointer >> shift]);
          },
          destructorFunction: null, // This type does not need a destructor
      });
    }

  
  
  
  function ClassHandle_isAliasOf(other) {
      if (!(this instanceof ClassHandle)) {
          return false;
      }
      if (!(other instanceof ClassHandle)) {
          return false;
      }
  
      var leftClass = this.$$.ptrType.registeredClass;
      var left = this.$$.ptr;
      var rightClass = other.$$.ptrType.registeredClass;
      var right = other.$$.ptr;
  
      while (leftClass.baseClass) {
          left = leftClass.upcast(left);
          leftClass = leftClass.baseClass;
      }
  
      while (rightClass.baseClass) {
          right = rightClass.upcast(right);
          rightClass = rightClass.baseClass;
      }
  
      return leftClass === rightClass && left === right;
    }
  
  
  function shallowCopyInternalPointer(o) {
      return {
          count: o.count,
          deleteScheduled: o.deleteScheduled,
          preservePointerOnDelete: o.preservePointerOnDelete,
          ptr: o.ptr,
          ptrType: o.ptrType,
          smartPtr: o.smartPtr,
          smartPtrType: o.smartPtrType,
      };
    }
  
  function throwInstanceAlreadyDeleted(obj) {
      function getInstanceTypeName(handle) {
        return handle.$$.ptrType.registeredClass.name;
      }
      throwBindingError(getInstanceTypeName(obj) + ' instance already deleted');
    }function ClassHandle_clone() {
      if (!this.$$.ptr) {
          throwInstanceAlreadyDeleted(this);
      }
  
      if (this.$$.preservePointerOnDelete) {
          this.$$.count.value += 1;
          return this;
      } else {
          var clone = Object.create(Object.getPrototypeOf(this), {
              $$: {
                  value: shallowCopyInternalPointer(this.$$),
              }
          });
  
          clone.$$.count.value += 1;
          clone.$$.deleteScheduled = false;
          return clone;
      }
    }
  
  
  function runDestructor(handle) {
      var $$ = handle.$$;
      if ($$.smartPtr) {
          $$.smartPtrType.rawDestructor($$.smartPtr);
      } else {
          $$.ptrType.registeredClass.rawDestructor($$.ptr);
      }
    }function ClassHandle_delete() {
      if (!this.$$.ptr) {
          throwInstanceAlreadyDeleted(this);
      }
  
      if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) {
          throwBindingError('Object already scheduled for deletion');
      }
  
      this.$$.count.value -= 1;
      var toDelete = 0 === this.$$.count.value;
      if (toDelete) {
          runDestructor(this);
      }
      if (!this.$$.preservePointerOnDelete) {
          this.$$.smartPtr = undefined;
          this.$$.ptr = undefined;
      }
    }
  
  function ClassHandle_isDeleted() {
      return !this.$$.ptr;
    }
  
  
  var delayFunction=undefined;
  
  var deletionQueue=[];
  
  function flushPendingDeletes() {
      while (deletionQueue.length) {
          var obj = deletionQueue.pop();
          obj.$$.deleteScheduled = false;
          obj['delete']();
      }
    }function ClassHandle_deleteLater() {
      if (!this.$$.ptr) {
          throwInstanceAlreadyDeleted(this);
      }
      if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) {
          throwBindingError('Object already scheduled for deletion');
      }
      deletionQueue.push(this);
      if (deletionQueue.length === 1 && delayFunction) {
          delayFunction(flushPendingDeletes);
      }
      this.$$.deleteScheduled = true;
      return this;
    }function init_ClassHandle() {
      ClassHandle.prototype['isAliasOf'] = ClassHandle_isAliasOf;
      ClassHandle.prototype['clone'] = ClassHandle_clone;
      ClassHandle.prototype['delete'] = ClassHandle_delete;
      ClassHandle.prototype['isDeleted'] = ClassHandle_isDeleted;
      ClassHandle.prototype['deleteLater'] = ClassHandle_deleteLater;
    }function ClassHandle() {
    }
  
  var registeredPointers={};
  
  
  function ensureOverloadTable(proto, methodName, humanName) {
      if (undefined === proto[methodName].overloadTable) {
          var prevFunc = proto[methodName];
          // Inject an overload resolver function that routes to the appropriate overload based on the number of arguments.
          proto[methodName] = function() {
              // TODO This check can be removed in -O3 level "unsafe" optimizations.
              if (!proto[methodName].overloadTable.hasOwnProperty(arguments.length)) {
                  throwBindingError("Function '" + humanName + "' called with an invalid number of arguments (" + arguments.length + ") - expects one of (" + proto[methodName].overloadTable + ")!");
              }
              return proto[methodName].overloadTable[arguments.length].apply(this, arguments);
          };
          // Move the previous function into the overload table.
          proto[methodName].overloadTable = [];
          proto[methodName].overloadTable[prevFunc.argCount] = prevFunc;
      }
    }function exposePublicSymbol(name, value, numArguments) {
      if (Module.hasOwnProperty(name)) {
          if (undefined === numArguments || (undefined !== Module[name].overloadTable && undefined !== Module[name].overloadTable[numArguments])) {
              throwBindingError("Cannot register public name '" + name + "' twice");
          }
  
          // We are exposing a function with the same name as an existing function. Create an overload table and a function selector
          // that routes between the two.
          ensureOverloadTable(Module, name, name);
          if (Module.hasOwnProperty(numArguments)) {
              throwBindingError("Cannot register multiple overloads of a function with the same number of arguments (" + numArguments + ")!");
          }
          // Add the new function into the overload table.
          Module[name].overloadTable[numArguments] = value;
      }
      else {
          Module[name] = value;
          if (undefined !== numArguments) {
              Module[name].numArguments = numArguments;
          }
      }
    }
  
  function RegisteredClass(
      name,
      constructor,
      instancePrototype,
      rawDestructor,
      baseClass,
      getActualType,
      upcast,
      downcast
    ) {
      this.name = name;
      this.constructor = constructor;
      this.instancePrototype = instancePrototype;
      this.rawDestructor = rawDestructor;
      this.baseClass = baseClass;
      this.getActualType = getActualType;
      this.upcast = upcast;
      this.downcast = downcast;
      this.pureVirtualFunctions = [];
    }
  
  
  
  function upcastPointer(ptr, ptrClass, desiredClass) {
      while (ptrClass !== desiredClass) {
          if (!ptrClass.upcast) {
              throwBindingError("Expected null or instance of " + desiredClass.name + ", got an instance of " + ptrClass.name);
          }
          ptr = ptrClass.upcast(ptr);
          ptrClass = ptrClass.baseClass;
      }
      return ptr;
    }function constNoSmartPtrRawPointerToWireType(destructors, handle) {
      if (handle === null) {
          if (this.isReference) {
              throwBindingError('null is not a valid ' + this.name);
          }
          return 0;
      }
  
      if (!handle.$$) {
          throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
      }
      if (!handle.$$.ptr) {
          throwBindingError('Cannot pass deleted object as a pointer of type ' + this.name);
      }
      var handleClass = handle.$$.ptrType.registeredClass;
      var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
      return ptr;
    }
  
  function genericPointerToWireType(destructors, handle) {
      var ptr;
      if (handle === null) {
          if (this.isReference) {
              throwBindingError('null is not a valid ' + this.name);
          }
  
          if (this.isSmartPointer) {
              ptr = this.rawConstructor();
              if (destructors !== null) {
                  destructors.push(this.rawDestructor, ptr);
              }
              return ptr;
          } else {
              return 0;
          }
      }
  
      if (!handle.$$) {
          throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
      }
      if (!handle.$$.ptr) {
          throwBindingError('Cannot pass deleted object as a pointer of type ' + this.name);
      }
      if (!this.isConst && handle.$$.ptrType.isConst) {
          throwBindingError('Cannot convert argument of type ' + (handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name) + ' to parameter type ' + this.name);
      }
      var handleClass = handle.$$.ptrType.registeredClass;
      ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
  
      if (this.isSmartPointer) {
          // TODO: this is not strictly true
          // We could support BY_EMVAL conversions from raw pointers to smart pointers
          // because the smart pointer can hold a reference to the handle
          if (undefined === handle.$$.smartPtr) {
              throwBindingError('Passing raw pointer to smart pointer is illegal');
          }
  
          switch (this.sharingPolicy) {
              case 0: // NONE
                  // no upcasting
                  if (handle.$$.smartPtrType === this) {
                      ptr = handle.$$.smartPtr;
                  } else {
                      throwBindingError('Cannot convert argument of type ' + (handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name) + ' to parameter type ' + this.name);
                  }
                  break;
  
              case 1: // INTRUSIVE
                  ptr = handle.$$.smartPtr;
                  break;
  
              case 2: // BY_EMVAL
                  if (handle.$$.smartPtrType === this) {
                      ptr = handle.$$.smartPtr;
                  } else {
                      var clonedHandle = handle['clone']();
                      ptr = this.rawShare(
                          ptr,
                          __emval_register(function() {
                              clonedHandle['delete']();
                          })
                      );
                      if (destructors !== null) {
                          destructors.push(this.rawDestructor, ptr);
                      }
                  }
                  break;
  
              default:
                  throwBindingError('Unsupporting sharing policy');
          }
      }
      return ptr;
    }
  
  function nonConstNoSmartPtrRawPointerToWireType(destructors, handle) {
      if (handle === null) {
          if (this.isReference) {
              throwBindingError('null is not a valid ' + this.name);
          }
          return 0;
      }
  
      if (!handle.$$) {
          throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
      }
      if (!handle.$$.ptr) {
          throwBindingError('Cannot pass deleted object as a pointer of type ' + this.name);
      }
      if (handle.$$.ptrType.isConst) {
          throwBindingError('Cannot convert argument of type ' + handle.$$.ptrType.name + ' to parameter type ' + this.name);
      }
      var handleClass = handle.$$.ptrType.registeredClass;
      var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
      return ptr;
    }
  
  
  function simpleReadValueFromPointer(pointer) {
      return this['fromWireType'](HEAPU32[pointer >> 2]);
    }
  
  function RegisteredPointer_getPointee(ptr) {
      if (this.rawGetPointee) {
          ptr = this.rawGetPointee(ptr);
      }
      return ptr;
    }
  
  function RegisteredPointer_destructor(ptr) {
      if (this.rawDestructor) {
          this.rawDestructor(ptr);
      }
    }
  
  function RegisteredPointer_deleteObject(handle) {
      if (handle !== null) {
          handle['delete']();
      }
    }
  
  
  function downcastPointer(ptr, ptrClass, desiredClass) {
      if (ptrClass === desiredClass) {
          return ptr;
      }
      if (undefined === desiredClass.baseClass) {
          return null; // no conversion
      }
  
      var rv = downcastPointer(ptr, ptrClass, desiredClass.baseClass);
      if (rv === null) {
          return null;
      }
      return desiredClass.downcast(rv);
    }
  
  
  
  
  function getInheritedInstanceCount() {
      return Object.keys(registeredInstances).length;
    }
  
  function getLiveInheritedInstances() {
      var rv = [];
      for (var k in registeredInstances) {
          if (registeredInstances.hasOwnProperty(k)) {
              rv.push(registeredInstances[k]);
          }
      }
      return rv;
    }
  
  function setDelayFunction(fn) {
      delayFunction = fn;
      if (deletionQueue.length && delayFunction) {
          delayFunction(flushPendingDeletes);
      }
    }function init_embind() {
      Module['getInheritedInstanceCount'] = getInheritedInstanceCount;
      Module['getLiveInheritedInstances'] = getLiveInheritedInstances;
      Module['flushPendingDeletes'] = flushPendingDeletes;
      Module['setDelayFunction'] = setDelayFunction;
    }var registeredInstances={};
  
  function getBasestPointer(class_, ptr) {
      if (ptr === undefined) {
          throwBindingError('ptr should not be undefined');
      }
      while (class_.baseClass) {
          ptr = class_.upcast(ptr);
          class_ = class_.baseClass;
      }
      return ptr;
    }function getInheritedInstance(class_, ptr) {
      ptr = getBasestPointer(class_, ptr);
      return registeredInstances[ptr];
    }
  
  function makeClassHandle(prototype, record) {
      if (!record.ptrType || !record.ptr) {
          throwInternalError('makeClassHandle requires ptr and ptrType');
      }
      var hasSmartPtrType = !!record.smartPtrType;
      var hasSmartPtr = !!record.smartPtr;
      if (hasSmartPtrType !== hasSmartPtr) {
          throwInternalError('Both smartPtrType and smartPtr must be specified');
      }
      record.count = { value: 1 };
      return Object.create(prototype, {
          $$: {
              value: record,
          },
      });
    }function RegisteredPointer_fromWireType(ptr) {
      // ptr is a raw pointer (or a raw smartpointer)
  
      // rawPointer is a maybe-null raw pointer
      var rawPointer = this.getPointee(ptr);
      if (!rawPointer) {
          this.destructor(ptr);
          return null;
      }
  
      var registeredInstance = getInheritedInstance(this.registeredClass, rawPointer);
      if (undefined !== registeredInstance) {
          // JS object has been neutered, time to repopulate it
          if (0 === registeredInstance.$$.count.value) {
              registeredInstance.$$.ptr = rawPointer;
              registeredInstance.$$.smartPtr = ptr;
              return registeredInstance['clone']();
          } else {
              // else, just increment reference count on existing object
              // it already has a reference to the smart pointer
              var rv = registeredInstance['clone']();
              this.destructor(ptr);
              return rv;
          }
      }
  
      function makeDefaultHandle() {
          if (this.isSmartPointer) {
              return makeClassHandle(this.registeredClass.instancePrototype, {
                  ptrType: this.pointeeType,
                  ptr: rawPointer,
                  smartPtrType: this,
                  smartPtr: ptr,
              });
          } else {
              return makeClassHandle(this.registeredClass.instancePrototype, {
                  ptrType: this,
                  ptr: ptr,
              });
          }
      }
  
      var actualType = this.registeredClass.getActualType(rawPointer);
      var registeredPointerRecord = registeredPointers[actualType];
      if (!registeredPointerRecord) {
          return makeDefaultHandle.call(this);
      }
  
      var toType;
      if (this.isConst) {
          toType = registeredPointerRecord.constPointerType;
      } else {
          toType = registeredPointerRecord.pointerType;
      }
      var dp = downcastPointer(
          rawPointer,
          this.registeredClass,
          toType.registeredClass);
      if (dp === null) {
          return makeDefaultHandle.call(this);
      }
      if (this.isSmartPointer) {
          return makeClassHandle(toType.registeredClass.instancePrototype, {
              ptrType: toType,
              ptr: dp,
              smartPtrType: this,
              smartPtr: ptr,
          });
      } else {
          return makeClassHandle(toType.registeredClass.instancePrototype, {
              ptrType: toType,
              ptr: dp,
          });
      }
    }function init_RegisteredPointer() {
      RegisteredPointer.prototype.getPointee = RegisteredPointer_getPointee;
      RegisteredPointer.prototype.destructor = RegisteredPointer_destructor;
      RegisteredPointer.prototype['argPackAdvance'] = 8;
      RegisteredPointer.prototype['readValueFromPointer'] = simpleReadValueFromPointer;
      RegisteredPointer.prototype['deleteObject'] = RegisteredPointer_deleteObject;
      RegisteredPointer.prototype['fromWireType'] = RegisteredPointer_fromWireType;
    }function RegisteredPointer(
      name,
      registeredClass,
      isReference,
      isConst,
  
      // smart pointer properties
      isSmartPointer,
      pointeeType,
      sharingPolicy,
      rawGetPointee,
      rawConstructor,
      rawShare,
      rawDestructor
    ) {
      this.name = name;
      this.registeredClass = registeredClass;
      this.isReference = isReference;
      this.isConst = isConst;
  
      // smart pointer properties
      this.isSmartPointer = isSmartPointer;
      this.pointeeType = pointeeType;
      this.sharingPolicy = sharingPolicy;
      this.rawGetPointee = rawGetPointee;
      this.rawConstructor = rawConstructor;
      this.rawShare = rawShare;
      this.rawDestructor = rawDestructor;
  
      if (!isSmartPointer && registeredClass.baseClass === undefined) {
          if (isConst) {
              this['toWireType'] = constNoSmartPtrRawPointerToWireType;
              this.destructorFunction = null;
          } else {
              this['toWireType'] = nonConstNoSmartPtrRawPointerToWireType;
              this.destructorFunction = null;
          }
      } else {
          this['toWireType'] = genericPointerToWireType;
          // Here we must leave this.destructorFunction undefined, since whether genericPointerToWireType returns
          // a pointer that needs to be freed up is runtime-dependent, and cannot be evaluated at registration time.
          // TODO: Create an alternative mechanism that allows removing the use of var destructors = []; array in
          //       craftInvokerFunction altogether.
      }
    }
  
  function replacePublicSymbol(name, value, numArguments) {
      if (!Module.hasOwnProperty(name)) {
          throwInternalError('Replacing nonexistant public symbol');
      }
      // If there's an overload table for this symbol, replace the symbol in the overload table instead.
      if (undefined !== Module[name].overloadTable && undefined !== numArguments) {
          Module[name].overloadTable[numArguments] = value;
      }
      else {
          Module[name] = value;
          Module[name].argCount = numArguments;
      }
    }
  
  function embind__requireFunction(signature, rawFunction) {
      signature = readLatin1String(signature);
  
      function makeDynCaller(dynCall) {
          var args = [];
          for (var i = 1; i < signature.length; ++i) {
              args.push('a' + i);
          }
  
          var name = 'dynCall_' + signature + '_' + rawFunction;
          var body = 'return function ' + name + '(' + args.join(', ') + ') {\n';
          body    += '    return dynCall(rawFunction' + (args.length ? ', ' : '') + args.join(', ') + ');\n';
          body    += '};\n';
  
          return (new Function('dynCall', 'rawFunction', body))(dynCall, rawFunction);
      }
  
      var fp;
      if (Module['FUNCTION_TABLE_' + signature] !== undefined) {
          fp = Module['FUNCTION_TABLE_' + signature][rawFunction];
      } else if (typeof FUNCTION_TABLE !== "undefined") {
          fp = FUNCTION_TABLE[rawFunction];
      } else {
          // asm.js does not give direct access to the function tables,
          // and thus we must go through the dynCall interface which allows
          // calling into a signature's function table by pointer value.
          //
          // https://github.com/dherman/asm.js/issues/83
          //
          // This has three main penalties:
          // - dynCall is another function call in the path from JavaScript to C++.
          // - JITs may not predict through the function table indirection at runtime.
          var dc = Module['dynCall_' + signature];
          if (dc === undefined) {
              // We will always enter this branch if the signature
              // contains 'f' and PRECISE_F32 is not enabled.
              //
              // Try again, replacing 'f' with 'd'.
              dc = Module['dynCall_' + signature.replace(/f/g, 'd')];
              if (dc === undefined) {
                  throwBindingError("No dynCall invoker for signature: " + signature);
              }
          }
          fp = makeDynCaller(dc);
      }
  
      if (typeof fp !== "function") {
          throwBindingError("unknown function pointer with signature " + signature + ": " + rawFunction);
      }
      return fp;
    }
  
  
  var UnboundTypeError=undefined;
  
  function getTypeName(type) {
      var ptr = ___getTypeName(type);
      var rv = readLatin1String(ptr);
      _free(ptr);
      return rv;
    }function throwUnboundTypeError(message, types) {
      var unboundTypes = [];
      var seen = {};
      function visit(type) {
          if (seen[type]) {
              return;
          }
          if (registeredTypes[type]) {
              return;
          }
          if (typeDependencies[type]) {
              typeDependencies[type].forEach(visit);
              return;
          }
          unboundTypes.push(type);
          seen[type] = true;
      }
      types.forEach(visit);
  
      throw new UnboundTypeError(message + ': ' + unboundTypes.map(getTypeName).join([', ']));
    }function __embind_register_class(
      rawType,
      rawPointerType,
      rawConstPointerType,
      baseClassRawType,
      getActualTypeSignature,
      getActualType,
      upcastSignature,
      upcast,
      downcastSignature,
      downcast,
      name,
      destructorSignature,
      rawDestructor
    ) {
      name = readLatin1String(name);
      getActualType = embind__requireFunction(getActualTypeSignature, getActualType);
      if (upcast) {
          upcast = embind__requireFunction(upcastSignature, upcast);
      }
      if (downcast) {
          downcast = embind__requireFunction(downcastSignature, downcast);
      }
      rawDestructor = embind__requireFunction(destructorSignature, rawDestructor);
      var legalFunctionName = makeLegalFunctionName(name);
  
      exposePublicSymbol(legalFunctionName, function() {
          // this code cannot run if baseClassRawType is zero
          throwUnboundTypeError('Cannot construct ' + name + ' due to unbound types', [baseClassRawType]);
      });
  
      whenDependentTypesAreResolved(
          [rawType, rawPointerType, rawConstPointerType],
          baseClassRawType ? [baseClassRawType] : [],
          function(base) {
              base = base[0];
  
              var baseClass;
              var basePrototype;
              if (baseClassRawType) {
                  baseClass = base.registeredClass;
                  basePrototype = baseClass.instancePrototype;
              } else {
                  basePrototype = ClassHandle.prototype;
              }
  
              var constructor = createNamedFunction(legalFunctionName, function() {
                  if (Object.getPrototypeOf(this) !== instancePrototype) {
                      throw new BindingError("Use 'new' to construct " + name);
                  }
                  if (undefined === registeredClass.constructor_body) {
                      throw new BindingError(name + " has no accessible constructor");
                  }
                  var body = registeredClass.constructor_body[arguments.length];
                  if (undefined === body) {
                      throw new BindingError("Tried to invoke ctor of " + name + " with invalid number of parameters (" + arguments.length + ") - expected (" + Object.keys(registeredClass.constructor_body).toString() + ") parameters instead!");
                  }
                  return body.apply(this, arguments);
              });
  
              var instancePrototype = Object.create(basePrototype, {
                  constructor: { value: constructor },
              });
  
              constructor.prototype = instancePrototype;
  
              var registeredClass = new RegisteredClass(
                  name,
                  constructor,
                  instancePrototype,
                  rawDestructor,
                  baseClass,
                  getActualType,
                  upcast,
                  downcast);
  
              var referenceConverter = new RegisteredPointer(
                  name,
                  registeredClass,
                  true,
                  false,
                  false);
  
              var pointerConverter = new RegisteredPointer(
                  name + '*',
                  registeredClass,
                  false,
                  false,
                  false);
  
              var constPointerConverter = new RegisteredPointer(
                  name + ' const*',
                  registeredClass,
                  false,
                  true,
                  false);
  
              registeredPointers[rawType] = {
                  pointerType: pointerConverter,
                  constPointerType: constPointerConverter
              };
  
              replacePublicSymbol(legalFunctionName, constructor);
  
              return [referenceConverter, pointerConverter, constPointerConverter];
          }
      );
    }

  
  
  function new_(constructor, argumentList) {
      if (!(constructor instanceof Function)) {
          throw new TypeError('new_ called with constructor type ' + typeof(constructor) + " which is not a function");
      }
  
      /*
       * Previously, the following line was just:
  
       function dummy() {};
  
       * Unfortunately, Chrome was preserving 'dummy' as the object's name, even though at creation, the 'dummy' has the
       * correct constructor name.  Thus, objects created with IMVU.new would show up in the debugger as 'dummy', which
       * isn't very helpful.  Using IMVU.createNamedFunction addresses the issue.  Doublely-unfortunately, there's no way
       * to write a test for this behavior.  -NRD 2013.02.22
       */
      var dummy = createNamedFunction(constructor.name || 'unknownFunctionName', function(){});
      dummy.prototype = constructor.prototype;
      var obj = new dummy;
  
      var r = constructor.apply(obj, argumentList);
      return (r instanceof Object) ? r : obj;
    }
  
  function runDestructors(destructors) {
      while (destructors.length) {
          var ptr = destructors.pop();
          var del = destructors.pop();
          del(ptr);
      }
    }function craftInvokerFunction(humanName, argTypes, classType, cppInvokerFunc, cppTargetFunc) {
      // humanName: a human-readable string name for the function to be generated.
      // argTypes: An array that contains the embind type objects for all types in the function signature.
      //    argTypes[0] is the type object for the function return value.
      //    argTypes[1] is the type object for function this object/class type, or null if not crafting an invoker for a class method.
      //    argTypes[2...] are the actual function parameters.
      // classType: The embind type object for the class to be bound, or null if this is not a method of a class.
      // cppInvokerFunc: JS Function object to the C++-side function that interops into C++ code.
      // cppTargetFunc: Function pointer (an integer to FUNCTION_TABLE) to the target C++ function the cppInvokerFunc will end up calling.
      var argCount = argTypes.length;
  
      if (argCount < 2) {
          throwBindingError("argTypes array size mismatch! Must at least get return value and 'this' types!");
      }
  
      var isClassMethodFunc = (argTypes[1] !== null && classType !== null);
  
      // Free functions with signature "void function()" do not need an invoker that marshalls between wire types.
  // TODO: This omits argument count check - enable only at -O3 or similar.
  //    if (ENABLE_UNSAFE_OPTS && argCount == 2 && argTypes[0].name == "void" && !isClassMethodFunc) {
  //       return FUNCTION_TABLE[fn];
  //    }
  
  
      // Determine if we need to use a dynamic stack to store the destructors for the function parameters.
      // TODO: Remove this completely once all function invokers are being dynamically generated.
      var needsDestructorStack = false;
  
      for(var i = 1; i < argTypes.length; ++i) { // Skip return value at index 0 - it's not deleted here.
          if (argTypes[i] !== null && argTypes[i].destructorFunction === undefined) { // The type does not define a destructor function - must use dynamic stack
              needsDestructorStack = true;
              break;
          }
      }
  
      var returns = (argTypes[0].name !== "void");
  
      var argsList = "";
      var argsListWired = "";
      for(var i = 0; i < argCount - 2; ++i) {
          argsList += (i!==0?", ":"")+"arg"+i;
          argsListWired += (i!==0?", ":"")+"arg"+i+"Wired";
      }
  
      var invokerFnBody =
          "return function "+makeLegalFunctionName(humanName)+"("+argsList+") {\n" +
          "if (arguments.length !== "+(argCount - 2)+") {\n" +
              "throwBindingError('function "+humanName+" called with ' + arguments.length + ' arguments, expected "+(argCount - 2)+" args!');\n" +
          "}\n";
  
  
      if (needsDestructorStack) {
          invokerFnBody +=
              "var destructors = [];\n";
      }
  
      var dtorStack = needsDestructorStack ? "destructors" : "null";
      var args1 = ["throwBindingError", "invoker", "fn", "runDestructors", "retType", "classParam"];
      var args2 = [throwBindingError, cppInvokerFunc, cppTargetFunc, runDestructors, argTypes[0], argTypes[1]];
  
  
      if (isClassMethodFunc) {
          invokerFnBody += "var thisWired = classParam.toWireType("+dtorStack+", this);\n";
      }
  
      for(var i = 0; i < argCount - 2; ++i) {
          invokerFnBody += "var arg"+i+"Wired = argType"+i+".toWireType("+dtorStack+", arg"+i+"); // "+argTypes[i+2].name+"\n";
          args1.push("argType"+i);
          args2.push(argTypes[i+2]);
      }
  
      if (isClassMethodFunc) {
          argsListWired = "thisWired" + (argsListWired.length > 0 ? ", " : "") + argsListWired;
      }
  
      invokerFnBody +=
          (returns?"var rv = ":"") + "invoker(fn"+(argsListWired.length>0?", ":"")+argsListWired+");\n";
  
      if (needsDestructorStack) {
          invokerFnBody += "runDestructors(destructors);\n";
      } else {
          for(var i = isClassMethodFunc?1:2; i < argTypes.length; ++i) { // Skip return value at index 0 - it's not deleted here. Also skip class type if not a method.
              var paramName = (i === 1 ? "thisWired" : ("arg"+(i - 2)+"Wired"));
              if (argTypes[i].destructorFunction !== null) {
                  invokerFnBody += paramName+"_dtor("+paramName+"); // "+argTypes[i].name+"\n";
                  args1.push(paramName+"_dtor");
                  args2.push(argTypes[i].destructorFunction);
              }
          }
      }
  
      if (returns) {
          invokerFnBody += "var ret = retType.fromWireType(rv);\n" +
                           "return ret;\n";
      } else {
      }
      invokerFnBody += "}\n";
  
      args1.push(invokerFnBody);
  
      var invokerFunction = new_(Function, args1).apply(null, args2);
      return invokerFunction;
    }
  
  function heap32VectorToArray(count, firstElement) {
      var array = [];
      for (var i = 0; i < count; i++) {
          array.push(HEAP32[(firstElement >> 2) + i]);
      }
      return array;
    }function __embind_register_class_class_function(
      rawClassType,
      methodName,
      argCount,
      rawArgTypesAddr,
      invokerSignature,
      rawInvoker,
      fn
    ) {
      var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
      methodName = readLatin1String(methodName);
      rawInvoker = embind__requireFunction(invokerSignature, rawInvoker);
      whenDependentTypesAreResolved([], [rawClassType], function(classType) {
          classType = classType[0];
          var humanName = classType.name + '.' + methodName;
  
          function unboundTypesHandler() {
              throwUnboundTypeError('Cannot call ' + humanName + ' due to unbound types', rawArgTypes);
          }
  
          var proto = classType.registeredClass.constructor;
          if (undefined === proto[methodName]) {
              // This is the first function to be registered with this name.
              unboundTypesHandler.argCount = argCount-1;
              proto[methodName] = unboundTypesHandler;
          } else {
              // There was an existing function with the same name registered. Set up a function overload routing table.
              ensureOverloadTable(proto, methodName, humanName);
              proto[methodName].overloadTable[argCount-1] = unboundTypesHandler;
          }
  
          whenDependentTypesAreResolved([], rawArgTypes, function(argTypes) {
              // Replace the initial unbound-types-handler stub with the proper function. If multiple overloads are registered,
              // the function handlers go into an overload table.
              var invokerArgsArray = [argTypes[0] /* return value */, null /* no class 'this'*/].concat(argTypes.slice(1) /* actual params */);
              var func = craftInvokerFunction(humanName, invokerArgsArray, null /* no class 'this'*/, rawInvoker, fn);
              if (undefined === proto[methodName].overloadTable) {
                  func.argCount = argCount-1;
                  proto[methodName] = func;
              } else {
                  proto[methodName].overloadTable[argCount-1] = func;
              }
              return [];
          });
          return [];
      });
    }

  function __embind_register_class_constructor(
      rawClassType,
      argCount,
      rawArgTypesAddr,
      invokerSignature,
      invoker,
      rawConstructor
    ) {
      var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
      invoker = embind__requireFunction(invokerSignature, invoker);
  
      whenDependentTypesAreResolved([], [rawClassType], function(classType) {
          classType = classType[0];
          var humanName = 'constructor ' + classType.name;
  
          if (undefined === classType.registeredClass.constructor_body) {
              classType.registeredClass.constructor_body = [];
          }
          if (undefined !== classType.registeredClass.constructor_body[argCount - 1]) {
              throw new BindingError("Cannot register multiple constructors with identical number of parameters (" + (argCount-1) + ") for class '" + classType.name + "'! Overload resolution is currently only performed using the parameter count, not actual type info!");
          }
          classType.registeredClass.constructor_body[argCount - 1] = function unboundTypeHandler() {
              throwUnboundTypeError('Cannot construct ' + classType.name + ' due to unbound types', rawArgTypes);
          };
  
          whenDependentTypesAreResolved([], rawArgTypes, function(argTypes) {
              classType.registeredClass.constructor_body[argCount - 1] = function constructor_body() {
                  if (arguments.length !== argCount - 1) {
                      throwBindingError(humanName + ' called with ' + arguments.length + ' arguments, expected ' + (argCount-1));
                  }
                  var destructors = [];
                  var args = new Array(argCount);
                  args[0] = rawConstructor;
                  for (var i = 1; i < argCount; ++i) {
                      args[i] = argTypes[i]['toWireType'](destructors, arguments[i - 1]);
                  }
  
                  var ptr = invoker.apply(null, args);
                  runDestructors(destructors);
  
                  return argTypes[0]['fromWireType'](ptr);
              };
              return [];
          });
          return [];
      });
    }

  function __embind_register_class_function(
      rawClassType,
      methodName,
      argCount,
      rawArgTypesAddr, // [ReturnType, ThisType, Args...]
      invokerSignature,
      rawInvoker,
      context,
      isPureVirtual
    ) {
      var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
      methodName = readLatin1String(methodName);
      rawInvoker = embind__requireFunction(invokerSignature, rawInvoker);
  
      whenDependentTypesAreResolved([], [rawClassType], function(classType) {
          classType = classType[0];
          var humanName = classType.name + '.' + methodName;
  
          if (isPureVirtual) {
              classType.registeredClass.pureVirtualFunctions.push(methodName);
          }
  
          function unboundTypesHandler() {
              throwUnboundTypeError('Cannot call ' + humanName + ' due to unbound types', rawArgTypes);
          }
  
          var proto = classType.registeredClass.instancePrototype;
          var method = proto[methodName];
          if (undefined === method || (undefined === method.overloadTable && method.className !== classType.name && method.argCount === argCount - 2)) {
              // This is the first overload to be registered, OR we are replacing a function in the base class with a function in the derived class.
              unboundTypesHandler.argCount = argCount - 2;
              unboundTypesHandler.className = classType.name;
              proto[methodName] = unboundTypesHandler;
          } else {
              // There was an existing function with the same name registered. Set up a function overload routing table.
              ensureOverloadTable(proto, methodName, humanName);
              proto[methodName].overloadTable[argCount - 2] = unboundTypesHandler;
          }
  
          whenDependentTypesAreResolved([], rawArgTypes, function(argTypes) {
  
              var memberFunction = craftInvokerFunction(humanName, argTypes, classType, rawInvoker, context);
  
              // Replace the initial unbound-handler-stub function with the appropriate member function, now that all types
              // are resolved. If multiple overloads are registered for this function, the function goes into an overload table.
              if (undefined === proto[methodName].overloadTable) {
                  // Set argCount in case an overload is registered later
                  memberFunction.argCount = argCount - 2;
                  proto[methodName] = memberFunction;
              } else {
                  proto[methodName].overloadTable[argCount - 2] = memberFunction;
              }
  
              return [];
          });
          return [];
      });
    }

  
  function validateThis(this_, classType, humanName) {
      if (!(this_ instanceof Object)) {
          throwBindingError(humanName + ' with invalid "this": ' + this_);
      }
      if (!(this_ instanceof classType.registeredClass.constructor)) {
          throwBindingError(humanName + ' incompatible with "this" of type ' + this_.constructor.name);
      }
      if (!this_.$$.ptr) {
          throwBindingError('cannot call emscripten binding method ' + humanName + ' on deleted object');
      }
  
      // todo: kill this
      return upcastPointer(
          this_.$$.ptr,
          this_.$$.ptrType.registeredClass,
          classType.registeredClass);
    }function __embind_register_class_property(
      classType,
      fieldName,
      getterReturnType,
      getterSignature,
      getter,
      getterContext,
      setterArgumentType,
      setterSignature,
      setter,
      setterContext
    ) {
      fieldName = readLatin1String(fieldName);
      getter = embind__requireFunction(getterSignature, getter);
  
      whenDependentTypesAreResolved([], [classType], function(classType) {
          classType = classType[0];
          var humanName = classType.name + '.' + fieldName;
          var desc = {
              get: function() {
                  throwUnboundTypeError('Cannot access ' + humanName + ' due to unbound types', [getterReturnType, setterArgumentType]);
              },
              enumerable: true,
              configurable: true
          };
          if (setter) {
              desc.set = function() {
                  throwUnboundTypeError('Cannot access ' + humanName + ' due to unbound types', [getterReturnType, setterArgumentType]);
              };
          } else {
              desc.set = function(v) {
                  throwBindingError(humanName + ' is a read-only property');
              };
          }
  
          Object.defineProperty(classType.registeredClass.instancePrototype, fieldName, desc);
  
          whenDependentTypesAreResolved(
              [],
              (setter ? [getterReturnType, setterArgumentType] : [getterReturnType]),
          function(types) {
              var getterReturnType = types[0];
              var desc = {
                  get: function() {
                      var ptr = validateThis(this, classType, humanName + ' getter');
                      return getterReturnType['fromWireType'](getter(getterContext, ptr));
                  },
                  enumerable: true
              };
  
              if (setter) {
                  setter = embind__requireFunction(setterSignature, setter);
                  var setterArgumentType = types[1];
                  desc.set = function(v) {
                      var ptr = validateThis(this, classType, humanName + ' setter');
                      var destructors = [];
                      setter(setterContext, ptr, setterArgumentType['toWireType'](destructors, v));
                      runDestructors(destructors);
                  };
              }
  
              Object.defineProperty(classType.registeredClass.instancePrototype, fieldName, desc);
              return [];
          });
  
          return [];
      });
    }

  
  
  var emval_free_list=[];
  
  var emval_handle_array=[{},{value:undefined},{value:null},{value:true},{value:false}];function __emval_decref(handle) {
      if (handle > 4 && 0 === --emval_handle_array[handle].refcount) {
          emval_handle_array[handle] = undefined;
          emval_free_list.push(handle);
      }
    }
  
  
  
  function count_emval_handles() {
      var count = 0;
      for (var i = 5; i < emval_handle_array.length; ++i) {
          if (emval_handle_array[i] !== undefined) {
              ++count;
          }
      }
      return count;
    }
  
  function get_first_emval() {
      for (var i = 5; i < emval_handle_array.length; ++i) {
          if (emval_handle_array[i] !== undefined) {
              return emval_handle_array[i];
          }
      }
      return null;
    }function init_emval() {
      Module['count_emval_handles'] = count_emval_handles;
      Module['get_first_emval'] = get_first_emval;
    }function __emval_register(value) {
  
      switch(value){
        case undefined :{ return 1; }
        case null :{ return 2; }
        case true :{ return 3; }
        case false :{ return 4; }
        default:{
          var handle = emval_free_list.length ?
              emval_free_list.pop() :
              emval_handle_array.length;
  
          emval_handle_array[handle] = {refcount: 1, value: value};
          return handle;
          }
        }
    }function __embind_register_emval(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(handle) {
              var rv = emval_handle_array[handle].value;
              __emval_decref(handle);
              return rv;
          },
          'toWireType': function(destructors, value) {
              return __emval_register(value);
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: null, // This type does not need a destructor
  
          // TODO: do we need a deleteObject here?  write a test where
          // emval is passed into JS via an interface
      });
    }

  
  function _embind_repr(v) {
      if (v === null) {
          return 'null';
      }
      var t = typeof v;
      if (t === 'object' || t === 'array' || t === 'function') {
          return v.toString();
      } else {
          return '' + v;
      }
    }
  
  function floatReadValueFromPointer(name, shift) {
      switch (shift) {
          case 2: return function(pointer) {
              return this['fromWireType'](HEAPF32[pointer >> 2]);
          };
          case 3: return function(pointer) {
              return this['fromWireType'](HEAPF64[pointer >> 3]);
          };
          default:
              throw new TypeError("Unknown float type: " + name);
      }
    }function __embind_register_float(rawType, name, size) {
      var shift = getShiftFromSize(size);
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              return value;
          },
          'toWireType': function(destructors, value) {
              // todo: Here we have an opportunity for -O3 level "unsafe" optimizations: we could
              // avoid the following if() and assume value is of proper type.
              if (typeof value !== "number" && typeof value !== "boolean") {
                  throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
              }
              return value;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': floatReadValueFromPointer(name, shift),
          destructorFunction: null, // This type does not need a destructor
      });
    }

  
  function integerReadValueFromPointer(name, shift, signed) {
      // integers are quite common, so generate very specialized functions
      switch (shift) {
          case 0: return signed ?
              function readS8FromPointer(pointer) { return HEAP8[pointer]; } :
              function readU8FromPointer(pointer) { return HEAPU8[pointer]; };
          case 1: return signed ?
              function readS16FromPointer(pointer) { return HEAP16[pointer >> 1]; } :
              function readU16FromPointer(pointer) { return HEAPU16[pointer >> 1]; };
          case 2: return signed ?
              function readS32FromPointer(pointer) { return HEAP32[pointer >> 2]; } :
              function readU32FromPointer(pointer) { return HEAPU32[pointer >> 2]; };
          default:
              throw new TypeError("Unknown integer type: " + name);
      }
    }function __embind_register_integer(primitiveType, name, size, minRange, maxRange) {
      name = readLatin1String(name);
      if (maxRange === -1) { // LLVM doesn't have signed and unsigned 32-bit types, so u32 literals come out as 'i32 -1'. Always treat those as max u32.
          maxRange = 4294967295;
      }
  
      var shift = getShiftFromSize(size);
  
      var fromWireType = function(value) {
          return value;
      };
  
      if (minRange === 0) {
          var bitshift = 32 - 8*size;
          fromWireType = function(value) {
              return (value << bitshift) >>> bitshift;
          };
      }
  
      var isUnsignedType = (name.indexOf('unsigned') != -1);
  
      registerType(primitiveType, {
          name: name,
          'fromWireType': fromWireType,
          'toWireType': function(destructors, value) {
              // todo: Here we have an opportunity for -O3 level "unsafe" optimizations: we could
              // avoid the following two if()s and assume value is of proper type.
              if (typeof value !== "number" && typeof value !== "boolean") {
                  throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
              }
              if (value < minRange || value > maxRange) {
                  throw new TypeError('Passing a number "' + _embind_repr(value) + '" from JS side to C/C++ side to an argument of type "' + name + '", which is outside the valid range [' + minRange + ', ' + maxRange + ']!');
              }
              return isUnsignedType ? (value >>> 0) : (value | 0);
          },
          'argPackAdvance': 8,
          'readValueFromPointer': integerReadValueFromPointer(name, shift, minRange !== 0),
          destructorFunction: null, // This type does not need a destructor
      });
    }

  function __embind_register_memory_view(rawType, dataTypeIndex, name) {
      var typeMapping = [
          Int8Array,
          Uint8Array,
          Int16Array,
          Uint16Array,
          Int32Array,
          Uint32Array,
          Float32Array,
          Float64Array,
      ];
  
      var TA = typeMapping[dataTypeIndex];
  
      function decodeMemoryView(handle) {
          handle = handle >> 2;
          var heap = HEAPU32;
          var size = heap[handle]; // in elements
          var data = heap[handle + 1]; // byte offset into emscripten heap
          return new TA(heap['buffer'], data, size);
      }
  
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': decodeMemoryView,
          'argPackAdvance': 8,
          'readValueFromPointer': decodeMemoryView,
      }, {
          ignoreDuplicateRegistrations: true,
      });
    }

  function __embind_register_smart_ptr(
      rawType,
      rawPointeeType,
      name,
      sharingPolicy,
      getPointeeSignature,
      rawGetPointee,
      constructorSignature,
      rawConstructor,
      shareSignature,
      rawShare,
      destructorSignature,
      rawDestructor
    ) {
      name = readLatin1String(name);
      rawGetPointee = embind__requireFunction(getPointeeSignature, rawGetPointee);
      rawConstructor = embind__requireFunction(constructorSignature, rawConstructor);
      rawShare = embind__requireFunction(shareSignature, rawShare);
      rawDestructor = embind__requireFunction(destructorSignature, rawDestructor);
  
      whenDependentTypesAreResolved([rawType], [rawPointeeType], function(pointeeType) {
          pointeeType = pointeeType[0];
  
          var registeredPointer = new RegisteredPointer(
              name,
              pointeeType.registeredClass,
              false,
              false,
              // smart pointer properties
              true,
              pointeeType,
              sharingPolicy,
              rawGetPointee,
              rawConstructor,
              rawShare,
              rawDestructor);
          return [registeredPointer];
      });
    }

  function __embind_register_std_string(rawType, name) {
      name = readLatin1String(name);
      var stdStringIsUTF8
      //process only std::string bindings with UTF8 support, in contrast to e.g. std::basic_string<unsigned char>
      = (name === "std::string");
  
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              var length = HEAPU32[value >> 2];
  
              var str;
              if(stdStringIsUTF8) {
                  //ensure null termination at one-past-end byte if not present yet
                  var endChar = HEAPU8[value + 4 + length];
                  var endCharSwap = 0;
                  if(endChar != 0)
                  {
                    endCharSwap = endChar;
                    HEAPU8[value + 4 + length] = 0;
                  }
  
                  var decodeStartPtr = value + 4;
                  //looping here to support possible embedded '0' bytes
                  for (var i = 0; i <= length; ++i) {
                    var currentBytePtr = value + 4 + i;
                    if(HEAPU8[currentBytePtr] == 0)
                    {
                      var stringSegment = UTF8ToString(decodeStartPtr);
                      if(str === undefined)
                        str = stringSegment;
                      else
                      {
                        str += String.fromCharCode(0);
                        str += stringSegment;
                      }
                      decodeStartPtr = currentBytePtr + 1;
                    }
                  }
  
                  if(endCharSwap != 0)
                    HEAPU8[value + 4 + length] = endCharSwap;
              } else {
                  var a = new Array(length);
                  for (var i = 0; i < length; ++i) {
                      a[i] = String.fromCharCode(HEAPU8[value + 4 + i]);
                  }
                  str = a.join('');
              }
  
              _free(value);
              
              return str;
          },
          'toWireType': function(destructors, value) {
              if (value instanceof ArrayBuffer) {
                  value = new Uint8Array(value);
              }
              
              var getLength;
              var valueIsOfTypeString = (typeof value === 'string');
  
              if (!(valueIsOfTypeString || value instanceof Uint8Array || value instanceof Uint8ClampedArray || value instanceof Int8Array)) {
                  throwBindingError('Cannot pass non-string to std::string');
              }
              if (stdStringIsUTF8 && valueIsOfTypeString) {
                  getLength = function() {return lengthBytesUTF8(value);};
              } else {
                  getLength = function() {return value.length;};
              }
              
              // assumes 4-byte alignment
              var length = getLength();
              var ptr = _malloc(4 + length + 1);
              HEAPU32[ptr >> 2] = length;
  
              if (stdStringIsUTF8 && valueIsOfTypeString) {
                  stringToUTF8(value, ptr + 4, length + 1);
              } else {
                  if(valueIsOfTypeString) {
                      for (var i = 0; i < length; ++i) {
                          var charCode = value.charCodeAt(i);
                          if (charCode > 255) {
                              _free(ptr);
                              throwBindingError('String has UTF-16 code units that do not fit in 8 bits');
                          }
                          HEAPU8[ptr + 4 + i] = charCode;
                      }
                  } else {
                      for (var i = 0; i < length; ++i) {
                          HEAPU8[ptr + 4 + i] = value[i];
                      }
                  }
              }
  
              if (destructors !== null) {
                  destructors.push(_free, ptr);
              }
              return ptr;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: function(ptr) { _free(ptr); },
      });
    }

  function __embind_register_std_wstring(rawType, charSize, name) {
      // nb. do not cache HEAPU16 and HEAPU32, they may be destroyed by emscripten_resize_heap().
      name = readLatin1String(name);
      var getHeap, shift;
      if (charSize === 2) {
          getHeap = function() { return HEAPU16; };
          shift = 1;
      } else if (charSize === 4) {
          getHeap = function() { return HEAPU32; };
          shift = 2;
      }
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              var HEAP = getHeap();
              var length = HEAPU32[value >> 2];
              var a = new Array(length);
              var start = (value + 4) >> shift;
              for (var i = 0; i < length; ++i) {
                  a[i] = String.fromCharCode(HEAP[start + i]);
              }
              _free(value);
              return a.join('');
          },
          'toWireType': function(destructors, value) {
              // assumes 4-byte alignment
              var HEAP = getHeap();
              var length = value.length;
              var ptr = _malloc(4 + length * charSize);
              HEAPU32[ptr >> 2] = length;
              var start = (ptr + 4) >> shift;
              for (var i = 0; i < length; ++i) {
                  HEAP[start + i] = value.charCodeAt(i);
              }
              if (destructors !== null) {
                  destructors.push(_free, ptr);
              }
              return ptr;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: function(ptr) { _free(ptr); },
      });
    }

  function __embind_register_void(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          isVoid: true, // void return values can be optimized out sometimes
          name: name,
          'argPackAdvance': 0,
          'fromWireType': function() {
              return undefined;
          },
          'toWireType': function(destructors, o) {
              // TODO: assert if anything else is given?
              return undefined;
          },
      });
    }

  
  
  function requireRegisteredType(rawType, humanName) {
      var impl = registeredTypes[rawType];
      if (undefined === impl) {
          throwBindingError(humanName + " has unknown type " + getTypeName(rawType));
      }
      return impl;
    }function __emval_lookupTypes(argCount, argTypes, argWireTypes) {
      var a = new Array(argCount);
      for (var i = 0; i < argCount; ++i) {
          a[i] = requireRegisteredType(
              HEAP32[(argTypes >> 2) + i],
              "parameter " + i);
      }
      return a;
    }
  
  function requireHandle(handle) {
      if (!handle) {
          throwBindingError('Cannot use deleted val. handle = ' + handle);
      }
      return emval_handle_array[handle].value;
    }function __emval_call(handle, argCount, argTypes, argv) {
      handle = requireHandle(handle);
      var types = __emval_lookupTypes(argCount, argTypes);
  
      var args = new Array(argCount);
      for (var i = 0; i < argCount; ++i) {
          var type = types[i];
          args[i] = type['readValueFromPointer'](argv);
          argv += type['argPackAdvance'];
      }
  
      var rv = handle.apply(undefined, args);
      return __emval_register(rv);
    }


  function __emval_incref(handle) {
      if (handle > 4) {
          emval_handle_array[handle].refcount += 1;
      }
    }

  function __emval_take_value(type, argv) {
      type = requireRegisteredType(type, '_emval_take_value');
      var v = type['readValueFromPointer'](argv);
      return __emval_register(v);
    }

  function _abort() {
      Module['abort']();
    }

   

   

  function _emscripten_get_heap_size() {
      return TOTAL_MEMORY;
    }

  
  function abortOnCannotGrowMemory(requestedSize) {
      abort('Cannot enlarge memory arrays to size ' + requestedSize + ' bytes. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or (4) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
    }function _emscripten_resize_heap(requestedSize) {
      abortOnCannotGrowMemory(requestedSize);
    }

  
  var ENV={};function _getenv(name) {
      // char *getenv(const char *name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/getenv.html
      if (name === 0) return 0;
      name = UTF8ToString(name);
      if (!ENV.hasOwnProperty(name)) return 0;
  
      if (_getenv.ret) _free(_getenv.ret);
      _getenv.ret = allocateUTF8(ENV[name]);
      return _getenv.ret;
    }



   

  
  var _Math_floor=undefined;
  
  var _Math_ceil=undefined; 

  function _llvm_stackrestore(p) {
      var self = _llvm_stacksave;
      var ret = self.LLVM_SAVEDSTACKS[p];
      self.LLVM_SAVEDSTACKS.splice(p, 1);
      stackRestore(ret);
    }

  function _llvm_stacksave() {
      var self = _llvm_stacksave;
      if (!self.LLVM_SAVEDSTACKS) {
        self.LLVM_SAVEDSTACKS = [];
      }
      self.LLVM_SAVEDSTACKS.push(stackSave());
      return self.LLVM_SAVEDSTACKS.length-1;
    }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
    }
  
  var _Int8Array=undefined;
  
  var _Int32Array=undefined; 

   

   

   

  function _pthread_cond_wait() { return 0; }

  
  var PTHREAD_SPECIFIC={};function _pthread_getspecific(key) {
      return PTHREAD_SPECIFIC[key] || 0;
    }

  
  var PTHREAD_SPECIFIC_NEXT_KEY=1;function _pthread_key_create(key, destructor) {
      if (key == 0) {
        return ERRNO_CODES.EINVAL;
      }
      HEAP32[((key)>>2)]=PTHREAD_SPECIFIC_NEXT_KEY;
      // values start at 0
      PTHREAD_SPECIFIC[PTHREAD_SPECIFIC_NEXT_KEY] = 0;
      PTHREAD_SPECIFIC_NEXT_KEY++;
      return 0;
    }

   

   

  function _pthread_once(ptr, func) {
      if (!_pthread_once.seen) _pthread_once.seen = {};
      if (ptr in _pthread_once.seen) return;
      dynCall_v(func);
      _pthread_once.seen[ptr] = 1;
    }

  function _pthread_setspecific(key, value) {
      if (!(key in PTHREAD_SPECIFIC)) {
        return ERRNO_CODES.EINVAL;
      }
      PTHREAD_SPECIFIC[key] = value;
      return 0;
    }

   

  
  
  function __isLeapYear(year) {
        return year%4 === 0 && (year%100 !== 0 || year%400 === 0);
    }
  
  function __arraySum(array, index) {
      var sum = 0;
      for (var i = 0; i <= index; sum += array[i++]);
      return sum;
    }
  
  
  var __MONTH_DAYS_LEAP=[31,29,31,30,31,30,31,31,30,31,30,31];
  
  var __MONTH_DAYS_REGULAR=[31,28,31,30,31,30,31,31,30,31,30,31];function __addDays(date, days) {
      var newDate = new Date(date.getTime());
      while(days > 0) {
        var leap = __isLeapYear(newDate.getFullYear());
        var currentMonth = newDate.getMonth();
        var daysInCurrentMonth = (leap ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR)[currentMonth];
  
        if (days > daysInCurrentMonth-newDate.getDate()) {
          // we spill over to next month
          days -= (daysInCurrentMonth-newDate.getDate()+1);
          newDate.setDate(1);
          if (currentMonth < 11) {
            newDate.setMonth(currentMonth+1)
          } else {
            newDate.setMonth(0);
            newDate.setFullYear(newDate.getFullYear()+1);
          }
        } else {
          // we stay in current month
          newDate.setDate(newDate.getDate()+days);
          return newDate;
        }
      }
  
      return newDate;
    }function _strftime(s, maxsize, format, tm) {
      // size_t strftime(char *restrict s, size_t maxsize, const char *restrict format, const struct tm *restrict timeptr);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/strftime.html
  
      var tm_zone = HEAP32[(((tm)+(40))>>2)];
  
      var date = {
        tm_sec: HEAP32[((tm)>>2)],
        tm_min: HEAP32[(((tm)+(4))>>2)],
        tm_hour: HEAP32[(((tm)+(8))>>2)],
        tm_mday: HEAP32[(((tm)+(12))>>2)],
        tm_mon: HEAP32[(((tm)+(16))>>2)],
        tm_year: HEAP32[(((tm)+(20))>>2)],
        tm_wday: HEAP32[(((tm)+(24))>>2)],
        tm_yday: HEAP32[(((tm)+(28))>>2)],
        tm_isdst: HEAP32[(((tm)+(32))>>2)],
        tm_gmtoff: HEAP32[(((tm)+(36))>>2)],
        tm_zone: tm_zone ? UTF8ToString(tm_zone) : ''
      };
  
      var pattern = UTF8ToString(format);
  
      // expand format
      var EXPANSION_RULES_1 = {
        '%c': '%a %b %d %H:%M:%S %Y',     // Replaced by the locale's appropriate date and time representation - e.g., Mon Aug  3 14:02:01 2013
        '%D': '%m/%d/%y',                 // Equivalent to %m / %d / %y
        '%F': '%Y-%m-%d',                 // Equivalent to %Y - %m - %d
        '%h': '%b',                       // Equivalent to %b
        '%r': '%I:%M:%S %p',              // Replaced by the time in a.m. and p.m. notation
        '%R': '%H:%M',                    // Replaced by the time in 24-hour notation
        '%T': '%H:%M:%S',                 // Replaced by the time
        '%x': '%m/%d/%y',                 // Replaced by the locale's appropriate date representation
        '%X': '%H:%M:%S'                  // Replaced by the locale's appropriate date representation
      };
      for (var rule in EXPANSION_RULES_1) {
        pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_1[rule]);
      }
  
      var WEEKDAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
      var MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
  
      function leadingSomething(value, digits, character) {
        var str = typeof value === 'number' ? value.toString() : (value || '');
        while (str.length < digits) {
          str = character[0]+str;
        }
        return str;
      };
  
      function leadingNulls(value, digits) {
        return leadingSomething(value, digits, '0');
      };
  
      function compareByDay(date1, date2) {
        function sgn(value) {
          return value < 0 ? -1 : (value > 0 ? 1 : 0);
        };
  
        var compare;
        if ((compare = sgn(date1.getFullYear()-date2.getFullYear())) === 0) {
          if ((compare = sgn(date1.getMonth()-date2.getMonth())) === 0) {
            compare = sgn(date1.getDate()-date2.getDate());
          }
        }
        return compare;
      };
  
      function getFirstWeekStartDate(janFourth) {
          switch (janFourth.getDay()) {
            case 0: // Sunday
              return new Date(janFourth.getFullYear()-1, 11, 29);
            case 1: // Monday
              return janFourth;
            case 2: // Tuesday
              return new Date(janFourth.getFullYear(), 0, 3);
            case 3: // Wednesday
              return new Date(janFourth.getFullYear(), 0, 2);
            case 4: // Thursday
              return new Date(janFourth.getFullYear(), 0, 1);
            case 5: // Friday
              return new Date(janFourth.getFullYear()-1, 11, 31);
            case 6: // Saturday
              return new Date(janFourth.getFullYear()-1, 11, 30);
          }
      };
  
      function getWeekBasedYear(date) {
          var thisDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          var janFourthThisYear = new Date(thisDate.getFullYear(), 0, 4);
          var janFourthNextYear = new Date(thisDate.getFullYear()+1, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          if (compareByDay(firstWeekStartThisYear, thisDate) <= 0) {
            // this date is after the start of the first week of this year
            if (compareByDay(firstWeekStartNextYear, thisDate) <= 0) {
              return thisDate.getFullYear()+1;
            } else {
              return thisDate.getFullYear();
            }
          } else {
            return thisDate.getFullYear()-1;
          }
      };
  
      var EXPANSION_RULES_2 = {
        '%a': function(date) {
          return WEEKDAYS[date.tm_wday].substring(0,3);
        },
        '%A': function(date) {
          return WEEKDAYS[date.tm_wday];
        },
        '%b': function(date) {
          return MONTHS[date.tm_mon].substring(0,3);
        },
        '%B': function(date) {
          return MONTHS[date.tm_mon];
        },
        '%C': function(date) {
          var year = date.tm_year+1900;
          return leadingNulls((year/100)|0,2);
        },
        '%d': function(date) {
          return leadingNulls(date.tm_mday, 2);
        },
        '%e': function(date) {
          return leadingSomething(date.tm_mday, 2, ' ');
        },
        '%g': function(date) {
          // %g, %G, and %V give values according to the ISO 8601:2000 standard week-based year.
          // In this system, weeks begin on a Monday and week 1 of the year is the week that includes
          // January 4th, which is also the week that includes the first Thursday of the year, and
          // is also the first week that contains at least four days in the year.
          // If the first Monday of January is the 2nd, 3rd, or 4th, the preceding days are part of
          // the last week of the preceding year; thus, for Saturday 2nd January 1999,
          // %G is replaced by 1998 and %V is replaced by 53. If December 29th, 30th,
          // or 31st is a Monday, it and any following days are part of week 1 of the following year.
          // Thus, for Tuesday 30th December 1997, %G is replaced by 1998 and %V is replaced by 01.
  
          return getWeekBasedYear(date).toString().substring(2);
        },
        '%G': function(date) {
          return getWeekBasedYear(date);
        },
        '%H': function(date) {
          return leadingNulls(date.tm_hour, 2);
        },
        '%I': function(date) {
          var twelveHour = date.tm_hour;
          if (twelveHour == 0) twelveHour = 12;
          else if (twelveHour > 12) twelveHour -= 12;
          return leadingNulls(twelveHour, 2);
        },
        '%j': function(date) {
          // Day of the year (001-366)
          return leadingNulls(date.tm_mday+__arraySum(__isLeapYear(date.tm_year+1900) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, date.tm_mon-1), 3);
        },
        '%m': function(date) {
          return leadingNulls(date.tm_mon+1, 2);
        },
        '%M': function(date) {
          return leadingNulls(date.tm_min, 2);
        },
        '%n': function() {
          return '\n';
        },
        '%p': function(date) {
          if (date.tm_hour >= 0 && date.tm_hour < 12) {
            return 'AM';
          } else {
            return 'PM';
          }
        },
        '%S': function(date) {
          return leadingNulls(date.tm_sec, 2);
        },
        '%t': function() {
          return '\t';
        },
        '%u': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay() || 7;
        },
        '%U': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53].
          // The first Sunday of January is the first day of week 1;
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year+1900, 0, 1);
          var firstSunday = janFirst.getDay() === 0 ? janFirst : __addDays(janFirst, 7-janFirst.getDay());
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
  
          // is target date after the first Sunday?
          if (compareByDay(firstSunday, endDate) < 0) {
            // calculate difference in days between first Sunday and endDate
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstSundayUntilEndJanuary = 31-firstSunday.getDate();
            var days = firstSundayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
  
          return compareByDay(firstSunday, janFirst) === 0 ? '01': '00';
        },
        '%V': function(date) {
          // Replaced by the week number of the year (Monday as the first day of the week)
          // as a decimal number [01,53]. If the week containing 1 January has four
          // or more days in the new year, then it is considered week 1.
          // Otherwise, it is the last week of the previous year, and the next week is week 1.
          // Both January 4th and the first Thursday of January are always in week 1. [ tm_year, tm_wday, tm_yday]
          var janFourthThisYear = new Date(date.tm_year+1900, 0, 4);
          var janFourthNextYear = new Date(date.tm_year+1901, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          var endDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          if (compareByDay(endDate, firstWeekStartThisYear) < 0) {
            // if given date is before this years first week, then it belongs to the 53rd week of last year
            return '53';
          }
  
          if (compareByDay(firstWeekStartNextYear, endDate) <= 0) {
            // if given date is after next years first week, then it belongs to the 01th week of next year
            return '01';
          }
  
          // given date is in between CW 01..53 of this calendar year
          var daysDifference;
          if (firstWeekStartThisYear.getFullYear() < date.tm_year+1900) {
            // first CW of this year starts last year
            daysDifference = date.tm_yday+32-firstWeekStartThisYear.getDate()
          } else {
            // first CW of this year starts this year
            daysDifference = date.tm_yday+1-firstWeekStartThisYear.getDate();
          }
          return leadingNulls(Math.ceil(daysDifference/7), 2);
        },
        '%w': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay();
        },
        '%W': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53].
          // The first Monday of January is the first day of week 1;
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year, 0, 1);
          var firstMonday = janFirst.getDay() === 1 ? janFirst : __addDays(janFirst, janFirst.getDay() === 0 ? 1 : 7-janFirst.getDay()+1);
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
  
          // is target date after the first Monday?
          if (compareByDay(firstMonday, endDate) < 0) {
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstMondayUntilEndJanuary = 31-firstMonday.getDate();
            var days = firstMondayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
          return compareByDay(firstMonday, janFirst) === 0 ? '01': '00';
        },
        '%y': function(date) {
          // Replaced by the last two digits of the year as a decimal number [00,99]. [ tm_year]
          return (date.tm_year+1900).toString().substring(2);
        },
        '%Y': function(date) {
          // Replaced by the year as a decimal number (for example, 1997). [ tm_year]
          return date.tm_year+1900;
        },
        '%z': function(date) {
          // Replaced by the offset from UTC in the ISO 8601:2000 standard format ( +hhmm or -hhmm ).
          // For example, "-0430" means 4 hours 30 minutes behind UTC (west of Greenwich).
          var off = date.tm_gmtoff;
          var ahead = off >= 0;
          off = Math.abs(off) / 60;
          // convert from minutes into hhmm format (which means 60 minutes = 100 units)
          off = (off / 60)*100 + (off % 60);
          return (ahead ? '+' : '-') + String("0000" + off).slice(-4);
        },
        '%Z': function(date) {
          return date.tm_zone;
        },
        '%%': function() {
          return '%';
        }
      };
      for (var rule in EXPANSION_RULES_2) {
        if (pattern.indexOf(rule) >= 0) {
          pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_2[rule](date));
        }
      }
  
      var bytes = intArrayFromString(pattern, false);
      if (bytes.length > maxsize) {
        return 0;
      }
  
      writeArrayToMemory(bytes, s);
      return bytes.length-1;
    }function _strftime_l(s, maxsize, format, tm) {
      return _strftime(s, maxsize, format, tm); // no locale support yet
    }
FS.staticInit();__ATINIT__.unshift(function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() });__ATMAIN__.push(function() { FS.ignorePermissions = false });__ATEXIT__.push(function() { FS.quit() });;
__ATINIT__.unshift(function() { TTY.init() });__ATEXIT__.push(function() { TTY.shutdown() });;
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); };
embind_init_charCodes();
BindingError = Module['BindingError'] = extendError(Error, 'BindingError');;
InternalError = Module['InternalError'] = extendError(Error, 'InternalError');;
init_ClassHandle();
init_RegisteredPointer();
init_embind();;
UnboundTypeError = Module['UnboundTypeError'] = extendError(Error, 'UnboundTypeError');;
init_emval();;
var ASSERTIONS = true;

// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      if (ASSERTIONS) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      }
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}


// Copied from https://github.com/strophe/strophejs/blob/e06d027/src/polyfills.js#L149

// This code was written by Tyler Akins and has been placed in the
// public domain.  It would be nice if you left this header intact.
// Base64 code from Tyler Akins -- http://rumkin.com

/**
 * Decodes a base64 string.
 * @param {String} input The string to decode.
 */
var decodeBase64 = typeof atob === 'function' ? atob : function (input) {
  var keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

  var output = '';
  var chr1, chr2, chr3;
  var enc1, enc2, enc3, enc4;
  var i = 0;
  // remove all characters that are not A-Z, a-z, 0-9, +, /, or =
  input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');
  do {
    enc1 = keyStr.indexOf(input.charAt(i++));
    enc2 = keyStr.indexOf(input.charAt(i++));
    enc3 = keyStr.indexOf(input.charAt(i++));
    enc4 = keyStr.indexOf(input.charAt(i++));

    chr1 = (enc1 << 2) | (enc2 >> 4);
    chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
    chr3 = ((enc3 & 3) << 6) | enc4;

    output = output + String.fromCharCode(chr1);

    if (enc3 !== 64) {
      output = output + String.fromCharCode(chr2);
    }
    if (enc4 !== 64) {
      output = output + String.fromCharCode(chr3);
    }
  } while (i < input.length);
  return output;
};

// Converts a string of base64 into a byte array.
// Throws error on invalid input.
function intArrayFromBase64(s) {
  if (typeof ENVIRONMENT_IS_NODE === 'boolean' && ENVIRONMENT_IS_NODE) {
    var buf;
    try {
      buf = Buffer.from(s, 'base64');
    } catch (_) {
      buf = new Buffer(s, 'base64');
    }
    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);
  }

  try {
    var decoded = decodeBase64(s);
    var bytes = new Uint8Array(decoded.length);
    for (var i = 0 ; i < decoded.length ; ++i) {
      bytes[i] = decoded.charCodeAt(i);
    }
    return bytes;
  } catch (_) {
    throw new Error('Converting base64 string to bytes failed.');
  }
}

// If filename is a base64 data URI, parses and returns data (Buffer on node,
// Uint8Array otherwise). If filename is not a base64 data URI, returns undefined.
function tryParseAsDataURI(filename) {
  if (!isDataURI(filename)) {
    return;
  }

  return intArrayFromBase64(filename.slice(dataURIPrefix.length));
}


// ASM_LIBRARY EXTERN PRIMITIVES: Math_imul,Math_clz32,Math_floor,Math_ceil,Int8Array,Int32Array


function nullFunc_dddd(x) { err("Invalid function pointer called with signature 'dddd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_dddddd(x) { err("Invalid function pointer called with signature 'dddddd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_di(x) { err("Invalid function pointer called with signature 'di'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_did(x) { err("Invalid function pointer called with signature 'did'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_didd(x) { err("Invalid function pointer called with signature 'didd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_diddd(x) { err("Invalid function pointer called with signature 'diddd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_diddddd(x) { err("Invalid function pointer called with signature 'diddddd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_didddddii(x) { err("Invalid function pointer called with signature 'didddddii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_didddii(x) { err("Invalid function pointer called with signature 'didddii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_diddidd(x) { err("Invalid function pointer called with signature 'diddidd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_didi(x) { err("Invalid function pointer called with signature 'didi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_didid(x) { err("Invalid function pointer called with signature 'didid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_dididdd(x) { err("Invalid function pointer called with signature 'dididdd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_dididi(x) { err("Invalid function pointer called with signature 'dididi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_dii(x) { err("Invalid function pointer called with signature 'dii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_diid(x) { err("Invalid function pointer called with signature 'diid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_diidd(x) { err("Invalid function pointer called with signature 'diidd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_diiddd(x) { err("Invalid function pointer called with signature 'diiddd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_diiddddd(x) { err("Invalid function pointer called with signature 'diiddddd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_diidddddii(x) { err("Invalid function pointer called with signature 'diidddddii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_diidddii(x) { err("Invalid function pointer called with signature 'diidddii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_diiddidd(x) { err("Invalid function pointer called with signature 'diiddidd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_diidi(x) { err("Invalid function pointer called with signature 'diidi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_diidid(x) { err("Invalid function pointer called with signature 'diidid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_diididdd(x) { err("Invalid function pointer called with signature 'diididdd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_diididi(x) { err("Invalid function pointer called with signature 'diididi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_diii(x) { err("Invalid function pointer called with signature 'diii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_diiii(x) { err("Invalid function pointer called with signature 'diiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_i(x) { err("Invalid function pointer called with signature 'i'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_ii(x) { err("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iid(x) { err("Invalid function pointer called with signature 'iid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iii(x) { err("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiid(x) { err("Invalid function pointer called with signature 'iiid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiii(x) { err("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiid(x) { err("Invalid function pointer called with signature 'iiiid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiii(x) { err("Invalid function pointer called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiid(x) { err("Invalid function pointer called with signature 'iiiiid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiii(x) { err("Invalid function pointer called with signature 'iiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiiid(x) { err("Invalid function pointer called with signature 'iiiiiid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiiii(x) { err("Invalid function pointer called with signature 'iiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiiiii(x) { err("Invalid function pointer called with signature 'iiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiiiiii(x) { err("Invalid function pointer called with signature 'iiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiiiiiiii(x) { err("Invalid function pointer called with signature 'iiiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiiiiiiiii(x) { err("Invalid function pointer called with signature 'iiiiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiiiiiiiiii(x) { err("Invalid function pointer called with signature 'iiiiiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_v(x) { err("Invalid function pointer called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vi(x) { err("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vid(x) { err("Invalid function pointer called with signature 'vid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vidd(x) { err("Invalid function pointer called with signature 'vidd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viddii(x) { err("Invalid function pointer called with signature 'viddii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vidid(x) { err("Invalid function pointer called with signature 'vidid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vididd(x) { err("Invalid function pointer called with signature 'vididd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vididdd(x) { err("Invalid function pointer called with signature 'vididdd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vii(x) { err("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viid(x) { err("Invalid function pointer called with signature 'viid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viidd(x) { err("Invalid function pointer called with signature 'viidd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiddii(x) { err("Invalid function pointer called with signature 'viiddii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viidid(x) { err("Invalid function pointer called with signature 'viidid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viididd(x) { err("Invalid function pointer called with signature 'viididd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viididdd(x) { err("Invalid function pointer called with signature 'viididdd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viii(x) { err("Invalid function pointer called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiid(x) { err("Invalid function pointer called with signature 'viiid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiii(x) { err("Invalid function pointer called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiii(x) { err("Invalid function pointer called with signature 'viiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiii(x) { err("Invalid function pointer called with signature 'viiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiiii(x) { err("Invalid function pointer called with signature 'viiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiiiiiii(x) { err("Invalid function pointer called with signature 'viiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiiiiiiiiiiii(x) { err("Invalid function pointer called with signature 'viiiiiiiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function invoke_diii(index,a1,a2,a3) {
  var sp = stackSave();
  try {
    return dynCall_diii(index,a1,a2,a3);
  } catch(e) {
    stackRestore(sp);
    if (e !== e+0 && e !== 'longjmp') throw e;
    _setThrew(1, 0);
  }
}

function invoke_i(index) {
  var sp = stackSave();
  try {
    return dynCall_i(index);
  } catch(e) {
    stackRestore(sp);
    if (e !== e+0 && e !== 'longjmp') throw e;
    _setThrew(1, 0);
  }
}

function invoke_ii(index,a1) {
  var sp = stackSave();
  try {
    return dynCall_ii(index,a1);
  } catch(e) {
    stackRestore(sp);
    if (e !== e+0 && e !== 'longjmp') throw e;
    _setThrew(1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  var sp = stackSave();
  try {
    return dynCall_iii(index,a1,a2);
  } catch(e) {
    stackRestore(sp);
    if (e !== e+0 && e !== 'longjmp') throw e;
    _setThrew(1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  var sp = stackSave();
  try {
    return dynCall_iiii(index,a1,a2,a3);
  } catch(e) {
    stackRestore(sp);
    if (e !== e+0 && e !== 'longjmp') throw e;
    _setThrew(1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  var sp = stackSave();
  try {
    return dynCall_iiiii(index,a1,a2,a3,a4);
  } catch(e) {
    stackRestore(sp);
    if (e !== e+0 && e !== 'longjmp') throw e;
    _setThrew(1, 0);
  }
}

function invoke_iiiiii(index,a1,a2,a3,a4,a5) {
  var sp = stackSave();
  try {
    return dynCall_iiiiii(index,a1,a2,a3,a4,a5);
  } catch(e) {
    stackRestore(sp);
    if (e !== e+0 && e !== 'longjmp') throw e;
    _setThrew(1, 0);
  }
}

function invoke_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
  var sp = stackSave();
  try {
    return dynCall_iiiiiii(index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    stackRestore(sp);
    if (e !== e+0 && e !== 'longjmp') throw e;
    _setThrew(1, 0);
  }
}

function invoke_iiiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  var sp = stackSave();
  try {
    return dynCall_iiiiiiii(index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    stackRestore(sp);
    if (e !== e+0 && e !== 'longjmp') throw e;
    _setThrew(1, 0);
  }
}

function invoke_iiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  var sp = stackSave();
  try {
    return dynCall_iiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8);
  } catch(e) {
    stackRestore(sp);
    if (e !== e+0 && e !== 'longjmp') throw e;
    _setThrew(1, 0);
  }
}

function invoke_iiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10) {
  var sp = stackSave();
  try {
    return dynCall_iiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10);
  } catch(e) {
    stackRestore(sp);
    if (e !== e+0 && e !== 'longjmp') throw e;
    _setThrew(1, 0);
  }
}

function invoke_iiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11) {
  var sp = stackSave();
  try {
    return dynCall_iiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11);
  } catch(e) {
    stackRestore(sp);
    if (e !== e+0 && e !== 'longjmp') throw e;
    _setThrew(1, 0);
  }
}

function invoke_iiiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12) {
  var sp = stackSave();
  try {
    return dynCall_iiiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12);
  } catch(e) {
    stackRestore(sp);
    if (e !== e+0 && e !== 'longjmp') throw e;
    _setThrew(1, 0);
  }
}

function invoke_v(index) {
  var sp = stackSave();
  try {
    dynCall_v(index);
  } catch(e) {
    stackRestore(sp);
    if (e !== e+0 && e !== 'longjmp') throw e;
    _setThrew(1, 0);
  }
}

function invoke_vi(index,a1) {
  var sp = stackSave();
  try {
    dynCall_vi(index,a1);
  } catch(e) {
    stackRestore(sp);
    if (e !== e+0 && e !== 'longjmp') throw e;
    _setThrew(1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  var sp = stackSave();
  try {
    dynCall_vii(index,a1,a2);
  } catch(e) {
    stackRestore(sp);
    if (e !== e+0 && e !== 'longjmp') throw e;
    _setThrew(1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  var sp = stackSave();
  try {
    dynCall_viii(index,a1,a2,a3);
  } catch(e) {
    stackRestore(sp);
    if (e !== e+0 && e !== 'longjmp') throw e;
    _setThrew(1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  var sp = stackSave();
  try {
    dynCall_viiii(index,a1,a2,a3,a4);
  } catch(e) {
    stackRestore(sp);
    if (e !== e+0 && e !== 'longjmp') throw e;
    _setThrew(1, 0);
  }
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  var sp = stackSave();
  try {
    dynCall_viiiiii(index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    stackRestore(sp);
    if (e !== e+0 && e !== 'longjmp') throw e;
    _setThrew(1, 0);
  }
}

function invoke_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  var sp = stackSave();
  try {
    dynCall_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    stackRestore(sp);
    if (e !== e+0 && e !== 'longjmp') throw e;
    _setThrew(1, 0);
  }
}

function invoke_viiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10) {
  var sp = stackSave();
  try {
    dynCall_viiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10);
  } catch(e) {
    stackRestore(sp);
    if (e !== e+0 && e !== 'longjmp') throw e;
    _setThrew(1, 0);
  }
}

function invoke_viiiiiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15) {
  var sp = stackSave();
  try {
    dynCall_viiiiiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15);
  } catch(e) {
    stackRestore(sp);
    if (e !== e+0 && e !== 'longjmp') throw e;
    _setThrew(1, 0);
  }
}

var asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity }

var asmLibraryArg = { "abort": abort, "setTempRet0": setTempRet0, "getTempRet0": getTempRet0, "abortStackOverflow": abortStackOverflow, "nullFunc_dddd": nullFunc_dddd, "nullFunc_dddddd": nullFunc_dddddd, "nullFunc_di": nullFunc_di, "nullFunc_did": nullFunc_did, "nullFunc_didd": nullFunc_didd, "nullFunc_diddd": nullFunc_diddd, "nullFunc_diddddd": nullFunc_diddddd, "nullFunc_didddddii": nullFunc_didddddii, "nullFunc_didddii": nullFunc_didddii, "nullFunc_diddidd": nullFunc_diddidd, "nullFunc_didi": nullFunc_didi, "nullFunc_didid": nullFunc_didid, "nullFunc_dididdd": nullFunc_dididdd, "nullFunc_dididi": nullFunc_dididi, "nullFunc_dii": nullFunc_dii, "nullFunc_diid": nullFunc_diid, "nullFunc_diidd": nullFunc_diidd, "nullFunc_diiddd": nullFunc_diiddd, "nullFunc_diiddddd": nullFunc_diiddddd, "nullFunc_diidddddii": nullFunc_diidddddii, "nullFunc_diidddii": nullFunc_diidddii, "nullFunc_diiddidd": nullFunc_diiddidd, "nullFunc_diidi": nullFunc_diidi, "nullFunc_diidid": nullFunc_diidid, "nullFunc_diididdd": nullFunc_diididdd, "nullFunc_diididi": nullFunc_diididi, "nullFunc_diii": nullFunc_diii, "nullFunc_diiii": nullFunc_diiii, "nullFunc_i": nullFunc_i, "nullFunc_ii": nullFunc_ii, "nullFunc_iid": nullFunc_iid, "nullFunc_iii": nullFunc_iii, "nullFunc_iiid": nullFunc_iiid, "nullFunc_iiii": nullFunc_iiii, "nullFunc_iiiid": nullFunc_iiiid, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_iiiiid": nullFunc_iiiiid, "nullFunc_iiiiii": nullFunc_iiiiii, "nullFunc_iiiiiid": nullFunc_iiiiiid, "nullFunc_iiiiiii": nullFunc_iiiiiii, "nullFunc_iiiiiiii": nullFunc_iiiiiiii, "nullFunc_iiiiiiiii": nullFunc_iiiiiiiii, "nullFunc_iiiiiiiiiii": nullFunc_iiiiiiiiiii, "nullFunc_iiiiiiiiiiii": nullFunc_iiiiiiiiiiii, "nullFunc_iiiiiiiiiiiii": nullFunc_iiiiiiiiiiiii, "nullFunc_v": nullFunc_v, "nullFunc_vi": nullFunc_vi, "nullFunc_vid": nullFunc_vid, "nullFunc_vidd": nullFunc_vidd, "nullFunc_viddii": nullFunc_viddii, "nullFunc_vidid": nullFunc_vidid, "nullFunc_vididd": nullFunc_vididd, "nullFunc_vididdd": nullFunc_vididdd, "nullFunc_vii": nullFunc_vii, "nullFunc_viid": nullFunc_viid, "nullFunc_viidd": nullFunc_viidd, "nullFunc_viiddii": nullFunc_viiddii, "nullFunc_viidid": nullFunc_viidid, "nullFunc_viididd": nullFunc_viididd, "nullFunc_viididdd": nullFunc_viididdd, "nullFunc_viii": nullFunc_viii, "nullFunc_viiid": nullFunc_viiid, "nullFunc_viiii": nullFunc_viiii, "nullFunc_viiiii": nullFunc_viiiii, "nullFunc_viiiiii": nullFunc_viiiiii, "nullFunc_viiiiiii": nullFunc_viiiiiii, "nullFunc_viiiiiiiiii": nullFunc_viiiiiiiiii, "nullFunc_viiiiiiiiiiiiiii": nullFunc_viiiiiiiiiiiiiii, "invoke_diii": invoke_diii, "invoke_i": invoke_i, "invoke_ii": invoke_ii, "invoke_iii": invoke_iii, "invoke_iiii": invoke_iiii, "invoke_iiiii": invoke_iiiii, "invoke_iiiiii": invoke_iiiiii, "invoke_iiiiiii": invoke_iiiiiii, "invoke_iiiiiiii": invoke_iiiiiiii, "invoke_iiiiiiiii": invoke_iiiiiiiii, "invoke_iiiiiiiiiii": invoke_iiiiiiiiiii, "invoke_iiiiiiiiiiii": invoke_iiiiiiiiiiii, "invoke_iiiiiiiiiiiii": invoke_iiiiiiiiiiiii, "invoke_v": invoke_v, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_viii": invoke_viii, "invoke_viiii": invoke_viiii, "invoke_viiiiii": invoke_viiiiii, "invoke_viiiiiii": invoke_viiiiiii, "invoke_viiiiiiiiii": invoke_viiiiiiiiii, "invoke_viiiiiiiiiiiiiii": invoke_viiiiiiiiiiiiiii, "ClassHandle": ClassHandle, "ClassHandle_clone": ClassHandle_clone, "ClassHandle_delete": ClassHandle_delete, "ClassHandle_deleteLater": ClassHandle_deleteLater, "ClassHandle_isAliasOf": ClassHandle_isAliasOf, "ClassHandle_isDeleted": ClassHandle_isDeleted, "RegisteredClass": RegisteredClass, "RegisteredPointer": RegisteredPointer, "RegisteredPointer_deleteObject": RegisteredPointer_deleteObject, "RegisteredPointer_destructor": RegisteredPointer_destructor, "RegisteredPointer_fromWireType": RegisteredPointer_fromWireType, "RegisteredPointer_getPointee": RegisteredPointer_getPointee, "___cxa_allocate_exception": ___cxa_allocate_exception, "___cxa_begin_catch": ___cxa_begin_catch, "___cxa_end_catch": ___cxa_end_catch, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "___cxa_find_matching_catch_2": ___cxa_find_matching_catch_2, "___cxa_find_matching_catch_3": ___cxa_find_matching_catch_3, "___cxa_free_exception": ___cxa_free_exception, "___cxa_rethrow": ___cxa_rethrow, "___cxa_throw": ___cxa_throw, "___cxa_uncaught_exception": ___cxa_uncaught_exception, "___gxx_personality_v0": ___gxx_personality_v0, "___lock": ___lock, "___map_file": ___map_file, "___resumeException": ___resumeException, "___setErrNo": ___setErrNo, "___syscall140": ___syscall140, "___syscall145": ___syscall145, "___syscall146": ___syscall146, "___syscall221": ___syscall221, "___syscall5": ___syscall5, "___syscall54": ___syscall54, "___syscall6": ___syscall6, "___syscall91": ___syscall91, "___unlock": ___unlock, "__addDays": __addDays, "__arraySum": __arraySum, "__embind_register_bool": __embind_register_bool, "__embind_register_class": __embind_register_class, "__embind_register_class_class_function": __embind_register_class_class_function, "__embind_register_class_constructor": __embind_register_class_constructor, "__embind_register_class_function": __embind_register_class_function, "__embind_register_class_property": __embind_register_class_property, "__embind_register_emval": __embind_register_emval, "__embind_register_float": __embind_register_float, "__embind_register_integer": __embind_register_integer, "__embind_register_memory_view": __embind_register_memory_view, "__embind_register_smart_ptr": __embind_register_smart_ptr, "__embind_register_std_string": __embind_register_std_string, "__embind_register_std_wstring": __embind_register_std_wstring, "__embind_register_void": __embind_register_void, "__emval_call": __emval_call, "__emval_decref": __emval_decref, "__emval_incref": __emval_incref, "__emval_lookupTypes": __emval_lookupTypes, "__emval_register": __emval_register, "__emval_take_value": __emval_take_value, "__isLeapYear": __isLeapYear, "_abort": _abort, "_embind_repr": _embind_repr, "_emscripten_get_heap_size": _emscripten_get_heap_size, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_emscripten_resize_heap": _emscripten_resize_heap, "_getenv": _getenv, "_llvm_stackrestore": _llvm_stackrestore, "_llvm_stacksave": _llvm_stacksave, "_pthread_cond_wait": _pthread_cond_wait, "_pthread_getspecific": _pthread_getspecific, "_pthread_key_create": _pthread_key_create, "_pthread_once": _pthread_once, "_pthread_setspecific": _pthread_setspecific, "_strftime": _strftime, "_strftime_l": _strftime_l, "abortOnCannotGrowMemory": abortOnCannotGrowMemory, "constNoSmartPtrRawPointerToWireType": constNoSmartPtrRawPointerToWireType, "count_emval_handles": count_emval_handles, "craftInvokerFunction": craftInvokerFunction, "createNamedFunction": createNamedFunction, "downcastPointer": downcastPointer, "embind__requireFunction": embind__requireFunction, "embind_init_charCodes": embind_init_charCodes, "ensureOverloadTable": ensureOverloadTable, "exposePublicSymbol": exposePublicSymbol, "extendError": extendError, "floatReadValueFromPointer": floatReadValueFromPointer, "flushPendingDeletes": flushPendingDeletes, "genericPointerToWireType": genericPointerToWireType, "getBasestPointer": getBasestPointer, "getInheritedInstance": getInheritedInstance, "getInheritedInstanceCount": getInheritedInstanceCount, "getLiveInheritedInstances": getLiveInheritedInstances, "getShiftFromSize": getShiftFromSize, "getTypeName": getTypeName, "get_first_emval": get_first_emval, "heap32VectorToArray": heap32VectorToArray, "init_ClassHandle": init_ClassHandle, "init_RegisteredPointer": init_RegisteredPointer, "init_embind": init_embind, "init_emval": init_emval, "integerReadValueFromPointer": integerReadValueFromPointer, "makeClassHandle": makeClassHandle, "makeLegalFunctionName": makeLegalFunctionName, "new_": new_, "nonConstNoSmartPtrRawPointerToWireType": nonConstNoSmartPtrRawPointerToWireType, "readLatin1String": readLatin1String, "registerType": registerType, "replacePublicSymbol": replacePublicSymbol, "requireHandle": requireHandle, "requireRegisteredType": requireRegisteredType, "runDestructor": runDestructor, "runDestructors": runDestructors, "setDelayFunction": setDelayFunction, "shallowCopyInternalPointer": shallowCopyInternalPointer, "simpleReadValueFromPointer": simpleReadValueFromPointer, "throwBindingError": throwBindingError, "throwInstanceAlreadyDeleted": throwInstanceAlreadyDeleted, "throwInternalError": throwInternalError, "throwUnboundTypeError": throwUnboundTypeError, "upcastPointer": upcastPointer, "validateThis": validateThis, "whenDependentTypesAreResolved": whenDependentTypesAreResolved, "tempDoublePtr": tempDoublePtr, "DYNAMICTOP_PTR": DYNAMICTOP_PTR }
// EMSCRIPTEN_START_ASM
var asm = (/** @suppress {uselessCode} */ function(global, env, buffer) {
'use asm';

  var HEAP8 = new global.Int8Array(buffer),
  HEAP16 = new global.Int16Array(buffer),
  HEAP32 = new global.Int32Array(buffer),
  HEAPU8 = new global.Uint8Array(buffer),
  HEAPU16 = new global.Uint16Array(buffer),
  HEAPF32 = new global.Float32Array(buffer),
  HEAPF64 = new global.Float64Array(buffer),
  tempDoublePtr=env.tempDoublePtr|0,
  DYNAMICTOP_PTR=env.DYNAMICTOP_PTR|0,
  __THREW__ = 0,
  threwValue = 0,
  setjmpId = 0,
  tempInt = 0,
  tempBigInt = 0,
  tempBigIntS = 0,
  tempValue = 0,
  tempDouble = 0.0,
  nan = global.NaN,
  inf = global.Infinity,
  Math_floor=global.Math.floor,
  Math_abs=global.Math.abs,
  Math_sqrt=global.Math.sqrt,
  Math_pow=global.Math.pow,
  Math_cos=global.Math.cos,
  Math_sin=global.Math.sin,
  Math_tan=global.Math.tan,
  Math_acos=global.Math.acos,
  Math_atan=global.Math.atan,
  Math_log=global.Math.log,
  Math_ceil=global.Math.ceil,
  Math_imul=global.Math.imul,
  Math_clz32=global.Math.clz32,
  abort=env.abort,
  setTempRet0=env.setTempRet0,
  getTempRet0=env.getTempRet0,
  abortStackOverflow=env.abortStackOverflow,
  nullFunc_dddd=env.nullFunc_dddd,
  nullFunc_dddddd=env.nullFunc_dddddd,
  nullFunc_di=env.nullFunc_di,
  nullFunc_did=env.nullFunc_did,
  nullFunc_didd=env.nullFunc_didd,
  nullFunc_diddd=env.nullFunc_diddd,
  nullFunc_diddddd=env.nullFunc_diddddd,
  nullFunc_didddddii=env.nullFunc_didddddii,
  nullFunc_didddii=env.nullFunc_didddii,
  nullFunc_diddidd=env.nullFunc_diddidd,
  nullFunc_didi=env.nullFunc_didi,
  nullFunc_didid=env.nullFunc_didid,
  nullFunc_dididdd=env.nullFunc_dididdd,
  nullFunc_dididi=env.nullFunc_dididi,
  nullFunc_dii=env.nullFunc_dii,
  nullFunc_diid=env.nullFunc_diid,
  nullFunc_diidd=env.nullFunc_diidd,
  nullFunc_diiddd=env.nullFunc_diiddd,
  nullFunc_diiddddd=env.nullFunc_diiddddd,
  nullFunc_diidddddii=env.nullFunc_diidddddii,
  nullFunc_diidddii=env.nullFunc_diidddii,
  nullFunc_diiddidd=env.nullFunc_diiddidd,
  nullFunc_diidi=env.nullFunc_diidi,
  nullFunc_diidid=env.nullFunc_diidid,
  nullFunc_diididdd=env.nullFunc_diididdd,
  nullFunc_diididi=env.nullFunc_diididi,
  nullFunc_diii=env.nullFunc_diii,
  nullFunc_diiii=env.nullFunc_diiii,
  nullFunc_i=env.nullFunc_i,
  nullFunc_ii=env.nullFunc_ii,
  nullFunc_iid=env.nullFunc_iid,
  nullFunc_iii=env.nullFunc_iii,
  nullFunc_iiid=env.nullFunc_iiid,
  nullFunc_iiii=env.nullFunc_iiii,
  nullFunc_iiiid=env.nullFunc_iiiid,
  nullFunc_iiiii=env.nullFunc_iiiii,
  nullFunc_iiiiid=env.nullFunc_iiiiid,
  nullFunc_iiiiii=env.nullFunc_iiiiii,
  nullFunc_iiiiiid=env.nullFunc_iiiiiid,
  nullFunc_iiiiiii=env.nullFunc_iiiiiii,
  nullFunc_iiiiiiii=env.nullFunc_iiiiiiii,
  nullFunc_iiiiiiiii=env.nullFunc_iiiiiiiii,
  nullFunc_iiiiiiiiiii=env.nullFunc_iiiiiiiiiii,
  nullFunc_iiiiiiiiiiii=env.nullFunc_iiiiiiiiiiii,
  nullFunc_iiiiiiiiiiiii=env.nullFunc_iiiiiiiiiiiii,
  nullFunc_v=env.nullFunc_v,
  nullFunc_vi=env.nullFunc_vi,
  nullFunc_vid=env.nullFunc_vid,
  nullFunc_vidd=env.nullFunc_vidd,
  nullFunc_viddii=env.nullFunc_viddii,
  nullFunc_vidid=env.nullFunc_vidid,
  nullFunc_vididd=env.nullFunc_vididd,
  nullFunc_vididdd=env.nullFunc_vididdd,
  nullFunc_vii=env.nullFunc_vii,
  nullFunc_viid=env.nullFunc_viid,
  nullFunc_viidd=env.nullFunc_viidd,
  nullFunc_viiddii=env.nullFunc_viiddii,
  nullFunc_viidid=env.nullFunc_viidid,
  nullFunc_viididd=env.nullFunc_viididd,
  nullFunc_viididdd=env.nullFunc_viididdd,
  nullFunc_viii=env.nullFunc_viii,
  nullFunc_viiid=env.nullFunc_viiid,
  nullFunc_viiii=env.nullFunc_viiii,
  nullFunc_viiiii=env.nullFunc_viiiii,
  nullFunc_viiiiii=env.nullFunc_viiiiii,
  nullFunc_viiiiiii=env.nullFunc_viiiiiii,
  nullFunc_viiiiiiiiii=env.nullFunc_viiiiiiiiii,
  nullFunc_viiiiiiiiiiiiiii=env.nullFunc_viiiiiiiiiiiiiii,
  invoke_diii=env.invoke_diii,
  invoke_i=env.invoke_i,
  invoke_ii=env.invoke_ii,
  invoke_iii=env.invoke_iii,
  invoke_iiii=env.invoke_iiii,
  invoke_iiiii=env.invoke_iiiii,
  invoke_iiiiii=env.invoke_iiiiii,
  invoke_iiiiiii=env.invoke_iiiiiii,
  invoke_iiiiiiii=env.invoke_iiiiiiii,
  invoke_iiiiiiiii=env.invoke_iiiiiiiii,
  invoke_iiiiiiiiiii=env.invoke_iiiiiiiiiii,
  invoke_iiiiiiiiiiii=env.invoke_iiiiiiiiiiii,
  invoke_iiiiiiiiiiiii=env.invoke_iiiiiiiiiiiii,
  invoke_v=env.invoke_v,
  invoke_vi=env.invoke_vi,
  invoke_vii=env.invoke_vii,
  invoke_viii=env.invoke_viii,
  invoke_viiii=env.invoke_viiii,
  invoke_viiiiii=env.invoke_viiiiii,
  invoke_viiiiiii=env.invoke_viiiiiii,
  invoke_viiiiiiiiii=env.invoke_viiiiiiiiii,
  invoke_viiiiiiiiiiiiiii=env.invoke_viiiiiiiiiiiiiii,
  ClassHandle=env.ClassHandle,
  ClassHandle_clone=env.ClassHandle_clone,
  ClassHandle_delete=env.ClassHandle_delete,
  ClassHandle_deleteLater=env.ClassHandle_deleteLater,
  ClassHandle_isAliasOf=env.ClassHandle_isAliasOf,
  ClassHandle_isDeleted=env.ClassHandle_isDeleted,
  RegisteredClass=env.RegisteredClass,
  RegisteredPointer=env.RegisteredPointer,
  RegisteredPointer_deleteObject=env.RegisteredPointer_deleteObject,
  RegisteredPointer_destructor=env.RegisteredPointer_destructor,
  RegisteredPointer_fromWireType=env.RegisteredPointer_fromWireType,
  RegisteredPointer_getPointee=env.RegisteredPointer_getPointee,
  ___cxa_allocate_exception=env.___cxa_allocate_exception,
  ___cxa_begin_catch=env.___cxa_begin_catch,
  ___cxa_end_catch=env.___cxa_end_catch,
  ___cxa_find_matching_catch=env.___cxa_find_matching_catch,
  ___cxa_find_matching_catch_2=env.___cxa_find_matching_catch_2,
  ___cxa_find_matching_catch_3=env.___cxa_find_matching_catch_3,
  ___cxa_free_exception=env.___cxa_free_exception,
  ___cxa_rethrow=env.___cxa_rethrow,
  ___cxa_throw=env.___cxa_throw,
  ___cxa_uncaught_exception=env.___cxa_uncaught_exception,
  ___gxx_personality_v0=env.___gxx_personality_v0,
  ___lock=env.___lock,
  ___map_file=env.___map_file,
  ___resumeException=env.___resumeException,
  ___setErrNo=env.___setErrNo,
  ___syscall140=env.___syscall140,
  ___syscall145=env.___syscall145,
  ___syscall146=env.___syscall146,
  ___syscall221=env.___syscall221,
  ___syscall5=env.___syscall5,
  ___syscall54=env.___syscall54,
  ___syscall6=env.___syscall6,
  ___syscall91=env.___syscall91,
  ___unlock=env.___unlock,
  __addDays=env.__addDays,
  __arraySum=env.__arraySum,
  __embind_register_bool=env.__embind_register_bool,
  __embind_register_class=env.__embind_register_class,
  __embind_register_class_class_function=env.__embind_register_class_class_function,
  __embind_register_class_constructor=env.__embind_register_class_constructor,
  __embind_register_class_function=env.__embind_register_class_function,
  __embind_register_class_property=env.__embind_register_class_property,
  __embind_register_emval=env.__embind_register_emval,
  __embind_register_float=env.__embind_register_float,
  __embind_register_integer=env.__embind_register_integer,
  __embind_register_memory_view=env.__embind_register_memory_view,
  __embind_register_smart_ptr=env.__embind_register_smart_ptr,
  __embind_register_std_string=env.__embind_register_std_string,
  __embind_register_std_wstring=env.__embind_register_std_wstring,
  __embind_register_void=env.__embind_register_void,
  __emval_call=env.__emval_call,
  __emval_decref=env.__emval_decref,
  __emval_incref=env.__emval_incref,
  __emval_lookupTypes=env.__emval_lookupTypes,
  __emval_register=env.__emval_register,
  __emval_take_value=env.__emval_take_value,
  __isLeapYear=env.__isLeapYear,
  _abort=env._abort,
  _embind_repr=env._embind_repr,
  _emscripten_get_heap_size=env._emscripten_get_heap_size,
  _emscripten_memcpy_big=env._emscripten_memcpy_big,
  _emscripten_resize_heap=env._emscripten_resize_heap,
  _getenv=env._getenv,
  _llvm_stackrestore=env._llvm_stackrestore,
  _llvm_stacksave=env._llvm_stacksave,
  _pthread_cond_wait=env._pthread_cond_wait,
  _pthread_getspecific=env._pthread_getspecific,
  _pthread_key_create=env._pthread_key_create,
  _pthread_once=env._pthread_once,
  _pthread_setspecific=env._pthread_setspecific,
  _strftime=env._strftime,
  _strftime_l=env._strftime_l,
  abortOnCannotGrowMemory=env.abortOnCannotGrowMemory,
  constNoSmartPtrRawPointerToWireType=env.constNoSmartPtrRawPointerToWireType,
  count_emval_handles=env.count_emval_handles,
  craftInvokerFunction=env.craftInvokerFunction,
  createNamedFunction=env.createNamedFunction,
  downcastPointer=env.downcastPointer,
  embind__requireFunction=env.embind__requireFunction,
  embind_init_charCodes=env.embind_init_charCodes,
  ensureOverloadTable=env.ensureOverloadTable,
  exposePublicSymbol=env.exposePublicSymbol,
  extendError=env.extendError,
  floatReadValueFromPointer=env.floatReadValueFromPointer,
  flushPendingDeletes=env.flushPendingDeletes,
  genericPointerToWireType=env.genericPointerToWireType,
  getBasestPointer=env.getBasestPointer,
  getInheritedInstance=env.getInheritedInstance,
  getInheritedInstanceCount=env.getInheritedInstanceCount,
  getLiveInheritedInstances=env.getLiveInheritedInstances,
  getShiftFromSize=env.getShiftFromSize,
  getTypeName=env.getTypeName,
  get_first_emval=env.get_first_emval,
  heap32VectorToArray=env.heap32VectorToArray,
  init_ClassHandle=env.init_ClassHandle,
  init_RegisteredPointer=env.init_RegisteredPointer,
  init_embind=env.init_embind,
  init_emval=env.init_emval,
  integerReadValueFromPointer=env.integerReadValueFromPointer,
  makeClassHandle=env.makeClassHandle,
  makeLegalFunctionName=env.makeLegalFunctionName,
  new_=env.new_,
  nonConstNoSmartPtrRawPointerToWireType=env.nonConstNoSmartPtrRawPointerToWireType,
  readLatin1String=env.readLatin1String,
  registerType=env.registerType,
  replacePublicSymbol=env.replacePublicSymbol,
  requireHandle=env.requireHandle,
  requireRegisteredType=env.requireRegisteredType,
  runDestructor=env.runDestructor,
  runDestructors=env.runDestructors,
  setDelayFunction=env.setDelayFunction,
  shallowCopyInternalPointer=env.shallowCopyInternalPointer,
  simpleReadValueFromPointer=env.simpleReadValueFromPointer,
  throwBindingError=env.throwBindingError,
  throwInstanceAlreadyDeleted=env.throwInstanceAlreadyDeleted,
  throwInternalError=env.throwInternalError,
  throwUnboundTypeError=env.throwUnboundTypeError,
  upcastPointer=env.upcastPointer,
  validateThis=env.validateThis,
  whenDependentTypesAreResolved=env.whenDependentTypesAreResolved,
  STACKTOP = 51472,
  STACK_MAX = 5294352,
  tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS
  function globalCtors() {
    __GLOBAL__I_000101();
    __GLOBAL__sub_I_maximilian_embind_cpp();
    __GLOBAL__sub_I_bind_cpp();
    __GLOBAL__sub_I_iostream_cpp();
  }
function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;
    if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(size|0);

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function establishStackSpace(stackBase, stackMax) {
  stackBase = stackBase|0;
  stackMax = stackMax|0;
  STACKTOP = stackBase;
  STACK_MAX = stackMax;
}

function __ZN7maxiOscC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 HEAPF64[$1>>3] = 0.0;
 return;
}
function __ZN7maxiOsc5noiseEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_rand()|0);
 $2 = (+($1|0));
 $3 = $2 * 4.6566128730773926E-10;
 $4 = $3 * 2.0;
 $5 = $4 + -1.0;
 $6 = $5;
 $7 = ((($0)) + 32|0);
 HEAPF64[$7>>3] = $6;
 return (+$6);
}
function __ZN7maxiOsc10phaseResetEd($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 HEAPF64[$2>>3] = $1;
 return;
}
function __ZN7maxiOsc8sinewaveEd($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $3 = +HEAPF64[$2>>3];
 $4 = $3 * 6.2831853071795862;
 $5 = (+Math_sin((+$4)));
 $6 = ((($0)) + 32|0);
 HEAPF64[$6>>3] = $5;
 $7 = !($3 >= 1.0);
 if (!($7)) {
  $8 = $3 + -1.0;
  HEAPF64[$2>>3] = $8;
 }
 $9 = HEAP32[6238]|0;
 $10 = (+($9|0));
 $11 = $10 / $1;
 $12 = 1.0 / $11;
 $13 = +HEAPF64[$2>>3];
 $14 = $13 + $12;
 HEAPF64[$2>>3] = $14;
 return (+$5);
}
function __ZN7maxiOsc8sinebuf4Ed($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $$0 = 0.0, $$0$in = 0, $$034 = 0.0, $$034$in = 0, $$035 = 0.0, $$035$in = 0, $$036 = 0.0, $$036$in = 0, $$pn = 0, $$pn37 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0;
 var $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0, $4 = 0.0;
 var $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0, $storemerge = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[6238]|0;
 $3 = (+($2|0));
 $4 = $3 / $1;
 $5 = 512.0 / $4;
 $6 = ((($0)) + 8|0);
 $7 = +HEAPF64[$6>>3];
 $8 = $7 + $5;
 $9 = !($8 >= 511.0);
 $10 = $8 + -512.0;
 $storemerge = $9 ? $8 : $10;
 HEAPF64[$6>>3] = $storemerge;
 $11 = (+Math_floor((+$storemerge)));
 $12 = $storemerge - $11;
 $13 = $storemerge == 0.0;
 $14 = (~~(($storemerge)));
 $15 = (($14) + -1)|0;
 $16 = (16 + ($15<<3)|0);
 $$0$in = $13 ? (4112) : $16;
 $$pn37 = (($14) + 1)|0;
 $$pn = (($14) + 2)|0;
 $$034$in = (16 + ($14<<3)|0);
 $$035$in = (16 + ($$pn37<<3)|0);
 $$036$in = (16 + ($$pn<<3)|0);
 $$0 = +HEAPF64[$$0$in>>3];
 $$034 = +HEAPF64[$$034$in>>3];
 $$035 = +HEAPF64[$$035$in>>3];
 $$036 = +HEAPF64[$$036$in>>3];
 $17 = $$035 - $$0;
 $18 = $17 * 0.5;
 $19 = $$034 * 2.5;
 $20 = $$0 - $19;
 $21 = $$035 * 2.0;
 $22 = $20 + $21;
 $23 = $$036 * 0.5;
 $24 = $22 - $23;
 $25 = $$036 - $$0;
 $26 = $25 * 0.5;
 $27 = $$034 - $$035;
 $28 = $27 * 1.5;
 $29 = $28 + $26;
 $30 = $12 * $29;
 $31 = $24 + $30;
 $32 = $12 * $31;
 $33 = $18 + $32;
 $34 = $12 * $33;
 $35 = $$034 + $34;
 $36 = ((($0)) + 32|0);
 HEAPF64[$36>>3] = $35;
 return (+$35);
}
function __ZN7maxiOsc7sinebufEd($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0, $3 = 0.0, $4 = 0.0;
 var $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0.0, $storemerge = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[6238]|0;
 $3 = (+($2|0));
 $4 = 1.0;
 $5 = $4 * $1;
 $6 = $3 / $5;
 $7 = 512.0 / $6;
 $8 = ((($0)) + 8|0);
 $9 = +HEAPF64[$8>>3];
 $10 = $9 + $7;
 $11 = !($10 >= 511.0);
 $12 = $10 + -512.0;
 $storemerge = $11 ? $10 : $12;
 HEAPF64[$8>>3] = $storemerge;
 $13 = (+Math_floor((+$storemerge)));
 $14 = $storemerge - $13;
 $15 = 1.0 - $14;
 $16 = (~~(($storemerge)));
 $17 = (($16) + 1)|0;
 $18 = (16 + ($17<<3)|0);
 $19 = +HEAPF64[$18>>3];
 $20 = $19 * $15;
 $21 = (($16) + 2)|0;
 $22 = (16 + ($21<<3)|0);
 $23 = +HEAPF64[$22>>3];
 $24 = $23 * $14;
 $25 = $24 + $20;
 $26 = ((($0)) + 32|0);
 HEAPF64[$26>>3] = $25;
 return (+$25);
}
function __ZN7maxiOsc7coswaveEd($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $3 = +HEAPF64[$2>>3];
 $4 = $3 * 6.2831853071795862;
 $5 = (+Math_cos((+$4)));
 $6 = ((($0)) + 32|0);
 HEAPF64[$6>>3] = $5;
 $7 = !($3 >= 1.0);
 if (!($7)) {
  $8 = $3 + -1.0;
  HEAPF64[$2>>3] = $8;
 }
 $9 = HEAP32[6238]|0;
 $10 = (+($9|0));
 $11 = $10 / $1;
 $12 = 1.0 / $11;
 $13 = +HEAPF64[$2>>3];
 $14 = $13 + $12;
 HEAPF64[$2>>3] = $14;
 return (+$5);
}
function __ZN7maxiOsc6phasorEd($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $3 = +HEAPF64[$2>>3];
 $4 = ((($0)) + 32|0);
 HEAPF64[$4>>3] = $3;
 $5 = !($3 >= 1.0);
 if (!($5)) {
  $6 = $3 + -1.0;
  HEAPF64[$2>>3] = $6;
 }
 $7 = HEAP32[6238]|0;
 $8 = (+($7|0));
 $9 = $8 / $1;
 $10 = 1.0 / $9;
 $11 = +HEAPF64[$2>>3];
 $12 = $11 + $10;
 HEAPF64[$2>>3] = $12;
 return (+$3);
}
function __ZN7maxiOsc6squareEd($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $3 = +HEAPF64[$2>>3];
 $4 = $3 < 0.5;
 if ($4) {
  $5 = ((($0)) + 32|0);
  HEAPF64[$5>>3] = -1.0;
 }
 $6 = $3 > 0.5;
 if ($6) {
  $7 = ((($0)) + 32|0);
  HEAPF64[$7>>3] = 1.0;
 }
 $8 = !($3 >= 1.0);
 if (!($8)) {
  $9 = $3 + -1.0;
  HEAPF64[$2>>3] = $9;
 }
 $10 = HEAP32[6238]|0;
 $11 = (+($10|0));
 $12 = $11 / $1;
 $13 = 1.0 / $12;
 $14 = +HEAPF64[$2>>3];
 $15 = $14 + $13;
 HEAPF64[$2>>3] = $15;
 $16 = ((($0)) + 32|0);
 $17 = +HEAPF64[$16>>3];
 return (+$17);
}
function __ZN7maxiOsc5pulseEdd($0,$1,$2) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 var $$0 = 0.0, $$1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $2 < 0.0;
 $$0 = $3 ? 0.0 : $2;
 $4 = $$0 > 1.0;
 $$1 = $4 ? 1.0 : $$0;
 $5 = ((($0)) + 8|0);
 $6 = +HEAPF64[$5>>3];
 $7 = !($6 >= 1.0);
 if (!($7)) {
  $8 = $6 + -1.0;
  HEAPF64[$5>>3] = $8;
 }
 $9 = HEAP32[6238]|0;
 $10 = (+($9|0));
 $11 = $10 / $1;
 $12 = 1.0 / $11;
 $13 = +HEAPF64[$5>>3];
 $14 = $13 + $12;
 HEAPF64[$5>>3] = $14;
 $15 = $14 < $$1;
 if ($15) {
  $16 = ((($0)) + 32|0);
  HEAPF64[$16>>3] = -1.0;
 }
 $17 = $14 > $$1;
 if (!($17)) {
  $19 = ((($0)) + 32|0);
  $20 = +HEAPF64[$19>>3];
  return (+$20);
 }
 $18 = ((($0)) + 32|0);
 HEAPF64[$18>>3] = 1.0;
 $19 = ((($0)) + 32|0);
 $20 = +HEAPF64[$19>>3];
 return (+$20);
}
function __ZN7maxiOsc6phasorEddd($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 var $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 8|0);
 $5 = +HEAPF64[$4>>3];
 $6 = ((($0)) + 32|0);
 HEAPF64[$6>>3] = $5;
 $7 = $5 < $2;
 if ($7) {
  HEAPF64[$4>>3] = $2;
 }
 $8 = +HEAPF64[$4>>3];
 $9 = !($8 >= $3);
 if (!($9)) {
  HEAPF64[$4>>3] = $2;
 }
 $10 = $3 - $2;
 $11 = HEAP32[6238]|0;
 $12 = (+($11|0));
 $13 = $12 / $1;
 $14 = $10 / $13;
 $15 = +HEAPF64[$4>>3];
 $16 = $15 + $14;
 HEAPF64[$4>>3] = $16;
 return (+$5);
}
function __ZN7maxiOsc3sawEd($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $3 = +HEAPF64[$2>>3];
 $4 = ((($0)) + 32|0);
 HEAPF64[$4>>3] = $3;
 $5 = !($3 >= 1.0);
 if (!($5)) {
  $6 = $3 + -2.0;
  HEAPF64[$2>>3] = $6;
 }
 $7 = HEAP32[6238]|0;
 $8 = (+($7|0));
 $9 = $8 / $1;
 $10 = 1.0 / $9;
 $11 = +HEAPF64[$2>>3];
 $12 = $11 + $10;
 HEAPF64[$2>>3] = $12;
 return (+$3);
}
function __ZN7maxiOsc4sawnEd($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $$0 = 0.0, $$1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $3 = +HEAPF64[$2>>3];
 $4 = !($3 >= 0.5);
 if (!($4)) {
  $5 = $3 + -1.0;
  HEAPF64[$2>>3] = $5;
 }
 $6 = HEAP32[6238]|0;
 $7 = (+($6|0));
 $8 = $7 / $1;
 $9 = 1.0 / $8;
 $10 = +HEAPF64[$2>>3];
 $11 = $10 + $9;
 HEAPF64[$2>>3] = $11;
 $12 = 8820.2199999999993 / $1;
 $13 = $12 * $11;
 $14 = $13 < -0.5;
 $$0 = $14 ? -0.5 : $13;
 $15 = $$0 > 0.5;
 $$1 = $15 ? 0.5 : $$0;
 $16 = $$1 * 1000.0;
 $17 = $16 + 500.0;
 $18 = (+Math_floor((+$17)));
 $19 = $17 - $18;
 $20 = 1.0 - $19;
 $21 = (~~(($17)));
 $22 = (4128 + ($21<<3)|0);
 $23 = +HEAPF64[$22>>3];
 $24 = $23 * $20;
 $25 = (($21) + 1)|0;
 $26 = (4128 + ($25<<3)|0);
 $27 = +HEAPF64[$26>>3];
 $28 = $27 * $19;
 $29 = $28 + $24;
 $30 = $29 - $11;
 $31 = ((($0)) + 32|0);
 HEAPF64[$31>>3] = $30;
 return (+$30);
}
function __ZN7maxiOsc4rectEdd($0,$1,$2) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 var $3 = 0, $4 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 32|0);
 $4 = +HEAPF64[$3>>3];
 return (+$4);
}
function __ZN7maxiOsc8triangleEd($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $$sink = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $3 = +HEAPF64[$2>>3];
 $4 = !($3 >= 1.0);
 if (!($4)) {
  $5 = $3 + -1.0;
  HEAPF64[$2>>3] = $5;
 }
 $6 = HEAP32[6238]|0;
 $7 = (+($6|0));
 $8 = $7 / $1;
 $9 = 1.0 / $8;
 $10 = +HEAPF64[$2>>3];
 $11 = $10 + $9;
 HEAPF64[$2>>3] = $11;
 $12 = !($11 <= 0.5);
 $13 = 1.0 - $11;
 $$sink = $12 ? $13 : $11;
 $14 = $$sink + -0.25;
 $15 = $14 * 4.0;
 $16 = ((($0)) + 32|0);
 HEAPF64[$16>>3] = $15;
 return (+$15);
}
function __ZN12maxiEnvelope4lineEiRNSt3__26vectorIdNS0_9allocatorIdEEEE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sink = 0.0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0;
 var $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0.0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 40|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(1);
 if (!($5)) {
  $$sink = 0.0;
  $49 = ((($0)) + 8|0);
  HEAPF64[$49>>3] = $$sink;
  return (+$$sink);
 }
 $6 = ((($0)) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 1)|0;
 $9 = HEAP32[$2>>2]|0;
 $10 = (($9) + ($8<<3)|0);
 $11 = +HEAPF64[$10>>3];
 $12 = $11 * 0.0044000000000000003;
 $13 = 4.0 / $12;
 HEAPF64[$0>>3] = $13;
 $14 = (($7) + 2)|0;
 $15 = (($9) + ($14<<3)|0);
 $16 = +HEAPF64[$15>>3];
 $17 = ((($0)) + 32|0);
 HEAPF64[$17>>3] = $16;
 $18 = (($9) + ($7<<3)|0);
 $19 = +HEAPF64[$18>>3];
 $20 = ((($0)) + 24|0);
 HEAPF64[$20>>3] = $19;
 $21 = ((($0)) + 48|0);
 $22 = +HEAPF64[$21>>3];
 $23 = $19 - $22;
 $24 = $23 > 9.9999999999999995E-8;
 $25 = ($7|0)<($1|0);
 $or$cond = $25 & $24;
 do {
  if ($or$cond) {
   $26 = ((($0)) + 16|0);
   $27 = +HEAPF64[$26>>3];
   $28 = $19 - $27;
   $29 = HEAP32[6238]|0;
   $30 = (+($29|0));
   $31 = $30 / $13;
   $32 = $28 / $31;
   $33 = $22 + $32;
   HEAPF64[$21>>3] = $33;
  } else {
   $34 = $23 < -9.9999999999999995E-8;
   $35 = ($7|0)<($1|0);
   $or$cond7 = $35 & $34;
   if ($or$cond7) {
    $36 = ((($0)) + 16|0);
    $37 = +HEAPF64[$36>>3];
    $38 = $19 - $37;
    $39 = - $38;
    $40 = HEAP32[6238]|0;
    $41 = (+($40|0));
    $42 = $41 / $13;
    $43 = $39 / $42;
    $44 = $22 - $43;
    HEAPF64[$21>>3] = $44;
    break;
   }
   $45 = ($7|0)<($1|0);
   if ($45) {
    HEAP32[$6>>2] = $14;
    $47 = ((($0)) + 16|0);
    HEAPF64[$47>>3] = $19;
    break;
   } else {
    $46 = (($1) + -2)|0;
    HEAP32[$6>>2] = $46;
    break;
   }
  }
 } while(0);
 $48 = +HEAPF64[$21>>3];
 $$sink = $48;
 $49 = ((($0)) + 8|0);
 HEAPF64[$49>>3] = $$sink;
 return (+$$sink);
}
function __ZN12maxiEnvelope7triggerEid($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 40|0);
 HEAP32[$3>>2] = 1;
 $4 = ((($0)) + 44|0);
 HEAP32[$4>>2] = $1;
 $5 = ((($0)) + 48|0);
 HEAPF64[$5>>3] = $2;
 return;
}
function __ZN13maxiDelaylineC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 40|0);
 _memset(($1|0),0,705600)|0;
 return;
}
function __ZN13maxiDelayline2dlEdid($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = +$1;
 $2 = $2|0;
 $3 = +$3;
 var $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)<($2|0);
 if (!($6)) {
  HEAP32[$4>>2] = 0;
 }
 $7 = HEAP32[$4>>2]|0;
 $8 = (((($0)) + 40|0) + ($7<<3)|0);
 $9 = +HEAPF64[$8>>3];
 $10 = ((($0)) + 32|0);
 HEAPF64[$10>>3] = $9;
 $11 = +HEAPF64[$8>>3];
 $12 = $11 * $3;
 $13 = $1 * $3;
 $14 = $13 * 0.5;
 $15 = $14 + $12;
 HEAPF64[$8>>3] = $15;
 $16 = (($7) + 1)|0;
 HEAP32[$4>>2] = $16;
 $17 = +HEAPF64[$10>>3];
 return (+$17);
}
function __ZN13maxiDelayline2dlEdidi($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = +$1;
 $2 = $2|0;
 $3 = +$3;
 $4 = $4|0;
 var $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0, $21 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($0)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)<($2|0);
 if (!($7)) {
  HEAP32[$5>>2] = 0;
 }
 $8 = ($4|0)<($2|0);
 $spec$select = $8 ? $4 : 0;
 $9 = (((($0)) + 40|0) + ($spec$select<<3)|0);
 $10 = +HEAPF64[$9>>3];
 $11 = ((($0)) + 32|0);
 HEAPF64[$11>>3] = $10;
 $12 = HEAP32[$5>>2]|0;
 $13 = (((($0)) + 40|0) + ($12<<3)|0);
 $14 = +HEAPF64[$13>>3];
 $15 = $14 * $3;
 $16 = $1 * $3;
 $17 = 1.0;
 $18 = $16 * $17;
 $19 = $15 + $18;
 HEAPF64[$13>>3] = $19;
 $20 = (($12) + 1)|0;
 HEAP32[$5>>2] = $20;
 $21 = +HEAPF64[$11>>3];
 return (+$21);
}
function __ZN10maxiFilter6lopassEdd($0,$1,$2) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 var $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 104|0);
 $4 = +HEAPF64[$3>>3];
 $5 = $1 - $4;
 $6 = $5 * $2;
 $7 = $4 + $6;
 $8 = ((($0)) + 16|0);
 HEAPF64[$8>>3] = $7;
 HEAPF64[$3>>3] = $7;
 return (+$7);
}
function __ZN10maxiFilter6hipassEdd($0,$1,$2) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 var $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 104|0);
 $4 = +HEAPF64[$3>>3];
 $5 = $1 - $4;
 $6 = $5 * $2;
 $7 = $4 + $6;
 $8 = $1 - $7;
 $9 = ((($0)) + 16|0);
 HEAPF64[$9>>3] = $8;
 HEAPF64[$3>>3] = $8;
 return (+$8);
}
function __ZN10maxiFilter5loresEddd($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 var $$0 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0.0, $28 = 0;
 var $29 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, $storemerge = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 224|0);
 $5 = $2 < 10.0;
 $storemerge = $5 ? 10.0 : $2;
 HEAPF64[$4>>3] = $storemerge;
 $6 = HEAP32[6238]|0;
 $7 = (+($6|0));
 $8 = $storemerge > $7;
 if ($8) {
  HEAPF64[$4>>3] = $7;
 }
 $9 = $3 < 1.0;
 $$0 = $9 ? 1.0 : $3;
 $10 = +HEAPF64[$4>>3];
 $11 = $10 * 6.2831853071795862;
 $12 = $11 / $7;
 $13 = (+Math_cos((+$12)));
 $14 = ((($0)) + 208|0);
 HEAPF64[$14>>3] = $13;
 $15 = $13 * 2.0;
 $16 = 2.0 - $15;
 $17 = ((($0)) + 216|0);
 HEAPF64[$17>>3] = $16;
 $18 = $13 + -1.0;
 $19 = (+Math_pow((+$18),3.0));
 $20 = - $19;
 $21 = (+Math_sqrt((+$20)));
 $22 = $21 * 1.4142135623730951;
 $23 = $$0 * $18;
 $24 = $23 + $22;
 $25 = $24 / $23;
 $26 = ((($0)) + 192|0);
 $27 = +HEAPF64[$26>>3];
 $28 = ((($0)) + 200|0);
 $29 = +HEAPF64[$28>>3];
 $30 = $1 - $29;
 $31 = $30 * $16;
 $32 = $27 + $31;
 $33 = $29 + $32;
 HEAPF64[$28>>3] = $33;
 $34 = $32 * $25;
 HEAPF64[$26>>3] = $34;
 $35 = ((($0)) + 16|0);
 HEAPF64[$35>>3] = $33;
 return (+$33);
}
function __ZN10maxiFilter5hiresEddd($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 var $$0 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0.0, $28 = 0;
 var $29 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, $storemerge = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 224|0);
 $5 = $2 < 10.0;
 $storemerge = $5 ? 10.0 : $2;
 HEAPF64[$4>>3] = $storemerge;
 $6 = HEAP32[6238]|0;
 $7 = (+($6|0));
 $8 = $storemerge > $7;
 if ($8) {
  HEAPF64[$4>>3] = $7;
 }
 $9 = $3 < 1.0;
 $$0 = $9 ? 1.0 : $3;
 $10 = +HEAPF64[$4>>3];
 $11 = $10 * 6.2831853071795862;
 $12 = $11 / $7;
 $13 = (+Math_cos((+$12)));
 $14 = ((($0)) + 208|0);
 HEAPF64[$14>>3] = $13;
 $15 = $13 * 2.0;
 $16 = 2.0 - $15;
 $17 = ((($0)) + 216|0);
 HEAPF64[$17>>3] = $16;
 $18 = $13 + -1.0;
 $19 = (+Math_pow((+$18),3.0));
 $20 = - $19;
 $21 = (+Math_sqrt((+$20)));
 $22 = $21 * 1.4142135623730951;
 $23 = $$0 * $18;
 $24 = $23 + $22;
 $25 = $24 / $23;
 $26 = ((($0)) + 192|0);
 $27 = +HEAPF64[$26>>3];
 $28 = ((($0)) + 200|0);
 $29 = +HEAPF64[$28>>3];
 $30 = $1 - $29;
 $31 = $30 * $16;
 $32 = $27 + $31;
 $33 = $29 + $32;
 HEAPF64[$28>>3] = $33;
 $34 = $32 * $25;
 HEAPF64[$26>>3] = $34;
 $35 = $1 - $33;
 $36 = ((($0)) + 16|0);
 HEAPF64[$36>>3] = $35;
 return (+$35);
}
function __ZN10maxiFilter8bandpassEddd($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 var $$0 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0.0;
 var $29 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $pow2 = 0.0, $pow29 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 224|0);
 HEAPF64[$4>>3] = $2;
 $5 = HEAP32[6238]|0;
 $6 = (+($5|0));
 $7 = $6 * 0.5;
 $8 = $7 < $2;
 if ($8) {
  HEAPF64[$4>>3] = $7;
 }
 $9 = !($3 >= 1.0);
 $$0 = $9 ? $3 : 0.99999899999999997;
 $10 = +HEAPF64[$4>>3];
 $11 = $10 * 6.2831853071795862;
 $12 = $11 / $6;
 $13 = (+Math_cos((+$12)));
 $14 = ((($0)) + 208|0);
 HEAPF64[$14>>3] = $13;
 $15 = 1.0 - $$0;
 $pow2 = $13 * $13;
 $16 = $pow2 * 4.0;
 $17 = $$0 - $16;
 $18 = $17 + 2.0;
 $19 = $$0 * $18;
 $20 = $19 + 1.0;
 $21 = (+Math_sqrt((+$20)));
 $22 = $15 * $21;
 $23 = ((($0)) + 24|0);
 HEAPF64[$23>>3] = $22;
 $24 = $13 * 2.0;
 $25 = $$0 * $24;
 $26 = ((($0)) + 32|0);
 HEAPF64[$26>>3] = $25;
 $pow29 = $$0 * $$0;
 $27 = ((($0)) + 40|0);
 HEAPF64[$27>>3] = $pow29;
 $28 = $22 * $1;
 $29 = ((($0)) + 112|0);
 $30 = +HEAPF64[$29>>3];
 $31 = $25 * $30;
 $32 = $31 + $28;
 $33 = ((($0)) + 120|0);
 $34 = +HEAPF64[$33>>3];
 $35 = $pow29 * $34;
 $36 = $35 + $32;
 $37 = ((($0)) + 16|0);
 HEAPF64[$37>>3] = $36;
 HEAPF64[$33>>3] = $30;
 HEAPF64[$29>>3] = $36;
 return (+$36);
}
function __ZN7maxiMix6stereoEdRNSt3__26vectorIdNS0_9allocatorIdEEEEd($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = +$1;
 $2 = $2|0;
 $3 = +$3;
 var $$0 = 0.0, $$1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = $3 > 1.0;
 $$0 = $4 ? 1.0 : $3;
 $5 = $$0 < 0.0;
 $$1 = $5 ? 0.0 : $$0;
 $6 = 1.0 - $$1;
 $7 = (+Math_sqrt((+$6)));
 $8 = $7 * $1;
 $9 = HEAP32[$2>>2]|0;
 HEAPF64[$9>>3] = $8;
 $10 = (+Math_sqrt((+$$1)));
 $11 = $10 * $1;
 $12 = ((($9)) + 8|0);
 HEAPF64[$12>>3] = $11;
 return;
}
function __ZN7maxiMix4quadEdRNSt3__26vectorIdNS0_9allocatorIdEEEEdd($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = +$1;
 $2 = $2|0;
 $3 = +$3;
 $4 = +$4;
 var $$0 = 0.0, $$021 = 0.0, $$1 = 0.0, $$122 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0;
 var $26 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = $3 > 1.0;
 $$021 = $5 ? 1.0 : $3;
 $6 = $$021 < 0.0;
 $$122 = $6 ? 0.0 : $$021;
 $7 = $4 > 1.0;
 $$0 = $7 ? 1.0 : $4;
 $8 = $$0 < 0.0;
 $$1 = $8 ? 0.0 : $$0;
 $9 = 1.0 - $$122;
 $10 = $9 * $$1;
 $11 = (+Math_sqrt((+$10)));
 $12 = $11 * $1;
 $13 = HEAP32[$2>>2]|0;
 HEAPF64[$13>>3] = $12;
 $14 = 1.0 - $$1;
 $15 = $9 * $14;
 $16 = (+Math_sqrt((+$15)));
 $17 = $16 * $1;
 $18 = ((($13)) + 8|0);
 HEAPF64[$18>>3] = $17;
 $19 = $$122 * $$1;
 $20 = (+Math_sqrt((+$19)));
 $21 = $20 * $1;
 $22 = ((($13)) + 16|0);
 HEAPF64[$22>>3] = $21;
 $23 = $$122 * $14;
 $24 = (+Math_sqrt((+$23)));
 $25 = $24 * $1;
 $26 = ((($13)) + 24|0);
 HEAPF64[$26>>3] = $25;
 return;
}
function __ZN7maxiMix9ambisonicEdRNSt3__26vectorIdNS0_9allocatorIdEEEEddd($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = +$1;
 $2 = $2|0;
 $3 = +$3;
 $4 = +$4;
 $5 = +$5;
 var $$0 = 0.0, $$047 = 0.0, $$1 = 0.0, $$148 = 0.0, $$2 = 0.0, $$3 = 0.0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0;
 var $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0;
 var $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = $3 > 1.0;
 $$0 = $6 ? 1.0 : $3;
 $7 = $$0 < 0.0;
 $$1 = $7 ? 0.0 : $$0;
 $8 = $4 > 1.0;
 $$047 = $8 ? 1.0 : $4;
 $9 = $$047 < 0.0;
 $$148 = $9 ? 0.0 : $$047;
 $10 = $5 > 1.0;
 $$2 = $10 ? 1.0 : $$148;
 $11 = $5 < 0.0;
 $$3 = $11 ? 0.0 : $$2;
 $12 = 1.0 - $$1;
 $13 = $12 * $$3;
 $14 = (+Math_sqrt((+$13)));
 $15 = $14 - $5;
 $16 = $15 * $1;
 $17 = HEAP32[$2>>2]|0;
 HEAPF64[$17>>3] = $16;
 $18 = 1.0 - $$3;
 $19 = $12 * $18;
 $20 = (+Math_sqrt((+$19)));
 $21 = $20 - $5;
 $22 = $21 * $1;
 $23 = ((($17)) + 8|0);
 HEAPF64[$23>>3] = $22;
 $24 = $$1 * $$3;
 $25 = (+Math_sqrt((+$24)));
 $26 = $25 - $5;
 $27 = $26 * $1;
 $28 = ((($17)) + 16|0);
 HEAPF64[$28>>3] = $27;
 $29 = $$1 * $18;
 $30 = (+Math_sqrt((+$29)));
 $31 = $30 - $5;
 $32 = $31 * $1;
 $33 = ((($17)) + 24|0);
 HEAPF64[$33>>3] = $32;
 $34 = $14 * $5;
 $35 = $34 * $1;
 $36 = ((($17)) + 32|0);
 HEAPF64[$36>>3] = $35;
 $37 = $20 * $5;
 $38 = $37 * $1;
 $39 = ((($17)) + 40|0);
 HEAPF64[$39>>3] = $38;
 $40 = $24 * $5;
 $41 = (+Math_sqrt((+$40)));
 $42 = $41 * $1;
 $43 = ((($17)) + 48|0);
 HEAPF64[$43>>3] = $42;
 $44 = $29 * $5;
 $45 = (+Math_sqrt((+$44)));
 $46 = $45 * $1;
 $47 = ((($17)) + 56|0);
 HEAPF64[$47>>3] = $46;
 return;
}
function __ZN10maxiSample4loadENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEi($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_($0,$1)|0);
 $3 = ((($0)) + 20|0);
 HEAP32[$3>>2] = $2;
 $4 = (__ZN10maxiSample4readEv($0)|0);
 return ($4|0);
}
function __ZN10maxiSample4readEv($0) {
 $0 = $0|0;
 var $$0$i = 0, $$03060 = 0, $$031 = 0, $$03259 = 0, $$033$lcssa = 0, $$03364 = 0, $$037 = 0, $$04$i = 0, $$058 = 0, $$1 = 0, $$134 = 0, $$138 = 0, $$3 = 0, $$340 = 0, $$cast = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0.0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0.0, $204 = 0.0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, $eh$lpad$body55$index7Z2D = 0, $eh$lpad$body55$indexZ2D = 0, $vararg_buffer = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $vararg_buffer = sp;
 $1 = sp + 208|0;
 $2 = sp + 20|0;
 $3 = sp + 16|0;
 $4 = sp + 212|0;
 $5 = sp + 4|0;
 $6 = ((($0)) + 11|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = ($7<<24>>24)<(0);
 if ($8) {
  $9 = HEAP32[$0>>2]|0;
  $19 = $9;
 } else {
  $19 = $0;
 }
 $10 = ((($2)) + 108|0);
 $11 = ((($2)) + 8|0);
 HEAP32[$2>>2] = ((21180));
 HEAP32[$10>>2] = ((21200));
 $12 = ((($2)) + 4|0);
 HEAP32[$12>>2] = 0;
 $13 = ((($2)) + 108|0);
 __ZNSt3__28ios_base4initEPv($13,$11);
 $14 = ((($2)) + 180|0);
 HEAP32[$14>>2] = 0;
 $15 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
 $16 = ((($2)) + 184|0);
 HEAP32[$16>>2] = $15;
 HEAP32[$2>>2] = (24976);
 HEAP32[$10>>2] = (24996);
 __THREW__ = 0;
 invoke_vi(236,($11|0));
 $17 = __THREW__; __THREW__ = 0;
 $18 = $17&1;
 if ($18) {
  $33 = ___cxa_find_matching_catch_2()|0;
  $34 = (getTempRet0() | 0);
  $$0$i = $34;$$04$i = $33;
  __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED2Ev($2,(25008));
  __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($10);
  ___resumeException($$04$i|0);
  // unreachable;
 }
 __THREW__ = 0;
 $20 = (invoke_iiii(31,($11|0),($19|0),12)|0);
 $21 = __THREW__; __THREW__ = 0;
 $22 = $21&1;
 do {
  if (!($22)) {
   $23 = ($20|0)==(0|0);
   if ($23) {
    $24 = HEAP32[$2>>2]|0;
    $25 = ((($24)) + -12|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = (($2) + ($26)|0);
    $28 = ((($27)) + 16|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = $29 | 4;
    __THREW__ = 0;
    invoke_vii(40,($27|0),($30|0));
    $31 = __THREW__; __THREW__ = 0;
    $32 = $31&1;
    if ($32) {
     break;
    }
   }
   __THREW__ = 0;
   $37 = (invoke_iii(35,(49868|0),(30928|0))|0);
   $38 = __THREW__; __THREW__ = 0;
   $39 = $38&1;
   do {
    if ($39) {
     label = 36;
    } else {
     __THREW__ = 0;
     $40 = (invoke_iii(36,($37|0),($0|0))|0);
     $41 = __THREW__; __THREW__ = 0;
     $42 = $41&1;
     if ($42) {
      label = 36;
     } else {
      $43 = HEAP32[$40>>2]|0;
      $44 = ((($43)) + -12|0);
      $45 = HEAP32[$44>>2]|0;
      $46 = (($40) + ($45)|0);
      __ZNKSt3__28ios_base6getlocEv($1,$46);
      __THREW__ = 0;
      $47 = (invoke_iii(37,($1|0),(50740|0))|0);
      $48 = __THREW__; __THREW__ = 0;
      $49 = $48&1;
      if (!($49)) {
       $50 = HEAP32[$47>>2]|0;
       $51 = ((($50)) + 28|0);
       $52 = HEAP32[$51>>2]|0;
       __THREW__ = 0;
       $53 = (invoke_iii($52|0,($47|0),10)|0);
       $54 = __THREW__; __THREW__ = 0;
       $55 = $54&1;
       if (!($55)) {
        __ZNSt3__26localeD2Ev($1);
        __THREW__ = 0;
        (invoke_iii(38,($40|0),($53|0))|0);
        $58 = __THREW__; __THREW__ = 0;
        $59 = $58&1;
        if ($59) {
         label = 36;
         break;
        }
        __THREW__ = 0;
        (invoke_ii(67,($40|0))|0);
        $60 = __THREW__; __THREW__ = 0;
        $61 = $60&1;
        if ($61) {
         label = 36;
         break;
        }
        $62 = ((($2)) + 72|0);
        $63 = HEAP32[$62>>2]|0;
        $64 = ($63|0)!=(0|0);
        if (!($64)) {
         (_printf(30956,$vararg_buffer)|0);
         __ZNSt3__214basic_ifstreamIcNS_11char_traitsIcEEED1Ev($2);
         STACKTOP = sp;return ($64|0);
        }
        __THREW__ = 0;
        (invoke_iiiii(6,($2|0),4,0,0)|0);
        $65 = __THREW__; __THREW__ = 0;
        $66 = $65&1;
        do {
         if ($66) {
          label = 38;
         } else {
          $67 = ((($0)) + 12|0);
          __THREW__ = 0;
          (invoke_iiii(32,($2|0),($67|0),4)|0);
          $68 = __THREW__; __THREW__ = 0;
          $69 = $68&1;
          if ($69) {
           label = 38;
          } else {
           __THREW__ = 0;
           (invoke_iiiii(6,($2|0),16,0,0)|0);
           $70 = __THREW__; __THREW__ = 0;
           $71 = $70&1;
           if ($71) {
            label = 38;
           } else {
            $72 = ((($0)) + 16|0);
            __THREW__ = 0;
            (invoke_iiii(32,($2|0),($72|0),4)|0);
            $73 = __THREW__; __THREW__ = 0;
            $74 = $73&1;
            if ($74) {
             label = 38;
            } else {
             $75 = ((($0)) + 24|0);
             __THREW__ = 0;
             (invoke_iiii(32,($2|0),($75|0),2)|0);
             $76 = __THREW__; __THREW__ = 0;
             $77 = $76&1;
             if ($77) {
              label = 38;
             } else {
              $78 = ((($0)) + 96|0);
              __THREW__ = 0;
              (invoke_iiii(32,($2|0),($78|0),2)|0);
              $79 = __THREW__; __THREW__ = 0;
              $80 = $79&1;
              if ($80) {
               label = 38;
               break;
              }
              $81 = ((($0)) + 100|0);
              __THREW__ = 0;
              (invoke_iiii(32,($2|0),($81|0),4)|0);
              $82 = __THREW__; __THREW__ = 0;
              $83 = $82&1;
              if ($83) {
               label = 38;
               break;
              }
              $84 = ((($0)) + 28|0);
              __THREW__ = 0;
              (invoke_iiii(32,($2|0),($84|0),4)|0);
              $85 = __THREW__; __THREW__ = 0;
              $86 = $85&1;
              if ($86) {
               label = 38;
               break;
              }
              $87 = ((($0)) + 32|0);
              __THREW__ = 0;
              (invoke_iiii(32,($2|0),($87|0),2)|0);
              $88 = __THREW__; __THREW__ = 0;
              $89 = $88&1;
              if ($89) {
               label = 38;
               break;
              }
              $90 = ((($0)) + 104|0);
              __THREW__ = 0;
              (invoke_iiii(32,($2|0),($90|0),2)|0);
              $91 = __THREW__; __THREW__ = 0;
              $92 = $91&1;
              if ($92) {
               label = 38;
               break;
              }
              ;HEAP8[$4>>0]=0|0;HEAP8[$4+1>>0]=0|0;HEAP8[$4+2>>0]=0|0;HEAP8[$4+3>>0]=0|0;HEAP8[$4+4>>0]=0|0;
              $93 = HEAP32[$72>>2]|0;
              $94 = (($93) + 20)|0;
              $$03364 = $94;
              while(1) {
               $95 = HEAP32[$2>>2]|0;
               $96 = ((($95)) + -12|0);
               $97 = HEAP32[$96>>2]|0;
               $98 = (($2) + ($97)|0);
               $99 = ((($98)) + 16|0);
               $100 = HEAP32[$99>>2]|0;
               $101 = $100 & 2;
               $102 = ($101|0)==(0);
               if (!($102)) {
                $$033$lcssa = $$03364;
                label = 40;
                break;
               }
               $103 = ($$03364|0)<(0);
               $104 = $103 << 31 >> 31;
               __THREW__ = 0;
               (invoke_iiiii(6,($2|0),($$03364|0),($104|0),0)|0);
               $105 = __THREW__; __THREW__ = 0;
               $106 = $105&1;
               if ($106) {
                label = 39;
                break;
               }
               __THREW__ = 0;
               (invoke_iiii(32,($2|0),($4|0),4)|0);
               $107 = __THREW__; __THREW__ = 0;
               $108 = $107&1;
               if ($108) {
                label = 39;
                break;
               }
               $109 = (($$03364) + 4)|0;
               $110 = ($109|0)<(0);
               $111 = $110 << 31 >> 31;
               __THREW__ = 0;
               (invoke_iiiii(6,($2|0),($109|0),($111|0),0)|0);
               $112 = __THREW__; __THREW__ = 0;
               $113 = $112&1;
               if ($113) {
                label = 39;
                break;
               }
               __THREW__ = 0;
               (invoke_iiii(32,($2|0),($3|0),4)|0);
               $114 = __THREW__; __THREW__ = 0;
               $115 = $114&1;
               if ($115) {
                label = 39;
                break;
               }
               $116 = (($$03364) + 8)|0;
               $117 = (_strcmp($4,30938)|0);
               $118 = ($117|0)==(0);
               $119 = HEAP32[$3>>2]|0;
               $120 = $118 ? 0 : $119;
               $$134 = (($116) + ($120))|0;
               if ($118) {
                $$033$lcssa = $$134;
                label = 40;
                break;
               } else {
                $$03364 = $$134;
               }
              }
              if ((label|0) == 39) {
               $125 = ___cxa_find_matching_catch_2()|0;
               $126 = (getTempRet0() | 0);
               $$031 = $125;$$037 = $126;
              }
              else if ((label|0) == 40) {
               HEAP32[$5>>2] = 0;
               $127 = ((($5)) + 4|0);
               HEAP32[$127>>2] = 0;
               $128 = ((($5)) + 8|0);
               HEAP32[$128>>2] = 0;
               $129 = HEAP32[$3>>2]|0;
               $130 = (($129|0) / 2)&-1;
               __THREW__ = 0;
               invoke_vii(41,($5|0),($130|0));
               $131 = __THREW__; __THREW__ = 0;
               $132 = $131&1;
               L46: do {
                if ($132) {
                 label = 49;
                } else {
                 $133 = ($$033$lcssa|0)<(0);
                 $134 = $133 << 31 >> 31;
                 __THREW__ = 0;
                 (invoke_iiiii(6,($2|0),($$033$lcssa|0),($134|0),0)|0);
                 $135 = __THREW__; __THREW__ = 0;
                 $136 = $135&1;
                 if ($136) {
                  label = 49;
                  break;
                 }
                 $137 = HEAP32[$5>>2]|0;
                 $138 = HEAP32[$3>>2]|0;
                 __THREW__ = 0;
                 (invoke_iiii(32,($2|0),($137|0),($138|0))|0);
                 $139 = __THREW__; __THREW__ = 0;
                 $140 = $139&1;
                 if ($140) {
                  label = 49;
                  break;
                 }
                 __THREW__ = 0;
                 $141 = (invoke_ii(68,($11|0))|0);
                 $142 = __THREW__; __THREW__ = 0;
                 $143 = $142&1;
                 if ($143) {
                  label = 49;
                  break;
                 }
                 $144 = ($141|0)==(0|0);
                 if ($144) {
                  $145 = HEAP32[$2>>2]|0;
                  $146 = ((($145)) + -12|0);
                  $147 = HEAP32[$146>>2]|0;
                  $148 = (($2) + ($147)|0);
                  $149 = ((($148)) + 16|0);
                  $150 = HEAP32[$149>>2]|0;
                  $151 = $150 | 4;
                  __THREW__ = 0;
                  invoke_vii(40,($148|0),($151|0));
                  $152 = __THREW__; __THREW__ = 0;
                  $153 = $152&1;
                  if ($153) {
                   label = 49;
                   break;
                  }
                 }
                 $154 = HEAP16[$78>>1]|0;
                 $155 = ($154<<16>>16)>(1);
                 do {
                  if ($155) {
                   $156 = ((($0)) + 20|0);
                   $157 = HEAP32[$156>>2]|0;
                   $158 = $157 << 1;
                   $159 = HEAP32[$3>>2]|0;
                   $160 = (($159) + 6)|0;
                   $161 = ($158|0)<($160|0);
                   if (!($161)) {
                    break;
                   }
                   $162 = HEAP32[$5>>2]|0;
                   $163 = HEAP32[$3>>2]|0;
                   $164 = (($163) + 6)|0;
                   $$03060 = $158;$$03259 = 0;
                   while(1) {
                    $167 = (($162) + ($$03060<<1)|0);
                    $168 = HEAP16[$167>>1]|0;
                    $169 = (($162) + ($$03259<<1)|0);
                    HEAP16[$169>>1] = $168;
                    $170 = (($$03259) + 1)|0;
                    $171 = HEAP16[$78>>1]|0;
                    $172 = $171 << 16 >> 16;
                    $173 = $172 << 1;
                    $174 = (($173) + ($$03060))|0;
                    $175 = ($174|0)<($164|0);
                    if ($175) {
                     $$03060 = $174;$$03259 = $170;
                    } else {
                     break;
                    }
                   }
                  }
                 } while(0);
                 $176 = ((($0)) + 108|0);
                 $177 = HEAP32[$127>>2]|0;
                 $178 = HEAP32[$5>>2]|0;
                 $179 = (($177) - ($178))|0;
                 $180 = $179 >> 1;
                 __THREW__ = 0;
                 invoke_vii(42,($176|0),($180|0));
                 $181 = __THREW__; __THREW__ = 0;
                 $182 = $181&1;
                 if ($182) {
                  label = 49;
                  break;
                 }
                 $183 = HEAP32[$127>>2]|0;
                 $184 = HEAP32[$5>>2]|0;
                 $185 = ($183|0)==($184|0);
                 if (!($185)) {
                  $186 = HEAP32[$5>>2]|0;
                  $187 = HEAP32[$176>>2]|0;
                  $188 = HEAP32[$127>>2]|0;
                  $$cast = $186;
                  $189 = (($188) - ($$cast))|0;
                  $190 = $189 >> 1;
                  $$058 = 0;
                  while(1) {
                   $201 = (($186) + ($$058<<1)|0);
                   $202 = HEAP16[$201>>1]|0;
                   $203 = (+($202<<16>>16));
                   $204 = $203 / 32767.0;
                   $205 = (($187) + ($$058<<3)|0);
                   HEAPF64[$205>>3] = $204;
                   $206 = (($$058) + 1)|0;
                   $207 = ($206>>>0)<($190>>>0);
                   if ($207) {
                    $$058 = $206;
                   } else {
                    break;
                   }
                  }
                 }
                 $191 = ((($0)) + 112|0);
                 $192 = HEAP32[$191>>2]|0;
                 $193 = HEAP32[$176>>2]|0;
                 $194 = (($192) - ($193))|0;
                 $195 = $194 >> 3;
                 $196 = (+($195>>>0));
                 $197 = ((($0)) + 40|0);
                 HEAPF64[$197>>3] = $196;
                 __THREW__ = 0;
                 $198 = (invoke_iii(35,(49868|0),(30943|0))|0);
                 $199 = __THREW__; __THREW__ = 0;
                 $200 = $199&1;
                 if ($200) {
                  label = 49;
                  break;
                 }
                 $208 = HEAP16[$78>>1]|0;
                 __THREW__ = 0;
                 $209 = (invoke_iii(39,($198|0),($208|0))|0);
                 $210 = __THREW__; __THREW__ = 0;
                 $211 = $210&1;
                 if ($211) {
                  label = 49;
                  break;
                 }
                 __THREW__ = 0;
                 $212 = (invoke_iii(35,($209|0),(30948|0))|0);
                 $213 = __THREW__; __THREW__ = 0;
                 $214 = $213&1;
                 if ($214) {
                  label = 49;
                  break;
                 }
                 $215 = HEAP32[$191>>2]|0;
                 $216 = HEAP32[$176>>2]|0;
                 $217 = (($215) - ($216))|0;
                 $218 = $217 >> 3;
                 __THREW__ = 0;
                 $219 = (invoke_iii(40,($212|0),($218|0))|0);
                 $220 = __THREW__; __THREW__ = 0;
                 $221 = $220&1;
                 if ($221) {
                  label = 49;
                  break;
                 }
                 $222 = HEAP32[$219>>2]|0;
                 $223 = ((($222)) + -12|0);
                 $224 = HEAP32[$223>>2]|0;
                 $225 = (($219) + ($224)|0);
                 __ZNKSt3__28ios_base6getlocEv($1,$225);
                 __THREW__ = 0;
                 $226 = (invoke_iii(37,($1|0),(50740|0))|0);
                 $227 = __THREW__; __THREW__ = 0;
                 $228 = $227&1;
                 do {
                  if (!($228)) {
                   $229 = HEAP32[$226>>2]|0;
                   $230 = ((($229)) + 28|0);
                   $231 = HEAP32[$230>>2]|0;
                   __THREW__ = 0;
                   $232 = (invoke_iii($231|0,($226|0),10)|0);
                   $233 = __THREW__; __THREW__ = 0;
                   $234 = $233&1;
                   if ($234) {
                    break;
                   }
                   __ZNSt3__26localeD2Ev($1);
                   __THREW__ = 0;
                   (invoke_iii(38,($219|0),($232|0))|0);
                   $237 = __THREW__; __THREW__ = 0;
                   $238 = $237&1;
                   if ($238) {
                    label = 49;
                    break L46;
                   }
                   __THREW__ = 0;
                   (invoke_ii(67,($219|0))|0);
                   $239 = __THREW__; __THREW__ = 0;
                   $240 = $239&1;
                   if ($240) {
                    label = 49;
                    break L46;
                   }
                   __ZNSt3__213__vector_baseIsNS_9allocatorIsEEED2Ev($5);
                   __ZNSt3__214basic_ifstreamIcNS_11char_traitsIcEEED1Ev($2);
                   STACKTOP = sp;return ($64|0);
                  }
                 } while(0);
                 $235 = ___cxa_find_matching_catch_2()|0;
                 $236 = (getTempRet0() | 0);
                 __ZNSt3__26localeD2Ev($1);
                 $eh$lpad$body55$index7Z2D = $236;$eh$lpad$body55$indexZ2D = $235;
                }
               } while(0);
               if ((label|0) == 49) {
                $165 = ___cxa_find_matching_catch_2()|0;
                $166 = (getTempRet0() | 0);
                $eh$lpad$body55$index7Z2D = $166;$eh$lpad$body55$indexZ2D = $165;
               }
               __ZNSt3__213__vector_baseIsNS_9allocatorIsEEED2Ev($5);
               $$031 = $eh$lpad$body55$indexZ2D;$$037 = $eh$lpad$body55$index7Z2D;
              }
              $$1 = $$031;$$138 = $$037;
             }
            }
           }
          }
         }
        } while(0);
        if ((label|0) == 38) {
         $123 = ___cxa_find_matching_catch_2()|0;
         $124 = (getTempRet0() | 0);
         $$1 = $123;$$138 = $124;
        }
        $$3 = $$1;$$340 = $$138;
        __ZNSt3__214basic_ifstreamIcNS_11char_traitsIcEEED1Ev($2);
        ___resumeException($$3|0);
        // unreachable;
       }
      }
      $56 = ___cxa_find_matching_catch_2()|0;
      $57 = (getTempRet0() | 0);
      __ZNSt3__26localeD2Ev($1);
      $eh$lpad$body$index2Z2D = $57;$eh$lpad$body$indexZ2D = $56;
     }
    }
   } while(0);
   if ((label|0) == 36) {
    $121 = ___cxa_find_matching_catch_2()|0;
    $122 = (getTempRet0() | 0);
    $eh$lpad$body$index2Z2D = $122;$eh$lpad$body$indexZ2D = $121;
   }
   $$3 = $eh$lpad$body$indexZ2D;$$340 = $eh$lpad$body$index2Z2D;
   __ZNSt3__214basic_ifstreamIcNS_11char_traitsIcEEED1Ev($2);
   ___resumeException($$3|0);
   // unreachable;
  }
 } while(0);
 $35 = ___cxa_find_matching_catch_2()|0;
 $36 = (getTempRet0() | 0);
 __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEED2Ev($11);
 $$0$i = $36;$$04$i = $35;
 __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED2Ev($2,(25008));
 __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($10);
 ___resumeException($$04$i|0);
 // unreachable;
 return (0)|0;
}
function __ZN10maxiSample7isReadyEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 108|0);
 $2 = ((($0)) + 112|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$1>>2]|0;
 $5 = ($3|0)!=($4|0);
 return ($5|0);
}
function __ZN10maxiSample9setSampleERNSt3__26vectorIdNS0_9allocatorIdEEEE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 108|0);
 $3 = ($2|0)==($1|0);
 if ($3) {
  $7 = ((($0)) + 100|0);
  HEAP32[$7>>2] = 44100;
  return;
 }
 $4 = HEAP32[$1>>2]|0;
 $5 = ((($1)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 __ZNSt3__26vectorIdNS_9allocatorIdEEE6assignIPdEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIdNS_15iterator_traitsIS7_E9referenceEEE5valueEvE4typeES7_S7_($2,$4,$6);
 $7 = ((($0)) + 100|0);
 HEAP32[$7>>2] = 44100;
 return;
}
function __ZN10maxiSample9setSampleERNSt3__26vectorIdNS0_9allocatorIdEEEEi($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 108|0);
 $4 = ($3|0)==($1|0);
 if ($4) {
  $8 = ((($0)) + 100|0);
  HEAP32[$8>>2] = $2;
  return;
 }
 $5 = HEAP32[$1>>2]|0;
 $6 = ((($1)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 __ZNSt3__26vectorIdNS_9allocatorIdEEE6assignIPdEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIdNS_15iterator_traitsIS7_E9referenceEEE5valueEvE4typeES7_S7_($3,$5,$7);
 $8 = ((($0)) + 100|0);
 HEAP32[$8>>2] = $2;
 return;
}
function __ZN10maxiSample7triggerEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 40|0);
 ;HEAP32[$1>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;HEAP32[$1+12>>2]=0|0;
 return;
}
function __ZNSt3__2lsIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_13basic_ostreamIT_T0_EES9_RKNS_12basic_stringIS6_S7_T1_EE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 11|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)<(0);
 $5 = HEAP32[$1>>2]|0;
 $6 = ((($1)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $3&255;
 $9 = $4 ? $5 : $1;
 $10 = $4 ? $7 : $8;
 $11 = (__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m($0,$9,$10)|0);
 return ($11|0);
}
function __ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__211char_traitsIcE6lengthEPKc($1)|0);
 $3 = (__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m($0,$1,$2)|0);
 return ($3|0);
}
function __ZNSt3__26vectorIsNS_9allocatorIsEEE6resizeEm($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$0>>2]|0;
 $5 = (($3) - ($4))|0;
 $6 = $5 >> 1;
 $7 = ($6>>>0)<($1>>>0);
 if ($7) {
  $8 = (($1) - ($6))|0;
  __ZNSt3__26vectorIsNS_9allocatorIsEEE8__appendEm($0,$8);
  return;
 }
 $9 = ($6>>>0)>($1>>>0);
 if (!($9)) {
  return;
 }
 $10 = HEAP32[$0>>2]|0;
 $11 = (($10) + ($1<<1)|0);
 HEAP32[$2>>2] = $11;
 return;
}
function __ZNSt3__26vectorIdNS_9allocatorIdEEE6resizeEm($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$0>>2]|0;
 $5 = (($3) - ($4))|0;
 $6 = $5 >> 3;
 $7 = ($6>>>0)<($1>>>0);
 if ($7) {
  $8 = (($1) - ($6))|0;
  __ZNSt3__26vectorIdNS_9allocatorIdEEE8__appendEm($0,$8);
  return;
 }
 $9 = ($6>>>0)>($1>>>0);
 if (!($9)) {
  return;
 }
 $10 = HEAP32[$0>>2]|0;
 $11 = (($10) + ($1<<3)|0);
 HEAP32[$2>>2] = $11;
 return;
}
function __ZNSt3__213__vector_baseIsNS_9allocatorIsEEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 }
 $3 = HEAP32[$0>>2]|0;
 $4 = ((($0)) + 4|0);
 HEAP32[$4>>2] = $3;
 __ZdlPv($1);
 return;
}
function __ZNSt3__214basic_ifstreamIcNS_11char_traitsIcEEED1Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__214basic_ifstreamIcNS_11char_traitsIcEEED2Ev($0,25004);
 $1 = ((($0)) + 108|0);
 __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($1);
 return;
}
function __ZN10maxiSample4playEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 40|0);
 $2 = +HEAPF64[$1>>3];
 $3 = $2 + 1.0;
 HEAPF64[$1>>3] = $3;
 $4 = (~~(($3)));
 $5 = ((($0)) + 108|0);
 $6 = ((($0)) + 112|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = HEAP32[$5>>2]|0;
 $9 = (($7) - ($8))|0;
 $10 = $9 >> 3;
 $11 = ($10>>>0)>($4>>>0);
 if (!($11)) {
  HEAPF64[$1>>3] = 0.0;
 }
 $12 = +HEAPF64[$1>>3];
 $13 = (~~(($12)));
 $14 = HEAP32[$5>>2]|0;
 $15 = (($14) + ($13<<3)|0);
 $16 = +HEAPF64[$15>>3];
 $17 = ((($0)) + 64|0);
 HEAPF64[$17>>3] = $16;
 return (+$16);
}
function __ZN7maxiMap5clampIdEET_S1_S1_S1_($0,$1,$2) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 var $$0 = 0.0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $0 > $2;
 if ($3) {
  $$0 = $2;
 } else {
  $4 = $0 < $1;
  if ($4) {
   $$0 = $1;
  } else {
   $$0 = $0;
  }
 }
 return (+$$0);
}
function __ZN10maxiSample4playEddd($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 var $4 = 0, $5 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 40|0);
 $5 = (+__ZN10maxiSample4playEdddRd($0,$1,$2,$3,$4));
 return (+$5);
}
function __ZN10maxiSample4playEdddRd($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = $4|0;
 var $$0 = 0.0, $$055 = 0, $$1 = 0, $$156 = 0, $$sink59 = 0.0, $$sink60 = 0.0, $$sink61 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0, $20 = 0.0, $21 = 0, $22 = 0.0;
 var $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0, $40 = 0, $41 = 0.0, $42 = 0.0;
 var $43 = 0, $44 = 0, $45 = 0.0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0, $8 = 0, $9 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($0)) + 108|0);
 $6 = ((($0)) + 112|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = HEAP32[$5>>2]|0;
 $9 = (($7) - ($8))|0;
 $10 = $9 >> 3;
 $11 = (+($10>>>0));
 $12 = !($11 <= $3);
 $13 = (($10) + -1)|0;
 $14 = (+($13>>>0));
 $$0 = $12 ? $3 : $14;
 $15 = $1 > 0.0;
 $16 = +HEAPF64[$4>>3];
 if (!($15)) {
  $44 = !($16 <= $2);
  if (!($44)) {
   HEAPF64[$4>>3] = $$0;
  }
  $45 = $$0 - $2;
  $46 = HEAP32[6238]|0;
  $47 = (+($46|0));
  $48 = 1.0;
  $49 = $48 * $1;
  $50 = - $49;
  $51 = $47 / $50;
  $52 = $45 / $51;
  $53 = +HEAPF64[$4>>3];
  $54 = $53 - $52;
  HEAPF64[$4>>3] = $54;
  $55 = (+Math_floor((+$54)));
  $56 = $54 - $55;
  $57 = (~~(($55)));
  $58 = ($57|0)>(0);
  $59 = (($57) + -1)|0;
  $$156 = $58 ? $59 : 0;
  $60 = ($57|0)>(1);
  $61 = (($57) + -2)|0;
  $$1 = $60 ? $61 : 0;
  $62 = -1.0 - $56;
  $63 = HEAP32[$5>>2]|0;
  $64 = (($63) + ($$156<<3)|0);
  $65 = +HEAPF64[$64>>3];
  $66 = $65 * $62;
  $67 = (($63) + ($$1<<3)|0);
  $$sink59 = $66;$$sink60 = $56;$$sink61 = $67;
  $68 = +HEAPF64[$$sink61>>3];
  $69 = $68 * $$sink60;
  $70 = $69 + $$sink59;
  $71 = ((($0)) + 64|0);
  HEAPF64[$71>>3] = $70;
  return (+$70);
 }
 $17 = $16 < $2;
 if ($17) {
  HEAPF64[$4>>3] = $2;
 }
 $18 = +HEAPF64[$4>>3];
 $19 = !($18 >= $$0);
 if (!($19)) {
  HEAPF64[$4>>3] = $2;
 }
 $20 = $$0 - $2;
 $21 = HEAP32[6238]|0;
 $22 = (+($21|0));
 $23 = 1.0;
 $24 = $23 * $1;
 $25 = $22 / $24;
 $26 = $20 / $25;
 $27 = +HEAPF64[$4>>3];
 $28 = $27 + $26;
 HEAPF64[$4>>3] = $28;
 $29 = (+Math_floor((+$28)));
 $30 = $28 - $29;
 $31 = (~~(($29)));
 $32 = (($31) + 1)|0;
 $33 = ($32>>>0)<($10>>>0);
 $34 = (($31) + -1)|0;
 $$055 = $33 ? $32 : $34;
 $35 = (($31) + 2)|0;
 $36 = ($35>>>0)<($10>>>0);
 $37 = (($10) + -1)|0;
 $spec$select = $36 ? $35 : $37;
 $38 = 1.0 - $30;
 $39 = HEAP32[$5>>2]|0;
 $40 = (($39) + ($$055<<3)|0);
 $41 = +HEAPF64[$40>>3];
 $42 = $41 * $38;
 $43 = (($39) + ($spec$select<<3)|0);
 $$sink59 = $42;$$sink60 = $30;$$sink61 = $43;
 $68 = +HEAPF64[$$sink61>>3];
 $69 = $68 * $$sink60;
 $70 = $69 + $$sink59;
 $71 = ((($0)) + 64|0);
 HEAPF64[$71>>3] = $70;
 return (+$70);
}
function __ZN10maxiSample5play4Eddd($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 var $$0 = 0.0, $$0$in = 0, $$070 = 0.0, $$070$in = 0, $$072 = 0.0, $$072$in = 0, $$1 = 0.0, $$1$in = 0, $$171 = 0.0, $$171$in = 0, $$173 = 0.0, $$173$in = 0, $$sink = 0.0, $$sink76 = 0.0, $$sink78 = 0.0, $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0;
 var $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0;
 var $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0.0, $59 = 0, $6 = 0.0, $60 = 0.0, $61 = 0.0;
 var $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0.0;
 var $80 = 0, $81 = 0, $82 = 0.0, $83 = 0, $84 = 0, $85 = 0.0, $86 = 0, $87 = 0, $88 = 0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0;
 var $99 = 0.0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = $1 > 0.0;
 $5 = ((($0)) + 40|0);
 $6 = +HEAPF64[$5>>3];
 if (!($4)) {
  $57 = !($6 <= $2);
  if (!($57)) {
   HEAPF64[$5>>3] = $3;
  }
  $58 = $3 - $2;
  $59 = HEAP32[6238]|0;
  $60 = (+($59|0));
  $61 = 1.0;
  $62 = $61 * $1;
  $63 = - $62;
  $64 = $60 / $63;
  $65 = $58 / $64;
  $66 = +HEAPF64[$5>>3];
  $67 = $66 - $65;
  HEAPF64[$5>>3] = $67;
  $68 = (+Math_floor((+$67)));
  $69 = $67 - $68;
  $70 = $67 > $2;
  $71 = $3 + -1.0;
  $72 = $67 < $71;
  $or$cond = $70 & $72;
  $73 = ((($0)) + 108|0);
  if ($or$cond) {
   $74 = (~~(($67)));
   $75 = (($74) + 1)|0;
   $76 = HEAP32[$73>>2]|0;
   $77 = (($76) + ($75<<3)|0);
   $$173$in = $77;
  } else {
   $78 = HEAP32[$73>>2]|0;
   $$173$in = $78;
  }
  $$173 = +HEAPF64[$$173$in>>3];
  $79 = (~~(($67)));
  $80 = HEAP32[$73>>2]|0;
  $81 = (($80) + ($79<<3)|0);
  $82 = +HEAPF64[$81>>3];
  $83 = (($79) + -1)|0;
  $84 = (($80) + ($83<<3)|0);
  $$171$in = $70 ? $84 : $80;
  $$171 = +HEAPF64[$$171$in>>3];
  $85 = $2 + 1.0;
  $86 = $67 > $85;
  $87 = (($79) + -2)|0;
  $88 = (($80) + ($87<<3)|0);
  $$1$in = $86 ? $88 : $80;
  $$1 = +HEAPF64[$$1$in>>3];
  $89 = $$171 - $$173;
  $90 = $89 * 0.5;
  $91 = $82 * 2.5;
  $92 = $$173 - $91;
  $93 = $$171 * 2.0;
  $94 = $92 + $93;
  $95 = $$1 * 0.5;
  $96 = $94 - $95;
  $97 = $$1 - $$173;
  $98 = $97 * 0.5;
  $99 = $82 - $$171;
  $100 = $99 * 1.5;
  $101 = $100 + $98;
  $102 = $69 * $101;
  $103 = $96 + $102;
  $104 = - $69;
  $105 = $103 * $104;
  $106 = $90 + $105;
  $$sink = $106;$$sink76 = $82;$$sink78 = $104;
  $107 = $$sink * $$sink78;
  $108 = $$sink76 + $107;
  $109 = ((($0)) + 64|0);
  HEAPF64[$109>>3] = $108;
  return (+$108);
 }
 $7 = $6 < $2;
 if ($7) {
  HEAPF64[$5>>3] = $2;
 }
 $8 = +HEAPF64[$5>>3];
 $9 = !($8 >= $3);
 if (!($9)) {
  HEAPF64[$5>>3] = $2;
 }
 $10 = $3 - $2;
 $11 = HEAP32[6238]|0;
 $12 = (+($11|0));
 $13 = 1.0;
 $14 = $13 * $1;
 $15 = $12 / $14;
 $16 = $10 / $15;
 $17 = +HEAPF64[$5>>3];
 $18 = $17 + $16;
 HEAPF64[$5>>3] = $18;
 $19 = (+Math_floor((+$18)));
 $20 = $18 - $19;
 $21 = $18 > 0.0;
 $22 = ((($0)) + 108|0);
 if ($21) {
  $23 = (~~(($19)));
  $24 = (($23) + -1)|0;
  $25 = HEAP32[$22>>2]|0;
  $26 = (($25) + ($24<<3)|0);
  $$072$in = $26;
 } else {
  $27 = HEAP32[$22>>2]|0;
  $$072$in = $27;
 }
 $$072 = +HEAPF64[$$072$in>>3];
 $28 = (~~(($18)));
 $29 = HEAP32[$22>>2]|0;
 $30 = (($29) + ($28<<3)|0);
 $31 = +HEAPF64[$30>>3];
 $32 = $3 + -2.0;
 $33 = $18 < $32;
 $34 = (($28) + 1)|0;
 $35 = (($29) + ($34<<3)|0);
 $$070$in = $33 ? $35 : $29;
 $$070 = +HEAPF64[$$070$in>>3];
 $36 = $3 + -3.0;
 $37 = $18 < $36;
 $38 = (($28) + 2)|0;
 $39 = (($29) + ($38<<3)|0);
 $$0$in = $37 ? $39 : $29;
 $$0 = +HEAPF64[$$0$in>>3];
 $40 = $$070 - $$072;
 $41 = $40 * 0.5;
 $42 = $31 * 2.5;
 $43 = $$072 - $42;
 $44 = $$070 * 2.0;
 $45 = $43 + $44;
 $46 = $$0 * 0.5;
 $47 = $45 - $46;
 $48 = $$0 - $$072;
 $49 = $48 * 0.5;
 $50 = $31 - $$070;
 $51 = $50 * 1.5;
 $52 = $51 + $49;
 $53 = $20 * $52;
 $54 = $47 + $53;
 $55 = $20 * $54;
 $56 = $41 + $55;
 $$sink = $20;$$sink76 = $31;$$sink78 = $56;
 $107 = $$sink * $$sink78;
 $108 = $$sink76 + $107;
 $109 = ((($0)) + 64|0);
 HEAPF64[$109>>3] = $108;
 return (+$108);
}
function __ZN10maxiSample8playOnceEv($0) {
 $0 = $0|0;
 var $$sink = 0.0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 40|0);
 $2 = +HEAPF64[$1>>3];
 $3 = $2 + 1.0;
 HEAPF64[$1>>3] = $3;
 $4 = (~~(($3)));
 $5 = ((($0)) + 108|0);
 $6 = ((($0)) + 112|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = HEAP32[$5>>2]|0;
 $9 = (($7) - ($8))|0;
 $10 = $9 >> 3;
 $11 = ($10>>>0)>($4>>>0);
 if (!($11)) {
  $$sink = 0.0;
  $15 = ((($0)) + 64|0);
  HEAPF64[$15>>3] = $$sink;
  return (+$$sink);
 }
 $12 = HEAP32[$5>>2]|0;
 $13 = (($12) + ($4<<3)|0);
 $14 = +HEAPF64[$13>>3];
 $$sink = $14;
 $15 = ((($0)) + 64|0);
 HEAPF64[$15>>3] = $$sink;
 return (+$$sink);
}
function __ZN10maxiSample8playOnceEd($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $$sink = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0;
 var $28 = 0.0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 40|0);
 $3 = +HEAPF64[$2>>3];
 $4 = 1.0;
 $5 = $4 * $1;
 $6 = HEAP32[6238]|0;
 $7 = ((($0)) + 100|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($6|0) / ($8|0))&-1;
 $10 = (+($9|0));
 $11 = $5 / $10;
 $12 = $3 + $11;
 HEAPF64[$2>>3] = $12;
 $13 = (~~(($12)));
 $14 = (+($13|0));
 $15 = $12 - $14;
 $16 = ((($0)) + 108|0);
 $17 = ((($0)) + 112|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = HEAP32[$16>>2]|0;
 $20 = (($18) - ($19))|0;
 $21 = $20 >> 3;
 $22 = ($21>>>0)>($13>>>0);
 if (!($22)) {
  $$sink = 0.0;
  $34 = ((($0)) + 64|0);
  HEAPF64[$34>>3] = $$sink;
  return (+$$sink);
 }
 $23 = 1.0 - $15;
 $24 = (($13) + 1)|0;
 $25 = HEAP32[$16>>2]|0;
 $26 = (($25) + ($24<<3)|0);
 $27 = +HEAPF64[$26>>3];
 $28 = $23 * $27;
 $29 = (($13) + 2)|0;
 $30 = (($25) + ($29<<3)|0);
 $31 = +HEAPF64[$30>>3];
 $32 = $15 * $31;
 $33 = $28 + $32;
 $$sink = $33;
 $34 = ((($0)) + 64|0);
 HEAPF64[$34>>3] = $$sink;
 return (+$$sink);
}
function __ZN10maxiSample4playEd($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $$0 = 0, $$015 = 0, $$11617 = 0.0, $$118 = 0.0, $$sink = 0.0, $$sink20 = 0.0, $$sink23 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0.0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 40|0);
 $3 = +HEAPF64[$2>>3];
 $4 = 1.0;
 $5 = $4 * $1;
 $6 = HEAP32[6238]|0;
 $7 = ((($0)) + 100|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($6|0) / ($8|0))&-1;
 $10 = (+($9|0));
 $11 = $5 / $10;
 $12 = $3 + $11;
 HEAPF64[$2>>3] = $12;
 $13 = !($1 >= 0.0);
 $14 = (~~(($12)));
 if ($13) {
  $39 = ($14|0)<(0);
  if ($39) {
   $40 = ((($0)) + 108|0);
   $41 = ((($0)) + 112|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = HEAP32[$40>>2]|0;
   $44 = (($42) - ($43))|0;
   $45 = $44 >> 3;
   $46 = (+($45>>>0));
   HEAPF64[$2>>3] = $46;
  }
  $47 = +HEAPF64[$2>>3];
  $48 = (+Math_floor((+$47)));
  $49 = $47 - $48;
  $50 = $47 + -1.0;
  $51 = $50 > 0.0;
  $$11617 = $51 ? $50 : 0.0;
  $52 = (~~(($$11617)));
  $53 = $47 + -2.0;
  $54 = $53 > 0.0;
  $$118 = $54 ? $53 : 0.0;
  $55 = (~~(($$118)));
  $56 = -1.0 - $49;
  $57 = ((($0)) + 108|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = (($58) + ($52<<3)|0);
  $60 = +HEAPF64[$59>>3];
  $61 = $60 * $56;
  $62 = (($58) + ($55<<3)|0);
  $$sink = $49;$$sink20 = $61;$$sink23 = $62;
  $63 = +HEAPF64[$$sink23>>3];
  $64 = $$sink * $63;
  $65 = $$sink20 + $64;
  $66 = ((($0)) + 64|0);
  HEAPF64[$66>>3] = $65;
  return (+$65);
 } else {
  $15 = ((($0)) + 108|0);
  $16 = ((($0)) + 112|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = HEAP32[$15>>2]|0;
  $19 = (($17) - ($18))|0;
  $20 = $19 >> 3;
  $21 = (($20) + -1)|0;
  $22 = ($21>>>0)>($14>>>0);
  if (!($22)) {
   HEAPF64[$2>>3] = 1.0;
  }
  $23 = +HEAPF64[$2>>3];
  $24 = (+Math_floor((+$23)));
  $25 = $23 - $24;
  $26 = $23 + 1.0;
  $27 = (+($20>>>0));
  $28 = $26 < $27;
  $29 = (~~(($26)));
  $$015 = $28 ? $29 : $21;
  $30 = $23 + 2.0;
  $31 = $30 < $27;
  $32 = (~~(($30)));
  $$0 = $31 ? $32 : $21;
  $33 = 1.0 - $25;
  $34 = HEAP32[$15>>2]|0;
  $35 = (($34) + ($$015<<3)|0);
  $36 = +HEAPF64[$35>>3];
  $37 = $36 * $33;
  $38 = (($34) + ($$0<<3)|0);
  $$sink = $25;$$sink20 = $37;$$sink23 = $38;
  $63 = +HEAPF64[$$sink23>>3];
  $64 = $$sink * $63;
  $65 = $$sink20 + $64;
  $66 = ((($0)) + 64|0);
  HEAPF64[$66>>3] = $65;
  return (+$65);
 }
 return +(0.0);
}
function __ZN10maxiSample9normaliseEd($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $$01924 = 0.0, $$02023 = 0, $$022 = 0, $$1 = 0.0, $$cast = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0;
 var $24 = 0.0, $25 = 0.0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 108|0);
 $3 = ((($0)) + 112|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$2>>2]|0;
 $6 = ($4|0)==($5|0);
 if ($6) {
  return;
 }
 $7 = HEAP32[$2>>2]|0;
 $8 = HEAP32[$3>>2]|0;
 $$cast = $7;
 $9 = (($8) - ($$cast))|0;
 $10 = $9 >> 3;
 $$01924 = 0.0;$$02023 = 0;
 while(1) {
  $16 = (($7) + ($$02023<<3)|0);
  $17 = +HEAPF64[$16>>3];
  $18 = (+Math_abs((+$17)));
  $19 = $18 > $$01924;
  $$1 = $19 ? $18 : $$01924;
  $20 = (($$02023) + 1)|0;
  $21 = ($20>>>0)<($10>>>0);
  if ($21) {
   $$01924 = $$1;$$02023 = $20;
  } else {
   break;
  }
 }
 $11 = ($9|0)==(0);
 if ($11) {
  return;
 }
 $12 = $1 / $$1;
 $13 = $12;
 $14 = $13;
 $15 = HEAP32[$2>>2]|0;
 $$022 = 0;
 while(1) {
  $22 = (($15) + ($$022<<3)|0);
  $23 = +HEAPF64[$22>>3];
  $24 = $23 * $14;
  $25 = (+_llvm_round_f64((+$24)));
  HEAPF64[$22>>3] = $25;
  $26 = (($$022) + 1)|0;
  $exitcond = ($26|0)==($10|0);
  if ($exitcond) {
   break;
  } else {
   $$022 = $26;
  }
 }
 return;
}
function __ZN10maxiSample8autoTrimEffbb($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 $4 = $4|0;
 var $$0$lcssa = 0, $$05470 = 0, $$055$lcssa = 0, $$05575 = 0, $$05971 = 0, $$081 = 0, $$1 = 0, $$156 = 0, $$sroa$speculated = 0, $10 = 0, $100 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0.0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0.0, $87 = 0.0, $88 = 0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0, $93 = 0, $94 = 0.0;
 var $95 = 0.0, $96 = 0.0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = sp;
 if ($3) {
  $6 = $1;
  __ZN10maxiLagExpIdEC2Edd($5,$6,0.0);
  $7 = ((($0)) + 108|0);
  $8 = ((($0)) + 112|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = HEAP32[$7>>2]|0;
  $11 = ($9|0)==($10|0);
  L3: do {
   if ($11) {
    $$0$lcssa = 0;
   } else {
    $12 = $2;
    $$081 = 0;
    while(1) {
     $13 = HEAP32[$7>>2]|0;
     $14 = (($13) + ($$081<<3)|0);
     $15 = +HEAPF64[$14>>3];
     $16 = (+Math_abs((+$15)));
     __ZN10maxiLagExpIdE9addSampleEd($5,$16);
     $17 = (+__ZNK10maxiLagExpIdE5valueEv($5));
     $18 = $17 > $12;
     if ($18) {
      $$0$lcssa = $$081;
      break L3;
     }
     $19 = (($$081) + 1)|0;
     $20 = HEAP32[$8>>2]|0;
     $21 = HEAP32[$7>>2]|0;
     $22 = (($20) - ($21))|0;
     $23 = $22 >> 3;
     $24 = ($19>>>0)<($23>>>0);
     if ($24) {
      $$081 = $19;
     } else {
      $$0$lcssa = $19;
      break;
     }
    }
   }
  } while(0);
  $$1 = $$0$lcssa;
 } else {
  $$1 = 0;
 }
 $25 = ((($0)) + 108|0);
 $26 = ((($0)) + 112|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = HEAP32[$25>>2]|0;
 $29 = (($27) - ($28))|0;
 $30 = $29 >> 3;
 $31 = (($30) + -1)|0;
 if ($4) {
  __ZN10maxiLagExpIfEC2Eff($5,$1,0.0);
  $32 = ($29|0)>(8);
  L12: do {
   if ($32) {
    $$05575 = $31;
    while(1) {
     $33 = HEAP32[$25>>2]|0;
     $34 = (($33) + ($$05575<<3)|0);
     $35 = +HEAPF64[$34>>3];
     $36 = $35;
     $37 = (+Math_abs((+$36)));
     __ZN10maxiLagExpIfE9addSampleEf($5,$37);
     $38 = (+__ZNK10maxiLagExpIfE5valueEv($5));
     $39 = $38 > $2;
     if ($39) {
      $$055$lcssa = $$05575;
      break L12;
     }
     $40 = (($$05575) + -1)|0;
     $41 = ($$05575|0)>(1);
     if ($41) {
      $$05575 = $40;
     } else {
      $$055$lcssa = $40;
      break;
     }
    }
   } else {
    $$055$lcssa = $31;
   }
  } while(0);
  $$156 = $$055$lcssa;
 } else {
  $$156 = $31;
 }
 $42 = (__ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(49868,30986)|0);
 $43 = (__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEi($42,$$1)|0);
 $44 = (__ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($43,31004)|0);
 $45 = (__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEi($44,$$156)|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = ((($46)) + -12|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = (($45) + ($48)|0);
 __ZNKSt3__28ios_base6getlocEv($5,$49);
 __THREW__ = 0;
 $50 = (invoke_iii(37,($5|0),(50740|0))|0);
 $51 = __THREW__; __THREW__ = 0;
 $52 = $51&1;
 if ($52) {
  $59 = ___cxa_find_matching_catch_2()|0;
  $60 = (getTempRet0() | 0);
  __ZNSt3__26localeD2Ev($5);
  ___resumeException($59|0);
  // unreachable;
 }
 $53 = HEAP32[$50>>2]|0;
 $54 = ((($53)) + 28|0);
 $55 = HEAP32[$54>>2]|0;
 __THREW__ = 0;
 $56 = (invoke_iii($55|0,($50|0),10)|0);
 $57 = __THREW__; __THREW__ = 0;
 $58 = $57&1;
 if ($58) {
  $59 = ___cxa_find_matching_catch_2()|0;
  $60 = (getTempRet0() | 0);
  __ZNSt3__26localeD2Ev($5);
  ___resumeException($59|0);
  // unreachable;
 }
 __ZNSt3__26localeD2Ev($5);
 (__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE3putEc($45,$56)|0);
 (__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5flushEv($45)|0);
 $61 = (($$156) - ($$1))|0;
 $62 = ($61|0)>(0);
 if (!($62)) {
  STACKTOP = sp;return;
 }
 __ZNSt3__26vectorIdNS_9allocatorIdEEEC2Em($5,$61);
 $63 = HEAP32[$25>>2]|0;
 $64 = HEAP32[$5>>2]|0;
 $$05971 = 0;
 while(1) {
  $71 = (($$05971) + ($$1))|0;
  $72 = (($63) + ($71<<3)|0);
  $73 = +HEAPF64[$72>>3];
  $74 = (($64) + ($$05971<<3)|0);
  HEAPF64[$74>>3] = $73;
  $75 = (($$05971) + 1)|0;
  $exitcond = ($75|0)==($61|0);
  if ($exitcond) {
   break;
  } else {
   $$05971 = $75;
  }
 }
 $65 = ($25|0)==($5|0);
 if (!($65)) {
  $66 = HEAP32[$5>>2]|0;
  $67 = ((($5)) + 4|0);
  $68 = HEAP32[$67>>2]|0;
  __THREW__ = 0;
  invoke_viii(3,($25|0),($66|0),($68|0));
  $69 = __THREW__; __THREW__ = 0;
  $70 = $69&1;
  if ($70) {
   $99 = ___cxa_find_matching_catch_2()|0;
   $100 = (getTempRet0() | 0);
   __ZNSt3__213__vector_baseIdNS_9allocatorIdEEED2Ev($5);
   ___resumeException($99|0);
   // unreachable;
  }
 }
 $76 = ((($0)) + 40|0);
 ;HEAP32[$76>>2]=0|0;HEAP32[$76+4>>2]=0|0;HEAP32[$76+8>>2]=0|0;HEAP32[$76+12>>2]=0|0;
 $77 = HEAP32[$26>>2]|0;
 $78 = HEAP32[$25>>2]|0;
 $79 = (($77) - ($78))|0;
 $80 = $79 >> 3;
 $81 = ($80>>>0)<(100);
 $$sroa$speculated = $81 ? $80 : 100;
 $82 = ($$sroa$speculated|0)>(0);
 if ($82) {
  $83 = (+($$sroa$speculated|0));
  $84 = HEAP32[$25>>2]|0;
  $85 = (($80) + -1)|0;
  $$05470 = 0;
  while(1) {
   $86 = (+($$05470|0));
   $87 = $86 / $83;
   $88 = (($84) + ($$05470<<3)|0);
   $89 = +HEAPF64[$88>>3];
   $90 = $87 * $89;
   $91 = (+_llvm_round_f64((+$90)));
   HEAPF64[$88>>3] = $91;
   $92 = (($85) - ($$05470))|0;
   $93 = (($84) + ($92<<3)|0);
   $94 = +HEAPF64[$93>>3];
   $95 = $87 * $94;
   $96 = (+_llvm_round_f64((+$95)));
   HEAPF64[$93>>3] = $96;
   $97 = (($$05470) + 1)|0;
   $98 = ($97>>>0)<($$sroa$speculated>>>0);
   if ($98) {
    $$05470 = $97;
   } else {
    break;
   }
  }
 }
 __ZNSt3__213__vector_baseIdNS_9allocatorIdEEED2Ev($5);
 STACKTOP = sp;return;
}
function __ZN10maxiLagExpIdEC2Edd($0,$1,$2) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10maxiLagExpIdE4initEdd($0,$1,$2);
 return;
}
function __ZN10maxiLagExpIdE9addSampleEd($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = +HEAPF64[$0>>3];
 $3 = $2 * $1;
 $4 = ((($0)) + 8|0);
 $5 = +HEAPF64[$4>>3];
 $6 = ((($0)) + 16|0);
 $7 = +HEAPF64[$6>>3];
 $8 = $5 * $7;
 $9 = $3 + $8;
 HEAPF64[$6>>3] = $9;
 return;
}
function __ZNK10maxiLagExpIdE5valueEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 16|0);
 $2 = +HEAPF64[$1>>3];
 return (+$2);
}
function __ZN10maxiLagExpIfEC2Eff($0,$1,$2) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10maxiLagExpIfE4initEff($0,$1,$2);
 return;
}
function __ZN10maxiLagExpIfE9addSampleEf($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = +HEAPF32[$0>>2];
 $3 = $2 * $1;
 $4 = ((($0)) + 4|0);
 $5 = +HEAPF32[$4>>2];
 $6 = ((($0)) + 8|0);
 $7 = +HEAPF32[$6>>2];
 $8 = $5 * $7;
 $9 = $3 + $8;
 HEAPF32[$6>>2] = $9;
 return;
}
function __ZNK10maxiLagExpIfE5valueEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = +HEAPF32[$1>>2];
 return (+$2);
}
function __ZNSt3__26vectorIdNS_9allocatorIdEEEC2Em($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = 0;
 $2 = ((($0)) + 4|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($0)) + 8|0);
 HEAP32[$3>>2] = 0;
 $4 = ($1|0)==(0);
 if ($4) {
  return;
 }
 __THREW__ = 0;
 invoke_vii(43,($0|0),($1|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __THREW__ = 0;
  invoke_vii(44,($0|0),($1|0));
  $7 = __THREW__; __THREW__ = 0;
  $8 = $7&1;
  if (!($8)) {
   return;
  }
 }
 $9 = ___cxa_find_matching_catch_2()|0;
 $10 = (getTempRet0() | 0);
 __ZNSt3__213__vector_baseIdNS_9allocatorIdEEED2Ev($0);
 ___resumeException($9|0);
 // unreachable;
}
function __ZNSt3__213__vector_baseIdNS_9allocatorIdEEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 }
 $3 = HEAP32[$0>>2]|0;
 $4 = ((($0)) + 4|0);
 HEAP32[$4>>2] = $3;
 __ZdlPv($1);
 return;
}
function __ZN7maxiDyn4gateEddldd($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = $3|0;
 $4 = +$4;
 $5 = +$5;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0.0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0, $48 = 0.0, $49 = 0;
 var $50 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = (+Math_abs((+$1)));
 $7 = $6 > $2;
 if ($7) {
  $8 = ((($0)) + 72|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)==(1);
  if (!($10)) {
   $11 = ((($0)) + 68|0);
   HEAP32[$11>>2] = 0;
   $12 = ((($0)) + 80|0);
   HEAP32[$12>>2] = 0;
   HEAP32[$8>>2] = 1;
   $13 = ((($0)) + 56|0);
   $14 = +HEAPF64[$13>>3];
   $15 = $14 == 0.0;
   if ($15) {
    HEAPF64[$13>>3] = 0.01;
   }
  }
 }
 $16 = ((($0)) + 72|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==(1);
 if ($18) {
  $19 = ((($0)) + 56|0);
  $20 = +HEAPF64[$19>>3];
  $21 = $20 < 1.0;
  $22 = $4 + 1.0;
  $23 = $22 * $20;
  if ($21) {
   $24 = ((($0)) + 32|0);
   $25 = $23 * $1;
   HEAPF64[$19>>3] = $23;
   HEAPF64[$24>>3] = $25;
  }
 }
 $26 = ((($0)) + 56|0);
 $27 = +HEAPF64[$26>>3];
 $28 = !($27 >= 1.0);
 if (!($28)) {
  HEAP32[$16>>2] = 0;
  $29 = ((($0)) + 76|0);
  HEAP32[$29>>2] = 1;
 }
 $30 = ((($0)) + 68|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)<($3|0);
 if ($32) {
  $33 = ((($0)) + 76|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = ($34|0)==(1);
  if ($35) {
   $36 = (($31) + 1)|0;
   $37 = ((($0)) + 32|0);
   HEAPF64[$37>>3] = $1;
   HEAP32[$30>>2] = $36;
  }
 }
 $38 = HEAP32[$30>>2]|0;
 $39 = ($38|0)==($3|0);
 if ($39) {
  $40 = ((($0)) + 76|0);
  HEAP32[$40>>2] = 0;
  $41 = ((($0)) + 80|0);
  HEAP32[$41>>2] = 1;
 }
 $42 = ((($0)) + 80|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = ($43|0)==(1);
 if (!($44)) {
  $49 = ((($0)) + 32|0);
  $50 = +HEAPF64[$49>>3];
  return (+$50);
 }
 $45 = $27 > 0.0;
 $46 = $27 * $5;
 if (!($45)) {
  $49 = ((($0)) + 32|0);
  $50 = +HEAPF64[$49>>3];
  return (+$50);
 }
 $47 = ((($0)) + 32|0);
 $48 = $46 * $1;
 HEAPF64[$26>>3] = $46;
 HEAPF64[$47>>3] = $48;
 $49 = ((($0)) + 32|0);
 $50 = +HEAPF64[$49>>3];
 return (+$50);
}
function __ZN7maxiDyn10compressorEddddd($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 $5 = +$5;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0.0, $40 = 0.0, $41 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = (+Math_abs((+$1)));
 $7 = $6 > $3;
 if ($7) {
  $8 = ((($0)) + 72|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)==(1);
  if (!($10)) {
   $11 = ((($0)) + 68|0);
   HEAP32[$11>>2] = 0;
   $12 = ((($0)) + 80|0);
   HEAP32[$12>>2] = 0;
   HEAP32[$8>>2] = 1;
   $13 = ((($0)) + 16|0);
   $14 = +HEAPF64[$13>>3];
   $15 = $14 == 0.0;
   if ($15) {
    HEAPF64[$13>>3] = $2;
   }
  }
 }
 $16 = ((($0)) + 72|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==(1);
 if ($18) {
  $19 = ((($0)) + 16|0);
  $20 = +HEAPF64[$19>>3];
  $21 = $2 + -1.0;
  $22 = $20 < $21;
  if ($22) {
   $23 = $4 + 1.0;
   $24 = $23 * $20;
   HEAPF64[$19>>3] = $24;
  }
 }
 $25 = ((($0)) + 16|0);
 $26 = +HEAPF64[$25>>3];
 $27 = $2 + -1.0;
 $28 = !($26 >= $27);
 if (!($28)) {
  HEAP32[$16>>2] = 0;
  $29 = ((($0)) + 80|0);
  HEAP32[$29>>2] = 1;
 }
 $30 = ((($0)) + 80|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)==(1);
 $33 = $26 > 0.0;
 $or$cond = $33 & $32;
 if (!($or$cond)) {
  $35 = +HEAPF64[$25>>3];
  $36 = $35 + 1.0;
  $37 = $1 / $36;
  $38 = ((($0)) + 32|0);
  HEAPF64[$38>>3] = $37;
  $39 = (+Math_log((+$2)));
  $40 = $39 + 1.0;
  $41 = $40 * $37;
  return (+$41);
 }
 $34 = $26 * $5;
 HEAPF64[$25>>3] = $34;
 $35 = +HEAPF64[$25>>3];
 $36 = $35 + 1.0;
 $37 = $1 / $36;
 $38 = ((($0)) + 32|0);
 HEAPF64[$38>>3] = $37;
 $39 = (+Math_log((+$2)));
 $40 = $39 + 1.0;
 $41 = $40 * $37;
 return (+$41);
}
function __ZN7maxiDyn8compressEd($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0.0;
 var $29 = 0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0.0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0;
 var $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+Math_abs((+$1)));
 $3 = ((($0)) + 24|0);
 $4 = +HEAPF64[$3>>3];
 $5 = $2 > $4;
 if ($5) {
  $6 = ((($0)) + 72|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(1);
  if (!($8)) {
   $9 = ((($0)) + 68|0);
   HEAP32[$9>>2] = 0;
   $10 = ((($0)) + 80|0);
   HEAP32[$10>>2] = 0;
   HEAP32[$6>>2] = 1;
   $11 = ((($0)) + 16|0);
   $12 = +HEAPF64[$11>>3];
   $13 = $12 == 0.0;
   if ($13) {
    $14 = ((($0)) + 8|0);
    $15 = +HEAPF64[$14>>3];
    HEAPF64[$11>>3] = $15;
   }
  }
 }
 $16 = ((($0)) + 72|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==(1);
 if ($18) {
  $19 = ((($0)) + 16|0);
  $20 = +HEAPF64[$19>>3];
  $21 = ((($0)) + 8|0);
  $22 = +HEAPF64[$21>>3];
  $23 = $22 + -1.0;
  $24 = $20 < $23;
  if ($24) {
   $25 = ((($0)) + 40|0);
   $26 = +HEAPF64[$25>>3];
   $27 = $26 + 1.0;
   $28 = $20 * $27;
   HEAPF64[$19>>3] = $28;
  }
 }
 $29 = ((($0)) + 16|0);
 $30 = +HEAPF64[$29>>3];
 $31 = ((($0)) + 8|0);
 $32 = +HEAPF64[$31>>3];
 $33 = $32 + -1.0;
 $34 = !($30 >= $33);
 if (!($34)) {
  HEAP32[$16>>2] = 0;
  $35 = ((($0)) + 80|0);
  HEAP32[$35>>2] = 1;
 }
 $36 = ((($0)) + 80|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = ($37|0)==(1);
 $39 = $30 > 0.0;
 $or$cond = $39 & $38;
 if (!($or$cond)) {
  $43 = +HEAPF64[$29>>3];
  $44 = $43 + 1.0;
  $45 = $1 / $44;
  $46 = ((($0)) + 32|0);
  HEAPF64[$46>>3] = $45;
  $47 = (+Math_log((+$32)));
  $48 = $47 + 1.0;
  $49 = $48 * $45;
  return (+$49);
 }
 $40 = ((($0)) + 48|0);
 $41 = +HEAPF64[$40>>3];
 $42 = $30 * $41;
 HEAPF64[$29>>3] = $42;
 $43 = +HEAPF64[$29>>3];
 $44 = $43 + 1.0;
 $45 = $1 / $44;
 $46 = ((($0)) + 32|0);
 HEAPF64[$46>>3] = $45;
 $47 = (+Math_log((+$32)));
 $48 = $47 + 1.0;
 $49 = $48 * $45;
 return (+$49);
}
function __ZN7maxiDyn9setAttackEd($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[6238]|0;
 $3 = (+($2|0));
 $4 = $3 * $1;
 $5 = $4 * 0.001;
 $6 = 1.0 / $5;
 $7 = (+Math_pow(0.01,(+$6)));
 $8 = ((($0)) + 40|0);
 HEAPF64[$8>>3] = $7;
 return;
}
function __ZN7maxiDyn10setReleaseEd($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[6238]|0;
 $3 = (+($2|0));
 $4 = $3 * $1;
 $5 = $4 * 0.001;
 $6 = 1.0 / $5;
 $7 = (+Math_pow(0.01,(+$6)));
 $8 = ((($0)) + 48|0);
 HEAPF64[$8>>3] = $7;
 return;
}
function __ZN7maxiDyn12setThresholdEd($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 24|0);
 HEAPF64[$2>>3] = $1;
 return;
}
function __ZN7maxiDyn8setRatioEd($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 HEAPF64[$2>>3] = $1;
 return;
}
function __ZN7maxiEnv2arEdddli($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0, $46 = 0.0, $47 = 0, $48 = 0.0, $49 = 0;
 var $50 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ($5|0)==(1);
 if ($6) {
  $7 = ((($0)) + 68|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(1);
  if (!($9)) {
   $10 = ((($0)) + 80|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==(1);
   if (!($12)) {
    $13 = ((($0)) + 64|0);
    HEAP32[$13>>2] = 0;
    $14 = ((($0)) + 84|0);
    HEAP32[$14>>2] = 0;
    HEAP32[$7>>2] = 1;
   }
  }
 }
 $15 = ((($0)) + 68|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)==(1);
 if ($17) {
  $18 = ((($0)) + 48|0);
  $19 = +HEAPF64[$18>>3];
  $20 = $19 + $2;
  HEAPF64[$18>>3] = $20;
  $21 = $20 * $1;
  $22 = ((($0)) + 8|0);
  HEAPF64[$22>>3] = $21;
 }
 $23 = ((($0)) + 48|0);
 $24 = +HEAPF64[$23>>3];
 $25 = !($24 >= 1.0);
 if (!($25)) {
  HEAPF64[$23>>3] = 1.0;
  HEAP32[$15>>2] = 0;
  $26 = ((($0)) + 80|0);
  HEAP32[$26>>2] = 1;
 }
 $27 = ((($0)) + 64|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ($28|0)<($4|0);
 if ($29) {
  $30 = ((($0)) + 80|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ($31|0)==(1);
  if ($32) {
   $33 = (($28) + 1)|0;
   $34 = ((($0)) + 8|0);
   HEAPF64[$34>>3] = $1;
   HEAP32[$27>>2] = $33;
  }
 }
 $35 = HEAP32[$27>>2]|0;
 $36 = ($35|0)==($4|0);
 $or$cond = $6 & $36;
 if ($or$cond) {
  $37 = ((($0)) + 8|0);
  HEAPF64[$37>>3] = $1;
 } else {
  $38 = ($5|0)!=(1);
  $or$cond3 = $38 & $36;
  if ($or$cond3) {
   $39 = ((($0)) + 80|0);
   HEAP32[$39>>2] = 0;
   $40 = ((($0)) + 84|0);
   HEAP32[$40>>2] = 1;
  }
 }
 $41 = ((($0)) + 84|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = ($42|0)==(1);
 if (!($43)) {
  $49 = ((($0)) + 8|0);
  $50 = +HEAPF64[$49>>3];
  return (+$50);
 }
 $44 = +HEAPF64[$23>>3];
 $45 = $44 > 0.0;
 $46 = $44 * $3;
 if (!($45)) {
  $49 = ((($0)) + 8|0);
  $50 = +HEAPF64[$49>>3];
  return (+$50);
 }
 $47 = ((($0)) + 8|0);
 $48 = $46 * $1;
 HEAPF64[$23>>3] = $46;
 HEAPF64[$47>>3] = $48;
 $49 = ((($0)) + 8|0);
 $50 = +HEAPF64[$49>>3];
 return (+$50);
}
function __ZN7maxiEnv4adsrEdddddli($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 $5 = +$5;
 $6 = $6|0;
 $7 = $7|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0.0, $67 = 0, $68 = 0.0, $69 = 0;
 var $70 = 0.0, $71 = 0, $72 = 0.0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $8 = ($7|0)==(1);
 if ($8) {
  $9 = ((($0)) + 68|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(1);
  if (!($11)) {
   $12 = ((($0)) + 80|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = ($13|0)==(1);
   if (!($14)) {
    $15 = ((($0)) + 72|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ($16|0)==(1);
    if (!($17)) {
     $18 = ((($0)) + 64|0);
     HEAP32[$18>>2] = 0;
     HEAP32[$15>>2] = 0;
     $19 = ((($0)) + 76|0);
     HEAP32[$19>>2] = 0;
     $20 = ((($0)) + 84|0);
     HEAP32[$20>>2] = 0;
     HEAP32[$9>>2] = 1;
    }
   }
  }
 }
 $21 = ((($0)) + 68|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)==(1);
 if ($23) {
  $24 = ((($0)) + 84|0);
  HEAP32[$24>>2] = 0;
  $25 = ((($0)) + 48|0);
  $26 = +HEAPF64[$25>>3];
  $27 = $26 + $2;
  HEAPF64[$25>>3] = $27;
  $28 = $27 * $1;
  $29 = ((($0)) + 8|0);
  HEAPF64[$29>>3] = $28;
  $30 = !($27 >= 1.0);
  if (!($30)) {
   HEAPF64[$25>>3] = 1.0;
   HEAP32[$21>>2] = 0;
   $31 = ((($0)) + 72|0);
   HEAP32[$31>>2] = 1;
  }
 }
 $32 = ((($0)) + 72|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ($33|0)==(1);
 if ($34) {
  $35 = ((($0)) + 48|0);
  $36 = +HEAPF64[$35>>3];
  $37 = $36 * $3;
  HEAPF64[$35>>3] = $37;
  $38 = $37 * $1;
  $39 = ((($0)) + 8|0);
  HEAPF64[$39>>3] = $38;
  $40 = !($37 <= $4);
  if (!($40)) {
   HEAP32[$32>>2] = 0;
   $41 = ((($0)) + 80|0);
   HEAP32[$41>>2] = 1;
  }
 }
 $42 = ((($0)) + 64|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = ($43|0)<($6|0);
 if ($44) {
  $45 = ((($0)) + 80|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = ($46|0)==(1);
  if ($47) {
   $48 = (($43) + 1)|0;
   $49 = ((($0)) + 8|0);
   $50 = ((($0)) + 48|0);
   $51 = +HEAPF64[$50>>3];
   $52 = $51 * $1;
   HEAPF64[$49>>3] = $52;
   HEAP32[$42>>2] = $48;
  }
 }
 $53 = HEAP32[$42>>2]|0;
 $54 = ($53|0)>=($6|0);
 $or$cond = $8 & $54;
 if ($or$cond) {
  $55 = ((($0)) + 48|0);
  $56 = +HEAPF64[$55>>3];
  $57 = $56 * $1;
  $58 = ((($0)) + 8|0);
  HEAPF64[$58>>3] = $57;
 } else {
  $59 = ($7|0)!=(1);
  $or$cond3 = $59 & $54;
  if ($or$cond3) {
   $60 = ((($0)) + 80|0);
   HEAP32[$60>>2] = 0;
   $61 = ((($0)) + 84|0);
   HEAP32[$61>>2] = 1;
  }
 }
 $62 = ((($0)) + 84|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = ($63|0)==(1);
 if (!($64)) {
  $71 = ((($0)) + 8|0);
  $72 = +HEAPF64[$71>>3];
  return (+$72);
 }
 $65 = ((($0)) + 48|0);
 $66 = +HEAPF64[$65>>3];
 $67 = $66 > 0.0;
 $68 = $66 * $5;
 if (!($67)) {
  $71 = ((($0)) + 8|0);
  $72 = +HEAPF64[$71>>3];
  return (+$72);
 }
 $69 = ((($0)) + 8|0);
 $70 = $68 * $1;
 HEAPF64[$65>>3] = $68;
 HEAPF64[$69>>3] = $70;
 $71 = ((($0)) + 8|0);
 $72 = +HEAPF64[$71>>3];
 return (+$72);
}
function __ZN7maxiEnv4adsrEdi($0,$1,$2) {
 $0 = $0|0;
 $1 = +$1;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0.0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(1);
 if ($3) {
  $4 = ((($0)) + 68|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==(1);
  if (!($6)) {
   $7 = ((($0)) + 80|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ($8|0)==(1);
   if (!($9)) {
    $10 = ((($0)) + 72|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ($11|0)==(1);
    if (!($12)) {
     $13 = ((($0)) + 64|0);
     HEAP32[$13>>2] = 0;
     HEAP32[$10>>2] = 0;
     $14 = ((($0)) + 76|0);
     HEAP32[$14>>2] = 0;
     $15 = ((($0)) + 84|0);
     HEAP32[$15>>2] = 0;
     HEAP32[$4>>2] = 1;
    }
   }
  }
 }
 $16 = ((($0)) + 68|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==(1);
 if ($18) {
  $19 = ((($0)) + 84|0);
  HEAP32[$19>>2] = 0;
  $20 = ((($0)) + 16|0);
  $21 = +HEAPF64[$20>>3];
  $22 = ((($0)) + 48|0);
  $23 = +HEAPF64[$22>>3];
  $24 = $21 + $23;
  HEAPF64[$22>>3] = $24;
  $25 = $24 * $1;
  $26 = ((($0)) + 8|0);
  HEAPF64[$26>>3] = $25;
  $27 = !($24 >= 1.0);
  if (!($27)) {
   HEAPF64[$22>>3] = 1.0;
   HEAP32[$16>>2] = 0;
   $28 = ((($0)) + 72|0);
   HEAP32[$28>>2] = 1;
  }
 }
 $29 = ((($0)) + 72|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ($30|0)==(1);
 if ($31) {
  $32 = ((($0)) + 24|0);
  $33 = +HEAPF64[$32>>3];
  $34 = ((($0)) + 48|0);
  $35 = +HEAPF64[$34>>3];
  $36 = $33 * $35;
  HEAPF64[$34>>3] = $36;
  $37 = $36 * $1;
  $38 = ((($0)) + 8|0);
  HEAPF64[$38>>3] = $37;
  $39 = ((($0)) + 32|0);
  $40 = +HEAPF64[$39>>3];
  $41 = !($36 <= $40);
  if (!($41)) {
   HEAP32[$29>>2] = 0;
   $42 = ((($0)) + 80|0);
   HEAP32[$42>>2] = 1;
  }
 }
 $43 = ((($0)) + 64|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = ((($0)) + 60|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = ($44|0)<($46|0);
 if ($47) {
  $48 = ((($0)) + 80|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = ($49|0)==(1);
  if ($50) {
   $51 = (($44) + 1)|0;
   $52 = ((($0)) + 8|0);
   $53 = ((($0)) + 48|0);
   $54 = +HEAPF64[$53>>3];
   $55 = $54 * $1;
   HEAPF64[$52>>3] = $55;
   HEAP32[$43>>2] = $51;
  }
 }
 $56 = HEAP32[$43>>2]|0;
 $57 = ($56|0)>=($46|0);
 $or$cond = $3 & $57;
 if ($or$cond) {
  $58 = ((($0)) + 48|0);
  $59 = +HEAPF64[$58>>3];
  $60 = $59 * $1;
  $61 = ((($0)) + 8|0);
  HEAPF64[$61>>3] = $60;
 } else {
  $62 = ($2|0)!=(1);
  $or$cond3 = $62 & $57;
  if ($or$cond3) {
   $63 = ((($0)) + 80|0);
   HEAP32[$63>>2] = 0;
   $64 = ((($0)) + 84|0);
   HEAP32[$64>>2] = 1;
  }
 }
 $65 = ((($0)) + 84|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = ($66|0)==(1);
 if (!($67)) {
  $76 = ((($0)) + 8|0);
  $77 = +HEAPF64[$76>>3];
  return (+$77);
 }
 $68 = ((($0)) + 48|0);
 $69 = +HEAPF64[$68>>3];
 $70 = $69 > 0.0;
 if (!($70)) {
  $76 = ((($0)) + 8|0);
  $77 = +HEAPF64[$76>>3];
  return (+$77);
 }
 $71 = ((($0)) + 40|0);
 $72 = +HEAPF64[$71>>3];
 $73 = $69 * $72;
 HEAPF64[$68>>3] = $73;
 $74 = $73 * $1;
 $75 = ((($0)) + 8|0);
 HEAPF64[$75>>3] = $74;
 $76 = ((($0)) + 8|0);
 $77 = +HEAPF64[$76>>3];
 return (+$77);
}
function __ZN7maxiEnv9setAttackEd($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[6238]|0;
 $3 = (+($2|0));
 $4 = $3 * $1;
 $5 = $4 * 0.001;
 $6 = 1.0 / $5;
 $7 = (+Math_pow(0.01,(+$6)));
 $8 = 1.0 - $7;
 $9 = ((($0)) + 16|0);
 HEAPF64[$9>>3] = $8;
 return;
}
function __ZN7maxiEnv10setReleaseEd($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[6238]|0;
 $3 = (+($2|0));
 $4 = $3 * $1;
 $5 = $4 * 0.001;
 $6 = 1.0 / $5;
 $7 = (+Math_pow(0.01,(+$6)));
 $8 = ((($0)) + 40|0);
 HEAPF64[$8>>3] = $7;
 return;
}
function __ZN7maxiEnv10setSustainEd($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 32|0);
 HEAPF64[$2>>3] = $1;
 return;
}
function __ZN7maxiEnv8setDecayEd($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[6238]|0;
 $3 = (+($2|0));
 $4 = $3 * $1;
 $5 = $4 * 0.001;
 $6 = 1.0 / $5;
 $7 = (+Math_pow(0.01,(+$6)));
 $8 = ((($0)) + 24|0);
 HEAPF64[$8>>3] = $7;
 return;
}
function __ZN7convert4mtofEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (12144 + ($1<<3)|0);
 $3 = +HEAPF64[$2>>3];
 return (+$3);
}
function ___clang_call_terminate($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___cxa_begin_catch(($0|0))|0);
 __ZSt9terminatev();
 // unreachable;
}
function __ZNSt3__214basic_ifstreamIcNS_11char_traitsIcEEED2Ev($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$cast = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = ((($1)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $$cast = $2;
 $5 = ((($$cast)) + -12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($0) + ($6)|0);
 HEAP32[$7>>2] = $4;
 $8 = ((($0)) + 8|0);
 __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEED2Ev($8);
 $9 = ((($1)) + 4|0);
 __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED2Ev($0,$9);
 return;
}
function __ZTv0_n12_NSt3__214basic_ifstreamIcNS_11char_traitsIcEEED1Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + -12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($0) + ($3)|0);
 __ZNSt3__214basic_ifstreamIcNS_11char_traitsIcEEED1Ev($4);
 return;
}
function __ZNSt3__214basic_ifstreamIcNS_11char_traitsIcEEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__214basic_ifstreamIcNS_11char_traitsIcEEED1Ev($0);
 __ZdlPv($0);
 return;
}
function __ZTv0_n12_NSt3__214basic_ifstreamIcNS_11char_traitsIcEEED0Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + -12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($0) + ($3)|0);
 __ZNSt3__214basic_ifstreamIcNS_11char_traitsIcEEED0Ev($4);
 return;
}
function __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (25028);
 __THREW__ = 0;
 (invoke_ii(68,($0|0))|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch_3(0|0)|0;
  $4 = (getTempRet0() | 0);
  (___cxa_begin_catch(($3|0))|0);
  __THREW__ = 0;
  invoke_v(2);
  $5 = __THREW__; __THREW__ = 0;
  $6 = $5&1;
  if ($6) {
   $13 = ___cxa_find_matching_catch_3(0|0)|0;
   $14 = (getTempRet0() | 0);
   __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($0);
   ___clang_call_terminate($13);
   // unreachable;
  }
 }
 $7 = ((($0)) + 96|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = ($8<<24>>24)==(0);
 if (!($9)) {
  $10 = ((($0)) + 32|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==(0|0);
  if (!($12)) {
   __ZdaPv($11);
  }
 }
 $15 = ((($0)) + 97|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = ($16<<24>>24)==(0);
 if ($17) {
  __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($0);
  return;
 }
 $18 = ((($0)) + 56|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)==(0|0);
 if ($20) {
  __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($0);
  return;
 }
 __ZdaPv($19);
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($0);
 return;
}
function __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE5closeEv($0) {
 $0 = $0|0;
 var $$2 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 64|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $$2 = 0;
  return ($$2|0);
 }
 $4 = HEAP32[$0>>2]|0;
 $5 = ((($4)) + 24|0);
 $6 = HEAP32[$5>>2]|0;
 __THREW__ = 0;
 $7 = (invoke_ii($6|0,($0|0))|0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $12 = ___cxa_find_matching_catch_2()|0;
  $13 = (getTempRet0() | 0);
  (_fclose($2)|0);
  ___resumeException($12|0);
  // unreachable;
 }
 $10 = (_fclose($2)|0);
 $11 = ($10|0)==(0);
 if (!($11)) {
  $$2 = 0;
  return ($$2|0);
 }
 $14 = ($7|0)==(0);
 $spec$select = $14 ? $0 : 0;
 HEAP32[$1>>2] = 0;
 $$2 = $spec$select;
 return ($$2|0);
}
function __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($2)) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 (FUNCTION_TABLE_ii[$4 & 255]($0)|0);
 $5 = (__ZNKSt3__26locale9use_facetERNS0_2idE($1,51044)|0);
 $6 = ((($0)) + 68|0);
 HEAP32[$6>>2] = $5;
 $7 = ((($0)) + 98|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = HEAP32[$5>>2]|0;
 $10 = ((($9)) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (FUNCTION_TABLE_ii[$11 & 255]($5)|0);
 $13 = $12&1;
 HEAP8[$7>>0] = $13;
 $14 = $8&255;
 $15 = $12&1;
 $16 = ($14|0)==($15|0);
 if ($16) {
  return;
 }
 $17 = ((($0)) + 8|0);
 $18 = ((($0)) + 96|0);
 ;HEAP32[$17>>2]=0|0;HEAP32[$17+4>>2]=0|0;HEAP32[$17+8>>2]=0|0;HEAP32[$17+12>>2]=0|0;HEAP32[$17+16>>2]=0|0;HEAP32[$17+20>>2]=0|0;
 $19 = HEAP8[$18>>0]|0;
 $20 = ($19<<24>>24)!=(0);
 if ($12) {
  if ($20) {
   $21 = ((($0)) + 32|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ($22|0)==(0|0);
   if (!($23)) {
    __ZdaPv($22);
   }
  }
  $24 = ((($0)) + 97|0);
  $25 = HEAP8[$24>>0]|0;
  HEAP8[$18>>0] = $25;
  $26 = ((($0)) + 60|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ((($0)) + 52|0);
  HEAP32[$28>>2] = $27;
  $29 = ((($0)) + 56|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ((($0)) + 32|0);
  HEAP32[$31>>2] = $30;
  HEAP32[$26>>2] = 0;
  HEAP32[$29>>2] = 0;
  HEAP8[$24>>0] = 0;
  return;
 }
 if (!($20)) {
  $32 = ((($0)) + 32|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = ((($0)) + 44|0);
  $35 = ($33|0)==($34|0);
  if (!($35)) {
   $36 = ((($0)) + 52|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = ((($0)) + 60|0);
   HEAP32[$38>>2] = $37;
   $39 = HEAP32[$32>>2]|0;
   $40 = ((($0)) + 56|0);
   HEAP32[$40>>2] = $39;
   $41 = ((($0)) + 97|0);
   HEAP8[$41>>0] = 0;
   $42 = (__Znam($37)|0);
   HEAP32[$32>>2] = $42;
   HEAP8[$18>>0] = 1;
   return;
  }
 }
 $43 = ((($0)) + 52|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = ((($0)) + 60|0);
 HEAP32[$45>>2] = $44;
 $46 = (__Znam($44)|0);
 $47 = ((($0)) + 56|0);
 HEAP32[$47>>2] = $46;
 $48 = ((($0)) + 97|0);
 HEAP8[$48>>0] = 1;
 return;
}
function __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE6setbufEPcl($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sink = 0, $$sink14 = 0, $$sink15 = 0, $$sroa$speculated = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond13 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 8|0);
 $4 = ((($0)) + 96|0);
 ;HEAP32[$3>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;HEAP32[$3+12>>2]=0|0;HEAP32[$3+16>>2]=0|0;HEAP32[$3+20>>2]=0|0;
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)==(0);
 if (!($6)) {
  $7 = ((($0)) + 32|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(0|0);
  if (!($9)) {
   __ZdaPv($8);
  }
 }
 $10 = ((($0)) + 97|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = ($11<<24>>24)==(0);
 if (!($12)) {
  $13 = ((($0)) + 56|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14|0)==(0|0);
  if (!($15)) {
   __ZdaPv($14);
  }
 }
 $16 = ((($0)) + 52|0);
 HEAP32[$16>>2] = $2;
 $17 = ($2>>>0)>(8);
 do {
  if ($17) {
   $18 = ((($0)) + 98|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = ($19<<24>>24)!=(0);
   $21 = ($1|0)!=(0|0);
   $or$cond = $21 & $20;
   if ($or$cond) {
    $22 = ((($0)) + 32|0);
    HEAP32[$22>>2] = $1;
    $$sink = 0;
    break;
   } else {
    $23 = (__Znam($2)|0);
    $24 = ((($0)) + 32|0);
    HEAP32[$24>>2] = $23;
    $$sink = 1;
    break;
   }
  } else {
   $25 = ((($0)) + 44|0);
   $26 = ((($0)) + 32|0);
   HEAP32[$26>>2] = $25;
   HEAP32[$16>>2] = 8;
   $$sink = 0;
  }
 } while(0);
 HEAP8[$4>>0] = $$sink;
 $27 = ((($0)) + 98|0);
 $28 = HEAP8[$27>>0]|0;
 $29 = ($28<<24>>24)==(0);
 if (!($29)) {
  $35 = ((($0)) + 60|0);
  HEAP32[$35>>2] = 0;
  $$sink14 = 0;$$sink15 = 0;
  $36 = ((($0)) + 56|0);
  HEAP32[$36>>2] = $$sink15;
  HEAP8[$10>>0] = $$sink14;
  return ($0|0);
 }
 $30 = ($2|0)>(8);
 $$sroa$speculated = $30 ? $2 : 8;
 $31 = ((($0)) + 60|0);
 HEAP32[$31>>2] = $$sroa$speculated;
 $32 = ($1|0)!=(0|0);
 $33 = ($$sroa$speculated>>>0)>(7);
 $or$cond13 = $32 & $33;
 if ($or$cond13) {
  $$sink14 = 0;$$sink15 = $1;
  $36 = ((($0)) + 56|0);
  HEAP32[$36>>2] = $$sink15;
  HEAP8[$10>>0] = $$sink14;
  return ($0|0);
 }
 $34 = (__Znam($$sroa$speculated)|0);
 $$sink14 = 1;$$sink15 = $34;
 $36 = ((($0)) + 56|0);
 HEAP32[$36>>2] = $$sink15;
 HEAP8[$10>>0] = $$sink14;
 return ($0|0);
}
function __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$off0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $extract$t = 0, $or$cond = 0, $or$cond19 = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ((($1)) + 68|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if ($8) {
  $9 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($9);
  ___cxa_throw(($9|0),(24760|0),(231|0));
  // unreachable;
 }
 $10 = HEAP32[$7>>2]|0;
 $11 = ((($10)) + 24|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (FUNCTION_TABLE_ii[$12 & 255]($7)|0);
 $14 = ((($1)) + 64|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(0|0);
 if ($16) {
  $43 = 0;$46 = 0;$50 = -1;$53 = -1;
 } else {
  $17 = ($13|0)<(1);
  $18 = ($2|0)!=(0);
  $19 = ($3|0)!=(0);
  $20 = $18 | $19;
  $or$cond = $20 & $17;
  if ($or$cond) {
   $43 = 0;$46 = 0;$50 = -1;$53 = -1;
  } else {
   $21 = HEAP32[$1>>2]|0;
   $22 = ((($21)) + 24|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = (FUNCTION_TABLE_ii[$23 & 255]($1)|0);
   $25 = ($24|0)==(0);
   $switch = ($4>>>0)<(3);
   $or$cond19 = $25 & $switch;
   if ($or$cond19) {
    $26 = HEAP32[$14>>2]|0;
    $27 = ($13|0)>(0);
    $extract$t = Math_imul($13, $2)|0;
    $$off0 = $27 ? $extract$t : 0;
    $28 = (___fseeko($26,$$off0,$4)|0);
    $29 = ($28|0)==(0);
    if ($29) {
     $30 = HEAP32[$14>>2]|0;
     $31 = (___ftello($30)|0);
     $32 = ($31|0)<(0);
     $33 = $32 << 31 >> 31;
     $34 = ((($1)) + 72|0);
     $35 = $34;
     $36 = $35;
     $37 = HEAP32[$36>>2]|0;
     $38 = (($35) + 4)|0;
     $39 = $38;
     $40 = HEAP32[$39>>2]|0;
     $43 = $37;$46 = $40;$50 = $31;$53 = $33;
    } else {
     $43 = 0;$46 = 0;$50 = -1;$53 = -1;
    }
   } else {
    $43 = 0;$46 = 0;$50 = -1;$53 = -1;
   }
  }
 }
 $41 = $0;
 $42 = $41;
 HEAP32[$42>>2] = $43;
 $44 = (($41) + 4)|0;
 $45 = $44;
 HEAP32[$45>>2] = $46;
 $47 = ((($0)) + 8|0);
 $48 = $47;
 $49 = $48;
 HEAP32[$49>>2] = $50;
 $51 = (($48) + 4)|0;
 $52 = $51;
 HEAP32[$52>>2] = $53;
 return;
}
function __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 64|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if (!($6)) {
  $7 = HEAP32[$1>>2]|0;
  $8 = ((($7)) + 24|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (FUNCTION_TABLE_ii[$9 & 255]($1)|0);
  $11 = ($10|0)==(0);
  if ($11) {
   $21 = HEAP32[$4>>2]|0;
   $22 = ((($2)) + 8|0);
   $23 = $22;
   $24 = $23;
   $25 = HEAP32[$24>>2]|0;
   $26 = (($23) + 4)|0;
   $27 = $26;
   $28 = HEAP32[$27>>2]|0;
   $29 = (___fseeko($21,$25,0)|0);
   $30 = ($29|0)==(0);
   if ($30) {
    $40 = $2;
    $41 = $40;
    $42 = HEAP32[$41>>2]|0;
    $43 = (($40) + 4)|0;
    $44 = $43;
    $45 = HEAP32[$44>>2]|0;
    $46 = ((($1)) + 72|0);
    $47 = $46;
    $48 = $47;
    HEAP32[$48>>2] = $42;
    $49 = (($47) + 4)|0;
    $50 = $49;
    HEAP32[$50>>2] = $45;
    ;HEAP32[$0>>2]=HEAP32[$2>>2]|0;HEAP32[$0+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$2+12>>2]|0;
    return;
   } else {
    $31 = $0;
    $32 = $31;
    HEAP32[$32>>2] = 0;
    $33 = (($31) + 4)|0;
    $34 = $33;
    HEAP32[$34>>2] = 0;
    $35 = ((($0)) + 8|0);
    $36 = $35;
    $37 = $36;
    HEAP32[$37>>2] = -1;
    $38 = (($36) + 4)|0;
    $39 = $38;
    HEAP32[$39>>2] = -1;
    return;
   }
  }
 }
 $12 = $0;
 $13 = $12;
 HEAP32[$13>>2] = 0;
 $14 = (($12) + 4)|0;
 $15 = $14;
 HEAP32[$15>>2] = 0;
 $16 = ((($0)) + 8|0);
 $17 = $16;
 $18 = $17;
 HEAP32[$18>>2] = -1;
 $19 = (($17) + 4)|0;
 $20 = $19;
 HEAP32[$20>>2] = -1;
 return;
}
function __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE4syncEv($0) {
 $0 = $0|0;
 var $$129$off0 = 0, $$131 = 0, $$4 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ((($0)) + 64|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $$4 = 0;
  STACKTOP = sp;return ($$4|0);
 }
 $5 = ((($0)) + 68|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  $8 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($8);
  ___cxa_throw(($8|0),(24760|0),(231|0));
  // unreachable;
 }
 $9 = ((($0)) + 92|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 & 16;
 $12 = ($11|0)==(0);
 do {
  if ($12) {
   $46 = $10 & 8;
   $47 = ($46|0)==(0);
   if (!($47)) {
    $48 = ((($0)) + 80|0);
    $49 = $48;
    $50 = $49;
    $51 = HEAP32[$50>>2]|0;
    $52 = (($49) + 4)|0;
    $53 = $52;
    $54 = HEAP32[$53>>2]|0;
    $55 = $1;
    $56 = $55;
    HEAP32[$56>>2] = $51;
    $57 = (($55) + 4)|0;
    $58 = $57;
    HEAP32[$58>>2] = $54;
    $59 = ((($0)) + 98|0);
    $60 = HEAP8[$59>>0]|0;
    $61 = ($60<<24>>24)==(0);
    do {
     if ($61) {
      $67 = HEAP32[$6>>2]|0;
      $68 = ((($67)) + 24|0);
      $69 = HEAP32[$68>>2]|0;
      $70 = (FUNCTION_TABLE_ii[$69 & 255]($6)|0);
      $71 = ((($0)) + 40|0);
      $72 = HEAP32[$71>>2]|0;
      $73 = ((($0)) + 36|0);
      $74 = HEAP32[$73>>2]|0;
      $75 = (($72) - ($74))|0;
      $76 = ($70|0)>(0);
      if ($76) {
       $77 = ((($0)) + 16|0);
       $78 = HEAP32[$77>>2]|0;
       $79 = ((($0)) + 12|0);
       $80 = HEAP32[$79>>2]|0;
       $81 = (($78) - ($80))|0;
       $82 = Math_imul($81, $70)|0;
       $83 = (($82) + ($75))|0;
       $$129$off0 = 0;$$131 = $83;
       break;
      }
      $84 = ((($0)) + 12|0);
      $85 = HEAP32[$84>>2]|0;
      $86 = ((($0)) + 16|0);
      $87 = HEAP32[$86>>2]|0;
      $88 = ($85|0)==($87|0);
      if ($88) {
       $$129$off0 = 0;$$131 = $75;
      } else {
       $89 = HEAP32[$5>>2]|0;
       $90 = ((($0)) + 32|0);
       $91 = HEAP32[$90>>2]|0;
       $92 = HEAP32[$73>>2]|0;
       $93 = ((($0)) + 8|0);
       $94 = HEAP32[$93>>2]|0;
       $95 = $85;
       $96 = (($95) - ($94))|0;
       $97 = HEAP32[$89>>2]|0;
       $98 = ((($97)) + 32|0);
       $99 = HEAP32[$98>>2]|0;
       $100 = (FUNCTION_TABLE_iiiiii[$99 & 31]($89,$1,$91,$92,$96)|0);
       $101 = HEAP32[$73>>2]|0;
       $102 = HEAP32[$90>>2]|0;
       $103 = (($75) - ($100))|0;
       $104 = (($103) + ($101))|0;
       $105 = (($104) - ($102))|0;
       $$129$off0 = 1;$$131 = $105;
      }
     } else {
      $62 = ((($0)) + 16|0);
      $63 = HEAP32[$62>>2]|0;
      $64 = ((($0)) + 12|0);
      $65 = HEAP32[$64>>2]|0;
      $66 = (($63) - ($65))|0;
      $$129$off0 = 0;$$131 = $66;
     }
    } while(0);
    $106 = HEAP32[$2>>2]|0;
    $107 = (0 - ($$131))|0;
    $108 = (___fseeko($106,$107,1)|0);
    $109 = ($108|0)==(0);
    if (!($109)) {
     $$4 = -1;
     STACKTOP = sp;return ($$4|0);
    }
    if ($$129$off0) {
     $110 = ((($0)) + 72|0);
     $111 = $1;
     $112 = $111;
     $113 = HEAP32[$112>>2]|0;
     $114 = (($111) + 4)|0;
     $115 = $114;
     $116 = HEAP32[$115>>2]|0;
     $117 = $110;
     $118 = $117;
     HEAP32[$118>>2] = $113;
     $119 = (($117) + 4)|0;
     $120 = $119;
     HEAP32[$120>>2] = $116;
    }
    $121 = ((($0)) + 32|0);
    $122 = HEAP32[$121>>2]|0;
    $123 = ((($0)) + 40|0);
    HEAP32[$123>>2] = $122;
    $124 = ((($0)) + 36|0);
    HEAP32[$124>>2] = $122;
    $125 = ((($0)) + 8|0);
    HEAP32[$125>>2] = 0;
    $126 = ((($0)) + 12|0);
    HEAP32[$126>>2] = 0;
    $127 = ((($0)) + 16|0);
    HEAP32[$127>>2] = 0;
    HEAP32[$9>>2] = 0;
   }
  } else {
   $13 = ((($0)) + 24|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ((($0)) + 20|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ($14|0)==($16|0);
   if (!($17)) {
    $18 = HEAP32[$0>>2]|0;
    $19 = ((($18)) + 52|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
    $22 = (FUNCTION_TABLE_iii[$20 & 127]($0,$21)|0);
    $23 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
    $24 = ($22|0)==($23|0);
    if ($24) {
     $$4 = -1;
     STACKTOP = sp;return ($$4|0);
    }
   }
   $25 = ((($0)) + 72|0);
   $26 = ((($0)) + 32|0);
   $27 = ((($0)) + 52|0);
   L30: while(1) {
    $28 = HEAP32[$5>>2]|0;
    $29 = HEAP32[$26>>2]|0;
    $30 = HEAP32[$27>>2]|0;
    $31 = (($29) + ($30)|0);
    $32 = HEAP32[$28>>2]|0;
    $33 = ((($32)) + 20|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = (FUNCTION_TABLE_iiiiii[$34 & 31]($28,$25,$29,$31,$1)|0);
    $36 = HEAP32[$1>>2]|0;
    $37 = HEAP32[$26>>2]|0;
    $38 = $37;
    $39 = (($36) - ($38))|0;
    $40 = HEAP32[$2>>2]|0;
    $41 = (_fwrite($37,1,$39,$40)|0);
    $42 = ($41|0)==($39|0);
    if (!($42)) {
     $$4 = -1;
     label = 24;
     break;
    }
    switch ($35|0) {
    case 1:  {
     break;
    }
    case 2:  {
     $$4 = -1;
     label = 24;
     break L30;
     break;
    }
    default: {
     label = 10;
     break L30;
    }
    }
   }
   if ((label|0) == 10) {
    $43 = HEAP32[$2>>2]|0;
    $44 = (_fflush($43)|0);
    $45 = ($44|0)==(0);
    if ($45) {
     break;
    } else {
     $$4 = -1;
    }
    STACKTOP = sp;return ($$4|0);
   }
   else if ((label|0) == 24) {
    STACKTOP = sp;return ($$4|0);
   }
  }
 } while(0);
 $$4 = 0;
 STACKTOP = sp;return ($$4|0);
}
function __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE9underflowEv($0) {
 $0 = $0|0;
 var $$0 = 0, $$1 = 0, $$3 = 0, $$cast = 0, $$sink54 = 0, $$sroa$speculated = 0, $$sroa$speculated45 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 4|0;
 $2 = sp;
 $3 = ((($0)) + 64|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $6 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
  $$0 = $6;
  STACKTOP = sp;return ($$0|0);
 }
 $7 = (__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE11__read_modeEv($0)|0);
 $8 = ((($0)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0|0);
 if ($10) {
  $11 = ((($1)) + 1|0);
  $12 = ((($0)) + 8|0);
  HEAP32[$12>>2] = $1;
  HEAP32[$8>>2] = $11;
  $13 = ((($0)) + 16|0);
  HEAP32[$13>>2] = $11;
 }
 if ($7) {
  $27 = 0;
 } else {
  $14 = ((($0)) + 16|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ((($0)) + 8|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($15) - ($17))|0;
  $19 = (($18|0) / 2)&-1;
  $20 = ($19>>>0)<(4);
  $$sroa$speculated45 = $20 ? $19 : 4;
  $27 = $$sroa$speculated45;
 }
 $21 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
 $22 = HEAP32[$8>>2]|0;
 $23 = ((($0)) + 16|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($22|0)==($24|0);
 do {
  if ($25) {
   $26 = (0 - ($27))|0;
   $28 = ((($0)) + 8|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = (($24) + ($26)|0);
   _memmove(($29|0),($30|0),($27|0))|0;
   $31 = ((($0)) + 98|0);
   $32 = HEAP8[$31>>0]|0;
   $33 = ($32<<24>>24)==(0);
   if (!($33)) {
    $34 = HEAP32[$23>>2]|0;
    $35 = HEAP32[$28>>2]|0;
    $36 = $35;
    $37 = (($34) - ($27))|0;
    $38 = (($37) - ($36))|0;
    $39 = (($35) + ($27)|0);
    $40 = HEAP32[$3>>2]|0;
    $41 = (_fread($39,1,$38,$40)|0);
    $42 = ($41|0)==(0);
    if ($42) {
     $$3 = $21;
     break;
    }
    $43 = HEAP32[$28>>2]|0;
    $44 = (($43) + ($27)|0);
    $45 = (($44) + ($41)|0);
    HEAP32[$8>>2] = $44;
    HEAP32[$23>>2] = $45;
    $46 = HEAP8[$44>>0]|0;
    $47 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($46)|0);
    $$3 = $47;
    break;
   }
   $48 = ((($0)) + 40|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = ((($0)) + 36|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = ($49|0)==($51|0);
   if (!($52)) {
    $53 = $49;
    $54 = $51;
    $55 = (($53) - ($54))|0;
    $56 = ((($0)) + 32|0);
    $57 = HEAP32[$56>>2]|0;
    _memmove(($57|0),($51|0),($55|0))|0;
   }
   $58 = ((($0)) + 32|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = HEAP32[$48>>2]|0;
   $61 = HEAP32[$50>>2]|0;
   $62 = (($60) - ($61))|0;
   $63 = (($59) + ($62)|0);
   HEAP32[$50>>2] = $63;
   $64 = ((($0)) + 44|0);
   $65 = ($59|0)==($64|0);
   if ($65) {
    $69 = 8;
   } else {
    $66 = ((($0)) + 52|0);
    $67 = HEAP32[$66>>2]|0;
    $69 = $67;
   }
   $68 = (($59) + ($69)|0);
   HEAP32[$48>>2] = $68;
   $70 = ((($0)) + 60|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = (($71) - ($27))|0;
   $$cast = $68;
   $73 = HEAP32[$50>>2]|0;
   $74 = (($$cast) - ($73))|0;
   $75 = ($74>>>0)<($72>>>0);
   $$sroa$speculated = $75 ? $74 : $72;
   $76 = ((($0)) + 72|0);
   $77 = ((($0)) + 80|0);
   $78 = $76;
   $79 = $78;
   $80 = HEAP32[$79>>2]|0;
   $81 = (($78) + 4)|0;
   $82 = $81;
   $83 = HEAP32[$82>>2]|0;
   $84 = $77;
   $85 = $84;
   HEAP32[$85>>2] = $80;
   $86 = (($84) + 4)|0;
   $87 = $86;
   HEAP32[$87>>2] = $83;
   $88 = HEAP32[$3>>2]|0;
   $89 = (_fread($63,1,$$sroa$speculated,$88)|0);
   $90 = ($89|0)==(0);
   if ($90) {
    $$3 = $21;
   } else {
    $91 = ((($0)) + 68|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = ($92|0)==(0|0);
    if ($93) {
     $94 = (___cxa_allocate_exception(4)|0);
     __ZNSt8bad_castC2Ev($94);
     ___cxa_throw(($94|0),(24760|0),(231|0));
     // unreachable;
    }
    $95 = HEAP32[$50>>2]|0;
    $96 = (($95) + ($89)|0);
    HEAP32[$48>>2] = $96;
    $97 = HEAP32[$58>>2]|0;
    $98 = HEAP32[$28>>2]|0;
    $99 = (($98) + ($27)|0);
    $100 = HEAP32[$70>>2]|0;
    $101 = (($98) + ($100)|0);
    $102 = HEAP32[$92>>2]|0;
    $103 = ((($102)) + 16|0);
    $104 = HEAP32[$103>>2]|0;
    $105 = (FUNCTION_TABLE_iiiiiiiii[$104 & 15]($92,$76,$97,$96,$50,$99,$101,$2)|0);
    $106 = ($105|0)==(3);
    if ($106) {
     $107 = HEAP32[$58>>2]|0;
     $108 = HEAP32[$48>>2]|0;
     HEAP32[$28>>2] = $107;
     HEAP32[$8>>2] = $107;
     HEAP32[$23>>2] = $108;
     $$sink54 = $107;
     label = 22;
    } else {
     $109 = HEAP32[$2>>2]|0;
     $110 = HEAP32[$28>>2]|0;
     $111 = (($110) + ($27)|0);
     $112 = ($109|0)==($111|0);
     if ($112) {
      $$1 = $21;
     } else {
      HEAP32[$8>>2] = $111;
      HEAP32[$23>>2] = $109;
      $$sink54 = $111;
      label = 22;
     }
    }
    if ((label|0) == 22) {
     $113 = HEAP8[$$sink54>>0]|0;
     $114 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($113)|0);
     $$1 = $114;
    }
    $$3 = $$1;
   }
  } else {
   $115 = HEAP8[$22>>0]|0;
   $116 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($115)|0);
   $$3 = $116;
  }
 } while(0);
 $117 = ((($0)) + 8|0);
 $118 = HEAP32[$117>>2]|0;
 $119 = ($118|0)==($1|0);
 if ($119) {
  HEAP32[$117>>2] = 0;
  HEAP32[$8>>2] = 0;
  HEAP32[$23>>2] = 0;
 }
 $$0 = $$3;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE9pbackfailEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 64|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 do {
  if (!($4)) {
   $5 = ((($0)) + 8|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ((($0)) + 12|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ($6>>>0)<($8>>>0);
   if ($9) {
    $10 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
    $11 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($1,$10)|0);
    if ($11) {
     $12 = HEAP32[$7>>2]|0;
     $13 = ((($12)) + -1|0);
     HEAP32[$7>>2] = $13;
     $14 = (__ZNSt3__211char_traitsIcE7not_eofEi($1)|0);
     $$0 = $14;
     return ($$0|0);
    }
    $15 = ((($0)) + 88|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = $16 & 16;
    $18 = ($17|0)==(0);
    if ($18) {
     $19 = (__ZNSt3__211char_traitsIcE12to_char_typeEi($1)|0);
     $20 = HEAP32[$7>>2]|0;
     $21 = ((($20)) + -1|0);
     $22 = HEAP8[$21>>0]|0;
     $23 = (__ZNSt3__211char_traitsIcE2eqEcc($19,$22)|0);
     if (!($23)) {
      break;
     }
    }
    $24 = HEAP32[$7>>2]|0;
    $25 = ((($24)) + -1|0);
    HEAP32[$7>>2] = $25;
    $26 = (__ZNSt3__211char_traitsIcE12to_char_typeEi($1)|0);
    $27 = HEAP32[$7>>2]|0;
    HEAP8[$27>>0] = $26;
    $$0 = $1;
    return ($$0|0);
   }
  }
 } while(0);
 $28 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
 $$0 = $28;
 return ($$0|0);
}
function __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE8overflowEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$6 = 0, $$7 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp + 8|0;
 $3 = sp + 4|0;
 $4 = sp;
 $5 = ((($0)) + 64|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  $8 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
  $$7 = $8;
  STACKTOP = sp;return ($$7|0);
 }
 __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE12__write_modeEv($0);
 $9 = ((($0)) + 20|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($0)) + 28|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
 $14 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($1,$13)|0);
 if (!($14)) {
  $15 = ((($0)) + 24|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($16|0)==(0|0);
  if ($17) {
   $18 = ((($2)) + 1|0);
   HEAP32[$15>>2] = $2;
   HEAP32[$9>>2] = $2;
   HEAP32[$11>>2] = $18;
  }
  $19 = (__ZNSt3__211char_traitsIcE12to_char_typeEi($1)|0);
  $20 = HEAP32[$15>>2]|0;
  HEAP8[$20>>0] = $19;
  $21 = HEAP32[$15>>2]|0;
  $22 = ((($21)) + 1|0);
  HEAP32[$15>>2] = $22;
 }
 $23 = ((($0)) + 24|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = HEAP32[$9>>2]|0;
 $26 = ($24|0)==($25|0);
 L11: do {
  if ($26) {
   label = 29;
  } else {
   $27 = ((($0)) + 98|0);
   $28 = HEAP8[$27>>0]|0;
   $29 = ($28<<24>>24)==(0);
   do {
    if ($29) {
     $37 = ((($0)) + 32|0);
     $38 = HEAP32[$37>>2]|0;
     HEAP32[$3>>2] = $38;
     $39 = ((($0)) + 68|0);
     $40 = ((($0)) + 72|0);
     $41 = ((($0)) + 52|0);
     while(1) {
      $42 = HEAP32[$39>>2]|0;
      $43 = ($42|0)==(0|0);
      if ($43) {
       label = 13;
       break;
      }
      $45 = HEAP32[$9>>2]|0;
      $46 = HEAP32[$23>>2]|0;
      $47 = HEAP32[$37>>2]|0;
      $48 = HEAP32[$41>>2]|0;
      $49 = (($47) + ($48)|0);
      $50 = HEAP32[$42>>2]|0;
      $51 = ((($50)) + 12|0);
      $52 = HEAP32[$51>>2]|0;
      $53 = (FUNCTION_TABLE_iiiiiiiii[$52 & 15]($42,$40,$45,$46,$4,$47,$49,$3)|0);
      $54 = HEAP32[$4>>2]|0;
      $55 = HEAP32[$9>>2]|0;
      $56 = ($54|0)==($55|0);
      if ($56) {
       label = 15;
       break;
      }
      $57 = ($53|0)==(3);
      if ($57) {
       label = 17;
       break;
      }
      $64 = ($53|0)==(1);
      $65 = ($53>>>0)<(2);
      if (!($65)) {
       label = 24;
       break;
      }
      $66 = HEAP32[$3>>2]|0;
      $67 = HEAP32[$37>>2]|0;
      $68 = $67;
      $69 = (($66) - ($68))|0;
      $70 = HEAP32[$5>>2]|0;
      $71 = (_fwrite($67,1,$69,$70)|0);
      $72 = ($71|0)==($69|0);
      if (!($72)) {
       label = 23;
       break;
      }
      if ($64) {
       $73 = HEAP32[$4>>2]|0;
       $74 = HEAP32[$23>>2]|0;
       HEAP32[$9>>2] = $73;
       HEAP32[$11>>2] = $74;
       HEAP32[$23>>2] = $74;
      }
      $75 = ($53|0)==(1);
      if (!($75)) {
       label = 26;
       break;
      }
     }
     if ((label|0) == 13) {
      $44 = (___cxa_allocate_exception(4)|0);
      __ZNSt8bad_castC2Ev($44);
      ___cxa_throw(($44|0),(24760|0),(231|0));
      // unreachable;
     }
     else if ((label|0) == 15) {
      $78 = $4;
      label = 27;
     }
     else if ((label|0) == 17) {
      $58 = HEAP32[$23>>2]|0;
      $59 = $55;
      $60 = (($58) - ($59))|0;
      $61 = HEAP32[$5>>2]|0;
      $62 = (_fwrite($55,1,$60,$61)|0);
      $63 = ($62|0)==($60|0);
      if ($63) {
       label = 26;
      } else {
       $78 = $4;
       label = 27;
      }
     }
     else if ((label|0) == 23) {
      $78 = $4;
      label = 27;
     }
     else if ((label|0) == 24) {
      $78 = $4;
      label = 27;
     }
     if ((label|0) == 26) {
      break;
     }
     else if ((label|0) == 27) {
      $76 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
      $$6 = $76;
      break L11;
     }
    } else {
     $30 = $24;
     $31 = $25;
     $32 = (($30) - ($31))|0;
     $33 = HEAP32[$5>>2]|0;
     $34 = (_fwrite($25,1,$32,$33)|0);
     $35 = ($34|0)==($32|0);
     if (!($35)) {
      $36 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
      $$6 = $36;
      break L11;
     }
    }
   } while(0);
   HEAP32[$23>>2] = $10;
   HEAP32[$9>>2] = $10;
   HEAP32[$11>>2] = $12;
   label = 29;
  }
 } while(0);
 if ((label|0) == 29) {
  $77 = (__ZNSt3__211char_traitsIcE7not_eofEi($1)|0);
  $$6 = $77;
 }
 $$7 = $$6;
 STACKTOP = sp;return ($$7|0);
}
function __ZNSt3__211char_traitsIcE3eofEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return -1;
}
function __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE11__read_modeEv($0) {
 $0 = $0|0;
 var $$0 = 0, $$sink = 0, $$sink$in = 0, $$sink8 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 92|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 8;
 $4 = ($3|0)==(0);
 if (!($4)) {
  $$0 = 0;
  return ($$0|0);
 }
 $5 = ((($0)) + 24|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($0)) + 20|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($0)) + 28|0);
 HEAP32[$7>>2] = 0;
 $8 = ((($0)) + 98|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = ($9<<24>>24)==(0);
 $11 = ((($0)) + 56|0);
 $12 = ((($0)) + 60|0);
 $13 = ((($0)) + 32|0);
 $14 = ((($0)) + 52|0);
 $$sink8 = $10 ? $12 : $14;
 $$sink$in = $10 ? $11 : $13;
 $$sink = HEAP32[$$sink$in>>2]|0;
 $15 = HEAP32[$$sink8>>2]|0;
 $16 = (($$sink) + ($15)|0);
 $17 = ((($0)) + 8|0);
 HEAP32[$17>>2] = $$sink;
 $18 = ((($0)) + 12|0);
 HEAP32[$18>>2] = $16;
 $19 = ((($0)) + 16|0);
 HEAP32[$19>>2] = $16;
 HEAP32[$1>>2] = 8;
 $$0 = 1;
 return ($$0|0);
}
function __ZNSt3__211char_traitsIcE11to_int_typeEc($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0&255;
 return ($1|0);
}
function __ZNSt3__211char_traitsIcE11eq_int_typeEii($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==($1|0);
 return ($2|0);
}
function __ZNSt3__211char_traitsIcE7not_eofEi($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
 $2 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($0,$1)|0);
 if (!($2)) {
  $5 = $0;
  return ($5|0);
 }
 $3 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
 $4 = $3 ^ -1;
 $5 = $4;
 return ($5|0);
}
function __ZNSt3__211char_traitsIcE2eqEcc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0<<24>>24)==($1<<24>>24);
 return ($2|0);
}
function __ZNSt3__211char_traitsIcE12to_char_typeEi($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0&255;
 return ($1|0);
}
function __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE12__write_modeEv($0) {
 $0 = $0|0;
 var $$sink = 0, $$sink4 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 92|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 16;
 $4 = ($3|0)==(0);
 if (!($4)) {
  return;
 }
 $5 = ((($0)) + 8|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($0)) + 12|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($0)) + 16|0);
 HEAP32[$7>>2] = 0;
 $8 = ((($0)) + 52|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9>>>0)>(8);
 do {
  if ($10) {
   $11 = ((($0)) + 98|0);
   $12 = HEAP8[$11>>0]|0;
   $13 = ($12<<24>>24)==(0);
   if ($13) {
    $18 = ((($0)) + 56|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = ((($0)) + 60|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = (($21) + -1)|0;
    $23 = (($19) + ($22)|0);
    $$sink = $23;$$sink4 = $19;
    break;
   } else {
    $14 = ((($0)) + 32|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = (($9) + -1)|0;
    $17 = (($15) + ($16)|0);
    $$sink = $17;$$sink4 = $15;
    break;
   }
  } else {
   $$sink = 0;$$sink4 = 0;
  }
 } while(0);
 $24 = ((($0)) + 24|0);
 HEAP32[$24>>2] = $$sink4;
 $25 = ((($0)) + 20|0);
 HEAP32[$25>>2] = $$sink4;
 $26 = ((($0)) + 28|0);
 HEAP32[$26>>2] = $$sink;
 HEAP32[$1>>2] = 16;
 return;
}
function __ZNSt3__26vectorIdNS_9allocatorIdEEE6assignIPdEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIdNS_15iterator_traitsIS7_E9referenceEEE5valueEvE4typeES7_S7_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sroa$speculated$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, $spec$select$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $2;
 $4 = $1;
 $5 = (($3) - ($4))|0;
 $6 = $5 >> 3;
 $7 = ((($0)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[$0>>2]|0;
 $10 = (($8) - ($9))|0;
 $11 = $10 >> 3;
 $12 = ($6>>>0)>($11>>>0);
 if ($12) {
  __ZNSt3__26vectorIdNS_9allocatorIdEEE10deallocateEv($0);
  $30 = (__ZNKSt3__26vectorIdNS_9allocatorIdEEE8max_sizeEv($0)|0);
  $31 = ($30>>>0)<($6>>>0);
  if ($31) {
   __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
   // unreachable;
  }
  $32 = HEAP32[$7>>2]|0;
  $33 = HEAP32[$0>>2]|0;
  $34 = (($32) - ($33))|0;
  $35 = $34 >> 3;
  $36 = $30 >>> 1;
  $37 = ($35>>>0)<($36>>>0);
  $38 = $34 >> 2;
  $39 = ($38>>>0)<($6>>>0);
  $$sroa$speculated$i = $39 ? $6 : $38;
  $spec$select$i = $37 ? $$sroa$speculated$i : $30;
  __ZNSt3__26vectorIdNS_9allocatorIdEEE8allocateEm($0,$spec$select$i);
  __ZNSt3__26vectorIdNS_9allocatorIdEEE18__construct_at_endIPdEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES7_S7_m($0,$1,$2,$6);
  return;
 }
 $13 = ((($0)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) - ($9))|0;
 $16 = $15 >> 3;
 $17 = ($6>>>0)>($16>>>0);
 $18 = (($1) + ($16<<3)|0);
 $spec$select = $17 ? $18 : $2;
 $19 = HEAP32[$0>>2]|0;
 $20 = $spec$select;
 $21 = (($20) - ($4))|0;
 $22 = $21 >> 3;
 $23 = ($21|0)==(0);
 if (!($23)) {
  _memmove(($19|0),($1|0),($21|0))|0;
 }
 if ($17) {
  $24 = HEAP32[$13>>2]|0;
  $25 = HEAP32[$0>>2]|0;
  $26 = (($24) - ($25))|0;
  $27 = $26 >> 3;
  $28 = (($6) - ($27))|0;
  __ZNSt3__26vectorIdNS_9allocatorIdEEE18__construct_at_endIPdEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES7_S7_m($0,$spec$select,$2,$28);
  return;
 } else {
  $29 = (($19) + ($22<<3)|0);
  HEAP32[$13>>2] = $29;
  return;
 }
}
function __ZNSt3__26vectorIdNS_9allocatorIdEEE18__construct_at_endIPdEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES7_S7_m($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 4|0);
 $5 = $2;
 $6 = $1;
 $7 = (($5) - ($6))|0;
 $8 = ($7|0)>(0);
 if (!($8)) {
  return;
 }
 $9 = $7 >>> 3;
 $10 = HEAP32[$4>>2]|0;
 _memcpy(($10|0),($1|0),($7|0))|0;
 $11 = HEAP32[$4>>2]|0;
 $12 = (($11) + ($9<<3)|0);
 HEAP32[$4>>2] = $12;
 return;
}
function __ZNSt3__26vectorIdNS_9allocatorIdEEE10deallocateEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 }
 $3 = HEAP32[$0>>2]|0;
 $4 = ((($0)) + 4|0);
 HEAP32[$4>>2] = $3;
 __ZdlPv($1);
 $5 = ((($0)) + 8|0);
 HEAP32[$5>>2] = 0;
 HEAP32[$4>>2] = 0;
 HEAP32[$0>>2] = 0;
 return;
}
function __ZNSt3__26vectorIdNS_9allocatorIdEEE8allocateEm($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNKSt3__26vectorIdNS_9allocatorIdEEE8max_sizeEv($0)|0);
 $3 = ($2>>>0)<($1>>>0);
 if ($3) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $4 = ($1>>>0)>(536870911);
 if (!($4)) {
  $10 = $1 << 3;
  $11 = (__Znwm($10)|0);
  $12 = ((($0)) + 4|0);
  HEAP32[$12>>2] = $11;
  HEAP32[$0>>2] = $11;
  $13 = (($11) + ($1<<3)|0);
  $14 = ((($0)) + 8|0);
  HEAP32[$14>>2] = $13;
  return;
 }
 $5 = (___cxa_allocate_exception(8)|0);
 __THREW__ = 0;
 invoke_vii(45,($5|0),(43841|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $8 = ___cxa_find_matching_catch_2()|0;
  $9 = (getTempRet0() | 0);
  ___cxa_free_exception(($5|0));
  ___resumeException($8|0);
  // unreachable;
 } else {
  HEAP32[$5>>2] = (30800);
  ___cxa_throw(($5|0),(24744|0),(226|0));
  // unreachable;
 }
}
function __ZNKSt3__26vectorIdNS_9allocatorIdEEE8max_sizeEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 536870911;
}
function __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEEC2Ev($0) {
 $0 = $0|0;
 var $$0 = 0, $$02 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEEC2Ev($0);
 HEAP32[$0>>2] = (25028);
 $2 = ((($0)) + 32|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($0)) + 36|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($0)) + 40|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($0)) + 52|0);
 $6 = ((($0)) + 68|0);
 $7 = ((($0)) + 98|0);
 dest=$5; stop=dest+44|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));HEAP16[$5+44>>1]=0|0;HEAP8[$5+46>>0]=0|0;
 $8 = ((($0)) + 4|0);
 __ZNSt3__26localeC2ERKS0_($1,$8);
 __THREW__ = 0;
 $9 = (invoke_iii(41,($1|0),(51044|0))|0);
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $12 = ___cxa_find_matching_catch_3(0|0)|0;
  $13 = (getTempRet0() | 0);
  ___clang_call_terminate($12);
  // unreachable;
 }
 __ZNSt3__26localeD2Ev($1);
 do {
  if ($9) {
   __ZNSt3__26localeC2ERKS0_($1,$8);
   __THREW__ = 0;
   $14 = (invoke_iii(37,($1|0),(51044|0))|0);
   $15 = __THREW__; __THREW__ = 0;
   $16 = $15&1;
   if (!($16)) {
    HEAP32[$6>>2] = $14;
    __ZNSt3__26localeD2Ev($1);
    $17 = HEAP32[$6>>2]|0;
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($18)) + 28|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = (FUNCTION_TABLE_ii[$20 & 255]($17)|0);
    $22 = $21&1;
    HEAP8[$7>>0] = $22;
    break;
   }
   $23 = ___cxa_find_matching_catch_2()|0;
   $24 = (getTempRet0() | 0);
   __ZNSt3__26localeD2Ev($1);
   $$0 = $24;$$02 = $23;
   __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($0);
   ___resumeException($$02|0);
   // unreachable;
  }
 } while(0);
 $25 = HEAP32[$0>>2]|0;
 $26 = ((($25)) + 12|0);
 $27 = HEAP32[$26>>2]|0;
 __THREW__ = 0;
 (invoke_iiii($27|0,($0|0),(0|0),4096)|0);
 $28 = __THREW__; __THREW__ = 0;
 $29 = $28&1;
 if (!($29)) {
  STACKTOP = sp;return;
 }
 $30 = ___cxa_find_matching_catch_2()|0;
 $31 = (getTempRet0() | 0);
 $$0 = $31;$$02 = $30;
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($0);
 ___resumeException($$02|0);
 // unreachable;
}
function __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE4openEPKcj($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$ph = 0, $$2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 64|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 L1: do {
  if ($5) {
   $6 = $2 & -3;
   do {
    switch ($6|0) {
    case 48: case 16:  {
     $$0$ph = 31107;
     break;
    }
    case 1: case 17:  {
     $$0$ph = 31109;
     break;
    }
    case 8:  {
     $$0$ph = 31111;
     break;
    }
    case 24:  {
     $$0$ph = 31113;
     break;
    }
    case 56:  {
     $$0$ph = 31116;
     break;
    }
    case 9: case 25:  {
     $$0$ph = 31119;
     break;
    }
    case 52: case 20:  {
     $$0$ph = 31122;
     break;
    }
    case 5: case 21:  {
     $$0$ph = 31125;
     break;
    }
    case 12:  {
     $$0$ph = 31128;
     break;
    }
    case 28:  {
     $$0$ph = 31131;
     break;
    }
    case 60:  {
     $$0$ph = 31135;
     break;
    }
    case 13: case 29:  {
     $$0$ph = 31139;
     break;
    }
    default: {
     $$2 = 0;
     break L1;
    }
    }
   } while(0);
   $7 = (_fopen($1,$$0$ph)|0);
   HEAP32[$3>>2] = $7;
   $8 = ($7|0)==(0|0);
   if ($8) {
    $$2 = 0;
   } else {
    $9 = ((($0)) + 88|0);
    HEAP32[$9>>2] = $2;
    $10 = $2 & 2;
    $11 = ($10|0)==(0);
    if ($11) {
     $$2 = $0;
    } else {
     $12 = (_fseek($7,0,2)|0);
     $13 = ($12|0)==(0);
     if ($13) {
      $$2 = $0;
     } else {
      $14 = HEAP32[$3>>2]|0;
      (_fclose($14)|0);
      HEAP32[$3>>2] = 0;
      $$2 = 0;
     }
    }
   }
  } else {
   $$2 = 0;
  }
 } while(0);
 return ($$2|0);
}
function __ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$1 = 0, $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, $eh$lpad$body$sink$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 12|0;
 $3 = sp;
 $4 = sp + 8|0;
 __THREW__ = 0;
 invoke_vii(46,($3|0),($0|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 L1: do {
  if ($6) {
   $54 = ___cxa_find_matching_catch_3(0|0)|0;
   $55 = (getTempRet0() | 0);
   $$1 = $54;
  } else {
   $7 = HEAP8[$3>>0]|0;
   $8 = ($7<<24>>24)==(0);
   L4: do {
    if (!($8)) {
     $9 = HEAP32[$0>>2]|0;
     $10 = ((($9)) + -12|0);
     $11 = HEAP32[$10>>2]|0;
     $12 = (($0) + ($11)|0);
     $13 = ((($12)) + 24|0);
     $14 = HEAP32[$13>>2]|0;
     HEAP32[$4>>2] = $14;
     $15 = HEAP32[$10>>2]|0;
     $16 = (($0) + ($15)|0);
     $17 = ((($16)) + 4|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = (($1) + ($2)|0);
     $20 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
     $21 = ((($16)) + 76|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($20,$22)|0);
     do {
      if ($23) {
       __ZNKSt3__28ios_base6getlocEv($$byval_copy,$16);
       __THREW__ = 0;
       $24 = (invoke_iii(37,($$byval_copy|0),(50740|0))|0);
       $25 = __THREW__; __THREW__ = 0;
       $26 = $25&1;
       if (!($26)) {
        $27 = HEAP32[$24>>2]|0;
        $28 = ((($27)) + 28|0);
        $29 = HEAP32[$28>>2]|0;
        __THREW__ = 0;
        $30 = (invoke_iii($29|0,($24|0),32)|0);
        $31 = __THREW__; __THREW__ = 0;
        $32 = $31&1;
        if (!($32)) {
         __ZNSt3__26localeD2Ev($$byval_copy);
         $35 = $30 << 24 >> 24;
         HEAP32[$21>>2] = $35;
         label = 8;
         break;
        }
       }
       $33 = ___cxa_find_matching_catch_3(0|0)|0;
       $34 = (getTempRet0() | 0);
       __ZNSt3__26localeD2Ev($$byval_copy);
       $eh$lpad$body$sink$indexZ2D = $33;
      } else {
       label = 8;
      }
     } while(0);
     do {
      if ((label|0) == 8) {
       $36 = HEAP32[$21>>2]|0;
       $37 = $36&255;
       $38 = $18 & 176;
       $39 = ($38|0)==(32);
       $40 = $39 ? $19 : $1;
       __THREW__ = 0;
       ;HEAP32[$$byval_copy>>2]=HEAP32[$4>>2]|0;
       $41 = (invoke_iiiiiii(39,($$byval_copy|0),($1|0),($40|0),($19|0),($16|0),($37|0))|0);
       $42 = __THREW__; __THREW__ = 0;
       $43 = $42&1;
       if ($43) {
        $58 = ___cxa_find_matching_catch_3(0|0)|0;
        $59 = (getTempRet0() | 0);
        $eh$lpad$body$sink$indexZ2D = $58;
        break;
       }
       $44 = ($41|0)==(0|0);
       if (!($44)) {
        break L4;
       }
       $45 = HEAP32[$0>>2]|0;
       $46 = ((($45)) + -12|0);
       $47 = HEAP32[$46>>2]|0;
       $48 = (($0) + ($47)|0);
       $49 = ((($48)) + 16|0);
       $50 = HEAP32[$49>>2]|0;
       $51 = $50 | 5;
       __THREW__ = 0;
       invoke_vii(40,($48|0),($51|0));
       $52 = __THREW__; __THREW__ = 0;
       $53 = $52&1;
       if (!($53)) {
        break L4;
       }
       $56 = ___cxa_find_matching_catch_3(0|0)|0;
       $57 = (getTempRet0() | 0);
       $eh$lpad$body$sink$indexZ2D = $56;
      }
     } while(0);
     __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($3);
     $$1 = $eh$lpad$body$sink$indexZ2D;
     break L1;
    }
   } while(0);
   __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($3);
   STACKTOP = sp;return ($0|0);
  }
 } while(0);
 (___cxa_begin_catch(($$1|0))|0);
 $60 = HEAP32[$0>>2]|0;
 $61 = ((($60)) + -12|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = (($0) + ($62)|0);
 __THREW__ = 0;
 invoke_vi(237,($63|0));
 $64 = __THREW__; __THREW__ = 0;
 $65 = $64&1;
 if (!($65)) {
  ___cxa_end_catch();
  STACKTOP = sp;return ($0|0);
 }
 $66 = ___cxa_find_matching_catch_2()|0;
 $67 = (getTempRet0() | 0);
 __THREW__ = 0;
 invoke_v(2);
 $68 = __THREW__; __THREW__ = 0;
 $69 = $68&1;
 if ($69) {
  $70 = ___cxa_find_matching_catch_3(0|0)|0;
  $71 = (getTempRet0() | 0);
  ___clang_call_terminate($70);
  // unreachable;
 } else {
  ___resumeException($66|0);
  // unreachable;
 }
 return (0)|0;
}
function __ZNSt3__211char_traitsIcE6lengthEPKc($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_strlen($0)|0);
 return ($1|0);
}
function __ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $$sroa$0$2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $6 = sp;
 $7 = HEAP32[$0>>2]|0;
 $8 = ($7|0)==(0|0);
 if ($8) {
  $$sroa$0$2 = 0;
  STACKTOP = sp;return ($$sroa$0$2|0);
 }
 $9 = $3;
 $10 = $1;
 $11 = (($9) - ($10))|0;
 $12 = ((($4)) + 12|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)>($11|0);
 $15 = (($13) - ($11))|0;
 $$0 = $14 ? $15 : 0;
 $16 = $2;
 $17 = (($16) - ($10))|0;
 $18 = ($17|0)>(0);
 if ($18) {
  $19 = HEAP32[$7>>2]|0;
  $20 = ((($19)) + 48|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (FUNCTION_TABLE_iiii[$21 & 63]($7,$1,$17)|0);
  $23 = ($22|0)==($17|0);
  if (!($23)) {
   HEAP32[$0>>2] = 0;
   $$sroa$0$2 = 0;
   STACKTOP = sp;return ($$sroa$0$2|0);
  }
 }
 $24 = ($$0|0)>(0);
 do {
  if ($24) {
   ;HEAP32[$6>>2]=0|0;HEAP32[$6+4>>2]=0|0;HEAP32[$6+8>>2]=0|0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEmc($6,$$0,$5);
   $25 = ((($6)) + 11|0);
   $26 = HEAP8[$25>>0]|0;
   $27 = ($26<<24>>24)<(0);
   $28 = HEAP32[$6>>2]|0;
   $29 = $27 ? $28 : $6;
   $30 = HEAP32[$7>>2]|0;
   $31 = ((($30)) + 48|0);
   $32 = HEAP32[$31>>2]|0;
   __THREW__ = 0;
   $33 = (invoke_iiii($32|0,($7|0),($29|0),($$0|0))|0);
   $34 = __THREW__; __THREW__ = 0;
   $35 = $34&1;
   if ($35) {
    $37 = ___cxa_find_matching_catch_2()|0;
    $38 = (getTempRet0() | 0);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($6);
    ___resumeException($37|0);
    // unreachable;
   }
   $36 = ($33|0)==($$0|0);
   if ($36) {
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($6);
    break;
   }
   HEAP32[$0>>2] = 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($6);
   $$sroa$0$2 = 0;
   STACKTOP = sp;return ($$sroa$0$2|0);
  }
 } while(0);
 $39 = (($9) - ($16))|0;
 $40 = ($39|0)>(0);
 if ($40) {
  $41 = HEAP32[$7>>2]|0;
  $42 = ((($41)) + 48|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = (FUNCTION_TABLE_iiii[$43 & 63]($7,$2,$39)|0);
  $45 = ($44|0)==($39|0);
  if (!($45)) {
   HEAP32[$0>>2] = 0;
   $$sroa$0$2 = 0;
   STACKTOP = sp;return ($$sroa$0$2|0);
  }
 }
 HEAP32[$12>>2] = 0;
 $$sroa$0$2 = $7;
 STACKTOP = sp;return ($$sroa$0$2|0);
}
function __ZNSt3__211char_traitsIcE6assignEPcmc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1|0)==(0);
 if ($3) {
  return ($0|0);
 }
 $4 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($2)|0);
 $5 = $4&255;
 _memset(($0|0),($5|0),($1|0))|0;
 return ($0|0);
}
function __ZNSt3__211char_traitsIcE6assignERcRKc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[$1>>0]|0;
 HEAP8[$0>>0] = $2;
 return;
}
function __ZNSt3__26vectorIsNS_9allocatorIsEEE8__appendEm($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sroa$speculated$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) - ($6))|0;
 $8 = $7 >> 1;
 $9 = ($8>>>0)<($1>>>0);
 if (!($9)) {
  __ZNSt3__26vectorIsNS_9allocatorIsEEE18__construct_at_endEm($0,$1);
  STACKTOP = sp;return;
 }
 $10 = HEAP32[$0>>2]|0;
 $11 = (($6) - ($10))|0;
 $12 = $11 >> 1;
 $13 = (($12) + ($1))|0;
 $14 = (__ZNKSt3__26vectorIsNS_9allocatorIsEEE8max_sizeEv($0)|0);
 $15 = ($14>>>0)<($13>>>0);
 if ($15) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $16 = ((($0)) + 8|0);
 $17 = ((($0)) + 8|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = HEAP32[$0>>2]|0;
 $20 = (($18) - ($19))|0;
 $21 = $20 >> 1;
 $22 = $14 >>> 1;
 $23 = ($21>>>0)<($22>>>0);
 $24 = ($20>>>0)<($13>>>0);
 $$sroa$speculated$i = $24 ? $13 : $20;
 $spec$select$i = $23 ? $$sroa$speculated$i : $14;
 $25 = HEAP32[$5>>2]|0;
 $26 = (($25) - ($19))|0;
 $27 = $26 >> 1;
 __ZNSt3__214__split_bufferIsRNS_9allocatorIsEEEC2EmmS3_($2,$spec$select$i,$27,$16);
 __THREW__ = 0;
 invoke_vii(47,($2|0),($1|0));
 $28 = __THREW__; __THREW__ = 0;
 $29 = $28&1;
 if ($29) {
  $32 = ___cxa_find_matching_catch_2()|0;
  $33 = (getTempRet0() | 0);
  __ZNSt3__214__split_bufferIsRNS_9allocatorIsEEED2Ev($2);
  ___resumeException($32|0);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vii(48,($0|0),($2|0));
 $30 = __THREW__; __THREW__ = 0;
 $31 = $30&1;
 if ($31) {
  $32 = ___cxa_find_matching_catch_2()|0;
  $33 = (getTempRet0() | 0);
  __ZNSt3__214__split_bufferIsRNS_9allocatorIsEEED2Ev($2);
  ___resumeException($32|0);
  // unreachable;
 }
 __ZNSt3__214__split_bufferIsRNS_9allocatorIsEEED2Ev($2);
 STACKTOP = sp;return;
}
function __ZNSt3__26vectorIsNS_9allocatorIsEEE18__construct_at_endEm($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$promoted = 0, $2 = 0, $3 = 0, $scevgep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $$promoted = HEAP32[$2>>2]|0;
 $3 = $1 << 1;
 _memset(($$promoted|0),0,($3|0))|0;
 $scevgep = (($$promoted) + ($1<<1)|0);
 HEAP32[$2>>2] = $scevgep;
 return;
}
function __ZNSt3__214__split_bufferIsRNS_9allocatorIsEEEC2EmmS3_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 12|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($0)) + 16|0);
 HEAP32[$5>>2] = $3;
 $6 = ($1|0)==(0);
 do {
  if ($6) {
   $15 = 0;
  } else {
   $7 = ($1|0)<(0);
   if (!($7)) {
    $13 = $1 << 1;
    $14 = (__Znwm($13)|0);
    $15 = $14;
    break;
   }
   $8 = (___cxa_allocate_exception(8)|0);
   __THREW__ = 0;
   invoke_vii(45,($8|0),(43841|0));
   $9 = __THREW__; __THREW__ = 0;
   $10 = $9&1;
   if ($10) {
    $11 = ___cxa_find_matching_catch_2()|0;
    $12 = (getTempRet0() | 0);
    ___cxa_free_exception(($8|0));
    ___resumeException($11|0);
    // unreachable;
   } else {
    HEAP32[$8>>2] = (30800);
    ___cxa_throw(($8|0),(24744|0),(226|0));
    // unreachable;
   }
  }
 } while(0);
 HEAP32[$0>>2] = $15;
 $16 = (($15) + ($2<<1)|0);
 $17 = ((($0)) + 8|0);
 HEAP32[$17>>2] = $16;
 $18 = ((($0)) + 4|0);
 HEAP32[$18>>2] = $16;
 $19 = (($15) + ($1<<1)|0);
 $20 = ((($0)) + 12|0);
 HEAP32[$20>>2] = $19;
 return;
}
function __ZNSt3__214__split_bufferIsRNS_9allocatorIsEEE18__construct_at_endEm($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$promoted = 0, $2 = 0, $3 = 0, $scevgep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $$promoted = HEAP32[$2>>2]|0;
 $3 = $1 << 1;
 _memset(($$promoted|0),0,($3|0))|0;
 $scevgep = (($$promoted) + ($1<<1)|0);
 HEAP32[$2>>2] = $scevgep;
 return;
}
function __ZNSt3__26vectorIsNS_9allocatorIsEEE26__swap_out_circular_bufferERNS_14__split_bufferIsRS2_EE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1)) + 4|0);
 $6 = $2;
 $7 = (($4) - ($6))|0;
 $8 = $7 >> 1;
 $9 = HEAP32[$5>>2]|0;
 $10 = (0 - ($8))|0;
 $11 = (($9) + ($10<<1)|0);
 HEAP32[$5>>2] = $11;
 $12 = ($7|0)>(0);
 if ($12) {
  _memcpy(($11|0),($2|0),($7|0))|0;
 }
 $13 = HEAP32[$0>>2]|0;
 $14 = HEAP32[$5>>2]|0;
 HEAP32[$0>>2] = $14;
 HEAP32[$5>>2] = $13;
 $15 = ((($1)) + 8|0);
 $16 = HEAP32[$3>>2]|0;
 $17 = HEAP32[$15>>2]|0;
 HEAP32[$3>>2] = $17;
 HEAP32[$15>>2] = $16;
 $18 = ((($0)) + 8|0);
 $19 = ((($1)) + 12|0);
 $20 = HEAP32[$18>>2]|0;
 $21 = HEAP32[$19>>2]|0;
 HEAP32[$18>>2] = $21;
 HEAP32[$19>>2] = $20;
 $22 = HEAP32[$5>>2]|0;
 HEAP32[$1>>2] = $22;
 return;
}
function __ZNSt3__214__split_bufferIsRNS_9allocatorIsEEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $scevgep$i$i$i = 0, $scevgep4$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==($2|0);
 if (!($5)) {
  $scevgep$i$i$i = ((($4)) + -2|0);
  $6 = $scevgep$i$i$i;
  $7 = $2;
  $8 = (($6) - ($7))|0;
  $9 = $8 >>> 1;
  $10 = $9 ^ -1;
  $scevgep4$i$i$i = (($4) + ($10<<1)|0);
  HEAP32[$3>>2] = $scevgep4$i$i$i;
 }
 $11 = HEAP32[$0>>2]|0;
 $12 = ($11|0)==(0|0);
 if ($12) {
  return;
 }
 __ZdlPv($11);
 return;
}
function __ZNKSt3__26vectorIsNS_9allocatorIsEEE8max_sizeEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2147483647;
}
function __ZNSt3__26vectorIdNS_9allocatorIdEEE8__appendEm($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sroa$speculated$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) - ($6))|0;
 $8 = $7 >> 3;
 $9 = ($8>>>0)<($1>>>0);
 if (!($9)) {
  __ZNSt3__26vectorIdNS_9allocatorIdEEE18__construct_at_endEm($0,$1);
  STACKTOP = sp;return;
 }
 $10 = HEAP32[$0>>2]|0;
 $11 = (($6) - ($10))|0;
 $12 = $11 >> 3;
 $13 = (($12) + ($1))|0;
 $14 = (__ZNKSt3__26vectorIdNS_9allocatorIdEEE8max_sizeEv($0)|0);
 $15 = ($14>>>0)<($13>>>0);
 if ($15) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $16 = ((($0)) + 8|0);
 $17 = ((($0)) + 8|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = HEAP32[$0>>2]|0;
 $20 = (($18) - ($19))|0;
 $21 = $20 >> 3;
 $22 = $14 >>> 1;
 $23 = ($21>>>0)<($22>>>0);
 $24 = $20 >> 2;
 $25 = ($24>>>0)<($13>>>0);
 $$sroa$speculated$i = $25 ? $13 : $24;
 $spec$select$i = $23 ? $$sroa$speculated$i : $14;
 $26 = HEAP32[$5>>2]|0;
 $27 = (($26) - ($19))|0;
 $28 = $27 >> 3;
 __ZNSt3__214__split_bufferIdRNS_9allocatorIdEEEC2EmmS3_($2,$spec$select$i,$28,$16);
 __THREW__ = 0;
 invoke_vii(49,($2|0),($1|0));
 $29 = __THREW__; __THREW__ = 0;
 $30 = $29&1;
 if ($30) {
  $33 = ___cxa_find_matching_catch_2()|0;
  $34 = (getTempRet0() | 0);
  __ZNSt3__214__split_bufferIdRNS_9allocatorIdEEED2Ev($2);
  ___resumeException($33|0);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vii(50,($0|0),($2|0));
 $31 = __THREW__; __THREW__ = 0;
 $32 = $31&1;
 if ($32) {
  $33 = ___cxa_find_matching_catch_2()|0;
  $34 = (getTempRet0() | 0);
  __ZNSt3__214__split_bufferIdRNS_9allocatorIdEEED2Ev($2);
  ___resumeException($33|0);
  // unreachable;
 }
 __ZNSt3__214__split_bufferIdRNS_9allocatorIdEEED2Ev($2);
 STACKTOP = sp;return;
}
function __ZNSt3__26vectorIdNS_9allocatorIdEEE18__construct_at_endEm($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$promoted = 0, $2 = 0, $3 = 0, $scevgep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $$promoted = HEAP32[$2>>2]|0;
 $3 = $1 << 3;
 _memset(($$promoted|0),0,($3|0))|0;
 $scevgep = (($$promoted) + ($1<<3)|0);
 HEAP32[$2>>2] = $scevgep;
 return;
}
function __ZNSt3__214__split_bufferIdRNS_9allocatorIdEEEC2EmmS3_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 12|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($0)) + 16|0);
 HEAP32[$5>>2] = $3;
 $6 = ($1|0)==(0);
 do {
  if ($6) {
   $15 = 0;
  } else {
   $7 = ($1>>>0)>(536870911);
   if (!($7)) {
    $13 = $1 << 3;
    $14 = (__Znwm($13)|0);
    $15 = $14;
    break;
   }
   $8 = (___cxa_allocate_exception(8)|0);
   __THREW__ = 0;
   invoke_vii(45,($8|0),(43841|0));
   $9 = __THREW__; __THREW__ = 0;
   $10 = $9&1;
   if ($10) {
    $11 = ___cxa_find_matching_catch_2()|0;
    $12 = (getTempRet0() | 0);
    ___cxa_free_exception(($8|0));
    ___resumeException($11|0);
    // unreachable;
   } else {
    HEAP32[$8>>2] = (30800);
    ___cxa_throw(($8|0),(24744|0),(226|0));
    // unreachable;
   }
  }
 } while(0);
 HEAP32[$0>>2] = $15;
 $16 = (($15) + ($2<<3)|0);
 $17 = ((($0)) + 8|0);
 HEAP32[$17>>2] = $16;
 $18 = ((($0)) + 4|0);
 HEAP32[$18>>2] = $16;
 $19 = (($15) + ($1<<3)|0);
 $20 = ((($0)) + 12|0);
 HEAP32[$20>>2] = $19;
 return;
}
function __ZNSt3__214__split_bufferIdRNS_9allocatorIdEEE18__construct_at_endEm($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$promoted = 0, $2 = 0, $3 = 0, $scevgep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $$promoted = HEAP32[$2>>2]|0;
 $3 = $1 << 3;
 _memset(($$promoted|0),0,($3|0))|0;
 $scevgep = (($$promoted) + ($1<<3)|0);
 HEAP32[$2>>2] = $scevgep;
 return;
}
function __ZNSt3__26vectorIdNS_9allocatorIdEEE26__swap_out_circular_bufferERNS_14__split_bufferIdRS2_EE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1)) + 4|0);
 $6 = $2;
 $7 = (($4) - ($6))|0;
 $8 = $7 >> 3;
 $9 = HEAP32[$5>>2]|0;
 $10 = (0 - ($8))|0;
 $11 = (($9) + ($10<<3)|0);
 HEAP32[$5>>2] = $11;
 $12 = ($7|0)>(0);
 if ($12) {
  _memcpy(($11|0),($2|0),($7|0))|0;
 }
 $13 = HEAP32[$0>>2]|0;
 $14 = HEAP32[$5>>2]|0;
 HEAP32[$0>>2] = $14;
 HEAP32[$5>>2] = $13;
 $15 = ((($1)) + 8|0);
 $16 = HEAP32[$3>>2]|0;
 $17 = HEAP32[$15>>2]|0;
 HEAP32[$3>>2] = $17;
 HEAP32[$15>>2] = $16;
 $18 = ((($0)) + 8|0);
 $19 = ((($1)) + 12|0);
 $20 = HEAP32[$18>>2]|0;
 $21 = HEAP32[$19>>2]|0;
 HEAP32[$18>>2] = $21;
 HEAP32[$19>>2] = $20;
 $22 = HEAP32[$5>>2]|0;
 HEAP32[$1>>2] = $22;
 return;
}
function __ZNSt3__214__split_bufferIdRNS_9allocatorIdEEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $scevgep$i$i$i = 0, $scevgep4$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==($2|0);
 if (!($5)) {
  $scevgep$i$i$i = ((($4)) + -8|0);
  $6 = $scevgep$i$i$i;
  $7 = $2;
  $8 = (($6) - ($7))|0;
  $9 = $8 >>> 3;
  $10 = $9 ^ -1;
  $scevgep4$i$i$i = (($4) + ($10<<3)|0);
  HEAP32[$3>>2] = $scevgep4$i$i$i;
 }
 $11 = HEAP32[$0>>2]|0;
 $12 = ($11|0)==(0|0);
 if ($12) {
  return;
 }
 __ZdlPv($11);
 return;
}
function __ZN10maxiLagExpIdE4initEdd($0,$1,$2) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 var $3 = 0.0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[$0>>3] = $1;
 $3 = 1.0 - $1;
 $4 = ((($0)) + 8|0);
 HEAPF64[$4>>3] = $3;
 $5 = ((($0)) + 16|0);
 HEAPF64[$5>>3] = $2;
 return;
}
function __ZN10maxiLagExpIfE4initEff($0,$1,$2) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 var $3 = 0.0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF32[$0>>2] = $1;
 $3 = 1.0 - $1;
 $4 = ((($0)) + 4|0);
 HEAPF32[$4>>2] = $3;
 $5 = ((($0)) + 8|0);
 HEAPF32[$5>>2] = $2;
 return;
}
function __GLOBAL__sub_I_maximilian_embind_cpp() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___cxx_global_var_init();
 return;
}
function ___cxx_global_var_init() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN38EmscriptenBindingInitializer_my_moduleC2Ev(0);
 return;
}
function __ZN38EmscriptenBindingInitializer_my_moduleC2Ev($0) {
 $0 = $0|0;
 var $$byval_copy48 = 0, $$fca$0$load = 0, $$fca$0$load122 = 0, $$fca$0$load134 = 0, $$fca$0$load146 = 0, $$fca$0$load158 = 0, $$fca$0$load170 = 0, $$fca$0$load184 = 0, $$fca$0$load196 = 0, $$fca$0$load252 = 0, $$fca$0$load264 = 0, $$fca$0$load308 = 0, $$fca$0$load320 = 0, $$fca$0$load80 = 0, $$fca$1$gep$i = 0, $$fca$1$gep$i352 = 0, $$fca$1$gep$i364 = 0, $$fca$1$gep$i368 = 0, $$fca$1$gep$i374 = 0, $$fca$1$gep$i380 = 0;
 var $$fca$1$gep$i386 = 0, $$fca$1$gep$i392 = 0, $$fca$1$gep$i398 = 0, $$fca$1$gep$i404 = 0, $$fca$1$gep$i410 = 0, $$fca$1$gep$i416 = 0, $$fca$1$gep$i422 = 0, $$fca$1$gep$i428 = 0, $$fca$1$gep$i434 = 0, $$fca$1$gep$i440 = 0, $$fca$1$gep$i446 = 0, $$fca$1$gep$i452 = 0, $$fca$1$gep$i458 = 0, $$fca$1$gep$i470 = 0, $$fca$1$gep$i482 = 0, $$fca$1$gep$i488 = 0, $$fca$1$gep$i494 = 0, $$fca$1$gep$i500 = 0, $$fca$1$gep$i506 = 0, $$fca$1$gep$i512 = 0;
 var $$fca$1$gep$i518 = 0, $$fca$1$gep$i524 = 0, $$fca$1$gep$i536 = 0, $$fca$1$gep$i548 = 0, $$fca$1$gep$i554 = 0, $$fca$1$gep$i560 = 0, $$fca$1$gep$i566 = 0, $$fca$1$gep$i572 = 0, $$fca$1$gep$i578 = 0, $$fca$1$gep$i584 = 0, $$fca$1$gep$i596 = 0, $$fca$1$gep$i608 = 0, $$fca$1$gep$i620 = 0, $$fca$1$gep$i626 = 0, $$fca$1$gep$i632 = 0, $$fca$1$gep$i638 = 0, $$fca$1$gep$i644 = 0, $$fca$1$gep$i650 = 0, $$fca$1$gep$i656 = 0, $$fca$1$gep$i662 = 0;
 var $$fca$1$gep$i668 = 0, $$fca$1$gep$i674 = 0, $$fca$1$gep$i680 = 0, $$fca$1$gep$i686 = 0, $$fca$1$gep$i692 = 0, $$fca$1$gep$i698 = 0, $$fca$1$gep$i704 = 0, $$fca$1$gep$i710 = 0, $$fca$1$gep$i716 = 0, $$fca$1$gep$i722 = 0, $$fca$1$gep$i728 = 0, $$fca$1$gep$i734 = 0, $$fca$1$gep$i740 = 0, $$fca$1$gep$i746 = 0, $$fca$1$gep$i752 = 0, $$fca$1$gep$i758 = 0, $$fca$1$gep$i764 = 0, $$fca$1$gep$i770 = 0, $$fca$1$gep$i776 = 0, $$fca$1$gep$i782 = 0;
 var $$fca$1$gep$i788 = 0, $$fca$1$gep$i794 = 0, $$fca$1$gep$i800 = 0, $$fca$1$gep$i812 = 0, $$fca$1$gep$i818 = 0, $$fca$1$gep$i824 = 0, $$fca$1$gep$i830 = 0, $$fca$1$gep$i836 = 0, $$fca$1$gep$i842 = 0, $$fca$1$gep$i848 = 0, $$fca$1$gep$i854 = 0, $$fca$1$gep$i860 = 0, $$fca$1$gep$i866 = 0, $$fca$1$gep$i872 = 0, $$fca$1$gep$i878 = 0, $$fca$1$gep$i884 = 0, $$fca$1$gep$i890 = 0, $$fca$1$gep$i896 = 0, $$fca$1$gep$i908 = 0, $$fca$1$gep$i920 = 0;
 var $$fca$1$gep$i932 = 0, $$fca$1$gep$i944 = 0, $$fca$1$gep$i956 = 0, $$fca$1$gep$i968 = 0, $$fca$1$gep$i980 = 0, $$fca$1$gep120 = 0, $$fca$1$gep124 = 0, $$fca$1$gep132 = 0, $$fca$1$gep136 = 0, $$fca$1$gep144 = 0, $$fca$1$gep148 = 0, $$fca$1$gep156 = 0, $$fca$1$gep160 = 0, $$fca$1$gep168 = 0, $$fca$1$gep172 = 0, $$fca$1$gep182 = 0, $$fca$1$gep186 = 0, $$fca$1$gep194 = 0, $$fca$1$gep198 = 0, $$fca$1$gep250 = 0;
 var $$fca$1$gep254 = 0, $$fca$1$gep262 = 0, $$fca$1$gep266 = 0, $$fca$1$gep306 = 0, $$fca$1$gep310 = 0, $$fca$1$gep318 = 0, $$fca$1$gep322 = 0, $$fca$1$gep4$i = 0, $$fca$1$gep4$i350 = 0, $$fca$1$gep4$i362 = 0, $$fca$1$gep4$i468 = 0, $$fca$1$gep4$i480 = 0, $$fca$1$gep4$i534 = 0, $$fca$1$gep4$i546 = 0, $$fca$1$gep4$i594 = 0, $$fca$1$gep4$i606 = 0, $$fca$1$gep4$i618 = 0, $$fca$1$gep4$i810 = 0, $$fca$1$gep4$i906 = 0, $$fca$1$gep4$i918 = 0;
 var $$fca$1$gep4$i930 = 0, $$fca$1$gep4$i942 = 0, $$fca$1$gep4$i954 = 0, $$fca$1$gep4$i966 = 0, $$fca$1$gep4$i978 = 0, $$fca$1$gep70 = 0, $$fca$1$gep72 = 0, $$fca$1$gep78 = 0, $$fca$1$gep82 = 0, $$fca$1$load = 0, $$fca$1$load125 = 0, $$fca$1$load137 = 0, $$fca$1$load149 = 0, $$fca$1$load161 = 0, $$fca$1$load173 = 0, $$fca$1$load187 = 0, $$fca$1$load199 = 0, $$fca$1$load255 = 0, $$fca$1$load267 = 0, $$fca$1$load311 = 0;
 var $$fca$1$load323 = 0, $$fca$1$load83 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
 var $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0;
 var $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0;
 var $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0;
 var $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0;
 var $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0;
 var $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0;
 var $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0;
 var $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0;
 var $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0;
 var $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0;
 var $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0;
 var $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0;
 var $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0;
 var $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0;
 var $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0;
 var $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0;
 var $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0;
 var $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0;
 var $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0;
 var $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0;
 var $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0;
 var $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0;
 var $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0;
 var $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0;
 var $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0;
 var $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0;
 var $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0;
 var $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0;
 var $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0;
 var $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0;
 var $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0;
 var $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0;
 var $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0;
 var $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0;
 var $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0;
 var $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0;
 var $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0;
 var $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0;
 var $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $$byval_copy48 = sp + 224|0;
 $1 = sp + 8|0;
 $2 = sp;
 $3 = sp + 216|0;
 $4 = sp + 208|0;
 $5 = sp + 200|0;
 $6 = sp + 192|0;
 $7 = sp + 184|0;
 $8 = sp + 176|0;
 $9 = sp + 168|0;
 $10 = sp + 160|0;
 $11 = sp + 152|0;
 $12 = sp + 144|0;
 $13 = sp + 136|0;
 $14 = sp + 128|0;
 $15 = sp + 120|0;
 $16 = sp + 112|0;
 $17 = sp + 104|0;
 $18 = sp + 96|0;
 $19 = sp + 88|0;
 $20 = sp + 80|0;
 $21 = sp + 72|0;
 $22 = sp + 64|0;
 $23 = sp + 56|0;
 $24 = sp + 48|0;
 $25 = sp + 40|0;
 $26 = sp + 32|0;
 $27 = sp + 24|0;
 $28 = sp + 16|0;
 __ZN10emscripten15register_vectorIiEENS_6class_INSt3__26vectorIT_NS2_9allocatorIS4_EEEENS_8internal11NoBaseClassEEEPKc(31143);
 __ZN10emscripten15register_vectorIdEENS_6class_INSt3__26vectorIT_NS2_9allocatorIS4_EEEENS_8internal11NoBaseClassEEEPKc(31153);
 __ZN10emscripten15register_vectorIcEENS_6class_INSt3__26vectorIT_NS2_9allocatorIS4_EEEENS_8internal11NoBaseClassEEEPKc(31166);
 __ZN10emscripten15register_vectorIfEENS_6class_INSt3__26vectorIT_NS2_9allocatorIS4_EEEENS_8internal11NoBaseClassEEEPKc(31177);
 __ZN10emscripten8internal11NoBaseClass6verifyI11vectorToolsEEvv();
 $29 = (__ZN10emscripten8internal11NoBaseClass11getUpcasterI11vectorToolsEEPFvvEv()|0);
 $30 = (__ZN10emscripten8internal11NoBaseClass13getDowncasterI11vectorToolsEEPFvvEv()|0);
 $31 = (__ZN10emscripten8internal6TypeIDI11vectorToolsE3getEv()|0);
 $32 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerI11vectorToolsEEE3getEv()|0);
 $33 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIK11vectorToolsEEE3getEv()|0);
 $34 = (__ZN10emscripten8internal11NoBaseClass3getEv()|0);
 $35 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 $36 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0);
 $37 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0);
 $38 = (__ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv()|0);
 __embind_register_class(($31|0),($32|0),($33|0),($34|0),($35|0),(69|0),($36|0),($29|0),($37|0),($30|0),(31189|0),($38|0),(238|0));
 $39 = (__ZN10emscripten8internal6TypeIDI11vectorToolsE3getEv()|0);
 $40 = (__ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJP11vectorToolsEE8getCountEv($$byval_copy48)|0);
 $41 = (__ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJP11vectorToolsEE8getTypesEv($$byval_copy48)|0);
 $42 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 __embind_register_class_constructor(($39|0),($40|0),($41|0),($42|0),(70|0),(1|0));
 $43 = (__ZN10emscripten8internal6TypeIDI11vectorToolsE3getEv()|0);
 $44 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvRNSt3__26vectorIdNS4_9allocatorIdEEEEEE8getCountEv($$byval_copy48)|0);
 $45 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvRNSt3__26vectorIdNS4_9allocatorIdEEEEEE8getTypesEv($$byval_copy48)|0);
 $46 = (__ZN10emscripten8internal19getGenericSignatureIJviiEEEPKcv()|0);
 __embind_register_class_class_function(($43|0),(31201|0),($44|0),($45|0),($46|0),(51|0),(239|0));
 $47 = (__ZN10emscripten8internal6TypeIDI11vectorToolsE3getEv()|0);
 $48 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvRNSt3__26vectorIfNS4_9allocatorIfEEEEEE8getCountEv($$byval_copy48)|0);
 $49 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvRNSt3__26vectorIfNS4_9allocatorIfEEEEEE8getTypesEv($$byval_copy48)|0);
 $50 = (__ZN10emscripten8internal19getGenericSignatureIJviiEEEPKcv()|0);
 __embind_register_class_class_function(($47|0),(31216|0),($48|0),($49|0),($50|0),(52|0),(240|0));
 __ZN10emscripten8internal11NoBaseClass6verifyI12maxiSettingsEEvv();
 $51 = (__ZN10emscripten8internal11NoBaseClass11getUpcasterI12maxiSettingsEEPFvvEv()|0);
 $52 = (__ZN10emscripten8internal11NoBaseClass13getDowncasterI12maxiSettingsEEPFvvEv()|0);
 $53 = (__ZN10emscripten8internal6TypeIDI12maxiSettingsE3getEv()|0);
 $54 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerI12maxiSettingsEEE3getEv()|0);
 $55 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIK12maxiSettingsEEE3getEv()|0);
 $56 = (__ZN10emscripten8internal11NoBaseClass3getEv()|0);
 $57 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 $58 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0);
 $59 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0);
 $60 = (__ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv()|0);
 __embind_register_class(($53|0),($54|0),($55|0),($56|0),($57|0),(71|0),($58|0),($51|0),($59|0),($52|0),(31233|0),($60|0),(241|0));
 $61 = (__ZN10emscripten8internal6TypeIDI12maxiSettingsE3getEv()|0);
 $62 = (__ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJP12maxiSettingsEE8getCountEv($$byval_copy48)|0);
 $63 = (__ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJP12maxiSettingsEE8getTypesEv($$byval_copy48)|0);
 $64 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 __embind_register_class_constructor(($61|0),($62|0),($63|0),($64|0),(72|0),(2|0));
 $65 = (__ZN10emscripten8internal6TypeIDI12maxiSettingsE3getEv()|0);
 $66 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJviiiEE8getCountEv($$byval_copy48)|0);
 $67 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJviiiEE8getTypesEv($$byval_copy48)|0);
 $68 = (__ZN10emscripten8internal19getGenericSignatureIJviiiiEEEPKcv()|0);
 __embind_register_class_class_function(($65|0),(31246|0),($66|0),($67|0),($68|0),(9|0),(4|0));
 $69 = (__ZN10emscripten8internal6TypeIDI12maxiSettingsE3getEv()|0);
 $70 = (__ZN10emscripten8internal6TypeIDIiE3getEv()|0);
 $71 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0);
 HEAP32[$1>>2] = (73);
 $$fca$1$gep4$i = ((($1)) + 4|0);
 HEAP32[$$fca$1$gep4$i>>2] = 0;
 ;HEAP32[$$byval_copy48>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy48+4>>2]=HEAP32[$1+4>>2]|0;
 $72 = (__ZN10emscripten8internal12GetterPolicyIM12maxiSettingsKFivEE10getContextES4_($$byval_copy48)|0);
 $73 = (__ZN10emscripten8internal6TypeIDIiE3getEv()|0);
 $74 = (__ZN10emscripten8internal19getGenericSignatureIJviiiEEEPKcv()|0);
 HEAP32[$2>>2] = (53);
 $$fca$1$gep$i = ((($2)) + 4|0);
 HEAP32[$$fca$1$gep$i>>2] = 0;
 ;HEAP32[$$byval_copy48>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy48+4>>2]=HEAP32[$2+4>>2]|0;
 $75 = (__ZN10emscripten8internal12SetterPolicyIM12maxiSettingsFviEE10getContextES4_($$byval_copy48)|0);
 __embind_register_class_property(($69|0),(31252|0),($70|0),($71|0),(42|0),($72|0),($73|0),($74|0),(5|0),($75|0));
 $76 = (__ZN10emscripten8internal6TypeIDI12maxiSettingsE3getEv()|0);
 $77 = (__ZN10emscripten8internal6TypeIDIiE3getEv()|0);
 $78 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0);
 HEAP32[$1>>2] = (74);
 $$fca$1$gep4$i350 = ((($1)) + 4|0);
 HEAP32[$$fca$1$gep4$i350>>2] = 0;
 ;HEAP32[$$byval_copy48>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy48+4>>2]=HEAP32[$1+4>>2]|0;
 $79 = (__ZN10emscripten8internal12GetterPolicyIM12maxiSettingsKFivEE10getContextES4_($$byval_copy48)|0);
 $80 = (__ZN10emscripten8internal6TypeIDIiE3getEv()|0);
 $81 = (__ZN10emscripten8internal19getGenericSignatureIJviiiEEEPKcv()|0);
 HEAP32[$2>>2] = (54);
 $$fca$1$gep$i352 = ((($2)) + 4|0);
 HEAP32[$$fca$1$gep$i352>>2] = 0;
 ;HEAP32[$$byval_copy48>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy48+4>>2]=HEAP32[$2+4>>2]|0;
 $82 = (__ZN10emscripten8internal12SetterPolicyIM12maxiSettingsFviEE10getContextES4_($$byval_copy48)|0);
 __embind_register_class_property(($76|0),(31263|0),($77|0),($78|0),(42|0),($79|0),($80|0),($81|0),(5|0),($82|0));
 $83 = (__ZN10emscripten8internal6TypeIDI12maxiSettingsE3getEv()|0);
 $84 = (__ZN10emscripten8internal6TypeIDIiE3getEv()|0);
 $85 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0);
 HEAP32[$1>>2] = (75);
 $$fca$1$gep4$i362 = ((($1)) + 4|0);
 HEAP32[$$fca$1$gep4$i362>>2] = 0;
 ;HEAP32[$$byval_copy48>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy48+4>>2]=HEAP32[$1+4>>2]|0;
 $86 = (__ZN10emscripten8internal12GetterPolicyIM12maxiSettingsKFivEE10getContextES4_($$byval_copy48)|0);
 $87 = (__ZN10emscripten8internal6TypeIDIiE3getEv()|0);
 $88 = (__ZN10emscripten8internal19getGenericSignatureIJviiiEEEPKcv()|0);
 HEAP32[$2>>2] = (55);
 $$fca$1$gep$i364 = ((($2)) + 4|0);
 HEAP32[$$fca$1$gep$i364>>2] = 0;
 ;HEAP32[$$byval_copy48>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy48+4>>2]=HEAP32[$2+4>>2]|0;
 $89 = (__ZN10emscripten8internal12SetterPolicyIM12maxiSettingsFviEE10getContextES4_($$byval_copy48)|0);
 __embind_register_class_property(($83|0),(31272|0),($84|0),($85|0),(42|0),($86|0),($87|0),($88|0),(5|0),($89|0));
 __ZN10emscripten8internal11NoBaseClass6verifyI7maxiOscEEvv();
 $90 = (__ZN10emscripten8internal11NoBaseClass11getUpcasterI7maxiOscEEPFvvEv()|0);
 $91 = (__ZN10emscripten8internal11NoBaseClass13getDowncasterI7maxiOscEEPFvvEv()|0);
 $92 = (__ZN10emscripten8internal6TypeIDI7maxiOscE3getEv()|0);
 $93 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerI7maxiOscEEE3getEv()|0);
 $94 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIK7maxiOscEEE3getEv()|0);
 $95 = (__ZN10emscripten8internal11NoBaseClass3getEv()|0);
 $96 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 $97 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0);
 $98 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0);
 $99 = (__ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv()|0);
 __embind_register_class(($92|0),($93|0),($94|0),($95|0),($96|0),(76|0),($97|0),($90|0),($98|0),($91|0),(31283|0),($99|0),(242|0));
 $100 = (__ZN10emscripten8internal6TypeIDINSt3__210shared_ptrI7maxiOscEEE3getEv()|0);
 $101 = (__ZN10emscripten8internal6TypeIDI7maxiOscE3getEv()|0);
 $102 = (__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiOscEEE18get_sharing_policyEv()|0);
 $103 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 $104 = (__ZN10emscripten8internal19getGenericSignatureIJiEEEPKcv()|0);
 $105 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0);
 $106 = (__ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv()|0);
 __embind_register_smart_ptr(($100|0),($101|0),(31291|0),($102|0),($103|0),(77|0),($104|0),(3|0),($105|0),(43|0),($106|0),(243|0));
 $107 = (__ZN10emscripten8internal6TypeIDI7maxiOscE3getEv()|0);
 $108 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210shared_ptrI7maxiOscEEEE8getCountEv($$byval_copy48)|0);
 $109 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210shared_ptrI7maxiOscEEEE8getTypesEv($$byval_copy48)|0);
 $110 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 __embind_register_class_constructor(($107|0),($108|0),($109|0),($110|0),(78|0),(244|0));
 HEAP32[$$byval_copy48>>2] = (1);
 $$fca$1$gep$i368 = ((($$byval_copy48)) + 4|0);
 HEAP32[$$fca$1$gep$i368>>2] = 0;
 $111 = (__ZN10emscripten8internal6TypeIDI7maxiOscE3getEv()|0);
 $112 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7maxiOscEEdEE8getCountEv($1)|0);
 $113 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7maxiOscEEdEE8getTypesEv($1)|0);
 $114 = (__ZN10emscripten8internal19getGenericSignatureIJdiidEEEPKcv()|0);
 $115 = (__ZN10emscripten8internal10getContextIM7maxiOscFddEEEPT_RKS5_($$byval_copy48)|0);
 __embind_register_class_function(($111|0),(31311|0),($112|0),($113|0),($114|0),(1|0),($115|0),0);
 HEAP32[$$byval_copy48>>2] = (2);
 $$fca$1$gep$i374 = ((($$byval_copy48)) + 4|0);
 HEAP32[$$fca$1$gep$i374>>2] = 0;
 $116 = (__ZN10emscripten8internal6TypeIDI7maxiOscE3getEv()|0);
 $117 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7maxiOscEEdEE8getCountEv($1)|0);
 $118 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7maxiOscEEdEE8getTypesEv($1)|0);
 $119 = (__ZN10emscripten8internal19getGenericSignatureIJdiidEEEPKcv()|0);
 $120 = (__ZN10emscripten8internal10getContextIM7maxiOscFddEEEPT_RKS5_($$byval_copy48)|0);
 __embind_register_class_function(($116|0),(31320|0),($117|0),($118|0),($119|0),(1|0),($120|0),0);
 HEAP32[$4>>2] = (3);
 $$fca$1$gep318 = ((($4)) + 4|0);
 HEAP32[$$fca$1$gep318>>2] = 0;
 ;HEAP32[$$byval_copy48>>2]=HEAP32[$4>>2]|0;HEAP32[$$byval_copy48+4>>2]=HEAP32[$4+4>>2]|0;
 __ZN10emscripten15select_overloadIFddE7maxiOscEEDtfp_EMT0_T_($3,$$byval_copy48);
 $$fca$0$load320 = HEAP32[$3>>2]|0;
 $$fca$1$gep322 = ((($3)) + 4|0);
 $$fca$1$load323 = HEAP32[$$fca$1$gep322>>2]|0;
 HEAP32[$$byval_copy48>>2] = $$fca$0$load320;
 $$fca$1$gep$i380 = ((($$byval_copy48)) + 4|0);
 HEAP32[$$fca$1$gep$i380>>2] = $$fca$1$load323;
 $121 = (__ZN10emscripten8internal6TypeIDI7maxiOscE3getEv()|0);
 $122 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7maxiOscEEdEE8getCountEv($1)|0);
 $123 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7maxiOscEEdEE8getTypesEv($1)|0);
 $124 = (__ZN10emscripten8internal19getGenericSignatureIJdiidEEEPKcv()|0);
 $125 = (__ZN10emscripten8internal10getContextIM7maxiOscFddEEEPT_RKS5_($$byval_copy48)|0);
 __embind_register_class_function(($121|0),(31328|0),($122|0),($123|0),($124|0),(1|0),($125|0),0);
 HEAP32[$6>>2] = (1);
 $$fca$1$gep306 = ((($6)) + 4|0);
 HEAP32[$$fca$1$gep306>>2] = 0;
 ;HEAP32[$$byval_copy48>>2]=HEAP32[$6>>2]|0;HEAP32[$$byval_copy48+4>>2]=HEAP32[$6+4>>2]|0;
 __ZN10emscripten15select_overloadIFddddE7maxiOscEEDtfp_EMT0_T_($5,$$byval_copy48);
 $$fca$0$load308 = HEAP32[$5>>2]|0;
 $$fca$1$gep310 = ((($5)) + 4|0);
 $$fca$1$load311 = HEAP32[$$fca$1$gep310>>2]|0;
 HEAP32[$$byval_copy48>>2] = $$fca$0$load308;
 $$fca$1$gep$i386 = ((($$byval_copy48)) + 4|0);
 HEAP32[$$fca$1$gep$i386>>2] = $$fca$1$load311;
 $126 = (__ZN10emscripten8internal6TypeIDI7maxiOscE3getEv()|0);
 $127 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7maxiOscEEdddEE8getCountEv($1)|0);
 $128 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7maxiOscEEdddEE8getTypesEv($1)|0);
 $129 = (__ZN10emscripten8internal19getGenericSignatureIJdiidddEEEPKcv()|0);
 $130 = (__ZN10emscripten8internal10getContextIM7maxiOscFddddEEEPT_RKS5_($$byval_copy48)|0);
 __embind_register_class_function(($126|0),(31328|0),($127|0),($128|0),($129|0),(1|0),($130|0),0);
 HEAP32[$$byval_copy48>>2] = (4);
 $$fca$1$gep$i392 = ((($$byval_copy48)) + 4|0);
 HEAP32[$$fca$1$gep$i392>>2] = 0;
 $131 = (__ZN10emscripten8internal6TypeIDI7maxiOscE3getEv()|0);
 $132 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7maxiOscEEdEE8getCountEv($1)|0);
 $133 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7maxiOscEEdEE8getTypesEv($1)|0);
 $134 = (__ZN10emscripten8internal19getGenericSignatureIJdiidEEEPKcv()|0);
 $135 = (__ZN10emscripten8internal10getContextIM7maxiOscFddEEEPT_RKS5_($$byval_copy48)|0);
 __embind_register_class_function(($131|0),(31335|0),($132|0),($133|0),($134|0),(1|0),($135|0),0);
 HEAP32[$$byval_copy48>>2] = (5);
 $$fca$1$gep$i398 = ((($$byval_copy48)) + 4|0);
 HEAP32[$$fca$1$gep$i398>>2] = 0;
 $136 = (__ZN10emscripten8internal6TypeIDI7maxiOscE3getEv()|0);
 $137 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7maxiOscEEdEE8getCountEv($1)|0);
 $138 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7maxiOscEEdEE8getTypesEv($1)|0);
 $139 = (__ZN10emscripten8internal19getGenericSignatureIJdiidEEEPKcv()|0);
 $140 = (__ZN10emscripten8internal10getContextIM7maxiOscFddEEEPT_RKS5_($$byval_copy48)|0);
 __embind_register_class_function(($136|0),(31339|0),($137|0),($138|0),($139|0),(1|0),($140|0),0);
 HEAP32[$$byval_copy48>>2] = (6);
 $$fca$1$gep$i404 = ((($$byval_copy48)) + 4|0);
 HEAP32[$$fca$1$gep$i404>>2] = 0;
 $141 = (__ZN10emscripten8internal6TypeIDI7maxiOscE3getEv()|0);
 $142 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7maxiOscEEdEE8getCountEv($1)|0);
 $143 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7maxiOscEEdEE8getTypesEv($1)|0);
 $144 = (__ZN10emscripten8internal19getGenericSignatureIJdiidEEEPKcv()|0);
 $145 = (__ZN10emscripten8internal10getContextIM7maxiOscFddEEEPT_RKS5_($$byval_copy48)|0);
 __embind_register_class_function(($141|0),(31348|0),($142|0),($143|0),($144|0),(1|0),($145|0),0);
 HEAP32[$$byval_copy48>>2] = (1);
 $$fca$1$gep$i410 = ((($$byval_copy48)) + 4|0);
 HEAP32[$$fca$1$gep$i410>>2] = 0;
 $146 = (__ZN10emscripten8internal6TypeIDI7maxiOscE3getEv()|0);
 $147 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7maxiOscEEddEE8getCountEv($1)|0);
 $148 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7maxiOscEEddEE8getTypesEv($1)|0);
 $149 = (__ZN10emscripten8internal19getGenericSignatureIJdiiddEEEPKcv()|0);
 $150 = (__ZN10emscripten8internal10getContextIM7maxiOscFdddEEEPT_RKS5_($$byval_copy48)|0);
 __embind_register_class_function(($146|0),(31355|0),($147|0),($148|0),($149|0),(1|0),($150|0),0);
 HEAP32[$$byval_copy48>>2] = (1);
 $$fca$1$gep$i416 = ((($$byval_copy48)) + 4|0);
 HEAP32[$$fca$1$gep$i416>>2] = 0;
 $151 = (__ZN10emscripten8internal6TypeIDI7maxiOscE3getEv()|0);
 $152 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7maxiOscEEEE8getCountEv($1)|0);
 $153 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7maxiOscEEEE8getTypesEv($1)|0);
 $154 = (__ZN10emscripten8internal19getGenericSignatureIJdiiEEEPKcv()|0);
 $155 = (__ZN10emscripten8internal10getContextIM7maxiOscFdvEEEPT_RKS5_($$byval_copy48)|0);
 __embind_register_class_function(($151|0),(31361|0),($152|0),($153|0),($154|0),(1|0),($155|0),0);
 HEAP32[$$byval_copy48>>2] = (7);
 $$fca$1$gep$i422 = ((($$byval_copy48)) + 4|0);
 HEAP32[$$fca$1$gep$i422>>2] = 0;
 $156 = (__ZN10emscripten8internal6TypeIDI7maxiOscE3getEv()|0);
 $157 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7maxiOscEEdEE8getCountEv($1)|0);
 $158 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7maxiOscEEdEE8getTypesEv($1)|0);
 $159 = (__ZN10emscripten8internal19getGenericSignatureIJdiidEEEPKcv()|0);
 $160 = (__ZN10emscripten8internal10getContextIM7maxiOscFddEEEPT_RKS5_($$byval_copy48)|0);
 __embind_register_class_function(($156|0),(31367|0),($157|0),($158|0),($159|0),(1|0),($160|0),0);
 HEAP32[$$byval_copy48>>2] = (8);
 $$fca$1$gep$i428 = ((($$byval_copy48)) + 4|0);
 HEAP32[$$fca$1$gep$i428>>2] = 0;
 $161 = (__ZN10emscripten8internal6TypeIDI7maxiOscE3getEv()|0);
 $162 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7maxiOscEEdEE8getCountEv($1)|0);
 $163 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7maxiOscEEdEE8getTypesEv($1)|0);
 $164 = (__ZN10emscripten8internal19getGenericSignatureIJdiidEEEPKcv()|0);
 $165 = (__ZN10emscripten8internal10getContextIM7maxiOscFddEEEPT_RKS5_($$byval_copy48)|0);
 __embind_register_class_function(($161|0),(31375|0),($162|0),($163|0),($164|0),(1|0),($165|0),0);
 HEAP32[$$byval_copy48>>2] = (9);
 $$fca$1$gep$i434 = ((($$byval_copy48)) + 4|0);
 HEAP32[$$fca$1$gep$i434>>2] = 0;
 $166 = (__ZN10emscripten8internal6TypeIDI7maxiOscE3getEv()|0);
 $167 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7maxiOscEEdEE8getCountEv($1)|0);
 $168 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7maxiOscEEdEE8getTypesEv($1)|0);
 $169 = (__ZN10emscripten8internal19getGenericSignatureIJdiidEEEPKcv()|0);
 $170 = (__ZN10emscripten8internal10getContextIM7maxiOscFddEEEPT_RKS5_($$byval_copy48)|0);
 __embind_register_class_function(($166|0),(31384|0),($167|0),($168|0),($169|0),(1|0),($170|0),0);
 HEAP32[$$byval_copy48>>2] = (2);
 $$fca$1$gep$i440 = ((($$byval_copy48)) + 4|0);
 HEAP32[$$fca$1$gep$i440>>2] = 0;
 $171 = (__ZN10emscripten8internal6TypeIDI7maxiOscE3getEv()|0);
 $172 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7maxiOscEEddEE8getCountEv($1)|0);
 $173 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7maxiOscEEddEE8getTypesEv($1)|0);
 $174 = (__ZN10emscripten8internal19getGenericSignatureIJdiiddEEEPKcv()|0);
 $175 = (__ZN10emscripten8internal10getContextIM7maxiOscFdddEEEPT_RKS5_($$byval_copy48)|0);
 __embind_register_class_function(($171|0),(31389|0),($172|0),($173|0),($174|0),(1|0),($175|0),0);
 HEAP32[$$byval_copy48>>2] = (1);
 $$fca$1$gep$i446 = ((($$byval_copy48)) + 4|0);
 HEAP32[$$fca$1$gep$i446>>2] = 0;
 $176 = (__ZN10emscripten8internal6TypeIDI7maxiOscE3getEv()|0);
 $177 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI7maxiOscEEdEE8getCountEv($1)|0);
 $178 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI7maxiOscEEdEE8getTypesEv($1)|0);
 $179 = (__ZN10emscripten8internal19getGenericSignatureIJviidEEEPKcv()|0);
 $180 = (__ZN10emscripten8internal10getContextIM7maxiOscFvdEEEPT_RKS5_($$byval_copy48)|0);
 __embind_register_class_function(($176|0),(31394|0),($177|0),($178|0),($179|0),(1|0),($180|0),0);
 __ZN10emscripten8internal11NoBaseClass6verifyI12maxiEnvelopeEEvv();
 $181 = (__ZN10emscripten8internal11NoBaseClass11getUpcasterI12maxiEnvelopeEEPFvvEv()|0);
 $182 = (__ZN10emscripten8internal11NoBaseClass13getDowncasterI12maxiEnvelopeEEPFvvEv()|0);
 $183 = (__ZN10emscripten8internal6TypeIDI12maxiEnvelopeE3getEv()|0);
 $184 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerI12maxiEnvelopeEEE3getEv()|0);
 $185 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIK12maxiEnvelopeEEE3getEv()|0);
 $186 = (__ZN10emscripten8internal11NoBaseClass3getEv()|0);
 $187 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 $188 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0);
 $189 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0);
 $190 = (__ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv()|0);
 __embind_register_class(($183|0),($184|0),($185|0),($186|0),($187|0),(79|0),($188|0),($181|0),($189|0),($182|0),(31405|0),($190|0),(245|0));
 $191 = (__ZN10emscripten8internal6TypeIDINSt3__210shared_ptrI12maxiEnvelopeEEE3getEv()|0);
 $192 = (__ZN10emscripten8internal6TypeIDI12maxiEnvelopeE3getEv()|0);
 $193 = (__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI12maxiEnvelopeEEE18get_sharing_policyEv()|0);
 $194 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 $195 = (__ZN10emscripten8internal19getGenericSignatureIJiEEEPKcv()|0);
 $196 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0);
 $197 = (__ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv()|0);
 __embind_register_smart_ptr(($191|0),($192|0),(31418|0),($193|0),($194|0),(80|0),($195|0),(4|0),($196|0),(44|0),($197|0),(246|0));
 $198 = (__ZN10emscripten8internal6TypeIDI12maxiEnvelopeE3getEv()|0);
 $199 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210shared_ptrI12maxiEnvelopeEEEE8getCountEv($$byval_copy48)|0);
 $200 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210shared_ptrI12maxiEnvelopeEEEE8getTypesEv($$byval_copy48)|0);
 $201 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 __embind_register_class_constructor(($198|0),($199|0),($200|0),($201|0),(81|0),(247|0));
 HEAP32[$$byval_copy48>>2] = (1);
 $$fca$1$gep$i452 = ((($$byval_copy48)) + 4|0);
 HEAP32[$$fca$1$gep$i452>>2] = 0;
 $202 = (__ZN10emscripten8internal6TypeIDI12maxiEnvelopeE3getEv()|0);
 $203 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI12maxiEnvelopeEEiRNSt3__26vectorIdNS7_9allocatorIdEEEEEE8getCountEv($1)|0);
 $204 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI12maxiEnvelopeEEiRNSt3__26vectorIdNS7_9allocatorIdEEEEEE8getTypesEv($1)|0);
 $205 = (__ZN10emscripten8internal19getGenericSignatureIJdiiiiEEEPKcv()|0);
 $206 = (__ZN10emscripten8internal10getContextIM12maxiEnvelopeFdiRNSt3__26vectorIdNS3_9allocatorIdEEEEEEEPT_RKSB_($$byval_copy48)|0);
 __embind_register_class_function(($202|0),(31443|0),($203|0),($204|0),($205|0),(1|0),($206|0),0);
 HEAP32[$$byval_copy48>>2] = (2);
 $$fca$1$gep$i458 = ((($$byval_copy48)) + 4|0);
 HEAP32[$$fca$1$gep$i458>>2] = 0;
 $207 = (__ZN10emscripten8internal6TypeIDI12maxiEnvelopeE3getEv()|0);
 $208 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI12maxiEnvelopeEEidEE8getCountEv($1)|0);
 $209 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI12maxiEnvelopeEEidEE8getTypesEv($1)|0);
 $210 = (__ZN10emscripten8internal19getGenericSignatureIJviiidEEEPKcv()|0);
 $211 = (__ZN10emscripten8internal10getContextIM12maxiEnvelopeFvidEEEPT_RKS5_($$byval_copy48)|0);
 __embind_register_class_function(($207|0),(31448|0),($208|0),($209|0),($210|0),(1|0),($211|0),0);
 $212 = (__ZN10emscripten8internal6TypeIDI12maxiEnvelopeE3getEv()|0);
 $213 = (__ZN10emscripten8internal6TypeIDIdE3getEv()|0);
 $214 = (__ZN10emscripten8internal19getGenericSignatureIJdiiEEEPKcv()|0);
 HEAP32[$1>>2] = (2);
 $$fca$1$gep4$i468 = ((($1)) + 4|0);
 HEAP32[$$fca$1$gep4$i468>>2] = 0;
 ;HEAP32[$$byval_copy48>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy48+4>>2]=HEAP32[$1+4>>2]|0;
 $215 = (__ZN10emscripten8internal12GetterPolicyIM12maxiEnvelopeKFdvEE10getContextES4_($$byval_copy48)|0);
 $216 = (__ZN10emscripten8internal6TypeIDIdE3getEv()|0);
 $217 = (__ZN10emscripten8internal19getGenericSignatureIJviidEEEPKcv()|0);
 HEAP32[$2>>2] = (2);
 $$fca$1$gep$i470 = ((($2)) + 4|0);
 HEAP32[$$fca$1$gep$i470>>2] = 0;
 ;HEAP32[$$byval_copy48>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy48+4>>2]=HEAP32[$2+4>>2]|0;
 $218 = (__ZN10emscripten8internal12SetterPolicyIM12maxiEnvelopeFvdEE10getContextES4_($$byval_copy48)|0);
 __embind_register_class_property(($212|0),(31456|0),($213|0),($214|0),(2|0),($215|0),($216|0),($217|0),(3|0),($218|0));
 $219 = (__ZN10emscripten8internal6TypeIDI12maxiEnvelopeE3getEv()|0);
 $220 = (__ZN10emscripten8internal6TypeIDIiE3getEv()|0);
 $221 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0);
 HEAP32[$1>>2] = (82);
 $$fca$1$gep4$i480 = ((($1)) + 4|0);
 HEAP32[$$fca$1$gep4$i480>>2] = 0;
 ;HEAP32[$$byval_copy48>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy48+4>>2]=HEAP32[$1+4>>2]|0;
 $222 = (__ZN10emscripten8internal12GetterPolicyIM12maxiEnvelopeKFivEE10getContextES4_($$byval_copy48)|0);
 $223 = (__ZN10emscripten8internal6TypeIDIiE3getEv()|0);
 $224 = (__ZN10emscripten8internal19getGenericSignatureIJviiiEEEPKcv()|0);
 HEAP32[$2>>2] = (56);
 $$fca$1$gep$i482 = ((($2)) + 4|0);
 HEAP32[$$fca$1$gep$i482>>2] = 0;
 ;HEAP32[$$byval_copy48>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy48+4>>2]=HEAP32[$2+4>>2]|0;
 $225 = (__ZN10emscripten8internal12SetterPolicyIM12maxiEnvelopeFviEE10getContextES4_($$byval_copy48)|0);
 __embind_register_class_property(($219|0),(31466|0),($220|0),($221|0),(45|0),($222|0),($223|0),($224|0),(6|0),($225|0));
 __ZN10emscripten8internal11NoBaseClass6verifyI13maxiDelaylineEEvv();
 $226 = (__ZN10emscripten8internal11NoBaseClass11getUpcasterI13maxiDelaylineEEPFvvEv()|0);
 $227 = (__ZN10emscripten8internal11NoBaseClass13getDowncasterI13maxiDelaylineEEPFvvEv()|0);
 $228 = (__ZN10emscripten8internal6TypeIDI13maxiDelaylineE3getEv()|0);
 $229 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerI13maxiDelaylineEEE3getEv()|0);
 $230 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIK13maxiDelaylineEEE3getEv()|0);
 $231 = (__ZN10emscripten8internal11NoBaseClass3getEv()|0);
 $232 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 $233 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0);
 $234 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0);
 $235 = (__ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv()|0);
 __embind_register_class(($228|0),($229|0),($230|0),($231|0),($232|0),(83|0),($233|0),($226|0),($234|0),($227|0),(31475|0),($235|0),(248|0));
 $236 = (__ZN10emscripten8internal6TypeIDINSt3__210shared_ptrI13maxiDelaylineEEE3getEv()|0);
 $237 = (__ZN10emscripten8internal6TypeIDI13maxiDelaylineE3getEv()|0);
 $238 = (__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI13maxiDelaylineEEE18get_sharing_policyEv()|0);
 $239 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 $240 = (__ZN10emscripten8internal19getGenericSignatureIJiEEEPKcv()|0);
 $241 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0);
 $242 = (__ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv()|0);
 __embind_register_smart_ptr(($236|0),($237|0),(31489|0),($238|0),($239|0),(84|0),($240|0),(5|0),($241|0),(46|0),($242|0),(249|0));
 $243 = (__ZN10emscripten8internal6TypeIDI13maxiDelaylineE3getEv()|0);
 $244 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210shared_ptrI13maxiDelaylineEEEE8getCountEv($$byval_copy48)|0);
 $245 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210shared_ptrI13maxiDelaylineEEEE8getTypesEv($$byval_copy48)|0);
 $246 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 __embind_register_class_constructor(($243|0),($244|0),($245|0),($246|0),(85|0),(250|0));
 HEAP32[$8>>2] = (1);
 $$fca$1$gep262 = ((($8)) + 4|0);
 HEAP32[$$fca$1$gep262>>2] = 0;
 ;HEAP32[$$byval_copy48>>2]=HEAP32[$8>>2]|0;HEAP32[$$byval_copy48+4>>2]=HEAP32[$8+4>>2]|0;
 __ZN10emscripten15select_overloadIFddidE13maxiDelaylineEEDtfp_EMT0_T_($7,$$byval_copy48);
 $$fca$0$load264 = HEAP32[$7>>2]|0;
 $$fca$1$gep266 = ((($7)) + 4|0);
 $$fca$1$load267 = HEAP32[$$fca$1$gep266>>2]|0;
 HEAP32[$$byval_copy48>>2] = $$fca$0$load264;
 $$fca$1$gep$i488 = ((($$byval_copy48)) + 4|0);
 HEAP32[$$fca$1$gep$i488>>2] = $$fca$1$load267;
 $247 = (__ZN10emscripten8internal6TypeIDI13maxiDelaylineE3getEv()|0);
 $248 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI13maxiDelaylineEEdidEE8getCountEv($1)|0);
 $249 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI13maxiDelaylineEEdidEE8getTypesEv($1)|0);
 $250 = (__ZN10emscripten8internal19getGenericSignatureIJdiididEEEPKcv()|0);
 $251 = (__ZN10emscripten8internal10getContextIM13maxiDelaylineFddidEEEPT_RKS5_($$byval_copy48)|0);
 __embind_register_class_function(($247|0),(31515|0),($248|0),($249|0),($250|0),(1|0),($251|0),0);
 HEAP32[$10>>2] = (1);
 $$fca$1$gep250 = ((($10)) + 4|0);
 HEAP32[$$fca$1$gep250>>2] = 0;
 ;HEAP32[$$byval_copy48>>2]=HEAP32[$10>>2]|0;HEAP32[$$byval_copy48+4>>2]=HEAP32[$10+4>>2]|0;
 __ZN10emscripten15select_overloadIFddidiE13maxiDelaylineEEDtfp_EMT0_T_($9,$$byval_copy48);
 $$fca$0$load252 = HEAP32[$9>>2]|0;
 $$fca$1$gep254 = ((($9)) + 4|0);
 $$fca$1$load255 = HEAP32[$$fca$1$gep254>>2]|0;
 HEAP32[$$byval_copy48>>2] = $$fca$0$load252;
 $$fca$1$gep$i494 = ((($$byval_copy48)) + 4|0);
 HEAP32[$$fca$1$gep$i494>>2] = $$fca$1$load255;
 $252 = (__ZN10emscripten8internal6TypeIDI13maxiDelaylineE3getEv()|0);
 $253 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI13maxiDelaylineEEdidiEE8getCountEv($1)|0);
 $254 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI13maxiDelaylineEEdidiEE8getTypesEv($1)|0);
 $255 = (__ZN10emscripten8internal19getGenericSignatureIJdiididiEEEPKcv()|0);
 $256 = (__ZN10emscripten8internal10getContextIM13maxiDelaylineFddidiEEEPT_RKS5_($$byval_copy48)|0);
 __embind_register_class_function(($252|0),(31515|0),($253|0),($254|0),($255|0),(1|0),($256|0),0);
 __ZN10emscripten8internal11NoBaseClass6verifyI10maxiFilterEEvv();
 $257 = (__ZN10emscripten8internal11NoBaseClass11getUpcasterI10maxiFilterEEPFvvEv()|0);
 $258 = (__ZN10emscripten8internal11NoBaseClass13getDowncasterI10maxiFilterEEPFvvEv()|0);
 $259 = (__ZN10emscripten8internal6TypeIDI10maxiFilterE3getEv()|0);
 $260 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerI10maxiFilterEEE3getEv()|0);
 $261 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIK10maxiFilterEEE3getEv()|0);
 $262 = (__ZN10emscripten8internal11NoBaseClass3getEv()|0);
 $263 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 $264 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0);
 $265 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0);
 $266 = (__ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv()|0);
 __embind_register_class(($259|0),($260|0),($261|0),($262|0),($263|0),(86|0),($264|0),($257|0),($265|0),($258|0),(31518|0),($266|0),(251|0));
 $267 = (__ZN10emscripten8internal6TypeIDINSt3__210shared_ptrI10maxiFilterEEE3getEv()|0);
 $268 = (__ZN10emscripten8internal6TypeIDI10maxiFilterE3getEv()|0);
 $269 = (__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiFilterEEE18get_sharing_policyEv()|0);
 $270 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 $271 = (__ZN10emscripten8internal19getGenericSignatureIJiEEEPKcv()|0);
 $272 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0);
 $273 = (__ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv()|0);
 __embind_register_smart_ptr(($267|0),($268|0),(31529|0),($269|0),($270|0),(87|0),($271|0),(6|0),($272|0),(47|0),($273|0),(252|0));
 $274 = (__ZN10emscripten8internal6TypeIDI10maxiFilterE3getEv()|0);
 $275 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210shared_ptrI10maxiFilterEEEE8getCountEv($$byval_copy48)|0);
 $276 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210shared_ptrI10maxiFilterEEEE8getTypesEv($$byval_copy48)|0);
 $277 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 __embind_register_class_constructor(($274|0),($275|0),($276|0),($277|0),(88|0),(253|0));
 HEAP32[$$byval_copy48>>2] = (2);
 $$fca$1$gep$i500 = ((($$byval_copy48)) + 4|0);
 HEAP32[$$fca$1$gep$i500>>2] = 0;
 $278 = (__ZN10emscripten8internal6TypeIDI10maxiFilterE3getEv()|0);
 $279 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI10maxiFilterEEdddEE8getCountEv($1)|0);
 $280 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI10maxiFilterEEdddEE8getTypesEv($1)|0);
 $281 = (__ZN10emscripten8internal19getGenericSignatureIJdiidddEEEPKcv()|0);
 $282 = (__ZN10emscripten8internal10getContextIM10maxiFilterFddddEEEPT_RKS5_($$byval_copy48)|0);
 __embind_register_class_function(($278|0),(31552|0),($279|0),($280|0),($281|0),(2|0),($282|0),0);
 HEAP32[$$byval_copy48>>2] = (3);
 $$fca$1$gep$i506 = ((($$byval_copy48)) + 4|0);
 HEAP32[$$fca$1$gep$i506>>2] = 0;
 $283 = (__ZN10emscripten8internal6TypeIDI10maxiFilterE3getEv()|0);
 $284 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI10maxiFilterEEdddEE8getCountEv($1)|0);
 $285 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI10maxiFilterEEdddEE8getTypesEv($1)|0);
 $286 = (__ZN10emscripten8internal19getGenericSignatureIJdiidddEEEPKcv()|0);
 $287 = (__ZN10emscripten8internal10getContextIM10maxiFilterFddddEEEPT_RKS5_($$byval_copy48)|0);
 __embind_register_class_function(($283|0),(31558|0),($284|0),($285|0),($286|0),(2|0),($287|0),0);
 HEAP32[$$byval_copy48>>2] = (4);
 $$fca$1$gep$i512 = ((($$byval_copy48)) + 4|0);
 HEAP32[$$fca$1$gep$i512>>2] = 0;
 $288 = (__ZN10emscripten8internal6TypeIDI10maxiFilterE3getEv()|0);
 $289 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI10maxiFilterEEdddEE8getCountEv($1)|0);
 $290 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI10maxiFilterEEdddEE8getTypesEv($1)|0);
 $291 = (__ZN10emscripten8internal19getGenericSignatureIJdiidddEEEPKcv()|0);
 $292 = (__ZN10emscripten8internal10getContextIM10maxiFilterFddddEEEPT_RKS5_($$byval_copy48)|0);
 __embind_register_class_function(($288|0),(31564|0),($289|0),($290|0),($291|0),(2|0),($292|0),0);
 HEAP32[$$byval_copy48>>2] = (3);
 $$fca$1$gep$i518 = ((($$byval_copy48)) + 4|0);
 HEAP32[$$fca$1$gep$i518>>2] = 0;
 $293 = (__ZN10emscripten8internal6TypeIDI10maxiFilterE3getEv()|0);
 $294 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI10maxiFilterEEddEE8getCountEv($1)|0);
 $295 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI10maxiFilterEEddEE8getTypesEv($1)|0);
 $296 = (__ZN10emscripten8internal19getGenericSignatureIJdiiddEEEPKcv()|0);
 $297 = (__ZN10emscripten8internal10getContextIM10maxiFilterFdddEEEPT_RKS5_($$byval_copy48)|0);
 __embind_register_class_function(($293|0),(31573|0),($294|0),($295|0),($296|0),(2|0),($297|0),0);
 HEAP32[$$byval_copy48>>2] = (4);
 $$fca$1$gep$i524 = ((($$byval_copy48)) + 4|0);
 HEAP32[$$fca$1$gep$i524>>2] = 0;
 $298 = (__ZN10emscripten8internal6TypeIDI10maxiFilterE3getEv()|0);
 $299 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI10maxiFilterEEddEE8getCountEv($1)|0);
 $300 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI10maxiFilterEEddEE8getTypesEv($1)|0);
 $301 = (__ZN10emscripten8internal19getGenericSignatureIJdiiddEEEPKcv()|0);
 $302 = (__ZN10emscripten8internal10getContextIM10maxiFilterFdddEEEPT_RKS5_($$byval_copy48)|0);
 __embind_register_class_function(($298|0),(31580|0),($299|0),($300|0),($301|0),(2|0),($302|0),0);
 $303 = (__ZN10emscripten8internal6TypeIDI10maxiFilterE3getEv()|0);
 $304 = (__ZN10emscripten8internal6TypeIDIdE3getEv()|0);
 $305 = (__ZN10emscripten8internal19getGenericSignatureIJdiiEEEPKcv()|0);
 HEAP32[$1>>2] = (3);
 $$fca$1$gep4$i534 = ((($1)) + 4|0);
 HEAP32[$$fca$1$gep4$i534>>2] = 0;
 ;HEAP32[$$byval_copy48>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy48+4>>2]=HEAP32[$1+4>>2]|0;
 $306 = (__ZN10emscripten8internal12GetterPolicyIM10maxiFilterKFdvEE10getContextES4_($$byval_copy48)|0);
 $307 = (__ZN10emscripten8internal6TypeIDIdE3getEv()|0);
 $308 = (__ZN10emscripten8internal19getGenericSignatureIJviidEEEPKcv()|0);
 HEAP32[$2>>2] = (3);
 $$fca$1$gep$i536 = ((($2)) + 4|0);
 HEAP32[$$fca$1$gep$i536>>2] = 0;
 ;HEAP32[$$byval_copy48>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy48+4>>2]=HEAP32[$2+4>>2]|0;
 $309 = (__ZN10emscripten8internal12SetterPolicyIM10maxiFilterFvdEE10getContextES4_($$byval_copy48)|0);
 __embind_register_class_property(($303|0),(31587|0),($304|0),($305|0),(3|0),($306|0),($307|0),($308|0),(4|0),($309|0));
 $310 = (__ZN10emscripten8internal6TypeIDI10maxiFilterE3getEv()|0);
 $311 = (__ZN10emscripten8internal6TypeIDIdE3getEv()|0);
 $312 = (__ZN10emscripten8internal19getGenericSignatureIJdiiEEEPKcv()|0);
 HEAP32[$1>>2] = (4);
 $$fca$1$gep4$i546 = ((($1)) + 4|0);
 HEAP32[$$fca$1$gep4$i546>>2] = 0;
 ;HEAP32[$$byval_copy48>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy48+4>>2]=HEAP32[$1+4>>2]|0;
 $313 = (__ZN10emscripten8internal12GetterPolicyIM10maxiFilterKFdvEE10getContextES4_($$byval_copy48)|0);
 $314 = (__ZN10emscripten8internal6TypeIDIdE3getEv()|0);
 $315 = (__ZN10emscripten8internal19getGenericSignatureIJviidEEEPKcv()|0);
 HEAP32[$2>>2] = (4);
 $$fca$1$gep$i548 = ((($2)) + 4|0);
 HEAP32[$$fca$1$gep$i548>>2] = 0;
 ;HEAP32[$$byval_copy48>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy48+4>>2]=HEAP32[$2+4>>2]|0;
 $316 = (__ZN10emscripten8internal12SetterPolicyIM10maxiFilterFvdEE10getContextES4_($$byval_copy48)|0);
 __embind_register_class_property(($310|0),(31594|0),($311|0),($312|0),(3|0),($313|0),($314|0),($315|0),(4|0),($316|0));
 __ZN10emscripten8internal11NoBaseClass6verifyI7maxiMixEEvv();
 $317 = (__ZN10emscripten8internal11NoBaseClass11getUpcasterI7maxiMixEEPFvvEv()|0);
 $318 = (__ZN10emscripten8internal11NoBaseClass13getDowncasterI7maxiMixEEPFvvEv()|0);
 $319 = (__ZN10emscripten8internal6TypeIDI7maxiMixE3getEv()|0);
 $320 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerI7maxiMixEEE3getEv()|0);
 $321 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIK7maxiMixEEE3getEv()|0);
 $322 = (__ZN10emscripten8internal11NoBaseClass3getEv()|0);
 $323 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 $324 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0);
 $325 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0);
 $326 = (__ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv()|0);
 __embind_register_class(($319|0),($320|0),($321|0),($322|0),($323|0),(89|0),($324|0),($317|0),($325|0),($318|0),(31604|0),($326|0),(254|0));
 $327 = (__ZN10emscripten8internal6TypeIDINSt3__210shared_ptrI7maxiMixEEE3getEv()|0);
 $328 = (__ZN10emscripten8internal6TypeIDI7maxiMixE3getEv()|0);
 $329 = (__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiMixEEE18get_sharing_policyEv()|0);
 $330 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 $331 = (__ZN10emscripten8internal19getGenericSignatureIJiEEEPKcv()|0);
 $332 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0);
 $333 = (__ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv()|0);
 __embind_register_smart_ptr(($327|0),($328|0),(31612|0),($329|0),($330|0),(90|0),($331|0),(7|0),($332|0),(48|0),($333|0),(255|0));
 $334 = (__ZN10emscripten8internal6TypeIDI7maxiMixE3getEv()|0);
 $335 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210shared_ptrI7maxiMixEEEE8getCountEv($$byval_copy48)|0);
 $336 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210shared_ptrI7maxiMixEEEE8getTypesEv($$byval_copy48)|0);
 $337 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 __embind_register_class_constructor(($334|0),($335|0),($336|0),($337|0),(91|0),(256|0));
 HEAP32[$$byval_copy48>>2] = (1);
 $$fca$1$gep$i554 = ((($$byval_copy48)) + 4|0);
 HEAP32[$$fca$1$gep$i554>>2] = 0;
 $338 = (__ZN10emscripten8internal6TypeIDI7maxiMixE3getEv()|0);
 $339 = (__ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJvNS0_17AllowedRawPointerI7maxiMixEEdRNSt3__26vectorIdNS8_9allocatorIdEEEEdEE8getCountEv($1)|0);
 $340 = (__ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJvNS0_17AllowedRawPointerI7maxiMixEEdRNSt3__26vectorIdNS8_9allocatorIdEEEEdEE8getTypesEv($1)|0);
 $341 = (__ZN10emscripten8internal19getGenericSignatureIJviididEEEPKcv()|0);
 $342 = (__ZN10emscripten8internal10getContextIM7maxiMixFvdRNSt3__26vectorIdNS3_9allocatorIdEEEEdEEEPT_RKSB_($$byval_copy48)|0);
 __embind_register_class_function(($338|0),(31632|0),($339|0),($340|0),($341|0),(1|0),($342|0),0);
 HEAP32[$$byval_copy48>>2] = (1);
 $$fca$1$gep$i560 = ((($$byval_copy48)) + 4|0);
 HEAP32[$$fca$1$gep$i560>>2] = 0;
 $343 = (__ZN10emscripten8internal6TypeIDI7maxiMixE3getEv()|0);
 $344 = (__ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJvNS0_17AllowedRawPointerI7maxiMixEEdRNSt3__26vectorIdNS8_9allocatorIdEEEEddEE8getCountEv($1)|0);
 $345 = (__ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJvNS0_17AllowedRawPointerI7maxiMixEEdRNSt3__26vectorIdNS8_9allocatorIdEEEEddEE8getTypesEv($1)|0);
 $346 = (__ZN10emscripten8internal19getGenericSignatureIJviididdEEEPKcv()|0);
 $347 = (__ZN10emscripten8internal10getContextIM7maxiMixFvdRNSt3__26vectorIdNS3_9allocatorIdEEEEddEEEPT_RKSB_($$byval_copy48)|0);
 __embind_register_class_function(($343|0),(31639|0),($344|0),($345|0),($346|0),(1|0),($347|0),0);
 HEAP32[$$byval_copy48>>2] = (1);
 $$fca$1$gep$i566 = ((($$byval_copy48)) + 4|0);
 HEAP32[$$fca$1$gep$i566>>2] = 0;
 $348 = (__ZN10emscripten8internal6TypeIDI7maxiMixE3getEv()|0);
 $349 = (__ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJvNS0_17AllowedRawPointerI7maxiMixEEdRNSt3__26vectorIdNS8_9allocatorIdEEEEdddEE8getCountEv($1)|0);
 $350 = (__ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJvNS0_17AllowedRawPointerI7maxiMixEEdRNSt3__26vectorIdNS8_9allocatorIdEEEEdddEE8getTypesEv($1)|0);
 $351 = (__ZN10emscripten8internal19getGenericSignatureIJviididddEEEPKcv()|0);
 $352 = (__ZN10emscripten8internal10getContextIM7maxiMixFvdRNSt3__26vectorIdNS3_9allocatorIdEEEEdddEEEPT_RKSB_($$byval_copy48)|0);
 __embind_register_class_function(($348|0),(31644|0),($349|0),($350|0),($351|0),(1|0),($352|0),0);
 __ZN10emscripten8internal11NoBaseClass6verifyI10maxiLagExpIdEEEvv();
 $353 = (__ZN10emscripten8internal11NoBaseClass11getUpcasterI10maxiLagExpIdEEEPFvvEv()|0);
 $354 = (__ZN10emscripten8internal11NoBaseClass13getDowncasterI10maxiLagExpIdEEEPFvvEv()|0);
 $355 = (__ZN10emscripten8internal6TypeIDI10maxiLagExpIdEE3getEv()|0);
 $356 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerI10maxiLagExpIdEEEE3getEv()|0);
 $357 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIK10maxiLagExpIdEEEE3getEv()|0);
 $358 = (__ZN10emscripten8internal11NoBaseClass3getEv()|0);
 $359 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 $360 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0);
 $361 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0);
 $362 = (__ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv()|0);
 __embind_register_class(($355|0),($356|0),($357|0),($358|0),($359|0),(92|0),($360|0),($353|0),($361|0),($354|0),(31654|0),($362|0),(257|0));
 $363 = (__ZN10emscripten8internal6TypeIDINSt3__210shared_ptrI10maxiLagExpIdEEEE3getEv()|0);
 $364 = (__ZN10emscripten8internal6TypeIDI10maxiLagExpIdEE3getEv()|0);
 $365 = (__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiLagExpIdEEEE18get_sharing_policyEv()|0);
 $366 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 $367 = (__ZN10emscripten8internal19getGenericSignatureIJiEEEPKcv()|0);
 $368 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0);
 $369 = (__ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv()|0);
 __embind_register_smart_ptr(($363|0),($364|0),(31665|0),($365|0),($366|0),(93|0),($367|0),(8|0),($368|0),(49|0),($369|0),(258|0));
 $370 = (__ZN10emscripten8internal6TypeIDI10maxiLagExpIdEE3getEv()|0);
 $371 = (__ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJNSt3__210shared_ptrI10maxiLagExpIdEEEEE8getCountEv($$byval_copy48)|0);
 $372 = (__ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJNSt3__210shared_ptrI10maxiLagExpIdEEEEE8getTypesEv($$byval_copy48)|0);
 $373 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 __embind_register_class_constructor(($370|0),($371|0),($372|0),($373|0),(94|0),(259|0));
 HEAP32[$$byval_copy48>>2] = (1);
 $$fca$1$gep$i572 = ((($$byval_copy48)) + 4|0);
 HEAP32[$$fca$1$gep$i572>>2] = 0;
 $374 = (__ZN10emscripten8internal6TypeIDI10maxiLagExpIdEE3getEv()|0);
 $375 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI10maxiLagExpIdEEEddEE8getCountEv($1)|0);
 $376 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI10maxiLagExpIdEEEddEE8getTypesEv($1)|0);
 $377 = (__ZN10emscripten8internal19getGenericSignatureIJviiddEEEPKcv()|0);
 $378 = (__ZN10emscripten8internal10getContextIM10maxiLagExpIdEFvddEEEPT_RKS6_($$byval_copy48)|0);
 __embind_register_class_function(($374|0),(31696|0),($375|0),($376|0),($377|0),(1|0),($378|0),0);
 HEAP32[$$byval_copy48>>2] = (5);
 $$fca$1$gep$i578 = ((($$byval_copy48)) + 4|0);
 HEAP32[$$fca$1$gep$i578>>2] = 0;
 $379 = (__ZN10emscripten8internal6TypeIDI10maxiLagExpIdEE3getEv()|0);
 $380 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI10maxiLagExpIdEEEdEE8getCountEv($1)|0);
 $381 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI10maxiLagExpIdEEEdEE8getTypesEv($1)|0);
 $382 = (__ZN10emscripten8internal19getGenericSignatureIJviidEEEPKcv()|0);
 $383 = (__ZN10emscripten8internal10getContextIM10maxiLagExpIdEFvdEEEPT_RKS6_($$byval_copy48)|0);
 __embind_register_class_function(($379|0),(31701|0),($380|0),($381|0),($382|0),(5|0),($383|0),0);
 HEAP32[$$byval_copy48>>2] = (5);
 $$fca$1$gep$i584 = ((($$byval_copy48)) + 4|0);
 HEAP32[$$fca$1$gep$i584>>2] = 0;
 $384 = (__ZN10emscripten8internal6TypeIDI10maxiLagExpIdEE3getEv()|0);
 $385 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerIK10maxiLagExpIdEEEEE8getCountEv($1)|0);
 $386 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerIK10maxiLagExpIdEEEEE8getTypesEv($1)|0);
 $387 = (__ZN10emscripten8internal19getGenericSignatureIJdiiEEEPKcv()|0);
 $388 = (__ZN10emscripten8internal10getContextIM10maxiLagExpIdEKFdvEEEPT_RKS6_($$byval_copy48)|0);
 __embind_register_class_function(($384|0),(31711|0),($385|0),($386|0),($387|0),(4|0),($388|0),0);
 $389 = (__ZN10emscripten8internal6TypeIDI10maxiLagExpIdEE3getEv()|0);
 $390 = (__ZN10emscripten8internal6TypeIDIdE3getEv()|0);
 $391 = (__ZN10emscripten8internal19getGenericSignatureIJdiiEEEPKcv()|0);
 HEAP32[$1>>2] = (6);
 $$fca$1$gep4$i594 = ((($1)) + 4|0);
 HEAP32[$$fca$1$gep4$i594>>2] = 0;
 ;HEAP32[$$byval_copy48>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy48+4>>2]=HEAP32[$1+4>>2]|0;
 $392 = (__ZN10emscripten8internal12GetterPolicyIM10maxiLagExpIdEKFdvEE10getContextES5_($$byval_copy48)|0);
 $393 = (__ZN10emscripten8internal6TypeIDIdE3getEv()|0);
 $394 = (__ZN10emscripten8internal19getGenericSignatureIJviidEEEPKcv()|0);
 HEAP32[$2>>2] = (6);
 $$fca$1$gep$i596 = ((($2)) + 4|0);
 HEAP32[$$fca$1$gep$i596>>2] = 0;
 ;HEAP32[$$byval_copy48>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy48+4>>2]=HEAP32[$2+4>>2]|0;
 $395 = (__ZN10emscripten8internal12SetterPolicyIM10maxiLagExpIdEFvdEE10getContextES5_($$byval_copy48)|0);
 __embind_register_class_property(($389|0),(31717|0),($390|0),($391|0),(5|0),($392|0),($393|0),($394|0),(6|0),($395|0));
 $396 = (__ZN10emscripten8internal6TypeIDI10maxiLagExpIdEE3getEv()|0);
 $397 = (__ZN10emscripten8internal6TypeIDIdE3getEv()|0);
 $398 = (__ZN10emscripten8internal19getGenericSignatureIJdiiEEEPKcv()|0);
 HEAP32[$1>>2] = (7);
 $$fca$1$gep4$i606 = ((($1)) + 4|0);
 HEAP32[$$fca$1$gep4$i606>>2] = 0;
 ;HEAP32[$$byval_copy48>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy48+4>>2]=HEAP32[$1+4>>2]|0;
 $399 = (__ZN10emscripten8internal12GetterPolicyIM10maxiLagExpIdEKFdvEE10getContextES5_($$byval_copy48)|0);
 $400 = (__ZN10emscripten8internal6TypeIDIdE3getEv()|0);
 $401 = (__ZN10emscripten8internal19getGenericSignatureIJviidEEEPKcv()|0);
 HEAP32[$2>>2] = (7);
 $$fca$1$gep$i608 = ((($2)) + 4|0);
 HEAP32[$$fca$1$gep$i608>>2] = 0;
 ;HEAP32[$$byval_copy48>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy48+4>>2]=HEAP32[$2+4>>2]|0;
 $402 = (__ZN10emscripten8internal12SetterPolicyIM10maxiLagExpIdEFvdEE10getContextES5_($$byval_copy48)|0);
 __embind_register_class_property(($396|0),(31723|0),($397|0),($398|0),(5|0),($399|0),($400|0),($401|0),(6|0),($402|0));
 $403 = (__ZN10emscripten8internal6TypeIDI10maxiLagExpIdEE3getEv()|0);
 $404 = (__ZN10emscripten8internal6TypeIDIdE3getEv()|0);
 $405 = (__ZN10emscripten8internal19getGenericSignatureIJdiiEEEPKcv()|0);
 HEAP32[$1>>2] = (5);
 $$fca$1$gep4$i618 = ((($1)) + 4|0);
 HEAP32[$$fca$1$gep4$i618>>2] = 0;
 ;HEAP32[$$byval_copy48>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy48+4>>2]=HEAP32[$1+4>>2]|0;
 $406 = (__ZN10emscripten8internal12GetterPolicyIM10maxiLagExpIdEKFdvEE10getContextES5_($$byval_copy48)|0);
 $407 = (__ZN10emscripten8internal6TypeIDIdE3getEv()|0);
 $408 = (__ZN10emscripten8internal19getGenericSignatureIJviidEEEPKcv()|0);
 HEAP32[$2>>2] = (8);
 $$fca$1$gep$i620 = ((($2)) + 4|0);
 HEAP32[$$fca$1$gep$i620>>2] = 0;
 ;HEAP32[$$byval_copy48>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy48+4>>2]=HEAP32[$2+4>>2]|0;
 $409 = (__ZN10emscripten8internal12SetterPolicyIM10maxiLagExpIdEFvdEE10getContextES5_($$byval_copy48)|0);
 __embind_register_class_property(($403|0),(31739|0),($404|0),($405|0),(5|0),($406|0),($407|0),($408|0),(6|0),($409|0));
 __ZN10emscripten8internal11NoBaseClass6verifyI10maxiSampleEEvv();
 $410 = (__ZN10emscripten8internal11NoBaseClass11getUpcasterI10maxiSampleEEPFvvEv()|0);
 $411 = (__ZN10emscripten8internal11NoBaseClass13getDowncasterI10maxiSampleEEPFvvEv()|0);
 $412 = (__ZN10emscripten8internal6TypeIDI10maxiSampleE3getEv()|0);
 $413 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerI10maxiSampleEEE3getEv()|0);
 $414 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIK10maxiSampleEEE3getEv()|0);
 $415 = (__ZN10emscripten8internal11NoBaseClass3getEv()|0);
 $416 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 $417 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0);
 $418 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0);
 $419 = (__ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv()|0);
 __embind_register_class(($412|0),($413|0),($414|0),($415|0),($416|0),(95|0),($417|0),($410|0),($418|0),($411|0),(31743|0),($419|0),(260|0));
 $420 = (__ZN10emscripten8internal6TypeIDINSt3__210shared_ptrI10maxiSampleEEE3getEv()|0);
 $421 = (__ZN10emscripten8internal6TypeIDI10maxiSampleE3getEv()|0);
 $422 = (__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiSampleEEE18get_sharing_policyEv()|0);
 $423 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 $424 = (__ZN10emscripten8internal19getGenericSignatureIJiEEEPKcv()|0);
 $425 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0);
 $426 = (__ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv()|0);
 __embind_register_smart_ptr(($420|0),($421|0),(31754|0),($422|0),($423|0),(96|0),($424|0),(9|0),($425|0),(50|0),($426|0),(261|0));
 $427 = (__ZN10emscripten8internal6TypeIDI10maxiSampleE3getEv()|0);
 $428 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210shared_ptrI10maxiSampleEEEE8getCountEv($$byval_copy48)|0);
 $429 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210shared_ptrI10maxiSampleEEEE8getTypesEv($$byval_copy48)|0);
 $430 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 __embind_register_class_constructor(($427|0),($428|0),($429|0),($430|0),(97|0),(262|0));
 HEAP32[$$byval_copy48>>2] = (98);
 $$fca$1$gep$i626 = ((($$byval_copy48)) + 4|0);
 HEAP32[$$fca$1$gep$i626>>2] = 0;
 $431 = (__ZN10emscripten8internal6TypeIDI10maxiSampleE3getEv()|0);
 $432 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJmNS0_17AllowedRawPointerIK10maxiSampleEEEE8getCountEv($1)|0);
 $433 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJmNS0_17AllowedRawPointerIK10maxiSampleEEEE8getTypesEv($1)|0);
 $434 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0);
 $435 = (__ZN10emscripten8internal10getContextIM10maxiSampleKFmvEEEPT_RKS5_($$byval_copy48)|0);
 __embind_register_class_function(($431|0),(31777|0),($432|0),($433|0),($434|0),(51|0),($435|0),0);
 HEAP32[$12>>2] = (57);
 $$fca$1$gep194 = ((($12)) + 4|0);
 HEAP32[$$fca$1$gep194>>2] = 0;
 ;HEAP32[$$byval_copy48>>2]=HEAP32[$12>>2]|0;HEAP32[$$byval_copy48+4>>2]=HEAP32[$12+4>>2]|0;
 __ZN10emscripten15select_overloadIFvRNSt3__26vectorIdNS1_9allocatorIdEEEEE10maxiSampleEEDtfp_EMT0_T_($11,$$byval_copy48);
 $$fca$0$load196 = HEAP32[$11>>2]|0;
 $$fca$1$gep198 = ((($11)) + 4|0);
 $$fca$1$load199 = HEAP32[$$fca$1$gep198>>2]|0;
 HEAP32[$$byval_copy48>>2] = $$fca$0$load196;
 $$fca$1$gep$i632 = ((($$byval_copy48)) + 4|0);
 HEAP32[$$fca$1$gep$i632>>2] = $$fca$1$load199;
 $436 = (__ZN10emscripten8internal6TypeIDI10maxiSampleE3getEv()|0);
 $437 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI10maxiSampleEERNSt3__26vectorIdNS7_9allocatorIdEEEEEE8getCountEv($1)|0);
 $438 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI10maxiSampleEERNSt3__26vectorIdNS7_9allocatorIdEEEEEE8getTypesEv($1)|0);
 $439 = (__ZN10emscripten8internal19getGenericSignatureIJviiiEEEPKcv()|0);
 $440 = (__ZN10emscripten8internal10getContextIM10maxiSampleFvRNSt3__26vectorIdNS3_9allocatorIdEEEEEEEPT_RKSB_($$byval_copy48)|0);
 __embind_register_class_function(($436|0),(31787|0),($437|0),($438|0),($439|0),(7|0),($440|0),0);
 HEAP32[$14>>2] = (8);
 $$fca$1$gep182 = ((($14)) + 4|0);
 HEAP32[$$fca$1$gep182>>2] = 0;
 ;HEAP32[$$byval_copy48>>2]=HEAP32[$14>>2]|0;HEAP32[$$byval_copy48+4>>2]=HEAP32[$14+4>>2]|0;
 __ZN10emscripten15select_overloadIFvRNSt3__26vectorIdNS1_9allocatorIdEEEEiE10maxiSampleEEDtfp_EMT0_T_($13,$$byval_copy48);
 $$fca$0$load184 = HEAP32[$13>>2]|0;
 $$fca$1$gep186 = ((($13)) + 4|0);
 $$fca$1$load187 = HEAP32[$$fca$1$gep186>>2]|0;
 HEAP32[$$byval_copy48>>2] = $$fca$0$load184;
 $$fca$1$gep$i638 = ((($$byval_copy48)) + 4|0);
 HEAP32[$$fca$1$gep$i638>>2] = $$fca$1$load187;
 $441 = (__ZN10emscripten8internal6TypeIDI10maxiSampleE3getEv()|0);
 $442 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI10maxiSampleEERNSt3__26vectorIdNS7_9allocatorIdEEEEiEE8getCountEv($1)|0);
 $443 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI10maxiSampleEERNSt3__26vectorIdNS7_9allocatorIdEEEEiEE8getTypesEv($1)|0);
 $444 = (__ZN10emscripten8internal19getGenericSignatureIJviiiiEEEPKcv()|0);
 $445 = (__ZN10emscripten8internal10getContextIM10maxiSampleFvRNSt3__26vectorIdNS3_9allocatorIdEEEEiEEEPT_RKSB_($$byval_copy48)|0);
 __embind_register_class_function(($441|0),(31787|0),($442|0),($443|0),($444|0),(10|0),($445|0),0);
 HEAP32[$$byval_copy48>>2] = (99);
 $$fca$1$gep$i644 = ((($$byval_copy48)) + 4|0);
 HEAP32[$$fca$1$gep$i644>>2] = 0;
 $446 = (__ZN10emscripten8internal6TypeIDI10maxiSampleE3getEv()|0);
 $447 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbNS0_17AllowedRawPointerI10maxiSampleEEEE8getCountEv($1)|0);
 $448 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbNS0_17AllowedRawPointerI10maxiSampleEEEE8getTypesEv($1)|0);
 $449 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0);
 $450 = (__ZN10emscripten8internal10getContextIM10maxiSampleFbvEEEPT_RKS5_($$byval_copy48)|0);
 __embind_register_class_function(($446|0),(31797|0),($447|0),($448|0),($449|0),(52|0),($450|0),0);
 HEAP32[$16>>2] = (8);
 $$fca$1$gep168 = ((($16)) + 4|0);
 HEAP32[$$fca$1$gep168>>2] = 0;
 ;HEAP32[$$byval_copy48>>2]=HEAP32[$16>>2]|0;HEAP32[$$byval_copy48+4>>2]=HEAP32[$16+4>>2]|0;
 __ZN10emscripten15select_overloadIFdvE10maxiSampleEEDtfp_EMT0_T_($15,$$byval_copy48);
 $$fca$0$load170 = HEAP32[$15>>2]|0;
 $$fca$1$gep172 = ((($15)) + 4|0);
 $$fca$1$load173 = HEAP32[$$fca$1$gep172>>2]|0;
 HEAP32[$$byval_copy48>>2] = $$fca$0$load170;
 $$fca$1$gep$i650 = ((($$byval_copy48)) + 4|0);
 HEAP32[$$fca$1$gep$i650>>2] = $$fca$1$load173;
 $451 = (__ZN10emscripten8internal6TypeIDI10maxiSampleE3getEv()|0);
 $452 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI10maxiSampleEEEE8getCountEv($1)|0);
 $453 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI10maxiSampleEEEE8getTypesEv($1)|0);
 $454 = (__ZN10emscripten8internal19getGenericSignatureIJdiiEEEPKcv()|0);
 $455 = (__ZN10emscripten8internal10getContextIM10maxiSampleFdvEEEPT_RKS5_($$byval_copy48)|0);
 __embind_register_class_function(($451|0),(31805|0),($452|0),($453|0),($454|0),(6|0),($455|0),0);
 HEAP32[$18>>2] = (10);
 $$fca$1$gep156 = ((($18)) + 4|0);
 HEAP32[$$fca$1$gep156>>2] = 0;
 ;HEAP32[$$byval_copy48>>2]=HEAP32[$18>>2]|0;HEAP32[$$byval_copy48+4>>2]=HEAP32[$18+4>>2]|0;
 __ZN10emscripten15select_overloadIFddE10maxiSampleEEDtfp_EMT0_T_($17,$$byval_copy48);
 $$fca$0$load158 = HEAP32[$17>>2]|0;
 $$fca$1$gep160 = ((($17)) + 4|0);
 $$fca$1$load161 = HEAP32[$$fca$1$gep160>>2]|0;
 HEAP32[$$byval_copy48>>2] = $$fca$0$load158;
 $$fca$1$gep$i656 = ((($$byval_copy48)) + 4|0);
 HEAP32[$$fca$1$gep$i656>>2] = $$fca$1$load161;
 $456 = (__ZN10emscripten8internal6TypeIDI10maxiSampleE3getEv()|0);
 $457 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI10maxiSampleEEdEE8getCountEv($1)|0);
 $458 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI10maxiSampleEEdEE8getTypesEv($1)|0);
 $459 = (__ZN10emscripten8internal19getGenericSignatureIJdiidEEEPKcv()|0);
 $460 = (__ZN10emscripten8internal10getContextIM10maxiSampleFddEEEPT_RKS5_($$byval_copy48)|0);
 __embind_register_class_function(($456|0),(31805|0),($457|0),($458|0),($459|0),(2|0),($460|0),0);
 HEAP32[$20>>2] = (9);
 $$fca$1$gep144 = ((($20)) + 4|0);
 HEAP32[$$fca$1$gep144>>2] = 0;
 ;HEAP32[$$byval_copy48>>2]=HEAP32[$20>>2]|0;HEAP32[$$byval_copy48+4>>2]=HEAP32[$20+4>>2]|0;
 __ZN10emscripten15select_overloadIFdvE10maxiSampleEEDtfp_EMT0_T_($19,$$byval_copy48);
 $$fca$0$load146 = HEAP32[$19>>2]|0;
 $$fca$1$gep148 = ((($19)) + 4|0);
 $$fca$1$load149 = HEAP32[$$fca$1$gep148>>2]|0;
 HEAP32[$$byval_copy48>>2] = $$fca$0$load146;
 $$fca$1$gep$i662 = ((($$byval_copy48)) + 4|0);
 HEAP32[$$fca$1$gep$i662>>2] = $$fca$1$load149;
 $461 = (__ZN10emscripten8internal6TypeIDI10maxiSampleE3getEv()|0);
 $462 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI10maxiSampleEEEE8getCountEv($1)|0);
 $463 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI10maxiSampleEEEE8getTypesEv($1)|0);
 $464 = (__ZN10emscripten8internal19getGenericSignatureIJdiiEEEPKcv()|0);
 $465 = (__ZN10emscripten8internal10getContextIM10maxiSampleFdvEEEPT_RKS5_($$byval_copy48)|0);
 __embind_register_class_function(($461|0),(31814|0),($462|0),($463|0),($464|0),(6|0),($465|0),0);
 HEAP32[$22>>2] = (11);
 $$fca$1$gep132 = ((($22)) + 4|0);
 HEAP32[$$fca$1$gep132>>2] = 0;
 ;HEAP32[$$byval_copy48>>2]=HEAP32[$22>>2]|0;HEAP32[$$byval_copy48+4>>2]=HEAP32[$22+4>>2]|0;
 __ZN10emscripten15select_overloadIFddE10maxiSampleEEDtfp_EMT0_T_($21,$$byval_copy48);
 $$fca$0$load134 = HEAP32[$21>>2]|0;
 $$fca$1$gep136 = ((($21)) + 4|0);
 $$fca$1$load137 = HEAP32[$$fca$1$gep136>>2]|0;
 HEAP32[$$byval_copy48>>2] = $$fca$0$load134;
 $$fca$1$gep$i668 = ((($$byval_copy48)) + 4|0);
 HEAP32[$$fca$1$gep$i668>>2] = $$fca$1$load137;
 $466 = (__ZN10emscripten8internal6TypeIDI10maxiSampleE3getEv()|0);
 $467 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI10maxiSampleEEdEE8getCountEv($1)|0);
 $468 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI10maxiSampleEEdEE8getTypesEv($1)|0);
 $469 = (__ZN10emscripten8internal19getGenericSignatureIJdiidEEEPKcv()|0);
 $470 = (__ZN10emscripten8internal10getContextIM10maxiSampleFddEEEPT_RKS5_($$byval_copy48)|0);
 __embind_register_class_function(($466|0),(31814|0),($467|0),($468|0),($469|0),(2|0),($470|0),0);
 HEAP32[$24>>2] = (5);
 $$fca$1$gep120 = ((($24)) + 4|0);
 HEAP32[$$fca$1$gep120>>2] = 0;
 ;HEAP32[$$byval_copy48>>2]=HEAP32[$24>>2]|0;HEAP32[$$byval_copy48+4>>2]=HEAP32[$24+4>>2]|0;
 __ZN10emscripten15select_overloadIFddddE10maxiSampleEEDtfp_EMT0_T_($23,$$byval_copy48);
 $$fca$0$load122 = HEAP32[$23>>2]|0;
 $$fca$1$gep124 = ((($23)) + 4|0);
 $$fca$1$load125 = HEAP32[$$fca$1$gep124>>2]|0;
 HEAP32[$$byval_copy48>>2] = $$fca$0$load122;
 $$fca$1$gep$i674 = ((($$byval_copy48)) + 4|0);
 HEAP32[$$fca$1$gep$i674>>2] = $$fca$1$load125;
 $471 = (__ZN10emscripten8internal6TypeIDI10maxiSampleE3getEv()|0);
 $472 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI10maxiSampleEEdddEE8getCountEv($1)|0);
 $473 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI10maxiSampleEEdddEE8getTypesEv($1)|0);
 $474 = (__ZN10emscripten8internal19getGenericSignatureIJdiidddEEEPKcv()|0);
 $475 = (__ZN10emscripten8internal10getContextIM10maxiSampleFddddEEEPT_RKS5_($$byval_copy48)|0);
 __embind_register_class_function(($471|0),(31814|0),($472|0),($473|0),($474|0),(3|0),($475|0),0);
 HEAP32[$$byval_copy48>>2] = (6);
 $$fca$1$gep$i680 = ((($$byval_copy48)) + 4|0);
 HEAP32[$$fca$1$gep$i680>>2] = 0;
 $476 = (__ZN10emscripten8internal6TypeIDI10maxiSampleE3getEv()|0);
 $477 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI10maxiSampleEEdddEE8getCountEv($1)|0);
 $478 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI10maxiSampleEEdddEE8getTypesEv($1)|0);
 $479 = (__ZN10emscripten8internal19getGenericSignatureIJdiidddEEEPKcv()|0);
 $480 = (__ZN10emscripten8internal10getContextIM10maxiSampleFddddEEEPT_RKS5_($$byval_copy48)|0);
 __embind_register_class_function(($476|0),(31819|0),($477|0),($478|0),($479|0),(3|0),($480|0),0);
 HEAP32[$$byval_copy48>>2] = (263);
 $$fca$1$gep$i686 = ((($$byval_copy48)) + 4|0);
 HEAP32[$$fca$1$gep$i686>>2] = 0;
 $481 = (__ZN10emscripten8internal6TypeIDI10maxiSampleE3getEv()|0);
 $482 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI10maxiSampleEEEE8getCountEv($1)|0);
 $483 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI10maxiSampleEEEE8getTypesEv($1)|0);
 $484 = (__ZN10emscripten8internal19getGenericSignatureIJviiEEEPKcv()|0);
 $485 = (__ZN10emscripten8internal10getContextIM10maxiSampleFvvEEEPT_RKS5_($$byval_copy48)|0);
 __embind_register_class_function(($481|0),(31448|0),($482|0),($483|0),($484|0),(58|0),($485|0),0);
 HEAP32[$$byval_copy48>>2] = (264);
 $$fca$1$gep$i692 = ((($$byval_copy48)) + 4|0);
 HEAP32[$$fca$1$gep$i692>>2] = 0;
 $486 = (__ZN10emscripten8internal6TypeIDI10maxiSampleE3getEv()|0);
 $487 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI10maxiSampleEEEE8getCountEv($1)|0);
 $488 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI10maxiSampleEEEE8getTypesEv($1)|0);
 $489 = (__ZN10emscripten8internal19getGenericSignatureIJviiEEEPKcv()|0);
 $490 = (__ZN10emscripten8internal10getContextIM10maxiSampleFvvEEEPT_RKS5_($$byval_copy48)|0);
 __embind_register_class_function(($486|0),(31825|0),($487|0),($488|0),($489|0),(58|0),($490|0),0);
 HEAP32[$$byval_copy48>>2] = (9);
 $$fca$1$gep$i698 = ((($$byval_copy48)) + 4|0);
 HEAP32[$$fca$1$gep$i698>>2] = 0;
 $491 = (__ZN10emscripten8internal6TypeIDI10maxiSampleE3getEv()|0);
 $492 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI10maxiSampleEEdEE8getCountEv($1)|0);
 $493 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI10maxiSampleEEdEE8getTypesEv($1)|0);
 $494 = (__ZN10emscripten8internal19getGenericSignatureIJviidEEEPKcv()|0);
 $495 = (__ZN10emscripten8internal10getContextIM10maxiSampleFvdEEEPT_RKS5_($$byval_copy48)|0);
 __embind_register_class_function(($491|0),(31831|0),($492|0),($493|0),($494|0),(7|0),($495|0),0);
 HEAP32[$$byval_copy48>>2] = (1);
 $$fca$1$gep$i704 = ((($$byval_copy48)) + 4|0);
 HEAP32[$$fca$1$gep$i704>>2] = 0;
 $496 = (__ZN10emscripten8internal6TypeIDI10maxiSampleE3getEv()|0);
 $497 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI10maxiSampleEEffbbEE8getCountEv($1)|0);
 $498 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI10maxiSampleEEffbbEE8getTypesEv($1)|0);
 $499 = (__ZN10emscripten8internal19getGenericSignatureIJviiffiiEEEPKcv()|0);
 $500 = (__ZN10emscripten8internal10getContextIM10maxiSampleFvffbbEEEPT_RKS5_($$byval_copy48)|0);
 __embind_register_class_function(($496|0),(31841|0),($497|0),($498|0),($499|0),(1|0),($500|0),0);
 HEAP32[$$byval_copy48>>2] = (33);
 $$fca$1$gep$i710 = ((($$byval_copy48)) + 4|0);
 HEAP32[$$fca$1$gep$i710>>2] = 0;
 $501 = (__ZN10emscripten8internal6TypeIDI10maxiSampleE3getEv()|0);
 $502 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbNS0_17AllowedRawPointerI10maxiSampleEENSt3__212basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEiEE8getCountEv($1)|0);
 $503 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbNS0_17AllowedRawPointerI10maxiSampleEENSt3__212basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEiEE8getTypesEv($1)|0);
 $504 = (__ZN10emscripten8internal19getGenericSignatureIJiiiiiEEEPKcv()|0);
 $505 = (__ZN10emscripten8internal10getContextIM10maxiSampleFbNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEiEEEPT_RKSC_($$byval_copy48)|0);
 __embind_register_class_function(($501|0),(31850|0),($502|0),($503|0),($504|0),(7|0),($505|0),0);
 HEAP32[$$byval_copy48>>2] = (100);
 $$fca$1$gep$i716 = ((($$byval_copy48)) + 4|0);
 HEAP32[$$fca$1$gep$i716>>2] = 0;
 $506 = (__ZN10emscripten8internal6TypeIDI10maxiSampleE3getEv()|0);
 $507 = (__ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJbNS0_17AllowedRawPointerI10maxiSampleEEEE8getCountEv($1)|0);
 $508 = (__ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJbNS0_17AllowedRawPointerI10maxiSampleEEEE8getTypesEv($1)|0);
 $509 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0);
 $510 = (__ZN10emscripten8internal10getContextIM10maxiSampleFbvEEEPT_RKS5_($$byval_copy48)|0);
 __embind_register_class_function(($506|0),(31855|0),($507|0),($508|0),($509|0),(52|0),($510|0),0);
 __ZN10emscripten8internal11NoBaseClass6verifyI7maxiMapEEvv();
 $511 = (__ZN10emscripten8internal11NoBaseClass11getUpcasterI7maxiMapEEPFvvEv()|0);
 $512 = (__ZN10emscripten8internal11NoBaseClass13getDowncasterI7maxiMapEEPFvvEv()|0);
 $513 = (__ZN10emscripten8internal6TypeIDI7maxiMapE3getEv()|0);
 $514 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerI7maxiMapEEE3getEv()|0);
 $515 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIK7maxiMapEEE3getEv()|0);
 $516 = (__ZN10emscripten8internal11NoBaseClass3getEv()|0);
 $517 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 $518 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0);
 $519 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0);
 $520 = (__ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv()|0);
 __embind_register_class(($513|0),($514|0),($515|0),($516|0),($517|0),(101|0),($518|0),($511|0),($519|0),($512|0),(31860|0),($520|0),(265|0));
 $521 = (__ZN10emscripten8internal6TypeIDINSt3__210shared_ptrI7maxiMapEEE3getEv()|0);
 $522 = (__ZN10emscripten8internal6TypeIDI7maxiMapE3getEv()|0);
 $523 = (__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiMapEEE18get_sharing_policyEv()|0);
 $524 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 $525 = (__ZN10emscripten8internal19getGenericSignatureIJiEEEPKcv()|0);
 $526 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0);
 $527 = (__ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv()|0);
 __embind_register_smart_ptr(($521|0),($522|0),(31868|0),($523|0),($524|0),(102|0),($525|0),(10|0),($526|0),(53|0),($527|0),(266|0));
 $528 = (__ZN10emscripten8internal6TypeIDI7maxiMapE3getEv()|0);
 $529 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210shared_ptrI7maxiMapEEEE8getCountEv($$byval_copy48)|0);
 $530 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210shared_ptrI7maxiMapEEEE8getTypesEv($$byval_copy48)|0);
 $531 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 __embind_register_class_constructor(($528|0),($529|0),($530|0),($531|0),(103|0),(267|0));
 HEAP32[$$byval_copy48>>2] = 1;
 $532 = (__ZN10emscripten8internal6TypeIDI7maxiMapE3getEv()|0);
 $533 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJddddddEE8getCountEv($1)|0);
 $534 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJddddddEE8getTypesEv($1)|0);
 $535 = (__ZN10emscripten8internal19getGenericSignatureIJdidddddEEEPKcv()|0);
 $536 = (__ZN10emscripten8internal10getContextIPFddddddEEEPT_RKS4_($$byval_copy48)|0);
 __embind_register_class_function(($532|0),(31888|0),($533|0),($534|0),($535|0),(1|0),($536|0),0);
 HEAP32[$$byval_copy48>>2] = 2;
 $537 = (__ZN10emscripten8internal6TypeIDI7maxiMapE3getEv()|0);
 $538 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJddddddEE8getCountEv($1)|0);
 $539 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJddddddEE8getTypesEv($1)|0);
 $540 = (__ZN10emscripten8internal19getGenericSignatureIJdidddddEEEPKcv()|0);
 $541 = (__ZN10emscripten8internal10getContextIPFddddddEEEPT_RKS4_($$byval_copy48)|0);
 __embind_register_class_function(($537|0),(31895|0),($538|0),($539|0),($540|0),(1|0),($541|0),0);
 HEAP32[$$byval_copy48>>2] = 3;
 $542 = (__ZN10emscripten8internal6TypeIDI7maxiMapE3getEv()|0);
 $543 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJddddddEE8getCountEv($1)|0);
 $544 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJddddddEE8getTypesEv($1)|0);
 $545 = (__ZN10emscripten8internal19getGenericSignatureIJdidddddEEEPKcv()|0);
 $546 = (__ZN10emscripten8internal10getContextIPFddddddEEEPT_RKS4_($$byval_copy48)|0);
 __embind_register_class_function(($542|0),(31902|0),($543|0),($544|0),($545|0),(1|0),($546|0),0);
 HEAP32[$$byval_copy48>>2] = 1;
 $547 = (__ZN10emscripten8internal6TypeIDI7maxiMapE3getEv()|0);
 $548 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJddddEE8getCountEv($1)|0);
 $549 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJddddEE8getTypesEv($1)|0);
 $550 = (__ZN10emscripten8internal19getGenericSignatureIJdidddEEEPKcv()|0);
 $551 = (__ZN10emscripten8internal10getContextIPFddddEEEPT_RKS4_($$byval_copy48)|0);
 __embind_register_class_function(($547|0),(31909|0),($548|0),($549|0),($550|0),(7|0),($551|0),0);
 __ZN10emscripten8internal11NoBaseClass6verifyI7maxiDynEEvv();
 $552 = (__ZN10emscripten8internal11NoBaseClass11getUpcasterI7maxiDynEEPFvvEv()|0);
 $553 = (__ZN10emscripten8internal11NoBaseClass13getDowncasterI7maxiDynEEPFvvEv()|0);
 $554 = (__ZN10emscripten8internal6TypeIDI7maxiDynE3getEv()|0);
 $555 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerI7maxiDynEEE3getEv()|0);
 $556 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIK7maxiDynEEE3getEv()|0);
 $557 = (__ZN10emscripten8internal11NoBaseClass3getEv()|0);
 $558 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 $559 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0);
 $560 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0);
 $561 = (__ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv()|0);
 __embind_register_class(($554|0),($555|0),($556|0),($557|0),($558|0),(104|0),($559|0),($552|0),($560|0),($553|0),(31915|0),($561|0),(268|0));
 $562 = (__ZN10emscripten8internal6TypeIDINSt3__210shared_ptrI7maxiDynEEE3getEv()|0);
 $563 = (__ZN10emscripten8internal6TypeIDI7maxiDynE3getEv()|0);
 $564 = (__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiDynEEE18get_sharing_policyEv()|0);
 $565 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 $566 = (__ZN10emscripten8internal19getGenericSignatureIJiEEEPKcv()|0);
 $567 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0);
 $568 = (__ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv()|0);
 __embind_register_smart_ptr(($562|0),($563|0),(31923|0),($564|0),($565|0),(105|0),($566|0),(11|0),($567|0),(54|0),($568|0),(269|0));
 $569 = (__ZN10emscripten8internal6TypeIDI7maxiDynE3getEv()|0);
 $570 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210shared_ptrI7maxiDynEEEE8getCountEv($$byval_copy48)|0);
 $571 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210shared_ptrI7maxiDynEEEE8getTypesEv($$byval_copy48)|0);
 $572 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 __embind_register_class_constructor(($569|0),($570|0),($571|0),($572|0),(106|0),(270|0));
 HEAP32[$$byval_copy48>>2] = (1);
 $$fca$1$gep$i722 = ((($$byval_copy48)) + 4|0);
 HEAP32[$$fca$1$gep$i722>>2] = 0;
 $573 = (__ZN10emscripten8internal6TypeIDI7maxiDynE3getEv()|0);
 $574 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7maxiDynEEddlddEE8getCountEv($1)|0);
 $575 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7maxiDynEEddlddEE8getTypesEv($1)|0);
 $576 = (__ZN10emscripten8internal19getGenericSignatureIJdiiddiddEEEPKcv()|0);
 $577 = (__ZN10emscripten8internal10getContextIM7maxiDynFdddlddEEEPT_RKS5_($$byval_copy48)|0);
 __embind_register_class_function(($573|0),(31943|0),($574|0),($575|0),($576|0),(1|0),($577|0),0);
 HEAP32[$$byval_copy48>>2] = (2);
 $$fca$1$gep$i728 = ((($$byval_copy48)) + 4|0);
 HEAP32[$$fca$1$gep$i728>>2] = 0;
 $578 = (__ZN10emscripten8internal6TypeIDI7maxiDynE3getEv()|0);
 $579 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7maxiDynEEdddddEE8getCountEv($1)|0);
 $580 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7maxiDynEEdddddEE8getTypesEv($1)|0);
 $581 = (__ZN10emscripten8internal19getGenericSignatureIJdiidddddEEEPKcv()|0);
 $582 = (__ZN10emscripten8internal10getContextIM7maxiDynFddddddEEEPT_RKS5_($$byval_copy48)|0);
 __embind_register_class_function(($578|0),(31948|0),($579|0),($580|0),($581|0),(1|0),($582|0),0);
 HEAP32[$$byval_copy48>>2] = (12);
 $$fca$1$gep$i734 = ((($$byval_copy48)) + 4|0);
 HEAP32[$$fca$1$gep$i734>>2] = 0;
 $583 = (__ZN10emscripten8internal6TypeIDI7maxiDynE3getEv()|0);
 $584 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7maxiDynEEdEE8getCountEv($1)|0);
 $585 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7maxiDynEEdEE8getTypesEv($1)|0);
 $586 = (__ZN10emscripten8internal19getGenericSignatureIJdiidEEEPKcv()|0);
 $587 = (__ZN10emscripten8internal10getContextIM7maxiDynFddEEEPT_RKS5_($$byval_copy48)|0);
 __embind_register_class_function(($583|0),(31959|0),($584|0),($585|0),($586|0),(3|0),($587|0),0);
 HEAP32[$$byval_copy48>>2] = (10);
 $$fca$1$gep$i740 = ((($$byval_copy48)) + 4|0);
 HEAP32[$$fca$1$gep$i740>>2] = 0;
 $588 = (__ZN10emscripten8internal6TypeIDI7maxiDynE3getEv()|0);
 $589 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI7maxiDynEEdEE8getCountEv($1)|0);
 $590 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI7maxiDynEEdEE8getTypesEv($1)|0);
 $591 = (__ZN10emscripten8internal19getGenericSignatureIJviidEEEPKcv()|0);
 $592 = (__ZN10emscripten8internal10getContextIM7maxiDynFvdEEEPT_RKS5_($$byval_copy48)|0);
 __embind_register_class_function(($588|0),(31968|0),($589|0),($590|0),($591|0),(8|0),($592|0),0);
 HEAP32[$$byval_copy48>>2] = (11);
 $$fca$1$gep$i746 = ((($$byval_copy48)) + 4|0);
 HEAP32[$$fca$1$gep$i746>>2] = 0;
 $593 = (__ZN10emscripten8internal6TypeIDI7maxiDynE3getEv()|0);
 $594 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI7maxiDynEEdEE8getCountEv($1)|0);
 $595 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI7maxiDynEEdEE8getTypesEv($1)|0);
 $596 = (__ZN10emscripten8internal19getGenericSignatureIJviidEEEPKcv()|0);
 $597 = (__ZN10emscripten8internal10getContextIM7maxiDynFvdEEEPT_RKS5_($$byval_copy48)|0);
 __embind_register_class_function(($593|0),(31978|0),($594|0),($595|0),($596|0),(8|0),($597|0),0);
 HEAP32[$$byval_copy48>>2] = (12);
 $$fca$1$gep$i752 = ((($$byval_copy48)) + 4|0);
 HEAP32[$$fca$1$gep$i752>>2] = 0;
 $598 = (__ZN10emscripten8internal6TypeIDI7maxiDynE3getEv()|0);
 $599 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI7maxiDynEEdEE8getCountEv($1)|0);
 $600 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI7maxiDynEEdEE8getTypesEv($1)|0);
 $601 = (__ZN10emscripten8internal19getGenericSignatureIJviidEEEPKcv()|0);
 $602 = (__ZN10emscripten8internal10getContextIM7maxiDynFvdEEEPT_RKS5_($$byval_copy48)|0);
 __embind_register_class_function(($598|0),(31989|0),($599|0),($600|0),($601|0),(8|0),($602|0),0);
 HEAP32[$$byval_copy48>>2] = (13);
 $$fca$1$gep$i758 = ((($$byval_copy48)) + 4|0);
 HEAP32[$$fca$1$gep$i758>>2] = 0;
 $603 = (__ZN10emscripten8internal6TypeIDI7maxiDynE3getEv()|0);
 $604 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI7maxiDynEEdEE8getCountEv($1)|0);
 $605 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI7maxiDynEEdEE8getTypesEv($1)|0);
 $606 = (__ZN10emscripten8internal19getGenericSignatureIJviidEEEPKcv()|0);
 $607 = (__ZN10emscripten8internal10getContextIM7maxiDynFvdEEEPT_RKS5_($$byval_copy48)|0);
 __embind_register_class_function(($603|0),(32002|0),($604|0),($605|0),($606|0),(8|0),($607|0),0);
 __ZN10emscripten8internal11NoBaseClass6verifyI7maxiEnvEEvv();
 $608 = (__ZN10emscripten8internal11NoBaseClass11getUpcasterI7maxiEnvEEPFvvEv()|0);
 $609 = (__ZN10emscripten8internal11NoBaseClass13getDowncasterI7maxiEnvEEPFvvEv()|0);
 $610 = (__ZN10emscripten8internal6TypeIDI7maxiEnvE3getEv()|0);
 $611 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerI7maxiEnvEEE3getEv()|0);
 $612 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIK7maxiEnvEEE3getEv()|0);
 $613 = (__ZN10emscripten8internal11NoBaseClass3getEv()|0);
 $614 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 $615 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0);
 $616 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0);
 $617 = (__ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv()|0);
 __embind_register_class(($610|0),($611|0),($612|0),($613|0),($614|0),(107|0),($615|0),($608|0),($616|0),($609|0),(32011|0),($617|0),(271|0));
 $618 = (__ZN10emscripten8internal6TypeIDINSt3__210shared_ptrI7maxiEnvEEE3getEv()|0);
 $619 = (__ZN10emscripten8internal6TypeIDI7maxiEnvE3getEv()|0);
 $620 = (__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiEnvEEE18get_sharing_policyEv()|0);
 $621 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 $622 = (__ZN10emscripten8internal19getGenericSignatureIJiEEEPKcv()|0);
 $623 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0);
 $624 = (__ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv()|0);
 __embind_register_smart_ptr(($618|0),($619|0),(32019|0),($620|0),($621|0),(108|0),($622|0),(12|0),($623|0),(55|0),($624|0),(272|0));
 $625 = (__ZN10emscripten8internal6TypeIDI7maxiEnvE3getEv()|0);
 $626 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210shared_ptrI7maxiEnvEEEE8getCountEv($$byval_copy48)|0);
 $627 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210shared_ptrI7maxiEnvEEEE8getTypesEv($$byval_copy48)|0);
 $628 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 __embind_register_class_constructor(($625|0),($626|0),($627|0),($628|0),(109|0),(273|0));
 HEAP32[$$byval_copy48>>2] = (1);
 $$fca$1$gep$i764 = ((($$byval_copy48)) + 4|0);
 HEAP32[$$fca$1$gep$i764>>2] = 0;
 $629 = (__ZN10emscripten8internal6TypeIDI7maxiEnvE3getEv()|0);
 $630 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7maxiEnvEEdddliEE8getCountEv($1)|0);
 $631 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7maxiEnvEEdddliEE8getTypesEv($1)|0);
 $632 = (__ZN10emscripten8internal19getGenericSignatureIJdiidddiiEEEPKcv()|0);
 $633 = (__ZN10emscripten8internal10getContextIM7maxiEnvFddddliEEEPT_RKS5_($$byval_copy48)|0);
 __embind_register_class_function(($629|0),(32039|0),($630|0),($631|0),($632|0),(1|0),($633|0),0);
 HEAP32[$26>>2] = (1);
 $$fca$1$gep78 = ((($26)) + 4|0);
 HEAP32[$$fca$1$gep78>>2] = 0;
 ;HEAP32[$$byval_copy48>>2]=HEAP32[$26>>2]|0;HEAP32[$$byval_copy48+4>>2]=HEAP32[$26+4>>2]|0;
 __ZN10emscripten15select_overloadIFddddddliE7maxiEnvEEDtfp_EMT0_T_($25,$$byval_copy48);
 $$fca$0$load80 = HEAP32[$25>>2]|0;
 $$fca$1$gep82 = ((($25)) + 4|0);
 $$fca$1$load83 = HEAP32[$$fca$1$gep82>>2]|0;
 HEAP32[$$byval_copy48>>2] = $$fca$0$load80;
 $$fca$1$gep$i770 = ((($$byval_copy48)) + 4|0);
 HEAP32[$$fca$1$gep$i770>>2] = $$fca$1$load83;
 $634 = (__ZN10emscripten8internal6TypeIDI7maxiEnvE3getEv()|0);
 $635 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7maxiEnvEEdddddliEE8getCountEv($1)|0);
 $636 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7maxiEnvEEdddddliEE8getTypesEv($1)|0);
 $637 = (__ZN10emscripten8internal19getGenericSignatureIJdiidddddiiEEEPKcv()|0);
 $638 = (__ZN10emscripten8internal10getContextIM7maxiEnvFddddddliEEEPT_RKS5_($$byval_copy48)|0);
 __embind_register_class_function(($634|0),(32042|0),($635|0),($636|0),($637|0),(1|0),($638|0),0);
 HEAP32[$28>>2] = (1);
 $$fca$1$gep70 = ((($28)) + 4|0);
 HEAP32[$$fca$1$gep70>>2] = 0;
 ;HEAP32[$$byval_copy48>>2]=HEAP32[$28>>2]|0;HEAP32[$$byval_copy48+4>>2]=HEAP32[$28+4>>2]|0;
 __ZN10emscripten15select_overloadIFddiE7maxiEnvEEDtfp_EMT0_T_($27,$$byval_copy48);
 $$fca$0$load = HEAP32[$27>>2]|0;
 $$fca$1$gep72 = ((($27)) + 4|0);
 $$fca$1$load = HEAP32[$$fca$1$gep72>>2]|0;
 HEAP32[$$byval_copy48>>2] = $$fca$0$load;
 $$fca$1$gep$i776 = ((($$byval_copy48)) + 4|0);
 HEAP32[$$fca$1$gep$i776>>2] = $$fca$1$load;
 $639 = (__ZN10emscripten8internal6TypeIDI7maxiEnvE3getEv()|0);
 $640 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7maxiEnvEEdiEE8getCountEv($1)|0);
 $641 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7maxiEnvEEdiEE8getTypesEv($1)|0);
 $642 = (__ZN10emscripten8internal19getGenericSignatureIJdiidiEEEPKcv()|0);
 $643 = (__ZN10emscripten8internal10getContextIM7maxiEnvFddiEEEPT_RKS5_($$byval_copy48)|0);
 __embind_register_class_function(($639|0),(32042|0),($640|0),($641|0),($642|0),(1|0),($643|0),0);
 HEAP32[$$byval_copy48>>2] = (14);
 $$fca$1$gep$i782 = ((($$byval_copy48)) + 4|0);
 HEAP32[$$fca$1$gep$i782>>2] = 0;
 $644 = (__ZN10emscripten8internal6TypeIDI7maxiEnvE3getEv()|0);
 $645 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI7maxiEnvEEdEE8getCountEv($1)|0);
 $646 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI7maxiEnvEEdEE8getTypesEv($1)|0);
 $647 = (__ZN10emscripten8internal19getGenericSignatureIJviidEEEPKcv()|0);
 $648 = (__ZN10emscripten8internal10getContextIM7maxiEnvFvdEEEPT_RKS5_($$byval_copy48)|0);
 __embind_register_class_function(($644|0),(31968|0),($645|0),($646|0),($647|0),(9|0),($648|0),0);
 HEAP32[$$byval_copy48>>2] = (15);
 $$fca$1$gep$i788 = ((($$byval_copy48)) + 4|0);
 HEAP32[$$fca$1$gep$i788>>2] = 0;
 $649 = (__ZN10emscripten8internal6TypeIDI7maxiEnvE3getEv()|0);
 $650 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI7maxiEnvEEdEE8getCountEv($1)|0);
 $651 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI7maxiEnvEEdEE8getTypesEv($1)|0);
 $652 = (__ZN10emscripten8internal19getGenericSignatureIJviidEEEPKcv()|0);
 $653 = (__ZN10emscripten8internal10getContextIM7maxiEnvFvdEEEPT_RKS5_($$byval_copy48)|0);
 __embind_register_class_function(($649|0),(31978|0),($650|0),($651|0),($652|0),(9|0),($653|0),0);
 HEAP32[$$byval_copy48>>2] = (16);
 $$fca$1$gep$i794 = ((($$byval_copy48)) + 4|0);
 HEAP32[$$fca$1$gep$i794>>2] = 0;
 $654 = (__ZN10emscripten8internal6TypeIDI7maxiEnvE3getEv()|0);
 $655 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI7maxiEnvEEdEE8getCountEv($1)|0);
 $656 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI7maxiEnvEEdEE8getTypesEv($1)|0);
 $657 = (__ZN10emscripten8internal19getGenericSignatureIJviidEEEPKcv()|0);
 $658 = (__ZN10emscripten8internal10getContextIM7maxiEnvFvdEEEPT_RKS5_($$byval_copy48)|0);
 __embind_register_class_function(($654|0),(32047|0),($655|0),($656|0),($657|0),(9|0),($658|0),0);
 HEAP32[$$byval_copy48>>2] = (17);
 $$fca$1$gep$i800 = ((($$byval_copy48)) + 4|0);
 HEAP32[$$fca$1$gep$i800>>2] = 0;
 $659 = (__ZN10emscripten8internal6TypeIDI7maxiEnvE3getEv()|0);
 $660 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI7maxiEnvEEdEE8getCountEv($1)|0);
 $661 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI7maxiEnvEEdEE8getTypesEv($1)|0);
 $662 = (__ZN10emscripten8internal19getGenericSignatureIJviidEEEPKcv()|0);
 $663 = (__ZN10emscripten8internal10getContextIM7maxiEnvFvdEEEPT_RKS5_($$byval_copy48)|0);
 __embind_register_class_function(($659|0),(32056|0),($660|0),($661|0),($662|0),(9|0),($663|0),0);
 $664 = (__ZN10emscripten8internal6TypeIDI7maxiEnvE3getEv()|0);
 $665 = (__ZN10emscripten8internal6TypeIDIiE3getEv()|0);
 $666 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0);
 HEAP32[$1>>2] = (110);
 $$fca$1$gep4$i810 = ((($1)) + 4|0);
 HEAP32[$$fca$1$gep4$i810>>2] = 0;
 ;HEAP32[$$byval_copy48>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy48+4>>2]=HEAP32[$1+4>>2]|0;
 $667 = (__ZN10emscripten8internal12GetterPolicyIM7maxiEnvKFivEE10getContextES4_($$byval_copy48)|0);
 $668 = (__ZN10emscripten8internal6TypeIDIiE3getEv()|0);
 $669 = (__ZN10emscripten8internal19getGenericSignatureIJviiiEEEPKcv()|0);
 HEAP32[$2>>2] = (59);
 $$fca$1$gep$i812 = ((($2)) + 4|0);
 HEAP32[$$fca$1$gep$i812>>2] = 0;
 ;HEAP32[$$byval_copy48>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy48+4>>2]=HEAP32[$2+4>>2]|0;
 $670 = (__ZN10emscripten8internal12SetterPolicyIM7maxiEnvFviEE10getContextES4_($$byval_copy48)|0);
 __embind_register_class_property(($664|0),(31448|0),($665|0),($666|0),(56|0),($667|0),($668|0),($669|0),(9|0),($670|0));
 __ZN10emscripten8internal11NoBaseClass6verifyI7convertEEvv();
 $671 = (__ZN10emscripten8internal11NoBaseClass11getUpcasterI7convertEEPFvvEv()|0);
 $672 = (__ZN10emscripten8internal11NoBaseClass13getDowncasterI7convertEEPFvvEv()|0);
 $673 = (__ZN10emscripten8internal6TypeIDI7convertE3getEv()|0);
 $674 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerI7convertEEE3getEv()|0);
 $675 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIK7convertEEE3getEv()|0);
 $676 = (__ZN10emscripten8internal11NoBaseClass3getEv()|0);
 $677 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 $678 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0);
 $679 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0);
 $680 = (__ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv()|0);
 __embind_register_class(($673|0),($674|0),($675|0),($676|0),($677|0),(111|0),($678|0),($671|0),($679|0),($672|0),(32067|0),($680|0),(274|0));
 $681 = (__ZN10emscripten8internal6TypeIDINSt3__210shared_ptrI7convertEEE3getEv()|0);
 $682 = (__ZN10emscripten8internal6TypeIDI7convertE3getEv()|0);
 $683 = (__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7convertEEE18get_sharing_policyEv()|0);
 $684 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 $685 = (__ZN10emscripten8internal19getGenericSignatureIJiEEEPKcv()|0);
 $686 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0);
 $687 = (__ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv()|0);
 __embind_register_smart_ptr(($681|0),($682|0),(32075|0),($683|0),($684|0),(112|0),($685|0),(13|0),($686|0),(57|0),($687|0),(275|0));
 $688 = (__ZN10emscripten8internal6TypeIDI7convertE3getEv()|0);
 $689 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210shared_ptrI7convertEEEE8getCountEv($$byval_copy48)|0);
 $690 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210shared_ptrI7convertEEEE8getTypesEv($$byval_copy48)|0);
 $691 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 __embind_register_class_constructor(($688|0),($689|0),($690|0),($691|0),(113|0),(276|0));
 HEAP32[$$byval_copy48>>2] = (7);
 $$fca$1$gep$i818 = ((($$byval_copy48)) + 4|0);
 HEAP32[$$fca$1$gep$i818>>2] = 0;
 $692 = (__ZN10emscripten8internal6TypeIDI7convertE3getEv()|0);
 $693 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7convertEEiEE8getCountEv($1)|0);
 $694 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7convertEEiEE8getTypesEv($1)|0);
 $695 = (__ZN10emscripten8internal19getGenericSignatureIJdiiiEEEPKcv()|0);
 $696 = (__ZN10emscripten8internal10getContextIM7convertFdiEEEPT_RKS5_($$byval_copy48)|0);
 __embind_register_class_function(($692|0),(32095|0),($693|0),($694|0),($695|0),(2|0),($696|0),0);
 __ZN10emscripten8internal11NoBaseClass6verifyI14maxiDistortionEEvv();
 $697 = (__ZN10emscripten8internal11NoBaseClass11getUpcasterI14maxiDistortionEEPFvvEv()|0);
 $698 = (__ZN10emscripten8internal11NoBaseClass13getDowncasterI14maxiDistortionEEPFvvEv()|0);
 $699 = (__ZN10emscripten8internal6TypeIDI14maxiDistortionE3getEv()|0);
 $700 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerI14maxiDistortionEEE3getEv()|0);
 $701 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIK14maxiDistortionEEE3getEv()|0);
 $702 = (__ZN10emscripten8internal11NoBaseClass3getEv()|0);
 $703 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 $704 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0);
 $705 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0);
 $706 = (__ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv()|0);
 __embind_register_class(($699|0),($700|0),($701|0),($702|0),($703|0),(114|0),($704|0),($697|0),($705|0),($698|0),(32100|0),($706|0),(277|0));
 $707 = (__ZN10emscripten8internal6TypeIDINSt3__210shared_ptrI14maxiDistortionEEE3getEv()|0);
 $708 = (__ZN10emscripten8internal6TypeIDI14maxiDistortionE3getEv()|0);
 $709 = (__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI14maxiDistortionEEE18get_sharing_policyEv()|0);
 $710 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 $711 = (__ZN10emscripten8internal19getGenericSignatureIJiEEEPKcv()|0);
 $712 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0);
 $713 = (__ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv()|0);
 __embind_register_smart_ptr(($707|0),($708|0),(32115|0),($709|0),($710|0),(115|0),($711|0),(14|0),($712|0),(58|0),($713|0),(278|0));
 $714 = (__ZN10emscripten8internal6TypeIDI14maxiDistortionE3getEv()|0);
 $715 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210shared_ptrI14maxiDistortionEEEE8getCountEv($$byval_copy48)|0);
 $716 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210shared_ptrI14maxiDistortionEEEE8getTypesEv($$byval_copy48)|0);
 $717 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 __embind_register_class_constructor(($714|0),($715|0),($716|0),($717|0),(116|0),(279|0));
 HEAP32[$$byval_copy48>>2] = (13);
 $$fca$1$gep$i824 = ((($$byval_copy48)) + 4|0);
 HEAP32[$$fca$1$gep$i824>>2] = 0;
 $718 = (__ZN10emscripten8internal6TypeIDI14maxiDistortionE3getEv()|0);
 $719 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI14maxiDistortionEEdEE8getCountEv($1)|0);
 $720 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI14maxiDistortionEEdEE8getTypesEv($1)|0);
 $721 = (__ZN10emscripten8internal19getGenericSignatureIJdiidEEEPKcv()|0);
 $722 = (__ZN10emscripten8internal10getContextIM14maxiDistortionFddEEEPT_RKS5_($$byval_copy48)|0);
 __embind_register_class_function(($718|0),(32142|0),($719|0),($720|0),($721|0),(4|0),($722|0),0);
 HEAP32[$$byval_copy48>>2] = (5);
 $$fca$1$gep$i830 = ((($$byval_copy48)) + 4|0);
 HEAP32[$$fca$1$gep$i830>>2] = 0;
 $723 = (__ZN10emscripten8internal6TypeIDI14maxiDistortionE3getEv()|0);
 $724 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI14maxiDistortionEEddEE8getCountEv($1)|0);
 $725 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI14maxiDistortionEEddEE8getTypesEv($1)|0);
 $726 = (__ZN10emscripten8internal19getGenericSignatureIJdiiddEEEPKcv()|0);
 $727 = (__ZN10emscripten8internal10getContextIM14maxiDistortionFdddEEEPT_RKS5_($$byval_copy48)|0);
 __embind_register_class_function(($723|0),(32151|0),($724|0),($725|0),($726|0),(3|0),($727|0),0);
 HEAP32[$$byval_copy48>>2] = (6);
 $$fca$1$gep$i836 = ((($$byval_copy48)) + 4|0);
 HEAP32[$$fca$1$gep$i836>>2] = 0;
 $728 = (__ZN10emscripten8internal6TypeIDI14maxiDistortionE3getEv()|0);
 $729 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI14maxiDistortionEEddEE8getCountEv($1)|0);
 $730 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI14maxiDistortionEEddEE8getTypesEv($1)|0);
 $731 = (__ZN10emscripten8internal19getGenericSignatureIJdiiddEEEPKcv()|0);
 $732 = (__ZN10emscripten8internal10getContextIM14maxiDistortionFdddEEEPT_RKS5_($$byval_copy48)|0);
 __embind_register_class_function(($728|0),(32160|0),($729|0),($730|0),($731|0),(3|0),($732|0),0);
 __ZN10emscripten8internal11NoBaseClass6verifyI11maxiFlangerEEvv();
 $733 = (__ZN10emscripten8internal11NoBaseClass11getUpcasterI11maxiFlangerEEPFvvEv()|0);
 $734 = (__ZN10emscripten8internal11NoBaseClass13getDowncasterI11maxiFlangerEEPFvvEv()|0);
 $735 = (__ZN10emscripten8internal6TypeIDI11maxiFlangerE3getEv()|0);
 $736 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerI11maxiFlangerEEE3getEv()|0);
 $737 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIK11maxiFlangerEEE3getEv()|0);
 $738 = (__ZN10emscripten8internal11NoBaseClass3getEv()|0);
 $739 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 $740 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0);
 $741 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0);
 $742 = (__ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv()|0);
 __embind_register_class(($735|0),($736|0),($737|0),($738|0),($739|0),(117|0),($740|0),($733|0),($741|0),($734|0),(32173|0),($742|0),(280|0));
 $743 = (__ZN10emscripten8internal6TypeIDINSt3__210shared_ptrI11maxiFlangerEEE3getEv()|0);
 $744 = (__ZN10emscripten8internal6TypeIDI11maxiFlangerE3getEv()|0);
 $745 = (__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI11maxiFlangerEEE18get_sharing_policyEv()|0);
 $746 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 $747 = (__ZN10emscripten8internal19getGenericSignatureIJiEEEPKcv()|0);
 $748 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0);
 $749 = (__ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv()|0);
 __embind_register_smart_ptr(($743|0),($744|0),(32185|0),($745|0),($746|0),(118|0),($747|0),(15|0),($748|0),(59|0),($749|0),(281|0));
 $750 = (__ZN10emscripten8internal6TypeIDI11maxiFlangerE3getEv()|0);
 $751 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210shared_ptrI11maxiFlangerEEEE8getCountEv($$byval_copy48)|0);
 $752 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210shared_ptrI11maxiFlangerEEEE8getTypesEv($$byval_copy48)|0);
 $753 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 __embind_register_class_constructor(($750|0),($751|0),($752|0),($753|0),(119|0),(282|0));
 HEAP32[$$byval_copy48>>2] = (1);
 $$fca$1$gep$i842 = ((($$byval_copy48)) + 4|0);
 HEAP32[$$fca$1$gep$i842>>2] = 0;
 $754 = (__ZN10emscripten8internal6TypeIDI11maxiFlangerE3getEv()|0);
 $755 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI11maxiFlangerEEdjdddEE8getCountEv($1)|0);
 $756 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI11maxiFlangerEEdjdddEE8getTypesEv($1)|0);
 $757 = (__ZN10emscripten8internal19getGenericSignatureIJdiididddEEEPKcv()|0);
 $758 = (__ZN10emscripten8internal10getContextIM11maxiFlangerFddjdddEEEPT_RKS5_($$byval_copy48)|0);
 __embind_register_class_function(($754|0),(32209|0),($755|0),($756|0),($757|0),(1|0),($758|0),0);
 __ZN10emscripten8internal11NoBaseClass6verifyI10maxiChorusEEvv();
 $759 = (__ZN10emscripten8internal11NoBaseClass11getUpcasterI10maxiChorusEEPFvvEv()|0);
 $760 = (__ZN10emscripten8internal11NoBaseClass13getDowncasterI10maxiChorusEEPFvvEv()|0);
 $761 = (__ZN10emscripten8internal6TypeIDI10maxiChorusE3getEv()|0);
 $762 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerI10maxiChorusEEE3getEv()|0);
 $763 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIK10maxiChorusEEE3getEv()|0);
 $764 = (__ZN10emscripten8internal11NoBaseClass3getEv()|0);
 $765 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 $766 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0);
 $767 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0);
 $768 = (__ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv()|0);
 __embind_register_class(($761|0),($762|0),($763|0),($764|0),($765|0),(120|0),($766|0),($759|0),($767|0),($760|0),(32216|0),($768|0),(283|0));
 $769 = (__ZN10emscripten8internal6TypeIDINSt3__210shared_ptrI10maxiChorusEEE3getEv()|0);
 $770 = (__ZN10emscripten8internal6TypeIDI10maxiChorusE3getEv()|0);
 $771 = (__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiChorusEEE18get_sharing_policyEv()|0);
 $772 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 $773 = (__ZN10emscripten8internal19getGenericSignatureIJiEEEPKcv()|0);
 $774 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0);
 $775 = (__ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv()|0);
 __embind_register_smart_ptr(($769|0),($770|0),(32227|0),($771|0),($772|0),(121|0),($773|0),(16|0),($774|0),(60|0),($775|0),(284|0));
 $776 = (__ZN10emscripten8internal6TypeIDI10maxiChorusE3getEv()|0);
 $777 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210shared_ptrI10maxiChorusEEEE8getCountEv($$byval_copy48)|0);
 $778 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210shared_ptrI10maxiChorusEEEE8getTypesEv($$byval_copy48)|0);
 $779 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 __embind_register_class_constructor(($776|0),($777|0),($778|0),($779|0),(122|0),(285|0));
 HEAP32[$$byval_copy48>>2] = (2);
 $$fca$1$gep$i848 = ((($$byval_copy48)) + 4|0);
 HEAP32[$$fca$1$gep$i848>>2] = 0;
 $780 = (__ZN10emscripten8internal6TypeIDI10maxiChorusE3getEv()|0);
 $781 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI10maxiChorusEEdjdddEE8getCountEv($1)|0);
 $782 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI10maxiChorusEEdjdddEE8getTypesEv($1)|0);
 $783 = (__ZN10emscripten8internal19getGenericSignatureIJdiididddEEEPKcv()|0);
 $784 = (__ZN10emscripten8internal10getContextIM10maxiChorusFddjdddEEEPT_RKS5_($$byval_copy48)|0);
 __embind_register_class_function(($780|0),(32250|0),($781|0),($782|0),($783|0),(2|0),($784|0),0);
 __ZN10emscripten8internal11NoBaseClass6verifyI13maxiDCBlockerEEvv();
 $785 = (__ZN10emscripten8internal11NoBaseClass11getUpcasterI13maxiDCBlockerEEPFvvEv()|0);
 $786 = (__ZN10emscripten8internal11NoBaseClass13getDowncasterI13maxiDCBlockerEEPFvvEv()|0);
 $787 = (__ZN10emscripten8internal6TypeIDI13maxiDCBlockerE3getEv()|0);
 $788 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerI13maxiDCBlockerEEE3getEv()|0);
 $789 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIK13maxiDCBlockerEEE3getEv()|0);
 $790 = (__ZN10emscripten8internal11NoBaseClass3getEv()|0);
 $791 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 $792 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0);
 $793 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0);
 $794 = (__ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv()|0);
 __embind_register_class(($787|0),($788|0),($789|0),($790|0),($791|0),(123|0),($792|0),($785|0),($793|0),($786|0),(32257|0),($794|0),(286|0));
 $795 = (__ZN10emscripten8internal6TypeIDINSt3__210shared_ptrI13maxiDCBlockerEEE3getEv()|0);
 $796 = (__ZN10emscripten8internal6TypeIDI13maxiDCBlockerE3getEv()|0);
 $797 = (__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI13maxiDCBlockerEEE18get_sharing_policyEv()|0);
 $798 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 $799 = (__ZN10emscripten8internal19getGenericSignatureIJiEEEPKcv()|0);
 $800 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0);
 $801 = (__ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv()|0);
 __embind_register_smart_ptr(($795|0),($796|0),(32271|0),($797|0),($798|0),(124|0),($799|0),(17|0),($800|0),(61|0),($801|0),(287|0));
 $802 = (__ZN10emscripten8internal6TypeIDI13maxiDCBlockerE3getEv()|0);
 $803 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210shared_ptrI13maxiDCBlockerEEEE8getCountEv($$byval_copy48)|0);
 $804 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210shared_ptrI13maxiDCBlockerEEEE8getTypesEv($$byval_copy48)|0);
 $805 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 __embind_register_class_constructor(($802|0),($803|0),($804|0),($805|0),(125|0),(288|0));
 HEAP32[$$byval_copy48>>2] = (7);
 $$fca$1$gep$i854 = ((($$byval_copy48)) + 4|0);
 HEAP32[$$fca$1$gep$i854>>2] = 0;
 $806 = (__ZN10emscripten8internal6TypeIDI13maxiDCBlockerE3getEv()|0);
 $807 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI13maxiDCBlockerEEddEE8getCountEv($1)|0);
 $808 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI13maxiDCBlockerEEddEE8getTypesEv($1)|0);
 $809 = (__ZN10emscripten8internal19getGenericSignatureIJdiiddEEEPKcv()|0);
 $810 = (__ZN10emscripten8internal10getContextIM13maxiDCBlockerFdddEEEPT_RKS5_($$byval_copy48)|0);
 __embind_register_class_function(($806|0),(31814|0),($807|0),($808|0),($809|0),(4|0),($810|0),0);
 __ZN10emscripten8internal11NoBaseClass6verifyI7maxiSVFEEvv();
 $811 = (__ZN10emscripten8internal11NoBaseClass11getUpcasterI7maxiSVFEEPFvvEv()|0);
 $812 = (__ZN10emscripten8internal11NoBaseClass13getDowncasterI7maxiSVFEEPFvvEv()|0);
 $813 = (__ZN10emscripten8internal6TypeIDI7maxiSVFE3getEv()|0);
 $814 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerI7maxiSVFEEE3getEv()|0);
 $815 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIK7maxiSVFEEE3getEv()|0);
 $816 = (__ZN10emscripten8internal11NoBaseClass3getEv()|0);
 $817 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 $818 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0);
 $819 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0);
 $820 = (__ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv()|0);
 __embind_register_class(($813|0),($814|0),($815|0),($816|0),($817|0),(126|0),($818|0),($811|0),($819|0),($812|0),(32297|0),($820|0),(289|0));
 $821 = (__ZN10emscripten8internal6TypeIDINSt3__210shared_ptrI7maxiSVFEEE3getEv()|0);
 $822 = (__ZN10emscripten8internal6TypeIDI7maxiSVFE3getEv()|0);
 $823 = (__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiSVFEEE18get_sharing_policyEv()|0);
 $824 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 $825 = (__ZN10emscripten8internal19getGenericSignatureIJiEEEPKcv()|0);
 $826 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0);
 $827 = (__ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv()|0);
 __embind_register_smart_ptr(($821|0),($822|0),(32305|0),($823|0),($824|0),(127|0),($825|0),(18|0),($826|0),(62|0),($827|0),(290|0));
 $828 = (__ZN10emscripten8internal6TypeIDI7maxiSVFE3getEv()|0);
 $829 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210shared_ptrI7maxiSVFEEEE8getCountEv($$byval_copy48)|0);
 $830 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210shared_ptrI7maxiSVFEEEE8getTypesEv($$byval_copy48)|0);
 $831 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 __embind_register_class_constructor(($828|0),($829|0),($830|0),($831|0),(128|0),(291|0));
 HEAP32[$$byval_copy48>>2] = (1);
 $$fca$1$gep$i860 = ((($$byval_copy48)) + 4|0);
 HEAP32[$$fca$1$gep$i860>>2] = 0;
 $832 = (__ZN10emscripten8internal6TypeIDI7maxiSVFE3getEv()|0);
 $833 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJR7maxiSVFNS0_17AllowedRawPointerIS4_EEdEE8getCountEv($1)|0);
 $834 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJR7maxiSVFNS0_17AllowedRawPointerIS4_EEdEE8getTypesEv($1)|0);
 $835 = (__ZN10emscripten8internal19getGenericSignatureIJiiidEEEPKcv()|0);
 $836 = (__ZN10emscripten8internal10getContextIM7maxiSVFFRS2_dEEEPT_RKS6_($$byval_copy48)|0);
 __embind_register_class_function(($832|0),(32325|0),($833|0),($834|0),($835|0),(1|0),($836|0),0);
 HEAP32[$$byval_copy48>>2] = (2);
 $$fca$1$gep$i866 = ((($$byval_copy48)) + 4|0);
 HEAP32[$$fca$1$gep$i866>>2] = 0;
 $837 = (__ZN10emscripten8internal6TypeIDI7maxiSVFE3getEv()|0);
 $838 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJR7maxiSVFNS0_17AllowedRawPointerIS4_EEdEE8getCountEv($1)|0);
 $839 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJR7maxiSVFNS0_17AllowedRawPointerIS4_EEdEE8getTypesEv($1)|0);
 $840 = (__ZN10emscripten8internal19getGenericSignatureIJiiidEEEPKcv()|0);
 $841 = (__ZN10emscripten8internal10getContextIM7maxiSVFFRS2_dEEEPT_RKS6_($$byval_copy48)|0);
 __embind_register_class_function(($837|0),(32335|0),($838|0),($839|0),($840|0),(1|0),($841|0),0);
 HEAP32[$$byval_copy48>>2] = (3);
 $$fca$1$gep$i872 = ((($$byval_copy48)) + 4|0);
 HEAP32[$$fca$1$gep$i872>>2] = 0;
 $842 = (__ZN10emscripten8internal6TypeIDI7maxiSVFE3getEv()|0);
 $843 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7maxiSVFEEdddddEE8getCountEv($1)|0);
 $844 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7maxiSVFEEdddddEE8getTypesEv($1)|0);
 $845 = (__ZN10emscripten8internal19getGenericSignatureIJdiidddddEEEPKcv()|0);
 $846 = (__ZN10emscripten8internal10getContextIM7maxiSVFFddddddEEEPT_RKS5_($$byval_copy48)|0);
 __embind_register_class_function(($842|0),(31814|0),($843|0),($844|0),($845|0),(2|0),($846|0),0);
 __ZN10emscripten8internal11NoBaseClass6verifyI9maxiClockEEvv();
 $847 = (__ZN10emscripten8internal11NoBaseClass11getUpcasterI9maxiClockEEPFvvEv()|0);
 $848 = (__ZN10emscripten8internal11NoBaseClass13getDowncasterI9maxiClockEEPFvvEv()|0);
 $849 = (__ZN10emscripten8internal6TypeIDI9maxiClockE3getEv()|0);
 $850 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerI9maxiClockEEE3getEv()|0);
 $851 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIK9maxiClockEEE3getEv()|0);
 $852 = (__ZN10emscripten8internal11NoBaseClass3getEv()|0);
 $853 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 $854 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0);
 $855 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0);
 $856 = (__ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv()|0);
 __embind_register_class(($849|0),($850|0),($851|0),($852|0),($853|0),(129|0),($854|0),($847|0),($855|0),($848|0),(32348|0),($856|0),(292|0));
 $857 = (__ZN10emscripten8internal6TypeIDINSt3__210shared_ptrI9maxiClockEEE3getEv()|0);
 $858 = (__ZN10emscripten8internal6TypeIDI9maxiClockE3getEv()|0);
 $859 = (__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI9maxiClockEEE18get_sharing_policyEv()|0);
 $860 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 $861 = (__ZN10emscripten8internal19getGenericSignatureIJiEEEPKcv()|0);
 $862 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0);
 $863 = (__ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv()|0);
 __embind_register_smart_ptr(($857|0),($858|0),(32358|0),($859|0),($860|0),(130|0),($861|0),(19|0),($862|0),(63|0),($863|0),(293|0));
 $864 = (__ZN10emscripten8internal6TypeIDI9maxiClockE3getEv()|0);
 $865 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210shared_ptrI9maxiClockEEEE8getCountEv($$byval_copy48)|0);
 $866 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210shared_ptrI9maxiClockEEEE8getTypesEv($$byval_copy48)|0);
 $867 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 __embind_register_class_constructor(($864|0),($865|0),($866|0),($867|0),(131|0),(294|0));
 HEAP32[$$byval_copy48>>2] = (295);
 $$fca$1$gep$i878 = ((($$byval_copy48)) + 4|0);
 HEAP32[$$fca$1$gep$i878>>2] = 0;
 $868 = (__ZN10emscripten8internal6TypeIDI9maxiClockE3getEv()|0);
 $869 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI9maxiClockEEEE8getCountEv($1)|0);
 $870 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI9maxiClockEEEE8getTypesEv($1)|0);
 $871 = (__ZN10emscripten8internal19getGenericSignatureIJviiEEEPKcv()|0);
 $872 = (__ZN10emscripten8internal10getContextIM9maxiClockFvvEEEPT_RKS5_($$byval_copy48)|0);
 __embind_register_class_function(($868|0),(32380|0),($869|0),($870|0),($871|0),(60|0),($872|0),0);
 HEAP32[$$byval_copy48>>2] = (18);
 $$fca$1$gep$i884 = ((($$byval_copy48)) + 4|0);
 HEAP32[$$fca$1$gep$i884>>2] = 0;
 $873 = (__ZN10emscripten8internal6TypeIDI9maxiClockE3getEv()|0);
 $874 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI9maxiClockEEdEE8getCountEv($1)|0);
 $875 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI9maxiClockEEdEE8getTypesEv($1)|0);
 $876 = (__ZN10emscripten8internal19getGenericSignatureIJviidEEEPKcv()|0);
 $877 = (__ZN10emscripten8internal10getContextIM9maxiClockFvdEEEPT_RKS5_($$byval_copy48)|0);
 __embind_register_class_function(($873|0),(32387|0),($874|0),($875|0),($876|0),(10|0),($877|0),0);
 HEAP32[$$byval_copy48>>2] = (61);
 $$fca$1$gep$i890 = ((($$byval_copy48)) + 4|0);
 HEAP32[$$fca$1$gep$i890>>2] = 0;
 $878 = (__ZN10emscripten8internal6TypeIDI9maxiClockE3getEv()|0);
 $879 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI9maxiClockEEiEE8getCountEv($1)|0);
 $880 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI9maxiClockEEiEE8getTypesEv($1)|0);
 $881 = (__ZN10emscripten8internal19getGenericSignatureIJviiiEEEPKcv()|0);
 $882 = (__ZN10emscripten8internal10getContextIM9maxiClockFviEEEPT_RKS5_($$byval_copy48)|0);
 __embind_register_class_function(($878|0),(32396|0),($879|0),($880|0),($881|0),(10|0),($882|0),0);
 HEAP32[$$byval_copy48>>2] = (132);
 $$fca$1$gep$i896 = ((($$byval_copy48)) + 4|0);
 HEAP32[$$fca$1$gep$i896>>2] = 0;
 $883 = (__ZN10emscripten8internal6TypeIDI9maxiClockE3getEv()|0);
 $884 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiNS0_17AllowedRawPointerIK9maxiClockEEEE8getCountEv($1)|0);
 $885 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiNS0_17AllowedRawPointerIK9maxiClockEEEE8getTypesEv($1)|0);
 $886 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0);
 $887 = (__ZN10emscripten8internal10getContextIM9maxiClockKFivEEEPT_RKS5_($$byval_copy48)|0);
 __embind_register_class_function(($883|0),(32412|0),($884|0),($885|0),($886|0),(64|0),($887|0),0);
 $888 = (__ZN10emscripten8internal6TypeIDI9maxiClockE3getEv()|0);
 $889 = (__ZN10emscripten8internal6TypeIDIiE3getEv()|0);
 $890 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0);
 HEAP32[$1>>2] = (133);
 $$fca$1$gep4$i906 = ((($1)) + 4|0);
 HEAP32[$$fca$1$gep4$i906>>2] = 0;
 ;HEAP32[$$byval_copy48>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy48+4>>2]=HEAP32[$1+4>>2]|0;
 $891 = (__ZN10emscripten8internal12GetterPolicyIM9maxiClockKFivEE10getContextES4_($$byval_copy48)|0);
 $892 = (__ZN10emscripten8internal6TypeIDIiE3getEv()|0);
 $893 = (__ZN10emscripten8internal19getGenericSignatureIJviiiEEEPKcv()|0);
 HEAP32[$2>>2] = (62);
 $$fca$1$gep$i908 = ((($2)) + 4|0);
 HEAP32[$$fca$1$gep$i908>>2] = 0;
 ;HEAP32[$$byval_copy48>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy48+4>>2]=HEAP32[$2+4>>2]|0;
 $894 = (__ZN10emscripten8internal12SetterPolicyIM9maxiClockFviEE10getContextES4_($$byval_copy48)|0);
 __embind_register_class_property(($888|0),(32419|0),($889|0),($890|0),(65|0),($891|0),($892|0),($893|0),(11|0),($894|0));
 $895 = (__ZN10emscripten8internal6TypeIDI9maxiClockE3getEv()|0);
 $896 = (__ZN10emscripten8internal6TypeIDIiE3getEv()|0);
 $897 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0);
 HEAP32[$1>>2] = (134);
 $$fca$1$gep4$i918 = ((($1)) + 4|0);
 HEAP32[$$fca$1$gep4$i918>>2] = 0;
 ;HEAP32[$$byval_copy48>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy48+4>>2]=HEAP32[$1+4>>2]|0;
 $898 = (__ZN10emscripten8internal12GetterPolicyIM9maxiClockKFivEE10getContextES4_($$byval_copy48)|0);
 $899 = (__ZN10emscripten8internal6TypeIDIiE3getEv()|0);
 $900 = (__ZN10emscripten8internal19getGenericSignatureIJviiiEEEPKcv()|0);
 HEAP32[$2>>2] = (63);
 $$fca$1$gep$i920 = ((($2)) + 4|0);
 HEAP32[$$fca$1$gep$i920>>2] = 0;
 ;HEAP32[$$byval_copy48>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy48+4>>2]=HEAP32[$2+4>>2]|0;
 $901 = (__ZN10emscripten8internal12SetterPolicyIM9maxiClockFviEE10getContextES4_($$byval_copy48)|0);
 __embind_register_class_property(($895|0),(32419|0),($896|0),($897|0),(65|0),($898|0),($899|0),($900|0),(11|0),($901|0));
 $902 = (__ZN10emscripten8internal6TypeIDI9maxiClockE3getEv()|0);
 $903 = (__ZN10emscripten8internal6TypeIDIiE3getEv()|0);
 $904 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0);
 HEAP32[$1>>2] = (135);
 $$fca$1$gep4$i930 = ((($1)) + 4|0);
 HEAP32[$$fca$1$gep4$i930>>2] = 0;
 ;HEAP32[$$byval_copy48>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy48+4>>2]=HEAP32[$1+4>>2]|0;
 $905 = (__ZN10emscripten8internal12GetterPolicyIM9maxiClockKFivEE10getContextES4_($$byval_copy48)|0);
 $906 = (__ZN10emscripten8internal6TypeIDIiE3getEv()|0);
 $907 = (__ZN10emscripten8internal19getGenericSignatureIJviiiEEEPKcv()|0);
 HEAP32[$2>>2] = (64);
 $$fca$1$gep$i932 = ((($2)) + 4|0);
 HEAP32[$$fca$1$gep$i932>>2] = 0;
 ;HEAP32[$$byval_copy48>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy48+4>>2]=HEAP32[$2+4>>2]|0;
 $908 = (__ZN10emscripten8internal12SetterPolicyIM9maxiClockFviEE10getContextES4_($$byval_copy48)|0);
 __embind_register_class_property(($902|0),(32432|0),($903|0),($904|0),(65|0),($905|0),($906|0),($907|0),(11|0),($908|0));
 $909 = (__ZN10emscripten8internal6TypeIDI9maxiClockE3getEv()|0);
 $910 = (__ZN10emscripten8internal6TypeIDIdE3getEv()|0);
 $911 = (__ZN10emscripten8internal19getGenericSignatureIJdiiEEEPKcv()|0);
 HEAP32[$1>>2] = (10);
 $$fca$1$gep4$i942 = ((($1)) + 4|0);
 HEAP32[$$fca$1$gep4$i942>>2] = 0;
 ;HEAP32[$$byval_copy48>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy48+4>>2]=HEAP32[$1+4>>2]|0;
 $912 = (__ZN10emscripten8internal12GetterPolicyIM9maxiClockKFdvEE10getContextES4_($$byval_copy48)|0);
 $913 = (__ZN10emscripten8internal6TypeIDIiE3getEv()|0);
 $914 = (__ZN10emscripten8internal19getGenericSignatureIJviiiEEEPKcv()|0);
 HEAP32[$2>>2] = (65);
 $$fca$1$gep$i944 = ((($2)) + 4|0);
 HEAP32[$$fca$1$gep$i944>>2] = 0;
 ;HEAP32[$$byval_copy48>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy48+4>>2]=HEAP32[$2+4>>2]|0;
 $915 = (__ZN10emscripten8internal12SetterPolicyIM9maxiClockFviEE10getContextES4_($$byval_copy48)|0);
 __embind_register_class_property(($909|0),(32441|0),($910|0),($911|0),(8|0),($912|0),($913|0),($914|0),(11|0),($915|0));
 $916 = (__ZN10emscripten8internal6TypeIDI9maxiClockE3getEv()|0);
 $917 = (__ZN10emscripten8internal6TypeIDIdE3getEv()|0);
 $918 = (__ZN10emscripten8internal19getGenericSignatureIJdiiEEEPKcv()|0);
 HEAP32[$1>>2] = (11);
 $$fca$1$gep4$i954 = ((($1)) + 4|0);
 HEAP32[$$fca$1$gep4$i954>>2] = 0;
 ;HEAP32[$$byval_copy48>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy48+4>>2]=HEAP32[$1+4>>2]|0;
 $919 = (__ZN10emscripten8internal12GetterPolicyIM9maxiClockKFdvEE10getContextES4_($$byval_copy48)|0);
 $920 = (__ZN10emscripten8internal6TypeIDIiE3getEv()|0);
 $921 = (__ZN10emscripten8internal19getGenericSignatureIJviiiEEEPKcv()|0);
 HEAP32[$2>>2] = (66);
 $$fca$1$gep$i956 = ((($2)) + 4|0);
 HEAP32[$$fca$1$gep$i956>>2] = 0;
 ;HEAP32[$$byval_copy48>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy48+4>>2]=HEAP32[$2+4>>2]|0;
 $922 = (__ZN10emscripten8internal12SetterPolicyIM9maxiClockFviEE10getContextES4_($$byval_copy48)|0);
 __embind_register_class_property(($916|0),(32445|0),($917|0),($918|0),(8|0),($919|0),($920|0),($921|0),(11|0),($922|0));
 $923 = (__ZN10emscripten8internal6TypeIDI9maxiClockE3getEv()|0);
 $924 = (__ZN10emscripten8internal6TypeIDIbE3getEv()|0);
 $925 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0);
 HEAP32[$1>>2] = (136);
 $$fca$1$gep4$i966 = ((($1)) + 4|0);
 HEAP32[$$fca$1$gep4$i966>>2] = 0;
 ;HEAP32[$$byval_copy48>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy48+4>>2]=HEAP32[$1+4>>2]|0;
 $926 = (__ZN10emscripten8internal12GetterPolicyIM9maxiClockKFbvEE10getContextES4_($$byval_copy48)|0);
 $927 = (__ZN10emscripten8internal6TypeIDIiE3getEv()|0);
 $928 = (__ZN10emscripten8internal19getGenericSignatureIJviiiEEEPKcv()|0);
 HEAP32[$2>>2] = (67);
 $$fca$1$gep$i968 = ((($2)) + 4|0);
 HEAP32[$$fca$1$gep$i968>>2] = 0;
 ;HEAP32[$$byval_copy48>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy48+4>>2]=HEAP32[$2+4>>2]|0;
 $929 = (__ZN10emscripten8internal12SetterPolicyIM9maxiClockFviEE10getContextES4_($$byval_copy48)|0);
 __embind_register_class_property(($923|0),(32449|0),($924|0),($925|0),(66|0),($926|0),($927|0),($928|0),(11|0),($929|0));
 $930 = (__ZN10emscripten8internal6TypeIDI9maxiClockE3getEv()|0);
 $931 = (__ZN10emscripten8internal6TypeIDIiE3getEv()|0);
 $932 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0);
 HEAP32[$1>>2] = (137);
 $$fca$1$gep4$i978 = ((($1)) + 4|0);
 HEAP32[$$fca$1$gep4$i978>>2] = 0;
 ;HEAP32[$$byval_copy48>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy48+4>>2]=HEAP32[$1+4>>2]|0;
 $933 = (__ZN10emscripten8internal12GetterPolicyIM9maxiClockKFivEE10getContextES4_($$byval_copy48)|0);
 $934 = (__ZN10emscripten8internal6TypeIDIiE3getEv()|0);
 $935 = (__ZN10emscripten8internal19getGenericSignatureIJviiiEEEPKcv()|0);
 HEAP32[$2>>2] = (68);
 $$fca$1$gep$i980 = ((($2)) + 4|0);
 HEAP32[$$fca$1$gep$i980>>2] = 0;
 ;HEAP32[$$byval_copy48>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy48+4>>2]=HEAP32[$2+4>>2]|0;
 $936 = (__ZN10emscripten8internal12SetterPolicyIM9maxiClockFviEE10getContextES4_($$byval_copy48)|0);
 __embind_register_class_property(($930|0),(32454|0),($931|0),($932|0),(65|0),($933|0),($934|0),($935|0),(11|0),($936|0));
 STACKTOP = sp;return;
}
function __ZN10emscripten15register_vectorIiEENS_6class_INSt3__26vectorIT_NS2_9allocatorIS4_EEEENS_8internal11NoBaseClassEEEPKc($0) {
 $0 = $0|0;
 var $$fca$1$gep$i = 0, $$fca$1$gep$i28 = 0, $$fca$1$gep$i34 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = sp + 8|0;
 __ZN10emscripten8internal11NoBaseClass6verifyINSt3__26vectorIiNS3_9allocatorIiEEEEEEvv();
 $3 = (__ZN10emscripten8internal11NoBaseClass11getUpcasterINSt3__26vectorIiNS3_9allocatorIiEEEEEEPFvvEv()|0);
 $4 = (__ZN10emscripten8internal11NoBaseClass13getDowncasterINSt3__26vectorIiNS3_9allocatorIiEEEEEEPFvvEv()|0);
 $5 = (__ZN10emscripten8internal6TypeIDINSt3__26vectorIiNS2_9allocatorIiEEEEE3getEv()|0);
 $6 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerINSt3__26vectorIiNS3_9allocatorIiEEEEEEE3getEv()|0);
 $7 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIKNSt3__26vectorIiNS3_9allocatorIiEEEEEEE3getEv()|0);
 $8 = (__ZN10emscripten8internal11NoBaseClass3getEv()|0);
 $9 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 $10 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0);
 $11 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0);
 $12 = (__ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv()|0);
 __embind_register_class(($5|0),($6|0),($7|0),($8|0),($9|0),(138|0),($10|0),($3|0),($11|0),($4|0),($0|0),($12|0),(296|0));
 $13 = (__ZN10emscripten8internal6TypeIDINSt3__26vectorIiNS2_9allocatorIiEEEEE3getEv()|0);
 $14 = (__ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJPNSt3__26vectorIiNS5_9allocatorIiEEEEEE8getCountEv($1)|0);
 $15 = (__ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJPNSt3__26vectorIiNS5_9allocatorIiEEEEEE8getTypesEv($1)|0);
 $16 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 __embind_register_class_constructor(($13|0),($14|0),($15|0),($16|0),(139|0),(20|0));
 HEAP32[$1>>2] = (69);
 $$fca$1$gep$i = ((($1)) + 4|0);
 HEAP32[$$fca$1$gep$i>>2] = 0;
 $17 = (__ZN10emscripten8internal6TypeIDINSt3__26vectorIiNS2_9allocatorIiEEEEE3getEv()|0);
 $18 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIiNS5_9allocatorIiEEEEEERKiEE8getCountEv($2)|0);
 $19 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIiNS5_9allocatorIiEEEEEERKiEE8getTypesEv($2)|0);
 $20 = (__ZN10emscripten8internal19getGenericSignatureIJviiiEEEPKcv()|0);
 $21 = (__ZN10emscripten8internal10getContextIMNSt3__26vectorIiNS2_9allocatorIiEEEEFvRKiEEEPT_RKSB_($1)|0);
 __embind_register_class_function(($17|0),(38994|0),($18|0),($19|0),($20|0),(12|0),($21|0),0);
 HEAP32[$1>>2] = (13);
 $$fca$1$gep$i28 = ((($1)) + 4|0);
 HEAP32[$$fca$1$gep$i28>>2] = 0;
 $22 = (__ZN10emscripten8internal6TypeIDINSt3__26vectorIiNS2_9allocatorIiEEEEE3getEv()|0);
 $23 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIiNS5_9allocatorIiEEEEEEmRKiEE8getCountEv($2)|0);
 $24 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIiNS5_9allocatorIiEEEEEEmRKiEE8getTypesEv($2)|0);
 $25 = (__ZN10emscripten8internal19getGenericSignatureIJviiiiEEEPKcv()|0);
 $26 = (__ZN10emscripten8internal10getContextIMNSt3__26vectorIiNS2_9allocatorIiEEEEFvmRKiEEEPT_RKSB_($1)|0);
 __embind_register_class_function(($22|0),(39004|0),($23|0),($24|0),($25|0),(11|0),($26|0),0);
 HEAP32[$1>>2] = (140);
 $$fca$1$gep$i34 = ((($1)) + 4|0);
 HEAP32[$$fca$1$gep$i34>>2] = 0;
 $27 = (__ZN10emscripten8internal6TypeIDINSt3__26vectorIiNS2_9allocatorIiEEEEE3getEv()|0);
 $28 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJmNS0_17AllowedRawPointerIKNSt3__26vectorIiNS5_9allocatorIiEEEEEEEE8getCountEv($2)|0);
 $29 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJmNS0_17AllowedRawPointerIKNSt3__26vectorIiNS5_9allocatorIiEEEEEEEE8getTypesEv($2)|0);
 $30 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0);
 $31 = (__ZN10emscripten8internal10getContextIMNSt3__26vectorIiNS2_9allocatorIiEEEEKFmvEEEPT_RKS9_($1)|0);
 __embind_register_class_function(($27|0),(39011|0),($28|0),($29|0),($30|0),(67|0),($31|0),0);
 HEAP32[$1>>2] = 14;
 $32 = (__ZN10emscripten8internal6TypeIDINSt3__26vectorIiNS2_9allocatorIiEEEEE3getEv()|0);
 $33 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNS_3valERKNSt3__26vectorIiNS5_9allocatorIiEEEEmEE8getCountEv($2)|0);
 $34 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNS_3valERKNSt3__26vectorIiNS5_9allocatorIiEEEEmEE8getTypesEv($2)|0);
 $35 = (__ZN10emscripten8internal19getGenericSignatureIJiiiiEEEPKcv()|0);
 $36 = (__ZN10emscripten8internal10getContextIPFNS_3valERKNSt3__26vectorIiNS3_9allocatorIiEEEEmEEEPT_RKSC_($1)|0);
 __embind_register_class_function(($32|0),(39016|0),($33|0),($34|0),($35|0),(34|0),($36|0),0);
 HEAP32[$1>>2] = 35;
 $37 = (__ZN10emscripten8internal6TypeIDINSt3__26vectorIiNS2_9allocatorIiEEEEE3getEv()|0);
 $38 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbRNSt3__26vectorIiNS4_9allocatorIiEEEEmRKiEE8getCountEv($2)|0);
 $39 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbRNSt3__26vectorIiNS4_9allocatorIiEEEEmRKiEE8getTypesEv($2)|0);
 $40 = (__ZN10emscripten8internal19getGenericSignatureIJiiiiiEEEPKcv()|0);
 $41 = (__ZN10emscripten8internal10getContextIPFbRNSt3__26vectorIiNS2_9allocatorIiEEEEmRKiEEEPT_RKSC_($1)|0);
 __embind_register_class_function(($37|0),(39020|0),($38|0),($39|0),($40|0),(8|0),($41|0),0);
 STACKTOP = sp;return;
}
function __ZN10emscripten15register_vectorIdEENS_6class_INSt3__26vectorIT_NS2_9allocatorIS4_EEEENS_8internal11NoBaseClassEEEPKc($0) {
 $0 = $0|0;
 var $$fca$1$gep$i = 0, $$fca$1$gep$i28 = 0, $$fca$1$gep$i34 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = sp + 8|0;
 __ZN10emscripten8internal11NoBaseClass6verifyINSt3__26vectorIdNS3_9allocatorIdEEEEEEvv();
 $3 = (__ZN10emscripten8internal11NoBaseClass11getUpcasterINSt3__26vectorIdNS3_9allocatorIdEEEEEEPFvvEv()|0);
 $4 = (__ZN10emscripten8internal11NoBaseClass13getDowncasterINSt3__26vectorIdNS3_9allocatorIdEEEEEEPFvvEv()|0);
 $5 = (__ZN10emscripten8internal6TypeIDINSt3__26vectorIdNS2_9allocatorIdEEEEE3getEv()|0);
 $6 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerINSt3__26vectorIdNS3_9allocatorIdEEEEEEE3getEv()|0);
 $7 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIKNSt3__26vectorIdNS3_9allocatorIdEEEEEEE3getEv()|0);
 $8 = (__ZN10emscripten8internal11NoBaseClass3getEv()|0);
 $9 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 $10 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0);
 $11 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0);
 $12 = (__ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv()|0);
 __embind_register_class(($5|0),($6|0),($7|0),($8|0),($9|0),(141|0),($10|0),($3|0),($11|0),($4|0),($0|0),($12|0),(297|0));
 $13 = (__ZN10emscripten8internal6TypeIDINSt3__26vectorIdNS2_9allocatorIdEEEEE3getEv()|0);
 $14 = (__ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJPNSt3__26vectorIdNS5_9allocatorIdEEEEEE8getCountEv($1)|0);
 $15 = (__ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJPNSt3__26vectorIdNS5_9allocatorIdEEEEEE8getTypesEv($1)|0);
 $16 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 __embind_register_class_constructor(($13|0),($14|0),($15|0),($16|0),(142|0),(21|0));
 HEAP32[$1>>2] = (70);
 $$fca$1$gep$i = ((($1)) + 4|0);
 HEAP32[$$fca$1$gep$i>>2] = 0;
 $17 = (__ZN10emscripten8internal6TypeIDINSt3__26vectorIdNS2_9allocatorIdEEEEE3getEv()|0);
 $18 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIdNS5_9allocatorIdEEEEEERKdEE8getCountEv($2)|0);
 $19 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIdNS5_9allocatorIdEEEEEERKdEE8getTypesEv($2)|0);
 $20 = (__ZN10emscripten8internal19getGenericSignatureIJviidEEEPKcv()|0);
 $21 = (__ZN10emscripten8internal10getContextIMNSt3__26vectorIdNS2_9allocatorIdEEEEFvRKdEEEPT_RKSB_($1)|0);
 __embind_register_class_function(($17|0),(38994|0),($18|0),($19|0),($20|0),(11|0),($21|0),0);
 HEAP32[$1>>2] = (15);
 $$fca$1$gep$i28 = ((($1)) + 4|0);
 HEAP32[$$fca$1$gep$i28>>2] = 0;
 $22 = (__ZN10emscripten8internal6TypeIDINSt3__26vectorIdNS2_9allocatorIdEEEEE3getEv()|0);
 $23 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIdNS5_9allocatorIdEEEEEEmRKdEE8getCountEv($2)|0);
 $24 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIdNS5_9allocatorIdEEEEEEmRKdEE8getTypesEv($2)|0);
 $25 = (__ZN10emscripten8internal19getGenericSignatureIJviiidEEEPKcv()|0);
 $26 = (__ZN10emscripten8internal10getContextIMNSt3__26vectorIdNS2_9allocatorIdEEEEFvmRKdEEEPT_RKSB_($1)|0);
 __embind_register_class_function(($22|0),(39004|0),($23|0),($24|0),($25|0),(2|0),($26|0),0);
 HEAP32[$1>>2] = (143);
 $$fca$1$gep$i34 = ((($1)) + 4|0);
 HEAP32[$$fca$1$gep$i34>>2] = 0;
 $27 = (__ZN10emscripten8internal6TypeIDINSt3__26vectorIdNS2_9allocatorIdEEEEE3getEv()|0);
 $28 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJmNS0_17AllowedRawPointerIKNSt3__26vectorIdNS5_9allocatorIdEEEEEEEE8getCountEv($2)|0);
 $29 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJmNS0_17AllowedRawPointerIKNSt3__26vectorIdNS5_9allocatorIdEEEEEEEE8getTypesEv($2)|0);
 $30 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0);
 $31 = (__ZN10emscripten8internal10getContextIMNSt3__26vectorIdNS2_9allocatorIdEEEEKFmvEEEPT_RKS9_($1)|0);
 __embind_register_class_function(($27|0),(39011|0),($28|0),($29|0),($30|0),(68|0),($31|0),0);
 HEAP32[$1>>2] = 16;
 $32 = (__ZN10emscripten8internal6TypeIDINSt3__26vectorIdNS2_9allocatorIdEEEEE3getEv()|0);
 $33 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNS_3valERKNSt3__26vectorIdNS5_9allocatorIdEEEEmEE8getCountEv($2)|0);
 $34 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNS_3valERKNSt3__26vectorIdNS5_9allocatorIdEEEEmEE8getTypesEv($2)|0);
 $35 = (__ZN10emscripten8internal19getGenericSignatureIJiiiiEEEPKcv()|0);
 $36 = (__ZN10emscripten8internal10getContextIPFNS_3valERKNSt3__26vectorIdNS3_9allocatorIdEEEEmEEEPT_RKSC_($1)|0);
 __embind_register_class_function(($32|0),(39016|0),($33|0),($34|0),($35|0),(36|0),($36|0),0);
 HEAP32[$1>>2] = 37;
 $37 = (__ZN10emscripten8internal6TypeIDINSt3__26vectorIdNS2_9allocatorIdEEEEE3getEv()|0);
 $38 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbRNSt3__26vectorIdNS4_9allocatorIdEEEEmRKdEE8getCountEv($2)|0);
 $39 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbRNSt3__26vectorIdNS4_9allocatorIdEEEEmRKdEE8getTypesEv($2)|0);
 $40 = (__ZN10emscripten8internal19getGenericSignatureIJiiiidEEEPKcv()|0);
 $41 = (__ZN10emscripten8internal10getContextIPFbRNSt3__26vectorIdNS2_9allocatorIdEEEEmRKdEEEPT_RKSC_($1)|0);
 __embind_register_class_function(($37|0),(39020|0),($38|0),($39|0),($40|0),(1|0),($41|0),0);
 STACKTOP = sp;return;
}
function __ZN10emscripten15register_vectorIcEENS_6class_INSt3__26vectorIT_NS2_9allocatorIS4_EEEENS_8internal11NoBaseClassEEEPKc($0) {
 $0 = $0|0;
 var $$fca$1$gep$i = 0, $$fca$1$gep$i28 = 0, $$fca$1$gep$i34 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = sp + 8|0;
 __ZN10emscripten8internal11NoBaseClass6verifyINSt3__26vectorIcNS3_9allocatorIcEEEEEEvv();
 $3 = (__ZN10emscripten8internal11NoBaseClass11getUpcasterINSt3__26vectorIcNS3_9allocatorIcEEEEEEPFvvEv()|0);
 $4 = (__ZN10emscripten8internal11NoBaseClass13getDowncasterINSt3__26vectorIcNS3_9allocatorIcEEEEEEPFvvEv()|0);
 $5 = (__ZN10emscripten8internal6TypeIDINSt3__26vectorIcNS2_9allocatorIcEEEEE3getEv()|0);
 $6 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerINSt3__26vectorIcNS3_9allocatorIcEEEEEEE3getEv()|0);
 $7 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIKNSt3__26vectorIcNS3_9allocatorIcEEEEEEE3getEv()|0);
 $8 = (__ZN10emscripten8internal11NoBaseClass3getEv()|0);
 $9 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 $10 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0);
 $11 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0);
 $12 = (__ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv()|0);
 __embind_register_class(($5|0),($6|0),($7|0),($8|0),($9|0),(144|0),($10|0),($3|0),($11|0),($4|0),($0|0),($12|0),(298|0));
 $13 = (__ZN10emscripten8internal6TypeIDINSt3__26vectorIcNS2_9allocatorIcEEEEE3getEv()|0);
 $14 = (__ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJPNSt3__26vectorIcNS5_9allocatorIcEEEEEE8getCountEv($1)|0);
 $15 = (__ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJPNSt3__26vectorIcNS5_9allocatorIcEEEEEE8getTypesEv($1)|0);
 $16 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 __embind_register_class_constructor(($13|0),($14|0),($15|0),($16|0),(145|0),(22|0));
 HEAP32[$1>>2] = (71);
 $$fca$1$gep$i = ((($1)) + 4|0);
 HEAP32[$$fca$1$gep$i>>2] = 0;
 $17 = (__ZN10emscripten8internal6TypeIDINSt3__26vectorIcNS2_9allocatorIcEEEEE3getEv()|0);
 $18 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIcNS5_9allocatorIcEEEEEERKcEE8getCountEv($2)|0);
 $19 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIcNS5_9allocatorIcEEEEEERKcEE8getTypesEv($2)|0);
 $20 = (__ZN10emscripten8internal19getGenericSignatureIJviiiEEEPKcv()|0);
 $21 = (__ZN10emscripten8internal10getContextIMNSt3__26vectorIcNS2_9allocatorIcEEEEFvRKcEEEPT_RKSB_($1)|0);
 __embind_register_class_function(($17|0),(38994|0),($18|0),($19|0),($20|0),(17|0),($21|0),0);
 HEAP32[$1>>2] = (18);
 $$fca$1$gep$i28 = ((($1)) + 4|0);
 HEAP32[$$fca$1$gep$i28>>2] = 0;
 $22 = (__ZN10emscripten8internal6TypeIDINSt3__26vectorIcNS2_9allocatorIcEEEEE3getEv()|0);
 $23 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIcNS5_9allocatorIcEEEEEEmRKcEE8getCountEv($2)|0);
 $24 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIcNS5_9allocatorIcEEEEEEmRKcEE8getTypesEv($2)|0);
 $25 = (__ZN10emscripten8internal19getGenericSignatureIJviiiiEEEPKcv()|0);
 $26 = (__ZN10emscripten8internal10getContextIMNSt3__26vectorIcNS2_9allocatorIcEEEEFvmRKcEEEPT_RKSB_($1)|0);
 __embind_register_class_function(($22|0),(39004|0),($23|0),($24|0),($25|0),(12|0),($26|0),0);
 HEAP32[$1>>2] = (146);
 $$fca$1$gep$i34 = ((($1)) + 4|0);
 HEAP32[$$fca$1$gep$i34>>2] = 0;
 $27 = (__ZN10emscripten8internal6TypeIDINSt3__26vectorIcNS2_9allocatorIcEEEEE3getEv()|0);
 $28 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJmNS0_17AllowedRawPointerIKNSt3__26vectorIcNS5_9allocatorIcEEEEEEEE8getCountEv($2)|0);
 $29 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJmNS0_17AllowedRawPointerIKNSt3__26vectorIcNS5_9allocatorIcEEEEEEEE8getTypesEv($2)|0);
 $30 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0);
 $31 = (__ZN10emscripten8internal10getContextIMNSt3__26vectorIcNS2_9allocatorIcEEEEKFmvEEEPT_RKS9_($1)|0);
 __embind_register_class_function(($27|0),(39011|0),($28|0),($29|0),($30|0),(69|0),($31|0),0);
 HEAP32[$1>>2] = 19;
 $32 = (__ZN10emscripten8internal6TypeIDINSt3__26vectorIcNS2_9allocatorIcEEEEE3getEv()|0);
 $33 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNS_3valERKNSt3__26vectorIcNS5_9allocatorIcEEEEmEE8getCountEv($2)|0);
 $34 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNS_3valERKNSt3__26vectorIcNS5_9allocatorIcEEEEmEE8getTypesEv($2)|0);
 $35 = (__ZN10emscripten8internal19getGenericSignatureIJiiiiEEEPKcv()|0);
 $36 = (__ZN10emscripten8internal10getContextIPFNS_3valERKNSt3__26vectorIcNS3_9allocatorIcEEEEmEEEPT_RKSC_($1)|0);
 __embind_register_class_function(($32|0),(39016|0),($33|0),($34|0),($35|0),(38|0),($36|0),0);
 HEAP32[$1>>2] = 39;
 $37 = (__ZN10emscripten8internal6TypeIDINSt3__26vectorIcNS2_9allocatorIcEEEEE3getEv()|0);
 $38 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbRNSt3__26vectorIcNS4_9allocatorIcEEEEmRKcEE8getCountEv($2)|0);
 $39 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbRNSt3__26vectorIcNS4_9allocatorIcEEEEmRKcEE8getTypesEv($2)|0);
 $40 = (__ZN10emscripten8internal19getGenericSignatureIJiiiiiEEEPKcv()|0);
 $41 = (__ZN10emscripten8internal10getContextIPFbRNSt3__26vectorIcNS2_9allocatorIcEEEEmRKcEEEPT_RKSC_($1)|0);
 __embind_register_class_function(($37|0),(39020|0),($38|0),($39|0),($40|0),(9|0),($41|0),0);
 STACKTOP = sp;return;
}
function __ZN10emscripten15register_vectorIfEENS_6class_INSt3__26vectorIT_NS2_9allocatorIS4_EEEENS_8internal11NoBaseClassEEEPKc($0) {
 $0 = $0|0;
 var $$fca$1$gep$i = 0, $$fca$1$gep$i28 = 0, $$fca$1$gep$i34 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = sp + 8|0;
 __ZN10emscripten8internal11NoBaseClass6verifyINSt3__26vectorIfNS3_9allocatorIfEEEEEEvv();
 $3 = (__ZN10emscripten8internal11NoBaseClass11getUpcasterINSt3__26vectorIfNS3_9allocatorIfEEEEEEPFvvEv()|0);
 $4 = (__ZN10emscripten8internal11NoBaseClass13getDowncasterINSt3__26vectorIfNS3_9allocatorIfEEEEEEPFvvEv()|0);
 $5 = (__ZN10emscripten8internal6TypeIDINSt3__26vectorIfNS2_9allocatorIfEEEEE3getEv()|0);
 $6 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerINSt3__26vectorIfNS3_9allocatorIfEEEEEEE3getEv()|0);
 $7 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIKNSt3__26vectorIfNS3_9allocatorIfEEEEEEE3getEv()|0);
 $8 = (__ZN10emscripten8internal11NoBaseClass3getEv()|0);
 $9 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 $10 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0);
 $11 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0);
 $12 = (__ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv()|0);
 __embind_register_class(($5|0),($6|0),($7|0),($8|0),($9|0),(147|0),($10|0),($3|0),($11|0),($4|0),($0|0),($12|0),(299|0));
 $13 = (__ZN10emscripten8internal6TypeIDINSt3__26vectorIfNS2_9allocatorIfEEEEE3getEv()|0);
 $14 = (__ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJPNSt3__26vectorIfNS5_9allocatorIfEEEEEE8getCountEv($1)|0);
 $15 = (__ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJPNSt3__26vectorIfNS5_9allocatorIfEEEEEE8getTypesEv($1)|0);
 $16 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 __embind_register_class_constructor(($13|0),($14|0),($15|0),($16|0),(148|0),(23|0));
 HEAP32[$1>>2] = (72);
 $$fca$1$gep$i = ((($1)) + 4|0);
 HEAP32[$$fca$1$gep$i>>2] = 0;
 $17 = (__ZN10emscripten8internal6TypeIDINSt3__26vectorIfNS2_9allocatorIfEEEEE3getEv()|0);
 $18 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIfNS5_9allocatorIfEEEEEERKfEE8getCountEv($2)|0);
 $19 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIfNS5_9allocatorIfEEEEEERKfEE8getTypesEv($2)|0);
 $20 = (__ZN10emscripten8internal19getGenericSignatureIJviifEEEPKcv()|0);
 $21 = (__ZN10emscripten8internal10getContextIMNSt3__26vectorIfNS2_9allocatorIfEEEEFvRKfEEEPT_RKSB_($1)|0);
 __embind_register_class_function(($17|0),(38994|0),($18|0),($19|0),($20|0),(12|0),($21|0),0);
 HEAP32[$1>>2] = (20);
 $$fca$1$gep$i28 = ((($1)) + 4|0);
 HEAP32[$$fca$1$gep$i28>>2] = 0;
 $22 = (__ZN10emscripten8internal6TypeIDINSt3__26vectorIfNS2_9allocatorIfEEEEE3getEv()|0);
 $23 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIfNS5_9allocatorIfEEEEEEmRKfEE8getCountEv($2)|0);
 $24 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIfNS5_9allocatorIfEEEEEEmRKfEE8getTypesEv($2)|0);
 $25 = (__ZN10emscripten8internal19getGenericSignatureIJviiifEEEPKcv()|0);
 $26 = (__ZN10emscripten8internal10getContextIMNSt3__26vectorIfNS2_9allocatorIfEEEEFvmRKfEEEPT_RKSB_($1)|0);
 __embind_register_class_function(($22|0),(39004|0),($23|0),($24|0),($25|0),(3|0),($26|0),0);
 HEAP32[$1>>2] = (149);
 $$fca$1$gep$i34 = ((($1)) + 4|0);
 HEAP32[$$fca$1$gep$i34>>2] = 0;
 $27 = (__ZN10emscripten8internal6TypeIDINSt3__26vectorIfNS2_9allocatorIfEEEEE3getEv()|0);
 $28 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJmNS0_17AllowedRawPointerIKNSt3__26vectorIfNS5_9allocatorIfEEEEEEEE8getCountEv($2)|0);
 $29 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJmNS0_17AllowedRawPointerIKNSt3__26vectorIfNS5_9allocatorIfEEEEEEEE8getTypesEv($2)|0);
 $30 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0);
 $31 = (__ZN10emscripten8internal10getContextIMNSt3__26vectorIfNS2_9allocatorIfEEEEKFmvEEEPT_RKS9_($1)|0);
 __embind_register_class_function(($27|0),(39011|0),($28|0),($29|0),($30|0),(70|0),($31|0),0);
 HEAP32[$1>>2] = 21;
 $32 = (__ZN10emscripten8internal6TypeIDINSt3__26vectorIfNS2_9allocatorIfEEEEE3getEv()|0);
 $33 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNS_3valERKNSt3__26vectorIfNS5_9allocatorIfEEEEmEE8getCountEv($2)|0);
 $34 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNS_3valERKNSt3__26vectorIfNS5_9allocatorIfEEEEmEE8getTypesEv($2)|0);
 $35 = (__ZN10emscripten8internal19getGenericSignatureIJiiiiEEEPKcv()|0);
 $36 = (__ZN10emscripten8internal10getContextIPFNS_3valERKNSt3__26vectorIfNS3_9allocatorIfEEEEmEEEPT_RKSC_($1)|0);
 __embind_register_class_function(($32|0),(39016|0),($33|0),($34|0),($35|0),(40|0),($36|0),0);
 HEAP32[$1>>2] = 41;
 $37 = (__ZN10emscripten8internal6TypeIDINSt3__26vectorIfNS2_9allocatorIfEEEEE3getEv()|0);
 $38 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbRNSt3__26vectorIfNS4_9allocatorIfEEEEmRKfEE8getCountEv($2)|0);
 $39 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbRNSt3__26vectorIfNS4_9allocatorIfEEEEmRKfEE8getTypesEv($2)|0);
 $40 = (__ZN10emscripten8internal19getGenericSignatureIJiiiifEEEPKcv()|0);
 $41 = (__ZN10emscripten8internal10getContextIPFbRNSt3__26vectorIfNS2_9allocatorIfEEEEmRKfEEEPT_RKSC_($1)|0);
 __embind_register_class_function(($37|0),(39020|0),($38|0),($39|0),($40|0),(2|0),($41|0),0);
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal11NoBaseClass6verifyI11vectorToolsEEvv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10emscripten8internal11NoBaseClass11getUpcasterI11vectorToolsEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal11NoBaseClass13getDowncasterI11vectorToolsEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal6TypeIDI11vectorToolsE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDI11vectorToolsE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerI11vectorToolsEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIP11vectorToolsE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIK11vectorToolsEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIPK11vectorToolsE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11NoBaseClass3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (38975|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (38973|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (38970|0);
}
function __ZN10emscripten8internal13getActualTypeI11vectorToolsEEPKvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14getLightTypeIDI11vectorToolsEEPKvRKT_($0)|0);
 return ($1|0);
}
function __ZN10emscripten8internal14raw_destructorI11vectorToolsEEvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 __ZdlPv($0);
 return;
}
function __ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJP11vectorToolsEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJP11vectorToolsEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS0_17AllowedRawPointerI11vectorToolsEEEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal7InvokerIP11vectorToolsJEE6invokeEPFS3_vE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (FUNCTION_TABLE_i[$0 & 31]()|0);
 $2 = (__ZN10emscripten8internal11BindingTypeIP11vectorToolsE10toWireTypeES3_($1)|0);
 return ($2|0);
}
function __ZN10emscripten8internal12operator_newI11vectorToolsJEEEPT_DpOT0_() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Znwm(1)|0);
 return ($0|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvRNSt3__26vectorIdNS4_9allocatorIdEEEEEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvRNSt3__26vectorIdNS4_9allocatorIdEEEEEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvRNSt3__26vectorIdNS3_9allocatorIdEEEEEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJviiEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (38937|0);
}
function __ZN10emscripten8internal7InvokerIvJRNSt3__26vectorIdNS2_9allocatorIdEEEEEE6invokeEPFvS7_EPS6_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZN10emscripten8internal18GenericBindingTypeINSt3__26vectorIdNS2_9allocatorIdEEEEE12fromWireTypeEPS6_($1)|0);
 FUNCTION_TABLE_vi[$0 & 511]($2);
 return;
}
function __ZN11vectorTools14clearVectorDblERNSt3__26vectorIdNS0_9allocatorIdEEEE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($0)) + 4|0);
 HEAP32[$2>>2] = $1;
 return;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvRNSt3__26vectorIfNS4_9allocatorIfEEEEEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvRNSt3__26vectorIfNS4_9allocatorIfEEEEEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvRNSt3__26vectorIfNS3_9allocatorIfEEEEEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal7InvokerIvJRNSt3__26vectorIfNS2_9allocatorIfEEEEEE6invokeEPFvS7_EPS6_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZN10emscripten8internal18GenericBindingTypeINSt3__26vectorIfNS2_9allocatorIfEEEEE12fromWireTypeEPS6_($1)|0);
 FUNCTION_TABLE_vi[$0 & 511]($2);
 return;
}
function __ZN11vectorTools16clearVectorFloatERNSt3__26vectorIfNS0_9allocatorIfEEEE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($0)) + 4|0);
 HEAP32[$2>>2] = $1;
 return;
}
function __ZN10emscripten8internal11NoBaseClass6verifyI12maxiSettingsEEvv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10emscripten8internal11NoBaseClass11getUpcasterI12maxiSettingsEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal11NoBaseClass13getDowncasterI12maxiSettingsEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal6TypeIDI12maxiSettingsE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDI12maxiSettingsE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerI12maxiSettingsEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIP12maxiSettingsE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIK12maxiSettingsEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIPK12maxiSettingsE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal13getActualTypeI12maxiSettingsEEPKvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14getLightTypeIDI12maxiSettingsEEPKvRKT_($0)|0);
 return ($1|0);
}
function __ZN10emscripten8internal14raw_destructorI12maxiSettingsEEvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 __ZdlPv($0);
 return;
}
function __ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJP12maxiSettingsEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJP12maxiSettingsEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS0_17AllowedRawPointerI12maxiSettingsEEEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal7InvokerIP12maxiSettingsJEE6invokeEPFS3_vE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (FUNCTION_TABLE_i[$0 & 31]()|0);
 $2 = (__ZN10emscripten8internal11BindingTypeIP12maxiSettingsE10toWireTypeES3_($1)|0);
 return ($2|0);
}
function __ZN10emscripten8internal12operator_newI12maxiSettingsJEEEPT_DpOT0_() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Znwm(1)|0);
 return ($0|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJviiiEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 4;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJviiiEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJviiiEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJviiiiEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (38803|0);
}
function __ZN10emscripten8internal7InvokerIvJiiiEE6invokeEPFviiiEiii($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($1)|0);
 $5 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($2)|0);
 $6 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($3)|0);
 FUNCTION_TABLE_viii[$0 & 63]($4,$5,$6);
 return;
}
function __ZN12maxiSettings5setupEiii($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[6238] = $0;
 HEAP32[6239] = $1;
 HEAP32[6240] = $2;
 return;
}
function __ZN10emscripten8internal6TypeIDIiE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIiE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (38799|0);
}
function __ZNK12maxiSettings13getSampleRateEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[6238]|0;
 return ($1|0);
}
function __ZN10emscripten8internal12GetterPolicyIM12maxiSettingsKFivEE10getContextES4_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$fca$1$gep = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$fca$1$gep = ((($1)) + 4|0);
 HEAP32[$$fca$1$gep>>2] = $$unpack2;
 $2 = (__ZN10emscripten8internal10getContextIM12maxiSettingsKFivEEEPT_RKS5_($1)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJviiiEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (38794|0);
}
function __ZN12maxiSettings13setSampleRateEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[6238] = $1;
 return;
}
function __ZN10emscripten8internal12SetterPolicyIM12maxiSettingsFviEE10getContextES4_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$fca$1$gep = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$fca$1$gep = ((($1)) + 4|0);
 HEAP32[$$fca$1$gep>>2] = $$unpack2;
 $2 = (__ZN10emscripten8internal10getContextIM12maxiSettingsFviEEEPT_RKS5_($1)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN10emscripten8internal12GetterPolicyIM12maxiSettingsKFivEE3getIS2_EEiRKS4_RKT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$elt2 = 0, $$unpack = 0, $$unpack3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $$unpack = HEAP32[$0>>2]|0;
 $$elt2 = ((($0)) + 4|0);
 $$unpack3 = HEAP32[$$elt2>>2]|0;
 $3 = $$unpack3 >> 1;
 $4 = (($1) + ($3)|0);
 $5 = $$unpack3 & 1;
 $6 = ($5|0)==(0);
 if ($6) {
  $10 = $$unpack;
  $11 = $10;
 } else {
  $7 = HEAP32[$4>>2]|0;
  $8 = (($7) + ($$unpack)|0);
  $9 = HEAP32[$8>>2]|0;
  $11 = $9;
 }
 $12 = (FUNCTION_TABLE_ii[$11 & 255]($4)|0);
 HEAP32[$2>>2] = $12;
 $13 = (__ZN10emscripten8internal11BindingTypeIiE10toWireTypeERKi($2)|0);
 STACKTOP = sp;return ($13|0);
}
function __ZN10emscripten8internal12SetterPolicyIM12maxiSettingsFviEE3setIS2_EEvRKS4_RT_i($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$elt2 = 0, $$unpack = 0, $$unpack3 = 0, $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$unpack = HEAP32[$0>>2]|0;
 $$elt2 = ((($0)) + 4|0);
 $$unpack3 = HEAP32[$$elt2>>2]|0;
 $3 = $$unpack3 >> 1;
 $4 = (($1) + ($3)|0);
 $5 = $$unpack3 & 1;
 $6 = ($5|0)==(0);
 if ($6) {
  $10 = $$unpack;
  $12 = $10;
 } else {
  $7 = HEAP32[$4>>2]|0;
  $8 = (($7) + ($$unpack)|0);
  $9 = HEAP32[$8>>2]|0;
  $12 = $9;
 }
 $11 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($2)|0);
 FUNCTION_TABLE_vii[$12 & 255]($4,$11);
 return;
}
function __ZNK12maxiSettings14getNumChannelsEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[6239]|0;
 return ($1|0);
}
function __ZN12maxiSettings14setNumChannelsEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[6239] = $1;
 return;
}
function __ZNK12maxiSettings13getBufferSizeEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[6240]|0;
 return ($1|0);
}
function __ZN12maxiSettings13setBufferSizeEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[6240] = $1;
 return;
}
function __ZN10emscripten8internal11NoBaseClass6verifyI7maxiOscEEvv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10emscripten8internal11NoBaseClass11getUpcasterI7maxiOscEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal11NoBaseClass13getDowncasterI7maxiOscEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal6TypeIDI7maxiOscE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDI7maxiOscE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerI7maxiOscEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIP7maxiOscE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIK7maxiOscEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIPK7maxiOscE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal13getActualTypeI7maxiOscEEPKvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14getLightTypeIDI7maxiOscEEPKvRKT_($0)|0);
 return ($1|0);
}
function __ZN10emscripten8internal14raw_destructorI7maxiOscEEvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 __ZdlPv($0);
 return;
}
function __ZN10emscripten8internal6TypeIDINSt3__210shared_ptrI7maxiOscEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINSt3__210shared_ptrI7maxiOscEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiOscEEE18get_sharing_policyEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2;
}
function __ZN10emscripten8internal19getGenericSignatureIJiEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (38781|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiOscEEE3getERKS4_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiOscEEE14construct_nullEv() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Znwm(8)|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($0)) + 4|0);
 HEAP32[$1>>2] = 0;
 return ($0|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiOscEEE5shareEPS3_PNS_8internal7_EM_VALE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$04 = 0, $$1 = 0, $$15 = 0, $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 12|0;
 $2 = sp + 8|0;
 $3 = sp + 4|0;
 $4 = sp;
 $5 = (__Znwm(8)|0);
 __THREW__ = 0;
 invoke_vii(73,($3|0),($1|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $12 = ___cxa_find_matching_catch_2()|0;
  $13 = (getTempRet0() | 0);
  $$1 = $13;$$15 = $12;
  __ZdlPv($5);
  ___resumeException($$15|0);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vii(74,($2|0),($3|0));
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 do {
  if ($9) {
   $14 = ___cxa_find_matching_catch_2()|0;
   $15 = (getTempRet0() | 0);
   $$0 = $15;$$04 = $14;
  } else {
   HEAP32[$4>>2] = 0;
   __THREW__ = 0;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$4>>2]|0;
   invoke_viiii(13,($5|0),($0|0),($2|0),($$byval_copy|0));
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if ($11) {
    $16 = ___cxa_find_matching_catch_2()|0;
    $17 = (getTempRet0() | 0);
    __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiOscEEE11val_deleterD2Ev($2);
    $$0 = $17;$$04 = $16;
    break;
   } else {
    __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiOscEEE11val_deleterD2Ev($2);
    __ZN10emscripten3valD2Ev($3);
    STACKTOP = sp;return ($5|0);
   }
  }
 } while(0);
 __ZN10emscripten3valD2Ev($3);
 $$1 = $$0;$$15 = $$04;
 __ZdlPv($5);
 ___resumeException($$15|0);
 // unreachable;
 return (0)|0;
}
function __ZN10emscripten8internal14raw_destructorINSt3__210shared_ptrI7maxiOscEEEEvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 __ZNSt3__210shared_ptrI7maxiOscED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210shared_ptrI7maxiOscEEEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210shared_ptrI7maxiOscEEEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNSt3__210shared_ptrI7maxiOscEEEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal7InvokerINSt3__210shared_ptrI7maxiOscEEJEE6invokeEPFS5_vE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 FUNCTION_TABLE_vi[$0 & 511]($1);
 __THREW__ = 0;
 $2 = (invoke_ii(150,($1|0))|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $5 = ___cxa_find_matching_catch_2()|0;
  $6 = (getTempRet0() | 0);
  __ZNSt3__210shared_ptrI7maxiOscED2Ev($1);
  ___resumeException($5|0);
  // unreachable;
 } else {
  __ZNSt3__210shared_ptrI7maxiOscED2Ev($1);
  STACKTOP = sp;return ($2|0);
 }
 return (0)|0;
}
function __ZNSt3__211make_sharedI7maxiOscJEEENS_9enable_ifIXntsr8is_arrayIT_EE5valueENS_10shared_ptrIS3_EEE4typeEDpOT0_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__210shared_ptrI7maxiOscE11make_sharedIJEEES2_DpOT_($0);
 return;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7maxiOscEEdEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 3;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7maxiOscEEdEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJdNS0_17AllowedRawPointerI7maxiOscEEdEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJdiidEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (38480|0);
}
function __ZN10emscripten8internal10getContextIM7maxiOscFddEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal13MethodInvokerIM7maxiOscFddEdPS2_JdEE6invokeERKS4_S5_d($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 var $$elt3 = 0, $$unpack = 0, $$unpack4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = (__ZN10emscripten8internal11BindingTypeIP7maxiOscE12fromWireTypeES3_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt3 = ((($0)) + 4|0);
 $$unpack4 = HEAP32[$$elt3>>2]|0;
 $5 = $$unpack4 >> 1;
 $6 = (($4) + ($5)|0);
 $7 = $$unpack4 & 1;
 $8 = ($7|0)==(0);
 if ($8) {
  $12 = $$unpack;
  $14 = $12;
 } else {
  $9 = HEAP32[$6>>2]|0;
  $10 = (($9) + ($$unpack)|0);
  $11 = HEAP32[$10>>2]|0;
  $14 = $11;
 }
 $13 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($2));
 $15 = (+FUNCTION_TABLE_did[$14 & 15]($6,$13));
 HEAPF64[$3>>3] = $15;
 $16 = (+__ZN10emscripten8internal11BindingTypeIdE10toWireTypeERKd($3));
 STACKTOP = sp;return (+$16);
}
function __ZN10emscripten15select_overloadIFddE7maxiOscEEDtfp_EMT0_T_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$elt7 = 0, $$repack10 = 0, $$unpack = 0, $$unpack8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$unpack = HEAP32[$1>>2]|0;
 $$elt7 = ((($1)) + 4|0);
 $$unpack8 = HEAP32[$$elt7>>2]|0;
 HEAP32[$0>>2] = $$unpack;
 $$repack10 = ((($0)) + 4|0);
 HEAP32[$$repack10>>2] = $$unpack8;
 return;
}
function __ZN10emscripten15select_overloadIFddddE7maxiOscEEDtfp_EMT0_T_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$elt7 = 0, $$repack10 = 0, $$unpack = 0, $$unpack8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$unpack = HEAP32[$1>>2]|0;
 $$elt7 = ((($1)) + 4|0);
 $$unpack8 = HEAP32[$$elt7>>2]|0;
 HEAP32[$0>>2] = $$unpack;
 $$repack10 = ((($0)) + 4|0);
 HEAP32[$$repack10>>2] = $$unpack8;
 return;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7maxiOscEEdddEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 5;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7maxiOscEEdddEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJdNS0_17AllowedRawPointerI7maxiOscEEdddEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJdiidddEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (38473|0);
}
function __ZN10emscripten8internal10getContextIM7maxiOscFddddEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal13MethodInvokerIM7maxiOscFddddEdPS2_JdddEE6invokeERKS4_S5_ddd($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 var $$elt5 = 0, $$unpack = 0, $$unpack6 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $20 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $5 = sp;
 $6 = (__ZN10emscripten8internal11BindingTypeIP7maxiOscE12fromWireTypeES3_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt5 = ((($0)) + 4|0);
 $$unpack6 = HEAP32[$$elt5>>2]|0;
 $7 = $$unpack6 >> 1;
 $8 = (($6) + ($7)|0);
 $9 = $$unpack6 & 1;
 $10 = ($9|0)==(0);
 if ($10) {
  $14 = $$unpack;
  $18 = $14;
 } else {
  $11 = HEAP32[$8>>2]|0;
  $12 = (($11) + ($$unpack)|0);
  $13 = HEAP32[$12>>2]|0;
  $18 = $13;
 }
 $15 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($2));
 $16 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($3));
 $17 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($4));
 $19 = (+FUNCTION_TABLE_diddd[$18 & 7]($8,$15,$16,$17));
 HEAPF64[$5>>3] = $19;
 $20 = (+__ZN10emscripten8internal11BindingTypeIdE10toWireTypeERKd($5));
 STACKTOP = sp;return (+$20);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7maxiOscEEddEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 4;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7maxiOscEEddEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJdNS0_17AllowedRawPointerI7maxiOscEEddEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJdiiddEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (38467|0);
}
function __ZN10emscripten8internal10getContextIM7maxiOscFdddEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal13MethodInvokerIM7maxiOscFdddEdPS2_JddEE6invokeERKS4_S5_dd($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = +$3;
 var $$elt4 = 0, $$unpack = 0, $$unpack5 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = (__ZN10emscripten8internal11BindingTypeIP7maxiOscE12fromWireTypeES3_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt4 = ((($0)) + 4|0);
 $$unpack5 = HEAP32[$$elt4>>2]|0;
 $6 = $$unpack5 >> 1;
 $7 = (($5) + ($6)|0);
 $8 = $$unpack5 & 1;
 $9 = ($8|0)==(0);
 if ($9) {
  $13 = $$unpack;
  $16 = $13;
 } else {
  $10 = HEAP32[$7>>2]|0;
  $11 = (($10) + ($$unpack)|0);
  $12 = HEAP32[$11>>2]|0;
  $16 = $12;
 }
 $14 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($2));
 $15 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($3));
 $17 = (+FUNCTION_TABLE_didd[$16 & 7]($7,$14,$15));
 HEAPF64[$4>>3] = $17;
 $18 = (+__ZN10emscripten8internal11BindingTypeIdE10toWireTypeERKd($4));
 STACKTOP = sp;return (+$18);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7maxiOscEEEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7maxiOscEEEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJdNS0_17AllowedRawPointerI7maxiOscEEEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJdiiEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (38463|0);
}
function __ZN10emscripten8internal10getContextIM7maxiOscFdvEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal13MethodInvokerIM7maxiOscFdvEdPS2_JEE6invokeERKS4_S5_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$elt2 = 0, $$unpack = 0, $$unpack3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = (__ZN10emscripten8internal11BindingTypeIP7maxiOscE12fromWireTypeES3_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt2 = ((($0)) + 4|0);
 $$unpack3 = HEAP32[$$elt2>>2]|0;
 $4 = $$unpack3 >> 1;
 $5 = (($3) + ($4)|0);
 $6 = $$unpack3 & 1;
 $7 = ($6|0)==(0);
 if ($7) {
  $11 = $$unpack;
  $12 = $11;
 } else {
  $8 = HEAP32[$5>>2]|0;
  $9 = (($8) + ($$unpack)|0);
  $10 = HEAP32[$9>>2]|0;
  $12 = $10;
 }
 $13 = (+FUNCTION_TABLE_di[$12 & 15]($5));
 HEAPF64[$2>>3] = $13;
 $14 = (+__ZN10emscripten8internal11BindingTypeIdE10toWireTypeERKd($2));
 STACKTOP = sp;return (+$14);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI7maxiOscEEdEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 3;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI7maxiOscEEdEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerI7maxiOscEEdEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJviidEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (38439|0);
}
function __ZN10emscripten8internal10getContextIM7maxiOscFvdEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal13MethodInvokerIM7maxiOscFvdEvPS2_JdEE6invokeERKS4_S5_d($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 var $$elt3 = 0, $$unpack = 0, $$unpack4 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (__ZN10emscripten8internal11BindingTypeIP7maxiOscE12fromWireTypeES3_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt3 = ((($0)) + 4|0);
 $$unpack4 = HEAP32[$$elt3>>2]|0;
 $4 = $$unpack4 >> 1;
 $5 = (($3) + ($4)|0);
 $6 = $$unpack4 & 1;
 $7 = ($6|0)==(0);
 if ($7) {
  $11 = $$unpack;
  $13 = $11;
 } else {
  $8 = HEAP32[$5>>2]|0;
  $9 = (($8) + ($$unpack)|0);
  $10 = HEAP32[$9>>2]|0;
  $13 = $10;
 }
 $12 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($2));
 FUNCTION_TABLE_vid[$13 & 31]($5,$12);
 return;
}
function __ZN10emscripten8internal11NoBaseClass6verifyI12maxiEnvelopeEEvv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10emscripten8internal11NoBaseClass11getUpcasterI12maxiEnvelopeEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal11NoBaseClass13getDowncasterI12maxiEnvelopeEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal6TypeIDI12maxiEnvelopeE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDI12maxiEnvelopeE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerI12maxiEnvelopeEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIP12maxiEnvelopeE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIK12maxiEnvelopeEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIPK12maxiEnvelopeE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal13getActualTypeI12maxiEnvelopeEEPKvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14getLightTypeIDI12maxiEnvelopeEEPKvRKT_($0)|0);
 return ($1|0);
}
function __ZN10emscripten8internal14raw_destructorI12maxiEnvelopeEEvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 __ZdlPv($0);
 return;
}
function __ZN10emscripten8internal6TypeIDINSt3__210shared_ptrI12maxiEnvelopeEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINSt3__210shared_ptrI12maxiEnvelopeEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI12maxiEnvelopeEEE18get_sharing_policyEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI12maxiEnvelopeEEE3getERKS4_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI12maxiEnvelopeEEE14construct_nullEv() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Znwm(8)|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($0)) + 4|0);
 HEAP32[$1>>2] = 0;
 return ($0|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI12maxiEnvelopeEEE5shareEPS3_PNS_8internal7_EM_VALE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$04 = 0, $$1 = 0, $$15 = 0, $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 12|0;
 $2 = sp + 8|0;
 $3 = sp + 4|0;
 $4 = sp;
 $5 = (__Znwm(8)|0);
 __THREW__ = 0;
 invoke_vii(73,($3|0),($1|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $12 = ___cxa_find_matching_catch_2()|0;
  $13 = (getTempRet0() | 0);
  $$1 = $13;$$15 = $12;
  __ZdlPv($5);
  ___resumeException($$15|0);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vii(75,($2|0),($3|0));
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 do {
  if ($9) {
   $14 = ___cxa_find_matching_catch_2()|0;
   $15 = (getTempRet0() | 0);
   $$0 = $15;$$04 = $14;
  } else {
   HEAP32[$4>>2] = 0;
   __THREW__ = 0;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$4>>2]|0;
   invoke_viiii(14,($5|0),($0|0),($2|0),($$byval_copy|0));
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if ($11) {
    $16 = ___cxa_find_matching_catch_2()|0;
    $17 = (getTempRet0() | 0);
    __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI12maxiEnvelopeEEE11val_deleterD2Ev($2);
    $$0 = $17;$$04 = $16;
    break;
   } else {
    __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI12maxiEnvelopeEEE11val_deleterD2Ev($2);
    __ZN10emscripten3valD2Ev($3);
    STACKTOP = sp;return ($5|0);
   }
  }
 } while(0);
 __ZN10emscripten3valD2Ev($3);
 $$1 = $$0;$$15 = $$04;
 __ZdlPv($5);
 ___resumeException($$15|0);
 // unreachable;
 return (0)|0;
}
function __ZN10emscripten8internal14raw_destructorINSt3__210shared_ptrI12maxiEnvelopeEEEEvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 __ZNSt3__210shared_ptrI12maxiEnvelopeED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210shared_ptrI12maxiEnvelopeEEEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210shared_ptrI12maxiEnvelopeEEEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNSt3__210shared_ptrI12maxiEnvelopeEEEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal7InvokerINSt3__210shared_ptrI12maxiEnvelopeEEJEE6invokeEPFS5_vE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 FUNCTION_TABLE_vi[$0 & 511]($1);
 __THREW__ = 0;
 $2 = (invoke_ii(151,($1|0))|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $5 = ___cxa_find_matching_catch_2()|0;
  $6 = (getTempRet0() | 0);
  __ZNSt3__210shared_ptrI12maxiEnvelopeED2Ev($1);
  ___resumeException($5|0);
  // unreachable;
 } else {
  __ZNSt3__210shared_ptrI12maxiEnvelopeED2Ev($1);
  STACKTOP = sp;return ($2|0);
 }
 return (0)|0;
}
function __ZNSt3__211make_sharedI12maxiEnvelopeJEEENS_9enable_ifIXntsr8is_arrayIT_EE5valueENS_10shared_ptrIS3_EEE4typeEDpOT0_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__210shared_ptrI12maxiEnvelopeE11make_sharedIJEEES2_DpOT_($0);
 return;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI12maxiEnvelopeEEiRNSt3__26vectorIdNS7_9allocatorIdEEEEEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 4;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI12maxiEnvelopeEEiRNSt3__26vectorIdNS7_9allocatorIdEEEEEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJdNS0_17AllowedRawPointerI12maxiEnvelopeEEiRNSt3__26vectorIdNS6_9allocatorIdEEEEEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJdiiiiEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (38096|0);
}
function __ZN10emscripten8internal10getContextIM12maxiEnvelopeFdiRNSt3__26vectorIdNS3_9allocatorIdEEEEEEEPT_RKSB_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal13MethodInvokerIM12maxiEnvelopeFdiRNSt3__26vectorIdNS3_9allocatorIdEEEEEdPS2_JiS8_EE6invokeERKSA_SB_iPS7_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$elt3 = 0, $$unpack = 0, $$unpack4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = (__ZN10emscripten8internal11BindingTypeIP12maxiEnvelopeE12fromWireTypeES3_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt3 = ((($0)) + 4|0);
 $$unpack4 = HEAP32[$$elt3>>2]|0;
 $6 = $$unpack4 >> 1;
 $7 = (($5) + ($6)|0);
 $8 = $$unpack4 & 1;
 $9 = ($8|0)==(0);
 if ($9) {
  $13 = $$unpack;
  $16 = $13;
 } else {
  $10 = HEAP32[$7>>2]|0;
  $11 = (($10) + ($$unpack)|0);
  $12 = HEAP32[$11>>2]|0;
  $16 = $12;
 }
 $14 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($2)|0);
 $15 = (__ZN10emscripten8internal18GenericBindingTypeINSt3__26vectorIdNS2_9allocatorIdEEEEE12fromWireTypeEPS6_($3)|0);
 $17 = (+FUNCTION_TABLE_diii[$16 & 7]($7,$14,$15));
 HEAPF64[$4>>3] = $17;
 $18 = (+__ZN10emscripten8internal11BindingTypeIdE10toWireTypeERKd($4));
 STACKTOP = sp;return (+$18);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI12maxiEnvelopeEEidEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 4;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI12maxiEnvelopeEEidEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerI12maxiEnvelopeEEidEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJviiidEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (38059|0);
}
function __ZN10emscripten8internal10getContextIM12maxiEnvelopeFvidEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal13MethodInvokerIM12maxiEnvelopeFvidEvPS2_JidEE6invokeERKS4_S5_id($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = +$3;
 var $$elt3 = 0, $$unpack = 0, $$unpack4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (__ZN10emscripten8internal11BindingTypeIP12maxiEnvelopeE12fromWireTypeES3_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt3 = ((($0)) + 4|0);
 $$unpack4 = HEAP32[$$elt3>>2]|0;
 $5 = $$unpack4 >> 1;
 $6 = (($4) + ($5)|0);
 $7 = $$unpack4 & 1;
 $8 = ($7|0)==(0);
 if ($8) {
  $12 = $$unpack;
  $15 = $12;
 } else {
  $9 = HEAP32[$6>>2]|0;
  $10 = (($9) + ($$unpack)|0);
  $11 = HEAP32[$10>>2]|0;
  $15 = $11;
 }
 $13 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($2)|0);
 $14 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($3));
 FUNCTION_TABLE_viid[$15 & 15]($6,$13,$14);
 return;
}
function __ZN10emscripten8internal6TypeIDIdE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIdE3getEv()|0);
 return ($0|0);
}
function __ZNK12maxiEnvelope12getAmplitudeEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 48|0);
 $2 = +HEAPF64[$1>>3];
 return (+$2);
}
function __ZN10emscripten8internal12GetterPolicyIM12maxiEnvelopeKFdvEE10getContextES4_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$fca$1$gep = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$fca$1$gep = ((($1)) + 4|0);
 HEAP32[$$fca$1$gep>>2] = $$unpack2;
 $2 = (__ZN10emscripten8internal10getContextIM12maxiEnvelopeKFdvEEEPT_RKS5_($1)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN12maxiEnvelope12setAmplitudeEd($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 48|0);
 HEAPF64[$2>>3] = $1;
 return;
}
function __ZN10emscripten8internal12SetterPolicyIM12maxiEnvelopeFvdEE10getContextES4_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$fca$1$gep = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$fca$1$gep = ((($1)) + 4|0);
 HEAP32[$$fca$1$gep>>2] = $$unpack2;
 $2 = (__ZN10emscripten8internal10getContextIM12maxiEnvelopeFvdEEEPT_RKS5_($1)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN10emscripten8internal12GetterPolicyIM12maxiEnvelopeKFdvEE3getIS2_EEdRKS4_RKT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$elt2 = 0, $$unpack = 0, $$unpack3 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $$unpack = HEAP32[$0>>2]|0;
 $$elt2 = ((($0)) + 4|0);
 $$unpack3 = HEAP32[$$elt2>>2]|0;
 $3 = $$unpack3 >> 1;
 $4 = (($1) + ($3)|0);
 $5 = $$unpack3 & 1;
 $6 = ($5|0)==(0);
 if ($6) {
  $10 = $$unpack;
  $11 = $10;
 } else {
  $7 = HEAP32[$4>>2]|0;
  $8 = (($7) + ($$unpack)|0);
  $9 = HEAP32[$8>>2]|0;
  $11 = $9;
 }
 $12 = (+FUNCTION_TABLE_di[$11 & 15]($4));
 HEAPF64[$2>>3] = $12;
 $13 = (+__ZN10emscripten8internal11BindingTypeIdE10toWireTypeERKd($2));
 STACKTOP = sp;return (+$13);
}
function __ZN10emscripten8internal12SetterPolicyIM12maxiEnvelopeFvdEE3setIS2_EEvRKS4_RT_d($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 var $$elt3 = 0, $$unpack = 0, $$unpack4 = 0, $10 = 0, $11 = 0.0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$unpack = HEAP32[$0>>2]|0;
 $$elt3 = ((($0)) + 4|0);
 $$unpack4 = HEAP32[$$elt3>>2]|0;
 $3 = $$unpack4 >> 1;
 $4 = (($1) + ($3)|0);
 $5 = $$unpack4 & 1;
 $6 = ($5|0)==(0);
 if ($6) {
  $10 = $$unpack;
  $12 = $10;
 } else {
  $7 = HEAP32[$4>>2]|0;
  $8 = (($7) + ($$unpack)|0);
  $9 = HEAP32[$8>>2]|0;
  $12 = $9;
 }
 $11 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($2));
 FUNCTION_TABLE_vid[$12 & 31]($4,$11);
 return;
}
function __ZNK12maxiEnvelope11getValindexEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 44|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function __ZN10emscripten8internal12GetterPolicyIM12maxiEnvelopeKFivEE10getContextES4_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$fca$1$gep = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$fca$1$gep = ((($1)) + 4|0);
 HEAP32[$$fca$1$gep>>2] = $$unpack2;
 $2 = (__ZN10emscripten8internal10getContextIM12maxiEnvelopeKFivEEEPT_RKS5_($1)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN12maxiEnvelope11setValindexEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 44|0);
 HEAP32[$2>>2] = $1;
 return;
}
function __ZN10emscripten8internal12SetterPolicyIM12maxiEnvelopeFviEE10getContextES4_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$fca$1$gep = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$fca$1$gep = ((($1)) + 4|0);
 HEAP32[$$fca$1$gep>>2] = $$unpack2;
 $2 = (__ZN10emscripten8internal10getContextIM12maxiEnvelopeFviEEEPT_RKS5_($1)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN10emscripten8internal12GetterPolicyIM12maxiEnvelopeKFivEE3getIS2_EEiRKS4_RKT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$elt2 = 0, $$unpack = 0, $$unpack3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $$unpack = HEAP32[$0>>2]|0;
 $$elt2 = ((($0)) + 4|0);
 $$unpack3 = HEAP32[$$elt2>>2]|0;
 $3 = $$unpack3 >> 1;
 $4 = (($1) + ($3)|0);
 $5 = $$unpack3 & 1;
 $6 = ($5|0)==(0);
 if ($6) {
  $10 = $$unpack;
  $11 = $10;
 } else {
  $7 = HEAP32[$4>>2]|0;
  $8 = (($7) + ($$unpack)|0);
  $9 = HEAP32[$8>>2]|0;
  $11 = $9;
 }
 $12 = (FUNCTION_TABLE_ii[$11 & 255]($4)|0);
 HEAP32[$2>>2] = $12;
 $13 = (__ZN10emscripten8internal11BindingTypeIiE10toWireTypeERKi($2)|0);
 STACKTOP = sp;return ($13|0);
}
function __ZN10emscripten8internal12SetterPolicyIM12maxiEnvelopeFviEE3setIS2_EEvRKS4_RT_i($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$elt2 = 0, $$unpack = 0, $$unpack3 = 0, $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$unpack = HEAP32[$0>>2]|0;
 $$elt2 = ((($0)) + 4|0);
 $$unpack3 = HEAP32[$$elt2>>2]|0;
 $3 = $$unpack3 >> 1;
 $4 = (($1) + ($3)|0);
 $5 = $$unpack3 & 1;
 $6 = ($5|0)==(0);
 if ($6) {
  $10 = $$unpack;
  $12 = $10;
 } else {
  $7 = HEAP32[$4>>2]|0;
  $8 = (($7) + ($$unpack)|0);
  $9 = HEAP32[$8>>2]|0;
  $12 = $9;
 }
 $11 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($2)|0);
 FUNCTION_TABLE_vii[$12 & 255]($4,$11);
 return;
}
function __ZN10emscripten8internal11NoBaseClass6verifyI13maxiDelaylineEEvv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10emscripten8internal11NoBaseClass11getUpcasterI13maxiDelaylineEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal11NoBaseClass13getDowncasterI13maxiDelaylineEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal6TypeIDI13maxiDelaylineE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDI13maxiDelaylineE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerI13maxiDelaylineEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIP13maxiDelaylineE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIK13maxiDelaylineEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIPK13maxiDelaylineE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal13getActualTypeI13maxiDelaylineEEPKvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14getLightTypeIDI13maxiDelaylineEEPKvRKT_($0)|0);
 return ($1|0);
}
function __ZN10emscripten8internal14raw_destructorI13maxiDelaylineEEvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 __ZdlPv($0);
 return;
}
function __ZN10emscripten8internal6TypeIDINSt3__210shared_ptrI13maxiDelaylineEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINSt3__210shared_ptrI13maxiDelaylineEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI13maxiDelaylineEEE18get_sharing_policyEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI13maxiDelaylineEEE3getERKS4_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI13maxiDelaylineEEE14construct_nullEv() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Znwm(8)|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($0)) + 4|0);
 HEAP32[$1>>2] = 0;
 return ($0|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI13maxiDelaylineEEE5shareEPS3_PNS_8internal7_EM_VALE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$04 = 0, $$1 = 0, $$15 = 0, $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 12|0;
 $2 = sp + 8|0;
 $3 = sp + 4|0;
 $4 = sp;
 $5 = (__Znwm(8)|0);
 __THREW__ = 0;
 invoke_vii(73,($3|0),($1|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $12 = ___cxa_find_matching_catch_2()|0;
  $13 = (getTempRet0() | 0);
  $$1 = $13;$$15 = $12;
  __ZdlPv($5);
  ___resumeException($$15|0);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vii(76,($2|0),($3|0));
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 do {
  if ($9) {
   $14 = ___cxa_find_matching_catch_2()|0;
   $15 = (getTempRet0() | 0);
   $$0 = $15;$$04 = $14;
  } else {
   HEAP32[$4>>2] = 0;
   __THREW__ = 0;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$4>>2]|0;
   invoke_viiii(15,($5|0),($0|0),($2|0),($$byval_copy|0));
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if ($11) {
    $16 = ___cxa_find_matching_catch_2()|0;
    $17 = (getTempRet0() | 0);
    __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI13maxiDelaylineEEE11val_deleterD2Ev($2);
    $$0 = $17;$$04 = $16;
    break;
   } else {
    __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI13maxiDelaylineEEE11val_deleterD2Ev($2);
    __ZN10emscripten3valD2Ev($3);
    STACKTOP = sp;return ($5|0);
   }
  }
 } while(0);
 __ZN10emscripten3valD2Ev($3);
 $$1 = $$0;$$15 = $$04;
 __ZdlPv($5);
 ___resumeException($$15|0);
 // unreachable;
 return (0)|0;
}
function __ZN10emscripten8internal14raw_destructorINSt3__210shared_ptrI13maxiDelaylineEEEEvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 __ZNSt3__210shared_ptrI13maxiDelaylineED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210shared_ptrI13maxiDelaylineEEEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210shared_ptrI13maxiDelaylineEEEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNSt3__210shared_ptrI13maxiDelaylineEEEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal7InvokerINSt3__210shared_ptrI13maxiDelaylineEEJEE6invokeEPFS5_vE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 FUNCTION_TABLE_vi[$0 & 511]($1);
 __THREW__ = 0;
 $2 = (invoke_ii(152,($1|0))|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $5 = ___cxa_find_matching_catch_2()|0;
  $6 = (getTempRet0() | 0);
  __ZNSt3__210shared_ptrI13maxiDelaylineED2Ev($1);
  ___resumeException($5|0);
  // unreachable;
 } else {
  __ZNSt3__210shared_ptrI13maxiDelaylineED2Ev($1);
  STACKTOP = sp;return ($2|0);
 }
 return (0)|0;
}
function __ZNSt3__211make_sharedI13maxiDelaylineJEEENS_9enable_ifIXntsr8is_arrayIT_EE5valueENS_10shared_ptrIS3_EEE4typeEDpOT0_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__210shared_ptrI13maxiDelaylineE11make_sharedIJEEES2_DpOT_($0);
 return;
}
function __ZN10emscripten15select_overloadIFddidE13maxiDelaylineEEDtfp_EMT0_T_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$elt7 = 0, $$repack10 = 0, $$unpack = 0, $$unpack8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$unpack = HEAP32[$1>>2]|0;
 $$elt7 = ((($1)) + 4|0);
 $$unpack8 = HEAP32[$$elt7>>2]|0;
 HEAP32[$0>>2] = $$unpack;
 $$repack10 = ((($0)) + 4|0);
 HEAP32[$$repack10>>2] = $$unpack8;
 return;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI13maxiDelaylineEEdidEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 5;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI13maxiDelaylineEEdidEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJdNS0_17AllowedRawPointerI13maxiDelaylineEEdidEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJdiididEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (37710|0);
}
function __ZN10emscripten8internal10getContextIM13maxiDelaylineFddidEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal13MethodInvokerIM13maxiDelaylineFddidEdPS2_JdidEE6invokeERKS4_S5_did($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = $3|0;
 $4 = +$4;
 var $$elt4 = 0, $$unpack = 0, $$unpack5 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0.0, $20 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $5 = sp;
 $6 = (__ZN10emscripten8internal11BindingTypeIP13maxiDelaylineE12fromWireTypeES3_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt4 = ((($0)) + 4|0);
 $$unpack5 = HEAP32[$$elt4>>2]|0;
 $7 = $$unpack5 >> 1;
 $8 = (($6) + ($7)|0);
 $9 = $$unpack5 & 1;
 $10 = ($9|0)==(0);
 if ($10) {
  $14 = $$unpack;
  $18 = $14;
 } else {
  $11 = HEAP32[$8>>2]|0;
  $12 = (($11) + ($$unpack)|0);
  $13 = HEAP32[$12>>2]|0;
  $18 = $13;
 }
 $15 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($2));
 $16 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($3)|0);
 $17 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($4));
 $19 = (+FUNCTION_TABLE_didid[$18 & 1]($8,$15,$16,$17));
 HEAPF64[$5>>3] = $19;
 $20 = (+__ZN10emscripten8internal11BindingTypeIdE10toWireTypeERKd($5));
 STACKTOP = sp;return (+$20);
}
function __ZN10emscripten15select_overloadIFddidiE13maxiDelaylineEEDtfp_EMT0_T_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$elt7 = 0, $$repack10 = 0, $$unpack = 0, $$unpack8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$unpack = HEAP32[$1>>2]|0;
 $$elt7 = ((($1)) + 4|0);
 $$unpack8 = HEAP32[$$elt7>>2]|0;
 HEAP32[$0>>2] = $$unpack;
 $$repack10 = ((($0)) + 4|0);
 HEAP32[$$repack10>>2] = $$unpack8;
 return;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI13maxiDelaylineEEdidiEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 6;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI13maxiDelaylineEEdidiEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJdNS0_17AllowedRawPointerI13maxiDelaylineEEdidiEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJdiididiEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (37669|0);
}
function __ZN10emscripten8internal10getContextIM13maxiDelaylineFddidiEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal13MethodInvokerIM13maxiDelaylineFddidiEdPS2_JdidiEE6invokeERKS4_S5_didi($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = $3|0;
 $4 = +$4;
 $5 = $5|0;
 var $$elt5 = 0, $$unpack = 0, $$unpack6 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $6 = sp;
 $7 = (__ZN10emscripten8internal11BindingTypeIP13maxiDelaylineE12fromWireTypeES3_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt5 = ((($0)) + 4|0);
 $$unpack6 = HEAP32[$$elt5>>2]|0;
 $8 = $$unpack6 >> 1;
 $9 = (($7) + ($8)|0);
 $10 = $$unpack6 & 1;
 $11 = ($10|0)==(0);
 if ($11) {
  $15 = $$unpack;
  $20 = $15;
 } else {
  $12 = HEAP32[$9>>2]|0;
  $13 = (($12) + ($$unpack)|0);
  $14 = HEAP32[$13>>2]|0;
  $20 = $14;
 }
 $16 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($2));
 $17 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($3)|0);
 $18 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($4));
 $19 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($5)|0);
 $21 = (+FUNCTION_TABLE_dididi[$20 & 1]($9,$16,$17,$18,$19));
 HEAPF64[$6>>3] = $21;
 $22 = (+__ZN10emscripten8internal11BindingTypeIdE10toWireTypeERKd($6));
 STACKTOP = sp;return (+$22);
}
function __ZN10emscripten8internal11NoBaseClass6verifyI10maxiFilterEEvv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10emscripten8internal11NoBaseClass11getUpcasterI10maxiFilterEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal11NoBaseClass13getDowncasterI10maxiFilterEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal6TypeIDI10maxiFilterE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDI10maxiFilterE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerI10maxiFilterEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIP10maxiFilterE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIK10maxiFilterEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIPK10maxiFilterE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal13getActualTypeI10maxiFilterEEPKvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14getLightTypeIDI10maxiFilterEEPKvRKT_($0)|0);
 return ($1|0);
}
function __ZN10emscripten8internal14raw_destructorI10maxiFilterEEvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 __ZdlPv($0);
 return;
}
function __ZN10emscripten8internal6TypeIDINSt3__210shared_ptrI10maxiFilterEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINSt3__210shared_ptrI10maxiFilterEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiFilterEEE18get_sharing_policyEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiFilterEEE3getERKS4_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiFilterEEE14construct_nullEv() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Znwm(8)|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($0)) + 4|0);
 HEAP32[$1>>2] = 0;
 return ($0|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiFilterEEE5shareEPS3_PNS_8internal7_EM_VALE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$04 = 0, $$1 = 0, $$15 = 0, $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 12|0;
 $2 = sp + 8|0;
 $3 = sp + 4|0;
 $4 = sp;
 $5 = (__Znwm(8)|0);
 __THREW__ = 0;
 invoke_vii(73,($3|0),($1|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $12 = ___cxa_find_matching_catch_2()|0;
  $13 = (getTempRet0() | 0);
  $$1 = $13;$$15 = $12;
  __ZdlPv($5);
  ___resumeException($$15|0);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vii(77,($2|0),($3|0));
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 do {
  if ($9) {
   $14 = ___cxa_find_matching_catch_2()|0;
   $15 = (getTempRet0() | 0);
   $$0 = $15;$$04 = $14;
  } else {
   HEAP32[$4>>2] = 0;
   __THREW__ = 0;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$4>>2]|0;
   invoke_viiii(16,($5|0),($0|0),($2|0),($$byval_copy|0));
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if ($11) {
    $16 = ___cxa_find_matching_catch_2()|0;
    $17 = (getTempRet0() | 0);
    __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiFilterEEE11val_deleterD2Ev($2);
    $$0 = $17;$$04 = $16;
    break;
   } else {
    __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiFilterEEE11val_deleterD2Ev($2);
    __ZN10emscripten3valD2Ev($3);
    STACKTOP = sp;return ($5|0);
   }
  }
 } while(0);
 __ZN10emscripten3valD2Ev($3);
 $$1 = $$0;$$15 = $$04;
 __ZdlPv($5);
 ___resumeException($$15|0);
 // unreachable;
 return (0)|0;
}
function __ZN10emscripten8internal14raw_destructorINSt3__210shared_ptrI10maxiFilterEEEEvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 __ZNSt3__210shared_ptrI10maxiFilterED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210shared_ptrI10maxiFilterEEEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210shared_ptrI10maxiFilterEEEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNSt3__210shared_ptrI10maxiFilterEEEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal7InvokerINSt3__210shared_ptrI10maxiFilterEEJEE6invokeEPFS5_vE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 FUNCTION_TABLE_vi[$0 & 511]($1);
 __THREW__ = 0;
 $2 = (invoke_ii(153,($1|0))|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $5 = ___cxa_find_matching_catch_2()|0;
  $6 = (getTempRet0() | 0);
  __ZNSt3__210shared_ptrI10maxiFilterED2Ev($1);
  ___resumeException($5|0);
  // unreachable;
 } else {
  __ZNSt3__210shared_ptrI10maxiFilterED2Ev($1);
  STACKTOP = sp;return ($2|0);
 }
 return (0)|0;
}
function __ZNSt3__211make_sharedI10maxiFilterJEEENS_9enable_ifIXntsr8is_arrayIT_EE5valueENS_10shared_ptrIS3_EEE4typeEDpOT0_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__210shared_ptrI10maxiFilterE11make_sharedIJEEES2_DpOT_($0);
 return;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI10maxiFilterEEdddEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 5;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI10maxiFilterEEdddEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJdNS0_17AllowedRawPointerI10maxiFilterEEdddEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIM10maxiFilterFddddEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal13MethodInvokerIM10maxiFilterFddddEdPS2_JdddEE6invokeERKS4_S5_ddd($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 var $$elt5 = 0, $$unpack = 0, $$unpack6 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $20 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $5 = sp;
 $6 = (__ZN10emscripten8internal11BindingTypeIP10maxiFilterE12fromWireTypeES3_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt5 = ((($0)) + 4|0);
 $$unpack6 = HEAP32[$$elt5>>2]|0;
 $7 = $$unpack6 >> 1;
 $8 = (($6) + ($7)|0);
 $9 = $$unpack6 & 1;
 $10 = ($9|0)==(0);
 if ($10) {
  $14 = $$unpack;
  $18 = $14;
 } else {
  $11 = HEAP32[$8>>2]|0;
  $12 = (($11) + ($$unpack)|0);
  $13 = HEAP32[$12>>2]|0;
  $18 = $13;
 }
 $15 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($2));
 $16 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($3));
 $17 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($4));
 $19 = (+FUNCTION_TABLE_diddd[$18 & 7]($8,$15,$16,$17));
 HEAPF64[$5>>3] = $19;
 $20 = (+__ZN10emscripten8internal11BindingTypeIdE10toWireTypeERKd($5));
 STACKTOP = sp;return (+$20);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI10maxiFilterEEddEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 4;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI10maxiFilterEEddEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJdNS0_17AllowedRawPointerI10maxiFilterEEddEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIM10maxiFilterFdddEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal13MethodInvokerIM10maxiFilterFdddEdPS2_JddEE6invokeERKS4_S5_dd($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = +$3;
 var $$elt4 = 0, $$unpack = 0, $$unpack5 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = (__ZN10emscripten8internal11BindingTypeIP10maxiFilterE12fromWireTypeES3_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt4 = ((($0)) + 4|0);
 $$unpack5 = HEAP32[$$elt4>>2]|0;
 $6 = $$unpack5 >> 1;
 $7 = (($5) + ($6)|0);
 $8 = $$unpack5 & 1;
 $9 = ($8|0)==(0);
 if ($9) {
  $13 = $$unpack;
  $16 = $13;
 } else {
  $10 = HEAP32[$7>>2]|0;
  $11 = (($10) + ($$unpack)|0);
  $12 = HEAP32[$11>>2]|0;
  $16 = $12;
 }
 $14 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($2));
 $15 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($3));
 $17 = (+FUNCTION_TABLE_didd[$16 & 7]($7,$14,$15));
 HEAPF64[$4>>3] = $17;
 $18 = (+__ZN10emscripten8internal11BindingTypeIdE10toWireTypeERKd($4));
 STACKTOP = sp;return (+$18);
}
function __ZNK10maxiFilter9getCutoffEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 224|0);
 $2 = +HEAPF64[$1>>3];
 return (+$2);
}
function __ZN10emscripten8internal12GetterPolicyIM10maxiFilterKFdvEE10getContextES4_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$fca$1$gep = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$fca$1$gep = ((($1)) + 4|0);
 HEAP32[$$fca$1$gep>>2] = $$unpack2;
 $2 = (__ZN10emscripten8internal10getContextIM10maxiFilterKFdvEEEPT_RKS5_($1)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN10maxiFilter9setCutoffEd($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 224|0);
 HEAPF64[$2>>3] = $1;
 return;
}
function __ZN10emscripten8internal12SetterPolicyIM10maxiFilterFvdEE10getContextES4_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$fca$1$gep = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$fca$1$gep = ((($1)) + 4|0);
 HEAP32[$$fca$1$gep>>2] = $$unpack2;
 $2 = (__ZN10emscripten8internal10getContextIM10maxiFilterFvdEEEPT_RKS5_($1)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN10emscripten8internal12GetterPolicyIM10maxiFilterKFdvEE3getIS2_EEdRKS4_RKT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$elt2 = 0, $$unpack = 0, $$unpack3 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $$unpack = HEAP32[$0>>2]|0;
 $$elt2 = ((($0)) + 4|0);
 $$unpack3 = HEAP32[$$elt2>>2]|0;
 $3 = $$unpack3 >> 1;
 $4 = (($1) + ($3)|0);
 $5 = $$unpack3 & 1;
 $6 = ($5|0)==(0);
 if ($6) {
  $10 = $$unpack;
  $11 = $10;
 } else {
  $7 = HEAP32[$4>>2]|0;
  $8 = (($7) + ($$unpack)|0);
  $9 = HEAP32[$8>>2]|0;
  $11 = $9;
 }
 $12 = (+FUNCTION_TABLE_di[$11 & 15]($4));
 HEAPF64[$2>>3] = $12;
 $13 = (+__ZN10emscripten8internal11BindingTypeIdE10toWireTypeERKd($2));
 STACKTOP = sp;return (+$13);
}
function __ZN10emscripten8internal12SetterPolicyIM10maxiFilterFvdEE3setIS2_EEvRKS4_RT_d($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 var $$elt3 = 0, $$unpack = 0, $$unpack4 = 0, $10 = 0, $11 = 0.0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$unpack = HEAP32[$0>>2]|0;
 $$elt3 = ((($0)) + 4|0);
 $$unpack4 = HEAP32[$$elt3>>2]|0;
 $3 = $$unpack4 >> 1;
 $4 = (($1) + ($3)|0);
 $5 = $$unpack4 & 1;
 $6 = ($5|0)==(0);
 if ($6) {
  $10 = $$unpack;
  $12 = $10;
 } else {
  $7 = HEAP32[$4>>2]|0;
  $8 = (($7) + ($$unpack)|0);
  $9 = HEAP32[$8>>2]|0;
  $12 = $9;
 }
 $11 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($2));
 FUNCTION_TABLE_vid[$12 & 31]($4,$11);
 return;
}
function __ZNK10maxiFilter12getResonanceEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 232|0);
 $2 = +HEAPF64[$1>>3];
 return (+$2);
}
function __ZN10maxiFilter12setResonanceEd($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 232|0);
 HEAPF64[$2>>3] = $1;
 return;
}
function __ZN10emscripten8internal11NoBaseClass6verifyI7maxiMixEEvv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10emscripten8internal11NoBaseClass11getUpcasterI7maxiMixEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal11NoBaseClass13getDowncasterI7maxiMixEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal6TypeIDI7maxiMixE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDI7maxiMixE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerI7maxiMixEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIP7maxiMixE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIK7maxiMixEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIPK7maxiMixE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal13getActualTypeI7maxiMixEEPKvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14getLightTypeIDI7maxiMixEEPKvRKT_($0)|0);
 return ($1|0);
}
function __ZN10emscripten8internal14raw_destructorI7maxiMixEEvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 __ZdlPv($0);
 return;
}
function __ZN10emscripten8internal6TypeIDINSt3__210shared_ptrI7maxiMixEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINSt3__210shared_ptrI7maxiMixEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiMixEEE18get_sharing_policyEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiMixEEE3getERKS4_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiMixEEE14construct_nullEv() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Znwm(8)|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($0)) + 4|0);
 HEAP32[$1>>2] = 0;
 return ($0|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiMixEEE5shareEPS3_PNS_8internal7_EM_VALE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$04 = 0, $$1 = 0, $$15 = 0, $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 12|0;
 $2 = sp + 8|0;
 $3 = sp + 4|0;
 $4 = sp;
 $5 = (__Znwm(8)|0);
 __THREW__ = 0;
 invoke_vii(73,($3|0),($1|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $12 = ___cxa_find_matching_catch_2()|0;
  $13 = (getTempRet0() | 0);
  $$1 = $13;$$15 = $12;
  __ZdlPv($5);
  ___resumeException($$15|0);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vii(78,($2|0),($3|0));
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 do {
  if ($9) {
   $14 = ___cxa_find_matching_catch_2()|0;
   $15 = (getTempRet0() | 0);
   $$0 = $15;$$04 = $14;
  } else {
   HEAP32[$4>>2] = 0;
   __THREW__ = 0;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$4>>2]|0;
   invoke_viiii(17,($5|0),($0|0),($2|0),($$byval_copy|0));
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if ($11) {
    $16 = ___cxa_find_matching_catch_2()|0;
    $17 = (getTempRet0() | 0);
    __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiMixEEE11val_deleterD2Ev($2);
    $$0 = $17;$$04 = $16;
    break;
   } else {
    __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiMixEEE11val_deleterD2Ev($2);
    __ZN10emscripten3valD2Ev($3);
    STACKTOP = sp;return ($5|0);
   }
  }
 } while(0);
 __ZN10emscripten3valD2Ev($3);
 $$1 = $$0;$$15 = $$04;
 __ZdlPv($5);
 ___resumeException($$15|0);
 // unreachable;
 return (0)|0;
}
function __ZN10emscripten8internal14raw_destructorINSt3__210shared_ptrI7maxiMixEEEEvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 __ZNSt3__210shared_ptrI7maxiMixED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210shared_ptrI7maxiMixEEEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210shared_ptrI7maxiMixEEEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNSt3__210shared_ptrI7maxiMixEEEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal7InvokerINSt3__210shared_ptrI7maxiMixEEJEE6invokeEPFS5_vE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 FUNCTION_TABLE_vi[$0 & 511]($1);
 __THREW__ = 0;
 $2 = (invoke_ii(154,($1|0))|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $5 = ___cxa_find_matching_catch_2()|0;
  $6 = (getTempRet0() | 0);
  __ZNSt3__210shared_ptrI7maxiMixED2Ev($1);
  ___resumeException($5|0);
  // unreachable;
 } else {
  __ZNSt3__210shared_ptrI7maxiMixED2Ev($1);
  STACKTOP = sp;return ($2|0);
 }
 return (0)|0;
}
function __ZNSt3__211make_sharedI7maxiMixJEEENS_9enable_ifIXntsr8is_arrayIT_EE5valueENS_10shared_ptrIS3_EEE4typeEDpOT0_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__210shared_ptrI7maxiMixE11make_sharedIJEEES2_DpOT_($0);
 return;
}
function __ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJvNS0_17AllowedRawPointerI7maxiMixEEdRNSt3__26vectorIdNS8_9allocatorIdEEEEdEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 5;
}
function __ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJvNS0_17AllowedRawPointerI7maxiMixEEdRNSt3__26vectorIdNS8_9allocatorIdEEEEdEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerI7maxiMixEEdRNSt3__26vectorIdNS6_9allocatorIdEEEEdEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJviididEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (37001|0);
}
function __ZN10emscripten8internal10getContextIM7maxiMixFvdRNSt3__26vectorIdNS3_9allocatorIdEEEEdEEEPT_RKSB_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal13MethodInvokerIM7maxiMixFvdRNSt3__26vectorIdNS3_9allocatorIdEEEEdEvPS2_JdS8_dEE6invokeERKSA_SB_dPS7_d($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = $3|0;
 $4 = +$4;
 var $$elt5 = 0, $$unpack = 0, $$unpack6 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = (__ZN10emscripten8internal11BindingTypeIP7maxiMixE12fromWireTypeES3_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt5 = ((($0)) + 4|0);
 $$unpack6 = HEAP32[$$elt5>>2]|0;
 $6 = $$unpack6 >> 1;
 $7 = (($5) + ($6)|0);
 $8 = $$unpack6 & 1;
 $9 = ($8|0)==(0);
 if ($9) {
  $13 = $$unpack;
  $17 = $13;
 } else {
  $10 = HEAP32[$7>>2]|0;
  $11 = (($10) + ($$unpack)|0);
  $12 = HEAP32[$11>>2]|0;
  $17 = $12;
 }
 $14 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($2));
 $15 = (__ZN10emscripten8internal18GenericBindingTypeINSt3__26vectorIdNS2_9allocatorIdEEEEE12fromWireTypeEPS6_($3)|0);
 $16 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($4));
 FUNCTION_TABLE_vidid[$17 & 1]($7,$14,$15,$16);
 return;
}
function __ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJvNS0_17AllowedRawPointerI7maxiMixEEdRNSt3__26vectorIdNS8_9allocatorIdEEEEddEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 6;
}
function __ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJvNS0_17AllowedRawPointerI7maxiMixEEdRNSt3__26vectorIdNS8_9allocatorIdEEEEddEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerI7maxiMixEEdRNSt3__26vectorIdNS6_9allocatorIdEEEEddEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJviididdEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (36993|0);
}
function __ZN10emscripten8internal10getContextIM7maxiMixFvdRNSt3__26vectorIdNS3_9allocatorIdEEEEddEEEPT_RKSB_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal13MethodInvokerIM7maxiMixFvdRNSt3__26vectorIdNS3_9allocatorIdEEEEddEvPS2_JdS8_ddEE6invokeERKSA_SB_dPS7_dd($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = $3|0;
 $4 = +$4;
 $5 = +$5;
 var $$elt6 = 0, $$unpack = 0, $$unpack7 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = (__ZN10emscripten8internal11BindingTypeIP7maxiMixE12fromWireTypeES3_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt6 = ((($0)) + 4|0);
 $$unpack7 = HEAP32[$$elt6>>2]|0;
 $7 = $$unpack7 >> 1;
 $8 = (($6) + ($7)|0);
 $9 = $$unpack7 & 1;
 $10 = ($9|0)==(0);
 if ($10) {
  $14 = $$unpack;
  $19 = $14;
 } else {
  $11 = HEAP32[$8>>2]|0;
  $12 = (($11) + ($$unpack)|0);
  $13 = HEAP32[$12>>2]|0;
  $19 = $13;
 }
 $15 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($2));
 $16 = (__ZN10emscripten8internal18GenericBindingTypeINSt3__26vectorIdNS2_9allocatorIdEEEEE12fromWireTypeEPS6_($3)|0);
 $17 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($4));
 $18 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($5));
 FUNCTION_TABLE_vididd[$19 & 1]($8,$15,$16,$17,$18);
 return;
}
function __ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJvNS0_17AllowedRawPointerI7maxiMixEEdRNSt3__26vectorIdNS8_9allocatorIdEEEEdddEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 7;
}
function __ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJvNS0_17AllowedRawPointerI7maxiMixEEdRNSt3__26vectorIdNS8_9allocatorIdEEEEdddEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerI7maxiMixEEdRNSt3__26vectorIdNS6_9allocatorIdEEEEdddEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJviididddEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (36965|0);
}
function __ZN10emscripten8internal10getContextIM7maxiMixFvdRNSt3__26vectorIdNS3_9allocatorIdEEEEdddEEEPT_RKSB_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal13MethodInvokerIM7maxiMixFvdRNSt3__26vectorIdNS3_9allocatorIdEEEEdddEvPS2_JdS8_dddEE6invokeERKSA_SB_dPS7_ddd($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = $3|0;
 $4 = +$4;
 $5 = +$5;
 $6 = +$6;
 var $$elt7 = 0, $$unpack = 0, $$unpack8 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $7 = (__ZN10emscripten8internal11BindingTypeIP7maxiMixE12fromWireTypeES3_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt7 = ((($0)) + 4|0);
 $$unpack8 = HEAP32[$$elt7>>2]|0;
 $8 = $$unpack8 >> 1;
 $9 = (($7) + ($8)|0);
 $10 = $$unpack8 & 1;
 $11 = ($10|0)==(0);
 if ($11) {
  $15 = $$unpack;
  $21 = $15;
 } else {
  $12 = HEAP32[$9>>2]|0;
  $13 = (($12) + ($$unpack)|0);
  $14 = HEAP32[$13>>2]|0;
  $21 = $14;
 }
 $16 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($2));
 $17 = (__ZN10emscripten8internal18GenericBindingTypeINSt3__26vectorIdNS2_9allocatorIdEEEEE12fromWireTypeEPS6_($3)|0);
 $18 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($4));
 $19 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($5));
 $20 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($6));
 FUNCTION_TABLE_vididdd[$21 & 1]($9,$16,$17,$18,$19,$20);
 return;
}
function __ZN10emscripten8internal11NoBaseClass6verifyI10maxiLagExpIdEEEvv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10emscripten8internal11NoBaseClass11getUpcasterI10maxiLagExpIdEEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal11NoBaseClass13getDowncasterI10maxiLagExpIdEEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal6TypeIDI10maxiLagExpIdEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDI10maxiLagExpIdEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerI10maxiLagExpIdEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIP10maxiLagExpIdEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIK10maxiLagExpIdEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIPK10maxiLagExpIdEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal13getActualTypeI10maxiLagExpIdEEEPKvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14getLightTypeIDI10maxiLagExpIdEEEPKvRKT_($0)|0);
 return ($1|0);
}
function __ZN10emscripten8internal14raw_destructorI10maxiLagExpIdEEEvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 __ZdlPv($0);
 return;
}
function __ZN10emscripten8internal6TypeIDINSt3__210shared_ptrI10maxiLagExpIdEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINSt3__210shared_ptrI10maxiLagExpIdEEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiLagExpIdEEEE18get_sharing_policyEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiLagExpIdEEEE3getERKS5_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiLagExpIdEEEE14construct_nullEv() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Znwm(8)|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($0)) + 4|0);
 HEAP32[$1>>2] = 0;
 return ($0|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiLagExpIdEEEE5shareEPS4_PNS_8internal7_EM_VALE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$04 = 0, $$1 = 0, $$15 = 0, $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 12|0;
 $2 = sp + 8|0;
 $3 = sp + 4|0;
 $4 = sp;
 $5 = (__Znwm(8)|0);
 __THREW__ = 0;
 invoke_vii(73,($3|0),($1|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $12 = ___cxa_find_matching_catch_2()|0;
  $13 = (getTempRet0() | 0);
  $$1 = $13;$$15 = $12;
  __ZdlPv($5);
  ___resumeException($$15|0);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vii(79,($2|0),($3|0));
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 do {
  if ($9) {
   $14 = ___cxa_find_matching_catch_2()|0;
   $15 = (getTempRet0() | 0);
   $$0 = $15;$$04 = $14;
  } else {
   HEAP32[$4>>2] = 0;
   __THREW__ = 0;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$4>>2]|0;
   invoke_viiii(18,($5|0),($0|0),($2|0),($$byval_copy|0));
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if ($11) {
    $16 = ___cxa_find_matching_catch_2()|0;
    $17 = (getTempRet0() | 0);
    __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiLagExpIdEEEE11val_deleterD2Ev($2);
    $$0 = $17;$$04 = $16;
    break;
   } else {
    __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiLagExpIdEEEE11val_deleterD2Ev($2);
    __ZN10emscripten3valD2Ev($3);
    STACKTOP = sp;return ($5|0);
   }
  }
 } while(0);
 __ZN10emscripten3valD2Ev($3);
 $$1 = $$0;$$15 = $$04;
 __ZdlPv($5);
 ___resumeException($$15|0);
 // unreachable;
 return (0)|0;
}
function __ZN10emscripten8internal14raw_destructorINSt3__210shared_ptrI10maxiLagExpIdEEEEEvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 __ZNSt3__210shared_ptrI10maxiLagExpIdEED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJNSt3__210shared_ptrI10maxiLagExpIdEEEEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJNSt3__210shared_ptrI10maxiLagExpIdEEEEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNSt3__210shared_ptrI10maxiLagExpIdEEEEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal7InvokerINSt3__210shared_ptrI10maxiLagExpIdEEEJEE6invokeEPFS6_vE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 FUNCTION_TABLE_vi[$0 & 511]($1);
 __THREW__ = 0;
 $2 = (invoke_ii(155,($1|0))|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $5 = ___cxa_find_matching_catch_2()|0;
  $6 = (getTempRet0() | 0);
  __ZNSt3__210shared_ptrI10maxiLagExpIdEED2Ev($1);
  ___resumeException($5|0);
  // unreachable;
 } else {
  __ZNSt3__210shared_ptrI10maxiLagExpIdEED2Ev($1);
  STACKTOP = sp;return ($2|0);
 }
 return (0)|0;
}
function __ZNSt3__211make_sharedI10maxiLagExpIdEJEEENS_9enable_ifIXntsr8is_arrayIT_EE5valueENS_10shared_ptrIS4_EEE4typeEDpOT0_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__210shared_ptrI10maxiLagExpIdEE11make_sharedIJEEES3_DpOT_($0);
 return;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI10maxiLagExpIdEEEddEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 4;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI10maxiLagExpIdEEEddEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerI10maxiLagExpIdEEEddEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJviiddEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (36635|0);
}
function __ZN10emscripten8internal10getContextIM10maxiLagExpIdEFvddEEEPT_RKS6_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal13MethodInvokerIM10maxiLagExpIdEFvddEvPS3_JddEE6invokeERKS5_S6_dd($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = +$3;
 var $$elt4 = 0, $$unpack = 0, $$unpack5 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (__ZN10emscripten8internal11BindingTypeIP10maxiLagExpIdEE12fromWireTypeES4_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt4 = ((($0)) + 4|0);
 $$unpack5 = HEAP32[$$elt4>>2]|0;
 $5 = $$unpack5 >> 1;
 $6 = (($4) + ($5)|0);
 $7 = $$unpack5 & 1;
 $8 = ($7|0)==(0);
 if ($8) {
  $12 = $$unpack;
  $15 = $12;
 } else {
  $9 = HEAP32[$6>>2]|0;
  $10 = (($9) + ($$unpack)|0);
  $11 = HEAP32[$10>>2]|0;
  $15 = $11;
 }
 $13 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($2));
 $14 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($3));
 FUNCTION_TABLE_vidd[$15 & 1]($6,$13,$14);
 return;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI10maxiLagExpIdEEEdEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 3;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI10maxiLagExpIdEEEdEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerI10maxiLagExpIdEEEdEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIM10maxiLagExpIdEFvdEEEPT_RKS6_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal13MethodInvokerIM10maxiLagExpIdEFvdEvPS3_JdEE6invokeERKS5_S6_d($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 var $$elt3 = 0, $$unpack = 0, $$unpack4 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (__ZN10emscripten8internal11BindingTypeIP10maxiLagExpIdEE12fromWireTypeES4_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt3 = ((($0)) + 4|0);
 $$unpack4 = HEAP32[$$elt3>>2]|0;
 $4 = $$unpack4 >> 1;
 $5 = (($3) + ($4)|0);
 $6 = $$unpack4 & 1;
 $7 = ($6|0)==(0);
 if ($7) {
  $11 = $$unpack;
  $13 = $11;
 } else {
  $8 = HEAP32[$5>>2]|0;
  $9 = (($8) + ($$unpack)|0);
  $10 = HEAP32[$9>>2]|0;
  $13 = $10;
 }
 $12 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($2));
 FUNCTION_TABLE_vid[$13 & 31]($5,$12);
 return;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerIK10maxiLagExpIdEEEEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerIK10maxiLagExpIdEEEEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJdNS0_17AllowedRawPointerIK10maxiLagExpIdEEEEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIM10maxiLagExpIdEKFdvEEEPT_RKS6_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal13MethodInvokerIM10maxiLagExpIdEKFdvEdPKS3_JEE6invokeERKS5_S7_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$elt2 = 0, $$unpack = 0, $$unpack3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = (__ZN10emscripten8internal11BindingTypeIPK10maxiLagExpIdEE12fromWireTypeES5_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt2 = ((($0)) + 4|0);
 $$unpack3 = HEAP32[$$elt2>>2]|0;
 $4 = $$unpack3 >> 1;
 $5 = (($3) + ($4)|0);
 $6 = $$unpack3 & 1;
 $7 = ($6|0)==(0);
 if ($7) {
  $11 = $$unpack;
  $12 = $11;
 } else {
  $8 = HEAP32[$5>>2]|0;
  $9 = (($8) + ($$unpack)|0);
  $10 = HEAP32[$9>>2]|0;
  $12 = $10;
 }
 $13 = (+FUNCTION_TABLE_di[$12 & 15]($5));
 HEAPF64[$2>>3] = $13;
 $14 = (+__ZN10emscripten8internal11BindingTypeIdE10toWireTypeERKd($2));
 STACKTOP = sp;return (+$14);
}
function __ZNK10maxiLagExpIdE8getAlphaEv($0) {
 $0 = $0|0;
 var $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = +HEAPF64[$0>>3];
 return (+$1);
}
function __ZN10emscripten8internal12GetterPolicyIM10maxiLagExpIdEKFdvEE10getContextES5_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$fca$1$gep = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$fca$1$gep = ((($1)) + 4|0);
 HEAP32[$$fca$1$gep>>2] = $$unpack2;
 $2 = (__ZN10emscripten8internal10getContextIM10maxiLagExpIdEKFdvEEEPT_RKS6_($1)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN10maxiLagExpIdE8setAlphaEd($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[$0>>3] = $1;
 return;
}
function __ZN10emscripten8internal12SetterPolicyIM10maxiLagExpIdEFvdEE10getContextES5_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$fca$1$gep = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$fca$1$gep = ((($1)) + 4|0);
 HEAP32[$$fca$1$gep>>2] = $$unpack2;
 $2 = (__ZN10emscripten8internal10getContextIM10maxiLagExpIdEFvdEEEPT_RKS6_($1)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN10emscripten8internal12GetterPolicyIM10maxiLagExpIdEKFdvEE3getIS3_EEdRKS5_RKT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$elt2 = 0, $$unpack = 0, $$unpack3 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $$unpack = HEAP32[$0>>2]|0;
 $$elt2 = ((($0)) + 4|0);
 $$unpack3 = HEAP32[$$elt2>>2]|0;
 $3 = $$unpack3 >> 1;
 $4 = (($1) + ($3)|0);
 $5 = $$unpack3 & 1;
 $6 = ($5|0)==(0);
 if ($6) {
  $10 = $$unpack;
  $11 = $10;
 } else {
  $7 = HEAP32[$4>>2]|0;
  $8 = (($7) + ($$unpack)|0);
  $9 = HEAP32[$8>>2]|0;
  $11 = $9;
 }
 $12 = (+FUNCTION_TABLE_di[$11 & 15]($4));
 HEAPF64[$2>>3] = $12;
 $13 = (+__ZN10emscripten8internal11BindingTypeIdE10toWireTypeERKd($2));
 STACKTOP = sp;return (+$13);
}
function __ZN10emscripten8internal12SetterPolicyIM10maxiLagExpIdEFvdEE3setIS3_EEvRKS5_RT_d($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 var $$elt3 = 0, $$unpack = 0, $$unpack4 = 0, $10 = 0, $11 = 0.0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$unpack = HEAP32[$0>>2]|0;
 $$elt3 = ((($0)) + 4|0);
 $$unpack4 = HEAP32[$$elt3>>2]|0;
 $3 = $$unpack4 >> 1;
 $4 = (($1) + ($3)|0);
 $5 = $$unpack4 & 1;
 $6 = ($5|0)==(0);
 if ($6) {
  $10 = $$unpack;
  $12 = $10;
 } else {
  $7 = HEAP32[$4>>2]|0;
  $8 = (($7) + ($$unpack)|0);
  $9 = HEAP32[$8>>2]|0;
  $12 = $9;
 }
 $11 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($2));
 FUNCTION_TABLE_vid[$12 & 31]($4,$11);
 return;
}
function __ZNK10maxiLagExpIdE18getAlphaReciprocalEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = +HEAPF64[$1>>3];
 return (+$2);
}
function __ZN10maxiLagExpIdE18setAlphaReciprocalEd($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 HEAPF64[$2>>3] = $1;
 return;
}
function __ZN10maxiLagExpIdE6setValEd($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 16|0);
 HEAPF64[$2>>3] = $1;
 return;
}
function __ZN10emscripten8internal11NoBaseClass6verifyI10maxiSampleEEvv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10emscripten8internal11NoBaseClass11getUpcasterI10maxiSampleEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal11NoBaseClass13getDowncasterI10maxiSampleEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal6TypeIDI10maxiSampleE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDI10maxiSampleE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerI10maxiSampleEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIP10maxiSampleE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIK10maxiSampleEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIPK10maxiSampleE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal13getActualTypeI10maxiSampleEEPKvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14getLightTypeIDI10maxiSampleEEPKvRKT_($0)|0);
 return ($1|0);
}
function __ZN10emscripten8internal14raw_destructorI10maxiSampleEEvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 __ZN10maxiSampleD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZN10emscripten8internal6TypeIDINSt3__210shared_ptrI10maxiSampleEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINSt3__210shared_ptrI10maxiSampleEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiSampleEEE18get_sharing_policyEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiSampleEEE3getERKS4_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiSampleEEE14construct_nullEv() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Znwm(8)|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($0)) + 4|0);
 HEAP32[$1>>2] = 0;
 return ($0|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiSampleEEE5shareEPS3_PNS_8internal7_EM_VALE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$04 = 0, $$1 = 0, $$15 = 0, $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 12|0;
 $2 = sp + 8|0;
 $3 = sp + 4|0;
 $4 = sp;
 $5 = (__Znwm(8)|0);
 __THREW__ = 0;
 invoke_vii(73,($3|0),($1|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $12 = ___cxa_find_matching_catch_2()|0;
  $13 = (getTempRet0() | 0);
  $$1 = $13;$$15 = $12;
  __ZdlPv($5);
  ___resumeException($$15|0);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vii(80,($2|0),($3|0));
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 do {
  if ($9) {
   $14 = ___cxa_find_matching_catch_2()|0;
   $15 = (getTempRet0() | 0);
   $$0 = $15;$$04 = $14;
  } else {
   HEAP32[$4>>2] = 0;
   __THREW__ = 0;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$4>>2]|0;
   invoke_viiii(19,($5|0),($0|0),($2|0),($$byval_copy|0));
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if ($11) {
    $16 = ___cxa_find_matching_catch_2()|0;
    $17 = (getTempRet0() | 0);
    __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiSampleEEE11val_deleterD2Ev($2);
    $$0 = $17;$$04 = $16;
    break;
   } else {
    __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiSampleEEE11val_deleterD2Ev($2);
    __ZN10emscripten3valD2Ev($3);
    STACKTOP = sp;return ($5|0);
   }
  }
 } while(0);
 __ZN10emscripten3valD2Ev($3);
 $$1 = $$0;$$15 = $$04;
 __ZdlPv($5);
 ___resumeException($$15|0);
 // unreachable;
 return (0)|0;
}
function __ZN10emscripten8internal14raw_destructorINSt3__210shared_ptrI10maxiSampleEEEEvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 __ZNSt3__210shared_ptrI10maxiSampleED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210shared_ptrI10maxiSampleEEEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210shared_ptrI10maxiSampleEEEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNSt3__210shared_ptrI10maxiSampleEEEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal7InvokerINSt3__210shared_ptrI10maxiSampleEEJEE6invokeEPFS5_vE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 FUNCTION_TABLE_vi[$0 & 511]($1);
 __THREW__ = 0;
 $2 = (invoke_ii(156,($1|0))|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $5 = ___cxa_find_matching_catch_2()|0;
  $6 = (getTempRet0() | 0);
  __ZNSt3__210shared_ptrI10maxiSampleED2Ev($1);
  ___resumeException($5|0);
  // unreachable;
 } else {
  __ZNSt3__210shared_ptrI10maxiSampleED2Ev($1);
  STACKTOP = sp;return ($2|0);
 }
 return (0)|0;
}
function __ZNSt3__211make_sharedI10maxiSampleJEEENS_9enable_ifIXntsr8is_arrayIT_EE5valueENS_10shared_ptrIS3_EEE4typeEDpOT0_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__210shared_ptrI10maxiSampleE11make_sharedIJEEES2_DpOT_($0);
 return;
}
function __ZNK10maxiSample9getLengthEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 108|0);
 $2 = ((($0)) + 112|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$1>>2]|0;
 $5 = (($3) - ($4))|0;
 $6 = $5 >> 3;
 return ($6|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJmNS0_17AllowedRawPointerIK10maxiSampleEEEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJmNS0_17AllowedRawPointerIK10maxiSampleEEEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJmNS0_17AllowedRawPointerIK10maxiSampleEEEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIM10maxiSampleKFmvEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal13MethodInvokerIM10maxiSampleKFmvEmPKS2_JEE6invokeERKS4_S6_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$elt2 = 0, $$unpack = 0, $$unpack3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = (__ZN10emscripten8internal11BindingTypeIPK10maxiSampleE12fromWireTypeES4_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt2 = ((($0)) + 4|0);
 $$unpack3 = HEAP32[$$elt2>>2]|0;
 $4 = $$unpack3 >> 1;
 $5 = (($3) + ($4)|0);
 $6 = $$unpack3 & 1;
 $7 = ($6|0)==(0);
 if ($7) {
  $11 = $$unpack;
  $12 = $11;
 } else {
  $8 = HEAP32[$5>>2]|0;
  $9 = (($8) + ($$unpack)|0);
  $10 = HEAP32[$9>>2]|0;
  $12 = $10;
 }
 $13 = (FUNCTION_TABLE_ii[$12 & 255]($5)|0);
 HEAP32[$2>>2] = $13;
 $14 = (__ZN10emscripten8internal11BindingTypeImE10toWireTypeERKm($2)|0);
 STACKTOP = sp;return ($14|0);
}
function __ZN10emscripten15select_overloadIFvRNSt3__26vectorIdNS1_9allocatorIdEEEEE10maxiSampleEEDtfp_EMT0_T_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$elt7 = 0, $$repack10 = 0, $$unpack = 0, $$unpack8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$unpack = HEAP32[$1>>2]|0;
 $$elt7 = ((($1)) + 4|0);
 $$unpack8 = HEAP32[$$elt7>>2]|0;
 HEAP32[$0>>2] = $$unpack;
 $$repack10 = ((($0)) + 4|0);
 HEAP32[$$repack10>>2] = $$unpack8;
 return;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI10maxiSampleEERNSt3__26vectorIdNS7_9allocatorIdEEEEEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 3;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI10maxiSampleEERNSt3__26vectorIdNS7_9allocatorIdEEEEEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerI10maxiSampleEERNSt3__26vectorIdNS6_9allocatorIdEEEEEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIM10maxiSampleFvRNSt3__26vectorIdNS3_9allocatorIdEEEEEEEPT_RKSB_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal13MethodInvokerIM10maxiSampleFvRNSt3__26vectorIdNS3_9allocatorIdEEEEEvPS2_JS8_EE6invokeERKSA_SB_PS7_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$elt3 = 0, $$unpack = 0, $$unpack4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (__ZN10emscripten8internal11BindingTypeIP10maxiSampleE12fromWireTypeES3_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt3 = ((($0)) + 4|0);
 $$unpack4 = HEAP32[$$elt3>>2]|0;
 $4 = $$unpack4 >> 1;
 $5 = (($3) + ($4)|0);
 $6 = $$unpack4 & 1;
 $7 = ($6|0)==(0);
 if ($7) {
  $11 = $$unpack;
  $13 = $11;
 } else {
  $8 = HEAP32[$5>>2]|0;
  $9 = (($8) + ($$unpack)|0);
  $10 = HEAP32[$9>>2]|0;
  $13 = $10;
 }
 $12 = (__ZN10emscripten8internal18GenericBindingTypeINSt3__26vectorIdNS2_9allocatorIdEEEEE12fromWireTypeEPS6_($2)|0);
 FUNCTION_TABLE_vii[$13 & 255]($5,$12);
 return;
}
function __ZN10emscripten15select_overloadIFvRNSt3__26vectorIdNS1_9allocatorIdEEEEiE10maxiSampleEEDtfp_EMT0_T_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$elt7 = 0, $$repack10 = 0, $$unpack = 0, $$unpack8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$unpack = HEAP32[$1>>2]|0;
 $$elt7 = ((($1)) + 4|0);
 $$unpack8 = HEAP32[$$elt7>>2]|0;
 HEAP32[$0>>2] = $$unpack;
 $$repack10 = ((($0)) + 4|0);
 HEAP32[$$repack10>>2] = $$unpack8;
 return;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI10maxiSampleEERNSt3__26vectorIdNS7_9allocatorIdEEEEiEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 4;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI10maxiSampleEERNSt3__26vectorIdNS7_9allocatorIdEEEEiEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerI10maxiSampleEERNSt3__26vectorIdNS6_9allocatorIdEEEEiEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIM10maxiSampleFvRNSt3__26vectorIdNS3_9allocatorIdEEEEiEEEPT_RKSB_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal13MethodInvokerIM10maxiSampleFvRNSt3__26vectorIdNS3_9allocatorIdEEEEiEvPS2_JS8_iEE6invokeERKSA_SB_PS7_i($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$elt3 = 0, $$unpack = 0, $$unpack4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (__ZN10emscripten8internal11BindingTypeIP10maxiSampleE12fromWireTypeES3_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt3 = ((($0)) + 4|0);
 $$unpack4 = HEAP32[$$elt3>>2]|0;
 $5 = $$unpack4 >> 1;
 $6 = (($4) + ($5)|0);
 $7 = $$unpack4 & 1;
 $8 = ($7|0)==(0);
 if ($8) {
  $12 = $$unpack;
  $15 = $12;
 } else {
  $9 = HEAP32[$6>>2]|0;
  $10 = (($9) + ($$unpack)|0);
  $11 = HEAP32[$10>>2]|0;
  $15 = $11;
 }
 $13 = (__ZN10emscripten8internal18GenericBindingTypeINSt3__26vectorIdNS2_9allocatorIdEEEEE12fromWireTypeEPS6_($2)|0);
 $14 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($3)|0);
 FUNCTION_TABLE_viii[$15 & 63]($6,$13,$14);
 return;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbNS0_17AllowedRawPointerI10maxiSampleEEEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbNS0_17AllowedRawPointerI10maxiSampleEEEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJbNS0_17AllowedRawPointerI10maxiSampleEEEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIM10maxiSampleFbvEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal13MethodInvokerIM10maxiSampleFbvEbPS2_JEE6invokeERKS4_S5_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$elt2 = 0, $$unpack = 0, $$unpack3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZN10emscripten8internal11BindingTypeIP10maxiSampleE12fromWireTypeES3_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt2 = ((($0)) + 4|0);
 $$unpack3 = HEAP32[$$elt2>>2]|0;
 $3 = $$unpack3 >> 1;
 $4 = (($2) + ($3)|0);
 $5 = $$unpack3 & 1;
 $6 = ($5|0)==(0);
 if ($6) {
  $10 = $$unpack;
  $11 = $10;
 } else {
  $7 = HEAP32[$4>>2]|0;
  $8 = (($7) + ($$unpack)|0);
  $9 = HEAP32[$8>>2]|0;
  $11 = $9;
 }
 $12 = (FUNCTION_TABLE_ii[$11 & 255]($4)|0);
 $13 = (__ZN10emscripten8internal11BindingTypeIbE10toWireTypeEb($12)|0);
 return ($13|0);
}
function __ZN10emscripten15select_overloadIFdvE10maxiSampleEEDtfp_EMT0_T_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$elt7 = 0, $$repack10 = 0, $$unpack = 0, $$unpack8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$unpack = HEAP32[$1>>2]|0;
 $$elt7 = ((($1)) + 4|0);
 $$unpack8 = HEAP32[$$elt7>>2]|0;
 HEAP32[$0>>2] = $$unpack;
 $$repack10 = ((($0)) + 4|0);
 HEAP32[$$repack10>>2] = $$unpack8;
 return;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI10maxiSampleEEEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI10maxiSampleEEEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJdNS0_17AllowedRawPointerI10maxiSampleEEEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIM10maxiSampleFdvEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal13MethodInvokerIM10maxiSampleFdvEdPS2_JEE6invokeERKS4_S5_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$elt2 = 0, $$unpack = 0, $$unpack3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = (__ZN10emscripten8internal11BindingTypeIP10maxiSampleE12fromWireTypeES3_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt2 = ((($0)) + 4|0);
 $$unpack3 = HEAP32[$$elt2>>2]|0;
 $4 = $$unpack3 >> 1;
 $5 = (($3) + ($4)|0);
 $6 = $$unpack3 & 1;
 $7 = ($6|0)==(0);
 if ($7) {
  $11 = $$unpack;
  $12 = $11;
 } else {
  $8 = HEAP32[$5>>2]|0;
  $9 = (($8) + ($$unpack)|0);
  $10 = HEAP32[$9>>2]|0;
  $12 = $10;
 }
 $13 = (+FUNCTION_TABLE_di[$12 & 15]($5));
 HEAPF64[$2>>3] = $13;
 $14 = (+__ZN10emscripten8internal11BindingTypeIdE10toWireTypeERKd($2));
 STACKTOP = sp;return (+$14);
}
function __ZN10emscripten15select_overloadIFddE10maxiSampleEEDtfp_EMT0_T_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$elt7 = 0, $$repack10 = 0, $$unpack = 0, $$unpack8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$unpack = HEAP32[$1>>2]|0;
 $$elt7 = ((($1)) + 4|0);
 $$unpack8 = HEAP32[$$elt7>>2]|0;
 HEAP32[$0>>2] = $$unpack;
 $$repack10 = ((($0)) + 4|0);
 HEAP32[$$repack10>>2] = $$unpack8;
 return;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI10maxiSampleEEdEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 3;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI10maxiSampleEEdEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJdNS0_17AllowedRawPointerI10maxiSampleEEdEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIM10maxiSampleFddEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal13MethodInvokerIM10maxiSampleFddEdPS2_JdEE6invokeERKS4_S5_d($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 var $$elt3 = 0, $$unpack = 0, $$unpack4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = (__ZN10emscripten8internal11BindingTypeIP10maxiSampleE12fromWireTypeES3_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt3 = ((($0)) + 4|0);
 $$unpack4 = HEAP32[$$elt3>>2]|0;
 $5 = $$unpack4 >> 1;
 $6 = (($4) + ($5)|0);
 $7 = $$unpack4 & 1;
 $8 = ($7|0)==(0);
 if ($8) {
  $12 = $$unpack;
  $14 = $12;
 } else {
  $9 = HEAP32[$6>>2]|0;
  $10 = (($9) + ($$unpack)|0);
  $11 = HEAP32[$10>>2]|0;
  $14 = $11;
 }
 $13 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($2));
 $15 = (+FUNCTION_TABLE_did[$14 & 15]($6,$13));
 HEAPF64[$3>>3] = $15;
 $16 = (+__ZN10emscripten8internal11BindingTypeIdE10toWireTypeERKd($3));
 STACKTOP = sp;return (+$16);
}
function __ZN10emscripten15select_overloadIFddddE10maxiSampleEEDtfp_EMT0_T_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$elt7 = 0, $$repack10 = 0, $$unpack = 0, $$unpack8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$unpack = HEAP32[$1>>2]|0;
 $$elt7 = ((($1)) + 4|0);
 $$unpack8 = HEAP32[$$elt7>>2]|0;
 HEAP32[$0>>2] = $$unpack;
 $$repack10 = ((($0)) + 4|0);
 HEAP32[$$repack10>>2] = $$unpack8;
 return;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI10maxiSampleEEdddEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 5;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI10maxiSampleEEdddEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJdNS0_17AllowedRawPointerI10maxiSampleEEdddEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIM10maxiSampleFddddEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal13MethodInvokerIM10maxiSampleFddddEdPS2_JdddEE6invokeERKS4_S5_ddd($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 var $$elt5 = 0, $$unpack = 0, $$unpack6 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $20 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $5 = sp;
 $6 = (__ZN10emscripten8internal11BindingTypeIP10maxiSampleE12fromWireTypeES3_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt5 = ((($0)) + 4|0);
 $$unpack6 = HEAP32[$$elt5>>2]|0;
 $7 = $$unpack6 >> 1;
 $8 = (($6) + ($7)|0);
 $9 = $$unpack6 & 1;
 $10 = ($9|0)==(0);
 if ($10) {
  $14 = $$unpack;
  $18 = $14;
 } else {
  $11 = HEAP32[$8>>2]|0;
  $12 = (($11) + ($$unpack)|0);
  $13 = HEAP32[$12>>2]|0;
  $18 = $13;
 }
 $15 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($2));
 $16 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($3));
 $17 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($4));
 $19 = (+FUNCTION_TABLE_diddd[$18 & 7]($8,$15,$16,$17));
 HEAPF64[$5>>3] = $19;
 $20 = (+__ZN10emscripten8internal11BindingTypeIdE10toWireTypeERKd($5));
 STACKTOP = sp;return (+$20);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI10maxiSampleEEEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI10maxiSampleEEEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerI10maxiSampleEEEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIM10maxiSampleFvvEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal13MethodInvokerIM10maxiSampleFvvEvPS2_JEE6invokeERKS4_S5_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$elt2 = 0, $$unpack = 0, $$unpack3 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZN10emscripten8internal11BindingTypeIP10maxiSampleE12fromWireTypeES3_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt2 = ((($0)) + 4|0);
 $$unpack3 = HEAP32[$$elt2>>2]|0;
 $3 = $$unpack3 >> 1;
 $4 = (($2) + ($3)|0);
 $5 = $$unpack3 & 1;
 $6 = ($5|0)==(0);
 if ($6) {
  $10 = $$unpack;
  $11 = $10;
  FUNCTION_TABLE_vi[$11 & 511]($4);
  return;
 } else {
  $7 = HEAP32[$4>>2]|0;
  $8 = (($7) + ($$unpack)|0);
  $9 = HEAP32[$8>>2]|0;
  $11 = $9;
  FUNCTION_TABLE_vi[$11 & 511]($4);
  return;
 }
}
function __ZN10maxiSample5clearEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 108|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 112|0);
 HEAP32[$3>>2] = $2;
 return;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI10maxiSampleEEdEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 3;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI10maxiSampleEEdEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerI10maxiSampleEEdEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIM10maxiSampleFvdEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal13MethodInvokerIM10maxiSampleFvdEvPS2_JdEE6invokeERKS4_S5_d($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 var $$elt3 = 0, $$unpack = 0, $$unpack4 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (__ZN10emscripten8internal11BindingTypeIP10maxiSampleE12fromWireTypeES3_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt3 = ((($0)) + 4|0);
 $$unpack4 = HEAP32[$$elt3>>2]|0;
 $4 = $$unpack4 >> 1;
 $5 = (($3) + ($4)|0);
 $6 = $$unpack4 & 1;
 $7 = ($6|0)==(0);
 if ($7) {
  $11 = $$unpack;
  $13 = $11;
 } else {
  $8 = HEAP32[$5>>2]|0;
  $9 = (($8) + ($$unpack)|0);
  $10 = HEAP32[$9>>2]|0;
  $13 = $10;
 }
 $12 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($2));
 FUNCTION_TABLE_vid[$13 & 31]($5,$12);
 return;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI10maxiSampleEEffbbEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 6;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI10maxiSampleEEffbbEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerI10maxiSampleEEffbbEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJviiffiiEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (36132|0);
}
function __ZN10emscripten8internal10getContextIM10maxiSampleFvffbbEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal13MethodInvokerIM10maxiSampleFvffbbEvPS2_JffbbEE6invokeERKS4_S5_ffbb($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = +$3;
 $4 = $4|0;
 $5 = $5|0;
 var $$elt5 = 0, $$unpack = 0, $$unpack6 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = (__ZN10emscripten8internal11BindingTypeIP10maxiSampleE12fromWireTypeES3_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt5 = ((($0)) + 4|0);
 $$unpack6 = HEAP32[$$elt5>>2]|0;
 $7 = $$unpack6 >> 1;
 $8 = (($6) + ($7)|0);
 $9 = $$unpack6 & 1;
 $10 = ($9|0)==(0);
 if ($10) {
  $14 = $$unpack;
  $19 = $14;
 } else {
  $11 = HEAP32[$8>>2]|0;
  $12 = (($11) + ($$unpack)|0);
  $13 = HEAP32[$12>>2]|0;
  $19 = $13;
 }
 $15 = (+__ZN10emscripten8internal11BindingTypeIfE12fromWireTypeEf($2));
 $16 = (+__ZN10emscripten8internal11BindingTypeIfE12fromWireTypeEf($3));
 $17 = (__ZN10emscripten8internal11BindingTypeIbE12fromWireTypeEb($4)|0);
 $18 = (__ZN10emscripten8internal11BindingTypeIbE12fromWireTypeEb($5)|0);
 FUNCTION_TABLE_viddii[$19 & 1]($8,$15,$16,$17,$18);
 return;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbNS0_17AllowedRawPointerI10maxiSampleEENSt3__212basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEiEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 4;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbNS0_17AllowedRawPointerI10maxiSampleEENSt3__212basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEiEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJbNS0_17AllowedRawPointerI10maxiSampleEENSt3__212basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEiEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJiiiiiEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (36025|0);
}
function __ZN10emscripten8internal10getContextIM10maxiSampleFbNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEiEEEPT_RKSC_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal13MethodInvokerIM10maxiSampleFbNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEiEbPS2_JS9_iEE6invokeERKSB_SC_PNS0_11BindingTypeIS9_EUt_Ei($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$elt5 = 0, $$unpack = 0, $$unpack6 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = (__ZN10emscripten8internal11BindingTypeIP10maxiSampleE12fromWireTypeES3_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt5 = ((($0)) + 4|0);
 $$unpack6 = HEAP32[$$elt5>>2]|0;
 $6 = $$unpack6 >> 1;
 $7 = (($5) + ($6)|0);
 $8 = $$unpack6 & 1;
 $9 = ($8|0)==(0);
 if ($9) {
  $13 = $$unpack;
  $15 = $13;
 } else {
  $10 = HEAP32[$7>>2]|0;
  $11 = (($10) + ($$unpack)|0);
  $12 = HEAP32[$11>>2]|0;
  $15 = $12;
 }
 __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE12fromWireTypeEPNS9_Ut_E($4,$2);
 $14 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($3)|0);
 __THREW__ = 0;
 $16 = (invoke_iiii($15|0,($7|0),($4|0),($14|0))|0);
 $17 = __THREW__; __THREW__ = 0;
 $18 = $17&1;
 if ($18) {
  $20 = ___cxa_find_matching_catch_2()|0;
  $21 = (getTempRet0() | 0);
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($4);
  ___resumeException($20|0);
  // unreachable;
 } else {
  $19 = (__ZN10emscripten8internal11BindingTypeIbE10toWireTypeEb($16)|0);
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($4);
  STACKTOP = sp;return ($19|0);
 }
 return (0)|0;
}
function __ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJbNS0_17AllowedRawPointerI10maxiSampleEEEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2;
}
function __ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJbNS0_17AllowedRawPointerI10maxiSampleEEEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJbNS0_17AllowedRawPointerI10maxiSampleEEEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal11NoBaseClass6verifyI7maxiMapEEvv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10emscripten8internal11NoBaseClass11getUpcasterI7maxiMapEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal11NoBaseClass13getDowncasterI7maxiMapEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal6TypeIDI7maxiMapE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDI7maxiMapE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerI7maxiMapEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIP7maxiMapE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIK7maxiMapEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIPK7maxiMapE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal13getActualTypeI7maxiMapEEPKvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14getLightTypeIDI7maxiMapEEPKvRKT_($0)|0);
 return ($1|0);
}
function __ZN10emscripten8internal14raw_destructorI7maxiMapEEvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 __ZdlPv($0);
 return;
}
function __ZN10emscripten8internal6TypeIDINSt3__210shared_ptrI7maxiMapEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINSt3__210shared_ptrI7maxiMapEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiMapEEE18get_sharing_policyEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiMapEEE3getERKS4_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiMapEEE14construct_nullEv() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Znwm(8)|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($0)) + 4|0);
 HEAP32[$1>>2] = 0;
 return ($0|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiMapEEE5shareEPS3_PNS_8internal7_EM_VALE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$04 = 0, $$1 = 0, $$15 = 0, $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 12|0;
 $2 = sp + 8|0;
 $3 = sp + 4|0;
 $4 = sp;
 $5 = (__Znwm(8)|0);
 __THREW__ = 0;
 invoke_vii(73,($3|0),($1|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $12 = ___cxa_find_matching_catch_2()|0;
  $13 = (getTempRet0() | 0);
  $$1 = $13;$$15 = $12;
  __ZdlPv($5);
  ___resumeException($$15|0);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vii(81,($2|0),($3|0));
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 do {
  if ($9) {
   $14 = ___cxa_find_matching_catch_2()|0;
   $15 = (getTempRet0() | 0);
   $$0 = $15;$$04 = $14;
  } else {
   HEAP32[$4>>2] = 0;
   __THREW__ = 0;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$4>>2]|0;
   invoke_viiii(20,($5|0),($0|0),($2|0),($$byval_copy|0));
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if ($11) {
    $16 = ___cxa_find_matching_catch_2()|0;
    $17 = (getTempRet0() | 0);
    __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiMapEEE11val_deleterD2Ev($2);
    $$0 = $17;$$04 = $16;
    break;
   } else {
    __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiMapEEE11val_deleterD2Ev($2);
    __ZN10emscripten3valD2Ev($3);
    STACKTOP = sp;return ($5|0);
   }
  }
 } while(0);
 __ZN10emscripten3valD2Ev($3);
 $$1 = $$0;$$15 = $$04;
 __ZdlPv($5);
 ___resumeException($$15|0);
 // unreachable;
 return (0)|0;
}
function __ZN10emscripten8internal14raw_destructorINSt3__210shared_ptrI7maxiMapEEEEvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 __ZNSt3__210shared_ptrI7maxiMapED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210shared_ptrI7maxiMapEEEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210shared_ptrI7maxiMapEEEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNSt3__210shared_ptrI7maxiMapEEEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal7InvokerINSt3__210shared_ptrI7maxiMapEEJEE6invokeEPFS5_vE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 FUNCTION_TABLE_vi[$0 & 511]($1);
 __THREW__ = 0;
 $2 = (invoke_ii(157,($1|0))|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $5 = ___cxa_find_matching_catch_2()|0;
  $6 = (getTempRet0() | 0);
  __ZNSt3__210shared_ptrI7maxiMapED2Ev($1);
  ___resumeException($5|0);
  // unreachable;
 } else {
  __ZNSt3__210shared_ptrI7maxiMapED2Ev($1);
  STACKTOP = sp;return ($2|0);
 }
 return (0)|0;
}
function __ZNSt3__211make_sharedI7maxiMapJEEENS_9enable_ifIXntsr8is_arrayIT_EE5valueENS_10shared_ptrIS3_EEE4typeEDpOT0_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__210shared_ptrI7maxiMapE11make_sharedIJEEES2_DpOT_($0);
 return;
}
function __ZN7maxiMap6linlinEddddd($0,$1,$2,$3,$4) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 var $$sroa$speculated = 0.0, $$sroa$speculated7 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = $2 < $0;
 $$sroa$speculated7 = $5 ? $2 : $0;
 $6 = $$sroa$speculated7 < $1;
 $$sroa$speculated = $6 ? $1 : $$sroa$speculated7;
 $7 = $$sroa$speculated - $1;
 $8 = $2 - $1;
 $9 = $7 / $8;
 $10 = $4 - $3;
 $11 = $10 * $9;
 $12 = $11 + $3;
 return (+$12);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJddddddEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 6;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJddddddEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJddddddEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJdidddddEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (35664|0);
}
function __ZN10emscripten8internal10getContextIPFddddddEEEPT_RKS4_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(4)|0);
 $2 = HEAP32[$0>>2]|0;
 HEAP32[$1>>2] = $2;
 return ($1|0);
}
function __ZN10emscripten8internal15FunctionInvokerIPFddddddEddJddddEE6invokeEPS3_ddddd($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 $5 = +$5;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $6 = sp;
 $7 = HEAP32[$0>>2]|0;
 $8 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($1));
 $9 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($2));
 $10 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($3));
 $11 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($4));
 $12 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($5));
 $13 = (+FUNCTION_TABLE_dddddd[$7 & 3]($8,$9,$10,$11,$12));
 HEAPF64[$6>>3] = $13;
 $14 = (+__ZN10emscripten8internal11BindingTypeIdE10toWireTypeERKd($6));
 STACKTOP = sp;return (+$14);
}
function __ZN7maxiMap6linexpEddddd($0,$1,$2,$3,$4) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 var $$sroa$speculated = 0.0, $$sroa$speculated7 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = $2 < $0;
 $$sroa$speculated7 = $5 ? $2 : $0;
 $6 = $$sroa$speculated7 < $1;
 $$sroa$speculated = $6 ? $1 : $$sroa$speculated7;
 $7 = $4 / $3;
 $8 = $$sroa$speculated - $1;
 $9 = $2 - $1;
 $10 = $8 / $9;
 $11 = (+Math_pow((+$7),(+$10)));
 $12 = $11 * $3;
 return (+$12);
}
function __ZN7maxiMap6explinEddddd($0,$1,$2,$3,$4) {
 $0 = +$0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 var $$sroa$speculated = 0.0, $$sroa$speculated7 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = $2 < $0;
 $$sroa$speculated7 = $5 ? $2 : $0;
 $6 = $$sroa$speculated7 < $1;
 $$sroa$speculated = $6 ? $1 : $$sroa$speculated7;
 $7 = $$sroa$speculated / $1;
 $8 = (+Math_log((+$7)));
 $9 = $2 / $1;
 $10 = (+Math_log((+$9)));
 $11 = $8 / $10;
 $12 = $4 - $3;
 $13 = $12 * $11;
 $14 = $13 + $3;
 return (+$14);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJddddEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 4;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJddddEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJddddEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJdidddEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (35658|0);
}
function __ZN10emscripten8internal10getContextIPFddddEEEPT_RKS4_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(4)|0);
 $2 = HEAP32[$0>>2]|0;
 HEAP32[$1>>2] = $2;
 return ($1|0);
}
function __ZN10emscripten8internal15FunctionInvokerIPFddddEddJddEE6invokeEPS3_ddd($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 var $10 = 0.0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = HEAP32[$0>>2]|0;
 $6 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($1));
 $7 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($2));
 $8 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($3));
 $9 = (+FUNCTION_TABLE_dddd[$5 & 1]($6,$7,$8));
 HEAPF64[$4>>3] = $9;
 $10 = (+__ZN10emscripten8internal11BindingTypeIdE10toWireTypeERKd($4));
 STACKTOP = sp;return (+$10);
}
function __ZN10emscripten8internal11NoBaseClass6verifyI7maxiDynEEvv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10emscripten8internal11NoBaseClass11getUpcasterI7maxiDynEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal11NoBaseClass13getDowncasterI7maxiDynEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal6TypeIDI7maxiDynE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDI7maxiDynE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerI7maxiDynEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIP7maxiDynE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIK7maxiDynEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIPK7maxiDynE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal13getActualTypeI7maxiDynEEPKvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14getLightTypeIDI7maxiDynEEPKvRKT_($0)|0);
 return ($1|0);
}
function __ZN10emscripten8internal14raw_destructorI7maxiDynEEvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 __ZdlPv($0);
 return;
}
function __ZN10emscripten8internal6TypeIDINSt3__210shared_ptrI7maxiDynEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINSt3__210shared_ptrI7maxiDynEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiDynEEE18get_sharing_policyEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiDynEEE3getERKS4_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiDynEEE14construct_nullEv() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Znwm(8)|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($0)) + 4|0);
 HEAP32[$1>>2] = 0;
 return ($0|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiDynEEE5shareEPS3_PNS_8internal7_EM_VALE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$04 = 0, $$1 = 0, $$15 = 0, $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 12|0;
 $2 = sp + 8|0;
 $3 = sp + 4|0;
 $4 = sp;
 $5 = (__Znwm(8)|0);
 __THREW__ = 0;
 invoke_vii(73,($3|0),($1|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $12 = ___cxa_find_matching_catch_2()|0;
  $13 = (getTempRet0() | 0);
  $$1 = $13;$$15 = $12;
  __ZdlPv($5);
  ___resumeException($$15|0);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vii(82,($2|0),($3|0));
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 do {
  if ($9) {
   $14 = ___cxa_find_matching_catch_2()|0;
   $15 = (getTempRet0() | 0);
   $$0 = $15;$$04 = $14;
  } else {
   HEAP32[$4>>2] = 0;
   __THREW__ = 0;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$4>>2]|0;
   invoke_viiii(21,($5|0),($0|0),($2|0),($$byval_copy|0));
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if ($11) {
    $16 = ___cxa_find_matching_catch_2()|0;
    $17 = (getTempRet0() | 0);
    __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiDynEEE11val_deleterD2Ev($2);
    $$0 = $17;$$04 = $16;
    break;
   } else {
    __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiDynEEE11val_deleterD2Ev($2);
    __ZN10emscripten3valD2Ev($3);
    STACKTOP = sp;return ($5|0);
   }
  }
 } while(0);
 __ZN10emscripten3valD2Ev($3);
 $$1 = $$0;$$15 = $$04;
 __ZdlPv($5);
 ___resumeException($$15|0);
 // unreachable;
 return (0)|0;
}
function __ZN10emscripten8internal14raw_destructorINSt3__210shared_ptrI7maxiDynEEEEvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 __ZNSt3__210shared_ptrI7maxiDynED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210shared_ptrI7maxiDynEEEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210shared_ptrI7maxiDynEEEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNSt3__210shared_ptrI7maxiDynEEEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal7InvokerINSt3__210shared_ptrI7maxiDynEEJEE6invokeEPFS5_vE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 FUNCTION_TABLE_vi[$0 & 511]($1);
 __THREW__ = 0;
 $2 = (invoke_ii(158,($1|0))|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $5 = ___cxa_find_matching_catch_2()|0;
  $6 = (getTempRet0() | 0);
  __ZNSt3__210shared_ptrI7maxiDynED2Ev($1);
  ___resumeException($5|0);
  // unreachable;
 } else {
  __ZNSt3__210shared_ptrI7maxiDynED2Ev($1);
  STACKTOP = sp;return ($2|0);
 }
 return (0)|0;
}
function __ZNSt3__211make_sharedI7maxiDynJEEENS_9enable_ifIXntsr8is_arrayIT_EE5valueENS_10shared_ptrIS3_EEE4typeEDpOT0_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__210shared_ptrI7maxiDynE11make_sharedIJEEES2_DpOT_($0);
 return;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7maxiDynEEddlddEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 7;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7maxiDynEEddlddEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJdNS0_17AllowedRawPointerI7maxiDynEEddlddEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJdiiddiddEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (35342|0);
}
function __ZN10emscripten8internal10getContextIM7maxiDynFdddlddEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal13MethodInvokerIM7maxiDynFdddlddEdPS2_JddlddEE6invokeERKS4_S5_ddldd($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = +$3;
 $4 = $4|0;
 $5 = +$5;
 $6 = +$6;
 var $$elt6 = 0, $$unpack = 0, $$unpack7 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $7 = sp;
 $8 = (__ZN10emscripten8internal11BindingTypeIP7maxiDynE12fromWireTypeES3_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt6 = ((($0)) + 4|0);
 $$unpack7 = HEAP32[$$elt6>>2]|0;
 $9 = $$unpack7 >> 1;
 $10 = (($8) + ($9)|0);
 $11 = $$unpack7 & 1;
 $12 = ($11|0)==(0);
 if ($12) {
  $16 = $$unpack;
  $22 = $16;
 } else {
  $13 = HEAP32[$10>>2]|0;
  $14 = (($13) + ($$unpack)|0);
  $15 = HEAP32[$14>>2]|0;
  $22 = $15;
 }
 $17 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($2));
 $18 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($3));
 $19 = (__ZN10emscripten8internal11BindingTypeIlE12fromWireTypeEl($4)|0);
 $20 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($5));
 $21 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($6));
 $23 = (+FUNCTION_TABLE_diddidd[$22 & 1]($10,$17,$18,$19,$20,$21));
 HEAPF64[$7>>3] = $23;
 $24 = (+__ZN10emscripten8internal11BindingTypeIdE10toWireTypeERKd($7));
 STACKTOP = sp;return (+$24);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7maxiDynEEdddddEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 7;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7maxiDynEEdddddEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJdNS0_17AllowedRawPointerI7maxiDynEEdddddEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJdiidddddEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (35333|0);
}
function __ZN10emscripten8internal10getContextIM7maxiDynFddddddEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal13MethodInvokerIM7maxiDynFddddddEdPS2_JdddddEE6invokeERKS4_S5_ddddd($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 $5 = +$5;
 $6 = +$6;
 var $$elt7 = 0, $$unpack = 0, $$unpack8 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $7 = sp;
 $8 = (__ZN10emscripten8internal11BindingTypeIP7maxiDynE12fromWireTypeES3_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt7 = ((($0)) + 4|0);
 $$unpack8 = HEAP32[$$elt7>>2]|0;
 $9 = $$unpack8 >> 1;
 $10 = (($8) + ($9)|0);
 $11 = $$unpack8 & 1;
 $12 = ($11|0)==(0);
 if ($12) {
  $16 = $$unpack;
  $22 = $16;
 } else {
  $13 = HEAP32[$10>>2]|0;
  $14 = (($13) + ($$unpack)|0);
  $15 = HEAP32[$14>>2]|0;
  $22 = $15;
 }
 $17 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($2));
 $18 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($3));
 $19 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($4));
 $20 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($5));
 $21 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($6));
 $23 = (+FUNCTION_TABLE_diddddd[$22 & 3]($10,$17,$18,$19,$20,$21));
 HEAPF64[$7>>3] = $23;
 $24 = (+__ZN10emscripten8internal11BindingTypeIdE10toWireTypeERKd($7));
 STACKTOP = sp;return (+$24);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7maxiDynEEdEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 3;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7maxiDynEEdEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJdNS0_17AllowedRawPointerI7maxiDynEEdEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIM7maxiDynFddEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal13MethodInvokerIM7maxiDynFddEdPS2_JdEE6invokeERKS4_S5_d($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 var $$elt3 = 0, $$unpack = 0, $$unpack4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = (__ZN10emscripten8internal11BindingTypeIP7maxiDynE12fromWireTypeES3_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt3 = ((($0)) + 4|0);
 $$unpack4 = HEAP32[$$elt3>>2]|0;
 $5 = $$unpack4 >> 1;
 $6 = (($4) + ($5)|0);
 $7 = $$unpack4 & 1;
 $8 = ($7|0)==(0);
 if ($8) {
  $12 = $$unpack;
  $14 = $12;
 } else {
  $9 = HEAP32[$6>>2]|0;
  $10 = (($9) + ($$unpack)|0);
  $11 = HEAP32[$10>>2]|0;
  $14 = $11;
 }
 $13 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($2));
 $15 = (+FUNCTION_TABLE_did[$14 & 15]($6,$13));
 HEAPF64[$3>>3] = $15;
 $16 = (+__ZN10emscripten8internal11BindingTypeIdE10toWireTypeERKd($3));
 STACKTOP = sp;return (+$16);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI7maxiDynEEdEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 3;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI7maxiDynEEdEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerI7maxiDynEEdEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIM7maxiDynFvdEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal13MethodInvokerIM7maxiDynFvdEvPS2_JdEE6invokeERKS4_S5_d($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 var $$elt3 = 0, $$unpack = 0, $$unpack4 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (__ZN10emscripten8internal11BindingTypeIP7maxiDynE12fromWireTypeES3_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt3 = ((($0)) + 4|0);
 $$unpack4 = HEAP32[$$elt3>>2]|0;
 $4 = $$unpack4 >> 1;
 $5 = (($3) + ($4)|0);
 $6 = $$unpack4 & 1;
 $7 = ($6|0)==(0);
 if ($7) {
  $11 = $$unpack;
  $13 = $11;
 } else {
  $8 = HEAP32[$5>>2]|0;
  $9 = (($8) + ($$unpack)|0);
  $10 = HEAP32[$9>>2]|0;
  $13 = $10;
 }
 $12 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($2));
 FUNCTION_TABLE_vid[$13 & 31]($5,$12);
 return;
}
function __ZN10emscripten8internal11NoBaseClass6verifyI7maxiEnvEEvv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10emscripten8internal11NoBaseClass11getUpcasterI7maxiEnvEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal11NoBaseClass13getDowncasterI7maxiEnvEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal6TypeIDI7maxiEnvE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDI7maxiEnvE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerI7maxiEnvEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIP7maxiEnvE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIK7maxiEnvEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIPK7maxiEnvE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal13getActualTypeI7maxiEnvEEPKvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14getLightTypeIDI7maxiEnvEEPKvRKT_($0)|0);
 return ($1|0);
}
function __ZN10emscripten8internal14raw_destructorI7maxiEnvEEvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 __ZdlPv($0);
 return;
}
function __ZN10emscripten8internal6TypeIDINSt3__210shared_ptrI7maxiEnvEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINSt3__210shared_ptrI7maxiEnvEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiEnvEEE18get_sharing_policyEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiEnvEEE3getERKS4_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiEnvEEE14construct_nullEv() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Znwm(8)|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($0)) + 4|0);
 HEAP32[$1>>2] = 0;
 return ($0|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiEnvEEE5shareEPS3_PNS_8internal7_EM_VALE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$04 = 0, $$1 = 0, $$15 = 0, $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 12|0;
 $2 = sp + 8|0;
 $3 = sp + 4|0;
 $4 = sp;
 $5 = (__Znwm(8)|0);
 __THREW__ = 0;
 invoke_vii(73,($3|0),($1|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $12 = ___cxa_find_matching_catch_2()|0;
  $13 = (getTempRet0() | 0);
  $$1 = $13;$$15 = $12;
  __ZdlPv($5);
  ___resumeException($$15|0);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vii(83,($2|0),($3|0));
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 do {
  if ($9) {
   $14 = ___cxa_find_matching_catch_2()|0;
   $15 = (getTempRet0() | 0);
   $$0 = $15;$$04 = $14;
  } else {
   HEAP32[$4>>2] = 0;
   __THREW__ = 0;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$4>>2]|0;
   invoke_viiii(22,($5|0),($0|0),($2|0),($$byval_copy|0));
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if ($11) {
    $16 = ___cxa_find_matching_catch_2()|0;
    $17 = (getTempRet0() | 0);
    __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiEnvEEE11val_deleterD2Ev($2);
    $$0 = $17;$$04 = $16;
    break;
   } else {
    __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiEnvEEE11val_deleterD2Ev($2);
    __ZN10emscripten3valD2Ev($3);
    STACKTOP = sp;return ($5|0);
   }
  }
 } while(0);
 __ZN10emscripten3valD2Ev($3);
 $$1 = $$0;$$15 = $$04;
 __ZdlPv($5);
 ___resumeException($$15|0);
 // unreachable;
 return (0)|0;
}
function __ZN10emscripten8internal14raw_destructorINSt3__210shared_ptrI7maxiEnvEEEEvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 __ZNSt3__210shared_ptrI7maxiEnvED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210shared_ptrI7maxiEnvEEEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210shared_ptrI7maxiEnvEEEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNSt3__210shared_ptrI7maxiEnvEEEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal7InvokerINSt3__210shared_ptrI7maxiEnvEEJEE6invokeEPFS5_vE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 FUNCTION_TABLE_vi[$0 & 511]($1);
 __THREW__ = 0;
 $2 = (invoke_ii(159,($1|0))|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $5 = ___cxa_find_matching_catch_2()|0;
  $6 = (getTempRet0() | 0);
  __ZNSt3__210shared_ptrI7maxiEnvED2Ev($1);
  ___resumeException($5|0);
  // unreachable;
 } else {
  __ZNSt3__210shared_ptrI7maxiEnvED2Ev($1);
  STACKTOP = sp;return ($2|0);
 }
 return (0)|0;
}
function __ZNSt3__211make_sharedI7maxiEnvJEEENS_9enable_ifIXntsr8is_arrayIT_EE5valueENS_10shared_ptrIS3_EEE4typeEDpOT0_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__210shared_ptrI7maxiEnvE11make_sharedIJEEES2_DpOT_($0);
 return;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7maxiEnvEEdddliEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 7;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7maxiEnvEEdddliEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJdNS0_17AllowedRawPointerI7maxiEnvEEdddliEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJdiidddiiEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (34998|0);
}
function __ZN10emscripten8internal10getContextIM7maxiEnvFddddliEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal13MethodInvokerIM7maxiEnvFddddliEdPS2_JdddliEE6invokeERKS4_S5_dddli($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 $5 = $5|0;
 $6 = $6|0;
 var $$elt6 = 0, $$unpack = 0, $$unpack7 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $7 = sp;
 $8 = (__ZN10emscripten8internal11BindingTypeIP7maxiEnvE12fromWireTypeES3_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt6 = ((($0)) + 4|0);
 $$unpack7 = HEAP32[$$elt6>>2]|0;
 $9 = $$unpack7 >> 1;
 $10 = (($8) + ($9)|0);
 $11 = $$unpack7 & 1;
 $12 = ($11|0)==(0);
 if ($12) {
  $16 = $$unpack;
  $22 = $16;
 } else {
  $13 = HEAP32[$10>>2]|0;
  $14 = (($13) + ($$unpack)|0);
  $15 = HEAP32[$14>>2]|0;
  $22 = $15;
 }
 $17 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($2));
 $18 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($3));
 $19 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($4));
 $20 = (__ZN10emscripten8internal11BindingTypeIlE12fromWireTypeEl($5)|0);
 $21 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($6)|0);
 $23 = (+FUNCTION_TABLE_didddii[$22 & 1]($10,$17,$18,$19,$20,$21));
 HEAPF64[$7>>3] = $23;
 $24 = (+__ZN10emscripten8internal11BindingTypeIdE10toWireTypeERKd($7));
 STACKTOP = sp;return (+$24);
}
function __ZN10emscripten15select_overloadIFddddddliE7maxiEnvEEDtfp_EMT0_T_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$elt7 = 0, $$repack10 = 0, $$unpack = 0, $$unpack8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$unpack = HEAP32[$1>>2]|0;
 $$elt7 = ((($1)) + 4|0);
 $$unpack8 = HEAP32[$$elt7>>2]|0;
 HEAP32[$0>>2] = $$unpack;
 $$repack10 = ((($0)) + 4|0);
 HEAP32[$$repack10>>2] = $$unpack8;
 return;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7maxiEnvEEdddddliEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 9;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7maxiEnvEEdddddliEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJdNS0_17AllowedRawPointerI7maxiEnvEEdddddliEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJdiidddddiiEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (34987|0);
}
function __ZN10emscripten8internal10getContextIM7maxiEnvFddddddliEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal13MethodInvokerIM7maxiEnvFddddddliEdPS2_JdddddliEE6invokeERKS4_S5_dddddli($0,$1,$2,$3,$4,$5,$6,$7,$8) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 $5 = +$5;
 $6 = +$6;
 $7 = $7|0;
 $8 = $8|0;
 var $$elt8 = 0, $$unpack = 0, $$unpack9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0.0, $28 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $9 = sp;
 $10 = (__ZN10emscripten8internal11BindingTypeIP7maxiEnvE12fromWireTypeES3_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt8 = ((($0)) + 4|0);
 $$unpack9 = HEAP32[$$elt8>>2]|0;
 $11 = $$unpack9 >> 1;
 $12 = (($10) + ($11)|0);
 $13 = $$unpack9 & 1;
 $14 = ($13|0)==(0);
 if ($14) {
  $18 = $$unpack;
  $26 = $18;
 } else {
  $15 = HEAP32[$12>>2]|0;
  $16 = (($15) + ($$unpack)|0);
  $17 = HEAP32[$16>>2]|0;
  $26 = $17;
 }
 $19 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($2));
 $20 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($3));
 $21 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($4));
 $22 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($5));
 $23 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($6));
 $24 = (__ZN10emscripten8internal11BindingTypeIlE12fromWireTypeEl($7)|0);
 $25 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($8)|0);
 $27 = (+FUNCTION_TABLE_didddddii[$26 & 1]($12,$19,$20,$21,$22,$23,$24,$25));
 HEAPF64[$9>>3] = $27;
 $28 = (+__ZN10emscripten8internal11BindingTypeIdE10toWireTypeERKd($9));
 STACKTOP = sp;return (+$28);
}
function __ZN10emscripten15select_overloadIFddiE7maxiEnvEEDtfp_EMT0_T_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$elt7 = 0, $$repack10 = 0, $$unpack = 0, $$unpack8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$unpack = HEAP32[$1>>2]|0;
 $$elt7 = ((($1)) + 4|0);
 $$unpack8 = HEAP32[$$elt7>>2]|0;
 HEAP32[$0>>2] = $$unpack;
 $$repack10 = ((($0)) + 4|0);
 HEAP32[$$repack10>>2] = $$unpack8;
 return;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7maxiEnvEEdiEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 4;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7maxiEnvEEdiEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJdNS0_17AllowedRawPointerI7maxiEnvEEdiEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJdiidiEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (34981|0);
}
function __ZN10emscripten8internal10getContextIM7maxiEnvFddiEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal13MethodInvokerIM7maxiEnvFddiEdPS2_JdiEE6invokeERKS4_S5_di($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = $3|0;
 var $$elt3 = 0, $$unpack = 0, $$unpack4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = (__ZN10emscripten8internal11BindingTypeIP7maxiEnvE12fromWireTypeES3_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt3 = ((($0)) + 4|0);
 $$unpack4 = HEAP32[$$elt3>>2]|0;
 $6 = $$unpack4 >> 1;
 $7 = (($5) + ($6)|0);
 $8 = $$unpack4 & 1;
 $9 = ($8|0)==(0);
 if ($9) {
  $13 = $$unpack;
  $16 = $13;
 } else {
  $10 = HEAP32[$7>>2]|0;
  $11 = (($10) + ($$unpack)|0);
  $12 = HEAP32[$11>>2]|0;
  $16 = $12;
 }
 $14 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($2));
 $15 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($3)|0);
 $17 = (+FUNCTION_TABLE_didi[$16 & 1]($7,$14,$15));
 HEAPF64[$4>>3] = $17;
 $18 = (+__ZN10emscripten8internal11BindingTypeIdE10toWireTypeERKd($4));
 STACKTOP = sp;return (+$18);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI7maxiEnvEEdEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 3;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI7maxiEnvEEdEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerI7maxiEnvEEdEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIM7maxiEnvFvdEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal13MethodInvokerIM7maxiEnvFvdEvPS2_JdEE6invokeERKS4_S5_d($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 var $$elt3 = 0, $$unpack = 0, $$unpack4 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (__ZN10emscripten8internal11BindingTypeIP7maxiEnvE12fromWireTypeES3_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt3 = ((($0)) + 4|0);
 $$unpack4 = HEAP32[$$elt3>>2]|0;
 $4 = $$unpack4 >> 1;
 $5 = (($3) + ($4)|0);
 $6 = $$unpack4 & 1;
 $7 = ($6|0)==(0);
 if ($7) {
  $11 = $$unpack;
  $13 = $11;
 } else {
  $8 = HEAP32[$5>>2]|0;
  $9 = (($8) + ($$unpack)|0);
  $10 = HEAP32[$9>>2]|0;
  $13 = $10;
 }
 $12 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($2));
 FUNCTION_TABLE_vid[$13 & 31]($5,$12);
 return;
}
function __ZNK7maxiEnv10getTriggerEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 56|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function __ZN10emscripten8internal12GetterPolicyIM7maxiEnvKFivEE10getContextES4_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$fca$1$gep = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$fca$1$gep = ((($1)) + 4|0);
 HEAP32[$$fca$1$gep>>2] = $$unpack2;
 $2 = (__ZN10emscripten8internal10getContextIM7maxiEnvKFivEEEPT_RKS5_($1)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN7maxiEnv10setTriggerEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 56|0);
 HEAP32[$2>>2] = $1;
 return;
}
function __ZN10emscripten8internal12SetterPolicyIM7maxiEnvFviEE10getContextES4_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$fca$1$gep = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$fca$1$gep = ((($1)) + 4|0);
 HEAP32[$$fca$1$gep>>2] = $$unpack2;
 $2 = (__ZN10emscripten8internal10getContextIM7maxiEnvFviEEEPT_RKS5_($1)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN10emscripten8internal12GetterPolicyIM7maxiEnvKFivEE3getIS2_EEiRKS4_RKT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$elt2 = 0, $$unpack = 0, $$unpack3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $$unpack = HEAP32[$0>>2]|0;
 $$elt2 = ((($0)) + 4|0);
 $$unpack3 = HEAP32[$$elt2>>2]|0;
 $3 = $$unpack3 >> 1;
 $4 = (($1) + ($3)|0);
 $5 = $$unpack3 & 1;
 $6 = ($5|0)==(0);
 if ($6) {
  $10 = $$unpack;
  $11 = $10;
 } else {
  $7 = HEAP32[$4>>2]|0;
  $8 = (($7) + ($$unpack)|0);
  $9 = HEAP32[$8>>2]|0;
  $11 = $9;
 }
 $12 = (FUNCTION_TABLE_ii[$11 & 255]($4)|0);
 HEAP32[$2>>2] = $12;
 $13 = (__ZN10emscripten8internal11BindingTypeIiE10toWireTypeERKi($2)|0);
 STACKTOP = sp;return ($13|0);
}
function __ZN10emscripten8internal12SetterPolicyIM7maxiEnvFviEE3setIS2_EEvRKS4_RT_i($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$elt2 = 0, $$unpack = 0, $$unpack3 = 0, $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$unpack = HEAP32[$0>>2]|0;
 $$elt2 = ((($0)) + 4|0);
 $$unpack3 = HEAP32[$$elt2>>2]|0;
 $3 = $$unpack3 >> 1;
 $4 = (($1) + ($3)|0);
 $5 = $$unpack3 & 1;
 $6 = ($5|0)==(0);
 if ($6) {
  $10 = $$unpack;
  $12 = $10;
 } else {
  $7 = HEAP32[$4>>2]|0;
  $8 = (($7) + ($$unpack)|0);
  $9 = HEAP32[$8>>2]|0;
  $12 = $9;
 }
 $11 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($2)|0);
 FUNCTION_TABLE_vii[$12 & 255]($4,$11);
 return;
}
function __ZN10emscripten8internal11NoBaseClass6verifyI7convertEEvv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10emscripten8internal11NoBaseClass11getUpcasterI7convertEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal11NoBaseClass13getDowncasterI7convertEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal6TypeIDI7convertE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDI7convertE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerI7convertEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIP7convertE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIK7convertEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIPK7convertE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal13getActualTypeI7convertEEPKvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14getLightTypeIDI7convertEEPKvRKT_($0)|0);
 return ($1|0);
}
function __ZN10emscripten8internal14raw_destructorI7convertEEvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 __ZdlPv($0);
 return;
}
function __ZN10emscripten8internal6TypeIDINSt3__210shared_ptrI7convertEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINSt3__210shared_ptrI7convertEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7convertEEE18get_sharing_policyEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7convertEEE3getERKS4_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7convertEEE14construct_nullEv() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Znwm(8)|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($0)) + 4|0);
 HEAP32[$1>>2] = 0;
 return ($0|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7convertEEE5shareEPS3_PNS_8internal7_EM_VALE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$04 = 0, $$1 = 0, $$15 = 0, $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 12|0;
 $2 = sp + 8|0;
 $3 = sp + 4|0;
 $4 = sp;
 $5 = (__Znwm(8)|0);
 __THREW__ = 0;
 invoke_vii(73,($3|0),($1|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $12 = ___cxa_find_matching_catch_2()|0;
  $13 = (getTempRet0() | 0);
  $$1 = $13;$$15 = $12;
  __ZdlPv($5);
  ___resumeException($$15|0);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vii(84,($2|0),($3|0));
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 do {
  if ($9) {
   $14 = ___cxa_find_matching_catch_2()|0;
   $15 = (getTempRet0() | 0);
   $$0 = $15;$$04 = $14;
  } else {
   HEAP32[$4>>2] = 0;
   __THREW__ = 0;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$4>>2]|0;
   invoke_viiii(23,($5|0),($0|0),($2|0),($$byval_copy|0));
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if ($11) {
    $16 = ___cxa_find_matching_catch_2()|0;
    $17 = (getTempRet0() | 0);
    __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7convertEEE11val_deleterD2Ev($2);
    $$0 = $17;$$04 = $16;
    break;
   } else {
    __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7convertEEE11val_deleterD2Ev($2);
    __ZN10emscripten3valD2Ev($3);
    STACKTOP = sp;return ($5|0);
   }
  }
 } while(0);
 __ZN10emscripten3valD2Ev($3);
 $$1 = $$0;$$15 = $$04;
 __ZdlPv($5);
 ___resumeException($$15|0);
 // unreachable;
 return (0)|0;
}
function __ZN10emscripten8internal14raw_destructorINSt3__210shared_ptrI7convertEEEEvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 __ZNSt3__210shared_ptrI7convertED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210shared_ptrI7convertEEEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210shared_ptrI7convertEEEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNSt3__210shared_ptrI7convertEEEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal7InvokerINSt3__210shared_ptrI7convertEEJEE6invokeEPFS5_vE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 FUNCTION_TABLE_vi[$0 & 511]($1);
 __THREW__ = 0;
 $2 = (invoke_ii(160,($1|0))|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $5 = ___cxa_find_matching_catch_2()|0;
  $6 = (getTempRet0() | 0);
  __ZNSt3__210shared_ptrI7convertED2Ev($1);
  ___resumeException($5|0);
  // unreachable;
 } else {
  __ZNSt3__210shared_ptrI7convertED2Ev($1);
  STACKTOP = sp;return ($2|0);
 }
 return (0)|0;
}
function __ZNSt3__211make_sharedI7convertJEEENS_9enable_ifIXntsr8is_arrayIT_EE5valueENS_10shared_ptrIS3_EEE4typeEDpOT0_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__210shared_ptrI7convertE11make_sharedIJEEES2_DpOT_($0);
 return;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7convertEEiEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 3;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7convertEEiEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJdNS0_17AllowedRawPointerI7convertEEiEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJdiiiEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (34631|0);
}
function __ZN10emscripten8internal10getContextIM7convertFdiEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal13MethodInvokerIM7convertFdiEdPS2_JiEE6invokeERKS4_S5_i($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$elt2 = 0, $$unpack = 0, $$unpack3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = (__ZN10emscripten8internal11BindingTypeIP7convertE12fromWireTypeES3_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt2 = ((($0)) + 4|0);
 $$unpack3 = HEAP32[$$elt2>>2]|0;
 $5 = $$unpack3 >> 1;
 $6 = (($4) + ($5)|0);
 $7 = $$unpack3 & 1;
 $8 = ($7|0)==(0);
 if ($8) {
  $12 = $$unpack;
  $14 = $12;
 } else {
  $9 = HEAP32[$6>>2]|0;
  $10 = (($9) + ($$unpack)|0);
  $11 = HEAP32[$10>>2]|0;
  $14 = $11;
 }
 $13 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($2)|0);
 $15 = (+FUNCTION_TABLE_dii[$14 & 15]($6,$13));
 HEAPF64[$3>>3] = $15;
 $16 = (+__ZN10emscripten8internal11BindingTypeIdE10toWireTypeERKd($3));
 STACKTOP = sp;return (+$16);
}
function __ZN10emscripten8internal11NoBaseClass6verifyI14maxiDistortionEEvv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10emscripten8internal11NoBaseClass11getUpcasterI14maxiDistortionEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal11NoBaseClass13getDowncasterI14maxiDistortionEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal6TypeIDI14maxiDistortionE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDI14maxiDistortionE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerI14maxiDistortionEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIP14maxiDistortionE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIK14maxiDistortionEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIPK14maxiDistortionE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal13getActualTypeI14maxiDistortionEEPKvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14getLightTypeIDI14maxiDistortionEEPKvRKT_($0)|0);
 return ($1|0);
}
function __ZN10emscripten8internal14raw_destructorI14maxiDistortionEEvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 __ZdlPv($0);
 return;
}
function __ZN10emscripten8internal6TypeIDINSt3__210shared_ptrI14maxiDistortionEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINSt3__210shared_ptrI14maxiDistortionEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI14maxiDistortionEEE18get_sharing_policyEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI14maxiDistortionEEE3getERKS4_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI14maxiDistortionEEE14construct_nullEv() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Znwm(8)|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($0)) + 4|0);
 HEAP32[$1>>2] = 0;
 return ($0|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI14maxiDistortionEEE5shareEPS3_PNS_8internal7_EM_VALE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$04 = 0, $$1 = 0, $$15 = 0, $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 12|0;
 $2 = sp + 8|0;
 $3 = sp + 4|0;
 $4 = sp;
 $5 = (__Znwm(8)|0);
 __THREW__ = 0;
 invoke_vii(73,($3|0),($1|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $12 = ___cxa_find_matching_catch_2()|0;
  $13 = (getTempRet0() | 0);
  $$1 = $13;$$15 = $12;
  __ZdlPv($5);
  ___resumeException($$15|0);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vii(85,($2|0),($3|0));
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 do {
  if ($9) {
   $14 = ___cxa_find_matching_catch_2()|0;
   $15 = (getTempRet0() | 0);
   $$0 = $15;$$04 = $14;
  } else {
   HEAP32[$4>>2] = 0;
   __THREW__ = 0;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$4>>2]|0;
   invoke_viiii(24,($5|0),($0|0),($2|0),($$byval_copy|0));
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if ($11) {
    $16 = ___cxa_find_matching_catch_2()|0;
    $17 = (getTempRet0() | 0);
    __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI14maxiDistortionEEE11val_deleterD2Ev($2);
    $$0 = $17;$$04 = $16;
    break;
   } else {
    __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI14maxiDistortionEEE11val_deleterD2Ev($2);
    __ZN10emscripten3valD2Ev($3);
    STACKTOP = sp;return ($5|0);
   }
  }
 } while(0);
 __ZN10emscripten3valD2Ev($3);
 $$1 = $$0;$$15 = $$04;
 __ZdlPv($5);
 ___resumeException($$15|0);
 // unreachable;
 return (0)|0;
}
function __ZN10emscripten8internal14raw_destructorINSt3__210shared_ptrI14maxiDistortionEEEEvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 __ZNSt3__210shared_ptrI14maxiDistortionED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210shared_ptrI14maxiDistortionEEEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210shared_ptrI14maxiDistortionEEEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNSt3__210shared_ptrI14maxiDistortionEEEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal7InvokerINSt3__210shared_ptrI14maxiDistortionEEJEE6invokeEPFS5_vE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 FUNCTION_TABLE_vi[$0 & 511]($1);
 __THREW__ = 0;
 $2 = (invoke_ii(161,($1|0))|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $5 = ___cxa_find_matching_catch_2()|0;
  $6 = (getTempRet0() | 0);
  __ZNSt3__210shared_ptrI14maxiDistortionED2Ev($1);
  ___resumeException($5|0);
  // unreachable;
 } else {
  __ZNSt3__210shared_ptrI14maxiDistortionED2Ev($1);
  STACKTOP = sp;return ($2|0);
 }
 return (0)|0;
}
function __ZNSt3__211make_sharedI14maxiDistortionJEEENS_9enable_ifIXntsr8is_arrayIT_EE5valueENS_10shared_ptrIS3_EEE4typeEDpOT0_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__210shared_ptrI14maxiDistortionE11make_sharedIJEEES2_DpOT_($0);
 return;
}
function __ZN14maxiDistortion8fastatanEd($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1 * $1;
 $3 = $2 * 0.28000000000000003;
 $4 = $3 + 1.0;
 $5 = $1 / $4;
 return (+$5);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI14maxiDistortionEEdEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 3;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI14maxiDistortionEEdEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJdNS0_17AllowedRawPointerI14maxiDistortionEEdEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIM14maxiDistortionFddEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal13MethodInvokerIM14maxiDistortionFddEdPS2_JdEE6invokeERKS4_S5_d($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 var $$elt3 = 0, $$unpack = 0, $$unpack4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = (__ZN10emscripten8internal11BindingTypeIP14maxiDistortionE12fromWireTypeES3_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt3 = ((($0)) + 4|0);
 $$unpack4 = HEAP32[$$elt3>>2]|0;
 $5 = $$unpack4 >> 1;
 $6 = (($4) + ($5)|0);
 $7 = $$unpack4 & 1;
 $8 = ($7|0)==(0);
 if ($8) {
  $12 = $$unpack;
  $14 = $12;
 } else {
  $9 = HEAP32[$6>>2]|0;
  $10 = (($9) + ($$unpack)|0);
  $11 = HEAP32[$10>>2]|0;
  $14 = $11;
 }
 $13 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($2));
 $15 = (+FUNCTION_TABLE_did[$14 & 15]($6,$13));
 HEAPF64[$3>>3] = $15;
 $16 = (+__ZN10emscripten8internal11BindingTypeIdE10toWireTypeERKd($3));
 STACKTOP = sp;return (+$16);
}
function __ZN14maxiDistortion8atanDistEdd($0,$1,$2) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 var $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (+Math_atan((+$2)));
 $4 = 1.0 / $3;
 $5 = $1 * $2;
 $6 = (+Math_atan((+$5)));
 $7 = $4 * $6;
 return (+$7);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI14maxiDistortionEEddEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 4;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI14maxiDistortionEEddEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJdNS0_17AllowedRawPointerI14maxiDistortionEEddEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIM14maxiDistortionFdddEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal13MethodInvokerIM14maxiDistortionFdddEdPS2_JddEE6invokeERKS4_S5_dd($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = +$3;
 var $$elt4 = 0, $$unpack = 0, $$unpack5 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = (__ZN10emscripten8internal11BindingTypeIP14maxiDistortionE12fromWireTypeES3_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt4 = ((($0)) + 4|0);
 $$unpack5 = HEAP32[$$elt4>>2]|0;
 $6 = $$unpack5 >> 1;
 $7 = (($5) + ($6)|0);
 $8 = $$unpack5 & 1;
 $9 = ($8|0)==(0);
 if ($9) {
  $13 = $$unpack;
  $16 = $13;
 } else {
  $10 = HEAP32[$7>>2]|0;
  $11 = (($10) + ($$unpack)|0);
  $12 = HEAP32[$11>>2]|0;
  $16 = $12;
 }
 $14 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($2));
 $15 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($3));
 $17 = (+FUNCTION_TABLE_didd[$16 & 7]($7,$14,$15));
 HEAPF64[$4>>3] = $17;
 $18 = (+__ZN10emscripten8internal11BindingTypeIdE10toWireTypeERKd($4));
 STACKTOP = sp;return (+$18);
}
function __ZN14maxiDistortion12fastAtanDistEdd($0,$1,$2) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 var $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (+__ZN14maxiDistortion8fastatanEd($0,$2));
 $4 = 1.0 / $3;
 $5 = $1 * $2;
 $6 = (+__ZN14maxiDistortion8fastatanEd($0,$5));
 $7 = $4 * $6;
 return (+$7);
}
function __ZN10emscripten8internal11NoBaseClass6verifyI11maxiFlangerEEvv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10emscripten8internal11NoBaseClass11getUpcasterI11maxiFlangerEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal11NoBaseClass13getDowncasterI11maxiFlangerEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal6TypeIDI11maxiFlangerE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDI11maxiFlangerE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerI11maxiFlangerEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIP11maxiFlangerE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIK11maxiFlangerEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIPK11maxiFlangerE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal13getActualTypeI11maxiFlangerEEPKvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14getLightTypeIDI11maxiFlangerEEPKvRKT_($0)|0);
 return ($1|0);
}
function __ZN10emscripten8internal14raw_destructorI11maxiFlangerEEvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 __ZdlPv($0);
 return;
}
function __ZN10emscripten8internal6TypeIDINSt3__210shared_ptrI11maxiFlangerEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINSt3__210shared_ptrI11maxiFlangerEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI11maxiFlangerEEE18get_sharing_policyEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI11maxiFlangerEEE3getERKS4_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI11maxiFlangerEEE14construct_nullEv() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Znwm(8)|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($0)) + 4|0);
 HEAP32[$1>>2] = 0;
 return ($0|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI11maxiFlangerEEE5shareEPS3_PNS_8internal7_EM_VALE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$04 = 0, $$1 = 0, $$15 = 0, $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 12|0;
 $2 = sp + 8|0;
 $3 = sp + 4|0;
 $4 = sp;
 $5 = (__Znwm(8)|0);
 __THREW__ = 0;
 invoke_vii(73,($3|0),($1|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $12 = ___cxa_find_matching_catch_2()|0;
  $13 = (getTempRet0() | 0);
  $$1 = $13;$$15 = $12;
  __ZdlPv($5);
  ___resumeException($$15|0);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vii(86,($2|0),($3|0));
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 do {
  if ($9) {
   $14 = ___cxa_find_matching_catch_2()|0;
   $15 = (getTempRet0() | 0);
   $$0 = $15;$$04 = $14;
  } else {
   HEAP32[$4>>2] = 0;
   __THREW__ = 0;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$4>>2]|0;
   invoke_viiii(25,($5|0),($0|0),($2|0),($$byval_copy|0));
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if ($11) {
    $16 = ___cxa_find_matching_catch_2()|0;
    $17 = (getTempRet0() | 0);
    __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI11maxiFlangerEEE11val_deleterD2Ev($2);
    $$0 = $17;$$04 = $16;
    break;
   } else {
    __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI11maxiFlangerEEE11val_deleterD2Ev($2);
    __ZN10emscripten3valD2Ev($3);
    STACKTOP = sp;return ($5|0);
   }
  }
 } while(0);
 __ZN10emscripten3valD2Ev($3);
 $$1 = $$0;$$15 = $$04;
 __ZdlPv($5);
 ___resumeException($$15|0);
 // unreachable;
 return (0)|0;
}
function __ZN10emscripten8internal14raw_destructorINSt3__210shared_ptrI11maxiFlangerEEEEvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 __ZNSt3__210shared_ptrI11maxiFlangerED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210shared_ptrI11maxiFlangerEEEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210shared_ptrI11maxiFlangerEEEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNSt3__210shared_ptrI11maxiFlangerEEEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal7InvokerINSt3__210shared_ptrI11maxiFlangerEEJEE6invokeEPFS5_vE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 FUNCTION_TABLE_vi[$0 & 511]($1);
 __THREW__ = 0;
 $2 = (invoke_ii(162,($1|0))|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $5 = ___cxa_find_matching_catch_2()|0;
  $6 = (getTempRet0() | 0);
  __ZNSt3__210shared_ptrI11maxiFlangerED2Ev($1);
  ___resumeException($5|0);
  // unreachable;
 } else {
  __ZNSt3__210shared_ptrI11maxiFlangerED2Ev($1);
  STACKTOP = sp;return ($2|0);
 }
 return (0)|0;
}
function __ZNSt3__211make_sharedI11maxiFlangerJEEENS_9enable_ifIXntsr8is_arrayIT_EE5valueENS_10shared_ptrIS3_EEE4typeEDpOT0_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__210shared_ptrI11maxiFlangerE11make_sharedIJEEES2_DpOT_($0);
 return;
}
function __ZN11maxiFlanger6flangeEdjddd($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = +$1;
 $2 = $2|0;
 $3 = +$3;
 $4 = +$4;
 $5 = +$5;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ((($0)) + 705640|0);
 $7 = (+__ZN7maxiOsc8triangleEd($6,$4));
 $8 = (+($2>>>0));
 $9 = $7 * $5;
 $10 = $9 * $8;
 $11 = $10 + $8;
 $12 = $11 + 1.0;
 $13 = (~~(($12)));
 $14 = (+__ZN13maxiDelayline2dlEdid($0,$1,$13,$3));
 $15 = (+Math_abs((+$14)));
 $16 = 1.0 - $15;
 $17 = $14 * $16;
 $18 = $17 + $1;
 $19 = $18 * 0.5;
 return (+$19);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI11maxiFlangerEEdjdddEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 7;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI11maxiFlangerEEdjdddEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJdNS0_17AllowedRawPointerI11maxiFlangerEEdjdddEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJdiididddEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (33879|0);
}
function __ZN10emscripten8internal10getContextIM11maxiFlangerFddjdddEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal13MethodInvokerIM11maxiFlangerFddjdddEdPS2_JdjdddEE6invokeERKS4_S5_djddd($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = $3|0;
 $4 = +$4;
 $5 = +$5;
 $6 = +$6;
 var $$elt6 = 0, $$unpack = 0, $$unpack7 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $7 = sp;
 $8 = (__ZN10emscripten8internal11BindingTypeIP11maxiFlangerE12fromWireTypeES3_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt6 = ((($0)) + 4|0);
 $$unpack7 = HEAP32[$$elt6>>2]|0;
 $9 = $$unpack7 >> 1;
 $10 = (($8) + ($9)|0);
 $11 = $$unpack7 & 1;
 $12 = ($11|0)==(0);
 if ($12) {
  $16 = $$unpack;
  $22 = $16;
 } else {
  $13 = HEAP32[$10>>2]|0;
  $14 = (($13) + ($$unpack)|0);
  $15 = HEAP32[$14>>2]|0;
  $22 = $15;
 }
 $17 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($2));
 $18 = (__ZN10emscripten8internal11BindingTypeIjE12fromWireTypeEj($3)|0);
 $19 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($4));
 $20 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($5));
 $21 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($6));
 $23 = (+FUNCTION_TABLE_dididdd[$22 & 3]($10,$17,$18,$19,$20,$21));
 HEAPF64[$7>>3] = $23;
 $24 = (+__ZN10emscripten8internal11BindingTypeIdE10toWireTypeERKd($7));
 STACKTOP = sp;return (+$24);
}
function __ZN10emscripten8internal11NoBaseClass6verifyI10maxiChorusEEvv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10emscripten8internal11NoBaseClass11getUpcasterI10maxiChorusEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal11NoBaseClass13getDowncasterI10maxiChorusEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal6TypeIDI10maxiChorusE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDI10maxiChorusE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerI10maxiChorusEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIP10maxiChorusE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIK10maxiChorusEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIPK10maxiChorusE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal13getActualTypeI10maxiChorusEEPKvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14getLightTypeIDI10maxiChorusEEPKvRKT_($0)|0);
 return ($1|0);
}
function __ZN10emscripten8internal14raw_destructorI10maxiChorusEEvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 __ZdlPv($0);
 return;
}
function __ZN10emscripten8internal6TypeIDINSt3__210shared_ptrI10maxiChorusEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINSt3__210shared_ptrI10maxiChorusEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiChorusEEE18get_sharing_policyEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiChorusEEE3getERKS4_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiChorusEEE14construct_nullEv() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Znwm(8)|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($0)) + 4|0);
 HEAP32[$1>>2] = 0;
 return ($0|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiChorusEEE5shareEPS3_PNS_8internal7_EM_VALE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$04 = 0, $$1 = 0, $$15 = 0, $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 12|0;
 $2 = sp + 8|0;
 $3 = sp + 4|0;
 $4 = sp;
 $5 = (__Znwm(8)|0);
 __THREW__ = 0;
 invoke_vii(73,($3|0),($1|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $12 = ___cxa_find_matching_catch_2()|0;
  $13 = (getTempRet0() | 0);
  $$1 = $13;$$15 = $12;
  __ZdlPv($5);
  ___resumeException($$15|0);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vii(87,($2|0),($3|0));
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 do {
  if ($9) {
   $14 = ___cxa_find_matching_catch_2()|0;
   $15 = (getTempRet0() | 0);
   $$0 = $15;$$04 = $14;
  } else {
   HEAP32[$4>>2] = 0;
   __THREW__ = 0;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$4>>2]|0;
   invoke_viiii(26,($5|0),($0|0),($2|0),($$byval_copy|0));
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if ($11) {
    $16 = ___cxa_find_matching_catch_2()|0;
    $17 = (getTempRet0() | 0);
    __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiChorusEEE11val_deleterD2Ev($2);
    $$0 = $17;$$04 = $16;
    break;
   } else {
    __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiChorusEEE11val_deleterD2Ev($2);
    __ZN10emscripten3valD2Ev($3);
    STACKTOP = sp;return ($5|0);
   }
  }
 } while(0);
 __ZN10emscripten3valD2Ev($3);
 $$1 = $$0;$$15 = $$04;
 __ZdlPv($5);
 ___resumeException($$15|0);
 // unreachable;
 return (0)|0;
}
function __ZN10emscripten8internal14raw_destructorINSt3__210shared_ptrI10maxiChorusEEEEvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 __ZNSt3__210shared_ptrI10maxiChorusED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210shared_ptrI10maxiChorusEEEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210shared_ptrI10maxiChorusEEEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNSt3__210shared_ptrI10maxiChorusEEEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal7InvokerINSt3__210shared_ptrI10maxiChorusEEJEE6invokeEPFS5_vE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 FUNCTION_TABLE_vi[$0 & 511]($1);
 __THREW__ = 0;
 $2 = (invoke_ii(163,($1|0))|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $5 = ___cxa_find_matching_catch_2()|0;
  $6 = (getTempRet0() | 0);
  __ZNSt3__210shared_ptrI10maxiChorusED2Ev($1);
  ___resumeException($5|0);
  // unreachable;
 } else {
  __ZNSt3__210shared_ptrI10maxiChorusED2Ev($1);
  STACKTOP = sp;return ($2|0);
 }
 return (0)|0;
}
function __ZNSt3__211make_sharedI10maxiChorusJEEENS_9enable_ifIXntsr8is_arrayIT_EE5valueENS_10shared_ptrIS3_EEE4typeEDpOT0_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__210shared_ptrI10maxiChorusE11make_sharedIJEEES2_DpOT_($0);
 return;
}
function __ZN10maxiChorus6chorusEdjddd($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = +$1;
 $2 = $2|0;
 $3 = +$3;
 $4 = +$4;
 $5 = +$5;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ((($0)) + 1411280|0);
 $7 = (+__ZN7maxiOsc5noiseEv($6));
 $8 = ((($0)) + 1411328|0);
 $9 = (+__ZN10maxiFilter5loresEddd($8,$7,$4,1.0));
 $10 = $9 * 2.0;
 $11 = (+($2>>>0));
 $12 = $10 * $5;
 $13 = $12 * $11;
 $14 = $13 + $11;
 $15 = $14 + 1.0;
 $16 = (~~(($15)));
 $17 = (+__ZN13maxiDelayline2dlEdid($0,$1,$16,$3));
 $18 = ((($0)) + 705640|0);
 $19 = $13 * 1.02;
 $20 = $19 + $11;
 $21 = $20 + 1.0;
 $22 = $21 * 0.97999999999999998;
 $23 = (~~(($22)));
 $24 = $3 * 0.98999999999999999;
 $25 = (+__ZN13maxiDelayline2dlEdid($18,$1,$23,$24));
 $26 = (+Math_abs((+$17)));
 $27 = 1.0 - $26;
 $28 = $17 * $27;
 $29 = (+Math_abs((+$25)));
 $30 = 1.0 - $29;
 $31 = $25 * $30;
 $32 = $28 + $31;
 $33 = $32 + $1;
 $34 = $33 / 3.0;
 return (+$34);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI10maxiChorusEEdjdddEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 7;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI10maxiChorusEEdjdddEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJdNS0_17AllowedRawPointerI10maxiChorusEEdjdddEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIM10maxiChorusFddjdddEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal13MethodInvokerIM10maxiChorusFddjdddEdPS2_JdjdddEE6invokeERKS4_S5_djddd($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = $3|0;
 $4 = +$4;
 $5 = +$5;
 $6 = +$6;
 var $$elt6 = 0, $$unpack = 0, $$unpack7 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $7 = sp;
 $8 = (__ZN10emscripten8internal11BindingTypeIP10maxiChorusE12fromWireTypeES3_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt6 = ((($0)) + 4|0);
 $$unpack7 = HEAP32[$$elt6>>2]|0;
 $9 = $$unpack7 >> 1;
 $10 = (($8) + ($9)|0);
 $11 = $$unpack7 & 1;
 $12 = ($11|0)==(0);
 if ($12) {
  $16 = $$unpack;
  $22 = $16;
 } else {
  $13 = HEAP32[$10>>2]|0;
  $14 = (($13) + ($$unpack)|0);
  $15 = HEAP32[$14>>2]|0;
  $22 = $15;
 }
 $17 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($2));
 $18 = (__ZN10emscripten8internal11BindingTypeIjE12fromWireTypeEj($3)|0);
 $19 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($4));
 $20 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($5));
 $21 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($6));
 $23 = (+FUNCTION_TABLE_dididdd[$22 & 3]($10,$17,$18,$19,$20,$21));
 HEAPF64[$7>>3] = $23;
 $24 = (+__ZN10emscripten8internal11BindingTypeIdE10toWireTypeERKd($7));
 STACKTOP = sp;return (+$24);
}
function __ZN10emscripten8internal11NoBaseClass6verifyI13maxiDCBlockerEEvv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10emscripten8internal11NoBaseClass11getUpcasterI13maxiDCBlockerEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal11NoBaseClass13getDowncasterI13maxiDCBlockerEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal6TypeIDI13maxiDCBlockerE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDI13maxiDCBlockerE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerI13maxiDCBlockerEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIP13maxiDCBlockerE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIK13maxiDCBlockerEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIPK13maxiDCBlockerE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal13getActualTypeI13maxiDCBlockerEEPKvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14getLightTypeIDI13maxiDCBlockerEEPKvRKT_($0)|0);
 return ($1|0);
}
function __ZN10emscripten8internal14raw_destructorI13maxiDCBlockerEEvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 __ZdlPv($0);
 return;
}
function __ZN10emscripten8internal6TypeIDINSt3__210shared_ptrI13maxiDCBlockerEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINSt3__210shared_ptrI13maxiDCBlockerEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI13maxiDCBlockerEEE18get_sharing_policyEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI13maxiDCBlockerEEE3getERKS4_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI13maxiDCBlockerEEE14construct_nullEv() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Znwm(8)|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($0)) + 4|0);
 HEAP32[$1>>2] = 0;
 return ($0|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI13maxiDCBlockerEEE5shareEPS3_PNS_8internal7_EM_VALE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$04 = 0, $$1 = 0, $$15 = 0, $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 12|0;
 $2 = sp + 8|0;
 $3 = sp + 4|0;
 $4 = sp;
 $5 = (__Znwm(8)|0);
 __THREW__ = 0;
 invoke_vii(73,($3|0),($1|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $12 = ___cxa_find_matching_catch_2()|0;
  $13 = (getTempRet0() | 0);
  $$1 = $13;$$15 = $12;
  __ZdlPv($5);
  ___resumeException($$15|0);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vii(88,($2|0),($3|0));
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 do {
  if ($9) {
   $14 = ___cxa_find_matching_catch_2()|0;
   $15 = (getTempRet0() | 0);
   $$0 = $15;$$04 = $14;
  } else {
   HEAP32[$4>>2] = 0;
   __THREW__ = 0;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$4>>2]|0;
   invoke_viiii(27,($5|0),($0|0),($2|0),($$byval_copy|0));
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if ($11) {
    $16 = ___cxa_find_matching_catch_2()|0;
    $17 = (getTempRet0() | 0);
    __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI13maxiDCBlockerEEE11val_deleterD2Ev($2);
    $$0 = $17;$$04 = $16;
    break;
   } else {
    __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI13maxiDCBlockerEEE11val_deleterD2Ev($2);
    __ZN10emscripten3valD2Ev($3);
    STACKTOP = sp;return ($5|0);
   }
  }
 } while(0);
 __ZN10emscripten3valD2Ev($3);
 $$1 = $$0;$$15 = $$04;
 __ZdlPv($5);
 ___resumeException($$15|0);
 // unreachable;
 return (0)|0;
}
function __ZN10emscripten8internal14raw_destructorINSt3__210shared_ptrI13maxiDCBlockerEEEEvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 __ZNSt3__210shared_ptrI13maxiDCBlockerED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210shared_ptrI13maxiDCBlockerEEEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210shared_ptrI13maxiDCBlockerEEEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNSt3__210shared_ptrI13maxiDCBlockerEEEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal7InvokerINSt3__210shared_ptrI13maxiDCBlockerEEJEE6invokeEPFS5_vE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 FUNCTION_TABLE_vi[$0 & 511]($1);
 __THREW__ = 0;
 $2 = (invoke_ii(164,($1|0))|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $5 = ___cxa_find_matching_catch_2()|0;
  $6 = (getTempRet0() | 0);
  __ZNSt3__210shared_ptrI13maxiDCBlockerED2Ev($1);
  ___resumeException($5|0);
  // unreachable;
 } else {
  __ZNSt3__210shared_ptrI13maxiDCBlockerED2Ev($1);
  STACKTOP = sp;return ($2|0);
 }
 return (0)|0;
}
function __ZNSt3__211make_sharedI13maxiDCBlockerJEEENS_9enable_ifIXntsr8is_arrayIT_EE5valueENS_10shared_ptrIS3_EEE4typeEDpOT0_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__210shared_ptrI13maxiDCBlockerE11make_sharedIJEEES2_DpOT_($0);
 return;
}
function __ZN13maxiDCBlocker4playEdd($0,$1,$2) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 var $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = +HEAPF64[$0>>3];
 $4 = $1 - $3;
 $5 = ((($0)) + 8|0);
 $6 = +HEAPF64[$5>>3];
 $7 = $6 * $2;
 $8 = $4 + $7;
 HEAPF64[$5>>3] = $8;
 HEAPF64[$0>>3] = $1;
 return (+$8);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI13maxiDCBlockerEEddEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 4;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI13maxiDCBlockerEEddEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJdNS0_17AllowedRawPointerI13maxiDCBlockerEEddEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIM13maxiDCBlockerFdddEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal13MethodInvokerIM13maxiDCBlockerFdddEdPS2_JddEE6invokeERKS4_S5_dd($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = +$3;
 var $$elt4 = 0, $$unpack = 0, $$unpack5 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = (__ZN10emscripten8internal11BindingTypeIP13maxiDCBlockerE12fromWireTypeES3_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt4 = ((($0)) + 4|0);
 $$unpack5 = HEAP32[$$elt4>>2]|0;
 $6 = $$unpack5 >> 1;
 $7 = (($5) + ($6)|0);
 $8 = $$unpack5 & 1;
 $9 = ($8|0)==(0);
 if ($9) {
  $13 = $$unpack;
  $16 = $13;
 } else {
  $10 = HEAP32[$7>>2]|0;
  $11 = (($10) + ($$unpack)|0);
  $12 = HEAP32[$11>>2]|0;
  $16 = $12;
 }
 $14 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($2));
 $15 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($3));
 $17 = (+FUNCTION_TABLE_didd[$16 & 7]($7,$14,$15));
 HEAPF64[$4>>3] = $17;
 $18 = (+__ZN10emscripten8internal11BindingTypeIdE10toWireTypeERKd($4));
 STACKTOP = sp;return (+$18);
}
function __ZN10emscripten8internal11NoBaseClass6verifyI7maxiSVFEEvv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10emscripten8internal11NoBaseClass11getUpcasterI7maxiSVFEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal11NoBaseClass13getDowncasterI7maxiSVFEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal6TypeIDI7maxiSVFE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDI7maxiSVFE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerI7maxiSVFEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIP7maxiSVFE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIK7maxiSVFEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIPK7maxiSVFE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal13getActualTypeI7maxiSVFEEPKvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14getLightTypeIDI7maxiSVFEEPKvRKT_($0)|0);
 return ($1|0);
}
function __ZN10emscripten8internal14raw_destructorI7maxiSVFEEvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 __ZdlPv($0);
 return;
}
function __ZN10emscripten8internal6TypeIDINSt3__210shared_ptrI7maxiSVFEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINSt3__210shared_ptrI7maxiSVFEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiSVFEEE18get_sharing_policyEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiSVFEEE3getERKS4_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiSVFEEE14construct_nullEv() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Znwm(8)|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($0)) + 4|0);
 HEAP32[$1>>2] = 0;
 return ($0|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiSVFEEE5shareEPS3_PNS_8internal7_EM_VALE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$04 = 0, $$1 = 0, $$15 = 0, $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 12|0;
 $2 = sp + 8|0;
 $3 = sp + 4|0;
 $4 = sp;
 $5 = (__Znwm(8)|0);
 __THREW__ = 0;
 invoke_vii(73,($3|0),($1|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $12 = ___cxa_find_matching_catch_2()|0;
  $13 = (getTempRet0() | 0);
  $$1 = $13;$$15 = $12;
  __ZdlPv($5);
  ___resumeException($$15|0);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vii(89,($2|0),($3|0));
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 do {
  if ($9) {
   $14 = ___cxa_find_matching_catch_2()|0;
   $15 = (getTempRet0() | 0);
   $$0 = $15;$$04 = $14;
  } else {
   HEAP32[$4>>2] = 0;
   __THREW__ = 0;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$4>>2]|0;
   invoke_viiii(28,($5|0),($0|0),($2|0),($$byval_copy|0));
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if ($11) {
    $16 = ___cxa_find_matching_catch_2()|0;
    $17 = (getTempRet0() | 0);
    __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiSVFEEE11val_deleterD2Ev($2);
    $$0 = $17;$$04 = $16;
    break;
   } else {
    __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiSVFEEE11val_deleterD2Ev($2);
    __ZN10emscripten3valD2Ev($3);
    STACKTOP = sp;return ($5|0);
   }
  }
 } while(0);
 __ZN10emscripten3valD2Ev($3);
 $$1 = $$0;$$15 = $$04;
 __ZdlPv($5);
 ___resumeException($$15|0);
 // unreachable;
 return (0)|0;
}
function __ZN10emscripten8internal14raw_destructorINSt3__210shared_ptrI7maxiSVFEEEEvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 __ZNSt3__210shared_ptrI7maxiSVFED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210shared_ptrI7maxiSVFEEEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210shared_ptrI7maxiSVFEEEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNSt3__210shared_ptrI7maxiSVFEEEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal7InvokerINSt3__210shared_ptrI7maxiSVFEEJEE6invokeEPFS5_vE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 FUNCTION_TABLE_vi[$0 & 511]($1);
 __THREW__ = 0;
 $2 = (invoke_ii(165,($1|0))|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $5 = ___cxa_find_matching_catch_2()|0;
  $6 = (getTempRet0() | 0);
  __ZNSt3__210shared_ptrI7maxiSVFED2Ev($1);
  ___resumeException($5|0);
  // unreachable;
 } else {
  __ZNSt3__210shared_ptrI7maxiSVFED2Ev($1);
  STACKTOP = sp;return ($2|0);
 }
 return (0)|0;
}
function __ZNSt3__211make_sharedI7maxiSVFJEEENS_9enable_ifIXntsr8is_arrayIT_EE5valueENS_10shared_ptrIS3_EEE4typeEDpOT0_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__210shared_ptrI7maxiSVFE11make_sharedIJEEES2_DpOT_($0);
 return;
}
function __ZN7maxiSVF9setCutoffEd($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $2 = 0, $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 96|0);
 $3 = +HEAPF64[$2>>3];
 __ZN7maxiSVF9setParamsEdd($0,$1,$3);
 return ($0|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJR7maxiSVFNS0_17AllowedRawPointerIS4_EEdEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 3;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJR7maxiSVFNS0_17AllowedRawPointerIS4_EEdEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJR7maxiSVFNS0_17AllowedRawPointerIS3_EEdEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJiiidEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (32838|0);
}
function __ZN10emscripten8internal10getContextIM7maxiSVFFRS2_dEEEPT_RKS6_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal13MethodInvokerIM7maxiSVFFRS2_dES3_PS2_JdEE6invokeERKS5_S6_d($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 var $$elt3 = 0, $$unpack = 0, $$unpack4 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (__ZN10emscripten8internal11BindingTypeIP7maxiSVFE12fromWireTypeES3_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt3 = ((($0)) + 4|0);
 $$unpack4 = HEAP32[$$elt3>>2]|0;
 $4 = $$unpack4 >> 1;
 $5 = (($3) + ($4)|0);
 $6 = $$unpack4 & 1;
 $7 = ($6|0)==(0);
 if ($7) {
  $11 = $$unpack;
  $13 = $11;
 } else {
  $8 = HEAP32[$5>>2]|0;
  $9 = (($8) + ($$unpack)|0);
  $10 = HEAP32[$9>>2]|0;
  $13 = $10;
 }
 $12 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($2));
 $14 = (FUNCTION_TABLE_iid[$13 & 3]($5,$12)|0);
 $15 = (__ZN10emscripten8internal18GenericBindingTypeI7maxiSVFE10toWireTypeERKS2_($14)|0);
 return ($15|0);
}
function __ZN7maxiSVF12setResonanceEd($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $2 = 0, $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 88|0);
 $3 = +HEAPF64[$2>>3];
 __ZN7maxiSVF9setParamsEdd($0,$3,$1);
 return ($0|0);
}
function __ZN7maxiSVF4playEddddd($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 $5 = +$5;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0;
 var $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $40 = 0.0, $41 = 0.0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ((($0)) + 8|0);
 $7 = +HEAPF64[$6>>3];
 $8 = ((($0)) + 16|0);
 $9 = +HEAPF64[$8>>3];
 $10 = +HEAPF64[$0>>3];
 $11 = $10 + $1;
 $12 = $9 * 2.0;
 $13 = $11 - $12;
 $14 = ((($0)) + 56|0);
 $15 = +HEAPF64[$14>>3];
 $16 = $15 * $13;
 $17 = ((($0)) + 64|0);
 $18 = +HEAPF64[$17>>3];
 $19 = $7 * $18;
 $20 = $16 - $19;
 $21 = $7 + $20;
 HEAPF64[$6>>3] = $21;
 $22 = ((($0)) + 72|0);
 $23 = +HEAPF64[$22>>3];
 $24 = $13 * $23;
 $25 = ((($0)) + 80|0);
 $26 = +HEAPF64[$25>>3];
 $27 = $7 * $26;
 $28 = $24 + $27;
 $29 = $9 + $28;
 HEAPF64[$8>>3] = $29;
 HEAPF64[$0>>3] = $1;
 $30 = ((($0)) + 40|0);
 $31 = +HEAPF64[$30>>3];
 $32 = $21 * $31;
 $33 = $1 - $32;
 $34 = $33 - $29;
 $35 = $29 * $2;
 $36 = $21 * $3;
 $37 = $36 + $35;
 $38 = $34 * $4;
 $39 = $37 + $38;
 $40 = $33 * $5;
 $41 = $40 + $39;
 return (+$41);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7maxiSVFEEdddddEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 7;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdNS0_17AllowedRawPointerI7maxiSVFEEdddddEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJdNS0_17AllowedRawPointerI7maxiSVFEEdddddEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIM7maxiSVFFddddddEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal13MethodInvokerIM7maxiSVFFddddddEdPS2_JdddddEE6invokeERKS4_S5_ddddd($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = +$3;
 $4 = +$4;
 $5 = +$5;
 $6 = +$6;
 var $$elt7 = 0, $$unpack = 0, $$unpack8 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $7 = sp;
 $8 = (__ZN10emscripten8internal11BindingTypeIP7maxiSVFE12fromWireTypeES3_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt7 = ((($0)) + 4|0);
 $$unpack8 = HEAP32[$$elt7>>2]|0;
 $9 = $$unpack8 >> 1;
 $10 = (($8) + ($9)|0);
 $11 = $$unpack8 & 1;
 $12 = ($11|0)==(0);
 if ($12) {
  $16 = $$unpack;
  $22 = $16;
 } else {
  $13 = HEAP32[$10>>2]|0;
  $14 = (($13) + ($$unpack)|0);
  $15 = HEAP32[$14>>2]|0;
  $22 = $15;
 }
 $17 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($2));
 $18 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($3));
 $19 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($4));
 $20 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($5));
 $21 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($6));
 $23 = (+FUNCTION_TABLE_diddddd[$22 & 3]($10,$17,$18,$19,$20,$21));
 HEAPF64[$7>>3] = $23;
 $24 = (+__ZN10emscripten8internal11BindingTypeIdE10toWireTypeERKd($7));
 STACKTOP = sp;return (+$24);
}
function __ZN10emscripten8internal11NoBaseClass6verifyI9maxiClockEEvv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10emscripten8internal11NoBaseClass11getUpcasterI9maxiClockEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal11NoBaseClass13getDowncasterI9maxiClockEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal6TypeIDI9maxiClockE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDI9maxiClockE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerI9maxiClockEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIP9maxiClockE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIK9maxiClockEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIPK9maxiClockE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal13getActualTypeI9maxiClockEEPKvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14getLightTypeIDI9maxiClockEEPKvRKT_($0)|0);
 return ($1|0);
}
function __ZN10emscripten8internal14raw_destructorI9maxiClockEEvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 __ZdlPv($0);
 return;
}
function __ZN10emscripten8internal6TypeIDINSt3__210shared_ptrI9maxiClockEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINSt3__210shared_ptrI9maxiClockEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI9maxiClockEEE18get_sharing_policyEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI9maxiClockEEE3getERKS4_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI9maxiClockEEE14construct_nullEv() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Znwm(8)|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($0)) + 4|0);
 HEAP32[$1>>2] = 0;
 return ($0|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI9maxiClockEEE5shareEPS3_PNS_8internal7_EM_VALE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$04 = 0, $$1 = 0, $$15 = 0, $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 12|0;
 $2 = sp + 8|0;
 $3 = sp + 4|0;
 $4 = sp;
 $5 = (__Znwm(8)|0);
 __THREW__ = 0;
 invoke_vii(73,($3|0),($1|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $12 = ___cxa_find_matching_catch_2()|0;
  $13 = (getTempRet0() | 0);
  $$1 = $13;$$15 = $12;
  __ZdlPv($5);
  ___resumeException($$15|0);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vii(90,($2|0),($3|0));
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 do {
  if ($9) {
   $14 = ___cxa_find_matching_catch_2()|0;
   $15 = (getTempRet0() | 0);
   $$0 = $15;$$04 = $14;
  } else {
   HEAP32[$4>>2] = 0;
   __THREW__ = 0;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$4>>2]|0;
   invoke_viiii(29,($5|0),($0|0),($2|0),($$byval_copy|0));
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if ($11) {
    $16 = ___cxa_find_matching_catch_2()|0;
    $17 = (getTempRet0() | 0);
    __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI9maxiClockEEE11val_deleterD2Ev($2);
    $$0 = $17;$$04 = $16;
    break;
   } else {
    __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI9maxiClockEEE11val_deleterD2Ev($2);
    __ZN10emscripten3valD2Ev($3);
    STACKTOP = sp;return ($5|0);
   }
  }
 } while(0);
 __ZN10emscripten3valD2Ev($3);
 $$1 = $$0;$$15 = $$04;
 __ZdlPv($5);
 ___resumeException($$15|0);
 // unreachable;
 return (0)|0;
}
function __ZN10emscripten8internal14raw_destructorINSt3__210shared_ptrI9maxiClockEEEEvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 __ZNSt3__210shared_ptrI9maxiClockED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210shared_ptrI9maxiClockEEEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__210shared_ptrI9maxiClockEEEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNSt3__210shared_ptrI9maxiClockEEEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal7InvokerINSt3__210shared_ptrI9maxiClockEEJEE6invokeEPFS5_vE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 FUNCTION_TABLE_vi[$0 & 511]($1);
 __THREW__ = 0;
 $2 = (invoke_ii(166,($1|0))|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $5 = ___cxa_find_matching_catch_2()|0;
  $6 = (getTempRet0() | 0);
  __ZNSt3__210shared_ptrI9maxiClockED2Ev($1);
  ___resumeException($5|0);
  // unreachable;
 } else {
  __ZNSt3__210shared_ptrI9maxiClockED2Ev($1);
  STACKTOP = sp;return ($2|0);
 }
 return (0)|0;
}
function __ZNSt3__211make_sharedI9maxiClockJEEENS_9enable_ifIXntsr8is_arrayIT_EE5valueENS_10shared_ptrIS3_EEE4typeEDpOT0_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__210shared_ptrI9maxiClockE11make_sharedIJEEES2_DpOT_($0);
 return;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI9maxiClockEEEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI9maxiClockEEEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerI9maxiClockEEEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIM9maxiClockFvvEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal13MethodInvokerIM9maxiClockFvvEvPS2_JEE6invokeERKS4_S5_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$elt2 = 0, $$unpack = 0, $$unpack3 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZN10emscripten8internal11BindingTypeIP9maxiClockE12fromWireTypeES3_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt2 = ((($0)) + 4|0);
 $$unpack3 = HEAP32[$$elt2>>2]|0;
 $3 = $$unpack3 >> 1;
 $4 = (($2) + ($3)|0);
 $5 = $$unpack3 & 1;
 $6 = ($5|0)==(0);
 if ($6) {
  $10 = $$unpack;
  $11 = $10;
  FUNCTION_TABLE_vi[$11 & 511]($4);
  return;
 } else {
  $7 = HEAP32[$4>>2]|0;
  $8 = (($7) + ($$unpack)|0);
  $9 = HEAP32[$8>>2]|0;
  $11 = $9;
  FUNCTION_TABLE_vi[$11 & 511]($4);
  return;
 }
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI9maxiClockEEdEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 3;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI9maxiClockEEdEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerI9maxiClockEEdEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIM9maxiClockFvdEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal13MethodInvokerIM9maxiClockFvdEvPS2_JdEE6invokeERKS4_S5_d($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 var $$elt3 = 0, $$unpack = 0, $$unpack4 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (__ZN10emscripten8internal11BindingTypeIP9maxiClockE12fromWireTypeES3_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt3 = ((($0)) + 4|0);
 $$unpack4 = HEAP32[$$elt3>>2]|0;
 $4 = $$unpack4 >> 1;
 $5 = (($3) + ($4)|0);
 $6 = $$unpack4 & 1;
 $7 = ($6|0)==(0);
 if ($7) {
  $11 = $$unpack;
  $13 = $11;
 } else {
  $8 = HEAP32[$5>>2]|0;
  $9 = (($8) + ($$unpack)|0);
  $10 = HEAP32[$9>>2]|0;
  $13 = $10;
 }
 $12 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($2));
 FUNCTION_TABLE_vid[$13 & 31]($5,$12);
 return;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI9maxiClockEEiEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 3;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerI9maxiClockEEiEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerI9maxiClockEEiEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIM9maxiClockFviEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal13MethodInvokerIM9maxiClockFviEvPS2_JiEE6invokeERKS4_S5_i($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$elt2 = 0, $$unpack = 0, $$unpack3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (__ZN10emscripten8internal11BindingTypeIP9maxiClockE12fromWireTypeES3_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt2 = ((($0)) + 4|0);
 $$unpack3 = HEAP32[$$elt2>>2]|0;
 $4 = $$unpack3 >> 1;
 $5 = (($3) + ($4)|0);
 $6 = $$unpack3 & 1;
 $7 = ($6|0)==(0);
 if ($7) {
  $11 = $$unpack;
  $13 = $11;
 } else {
  $8 = HEAP32[$5>>2]|0;
  $9 = (($8) + ($$unpack)|0);
  $10 = HEAP32[$9>>2]|0;
  $13 = $10;
 }
 $12 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($2)|0);
 FUNCTION_TABLE_vii[$13 & 255]($5,$12);
 return;
}
function __ZNK9maxiClock6isTickEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 84|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2&255;
 return ($3|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiNS0_17AllowedRawPointerIK9maxiClockEEEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiNS0_17AllowedRawPointerIK9maxiClockEEEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJiNS0_17AllowedRawPointerIK9maxiClockEEEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIM9maxiClockKFivEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal13MethodInvokerIM9maxiClockKFivEiPKS2_JEE6invokeERKS4_S6_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$elt2 = 0, $$unpack = 0, $$unpack3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = (__ZN10emscripten8internal11BindingTypeIPK9maxiClockE12fromWireTypeES4_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt2 = ((($0)) + 4|0);
 $$unpack3 = HEAP32[$$elt2>>2]|0;
 $4 = $$unpack3 >> 1;
 $5 = (($3) + ($4)|0);
 $6 = $$unpack3 & 1;
 $7 = ($6|0)==(0);
 if ($7) {
  $11 = $$unpack;
  $12 = $11;
 } else {
  $8 = HEAP32[$5>>2]|0;
  $9 = (($8) + ($$unpack)|0);
  $10 = HEAP32[$9>>2]|0;
  $12 = $10;
 }
 $13 = (FUNCTION_TABLE_ii[$12 & 255]($5)|0);
 HEAP32[$2>>2] = $13;
 $14 = (__ZN10emscripten8internal11BindingTypeIiE10toWireTypeERKi($2)|0);
 STACKTOP = sp;return ($14|0);
}
function __ZNK9maxiClock15getCurrentCountEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 48|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function __ZN10emscripten8internal12GetterPolicyIM9maxiClockKFivEE10getContextES4_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$fca$1$gep = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$fca$1$gep = ((($1)) + 4|0);
 HEAP32[$$fca$1$gep>>2] = $$unpack2;
 $2 = (__ZN10emscripten8internal10getContextIM9maxiClockKFivEEEPT_RKS5_($1)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN9maxiClock15setCurrentCountEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 48|0);
 HEAP32[$2>>2] = $1;
 return;
}
function __ZN10emscripten8internal12SetterPolicyIM9maxiClockFviEE10getContextES4_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$fca$1$gep = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$fca$1$gep = ((($1)) + 4|0);
 HEAP32[$$fca$1$gep>>2] = $$unpack2;
 $2 = (__ZN10emscripten8internal10getContextIM9maxiClockFviEEEPT_RKS5_($1)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN10emscripten8internal12GetterPolicyIM9maxiClockKFivEE3getIS2_EEiRKS4_RKT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$elt2 = 0, $$unpack = 0, $$unpack3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $$unpack = HEAP32[$0>>2]|0;
 $$elt2 = ((($0)) + 4|0);
 $$unpack3 = HEAP32[$$elt2>>2]|0;
 $3 = $$unpack3 >> 1;
 $4 = (($1) + ($3)|0);
 $5 = $$unpack3 & 1;
 $6 = ($5|0)==(0);
 if ($6) {
  $10 = $$unpack;
  $11 = $10;
 } else {
  $7 = HEAP32[$4>>2]|0;
  $8 = (($7) + ($$unpack)|0);
  $9 = HEAP32[$8>>2]|0;
  $11 = $9;
 }
 $12 = (FUNCTION_TABLE_ii[$11 & 255]($4)|0);
 HEAP32[$2>>2] = $12;
 $13 = (__ZN10emscripten8internal11BindingTypeIiE10toWireTypeERKi($2)|0);
 STACKTOP = sp;return ($13|0);
}
function __ZN10emscripten8internal12SetterPolicyIM9maxiClockFviEE3setIS2_EEvRKS4_RT_i($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$elt2 = 0, $$unpack = 0, $$unpack3 = 0, $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$unpack = HEAP32[$0>>2]|0;
 $$elt2 = ((($0)) + 4|0);
 $$unpack3 = HEAP32[$$elt2>>2]|0;
 $3 = $$unpack3 >> 1;
 $4 = (($1) + ($3)|0);
 $5 = $$unpack3 & 1;
 $6 = ($5|0)==(0);
 if ($6) {
  $10 = $$unpack;
  $12 = $10;
 } else {
  $7 = HEAP32[$4>>2]|0;
  $8 = (($7) + ($$unpack)|0);
  $9 = HEAP32[$8>>2]|0;
  $12 = $9;
 }
 $11 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($2)|0);
 FUNCTION_TABLE_vii[$12 & 255]($4,$11);
 return;
}
function __ZNK9maxiClock12getLastCountEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 52|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function __ZN9maxiClock12setLastCountEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 52|0);
 HEAP32[$2>>2] = $1;
 return;
}
function __ZNK9maxiClock11getPlayHeadEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 56|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function __ZN9maxiClock11setPlayHeadEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 56|0);
 HEAP32[$2>>2] = $1;
 return;
}
function __ZNK9maxiClock6getBpsEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 64|0);
 $2 = +HEAPF64[$1>>3];
 return (+$2);
}
function __ZN10emscripten8internal12GetterPolicyIM9maxiClockKFdvEE10getContextES4_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$fca$1$gep = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$fca$1$gep = ((($1)) + 4|0);
 HEAP32[$$fca$1$gep>>2] = $$unpack2;
 $2 = (__ZN10emscripten8internal10getContextIM9maxiClockKFdvEEEPT_RKS5_($1)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN9maxiClock6setBpsEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0.0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+($1|0));
 $3 = ((($0)) + 64|0);
 HEAPF64[$3>>3] = $2;
 return;
}
function __ZN10emscripten8internal12GetterPolicyIM9maxiClockKFdvEE3getIS2_EEdRKS4_RKT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$elt2 = 0, $$unpack = 0, $$unpack3 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $$unpack = HEAP32[$0>>2]|0;
 $$elt2 = ((($0)) + 4|0);
 $$unpack3 = HEAP32[$$elt2>>2]|0;
 $3 = $$unpack3 >> 1;
 $4 = (($1) + ($3)|0);
 $5 = $$unpack3 & 1;
 $6 = ($5|0)==(0);
 if ($6) {
  $10 = $$unpack;
  $11 = $10;
 } else {
  $7 = HEAP32[$4>>2]|0;
  $8 = (($7) + ($$unpack)|0);
  $9 = HEAP32[$8>>2]|0;
  $11 = $9;
 }
 $12 = (+FUNCTION_TABLE_di[$11 & 15]($4));
 HEAPF64[$2>>3] = $12;
 $13 = (+__ZN10emscripten8internal11BindingTypeIdE10toWireTypeERKd($2));
 STACKTOP = sp;return (+$13);
}
function __ZNK9maxiClock6getBpmEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 72|0);
 $2 = +HEAPF64[$1>>3];
 return (+$2);
}
function __ZN9maxiClock6setBpmEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0.0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+($1|0));
 $3 = ((($0)) + 72|0);
 HEAPF64[$3>>3] = $2;
 return;
}
function __ZN10emscripten8internal6TypeIDIbE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIbE3getEv()|0);
 return ($0|0);
}
function __ZNK9maxiClock7getTickEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 84|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)!=(0);
 return ($3|0);
}
function __ZN10emscripten8internal12GetterPolicyIM9maxiClockKFbvEE10getContextES4_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$fca$1$gep = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$fca$1$gep = ((($1)) + 4|0);
 HEAP32[$$fca$1$gep>>2] = $$unpack2;
 $2 = (__ZN10emscripten8internal10getContextIM9maxiClockKFbvEEEPT_RKS5_($1)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN9maxiClock7setTickEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)!=(0);
 $3 = ((($0)) + 84|0);
 $4 = $2&1;
 HEAP8[$3>>0] = $4;
 return;
}
function __ZN10emscripten8internal12GetterPolicyIM9maxiClockKFbvEE3getIS2_EEbRKS4_RKT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$elt2 = 0, $$unpack = 0, $$unpack3 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$unpack = HEAP32[$0>>2]|0;
 $$elt2 = ((($0)) + 4|0);
 $$unpack3 = HEAP32[$$elt2>>2]|0;
 $2 = $$unpack3 >> 1;
 $3 = (($1) + ($2)|0);
 $4 = $$unpack3 & 1;
 $5 = ($4|0)==(0);
 if ($5) {
  $9 = $$unpack;
  $10 = $9;
 } else {
  $6 = HEAP32[$3>>2]|0;
  $7 = (($6) + ($$unpack)|0);
  $8 = HEAP32[$7>>2]|0;
  $10 = $8;
 }
 $11 = (FUNCTION_TABLE_ii[$10 & 255]($3)|0);
 $12 = (__ZN10emscripten8internal11BindingTypeIbE10toWireTypeEb($11)|0);
 return ($12|0);
}
function __ZNK9maxiClock8getTicksEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 80|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function __ZN9maxiClock8setTicksEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 80|0);
 HEAP32[$2>>2] = $1;
 return;
}
function __ZN10emscripten8internal11BindingTypeIbE10toWireTypeEb($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal10getContextIM9maxiClockKFbvEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal11LightTypeIDIbE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (24840|0);
}
function __ZN10emscripten8internal11BindingTypeIdE10toWireTypeERKd($0) {
 $0 = $0|0;
 var $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = +HEAPF64[$0>>3];
 return (+$1);
}
function __ZN10emscripten8internal10getContextIM9maxiClockKFdvEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal11BindingTypeIiE10toWireTypeERKi($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZN10emscripten8internal11BindingTypeIPK9maxiClockE12fromWireTypeES4_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJiNS0_17AllowedRawPointerIK9maxiClockEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (25084|0);
}
function __ZN10emscripten8internal11BindingTypeIP9maxiClockE12fromWireTypeES3_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerI9maxiClockEEiEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (25092|0);
}
function __ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($0) {
 $0 = +$0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (+$0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerI9maxiClockEEdEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (25104|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerI9maxiClockEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (25116|0);
}
function __ZNSt3__210shared_ptrI9maxiClockE11make_sharedIJEEES2_DpOT_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = (__Znwm(104)|0);
 $2 = ((($1)) + 4|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($1)) + 8|0);
 HEAP32[$3>>2] = 0;
 HEAP32[$1>>2] = (25132);
 $4 = ((($1)) + 16|0);
 __THREW__ = 0;
 invoke_vi(300,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $8 = ___cxa_find_matching_catch_2()|0;
  $9 = (getTempRet0() | 0);
  __ZNSt3__214__shared_countD2Ev($1);
  __ZdlPv($1);
  ___resumeException($8|0);
  // unreachable;
 } else {
  $7 = ((($0)) + 4|0);
  HEAP32[$0>>2] = $4;
  HEAP32[$7>>2] = $1;
  HEAP32[$vararg_buffer>>2] = $4;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $4;
  __ZNSt3__210shared_ptrI9maxiClockE18__enable_weak_thisEz($0,$vararg_buffer);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__210shared_ptrI9maxiClockE18__enable_weak_thisEz($0,$varargs) {
 $0 = $0|0;
 $varargs = $varargs|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__220__shared_ptr_emplaceI9maxiClockNS_9allocatorIS1_EEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__214__shared_countD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__220__shared_ptr_emplaceI9maxiClockNS_9allocatorIS1_EEE16__on_zero_sharedEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__220__shared_ptr_emplaceI9maxiClockNS_9allocatorIS1_EEE21__on_zero_shared_weakEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZN10emscripten8internal18GenericBindingTypeINSt3__210shared_ptrI9maxiClockEEE10toWireTypeEOS5_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $2 = HEAP32[$0>>2]|0;
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 4|0);
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$3>>2] = $5;
 HEAP32[$0>>2] = 0;
 HEAP32[$4>>2] = 0;
 return ($1|0);
}
function __ZNSt3__210shared_ptrI9maxiClockED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  return;
 }
 $4 = ((($2)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + -1)|0;
 HEAP32[$4>>2] = $6;
 $7 = ($5|0)==(0);
 if (!($7)) {
  return;
 }
 $8 = HEAP32[$2>>2]|0;
 $9 = ((($8)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 FUNCTION_TABLE_vi[$10 & 511]($2);
 __ZNSt3__219__shared_weak_count14__release_weakEv($2);
 return;
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNSt3__210shared_ptrI9maxiClockEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (25152|0);
}
function __ZN10emscripten3val14take_ownershipEPNS_8internal7_EM_VALE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valC2EPNS_8internal7_EM_VALE($0,$1);
 return;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI9maxiClockEEE11val_deleterC2ENS_3valE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valC2IRS0_EEOT_($0,$1);
 return;
}
function __ZNSt3__210shared_ptrI9maxiClockEC2IS1_N10emscripten15smart_ptr_traitIS2_E11val_deleterEEEPT_T0_NS_9enable_ifIXsr14is_convertibleIS9_PS1_EE5valueENS2_5__natEE4typeE($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$02$i = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $4 = sp + 16|0;
 $5 = sp + 8|0;
 HEAP32[$0>>2] = $1;
 __THREW__ = 0;
 $6 = (invoke_ii(167,20)|0);
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $25 = ___cxa_find_matching_catch_3(0|0)|0;
  $26 = (getTempRet0() | 0);
  $$1 = $25;
 } else {
  __THREW__ = 0;
  invoke_vii(91,($5|0),($2|0));
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  if ($10) {
   $27 = ___cxa_find_matching_catch_3(0|0)|0;
   $28 = (getTempRet0() | 0);
   $$0 = $27;
  } else {
   $11 = $1;
   $12 = ((($6)) + 4|0);
   HEAP32[$12>>2] = 0;
   $13 = ((($6)) + 8|0);
   HEAP32[$13>>2] = 0;
   HEAP32[$6>>2] = (25164);
   HEAP32[$4>>2] = $11;
   $14 = ((($4)) + 4|0);
   __THREW__ = 0;
   invoke_vii(92,($14|0),($5|0));
   $15 = __THREW__; __THREW__ = 0;
   $16 = $15&1;
   do {
    if ($16) {
     $20 = ___cxa_find_matching_catch_3(0|0)|0;
     $21 = (getTempRet0() | 0);
     $$02$i = $20;
    } else {
     $17 = ((($6)) + 12|0);
     __THREW__ = 0;
     invoke_vii(93,($17|0),($4|0));
     $18 = __THREW__; __THREW__ = 0;
     $19 = $18&1;
     if ($19) {
      $22 = ___cxa_find_matching_catch_3(0|0)|0;
      $23 = (getTempRet0() | 0);
      __ZNSt3__217__compressed_pairIP9maxiClockN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEED2Ev($4);
      $$02$i = $22;
      break;
     } else {
      __ZNSt3__217__compressed_pairIP9maxiClockN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEED2Ev($4);
      $24 = ((($0)) + 4|0);
      HEAP32[$24>>2] = $6;
      __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI9maxiClockEEE11val_deleterD2Ev($5);
      HEAP32[$vararg_buffer>>2] = $1;
      $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
      HEAP32[$vararg_ptr1>>2] = $1;
      __ZNSt3__210shared_ptrI9maxiClockE18__enable_weak_thisEz($0,$vararg_buffer);
      STACKTOP = sp;return;
     }
    }
   } while(0);
   __ZNSt3__214__shared_countD2Ev($6);
   __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI9maxiClockEEE11val_deleterD2Ev($5);
   $$0 = $$02$i;
  }
  __ZdlPv($6);
  $$1 = $$0;
 }
 (___cxa_begin_catch(($$1|0))|0);
 __THREW__ = 0;
 invoke_vii(94,($2|0),($1|0));
 $29 = __THREW__; __THREW__ = 0;
 $30 = $29&1;
 if (!($30)) {
  __THREW__ = 0;
  invoke_v(3);
  $31 = __THREW__; __THREW__ = 0;
 }
 $32 = ___cxa_find_matching_catch_2()|0;
 $33 = (getTempRet0() | 0);
 __THREW__ = 0;
 invoke_v(2);
 $34 = __THREW__; __THREW__ = 0;
 $35 = $34&1;
 if ($35) {
  $36 = ___cxa_find_matching_catch_3(0|0)|0;
  $37 = (getTempRet0() | 0);
  ___clang_call_terminate($36);
  // unreachable;
 } else {
  ___resumeException($32|0);
  // unreachable;
 }
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI9maxiClockEEE11val_deleterD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valD2Ev($0);
 return;
}
function __ZN10emscripten3valD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 __THREW__ = 0;
 invoke_vi(301,($1|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $4 = ___cxa_find_matching_catch_3(0|0)|0;
  $5 = (getTempRet0() | 0);
  ___clang_call_terminate($4);
  // unreachable;
 } else {
  return;
 }
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI9maxiClockEEE11val_deleterC2ERKS6_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valC2ERKS0_($0,$1);
 return;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI9maxiClockEEE11val_deleterC2EOS6_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valC2EOS0_($0,$1);
 return;
}
function __ZNSt3__217__compressed_pairIP9maxiClockN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEEC2EOS9_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = ((($0)) + 4|0);
 $4 = ((($1)) + 4|0);
 __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI9maxiClockEEE11val_deleterELi1ELb0EEC2EOS8_($3,$4);
 return;
}
function __ZNSt3__217__compressed_pairIP9maxiClockN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI9maxiClockEEE11val_deleterELi1ELb0EED2Ev($1);
 return;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI9maxiClockEEE11val_deleterclEPKv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = sp + 4|0;
 __ZNK10emscripten3valclIJEEES0_DpOT_($2,$0);
 __ZN10emscripten3valD2Ev($2);
 __ZN10emscripten3val9undefinedEv($3);
 __THREW__ = 0;
 (invoke_iii(71,($0|0),($3|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch_2()|0;
  $7 = (getTempRet0() | 0);
  __ZN10emscripten3valD2Ev($3);
  ___resumeException($6|0);
  // unreachable;
 } else {
  __ZN10emscripten3valD2Ev($3);
  STACKTOP = sp;return;
 }
}
function __ZNK10emscripten3valclIJEEES0_DpOT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNK10emscripten3val12internalCallIPFPNS_8internal7_EM_VALES4_jPKPKvS6_EJEEES0_T_DpOT0_($0,$1,10);
 return;
}
function __ZN10emscripten3val9undefinedEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valC2EPNS_8internal7_EM_VALE($0,(1));
 return;
}
function __ZN10emscripten3valaSEOS0_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 __emval_decref(($2|0));
 $3 = HEAP32[$1>>2]|0;
 HEAP32[$0>>2] = $3;
 HEAP32[$1>>2] = 0;
 return ($0|0);
}
function __ZN10emscripten3valC2EPNS_8internal7_EM_VALE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = $1;
 return;
}
function __ZNK10emscripten3val12internalCallIPFPNS_8internal7_EM_VALES4_jPKPKvS6_EJEEES0_T_DpOT0_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp + 8|0;
 $4 = sp;
 __ZN10emscripten8internal12WireTypePackIJEEC2Ev($4);
 $5 = HEAP32[$1>>2]|0;
 $6 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJEE8getCountEv($3)|0);
 $7 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJEE8getTypesEv($3)|0);
 $8 = (__ZNK10emscripten8internal12WireTypePackIJEEcvPKvEv($4)|0);
 $9 = (FUNCTION_TABLE_iiiii[$2 & 31]($5,$6,$7,$8)|0);
 __ZN10emscripten3valC2EPNS_8internal7_EM_VALE($0,$9);
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal12WireTypePackIJEEC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $0;
 __ZN10emscripten8internal21writeGenericWireTypesERPNS0_15GenericWireTypeE($1);
 STACKTOP = sp;return;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJEEEE3getEv()|0);
 return ($1|0);
}
function __ZNK10emscripten8internal12WireTypePackIJEEcvPKvEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (49072|0);
}
function __ZN10emscripten8internal21writeGenericWireTypesERPNS0_15GenericWireTypeE($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI9maxiClockEEE11val_deleterELi1ELb0EED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI9maxiClockEEE11val_deleterD2Ev($0);
 return;
}
function __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI9maxiClockEEE11val_deleterELi1ELb0EEC2EOS8_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI9maxiClockEEE11val_deleterC2EOS6_($0,$1);
 return;
}
function __ZN10emscripten3valC2EOS0_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$0>>2] = $2;
 HEAP32[$1>>2] = 0;
 return;
}
function __ZNSt3__220__shared_ptr_pointerIP9maxiClockN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (25164);
 $1 = ((($0)) + 12|0);
 __ZNSt3__222__compressed_pair_elemINS_17__compressed_pairIP9maxiClockN10emscripten15smart_ptr_traitINS_10shared_ptrIS2_EEE11val_deleterEEELi0ELb0EED2Ev($1);
 __ZNSt3__214__shared_countD2Ev($0);
 return;
}
function __ZNSt3__220__shared_ptr_pointerIP9maxiClockN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__220__shared_ptr_pointerIP9maxiClockN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__220__shared_ptr_pointerIP9maxiClockN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE16__on_zero_sharedEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 16|0);
 $2 = ((($0)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 __THREW__ = 0;
 invoke_vii(94,($1|0),($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch_3(0|0)|0;
  $7 = (getTempRet0() | 0);
  ___clang_call_terminate($6);
  // unreachable;
 } else {
  __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI9maxiClockEEE11val_deleterD2Ev($1);
  return;
 }
}
function __ZNKSt3__220__shared_ptr_pointerIP9maxiClockN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE13__get_deleterERKSt9type_info($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(32591|0);
 $5 = ((($0)) + 16|0);
 $6 = $4 ? $5 : 0;
 return ($6|0);
}
function __ZNSt3__220__shared_ptr_pointerIP9maxiClockN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE21__on_zero_shared_weakEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZNSt3__222__compressed_pair_elemINS_17__compressed_pairIP9maxiClockN10emscripten15smart_ptr_traitINS_10shared_ptrIS2_EEE11val_deleterEEELi0ELb0EED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__217__compressed_pairIP9maxiClockN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEED2Ev($0);
 return;
}
function __ZN10emscripten3valC2ERKS0_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$0>>2] = $2;
 __emval_incref(($2|0));
 return;
}
function __ZN10emscripten3valC2IRS0_EEOT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 __ZN10emscripten8internal12WireTypePackIJRNS_3valEEEC2ES3_($2,$1);
 $3 = (__ZN10emscripten8internal6TypeIDIRNS_3valEE3getEv()|0);
 $4 = (__ZNK10emscripten8internal12WireTypePackIJRNS_3valEEEcvPKvEv($2)|0);
 $5 = (__emval_take_value(($3|0),($4|0))|0);
 HEAP32[$0>>2] = $5;
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal12WireTypePackIJRNS_3valEEEC2ES3_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 HEAP32[$2>>2] = $0;
 $3 = (__ZN10emscripten8internal11BindingTypeINS_3valEE10toWireTypeERKS2_($1)|0);
 __ZN10emscripten8internal20writeGenericWireTypeINS0_7_EM_VALEEEvRPNS0_15GenericWireTypeEPT_($2,$3);
 __ZN10emscripten8internal21writeGenericWireTypesERPNS0_15GenericWireTypeE($2);
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal6TypeIDIRNS_3valEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIRNS_3valEE3getEv()|0);
 return ($0|0);
}
function __ZNK10emscripten8internal12WireTypePackIJRNS_3valEEEcvPKvEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIRNS_3valEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (21320|0);
}
function __ZN10emscripten8internal11BindingTypeINS_3valEE10toWireTypeERKS2_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 __emval_incref(($1|0));
 $2 = HEAP32[$0>>2]|0;
 return ($2|0);
}
function __ZN10emscripten8internal20writeGenericWireTypeINS0_7_EM_VALEEEvRPNS0_15GenericWireTypeEPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 HEAP32[$2>>2] = $1;
 $3 = HEAP32[$0>>2]|0;
 $4 = ((($3)) + 8|0);
 HEAP32[$0>>2] = $4;
 return;
}
function __ZN10emscripten8internal11LightTypeIDINSt3__210shared_ptrI9maxiClockEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (21296|0);
}
function __ZN10emscripten8internal14getLightTypeIDI9maxiClockEEPKvRKT_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (21256|0);
}
function __ZN10emscripten8internal11LightTypeIDIPK9maxiClockE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (21240|0);
}
function __ZN10emscripten8internal11LightTypeIDIP9maxiClockE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (21264|0);
}
function __ZN10emscripten8internal11LightTypeIDI9maxiClockE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (21256|0);
}
function __ZN10emscripten8internal11BindingTypeIP7maxiSVFE12fromWireTypeES3_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJdNS0_17AllowedRawPointerI7maxiSVFEEdddddEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (13184|0);
}
function __ZN7maxiSVF9setParamsEdd($0,$1,$2) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 var $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0.0, $28 = 0, $3 = 0;
 var $4 = 0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 88|0);
 HEAPF64[$3>>3] = $1;
 $4 = ((($0)) + 96|0);
 HEAPF64[$4>>3] = $2;
 $5 = $1 * 3.1415926535897931;
 $6 = HEAP32[6238]|0;
 $7 = (+($6|0));
 $8 = $5 / $7;
 $9 = (+Math_tan((+$8)));
 $10 = ((($0)) + 24|0);
 HEAPF64[$10>>3] = $9;
 $11 = $2 == 0.0;
 $12 = 1.0 / $2;
 $13 = $11 ? 0.0 : $12;
 $14 = ((($0)) + 32|0);
 HEAPF64[$14>>3] = $13;
 $15 = ((($0)) + 40|0);
 HEAPF64[$15>>3] = $13;
 $16 = $13 + $9;
 $17 = $9 * $16;
 $18 = $17 + 1.0;
 $19 = $9 / $18;
 $20 = ((($0)) + 48|0);
 HEAPF64[$20>>3] = $19;
 $21 = ((($0)) + 56|0);
 HEAPF64[$21>>3] = $19;
 $22 = $16 * 2.0;
 $23 = $22 * $19;
 $24 = ((($0)) + 64|0);
 HEAPF64[$24>>3] = $23;
 $25 = $9 * $19;
 $26 = ((($0)) + 72|0);
 HEAPF64[$26>>3] = $25;
 $27 = $19 * 2.0;
 $28 = ((($0)) + 80|0);
 HEAPF64[$28>>3] = $27;
 return;
}
function __ZN10emscripten8internal18GenericBindingTypeI7maxiSVFE10toWireTypeERKS2_($0) {
 $0 = $0|0;
 var $1 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 $1 = (__Znwm(104)|0);
 dest=$1; src=$0; stop=dest+104|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 return ($1|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJR7maxiSVFNS0_17AllowedRawPointerIS3_EEdEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (25184|0);
}
function __ZNSt3__210shared_ptrI7maxiSVFE11make_sharedIJEEES2_DpOT_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = (__Znwm(120)|0);
 $2 = ((($1)) + 4|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($1)) + 8|0);
 HEAP32[$3>>2] = 0;
 HEAP32[$1>>2] = (25204);
 $4 = ((($1)) + 16|0);
 __ZN7maxiSVFC2Ev($4);
 $5 = ((($0)) + 4|0);
 HEAP32[$0>>2] = $4;
 HEAP32[$5>>2] = $1;
 HEAP32[$vararg_buffer>>2] = $4;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $4;
 __ZNSt3__210shared_ptrI7maxiSVFE18__enable_weak_thisEz($0,$vararg_buffer);
 STACKTOP = sp;return;
}
function __ZN7maxiSVFC2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;HEAP32[$0+12>>2]=0|0;HEAP32[$0+16>>2]=0|0;HEAP32[$0+20>>2]=0|0;
 __ZN7maxiSVF9setParamsEdd($0,1000.0,1.0);
 return;
}
function __ZNSt3__210shared_ptrI7maxiSVFE18__enable_weak_thisEz($0,$varargs) {
 $0 = $0|0;
 $varargs = $varargs|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__220__shared_ptr_emplaceI7maxiSVFNS_9allocatorIS1_EEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__214__shared_countD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__220__shared_ptr_emplaceI7maxiSVFNS_9allocatorIS1_EEE16__on_zero_sharedEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__220__shared_ptr_emplaceI7maxiSVFNS_9allocatorIS1_EEE21__on_zero_shared_weakEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZN10emscripten8internal18GenericBindingTypeINSt3__210shared_ptrI7maxiSVFEEE10toWireTypeEOS5_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $2 = HEAP32[$0>>2]|0;
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 4|0);
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$3>>2] = $5;
 HEAP32[$0>>2] = 0;
 HEAP32[$4>>2] = 0;
 return ($1|0);
}
function __ZNSt3__210shared_ptrI7maxiSVFED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  return;
 }
 $4 = ((($2)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + -1)|0;
 HEAP32[$4>>2] = $6;
 $7 = ($5|0)==(0);
 if (!($7)) {
  return;
 }
 $8 = HEAP32[$2>>2]|0;
 $9 = ((($8)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 FUNCTION_TABLE_vi[$10 & 511]($2);
 __ZNSt3__219__shared_weak_count14__release_weakEv($2);
 return;
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNSt3__210shared_ptrI7maxiSVFEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (25224|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiSVFEEE11val_deleterC2ENS_3valE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valC2IRS0_EEOT_($0,$1);
 return;
}
function __ZNSt3__210shared_ptrI7maxiSVFEC2IS1_N10emscripten15smart_ptr_traitIS2_E11val_deleterEEEPT_T0_NS_9enable_ifIXsr14is_convertibleIS9_PS1_EE5valueENS2_5__natEE4typeE($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$02$i = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $4 = sp + 16|0;
 $5 = sp + 8|0;
 HEAP32[$0>>2] = $1;
 __THREW__ = 0;
 $6 = (invoke_ii(167,20)|0);
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $25 = ___cxa_find_matching_catch_3(0|0)|0;
  $26 = (getTempRet0() | 0);
  $$1 = $25;
 } else {
  __THREW__ = 0;
  invoke_vii(95,($5|0),($2|0));
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  if ($10) {
   $27 = ___cxa_find_matching_catch_3(0|0)|0;
   $28 = (getTempRet0() | 0);
   $$0 = $27;
  } else {
   $11 = $1;
   $12 = ((($6)) + 4|0);
   HEAP32[$12>>2] = 0;
   $13 = ((($6)) + 8|0);
   HEAP32[$13>>2] = 0;
   HEAP32[$6>>2] = (25236);
   HEAP32[$4>>2] = $11;
   $14 = ((($4)) + 4|0);
   __THREW__ = 0;
   invoke_vii(96,($14|0),($5|0));
   $15 = __THREW__; __THREW__ = 0;
   $16 = $15&1;
   do {
    if ($16) {
     $20 = ___cxa_find_matching_catch_3(0|0)|0;
     $21 = (getTempRet0() | 0);
     $$02$i = $20;
    } else {
     $17 = ((($6)) + 12|0);
     __THREW__ = 0;
     invoke_vii(97,($17|0),($4|0));
     $18 = __THREW__; __THREW__ = 0;
     $19 = $18&1;
     if ($19) {
      $22 = ___cxa_find_matching_catch_3(0|0)|0;
      $23 = (getTempRet0() | 0);
      __ZNSt3__217__compressed_pairIP7maxiSVFN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEED2Ev($4);
      $$02$i = $22;
      break;
     } else {
      __ZNSt3__217__compressed_pairIP7maxiSVFN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEED2Ev($4);
      $24 = ((($0)) + 4|0);
      HEAP32[$24>>2] = $6;
      __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiSVFEEE11val_deleterD2Ev($5);
      HEAP32[$vararg_buffer>>2] = $1;
      $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
      HEAP32[$vararg_ptr1>>2] = $1;
      __ZNSt3__210shared_ptrI7maxiSVFE18__enable_weak_thisEz($0,$vararg_buffer);
      STACKTOP = sp;return;
     }
    }
   } while(0);
   __ZNSt3__214__shared_countD2Ev($6);
   __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiSVFEEE11val_deleterD2Ev($5);
   $$0 = $$02$i;
  }
  __ZdlPv($6);
  $$1 = $$0;
 }
 (___cxa_begin_catch(($$1|0))|0);
 __THREW__ = 0;
 invoke_vii(98,($2|0),($1|0));
 $29 = __THREW__; __THREW__ = 0;
 $30 = $29&1;
 if (!($30)) {
  __THREW__ = 0;
  invoke_v(3);
  $31 = __THREW__; __THREW__ = 0;
 }
 $32 = ___cxa_find_matching_catch_2()|0;
 $33 = (getTempRet0() | 0);
 __THREW__ = 0;
 invoke_v(2);
 $34 = __THREW__; __THREW__ = 0;
 $35 = $34&1;
 if ($35) {
  $36 = ___cxa_find_matching_catch_3(0|0)|0;
  $37 = (getTempRet0() | 0);
  ___clang_call_terminate($36);
  // unreachable;
 } else {
  ___resumeException($32|0);
  // unreachable;
 }
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiSVFEEE11val_deleterD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valD2Ev($0);
 return;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiSVFEEE11val_deleterC2ERKS6_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valC2ERKS0_($0,$1);
 return;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiSVFEEE11val_deleterC2EOS6_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valC2EOS0_($0,$1);
 return;
}
function __ZNSt3__217__compressed_pairIP7maxiSVFN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEEC2EOS9_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = ((($0)) + 4|0);
 $4 = ((($1)) + 4|0);
 __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI7maxiSVFEEE11val_deleterELi1ELb0EEC2EOS8_($3,$4);
 return;
}
function __ZNSt3__217__compressed_pairIP7maxiSVFN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI7maxiSVFEEE11val_deleterELi1ELb0EED2Ev($1);
 return;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiSVFEEE11val_deleterclEPKv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = sp + 4|0;
 __ZNK10emscripten3valclIJEEES0_DpOT_($2,$0);
 __ZN10emscripten3valD2Ev($2);
 __ZN10emscripten3val9undefinedEv($3);
 __THREW__ = 0;
 (invoke_iii(71,($0|0),($3|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch_2()|0;
  $7 = (getTempRet0() | 0);
  __ZN10emscripten3valD2Ev($3);
  ___resumeException($6|0);
  // unreachable;
 } else {
  __ZN10emscripten3valD2Ev($3);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI7maxiSVFEEE11val_deleterELi1ELb0EED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiSVFEEE11val_deleterD2Ev($0);
 return;
}
function __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI7maxiSVFEEE11val_deleterELi1ELb0EEC2EOS8_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiSVFEEE11val_deleterC2EOS6_($0,$1);
 return;
}
function __ZNSt3__220__shared_ptr_pointerIP7maxiSVFN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (25236);
 $1 = ((($0)) + 12|0);
 __ZNSt3__222__compressed_pair_elemINS_17__compressed_pairIP7maxiSVFN10emscripten15smart_ptr_traitINS_10shared_ptrIS2_EEE11val_deleterEEELi0ELb0EED2Ev($1);
 __ZNSt3__214__shared_countD2Ev($0);
 return;
}
function __ZNSt3__220__shared_ptr_pointerIP7maxiSVFN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__220__shared_ptr_pointerIP7maxiSVFN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__220__shared_ptr_pointerIP7maxiSVFN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE16__on_zero_sharedEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 16|0);
 $2 = ((($0)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 __THREW__ = 0;
 invoke_vii(98,($1|0),($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch_3(0|0)|0;
  $7 = (getTempRet0() | 0);
  ___clang_call_terminate($6);
  // unreachable;
 } else {
  __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiSVFEEE11val_deleterD2Ev($1);
  return;
 }
}
function __ZNKSt3__220__shared_ptr_pointerIP7maxiSVFN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE13__get_deleterERKSt9type_info($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(32934|0);
 $5 = ((($0)) + 16|0);
 $6 = $4 ? $5 : 0;
 return ($6|0);
}
function __ZNSt3__220__shared_ptr_pointerIP7maxiSVFN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE21__on_zero_shared_weakEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZNSt3__222__compressed_pair_elemINS_17__compressed_pairIP7maxiSVFN10emscripten15smart_ptr_traitINS_10shared_ptrIS2_EEE11val_deleterEEELi0ELb0EED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__217__compressed_pairIP7maxiSVFN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEED2Ev($0);
 return;
}
function __ZN10emscripten8internal11LightTypeIDINSt3__210shared_ptrI7maxiSVFEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (21368|0);
}
function __ZN10emscripten8internal14getLightTypeIDI7maxiSVFEEPKvRKT_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (21344|0);
}
function __ZN10emscripten8internal11LightTypeIDIPK7maxiSVFE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (21392|0);
}
function __ZN10emscripten8internal11LightTypeIDIP7maxiSVFE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (21328|0);
}
function __ZN10emscripten8internal11LightTypeIDI7maxiSVFE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (21344|0);
}
function __ZN10emscripten8internal11BindingTypeIP13maxiDCBlockerE12fromWireTypeES3_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJdNS0_17AllowedRawPointerI13maxiDCBlockerEEddEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (13216|0);
}
function __ZNSt3__210shared_ptrI13maxiDCBlockerE11make_sharedIJEEES2_DpOT_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = (__Znwm(32)|0);
 $2 = ((($1)) + 4|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($1)) + 8|0);
 HEAP32[$3>>2] = 0;
 HEAP32[$1>>2] = (25264);
 $4 = ((($1)) + 16|0);
 __ZN13maxiDCBlockerC2Ev($4);
 $5 = ((($0)) + 4|0);
 HEAP32[$0>>2] = $4;
 HEAP32[$5>>2] = $1;
 HEAP32[$vararg_buffer>>2] = $4;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $4;
 __ZNSt3__210shared_ptrI13maxiDCBlockerE18__enable_weak_thisEz($0,$vararg_buffer);
 STACKTOP = sp;return;
}
function __ZN13maxiDCBlockerC2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;HEAP32[$0+12>>2]=0|0;
 return;
}
function __ZNSt3__210shared_ptrI13maxiDCBlockerE18__enable_weak_thisEz($0,$varargs) {
 $0 = $0|0;
 $varargs = $varargs|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__220__shared_ptr_emplaceI13maxiDCBlockerNS_9allocatorIS1_EEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__214__shared_countD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__220__shared_ptr_emplaceI13maxiDCBlockerNS_9allocatorIS1_EEE16__on_zero_sharedEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__220__shared_ptr_emplaceI13maxiDCBlockerNS_9allocatorIS1_EEE21__on_zero_shared_weakEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZN10emscripten8internal18GenericBindingTypeINSt3__210shared_ptrI13maxiDCBlockerEEE10toWireTypeEOS5_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $2 = HEAP32[$0>>2]|0;
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 4|0);
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$3>>2] = $5;
 HEAP32[$0>>2] = 0;
 HEAP32[$4>>2] = 0;
 return ($1|0);
}
function __ZNSt3__210shared_ptrI13maxiDCBlockerED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  return;
 }
 $4 = ((($2)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + -1)|0;
 HEAP32[$4>>2] = $6;
 $7 = ($5|0)==(0);
 if (!($7)) {
  return;
 }
 $8 = HEAP32[$2>>2]|0;
 $9 = ((($8)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 FUNCTION_TABLE_vi[$10 & 511]($2);
 __ZNSt3__219__shared_weak_count14__release_weakEv($2);
 return;
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNSt3__210shared_ptrI13maxiDCBlockerEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (25284|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI13maxiDCBlockerEEE11val_deleterC2ENS_3valE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valC2IRS0_EEOT_($0,$1);
 return;
}
function __ZNSt3__210shared_ptrI13maxiDCBlockerEC2IS1_N10emscripten15smart_ptr_traitIS2_E11val_deleterEEEPT_T0_NS_9enable_ifIXsr14is_convertibleIS9_PS1_EE5valueENS2_5__natEE4typeE($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$02$i = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $4 = sp + 16|0;
 $5 = sp + 8|0;
 HEAP32[$0>>2] = $1;
 __THREW__ = 0;
 $6 = (invoke_ii(167,20)|0);
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $25 = ___cxa_find_matching_catch_3(0|0)|0;
  $26 = (getTempRet0() | 0);
  $$1 = $25;
 } else {
  __THREW__ = 0;
  invoke_vii(99,($5|0),($2|0));
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  if ($10) {
   $27 = ___cxa_find_matching_catch_3(0|0)|0;
   $28 = (getTempRet0() | 0);
   $$0 = $27;
  } else {
   $11 = $1;
   $12 = ((($6)) + 4|0);
   HEAP32[$12>>2] = 0;
   $13 = ((($6)) + 8|0);
   HEAP32[$13>>2] = 0;
   HEAP32[$6>>2] = (25296);
   HEAP32[$4>>2] = $11;
   $14 = ((($4)) + 4|0);
   __THREW__ = 0;
   invoke_vii(100,($14|0),($5|0));
   $15 = __THREW__; __THREW__ = 0;
   $16 = $15&1;
   do {
    if ($16) {
     $20 = ___cxa_find_matching_catch_3(0|0)|0;
     $21 = (getTempRet0() | 0);
     $$02$i = $20;
    } else {
     $17 = ((($6)) + 12|0);
     __THREW__ = 0;
     invoke_vii(101,($17|0),($4|0));
     $18 = __THREW__; __THREW__ = 0;
     $19 = $18&1;
     if ($19) {
      $22 = ___cxa_find_matching_catch_3(0|0)|0;
      $23 = (getTempRet0() | 0);
      __ZNSt3__217__compressed_pairIP13maxiDCBlockerN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEED2Ev($4);
      $$02$i = $22;
      break;
     } else {
      __ZNSt3__217__compressed_pairIP13maxiDCBlockerN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEED2Ev($4);
      $24 = ((($0)) + 4|0);
      HEAP32[$24>>2] = $6;
      __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI13maxiDCBlockerEEE11val_deleterD2Ev($5);
      HEAP32[$vararg_buffer>>2] = $1;
      $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
      HEAP32[$vararg_ptr1>>2] = $1;
      __ZNSt3__210shared_ptrI13maxiDCBlockerE18__enable_weak_thisEz($0,$vararg_buffer);
      STACKTOP = sp;return;
     }
    }
   } while(0);
   __ZNSt3__214__shared_countD2Ev($6);
   __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI13maxiDCBlockerEEE11val_deleterD2Ev($5);
   $$0 = $$02$i;
  }
  __ZdlPv($6);
  $$1 = $$0;
 }
 (___cxa_begin_catch(($$1|0))|0);
 __THREW__ = 0;
 invoke_vii(102,($2|0),($1|0));
 $29 = __THREW__; __THREW__ = 0;
 $30 = $29&1;
 if (!($30)) {
  __THREW__ = 0;
  invoke_v(3);
  $31 = __THREW__; __THREW__ = 0;
 }
 $32 = ___cxa_find_matching_catch_2()|0;
 $33 = (getTempRet0() | 0);
 __THREW__ = 0;
 invoke_v(2);
 $34 = __THREW__; __THREW__ = 0;
 $35 = $34&1;
 if ($35) {
  $36 = ___cxa_find_matching_catch_3(0|0)|0;
  $37 = (getTempRet0() | 0);
  ___clang_call_terminate($36);
  // unreachable;
 } else {
  ___resumeException($32|0);
  // unreachable;
 }
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI13maxiDCBlockerEEE11val_deleterD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valD2Ev($0);
 return;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI13maxiDCBlockerEEE11val_deleterC2ERKS6_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valC2ERKS0_($0,$1);
 return;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI13maxiDCBlockerEEE11val_deleterC2EOS6_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valC2EOS0_($0,$1);
 return;
}
function __ZNSt3__217__compressed_pairIP13maxiDCBlockerN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEEC2EOS9_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = ((($0)) + 4|0);
 $4 = ((($1)) + 4|0);
 __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI13maxiDCBlockerEEE11val_deleterELi1ELb0EEC2EOS8_($3,$4);
 return;
}
function __ZNSt3__217__compressed_pairIP13maxiDCBlockerN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI13maxiDCBlockerEEE11val_deleterELi1ELb0EED2Ev($1);
 return;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI13maxiDCBlockerEEE11val_deleterclEPKv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = sp + 4|0;
 __ZNK10emscripten3valclIJEEES0_DpOT_($2,$0);
 __ZN10emscripten3valD2Ev($2);
 __ZN10emscripten3val9undefinedEv($3);
 __THREW__ = 0;
 (invoke_iii(71,($0|0),($3|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch_2()|0;
  $7 = (getTempRet0() | 0);
  __ZN10emscripten3valD2Ev($3);
  ___resumeException($6|0);
  // unreachable;
 } else {
  __ZN10emscripten3valD2Ev($3);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI13maxiDCBlockerEEE11val_deleterELi1ELb0EED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI13maxiDCBlockerEEE11val_deleterD2Ev($0);
 return;
}
function __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI13maxiDCBlockerEEE11val_deleterELi1ELb0EEC2EOS8_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI13maxiDCBlockerEEE11val_deleterC2EOS6_($0,$1);
 return;
}
function __ZNSt3__220__shared_ptr_pointerIP13maxiDCBlockerN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (25296);
 $1 = ((($0)) + 12|0);
 __ZNSt3__222__compressed_pair_elemINS_17__compressed_pairIP13maxiDCBlockerN10emscripten15smart_ptr_traitINS_10shared_ptrIS2_EEE11val_deleterEEELi0ELb0EED2Ev($1);
 __ZNSt3__214__shared_countD2Ev($0);
 return;
}
function __ZNSt3__220__shared_ptr_pointerIP13maxiDCBlockerN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__220__shared_ptr_pointerIP13maxiDCBlockerN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__220__shared_ptr_pointerIP13maxiDCBlockerN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE16__on_zero_sharedEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 16|0);
 $2 = ((($0)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 __THREW__ = 0;
 invoke_vii(102,($1|0),($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch_3(0|0)|0;
  $7 = (getTempRet0() | 0);
  ___clang_call_terminate($6);
  // unreachable;
 } else {
  __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI13maxiDCBlockerEEE11val_deleterD2Ev($1);
  return;
 }
}
function __ZNKSt3__220__shared_ptr_pointerIP13maxiDCBlockerN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE13__get_deleterERKSt9type_info($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(33288|0);
 $5 = ((($0)) + 16|0);
 $6 = $4 ? $5 : 0;
 return ($6|0);
}
function __ZNSt3__220__shared_ptr_pointerIP13maxiDCBlockerN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE21__on_zero_shared_weakEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZNSt3__222__compressed_pair_elemINS_17__compressed_pairIP13maxiDCBlockerN10emscripten15smart_ptr_traitINS_10shared_ptrIS2_EEE11val_deleterEEELi0ELb0EED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__217__compressed_pairIP13maxiDCBlockerN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEED2Ev($0);
 return;
}
function __ZN10emscripten8internal11LightTypeIDINSt3__210shared_ptrI13maxiDCBlockerEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (21448|0);
}
function __ZN10emscripten8internal14getLightTypeIDI13maxiDCBlockerEEPKvRKT_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (21424|0);
}
function __ZN10emscripten8internal11LightTypeIDIPK13maxiDCBlockerE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (21472|0);
}
function __ZN10emscripten8internal11LightTypeIDIP13maxiDCBlockerE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (21408|0);
}
function __ZN10emscripten8internal11LightTypeIDI13maxiDCBlockerE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (21424|0);
}
function __ZN10emscripten8internal11BindingTypeIP10maxiChorusE12fromWireTypeES3_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal11BindingTypeIjE12fromWireTypeEj($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJdNS0_17AllowedRawPointerI10maxiChorusEEdjdddEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (13232|0);
}
function __ZNSt3__210shared_ptrI10maxiChorusE11make_sharedIJEEES2_DpOT_($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = (__Znwm(1411584)|0);
 $2 = ((($1)) + 4|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($1)) + 8|0);
 HEAP32[$3>>2] = 0;
 HEAP32[$1>>2] = (25324);
 $4 = ((($1)) + 16|0);
 _memset(($4|0),0,1411568)|0;
 __THREW__ = 0;
 invoke_vi(302,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $9 = ___cxa_find_matching_catch_2()|0;
  $10 = (getTempRet0() | 0);
  __ZNSt3__214__shared_countD2Ev($1);
  __ZdlPv($1);
  ___resumeException($9|0);
  // unreachable;
 } else {
  $7 = ((($0)) + 4|0);
  $8 = ((($1)) + 16|0);
  HEAP32[$0>>2] = $8;
  HEAP32[$7>>2] = $1;
  HEAP32[$vararg_buffer>>2] = $8;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $8;
  __ZNSt3__210shared_ptrI10maxiChorusE18__enable_weak_thisEz($0,$vararg_buffer);
  STACKTOP = sp;return;
 }
}
function __ZN10maxiChorusC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN13maxiDelaylineC2Ev($0);
 $1 = ((($0)) + 705640|0);
 __ZN13maxiDelaylineC2Ev($1);
 $2 = ((($0)) + 1411280|0);
 __ZN7maxiOscC2Ev($2);
 $3 = ((($0)) + 1411328|0);
 __ZN10maxiFilterC2Ev($3);
 return;
}
function __ZNSt3__210shared_ptrI10maxiChorusE18__enable_weak_thisEz($0,$varargs) {
 $0 = $0|0;
 $varargs = $varargs|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10maxiFilterC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 192|0);
 ;HEAP32[$1>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;HEAP32[$1+12>>2]=0|0;HEAP32[$1+16>>2]=0|0;HEAP32[$1+20>>2]=0|0;HEAP32[$1+24>>2]=0|0;HEAP32[$1+28>>2]=0|0;
 return;
}
function __ZNSt3__220__shared_ptr_emplaceI10maxiChorusNS_9allocatorIS1_EEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__214__shared_countD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__220__shared_ptr_emplaceI10maxiChorusNS_9allocatorIS1_EEE16__on_zero_sharedEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__220__shared_ptr_emplaceI10maxiChorusNS_9allocatorIS1_EEE21__on_zero_shared_weakEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZN10emscripten8internal18GenericBindingTypeINSt3__210shared_ptrI10maxiChorusEEE10toWireTypeEOS5_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $2 = HEAP32[$0>>2]|0;
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 4|0);
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$3>>2] = $5;
 HEAP32[$0>>2] = 0;
 HEAP32[$4>>2] = 0;
 return ($1|0);
}
function __ZNSt3__210shared_ptrI10maxiChorusED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  return;
 }
 $4 = ((($2)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + -1)|0;
 HEAP32[$4>>2] = $6;
 $7 = ($5|0)==(0);
 if (!($7)) {
  return;
 }
 $8 = HEAP32[$2>>2]|0;
 $9 = ((($8)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 FUNCTION_TABLE_vi[$10 & 511]($2);
 __ZNSt3__219__shared_weak_count14__release_weakEv($2);
 return;
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNSt3__210shared_ptrI10maxiChorusEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (25344|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiChorusEEE11val_deleterC2ENS_3valE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valC2IRS0_EEOT_($0,$1);
 return;
}
function __ZNSt3__210shared_ptrI10maxiChorusEC2IS1_N10emscripten15smart_ptr_traitIS2_E11val_deleterEEEPT_T0_NS_9enable_ifIXsr14is_convertibleIS9_PS1_EE5valueENS2_5__natEE4typeE($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$02$i = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $4 = sp + 16|0;
 $5 = sp + 8|0;
 HEAP32[$0>>2] = $1;
 __THREW__ = 0;
 $6 = (invoke_ii(167,20)|0);
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $25 = ___cxa_find_matching_catch_3(0|0)|0;
  $26 = (getTempRet0() | 0);
  $$1 = $25;
 } else {
  __THREW__ = 0;
  invoke_vii(103,($5|0),($2|0));
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  if ($10) {
   $27 = ___cxa_find_matching_catch_3(0|0)|0;
   $28 = (getTempRet0() | 0);
   $$0 = $27;
  } else {
   $11 = $1;
   $12 = ((($6)) + 4|0);
   HEAP32[$12>>2] = 0;
   $13 = ((($6)) + 8|0);
   HEAP32[$13>>2] = 0;
   HEAP32[$6>>2] = (25356);
   HEAP32[$4>>2] = $11;
   $14 = ((($4)) + 4|0);
   __THREW__ = 0;
   invoke_vii(104,($14|0),($5|0));
   $15 = __THREW__; __THREW__ = 0;
   $16 = $15&1;
   do {
    if ($16) {
     $20 = ___cxa_find_matching_catch_3(0|0)|0;
     $21 = (getTempRet0() | 0);
     $$02$i = $20;
    } else {
     $17 = ((($6)) + 12|0);
     __THREW__ = 0;
     invoke_vii(105,($17|0),($4|0));
     $18 = __THREW__; __THREW__ = 0;
     $19 = $18&1;
     if ($19) {
      $22 = ___cxa_find_matching_catch_3(0|0)|0;
      $23 = (getTempRet0() | 0);
      __ZNSt3__217__compressed_pairIP10maxiChorusN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEED2Ev($4);
      $$02$i = $22;
      break;
     } else {
      __ZNSt3__217__compressed_pairIP10maxiChorusN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEED2Ev($4);
      $24 = ((($0)) + 4|0);
      HEAP32[$24>>2] = $6;
      __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiChorusEEE11val_deleterD2Ev($5);
      HEAP32[$vararg_buffer>>2] = $1;
      $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
      HEAP32[$vararg_ptr1>>2] = $1;
      __ZNSt3__210shared_ptrI10maxiChorusE18__enable_weak_thisEz($0,$vararg_buffer);
      STACKTOP = sp;return;
     }
    }
   } while(0);
   __ZNSt3__214__shared_countD2Ev($6);
   __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiChorusEEE11val_deleterD2Ev($5);
   $$0 = $$02$i;
  }
  __ZdlPv($6);
  $$1 = $$0;
 }
 (___cxa_begin_catch(($$1|0))|0);
 __THREW__ = 0;
 invoke_vii(106,($2|0),($1|0));
 $29 = __THREW__; __THREW__ = 0;
 $30 = $29&1;
 if (!($30)) {
  __THREW__ = 0;
  invoke_v(3);
  $31 = __THREW__; __THREW__ = 0;
 }
 $32 = ___cxa_find_matching_catch_2()|0;
 $33 = (getTempRet0() | 0);
 __THREW__ = 0;
 invoke_v(2);
 $34 = __THREW__; __THREW__ = 0;
 $35 = $34&1;
 if ($35) {
  $36 = ___cxa_find_matching_catch_3(0|0)|0;
  $37 = (getTempRet0() | 0);
  ___clang_call_terminate($36);
  // unreachable;
 } else {
  ___resumeException($32|0);
  // unreachable;
 }
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiChorusEEE11val_deleterD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valD2Ev($0);
 return;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiChorusEEE11val_deleterC2ERKS6_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valC2ERKS0_($0,$1);
 return;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiChorusEEE11val_deleterC2EOS6_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valC2EOS0_($0,$1);
 return;
}
function __ZNSt3__217__compressed_pairIP10maxiChorusN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEEC2EOS9_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = ((($0)) + 4|0);
 $4 = ((($1)) + 4|0);
 __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI10maxiChorusEEE11val_deleterELi1ELb0EEC2EOS8_($3,$4);
 return;
}
function __ZNSt3__217__compressed_pairIP10maxiChorusN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI10maxiChorusEEE11val_deleterELi1ELb0EED2Ev($1);
 return;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiChorusEEE11val_deleterclEPKv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = sp + 4|0;
 __ZNK10emscripten3valclIJEEES0_DpOT_($2,$0);
 __ZN10emscripten3valD2Ev($2);
 __ZN10emscripten3val9undefinedEv($3);
 __THREW__ = 0;
 (invoke_iii(71,($0|0),($3|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch_2()|0;
  $7 = (getTempRet0() | 0);
  __ZN10emscripten3valD2Ev($3);
  ___resumeException($6|0);
  // unreachable;
 } else {
  __ZN10emscripten3valD2Ev($3);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI10maxiChorusEEE11val_deleterELi1ELb0EED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiChorusEEE11val_deleterD2Ev($0);
 return;
}
function __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI10maxiChorusEEE11val_deleterELi1ELb0EEC2EOS8_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiChorusEEE11val_deleterC2EOS6_($0,$1);
 return;
}
function __ZNSt3__220__shared_ptr_pointerIP10maxiChorusN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (25356);
 $1 = ((($0)) + 12|0);
 __ZNSt3__222__compressed_pair_elemINS_17__compressed_pairIP10maxiChorusN10emscripten15smart_ptr_traitINS_10shared_ptrIS2_EEE11val_deleterEEELi0ELb0EED2Ev($1);
 __ZNSt3__214__shared_countD2Ev($0);
 return;
}
function __ZNSt3__220__shared_ptr_pointerIP10maxiChorusN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__220__shared_ptr_pointerIP10maxiChorusN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__220__shared_ptr_pointerIP10maxiChorusN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE16__on_zero_sharedEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 16|0);
 $2 = ((($0)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 __THREW__ = 0;
 invoke_vii(106,($1|0),($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch_3(0|0)|0;
  $7 = (getTempRet0() | 0);
  ___clang_call_terminate($6);
  // unreachable;
 } else {
  __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiChorusEEE11val_deleterD2Ev($1);
  return;
 }
}
function __ZNKSt3__220__shared_ptr_pointerIP10maxiChorusN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE13__get_deleterERKSt9type_info($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(33651|0);
 $5 = ((($0)) + 16|0);
 $6 = $4 ? $5 : 0;
 return ($6|0);
}
function __ZNSt3__220__shared_ptr_pointerIP10maxiChorusN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE21__on_zero_shared_weakEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZNSt3__222__compressed_pair_elemINS_17__compressed_pairIP10maxiChorusN10emscripten15smart_ptr_traitINS_10shared_ptrIS2_EEE11val_deleterEEELi0ELb0EED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__217__compressed_pairIP10maxiChorusN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEED2Ev($0);
 return;
}
function __ZN10emscripten8internal11LightTypeIDINSt3__210shared_ptrI10maxiChorusEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (21528|0);
}
function __ZN10emscripten8internal14getLightTypeIDI10maxiChorusEEPKvRKT_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (21504|0);
}
function __ZN10emscripten8internal11LightTypeIDIPK10maxiChorusE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (21552|0);
}
function __ZN10emscripten8internal11LightTypeIDIP10maxiChorusE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (21488|0);
}
function __ZN10emscripten8internal11LightTypeIDI10maxiChorusE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (21504|0);
}
function __ZN10emscripten8internal11BindingTypeIP11maxiFlangerE12fromWireTypeES3_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJdNS0_17AllowedRawPointerI11maxiFlangerEEdjdddEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (13264|0);
}
function __ZNSt3__210shared_ptrI11maxiFlangerE11make_sharedIJEEES2_DpOT_($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = (__Znwm(705704)|0);
 $2 = ((($1)) + 4|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($1)) + 8|0);
 HEAP32[$3>>2] = 0;
 HEAP32[$1>>2] = (25384);
 $4 = ((($1)) + 16|0);
 _memset(($4|0),0,705688)|0;
 __THREW__ = 0;
 invoke_vi(303,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $9 = ___cxa_find_matching_catch_2()|0;
  $10 = (getTempRet0() | 0);
  __ZNSt3__214__shared_countD2Ev($1);
  __ZdlPv($1);
  ___resumeException($9|0);
  // unreachable;
 } else {
  $7 = ((($0)) + 4|0);
  $8 = ((($1)) + 16|0);
  HEAP32[$0>>2] = $8;
  HEAP32[$7>>2] = $1;
  HEAP32[$vararg_buffer>>2] = $8;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $8;
  __ZNSt3__210shared_ptrI11maxiFlangerE18__enable_weak_thisEz($0,$vararg_buffer);
  STACKTOP = sp;return;
 }
}
function __ZN11maxiFlangerC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN13maxiDelaylineC2Ev($0);
 $1 = ((($0)) + 705640|0);
 __ZN7maxiOscC2Ev($1);
 return;
}
function __ZNSt3__210shared_ptrI11maxiFlangerE18__enable_weak_thisEz($0,$varargs) {
 $0 = $0|0;
 $varargs = $varargs|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__220__shared_ptr_emplaceI11maxiFlangerNS_9allocatorIS1_EEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__214__shared_countD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__220__shared_ptr_emplaceI11maxiFlangerNS_9allocatorIS1_EEE16__on_zero_sharedEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__220__shared_ptr_emplaceI11maxiFlangerNS_9allocatorIS1_EEE21__on_zero_shared_weakEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZN10emscripten8internal18GenericBindingTypeINSt3__210shared_ptrI11maxiFlangerEEE10toWireTypeEOS5_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $2 = HEAP32[$0>>2]|0;
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 4|0);
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$3>>2] = $5;
 HEAP32[$0>>2] = 0;
 HEAP32[$4>>2] = 0;
 return ($1|0);
}
function __ZNSt3__210shared_ptrI11maxiFlangerED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  return;
 }
 $4 = ((($2)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + -1)|0;
 HEAP32[$4>>2] = $6;
 $7 = ($5|0)==(0);
 if (!($7)) {
  return;
 }
 $8 = HEAP32[$2>>2]|0;
 $9 = ((($8)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 FUNCTION_TABLE_vi[$10 & 511]($2);
 __ZNSt3__219__shared_weak_count14__release_weakEv($2);
 return;
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNSt3__210shared_ptrI11maxiFlangerEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (25404|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI11maxiFlangerEEE11val_deleterC2ENS_3valE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valC2IRS0_EEOT_($0,$1);
 return;
}
function __ZNSt3__210shared_ptrI11maxiFlangerEC2IS1_N10emscripten15smart_ptr_traitIS2_E11val_deleterEEEPT_T0_NS_9enable_ifIXsr14is_convertibleIS9_PS1_EE5valueENS2_5__natEE4typeE($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$02$i = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $4 = sp + 16|0;
 $5 = sp + 8|0;
 HEAP32[$0>>2] = $1;
 __THREW__ = 0;
 $6 = (invoke_ii(167,20)|0);
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $25 = ___cxa_find_matching_catch_3(0|0)|0;
  $26 = (getTempRet0() | 0);
  $$1 = $25;
 } else {
  __THREW__ = 0;
  invoke_vii(107,($5|0),($2|0));
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  if ($10) {
   $27 = ___cxa_find_matching_catch_3(0|0)|0;
   $28 = (getTempRet0() | 0);
   $$0 = $27;
  } else {
   $11 = $1;
   $12 = ((($6)) + 4|0);
   HEAP32[$12>>2] = 0;
   $13 = ((($6)) + 8|0);
   HEAP32[$13>>2] = 0;
   HEAP32[$6>>2] = (25416);
   HEAP32[$4>>2] = $11;
   $14 = ((($4)) + 4|0);
   __THREW__ = 0;
   invoke_vii(108,($14|0),($5|0));
   $15 = __THREW__; __THREW__ = 0;
   $16 = $15&1;
   do {
    if ($16) {
     $20 = ___cxa_find_matching_catch_3(0|0)|0;
     $21 = (getTempRet0() | 0);
     $$02$i = $20;
    } else {
     $17 = ((($6)) + 12|0);
     __THREW__ = 0;
     invoke_vii(109,($17|0),($4|0));
     $18 = __THREW__; __THREW__ = 0;
     $19 = $18&1;
     if ($19) {
      $22 = ___cxa_find_matching_catch_3(0|0)|0;
      $23 = (getTempRet0() | 0);
      __ZNSt3__217__compressed_pairIP11maxiFlangerN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEED2Ev($4);
      $$02$i = $22;
      break;
     } else {
      __ZNSt3__217__compressed_pairIP11maxiFlangerN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEED2Ev($4);
      $24 = ((($0)) + 4|0);
      HEAP32[$24>>2] = $6;
      __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI11maxiFlangerEEE11val_deleterD2Ev($5);
      HEAP32[$vararg_buffer>>2] = $1;
      $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
      HEAP32[$vararg_ptr1>>2] = $1;
      __ZNSt3__210shared_ptrI11maxiFlangerE18__enable_weak_thisEz($0,$vararg_buffer);
      STACKTOP = sp;return;
     }
    }
   } while(0);
   __ZNSt3__214__shared_countD2Ev($6);
   __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI11maxiFlangerEEE11val_deleterD2Ev($5);
   $$0 = $$02$i;
  }
  __ZdlPv($6);
  $$1 = $$0;
 }
 (___cxa_begin_catch(($$1|0))|0);
 __THREW__ = 0;
 invoke_vii(110,($2|0),($1|0));
 $29 = __THREW__; __THREW__ = 0;
 $30 = $29&1;
 if (!($30)) {
  __THREW__ = 0;
  invoke_v(3);
  $31 = __THREW__; __THREW__ = 0;
 }
 $32 = ___cxa_find_matching_catch_2()|0;
 $33 = (getTempRet0() | 0);
 __THREW__ = 0;
 invoke_v(2);
 $34 = __THREW__; __THREW__ = 0;
 $35 = $34&1;
 if ($35) {
  $36 = ___cxa_find_matching_catch_3(0|0)|0;
  $37 = (getTempRet0() | 0);
  ___clang_call_terminate($36);
  // unreachable;
 } else {
  ___resumeException($32|0);
  // unreachable;
 }
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI11maxiFlangerEEE11val_deleterD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valD2Ev($0);
 return;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI11maxiFlangerEEE11val_deleterC2ERKS6_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valC2ERKS0_($0,$1);
 return;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI11maxiFlangerEEE11val_deleterC2EOS6_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valC2EOS0_($0,$1);
 return;
}
function __ZNSt3__217__compressed_pairIP11maxiFlangerN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEEC2EOS9_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = ((($0)) + 4|0);
 $4 = ((($1)) + 4|0);
 __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI11maxiFlangerEEE11val_deleterELi1ELb0EEC2EOS8_($3,$4);
 return;
}
function __ZNSt3__217__compressed_pairIP11maxiFlangerN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI11maxiFlangerEEE11val_deleterELi1ELb0EED2Ev($1);
 return;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI11maxiFlangerEEE11val_deleterclEPKv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = sp + 4|0;
 __ZNK10emscripten3valclIJEEES0_DpOT_($2,$0);
 __ZN10emscripten3valD2Ev($2);
 __ZN10emscripten3val9undefinedEv($3);
 __THREW__ = 0;
 (invoke_iii(71,($0|0),($3|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch_2()|0;
  $7 = (getTempRet0() | 0);
  __ZN10emscripten3valD2Ev($3);
  ___resumeException($6|0);
  // unreachable;
 } else {
  __ZN10emscripten3valD2Ev($3);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI11maxiFlangerEEE11val_deleterELi1ELb0EED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI11maxiFlangerEEE11val_deleterD2Ev($0);
 return;
}
function __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI11maxiFlangerEEE11val_deleterELi1ELb0EEC2EOS8_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI11maxiFlangerEEE11val_deleterC2EOS6_($0,$1);
 return;
}
function __ZNSt3__220__shared_ptr_pointerIP11maxiFlangerN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (25416);
 $1 = ((($0)) + 12|0);
 __ZNSt3__222__compressed_pair_elemINS_17__compressed_pairIP11maxiFlangerN10emscripten15smart_ptr_traitINS_10shared_ptrIS2_EEE11val_deleterEEELi0ELb0EED2Ev($1);
 __ZNSt3__214__shared_countD2Ev($0);
 return;
}
function __ZNSt3__220__shared_ptr_pointerIP11maxiFlangerN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__220__shared_ptr_pointerIP11maxiFlangerN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__220__shared_ptr_pointerIP11maxiFlangerN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE16__on_zero_sharedEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 16|0);
 $2 = ((($0)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 __THREW__ = 0;
 invoke_vii(110,($1|0),($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch_3(0|0)|0;
  $7 = (getTempRet0() | 0);
  ___clang_call_terminate($6);
  // unreachable;
 } else {
  __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI11maxiFlangerEEE11val_deleterD2Ev($1);
  return;
 }
}
function __ZNKSt3__220__shared_ptr_pointerIP11maxiFlangerN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE13__get_deleterERKSt9type_info($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(34018|0);
 $5 = ((($0)) + 16|0);
 $6 = $4 ? $5 : 0;
 return ($6|0);
}
function __ZNSt3__220__shared_ptr_pointerIP11maxiFlangerN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE21__on_zero_shared_weakEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZNSt3__222__compressed_pair_elemINS_17__compressed_pairIP11maxiFlangerN10emscripten15smart_ptr_traitINS_10shared_ptrIS2_EEE11val_deleterEEELi0ELb0EED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__217__compressed_pairIP11maxiFlangerN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEED2Ev($0);
 return;
}
function __ZN10emscripten8internal11LightTypeIDINSt3__210shared_ptrI11maxiFlangerEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (21608|0);
}
function __ZN10emscripten8internal14getLightTypeIDI11maxiFlangerEEPKvRKT_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (21584|0);
}
function __ZN10emscripten8internal11LightTypeIDIPK11maxiFlangerE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (21632|0);
}
function __ZN10emscripten8internal11LightTypeIDIP11maxiFlangerE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (21568|0);
}
function __ZN10emscripten8internal11LightTypeIDI11maxiFlangerE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (21584|0);
}
function __ZN10emscripten8internal11BindingTypeIP14maxiDistortionE12fromWireTypeES3_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJdNS0_17AllowedRawPointerI14maxiDistortionEEddEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (13296|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJdNS0_17AllowedRawPointerI14maxiDistortionEEdEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (25436|0);
}
function __ZNSt3__210shared_ptrI14maxiDistortionE11make_sharedIJEEES2_DpOT_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = (__Znwm(16)|0);
 $2 = ((($1)) + 4|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($1)) + 8|0);
 HEAP32[$3>>2] = 0;
 HEAP32[$1>>2] = (25456);
 $4 = ((($0)) + 4|0);
 $5 = ((($1)) + 12|0);
 HEAP32[$0>>2] = $5;
 HEAP32[$4>>2] = $1;
 HEAP32[$vararg_buffer>>2] = $5;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $5;
 __ZNSt3__210shared_ptrI14maxiDistortionE18__enable_weak_thisEz($0,$vararg_buffer);
 STACKTOP = sp;return;
}
function __ZNSt3__210shared_ptrI14maxiDistortionE18__enable_weak_thisEz($0,$varargs) {
 $0 = $0|0;
 $varargs = $varargs|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__220__shared_ptr_emplaceI14maxiDistortionNS_9allocatorIS1_EEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__214__shared_countD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__220__shared_ptr_emplaceI14maxiDistortionNS_9allocatorIS1_EEE16__on_zero_sharedEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__220__shared_ptr_emplaceI14maxiDistortionNS_9allocatorIS1_EEE21__on_zero_shared_weakEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZN10emscripten8internal18GenericBindingTypeINSt3__210shared_ptrI14maxiDistortionEEE10toWireTypeEOS5_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $2 = HEAP32[$0>>2]|0;
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 4|0);
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$3>>2] = $5;
 HEAP32[$0>>2] = 0;
 HEAP32[$4>>2] = 0;
 return ($1|0);
}
function __ZNSt3__210shared_ptrI14maxiDistortionED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  return;
 }
 $4 = ((($2)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + -1)|0;
 HEAP32[$4>>2] = $6;
 $7 = ($5|0)==(0);
 if (!($7)) {
  return;
 }
 $8 = HEAP32[$2>>2]|0;
 $9 = ((($8)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 FUNCTION_TABLE_vi[$10 & 511]($2);
 __ZNSt3__219__shared_weak_count14__release_weakEv($2);
 return;
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNSt3__210shared_ptrI14maxiDistortionEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (25476|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI14maxiDistortionEEE11val_deleterC2ENS_3valE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valC2IRS0_EEOT_($0,$1);
 return;
}
function __ZNSt3__210shared_ptrI14maxiDistortionEC2IS1_N10emscripten15smart_ptr_traitIS2_E11val_deleterEEEPT_T0_NS_9enable_ifIXsr14is_convertibleIS9_PS1_EE5valueENS2_5__natEE4typeE($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$02$i = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $4 = sp + 16|0;
 $5 = sp + 8|0;
 HEAP32[$0>>2] = $1;
 __THREW__ = 0;
 $6 = (invoke_ii(167,20)|0);
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $25 = ___cxa_find_matching_catch_3(0|0)|0;
  $26 = (getTempRet0() | 0);
  $$1 = $25;
 } else {
  __THREW__ = 0;
  invoke_vii(111,($5|0),($2|0));
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  if ($10) {
   $27 = ___cxa_find_matching_catch_3(0|0)|0;
   $28 = (getTempRet0() | 0);
   $$0 = $27;
  } else {
   $11 = $1;
   $12 = ((($6)) + 4|0);
   HEAP32[$12>>2] = 0;
   $13 = ((($6)) + 8|0);
   HEAP32[$13>>2] = 0;
   HEAP32[$6>>2] = (25488);
   HEAP32[$4>>2] = $11;
   $14 = ((($4)) + 4|0);
   __THREW__ = 0;
   invoke_vii(112,($14|0),($5|0));
   $15 = __THREW__; __THREW__ = 0;
   $16 = $15&1;
   do {
    if ($16) {
     $20 = ___cxa_find_matching_catch_3(0|0)|0;
     $21 = (getTempRet0() | 0);
     $$02$i = $20;
    } else {
     $17 = ((($6)) + 12|0);
     __THREW__ = 0;
     invoke_vii(113,($17|0),($4|0));
     $18 = __THREW__; __THREW__ = 0;
     $19 = $18&1;
     if ($19) {
      $22 = ___cxa_find_matching_catch_3(0|0)|0;
      $23 = (getTempRet0() | 0);
      __ZNSt3__217__compressed_pairIP14maxiDistortionN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEED2Ev($4);
      $$02$i = $22;
      break;
     } else {
      __ZNSt3__217__compressed_pairIP14maxiDistortionN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEED2Ev($4);
      $24 = ((($0)) + 4|0);
      HEAP32[$24>>2] = $6;
      __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI14maxiDistortionEEE11val_deleterD2Ev($5);
      HEAP32[$vararg_buffer>>2] = $1;
      $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
      HEAP32[$vararg_ptr1>>2] = $1;
      __ZNSt3__210shared_ptrI14maxiDistortionE18__enable_weak_thisEz($0,$vararg_buffer);
      STACKTOP = sp;return;
     }
    }
   } while(0);
   __ZNSt3__214__shared_countD2Ev($6);
   __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI14maxiDistortionEEE11val_deleterD2Ev($5);
   $$0 = $$02$i;
  }
  __ZdlPv($6);
  $$1 = $$0;
 }
 (___cxa_begin_catch(($$1|0))|0);
 __THREW__ = 0;
 invoke_vii(114,($2|0),($1|0));
 $29 = __THREW__; __THREW__ = 0;
 $30 = $29&1;
 if (!($30)) {
  __THREW__ = 0;
  invoke_v(3);
  $31 = __THREW__; __THREW__ = 0;
 }
 $32 = ___cxa_find_matching_catch_2()|0;
 $33 = (getTempRet0() | 0);
 __THREW__ = 0;
 invoke_v(2);
 $34 = __THREW__; __THREW__ = 0;
 $35 = $34&1;
 if ($35) {
  $36 = ___cxa_find_matching_catch_3(0|0)|0;
  $37 = (getTempRet0() | 0);
  ___clang_call_terminate($36);
  // unreachable;
 } else {
  ___resumeException($32|0);
  // unreachable;
 }
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI14maxiDistortionEEE11val_deleterD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valD2Ev($0);
 return;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI14maxiDistortionEEE11val_deleterC2ERKS6_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valC2ERKS0_($0,$1);
 return;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI14maxiDistortionEEE11val_deleterC2EOS6_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valC2EOS0_($0,$1);
 return;
}
function __ZNSt3__217__compressed_pairIP14maxiDistortionN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEEC2EOS9_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = ((($0)) + 4|0);
 $4 = ((($1)) + 4|0);
 __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI14maxiDistortionEEE11val_deleterELi1ELb0EEC2EOS8_($3,$4);
 return;
}
function __ZNSt3__217__compressed_pairIP14maxiDistortionN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI14maxiDistortionEEE11val_deleterELi1ELb0EED2Ev($1);
 return;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI14maxiDistortionEEE11val_deleterclEPKv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = sp + 4|0;
 __ZNK10emscripten3valclIJEEES0_DpOT_($2,$0);
 __ZN10emscripten3valD2Ev($2);
 __ZN10emscripten3val9undefinedEv($3);
 __THREW__ = 0;
 (invoke_iii(71,($0|0),($3|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch_2()|0;
  $7 = (getTempRet0() | 0);
  __ZN10emscripten3valD2Ev($3);
  ___resumeException($6|0);
  // unreachable;
 } else {
  __ZN10emscripten3valD2Ev($3);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI14maxiDistortionEEE11val_deleterELi1ELb0EED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI14maxiDistortionEEE11val_deleterD2Ev($0);
 return;
}
function __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI14maxiDistortionEEE11val_deleterELi1ELb0EEC2EOS8_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI14maxiDistortionEEE11val_deleterC2EOS6_($0,$1);
 return;
}
function __ZNSt3__220__shared_ptr_pointerIP14maxiDistortionN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (25488);
 $1 = ((($0)) + 12|0);
 __ZNSt3__222__compressed_pair_elemINS_17__compressed_pairIP14maxiDistortionN10emscripten15smart_ptr_traitINS_10shared_ptrIS2_EEE11val_deleterEEELi0ELb0EED2Ev($1);
 __ZNSt3__214__shared_countD2Ev($0);
 return;
}
function __ZNSt3__220__shared_ptr_pointerIP14maxiDistortionN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__220__shared_ptr_pointerIP14maxiDistortionN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__220__shared_ptr_pointerIP14maxiDistortionN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE16__on_zero_sharedEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 16|0);
 $2 = ((($0)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 __THREW__ = 0;
 invoke_vii(114,($1|0),($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch_3(0|0)|0;
  $7 = (getTempRet0() | 0);
  ___clang_call_terminate($6);
  // unreachable;
 } else {
  __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI14maxiDistortionEEE11val_deleterD2Ev($1);
  return;
 }
}
function __ZNKSt3__220__shared_ptr_pointerIP14maxiDistortionN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE13__get_deleterERKSt9type_info($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(34391|0);
 $5 = ((($0)) + 16|0);
 $6 = $4 ? $5 : 0;
 return ($6|0);
}
function __ZNSt3__220__shared_ptr_pointerIP14maxiDistortionN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE21__on_zero_shared_weakEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZNSt3__222__compressed_pair_elemINS_17__compressed_pairIP14maxiDistortionN10emscripten15smart_ptr_traitINS_10shared_ptrIS2_EEE11val_deleterEEELi0ELb0EED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__217__compressed_pairIP14maxiDistortionN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEED2Ev($0);
 return;
}
function __ZN10emscripten8internal11LightTypeIDINSt3__210shared_ptrI14maxiDistortionEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (21688|0);
}
function __ZN10emscripten8internal14getLightTypeIDI14maxiDistortionEEPKvRKT_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (21664|0);
}
function __ZN10emscripten8internal11LightTypeIDIPK14maxiDistortionE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (21712|0);
}
function __ZN10emscripten8internal11LightTypeIDIP14maxiDistortionE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (21648|0);
}
function __ZN10emscripten8internal11LightTypeIDI14maxiDistortionE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (21664|0);
}
function __ZN10emscripten8internal11BindingTypeIP7convertE12fromWireTypeES3_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJdNS0_17AllowedRawPointerI7convertEEiEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (25508|0);
}
function __ZNSt3__210shared_ptrI7convertE11make_sharedIJEEES2_DpOT_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = (__Znwm(16)|0);
 $2 = ((($1)) + 4|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($1)) + 8|0);
 HEAP32[$3>>2] = 0;
 HEAP32[$1>>2] = (25528);
 $4 = ((($0)) + 4|0);
 $5 = ((($1)) + 12|0);
 HEAP32[$0>>2] = $5;
 HEAP32[$4>>2] = $1;
 HEAP32[$vararg_buffer>>2] = $5;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $5;
 __ZNSt3__210shared_ptrI7convertE18__enable_weak_thisEz($0,$vararg_buffer);
 STACKTOP = sp;return;
}
function __ZNSt3__210shared_ptrI7convertE18__enable_weak_thisEz($0,$varargs) {
 $0 = $0|0;
 $varargs = $varargs|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__220__shared_ptr_emplaceI7convertNS_9allocatorIS1_EEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__214__shared_countD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__220__shared_ptr_emplaceI7convertNS_9allocatorIS1_EEE16__on_zero_sharedEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__220__shared_ptr_emplaceI7convertNS_9allocatorIS1_EEE21__on_zero_shared_weakEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZN10emscripten8internal18GenericBindingTypeINSt3__210shared_ptrI7convertEEE10toWireTypeEOS5_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $2 = HEAP32[$0>>2]|0;
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 4|0);
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$3>>2] = $5;
 HEAP32[$0>>2] = 0;
 HEAP32[$4>>2] = 0;
 return ($1|0);
}
function __ZNSt3__210shared_ptrI7convertED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  return;
 }
 $4 = ((($2)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + -1)|0;
 HEAP32[$4>>2] = $6;
 $7 = ($5|0)==(0);
 if (!($7)) {
  return;
 }
 $8 = HEAP32[$2>>2]|0;
 $9 = ((($8)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 FUNCTION_TABLE_vi[$10 & 511]($2);
 __ZNSt3__219__shared_weak_count14__release_weakEv($2);
 return;
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNSt3__210shared_ptrI7convertEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (25548|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7convertEEE11val_deleterC2ENS_3valE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valC2IRS0_EEOT_($0,$1);
 return;
}
function __ZNSt3__210shared_ptrI7convertEC2IS1_N10emscripten15smart_ptr_traitIS2_E11val_deleterEEEPT_T0_NS_9enable_ifIXsr14is_convertibleIS9_PS1_EE5valueENS2_5__natEE4typeE($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$02$i = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $4 = sp + 16|0;
 $5 = sp + 8|0;
 HEAP32[$0>>2] = $1;
 __THREW__ = 0;
 $6 = (invoke_ii(167,20)|0);
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $25 = ___cxa_find_matching_catch_3(0|0)|0;
  $26 = (getTempRet0() | 0);
  $$1 = $25;
 } else {
  __THREW__ = 0;
  invoke_vii(115,($5|0),($2|0));
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  if ($10) {
   $27 = ___cxa_find_matching_catch_3(0|0)|0;
   $28 = (getTempRet0() | 0);
   $$0 = $27;
  } else {
   $11 = $1;
   $12 = ((($6)) + 4|0);
   HEAP32[$12>>2] = 0;
   $13 = ((($6)) + 8|0);
   HEAP32[$13>>2] = 0;
   HEAP32[$6>>2] = (25560);
   HEAP32[$4>>2] = $11;
   $14 = ((($4)) + 4|0);
   __THREW__ = 0;
   invoke_vii(116,($14|0),($5|0));
   $15 = __THREW__; __THREW__ = 0;
   $16 = $15&1;
   do {
    if ($16) {
     $20 = ___cxa_find_matching_catch_3(0|0)|0;
     $21 = (getTempRet0() | 0);
     $$02$i = $20;
    } else {
     $17 = ((($6)) + 12|0);
     __THREW__ = 0;
     invoke_vii(117,($17|0),($4|0));
     $18 = __THREW__; __THREW__ = 0;
     $19 = $18&1;
     if ($19) {
      $22 = ___cxa_find_matching_catch_3(0|0)|0;
      $23 = (getTempRet0() | 0);
      __ZNSt3__217__compressed_pairIP7convertN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEED2Ev($4);
      $$02$i = $22;
      break;
     } else {
      __ZNSt3__217__compressed_pairIP7convertN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEED2Ev($4);
      $24 = ((($0)) + 4|0);
      HEAP32[$24>>2] = $6;
      __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7convertEEE11val_deleterD2Ev($5);
      HEAP32[$vararg_buffer>>2] = $1;
      $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
      HEAP32[$vararg_ptr1>>2] = $1;
      __ZNSt3__210shared_ptrI7convertE18__enable_weak_thisEz($0,$vararg_buffer);
      STACKTOP = sp;return;
     }
    }
   } while(0);
   __ZNSt3__214__shared_countD2Ev($6);
   __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7convertEEE11val_deleterD2Ev($5);
   $$0 = $$02$i;
  }
  __ZdlPv($6);
  $$1 = $$0;
 }
 (___cxa_begin_catch(($$1|0))|0);
 __THREW__ = 0;
 invoke_vii(118,($2|0),($1|0));
 $29 = __THREW__; __THREW__ = 0;
 $30 = $29&1;
 if (!($30)) {
  __THREW__ = 0;
  invoke_v(3);
  $31 = __THREW__; __THREW__ = 0;
 }
 $32 = ___cxa_find_matching_catch_2()|0;
 $33 = (getTempRet0() | 0);
 __THREW__ = 0;
 invoke_v(2);
 $34 = __THREW__; __THREW__ = 0;
 $35 = $34&1;
 if ($35) {
  $36 = ___cxa_find_matching_catch_3(0|0)|0;
  $37 = (getTempRet0() | 0);
  ___clang_call_terminate($36);
  // unreachable;
 } else {
  ___resumeException($32|0);
  // unreachable;
 }
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7convertEEE11val_deleterD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valD2Ev($0);
 return;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7convertEEE11val_deleterC2ERKS6_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valC2ERKS0_($0,$1);
 return;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7convertEEE11val_deleterC2EOS6_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valC2EOS0_($0,$1);
 return;
}
function __ZNSt3__217__compressed_pairIP7convertN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEEC2EOS9_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = ((($0)) + 4|0);
 $4 = ((($1)) + 4|0);
 __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI7convertEEE11val_deleterELi1ELb0EEC2EOS8_($3,$4);
 return;
}
function __ZNSt3__217__compressed_pairIP7convertN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI7convertEEE11val_deleterELi1ELb0EED2Ev($1);
 return;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7convertEEE11val_deleterclEPKv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = sp + 4|0;
 __ZNK10emscripten3valclIJEEES0_DpOT_($2,$0);
 __ZN10emscripten3valD2Ev($2);
 __ZN10emscripten3val9undefinedEv($3);
 __THREW__ = 0;
 (invoke_iii(71,($0|0),($3|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch_2()|0;
  $7 = (getTempRet0() | 0);
  __ZN10emscripten3valD2Ev($3);
  ___resumeException($6|0);
  // unreachable;
 } else {
  __ZN10emscripten3valD2Ev($3);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI7convertEEE11val_deleterELi1ELb0EED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7convertEEE11val_deleterD2Ev($0);
 return;
}
function __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI7convertEEE11val_deleterELi1ELb0EEC2EOS8_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7convertEEE11val_deleterC2EOS6_($0,$1);
 return;
}
function __ZNSt3__220__shared_ptr_pointerIP7convertN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (25560);
 $1 = ((($0)) + 12|0);
 __ZNSt3__222__compressed_pair_elemINS_17__compressed_pairIP7convertN10emscripten15smart_ptr_traitINS_10shared_ptrIS2_EEE11val_deleterEEELi0ELb0EED2Ev($1);
 __ZNSt3__214__shared_countD2Ev($0);
 return;
}
function __ZNSt3__220__shared_ptr_pointerIP7convertN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__220__shared_ptr_pointerIP7convertN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__220__shared_ptr_pointerIP7convertN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE16__on_zero_sharedEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 16|0);
 $2 = ((($0)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 __THREW__ = 0;
 invoke_vii(118,($1|0),($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch_3(0|0)|0;
  $7 = (getTempRet0() | 0);
  ___clang_call_terminate($6);
  // unreachable;
 } else {
  __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7convertEEE11val_deleterD2Ev($1);
  return;
 }
}
function __ZNKSt3__220__shared_ptr_pointerIP7convertN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE13__get_deleterERKSt9type_info($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(34746|0);
 $5 = ((($0)) + 16|0);
 $6 = $4 ? $5 : 0;
 return ($6|0);
}
function __ZNSt3__220__shared_ptr_pointerIP7convertN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE21__on_zero_shared_weakEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZNSt3__222__compressed_pair_elemINS_17__compressed_pairIP7convertN10emscripten15smart_ptr_traitINS_10shared_ptrIS2_EEE11val_deleterEEELi0ELb0EED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__217__compressed_pairIP7convertN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEED2Ev($0);
 return;
}
function __ZN10emscripten8internal11LightTypeIDINSt3__210shared_ptrI7convertEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (21768|0);
}
function __ZN10emscripten8internal14getLightTypeIDI7convertEEPKvRKT_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (21744|0);
}
function __ZN10emscripten8internal11LightTypeIDIPK7convertE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (21792|0);
}
function __ZN10emscripten8internal11LightTypeIDIP7convertE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (21728|0);
}
function __ZN10emscripten8internal11LightTypeIDI7convertE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (21744|0);
}
function __ZN10emscripten8internal10getContextIM7maxiEnvFviEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIM7maxiEnvKFivEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal11BindingTypeIP7maxiEnvE12fromWireTypeES3_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerI7maxiEnvEEdEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (25580|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJdNS0_17AllowedRawPointerI7maxiEnvEEdiEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (13312|0);
}
function __ZN10emscripten8internal11BindingTypeIlE12fromWireTypeEl($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJdNS0_17AllowedRawPointerI7maxiEnvEEdddddliEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (13328|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJdNS0_17AllowedRawPointerI7maxiEnvEEdddliEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (13376|0);
}
function __ZNSt3__210shared_ptrI7maxiEnvE11make_sharedIJEEES2_DpOT_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = (__Znwm(104)|0);
 $2 = ((($1)) + 4|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($1)) + 8|0);
 HEAP32[$3>>2] = 0;
 HEAP32[$1>>2] = (25600);
 $4 = ((($1)) + 16|0);
 dest=$4; stop=dest+88|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 __ZN7maxiEnvC2Ev($4);
 $5 = ((($0)) + 4|0);
 $6 = ((($1)) + 16|0);
 HEAP32[$0>>2] = $6;
 HEAP32[$5>>2] = $1;
 HEAP32[$vararg_buffer>>2] = $6;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $6;
 __ZNSt3__210shared_ptrI7maxiEnvE18__enable_weak_thisEz($0,$vararg_buffer);
 STACKTOP = sp;return;
}
function __ZN7maxiEnvC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 60|0);
 HEAP32[$1>>2] = 1;
 return;
}
function __ZNSt3__210shared_ptrI7maxiEnvE18__enable_weak_thisEz($0,$varargs) {
 $0 = $0|0;
 $varargs = $varargs|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__220__shared_ptr_emplaceI7maxiEnvNS_9allocatorIS1_EEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__214__shared_countD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__220__shared_ptr_emplaceI7maxiEnvNS_9allocatorIS1_EEE16__on_zero_sharedEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__220__shared_ptr_emplaceI7maxiEnvNS_9allocatorIS1_EEE21__on_zero_shared_weakEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZN10emscripten8internal18GenericBindingTypeINSt3__210shared_ptrI7maxiEnvEEE10toWireTypeEOS5_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $2 = HEAP32[$0>>2]|0;
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 4|0);
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$3>>2] = $5;
 HEAP32[$0>>2] = 0;
 HEAP32[$4>>2] = 0;
 return ($1|0);
}
function __ZNSt3__210shared_ptrI7maxiEnvED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  return;
 }
 $4 = ((($2)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + -1)|0;
 HEAP32[$4>>2] = $6;
 $7 = ($5|0)==(0);
 if (!($7)) {
  return;
 }
 $8 = HEAP32[$2>>2]|0;
 $9 = ((($8)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 FUNCTION_TABLE_vi[$10 & 511]($2);
 __ZNSt3__219__shared_weak_count14__release_weakEv($2);
 return;
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNSt3__210shared_ptrI7maxiEnvEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (25620|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiEnvEEE11val_deleterC2ENS_3valE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valC2IRS0_EEOT_($0,$1);
 return;
}
function __ZNSt3__210shared_ptrI7maxiEnvEC2IS1_N10emscripten15smart_ptr_traitIS2_E11val_deleterEEEPT_T0_NS_9enable_ifIXsr14is_convertibleIS9_PS1_EE5valueENS2_5__natEE4typeE($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$02$i = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $4 = sp + 16|0;
 $5 = sp + 8|0;
 HEAP32[$0>>2] = $1;
 __THREW__ = 0;
 $6 = (invoke_ii(167,20)|0);
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $25 = ___cxa_find_matching_catch_3(0|0)|0;
  $26 = (getTempRet0() | 0);
  $$1 = $25;
 } else {
  __THREW__ = 0;
  invoke_vii(119,($5|0),($2|0));
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  if ($10) {
   $27 = ___cxa_find_matching_catch_3(0|0)|0;
   $28 = (getTempRet0() | 0);
   $$0 = $27;
  } else {
   $11 = $1;
   $12 = ((($6)) + 4|0);
   HEAP32[$12>>2] = 0;
   $13 = ((($6)) + 8|0);
   HEAP32[$13>>2] = 0;
   HEAP32[$6>>2] = (25632);
   HEAP32[$4>>2] = $11;
   $14 = ((($4)) + 4|0);
   __THREW__ = 0;
   invoke_vii(120,($14|0),($5|0));
   $15 = __THREW__; __THREW__ = 0;
   $16 = $15&1;
   do {
    if ($16) {
     $20 = ___cxa_find_matching_catch_3(0|0)|0;
     $21 = (getTempRet0() | 0);
     $$02$i = $20;
    } else {
     $17 = ((($6)) + 12|0);
     __THREW__ = 0;
     invoke_vii(121,($17|0),($4|0));
     $18 = __THREW__; __THREW__ = 0;
     $19 = $18&1;
     if ($19) {
      $22 = ___cxa_find_matching_catch_3(0|0)|0;
      $23 = (getTempRet0() | 0);
      __ZNSt3__217__compressed_pairIP7maxiEnvN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEED2Ev($4);
      $$02$i = $22;
      break;
     } else {
      __ZNSt3__217__compressed_pairIP7maxiEnvN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEED2Ev($4);
      $24 = ((($0)) + 4|0);
      HEAP32[$24>>2] = $6;
      __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiEnvEEE11val_deleterD2Ev($5);
      HEAP32[$vararg_buffer>>2] = $1;
      $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
      HEAP32[$vararg_ptr1>>2] = $1;
      __ZNSt3__210shared_ptrI7maxiEnvE18__enable_weak_thisEz($0,$vararg_buffer);
      STACKTOP = sp;return;
     }
    }
   } while(0);
   __ZNSt3__214__shared_countD2Ev($6);
   __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiEnvEEE11val_deleterD2Ev($5);
   $$0 = $$02$i;
  }
  __ZdlPv($6);
  $$1 = $$0;
 }
 (___cxa_begin_catch(($$1|0))|0);
 __THREW__ = 0;
 invoke_vii(122,($2|0),($1|0));
 $29 = __THREW__; __THREW__ = 0;
 $30 = $29&1;
 if (!($30)) {
  __THREW__ = 0;
  invoke_v(3);
  $31 = __THREW__; __THREW__ = 0;
 }
 $32 = ___cxa_find_matching_catch_2()|0;
 $33 = (getTempRet0() | 0);
 __THREW__ = 0;
 invoke_v(2);
 $34 = __THREW__; __THREW__ = 0;
 $35 = $34&1;
 if ($35) {
  $36 = ___cxa_find_matching_catch_3(0|0)|0;
  $37 = (getTempRet0() | 0);
  ___clang_call_terminate($36);
  // unreachable;
 } else {
  ___resumeException($32|0);
  // unreachable;
 }
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiEnvEEE11val_deleterD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valD2Ev($0);
 return;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiEnvEEE11val_deleterC2ERKS6_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valC2ERKS0_($0,$1);
 return;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiEnvEEE11val_deleterC2EOS6_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valC2EOS0_($0,$1);
 return;
}
function __ZNSt3__217__compressed_pairIP7maxiEnvN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEEC2EOS9_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = ((($0)) + 4|0);
 $4 = ((($1)) + 4|0);
 __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI7maxiEnvEEE11val_deleterELi1ELb0EEC2EOS8_($3,$4);
 return;
}
function __ZNSt3__217__compressed_pairIP7maxiEnvN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI7maxiEnvEEE11val_deleterELi1ELb0EED2Ev($1);
 return;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiEnvEEE11val_deleterclEPKv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = sp + 4|0;
 __ZNK10emscripten3valclIJEEES0_DpOT_($2,$0);
 __ZN10emscripten3valD2Ev($2);
 __ZN10emscripten3val9undefinedEv($3);
 __THREW__ = 0;
 (invoke_iii(71,($0|0),($3|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch_2()|0;
  $7 = (getTempRet0() | 0);
  __ZN10emscripten3valD2Ev($3);
  ___resumeException($6|0);
  // unreachable;
 } else {
  __ZN10emscripten3valD2Ev($3);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI7maxiEnvEEE11val_deleterELi1ELb0EED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiEnvEEE11val_deleterD2Ev($0);
 return;
}
function __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI7maxiEnvEEE11val_deleterELi1ELb0EEC2EOS8_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiEnvEEE11val_deleterC2EOS6_($0,$1);
 return;
}
function __ZNSt3__220__shared_ptr_pointerIP7maxiEnvN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (25632);
 $1 = ((($0)) + 12|0);
 __ZNSt3__222__compressed_pair_elemINS_17__compressed_pairIP7maxiEnvN10emscripten15smart_ptr_traitINS_10shared_ptrIS2_EEE11val_deleterEEELi0ELb0EED2Ev($1);
 __ZNSt3__214__shared_countD2Ev($0);
 return;
}
function __ZNSt3__220__shared_ptr_pointerIP7maxiEnvN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__220__shared_ptr_pointerIP7maxiEnvN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__220__shared_ptr_pointerIP7maxiEnvN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE16__on_zero_sharedEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 16|0);
 $2 = ((($0)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 __THREW__ = 0;
 invoke_vii(122,($1|0),($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch_3(0|0)|0;
  $7 = (getTempRet0() | 0);
  ___clang_call_terminate($6);
  // unreachable;
 } else {
  __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiEnvEEE11val_deleterD2Ev($1);
  return;
 }
}
function __ZNKSt3__220__shared_ptr_pointerIP7maxiEnvN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE13__get_deleterERKSt9type_info($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(35098|0);
 $5 = ((($0)) + 16|0);
 $6 = $4 ? $5 : 0;
 return ($6|0);
}
function __ZNSt3__220__shared_ptr_pointerIP7maxiEnvN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE21__on_zero_shared_weakEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZNSt3__222__compressed_pair_elemINS_17__compressed_pairIP7maxiEnvN10emscripten15smart_ptr_traitINS_10shared_ptrIS2_EEE11val_deleterEEELi0ELb0EED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__217__compressed_pairIP7maxiEnvN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEED2Ev($0);
 return;
}
function __ZN10emscripten8internal11LightTypeIDINSt3__210shared_ptrI7maxiEnvEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (21848|0);
}
function __ZN10emscripten8internal14getLightTypeIDI7maxiEnvEEPKvRKT_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (21824|0);
}
function __ZN10emscripten8internal11LightTypeIDIPK7maxiEnvE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (21872|0);
}
function __ZN10emscripten8internal11LightTypeIDIP7maxiEnvE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (21808|0);
}
function __ZN10emscripten8internal11LightTypeIDI7maxiEnvE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (21824|0);
}
function __ZN10emscripten8internal11BindingTypeIP7maxiDynE12fromWireTypeES3_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerI7maxiDynEEdEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (25652|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJdNS0_17AllowedRawPointerI7maxiDynEEdEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (25664|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJdNS0_17AllowedRawPointerI7maxiDynEEdddddEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (13408|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJdNS0_17AllowedRawPointerI7maxiDynEEddlddEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (13440|0);
}
function __ZNSt3__210shared_ptrI7maxiDynE11make_sharedIJEEES2_DpOT_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = (__Znwm(104)|0);
 $2 = ((($1)) + 4|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($1)) + 8|0);
 HEAP32[$3>>2] = 0;
 HEAP32[$1>>2] = (25684);
 $4 = ((($1)) + 16|0);
 dest=$4; stop=dest+88|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $5 = ((($0)) + 4|0);
 $6 = ((($1)) + 16|0);
 HEAP32[$0>>2] = $6;
 HEAP32[$5>>2] = $1;
 HEAP32[$vararg_buffer>>2] = $6;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $6;
 __ZNSt3__210shared_ptrI7maxiDynE18__enable_weak_thisEz($0,$vararg_buffer);
 STACKTOP = sp;return;
}
function __ZNSt3__210shared_ptrI7maxiDynE18__enable_weak_thisEz($0,$varargs) {
 $0 = $0|0;
 $varargs = $varargs|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__220__shared_ptr_emplaceI7maxiDynNS_9allocatorIS1_EEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__214__shared_countD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__220__shared_ptr_emplaceI7maxiDynNS_9allocatorIS1_EEE16__on_zero_sharedEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__220__shared_ptr_emplaceI7maxiDynNS_9allocatorIS1_EEE21__on_zero_shared_weakEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZN10emscripten8internal18GenericBindingTypeINSt3__210shared_ptrI7maxiDynEEE10toWireTypeEOS5_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $2 = HEAP32[$0>>2]|0;
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 4|0);
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$3>>2] = $5;
 HEAP32[$0>>2] = 0;
 HEAP32[$4>>2] = 0;
 return ($1|0);
}
function __ZNSt3__210shared_ptrI7maxiDynED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  return;
 }
 $4 = ((($2)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + -1)|0;
 HEAP32[$4>>2] = $6;
 $7 = ($5|0)==(0);
 if (!($7)) {
  return;
 }
 $8 = HEAP32[$2>>2]|0;
 $9 = ((($8)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 FUNCTION_TABLE_vi[$10 & 511]($2);
 __ZNSt3__219__shared_weak_count14__release_weakEv($2);
 return;
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNSt3__210shared_ptrI7maxiDynEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (25704|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiDynEEE11val_deleterC2ENS_3valE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valC2IRS0_EEOT_($0,$1);
 return;
}
function __ZNSt3__210shared_ptrI7maxiDynEC2IS1_N10emscripten15smart_ptr_traitIS2_E11val_deleterEEEPT_T0_NS_9enable_ifIXsr14is_convertibleIS9_PS1_EE5valueENS2_5__natEE4typeE($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$02$i = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $4 = sp + 16|0;
 $5 = sp + 8|0;
 HEAP32[$0>>2] = $1;
 __THREW__ = 0;
 $6 = (invoke_ii(167,20)|0);
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $25 = ___cxa_find_matching_catch_3(0|0)|0;
  $26 = (getTempRet0() | 0);
  $$1 = $25;
 } else {
  __THREW__ = 0;
  invoke_vii(123,($5|0),($2|0));
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  if ($10) {
   $27 = ___cxa_find_matching_catch_3(0|0)|0;
   $28 = (getTempRet0() | 0);
   $$0 = $27;
  } else {
   $11 = $1;
   $12 = ((($6)) + 4|0);
   HEAP32[$12>>2] = 0;
   $13 = ((($6)) + 8|0);
   HEAP32[$13>>2] = 0;
   HEAP32[$6>>2] = (25716);
   HEAP32[$4>>2] = $11;
   $14 = ((($4)) + 4|0);
   __THREW__ = 0;
   invoke_vii(124,($14|0),($5|0));
   $15 = __THREW__; __THREW__ = 0;
   $16 = $15&1;
   do {
    if ($16) {
     $20 = ___cxa_find_matching_catch_3(0|0)|0;
     $21 = (getTempRet0() | 0);
     $$02$i = $20;
    } else {
     $17 = ((($6)) + 12|0);
     __THREW__ = 0;
     invoke_vii(125,($17|0),($4|0));
     $18 = __THREW__; __THREW__ = 0;
     $19 = $18&1;
     if ($19) {
      $22 = ___cxa_find_matching_catch_3(0|0)|0;
      $23 = (getTempRet0() | 0);
      __ZNSt3__217__compressed_pairIP7maxiDynN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEED2Ev($4);
      $$02$i = $22;
      break;
     } else {
      __ZNSt3__217__compressed_pairIP7maxiDynN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEED2Ev($4);
      $24 = ((($0)) + 4|0);
      HEAP32[$24>>2] = $6;
      __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiDynEEE11val_deleterD2Ev($5);
      HEAP32[$vararg_buffer>>2] = $1;
      $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
      HEAP32[$vararg_ptr1>>2] = $1;
      __ZNSt3__210shared_ptrI7maxiDynE18__enable_weak_thisEz($0,$vararg_buffer);
      STACKTOP = sp;return;
     }
    }
   } while(0);
   __ZNSt3__214__shared_countD2Ev($6);
   __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiDynEEE11val_deleterD2Ev($5);
   $$0 = $$02$i;
  }
  __ZdlPv($6);
  $$1 = $$0;
 }
 (___cxa_begin_catch(($$1|0))|0);
 __THREW__ = 0;
 invoke_vii(126,($2|0),($1|0));
 $29 = __THREW__; __THREW__ = 0;
 $30 = $29&1;
 if (!($30)) {
  __THREW__ = 0;
  invoke_v(3);
  $31 = __THREW__; __THREW__ = 0;
 }
 $32 = ___cxa_find_matching_catch_2()|0;
 $33 = (getTempRet0() | 0);
 __THREW__ = 0;
 invoke_v(2);
 $34 = __THREW__; __THREW__ = 0;
 $35 = $34&1;
 if ($35) {
  $36 = ___cxa_find_matching_catch_3(0|0)|0;
  $37 = (getTempRet0() | 0);
  ___clang_call_terminate($36);
  // unreachable;
 } else {
  ___resumeException($32|0);
  // unreachable;
 }
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiDynEEE11val_deleterD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valD2Ev($0);
 return;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiDynEEE11val_deleterC2ERKS6_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valC2ERKS0_($0,$1);
 return;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiDynEEE11val_deleterC2EOS6_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valC2EOS0_($0,$1);
 return;
}
function __ZNSt3__217__compressed_pairIP7maxiDynN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEEC2EOS9_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = ((($0)) + 4|0);
 $4 = ((($1)) + 4|0);
 __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI7maxiDynEEE11val_deleterELi1ELb0EEC2EOS8_($3,$4);
 return;
}
function __ZNSt3__217__compressed_pairIP7maxiDynN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI7maxiDynEEE11val_deleterELi1ELb0EED2Ev($1);
 return;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiDynEEE11val_deleterclEPKv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = sp + 4|0;
 __ZNK10emscripten3valclIJEEES0_DpOT_($2,$0);
 __ZN10emscripten3valD2Ev($2);
 __ZN10emscripten3val9undefinedEv($3);
 __THREW__ = 0;
 (invoke_iii(71,($0|0),($3|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch_2()|0;
  $7 = (getTempRet0() | 0);
  __ZN10emscripten3valD2Ev($3);
  ___resumeException($6|0);
  // unreachable;
 } else {
  __ZN10emscripten3valD2Ev($3);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI7maxiDynEEE11val_deleterELi1ELb0EED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiDynEEE11val_deleterD2Ev($0);
 return;
}
function __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI7maxiDynEEE11val_deleterELi1ELb0EEC2EOS8_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiDynEEE11val_deleterC2EOS6_($0,$1);
 return;
}
function __ZNSt3__220__shared_ptr_pointerIP7maxiDynN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (25716);
 $1 = ((($0)) + 12|0);
 __ZNSt3__222__compressed_pair_elemINS_17__compressed_pairIP7maxiDynN10emscripten15smart_ptr_traitINS_10shared_ptrIS2_EEE11val_deleterEEELi0ELb0EED2Ev($1);
 __ZNSt3__214__shared_countD2Ev($0);
 return;
}
function __ZNSt3__220__shared_ptr_pointerIP7maxiDynN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__220__shared_ptr_pointerIP7maxiDynN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__220__shared_ptr_pointerIP7maxiDynN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE16__on_zero_sharedEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 16|0);
 $2 = ((($0)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 __THREW__ = 0;
 invoke_vii(126,($1|0),($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch_3(0|0)|0;
  $7 = (getTempRet0() | 0);
  ___clang_call_terminate($6);
  // unreachable;
 } else {
  __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiDynEEE11val_deleterD2Ev($1);
  return;
 }
}
function __ZNKSt3__220__shared_ptr_pointerIP7maxiDynN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE13__get_deleterERKSt9type_info($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(35442|0);
 $5 = ((($0)) + 16|0);
 $6 = $4 ? $5 : 0;
 return ($6|0);
}
function __ZNSt3__220__shared_ptr_pointerIP7maxiDynN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE21__on_zero_shared_weakEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZNSt3__222__compressed_pair_elemINS_17__compressed_pairIP7maxiDynN10emscripten15smart_ptr_traitINS_10shared_ptrIS2_EEE11val_deleterEEELi0ELb0EED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__217__compressed_pairIP7maxiDynN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEED2Ev($0);
 return;
}
function __ZN10emscripten8internal11LightTypeIDINSt3__210shared_ptrI7maxiDynEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (21928|0);
}
function __ZN10emscripten8internal14getLightTypeIDI7maxiDynEEPKvRKT_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (21904|0);
}
function __ZN10emscripten8internal11LightTypeIDIPK7maxiDynE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (21952|0);
}
function __ZN10emscripten8internal11LightTypeIDIP7maxiDynE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (21888|0);
}
function __ZN10emscripten8internal11LightTypeIDI7maxiDynE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (21904|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJddddEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (13472|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJddddddEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (13488|0);
}
function __ZNSt3__210shared_ptrI7maxiMapE11make_sharedIJEEES2_DpOT_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = (__Znwm(16)|0);
 $2 = ((($1)) + 4|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($1)) + 8|0);
 HEAP32[$3>>2] = 0;
 HEAP32[$1>>2] = (25744);
 $4 = ((($0)) + 4|0);
 $5 = ((($1)) + 12|0);
 HEAP32[$0>>2] = $5;
 HEAP32[$4>>2] = $1;
 HEAP32[$vararg_buffer>>2] = $5;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $5;
 __ZNSt3__210shared_ptrI7maxiMapE18__enable_weak_thisEz($0,$vararg_buffer);
 STACKTOP = sp;return;
}
function __ZNSt3__210shared_ptrI7maxiMapE18__enable_weak_thisEz($0,$varargs) {
 $0 = $0|0;
 $varargs = $varargs|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__220__shared_ptr_emplaceI7maxiMapNS_9allocatorIS1_EEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__214__shared_countD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__220__shared_ptr_emplaceI7maxiMapNS_9allocatorIS1_EEE16__on_zero_sharedEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__220__shared_ptr_emplaceI7maxiMapNS_9allocatorIS1_EEE21__on_zero_shared_weakEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZN10emscripten8internal18GenericBindingTypeINSt3__210shared_ptrI7maxiMapEEE10toWireTypeEOS5_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $2 = HEAP32[$0>>2]|0;
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 4|0);
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$3>>2] = $5;
 HEAP32[$0>>2] = 0;
 HEAP32[$4>>2] = 0;
 return ($1|0);
}
function __ZNSt3__210shared_ptrI7maxiMapED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  return;
 }
 $4 = ((($2)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + -1)|0;
 HEAP32[$4>>2] = $6;
 $7 = ($5|0)==(0);
 if (!($7)) {
  return;
 }
 $8 = HEAP32[$2>>2]|0;
 $9 = ((($8)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 FUNCTION_TABLE_vi[$10 & 511]($2);
 __ZNSt3__219__shared_weak_count14__release_weakEv($2);
 return;
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNSt3__210shared_ptrI7maxiMapEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (25764|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiMapEEE11val_deleterC2ENS_3valE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valC2IRS0_EEOT_($0,$1);
 return;
}
function __ZNSt3__210shared_ptrI7maxiMapEC2IS1_N10emscripten15smart_ptr_traitIS2_E11val_deleterEEEPT_T0_NS_9enable_ifIXsr14is_convertibleIS9_PS1_EE5valueENS2_5__natEE4typeE($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$02$i = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $4 = sp + 16|0;
 $5 = sp + 8|0;
 HEAP32[$0>>2] = $1;
 __THREW__ = 0;
 $6 = (invoke_ii(167,20)|0);
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $25 = ___cxa_find_matching_catch_3(0|0)|0;
  $26 = (getTempRet0() | 0);
  $$1 = $25;
 } else {
  __THREW__ = 0;
  invoke_vii(127,($5|0),($2|0));
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  if ($10) {
   $27 = ___cxa_find_matching_catch_3(0|0)|0;
   $28 = (getTempRet0() | 0);
   $$0 = $27;
  } else {
   $11 = $1;
   $12 = ((($6)) + 4|0);
   HEAP32[$12>>2] = 0;
   $13 = ((($6)) + 8|0);
   HEAP32[$13>>2] = 0;
   HEAP32[$6>>2] = (25776);
   HEAP32[$4>>2] = $11;
   $14 = ((($4)) + 4|0);
   __THREW__ = 0;
   invoke_vii(128,($14|0),($5|0));
   $15 = __THREW__; __THREW__ = 0;
   $16 = $15&1;
   do {
    if ($16) {
     $20 = ___cxa_find_matching_catch_3(0|0)|0;
     $21 = (getTempRet0() | 0);
     $$02$i = $20;
    } else {
     $17 = ((($6)) + 12|0);
     __THREW__ = 0;
     invoke_vii(129,($17|0),($4|0));
     $18 = __THREW__; __THREW__ = 0;
     $19 = $18&1;
     if ($19) {
      $22 = ___cxa_find_matching_catch_3(0|0)|0;
      $23 = (getTempRet0() | 0);
      __ZNSt3__217__compressed_pairIP7maxiMapN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEED2Ev($4);
      $$02$i = $22;
      break;
     } else {
      __ZNSt3__217__compressed_pairIP7maxiMapN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEED2Ev($4);
      $24 = ((($0)) + 4|0);
      HEAP32[$24>>2] = $6;
      __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiMapEEE11val_deleterD2Ev($5);
      HEAP32[$vararg_buffer>>2] = $1;
      $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
      HEAP32[$vararg_ptr1>>2] = $1;
      __ZNSt3__210shared_ptrI7maxiMapE18__enable_weak_thisEz($0,$vararg_buffer);
      STACKTOP = sp;return;
     }
    }
   } while(0);
   __ZNSt3__214__shared_countD2Ev($6);
   __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiMapEEE11val_deleterD2Ev($5);
   $$0 = $$02$i;
  }
  __ZdlPv($6);
  $$1 = $$0;
 }
 (___cxa_begin_catch(($$1|0))|0);
 __THREW__ = 0;
 invoke_vii(130,($2|0),($1|0));
 $29 = __THREW__; __THREW__ = 0;
 $30 = $29&1;
 if (!($30)) {
  __THREW__ = 0;
  invoke_v(3);
  $31 = __THREW__; __THREW__ = 0;
 }
 $32 = ___cxa_find_matching_catch_2()|0;
 $33 = (getTempRet0() | 0);
 __THREW__ = 0;
 invoke_v(2);
 $34 = __THREW__; __THREW__ = 0;
 $35 = $34&1;
 if ($35) {
  $36 = ___cxa_find_matching_catch_3(0|0)|0;
  $37 = (getTempRet0() | 0);
  ___clang_call_terminate($36);
  // unreachable;
 } else {
  ___resumeException($32|0);
  // unreachable;
 }
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiMapEEE11val_deleterD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valD2Ev($0);
 return;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiMapEEE11val_deleterC2ERKS6_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valC2ERKS0_($0,$1);
 return;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiMapEEE11val_deleterC2EOS6_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valC2EOS0_($0,$1);
 return;
}
function __ZNSt3__217__compressed_pairIP7maxiMapN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEEC2EOS9_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = ((($0)) + 4|0);
 $4 = ((($1)) + 4|0);
 __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI7maxiMapEEE11val_deleterELi1ELb0EEC2EOS8_($3,$4);
 return;
}
function __ZNSt3__217__compressed_pairIP7maxiMapN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI7maxiMapEEE11val_deleterELi1ELb0EED2Ev($1);
 return;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiMapEEE11val_deleterclEPKv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = sp + 4|0;
 __ZNK10emscripten3valclIJEEES0_DpOT_($2,$0);
 __ZN10emscripten3valD2Ev($2);
 __ZN10emscripten3val9undefinedEv($3);
 __THREW__ = 0;
 (invoke_iii(71,($0|0),($3|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch_2()|0;
  $7 = (getTempRet0() | 0);
  __ZN10emscripten3valD2Ev($3);
  ___resumeException($6|0);
  // unreachable;
 } else {
  __ZN10emscripten3valD2Ev($3);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI7maxiMapEEE11val_deleterELi1ELb0EED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiMapEEE11val_deleterD2Ev($0);
 return;
}
function __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI7maxiMapEEE11val_deleterELi1ELb0EEC2EOS8_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiMapEEE11val_deleterC2EOS6_($0,$1);
 return;
}
function __ZNSt3__220__shared_ptr_pointerIP7maxiMapN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (25776);
 $1 = ((($0)) + 12|0);
 __ZNSt3__222__compressed_pair_elemINS_17__compressed_pairIP7maxiMapN10emscripten15smart_ptr_traitINS_10shared_ptrIS2_EEE11val_deleterEEELi0ELb0EED2Ev($1);
 __ZNSt3__214__shared_countD2Ev($0);
 return;
}
function __ZNSt3__220__shared_ptr_pointerIP7maxiMapN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__220__shared_ptr_pointerIP7maxiMapN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__220__shared_ptr_pointerIP7maxiMapN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE16__on_zero_sharedEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 16|0);
 $2 = ((($0)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 __THREW__ = 0;
 invoke_vii(130,($1|0),($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch_3(0|0)|0;
  $7 = (getTempRet0() | 0);
  ___clang_call_terminate($6);
  // unreachable;
 } else {
  __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiMapEEE11val_deleterD2Ev($1);
  return;
 }
}
function __ZNKSt3__220__shared_ptr_pointerIP7maxiMapN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE13__get_deleterERKSt9type_info($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(35763|0);
 $5 = ((($0)) + 16|0);
 $6 = $4 ? $5 : 0;
 return ($6|0);
}
function __ZNSt3__220__shared_ptr_pointerIP7maxiMapN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE21__on_zero_shared_weakEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZNSt3__222__compressed_pair_elemINS_17__compressed_pairIP7maxiMapN10emscripten15smart_ptr_traitINS_10shared_ptrIS2_EEE11val_deleterEEELi0ELb0EED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__217__compressed_pairIP7maxiMapN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEED2Ev($0);
 return;
}
function __ZN10emscripten8internal11LightTypeIDINSt3__210shared_ptrI7maxiMapEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (21984|0);
}
function __ZN10emscripten8internal14getLightTypeIDI7maxiMapEEPKvRKT_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (22008|0);
}
function __ZN10emscripten8internal11LightTypeIDIPK7maxiMapE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (22016|0);
}
function __ZN10emscripten8internal11LightTypeIDIP7maxiMapE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (22032|0);
}
function __ZN10emscripten8internal11LightTypeIDI7maxiMapE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (22008|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJbNS0_17AllowedRawPointerI10maxiSampleEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (25796|0);
}
function __ZN10emscripten8internal11BindingTypeIP10maxiSampleE12fromWireTypeES3_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE12fromWireTypeEPNS9_Ut_E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$1>>2]|0;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($0,$2,$3);
 return;
}
function __ZNSt3__211char_traitsIcE4copyEPcPKcm($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 if (!($3)) {
  _memcpy(($0|0),($1|0),($2|0))|0;
 }
 return ($0|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJbNS0_17AllowedRawPointerI10maxiSampleEENSt3__212basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEiEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (13520|0);
}
function __ZN10emscripten8internal11BindingTypeIfE12fromWireTypeEf($0) {
 $0 = +$0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (+$0);
}
function __ZN10emscripten8internal11BindingTypeIbE12fromWireTypeEb($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerI10maxiSampleEEffbbEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (13536|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerI10maxiSampleEEdEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (25804|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerI10maxiSampleEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (25816|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJdNS0_17AllowedRawPointerI10maxiSampleEEdddEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (13568|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJdNS0_17AllowedRawPointerI10maxiSampleEEdEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (25824|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJdNS0_17AllowedRawPointerI10maxiSampleEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (25836|0);
}
function __ZN10emscripten8internal18GenericBindingTypeINSt3__26vectorIdNS2_9allocatorIdEEEEE12fromWireTypeEPS6_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerI10maxiSampleEERNSt3__26vectorIdNS6_9allocatorIdEEEEiEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (13600|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerI10maxiSampleEERNSt3__26vectorIdNS6_9allocatorIdEEEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (25844|0);
}
function __ZN10emscripten8internal11BindingTypeIPK10maxiSampleE12fromWireTypeES4_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal11BindingTypeImE10toWireTypeERKm($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJmNS0_17AllowedRawPointerIK10maxiSampleEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (25856|0);
}
function __ZNSt3__210shared_ptrI10maxiSampleE11make_sharedIJEEES2_DpOT_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = (__Znwm(136)|0);
 $2 = ((($1)) + 4|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($1)) + 8|0);
 HEAP32[$3>>2] = 0;
 HEAP32[$1>>2] = (25872);
 $4 = ((($1)) + 16|0);
 __THREW__ = 0;
 invoke_vi(304,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $8 = ___cxa_find_matching_catch_2()|0;
  $9 = (getTempRet0() | 0);
  __ZNSt3__214__shared_countD2Ev($1);
  __ZdlPv($1);
  ___resumeException($8|0);
  // unreachable;
 } else {
  $7 = ((($0)) + 4|0);
  HEAP32[$0>>2] = $4;
  HEAP32[$7>>2] = $1;
  HEAP32[$vararg_buffer>>2] = $4;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $4;
  __ZNSt3__210shared_ptrI10maxiSampleE18__enable_weak_thisEz($0,$vararg_buffer);
  STACKTOP = sp;return;
 }
}
function __ZN10maxiSampleC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $1 = ((($0)) + 40|0);
 $2 = ((($0)) + 72|0);
 ;HEAP32[$1>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;HEAP32[$1+12>>2]=0|0;
 __THREW__ = 0;
 invoke_vi(305,($2|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $11 = ___cxa_find_matching_catch_2()|0;
  $12 = (getTempRet0() | 0);
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0);
  ___resumeException($11|0);
  // unreachable;
 } else {
  $5 = ((($0)) + 96|0);
  HEAP16[$5>>1] = 1;
  $6 = ((($0)) + 100|0);
  $7 = HEAP32[6238]|0;
  HEAP32[$6>>2] = $7;
  $8 = ((($0)) + 108|0);
  HEAP32[$8>>2] = 0;
  $9 = ((($0)) + 112|0);
  HEAP32[$9>>2] = 0;
  $10 = ((($0)) + 116|0);
  HEAP32[$10>>2] = 0;
  return;
 }
}
function __ZNSt3__210shared_ptrI10maxiSampleE18__enable_weak_thisEz($0,$varargs) {
 $0 = $0|0;
 $varargs = $varargs|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10maxiLagExpIdEC2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10maxiLagExpIdE4initEdd($0,0.5,0.0);
 return;
}
function __ZNSt3__220__shared_ptr_emplaceI10maxiSampleNS_9allocatorIS1_EEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (25872);
 $1 = ((($0)) + 16|0);
 __ZNSt3__222__compressed_pair_elemI10maxiSampleLi1ELb0EED2Ev($1);
 __ZNSt3__214__shared_countD2Ev($0);
 return;
}
function __ZNSt3__220__shared_ptr_emplaceI10maxiSampleNS_9allocatorIS1_EEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__220__shared_ptr_emplaceI10maxiSampleNS_9allocatorIS1_EEED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__220__shared_ptr_emplaceI10maxiSampleNS_9allocatorIS1_EEE16__on_zero_sharedEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 16|0);
 __ZN10maxiSampleD2Ev($1);
 return;
}
function __ZNSt3__220__shared_ptr_emplaceI10maxiSampleNS_9allocatorIS1_EEE21__on_zero_shared_weakEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZN10maxiSampleD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 108|0);
 __ZNSt3__213__vector_baseIdNS_9allocatorIdEEED2Ev($1);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0);
 return;
}
function __ZNSt3__222__compressed_pair_elemI10maxiSampleLi1ELb0EED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10maxiSampleD2Ev($0);
 return;
}
function __ZN10emscripten8internal18GenericBindingTypeINSt3__210shared_ptrI10maxiSampleEEE10toWireTypeEOS5_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $2 = HEAP32[$0>>2]|0;
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 4|0);
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$3>>2] = $5;
 HEAP32[$0>>2] = 0;
 HEAP32[$4>>2] = 0;
 return ($1|0);
}
function __ZNSt3__210shared_ptrI10maxiSampleED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  return;
 }
 $4 = ((($2)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + -1)|0;
 HEAP32[$4>>2] = $6;
 $7 = ($5|0)==(0);
 if (!($7)) {
  return;
 }
 $8 = HEAP32[$2>>2]|0;
 $9 = ((($8)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 FUNCTION_TABLE_vi[$10 & 511]($2);
 __ZNSt3__219__shared_weak_count14__release_weakEv($2);
 return;
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNSt3__210shared_ptrI10maxiSampleEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (25892|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiSampleEEE11val_deleterC2ENS_3valE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valC2IRS0_EEOT_($0,$1);
 return;
}
function __ZNSt3__210shared_ptrI10maxiSampleEC2IS1_N10emscripten15smart_ptr_traitIS2_E11val_deleterEEEPT_T0_NS_9enable_ifIXsr14is_convertibleIS9_PS1_EE5valueENS2_5__natEE4typeE($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$02$i = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $4 = sp + 16|0;
 $5 = sp + 8|0;
 HEAP32[$0>>2] = $1;
 __THREW__ = 0;
 $6 = (invoke_ii(167,20)|0);
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $25 = ___cxa_find_matching_catch_3(0|0)|0;
  $26 = (getTempRet0() | 0);
  $$1 = $25;
 } else {
  __THREW__ = 0;
  invoke_vii(131,($5|0),($2|0));
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  if ($10) {
   $27 = ___cxa_find_matching_catch_3(0|0)|0;
   $28 = (getTempRet0() | 0);
   $$0 = $27;
  } else {
   $11 = $1;
   $12 = ((($6)) + 4|0);
   HEAP32[$12>>2] = 0;
   $13 = ((($6)) + 8|0);
   HEAP32[$13>>2] = 0;
   HEAP32[$6>>2] = (25904);
   HEAP32[$4>>2] = $11;
   $14 = ((($4)) + 4|0);
   __THREW__ = 0;
   invoke_vii(132,($14|0),($5|0));
   $15 = __THREW__; __THREW__ = 0;
   $16 = $15&1;
   do {
    if ($16) {
     $20 = ___cxa_find_matching_catch_3(0|0)|0;
     $21 = (getTempRet0() | 0);
     $$02$i = $20;
    } else {
     $17 = ((($6)) + 12|0);
     __THREW__ = 0;
     invoke_vii(133,($17|0),($4|0));
     $18 = __THREW__; __THREW__ = 0;
     $19 = $18&1;
     if ($19) {
      $22 = ___cxa_find_matching_catch_3(0|0)|0;
      $23 = (getTempRet0() | 0);
      __ZNSt3__217__compressed_pairIP10maxiSampleN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEED2Ev($4);
      $$02$i = $22;
      break;
     } else {
      __ZNSt3__217__compressed_pairIP10maxiSampleN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEED2Ev($4);
      $24 = ((($0)) + 4|0);
      HEAP32[$24>>2] = $6;
      __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiSampleEEE11val_deleterD2Ev($5);
      HEAP32[$vararg_buffer>>2] = $1;
      $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
      HEAP32[$vararg_ptr1>>2] = $1;
      __ZNSt3__210shared_ptrI10maxiSampleE18__enable_weak_thisEz($0,$vararg_buffer);
      STACKTOP = sp;return;
     }
    }
   } while(0);
   __ZNSt3__214__shared_countD2Ev($6);
   __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiSampleEEE11val_deleterD2Ev($5);
   $$0 = $$02$i;
  }
  __ZdlPv($6);
  $$1 = $$0;
 }
 (___cxa_begin_catch(($$1|0))|0);
 __THREW__ = 0;
 invoke_vii(134,($2|0),($1|0));
 $29 = __THREW__; __THREW__ = 0;
 $30 = $29&1;
 if (!($30)) {
  __THREW__ = 0;
  invoke_v(3);
  $31 = __THREW__; __THREW__ = 0;
 }
 $32 = ___cxa_find_matching_catch_2()|0;
 $33 = (getTempRet0() | 0);
 __THREW__ = 0;
 invoke_v(2);
 $34 = __THREW__; __THREW__ = 0;
 $35 = $34&1;
 if ($35) {
  $36 = ___cxa_find_matching_catch_3(0|0)|0;
  $37 = (getTempRet0() | 0);
  ___clang_call_terminate($36);
  // unreachable;
 } else {
  ___resumeException($32|0);
  // unreachable;
 }
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiSampleEEE11val_deleterD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valD2Ev($0);
 return;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiSampleEEE11val_deleterC2ERKS6_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valC2ERKS0_($0,$1);
 return;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiSampleEEE11val_deleterC2EOS6_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valC2EOS0_($0,$1);
 return;
}
function __ZNSt3__217__compressed_pairIP10maxiSampleN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEEC2EOS9_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = ((($0)) + 4|0);
 $4 = ((($1)) + 4|0);
 __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI10maxiSampleEEE11val_deleterELi1ELb0EEC2EOS8_($3,$4);
 return;
}
function __ZNSt3__217__compressed_pairIP10maxiSampleN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI10maxiSampleEEE11val_deleterELi1ELb0EED2Ev($1);
 return;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiSampleEEE11val_deleterclEPKv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = sp + 4|0;
 __ZNK10emscripten3valclIJEEES0_DpOT_($2,$0);
 __ZN10emscripten3valD2Ev($2);
 __ZN10emscripten3val9undefinedEv($3);
 __THREW__ = 0;
 (invoke_iii(71,($0|0),($3|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch_2()|0;
  $7 = (getTempRet0() | 0);
  __ZN10emscripten3valD2Ev($3);
  ___resumeException($6|0);
  // unreachable;
 } else {
  __ZN10emscripten3valD2Ev($3);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI10maxiSampleEEE11val_deleterELi1ELb0EED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiSampleEEE11val_deleterD2Ev($0);
 return;
}
function __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI10maxiSampleEEE11val_deleterELi1ELb0EEC2EOS8_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiSampleEEE11val_deleterC2EOS6_($0,$1);
 return;
}
function __ZNSt3__220__shared_ptr_pointerIP10maxiSampleN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (25904);
 $1 = ((($0)) + 12|0);
 __ZNSt3__222__compressed_pair_elemINS_17__compressed_pairIP10maxiSampleN10emscripten15smart_ptr_traitINS_10shared_ptrIS2_EEE11val_deleterEEELi0ELb0EED2Ev($1);
 __ZNSt3__214__shared_countD2Ev($0);
 return;
}
function __ZNSt3__220__shared_ptr_pointerIP10maxiSampleN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__220__shared_ptr_pointerIP10maxiSampleN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__220__shared_ptr_pointerIP10maxiSampleN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE16__on_zero_sharedEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 16|0);
 $2 = ((($0)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 __THREW__ = 0;
 invoke_vii(134,($1|0),($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch_3(0|0)|0;
  $7 = (getTempRet0() | 0);
  ___clang_call_terminate($6);
  // unreachable;
 } else {
  __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiSampleEEE11val_deleterD2Ev($1);
  return;
 }
}
function __ZNKSt3__220__shared_ptr_pointerIP10maxiSampleN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE13__get_deleterERKSt9type_info($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(36371|0);
 $5 = ((($0)) + 16|0);
 $6 = $4 ? $5 : 0;
 return ($6|0);
}
function __ZNSt3__220__shared_ptr_pointerIP10maxiSampleN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE21__on_zero_shared_weakEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZNSt3__222__compressed_pair_elemINS_17__compressed_pairIP10maxiSampleN10emscripten15smart_ptr_traitINS_10shared_ptrIS2_EEE11val_deleterEEELi0ELb0EED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__217__compressed_pairIP10maxiSampleN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEED2Ev($0);
 return;
}
function __ZN10emscripten8internal11LightTypeIDINSt3__210shared_ptrI10maxiSampleEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (22192|0);
}
function __ZN10emscripten8internal14getLightTypeIDI10maxiSampleEEPKvRKT_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (22064|0);
}
function __ZN10emscripten8internal11LightTypeIDIPK10maxiSampleE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (22160|0);
}
function __ZN10emscripten8internal11LightTypeIDIP10maxiSampleE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (22048|0);
}
function __ZN10emscripten8internal11LightTypeIDI10maxiSampleE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (22064|0);
}
function __ZN10emscripten8internal11BindingTypeIPK10maxiLagExpIdEE12fromWireTypeES5_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJdNS0_17AllowedRawPointerIK10maxiLagExpIdEEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (25924|0);
}
function __ZN10emscripten8internal11BindingTypeIP10maxiLagExpIdEE12fromWireTypeES4_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerI10maxiLagExpIdEEEdEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (25932|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerI10maxiLagExpIdEEEddEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (13616|0);
}
function __ZNSt3__210shared_ptrI10maxiLagExpIdEE11make_sharedIJEEES3_DpOT_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = (__Znwm(40)|0);
 $2 = ((($1)) + 4|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($1)) + 8|0);
 HEAP32[$3>>2] = 0;
 HEAP32[$1>>2] = (25952);
 $4 = ((($1)) + 16|0);
 __THREW__ = 0;
 invoke_vi(305,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $8 = ___cxa_find_matching_catch_2()|0;
  $9 = (getTempRet0() | 0);
  __ZNSt3__214__shared_countD2Ev($1);
  __ZdlPv($1);
  ___resumeException($8|0);
  // unreachable;
 } else {
  $7 = ((($0)) + 4|0);
  HEAP32[$0>>2] = $4;
  HEAP32[$7>>2] = $1;
  HEAP32[$vararg_buffer>>2] = $4;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $4;
  __ZNSt3__210shared_ptrI10maxiLagExpIdEE18__enable_weak_thisEz($0,$vararg_buffer);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__210shared_ptrI10maxiLagExpIdEE18__enable_weak_thisEz($0,$varargs) {
 $0 = $0|0;
 $varargs = $varargs|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__220__shared_ptr_emplaceI10maxiLagExpIdENS_9allocatorIS2_EEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__214__shared_countD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__220__shared_ptr_emplaceI10maxiLagExpIdENS_9allocatorIS2_EEE16__on_zero_sharedEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__220__shared_ptr_emplaceI10maxiLagExpIdENS_9allocatorIS2_EEE21__on_zero_shared_weakEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZN10emscripten8internal18GenericBindingTypeINSt3__210shared_ptrI10maxiLagExpIdEEEE10toWireTypeEOS6_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $2 = HEAP32[$0>>2]|0;
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 4|0);
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$3>>2] = $5;
 HEAP32[$0>>2] = 0;
 HEAP32[$4>>2] = 0;
 return ($1|0);
}
function __ZNSt3__210shared_ptrI10maxiLagExpIdEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  return;
 }
 $4 = ((($2)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + -1)|0;
 HEAP32[$4>>2] = $6;
 $7 = ($5|0)==(0);
 if (!($7)) {
  return;
 }
 $8 = HEAP32[$2>>2]|0;
 $9 = ((($8)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 FUNCTION_TABLE_vi[$10 & 511]($2);
 __ZNSt3__219__shared_weak_count14__release_weakEv($2);
 return;
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNSt3__210shared_ptrI10maxiLagExpIdEEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (25972|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiLagExpIdEEEE11val_deleterC2ENS_3valE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valC2IRS0_EEOT_($0,$1);
 return;
}
function __ZNSt3__210shared_ptrI10maxiLagExpIdEEC2IS2_N10emscripten15smart_ptr_traitIS3_E11val_deleterEEEPT_T0_NS_9enable_ifIXsr14is_convertibleISA_PS2_EE5valueENS3_5__natEE4typeE($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$02$i = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $4 = sp + 16|0;
 $5 = sp + 8|0;
 HEAP32[$0>>2] = $1;
 __THREW__ = 0;
 $6 = (invoke_ii(167,20)|0);
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $25 = ___cxa_find_matching_catch_3(0|0)|0;
  $26 = (getTempRet0() | 0);
  $$1 = $25;
 } else {
  __THREW__ = 0;
  invoke_vii(135,($5|0),($2|0));
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  if ($10) {
   $27 = ___cxa_find_matching_catch_3(0|0)|0;
   $28 = (getTempRet0() | 0);
   $$0 = $27;
  } else {
   $11 = $1;
   $12 = ((($6)) + 4|0);
   HEAP32[$12>>2] = 0;
   $13 = ((($6)) + 8|0);
   HEAP32[$13>>2] = 0;
   HEAP32[$6>>2] = (25984);
   HEAP32[$4>>2] = $11;
   $14 = ((($4)) + 4|0);
   __THREW__ = 0;
   invoke_vii(136,($14|0),($5|0));
   $15 = __THREW__; __THREW__ = 0;
   $16 = $15&1;
   do {
    if ($16) {
     $20 = ___cxa_find_matching_catch_3(0|0)|0;
     $21 = (getTempRet0() | 0);
     $$02$i = $20;
    } else {
     $17 = ((($6)) + 12|0);
     __THREW__ = 0;
     invoke_vii(137,($17|0),($4|0));
     $18 = __THREW__; __THREW__ = 0;
     $19 = $18&1;
     if ($19) {
      $22 = ___cxa_find_matching_catch_3(0|0)|0;
      $23 = (getTempRet0() | 0);
      __ZNSt3__217__compressed_pairIP10maxiLagExpIdEN10emscripten15smart_ptr_traitINS_10shared_ptrIS2_EEE11val_deleterEED2Ev($4);
      $$02$i = $22;
      break;
     } else {
      __ZNSt3__217__compressed_pairIP10maxiLagExpIdEN10emscripten15smart_ptr_traitINS_10shared_ptrIS2_EEE11val_deleterEED2Ev($4);
      $24 = ((($0)) + 4|0);
      HEAP32[$24>>2] = $6;
      __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiLagExpIdEEEE11val_deleterD2Ev($5);
      HEAP32[$vararg_buffer>>2] = $1;
      $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
      HEAP32[$vararg_ptr1>>2] = $1;
      __ZNSt3__210shared_ptrI10maxiLagExpIdEE18__enable_weak_thisEz($0,$vararg_buffer);
      STACKTOP = sp;return;
     }
    }
   } while(0);
   __ZNSt3__214__shared_countD2Ev($6);
   __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiLagExpIdEEEE11val_deleterD2Ev($5);
   $$0 = $$02$i;
  }
  __ZdlPv($6);
  $$1 = $$0;
 }
 (___cxa_begin_catch(($$1|0))|0);
 __THREW__ = 0;
 invoke_vii(138,($2|0),($1|0));
 $29 = __THREW__; __THREW__ = 0;
 $30 = $29&1;
 if (!($30)) {
  __THREW__ = 0;
  invoke_v(3);
  $31 = __THREW__; __THREW__ = 0;
 }
 $32 = ___cxa_find_matching_catch_2()|0;
 $33 = (getTempRet0() | 0);
 __THREW__ = 0;
 invoke_v(2);
 $34 = __THREW__; __THREW__ = 0;
 $35 = $34&1;
 if ($35) {
  $36 = ___cxa_find_matching_catch_3(0|0)|0;
  $37 = (getTempRet0() | 0);
  ___clang_call_terminate($36);
  // unreachable;
 } else {
  ___resumeException($32|0);
  // unreachable;
 }
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiLagExpIdEEEE11val_deleterD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valD2Ev($0);
 return;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiLagExpIdEEEE11val_deleterC2ERKS7_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valC2ERKS0_($0,$1);
 return;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiLagExpIdEEEE11val_deleterC2EOS7_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valC2EOS0_($0,$1);
 return;
}
function __ZNSt3__217__compressed_pairIP10maxiLagExpIdEN10emscripten15smart_ptr_traitINS_10shared_ptrIS2_EEE11val_deleterEEC2EOSA_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = ((($0)) + 4|0);
 $4 = ((($1)) + 4|0);
 __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI10maxiLagExpIdEEEE11val_deleterELi1ELb0EEC2EOS9_($3,$4);
 return;
}
function __ZNSt3__217__compressed_pairIP10maxiLagExpIdEN10emscripten15smart_ptr_traitINS_10shared_ptrIS2_EEE11val_deleterEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI10maxiLagExpIdEEEE11val_deleterELi1ELb0EED2Ev($1);
 return;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiLagExpIdEEEE11val_deleterclEPKv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = sp + 4|0;
 __ZNK10emscripten3valclIJEEES0_DpOT_($2,$0);
 __ZN10emscripten3valD2Ev($2);
 __ZN10emscripten3val9undefinedEv($3);
 __THREW__ = 0;
 (invoke_iii(71,($0|0),($3|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch_2()|0;
  $7 = (getTempRet0() | 0);
  __ZN10emscripten3valD2Ev($3);
  ___resumeException($6|0);
  // unreachable;
 } else {
  __ZN10emscripten3valD2Ev($3);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI10maxiLagExpIdEEEE11val_deleterELi1ELb0EED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiLagExpIdEEEE11val_deleterD2Ev($0);
 return;
}
function __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI10maxiLagExpIdEEEE11val_deleterELi1ELb0EEC2EOS9_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiLagExpIdEEEE11val_deleterC2EOS7_($0,$1);
 return;
}
function __ZNSt3__220__shared_ptr_pointerIP10maxiLagExpIdEN10emscripten15smart_ptr_traitINS_10shared_ptrIS2_EEE11val_deleterENS_9allocatorIS2_EEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (25984);
 $1 = ((($0)) + 12|0);
 __ZNSt3__222__compressed_pair_elemINS_17__compressed_pairIP10maxiLagExpIdEN10emscripten15smart_ptr_traitINS_10shared_ptrIS3_EEE11val_deleterEEELi0ELb0EED2Ev($1);
 __ZNSt3__214__shared_countD2Ev($0);
 return;
}
function __ZNSt3__220__shared_ptr_pointerIP10maxiLagExpIdEN10emscripten15smart_ptr_traitINS_10shared_ptrIS2_EEE11val_deleterENS_9allocatorIS2_EEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__220__shared_ptr_pointerIP10maxiLagExpIdEN10emscripten15smart_ptr_traitINS_10shared_ptrIS2_EEE11val_deleterENS_9allocatorIS2_EEED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__220__shared_ptr_pointerIP10maxiLagExpIdEN10emscripten15smart_ptr_traitINS_10shared_ptrIS2_EEE11val_deleterENS_9allocatorIS2_EEE16__on_zero_sharedEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 16|0);
 $2 = ((($0)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 __THREW__ = 0;
 invoke_vii(138,($1|0),($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch_3(0|0)|0;
  $7 = (getTempRet0() | 0);
  ___clang_call_terminate($6);
  // unreachable;
 } else {
  __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiLagExpIdEEEE11val_deleterD2Ev($1);
  return;
 }
}
function __ZNKSt3__220__shared_ptr_pointerIP10maxiLagExpIdEN10emscripten15smart_ptr_traitINS_10shared_ptrIS2_EEE11val_deleterENS_9allocatorIS2_EEE13__get_deleterERKSt9type_info($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(36746|0);
 $5 = ((($0)) + 16|0);
 $6 = $4 ? $5 : 0;
 return ($6|0);
}
function __ZNSt3__220__shared_ptr_pointerIP10maxiLagExpIdEN10emscripten15smart_ptr_traitINS_10shared_ptrIS2_EEE11val_deleterENS_9allocatorIS2_EEE21__on_zero_shared_weakEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZNSt3__222__compressed_pair_elemINS_17__compressed_pairIP10maxiLagExpIdEN10emscripten15smart_ptr_traitINS_10shared_ptrIS3_EEE11val_deleterEEELi0ELb0EED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__217__compressed_pairIP10maxiLagExpIdEN10emscripten15smart_ptr_traitINS_10shared_ptrIS2_EEE11val_deleterEED2Ev($0);
 return;
}
function __ZN10emscripten8internal11LightTypeIDINSt3__210shared_ptrI10maxiLagExpIdEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (22272|0);
}
function __ZN10emscripten8internal14getLightTypeIDI10maxiLagExpIdEEEPKvRKT_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (22232|0);
}
function __ZN10emscripten8internal11LightTypeIDIPK10maxiLagExpIdEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (22216|0);
}
function __ZN10emscripten8internal11LightTypeIDIP10maxiLagExpIdEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (22240|0);
}
function __ZN10emscripten8internal11LightTypeIDI10maxiLagExpIdEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (22232|0);
}
function __ZN10emscripten8internal11BindingTypeIP7maxiMixE12fromWireTypeES3_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerI7maxiMixEEdRNSt3__26vectorIdNS6_9allocatorIdEEEEdddEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (13632|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerI7maxiMixEEdRNSt3__26vectorIdNS6_9allocatorIdEEEEddEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (13664|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerI7maxiMixEEdRNSt3__26vectorIdNS6_9allocatorIdEEEEdEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (13696|0);
}
function __ZNSt3__210shared_ptrI7maxiMixE11make_sharedIJEEES2_DpOT_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = (__Znwm(136)|0);
 $2 = ((($1)) + 4|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($1)) + 8|0);
 HEAP32[$3>>2] = 0;
 HEAP32[$1>>2] = (26012);
 $4 = ((($1)) + 16|0);
 dest=$4; stop=dest+120|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $5 = ((($0)) + 4|0);
 $6 = ((($1)) + 16|0);
 HEAP32[$0>>2] = $6;
 HEAP32[$5>>2] = $1;
 HEAP32[$vararg_buffer>>2] = $6;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $6;
 __ZNSt3__210shared_ptrI7maxiMixE18__enable_weak_thisEz($0,$vararg_buffer);
 STACKTOP = sp;return;
}
function __ZNSt3__210shared_ptrI7maxiMixE18__enable_weak_thisEz($0,$varargs) {
 $0 = $0|0;
 $varargs = $varargs|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__220__shared_ptr_emplaceI7maxiMixNS_9allocatorIS1_EEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__214__shared_countD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__220__shared_ptr_emplaceI7maxiMixNS_9allocatorIS1_EEE16__on_zero_sharedEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__220__shared_ptr_emplaceI7maxiMixNS_9allocatorIS1_EEE21__on_zero_shared_weakEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZN10emscripten8internal18GenericBindingTypeINSt3__210shared_ptrI7maxiMixEEE10toWireTypeEOS5_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $2 = HEAP32[$0>>2]|0;
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 4|0);
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$3>>2] = $5;
 HEAP32[$0>>2] = 0;
 HEAP32[$4>>2] = 0;
 return ($1|0);
}
function __ZNSt3__210shared_ptrI7maxiMixED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  return;
 }
 $4 = ((($2)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + -1)|0;
 HEAP32[$4>>2] = $6;
 $7 = ($5|0)==(0);
 if (!($7)) {
  return;
 }
 $8 = HEAP32[$2>>2]|0;
 $9 = ((($8)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 FUNCTION_TABLE_vi[$10 & 511]($2);
 __ZNSt3__219__shared_weak_count14__release_weakEv($2);
 return;
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNSt3__210shared_ptrI7maxiMixEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (26032|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiMixEEE11val_deleterC2ENS_3valE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valC2IRS0_EEOT_($0,$1);
 return;
}
function __ZNSt3__210shared_ptrI7maxiMixEC2IS1_N10emscripten15smart_ptr_traitIS2_E11val_deleterEEEPT_T0_NS_9enable_ifIXsr14is_convertibleIS9_PS1_EE5valueENS2_5__natEE4typeE($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$02$i = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $4 = sp + 16|0;
 $5 = sp + 8|0;
 HEAP32[$0>>2] = $1;
 __THREW__ = 0;
 $6 = (invoke_ii(167,20)|0);
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $25 = ___cxa_find_matching_catch_3(0|0)|0;
  $26 = (getTempRet0() | 0);
  $$1 = $25;
 } else {
  __THREW__ = 0;
  invoke_vii(139,($5|0),($2|0));
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  if ($10) {
   $27 = ___cxa_find_matching_catch_3(0|0)|0;
   $28 = (getTempRet0() | 0);
   $$0 = $27;
  } else {
   $11 = $1;
   $12 = ((($6)) + 4|0);
   HEAP32[$12>>2] = 0;
   $13 = ((($6)) + 8|0);
   HEAP32[$13>>2] = 0;
   HEAP32[$6>>2] = (26044);
   HEAP32[$4>>2] = $11;
   $14 = ((($4)) + 4|0);
   __THREW__ = 0;
   invoke_vii(140,($14|0),($5|0));
   $15 = __THREW__; __THREW__ = 0;
   $16 = $15&1;
   do {
    if ($16) {
     $20 = ___cxa_find_matching_catch_3(0|0)|0;
     $21 = (getTempRet0() | 0);
     $$02$i = $20;
    } else {
     $17 = ((($6)) + 12|0);
     __THREW__ = 0;
     invoke_vii(141,($17|0),($4|0));
     $18 = __THREW__; __THREW__ = 0;
     $19 = $18&1;
     if ($19) {
      $22 = ___cxa_find_matching_catch_3(0|0)|0;
      $23 = (getTempRet0() | 0);
      __ZNSt3__217__compressed_pairIP7maxiMixN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEED2Ev($4);
      $$02$i = $22;
      break;
     } else {
      __ZNSt3__217__compressed_pairIP7maxiMixN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEED2Ev($4);
      $24 = ((($0)) + 4|0);
      HEAP32[$24>>2] = $6;
      __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiMixEEE11val_deleterD2Ev($5);
      HEAP32[$vararg_buffer>>2] = $1;
      $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
      HEAP32[$vararg_ptr1>>2] = $1;
      __ZNSt3__210shared_ptrI7maxiMixE18__enable_weak_thisEz($0,$vararg_buffer);
      STACKTOP = sp;return;
     }
    }
   } while(0);
   __ZNSt3__214__shared_countD2Ev($6);
   __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiMixEEE11val_deleterD2Ev($5);
   $$0 = $$02$i;
  }
  __ZdlPv($6);
  $$1 = $$0;
 }
 (___cxa_begin_catch(($$1|0))|0);
 __THREW__ = 0;
 invoke_vii(142,($2|0),($1|0));
 $29 = __THREW__; __THREW__ = 0;
 $30 = $29&1;
 if (!($30)) {
  __THREW__ = 0;
  invoke_v(3);
  $31 = __THREW__; __THREW__ = 0;
 }
 $32 = ___cxa_find_matching_catch_2()|0;
 $33 = (getTempRet0() | 0);
 __THREW__ = 0;
 invoke_v(2);
 $34 = __THREW__; __THREW__ = 0;
 $35 = $34&1;
 if ($35) {
  $36 = ___cxa_find_matching_catch_3(0|0)|0;
  $37 = (getTempRet0() | 0);
  ___clang_call_terminate($36);
  // unreachable;
 } else {
  ___resumeException($32|0);
  // unreachable;
 }
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiMixEEE11val_deleterD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valD2Ev($0);
 return;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiMixEEE11val_deleterC2ERKS6_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valC2ERKS0_($0,$1);
 return;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiMixEEE11val_deleterC2EOS6_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valC2EOS0_($0,$1);
 return;
}
function __ZNSt3__217__compressed_pairIP7maxiMixN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEEC2EOS9_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = ((($0)) + 4|0);
 $4 = ((($1)) + 4|0);
 __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI7maxiMixEEE11val_deleterELi1ELb0EEC2EOS8_($3,$4);
 return;
}
function __ZNSt3__217__compressed_pairIP7maxiMixN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI7maxiMixEEE11val_deleterELi1ELb0EED2Ev($1);
 return;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiMixEEE11val_deleterclEPKv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = sp + 4|0;
 __ZNK10emscripten3valclIJEEES0_DpOT_($2,$0);
 __ZN10emscripten3valD2Ev($2);
 __ZN10emscripten3val9undefinedEv($3);
 __THREW__ = 0;
 (invoke_iii(71,($0|0),($3|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch_2()|0;
  $7 = (getTempRet0() | 0);
  __ZN10emscripten3valD2Ev($3);
  ___resumeException($6|0);
  // unreachable;
 } else {
  __ZN10emscripten3valD2Ev($3);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI7maxiMixEEE11val_deleterELi1ELb0EED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiMixEEE11val_deleterD2Ev($0);
 return;
}
function __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI7maxiMixEEE11val_deleterELi1ELb0EEC2EOS8_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiMixEEE11val_deleterC2EOS6_($0,$1);
 return;
}
function __ZNSt3__220__shared_ptr_pointerIP7maxiMixN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (26044);
 $1 = ((($0)) + 12|0);
 __ZNSt3__222__compressed_pair_elemINS_17__compressed_pairIP7maxiMixN10emscripten15smart_ptr_traitINS_10shared_ptrIS2_EEE11val_deleterEEELi0ELb0EED2Ev($1);
 __ZNSt3__214__shared_countD2Ev($0);
 return;
}
function __ZNSt3__220__shared_ptr_pointerIP7maxiMixN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__220__shared_ptr_pointerIP7maxiMixN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__220__shared_ptr_pointerIP7maxiMixN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE16__on_zero_sharedEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 16|0);
 $2 = ((($0)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 __THREW__ = 0;
 invoke_vii(142,($1|0),($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch_3(0|0)|0;
  $7 = (getTempRet0() | 0);
  ___clang_call_terminate($6);
  // unreachable;
 } else {
  __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiMixEEE11val_deleterD2Ev($1);
  return;
 }
}
function __ZNKSt3__220__shared_ptr_pointerIP7maxiMixN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE13__get_deleterERKSt9type_info($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(37099|0);
 $5 = ((($0)) + 16|0);
 $6 = $4 ? $5 : 0;
 return ($6|0);
}
function __ZNSt3__220__shared_ptr_pointerIP7maxiMixN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE21__on_zero_shared_weakEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZNSt3__222__compressed_pair_elemINS_17__compressed_pairIP7maxiMixN10emscripten15smart_ptr_traitINS_10shared_ptrIS2_EEE11val_deleterEEELi0ELb0EED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__217__compressed_pairIP7maxiMixN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEED2Ev($0);
 return;
}
function __ZN10emscripten8internal11LightTypeIDINSt3__210shared_ptrI7maxiMixEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (22336|0);
}
function __ZN10emscripten8internal14getLightTypeIDI7maxiMixEEPKvRKT_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (22312|0);
}
function __ZN10emscripten8internal11LightTypeIDIPK7maxiMixE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (22360|0);
}
function __ZN10emscripten8internal11LightTypeIDIP7maxiMixE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (22296|0);
}
function __ZN10emscripten8internal11LightTypeIDI7maxiMixE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (22312|0);
}
function __ZN10emscripten8internal10getContextIM10maxiFilterFvdEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIM10maxiFilterKFdvEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal11BindingTypeIP10maxiFilterE12fromWireTypeES3_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJdNS0_17AllowedRawPointerI10maxiFilterEEddEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (13728|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJdNS0_17AllowedRawPointerI10maxiFilterEEdddEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (13744|0);
}
function __ZNSt3__210shared_ptrI10maxiFilterE11make_sharedIJEEES2_DpOT_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = (__Znwm(256)|0);
 $2 = ((($1)) + 4|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($1)) + 8|0);
 HEAP32[$3>>2] = 0;
 HEAP32[$1>>2] = (26072);
 $4 = ((($1)) + 16|0);
 __ZN10maxiFilterC2Ev($4);
 $5 = ((($0)) + 4|0);
 HEAP32[$0>>2] = $4;
 HEAP32[$5>>2] = $1;
 HEAP32[$vararg_buffer>>2] = $4;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $4;
 __ZNSt3__210shared_ptrI10maxiFilterE18__enable_weak_thisEz($0,$vararg_buffer);
 STACKTOP = sp;return;
}
function __ZNSt3__210shared_ptrI10maxiFilterE18__enable_weak_thisEz($0,$varargs) {
 $0 = $0|0;
 $varargs = $varargs|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__220__shared_ptr_emplaceI10maxiFilterNS_9allocatorIS1_EEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__214__shared_countD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__220__shared_ptr_emplaceI10maxiFilterNS_9allocatorIS1_EEE16__on_zero_sharedEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__220__shared_ptr_emplaceI10maxiFilterNS_9allocatorIS1_EEE21__on_zero_shared_weakEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZN10emscripten8internal18GenericBindingTypeINSt3__210shared_ptrI10maxiFilterEEE10toWireTypeEOS5_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $2 = HEAP32[$0>>2]|0;
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 4|0);
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$3>>2] = $5;
 HEAP32[$0>>2] = 0;
 HEAP32[$4>>2] = 0;
 return ($1|0);
}
function __ZNSt3__210shared_ptrI10maxiFilterED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  return;
 }
 $4 = ((($2)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + -1)|0;
 HEAP32[$4>>2] = $6;
 $7 = ($5|0)==(0);
 if (!($7)) {
  return;
 }
 $8 = HEAP32[$2>>2]|0;
 $9 = ((($8)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 FUNCTION_TABLE_vi[$10 & 511]($2);
 __ZNSt3__219__shared_weak_count14__release_weakEv($2);
 return;
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNSt3__210shared_ptrI10maxiFilterEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (26092|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiFilterEEE11val_deleterC2ENS_3valE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valC2IRS0_EEOT_($0,$1);
 return;
}
function __ZNSt3__210shared_ptrI10maxiFilterEC2IS1_N10emscripten15smart_ptr_traitIS2_E11val_deleterEEEPT_T0_NS_9enable_ifIXsr14is_convertibleIS9_PS1_EE5valueENS2_5__natEE4typeE($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$02$i = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $4 = sp + 16|0;
 $5 = sp + 8|0;
 HEAP32[$0>>2] = $1;
 __THREW__ = 0;
 $6 = (invoke_ii(167,20)|0);
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $25 = ___cxa_find_matching_catch_3(0|0)|0;
  $26 = (getTempRet0() | 0);
  $$1 = $25;
 } else {
  __THREW__ = 0;
  invoke_vii(143,($5|0),($2|0));
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  if ($10) {
   $27 = ___cxa_find_matching_catch_3(0|0)|0;
   $28 = (getTempRet0() | 0);
   $$0 = $27;
  } else {
   $11 = $1;
   $12 = ((($6)) + 4|0);
   HEAP32[$12>>2] = 0;
   $13 = ((($6)) + 8|0);
   HEAP32[$13>>2] = 0;
   HEAP32[$6>>2] = (26104);
   HEAP32[$4>>2] = $11;
   $14 = ((($4)) + 4|0);
   __THREW__ = 0;
   invoke_vii(144,($14|0),($5|0));
   $15 = __THREW__; __THREW__ = 0;
   $16 = $15&1;
   do {
    if ($16) {
     $20 = ___cxa_find_matching_catch_3(0|0)|0;
     $21 = (getTempRet0() | 0);
     $$02$i = $20;
    } else {
     $17 = ((($6)) + 12|0);
     __THREW__ = 0;
     invoke_vii(145,($17|0),($4|0));
     $18 = __THREW__; __THREW__ = 0;
     $19 = $18&1;
     if ($19) {
      $22 = ___cxa_find_matching_catch_3(0|0)|0;
      $23 = (getTempRet0() | 0);
      __ZNSt3__217__compressed_pairIP10maxiFilterN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEED2Ev($4);
      $$02$i = $22;
      break;
     } else {
      __ZNSt3__217__compressed_pairIP10maxiFilterN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEED2Ev($4);
      $24 = ((($0)) + 4|0);
      HEAP32[$24>>2] = $6;
      __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiFilterEEE11val_deleterD2Ev($5);
      HEAP32[$vararg_buffer>>2] = $1;
      $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
      HEAP32[$vararg_ptr1>>2] = $1;
      __ZNSt3__210shared_ptrI10maxiFilterE18__enable_weak_thisEz($0,$vararg_buffer);
      STACKTOP = sp;return;
     }
    }
   } while(0);
   __ZNSt3__214__shared_countD2Ev($6);
   __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiFilterEEE11val_deleterD2Ev($5);
   $$0 = $$02$i;
  }
  __ZdlPv($6);
  $$1 = $$0;
 }
 (___cxa_begin_catch(($$1|0))|0);
 __THREW__ = 0;
 invoke_vii(146,($2|0),($1|0));
 $29 = __THREW__; __THREW__ = 0;
 $30 = $29&1;
 if (!($30)) {
  __THREW__ = 0;
  invoke_v(3);
  $31 = __THREW__; __THREW__ = 0;
 }
 $32 = ___cxa_find_matching_catch_2()|0;
 $33 = (getTempRet0() | 0);
 __THREW__ = 0;
 invoke_v(2);
 $34 = __THREW__; __THREW__ = 0;
 $35 = $34&1;
 if ($35) {
  $36 = ___cxa_find_matching_catch_3(0|0)|0;
  $37 = (getTempRet0() | 0);
  ___clang_call_terminate($36);
  // unreachable;
 } else {
  ___resumeException($32|0);
  // unreachable;
 }
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiFilterEEE11val_deleterD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valD2Ev($0);
 return;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiFilterEEE11val_deleterC2ERKS6_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valC2ERKS0_($0,$1);
 return;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiFilterEEE11val_deleterC2EOS6_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valC2EOS0_($0,$1);
 return;
}
function __ZNSt3__217__compressed_pairIP10maxiFilterN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEEC2EOS9_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = ((($0)) + 4|0);
 $4 = ((($1)) + 4|0);
 __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI10maxiFilterEEE11val_deleterELi1ELb0EEC2EOS8_($3,$4);
 return;
}
function __ZNSt3__217__compressed_pairIP10maxiFilterN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI10maxiFilterEEE11val_deleterELi1ELb0EED2Ev($1);
 return;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiFilterEEE11val_deleterclEPKv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = sp + 4|0;
 __ZNK10emscripten3valclIJEEES0_DpOT_($2,$0);
 __ZN10emscripten3valD2Ev($2);
 __ZN10emscripten3val9undefinedEv($3);
 __THREW__ = 0;
 (invoke_iii(71,($0|0),($3|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch_2()|0;
  $7 = (getTempRet0() | 0);
  __ZN10emscripten3valD2Ev($3);
  ___resumeException($6|0);
  // unreachable;
 } else {
  __ZN10emscripten3valD2Ev($3);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI10maxiFilterEEE11val_deleterELi1ELb0EED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiFilterEEE11val_deleterD2Ev($0);
 return;
}
function __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI10maxiFilterEEE11val_deleterELi1ELb0EEC2EOS8_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiFilterEEE11val_deleterC2EOS6_($0,$1);
 return;
}
function __ZNSt3__220__shared_ptr_pointerIP10maxiFilterN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (26104);
 $1 = ((($0)) + 12|0);
 __ZNSt3__222__compressed_pair_elemINS_17__compressed_pairIP10maxiFilterN10emscripten15smart_ptr_traitINS_10shared_ptrIS2_EEE11val_deleterEEELi0ELb0EED2Ev($1);
 __ZNSt3__214__shared_countD2Ev($0);
 return;
}
function __ZNSt3__220__shared_ptr_pointerIP10maxiFilterN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__220__shared_ptr_pointerIP10maxiFilterN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__220__shared_ptr_pointerIP10maxiFilterN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE16__on_zero_sharedEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 16|0);
 $2 = ((($0)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 __THREW__ = 0;
 invoke_vii(146,($1|0),($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch_3(0|0)|0;
  $7 = (getTempRet0() | 0);
  ___clang_call_terminate($6);
  // unreachable;
 } else {
  __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiFilterEEE11val_deleterD2Ev($1);
  return;
 }
}
function __ZNKSt3__220__shared_ptr_pointerIP10maxiFilterN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE13__get_deleterERKSt9type_info($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(37441|0);
 $5 = ((($0)) + 16|0);
 $6 = $4 ? $5 : 0;
 return ($6|0);
}
function __ZNSt3__220__shared_ptr_pointerIP10maxiFilterN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE21__on_zero_shared_weakEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZNSt3__222__compressed_pair_elemINS_17__compressed_pairIP10maxiFilterN10emscripten15smart_ptr_traitINS_10shared_ptrIS2_EEE11val_deleterEEELi0ELb0EED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__217__compressed_pairIP10maxiFilterN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEED2Ev($0);
 return;
}
function __ZN10emscripten8internal11LightTypeIDINSt3__210shared_ptrI10maxiFilterEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (22416|0);
}
function __ZN10emscripten8internal14getLightTypeIDI10maxiFilterEEPKvRKT_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (22392|0);
}
function __ZN10emscripten8internal11LightTypeIDIPK10maxiFilterE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (22440|0);
}
function __ZN10emscripten8internal11LightTypeIDIP10maxiFilterE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (22376|0);
}
function __ZN10emscripten8internal11LightTypeIDI10maxiFilterE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (22392|0);
}
function __ZN10emscripten8internal11BindingTypeIP13maxiDelaylineE12fromWireTypeES3_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJdNS0_17AllowedRawPointerI13maxiDelaylineEEdidiEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (13776|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJdNS0_17AllowedRawPointerI13maxiDelaylineEEdidEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (13808|0);
}
function __ZNSt3__210shared_ptrI13maxiDelaylineE11make_sharedIJEEES2_DpOT_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = (__Znwm(705656)|0);
 $2 = ((($1)) + 4|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($1)) + 8|0);
 HEAP32[$3>>2] = 0;
 HEAP32[$1>>2] = (26132);
 $4 = ((($1)) + 16|0);
 __ZN13maxiDelaylineC2Ev($4);
 $5 = ((($0)) + 4|0);
 HEAP32[$0>>2] = $4;
 HEAP32[$5>>2] = $1;
 HEAP32[$vararg_buffer>>2] = $4;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $4;
 __ZNSt3__210shared_ptrI13maxiDelaylineE18__enable_weak_thisEz($0,$vararg_buffer);
 STACKTOP = sp;return;
}
function __ZNSt3__210shared_ptrI13maxiDelaylineE18__enable_weak_thisEz($0,$varargs) {
 $0 = $0|0;
 $varargs = $varargs|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__220__shared_ptr_emplaceI13maxiDelaylineNS_9allocatorIS1_EEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__214__shared_countD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__220__shared_ptr_emplaceI13maxiDelaylineNS_9allocatorIS1_EEE16__on_zero_sharedEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__220__shared_ptr_emplaceI13maxiDelaylineNS_9allocatorIS1_EEE21__on_zero_shared_weakEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZN10emscripten8internal18GenericBindingTypeINSt3__210shared_ptrI13maxiDelaylineEEE10toWireTypeEOS5_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $2 = HEAP32[$0>>2]|0;
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 4|0);
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$3>>2] = $5;
 HEAP32[$0>>2] = 0;
 HEAP32[$4>>2] = 0;
 return ($1|0);
}
function __ZNSt3__210shared_ptrI13maxiDelaylineED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  return;
 }
 $4 = ((($2)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + -1)|0;
 HEAP32[$4>>2] = $6;
 $7 = ($5|0)==(0);
 if (!($7)) {
  return;
 }
 $8 = HEAP32[$2>>2]|0;
 $9 = ((($8)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 FUNCTION_TABLE_vi[$10 & 511]($2);
 __ZNSt3__219__shared_weak_count14__release_weakEv($2);
 return;
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNSt3__210shared_ptrI13maxiDelaylineEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (26152|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI13maxiDelaylineEEE11val_deleterC2ENS_3valE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valC2IRS0_EEOT_($0,$1);
 return;
}
function __ZNSt3__210shared_ptrI13maxiDelaylineEC2IS1_N10emscripten15smart_ptr_traitIS2_E11val_deleterEEEPT_T0_NS_9enable_ifIXsr14is_convertibleIS9_PS1_EE5valueENS2_5__natEE4typeE($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$02$i = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $4 = sp + 16|0;
 $5 = sp + 8|0;
 HEAP32[$0>>2] = $1;
 __THREW__ = 0;
 $6 = (invoke_ii(167,20)|0);
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $25 = ___cxa_find_matching_catch_3(0|0)|0;
  $26 = (getTempRet0() | 0);
  $$1 = $25;
 } else {
  __THREW__ = 0;
  invoke_vii(147,($5|0),($2|0));
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  if ($10) {
   $27 = ___cxa_find_matching_catch_3(0|0)|0;
   $28 = (getTempRet0() | 0);
   $$0 = $27;
  } else {
   $11 = $1;
   $12 = ((($6)) + 4|0);
   HEAP32[$12>>2] = 0;
   $13 = ((($6)) + 8|0);
   HEAP32[$13>>2] = 0;
   HEAP32[$6>>2] = (26164);
   HEAP32[$4>>2] = $11;
   $14 = ((($4)) + 4|0);
   __THREW__ = 0;
   invoke_vii(148,($14|0),($5|0));
   $15 = __THREW__; __THREW__ = 0;
   $16 = $15&1;
   do {
    if ($16) {
     $20 = ___cxa_find_matching_catch_3(0|0)|0;
     $21 = (getTempRet0() | 0);
     $$02$i = $20;
    } else {
     $17 = ((($6)) + 12|0);
     __THREW__ = 0;
     invoke_vii(149,($17|0),($4|0));
     $18 = __THREW__; __THREW__ = 0;
     $19 = $18&1;
     if ($19) {
      $22 = ___cxa_find_matching_catch_3(0|0)|0;
      $23 = (getTempRet0() | 0);
      __ZNSt3__217__compressed_pairIP13maxiDelaylineN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEED2Ev($4);
      $$02$i = $22;
      break;
     } else {
      __ZNSt3__217__compressed_pairIP13maxiDelaylineN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEED2Ev($4);
      $24 = ((($0)) + 4|0);
      HEAP32[$24>>2] = $6;
      __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI13maxiDelaylineEEE11val_deleterD2Ev($5);
      HEAP32[$vararg_buffer>>2] = $1;
      $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
      HEAP32[$vararg_ptr1>>2] = $1;
      __ZNSt3__210shared_ptrI13maxiDelaylineE18__enable_weak_thisEz($0,$vararg_buffer);
      STACKTOP = sp;return;
     }
    }
   } while(0);
   __ZNSt3__214__shared_countD2Ev($6);
   __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI13maxiDelaylineEEE11val_deleterD2Ev($5);
   $$0 = $$02$i;
  }
  __ZdlPv($6);
  $$1 = $$0;
 }
 (___cxa_begin_catch(($$1|0))|0);
 __THREW__ = 0;
 invoke_vii(150,($2|0),($1|0));
 $29 = __THREW__; __THREW__ = 0;
 $30 = $29&1;
 if (!($30)) {
  __THREW__ = 0;
  invoke_v(3);
  $31 = __THREW__; __THREW__ = 0;
 }
 $32 = ___cxa_find_matching_catch_2()|0;
 $33 = (getTempRet0() | 0);
 __THREW__ = 0;
 invoke_v(2);
 $34 = __THREW__; __THREW__ = 0;
 $35 = $34&1;
 if ($35) {
  $36 = ___cxa_find_matching_catch_3(0|0)|0;
  $37 = (getTempRet0() | 0);
  ___clang_call_terminate($36);
  // unreachable;
 } else {
  ___resumeException($32|0);
  // unreachable;
 }
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI13maxiDelaylineEEE11val_deleterD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valD2Ev($0);
 return;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI13maxiDelaylineEEE11val_deleterC2ERKS6_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valC2ERKS0_($0,$1);
 return;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI13maxiDelaylineEEE11val_deleterC2EOS6_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valC2EOS0_($0,$1);
 return;
}
function __ZNSt3__217__compressed_pairIP13maxiDelaylineN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEEC2EOS9_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = ((($0)) + 4|0);
 $4 = ((($1)) + 4|0);
 __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI13maxiDelaylineEEE11val_deleterELi1ELb0EEC2EOS8_($3,$4);
 return;
}
function __ZNSt3__217__compressed_pairIP13maxiDelaylineN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI13maxiDelaylineEEE11val_deleterELi1ELb0EED2Ev($1);
 return;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI13maxiDelaylineEEE11val_deleterclEPKv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = sp + 4|0;
 __ZNK10emscripten3valclIJEEES0_DpOT_($2,$0);
 __ZN10emscripten3valD2Ev($2);
 __ZN10emscripten3val9undefinedEv($3);
 __THREW__ = 0;
 (invoke_iii(71,($0|0),($3|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch_2()|0;
  $7 = (getTempRet0() | 0);
  __ZN10emscripten3valD2Ev($3);
  ___resumeException($6|0);
  // unreachable;
 } else {
  __ZN10emscripten3valD2Ev($3);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI13maxiDelaylineEEE11val_deleterELi1ELb0EED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI13maxiDelaylineEEE11val_deleterD2Ev($0);
 return;
}
function __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI13maxiDelaylineEEE11val_deleterELi1ELb0EEC2EOS8_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI13maxiDelaylineEEE11val_deleterC2EOS6_($0,$1);
 return;
}
function __ZNSt3__220__shared_ptr_pointerIP13maxiDelaylineN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (26164);
 $1 = ((($0)) + 12|0);
 __ZNSt3__222__compressed_pair_elemINS_17__compressed_pairIP13maxiDelaylineN10emscripten15smart_ptr_traitINS_10shared_ptrIS2_EEE11val_deleterEEELi0ELb0EED2Ev($1);
 __ZNSt3__214__shared_countD2Ev($0);
 return;
}
function __ZNSt3__220__shared_ptr_pointerIP13maxiDelaylineN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__220__shared_ptr_pointerIP13maxiDelaylineN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__220__shared_ptr_pointerIP13maxiDelaylineN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE16__on_zero_sharedEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 16|0);
 $2 = ((($0)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 __THREW__ = 0;
 invoke_vii(150,($1|0),($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch_3(0|0)|0;
  $7 = (getTempRet0() | 0);
  ___clang_call_terminate($6);
  // unreachable;
 } else {
  __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI13maxiDelaylineEEE11val_deleterD2Ev($1);
  return;
 }
}
function __ZNKSt3__220__shared_ptr_pointerIP13maxiDelaylineN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE13__get_deleterERKSt9type_info($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(37822|0);
 $5 = ((($0)) + 16|0);
 $6 = $4 ? $5 : 0;
 return ($6|0);
}
function __ZNSt3__220__shared_ptr_pointerIP13maxiDelaylineN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE21__on_zero_shared_weakEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZNSt3__222__compressed_pair_elemINS_17__compressed_pairIP13maxiDelaylineN10emscripten15smart_ptr_traitINS_10shared_ptrIS2_EEE11val_deleterEEELi0ELb0EED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__217__compressed_pairIP13maxiDelaylineN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEED2Ev($0);
 return;
}
function __ZN10emscripten8internal11LightTypeIDINSt3__210shared_ptrI13maxiDelaylineEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (22496|0);
}
function __ZN10emscripten8internal14getLightTypeIDI13maxiDelaylineEEPKvRKT_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (22472|0);
}
function __ZN10emscripten8internal11LightTypeIDIPK13maxiDelaylineE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (22520|0);
}
function __ZN10emscripten8internal11LightTypeIDIP13maxiDelaylineE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (22456|0);
}
function __ZN10emscripten8internal11LightTypeIDI13maxiDelaylineE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (22472|0);
}
function __ZN10emscripten8internal10getContextIM12maxiEnvelopeFviEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIM12maxiEnvelopeKFivEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIM12maxiEnvelopeFvdEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIM12maxiEnvelopeKFdvEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal11LightTypeIDIdE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (24928|0);
}
function __ZN10emscripten8internal11BindingTypeIP12maxiEnvelopeE12fromWireTypeES3_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerI12maxiEnvelopeEEidEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (13840|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJdNS0_17AllowedRawPointerI12maxiEnvelopeEEiRNSt3__26vectorIdNS6_9allocatorIdEEEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (13856|0);
}
function __ZNSt3__210shared_ptrI12maxiEnvelopeE11make_sharedIJEEES2_DpOT_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = (__Znwm(72)|0);
 $2 = ((($1)) + 4|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($1)) + 8|0);
 HEAP32[$3>>2] = 0;
 HEAP32[$1>>2] = (26192);
 $4 = ((($1)) + 16|0);
 dest=$4; stop=dest+56|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $5 = ((($0)) + 4|0);
 $6 = ((($1)) + 16|0);
 HEAP32[$0>>2] = $6;
 HEAP32[$5>>2] = $1;
 HEAP32[$vararg_buffer>>2] = $6;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $6;
 __ZNSt3__210shared_ptrI12maxiEnvelopeE18__enable_weak_thisEz($0,$vararg_buffer);
 STACKTOP = sp;return;
}
function __ZNSt3__210shared_ptrI12maxiEnvelopeE18__enable_weak_thisEz($0,$varargs) {
 $0 = $0|0;
 $varargs = $varargs|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__220__shared_ptr_emplaceI12maxiEnvelopeNS_9allocatorIS1_EEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__214__shared_countD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__220__shared_ptr_emplaceI12maxiEnvelopeNS_9allocatorIS1_EEE16__on_zero_sharedEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__220__shared_ptr_emplaceI12maxiEnvelopeNS_9allocatorIS1_EEE21__on_zero_shared_weakEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZN10emscripten8internal18GenericBindingTypeINSt3__210shared_ptrI12maxiEnvelopeEEE10toWireTypeEOS5_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $2 = HEAP32[$0>>2]|0;
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 4|0);
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$3>>2] = $5;
 HEAP32[$0>>2] = 0;
 HEAP32[$4>>2] = 0;
 return ($1|0);
}
function __ZNSt3__210shared_ptrI12maxiEnvelopeED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  return;
 }
 $4 = ((($2)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + -1)|0;
 HEAP32[$4>>2] = $6;
 $7 = ($5|0)==(0);
 if (!($7)) {
  return;
 }
 $8 = HEAP32[$2>>2]|0;
 $9 = ((($8)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 FUNCTION_TABLE_vi[$10 & 511]($2);
 __ZNSt3__219__shared_weak_count14__release_weakEv($2);
 return;
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNSt3__210shared_ptrI12maxiEnvelopeEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (26212|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI12maxiEnvelopeEEE11val_deleterC2ENS_3valE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valC2IRS0_EEOT_($0,$1);
 return;
}
function __ZNSt3__210shared_ptrI12maxiEnvelopeEC2IS1_N10emscripten15smart_ptr_traitIS2_E11val_deleterEEEPT_T0_NS_9enable_ifIXsr14is_convertibleIS9_PS1_EE5valueENS2_5__natEE4typeE($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$02$i = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $4 = sp + 16|0;
 $5 = sp + 8|0;
 HEAP32[$0>>2] = $1;
 __THREW__ = 0;
 $6 = (invoke_ii(167,20)|0);
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $25 = ___cxa_find_matching_catch_3(0|0)|0;
  $26 = (getTempRet0() | 0);
  $$1 = $25;
 } else {
  __THREW__ = 0;
  invoke_vii(151,($5|0),($2|0));
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  if ($10) {
   $27 = ___cxa_find_matching_catch_3(0|0)|0;
   $28 = (getTempRet0() | 0);
   $$0 = $27;
  } else {
   $11 = $1;
   $12 = ((($6)) + 4|0);
   HEAP32[$12>>2] = 0;
   $13 = ((($6)) + 8|0);
   HEAP32[$13>>2] = 0;
   HEAP32[$6>>2] = (26224);
   HEAP32[$4>>2] = $11;
   $14 = ((($4)) + 4|0);
   __THREW__ = 0;
   invoke_vii(152,($14|0),($5|0));
   $15 = __THREW__; __THREW__ = 0;
   $16 = $15&1;
   do {
    if ($16) {
     $20 = ___cxa_find_matching_catch_3(0|0)|0;
     $21 = (getTempRet0() | 0);
     $$02$i = $20;
    } else {
     $17 = ((($6)) + 12|0);
     __THREW__ = 0;
     invoke_vii(153,($17|0),($4|0));
     $18 = __THREW__; __THREW__ = 0;
     $19 = $18&1;
     if ($19) {
      $22 = ___cxa_find_matching_catch_3(0|0)|0;
      $23 = (getTempRet0() | 0);
      __ZNSt3__217__compressed_pairIP12maxiEnvelopeN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEED2Ev($4);
      $$02$i = $22;
      break;
     } else {
      __ZNSt3__217__compressed_pairIP12maxiEnvelopeN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEED2Ev($4);
      $24 = ((($0)) + 4|0);
      HEAP32[$24>>2] = $6;
      __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI12maxiEnvelopeEEE11val_deleterD2Ev($5);
      HEAP32[$vararg_buffer>>2] = $1;
      $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
      HEAP32[$vararg_ptr1>>2] = $1;
      __ZNSt3__210shared_ptrI12maxiEnvelopeE18__enable_weak_thisEz($0,$vararg_buffer);
      STACKTOP = sp;return;
     }
    }
   } while(0);
   __ZNSt3__214__shared_countD2Ev($6);
   __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI12maxiEnvelopeEEE11val_deleterD2Ev($5);
   $$0 = $$02$i;
  }
  __ZdlPv($6);
  $$1 = $$0;
 }
 (___cxa_begin_catch(($$1|0))|0);
 __THREW__ = 0;
 invoke_vii(154,($2|0),($1|0));
 $29 = __THREW__; __THREW__ = 0;
 $30 = $29&1;
 if (!($30)) {
  __THREW__ = 0;
  invoke_v(3);
  $31 = __THREW__; __THREW__ = 0;
 }
 $32 = ___cxa_find_matching_catch_2()|0;
 $33 = (getTempRet0() | 0);
 __THREW__ = 0;
 invoke_v(2);
 $34 = __THREW__; __THREW__ = 0;
 $35 = $34&1;
 if ($35) {
  $36 = ___cxa_find_matching_catch_3(0|0)|0;
  $37 = (getTempRet0() | 0);
  ___clang_call_terminate($36);
  // unreachable;
 } else {
  ___resumeException($32|0);
  // unreachable;
 }
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI12maxiEnvelopeEEE11val_deleterD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valD2Ev($0);
 return;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI12maxiEnvelopeEEE11val_deleterC2ERKS6_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valC2ERKS0_($0,$1);
 return;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI12maxiEnvelopeEEE11val_deleterC2EOS6_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valC2EOS0_($0,$1);
 return;
}
function __ZNSt3__217__compressed_pairIP12maxiEnvelopeN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEEC2EOS9_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = ((($0)) + 4|0);
 $4 = ((($1)) + 4|0);
 __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI12maxiEnvelopeEEE11val_deleterELi1ELb0EEC2EOS8_($3,$4);
 return;
}
function __ZNSt3__217__compressed_pairIP12maxiEnvelopeN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI12maxiEnvelopeEEE11val_deleterELi1ELb0EED2Ev($1);
 return;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI12maxiEnvelopeEEE11val_deleterclEPKv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = sp + 4|0;
 __ZNK10emscripten3valclIJEEES0_DpOT_($2,$0);
 __ZN10emscripten3valD2Ev($2);
 __ZN10emscripten3val9undefinedEv($3);
 __THREW__ = 0;
 (invoke_iii(71,($0|0),($3|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch_2()|0;
  $7 = (getTempRet0() | 0);
  __ZN10emscripten3valD2Ev($3);
  ___resumeException($6|0);
  // unreachable;
 } else {
  __ZN10emscripten3valD2Ev($3);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI12maxiEnvelopeEEE11val_deleterELi1ELb0EED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI12maxiEnvelopeEEE11val_deleterD2Ev($0);
 return;
}
function __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI12maxiEnvelopeEEE11val_deleterELi1ELb0EEC2EOS8_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI12maxiEnvelopeEEE11val_deleterC2EOS6_($0,$1);
 return;
}
function __ZNSt3__220__shared_ptr_pointerIP12maxiEnvelopeN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (26224);
 $1 = ((($0)) + 12|0);
 __ZNSt3__222__compressed_pair_elemINS_17__compressed_pairIP12maxiEnvelopeN10emscripten15smart_ptr_traitINS_10shared_ptrIS2_EEE11val_deleterEEELi0ELb0EED2Ev($1);
 __ZNSt3__214__shared_countD2Ev($0);
 return;
}
function __ZNSt3__220__shared_ptr_pointerIP12maxiEnvelopeN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__220__shared_ptr_pointerIP12maxiEnvelopeN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__220__shared_ptr_pointerIP12maxiEnvelopeN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE16__on_zero_sharedEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 16|0);
 $2 = ((($0)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 __THREW__ = 0;
 invoke_vii(154,($1|0),($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch_3(0|0)|0;
  $7 = (getTempRet0() | 0);
  ___clang_call_terminate($6);
  // unreachable;
 } else {
  __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI12maxiEnvelopeEEE11val_deleterD2Ev($1);
  return;
 }
}
function __ZNKSt3__220__shared_ptr_pointerIP12maxiEnvelopeN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE13__get_deleterERKSt9type_info($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(38205|0);
 $5 = ((($0)) + 16|0);
 $6 = $4 ? $5 : 0;
 return ($6|0);
}
function __ZNSt3__220__shared_ptr_pointerIP12maxiEnvelopeN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE21__on_zero_shared_weakEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZNSt3__222__compressed_pair_elemINS_17__compressed_pairIP12maxiEnvelopeN10emscripten15smart_ptr_traitINS_10shared_ptrIS2_EEE11val_deleterEEELi0ELb0EED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__217__compressed_pairIP12maxiEnvelopeN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEED2Ev($0);
 return;
}
function __ZN10emscripten8internal11LightTypeIDINSt3__210shared_ptrI12maxiEnvelopeEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (22576|0);
}
function __ZN10emscripten8internal14getLightTypeIDI12maxiEnvelopeEEPKvRKT_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (22552|0);
}
function __ZN10emscripten8internal11LightTypeIDIPK12maxiEnvelopeE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (22600|0);
}
function __ZN10emscripten8internal11LightTypeIDIP12maxiEnvelopeE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (22536|0);
}
function __ZN10emscripten8internal11LightTypeIDI12maxiEnvelopeE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (22552|0);
}
function __ZN10emscripten8internal11BindingTypeIP7maxiOscE12fromWireTypeES3_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerI7maxiOscEEdEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (26244|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJdNS0_17AllowedRawPointerI7maxiOscEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (26256|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJdNS0_17AllowedRawPointerI7maxiOscEEddEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (13872|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJdNS0_17AllowedRawPointerI7maxiOscEEdddEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (13888|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJdNS0_17AllowedRawPointerI7maxiOscEEdEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (26264|0);
}
function __ZNSt3__210shared_ptrI7maxiOscE11make_sharedIJEEES2_DpOT_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = (__Znwm(64)|0);
 $2 = ((($1)) + 4|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($1)) + 8|0);
 HEAP32[$3>>2] = 0;
 HEAP32[$1>>2] = (26284);
 $4 = ((($1)) + 16|0);
 __ZN7maxiOscC2Ev($4);
 $5 = ((($0)) + 4|0);
 HEAP32[$0>>2] = $4;
 HEAP32[$5>>2] = $1;
 HEAP32[$vararg_buffer>>2] = $4;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $4;
 __ZNSt3__210shared_ptrI7maxiOscE18__enable_weak_thisEz($0,$vararg_buffer);
 STACKTOP = sp;return;
}
function __ZNSt3__210shared_ptrI7maxiOscE18__enable_weak_thisEz($0,$varargs) {
 $0 = $0|0;
 $varargs = $varargs|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__220__shared_ptr_emplaceI7maxiOscNS_9allocatorIS1_EEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__214__shared_countD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__220__shared_ptr_emplaceI7maxiOscNS_9allocatorIS1_EEE16__on_zero_sharedEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__220__shared_ptr_emplaceI7maxiOscNS_9allocatorIS1_EEE21__on_zero_shared_weakEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZN10emscripten8internal18GenericBindingTypeINSt3__210shared_ptrI7maxiOscEEE10toWireTypeEOS5_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $2 = HEAP32[$0>>2]|0;
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 4|0);
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$3>>2] = $5;
 HEAP32[$0>>2] = 0;
 HEAP32[$4>>2] = 0;
 return ($1|0);
}
function __ZNSt3__210shared_ptrI7maxiOscED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  return;
 }
 $4 = ((($2)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + -1)|0;
 HEAP32[$4>>2] = $6;
 $7 = ($5|0)==(0);
 if (!($7)) {
  return;
 }
 $8 = HEAP32[$2>>2]|0;
 $9 = ((($8)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 FUNCTION_TABLE_vi[$10 & 511]($2);
 __ZNSt3__219__shared_weak_count14__release_weakEv($2);
 return;
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNSt3__210shared_ptrI7maxiOscEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (26304|0);
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiOscEEE11val_deleterC2ENS_3valE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valC2IRS0_EEOT_($0,$1);
 return;
}
function __ZNSt3__210shared_ptrI7maxiOscEC2IS1_N10emscripten15smart_ptr_traitIS2_E11val_deleterEEEPT_T0_NS_9enable_ifIXsr14is_convertibleIS9_PS1_EE5valueENS2_5__natEE4typeE($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$02$i = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $4 = sp + 16|0;
 $5 = sp + 8|0;
 HEAP32[$0>>2] = $1;
 __THREW__ = 0;
 $6 = (invoke_ii(167,20)|0);
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $25 = ___cxa_find_matching_catch_3(0|0)|0;
  $26 = (getTempRet0() | 0);
  $$1 = $25;
 } else {
  __THREW__ = 0;
  invoke_vii(155,($5|0),($2|0));
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  if ($10) {
   $27 = ___cxa_find_matching_catch_3(0|0)|0;
   $28 = (getTempRet0() | 0);
   $$0 = $27;
  } else {
   $11 = $1;
   $12 = ((($6)) + 4|0);
   HEAP32[$12>>2] = 0;
   $13 = ((($6)) + 8|0);
   HEAP32[$13>>2] = 0;
   HEAP32[$6>>2] = (26316);
   HEAP32[$4>>2] = $11;
   $14 = ((($4)) + 4|0);
   __THREW__ = 0;
   invoke_vii(156,($14|0),($5|0));
   $15 = __THREW__; __THREW__ = 0;
   $16 = $15&1;
   do {
    if ($16) {
     $20 = ___cxa_find_matching_catch_3(0|0)|0;
     $21 = (getTempRet0() | 0);
     $$02$i = $20;
    } else {
     $17 = ((($6)) + 12|0);
     __THREW__ = 0;
     invoke_vii(157,($17|0),($4|0));
     $18 = __THREW__; __THREW__ = 0;
     $19 = $18&1;
     if ($19) {
      $22 = ___cxa_find_matching_catch_3(0|0)|0;
      $23 = (getTempRet0() | 0);
      __ZNSt3__217__compressed_pairIP7maxiOscN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEED2Ev($4);
      $$02$i = $22;
      break;
     } else {
      __ZNSt3__217__compressed_pairIP7maxiOscN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEED2Ev($4);
      $24 = ((($0)) + 4|0);
      HEAP32[$24>>2] = $6;
      __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiOscEEE11val_deleterD2Ev($5);
      HEAP32[$vararg_buffer>>2] = $1;
      $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
      HEAP32[$vararg_ptr1>>2] = $1;
      __ZNSt3__210shared_ptrI7maxiOscE18__enable_weak_thisEz($0,$vararg_buffer);
      STACKTOP = sp;return;
     }
    }
   } while(0);
   __ZNSt3__214__shared_countD2Ev($6);
   __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiOscEEE11val_deleterD2Ev($5);
   $$0 = $$02$i;
  }
  __ZdlPv($6);
  $$1 = $$0;
 }
 (___cxa_begin_catch(($$1|0))|0);
 __THREW__ = 0;
 invoke_vii(158,($2|0),($1|0));
 $29 = __THREW__; __THREW__ = 0;
 $30 = $29&1;
 if (!($30)) {
  __THREW__ = 0;
  invoke_v(3);
  $31 = __THREW__; __THREW__ = 0;
 }
 $32 = ___cxa_find_matching_catch_2()|0;
 $33 = (getTempRet0() | 0);
 __THREW__ = 0;
 invoke_v(2);
 $34 = __THREW__; __THREW__ = 0;
 $35 = $34&1;
 if ($35) {
  $36 = ___cxa_find_matching_catch_3(0|0)|0;
  $37 = (getTempRet0() | 0);
  ___clang_call_terminate($36);
  // unreachable;
 } else {
  ___resumeException($32|0);
  // unreachable;
 }
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiOscEEE11val_deleterD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valD2Ev($0);
 return;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiOscEEE11val_deleterC2ERKS6_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valC2ERKS0_($0,$1);
 return;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiOscEEE11val_deleterC2EOS6_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valC2EOS0_($0,$1);
 return;
}
function __ZNSt3__217__compressed_pairIP7maxiOscN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEEC2EOS9_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = ((($0)) + 4|0);
 $4 = ((($1)) + 4|0);
 __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI7maxiOscEEE11val_deleterELi1ELb0EEC2EOS8_($3,$4);
 return;
}
function __ZNSt3__217__compressed_pairIP7maxiOscN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI7maxiOscEEE11val_deleterELi1ELb0EED2Ev($1);
 return;
}
function __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiOscEEE11val_deleterclEPKv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = sp + 4|0;
 __ZNK10emscripten3valclIJEEES0_DpOT_($2,$0);
 __ZN10emscripten3valD2Ev($2);
 __ZN10emscripten3val9undefinedEv($3);
 __THREW__ = 0;
 (invoke_iii(71,($0|0),($3|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch_2()|0;
  $7 = (getTempRet0() | 0);
  __ZN10emscripten3valD2Ev($3);
  ___resumeException($6|0);
  // unreachable;
 } else {
  __ZN10emscripten3valD2Ev($3);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI7maxiOscEEE11val_deleterELi1ELb0EED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiOscEEE11val_deleterD2Ev($0);
 return;
}
function __ZNSt3__222__compressed_pair_elemIN10emscripten15smart_ptr_traitINS_10shared_ptrI7maxiOscEEE11val_deleterELi1ELb0EEC2EOS8_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiOscEEE11val_deleterC2EOS6_($0,$1);
 return;
}
function __ZNSt3__220__shared_ptr_pointerIP7maxiOscN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (26316);
 $1 = ((($0)) + 12|0);
 __ZNSt3__222__compressed_pair_elemINS_17__compressed_pairIP7maxiOscN10emscripten15smart_ptr_traitINS_10shared_ptrIS2_EEE11val_deleterEEELi0ELb0EED2Ev($1);
 __ZNSt3__214__shared_countD2Ev($0);
 return;
}
function __ZNSt3__220__shared_ptr_pointerIP7maxiOscN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__220__shared_ptr_pointerIP7maxiOscN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__220__shared_ptr_pointerIP7maxiOscN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE16__on_zero_sharedEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 16|0);
 $2 = ((($0)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 __THREW__ = 0;
 invoke_vii(158,($1|0),($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch_3(0|0)|0;
  $7 = (getTempRet0() | 0);
  ___clang_call_terminate($6);
  // unreachable;
 } else {
  __ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiOscEEE11val_deleterD2Ev($1);
  return;
 }
}
function __ZNKSt3__220__shared_ptr_pointerIP7maxiOscN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE13__get_deleterERKSt9type_info($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(38576|0);
 $5 = ((($0)) + 16|0);
 $6 = $4 ? $5 : 0;
 return ($6|0);
}
function __ZNSt3__220__shared_ptr_pointerIP7maxiOscN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE21__on_zero_shared_weakEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZNSt3__222__compressed_pair_elemINS_17__compressed_pairIP7maxiOscN10emscripten15smart_ptr_traitINS_10shared_ptrIS2_EEE11val_deleterEEELi0ELb0EED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__217__compressed_pairIP7maxiOscN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEED2Ev($0);
 return;
}
function __ZN10emscripten8internal11LightTypeIDINSt3__210shared_ptrI7maxiOscEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (22656|0);
}
function __ZN10emscripten8internal14getLightTypeIDI7maxiOscEEPKvRKT_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (22632|0);
}
function __ZN10emscripten8internal11LightTypeIDIPK7maxiOscE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (22680|0);
}
function __ZN10emscripten8internal11LightTypeIDIP7maxiOscE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (22616|0);
}
function __ZN10emscripten8internal11LightTypeIDI7maxiOscE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (22632|0);
}
function __ZN10emscripten8internal10getContextIM12maxiSettingsFviEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIM12maxiSettingsKFivEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal11LightTypeIDIiE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (24888|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJviiiEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (13920|0);
}
function __ZN10emscripten8internal11BindingTypeIP12maxiSettingsE10toWireTypeES3_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS0_17AllowedRawPointerI12maxiSettingsEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (26336|0);
}
function __ZN10emscripten8internal14getLightTypeIDI12maxiSettingsEEPKvRKT_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (22712|0);
}
function __ZN10emscripten8internal11LightTypeIDIPK12maxiSettingsE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (22720|0);
}
function __ZN10emscripten8internal11LightTypeIDIP12maxiSettingsE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (22696|0);
}
function __ZN10emscripten8internal11LightTypeIDI12maxiSettingsE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (22712|0);
}
function __ZN10emscripten8internal18GenericBindingTypeINSt3__26vectorIfNS2_9allocatorIfEEEEE12fromWireTypeEPS6_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvRNSt3__26vectorIfNS3_9allocatorIfEEEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (26340|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvRNSt3__26vectorIdNS3_9allocatorIdEEEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (26348|0);
}
function __ZN10emscripten8internal11BindingTypeIP11vectorToolsE10toWireTypeES3_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS0_17AllowedRawPointerI11vectorToolsEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (26356|0);
}
function __ZN10emscripten8internal14getLightTypeIDI11vectorToolsEEPKvRKT_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (22800|0);
}
function __ZN10emscripten8internal11LightTypeIDIPK11vectorToolsE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (22808|0);
}
function __ZN10emscripten8internal11LightTypeIDIP11vectorToolsE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (22784|0);
}
function __ZN10emscripten8internal11LightTypeIDI11vectorToolsE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (22800|0);
}
function __ZN10emscripten8internal11NoBaseClass6verifyINSt3__26vectorIfNS3_9allocatorIfEEEEEEvv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10emscripten8internal11NoBaseClass11getUpcasterINSt3__26vectorIfNS3_9allocatorIfEEEEEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal11NoBaseClass13getDowncasterINSt3__26vectorIfNS3_9allocatorIfEEEEEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal6TypeIDINSt3__26vectorIfNS2_9allocatorIfEEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINSt3__26vectorIfNS2_9allocatorIfEEEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerINSt3__26vectorIfNS3_9allocatorIfEEEEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIPNSt3__26vectorIfNS2_9allocatorIfEEEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIKNSt3__26vectorIfNS3_9allocatorIfEEEEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIPKNSt3__26vectorIfNS2_9allocatorIfEEEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal13getActualTypeINSt3__26vectorIfNS2_9allocatorIfEEEEEEPKvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14getLightTypeIDINSt3__26vectorIfNS2_9allocatorIfEEEEEEPKvRKT_($0)|0);
 return ($1|0);
}
function __ZN10emscripten8internal14raw_destructorINSt3__26vectorIfNS2_9allocatorIfEEEEEEvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 __ZNSt3__213__vector_baseIfNS_9allocatorIfEEED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJPNSt3__26vectorIfNS5_9allocatorIfEEEEEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJPNSt3__26vectorIfNS5_9allocatorIfEEEEEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS0_17AllowedRawPointerINSt3__26vectorIfNS4_9allocatorIfEEEEEEEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal7InvokerIPNSt3__26vectorIfNS2_9allocatorIfEEEEJEE6invokeEPFS7_vE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (FUNCTION_TABLE_i[$0 & 31]()|0);
 $2 = (__ZN10emscripten8internal11BindingTypeIPNSt3__26vectorIfNS2_9allocatorIfEEEEE10toWireTypeES7_($1)|0);
 return ($2|0);
}
function __ZN10emscripten8internal12operator_newINSt3__26vectorIfNS2_9allocatorIfEEEEJEEEPT_DpOT0_() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Znwm(12)|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($0)) + 4|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($0)) + 8|0);
 HEAP32[$2>>2] = 0;
 return ($0|0);
}
function __ZNSt3__26vectorIfNS_9allocatorIfEEE9push_backERKf($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3|0)==($5|0);
 if ($6) {
  __ZNSt3__26vectorIfNS_9allocatorIfEEE21__push_back_slow_pathIRKfEEvOT_($0,$1);
  return;
 } else {
  $7 = HEAP32[$1>>2]|0;
  HEAP32[$3>>2] = $7;
  $8 = ((($3)) + 4|0);
  HEAP32[$2>>2] = $8;
  return;
 }
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIfNS5_9allocatorIfEEEEEERKfEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 3;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIfNS5_9allocatorIfEEEEEERKfEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIfNS4_9allocatorIfEEEEEERKfEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJviifEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (39116|0);
}
function __ZN10emscripten8internal10getContextIMNSt3__26vectorIfNS2_9allocatorIfEEEEFvRKfEEEPT_RKSB_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal13MethodInvokerIMNSt3__26vectorIfNS2_9allocatorIfEEEEFvRKfEvPS6_JS8_EE6invokeERKSA_SB_f($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 var $$elt3 = 0, $$unpack = 0, $$unpack4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = (__ZN10emscripten8internal11BindingTypeIPNSt3__26vectorIfNS2_9allocatorIfEEEEE12fromWireTypeES7_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt3 = ((($0)) + 4|0);
 $$unpack4 = HEAP32[$$elt3>>2]|0;
 $5 = $$unpack4 >> 1;
 $6 = (($4) + ($5)|0);
 $7 = $$unpack4 & 1;
 $8 = ($7|0)==(0);
 if ($8) {
  $12 = $$unpack;
  $14 = $12;
 } else {
  $9 = HEAP32[$6>>2]|0;
  $10 = (($9) + ($$unpack)|0);
  $11 = HEAP32[$10>>2]|0;
  $14 = $11;
 }
 $13 = (+__ZN10emscripten8internal11BindingTypeIfE12fromWireTypeEf($2));
 HEAPF32[$3>>2] = $13;
 FUNCTION_TABLE_vii[$14 & 255]($6,$3);
 STACKTOP = sp;return;
}
function __ZNSt3__26vectorIfNS_9allocatorIfEEE6resizeEmRKf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$0>>2]|0;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 2;
 $8 = ($7>>>0)<($1>>>0);
 if ($8) {
  $9 = (($1) - ($7))|0;
  __ZNSt3__26vectorIfNS_9allocatorIfEEE8__appendEmRKf($0,$9,$2);
  return;
 }
 $10 = ($7>>>0)>($1>>>0);
 if (!($10)) {
  return;
 }
 $11 = HEAP32[$0>>2]|0;
 $12 = (($11) + ($1<<2)|0);
 HEAP32[$3>>2] = $12;
 return;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIfNS5_9allocatorIfEEEEEEmRKfEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 4;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIfNS5_9allocatorIfEEEEEEmRKfEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIfNS4_9allocatorIfEEEEEEmRKfEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJviiifEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (39073|0);
}
function __ZN10emscripten8internal10getContextIMNSt3__26vectorIfNS2_9allocatorIfEEEEFvmRKfEEEPT_RKSB_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal13MethodInvokerIMNSt3__26vectorIfNS2_9allocatorIfEEEEFvmRKfEvPS6_JmS8_EE6invokeERKSA_SB_mf($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = +$3;
 var $$elt3 = 0, $$unpack = 0, $$unpack4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = (__ZN10emscripten8internal11BindingTypeIPNSt3__26vectorIfNS2_9allocatorIfEEEEE12fromWireTypeES7_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt3 = ((($0)) + 4|0);
 $$unpack4 = HEAP32[$$elt3>>2]|0;
 $6 = $$unpack4 >> 1;
 $7 = (($5) + ($6)|0);
 $8 = $$unpack4 & 1;
 $9 = ($8|0)==(0);
 if ($9) {
  $13 = $$unpack;
  $16 = $13;
 } else {
  $10 = HEAP32[$7>>2]|0;
  $11 = (($10) + ($$unpack)|0);
  $12 = HEAP32[$11>>2]|0;
  $16 = $12;
 }
 $14 = (__ZN10emscripten8internal11BindingTypeImE12fromWireTypeEm($2)|0);
 $15 = (+__ZN10emscripten8internal11BindingTypeIfE12fromWireTypeEf($3));
 HEAPF32[$4>>2] = $15;
 FUNCTION_TABLE_viii[$16 & 63]($7,$14,$4);
 STACKTOP = sp;return;
}
function __ZNKSt3__26vectorIfNS_9allocatorIfEEE4sizeEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$0>>2]|0;
 $4 = (($2) - ($3))|0;
 $5 = $4 >> 2;
 return ($5|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJmNS0_17AllowedRawPointerIKNSt3__26vectorIfNS5_9allocatorIfEEEEEEEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJmNS0_17AllowedRawPointerIKNSt3__26vectorIfNS5_9allocatorIfEEEEEEEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJmNS0_17AllowedRawPointerIKNSt3__26vectorIfNS4_9allocatorIfEEEEEEEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIMNSt3__26vectorIfNS2_9allocatorIfEEEEKFmvEEEPT_RKS9_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal13MethodInvokerIMNSt3__26vectorIfNS2_9allocatorIfEEEEKFmvEmPKS6_JEE6invokeERKS8_SA_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$elt2 = 0, $$unpack = 0, $$unpack3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = (__ZN10emscripten8internal11BindingTypeIPKNSt3__26vectorIfNS2_9allocatorIfEEEEE12fromWireTypeES8_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt2 = ((($0)) + 4|0);
 $$unpack3 = HEAP32[$$elt2>>2]|0;
 $4 = $$unpack3 >> 1;
 $5 = (($3) + ($4)|0);
 $6 = $$unpack3 & 1;
 $7 = ($6|0)==(0);
 if ($7) {
  $11 = $$unpack;
  $12 = $11;
 } else {
  $8 = HEAP32[$5>>2]|0;
  $9 = (($8) + ($$unpack)|0);
  $10 = HEAP32[$9>>2]|0;
  $12 = $10;
 }
 $13 = (FUNCTION_TABLE_ii[$12 & 255]($5)|0);
 HEAP32[$2>>2] = $13;
 $14 = (__ZN10emscripten8internal11BindingTypeImE10toWireTypeERKm($2)|0);
 STACKTOP = sp;return ($14|0);
}
function __ZN10emscripten8internal12VectorAccessINSt3__26vectorIfNS2_9allocatorIfEEEEE3getERKS6_m($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($1)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$1>>2]|0;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 2;
 $8 = ($7>>>0)>($2>>>0);
 if ($8) {
  $9 = HEAP32[$1>>2]|0;
  $10 = (($9) + ($2<<2)|0);
  __ZN10emscripten3valC2IRKfEEOT_($0,$10);
  return;
 } else {
  __ZN10emscripten3val9undefinedEv($0);
  return;
 }
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNS_3valERKNSt3__26vectorIfNS5_9allocatorIfEEEEmEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 3;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNS_3valERKNSt3__26vectorIfNS5_9allocatorIfEEEEmEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS_3valERKNSt3__26vectorIfNS4_9allocatorIfEEEEmEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJiiiiEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (39030|0);
}
function __ZN10emscripten8internal10getContextIPFNS_3valERKNSt3__26vectorIfNS3_9allocatorIfEEEEmEEEPT_RKSC_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(4)|0);
 $2 = HEAP32[$0>>2]|0;
 HEAP32[$1>>2] = $2;
 return ($1|0);
}
function __ZN10emscripten8internal15FunctionInvokerIPFNS_3valERKNSt3__26vectorIfNS3_9allocatorIfEEEEmES2_S9_JmEE6invokeEPSB_PS7_m($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = HEAP32[$0>>2]|0;
 $5 = (__ZN10emscripten8internal18GenericBindingTypeINSt3__26vectorIfNS2_9allocatorIfEEEEE12fromWireTypeEPS6_($1)|0);
 $6 = (__ZN10emscripten8internal11BindingTypeImE12fromWireTypeEm($2)|0);
 FUNCTION_TABLE_viii[$4 & 63]($3,$5,$6);
 __THREW__ = 0;
 $7 = (invoke_ii(168,($3|0))|0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $10 = ___cxa_find_matching_catch_2()|0;
  $11 = (getTempRet0() | 0);
  __ZN10emscripten3valD2Ev($3);
  ___resumeException($10|0);
  // unreachable;
 } else {
  __ZN10emscripten3valD2Ev($3);
  STACKTOP = sp;return ($7|0);
 }
 return (0)|0;
}
function __ZN10emscripten8internal12VectorAccessINSt3__26vectorIfNS2_9allocatorIfEEEEE3setERS6_mRKf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$0>>2]|0;
 $5 = (($4) + ($1<<2)|0);
 HEAP32[$5>>2] = $3;
 return 1;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbRNSt3__26vectorIfNS4_9allocatorIfEEEEmRKfEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 4;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbRNSt3__26vectorIfNS4_9allocatorIfEEEEmRKfEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJbRNSt3__26vectorIfNS3_9allocatorIfEEEEmRKfEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJiiiifEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (39024|0);
}
function __ZN10emscripten8internal10getContextIPFbRNSt3__26vectorIfNS2_9allocatorIfEEEEmRKfEEEPT_RKSC_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(4)|0);
 $2 = HEAP32[$0>>2]|0;
 HEAP32[$1>>2] = $2;
 return ($1|0);
}
function __ZN10emscripten8internal15FunctionInvokerIPFbRNSt3__26vectorIfNS2_9allocatorIfEEEEmRKfEbS7_JmS9_EE6invokeEPSB_PS6_mf($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = +$3;
 var $10 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = HEAP32[$0>>2]|0;
 $6 = (__ZN10emscripten8internal18GenericBindingTypeINSt3__26vectorIfNS2_9allocatorIfEEEEE12fromWireTypeEPS6_($1)|0);
 $7 = (__ZN10emscripten8internal11BindingTypeImE12fromWireTypeEm($2)|0);
 $8 = (+__ZN10emscripten8internal11BindingTypeIfE12fromWireTypeEf($3));
 HEAPF32[$4>>2] = $8;
 $9 = (FUNCTION_TABLE_iiii[$5 & 63]($6,$7,$4)|0);
 $10 = (__ZN10emscripten8internal11BindingTypeIbE10toWireTypeEb($9)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZN10emscripten8internal11BindingTypeImE12fromWireTypeEm($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJbRNSt3__26vectorIfNS3_9allocatorIfEEEEmRKfEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (13936|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS_3valERKNSt3__26vectorIfNS4_9allocatorIfEEEEmEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (26360|0);
}
function __ZN10emscripten3valC2IRKfEEOT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 __ZN10emscripten8internal12WireTypePackIJRKfEEC2ES3_($2,$1);
 $3 = (__ZN10emscripten8internal6TypeIDIRKfE3getEv()|0);
 $4 = (__ZNK10emscripten8internal12WireTypePackIJRKfEEcvPKvEv($2)|0);
 $5 = (__emval_take_value(($3|0),($4|0))|0);
 HEAP32[$0>>2] = $5;
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal12WireTypePackIJRKfEEC2ES3_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 HEAP32[$2>>2] = $0;
 $3 = (+__ZN10emscripten8internal11BindingTypeIfE10toWireTypeERKf($1));
 __ZN10emscripten8internal20writeGenericWireTypeERPNS0_15GenericWireTypeEf($2,$3);
 __ZN10emscripten8internal21writeGenericWireTypesERPNS0_15GenericWireTypeE($2);
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal6TypeIDIRKfE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIRKfE3getEv()|0);
 return ($0|0);
}
function __ZNK10emscripten8internal12WireTypePackIJRKfEEcvPKvEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIRKfE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (24920|0);
}
function __ZN10emscripten8internal11BindingTypeIfE10toWireTypeERKf($0) {
 $0 = $0|0;
 var $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = +HEAPF32[$0>>2];
 return (+$1);
}
function __ZN10emscripten8internal20writeGenericWireTypeERPNS0_15GenericWireTypeEf($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 HEAPF32[$2>>2] = $1;
 $3 = HEAP32[$0>>2]|0;
 $4 = ((($3)) + 8|0);
 HEAP32[$0>>2] = $4;
 return;
}
function __ZN10emscripten8internal11BindingTypeIPKNSt3__26vectorIfNS2_9allocatorIfEEEEE12fromWireTypeES8_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJmNS0_17AllowedRawPointerIKNSt3__26vectorIfNS4_9allocatorIfEEEEEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (26372|0);
}
function __ZN10emscripten8internal11BindingTypeIPNSt3__26vectorIfNS2_9allocatorIfEEEEE12fromWireTypeES7_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIfNS4_9allocatorIfEEEEEEmRKfEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (13952|0);
}
function __ZNSt3__26vectorIfNS_9allocatorIfEEE8__appendEmRKf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i = 0, $$promoted$i = 0, $$sroa$speculated$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $scevgep$i = 0, $spec$select$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp;
 $4 = ((($0)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($0)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) - ($7))|0;
 $9 = $8 >> 2;
 $10 = ($9>>>0)<($1>>>0);
 if (!($10)) {
  $$promoted$i = HEAP32[$6>>2]|0;
  $$0$i = $1;$12 = $$promoted$i;
  while(1) {
   $11 = HEAP32[$2>>2]|0;
   HEAP32[$12>>2] = $11;
   $13 = ((($12)) + 4|0);
   $14 = (($$0$i) + -1)|0;
   $15 = ($14|0)==(0);
   if ($15) {
    break;
   } else {
    $$0$i = $14;$12 = $13;
   }
  }
  $scevgep$i = (($$promoted$i) + ($1<<2)|0);
  HEAP32[$6>>2] = $scevgep$i;
  STACKTOP = sp;return;
 }
 $16 = HEAP32[$0>>2]|0;
 $17 = (($7) - ($16))|0;
 $18 = $17 >> 2;
 $19 = (($18) + ($1))|0;
 $20 = (__ZNKSt3__26vectorIfNS_9allocatorIfEEE8max_sizeEv($0)|0);
 $21 = ($20>>>0)<($19>>>0);
 if ($21) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $22 = ((($0)) + 8|0);
 $23 = ((($0)) + 8|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = HEAP32[$0>>2]|0;
 $26 = (($24) - ($25))|0;
 $27 = $26 >> 2;
 $28 = $20 >>> 1;
 $29 = ($27>>>0)<($28>>>0);
 $30 = $26 >> 1;
 $31 = ($30>>>0)<($19>>>0);
 $$sroa$speculated$i = $31 ? $19 : $30;
 $spec$select$i = $29 ? $$sroa$speculated$i : $20;
 $32 = HEAP32[$6>>2]|0;
 $33 = (($32) - ($25))|0;
 $34 = $33 >> 2;
 __ZNSt3__214__split_bufferIfRNS_9allocatorIfEEEC2EmmS3_($3,$spec$select$i,$34,$22);
 __THREW__ = 0;
 invoke_viii(22,($3|0),($1|0),($2|0));
 $35 = __THREW__; __THREW__ = 0;
 $36 = $35&1;
 if ($36) {
  $39 = ___cxa_find_matching_catch_2()|0;
  $40 = (getTempRet0() | 0);
  __ZNSt3__214__split_bufferIfRNS_9allocatorIfEEED2Ev($3);
  ___resumeException($39|0);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vii(159,($0|0),($3|0));
 $37 = __THREW__; __THREW__ = 0;
 $38 = $37&1;
 if ($38) {
  $39 = ___cxa_find_matching_catch_2()|0;
  $40 = (getTempRet0() | 0);
  __ZNSt3__214__split_bufferIfRNS_9allocatorIfEEED2Ev($3);
  ___resumeException($39|0);
  // unreachable;
 }
 __ZNSt3__214__split_bufferIfRNS_9allocatorIfEEED2Ev($3);
 STACKTOP = sp;return;
}
function __ZNKSt3__26vectorIfNS_9allocatorIfEEE8max_sizeEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1073741823;
}
function __ZNSt3__214__split_bufferIfRNS_9allocatorIfEEEC2EmmS3_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 12|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($0)) + 16|0);
 HEAP32[$5>>2] = $3;
 $6 = ($1|0)==(0);
 do {
  if ($6) {
   $15 = 0;
  } else {
   $7 = ($1>>>0)>(1073741823);
   if (!($7)) {
    $13 = $1 << 2;
    $14 = (__Znwm($13)|0);
    $15 = $14;
    break;
   }
   $8 = (___cxa_allocate_exception(8)|0);
   __THREW__ = 0;
   invoke_vii(45,($8|0),(43841|0));
   $9 = __THREW__; __THREW__ = 0;
   $10 = $9&1;
   if ($10) {
    $11 = ___cxa_find_matching_catch_2()|0;
    $12 = (getTempRet0() | 0);
    ___cxa_free_exception(($8|0));
    ___resumeException($11|0);
    // unreachable;
   } else {
    HEAP32[$8>>2] = (30800);
    ___cxa_throw(($8|0),(24744|0),(226|0));
    // unreachable;
   }
  }
 } while(0);
 HEAP32[$0>>2] = $15;
 $16 = (($15) + ($2<<2)|0);
 $17 = ((($0)) + 8|0);
 HEAP32[$17>>2] = $16;
 $18 = ((($0)) + 4|0);
 HEAP32[$18>>2] = $16;
 $19 = (($15) + ($1<<2)|0);
 $20 = ((($0)) + 12|0);
 HEAP32[$20>>2] = $19;
 return;
}
function __ZNSt3__214__split_bufferIfRNS_9allocatorIfEEE18__construct_at_endEmRKf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$promoted = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $scevgep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 8|0);
 $$promoted = HEAP32[$3>>2]|0;
 $$0 = $1;$5 = $$promoted;
 while(1) {
  $4 = HEAP32[$2>>2]|0;
  HEAP32[$5>>2] = $4;
  $6 = ((($5)) + 4|0);
  $7 = (($$0) + -1)|0;
  $8 = ($7|0)==(0);
  if ($8) {
   break;
  } else {
   $$0 = $7;$5 = $6;
  }
 }
 $scevgep = (($$promoted) + ($1<<2)|0);
 HEAP32[$3>>2] = $scevgep;
 return;
}
function __ZNSt3__26vectorIfNS_9allocatorIfEEE26__swap_out_circular_bufferERNS_14__split_bufferIfRS2_EE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1)) + 4|0);
 $6 = $2;
 $7 = (($4) - ($6))|0;
 $8 = $7 >> 2;
 $9 = HEAP32[$5>>2]|0;
 $10 = (0 - ($8))|0;
 $11 = (($9) + ($10<<2)|0);
 HEAP32[$5>>2] = $11;
 $12 = ($7|0)>(0);
 if ($12) {
  _memcpy(($11|0),($2|0),($7|0))|0;
 }
 $13 = HEAP32[$0>>2]|0;
 $14 = HEAP32[$5>>2]|0;
 HEAP32[$0>>2] = $14;
 HEAP32[$5>>2] = $13;
 $15 = ((($1)) + 8|0);
 $16 = HEAP32[$3>>2]|0;
 $17 = HEAP32[$15>>2]|0;
 HEAP32[$3>>2] = $17;
 HEAP32[$15>>2] = $16;
 $18 = ((($0)) + 8|0);
 $19 = ((($1)) + 12|0);
 $20 = HEAP32[$18>>2]|0;
 $21 = HEAP32[$19>>2]|0;
 HEAP32[$18>>2] = $21;
 HEAP32[$19>>2] = $20;
 $22 = HEAP32[$5>>2]|0;
 HEAP32[$1>>2] = $22;
 return;
}
function __ZNSt3__214__split_bufferIfRNS_9allocatorIfEEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $scevgep$i$i$i = 0, $scevgep4$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==($2|0);
 if (!($5)) {
  $scevgep$i$i$i = ((($4)) + -4|0);
  $6 = $scevgep$i$i$i;
  $7 = $2;
  $8 = (($6) - ($7))|0;
  $9 = $8 >>> 2;
  $10 = $9 ^ -1;
  $scevgep4$i$i$i = (($4) + ($10<<2)|0);
  HEAP32[$3>>2] = $scevgep4$i$i$i;
 }
 $11 = HEAP32[$0>>2]|0;
 $12 = ($11|0)==(0|0);
 if ($12) {
  return;
 }
 __ZdlPv($11);
 return;
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIfNS4_9allocatorIfEEEEEERKfEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (26380|0);
}
function __ZNSt3__26vectorIfNS_9allocatorIfEEE21__push_back_slow_pathIRKfEEvOT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sroa$speculated$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$0>>2]|0;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 2;
 $8 = (($7) + 1)|0;
 $9 = (__ZNKSt3__26vectorIfNS_9allocatorIfEEE8max_sizeEv($0)|0);
 $10 = ($9>>>0)<($8>>>0);
 if ($10) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $11 = ((($0)) + 8|0);
 $12 = ((($0)) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = HEAP32[$0>>2]|0;
 $15 = (($13) - ($14))|0;
 $16 = $15 >> 2;
 $17 = $9 >>> 1;
 $18 = ($16>>>0)<($17>>>0);
 $19 = $15 >> 1;
 $20 = ($19>>>0)<($8>>>0);
 $$sroa$speculated$i = $20 ? $8 : $19;
 $spec$select$i = $18 ? $$sroa$speculated$i : $9;
 $21 = HEAP32[$3>>2]|0;
 $22 = (($21) - ($14))|0;
 $23 = $22 >> 2;
 __ZNSt3__214__split_bufferIfRNS_9allocatorIfEEEC2EmmS3_($2,$spec$select$i,$23,$11);
 $24 = ((($2)) + 8|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = HEAP32[$1>>2]|0;
 HEAP32[$25>>2] = $26;
 $27 = ((($25)) + 4|0);
 HEAP32[$24>>2] = $27;
 __THREW__ = 0;
 invoke_vii(159,($0|0),($2|0));
 $28 = __THREW__; __THREW__ = 0;
 $29 = $28&1;
 if ($29) {
  $30 = ___cxa_find_matching_catch_2()|0;
  $31 = (getTempRet0() | 0);
  __ZNSt3__214__split_bufferIfRNS_9allocatorIfEEED2Ev($2);
  ___resumeException($30|0);
  // unreachable;
 } else {
  __ZNSt3__214__split_bufferIfRNS_9allocatorIfEEED2Ev($2);
  STACKTOP = sp;return;
 }
}
function __ZN10emscripten8internal11BindingTypeIPNSt3__26vectorIfNS2_9allocatorIfEEEEE10toWireTypeES7_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS0_17AllowedRawPointerINSt3__26vectorIfNS4_9allocatorIfEEEEEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (26392|0);
}
function __ZNSt3__213__vector_baseIfNS_9allocatorIfEEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 }
 $3 = HEAP32[$0>>2]|0;
 $4 = ((($0)) + 4|0);
 HEAP32[$4>>2] = $3;
 __ZdlPv($1);
 return;
}
function __ZN10emscripten8internal14getLightTypeIDINSt3__26vectorIfNS2_9allocatorIfEEEEEEPKvRKT_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (22736|0);
}
function __ZN10emscripten8internal11LightTypeIDIPKNSt3__26vectorIfNS2_9allocatorIfEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (22824|0);
}
function __ZN10emscripten8internal11LightTypeIDIPNSt3__26vectorIfNS2_9allocatorIfEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (22840|0);
}
function __ZN10emscripten8internal11LightTypeIDINSt3__26vectorIfNS2_9allocatorIfEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (22736|0);
}
function __ZN10emscripten8internal11NoBaseClass6verifyINSt3__26vectorIcNS3_9allocatorIcEEEEEEvv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10emscripten8internal11NoBaseClass11getUpcasterINSt3__26vectorIcNS3_9allocatorIcEEEEEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal11NoBaseClass13getDowncasterINSt3__26vectorIcNS3_9allocatorIcEEEEEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal6TypeIDINSt3__26vectorIcNS2_9allocatorIcEEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINSt3__26vectorIcNS2_9allocatorIcEEEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerINSt3__26vectorIcNS3_9allocatorIcEEEEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIPNSt3__26vectorIcNS2_9allocatorIcEEEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIKNSt3__26vectorIcNS3_9allocatorIcEEEEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIPKNSt3__26vectorIcNS2_9allocatorIcEEEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal13getActualTypeINSt3__26vectorIcNS2_9allocatorIcEEEEEEPKvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14getLightTypeIDINSt3__26vectorIcNS2_9allocatorIcEEEEEEPKvRKT_($0)|0);
 return ($1|0);
}
function __ZN10emscripten8internal14raw_destructorINSt3__26vectorIcNS2_9allocatorIcEEEEEEvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 __ZNSt3__213__vector_baseIcNS_9allocatorIcEEED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJPNSt3__26vectorIcNS5_9allocatorIcEEEEEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJPNSt3__26vectorIcNS5_9allocatorIcEEEEEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS0_17AllowedRawPointerINSt3__26vectorIcNS4_9allocatorIcEEEEEEEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal7InvokerIPNSt3__26vectorIcNS2_9allocatorIcEEEEJEE6invokeEPFS7_vE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (FUNCTION_TABLE_i[$0 & 31]()|0);
 $2 = (__ZN10emscripten8internal11BindingTypeIPNSt3__26vectorIcNS2_9allocatorIcEEEEE10toWireTypeES7_($1)|0);
 return ($2|0);
}
function __ZN10emscripten8internal12operator_newINSt3__26vectorIcNS2_9allocatorIcEEEEJEEEPT_DpOT0_() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Znwm(12)|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($0)) + 4|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($0)) + 8|0);
 HEAP32[$2>>2] = 0;
 return ($0|0);
}
function __ZNSt3__26vectorIcNS_9allocatorIcEEE9push_backERKc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3|0)==($5|0);
 if ($6) {
  __ZNSt3__26vectorIcNS_9allocatorIcEEE21__push_back_slow_pathIRKcEEvOT_($0,$1);
  return;
 } else {
  $7 = HEAP8[$1>>0]|0;
  HEAP8[$3>>0] = $7;
  $8 = HEAP32[$2>>2]|0;
  $9 = ((($8)) + 1|0);
  HEAP32[$2>>2] = $9;
  return;
 }
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIcNS5_9allocatorIcEEEEEERKcEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 3;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIcNS5_9allocatorIcEEEEEERKcEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIcNS4_9allocatorIcEEEEEERKcEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIMNSt3__26vectorIcNS2_9allocatorIcEEEEFvRKcEEEPT_RKSB_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal13MethodInvokerIMNSt3__26vectorIcNS2_9allocatorIcEEEEFvRKcEvPS6_JS8_EE6invokeERKSA_SB_c($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$elt2 = 0, $$unpack = 0, $$unpack3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = (__ZN10emscripten8internal11BindingTypeIPNSt3__26vectorIcNS2_9allocatorIcEEEEE12fromWireTypeES7_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt2 = ((($0)) + 4|0);
 $$unpack3 = HEAP32[$$elt2>>2]|0;
 $5 = $$unpack3 >> 1;
 $6 = (($4) + ($5)|0);
 $7 = $$unpack3 & 1;
 $8 = ($7|0)==(0);
 if ($8) {
  $12 = $$unpack;
  $14 = $12;
 } else {
  $9 = HEAP32[$6>>2]|0;
  $10 = (($9) + ($$unpack)|0);
  $11 = HEAP32[$10>>2]|0;
  $14 = $11;
 }
 $13 = (__ZN10emscripten8internal11BindingTypeIcE12fromWireTypeEc($2)|0);
 HEAP8[$3>>0] = $13;
 FUNCTION_TABLE_vii[$14 & 255]($6,$3);
 STACKTOP = sp;return;
}
function __ZNSt3__26vectorIcNS_9allocatorIcEEE6resizeEmRKc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$0>>2]|0;
 $6 = (($4) - ($5))|0;
 $7 = ($6>>>0)<($1>>>0);
 if ($7) {
  $8 = (($1) - ($6))|0;
  __ZNSt3__26vectorIcNS_9allocatorIcEEE8__appendEmRKc($0,$8,$2);
  return;
 }
 $9 = ($6>>>0)>($1>>>0);
 if (!($9)) {
  return;
 }
 $10 = HEAP32[$0>>2]|0;
 $11 = (($10) + ($1)|0);
 HEAP32[$3>>2] = $11;
 return;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIcNS5_9allocatorIcEEEEEEmRKcEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 4;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIcNS5_9allocatorIcEEEEEEmRKcEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIcNS4_9allocatorIcEEEEEEmRKcEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIMNSt3__26vectorIcNS2_9allocatorIcEEEEFvmRKcEEEPT_RKSB_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal13MethodInvokerIMNSt3__26vectorIcNS2_9allocatorIcEEEEFvmRKcEvPS6_JmS8_EE6invokeERKSA_SB_mc($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$elt3 = 0, $$unpack = 0, $$unpack4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = (__ZN10emscripten8internal11BindingTypeIPNSt3__26vectorIcNS2_9allocatorIcEEEEE12fromWireTypeES7_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt3 = ((($0)) + 4|0);
 $$unpack4 = HEAP32[$$elt3>>2]|0;
 $6 = $$unpack4 >> 1;
 $7 = (($5) + ($6)|0);
 $8 = $$unpack4 & 1;
 $9 = ($8|0)==(0);
 if ($9) {
  $13 = $$unpack;
  $16 = $13;
 } else {
  $10 = HEAP32[$7>>2]|0;
  $11 = (($10) + ($$unpack)|0);
  $12 = HEAP32[$11>>2]|0;
  $16 = $12;
 }
 $14 = (__ZN10emscripten8internal11BindingTypeImE12fromWireTypeEm($2)|0);
 $15 = (__ZN10emscripten8internal11BindingTypeIcE12fromWireTypeEc($3)|0);
 HEAP8[$4>>0] = $15;
 FUNCTION_TABLE_viii[$16 & 63]($7,$14,$4);
 STACKTOP = sp;return;
}
function __ZNKSt3__26vectorIcNS_9allocatorIcEEE4sizeEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$0>>2]|0;
 $4 = (($2) - ($3))|0;
 return ($4|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJmNS0_17AllowedRawPointerIKNSt3__26vectorIcNS5_9allocatorIcEEEEEEEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJmNS0_17AllowedRawPointerIKNSt3__26vectorIcNS5_9allocatorIcEEEEEEEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJmNS0_17AllowedRawPointerIKNSt3__26vectorIcNS4_9allocatorIcEEEEEEEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIMNSt3__26vectorIcNS2_9allocatorIcEEEEKFmvEEEPT_RKS9_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal13MethodInvokerIMNSt3__26vectorIcNS2_9allocatorIcEEEEKFmvEmPKS6_JEE6invokeERKS8_SA_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$elt2 = 0, $$unpack = 0, $$unpack3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = (__ZN10emscripten8internal11BindingTypeIPKNSt3__26vectorIcNS2_9allocatorIcEEEEE12fromWireTypeES8_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt2 = ((($0)) + 4|0);
 $$unpack3 = HEAP32[$$elt2>>2]|0;
 $4 = $$unpack3 >> 1;
 $5 = (($3) + ($4)|0);
 $6 = $$unpack3 & 1;
 $7 = ($6|0)==(0);
 if ($7) {
  $11 = $$unpack;
  $12 = $11;
 } else {
  $8 = HEAP32[$5>>2]|0;
  $9 = (($8) + ($$unpack)|0);
  $10 = HEAP32[$9>>2]|0;
  $12 = $10;
 }
 $13 = (FUNCTION_TABLE_ii[$12 & 255]($5)|0);
 HEAP32[$2>>2] = $13;
 $14 = (__ZN10emscripten8internal11BindingTypeImE10toWireTypeERKm($2)|0);
 STACKTOP = sp;return ($14|0);
}
function __ZN10emscripten8internal12VectorAccessINSt3__26vectorIcNS2_9allocatorIcEEEEE3getERKS6_m($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($1)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$1>>2]|0;
 $6 = (($4) - ($5))|0;
 $7 = ($6>>>0)>($2>>>0);
 if ($7) {
  $8 = HEAP32[$1>>2]|0;
  $9 = (($8) + ($2)|0);
  __ZN10emscripten3valC2IRKcEEOT_($0,$9);
  return;
 } else {
  __ZN10emscripten3val9undefinedEv($0);
  return;
 }
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNS_3valERKNSt3__26vectorIcNS5_9allocatorIcEEEEmEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 3;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNS_3valERKNSt3__26vectorIcNS5_9allocatorIcEEEEmEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS_3valERKNSt3__26vectorIcNS4_9allocatorIcEEEEmEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIPFNS_3valERKNSt3__26vectorIcNS3_9allocatorIcEEEEmEEEPT_RKSC_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(4)|0);
 $2 = HEAP32[$0>>2]|0;
 HEAP32[$1>>2] = $2;
 return ($1|0);
}
function __ZN10emscripten8internal15FunctionInvokerIPFNS_3valERKNSt3__26vectorIcNS3_9allocatorIcEEEEmES2_S9_JmEE6invokeEPSB_PS7_m($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = HEAP32[$0>>2]|0;
 $5 = (__ZN10emscripten8internal18GenericBindingTypeINSt3__26vectorIcNS2_9allocatorIcEEEEE12fromWireTypeEPS6_($1)|0);
 $6 = (__ZN10emscripten8internal11BindingTypeImE12fromWireTypeEm($2)|0);
 FUNCTION_TABLE_viii[$4 & 63]($3,$5,$6);
 __THREW__ = 0;
 $7 = (invoke_ii(168,($3|0))|0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $10 = ___cxa_find_matching_catch_2()|0;
  $11 = (getTempRet0() | 0);
  __ZN10emscripten3valD2Ev($3);
  ___resumeException($10|0);
  // unreachable;
 } else {
  __ZN10emscripten3valD2Ev($3);
  STACKTOP = sp;return ($7|0);
 }
 return (0)|0;
}
function __ZN10emscripten8internal12VectorAccessINSt3__26vectorIcNS2_9allocatorIcEEEEE3setERS6_mRKc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP8[$2>>0]|0;
 $4 = HEAP32[$0>>2]|0;
 $5 = (($4) + ($1)|0);
 HEAP8[$5>>0] = $3;
 return 1;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbRNSt3__26vectorIcNS4_9allocatorIcEEEEmRKcEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 4;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbRNSt3__26vectorIcNS4_9allocatorIcEEEEmRKcEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJbRNSt3__26vectorIcNS3_9allocatorIcEEEEmRKcEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIPFbRNSt3__26vectorIcNS2_9allocatorIcEEEEmRKcEEEPT_RKSC_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(4)|0);
 $2 = HEAP32[$0>>2]|0;
 HEAP32[$1>>2] = $2;
 return ($1|0);
}
function __ZN10emscripten8internal15FunctionInvokerIPFbRNSt3__26vectorIcNS2_9allocatorIcEEEEmRKcEbS7_JmS9_EE6invokeEPSB_PS6_mc($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = HEAP32[$0>>2]|0;
 $6 = (__ZN10emscripten8internal18GenericBindingTypeINSt3__26vectorIcNS2_9allocatorIcEEEEE12fromWireTypeEPS6_($1)|0);
 $7 = (__ZN10emscripten8internal11BindingTypeImE12fromWireTypeEm($2)|0);
 $8 = (__ZN10emscripten8internal11BindingTypeIcE12fromWireTypeEc($3)|0);
 HEAP8[$4>>0] = $8;
 $9 = (FUNCTION_TABLE_iiii[$5 & 63]($6,$7,$4)|0);
 $10 = (__ZN10emscripten8internal11BindingTypeIbE10toWireTypeEb($9)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZN10emscripten8internal18GenericBindingTypeINSt3__26vectorIcNS2_9allocatorIcEEEEE12fromWireTypeEPS6_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal11BindingTypeIcE12fromWireTypeEc($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJbRNSt3__26vectorIcNS3_9allocatorIcEEEEmRKcEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (13968|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS_3valERKNSt3__26vectorIcNS4_9allocatorIcEEEEmEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (26396|0);
}
function __ZN10emscripten3valC2IRKcEEOT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 __ZN10emscripten8internal12WireTypePackIJRKcEEC2ES3_($2,$1);
 $3 = (__ZN10emscripten8internal6TypeIDIRKcE3getEv()|0);
 $4 = (__ZNK10emscripten8internal12WireTypePackIJRKcEEcvPKvEv($2)|0);
 $5 = (__emval_take_value(($3|0),($4|0))|0);
 HEAP32[$0>>2] = $5;
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal12WireTypePackIJRKcEEC2ES3_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 HEAP32[$2>>2] = $0;
 $3 = (__ZN10emscripten8internal11BindingTypeIcE10toWireTypeERKc($1)|0);
 __ZN10emscripten8internal20writeGenericWireTypeIcEEvRPNS0_15GenericWireTypeET_($2,$3);
 __ZN10emscripten8internal21writeGenericWireTypesERPNS0_15GenericWireTypeE($2);
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal6TypeIDIRKcE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIRKcE3getEv()|0);
 return ($0|0);
}
function __ZNK10emscripten8internal12WireTypePackIJRKcEEcvPKvEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIRKcE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (24848|0);
}
function __ZN10emscripten8internal11BindingTypeIcE10toWireTypeERKc($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[$0>>0]|0;
 return ($1|0);
}
function __ZN10emscripten8internal20writeGenericWireTypeIcEEvRPNS0_15GenericWireTypeET_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1 << 24 >> 24;
 $3 = HEAP32[$0>>2]|0;
 HEAP32[$3>>2] = $2;
 $4 = HEAP32[$0>>2]|0;
 $5 = ((($4)) + 8|0);
 HEAP32[$0>>2] = $5;
 return;
}
function __ZN10emscripten8internal11BindingTypeIPKNSt3__26vectorIcNS2_9allocatorIcEEEEE12fromWireTypeES8_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJmNS0_17AllowedRawPointerIKNSt3__26vectorIcNS4_9allocatorIcEEEEEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (26408|0);
}
function __ZN10emscripten8internal11BindingTypeIPNSt3__26vectorIcNS2_9allocatorIcEEEEE12fromWireTypeES7_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIcNS4_9allocatorIcEEEEEEmRKcEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (13984|0);
}
function __ZNSt3__26vectorIcNS_9allocatorIcEEE8__appendEmRKc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i = 0, $$sroa$speculated$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp;
 $4 = ((($0)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($0)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) - ($7))|0;
 $9 = ($8>>>0)<($1>>>0);
 if (!($9)) {
  $$0$i = $1;
  while(1) {
   $10 = HEAP32[$6>>2]|0;
   $11 = HEAP8[$2>>0]|0;
   HEAP8[$10>>0] = $11;
   $12 = HEAP32[$6>>2]|0;
   $13 = ((($12)) + 1|0);
   HEAP32[$6>>2] = $13;
   $14 = (($$0$i) + -1)|0;
   $15 = ($14|0)==(0);
   if ($15) {
    break;
   } else {
    $$0$i = $14;
   }
  }
  STACKTOP = sp;return;
 }
 $16 = HEAP32[$0>>2]|0;
 $17 = (($7) - ($16))|0;
 $18 = (($17) + ($1))|0;
 $19 = (__ZNKSt3__26vectorIcNS_9allocatorIcEEE8max_sizeEv($0)|0);
 $20 = ($19>>>0)<($18>>>0);
 if ($20) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $21 = ((($0)) + 8|0);
 $22 = ((($0)) + 8|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = HEAP32[$0>>2]|0;
 $25 = (($23) - ($24))|0;
 $26 = $19 >>> 1;
 $27 = ($25>>>0)<($26>>>0);
 $28 = $25 << 1;
 $29 = ($28>>>0)<($18>>>0);
 $$sroa$speculated$i = $29 ? $18 : $28;
 $spec$select$i = $27 ? $$sroa$speculated$i : $19;
 $30 = HEAP32[$6>>2]|0;
 $31 = (($30) - ($24))|0;
 __ZNSt3__214__split_bufferIcRNS_9allocatorIcEEEC2EmmS3_($3,$spec$select$i,$31,$21);
 __THREW__ = 0;
 invoke_viii(23,($3|0),($1|0),($2|0));
 $32 = __THREW__; __THREW__ = 0;
 $33 = $32&1;
 if ($33) {
  $36 = ___cxa_find_matching_catch_2()|0;
  $37 = (getTempRet0() | 0);
  __ZNSt3__214__split_bufferIcRNS_9allocatorIcEEED2Ev($3);
  ___resumeException($36|0);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vii(160,($0|0),($3|0));
 $34 = __THREW__; __THREW__ = 0;
 $35 = $34&1;
 if ($35) {
  $36 = ___cxa_find_matching_catch_2()|0;
  $37 = (getTempRet0() | 0);
  __ZNSt3__214__split_bufferIcRNS_9allocatorIcEEED2Ev($3);
  ___resumeException($36|0);
  // unreachable;
 }
 __ZNSt3__214__split_bufferIcRNS_9allocatorIcEEED2Ev($3);
 STACKTOP = sp;return;
}
function __ZNKSt3__26vectorIcNS_9allocatorIcEEE8max_sizeEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2147483647;
}
function __ZNSt3__214__split_bufferIcRNS_9allocatorIcEEEC2EmmS3_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 12|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($0)) + 16|0);
 HEAP32[$5>>2] = $3;
 $6 = ($1|0)==(0);
 if ($6) {
  $8 = 0;
 } else {
  $7 = (__Znwm($1)|0);
  $8 = $7;
 }
 HEAP32[$0>>2] = $8;
 $9 = (($8) + ($2)|0);
 $10 = ((($0)) + 8|0);
 HEAP32[$10>>2] = $9;
 $11 = ((($0)) + 4|0);
 HEAP32[$11>>2] = $9;
 $12 = (($8) + ($1)|0);
 $13 = ((($0)) + 12|0);
 HEAP32[$13>>2] = $12;
 return;
}
function __ZNSt3__214__split_bufferIcRNS_9allocatorIcEEE18__construct_at_endEmRKc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 8|0);
 $$0 = $1;
 while(1) {
  $4 = HEAP32[$3>>2]|0;
  $5 = HEAP8[$2>>0]|0;
  HEAP8[$4>>0] = $5;
  $6 = HEAP32[$3>>2]|0;
  $7 = ((($6)) + 1|0);
  HEAP32[$3>>2] = $7;
  $8 = (($$0) + -1)|0;
  $9 = ($8|0)==(0);
  if ($9) {
   break;
  } else {
   $$0 = $8;
  }
 }
 return;
}
function __ZNSt3__26vectorIcNS_9allocatorIcEEE26__swap_out_circular_bufferERNS_14__split_bufferIcRS2_EE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1)) + 4|0);
 $6 = $2;
 $7 = (($4) - ($6))|0;
 $8 = HEAP32[$5>>2]|0;
 $9 = (0 - ($7))|0;
 $10 = (($8) + ($9)|0);
 HEAP32[$5>>2] = $10;
 $11 = ($7|0)>(0);
 if ($11) {
  _memcpy(($10|0),($2|0),($7|0))|0;
 }
 $12 = HEAP32[$0>>2]|0;
 $13 = HEAP32[$5>>2]|0;
 HEAP32[$0>>2] = $13;
 HEAP32[$5>>2] = $12;
 $14 = ((($1)) + 8|0);
 $15 = HEAP32[$3>>2]|0;
 $16 = HEAP32[$14>>2]|0;
 HEAP32[$3>>2] = $16;
 HEAP32[$14>>2] = $15;
 $17 = ((($0)) + 8|0);
 $18 = ((($1)) + 12|0);
 $19 = HEAP32[$17>>2]|0;
 $20 = HEAP32[$18>>2]|0;
 HEAP32[$17>>2] = $20;
 HEAP32[$18>>2] = $19;
 $21 = HEAP32[$5>>2]|0;
 HEAP32[$1>>2] = $21;
 return;
}
function __ZNSt3__214__split_bufferIcRNS_9allocatorIcEEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==($2|0);
 if (!($5)) {
  $7 = $4;
  while(1) {
   $6 = ((($7)) + -1|0);
   $8 = ($6|0)==($2|0);
   if ($8) {
    break;
   } else {
    $7 = $6;
   }
  }
  HEAP32[$3>>2] = $6;
 }
 $9 = HEAP32[$0>>2]|0;
 $10 = ($9|0)==(0|0);
 if ($10) {
  return;
 }
 __ZdlPv($9);
 return;
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIcNS4_9allocatorIcEEEEEERKcEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (26416|0);
}
function __ZNSt3__26vectorIcNS_9allocatorIcEEE21__push_back_slow_pathIRKcEEvOT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sroa$speculated$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$0>>2]|0;
 $6 = (($4) - ($5))|0;
 $7 = (($6) + 1)|0;
 $8 = (__ZNKSt3__26vectorIcNS_9allocatorIcEEE8max_sizeEv($0)|0);
 $9 = ($8>>>0)<($7>>>0);
 if ($9) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $10 = ((($0)) + 8|0);
 $11 = ((($0)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = HEAP32[$0>>2]|0;
 $14 = (($12) - ($13))|0;
 $15 = $8 >>> 1;
 $16 = ($14>>>0)<($15>>>0);
 $17 = $14 << 1;
 $18 = ($17>>>0)<($7>>>0);
 $$sroa$speculated$i = $18 ? $7 : $17;
 $spec$select$i = $16 ? $$sroa$speculated$i : $8;
 $19 = HEAP32[$3>>2]|0;
 $20 = (($19) - ($13))|0;
 __ZNSt3__214__split_bufferIcRNS_9allocatorIcEEEC2EmmS3_($2,$spec$select$i,$20,$10);
 $21 = ((($2)) + 8|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = HEAP8[$1>>0]|0;
 HEAP8[$22>>0] = $23;
 $24 = HEAP32[$21>>2]|0;
 $25 = ((($24)) + 1|0);
 HEAP32[$21>>2] = $25;
 __THREW__ = 0;
 invoke_vii(160,($0|0),($2|0));
 $26 = __THREW__; __THREW__ = 0;
 $27 = $26&1;
 if ($27) {
  $28 = ___cxa_find_matching_catch_2()|0;
  $29 = (getTempRet0() | 0);
  __ZNSt3__214__split_bufferIcRNS_9allocatorIcEEED2Ev($2);
  ___resumeException($28|0);
  // unreachable;
 } else {
  __ZNSt3__214__split_bufferIcRNS_9allocatorIcEEED2Ev($2);
  STACKTOP = sp;return;
 }
}
function __ZN10emscripten8internal11BindingTypeIPNSt3__26vectorIcNS2_9allocatorIcEEEEE10toWireTypeES7_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS0_17AllowedRawPointerINSt3__26vectorIcNS4_9allocatorIcEEEEEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (26428|0);
}
function __ZNSt3__213__vector_baseIcNS_9allocatorIcEEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 }
 $3 = HEAP32[$0>>2]|0;
 $4 = ((($0)) + 4|0);
 HEAP32[$4>>2] = $3;
 __ZdlPv($1);
 return;
}
function __ZN10emscripten8internal14getLightTypeIDINSt3__26vectorIcNS2_9allocatorIcEEEEEEPKvRKT_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (22856|0);
}
function __ZN10emscripten8internal11LightTypeIDIPKNSt3__26vectorIcNS2_9allocatorIcEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (22904|0);
}
function __ZN10emscripten8internal11LightTypeIDIPNSt3__26vectorIcNS2_9allocatorIcEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (22920|0);
}
function __ZN10emscripten8internal11LightTypeIDINSt3__26vectorIcNS2_9allocatorIcEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (22856|0);
}
function __ZN10emscripten8internal11NoBaseClass6verifyINSt3__26vectorIdNS3_9allocatorIdEEEEEEvv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10emscripten8internal11NoBaseClass11getUpcasterINSt3__26vectorIdNS3_9allocatorIdEEEEEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal11NoBaseClass13getDowncasterINSt3__26vectorIdNS3_9allocatorIdEEEEEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal6TypeIDINSt3__26vectorIdNS2_9allocatorIdEEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINSt3__26vectorIdNS2_9allocatorIdEEEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerINSt3__26vectorIdNS3_9allocatorIdEEEEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIPNSt3__26vectorIdNS2_9allocatorIdEEEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIKNSt3__26vectorIdNS3_9allocatorIdEEEEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIPKNSt3__26vectorIdNS2_9allocatorIdEEEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal13getActualTypeINSt3__26vectorIdNS2_9allocatorIdEEEEEEPKvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14getLightTypeIDINSt3__26vectorIdNS2_9allocatorIdEEEEEEPKvRKT_($0)|0);
 return ($1|0);
}
function __ZN10emscripten8internal14raw_destructorINSt3__26vectorIdNS2_9allocatorIdEEEEEEvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 __ZNSt3__213__vector_baseIdNS_9allocatorIdEEED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJPNSt3__26vectorIdNS5_9allocatorIdEEEEEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJPNSt3__26vectorIdNS5_9allocatorIdEEEEEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS0_17AllowedRawPointerINSt3__26vectorIdNS4_9allocatorIdEEEEEEEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal7InvokerIPNSt3__26vectorIdNS2_9allocatorIdEEEEJEE6invokeEPFS7_vE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (FUNCTION_TABLE_i[$0 & 31]()|0);
 $2 = (__ZN10emscripten8internal11BindingTypeIPNSt3__26vectorIdNS2_9allocatorIdEEEEE10toWireTypeES7_($1)|0);
 return ($2|0);
}
function __ZN10emscripten8internal12operator_newINSt3__26vectorIdNS2_9allocatorIdEEEEJEEEPT_DpOT0_() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Znwm(12)|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($0)) + 4|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($0)) + 8|0);
 HEAP32[$2>>2] = 0;
 return ($0|0);
}
function __ZNSt3__26vectorIdNS_9allocatorIdEEE9push_backERKd($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3|0)==($5|0);
 if ($6) {
  __ZNSt3__26vectorIdNS_9allocatorIdEEE21__push_back_slow_pathIRKdEEvOT_($0,$1);
  return;
 } else {
  $7 = +HEAPF64[$1>>3];
  HEAPF64[$3>>3] = $7;
  $8 = ((($3)) + 8|0);
  HEAP32[$2>>2] = $8;
  return;
 }
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIdNS5_9allocatorIdEEEEEERKdEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 3;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIdNS5_9allocatorIdEEEEEERKdEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIdNS4_9allocatorIdEEEEEERKdEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIMNSt3__26vectorIdNS2_9allocatorIdEEEEFvRKdEEEPT_RKSB_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal13MethodInvokerIMNSt3__26vectorIdNS2_9allocatorIdEEEEFvRKdEvPS6_JS8_EE6invokeERKSA_SB_d($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 var $$elt3 = 0, $$unpack = 0, $$unpack4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = (__ZN10emscripten8internal11BindingTypeIPNSt3__26vectorIdNS2_9allocatorIdEEEEE12fromWireTypeES7_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt3 = ((($0)) + 4|0);
 $$unpack4 = HEAP32[$$elt3>>2]|0;
 $5 = $$unpack4 >> 1;
 $6 = (($4) + ($5)|0);
 $7 = $$unpack4 & 1;
 $8 = ($7|0)==(0);
 if ($8) {
  $12 = $$unpack;
  $14 = $12;
 } else {
  $9 = HEAP32[$6>>2]|0;
  $10 = (($9) + ($$unpack)|0);
  $11 = HEAP32[$10>>2]|0;
  $14 = $11;
 }
 $13 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($2));
 HEAPF64[$3>>3] = $13;
 FUNCTION_TABLE_vii[$14 & 255]($6,$3);
 STACKTOP = sp;return;
}
function __ZNSt3__26vectorIdNS_9allocatorIdEEE6resizeEmRKd($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$0>>2]|0;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 3;
 $8 = ($7>>>0)<($1>>>0);
 if ($8) {
  $9 = (($1) - ($7))|0;
  __ZNSt3__26vectorIdNS_9allocatorIdEEE8__appendEmRKd($0,$9,$2);
  return;
 }
 $10 = ($7>>>0)>($1>>>0);
 if (!($10)) {
  return;
 }
 $11 = HEAP32[$0>>2]|0;
 $12 = (($11) + ($1<<3)|0);
 HEAP32[$3>>2] = $12;
 return;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIdNS5_9allocatorIdEEEEEEmRKdEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 4;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIdNS5_9allocatorIdEEEEEEmRKdEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIdNS4_9allocatorIdEEEEEEmRKdEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIMNSt3__26vectorIdNS2_9allocatorIdEEEEFvmRKdEEEPT_RKSB_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal13MethodInvokerIMNSt3__26vectorIdNS2_9allocatorIdEEEEFvmRKdEvPS6_JmS8_EE6invokeERKSA_SB_md($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = +$3;
 var $$elt3 = 0, $$unpack = 0, $$unpack4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = (__ZN10emscripten8internal11BindingTypeIPNSt3__26vectorIdNS2_9allocatorIdEEEEE12fromWireTypeES7_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt3 = ((($0)) + 4|0);
 $$unpack4 = HEAP32[$$elt3>>2]|0;
 $6 = $$unpack4 >> 1;
 $7 = (($5) + ($6)|0);
 $8 = $$unpack4 & 1;
 $9 = ($8|0)==(0);
 if ($9) {
  $13 = $$unpack;
  $16 = $13;
 } else {
  $10 = HEAP32[$7>>2]|0;
  $11 = (($10) + ($$unpack)|0);
  $12 = HEAP32[$11>>2]|0;
  $16 = $12;
 }
 $14 = (__ZN10emscripten8internal11BindingTypeImE12fromWireTypeEm($2)|0);
 $15 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($3));
 HEAPF64[$4>>3] = $15;
 FUNCTION_TABLE_viii[$16 & 63]($7,$14,$4);
 STACKTOP = sp;return;
}
function __ZNKSt3__26vectorIdNS_9allocatorIdEEE4sizeEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$0>>2]|0;
 $4 = (($2) - ($3))|0;
 $5 = $4 >> 3;
 return ($5|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJmNS0_17AllowedRawPointerIKNSt3__26vectorIdNS5_9allocatorIdEEEEEEEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJmNS0_17AllowedRawPointerIKNSt3__26vectorIdNS5_9allocatorIdEEEEEEEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJmNS0_17AllowedRawPointerIKNSt3__26vectorIdNS4_9allocatorIdEEEEEEEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIMNSt3__26vectorIdNS2_9allocatorIdEEEEKFmvEEEPT_RKS9_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal13MethodInvokerIMNSt3__26vectorIdNS2_9allocatorIdEEEEKFmvEmPKS6_JEE6invokeERKS8_SA_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$elt2 = 0, $$unpack = 0, $$unpack3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = (__ZN10emscripten8internal11BindingTypeIPKNSt3__26vectorIdNS2_9allocatorIdEEEEE12fromWireTypeES8_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt2 = ((($0)) + 4|0);
 $$unpack3 = HEAP32[$$elt2>>2]|0;
 $4 = $$unpack3 >> 1;
 $5 = (($3) + ($4)|0);
 $6 = $$unpack3 & 1;
 $7 = ($6|0)==(0);
 if ($7) {
  $11 = $$unpack;
  $12 = $11;
 } else {
  $8 = HEAP32[$5>>2]|0;
  $9 = (($8) + ($$unpack)|0);
  $10 = HEAP32[$9>>2]|0;
  $12 = $10;
 }
 $13 = (FUNCTION_TABLE_ii[$12 & 255]($5)|0);
 HEAP32[$2>>2] = $13;
 $14 = (__ZN10emscripten8internal11BindingTypeImE10toWireTypeERKm($2)|0);
 STACKTOP = sp;return ($14|0);
}
function __ZN10emscripten8internal12VectorAccessINSt3__26vectorIdNS2_9allocatorIdEEEEE3getERKS6_m($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($1)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$1>>2]|0;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 3;
 $8 = ($7>>>0)>($2>>>0);
 if ($8) {
  $9 = HEAP32[$1>>2]|0;
  $10 = (($9) + ($2<<3)|0);
  __ZN10emscripten3valC2IRKdEEOT_($0,$10);
  return;
 } else {
  __ZN10emscripten3val9undefinedEv($0);
  return;
 }
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNS_3valERKNSt3__26vectorIdNS5_9allocatorIdEEEEmEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 3;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNS_3valERKNSt3__26vectorIdNS5_9allocatorIdEEEEmEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS_3valERKNSt3__26vectorIdNS4_9allocatorIdEEEEmEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIPFNS_3valERKNSt3__26vectorIdNS3_9allocatorIdEEEEmEEEPT_RKSC_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(4)|0);
 $2 = HEAP32[$0>>2]|0;
 HEAP32[$1>>2] = $2;
 return ($1|0);
}
function __ZN10emscripten8internal15FunctionInvokerIPFNS_3valERKNSt3__26vectorIdNS3_9allocatorIdEEEEmES2_S9_JmEE6invokeEPSB_PS7_m($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = HEAP32[$0>>2]|0;
 $5 = (__ZN10emscripten8internal18GenericBindingTypeINSt3__26vectorIdNS2_9allocatorIdEEEEE12fromWireTypeEPS6_($1)|0);
 $6 = (__ZN10emscripten8internal11BindingTypeImE12fromWireTypeEm($2)|0);
 FUNCTION_TABLE_viii[$4 & 63]($3,$5,$6);
 __THREW__ = 0;
 $7 = (invoke_ii(168,($3|0))|0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $10 = ___cxa_find_matching_catch_2()|0;
  $11 = (getTempRet0() | 0);
  __ZN10emscripten3valD2Ev($3);
  ___resumeException($10|0);
  // unreachable;
 } else {
  __ZN10emscripten3valD2Ev($3);
  STACKTOP = sp;return ($7|0);
 }
 return (0)|0;
}
function __ZN10emscripten8internal12VectorAccessINSt3__26vectorIdNS2_9allocatorIdEEEEE3setERS6_mRKd($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0.0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = +HEAPF64[$2>>3];
 $4 = HEAP32[$0>>2]|0;
 $5 = (($4) + ($1<<3)|0);
 HEAPF64[$5>>3] = $3;
 return 1;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbRNSt3__26vectorIdNS4_9allocatorIdEEEEmRKdEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 4;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbRNSt3__26vectorIdNS4_9allocatorIdEEEEmRKdEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJbRNSt3__26vectorIdNS3_9allocatorIdEEEEmRKdEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJiiiidEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (39276|0);
}
function __ZN10emscripten8internal10getContextIPFbRNSt3__26vectorIdNS2_9allocatorIdEEEEmRKdEEEPT_RKSC_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(4)|0);
 $2 = HEAP32[$0>>2]|0;
 HEAP32[$1>>2] = $2;
 return ($1|0);
}
function __ZN10emscripten8internal15FunctionInvokerIPFbRNSt3__26vectorIdNS2_9allocatorIdEEEEmRKdEbS7_JmS9_EE6invokeEPSB_PS6_md($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = +$3;
 var $10 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = HEAP32[$0>>2]|0;
 $6 = (__ZN10emscripten8internal18GenericBindingTypeINSt3__26vectorIdNS2_9allocatorIdEEEEE12fromWireTypeEPS6_($1)|0);
 $7 = (__ZN10emscripten8internal11BindingTypeImE12fromWireTypeEm($2)|0);
 $8 = (+__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd($3));
 HEAPF64[$4>>3] = $8;
 $9 = (FUNCTION_TABLE_iiii[$5 & 63]($6,$7,$4)|0);
 $10 = (__ZN10emscripten8internal11BindingTypeIbE10toWireTypeEb($9)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJbRNSt3__26vectorIdNS3_9allocatorIdEEEEmRKdEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (14000|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS_3valERKNSt3__26vectorIdNS4_9allocatorIdEEEEmEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (26432|0);
}
function __ZN10emscripten3valC2IRKdEEOT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 __ZN10emscripten8internal12WireTypePackIJRKdEEC2ES3_($2,$1);
 $3 = (__ZN10emscripten8internal6TypeIDIRKdE3getEv()|0);
 $4 = (__ZNK10emscripten8internal12WireTypePackIJRKdEEcvPKvEv($2)|0);
 $5 = (__emval_take_value(($3|0),($4|0))|0);
 HEAP32[$0>>2] = $5;
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal12WireTypePackIJRKdEEC2ES3_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 HEAP32[$2>>2] = $0;
 $3 = (+__ZN10emscripten8internal11BindingTypeIdE10toWireTypeERKd($1));
 __ZN10emscripten8internal20writeGenericWireTypeERPNS0_15GenericWireTypeEd($2,$3);
 __ZN10emscripten8internal21writeGenericWireTypesERPNS0_15GenericWireTypeE($2);
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal6TypeIDIRKdE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIRKdE3getEv()|0);
 return ($0|0);
}
function __ZNK10emscripten8internal12WireTypePackIJRKdEEcvPKvEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIRKdE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (24928|0);
}
function __ZN10emscripten8internal20writeGenericWireTypeERPNS0_15GenericWireTypeEd($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 HEAPF64[$2>>3] = $1;
 $3 = HEAP32[$0>>2]|0;
 $4 = ((($3)) + 8|0);
 HEAP32[$0>>2] = $4;
 return;
}
function __ZN10emscripten8internal11BindingTypeIPKNSt3__26vectorIdNS2_9allocatorIdEEEEE12fromWireTypeES8_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJmNS0_17AllowedRawPointerIKNSt3__26vectorIdNS4_9allocatorIdEEEEEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (26444|0);
}
function __ZN10emscripten8internal11BindingTypeIPNSt3__26vectorIdNS2_9allocatorIdEEEEE12fromWireTypeES7_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIdNS4_9allocatorIdEEEEEEmRKdEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (14016|0);
}
function __ZNSt3__26vectorIdNS_9allocatorIdEEE8__appendEmRKd($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i = 0, $$promoted$i = 0, $$sroa$speculated$i = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $scevgep$i = 0, $spec$select$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp;
 $4 = ((($0)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($0)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) - ($7))|0;
 $9 = $8 >> 3;
 $10 = ($9>>>0)<($1>>>0);
 if (!($10)) {
  $$promoted$i = HEAP32[$6>>2]|0;
  $$0$i = $1;$12 = $$promoted$i;
  while(1) {
   $11 = +HEAPF64[$2>>3];
   HEAPF64[$12>>3] = $11;
   $13 = ((($12)) + 8|0);
   $14 = (($$0$i) + -1)|0;
   $15 = ($14|0)==(0);
   if ($15) {
    break;
   } else {
    $$0$i = $14;$12 = $13;
   }
  }
  $scevgep$i = (($$promoted$i) + ($1<<3)|0);
  HEAP32[$6>>2] = $scevgep$i;
  STACKTOP = sp;return;
 }
 $16 = HEAP32[$0>>2]|0;
 $17 = (($7) - ($16))|0;
 $18 = $17 >> 3;
 $19 = (($18) + ($1))|0;
 $20 = (__ZNKSt3__26vectorIdNS_9allocatorIdEEE8max_sizeEv($0)|0);
 $21 = ($20>>>0)<($19>>>0);
 if ($21) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $22 = ((($0)) + 8|0);
 $23 = ((($0)) + 8|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = HEAP32[$0>>2]|0;
 $26 = (($24) - ($25))|0;
 $27 = $26 >> 3;
 $28 = $20 >>> 1;
 $29 = ($27>>>0)<($28>>>0);
 $30 = $26 >> 2;
 $31 = ($30>>>0)<($19>>>0);
 $$sroa$speculated$i = $31 ? $19 : $30;
 $spec$select$i = $29 ? $$sroa$speculated$i : $20;
 $32 = HEAP32[$6>>2]|0;
 $33 = (($32) - ($25))|0;
 $34 = $33 >> 3;
 __ZNSt3__214__split_bufferIdRNS_9allocatorIdEEEC2EmmS3_($3,$spec$select$i,$34,$22);
 __THREW__ = 0;
 invoke_viii(24,($3|0),($1|0),($2|0));
 $35 = __THREW__; __THREW__ = 0;
 $36 = $35&1;
 if ($36) {
  $39 = ___cxa_find_matching_catch_2()|0;
  $40 = (getTempRet0() | 0);
  __ZNSt3__214__split_bufferIdRNS_9allocatorIdEEED2Ev($3);
  ___resumeException($39|0);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vii(50,($0|0),($3|0));
 $37 = __THREW__; __THREW__ = 0;
 $38 = $37&1;
 if ($38) {
  $39 = ___cxa_find_matching_catch_2()|0;
  $40 = (getTempRet0() | 0);
  __ZNSt3__214__split_bufferIdRNS_9allocatorIdEEED2Ev($3);
  ___resumeException($39|0);
  // unreachable;
 }
 __ZNSt3__214__split_bufferIdRNS_9allocatorIdEEED2Ev($3);
 STACKTOP = sp;return;
}
function __ZNSt3__214__split_bufferIdRNS_9allocatorIdEEE18__construct_at_endEmRKd($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$promoted = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $scevgep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 8|0);
 $$promoted = HEAP32[$3>>2]|0;
 $$0 = $1;$5 = $$promoted;
 while(1) {
  $4 = +HEAPF64[$2>>3];
  HEAPF64[$5>>3] = $4;
  $6 = ((($5)) + 8|0);
  $7 = (($$0) + -1)|0;
  $8 = ($7|0)==(0);
  if ($8) {
   break;
  } else {
   $$0 = $7;$5 = $6;
  }
 }
 $scevgep = (($$promoted) + ($1<<3)|0);
 HEAP32[$3>>2] = $scevgep;
 return;
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIdNS4_9allocatorIdEEEEEERKdEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (26452|0);
}
function __ZNSt3__26vectorIdNS_9allocatorIdEEE21__push_back_slow_pathIRKdEEvOT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sroa$speculated$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$0>>2]|0;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 3;
 $8 = (($7) + 1)|0;
 $9 = (__ZNKSt3__26vectorIdNS_9allocatorIdEEE8max_sizeEv($0)|0);
 $10 = ($9>>>0)<($8>>>0);
 if ($10) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $11 = ((($0)) + 8|0);
 $12 = ((($0)) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = HEAP32[$0>>2]|0;
 $15 = (($13) - ($14))|0;
 $16 = $15 >> 3;
 $17 = $9 >>> 1;
 $18 = ($16>>>0)<($17>>>0);
 $19 = $15 >> 2;
 $20 = ($19>>>0)<($8>>>0);
 $$sroa$speculated$i = $20 ? $8 : $19;
 $spec$select$i = $18 ? $$sroa$speculated$i : $9;
 $21 = HEAP32[$3>>2]|0;
 $22 = (($21) - ($14))|0;
 $23 = $22 >> 3;
 __ZNSt3__214__split_bufferIdRNS_9allocatorIdEEEC2EmmS3_($2,$spec$select$i,$23,$11);
 $24 = ((($2)) + 8|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = +HEAPF64[$1>>3];
 HEAPF64[$25>>3] = $26;
 $27 = ((($25)) + 8|0);
 HEAP32[$24>>2] = $27;
 __THREW__ = 0;
 invoke_vii(50,($0|0),($2|0));
 $28 = __THREW__; __THREW__ = 0;
 $29 = $28&1;
 if ($29) {
  $30 = ___cxa_find_matching_catch_2()|0;
  $31 = (getTempRet0() | 0);
  __ZNSt3__214__split_bufferIdRNS_9allocatorIdEEED2Ev($2);
  ___resumeException($30|0);
  // unreachable;
 } else {
  __ZNSt3__214__split_bufferIdRNS_9allocatorIdEEED2Ev($2);
  STACKTOP = sp;return;
 }
}
function __ZN10emscripten8internal11BindingTypeIPNSt3__26vectorIdNS2_9allocatorIdEEEEE10toWireTypeES7_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS0_17AllowedRawPointerINSt3__26vectorIdNS4_9allocatorIdEEEEEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (26464|0);
}
function __ZN10emscripten8internal14getLightTypeIDINSt3__26vectorIdNS2_9allocatorIdEEEEEEPKvRKT_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (22104|0);
}
function __ZN10emscripten8internal11LightTypeIDIPKNSt3__26vectorIdNS2_9allocatorIdEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (22936|0);
}
function __ZN10emscripten8internal11LightTypeIDIPNSt3__26vectorIdNS2_9allocatorIdEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (22952|0);
}
function __ZN10emscripten8internal11LightTypeIDINSt3__26vectorIdNS2_9allocatorIdEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (22104|0);
}
function __ZN10emscripten8internal11NoBaseClass6verifyINSt3__26vectorIiNS3_9allocatorIiEEEEEEvv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10emscripten8internal11NoBaseClass11getUpcasterINSt3__26vectorIiNS3_9allocatorIiEEEEEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal11NoBaseClass13getDowncasterINSt3__26vectorIiNS3_9allocatorIiEEEEEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal6TypeIDINSt3__26vectorIiNS2_9allocatorIiEEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINSt3__26vectorIiNS2_9allocatorIiEEEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerINSt3__26vectorIiNS3_9allocatorIiEEEEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIPNSt3__26vectorIiNS2_9allocatorIiEEEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIKNSt3__26vectorIiNS3_9allocatorIiEEEEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIPKNSt3__26vectorIiNS2_9allocatorIiEEEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal13getActualTypeINSt3__26vectorIiNS2_9allocatorIiEEEEEEPKvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14getLightTypeIDINSt3__26vectorIiNS2_9allocatorIiEEEEEEPKvRKT_($0)|0);
 return ($1|0);
}
function __ZN10emscripten8internal14raw_destructorINSt3__26vectorIiNS2_9allocatorIiEEEEEEvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 __ZNSt3__213__vector_baseIiNS_9allocatorIiEEED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJPNSt3__26vectorIiNS5_9allocatorIiEEEEEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJPNSt3__26vectorIiNS5_9allocatorIiEEEEEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS0_17AllowedRawPointerINSt3__26vectorIiNS4_9allocatorIiEEEEEEEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal7InvokerIPNSt3__26vectorIiNS2_9allocatorIiEEEEJEE6invokeEPFS7_vE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (FUNCTION_TABLE_i[$0 & 31]()|0);
 $2 = (__ZN10emscripten8internal11BindingTypeIPNSt3__26vectorIiNS2_9allocatorIiEEEEE10toWireTypeES7_($1)|0);
 return ($2|0);
}
function __ZN10emscripten8internal12operator_newINSt3__26vectorIiNS2_9allocatorIiEEEEJEEEPT_DpOT0_() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Znwm(12)|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($0)) + 4|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($0)) + 8|0);
 HEAP32[$2>>2] = 0;
 return ($0|0);
}
function __ZNSt3__26vectorIiNS_9allocatorIiEEE9push_backERKi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3|0)==($5|0);
 if ($6) {
  __ZNSt3__26vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIRKiEEvOT_($0,$1);
  return;
 } else {
  $7 = HEAP32[$1>>2]|0;
  HEAP32[$3>>2] = $7;
  $8 = ((($3)) + 4|0);
  HEAP32[$2>>2] = $8;
  return;
 }
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIiNS5_9allocatorIiEEEEEERKiEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 3;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIiNS5_9allocatorIiEEEEEERKiEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIiNS4_9allocatorIiEEEEEERKiEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIMNSt3__26vectorIiNS2_9allocatorIiEEEEFvRKiEEEPT_RKSB_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal13MethodInvokerIMNSt3__26vectorIiNS2_9allocatorIiEEEEFvRKiEvPS6_JS8_EE6invokeERKSA_SB_i($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$elt2 = 0, $$unpack = 0, $$unpack3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = (__ZN10emscripten8internal11BindingTypeIPNSt3__26vectorIiNS2_9allocatorIiEEEEE12fromWireTypeES7_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt2 = ((($0)) + 4|0);
 $$unpack3 = HEAP32[$$elt2>>2]|0;
 $5 = $$unpack3 >> 1;
 $6 = (($4) + ($5)|0);
 $7 = $$unpack3 & 1;
 $8 = ($7|0)==(0);
 if ($8) {
  $12 = $$unpack;
  $14 = $12;
 } else {
  $9 = HEAP32[$6>>2]|0;
  $10 = (($9) + ($$unpack)|0);
  $11 = HEAP32[$10>>2]|0;
  $14 = $11;
 }
 $13 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($2)|0);
 HEAP32[$3>>2] = $13;
 FUNCTION_TABLE_vii[$14 & 255]($6,$3);
 STACKTOP = sp;return;
}
function __ZNSt3__26vectorIiNS_9allocatorIiEEE6resizeEmRKi($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$0>>2]|0;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 2;
 $8 = ($7>>>0)<($1>>>0);
 if ($8) {
  $9 = (($1) - ($7))|0;
  __ZNSt3__26vectorIiNS_9allocatorIiEEE8__appendEmRKi($0,$9,$2);
  return;
 }
 $10 = ($7>>>0)>($1>>>0);
 if (!($10)) {
  return;
 }
 $11 = HEAP32[$0>>2]|0;
 $12 = (($11) + ($1<<2)|0);
 HEAP32[$3>>2] = $12;
 return;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIiNS5_9allocatorIiEEEEEEmRKiEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 4;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIiNS5_9allocatorIiEEEEEEmRKiEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIiNS4_9allocatorIiEEEEEEmRKiEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIMNSt3__26vectorIiNS2_9allocatorIiEEEEFvmRKiEEEPT_RKSB_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal13MethodInvokerIMNSt3__26vectorIiNS2_9allocatorIiEEEEFvmRKiEvPS6_JmS8_EE6invokeERKSA_SB_mi($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$elt3 = 0, $$unpack = 0, $$unpack4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = (__ZN10emscripten8internal11BindingTypeIPNSt3__26vectorIiNS2_9allocatorIiEEEEE12fromWireTypeES7_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt3 = ((($0)) + 4|0);
 $$unpack4 = HEAP32[$$elt3>>2]|0;
 $6 = $$unpack4 >> 1;
 $7 = (($5) + ($6)|0);
 $8 = $$unpack4 & 1;
 $9 = ($8|0)==(0);
 if ($9) {
  $13 = $$unpack;
  $16 = $13;
 } else {
  $10 = HEAP32[$7>>2]|0;
  $11 = (($10) + ($$unpack)|0);
  $12 = HEAP32[$11>>2]|0;
  $16 = $12;
 }
 $14 = (__ZN10emscripten8internal11BindingTypeImE12fromWireTypeEm($2)|0);
 $15 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($3)|0);
 HEAP32[$4>>2] = $15;
 FUNCTION_TABLE_viii[$16 & 63]($7,$14,$4);
 STACKTOP = sp;return;
}
function __ZNKSt3__26vectorIiNS_9allocatorIiEEE4sizeEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$0>>2]|0;
 $4 = (($2) - ($3))|0;
 $5 = $4 >> 2;
 return ($5|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJmNS0_17AllowedRawPointerIKNSt3__26vectorIiNS5_9allocatorIiEEEEEEEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJmNS0_17AllowedRawPointerIKNSt3__26vectorIiNS5_9allocatorIiEEEEEEEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJmNS0_17AllowedRawPointerIKNSt3__26vectorIiNS4_9allocatorIiEEEEEEEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIMNSt3__26vectorIiNS2_9allocatorIiEEEEKFmvEEEPT_RKS9_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal13MethodInvokerIMNSt3__26vectorIiNS2_9allocatorIiEEEEKFmvEmPKS6_JEE6invokeERKS8_SA_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$elt2 = 0, $$unpack = 0, $$unpack3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = (__ZN10emscripten8internal11BindingTypeIPKNSt3__26vectorIiNS2_9allocatorIiEEEEE12fromWireTypeES8_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt2 = ((($0)) + 4|0);
 $$unpack3 = HEAP32[$$elt2>>2]|0;
 $4 = $$unpack3 >> 1;
 $5 = (($3) + ($4)|0);
 $6 = $$unpack3 & 1;
 $7 = ($6|0)==(0);
 if ($7) {
  $11 = $$unpack;
  $12 = $11;
 } else {
  $8 = HEAP32[$5>>2]|0;
  $9 = (($8) + ($$unpack)|0);
  $10 = HEAP32[$9>>2]|0;
  $12 = $10;
 }
 $13 = (FUNCTION_TABLE_ii[$12 & 255]($5)|0);
 HEAP32[$2>>2] = $13;
 $14 = (__ZN10emscripten8internal11BindingTypeImE10toWireTypeERKm($2)|0);
 STACKTOP = sp;return ($14|0);
}
function __ZN10emscripten8internal12VectorAccessINSt3__26vectorIiNS2_9allocatorIiEEEEE3getERKS6_m($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($1)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$1>>2]|0;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 2;
 $8 = ($7>>>0)>($2>>>0);
 if ($8) {
  $9 = HEAP32[$1>>2]|0;
  $10 = (($9) + ($2<<2)|0);
  __ZN10emscripten3valC2IRKiEEOT_($0,$10);
  return;
 } else {
  __ZN10emscripten3val9undefinedEv($0);
  return;
 }
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNS_3valERKNSt3__26vectorIiNS5_9allocatorIiEEEEmEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 3;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNS_3valERKNSt3__26vectorIiNS5_9allocatorIiEEEEmEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS_3valERKNSt3__26vectorIiNS4_9allocatorIiEEEEmEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIPFNS_3valERKNSt3__26vectorIiNS3_9allocatorIiEEEEmEEEPT_RKSC_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(4)|0);
 $2 = HEAP32[$0>>2]|0;
 HEAP32[$1>>2] = $2;
 return ($1|0);
}
function __ZN10emscripten8internal15FunctionInvokerIPFNS_3valERKNSt3__26vectorIiNS3_9allocatorIiEEEEmES2_S9_JmEE6invokeEPSB_PS7_m($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = HEAP32[$0>>2]|0;
 $5 = (__ZN10emscripten8internal18GenericBindingTypeINSt3__26vectorIiNS2_9allocatorIiEEEEE12fromWireTypeEPS6_($1)|0);
 $6 = (__ZN10emscripten8internal11BindingTypeImE12fromWireTypeEm($2)|0);
 FUNCTION_TABLE_viii[$4 & 63]($3,$5,$6);
 __THREW__ = 0;
 $7 = (invoke_ii(168,($3|0))|0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $10 = ___cxa_find_matching_catch_2()|0;
  $11 = (getTempRet0() | 0);
  __ZN10emscripten3valD2Ev($3);
  ___resumeException($10|0);
  // unreachable;
 } else {
  __ZN10emscripten3valD2Ev($3);
  STACKTOP = sp;return ($7|0);
 }
 return (0)|0;
}
function __ZN10emscripten8internal12VectorAccessINSt3__26vectorIiNS2_9allocatorIiEEEEE3setERS6_mRKi($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$0>>2]|0;
 $5 = (($4) + ($1<<2)|0);
 HEAP32[$5>>2] = $3;
 return 1;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbRNSt3__26vectorIiNS4_9allocatorIiEEEEmRKiEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 4;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbRNSt3__26vectorIiNS4_9allocatorIiEEEEmRKiEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJbRNSt3__26vectorIiNS3_9allocatorIiEEEEmRKiEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIPFbRNSt3__26vectorIiNS2_9allocatorIiEEEEmRKiEEEPT_RKSC_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm(4)|0);
 $2 = HEAP32[$0>>2]|0;
 HEAP32[$1>>2] = $2;
 return ($1|0);
}
function __ZN10emscripten8internal15FunctionInvokerIPFbRNSt3__26vectorIiNS2_9allocatorIiEEEEmRKiEbS7_JmS9_EE6invokeEPSB_PS6_mi($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = HEAP32[$0>>2]|0;
 $6 = (__ZN10emscripten8internal18GenericBindingTypeINSt3__26vectorIiNS2_9allocatorIiEEEEE12fromWireTypeEPS6_($1)|0);
 $7 = (__ZN10emscripten8internal11BindingTypeImE12fromWireTypeEm($2)|0);
 $8 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($3)|0);
 HEAP32[$4>>2] = $8;
 $9 = (FUNCTION_TABLE_iiii[$5 & 63]($6,$7,$4)|0);
 $10 = (__ZN10emscripten8internal11BindingTypeIbE10toWireTypeEb($9)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZN10emscripten8internal18GenericBindingTypeINSt3__26vectorIiNS2_9allocatorIiEEEEE12fromWireTypeEPS6_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJbRNSt3__26vectorIiNS3_9allocatorIiEEEEmRKiEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (14032|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS_3valERKNSt3__26vectorIiNS4_9allocatorIiEEEEmEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (26468|0);
}
function __ZN10emscripten3valC2IRKiEEOT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 __ZN10emscripten8internal12WireTypePackIJRKiEEC2ES3_($2,$1);
 $3 = (__ZN10emscripten8internal6TypeIDIRKiE3getEv()|0);
 $4 = (__ZNK10emscripten8internal12WireTypePackIJRKiEEcvPKvEv($2)|0);
 $5 = (__emval_take_value(($3|0),($4|0))|0);
 HEAP32[$0>>2] = $5;
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal12WireTypePackIJRKiEEC2ES3_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 HEAP32[$2>>2] = $0;
 $3 = (__ZN10emscripten8internal11BindingTypeIiE10toWireTypeERKi($1)|0);
 __ZN10emscripten8internal20writeGenericWireTypeIiEEvRPNS0_15GenericWireTypeET_($2,$3);
 __ZN10emscripten8internal21writeGenericWireTypesERPNS0_15GenericWireTypeE($2);
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal6TypeIDIRKiE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIRKiE3getEv()|0);
 return ($0|0);
}
function __ZNK10emscripten8internal12WireTypePackIJRKiEEcvPKvEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIRKiE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (24888|0);
}
function __ZN10emscripten8internal20writeGenericWireTypeIiEEvRPNS0_15GenericWireTypeET_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 HEAP32[$2>>2] = $1;
 $3 = HEAP32[$0>>2]|0;
 $4 = ((($3)) + 8|0);
 HEAP32[$0>>2] = $4;
 return;
}
function __ZN10emscripten8internal11BindingTypeIPKNSt3__26vectorIiNS2_9allocatorIiEEEEE12fromWireTypeES8_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJmNS0_17AllowedRawPointerIKNSt3__26vectorIiNS4_9allocatorIiEEEEEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (26480|0);
}
function __ZN10emscripten8internal11BindingTypeIPNSt3__26vectorIiNS2_9allocatorIiEEEEE12fromWireTypeES7_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIiNS4_9allocatorIiEEEEEEmRKiEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (14048|0);
}
function __ZNSt3__26vectorIiNS_9allocatorIiEEE8__appendEmRKi($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i = 0, $$promoted$i = 0, $$sroa$speculated$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $scevgep$i = 0, $spec$select$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp;
 $4 = ((($0)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($0)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) - ($7))|0;
 $9 = $8 >> 2;
 $10 = ($9>>>0)<($1>>>0);
 if (!($10)) {
  $$promoted$i = HEAP32[$6>>2]|0;
  $$0$i = $1;$12 = $$promoted$i;
  while(1) {
   $11 = HEAP32[$2>>2]|0;
   HEAP32[$12>>2] = $11;
   $13 = ((($12)) + 4|0);
   $14 = (($$0$i) + -1)|0;
   $15 = ($14|0)==(0);
   if ($15) {
    break;
   } else {
    $$0$i = $14;$12 = $13;
   }
  }
  $scevgep$i = (($$promoted$i) + ($1<<2)|0);
  HEAP32[$6>>2] = $scevgep$i;
  STACKTOP = sp;return;
 }
 $16 = HEAP32[$0>>2]|0;
 $17 = (($7) - ($16))|0;
 $18 = $17 >> 2;
 $19 = (($18) + ($1))|0;
 $20 = (__ZNKSt3__26vectorIiNS_9allocatorIiEEE8max_sizeEv($0)|0);
 $21 = ($20>>>0)<($19>>>0);
 if ($21) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $22 = ((($0)) + 8|0);
 $23 = ((($0)) + 8|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = HEAP32[$0>>2]|0;
 $26 = (($24) - ($25))|0;
 $27 = $26 >> 2;
 $28 = $20 >>> 1;
 $29 = ($27>>>0)<($28>>>0);
 $30 = $26 >> 1;
 $31 = ($30>>>0)<($19>>>0);
 $$sroa$speculated$i = $31 ? $19 : $30;
 $spec$select$i = $29 ? $$sroa$speculated$i : $20;
 $32 = HEAP32[$6>>2]|0;
 $33 = (($32) - ($25))|0;
 $34 = $33 >> 2;
 __ZNSt3__214__split_bufferIiRNS_9allocatorIiEEEC2EmmS3_($3,$spec$select$i,$34,$22);
 __THREW__ = 0;
 invoke_viii(25,($3|0),($1|0),($2|0));
 $35 = __THREW__; __THREW__ = 0;
 $36 = $35&1;
 if ($36) {
  $39 = ___cxa_find_matching_catch_2()|0;
  $40 = (getTempRet0() | 0);
  __ZNSt3__214__split_bufferIiRNS_9allocatorIiEEED2Ev($3);
  ___resumeException($39|0);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vii(161,($0|0),($3|0));
 $37 = __THREW__; __THREW__ = 0;
 $38 = $37&1;
 if ($38) {
  $39 = ___cxa_find_matching_catch_2()|0;
  $40 = (getTempRet0() | 0);
  __ZNSt3__214__split_bufferIiRNS_9allocatorIiEEED2Ev($3);
  ___resumeException($39|0);
  // unreachable;
 }
 __ZNSt3__214__split_bufferIiRNS_9allocatorIiEEED2Ev($3);
 STACKTOP = sp;return;
}
function __ZNKSt3__26vectorIiNS_9allocatorIiEEE8max_sizeEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1073741823;
}
function __ZNSt3__214__split_bufferIiRNS_9allocatorIiEEEC2EmmS3_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 12|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($0)) + 16|0);
 HEAP32[$5>>2] = $3;
 $6 = ($1|0)==(0);
 do {
  if ($6) {
   $15 = 0;
  } else {
   $7 = ($1>>>0)>(1073741823);
   if (!($7)) {
    $13 = $1 << 2;
    $14 = (__Znwm($13)|0);
    $15 = $14;
    break;
   }
   $8 = (___cxa_allocate_exception(8)|0);
   __THREW__ = 0;
   invoke_vii(45,($8|0),(43841|0));
   $9 = __THREW__; __THREW__ = 0;
   $10 = $9&1;
   if ($10) {
    $11 = ___cxa_find_matching_catch_2()|0;
    $12 = (getTempRet0() | 0);
    ___cxa_free_exception(($8|0));
    ___resumeException($11|0);
    // unreachable;
   } else {
    HEAP32[$8>>2] = (30800);
    ___cxa_throw(($8|0),(24744|0),(226|0));
    // unreachable;
   }
  }
 } while(0);
 HEAP32[$0>>2] = $15;
 $16 = (($15) + ($2<<2)|0);
 $17 = ((($0)) + 8|0);
 HEAP32[$17>>2] = $16;
 $18 = ((($0)) + 4|0);
 HEAP32[$18>>2] = $16;
 $19 = (($15) + ($1<<2)|0);
 $20 = ((($0)) + 12|0);
 HEAP32[$20>>2] = $19;
 return;
}
function __ZNSt3__214__split_bufferIiRNS_9allocatorIiEEE18__construct_at_endEmRKi($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$promoted = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $scevgep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 8|0);
 $$promoted = HEAP32[$3>>2]|0;
 $$0 = $1;$5 = $$promoted;
 while(1) {
  $4 = HEAP32[$2>>2]|0;
  HEAP32[$5>>2] = $4;
  $6 = ((($5)) + 4|0);
  $7 = (($$0) + -1)|0;
  $8 = ($7|0)==(0);
  if ($8) {
   break;
  } else {
   $$0 = $7;$5 = $6;
  }
 }
 $scevgep = (($$promoted) + ($1<<2)|0);
 HEAP32[$3>>2] = $scevgep;
 return;
}
function __ZNSt3__26vectorIiNS_9allocatorIiEEE26__swap_out_circular_bufferERNS_14__split_bufferIiRS2_EE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1)) + 4|0);
 $6 = $2;
 $7 = (($4) - ($6))|0;
 $8 = $7 >> 2;
 $9 = HEAP32[$5>>2]|0;
 $10 = (0 - ($8))|0;
 $11 = (($9) + ($10<<2)|0);
 HEAP32[$5>>2] = $11;
 $12 = ($7|0)>(0);
 if ($12) {
  _memcpy(($11|0),($2|0),($7|0))|0;
 }
 $13 = HEAP32[$0>>2]|0;
 $14 = HEAP32[$5>>2]|0;
 HEAP32[$0>>2] = $14;
 HEAP32[$5>>2] = $13;
 $15 = ((($1)) + 8|0);
 $16 = HEAP32[$3>>2]|0;
 $17 = HEAP32[$15>>2]|0;
 HEAP32[$3>>2] = $17;
 HEAP32[$15>>2] = $16;
 $18 = ((($0)) + 8|0);
 $19 = ((($1)) + 12|0);
 $20 = HEAP32[$18>>2]|0;
 $21 = HEAP32[$19>>2]|0;
 HEAP32[$18>>2] = $21;
 HEAP32[$19>>2] = $20;
 $22 = HEAP32[$5>>2]|0;
 HEAP32[$1>>2] = $22;
 return;
}
function __ZNSt3__214__split_bufferIiRNS_9allocatorIiEEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $scevgep$i$i$i = 0, $scevgep4$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==($2|0);
 if (!($5)) {
  $scevgep$i$i$i = ((($4)) + -4|0);
  $6 = $scevgep$i$i$i;
  $7 = $2;
  $8 = (($6) - ($7))|0;
  $9 = $8 >>> 2;
  $10 = $9 ^ -1;
  $scevgep4$i$i$i = (($4) + ($10<<2)|0);
  HEAP32[$3>>2] = $scevgep4$i$i$i;
 }
 $11 = HEAP32[$0>>2]|0;
 $12 = ($11|0)==(0|0);
 if ($12) {
  return;
 }
 __ZdlPv($11);
 return;
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIiNS4_9allocatorIiEEEEEERKiEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (26488|0);
}
function __ZNSt3__26vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIRKiEEvOT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sroa$speculated$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$0>>2]|0;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 2;
 $8 = (($7) + 1)|0;
 $9 = (__ZNKSt3__26vectorIiNS_9allocatorIiEEE8max_sizeEv($0)|0);
 $10 = ($9>>>0)<($8>>>0);
 if ($10) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $11 = ((($0)) + 8|0);
 $12 = ((($0)) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = HEAP32[$0>>2]|0;
 $15 = (($13) - ($14))|0;
 $16 = $15 >> 2;
 $17 = $9 >>> 1;
 $18 = ($16>>>0)<($17>>>0);
 $19 = $15 >> 1;
 $20 = ($19>>>0)<($8>>>0);
 $$sroa$speculated$i = $20 ? $8 : $19;
 $spec$select$i = $18 ? $$sroa$speculated$i : $9;
 $21 = HEAP32[$3>>2]|0;
 $22 = (($21) - ($14))|0;
 $23 = $22 >> 2;
 __ZNSt3__214__split_bufferIiRNS_9allocatorIiEEEC2EmmS3_($2,$spec$select$i,$23,$11);
 $24 = ((($2)) + 8|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = HEAP32[$1>>2]|0;
 HEAP32[$25>>2] = $26;
 $27 = ((($25)) + 4|0);
 HEAP32[$24>>2] = $27;
 __THREW__ = 0;
 invoke_vii(161,($0|0),($2|0));
 $28 = __THREW__; __THREW__ = 0;
 $29 = $28&1;
 if ($29) {
  $30 = ___cxa_find_matching_catch_2()|0;
  $31 = (getTempRet0() | 0);
  __ZNSt3__214__split_bufferIiRNS_9allocatorIiEEED2Ev($2);
  ___resumeException($30|0);
  // unreachable;
 } else {
  __ZNSt3__214__split_bufferIiRNS_9allocatorIiEEED2Ev($2);
  STACKTOP = sp;return;
 }
}
function __ZN10emscripten8internal11BindingTypeIPNSt3__26vectorIiNS2_9allocatorIiEEEEE10toWireTypeES7_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS0_17AllowedRawPointerINSt3__26vectorIiNS4_9allocatorIiEEEEEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (26500|0);
}
function __ZNSt3__213__vector_baseIiNS_9allocatorIiEEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 }
 $3 = HEAP32[$0>>2]|0;
 $4 = ((($0)) + 4|0);
 HEAP32[$4>>2] = $3;
 __ZdlPv($1);
 return;
}
function __ZN10emscripten8internal14getLightTypeIDINSt3__26vectorIiNS2_9allocatorIiEEEEEEPKvRKT_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (22968|0);
}
function __ZN10emscripten8internal11LightTypeIDIPKNSt3__26vectorIiNS2_9allocatorIiEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (23016|0);
}
function __ZN10emscripten8internal11LightTypeIDIPNSt3__26vectorIiNS2_9allocatorIiEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (23032|0);
}
function __ZN10emscripten8internal11LightTypeIDINSt3__26vectorIiNS2_9allocatorIiEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (22968|0);
}
function __ZN9maxiClockC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN7maxiOscC2Ev($0);
 $1 = ((($0)) + 56|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($0)) + 48|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($0)) + 52|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($0)) + 72|0);
 HEAPF64[$4>>3] = 120.0;
 $5 = ((($0)) + 80|0);
 HEAP32[$5>>2] = 1;
 __ZN9maxiClock8setTempoEd($0,120.0);
 return;
}
function __ZN9maxiClock8setTempoEd($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $2 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 72|0);
 HEAPF64[$2>>3] = $1;
 $3 = $1 / 60.0;
 $4 = ((($0)) + 80|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (+($5|0));
 $7 = $3 * $6;
 $8 = ((($0)) + 64|0);
 HEAPF64[$8>>3] = $7;
 return;
}
function __ZN9maxiClock6tickerEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 84|0);
 HEAP8[$1>>0] = 0;
 $2 = ((($0)) + 64|0);
 $3 = +HEAPF64[$2>>3];
 $4 = (+__ZN7maxiOsc6phasorEd($0,$3));
 $5 = (+Math_floor((+$4)));
 $6 = (~~(($5)));
 $7 = ((($0)) + 48|0);
 HEAP32[$7>>2] = $6;
 $8 = ((($0)) + 52|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==($6|0);
 if ($10) {
  return;
 }
 HEAP8[$1>>0] = 1;
 $11 = ((($0)) + 56|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + 1)|0;
 HEAP32[$11>>2] = $13;
 return;
}
function __ZN9maxiClock15setTicksPerBeatEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 80|0);
 HEAP32[$2>>2] = $1;
 $3 = ((($0)) + 72|0);
 $4 = +HEAPF64[$3>>3];
 __ZN9maxiClock8setTempoEd($0,$4);
 return;
}
function __GLOBAL__sub_I_bind_cpp() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___cxx_global_var_init_64();
 return;
}
function ___cxx_global_var_init_64() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN53EmscriptenBindingInitializer_native_and_builtin_typesC2Ev(0);
 return;
}
function __ZN53EmscriptenBindingInitializer_native_and_builtin_typesC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal6TypeIDIvE3getEv()|0);
 __embind_register_void(($1|0),(39512|0));
 $2 = (__ZN10emscripten8internal6TypeIDIbE3getEv()|0);
 __embind_register_bool(($2|0),(39517|0),1,1,0);
 __ZN12_GLOBAL__N_116register_integerIcEEvPKc();
 __ZN12_GLOBAL__N_116register_integerIaEEvPKc();
 __ZN12_GLOBAL__N_116register_integerIhEEvPKc();
 __ZN12_GLOBAL__N_116register_integerIsEEvPKc();
 __ZN12_GLOBAL__N_116register_integerItEEvPKc();
 __ZN12_GLOBAL__N_116register_integerIiEEvPKc();
 __ZN12_GLOBAL__N_116register_integerIjEEvPKc();
 __ZN12_GLOBAL__N_116register_integerIlEEvPKc();
 __ZN12_GLOBAL__N_116register_integerImEEvPKc();
 __ZN12_GLOBAL__N_114register_floatIfEEvPKc();
 __ZN12_GLOBAL__N_114register_floatIdEEvPKc();
 $3 = (__ZN10emscripten8internal6TypeIDINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv()|0);
 __embind_register_std_string(($3|0),(39522|0));
 $4 = (__ZN10emscripten8internal6TypeIDINSt3__212basic_stringIhNS2_11char_traitsIhEENS2_9allocatorIhEEEEE3getEv()|0);
 __embind_register_std_string(($4|0),(39534|0));
 $5 = (__ZN10emscripten8internal6TypeIDINSt3__212basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEE3getEv()|0);
 __embind_register_std_wstring(($5|0),4,(39567|0));
 $6 = (__ZN10emscripten8internal6TypeIDINS_3valEE3getEv()|0);
 __embind_register_emval(($6|0),(39580|0));
 __ZN12_GLOBAL__N_120register_memory_viewIcEEvPKc();
 __ZN12_GLOBAL__N_120register_memory_viewIaEEvPKc(39596);
 __ZN12_GLOBAL__N_120register_memory_viewIhEEvPKc(39633);
 __ZN12_GLOBAL__N_120register_memory_viewIsEEvPKc(39672);
 __ZN12_GLOBAL__N_120register_memory_viewItEEvPKc(39703);
 __ZN12_GLOBAL__N_120register_memory_viewIiEEvPKc(39743);
 __ZN12_GLOBAL__N_120register_memory_viewIjEEvPKc(39772);
 __ZN12_GLOBAL__N_120register_memory_viewIlEEvPKc();
 __ZN12_GLOBAL__N_120register_memory_viewImEEvPKc();
 __ZN12_GLOBAL__N_120register_memory_viewIaEEvPKc(39810);
 __ZN12_GLOBAL__N_120register_memory_viewIhEEvPKc(39842);
 __ZN12_GLOBAL__N_120register_memory_viewIsEEvPKc(39875);
 __ZN12_GLOBAL__N_120register_memory_viewItEEvPKc(39908);
 __ZN12_GLOBAL__N_120register_memory_viewIiEEvPKc(39942);
 __ZN12_GLOBAL__N_120register_memory_viewIjEEvPKc(39975);
 __ZN12_GLOBAL__N_120register_memory_viewIfEEvPKc();
 __ZN12_GLOBAL__N_120register_memory_viewIdEEvPKc();
 __ZN12_GLOBAL__N_120register_memory_viewIeEEvPKc();
 return;
}
function __ZN10emscripten8internal6TypeIDIvE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIvE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_116register_integerIcEEvPKc() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal6TypeIDIcE3getEv()|0);
 __embind_register_integer(($0|0),(40802|0),1,-128,127);
 return;
}
function __ZN12_GLOBAL__N_116register_integerIaEEvPKc() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal6TypeIDIaE3getEv()|0);
 __embind_register_integer(($0|0),(40790|0),1,-128,127);
 return;
}
function __ZN12_GLOBAL__N_116register_integerIhEEvPKc() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal6TypeIDIhE3getEv()|0);
 __embind_register_integer(($0|0),(40776|0),1,0,255);
 return;
}
function __ZN12_GLOBAL__N_116register_integerIsEEvPKc() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal6TypeIDIsE3getEv()|0);
 __embind_register_integer(($0|0),(40770|0),2,-32768,32767);
 return;
}
function __ZN12_GLOBAL__N_116register_integerItEEvPKc() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal6TypeIDItE3getEv()|0);
 __embind_register_integer(($0|0),(40755|0),2,0,65535);
 return;
}
function __ZN12_GLOBAL__N_116register_integerIiEEvPKc() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal6TypeIDIiE3getEv()|0);
 __embind_register_integer(($0|0),(40751|0),4,-2147483648,2147483647);
 return;
}
function __ZN12_GLOBAL__N_116register_integerIjEEvPKc() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal6TypeIDIjE3getEv()|0);
 __embind_register_integer(($0|0),(40738|0),4,0,-1);
 return;
}
function __ZN12_GLOBAL__N_116register_integerIlEEvPKc() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal6TypeIDIlE3getEv()|0);
 __embind_register_integer(($0|0),(40733|0),4,-2147483648,2147483647);
 return;
}
function __ZN12_GLOBAL__N_116register_integerImEEvPKc() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal6TypeIDImE3getEv()|0);
 __embind_register_integer(($0|0),(40719|0),4,0,-1);
 return;
}
function __ZN12_GLOBAL__N_114register_floatIfEEvPKc() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal6TypeIDIfE3getEv()|0);
 __embind_register_float(($0|0),(40713|0),4);
 return;
}
function __ZN12_GLOBAL__N_114register_floatIdEEvPKc() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal6TypeIDIdE3getEv()|0);
 __embind_register_float(($0|0),(40706|0),8);
 return;
}
function __ZN10emscripten8internal6TypeIDINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINSt3__212basic_stringIhNS2_11char_traitsIhEENS2_9allocatorIhEEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIhNS2_11char_traitsIhEENS2_9allocatorIhEEEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINSt3__212basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS_3valEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_3valEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_120register_memory_viewIcEEvPKc() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIcEEE3getEv()|0);
 __embind_register_memory_view(($0|0),0,(40519|0));
 return;
}
function __ZN12_GLOBAL__N_120register_memory_viewIaEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIaEEE3getEv()|0);
 __embind_register_memory_view(($1|0),0,($0|0));
 return;
}
function __ZN12_GLOBAL__N_120register_memory_viewIhEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIhEEE3getEv()|0);
 __embind_register_memory_view(($1|0),1,($0|0));
 return;
}
function __ZN12_GLOBAL__N_120register_memory_viewIsEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIsEEE3getEv()|0);
 __embind_register_memory_view(($1|0),2,($0|0));
 return;
}
function __ZN12_GLOBAL__N_120register_memory_viewItEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewItEEE3getEv()|0);
 __embind_register_memory_view(($1|0),3,($0|0));
 return;
}
function __ZN12_GLOBAL__N_120register_memory_viewIiEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIiEEE3getEv()|0);
 __embind_register_memory_view(($1|0),4,($0|0));
 return;
}
function __ZN12_GLOBAL__N_120register_memory_viewIjEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIjEEE3getEv()|0);
 __embind_register_memory_view(($1|0),5,($0|0));
 return;
}
function __ZN12_GLOBAL__N_120register_memory_viewIlEEvPKc() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIlEEE3getEv()|0);
 __embind_register_memory_view(($0|0),4,(40272|0));
 return;
}
function __ZN12_GLOBAL__N_120register_memory_viewImEEvPKc() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewImEEE3getEv()|0);
 __embind_register_memory_view(($0|0),5,(40202|0));
 return;
}
function __ZN12_GLOBAL__N_120register_memory_viewIfEEvPKc() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIfEEE3getEv()|0);
 __embind_register_memory_view(($0|0),6,(40140|0));
 return;
}
function __ZN12_GLOBAL__N_120register_memory_viewIdEEvPKc() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIdEEE3getEv()|0);
 __embind_register_memory_view(($0|0),7,(40077|0));
 return;
}
function __ZN12_GLOBAL__N_120register_memory_viewIeEEvPKc() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIeEEE3getEv()|0);
 __embind_register_memory_view(($0|0),7,(40009|0));
 return;
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIeEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIeEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIeEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (23048|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIdEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIdEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIdEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (23056|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIfEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIfEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIfEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (23064|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewImEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewImEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewImEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (23072|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIlEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIlEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIlEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (23080|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIjEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIjEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIjEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (23088|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIiEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIiEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIiEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (23096|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewItEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewItEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewItEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (23104|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIsEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIsEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIsEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (23112|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIhEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIhEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIhEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (23120|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIaEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIaEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIaEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (23128|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIcEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIcEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIcEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (23136|0);
}
function __ZN10emscripten8internal11LightTypeIDINS_3valEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (21320|0);
}
function __ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (23144|0);
}
function __ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIhNS2_11char_traitsIhEENS2_9allocatorIhEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (23168|0);
}
function __ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (22072|0);
}
function __ZN10emscripten8internal6TypeIDIfE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIfE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIfE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (24920|0);
}
function __ZN10emscripten8internal6TypeIDImE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDImE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDImE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (24912|0);
}
function __ZN10emscripten8internal6TypeIDIlE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIlE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIlE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (24904|0);
}
function __ZN10emscripten8internal6TypeIDIjE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIjE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIjE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (24896|0);
}
function __ZN10emscripten8internal6TypeIDItE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDItE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDItE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (24880|0);
}
function __ZN10emscripten8internal6TypeIDIsE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIsE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIsE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (24872|0);
}
function __ZN10emscripten8internal6TypeIDIhE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIhE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIhE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (24856|0);
}
function __ZN10emscripten8internal6TypeIDIaE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIaE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIaE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (24864|0);
}
function __ZN10emscripten8internal6TypeIDIcE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIcE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIcE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (24848|0);
}
function __ZN10emscripten8internal11LightTypeIDIvE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (24824|0);
}
function ___getTypeName($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (___strdup($2)|0);
 return ($3|0);
}
function ___stdio_close($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = ((($0)) + 60|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (_dummy_560($2)|0);
 HEAP32[$vararg_buffer>>2] = $3;
 $4 = (___syscall6(6,($vararg_buffer|0))|0);
 $5 = (___syscall_ret($4)|0);
 STACKTOP = sp;return ($5|0);
}
function ___stdio_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$04756 = 0, $$04855 = 0, $$04954 = 0, $$051 = 0, $$1 = 0, $$150 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0;
 var $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer3 = sp + 32|0;
 $vararg_buffer = sp + 16|0;
 $3 = sp;
 $4 = ((($0)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$3>>2] = $5;
 $6 = ((($3)) + 4|0);
 $7 = ((($0)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) - ($5))|0;
 HEAP32[$6>>2] = $9;
 $10 = ((($3)) + 8|0);
 HEAP32[$10>>2] = $1;
 $11 = ((($3)) + 12|0);
 HEAP32[$11>>2] = $2;
 $12 = (($9) + ($2))|0;
 $13 = ((($0)) + 60|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $3;
 HEAP32[$vararg_buffer>>2] = $14;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $15;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = 2;
 $16 = (___syscall146(146,($vararg_buffer|0))|0);
 $17 = (___syscall_ret($16)|0);
 $18 = ($12|0)==($17|0);
 L1: do {
  if ($18) {
   label = 3;
  } else {
   $$04756 = 2;$$04855 = $12;$$04954 = $3;$27 = $17;
   while(1) {
    $26 = ($27|0)<(0);
    if ($26) {
     break;
    }
    $35 = (($$04855) - ($27))|0;
    $36 = ((($$04954)) + 4|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = ($27>>>0)>($37>>>0);
    $39 = ((($$04954)) + 8|0);
    $$150 = $38 ? $39 : $$04954;
    $40 = $38 << 31 >> 31;
    $$1 = (($$04756) + ($40))|0;
    $41 = $38 ? $37 : 0;
    $$0 = (($27) - ($41))|0;
    $42 = HEAP32[$$150>>2]|0;
    $43 = (($42) + ($$0)|0);
    HEAP32[$$150>>2] = $43;
    $44 = ((($$150)) + 4|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = (($45) - ($$0))|0;
    HEAP32[$44>>2] = $46;
    $47 = HEAP32[$13>>2]|0;
    $48 = $$150;
    HEAP32[$vararg_buffer3>>2] = $47;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = $48;
    $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
    HEAP32[$vararg_ptr7>>2] = $$1;
    $49 = (___syscall146(146,($vararg_buffer3|0))|0);
    $50 = (___syscall_ret($49)|0);
    $51 = ($35|0)==($50|0);
    if ($51) {
     label = 3;
     break L1;
    } else {
     $$04756 = $$1;$$04855 = $35;$$04954 = $$150;$27 = $50;
    }
   }
   $28 = ((($0)) + 16|0);
   HEAP32[$28>>2] = 0;
   HEAP32[$4>>2] = 0;
   HEAP32[$7>>2] = 0;
   $29 = HEAP32[$0>>2]|0;
   $30 = $29 | 32;
   HEAP32[$0>>2] = $30;
   $31 = ($$04756|0)==(2);
   if ($31) {
    $$051 = 0;
   } else {
    $32 = ((($$04954)) + 4|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = (($2) - ($33))|0;
    $$051 = $34;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $19 = ((($0)) + 44|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($0)) + 48|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($20) + ($22)|0);
  $24 = ((($0)) + 16|0);
  HEAP32[$24>>2] = $23;
  $25 = $20;
  HEAP32[$4>>2] = $25;
  HEAP32[$7>>2] = $25;
  $$051 = $2;
 }
 STACKTOP = sp;return ($$051|0);
}
function ___stdio_seek($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$pre = 0, $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 20|0;
 $4 = ((($0)) + 60|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $3;
 HEAP32[$vararg_buffer>>2] = $5;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 0;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $1;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $6;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $2;
 $7 = (___syscall140(140,($vararg_buffer|0))|0);
 $8 = (___syscall_ret($7)|0);
 $9 = ($8|0)<(0);
 if ($9) {
  HEAP32[$3>>2] = -1;
  $10 = -1;
 } else {
  $$pre = HEAP32[$3>>2]|0;
  $10 = $$pre;
 }
 STACKTOP = sp;return ($10|0);
}
function ___syscall_ret($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0>>>0)>(4294963200);
 if ($1) {
  $2 = (0 - ($0))|0;
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = $2;
  $$0 = -1;
 } else {
  $$0 = $0;
 }
 return ($$0|0);
}
function ___errno_location() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (49160|0);
}
function _dummy_560($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function ___stdio_read($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$cast = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp + 16|0;
 $3 = sp;
 HEAP32[$3>>2] = $1;
 $4 = ((($3)) + 4|0);
 $5 = ((($0)) + 48|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0);
 $8 = $7&1;
 $9 = (($2) - ($8))|0;
 HEAP32[$4>>2] = $9;
 $10 = ((($3)) + 8|0);
 $11 = ((($0)) + 44|0);
 $12 = HEAP32[$11>>2]|0;
 HEAP32[$10>>2] = $12;
 $13 = ((($3)) + 12|0);
 HEAP32[$13>>2] = $6;
 $14 = ((($0)) + 60|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $3;
 HEAP32[$vararg_buffer>>2] = $15;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $16;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = 2;
 $17 = (___syscall145(145,($vararg_buffer|0))|0);
 $18 = (___syscall_ret($17)|0);
 $19 = ($18|0)<(1);
 if ($19) {
  $20 = $18 & 48;
  $21 = $20 ^ 16;
  $22 = HEAP32[$0>>2]|0;
  $23 = $22 | $21;
  HEAP32[$0>>2] = $23;
  $$0 = $18;
 } else {
  $24 = HEAP32[$4>>2]|0;
  $25 = ($18>>>0)>($24>>>0);
  if ($25) {
   $26 = (($18) - ($24))|0;
   $27 = HEAP32[$11>>2]|0;
   $28 = ((($0)) + 4|0);
   HEAP32[$28>>2] = $27;
   $$cast = $27;
   $29 = (($$cast) + ($26)|0);
   $30 = ((($0)) + 8|0);
   HEAP32[$30>>2] = $29;
   $31 = HEAP32[$5>>2]|0;
   $32 = ($31|0)==(0);
   if ($32) {
    $$0 = $2;
   } else {
    $33 = ((($$cast)) + 1|0);
    HEAP32[$28>>2] = $33;
    $34 = HEAP8[$$cast>>0]|0;
    $35 = (($2) + -1)|0;
    $36 = (($1) + ($35)|0);
    HEAP8[$36>>0] = $34;
    $$0 = $2;
   }
  } else {
   $$0 = $18;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___stdout_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 16|0;
 $4 = ((($0)) + 36|0);
 HEAP32[$4>>2] = 4;
 $5 = HEAP32[$0>>2]|0;
 $6 = $5 & 64;
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = ((($0)) + 60|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $3;
  HEAP32[$vararg_buffer>>2] = $9;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 21523;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $10;
  $11 = (___syscall54(54,($vararg_buffer|0))|0);
  $12 = ($11|0)==(0);
  if (!($12)) {
   $13 = ((($0)) + 75|0);
   HEAP8[$13>>0] = -1;
  }
 }
 $14 = (___stdio_write($0,$1,$2)|0);
 STACKTOP = sp;return ($14|0);
}
function _strtoull_l($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (_strtoull($0,$1,$2)|0);
 $5 = (getTempRet0() | 0);
 setTempRet0(($5) | 0);
 return ($4|0);
}
function _strtoull($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_strtox_727($0,$1,$2,-1,-1)|0);
 $4 = (getTempRet0() | 0);
 setTempRet0(($4) | 0);
 return ($3|0);
}
function _strtox_727($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $5 = sp;
 HEAP32[$5>>2] = 0;
 $6 = ((($5)) + 4|0);
 HEAP32[$6>>2] = $0;
 $7 = ((($5)) + 44|0);
 HEAP32[$7>>2] = $0;
 $8 = ($0|0)<(0|0);
 $9 = ((($0)) + 2147483647|0);
 $$sink = $8 ? (-1) : $9;
 $10 = ((($5)) + 8|0);
 HEAP32[$10>>2] = $$sink;
 $11 = ((($5)) + 76|0);
 HEAP32[$11>>2] = -1;
 ___shlim($5,0);
 $12 = (___intscan($5,$2,1,$3,$4)|0);
 $13 = (getTempRet0() | 0);
 $14 = ($1|0)==(0|0);
 if (!($14)) {
  $15 = ((($5)) + 108|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = HEAP32[$6>>2]|0;
  $18 = HEAP32[$10>>2]|0;
  $19 = (($17) + ($16))|0;
  $20 = (($19) - ($18))|0;
  $21 = (($0) + ($20)|0);
  HEAP32[$1>>2] = $21;
 }
 setTempRet0(($13) | 0);
 STACKTOP = sp;return ($12|0);
}
function ___shlim($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 104|0);
 HEAP32[$2>>2] = $1;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) - ($6))|0;
 $8 = ((($0)) + 108|0);
 HEAP32[$8>>2] = $7;
 $9 = ($1|0)!=(0);
 $10 = ($7|0)>($1|0);
 $or$cond = $9 & $10;
 if ($or$cond) {
  $11 = $6;
  $12 = (($11) + ($1)|0);
  $13 = ((($0)) + 100|0);
  HEAP32[$13>>2] = $12;
 } else {
  $14 = ((($0)) + 100|0);
  HEAP32[$14>>2] = $4;
 }
 return;
}
function ___intscan($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0154215 = 0, $$0157 = 0, $$0159 = 0, $$1155184 = 0, $$1158 = 0, $$1160 = 0, $$1160170 = 0, $$1165 = 0, $$1165168 = 0, $$1165169 = 0, $$2156202 = 0, $$3162208 = 0, $$4163$lcssa = 0, $$6$lcssa = 0, $$7190 = 0, $$8 = 0, $$pre$phi237Z2D = 0, $$pre$phi239Z2D = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0;
 var $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
 var $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond12 = 0, $or$cond179 = 0, $or$cond5 = 0, $or$cond7 = 0, $spec$select166 = 0, $spec$select167 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $5 = ($1>>>0)>(36);
 L1: do {
  if ($5) {
   $6 = (___errno_location()|0);
   HEAP32[$6>>2] = 22;
   $291 = 0;$292 = 0;
  } else {
   $7 = ((($0)) + 4|0);
   $8 = ((($0)) + 100|0);
   while(1) {
    $9 = HEAP32[$7>>2]|0;
    $10 = HEAP32[$8>>2]|0;
    $11 = ($9>>>0)<($10>>>0);
    if ($11) {
     $12 = ((($9)) + 1|0);
     HEAP32[$7>>2] = $12;
     $13 = HEAP8[$9>>0]|0;
     $14 = $13&255;
     $16 = $14;
    } else {
     $15 = (___shgetc($0)|0);
     $16 = $15;
    }
    $17 = (_isspace($16)|0);
    $18 = ($17|0)==(0);
    if ($18) {
     break;
    }
   }
   L11: do {
    switch ($16|0) {
    case 43: case 45:  {
     $19 = ($16|0)==(45);
     $20 = $19 << 31 >> 31;
     $21 = HEAP32[$7>>2]|0;
     $22 = HEAP32[$8>>2]|0;
     $23 = ($21>>>0)<($22>>>0);
     if ($23) {
      $24 = ((($21)) + 1|0);
      HEAP32[$7>>2] = $24;
      $25 = HEAP8[$21>>0]|0;
      $26 = $25&255;
      $$0157 = $20;$$0159 = $26;
      break L11;
     } else {
      $27 = (___shgetc($0)|0);
      $$0157 = $20;$$0159 = $27;
      break L11;
     }
     break;
    }
    default: {
     $$0157 = 0;$$0159 = $16;
    }
    }
   } while(0);
   $28 = ($1|0)==(0);
   $29 = $1 | 16;
   $30 = ($29|0)==(16);
   $31 = ($$0159|0)==(48);
   $or$cond5 = $30 & $31;
   do {
    if ($or$cond5) {
     $32 = HEAP32[$7>>2]|0;
     $33 = HEAP32[$8>>2]|0;
     $34 = ($32>>>0)<($33>>>0);
     if ($34) {
      $35 = ((($32)) + 1|0);
      HEAP32[$7>>2] = $35;
      $36 = HEAP8[$32>>0]|0;
      $37 = $36&255;
      $40 = $37;
     } else {
      $38 = (___shgetc($0)|0);
      $40 = $38;
     }
     $39 = $40 | 32;
     $41 = ($39|0)==(120);
     if (!($41)) {
      if ($28) {
       $$1160170 = $40;$$1165168 = 8;
       label = 47;
       break;
      } else {
       $$1160 = $40;$$1165 = $1;
       label = 32;
       break;
      }
     }
     $42 = HEAP32[$7>>2]|0;
     $43 = HEAP32[$8>>2]|0;
     $44 = ($42>>>0)<($43>>>0);
     if ($44) {
      $45 = ((($42)) + 1|0);
      HEAP32[$7>>2] = $45;
      $46 = HEAP8[$42>>0]|0;
      $47 = $46&255;
      $50 = $47;
     } else {
      $48 = (___shgetc($0)|0);
      $50 = $48;
     }
     $49 = ((14305) + ($50)|0);
     $51 = HEAP8[$49>>0]|0;
     $52 = ($51&255)>(15);
     if ($52) {
      $53 = HEAP32[$8>>2]|0;
      $54 = ($53|0)==(0|0);
      if (!($54)) {
       $55 = HEAP32[$7>>2]|0;
       $56 = ((($55)) + -1|0);
       HEAP32[$7>>2] = $56;
      }
      $57 = ($2|0)==(0);
      if ($57) {
       ___shlim($0,0);
       $291 = 0;$292 = 0;
       break L1;
      }
      if ($54) {
       $291 = 0;$292 = 0;
       break L1;
      }
      $58 = HEAP32[$7>>2]|0;
      $59 = ((($58)) + -1|0);
      HEAP32[$7>>2] = $59;
      $291 = 0;$292 = 0;
      break L1;
     } else {
      $$1160170 = $50;$$1165168 = 16;
      label = 47;
     }
    } else {
     $spec$select166 = $28 ? 10 : $1;
     $60 = ((14305) + ($$0159)|0);
     $61 = HEAP8[$60>>0]|0;
     $62 = $61&255;
     $63 = ($spec$select166>>>0)>($62>>>0);
     if ($63) {
      $$1160 = $$0159;$$1165 = $spec$select166;
      label = 32;
     } else {
      $64 = HEAP32[$8>>2]|0;
      $65 = ($64|0)==(0|0);
      if (!($65)) {
       $66 = HEAP32[$7>>2]|0;
       $67 = ((($66)) + -1|0);
       HEAP32[$7>>2] = $67;
      }
      ___shlim($0,0);
      $68 = (___errno_location()|0);
      HEAP32[$68>>2] = 22;
      $291 = 0;$292 = 0;
      break L1;
     }
    }
   } while(0);
   L43: do {
    if ((label|0) == 32) {
     $69 = ($$1165|0)==(10);
     if ($69) {
      $70 = (($$1160) + -48)|0;
      $71 = ($70>>>0)<(10);
      if ($71) {
       $$0154215 = 0;$74 = $70;
       while(1) {
        $72 = ($$0154215*10)|0;
        $73 = (($72) + ($74))|0;
        $75 = HEAP32[$7>>2]|0;
        $76 = HEAP32[$8>>2]|0;
        $77 = ($75>>>0)<($76>>>0);
        if ($77) {
         $78 = ((($75)) + 1|0);
         HEAP32[$7>>2] = $78;
         $79 = HEAP8[$75>>0]|0;
         $80 = $79&255;
         $83 = $80;
        } else {
         $81 = (___shgetc($0)|0);
         $83 = $81;
        }
        $82 = (($83) + -48)|0;
        $84 = ($82>>>0)<(10);
        $85 = ($73>>>0)<(429496729);
        $86 = $84 & $85;
        if ($86) {
         $$0154215 = $73;$74 = $82;
        } else {
         break;
        }
       }
       $87 = ($82>>>0)<(10);
       if ($87) {
        $$3162208 = $83;$88 = $73;$89 = 0;$93 = $82;
        while(1) {
         $90 = (___muldi3(($88|0),($89|0),10,0)|0);
         $91 = (getTempRet0() | 0);
         $92 = ($93|0)<(0);
         $94 = $92 << 31 >> 31;
         $95 = $93 ^ -1;
         $96 = $94 ^ -1;
         $97 = ($91>>>0)>($96>>>0);
         $98 = ($90>>>0)>($95>>>0);
         $99 = ($91|0)==($96|0);
         $100 = $99 & $98;
         $101 = $97 | $100;
         if ($101) {
          $$1165169 = 10;$$8 = $$3162208;$293 = $88;$294 = $89;
          label = 76;
          break L43;
         }
         $102 = (_i64Add(($90|0),($91|0),($93|0),($94|0))|0);
         $103 = (getTempRet0() | 0);
         $104 = HEAP32[$7>>2]|0;
         $105 = HEAP32[$8>>2]|0;
         $106 = ($104>>>0)<($105>>>0);
         if ($106) {
          $107 = ((($104)) + 1|0);
          HEAP32[$7>>2] = $107;
          $108 = HEAP8[$104>>0]|0;
          $109 = $108&255;
          $112 = $109;
         } else {
          $110 = (___shgetc($0)|0);
          $112 = $110;
         }
         $111 = (($112) + -48)|0;
         $113 = ($111>>>0)<(10);
         $114 = ($103>>>0)<(429496729);
         $115 = ($102>>>0)<(2576980378);
         $116 = ($103|0)==(429496729);
         $117 = $116 & $115;
         $118 = $114 | $117;
         $or$cond7 = $113 & $118;
         if ($or$cond7) {
          $$3162208 = $112;$88 = $102;$89 = $103;$93 = $111;
         } else {
          break;
         }
        }
        $119 = ($111>>>0)>(9);
        if ($119) {
         $$1158 = $$0157;$265 = $103;$267 = $102;
        } else {
         $$1165169 = 10;$$8 = $112;$293 = $102;$294 = $103;
         label = 76;
        }
       } else {
        $$1158 = $$0157;$265 = 0;$267 = $73;
       }
      } else {
       $$1158 = $$0157;$265 = 0;$267 = 0;
      }
     } else {
      $$1160170 = $$1160;$$1165168 = $$1165;
      label = 47;
     }
    }
   } while(0);
   L63: do {
    if ((label|0) == 47) {
     $120 = (($$1165168) + -1)|0;
     $121 = $120 & $$1165168;
     $122 = ($121|0)==(0);
     if ($122) {
      $123 = ($$1165168*23)|0;
      $124 = $123 >>> 5;
      $125 = $124 & 7;
      $126 = (40807 + ($125)|0);
      $127 = HEAP8[$126>>0]|0;
      $128 = $127 << 24 >> 24;
      $129 = ((14305) + ($$1160170)|0);
      $130 = HEAP8[$129>>0]|0;
      $131 = $130&255;
      $132 = ($$1165168>>>0)>($131>>>0);
      if ($132) {
       $$1155184 = 0;$135 = $131;
       while(1) {
        $133 = $$1155184 << $128;
        $134 = $135 | $133;
        $136 = HEAP32[$7>>2]|0;
        $137 = HEAP32[$8>>2]|0;
        $138 = ($136>>>0)<($137>>>0);
        if ($138) {
         $139 = ((($136)) + 1|0);
         HEAP32[$7>>2] = $139;
         $140 = HEAP8[$136>>0]|0;
         $141 = $140&255;
         $144 = $141;
        } else {
         $142 = (___shgetc($0)|0);
         $144 = $142;
        }
        $143 = ((14305) + ($144)|0);
        $145 = HEAP8[$143>>0]|0;
        $146 = $145&255;
        $147 = ($$1165168>>>0)>($146>>>0);
        $148 = ($134>>>0)<(134217728);
        $149 = $148 & $147;
        if ($149) {
         $$1155184 = $134;$135 = $146;
        } else {
         break;
        }
       }
       $$4163$lcssa = $144;$$pre$phi237Z2D = $146;$154 = 0;$156 = $134;$295 = $145;
      } else {
       $$4163$lcssa = $$1160170;$$pre$phi237Z2D = $131;$154 = 0;$156 = 0;$295 = $130;
      }
      $150 = (_bitshift64Lshr(-1,-1,($128|0))|0);
      $151 = (getTempRet0() | 0);
      $152 = ($$1165168>>>0)<=($$pre$phi237Z2D>>>0);
      $153 = ($151>>>0)<($154>>>0);
      $155 = ($150>>>0)<($156>>>0);
      $157 = ($151|0)==($154|0);
      $158 = $157 & $155;
      $159 = $153 | $158;
      $or$cond179 = $152 | $159;
      if ($or$cond179) {
       $$1165169 = $$1165168;$$8 = $$4163$lcssa;$293 = $156;$294 = $154;
       label = 76;
       break;
      }
      $160 = $156;$161 = $154;$165 = $295;
      while(1) {
       $162 = (_bitshift64Shl(($160|0),($161|0),($128|0))|0);
       $163 = (getTempRet0() | 0);
       $164 = $165&255;
       $166 = $162 | $164;
       $167 = HEAP32[$7>>2]|0;
       $168 = HEAP32[$8>>2]|0;
       $169 = ($167>>>0)<($168>>>0);
       if ($169) {
        $170 = ((($167)) + 1|0);
        HEAP32[$7>>2] = $170;
        $171 = HEAP8[$167>>0]|0;
        $172 = $171&255;
        $175 = $172;
       } else {
        $173 = (___shgetc($0)|0);
        $175 = $173;
       }
       $174 = ((14305) + ($175)|0);
       $176 = HEAP8[$174>>0]|0;
       $177 = $176&255;
       $178 = ($$1165168>>>0)<=($177>>>0);
       $179 = ($163>>>0)>($151>>>0);
       $180 = ($166>>>0)>($150>>>0);
       $181 = ($163|0)==($151|0);
       $182 = $181 & $180;
       $183 = $179 | $182;
       $or$cond = $178 | $183;
       if ($or$cond) {
        $$1165169 = $$1165168;$$8 = $175;$293 = $166;$294 = $163;
        label = 76;
        break L63;
       } else {
        $160 = $166;$161 = $163;$165 = $176;
       }
      }
     }
     $184 = ((14305) + ($$1160170)|0);
     $185 = HEAP8[$184>>0]|0;
     $186 = $185&255;
     $187 = ($$1165168>>>0)>($186>>>0);
     if ($187) {
      $$2156202 = 0;$190 = $186;
      while(1) {
       $188 = Math_imul($$2156202, $$1165168)|0;
       $189 = (($190) + ($188))|0;
       $191 = HEAP32[$7>>2]|0;
       $192 = HEAP32[$8>>2]|0;
       $193 = ($191>>>0)<($192>>>0);
       if ($193) {
        $194 = ((($191)) + 1|0);
        HEAP32[$7>>2] = $194;
        $195 = HEAP8[$191>>0]|0;
        $196 = $195&255;
        $199 = $196;
       } else {
        $197 = (___shgetc($0)|0);
        $199 = $197;
       }
       $198 = ((14305) + ($199)|0);
       $200 = HEAP8[$198>>0]|0;
       $201 = $200&255;
       $202 = ($$1165168>>>0)>($201>>>0);
       $203 = ($189>>>0)<(119304647);
       $204 = $203 & $202;
       if ($204) {
        $$2156202 = $189;$190 = $201;
       } else {
        break;
       }
      }
      $$6$lcssa = $199;$$pre$phi239Z2D = $201;$296 = $200;$297 = $189;$298 = 0;
     } else {
      $$6$lcssa = $$1160170;$$pre$phi239Z2D = $186;$296 = $185;$297 = 0;$298 = 0;
     }
     $205 = ($$1165168>>>0)>($$pre$phi239Z2D>>>0);
     if ($205) {
      $206 = (___udivdi3(-1,-1,($$1165168|0),0)|0);
      $207 = (getTempRet0() | 0);
      $$7190 = $$6$lcssa;$209 = $298;$211 = $297;$218 = $296;
      while(1) {
       $208 = ($209>>>0)>($207>>>0);
       $210 = ($211>>>0)>($206>>>0);
       $212 = ($209|0)==($207|0);
       $213 = $212 & $210;
       $214 = $208 | $213;
       if ($214) {
        $$1165169 = $$1165168;$$8 = $$7190;$293 = $211;$294 = $209;
        label = 76;
        break L63;
       }
       $215 = (___muldi3(($211|0),($209|0),($$1165168|0),0)|0);
       $216 = (getTempRet0() | 0);
       $217 = $218&255;
       $219 = $217 ^ -1;
       $220 = ($216>>>0)>(4294967295);
       $221 = ($215>>>0)>($219>>>0);
       $222 = ($216|0)==(-1);
       $223 = $222 & $221;
       $224 = $220 | $223;
       if ($224) {
        $$1165169 = $$1165168;$$8 = $$7190;$293 = $211;$294 = $209;
        label = 76;
        break L63;
       }
       $225 = (_i64Add(($215|0),($216|0),($217|0),0)|0);
       $226 = (getTempRet0() | 0);
       $227 = HEAP32[$7>>2]|0;
       $228 = HEAP32[$8>>2]|0;
       $229 = ($227>>>0)<($228>>>0);
       if ($229) {
        $230 = ((($227)) + 1|0);
        HEAP32[$7>>2] = $230;
        $231 = HEAP8[$227>>0]|0;
        $232 = $231&255;
        $235 = $232;
       } else {
        $233 = (___shgetc($0)|0);
        $235 = $233;
       }
       $234 = ((14305) + ($235)|0);
       $236 = HEAP8[$234>>0]|0;
       $237 = $236&255;
       $238 = ($$1165168>>>0)>($237>>>0);
       if ($238) {
        $$7190 = $235;$209 = $226;$211 = $225;$218 = $236;
       } else {
        $$1165169 = $$1165168;$$8 = $235;$293 = $225;$294 = $226;
        label = 76;
        break;
       }
      }
     } else {
      $$1165169 = $$1165168;$$8 = $$6$lcssa;$293 = $297;$294 = $298;
      label = 76;
     }
    }
   } while(0);
   if ((label|0) == 76) {
    $239 = ((14305) + ($$8)|0);
    $240 = HEAP8[$239>>0]|0;
    $241 = $240&255;
    $242 = ($$1165169>>>0)>($241>>>0);
    if ($242) {
     while(1) {
      $243 = HEAP32[$7>>2]|0;
      $244 = HEAP32[$8>>2]|0;
      $245 = ($243>>>0)<($244>>>0);
      if ($245) {
       $246 = ((($243)) + 1|0);
       HEAP32[$7>>2] = $246;
       $247 = HEAP8[$243>>0]|0;
       $248 = $247&255;
       $251 = $248;
      } else {
       $249 = (___shgetc($0)|0);
       $251 = $249;
      }
      $250 = ((14305) + ($251)|0);
      $252 = HEAP8[$250>>0]|0;
      $253 = $252&255;
      $254 = ($$1165169>>>0)>($253>>>0);
      if (!($254)) {
       break;
      }
     }
     $255 = (___errno_location()|0);
     HEAP32[$255>>2] = 34;
     $256 = $3 & 1;
     $257 = ($256|0)==(0);
     $258 = (0)==(0);
     $259 = $257 & $258;
     $spec$select167 = $259 ? $$0157 : 0;
     $$1158 = $spec$select167;$265 = $4;$267 = $3;
    } else {
     $$1158 = $$0157;$265 = $294;$267 = $293;
    }
   }
   $260 = HEAP32[$8>>2]|0;
   $261 = ($260|0)==(0|0);
   if (!($261)) {
    $262 = HEAP32[$7>>2]|0;
    $263 = ((($262)) + -1|0);
    HEAP32[$7>>2] = $263;
   }
   $264 = ($265>>>0)<($4>>>0);
   $266 = ($267>>>0)<($3>>>0);
   $268 = ($265|0)==($4|0);
   $269 = $268 & $266;
   $270 = $264 | $269;
   if (!($270)) {
    $271 = $3 & 1;
    $272 = ($271|0)!=(0);
    $273 = (0)!=(0);
    $274 = $272 | $273;
    $275 = ($$1158|0)!=(0);
    $or$cond12 = $274 | $275;
    if (!($or$cond12)) {
     $276 = (___errno_location()|0);
     HEAP32[$276>>2] = 34;
     $277 = (_i64Add(($3|0),($4|0),-1,-1)|0);
     $278 = (getTempRet0() | 0);
     $291 = $278;$292 = $277;
     break;
    }
    $279 = ($265>>>0)>($4>>>0);
    $280 = ($267>>>0)>($3>>>0);
    $281 = ($265|0)==($4|0);
    $282 = $281 & $280;
    $283 = $279 | $282;
    if ($283) {
     $284 = (___errno_location()|0);
     HEAP32[$284>>2] = 34;
     $291 = $4;$292 = $3;
     break;
    }
   }
   $285 = ($$1158|0)<(0);
   $286 = $285 << 31 >> 31;
   $287 = $267 ^ $$1158;
   $288 = $265 ^ $286;
   $289 = (_i64Subtract(($287|0),($288|0),($$1158|0),($286|0))|0);
   $290 = (getTempRet0() | 0);
   $291 = $290;$292 = $289;
  }
 } while(0);
 setTempRet0(($291) | 0);
 return ($292|0);
}
function ___shgetc($0) {
 $0 = $0|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$phi$trans$insert28 = 0, $$pre = 0, $$pre29 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 104|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  label = 3;
 } else {
  $4 = ((($0)) + 108|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)<($2|0);
  if ($6) {
   label = 3;
  } else {
   label = 4;
  }
 }
 if ((label|0) == 3) {
  $7 = (___uflow($0)|0);
  $8 = ($7|0)<(0);
  if ($8) {
   label = 4;
  } else {
   $10 = HEAP32[$1>>2]|0;
   $11 = ($10|0)==(0);
   $$phi$trans$insert = ((($0)) + 8|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   if ($11) {
    $12 = $$pre;
    $42 = $12;
    label = 9;
   } else {
    $13 = ((($0)) + 4|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = $14;
    $16 = (($$pre) - ($15))|0;
    $17 = ((($0)) + 108|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = (($10) - ($18))|0;
    $20 = ($16|0)<($19|0);
    $21 = $$pre;
    if ($20) {
     $42 = $21;
     label = 9;
    } else {
     $22 = (($19) + -1)|0;
     $23 = (($14) + ($22)|0);
     $24 = ((($0)) + 100|0);
     HEAP32[$24>>2] = $23;
     $27 = $21;
    }
   }
   if ((label|0) == 9) {
    $25 = ((($0)) + 100|0);
    HEAP32[$25>>2] = $$pre;
    $27 = $42;
   }
   $26 = ($27|0)==(0|0);
   $$phi$trans$insert28 = ((($0)) + 4|0);
   if ($26) {
    $$pre29 = HEAP32[$$phi$trans$insert28>>2]|0;
    $37 = $$pre29;
   } else {
    $28 = HEAP32[$$phi$trans$insert28>>2]|0;
    $29 = $27;
    $30 = ((($0)) + 108|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = (($29) + 1)|0;
    $33 = (($32) - ($28))|0;
    $34 = (($33) + ($31))|0;
    HEAP32[$30>>2] = $34;
    $35 = $28;
    $37 = $35;
   }
   $36 = ((($37)) + -1|0);
   $38 = HEAP8[$36>>0]|0;
   $39 = $38&255;
   $40 = ($7|0)==($39|0);
   if ($40) {
    $$0 = $7;
   } else {
    $41 = $7&255;
    HEAP8[$36>>0] = $41;
    $$0 = $7;
   }
  }
 }
 if ((label|0) == 4) {
  $9 = ((($0)) + 100|0);
  HEAP32[$9>>2] = 0;
  $$0 = -1;
 }
 return ($$0|0);
}
function _isspace($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $narrow = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(32);
 $2 = (($0) + -9)|0;
 $3 = ($2>>>0)<(5);
 $narrow = $1 | $3;
 $4 = $narrow&1;
 return ($4|0);
}
function ___uflow($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = (___toread($0)|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = ((($0)) + 32|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (FUNCTION_TABLE_iiii[$5 & 63]($0,$1,1)|0);
  $7 = ($6|0)==(1);
  if ($7) {
   $8 = HEAP8[$1>>0]|0;
   $9 = $8&255;
   $$0 = $9;
  } else {
   $$0 = -1;
  }
 } else {
  $$0 = -1;
 }
 STACKTOP = sp;return ($$0|0);
}
function ___toread($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $sext = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 74|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (($3) + 255)|0;
 $5 = $4 | $3;
 $6 = $5&255;
 HEAP8[$1>>0] = $6;
 $7 = ((($0)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($0)) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($8>>>0)>($10>>>0);
 if ($11) {
  $12 = ((($0)) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  (FUNCTION_TABLE_iiii[$13 & 63]($0,0,0)|0);
 }
 $14 = ((($0)) + 16|0);
 HEAP32[$14>>2] = 0;
 HEAP32[$9>>2] = 0;
 HEAP32[$7>>2] = 0;
 $15 = HEAP32[$0>>2]|0;
 $16 = $15 & 4;
 $17 = ($16|0)==(0);
 if ($17) {
  $19 = ((($0)) + 44|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($0)) + 48|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($20) + ($22)|0);
  $24 = ((($0)) + 8|0);
  HEAP32[$24>>2] = $23;
  $25 = ((($0)) + 4|0);
  HEAP32[$25>>2] = $23;
  $26 = $15 << 27;
  $sext = $26 >> 31;
  $$0 = $sext;
 } else {
  $18 = $15 | 32;
  HEAP32[$0>>2] = $18;
  $$0 = -1;
 }
 return ($$0|0);
}
function _strtoll_l($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (_strtoll($0,$1,$2)|0);
 $5 = (getTempRet0() | 0);
 setTempRet0(($5) | 0);
 return ($4|0);
}
function _strtoll($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_strtox_727($0,$1,$2,0,-2147483648)|0);
 $4 = (getTempRet0() | 0);
 setTempRet0(($4) | 0);
 return ($3|0);
}
function _copysign($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $1;$4 = HEAP32[tempDoublePtr>>2]|0;
 $5 = HEAP32[tempDoublePtr+4>>2]|0;
 $6 = $3 & 2147483647;
 $7 = $5 & -2147483648;
 $8 = $7 | $6;
 HEAP32[tempDoublePtr>>2] = $2;HEAP32[tempDoublePtr+4>>2] = $8;$9 = +HEAPF64[tempDoublePtr>>3];
 return (+$9);
}
function _strcmp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$011 = 0, $$0710 = 0, $$lcssa = 0, $$lcssa8 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[$0>>0]|0;
 $3 = HEAP8[$1>>0]|0;
 $4 = ($2<<24>>24)!=($3<<24>>24);
 $5 = ($2<<24>>24)==(0);
 $or$cond9 = $5 | $4;
 if ($or$cond9) {
  $$lcssa = $3;$$lcssa8 = $2;
 } else {
  $$011 = $1;$$0710 = $0;
  while(1) {
   $6 = ((($$0710)) + 1|0);
   $7 = ((($$011)) + 1|0);
   $8 = HEAP8[$6>>0]|0;
   $9 = HEAP8[$7>>0]|0;
   $10 = ($8<<24>>24)!=($9<<24>>24);
   $11 = ($8<<24>>24)==(0);
   $or$cond = $11 | $10;
   if ($or$cond) {
    $$lcssa = $9;$$lcssa8 = $8;
    break;
   } else {
    $$011 = $7;$$0710 = $6;
   }
  }
 }
 $12 = $$lcssa8&255;
 $13 = $$lcssa&255;
 $14 = (($12) - ($13))|0;
 return ($14|0);
}
function _isdigit($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($0) + -48)|0;
 $2 = ($1>>>0)<(10);
 $3 = $2&1;
 return ($3|0);
}
function _vsnprintf($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$014 = 0, $$015 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $4 = sp + 124|0;
 $5 = sp;
 dest=$5; src=26944; stop=dest+124|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $6 = (($1) + -1)|0;
 $7 = ($6>>>0)>(2147483646);
 if ($7) {
  $8 = ($1|0)==(0);
  if ($8) {
   $$014 = $4;$$015 = 1;
   label = 4;
  } else {
   $9 = (___errno_location()|0);
   HEAP32[$9>>2] = 75;
   $$0 = -1;
  }
 } else {
  $$014 = $0;$$015 = $1;
  label = 4;
 }
 if ((label|0) == 4) {
  $10 = $$014;
  $11 = (-2 - ($10))|0;
  $12 = ($$015>>>0)>($11>>>0);
  $spec$select = $12 ? $11 : $$015;
  $13 = ((($5)) + 48|0);
  HEAP32[$13>>2] = $spec$select;
  $14 = ((($5)) + 20|0);
  HEAP32[$14>>2] = $$014;
  $15 = ((($5)) + 44|0);
  HEAP32[$15>>2] = $$014;
  $16 = (($$014) + ($spec$select)|0);
  $17 = ((($5)) + 16|0);
  HEAP32[$17>>2] = $16;
  $18 = ((($5)) + 28|0);
  HEAP32[$18>>2] = $16;
  $19 = (_vfprintf($5,$2,$3)|0);
  $20 = ($spec$select|0)==(0);
  if ($20) {
   $$0 = $19;
  } else {
   $21 = HEAP32[$14>>2]|0;
   $22 = HEAP32[$17>>2]|0;
   $23 = ($21|0)==($22|0);
   $24 = $23 << 31 >> 31;
   $25 = (($21) + ($24)|0);
   HEAP8[$25>>0] = 0;
   $$0 = $19;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _vfprintf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $spec$select = 0, $spec$select41 = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $3 = sp + 208|0;
 $4 = sp + 160|0;
 $5 = sp + 80|0;
 $6 = sp;
 dest=$4; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$2>>2]|0;
 HEAP32[$3>>2] = $vacopy_currentptr;
 $7 = (_printf_core(0,$1,$3,$5,$4)|0);
 $8 = ($7|0)<(0);
 if ($8) {
  $$0 = -1;
 } else {
  $9 = ((($0)) + 76|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)>(-1);
  if ($11) {
   $12 = (___lockfile($0)|0);
   $40 = $12;
  } else {
   $40 = 0;
  }
  $13 = HEAP32[$0>>2]|0;
  $14 = $13 & 32;
  $15 = ((($0)) + 74|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = ($16<<24>>24)<(1);
  if ($17) {
   $18 = $13 & -33;
   HEAP32[$0>>2] = $18;
  }
  $19 = ((($0)) + 48|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)==(0);
  if ($21) {
   $23 = ((($0)) + 44|0);
   $24 = HEAP32[$23>>2]|0;
   HEAP32[$23>>2] = $6;
   $25 = ((($0)) + 28|0);
   HEAP32[$25>>2] = $6;
   $26 = ((($0)) + 20|0);
   HEAP32[$26>>2] = $6;
   HEAP32[$19>>2] = 80;
   $27 = ((($6)) + 80|0);
   $28 = ((($0)) + 16|0);
   HEAP32[$28>>2] = $27;
   $29 = (_printf_core($0,$1,$3,$5,$4)|0);
   $30 = ($24|0)==(0|0);
   if ($30) {
    $$1 = $29;
   } else {
    $31 = ((($0)) + 36|0);
    $32 = HEAP32[$31>>2]|0;
    (FUNCTION_TABLE_iiii[$32 & 63]($0,0,0)|0);
    $33 = HEAP32[$26>>2]|0;
    $34 = ($33|0)==(0|0);
    $spec$select = $34 ? -1 : $29;
    HEAP32[$23>>2] = $24;
    HEAP32[$19>>2] = 0;
    HEAP32[$28>>2] = 0;
    HEAP32[$25>>2] = 0;
    HEAP32[$26>>2] = 0;
    $$1 = $spec$select;
   }
  } else {
   $22 = (_printf_core($0,$1,$3,$5,$4)|0);
   $$1 = $22;
  }
  $35 = HEAP32[$0>>2]|0;
  $36 = $35 & 32;
  $37 = ($36|0)==(0);
  $spec$select41 = $37 ? $$1 : -1;
  $38 = $35 | $14;
  HEAP32[$0>>2] = $38;
  $39 = ($40|0)==(0);
  if (!($39)) {
   ___unlockfile($0);
  }
  $$0 = $spec$select41;
 }
 STACKTOP = sp;return ($$0|0);
}
function _printf_core($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$0 = 0, $$0228 = 0, $$0229334 = 0, $$0232 = 0, $$0235 = 0, $$0237 = 0, $$0240313 = 0, $$0240313371 = 0, $$0240333 = 0, $$0243 = 0, $$0243$ph = 0, $$0243$ph$be = 0, $$0247 = 0, $$0247$ph = 0, $$0249$lcssa = 0, $$0249321 = 0, $$0252 = 0, $$0253 = 0, $$0254 = 0;
 var $$0259 = 0, $$0262$lcssa = 0, $$0262328 = 0, $$0269$ph = 0, $$1 = 0, $$1230340 = 0, $$1233 = 0, $$1236 = 0, $$1238 = 0, $$1241339 = 0, $$1248 = 0, $$1250 = 0, $$1255 = 0, $$1260 = 0, $$1263 = 0, $$1270 = 0, $$2 = 0, $$2234 = 0, $$2239 = 0, $$2242320 = 0;
 var $$2256 = 0, $$2256$ = 0, $$2261 = 0, $$2271 = 0, $$3257 = 0, $$3265 = 0, $$3272 = 0, $$3317 = 0, $$4258370 = 0, $$4266 = 0, $$5 = 0, $$6268 = 0, $$lcssa308 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$pre360 = 0, $$pre362 = 0, $$pre363 = 0, $$pre363$pre = 0, $$pre364 = 0;
 var $$pre368 = 0, $$sink = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
 var $334 = 0, $335 = 0, $336 = 0.0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0;
 var $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0;
 var $arglist_next3 = 0, $brmerge = 0, $brmerge326 = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $or$cond = 0, $or$cond276 = 0, $or$cond278 = 0, $or$cond283 = 0, $spec$select = 0, $spec$select281 = 0, $spec$select284 = 0;
 var $spec$select291 = 0, $spec$select292 = 0, $spec$select293 = 0, $spec$select294 = 0, $spec$select295 = 0, $spec$select296 = 0, $spec$select297 = 0, $spec$select298 = 0, $spec$select299 = 0, $storemerge273$lcssa = 0, $storemerge273327 = 0, $storemerge274 = 0, $trunc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $5 = sp + 56|0;
 $6 = sp + 40|0;
 $7 = sp;
 $8 = sp + 48|0;
 $9 = sp + 60|0;
 HEAP32[$5>>2] = $1;
 $10 = ($0|0)!=(0|0);
 $11 = ((($7)) + 40|0);
 $12 = $11;
 $13 = ((($7)) + 39|0);
 $14 = ((($8)) + 4|0);
 $$0243$ph = 0;$$0247$ph = 0;$$0269$ph = 0;
 L1: while(1) {
  $$0243 = $$0243$ph;$$0247 = $$0247$ph;
  while(1) {
   $15 = ($$0247|0)>(-1);
   do {
    if ($15) {
     $16 = (2147483647 - ($$0247))|0;
     $17 = ($$0243|0)>($16|0);
     if ($17) {
      $18 = (___errno_location()|0);
      HEAP32[$18>>2] = 75;
      $$1248 = -1;
      break;
     } else {
      $19 = (($$0243) + ($$0247))|0;
      $$1248 = $19;
      break;
     }
    } else {
     $$1248 = $$0247;
    }
   } while(0);
   $20 = HEAP32[$5>>2]|0;
   $21 = HEAP8[$20>>0]|0;
   $22 = ($21<<24>>24)==(0);
   if ($22) {
    label = 94;
    break L1;
   }
   $23 = $21;$25 = $20;
   L12: while(1) {
    switch ($23<<24>>24) {
    case 37:  {
     label = 10;
     break L12;
     break;
    }
    case 0:  {
     $$0249$lcssa = $25;
     break L12;
     break;
    }
    default: {
    }
    }
    $24 = ((($25)) + 1|0);
    HEAP32[$5>>2] = $24;
    $$pre = HEAP8[$24>>0]|0;
    $23 = $$pre;$25 = $24;
   }
   L15: do {
    if ((label|0) == 10) {
     label = 0;
     $$0249321 = $25;$27 = $25;
     while(1) {
      $26 = ((($27)) + 1|0);
      $28 = HEAP8[$26>>0]|0;
      $29 = ($28<<24>>24)==(37);
      if (!($29)) {
       $$0249$lcssa = $$0249321;
       break L15;
      }
      $30 = ((($$0249321)) + 1|0);
      $31 = ((($27)) + 2|0);
      HEAP32[$5>>2] = $31;
      $32 = HEAP8[$31>>0]|0;
      $33 = ($32<<24>>24)==(37);
      if ($33) {
       $$0249321 = $30;$27 = $31;
      } else {
       $$0249$lcssa = $30;
       break;
      }
     }
    }
   } while(0);
   $34 = $$0249$lcssa;
   $35 = $20;
   $36 = (($34) - ($35))|0;
   if ($10) {
    _out($0,$20,$36);
   }
   $37 = ($36|0)==(0);
   if ($37) {
    break;
   } else {
    $$0243 = $36;$$0247 = $$1248;
   }
  }
  $38 = HEAP32[$5>>2]|0;
  $39 = ((($38)) + 1|0);
  $40 = HEAP8[$39>>0]|0;
  $41 = $40 << 24 >> 24;
  $42 = (_isdigit($41)|0);
  $43 = ($42|0)==(0);
  $$pre360 = HEAP32[$5>>2]|0;
  if ($43) {
   $$0253 = -1;$$1270 = $$0269$ph;$$sink = 1;
  } else {
   $44 = ((($$pre360)) + 2|0);
   $45 = HEAP8[$44>>0]|0;
   $46 = ($45<<24>>24)==(36);
   if ($46) {
    $47 = ((($$pre360)) + 1|0);
    $48 = HEAP8[$47>>0]|0;
    $49 = $48 << 24 >> 24;
    $50 = (($49) + -48)|0;
    $$0253 = $50;$$1270 = 1;$$sink = 3;
   } else {
    $$0253 = -1;$$1270 = $$0269$ph;$$sink = 1;
   }
  }
  $51 = (($$pre360) + ($$sink)|0);
  HEAP32[$5>>2] = $51;
  $52 = HEAP8[$51>>0]|0;
  $53 = $52 << 24 >> 24;
  $54 = (($53) + -32)|0;
  $55 = ($54>>>0)>(31);
  $56 = 1 << $54;
  $57 = $56 & 75913;
  $58 = ($57|0)==(0);
  $brmerge326 = $55 | $58;
  if ($brmerge326) {
   $$0262$lcssa = 0;$$lcssa308 = $52;$storemerge273$lcssa = $51;
  } else {
   $$0262328 = 0;$60 = $54;$storemerge273327 = $51;
   while(1) {
    $59 = 1 << $60;
    $61 = $59 | $$0262328;
    $62 = ((($storemerge273327)) + 1|0);
    HEAP32[$5>>2] = $62;
    $63 = HEAP8[$62>>0]|0;
    $64 = $63 << 24 >> 24;
    $65 = (($64) + -32)|0;
    $66 = ($65>>>0)>(31);
    $67 = 1 << $65;
    $68 = $67 & 75913;
    $69 = ($68|0)==(0);
    $brmerge = $66 | $69;
    if ($brmerge) {
     $$0262$lcssa = $61;$$lcssa308 = $63;$storemerge273$lcssa = $62;
     break;
    } else {
     $$0262328 = $61;$60 = $65;$storemerge273327 = $62;
    }
   }
  }
  $70 = ($$lcssa308<<24>>24)==(42);
  if ($70) {
   $71 = ((($storemerge273$lcssa)) + 1|0);
   $72 = HEAP8[$71>>0]|0;
   $73 = $72 << 24 >> 24;
   $74 = (_isdigit($73)|0);
   $75 = ($74|0)==(0);
   if ($75) {
    label = 27;
   } else {
    $76 = HEAP32[$5>>2]|0;
    $77 = ((($76)) + 2|0);
    $78 = HEAP8[$77>>0]|0;
    $79 = ($78<<24>>24)==(36);
    if ($79) {
     $80 = ((($76)) + 1|0);
     $81 = HEAP8[$80>>0]|0;
     $82 = $81 << 24 >> 24;
     $83 = (($82) + -48)|0;
     $84 = (($4) + ($83<<2)|0);
     HEAP32[$84>>2] = 10;
     $85 = HEAP8[$80>>0]|0;
     $86 = $85 << 24 >> 24;
     $87 = (($86) + -48)|0;
     $88 = (($3) + ($87<<3)|0);
     $89 = $88;
     $90 = $89;
     $91 = HEAP32[$90>>2]|0;
     $92 = (($89) + 4)|0;
     $93 = $92;
     $94 = HEAP32[$93>>2]|0;
     $95 = ((($76)) + 3|0);
     $$0259 = $91;$$2271 = 1;$storemerge274 = $95;
    } else {
     label = 27;
    }
   }
   if ((label|0) == 27) {
    label = 0;
    $96 = ($$1270|0)==(0);
    if (!($96)) {
     $$0 = -1;
     break;
    }
    if ($10) {
     $arglist_current = HEAP32[$2>>2]|0;
     $97 = $arglist_current;
     $98 = ((0) + 4|0);
     $expanded4 = $98;
     $expanded = (($expanded4) - 1)|0;
     $99 = (($97) + ($expanded))|0;
     $100 = ((0) + 4|0);
     $expanded8 = $100;
     $expanded7 = (($expanded8) - 1)|0;
     $expanded6 = $expanded7 ^ -1;
     $101 = $99 & $expanded6;
     $102 = $101;
     $103 = HEAP32[$102>>2]|0;
     $arglist_next = ((($102)) + 4|0);
     HEAP32[$2>>2] = $arglist_next;
     $358 = $103;
    } else {
     $358 = 0;
    }
    $104 = HEAP32[$5>>2]|0;
    $105 = ((($104)) + 1|0);
    $$0259 = $358;$$2271 = 0;$storemerge274 = $105;
   }
   HEAP32[$5>>2] = $storemerge274;
   $106 = ($$0259|0)<(0);
   $107 = $$0262$lcssa | 8192;
   $108 = (0 - ($$0259))|0;
   $spec$select291 = $106 ? $107 : $$0262$lcssa;
   $spec$select292 = $106 ? $108 : $$0259;
   $$1260 = $spec$select292;$$1263 = $spec$select291;$$3272 = $$2271;$112 = $storemerge274;
  } else {
   $109 = (_getint($5)|0);
   $110 = ($109|0)<(0);
   if ($110) {
    $$0 = -1;
    break;
   }
   $$pre362 = HEAP32[$5>>2]|0;
   $$1260 = $109;$$1263 = $$0262$lcssa;$$3272 = $$1270;$112 = $$pre362;
  }
  $111 = HEAP8[$112>>0]|0;
  $113 = ($111<<24>>24)==(46);
  do {
   if ($113) {
    $114 = ((($112)) + 1|0);
    $115 = HEAP8[$114>>0]|0;
    $116 = ($115<<24>>24)==(42);
    if (!($116)) {
     HEAP32[$5>>2] = $114;
     $152 = (_getint($5)|0);
     $$pre363$pre = HEAP32[$5>>2]|0;
     $$0254 = $152;$$pre363 = $$pre363$pre;
     break;
    }
    $117 = ((($112)) + 2|0);
    $118 = HEAP8[$117>>0]|0;
    $119 = $118 << 24 >> 24;
    $120 = (_isdigit($119)|0);
    $121 = ($120|0)==(0);
    if (!($121)) {
     $122 = HEAP32[$5>>2]|0;
     $123 = ((($122)) + 3|0);
     $124 = HEAP8[$123>>0]|0;
     $125 = ($124<<24>>24)==(36);
     if ($125) {
      $126 = ((($122)) + 2|0);
      $127 = HEAP8[$126>>0]|0;
      $128 = $127 << 24 >> 24;
      $129 = (($128) + -48)|0;
      $130 = (($4) + ($129<<2)|0);
      HEAP32[$130>>2] = 10;
      $131 = HEAP8[$126>>0]|0;
      $132 = $131 << 24 >> 24;
      $133 = (($132) + -48)|0;
      $134 = (($3) + ($133<<3)|0);
      $135 = $134;
      $136 = $135;
      $137 = HEAP32[$136>>2]|0;
      $138 = (($135) + 4)|0;
      $139 = $138;
      $140 = HEAP32[$139>>2]|0;
      $141 = ((($122)) + 4|0);
      HEAP32[$5>>2] = $141;
      $$0254 = $137;$$pre363 = $141;
      break;
     }
    }
    $142 = ($$3272|0)==(0);
    if (!($142)) {
     $$0 = -1;
     break L1;
    }
    if ($10) {
     $arglist_current2 = HEAP32[$2>>2]|0;
     $143 = $arglist_current2;
     $144 = ((0) + 4|0);
     $expanded11 = $144;
     $expanded10 = (($expanded11) - 1)|0;
     $145 = (($143) + ($expanded10))|0;
     $146 = ((0) + 4|0);
     $expanded15 = $146;
     $expanded14 = (($expanded15) - 1)|0;
     $expanded13 = $expanded14 ^ -1;
     $147 = $145 & $expanded13;
     $148 = $147;
     $149 = HEAP32[$148>>2]|0;
     $arglist_next3 = ((($148)) + 4|0);
     HEAP32[$2>>2] = $arglist_next3;
     $359 = $149;
    } else {
     $359 = 0;
    }
    $150 = HEAP32[$5>>2]|0;
    $151 = ((($150)) + 2|0);
    HEAP32[$5>>2] = $151;
    $$0254 = $359;$$pre363 = $151;
   } else {
    $$0254 = -1;$$pre363 = $112;
   }
  } while(0);
  $$0252 = 0;$154 = $$pre363;
  while(1) {
   $153 = HEAP8[$154>>0]|0;
   $155 = $153 << 24 >> 24;
   $156 = (($155) + -65)|0;
   $157 = ($156>>>0)>(57);
   if ($157) {
    $$0 = -1;
    break L1;
   }
   $158 = ((($154)) + 1|0);
   HEAP32[$5>>2] = $158;
   $159 = HEAP8[$154>>0]|0;
   $160 = $159 << 24 >> 24;
   $161 = (($160) + -65)|0;
   $162 = ((14576 + (($$0252*58)|0)|0) + ($161)|0);
   $163 = HEAP8[$162>>0]|0;
   $164 = $163&255;
   $165 = (($164) + -1)|0;
   $166 = ($165>>>0)<(8);
   if ($166) {
    $$0252 = $164;$154 = $158;
   } else {
    break;
   }
  }
  $167 = ($163<<24>>24)==(0);
  if ($167) {
   $$0 = -1;
   break;
  }
  $168 = ($163<<24>>24)==(19);
  $169 = ($$0253|0)>(-1);
  do {
   if ($168) {
    if ($169) {
     $$0 = -1;
     break L1;
    } else {
     label = 54;
    }
   } else {
    if ($169) {
     $170 = (($4) + ($$0253<<2)|0);
     HEAP32[$170>>2] = $164;
     $171 = (($3) + ($$0253<<3)|0);
     $172 = $171;
     $173 = $172;
     $174 = HEAP32[$173>>2]|0;
     $175 = (($172) + 4)|0;
     $176 = $175;
     $177 = HEAP32[$176>>2]|0;
     $178 = $6;
     $179 = $178;
     HEAP32[$179>>2] = $174;
     $180 = (($178) + 4)|0;
     $181 = $180;
     HEAP32[$181>>2] = $177;
     label = 54;
     break;
    }
    if (!($10)) {
     $$0 = 0;
     break L1;
    }
    _pop_arg($6,$164,$2);
    $$pre364 = HEAP32[$5>>2]|0;
    $183 = $$pre364;
    label = 55;
   }
  } while(0);
  if ((label|0) == 54) {
   label = 0;
   if ($10) {
    $183 = $158;
    label = 55;
   } else {
    $$0243$ph$be = 0;
   }
  }
  L77: do {
   if ((label|0) == 55) {
    label = 0;
    $182 = ((($183)) + -1|0);
    $184 = HEAP8[$182>>0]|0;
    $185 = $184 << 24 >> 24;
    $186 = ($$0252|0)!=(0);
    $187 = $185 & 15;
    $188 = ($187|0)==(3);
    $or$cond276 = $186 & $188;
    $189 = $185 & -33;
    $$0235 = $or$cond276 ? $189 : $185;
    $190 = $$1263 & 8192;
    $191 = ($190|0)==(0);
    $192 = $$1263 & -65537;
    $spec$select = $191 ? $$1263 : $192;
    L79: do {
     switch ($$0235|0) {
     case 110:  {
      $trunc = $$0252&255;
      switch ($trunc<<24>>24) {
      case 0:  {
       $199 = HEAP32[$6>>2]|0;
       HEAP32[$199>>2] = $$1248;
       $$0243$ph$be = 0;
       break L77;
       break;
      }
      case 1:  {
       $200 = HEAP32[$6>>2]|0;
       HEAP32[$200>>2] = $$1248;
       $$0243$ph$be = 0;
       break L77;
       break;
      }
      case 2:  {
       $201 = ($$1248|0)<(0);
       $202 = $201 << 31 >> 31;
       $203 = HEAP32[$6>>2]|0;
       $204 = $203;
       $205 = $204;
       HEAP32[$205>>2] = $$1248;
       $206 = (($204) + 4)|0;
       $207 = $206;
       HEAP32[$207>>2] = $202;
       $$0243$ph$be = 0;
       break L77;
       break;
      }
      case 3:  {
       $208 = $$1248&65535;
       $209 = HEAP32[$6>>2]|0;
       HEAP16[$209>>1] = $208;
       $$0243$ph$be = 0;
       break L77;
       break;
      }
      case 4:  {
       $210 = $$1248&255;
       $211 = HEAP32[$6>>2]|0;
       HEAP8[$211>>0] = $210;
       $$0243$ph$be = 0;
       break L77;
       break;
      }
      case 6:  {
       $212 = HEAP32[$6>>2]|0;
       HEAP32[$212>>2] = $$1248;
       $$0243$ph$be = 0;
       break L77;
       break;
      }
      case 7:  {
       $213 = ($$1248|0)<(0);
       $214 = $213 << 31 >> 31;
       $215 = HEAP32[$6>>2]|0;
       $216 = $215;
       $217 = $216;
       HEAP32[$217>>2] = $$1248;
       $218 = (($216) + 4)|0;
       $219 = $218;
       HEAP32[$219>>2] = $214;
       $$0243$ph$be = 0;
       break L77;
       break;
      }
      default: {
       $$0243$ph$be = 0;
       break L77;
      }
      }
      break;
     }
     case 112:  {
      $220 = ($$0254>>>0)>(8);
      $221 = $220 ? $$0254 : 8;
      $222 = $spec$select | 8;
      $$1236 = 120;$$1255 = $221;$$3265 = $222;
      label = 67;
      break;
     }
     case 88: case 120:  {
      $$1236 = $$0235;$$1255 = $$0254;$$3265 = $spec$select;
      label = 67;
      break;
     }
     case 111:  {
      $238 = $6;
      $239 = $238;
      $240 = HEAP32[$239>>2]|0;
      $241 = (($238) + 4)|0;
      $242 = $241;
      $243 = HEAP32[$242>>2]|0;
      $244 = (_fmt_o($240,$243,$11)|0);
      $245 = $spec$select & 8;
      $246 = ($245|0)==(0);
      $247 = $244;
      $248 = (($12) - ($247))|0;
      $249 = ($$0254|0)>($248|0);
      $250 = (($248) + 1)|0;
      $251 = $246 | $249;
      $spec$select295 = $251 ? $$0254 : $250;
      $$0228 = $244;$$1233 = 0;$$1238 = 40816;$$2256 = $spec$select295;$$4266 = $spec$select;$277 = $240;$279 = $243;
      label = 73;
      break;
     }
     case 105: case 100:  {
      $252 = $6;
      $253 = $252;
      $254 = HEAP32[$253>>2]|0;
      $255 = (($252) + 4)|0;
      $256 = $255;
      $257 = HEAP32[$256>>2]|0;
      $258 = ($257|0)<(0);
      if ($258) {
       $259 = (_i64Subtract(0,0,($254|0),($257|0))|0);
       $260 = (getTempRet0() | 0);
       $261 = $6;
       $262 = $261;
       HEAP32[$262>>2] = $259;
       $263 = (($261) + 4)|0;
       $264 = $263;
       HEAP32[$264>>2] = $260;
       $$0232 = 1;$$0237 = 40816;$271 = $259;$272 = $260;
       label = 72;
       break L79;
      } else {
       $265 = $spec$select & 2048;
       $266 = ($265|0)==(0);
       $267 = $spec$select & 1;
       $268 = ($267|0)==(0);
       $$ = $268 ? 40816 : (40818);
       $spec$select296 = $266 ? $$ : (40817);
       $269 = $spec$select & 2049;
       $270 = ($269|0)!=(0);
       $spec$select297 = $270&1;
       $$0232 = $spec$select297;$$0237 = $spec$select296;$271 = $254;$272 = $257;
       label = 72;
       break L79;
      }
      break;
     }
     case 117:  {
      $193 = $6;
      $194 = $193;
      $195 = HEAP32[$194>>2]|0;
      $196 = (($193) + 4)|0;
      $197 = $196;
      $198 = HEAP32[$197>>2]|0;
      $$0232 = 0;$$0237 = 40816;$271 = $195;$272 = $198;
      label = 72;
      break;
     }
     case 99:  {
      $288 = $6;
      $289 = $288;
      $290 = HEAP32[$289>>2]|0;
      $291 = (($288) + 4)|0;
      $292 = $291;
      $293 = HEAP32[$292>>2]|0;
      $294 = $290&255;
      HEAP8[$13>>0] = $294;
      $$2 = $13;$$2234 = 0;$$2239 = 40816;$$5 = 1;$$6268 = $192;$$pre$phiZ2D = $12;
      break;
     }
     case 109:  {
      $295 = (___errno_location()|0);
      $296 = HEAP32[$295>>2]|0;
      $297 = (_strerror($296)|0);
      $$1 = $297;
      label = 77;
      break;
     }
     case 115:  {
      $298 = HEAP32[$6>>2]|0;
      $299 = ($298|0)==(0|0);
      $300 = $299 ? 40826 : $298;
      $$1 = $300;
      label = 77;
      break;
     }
     case 67:  {
      $307 = $6;
      $308 = $307;
      $309 = HEAP32[$308>>2]|0;
      $310 = (($307) + 4)|0;
      $311 = $310;
      $312 = HEAP32[$311>>2]|0;
      HEAP32[$8>>2] = $309;
      HEAP32[$14>>2] = 0;
      HEAP32[$6>>2] = $8;
      $$4258370 = -1;
      label = 81;
      break;
     }
     case 83:  {
      $313 = ($$0254|0)==(0);
      if ($313) {
       _pad_669($0,32,$$1260,0,$spec$select);
       $$0240313371 = 0;
       label = 91;
      } else {
       $$4258370 = $$0254;
       label = 81;
      }
      break;
     }
     case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
      $336 = +HEAPF64[$6>>3];
      $337 = (_fmt_fp($0,$336,$$1260,$$0254,$spec$select,$$0235)|0);
      $$0243$ph$be = $337;
      break L77;
      break;
     }
     default: {
      $$2 = $20;$$2234 = 0;$$2239 = 40816;$$5 = $$0254;$$6268 = $spec$select;$$pre$phiZ2D = $12;
     }
     }
    } while(0);
    L103: do {
     if ((label|0) == 67) {
      label = 0;
      $223 = $6;
      $224 = $223;
      $225 = HEAP32[$224>>2]|0;
      $226 = (($223) + 4)|0;
      $227 = $226;
      $228 = HEAP32[$227>>2]|0;
      $229 = $$1236 & 32;
      $230 = (_fmt_x($225,$228,$11,$229)|0);
      $231 = ($225|0)==(0);
      $232 = ($228|0)==(0);
      $233 = $231 & $232;
      $234 = $$3265 & 8;
      $235 = ($234|0)==(0);
      $or$cond278 = $235 | $233;
      $236 = $$1236 >>> 4;
      $237 = (40816 + ($236)|0);
      $spec$select293 = $or$cond278 ? 40816 : $237;
      $spec$select294 = $or$cond278 ? 0 : 2;
      $$0228 = $230;$$1233 = $spec$select294;$$1238 = $spec$select293;$$2256 = $$1255;$$4266 = $$3265;$277 = $225;$279 = $228;
      label = 73;
     }
     else if ((label|0) == 72) {
      label = 0;
      $273 = (_fmt_u($271,$272,$11)|0);
      $$0228 = $273;$$1233 = $$0232;$$1238 = $$0237;$$2256 = $$0254;$$4266 = $spec$select;$277 = $271;$279 = $272;
      label = 73;
     }
     else if ((label|0) == 77) {
      label = 0;
      $301 = (_memchr($$1,0,$$0254)|0);
      $302 = ($301|0)==(0|0);
      $303 = $301;
      $304 = $$1;
      $305 = (($303) - ($304))|0;
      $306 = (($$1) + ($$0254)|0);
      $$3257 = $302 ? $$0254 : $305;
      $$1250 = $302 ? $306 : $301;
      $$pre368 = $$1250;
      $$2 = $$1;$$2234 = 0;$$2239 = 40816;$$5 = $$3257;$$6268 = $192;$$pre$phiZ2D = $$pre368;
     }
     else if ((label|0) == 81) {
      label = 0;
      $314 = HEAP32[$6>>2]|0;
      $$0229334 = $314;$$0240333 = 0;
      while(1) {
       $315 = HEAP32[$$0229334>>2]|0;
       $316 = ($315|0)==(0);
       if ($316) {
        $$0240313 = $$0240333;
        break;
       }
       $317 = (_wctomb($9,$315)|0);
       $318 = ($317|0)<(0);
       $319 = (($$4258370) - ($$0240333))|0;
       $320 = ($317>>>0)>($319>>>0);
       $or$cond283 = $318 | $320;
       if ($or$cond283) {
        label = 85;
        break;
       }
       $321 = ((($$0229334)) + 4|0);
       $322 = (($317) + ($$0240333))|0;
       $323 = ($$4258370>>>0)>($322>>>0);
       if ($323) {
        $$0229334 = $321;$$0240333 = $322;
       } else {
        $$0240313 = $322;
        break;
       }
      }
      if ((label|0) == 85) {
       label = 0;
       if ($318) {
        $$0 = -1;
        break L1;
       } else {
        $$0240313 = $$0240333;
       }
      }
      _pad_669($0,32,$$1260,$$0240313,$spec$select);
      $324 = ($$0240313|0)==(0);
      if ($324) {
       $$0240313371 = 0;
       label = 91;
      } else {
       $325 = HEAP32[$6>>2]|0;
       $$1230340 = $325;$$1241339 = 0;
       while(1) {
        $326 = HEAP32[$$1230340>>2]|0;
        $327 = ($326|0)==(0);
        if ($327) {
         $$0240313371 = $$0240313;
         label = 91;
         break L103;
        }
        $328 = (_wctomb($9,$326)|0);
        $329 = (($328) + ($$1241339))|0;
        $330 = ($329|0)>($$0240313|0);
        if ($330) {
         $$0240313371 = $$0240313;
         label = 91;
         break L103;
        }
        $331 = ((($$1230340)) + 4|0);
        _out($0,$9,$328);
        $332 = ($329>>>0)<($$0240313>>>0);
        if ($332) {
         $$1230340 = $331;$$1241339 = $329;
        } else {
         $$0240313371 = $$0240313;
         label = 91;
         break;
        }
       }
      }
     }
    } while(0);
    if ((label|0) == 73) {
     label = 0;
     $274 = ($$2256|0)>(-1);
     $275 = $$4266 & -65537;
     $spec$select281 = $274 ? $275 : $$4266;
     $276 = ($277|0)!=(0);
     $278 = ($279|0)!=(0);
     $280 = $276 | $278;
     $281 = ($$2256|0)!=(0);
     $or$cond = $281 | $280;
     $282 = $$0228;
     $283 = (($12) - ($282))|0;
     $284 = $280 ^ 1;
     $285 = $284&1;
     $286 = (($283) + ($285))|0;
     $287 = ($$2256|0)>($286|0);
     $$2256$ = $287 ? $$2256 : $286;
     $spec$select298 = $or$cond ? $$2256$ : 0;
     $spec$select299 = $or$cond ? $$0228 : $11;
     $$2 = $spec$select299;$$2234 = $$1233;$$2239 = $$1238;$$5 = $spec$select298;$$6268 = $spec$select281;$$pre$phiZ2D = $12;
    }
    else if ((label|0) == 91) {
     label = 0;
     $333 = $spec$select ^ 8192;
     _pad_669($0,32,$$1260,$$0240313371,$333);
     $334 = ($$1260|0)>($$0240313371|0);
     $335 = $334 ? $$1260 : $$0240313371;
     $$0243$ph$be = $335;
     break;
    }
    $338 = $$2;
    $339 = (($$pre$phiZ2D) - ($338))|0;
    $340 = ($$5|0)<($339|0);
    $spec$select284 = $340 ? $339 : $$5;
    $341 = (($spec$select284) + ($$2234))|0;
    $342 = ($$1260|0)<($341|0);
    $$2261 = $342 ? $341 : $$1260;
    _pad_669($0,32,$$2261,$341,$$6268);
    _out($0,$$2239,$$2234);
    $343 = $$6268 ^ 65536;
    _pad_669($0,48,$$2261,$341,$343);
    _pad_669($0,48,$spec$select284,$339,0);
    _out($0,$$2,$339);
    $344 = $$6268 ^ 8192;
    _pad_669($0,32,$$2261,$341,$344);
    $$0243$ph$be = $$2261;
   }
  } while(0);
  $$0243$ph = $$0243$ph$be;$$0247$ph = $$1248;$$0269$ph = $$3272;
 }
 L125: do {
  if ((label|0) == 94) {
   $345 = ($0|0)==(0|0);
   if ($345) {
    $346 = ($$0269$ph|0)==(0);
    if ($346) {
     $$0 = 0;
    } else {
     $$2242320 = 1;
     while(1) {
      $347 = (($4) + ($$2242320<<2)|0);
      $348 = HEAP32[$347>>2]|0;
      $349 = ($348|0)==(0);
      if ($349) {
       break;
      }
      $350 = (($3) + ($$2242320<<3)|0);
      _pop_arg($350,$348,$2);
      $351 = (($$2242320) + 1)|0;
      $352 = ($351>>>0)<(10);
      if ($352) {
       $$2242320 = $351;
      } else {
       $$0 = 1;
       break L125;
      }
     }
     $$3317 = $$2242320;
     while(1) {
      $355 = (($4) + ($$3317<<2)|0);
      $356 = HEAP32[$355>>2]|0;
      $357 = ($356|0)==(0);
      $354 = (($$3317) + 1)|0;
      if (!($357)) {
       $$0 = -1;
       break L125;
      }
      $353 = ($354>>>0)<(10);
      if ($353) {
       $$3317 = $354;
      } else {
       $$0 = 1;
       break;
      }
     }
    }
   } else {
    $$0 = $$1248;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function ___lockfile($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function ___unlockfile($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _out($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = $3 & 32;
 $5 = ($4|0)==(0);
 if ($5) {
  (___fwritex($1,$2,$0)|0);
 }
 return;
}
function _getint($0) {
 $0 = $0|0;
 var $$0$lcssa = 0, $$04 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (_isdigit($3)|0);
 $5 = ($4|0)==(0);
 if ($5) {
  $$0$lcssa = 0;
 } else {
  $$04 = 0;
  while(1) {
   $6 = ($$04*10)|0;
   $7 = HEAP32[$0>>2]|0;
   $8 = HEAP8[$7>>0]|0;
   $9 = $8 << 24 >> 24;
   $10 = (($6) + -48)|0;
   $11 = (($10) + ($9))|0;
   $12 = ((($7)) + 1|0);
   HEAP32[$0>>2] = $12;
   $13 = HEAP8[$12>>0]|0;
   $14 = $13 << 24 >> 24;
   $15 = (_isdigit($14)|0);
   $16 = ($15|0)==(0);
   if ($16) {
    $$0$lcssa = $11;
    break;
   } else {
    $$04 = $11;
   }
  }
 }
 return ($$0$lcssa|0);
}
function _pop_arg($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$mask = 0, $$mask31 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0;
 var $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current5 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next6 = 0, $arglist_next9 = 0, $expanded = 0, $expanded28 = 0, $expanded30 = 0, $expanded31 = 0;
 var $expanded32 = 0, $expanded34 = 0, $expanded35 = 0, $expanded37 = 0, $expanded38 = 0, $expanded39 = 0, $expanded41 = 0, $expanded42 = 0, $expanded44 = 0, $expanded45 = 0, $expanded46 = 0, $expanded48 = 0, $expanded49 = 0, $expanded51 = 0, $expanded52 = 0, $expanded53 = 0, $expanded55 = 0, $expanded56 = 0, $expanded58 = 0, $expanded59 = 0;
 var $expanded60 = 0, $expanded62 = 0, $expanded63 = 0, $expanded65 = 0, $expanded66 = 0, $expanded67 = 0, $expanded69 = 0, $expanded70 = 0, $expanded72 = 0, $expanded73 = 0, $expanded74 = 0, $expanded76 = 0, $expanded77 = 0, $expanded79 = 0, $expanded80 = 0, $expanded81 = 0, $expanded83 = 0, $expanded84 = 0, $expanded86 = 0, $expanded87 = 0;
 var $expanded88 = 0, $expanded90 = 0, $expanded91 = 0, $expanded93 = 0, $expanded94 = 0, $expanded95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1>>>0)>(20);
 L1: do {
  if (!($3)) {
   do {
    switch ($1|0) {
    case 9:  {
     $arglist_current = HEAP32[$2>>2]|0;
     $4 = $arglist_current;
     $5 = ((0) + 4|0);
     $expanded28 = $5;
     $expanded = (($expanded28) - 1)|0;
     $6 = (($4) + ($expanded))|0;
     $7 = ((0) + 4|0);
     $expanded32 = $7;
     $expanded31 = (($expanded32) - 1)|0;
     $expanded30 = $expanded31 ^ -1;
     $8 = $6 & $expanded30;
     $9 = $8;
     $10 = HEAP32[$9>>2]|0;
     $arglist_next = ((($9)) + 4|0);
     HEAP32[$2>>2] = $arglist_next;
     HEAP32[$0>>2] = $10;
     break L1;
     break;
    }
    case 10:  {
     $arglist_current2 = HEAP32[$2>>2]|0;
     $11 = $arglist_current2;
     $12 = ((0) + 4|0);
     $expanded35 = $12;
     $expanded34 = (($expanded35) - 1)|0;
     $13 = (($11) + ($expanded34))|0;
     $14 = ((0) + 4|0);
     $expanded39 = $14;
     $expanded38 = (($expanded39) - 1)|0;
     $expanded37 = $expanded38 ^ -1;
     $15 = $13 & $expanded37;
     $16 = $15;
     $17 = HEAP32[$16>>2]|0;
     $arglist_next3 = ((($16)) + 4|0);
     HEAP32[$2>>2] = $arglist_next3;
     $18 = ($17|0)<(0);
     $19 = $18 << 31 >> 31;
     $20 = $0;
     $21 = $20;
     HEAP32[$21>>2] = $17;
     $22 = (($20) + 4)|0;
     $23 = $22;
     HEAP32[$23>>2] = $19;
     break L1;
     break;
    }
    case 11:  {
     $arglist_current5 = HEAP32[$2>>2]|0;
     $24 = $arglist_current5;
     $25 = ((0) + 4|0);
     $expanded42 = $25;
     $expanded41 = (($expanded42) - 1)|0;
     $26 = (($24) + ($expanded41))|0;
     $27 = ((0) + 4|0);
     $expanded46 = $27;
     $expanded45 = (($expanded46) - 1)|0;
     $expanded44 = $expanded45 ^ -1;
     $28 = $26 & $expanded44;
     $29 = $28;
     $30 = HEAP32[$29>>2]|0;
     $arglist_next6 = ((($29)) + 4|0);
     HEAP32[$2>>2] = $arglist_next6;
     $31 = $0;
     $32 = $31;
     HEAP32[$32>>2] = $30;
     $33 = (($31) + 4)|0;
     $34 = $33;
     HEAP32[$34>>2] = 0;
     break L1;
     break;
    }
    case 12:  {
     $arglist_current8 = HEAP32[$2>>2]|0;
     $35 = $arglist_current8;
     $36 = ((0) + 8|0);
     $expanded49 = $36;
     $expanded48 = (($expanded49) - 1)|0;
     $37 = (($35) + ($expanded48))|0;
     $38 = ((0) + 8|0);
     $expanded53 = $38;
     $expanded52 = (($expanded53) - 1)|0;
     $expanded51 = $expanded52 ^ -1;
     $39 = $37 & $expanded51;
     $40 = $39;
     $41 = $40;
     $42 = $41;
     $43 = HEAP32[$42>>2]|0;
     $44 = (($41) + 4)|0;
     $45 = $44;
     $46 = HEAP32[$45>>2]|0;
     $arglist_next9 = ((($40)) + 8|0);
     HEAP32[$2>>2] = $arglist_next9;
     $47 = $0;
     $48 = $47;
     HEAP32[$48>>2] = $43;
     $49 = (($47) + 4)|0;
     $50 = $49;
     HEAP32[$50>>2] = $46;
     break L1;
     break;
    }
    case 13:  {
     $arglist_current11 = HEAP32[$2>>2]|0;
     $51 = $arglist_current11;
     $52 = ((0) + 4|0);
     $expanded56 = $52;
     $expanded55 = (($expanded56) - 1)|0;
     $53 = (($51) + ($expanded55))|0;
     $54 = ((0) + 4|0);
     $expanded60 = $54;
     $expanded59 = (($expanded60) - 1)|0;
     $expanded58 = $expanded59 ^ -1;
     $55 = $53 & $expanded58;
     $56 = $55;
     $57 = HEAP32[$56>>2]|0;
     $arglist_next12 = ((($56)) + 4|0);
     HEAP32[$2>>2] = $arglist_next12;
     $58 = $57&65535;
     $59 = $58 << 16 >> 16;
     $60 = ($59|0)<(0);
     $61 = $60 << 31 >> 31;
     $62 = $0;
     $63 = $62;
     HEAP32[$63>>2] = $59;
     $64 = (($62) + 4)|0;
     $65 = $64;
     HEAP32[$65>>2] = $61;
     break L1;
     break;
    }
    case 14:  {
     $arglist_current14 = HEAP32[$2>>2]|0;
     $66 = $arglist_current14;
     $67 = ((0) + 4|0);
     $expanded63 = $67;
     $expanded62 = (($expanded63) - 1)|0;
     $68 = (($66) + ($expanded62))|0;
     $69 = ((0) + 4|0);
     $expanded67 = $69;
     $expanded66 = (($expanded67) - 1)|0;
     $expanded65 = $expanded66 ^ -1;
     $70 = $68 & $expanded65;
     $71 = $70;
     $72 = HEAP32[$71>>2]|0;
     $arglist_next15 = ((($71)) + 4|0);
     HEAP32[$2>>2] = $arglist_next15;
     $$mask31 = $72 & 65535;
     $73 = $0;
     $74 = $73;
     HEAP32[$74>>2] = $$mask31;
     $75 = (($73) + 4)|0;
     $76 = $75;
     HEAP32[$76>>2] = 0;
     break L1;
     break;
    }
    case 15:  {
     $arglist_current17 = HEAP32[$2>>2]|0;
     $77 = $arglist_current17;
     $78 = ((0) + 4|0);
     $expanded70 = $78;
     $expanded69 = (($expanded70) - 1)|0;
     $79 = (($77) + ($expanded69))|0;
     $80 = ((0) + 4|0);
     $expanded74 = $80;
     $expanded73 = (($expanded74) - 1)|0;
     $expanded72 = $expanded73 ^ -1;
     $81 = $79 & $expanded72;
     $82 = $81;
     $83 = HEAP32[$82>>2]|0;
     $arglist_next18 = ((($82)) + 4|0);
     HEAP32[$2>>2] = $arglist_next18;
     $84 = $83&255;
     $85 = $84 << 24 >> 24;
     $86 = ($85|0)<(0);
     $87 = $86 << 31 >> 31;
     $88 = $0;
     $89 = $88;
     HEAP32[$89>>2] = $85;
     $90 = (($88) + 4)|0;
     $91 = $90;
     HEAP32[$91>>2] = $87;
     break L1;
     break;
    }
    case 16:  {
     $arglist_current20 = HEAP32[$2>>2]|0;
     $92 = $arglist_current20;
     $93 = ((0) + 4|0);
     $expanded77 = $93;
     $expanded76 = (($expanded77) - 1)|0;
     $94 = (($92) + ($expanded76))|0;
     $95 = ((0) + 4|0);
     $expanded81 = $95;
     $expanded80 = (($expanded81) - 1)|0;
     $expanded79 = $expanded80 ^ -1;
     $96 = $94 & $expanded79;
     $97 = $96;
     $98 = HEAP32[$97>>2]|0;
     $arglist_next21 = ((($97)) + 4|0);
     HEAP32[$2>>2] = $arglist_next21;
     $$mask = $98 & 255;
     $99 = $0;
     $100 = $99;
     HEAP32[$100>>2] = $$mask;
     $101 = (($99) + 4)|0;
     $102 = $101;
     HEAP32[$102>>2] = 0;
     break L1;
     break;
    }
    case 17:  {
     $arglist_current23 = HEAP32[$2>>2]|0;
     $103 = $arglist_current23;
     $104 = ((0) + 8|0);
     $expanded84 = $104;
     $expanded83 = (($expanded84) - 1)|0;
     $105 = (($103) + ($expanded83))|0;
     $106 = ((0) + 8|0);
     $expanded88 = $106;
     $expanded87 = (($expanded88) - 1)|0;
     $expanded86 = $expanded87 ^ -1;
     $107 = $105 & $expanded86;
     $108 = $107;
     $109 = +HEAPF64[$108>>3];
     $arglist_next24 = ((($108)) + 8|0);
     HEAP32[$2>>2] = $arglist_next24;
     HEAPF64[$0>>3] = $109;
     break L1;
     break;
    }
    case 18:  {
     $arglist_current26 = HEAP32[$2>>2]|0;
     $110 = $arglist_current26;
     $111 = ((0) + 8|0);
     $expanded91 = $111;
     $expanded90 = (($expanded91) - 1)|0;
     $112 = (($110) + ($expanded90))|0;
     $113 = ((0) + 8|0);
     $expanded95 = $113;
     $expanded94 = (($expanded95) - 1)|0;
     $expanded93 = $expanded94 ^ -1;
     $114 = $112 & $expanded93;
     $115 = $114;
     $116 = +HEAPF64[$115>>3];
     $arglist_next27 = ((($115)) + 8|0);
     HEAP32[$2>>2] = $arglist_next27;
     HEAPF64[$0>>3] = $116;
     break L1;
     break;
    }
    default: {
     break L1;
    }
    }
   } while(0);
  }
 } while(0);
 return;
}
function _fmt_x($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$05$lcssa = 0, $$056 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $4 = ($0|0)==(0);
 $5 = ($1|0)==(0);
 $6 = $4 & $5;
 if ($6) {
  $$05$lcssa = $2;
 } else {
  $$056 = $2;$15 = $1;$8 = $0;
  while(1) {
   $7 = $8 & 15;
   $9 = (15040 + ($7)|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = $10&255;
   $12 = $11 | $3;
   $13 = $12&255;
   $14 = ((($$056)) + -1|0);
   HEAP8[$14>>0] = $13;
   $16 = (_bitshift64Lshr(($8|0),($15|0),4)|0);
   $17 = (getTempRet0() | 0);
   $18 = ($16|0)==(0);
   $19 = ($17|0)==(0);
   $20 = $18 & $19;
   if ($20) {
    $$05$lcssa = $14;
    break;
   } else {
    $$056 = $14;$15 = $17;$8 = $16;
   }
  }
 }
 return ($$05$lcssa|0);
}
function _fmt_o($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$06 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(0);
 $4 = ($1|0)==(0);
 $5 = $3 & $4;
 if ($5) {
  $$0$lcssa = $2;
 } else {
  $$06 = $2;$11 = $1;$7 = $0;
  while(1) {
   $6 = $7&255;
   $8 = $6 & 7;
   $9 = $8 | 48;
   $10 = ((($$06)) + -1|0);
   HEAP8[$10>>0] = $9;
   $12 = (_bitshift64Lshr(($7|0),($11|0),3)|0);
   $13 = (getTempRet0() | 0);
   $14 = ($12|0)==(0);
   $15 = ($13|0)==(0);
   $16 = $14 & $15;
   if ($16) {
    $$0$lcssa = $10;
    break;
   } else {
    $$06 = $10;$11 = $13;$7 = $12;
   }
  }
 }
 return ($$0$lcssa|0);
}
function _fmt_u($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$010$lcssa$off0 = 0, $$012 = 0, $$09$lcssa = 0, $$0914 = 0, $$1$lcssa = 0, $$111 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1>>>0)>(0);
 $4 = ($0>>>0)>(4294967295);
 $5 = ($1|0)==(0);
 $6 = $5 & $4;
 $7 = $3 | $6;
 if ($7) {
  $$0914 = $2;$8 = $0;$9 = $1;
  while(1) {
   $10 = (___udivdi3(($8|0),($9|0),10,0)|0);
   $11 = (getTempRet0() | 0);
   $12 = (___muldi3(($10|0),($11|0),10,0)|0);
   $13 = (getTempRet0() | 0);
   $14 = (_i64Subtract(($8|0),($9|0),($12|0),($13|0))|0);
   $15 = (getTempRet0() | 0);
   $16 = $14&255;
   $17 = $16 | 48;
   $18 = ((($$0914)) + -1|0);
   HEAP8[$18>>0] = $17;
   $19 = ($9>>>0)>(9);
   $20 = ($8>>>0)>(4294967295);
   $21 = ($9|0)==(9);
   $22 = $21 & $20;
   $23 = $19 | $22;
   if ($23) {
    $$0914 = $18;$8 = $10;$9 = $11;
   } else {
    break;
   }
  }
  $$010$lcssa$off0 = $10;$$09$lcssa = $18;
 } else {
  $$010$lcssa$off0 = $0;$$09$lcssa = $2;
 }
 $24 = ($$010$lcssa$off0|0)==(0);
 if ($24) {
  $$1$lcssa = $$09$lcssa;
 } else {
  $$012 = $$010$lcssa$off0;$$111 = $$09$lcssa;
  while(1) {
   $25 = (($$012>>>0) / 10)&-1;
   $26 = ($25*10)|0;
   $27 = (($$012) - ($26))|0;
   $28 = $27 | 48;
   $29 = $28&255;
   $30 = ((($$111)) + -1|0);
   HEAP8[$30>>0] = $29;
   $31 = ($$012>>>0)<(10);
   if ($31) {
    $$1$lcssa = $30;
    break;
   } else {
    $$012 = $25;$$111 = $30;
   }
  }
 }
 return ($$1$lcssa|0);
}
function _strerror($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___pthread_self_105()|0);
 $2 = ((($1)) + 188|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (___strerror_l($0,$3)|0);
 return ($4|0);
}
function _memchr($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$035$lcssa = 0, $$035$lcssa65 = 0, $$03555 = 0, $$036$lcssa = 0, $$036$lcssa64 = 0, $$03654 = 0, $$046 = 0, $$137$lcssa = 0, $$137$lcssa66 = 0, $$13745 = 0, $$140 = 0, $$23839 = 0, $$in = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond53 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $1 & 255;
 $4 = $0;
 $5 = $4 & 3;
 $6 = ($5|0)!=(0);
 $7 = ($2|0)!=(0);
 $or$cond53 = $7 & $6;
 L1: do {
  if ($or$cond53) {
   $8 = $1&255;
   $$03555 = $0;$$03654 = $2;
   while(1) {
    $9 = HEAP8[$$03555>>0]|0;
    $10 = ($9<<24>>24)==($8<<24>>24);
    if ($10) {
     $$035$lcssa65 = $$03555;$$036$lcssa64 = $$03654;
     label = 6;
     break L1;
    }
    $11 = ((($$03555)) + 1|0);
    $12 = (($$03654) + -1)|0;
    $13 = $11;
    $14 = $13 & 3;
    $15 = ($14|0)!=(0);
    $16 = ($12|0)!=(0);
    $or$cond = $16 & $15;
    if ($or$cond) {
     $$03555 = $11;$$03654 = $12;
    } else {
     $$035$lcssa = $11;$$036$lcssa = $12;$$lcssa = $16;
     label = 5;
     break;
    }
   }
  } else {
   $$035$lcssa = $0;$$036$lcssa = $2;$$lcssa = $7;
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  if ($$lcssa) {
   $$035$lcssa65 = $$035$lcssa;$$036$lcssa64 = $$036$lcssa;
   label = 6;
  } else {
   label = 16;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $17 = HEAP8[$$035$lcssa65>>0]|0;
   $18 = $1&255;
   $19 = ($17<<24>>24)==($18<<24>>24);
   if ($19) {
    $38 = ($$036$lcssa64|0)==(0);
    if ($38) {
     label = 16;
     break;
    } else {
     $39 = $$035$lcssa65;
     break;
    }
   }
   $20 = Math_imul($3, 16843009)|0;
   $21 = ($$036$lcssa64>>>0)>(3);
   L13: do {
    if ($21) {
     $$046 = $$035$lcssa65;$$13745 = $$036$lcssa64;
     while(1) {
      $22 = HEAP32[$$046>>2]|0;
      $23 = $22 ^ $20;
      $24 = (($23) + -16843009)|0;
      $25 = $23 & -2139062144;
      $26 = $25 ^ -2139062144;
      $27 = $26 & $24;
      $28 = ($27|0)==(0);
      if (!($28)) {
       $$137$lcssa66 = $$13745;$$in = $$046;
       break L13;
      }
      $29 = ((($$046)) + 4|0);
      $30 = (($$13745) + -4)|0;
      $31 = ($30>>>0)>(3);
      if ($31) {
       $$046 = $29;$$13745 = $30;
      } else {
       $$0$lcssa = $29;$$137$lcssa = $30;
       label = 11;
       break;
      }
     }
    } else {
     $$0$lcssa = $$035$lcssa65;$$137$lcssa = $$036$lcssa64;
     label = 11;
    }
   } while(0);
   if ((label|0) == 11) {
    $32 = ($$137$lcssa|0)==(0);
    if ($32) {
     label = 16;
     break;
    } else {
     $$137$lcssa66 = $$137$lcssa;$$in = $$0$lcssa;
    }
   }
   $$140 = $$in;$$23839 = $$137$lcssa66;
   while(1) {
    $33 = HEAP8[$$140>>0]|0;
    $34 = ($33<<24>>24)==($18<<24>>24);
    if ($34) {
     $39 = $$140;
     break L8;
    }
    $35 = ((($$140)) + 1|0);
    $36 = (($$23839) + -1)|0;
    $37 = ($36|0)==(0);
    if ($37) {
     label = 16;
     break;
    } else {
     $$140 = $35;$$23839 = $36;
    }
   }
  }
 } while(0);
 if ((label|0) == 16) {
  $39 = 0;
 }
 return ($39|0);
}
function _pad_669($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0$lcssa = 0, $$011 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $5 = sp;
 $6 = $4 & 73728;
 $7 = ($6|0)==(0);
 $8 = ($2|0)>($3|0);
 $or$cond = $8 & $7;
 if ($or$cond) {
  $9 = (($2) - ($3))|0;
  $10 = $1 << 24 >> 24;
  $11 = ($9>>>0)<(256);
  $12 = $11 ? $9 : 256;
  (_memset(($5|0),($10|0),($12|0))|0);
  $13 = ($9>>>0)>(255);
  if ($13) {
   $14 = (($2) - ($3))|0;
   $$011 = $9;
   while(1) {
    _out($0,$5,256);
    $15 = (($$011) + -256)|0;
    $16 = ($15>>>0)>(255);
    if ($16) {
     $$011 = $15;
    } else {
     break;
    }
   }
   $17 = $14 & 255;
   $$0$lcssa = $17;
  } else {
   $$0$lcssa = $9;
  }
  _out($0,$5,$$0$lcssa);
 }
 STACKTOP = sp;return;
}
function _wctomb($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = (_wcrtomb($0,$1,0)|0);
  $$0 = $3;
 }
 return ($$0|0);
}
function _fmt_fp($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = +$1;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$ = 0, $$0 = 0, $$0463$lcssa = 0, $$0463588 = 0, $$0464599 = 0, $$0471 = 0.0, $$0479 = 0, $$0487657 = 0, $$0488 = 0, $$0488669 = 0, $$0488671 = 0, $$0497670 = 0, $$0498 = 0, $$0511586 = 0.0, $$0512 = 0, $$0513 = 0, $$0516652 = 0, $$0522 = 0, $$0523 = 0, $$0525 = 0;
 var $$0527 = 0, $$0529 = 0, $$0529$in646 = 0, $$0532651 = 0, $$1465 = 0, $$1467 = 0.0, $$1469 = 0.0, $$1472 = 0.0, $$1480 = 0, $$1482$lcssa = 0, $$1482683 = 0, $$1489656 = 0, $$1499 = 0, $$1510587 = 0, $$1514$lcssa = 0, $$1514614 = 0, $$1517 = 0, $$1526 = 0, $$1528 = 0, $$1530621 = 0;
 var $$1533$lcssa = 0, $$1533645 = 0, $$1604 = 0, $$2 = 0, $$2473 = 0.0, $$2476 = 0, $$2483 = 0, $$2490$lcssa = 0, $$2490638 = 0, $$2500$lcssa = 0, $$2500682 = 0, $$2515 = 0, $$2518634 = 0, $$2531 = 0, $$2534633 = 0, $$3 = 0.0, $$3477 = 0, $$3484$lcssa = 0, $$3484663 = 0, $$3501$lcssa = 0;
 var $$3501676 = 0, $$3535620 = 0, $$4 = 0.0, $$4478$lcssa = 0, $$4478594 = 0, $$4492 = 0, $$4502$lcssa = 0, $$4502662 = 0, $$4520 = 0, $$5$lcssa = 0, $$5486$lcssa = 0, $$5486639 = 0, $$5493603 = 0, $$5503 = 0, $$5521 = 0, $$560 = 0, $$5609 = 0, $$6 = 0, $$6494593 = 0, $$7495608 = 0;
 var $$8 = 0, $$8506 = 0, $$9 = 0, $$9507$lcssa = 0, $$9507625 = 0, $$lcssa583 = 0, $$lobit = 0, $$neg = 0, $$neg571 = 0, $$not = 0, $$pn = 0, $$pr = 0, $$pr564 = 0, $$pre = 0, $$pre$phi717Z2D = 0, $$pre$phi718Z2D = 0, $$pre720 = 0, $$sink757 = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0.0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0.0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0;
 var $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0.0;
 var $247 = 0.0, $248 = 0, $249 = 0.0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0;
 var $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0;
 var $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0;
 var $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0;
 var $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0.0, $370 = 0, $371 = 0, $372 = 0, $373 = 0;
 var $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0.0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0;
 var $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0;
 var $410 = 0, $411 = 0, $412 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0.0;
 var $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $not$ = 0, $or$cond = 0, $or$cond3$not = 0, $or$cond543 = 0, $or$cond546 = 0, $or$cond556 = 0, $or$cond559 = 0, $or$cond6 = 0, $scevgep711 = 0, $scevgep711712 = 0, $spec$select = 0, $spec$select539 = 0, $spec$select540 = 0, $spec$select540722 = 0, $spec$select540723 = 0;
 var $spec$select541 = 0, $spec$select544 = 0.0, $spec$select547 = 0, $spec$select548 = 0, $spec$select549 = 0, $spec$select551 = 0, $spec$select554 = 0, $spec$select557 = 0, $spec$select561 = 0.0, $spec$select562 = 0, $spec$select563 = 0, $spec$select565 = 0, $spec$select566 = 0, $spec$select567 = 0.0, $spec$select568 = 0.0, $spec$select569 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 560|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(560|0);
 $6 = sp + 32|0;
 $7 = sp + 536|0;
 $8 = sp;
 $9 = $8;
 $10 = sp + 540|0;
 HEAP32[$7>>2] = 0;
 $11 = ((($10)) + 12|0);
 $12 = (___DOUBLE_BITS_670($1)|0);
 $13 = (getTempRet0() | 0);
 $14 = ($13|0)<(0);
 if ($14) {
  $15 = - $1;
  $16 = (___DOUBLE_BITS_670($15)|0);
  $17 = (getTempRet0() | 0);
  $$0471 = $15;$$0522 = 1;$$0523 = 40833;$25 = $17;$412 = $16;
 } else {
  $18 = $4 & 2048;
  $19 = ($18|0)==(0);
  $20 = $4 & 1;
  $21 = ($20|0)==(0);
  $$ = $21 ? (40834) : (40839);
  $spec$select565 = $19 ? $$ : (40836);
  $22 = $4 & 2049;
  $23 = ($22|0)!=(0);
  $spec$select566 = $23&1;
  $$0471 = $1;$$0522 = $spec$select566;$$0523 = $spec$select565;$25 = $13;$412 = $12;
 }
 $24 = $25 & 2146435072;
 $26 = (0)==(0);
 $27 = ($24|0)==(2146435072);
 $28 = $26 & $27;
 do {
  if ($28) {
   $29 = $5 & 32;
   $30 = ($29|0)!=(0);
   $31 = $30 ? 40852 : 40856;
   $32 = ($$0471 != $$0471) | (0.0 != 0.0);
   $33 = $30 ? 40875 : 40860;
   $$0512 = $32 ? $33 : $31;
   $34 = (($$0522) + 3)|0;
   $35 = $4 & -65537;
   _pad_669($0,32,$2,$34,$35);
   _out($0,$$0523,$$0522);
   _out($0,$$0512,3);
   $36 = $4 ^ 8192;
   _pad_669($0,32,$2,$34,$36);
   $$sink757 = $34;
  } else {
   $37 = (+_frexpl($$0471,$7));
   $38 = $37 * 2.0;
   $39 = $38 != 0.0;
   if ($39) {
    $40 = HEAP32[$7>>2]|0;
    $41 = (($40) + -1)|0;
    HEAP32[$7>>2] = $41;
   }
   $42 = $5 | 32;
   $43 = ($42|0)==(97);
   if ($43) {
    $44 = $5 & 32;
    $45 = ($44|0)==(0);
    $46 = ((($$0523)) + 9|0);
    $spec$select = $45 ? $$0523 : $46;
    $47 = $$0522 | 2;
    $48 = ($3>>>0)>(11);
    $49 = (12 - ($3))|0;
    $50 = ($49|0)==(0);
    $51 = $48 | $50;
    do {
     if ($51) {
      $$1472 = $38;
     } else {
      $$0511586 = 8.0;$$1510587 = $49;
      while(1) {
       $52 = (($$1510587) + -1)|0;
       $53 = $$0511586 * 16.0;
       $54 = ($52|0)==(0);
       if ($54) {
        break;
       } else {
        $$0511586 = $53;$$1510587 = $52;
       }
      }
      $55 = HEAP8[$spec$select>>0]|0;
      $56 = ($55<<24>>24)==(45);
      if ($56) {
       $57 = - $38;
       $58 = $57 - $53;
       $59 = $53 + $58;
       $60 = - $59;
       $$1472 = $60;
       break;
      } else {
       $61 = $38 + $53;
       $62 = $61 - $53;
       $$1472 = $62;
       break;
      }
     }
    } while(0);
    $63 = HEAP32[$7>>2]|0;
    $64 = ($63|0)<(0);
    $65 = (0 - ($63))|0;
    $66 = $64 ? $65 : $63;
    $67 = ($66|0)<(0);
    $68 = $67 << 31 >> 31;
    $69 = (_fmt_u($66,$68,$11)|0);
    $70 = ($69|0)==($11|0);
    if ($70) {
     $71 = ((($10)) + 11|0);
     HEAP8[$71>>0] = 48;
     $$0513 = $71;
    } else {
     $$0513 = $69;
    }
    $72 = $63 >> 31;
    $73 = $72 & 2;
    $74 = (($73) + 43)|0;
    $75 = $74&255;
    $76 = ((($$0513)) + -1|0);
    HEAP8[$76>>0] = $75;
    $77 = (($5) + 15)|0;
    $78 = $77&255;
    $79 = ((($$0513)) + -2|0);
    HEAP8[$79>>0] = $78;
    $80 = ($3|0)<(1);
    $81 = $4 & 8;
    $82 = ($81|0)==(0);
    $$0525 = $8;$$2473 = $$1472;
    while(1) {
     $83 = (~~(($$2473)));
     $84 = (15040 + ($83)|0);
     $85 = HEAP8[$84>>0]|0;
     $86 = $85&255;
     $87 = $44 | $86;
     $88 = $87&255;
     $89 = ((($$0525)) + 1|0);
     HEAP8[$$0525>>0] = $88;
     $90 = (+($83|0));
     $91 = $$2473 - $90;
     $92 = $91 * 16.0;
     $93 = $89;
     $94 = (($93) - ($9))|0;
     $95 = ($94|0)==(1);
     if ($95) {
      $96 = $92 == 0.0;
      $or$cond3$not = $80 & $96;
      $or$cond = $82 & $or$cond3$not;
      if ($or$cond) {
       $$1526 = $89;
      } else {
       $97 = ((($$0525)) + 2|0);
       HEAP8[$89>>0] = 46;
       $$1526 = $97;
      }
     } else {
      $$1526 = $89;
     }
     $98 = $92 != 0.0;
     if ($98) {
      $$0525 = $$1526;$$2473 = $92;
     } else {
      break;
     }
    }
    $99 = ($3|0)==(0);
    $$pre720 = $$1526;
    if ($99) {
     label = 25;
    } else {
     $100 = (-2 - ($9))|0;
     $101 = (($100) + ($$pre720))|0;
     $102 = ($101|0)<($3|0);
     if ($102) {
      $103 = $11;
      $104 = $79;
      $105 = (($3) + 2)|0;
      $106 = (($105) + ($103))|0;
      $107 = (($106) - ($104))|0;
      $$0527 = $107;$$pre$phi717Z2D = $103;$$pre$phi718Z2D = $104;
     } else {
      label = 25;
     }
    }
    if ((label|0) == 25) {
     $108 = $11;
     $109 = $79;
     $110 = (($108) - ($9))|0;
     $111 = (($110) - ($109))|0;
     $112 = (($111) + ($$pre720))|0;
     $$0527 = $112;$$pre$phi717Z2D = $108;$$pre$phi718Z2D = $109;
    }
    $113 = (($$0527) + ($47))|0;
    _pad_669($0,32,$2,$113,$4);
    _out($0,$spec$select,$47);
    $114 = $4 ^ 65536;
    _pad_669($0,48,$2,$113,$114);
    $115 = (($$pre720) - ($9))|0;
    _out($0,$8,$115);
    $116 = (($$pre$phi717Z2D) - ($$pre$phi718Z2D))|0;
    $117 = (($115) + ($116))|0;
    $118 = (($$0527) - ($117))|0;
    _pad_669($0,48,$118,0,0);
    _out($0,$79,$116);
    $119 = $4 ^ 8192;
    _pad_669($0,32,$2,$113,$119);
    $$sink757 = $113;
    break;
   }
   $120 = ($3|0)<(0);
   $spec$select539 = $120 ? 6 : $3;
   if ($39) {
    $121 = $38 * 268435456.0;
    $122 = HEAP32[$7>>2]|0;
    $123 = (($122) + -28)|0;
    HEAP32[$7>>2] = $123;
    $$3 = $121;$$pr = $123;
   } else {
    $$pre = HEAP32[$7>>2]|0;
    $$3 = $38;$$pr = $$pre;
   }
   $124 = ($$pr|0)<(0);
   $125 = ((($6)) + 288|0);
   $$0498 = $124 ? $6 : $125;
   $$1499 = $$0498;$$4 = $$3;
   while(1) {
    $126 = (~~(($$4))>>>0);
    HEAP32[$$1499>>2] = $126;
    $127 = ((($$1499)) + 4|0);
    $128 = (+($126>>>0));
    $129 = $$4 - $128;
    $130 = $129 * 1.0E+9;
    $131 = $130 != 0.0;
    if ($131) {
     $$1499 = $127;$$4 = $130;
    } else {
     break;
    }
   }
   $132 = $$0498;
   $133 = ($$pr|0)>(0);
   if ($133) {
    $$1482683 = $$0498;$$2500682 = $127;$135 = $$pr;
    while(1) {
     $134 = ($135|0)<(29);
     $136 = $134 ? $135 : 29;
     $$0488669 = ((($$2500682)) + -4|0);
     $137 = ($$0488669>>>0)<($$1482683>>>0);
     if ($137) {
      $$2483 = $$1482683;
     } else {
      $$0488671 = $$0488669;$$0497670 = 0;
      while(1) {
       $138 = HEAP32[$$0488671>>2]|0;
       $139 = (_bitshift64Shl(($138|0),0,($136|0))|0);
       $140 = (getTempRet0() | 0);
       $141 = (_i64Add(($139|0),($140|0),($$0497670|0),0)|0);
       $142 = (getTempRet0() | 0);
       $143 = (___udivdi3(($141|0),($142|0),1000000000,0)|0);
       $144 = (getTempRet0() | 0);
       $145 = (___muldi3(($143|0),($144|0),1000000000,0)|0);
       $146 = (getTempRet0() | 0);
       $147 = (_i64Subtract(($141|0),($142|0),($145|0),($146|0))|0);
       $148 = (getTempRet0() | 0);
       HEAP32[$$0488671>>2] = $147;
       $$0488 = ((($$0488671)) + -4|0);
       $149 = ($$0488>>>0)<($$1482683>>>0);
       if ($149) {
        break;
       } else {
        $$0488671 = $$0488;$$0497670 = $143;
       }
      }
      $150 = ($143|0)==(0);
      if ($150) {
       $$2483 = $$1482683;
      } else {
       $151 = ((($$1482683)) + -4|0);
       HEAP32[$151>>2] = $143;
       $$2483 = $151;
      }
     }
     $152 = ($$2500682>>>0)>($$2483>>>0);
     L57: do {
      if ($152) {
       $$3501676 = $$2500682;
       while(1) {
        $154 = ((($$3501676)) + -4|0);
        $155 = HEAP32[$154>>2]|0;
        $156 = ($155|0)==(0);
        if (!($156)) {
         $$3501$lcssa = $$3501676;
         break L57;
        }
        $153 = ($154>>>0)>($$2483>>>0);
        if ($153) {
         $$3501676 = $154;
        } else {
         $$3501$lcssa = $154;
         break;
        }
       }
      } else {
       $$3501$lcssa = $$2500682;
      }
     } while(0);
     $157 = HEAP32[$7>>2]|0;
     $158 = (($157) - ($136))|0;
     HEAP32[$7>>2] = $158;
     $159 = ($158|0)>(0);
     if ($159) {
      $$1482683 = $$2483;$$2500682 = $$3501$lcssa;$135 = $158;
     } else {
      $$1482$lcssa = $$2483;$$2500$lcssa = $$3501$lcssa;$$pr564 = $158;
      break;
     }
    }
   } else {
    $$1482$lcssa = $$0498;$$2500$lcssa = $127;$$pr564 = $$pr;
   }
   $160 = ($$pr564|0)<(0);
   if ($160) {
    $161 = (($spec$select539) + 25)|0;
    $162 = (($161|0) / 9)&-1;
    $163 = (($162) + 1)|0;
    $164 = ($42|0)==(102);
    $$3484663 = $$1482$lcssa;$$4502662 = $$2500$lcssa;$166 = $$pr564;
    while(1) {
     $165 = (0 - ($166))|0;
     $167 = ($165|0)<(9);
     $168 = $167 ? $165 : 9;
     $169 = ($$3484663>>>0)<($$4502662>>>0);
     if ($169) {
      $173 = 1 << $168;
      $174 = (($173) + -1)|0;
      $175 = 1000000000 >>> $168;
      $$0487657 = 0;$$1489656 = $$3484663;
      while(1) {
       $176 = HEAP32[$$1489656>>2]|0;
       $177 = $176 & $174;
       $178 = $176 >>> $168;
       $179 = (($178) + ($$0487657))|0;
       HEAP32[$$1489656>>2] = $179;
       $180 = Math_imul($177, $175)|0;
       $181 = ((($$1489656)) + 4|0);
       $182 = ($181>>>0)<($$4502662>>>0);
       if ($182) {
        $$0487657 = $180;$$1489656 = $181;
       } else {
        break;
       }
      }
      $183 = HEAP32[$$3484663>>2]|0;
      $184 = ($183|0)==(0);
      $185 = ((($$3484663)) + 4|0);
      $spec$select540 = $184 ? $185 : $$3484663;
      $186 = ($180|0)==(0);
      if ($186) {
       $$5503 = $$4502662;$spec$select540723 = $spec$select540;
      } else {
       $187 = ((($$4502662)) + 4|0);
       HEAP32[$$4502662>>2] = $180;
       $$5503 = $187;$spec$select540723 = $spec$select540;
      }
     } else {
      $170 = HEAP32[$$3484663>>2]|0;
      $171 = ($170|0)==(0);
      $172 = ((($$3484663)) + 4|0);
      $spec$select540722 = $171 ? $172 : $$3484663;
      $$5503 = $$4502662;$spec$select540723 = $spec$select540722;
     }
     $188 = $164 ? $$0498 : $spec$select540723;
     $189 = $$5503;
     $190 = $188;
     $191 = (($189) - ($190))|0;
     $192 = $191 >> 2;
     $193 = ($192|0)>($163|0);
     $194 = (($188) + ($163<<2)|0);
     $spec$select541 = $193 ? $194 : $$5503;
     $195 = HEAP32[$7>>2]|0;
     $196 = (($195) + ($168))|0;
     HEAP32[$7>>2] = $196;
     $197 = ($196|0)<(0);
     if ($197) {
      $$3484663 = $spec$select540723;$$4502662 = $spec$select541;$166 = $196;
     } else {
      $$3484$lcssa = $spec$select540723;$$4502$lcssa = $spec$select541;
      break;
     }
    }
   } else {
    $$3484$lcssa = $$1482$lcssa;$$4502$lcssa = $$2500$lcssa;
   }
   $198 = ($$3484$lcssa>>>0)<($$4502$lcssa>>>0);
   if ($198) {
    $199 = $$3484$lcssa;
    $200 = (($132) - ($199))|0;
    $201 = $200 >> 2;
    $202 = ($201*9)|0;
    $203 = HEAP32[$$3484$lcssa>>2]|0;
    $204 = ($203>>>0)<(10);
    if ($204) {
     $$1517 = $202;
    } else {
     $$0516652 = $202;$$0532651 = 10;
     while(1) {
      $205 = ($$0532651*10)|0;
      $206 = (($$0516652) + 1)|0;
      $207 = ($203>>>0)<($205>>>0);
      if ($207) {
       $$1517 = $206;
       break;
      } else {
       $$0516652 = $206;$$0532651 = $205;
      }
     }
    }
   } else {
    $$1517 = 0;
   }
   $208 = ($42|0)==(102);
   $209 = $208 ? 0 : $$1517;
   $210 = (($spec$select539) - ($209))|0;
   $211 = ($42|0)==(103);
   $212 = ($spec$select539|0)!=(0);
   $213 = $212 & $211;
   $$neg = $213 << 31 >> 31;
   $214 = (($210) + ($$neg))|0;
   $215 = $$4502$lcssa;
   $216 = (($215) - ($132))|0;
   $217 = $216 >> 2;
   $218 = ($217*9)|0;
   $219 = (($218) + -9)|0;
   $220 = ($214|0)<($219|0);
   if ($220) {
    $221 = ((($$0498)) + 4|0);
    $222 = (($214) + 9216)|0;
    $223 = (($222|0) / 9)&-1;
    $224 = (($223) + -1024)|0;
    $225 = (($221) + ($224<<2)|0);
    $226 = ($223*9)|0;
    $227 = (($222) - ($226))|0;
    $228 = ($227|0)<(8);
    if ($228) {
     $$0529$in646 = $227;$$1533645 = 10;
     while(1) {
      $$0529 = (($$0529$in646) + 1)|0;
      $229 = ($$1533645*10)|0;
      $230 = ($$0529$in646|0)<(7);
      if ($230) {
       $$0529$in646 = $$0529;$$1533645 = $229;
      } else {
       $$1533$lcssa = $229;
       break;
      }
     }
    } else {
     $$1533$lcssa = 10;
    }
    $231 = HEAP32[$225>>2]|0;
    $232 = (($231>>>0) / ($$1533$lcssa>>>0))&-1;
    $233 = Math_imul($232, $$1533$lcssa)|0;
    $234 = (($231) - ($233))|0;
    $235 = ($234|0)==(0);
    $236 = ((($225)) + 4|0);
    $237 = ($236|0)==($$4502$lcssa|0);
    $or$cond543 = $237 & $235;
    if ($or$cond543) {
     $$4492 = $225;$$4520 = $$1517;$$8 = $$3484$lcssa;
    } else {
     $238 = $232 & 1;
     $239 = ($238|0)==(0);
     $spec$select544 = $239 ? 9007199254740992.0 : 9007199254740994.0;
     $240 = $$1533$lcssa >>> 1;
     $241 = ($234>>>0)<($240>>>0);
     $242 = ($234|0)==($240|0);
     $or$cond546 = $237 & $242;
     $spec$select561 = $or$cond546 ? 1.0 : 1.5;
     $spec$select567 = $241 ? 0.5 : $spec$select561;
     $243 = ($$0522|0)==(0);
     if ($243) {
      $$1467 = $spec$select567;$$1469 = $spec$select544;
     } else {
      $244 = HEAP8[$$0523>>0]|0;
      $245 = ($244<<24>>24)==(45);
      $246 = - $spec$select544;
      $247 = - $spec$select567;
      $spec$select568 = $245 ? $246 : $spec$select544;
      $spec$select569 = $245 ? $247 : $spec$select567;
      $$1467 = $spec$select569;$$1469 = $spec$select568;
     }
     $248 = (($231) - ($234))|0;
     HEAP32[$225>>2] = $248;
     $249 = $$1469 + $$1467;
     $250 = $249 != $$1469;
     if ($250) {
      $251 = (($248) + ($$1533$lcssa))|0;
      HEAP32[$225>>2] = $251;
      $252 = ($251>>>0)>(999999999);
      if ($252) {
       $$2490638 = $225;$$5486639 = $$3484$lcssa;
       while(1) {
        $253 = ((($$2490638)) + -4|0);
        HEAP32[$$2490638>>2] = 0;
        $254 = ($253>>>0)<($$5486639>>>0);
        if ($254) {
         $255 = ((($$5486639)) + -4|0);
         HEAP32[$255>>2] = 0;
         $$6 = $255;
        } else {
         $$6 = $$5486639;
        }
        $256 = HEAP32[$253>>2]|0;
        $257 = (($256) + 1)|0;
        HEAP32[$253>>2] = $257;
        $258 = ($257>>>0)>(999999999);
        if ($258) {
         $$2490638 = $253;$$5486639 = $$6;
        } else {
         $$2490$lcssa = $253;$$5486$lcssa = $$6;
         break;
        }
       }
      } else {
       $$2490$lcssa = $225;$$5486$lcssa = $$3484$lcssa;
      }
      $259 = $$5486$lcssa;
      $260 = (($132) - ($259))|0;
      $261 = $260 >> 2;
      $262 = ($261*9)|0;
      $263 = HEAP32[$$5486$lcssa>>2]|0;
      $264 = ($263>>>0)<(10);
      if ($264) {
       $$4492 = $$2490$lcssa;$$4520 = $262;$$8 = $$5486$lcssa;
      } else {
       $$2518634 = $262;$$2534633 = 10;
       while(1) {
        $265 = ($$2534633*10)|0;
        $266 = (($$2518634) + 1)|0;
        $267 = ($263>>>0)<($265>>>0);
        if ($267) {
         $$4492 = $$2490$lcssa;$$4520 = $266;$$8 = $$5486$lcssa;
         break;
        } else {
         $$2518634 = $266;$$2534633 = $265;
        }
       }
      }
     } else {
      $$4492 = $225;$$4520 = $$1517;$$8 = $$3484$lcssa;
     }
    }
    $268 = ((($$4492)) + 4|0);
    $269 = ($$4502$lcssa>>>0)>($268>>>0);
    $spec$select547 = $269 ? $268 : $$4502$lcssa;
    $$5521 = $$4520;$$8506 = $spec$select547;$$9 = $$8;
   } else {
    $$5521 = $$1517;$$8506 = $$4502$lcssa;$$9 = $$3484$lcssa;
   }
   $270 = (0 - ($$5521))|0;
   $271 = ($$8506>>>0)>($$9>>>0);
   L109: do {
    if ($271) {
     $$9507625 = $$8506;
     while(1) {
      $273 = ((($$9507625)) + -4|0);
      $274 = HEAP32[$273>>2]|0;
      $275 = ($274|0)==(0);
      if (!($275)) {
       $$9507$lcssa = $$9507625;$$lcssa583 = 1;
       break L109;
      }
      $272 = ($273>>>0)>($$9>>>0);
      if ($272) {
       $$9507625 = $273;
      } else {
       $$9507$lcssa = $273;$$lcssa583 = 0;
       break;
      }
     }
    } else {
     $$9507$lcssa = $$8506;$$lcssa583 = 0;
    }
   } while(0);
   do {
    if ($211) {
     $not$ = $212 ^ 1;
     $276 = $not$&1;
     $spec$select548 = (($spec$select539) + ($276))|0;
     $277 = ($spec$select548|0)>($$5521|0);
     $278 = ($$5521|0)>(-5);
     $or$cond6 = $277 & $278;
     if ($or$cond6) {
      $279 = (($5) + -1)|0;
      $$neg571 = (($spec$select548) + -1)|0;
      $280 = (($$neg571) - ($$5521))|0;
      $$0479 = $279;$$2476 = $280;
     } else {
      $281 = (($5) + -2)|0;
      $282 = (($spec$select548) + -1)|0;
      $$0479 = $281;$$2476 = $282;
     }
     $283 = $4 & 8;
     $284 = ($283|0)==(0);
     if ($284) {
      if ($$lcssa583) {
       $285 = ((($$9507$lcssa)) + -4|0);
       $286 = HEAP32[$285>>2]|0;
       $287 = ($286|0)==(0);
       if ($287) {
        $$2531 = 9;
       } else {
        $288 = (($286>>>0) % 10)&-1;
        $289 = ($288|0)==(0);
        if ($289) {
         $$1530621 = 0;$$3535620 = 10;
         while(1) {
          $290 = ($$3535620*10)|0;
          $291 = (($$1530621) + 1)|0;
          $292 = (($286>>>0) % ($290>>>0))&-1;
          $293 = ($292|0)==(0);
          if ($293) {
           $$1530621 = $291;$$3535620 = $290;
          } else {
           $$2531 = $291;
           break;
          }
         }
        } else {
         $$2531 = 0;
        }
       }
      } else {
       $$2531 = 9;
      }
      $294 = $$0479 | 32;
      $295 = ($294|0)==(102);
      $296 = $$9507$lcssa;
      $297 = (($296) - ($132))|0;
      $298 = $297 >> 2;
      $299 = ($298*9)|0;
      $300 = (($299) + -9)|0;
      if ($295) {
       $301 = (($300) - ($$2531))|0;
       $302 = ($301|0)>(0);
       $spec$select549 = $302 ? $301 : 0;
       $303 = ($$2476|0)<($spec$select549|0);
       $spec$select562 = $303 ? $$2476 : $spec$select549;
       $$1480 = $$0479;$$3477 = $spec$select562;
       break;
      } else {
       $304 = (($300) + ($$5521))|0;
       $305 = (($304) - ($$2531))|0;
       $306 = ($305|0)>(0);
       $spec$select551 = $306 ? $305 : 0;
       $307 = ($$2476|0)<($spec$select551|0);
       $spec$select563 = $307 ? $$2476 : $spec$select551;
       $$1480 = $$0479;$$3477 = $spec$select563;
       break;
      }
     } else {
      $$1480 = $$0479;$$3477 = $$2476;
     }
    } else {
     $$1480 = $5;$$3477 = $spec$select539;
    }
   } while(0);
   $308 = ($$3477|0)!=(0);
   $309 = $4 >>> 3;
   $$lobit = $309 & 1;
   $310 = $308 ? 1 : $$lobit;
   $311 = $$1480 | 32;
   $312 = ($311|0)==(102);
   if ($312) {
    $313 = ($$5521|0)>(0);
    $314 = $313 ? $$5521 : 0;
    $$2515 = 0;$$pn = $314;
   } else {
    $315 = ($$5521|0)<(0);
    $316 = $315 ? $270 : $$5521;
    $317 = ($316|0)<(0);
    $318 = $317 << 31 >> 31;
    $319 = (_fmt_u($316,$318,$11)|0);
    $320 = $11;
    $321 = $319;
    $322 = (($320) - ($321))|0;
    $323 = ($322|0)<(2);
    if ($323) {
     $$1514614 = $319;
     while(1) {
      $324 = ((($$1514614)) + -1|0);
      HEAP8[$324>>0] = 48;
      $325 = $324;
      $326 = (($320) - ($325))|0;
      $327 = ($326|0)<(2);
      if ($327) {
       $$1514614 = $324;
      } else {
       $$1514$lcssa = $324;
       break;
      }
     }
    } else {
     $$1514$lcssa = $319;
    }
    $328 = $$5521 >> 31;
    $329 = $328 & 2;
    $330 = (($329) + 43)|0;
    $331 = $330&255;
    $332 = ((($$1514$lcssa)) + -1|0);
    HEAP8[$332>>0] = $331;
    $333 = $$1480&255;
    $334 = ((($$1514$lcssa)) + -2|0);
    HEAP8[$334>>0] = $333;
    $335 = $334;
    $336 = (($320) - ($335))|0;
    $$2515 = $334;$$pn = $336;
   }
   $337 = (($$0522) + 1)|0;
   $338 = (($337) + ($$3477))|0;
   $$1528 = (($338) + ($310))|0;
   $339 = (($$1528) + ($$pn))|0;
   _pad_669($0,32,$2,$339,$4);
   _out($0,$$0523,$$0522);
   $340 = $4 ^ 65536;
   _pad_669($0,48,$2,$339,$340);
   if ($312) {
    $341 = ($$9>>>0)>($$0498>>>0);
    $spec$select554 = $341 ? $$0498 : $$9;
    $342 = ((($8)) + 9|0);
    $343 = $342;
    $344 = ((($8)) + 8|0);
    $$5493603 = $spec$select554;
    while(1) {
     $345 = HEAP32[$$5493603>>2]|0;
     $346 = (_fmt_u($345,0,$342)|0);
     $347 = ($$5493603|0)==($spec$select554|0);
     if ($347) {
      $353 = ($346|0)==($342|0);
      if ($353) {
       HEAP8[$344>>0] = 48;
       $$1465 = $344;
      } else {
       $$1465 = $346;
      }
     } else {
      $348 = ($346>>>0)>($8>>>0);
      if ($348) {
       $349 = $346;
       $350 = (($349) - ($9))|0;
       _memset(($8|0),48,($350|0))|0;
       $$0464599 = $346;
       while(1) {
        $351 = ((($$0464599)) + -1|0);
        $352 = ($351>>>0)>($8>>>0);
        if ($352) {
         $$0464599 = $351;
        } else {
         $$1465 = $351;
         break;
        }
       }
      } else {
       $$1465 = $346;
      }
     }
     $354 = $$1465;
     $355 = (($343) - ($354))|0;
     _out($0,$$1465,$355);
     $356 = ((($$5493603)) + 4|0);
     $357 = ($356>>>0)>($$0498>>>0);
     if ($357) {
      break;
     } else {
      $$5493603 = $356;
     }
    }
    $$not = $308 ^ 1;
    $358 = $4 & 8;
    $359 = ($358|0)==(0);
    $or$cond556 = $359 & $$not;
    if (!($or$cond556)) {
     _out($0,40864,1);
    }
    $360 = ($356>>>0)<($$9507$lcssa>>>0);
    $361 = ($$3477|0)>(0);
    $362 = $360 & $361;
    if ($362) {
     $$4478594 = $$3477;$$6494593 = $356;
     while(1) {
      $363 = HEAP32[$$6494593>>2]|0;
      $364 = (_fmt_u($363,0,$342)|0);
      $365 = ($364>>>0)>($8>>>0);
      if ($365) {
       $366 = $364;
       $367 = (($366) - ($9))|0;
       _memset(($8|0),48,($367|0))|0;
       $$0463588 = $364;
       while(1) {
        $368 = ((($$0463588)) + -1|0);
        $369 = ($368>>>0)>($8>>>0);
        if ($369) {
         $$0463588 = $368;
        } else {
         $$0463$lcssa = $368;
         break;
        }
       }
      } else {
       $$0463$lcssa = $364;
      }
      $370 = ($$4478594|0)<(9);
      $371 = $370 ? $$4478594 : 9;
      _out($0,$$0463$lcssa,$371);
      $372 = ((($$6494593)) + 4|0);
      $373 = (($$4478594) + -9)|0;
      $374 = ($372>>>0)<($$9507$lcssa>>>0);
      $375 = ($$4478594|0)>(9);
      $376 = $374 & $375;
      if ($376) {
       $$4478594 = $373;$$6494593 = $372;
      } else {
       $$4478$lcssa = $373;
       break;
      }
     }
    } else {
     $$4478$lcssa = $$3477;
    }
    $377 = (($$4478$lcssa) + 9)|0;
    _pad_669($0,48,$377,9,0);
   } else {
    $378 = ((($$9)) + 4|0);
    $spec$select557 = $$lcssa583 ? $$9507$lcssa : $378;
    $379 = ($$9>>>0)<($spec$select557>>>0);
    $380 = ($$3477|0)>(-1);
    $381 = $379 & $380;
    if ($381) {
     $382 = ((($8)) + 9|0);
     $383 = $4 & 8;
     $384 = ($383|0)==(0);
     $385 = $382;
     $386 = (0 - ($9))|0;
     $387 = ((($8)) + 8|0);
     $$5609 = $$3477;$$7495608 = $$9;
     while(1) {
      $388 = HEAP32[$$7495608>>2]|0;
      $389 = (_fmt_u($388,0,$382)|0);
      $390 = ($389|0)==($382|0);
      if ($390) {
       HEAP8[$387>>0] = 48;
       $$0 = $387;
      } else {
       $$0 = $389;
      }
      $391 = ($$7495608|0)==($$9|0);
      do {
       if ($391) {
        $395 = ((($$0)) + 1|0);
        _out($0,$$0,1);
        $396 = ($$5609|0)<(1);
        $or$cond559 = $384 & $396;
        if ($or$cond559) {
         $$2 = $395;
         break;
        }
        _out($0,40864,1);
        $$2 = $395;
       } else {
        $392 = ($$0>>>0)>($8>>>0);
        if (!($392)) {
         $$2 = $$0;
         break;
        }
        $scevgep711 = (($$0) + ($386)|0);
        $scevgep711712 = $scevgep711;
        _memset(($8|0),48,($scevgep711712|0))|0;
        $$1604 = $$0;
        while(1) {
         $393 = ((($$1604)) + -1|0);
         $394 = ($393>>>0)>($8>>>0);
         if ($394) {
          $$1604 = $393;
         } else {
          $$2 = $393;
          break;
         }
        }
       }
      } while(0);
      $397 = $$2;
      $398 = (($385) - ($397))|0;
      $399 = ($$5609|0)>($398|0);
      $400 = $399 ? $398 : $$5609;
      _out($0,$$2,$400);
      $401 = (($$5609) - ($398))|0;
      $402 = ((($$7495608)) + 4|0);
      $403 = ($402>>>0)<($spec$select557>>>0);
      $404 = ($401|0)>(-1);
      $405 = $403 & $404;
      if ($405) {
       $$5609 = $401;$$7495608 = $402;
      } else {
       $$5$lcssa = $401;
       break;
      }
     }
    } else {
     $$5$lcssa = $$3477;
    }
    $406 = (($$5$lcssa) + 18)|0;
    _pad_669($0,48,$406,18,0);
    $407 = $11;
    $408 = $$2515;
    $409 = (($407) - ($408))|0;
    _out($0,$$2515,$409);
   }
   $410 = $4 ^ 8192;
   _pad_669($0,32,$2,$339,$410);
   $$sink757 = $339;
  }
 } while(0);
 $411 = ($$sink757|0)<($2|0);
 $$560 = $411 ? $2 : $$sink757;
 STACKTOP = sp;return ($$560|0);
}
function ___DOUBLE_BITS_670($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$1 = HEAP32[tempDoublePtr>>2]|0;
 $2 = HEAP32[tempDoublePtr+4>>2]|0;
 setTempRet0(($2) | 0);
 return ($1|0);
}
function _frexpl($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_frexp($0,$1));
 return (+$2);
}
function _frexp($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $$0 = 0.0, $$016 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, $storemerge = 0, $trunc$clear = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $5 = (getTempRet0() | 0);
 $6 = $4&65535;
 $trunc$clear = $6 & 2047;
 switch ($trunc$clear<<16>>16) {
 case 0:  {
  $7 = $0 != 0.0;
  if ($7) {
   $8 = $0 * 1.8446744073709552E+19;
   $9 = (+_frexp($8,$1));
   $10 = HEAP32[$1>>2]|0;
   $11 = (($10) + -64)|0;
   $$016 = $9;$storemerge = $11;
  } else {
   $$016 = $0;$storemerge = 0;
  }
  HEAP32[$1>>2] = $storemerge;
  $$0 = $$016;
  break;
 }
 case 2047:  {
  $$0 = $0;
  break;
 }
 default: {
  $12 = $4 & 2047;
  $13 = (($12) + -1022)|0;
  HEAP32[$1>>2] = $13;
  $14 = $3 & -2146435073;
  $15 = $14 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $2;HEAP32[tempDoublePtr+4>>2] = $15;$16 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $16;
 }
 }
 return (+$$0);
}
function _wcrtomb($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(0|0);
 do {
  if ($3) {
   $$0 = 1;
  } else {
   $4 = ($1>>>0)<(128);
   if ($4) {
    $5 = $1&255;
    HEAP8[$0>>0] = $5;
    $$0 = 1;
    break;
   }
   $6 = (___pthread_self_423()|0);
   $7 = ((($6)) + 188|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)==(0|0);
   if ($10) {
    $11 = $1 & -128;
    $12 = ($11|0)==(57216);
    if ($12) {
     $14 = $1&255;
     HEAP8[$0>>0] = $14;
     $$0 = 1;
     break;
    } else {
     $13 = (___errno_location()|0);
     HEAP32[$13>>2] = 84;
     $$0 = -1;
     break;
    }
   }
   $15 = ($1>>>0)<(2048);
   if ($15) {
    $16 = $1 >>> 6;
    $17 = $16 | 192;
    $18 = $17&255;
    $19 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $18;
    $20 = $1 & 63;
    $21 = $20 | 128;
    $22 = $21&255;
    HEAP8[$19>>0] = $22;
    $$0 = 2;
    break;
   }
   $23 = ($1>>>0)<(55296);
   $24 = $1 & -8192;
   $25 = ($24|0)==(57344);
   $or$cond = $23 | $25;
   if ($or$cond) {
    $26 = $1 >>> 12;
    $27 = $26 | 224;
    $28 = $27&255;
    $29 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $28;
    $30 = $1 >>> 6;
    $31 = $30 & 63;
    $32 = $31 | 128;
    $33 = $32&255;
    $34 = ((($0)) + 2|0);
    HEAP8[$29>>0] = $33;
    $35 = $1 & 63;
    $36 = $35 | 128;
    $37 = $36&255;
    HEAP8[$34>>0] = $37;
    $$0 = 3;
    break;
   }
   $38 = (($1) + -65536)|0;
   $39 = ($38>>>0)<(1048576);
   if ($39) {
    $40 = $1 >>> 18;
    $41 = $40 | 240;
    $42 = $41&255;
    $43 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $42;
    $44 = $1 >>> 12;
    $45 = $44 & 63;
    $46 = $45 | 128;
    $47 = $46&255;
    $48 = ((($0)) + 2|0);
    HEAP8[$43>>0] = $47;
    $49 = $1 >>> 6;
    $50 = $49 & 63;
    $51 = $50 | 128;
    $52 = $51&255;
    $53 = ((($0)) + 3|0);
    HEAP8[$48>>0] = $52;
    $54 = $1 & 63;
    $55 = $54 | 128;
    $56 = $55&255;
    HEAP8[$53>>0] = $56;
    $$0 = 4;
    break;
   } else {
    $57 = (___errno_location()|0);
    HEAP32[$57>>2] = 84;
    $$0 = -1;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___pthread_self_423() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function _pthread_self() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (27068|0);
}
function ___pthread_self_105() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function ___strerror_l($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$012$lcssa = 0, $$01214 = 0, $$016 = 0, $$113 = 0, $$115 = 0, $$115$ph = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$016 = 0;
 while(1) {
  $2 = (15056 + ($$016)|0);
  $3 = HEAP8[$2>>0]|0;
  $4 = $3&255;
  $5 = ($4|0)==($0|0);
  if ($5) {
   label = 4;
   break;
  }
  $6 = (($$016) + 1)|0;
  $7 = ($6|0)==(87);
  if ($7) {
   $$115$ph = 87;
   label = 5;
   break;
  } else {
   $$016 = $6;
  }
 }
 if ((label|0) == 4) {
  $8 = ($$016|0)==(0);
  if ($8) {
   $$012$lcssa = 15152;
  } else {
   $$115$ph = $$016;
   label = 5;
  }
 }
 if ((label|0) == 5) {
  $$01214 = 15152;$$115 = $$115$ph;
  while(1) {
   $$113 = $$01214;
   while(1) {
    $9 = HEAP8[$$113>>0]|0;
    $10 = ($9<<24>>24)==(0);
    $11 = ((($$113)) + 1|0);
    if ($10) {
     break;
    } else {
     $$113 = $11;
    }
   }
   $12 = (($$115) + -1)|0;
   $13 = ($12|0)==(0);
   if ($13) {
    $$012$lcssa = $11;
    break;
   } else {
    $$01214 = $11;$$115 = $12;
   }
  }
 }
 $14 = ((($1)) + 20|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (___lctrans($$012$lcssa,$15)|0);
 return ($16|0);
}
function ___lctrans($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (___lctrans_impl($0,$1)|0);
 return ($2|0);
}
function ___lctrans_impl($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = HEAP32[$1>>2]|0;
  $4 = ((($1)) + 4|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (___mo_lookup($3,$5,$0)|0);
  $$0 = $6;
 }
 $7 = ($$0|0)==(0|0);
 $8 = $7 ? $0 : $$0;
 return ($8|0);
}
function ___mo_lookup($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$090 = 0, $$094 = 0, $$191 = 0, $$195 = 0, $$4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond102 = 0, $or$cond104 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = (($3) + 1794895138)|0;
 $5 = ((($0)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_swapc($6,$4)|0);
 $8 = ((($0)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_swapc($9,$4)|0);
 $11 = ((($0)) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_swapc($12,$4)|0);
 $14 = $1 >>> 2;
 $15 = ($7>>>0)<($14>>>0);
 L1: do {
  if ($15) {
   $16 = $7 << 2;
   $17 = (($1) - ($16))|0;
   $18 = ($10>>>0)<($17>>>0);
   $19 = ($13>>>0)<($17>>>0);
   $or$cond = $18 & $19;
   if ($or$cond) {
    $20 = $13 | $10;
    $21 = $20 & 3;
    $22 = ($21|0)==(0);
    if ($22) {
     $23 = $10 >>> 2;
     $24 = $13 >>> 2;
     $$090 = 0;$$094 = $7;
     while(1) {
      $25 = $$094 >>> 1;
      $26 = (($$090) + ($25))|0;
      $27 = $26 << 1;
      $28 = (($27) + ($23))|0;
      $29 = (($0) + ($28<<2)|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (_swapc($30,$4)|0);
      $32 = (($28) + 1)|0;
      $33 = (($0) + ($32<<2)|0);
      $34 = HEAP32[$33>>2]|0;
      $35 = (_swapc($34,$4)|0);
      $36 = ($35>>>0)<($1>>>0);
      $37 = (($1) - ($35))|0;
      $38 = ($31>>>0)<($37>>>0);
      $or$cond102 = $36 & $38;
      if (!($or$cond102)) {
       $$4 = 0;
       break L1;
      }
      $39 = (($35) + ($31))|0;
      $40 = (($0) + ($39)|0);
      $41 = HEAP8[$40>>0]|0;
      $42 = ($41<<24>>24)==(0);
      if (!($42)) {
       $$4 = 0;
       break L1;
      }
      $43 = (($0) + ($35)|0);
      $44 = (_strcmp($2,$43)|0);
      $45 = ($44|0)==(0);
      if ($45) {
       break;
      }
      $62 = ($$094|0)==(1);
      $63 = ($44|0)<(0);
      if ($62) {
       $$4 = 0;
       break L1;
      }
      $$191 = $63 ? $$090 : $26;
      $64 = (($$094) - ($25))|0;
      $$195 = $63 ? $25 : $64;
      $$090 = $$191;$$094 = $$195;
     }
     $46 = (($27) + ($24))|0;
     $47 = (($0) + ($46<<2)|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = (_swapc($48,$4)|0);
     $50 = (($46) + 1)|0;
     $51 = (($0) + ($50<<2)|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = (_swapc($52,$4)|0);
     $54 = ($53>>>0)<($1>>>0);
     $55 = (($1) - ($53))|0;
     $56 = ($49>>>0)<($55>>>0);
     $or$cond104 = $54 & $56;
     if ($or$cond104) {
      $57 = (($0) + ($53)|0);
      $58 = (($53) + ($49))|0;
      $59 = (($0) + ($58)|0);
      $60 = HEAP8[$59>>0]|0;
      $61 = ($60<<24>>24)==(0);
      $spec$select = $61 ? $57 : 0;
      $$4 = $spec$select;
     } else {
      $$4 = 0;
     }
    } else {
     $$4 = 0;
    }
   } else {
    $$4 = 0;
   }
  } else {
   $$4 = 0;
  }
 } while(0);
 return ($$4|0);
}
function _swapc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0);
 $3 = (_llvm_bswap_i32(($0|0))|0);
 $spec$select = $2 ? $0 : $3;
 return ($spec$select|0);
}
function ___fwritex($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$03846 = 0, $$042 = 0, $$1 = 0, $$139 = 0, $$141 = 0, $$143 = 0, $$pre = 0, $$pre48 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($2)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $7 = (___towrite($2)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   $$pre = HEAP32[$3>>2]|0;
   $12 = $$pre;
   label = 5;
  } else {
   $$1 = 0;
  }
 } else {
  $6 = $4;
  $12 = $6;
  label = 5;
 }
 L5: do {
  if ((label|0) == 5) {
   $9 = ((($2)) + 20|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (($12) - ($10))|0;
   $13 = ($11>>>0)<($1>>>0);
   $14 = $10;
   if ($13) {
    $15 = ((($2)) + 36|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (FUNCTION_TABLE_iiii[$16 & 63]($2,$0,$1)|0);
    $$1 = $17;
    break;
   }
   $18 = ((($2)) + 75|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = ($19<<24>>24)<(0);
   $21 = ($1|0)==(0);
   $or$cond = $20 | $21;
   L10: do {
    if ($or$cond) {
     $$139 = 0;$$141 = $0;$$143 = $1;$32 = $14;
    } else {
     $$03846 = $1;
     while(1) {
      $23 = (($$03846) + -1)|0;
      $24 = (($0) + ($23)|0);
      $25 = HEAP8[$24>>0]|0;
      $26 = ($25<<24>>24)==(10);
      if ($26) {
       break;
      }
      $22 = ($23|0)==(0);
      if ($22) {
       $$139 = 0;$$141 = $0;$$143 = $1;$32 = $14;
       break L10;
      } else {
       $$03846 = $23;
      }
     }
     $27 = ((($2)) + 36|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = (FUNCTION_TABLE_iiii[$28 & 63]($2,$0,$$03846)|0);
     $30 = ($29>>>0)<($$03846>>>0);
     if ($30) {
      $$1 = $29;
      break L5;
     }
     $31 = (($0) + ($$03846)|0);
     $$042 = (($1) - ($$03846))|0;
     $$pre48 = HEAP32[$9>>2]|0;
     $$139 = $$03846;$$141 = $31;$$143 = $$042;$32 = $$pre48;
    }
   } while(0);
   (_memcpy(($32|0),($$141|0),($$143|0))|0);
   $33 = HEAP32[$9>>2]|0;
   $34 = (($33) + ($$143)|0);
   HEAP32[$9>>2] = $34;
   $35 = (($$139) + ($$143))|0;
   $$1 = $35;
  }
 } while(0);
 return ($$1|0);
}
function ___towrite($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 74|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (($3) + 255)|0;
 $5 = $4 | $3;
 $6 = $5&255;
 HEAP8[$1>>0] = $6;
 $7 = HEAP32[$0>>2]|0;
 $8 = $7 & 8;
 $9 = ($8|0)==(0);
 if ($9) {
  $11 = ((($0)) + 8|0);
  HEAP32[$11>>2] = 0;
  $12 = ((($0)) + 4|0);
  HEAP32[$12>>2] = 0;
  $13 = ((($0)) + 44|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($0)) + 28|0);
  HEAP32[$15>>2] = $14;
  $16 = ((($0)) + 20|0);
  HEAP32[$16>>2] = $14;
  $17 = $14;
  $18 = ((($0)) + 48|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($17) + ($19)|0);
  $21 = ((($0)) + 16|0);
  HEAP32[$21>>2] = $20;
  $$0 = 0;
 } else {
  $10 = $7 | 32;
  HEAP32[$0>>2] = $10;
  $$0 = -1;
 }
 return ($$0|0);
}
function _sn_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$cast = 0, $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) - ($6))|0;
 $8 = ($7>>>0)>($2>>>0);
 $spec$select = $8 ? $2 : $7;
 $$cast = $6;
 (_memcpy(($$cast|0),($1|0),($spec$select|0))|0);
 $9 = HEAP32[$5>>2]|0;
 $10 = (($9) + ($spec$select)|0);
 HEAP32[$5>>2] = $10;
 return ($2|0);
}
function ___ctype_b_loc() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (27312|0);
}
function ___ctype_get_mb_cur_max() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___pthread_self()|0);
 $1 = ((($0)) + 188|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 $5 = $4 ? 1 : 4;
 return ($5|0);
}
function ___pthread_self() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function ___ctype_tolower_loc() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (27316|0);
}
function ___ctype_toupper_loc() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (27320|0);
}
function _wcslen($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $0;
 while(1) {
  $1 = HEAP32[$$0>>2]|0;
  $2 = ($1|0)==(0);
  $3 = ((($$0)) + 4|0);
  if ($2) {
   break;
  } else {
   $$0 = $3;
  }
 }
 $4 = $$0;
 $5 = $0;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 2;
 return ($7|0);
}
function _isxdigit($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $narrow = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_isdigit($0)|0);
 $2 = ($1|0)!=(0);
 $3 = $0 | 32;
 $4 = (($3) + -97)|0;
 $5 = ($4>>>0)<(6);
 $narrow = $5 | $2;
 $spec$select = $narrow&1;
 return ($spec$select|0);
}
function ___floatscan($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$0102 = 0, $$0103 = 0, $$0104122 = 0, $$0110 = 0, $$0111 = 0.0, $$1$lcssa = 0, $$1105118 = 0, $$1123 = 0, $$2 = 0, $$2106120 = 0, $$3107 = 0, $$3121 = 0, $$4 = 0, $$4108 = 0, $$5 = 0, $$6 = 0, $$in = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0.0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond124 = 0, $or$cond5 = 0, $or$cond7 = 0, $trunc = 0, $trunc$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 switch ($1|0) {
 case 0:  {
  $$0102 = -149;$$0103 = 24;
  label = 4;
  break;
 }
 case 1:  {
  $$0102 = -1074;$$0103 = 53;
  label = 4;
  break;
 }
 case 2:  {
  $$0102 = -1074;$$0103 = 53;
  label = 4;
  break;
 }
 default: {
  $$0111 = 0.0;
 }
 }
 L4: do {
  if ((label|0) == 4) {
   $3 = ((($0)) + 4|0);
   $4 = ((($0)) + 100|0);
   while(1) {
    $5 = HEAP32[$3>>2]|0;
    $6 = HEAP32[$4>>2]|0;
    $7 = ($5>>>0)<($6>>>0);
    if ($7) {
     $8 = ((($5)) + 1|0);
     HEAP32[$3>>2] = $8;
     $9 = HEAP8[$5>>0]|0;
     $10 = $9&255;
     $12 = $10;
    } else {
     $11 = (___shgetc($0)|0);
     $12 = $11;
    }
    $13 = (_isspace($12)|0);
    $14 = ($13|0)==(0);
    if ($14) {
     break;
    }
   }
   L13: do {
    switch ($12|0) {
    case 43: case 45:  {
     $15 = ($12|0)==(45);
     $16 = $15&1;
     $17 = $16 << 1;
     $18 = (1 - ($17))|0;
     $19 = HEAP32[$3>>2]|0;
     $20 = HEAP32[$4>>2]|0;
     $21 = ($19>>>0)<($20>>>0);
     if ($21) {
      $22 = ((($19)) + 1|0);
      HEAP32[$3>>2] = $22;
      $23 = HEAP8[$19>>0]|0;
      $24 = $23&255;
      $$0 = $24;$$0110 = $18;
      break L13;
     } else {
      $25 = (___shgetc($0)|0);
      $$0 = $25;$$0110 = $18;
      break L13;
     }
     break;
    }
    default: {
     $$0 = $12;$$0110 = 1;
    }
    }
   } while(0);
   $$0104122 = 0;$$1123 = $$0;
   while(1) {
    $26 = $$1123 | 32;
    $27 = (40866 + ($$0104122)|0);
    $28 = HEAP8[$27>>0]|0;
    $29 = $28 << 24 >> 24;
    $30 = ($26|0)==($29|0);
    if (!($30)) {
     $$1$lcssa = $$1123;$trunc = $$0104122;
     break;
    }
    $31 = ($$0104122>>>0)<(7);
    do {
     if ($31) {
      $32 = HEAP32[$3>>2]|0;
      $33 = HEAP32[$4>>2]|0;
      $34 = ($32>>>0)<($33>>>0);
      if ($34) {
       $35 = ((($32)) + 1|0);
       HEAP32[$3>>2] = $35;
       $36 = HEAP8[$32>>0]|0;
       $37 = $36&255;
       $$2 = $37;
       break;
      } else {
       $38 = (___shgetc($0)|0);
       $$2 = $38;
       break;
      }
     } else {
      $$2 = $$1123;
     }
    } while(0);
    $39 = (($$0104122) + 1)|0;
    $40 = ($39>>>0)<(8);
    if ($40) {
     $$0104122 = $39;$$1123 = $$2;
    } else {
     $$1$lcssa = $$2;$trunc = 8;
     break;
    }
   }
   $trunc$clear = $trunc & 2147483647;
   L29: do {
    switch ($trunc$clear|0) {
    case 8:  {
     break;
    }
    case 3:  {
     label = 23;
     break;
    }
    default: {
     $41 = ($trunc>>>0)>(3);
     $42 = ($2|0)!=(0);
     $or$cond5 = $42 & $41;
     if ($or$cond5) {
      $43 = ($trunc|0)==(8);
      if ($43) {
       break L29;
      } else {
       label = 23;
       break L29;
      }
     }
     $57 = ($trunc|0)==(0);
     L34: do {
      if ($57) {
       $$2106120 = 0;$$3121 = $$1$lcssa;
       while(1) {
        $58 = $$3121 | 32;
        $59 = (40875 + ($$2106120)|0);
        $60 = HEAP8[$59>>0]|0;
        $61 = $60 << 24 >> 24;
        $62 = ($58|0)==($61|0);
        if (!($62)) {
         $$3107 = $$2106120;$$5 = $$3121;
         break L34;
        }
        $63 = ($$2106120>>>0)<(2);
        do {
         if ($63) {
          $64 = HEAP32[$3>>2]|0;
          $65 = HEAP32[$4>>2]|0;
          $66 = ($64>>>0)<($65>>>0);
          if ($66) {
           $67 = ((($64)) + 1|0);
           HEAP32[$3>>2] = $67;
           $68 = HEAP8[$64>>0]|0;
           $69 = $68&255;
           $$4 = $69;
           break;
          } else {
           $70 = (___shgetc($0)|0);
           $$4 = $70;
           break;
          }
         } else {
          $$4 = $$3121;
         }
        } while(0);
        $71 = (($$2106120) + 1)|0;
        $72 = ($71>>>0)<(3);
        if ($72) {
         $$2106120 = $71;$$3121 = $$4;
        } else {
         $$3107 = 3;$$5 = $$4;
         break;
        }
       }
      } else {
       $$3107 = $trunc;$$5 = $$1$lcssa;
      }
     } while(0);
     switch ($$3107|0) {
     case 3:  {
      $73 = HEAP32[$3>>2]|0;
      $74 = HEAP32[$4>>2]|0;
      $75 = ($73>>>0)<($74>>>0);
      if ($75) {
       $76 = ((($73)) + 1|0);
       HEAP32[$3>>2] = $76;
       $77 = HEAP8[$73>>0]|0;
       $78 = $77&255;
       $81 = $78;
      } else {
       $79 = (___shgetc($0)|0);
       $81 = $79;
      }
      $80 = ($81|0)==(40);
      if (!($80)) {
       $82 = HEAP32[$4>>2]|0;
       $83 = ($82|0)==(0|0);
       if ($83) {
        $$0111 = nan;
        break L4;
       }
       $84 = HEAP32[$3>>2]|0;
       $85 = ((($84)) + -1|0);
       HEAP32[$3>>2] = $85;
       $$0111 = nan;
       break L4;
      }
      $$4108 = 1;
      while(1) {
       $86 = HEAP32[$3>>2]|0;
       $87 = HEAP32[$4>>2]|0;
       $88 = ($86>>>0)<($87>>>0);
       if ($88) {
        $89 = ((($86)) + 1|0);
        HEAP32[$3>>2] = $89;
        $90 = HEAP8[$86>>0]|0;
        $91 = $90&255;
        $94 = $91;
       } else {
        $92 = (___shgetc($0)|0);
        $94 = $92;
       }
       $93 = (($94) + -48)|0;
       $95 = ($93>>>0)<(10);
       $96 = (($94) + -65)|0;
       $97 = ($96>>>0)<(26);
       $or$cond = $95 | $97;
       if (!($or$cond)) {
        $98 = (($94) + -97)|0;
        $99 = ($98>>>0)<(26);
        $100 = ($94|0)==(95);
        $or$cond7 = $100 | $99;
        if (!($or$cond7)) {
         break;
        }
       }
       $112 = (($$4108) + 1)|0;
       $$4108 = $112;
      }
      $101 = ($94|0)==(41);
      if ($101) {
       $$0111 = nan;
       break L4;
      }
      $102 = HEAP32[$4>>2]|0;
      $103 = ($102|0)==(0|0);
      if (!($103)) {
       $104 = HEAP32[$3>>2]|0;
       $105 = ((($104)) + -1|0);
       HEAP32[$3>>2] = $105;
      }
      if (!($42)) {
       $106 = (___errno_location()|0);
       HEAP32[$106>>2] = 22;
       ___shlim($0,0);
       $$0111 = 0.0;
       break L4;
      }
      $107 = ($$4108|0)==(0);
      if ($107) {
       $$0111 = nan;
       break L4;
      }
      $$in = $$4108;
      while(1) {
       $108 = (($$in) + -1)|0;
       if (!($103)) {
        $109 = HEAP32[$3>>2]|0;
        $110 = ((($109)) + -1|0);
        HEAP32[$3>>2] = $110;
       }
       $111 = ($108|0)==(0);
       if ($111) {
        $$0111 = nan;
        break L4;
       } else {
        $$in = $108;
       }
      }
      break;
     }
     case 0:  {
      $118 = ($$5|0)==(48);
      if ($118) {
       $119 = HEAP32[$3>>2]|0;
       $120 = HEAP32[$4>>2]|0;
       $121 = ($119>>>0)<($120>>>0);
       if ($121) {
        $122 = ((($119)) + 1|0);
        HEAP32[$3>>2] = $122;
        $123 = HEAP8[$119>>0]|0;
        $124 = $123&255;
        $127 = $124;
       } else {
        $125 = (___shgetc($0)|0);
        $127 = $125;
       }
       $126 = $127 | 32;
       $128 = ($126|0)==(120);
       if ($128) {
        $129 = (+_hexfloat($0,$$0103,$$0102,$$0110,$2));
        $$0111 = $129;
        break L4;
       }
       $130 = HEAP32[$4>>2]|0;
       $131 = ($130|0)==(0|0);
       if ($131) {
        $$6 = 48;
       } else {
        $132 = HEAP32[$3>>2]|0;
        $133 = ((($132)) + -1|0);
        HEAP32[$3>>2] = $133;
        $$6 = 48;
       }
      } else {
       $$6 = $$5;
      }
      $134 = (+_decfloat($0,$$6,$$0103,$$0102,$$0110,$2));
      $$0111 = $134;
      break L4;
      break;
     }
     default: {
      $113 = HEAP32[$4>>2]|0;
      $114 = ($113|0)==(0|0);
      if (!($114)) {
       $115 = HEAP32[$3>>2]|0;
       $116 = ((($115)) + -1|0);
       HEAP32[$3>>2] = $116;
      }
      $117 = (___errno_location()|0);
      HEAP32[$117>>2] = 22;
      ___shlim($0,0);
      $$0111 = 0.0;
      break L4;
     }
     }
    }
    }
   } while(0);
   if ((label|0) == 23) {
    $44 = HEAP32[$4>>2]|0;
    $45 = ($44|0)==(0|0);
    if (!($45)) {
     $46 = HEAP32[$3>>2]|0;
     $47 = ((($46)) + -1|0);
     HEAP32[$3>>2] = $47;
    }
    $48 = ($2|0)!=(0);
    $49 = ($trunc>>>0)>(3);
    $or$cond124 = $48 & $49;
    if ($or$cond124) {
     $$1105118 = $trunc;
     while(1) {
      if (!($45)) {
       $50 = HEAP32[$3>>2]|0;
       $51 = ((($50)) + -1|0);
       HEAP32[$3>>2] = $51;
      }
      $52 = (($$1105118) + -1)|0;
      $53 = ($52>>>0)>(3);
      if ($53) {
       $$1105118 = $52;
      } else {
       break;
      }
     }
    }
   }
   $54 = (+($$0110|0));
   $55 = $54 * inf;
   $56 = $55;
   $$0111 = $56;
  }
 } while(0);
 return (+$$0111);
}
function _hexfloat($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$0$be = 0, $$0$ph = 0, $$0133 = 0, $$0143 = 0, $$0151 = 0, $$0154 = 0.0, $$0155 = 0.0, $$0158 = 0.0, $$0163 = 0, $$0169 = 0.0, $$0170 = 0, $$0170173 = 0, $$0170174 = 0, $$1149 = 0, $$1149$ph = 0, $$1152 = 0, $$1156 = 0.0, $$1159 = 0.0, $$1164 = 0;
 var $$2150 = 0, $$2153 = 0, $$2157 = 0.0, $$2160 = 0.0, $$2165 = 0, $$3 = 0, $$3$be = 0, $$3$lcssa = 0, $$3$ph = 0, $$3146 = 0, $$3146$ph = 0, $$3161$lcssa = 0.0, $$3161181 = 0.0, $$3166$lcssa = 0, $$3166185 = 0, $$4147 = 0, $$4162 = 0.0, $$4167$lcssa = 0, $$4167180 = 0, $$5 = 0.0;
 var $$5168 = 0, $$6 = 0, $$pn = 0.0, $$pre = 0, $$pre$phi204Z2D = 0.0, $$pre203 = 0.0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0.0, $152 = 0.0, $153 = 0.0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0.0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0.0, $195 = 0, $196 = 0.0, $197 = 0.0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0.0, $204 = 0.0, $205 = 0.0, $206 = 0.0, $207 = 0.0, $208 = 0.0, $209 = 0, $21 = 0, $210 = 0, $211 = 0.0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0.0, $94 = 0.0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $brmerge = 0;
 var $not$ = 0, $or$cond = 0, $or$cond172 = 0, $or$cond4 = 0, $or$cond6 = 0, $spec$select175 = 0.0, $spec$select176 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($0)) + 100|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($6>>>0)<($8>>>0);
 if ($9) {
  $10 = ((($6)) + 1|0);
  HEAP32[$5>>2] = $10;
  $11 = HEAP8[$6>>0]|0;
  $12 = $11&255;
  $$0$ph = $12;
 } else {
  $13 = (___shgetc($0)|0);
  $$0$ph = $13;
 }
 $$0 = $$0$ph;$$0143 = 0;
 L5: while(1) {
  switch ($$0|0) {
  case 46:  {
   label = 10;
   break L5;
   break;
  }
  case 48:  {
   break;
  }
  default: {
   $$1149$ph = 0;$$3$ph = $$0;$$3146$ph = $$0143;$212 = 0;$213 = 0;
   break L5;
  }
  }
  $14 = HEAP32[$5>>2]|0;
  $15 = HEAP32[$7>>2]|0;
  $16 = ($14>>>0)<($15>>>0);
  if ($16) {
   $17 = ((($14)) + 1|0);
   HEAP32[$5>>2] = $17;
   $18 = HEAP8[$14>>0]|0;
   $19 = $18&255;
   $$0$be = $19;
  } else {
   $20 = (___shgetc($0)|0);
   $$0$be = $20;
  }
  $$0 = $$0$be;$$0143 = 1;
 }
 if ((label|0) == 10) {
  $21 = HEAP32[$5>>2]|0;
  $22 = HEAP32[$7>>2]|0;
  $23 = ($21>>>0)<($22>>>0);
  if ($23) {
   $24 = ((($21)) + 1|0);
   HEAP32[$5>>2] = $24;
   $25 = HEAP8[$21>>0]|0;
   $26 = $25&255;
   $29 = $26;
  } else {
   $27 = (___shgetc($0)|0);
   $29 = $27;
  }
  $28 = ($29|0)==(48);
  if ($28) {
   $37 = 0;$38 = 0;
   while(1) {
    $30 = HEAP32[$5>>2]|0;
    $31 = HEAP32[$7>>2]|0;
    $32 = ($30>>>0)<($31>>>0);
    if ($32) {
     $33 = ((($30)) + 1|0);
     HEAP32[$5>>2] = $33;
     $34 = HEAP8[$30>>0]|0;
     $35 = $34&255;
     $42 = $35;
    } else {
     $36 = (___shgetc($0)|0);
     $42 = $36;
    }
    $39 = (_i64Add(($37|0),($38|0),-1,-1)|0);
    $40 = (getTempRet0() | 0);
    $41 = ($42|0)==(48);
    if ($41) {
     $37 = $39;$38 = $40;
    } else {
     $$1149$ph = 1;$$3$ph = $42;$$3146$ph = 1;$212 = $39;$213 = $40;
     break;
    }
   }
  } else {
   $$1149$ph = 1;$$3$ph = $29;$$3146$ph = $$0143;$212 = 0;$213 = 0;
  }
 }
 $$0151 = 0;$$0155 = 1.0;$$0158 = 0.0;$$0163 = 0;$$1149 = $$1149$ph;$$3 = $$3$ph;$$3146 = $$3146$ph;$52 = 0;$54 = 0;$97 = $212;$99 = $213;
 while(1) {
  $43 = (($$3) + -48)|0;
  $44 = ($43>>>0)<(10);
  $$pre = $$3 | 32;
  if ($44) {
   label = 24;
  } else {
   $45 = (($$pre) + -97)|0;
   $46 = ($45>>>0)<(6);
   $47 = ($$3|0)==(46);
   $or$cond6 = $47 | $46;
   if (!($or$cond6)) {
    $$3$lcssa = $$3;
    break;
   }
   if ($47) {
    $48 = ($$1149|0)==(0);
    if ($48) {
     $$2150 = 1;$$2153 = $$0151;$$2157 = $$0155;$$2160 = $$0158;$$2165 = $$0163;$$4147 = $$3146;$214 = $54;$215 = $52;$216 = $54;$217 = $52;
    } else {
     $$3$lcssa = 46;
     break;
    }
   } else {
    label = 24;
   }
  }
  if ((label|0) == 24) {
   label = 0;
   $49 = ($$3|0)>(57);
   $50 = (($$pre) + -87)|0;
   $$0133 = $49 ? $50 : $43;
   $51 = ($52|0)<(0);
   $53 = ($54>>>0)<(8);
   $55 = ($52|0)==(0);
   $56 = $55 & $53;
   $57 = $51 | $56;
   do {
    if ($57) {
     $58 = $$0163 << 4;
     $59 = (($$0133) + ($58))|0;
     $$1152 = $$0151;$$1156 = $$0155;$$1159 = $$0158;$$1164 = $59;
    } else {
     $60 = ($52|0)<(0);
     $61 = ($54>>>0)<(14);
     $62 = ($52|0)==(0);
     $63 = $62 & $61;
     $64 = $60 | $63;
     if ($64) {
      $65 = (+($$0133|0));
      $66 = $$0155 * 0.0625;
      $67 = $66 * $65;
      $68 = $$0158 + $67;
      $$1152 = $$0151;$$1156 = $66;$$1159 = $68;$$1164 = $$0163;
      break;
     } else {
      $69 = ($$0133|0)==(0);
      $70 = ($$0151|0)!=(0);
      $or$cond = $70 | $69;
      $71 = $$0155 * 0.5;
      $72 = $$0158 + $71;
      $spec$select175 = $or$cond ? $$0158 : $72;
      $spec$select176 = $or$cond ? $$0151 : 1;
      $$1152 = $spec$select176;$$1156 = $$0155;$$1159 = $spec$select175;$$1164 = $$0163;
      break;
     }
    }
   } while(0);
   $73 = (_i64Add(($54|0),($52|0),1,0)|0);
   $74 = (getTempRet0() | 0);
   $$2150 = $$1149;$$2153 = $$1152;$$2157 = $$1156;$$2160 = $$1159;$$2165 = $$1164;$$4147 = 1;$214 = $97;$215 = $99;$216 = $73;$217 = $74;
  }
  $75 = HEAP32[$5>>2]|0;
  $76 = HEAP32[$7>>2]|0;
  $77 = ($75>>>0)<($76>>>0);
  if ($77) {
   $78 = ((($75)) + 1|0);
   HEAP32[$5>>2] = $78;
   $79 = HEAP8[$75>>0]|0;
   $80 = $79&255;
   $$3$be = $80;
  } else {
   $81 = (___shgetc($0)|0);
   $$3$be = $81;
  }
  $$0151 = $$2153;$$0155 = $$2157;$$0158 = $$2160;$$0163 = $$2165;$$1149 = $$2150;$$3 = $$3$be;$$3146 = $$4147;$52 = $217;$54 = $216;$97 = $214;$99 = $215;
 }
 $82 = ($$3146|0)==(0);
 do {
  if ($82) {
   $83 = HEAP32[$7>>2]|0;
   $84 = ($83|0)==(0|0);
   if (!($84)) {
    $85 = HEAP32[$5>>2]|0;
    $86 = ((($85)) + -1|0);
    HEAP32[$5>>2] = $86;
   }
   $87 = ($4|0)==(0);
   if ($87) {
    ___shlim($0,0);
   } else {
    if (!($84)) {
     $88 = HEAP32[$5>>2]|0;
     $89 = ((($88)) + -1|0);
     HEAP32[$5>>2] = $89;
     $90 = ($$1149|0)==(0);
     $brmerge = $90 | $84;
     if (!($brmerge)) {
      $91 = HEAP32[$5>>2]|0;
      $92 = ((($91)) + -1|0);
      HEAP32[$5>>2] = $92;
     }
    }
   }
   $93 = (+($3|0));
   $94 = $93 * 0.0;
   $$0169 = $94;
  } else {
   $95 = ($$1149|0)==(0);
   $96 = $95 ? $54 : $97;
   $98 = $95 ? $52 : $99;
   $100 = ($52|0)<(0);
   $101 = ($54>>>0)<(8);
   $102 = ($52|0)==(0);
   $103 = $102 & $101;
   $104 = $100 | $103;
   if ($104) {
    $$3166185 = $$0163;$106 = $54;$107 = $52;
    while(1) {
     $105 = $$3166185 << 4;
     $108 = (_i64Add(($106|0),($107|0),1,0)|0);
     $109 = (getTempRet0() | 0);
     $110 = ($107|0)<(0);
     $111 = ($106>>>0)<(7);
     $112 = ($107|0)==(0);
     $113 = $112 & $111;
     $114 = $110 | $113;
     if ($114) {
      $$3166185 = $105;$106 = $108;$107 = $109;
     } else {
      $$3166$lcssa = $105;
      break;
     }
    }
   } else {
    $$3166$lcssa = $$0163;
   }
   $115 = $$3$lcssa | 32;
   $116 = ($115|0)==(112);
   if ($116) {
    $117 = (_scanexp($0,$4)|0);
    $118 = (getTempRet0() | 0);
    $119 = ($117|0)==(0);
    $120 = ($118|0)==(-2147483648);
    $121 = $119 & $120;
    if ($121) {
     $122 = ($4|0)==(0);
     if ($122) {
      ___shlim($0,0);
      $$0169 = 0.0;
      break;
     }
     $123 = HEAP32[$7>>2]|0;
     $124 = ($123|0)==(0|0);
     if ($124) {
      $135 = 0;$136 = 0;
     } else {
      $125 = HEAP32[$5>>2]|0;
      $126 = ((($125)) + -1|0);
      HEAP32[$5>>2] = $126;
      $135 = 0;$136 = 0;
     }
    } else {
     $135 = $117;$136 = $118;
    }
   } else {
    $127 = HEAP32[$7>>2]|0;
    $128 = ($127|0)==(0|0);
    if ($128) {
     $135 = 0;$136 = 0;
    } else {
     $129 = HEAP32[$5>>2]|0;
     $130 = ((($129)) + -1|0);
     HEAP32[$5>>2] = $130;
     $135 = 0;$136 = 0;
    }
   }
   $131 = (_bitshift64Shl(($96|0),($98|0),2)|0);
   $132 = (getTempRet0() | 0);
   $133 = (_i64Add(($131|0),($132|0),-32,-1)|0);
   $134 = (getTempRet0() | 0);
   $137 = (_i64Add(($133|0),($134|0),($135|0),($136|0))|0);
   $138 = (getTempRet0() | 0);
   $139 = ($$3166$lcssa|0)==(0);
   if ($139) {
    $140 = (+($3|0));
    $141 = $140 * 0.0;
    $$0169 = $141;
    break;
   }
   $142 = (0 - ($2))|0;
   $143 = ($142|0)<(0);
   $144 = $143 << 31 >> 31;
   $145 = ($138|0)>($144|0);
   $146 = ($137>>>0)>($142>>>0);
   $147 = ($138|0)==($144|0);
   $148 = $147 & $146;
   $149 = $145 | $148;
   if ($149) {
    $150 = (___errno_location()|0);
    HEAP32[$150>>2] = 34;
    $151 = (+($3|0));
    $152 = $151 * 1.7976931348623157E+308;
    $153 = $152 * 1.7976931348623157E+308;
    $$0169 = $153;
    break;
   }
   $154 = (($2) + -106)|0;
   $155 = ($154|0)<(0);
   $156 = $155 << 31 >> 31;
   $157 = ($138|0)<($156|0);
   $158 = ($137>>>0)<($154>>>0);
   $159 = ($138|0)==($156|0);
   $160 = $159 & $158;
   $161 = $157 | $160;
   if ($161) {
    $162 = (___errno_location()|0);
    HEAP32[$162>>2] = 34;
    $163 = (+($3|0));
    $164 = $163 * 2.2250738585072014E-308;
    $165 = $164 * 2.2250738585072014E-308;
    $$0169 = $165;
    break;
   }
   $166 = ($$3166$lcssa|0)>(-1);
   if ($166) {
    $$3161181 = $$0158;$$4167180 = $$3166$lcssa;$171 = $137;$172 = $138;
    while(1) {
     $167 = !($$3161181 >= 0.5);
     $168 = $$4167180 << 1;
     $169 = $$3161181 + -1.0;
     $not$ = $167 ^ 1;
     $170 = $not$&1;
     $$5168 = $168 | $170;
     $$pn = $167 ? $$3161181 : $169;
     $$4162 = $$3161181 + $$pn;
     $173 = (_i64Add(($171|0),($172|0),-1,-1)|0);
     $174 = (getTempRet0() | 0);
     $175 = ($$5168|0)>(-1);
     if ($175) {
      $$3161181 = $$4162;$$4167180 = $$5168;$171 = $173;$172 = $174;
     } else {
      $$3161$lcssa = $$4162;$$4167$lcssa = $$5168;$182 = $173;$183 = $174;
      break;
     }
    }
   } else {
    $$3161$lcssa = $$0158;$$4167$lcssa = $$3166$lcssa;$182 = $137;$183 = $138;
   }
   $176 = ($1|0)<(0);
   $177 = $176 << 31 >> 31;
   $178 = ($2|0)<(0);
   $179 = $178 << 31 >> 31;
   $180 = (_i64Subtract(32,0,($2|0),($179|0))|0);
   $181 = (getTempRet0() | 0);
   $184 = (_i64Add(($180|0),($181|0),($182|0),($183|0))|0);
   $185 = (getTempRet0() | 0);
   $186 = ($185|0)<($177|0);
   $187 = ($184>>>0)<($1>>>0);
   $188 = ($185|0)==($177|0);
   $189 = $188 & $187;
   $190 = $186 | $189;
   if ($190) {
    $191 = ($184|0)>(0);
    if ($191) {
     $$0170 = $184;
     label = 65;
    } else {
     $$0170174 = 0;$195 = 84;
     label = 67;
    }
   } else {
    $$0170 = $1;
    label = 65;
   }
   if ((label|0) == 65) {
    $192 = ($$0170|0)<(53);
    $193 = (84 - ($$0170))|0;
    if ($192) {
     $$0170174 = $$0170;$195 = $193;
     label = 67;
    } else {
     $$pre203 = (+($3|0));
     $$0154 = 0.0;$$0170173 = $$0170;$$pre$phi204Z2D = $$pre203;
    }
   }
   if ((label|0) == 67) {
    $194 = (+($3|0));
    $196 = (+_scalbn(1.0,$195));
    $197 = (+_copysignl($196,$194));
    $$0154 = $197;$$0170173 = $$0170174;$$pre$phi204Z2D = $194;
   }
   $198 = ($$0170173|0)<(32);
   $199 = $$3161$lcssa != 0.0;
   $or$cond4 = $199 & $198;
   $200 = $$4167$lcssa & 1;
   $201 = ($200|0)==(0);
   $or$cond172 = $201 & $or$cond4;
   $202 = $or$cond172&1;
   $$6 = (($$4167$lcssa) + ($202))|0;
   $$5 = $or$cond172 ? 0.0 : $$3161$lcssa;
   $203 = (+($$6>>>0));
   $204 = $$pre$phi204Z2D * $203;
   $205 = $$0154 + $204;
   $206 = $$5 * $$pre$phi204Z2D;
   $207 = $206 + $205;
   $208 = $207 - $$0154;
   $209 = $208 != 0.0;
   if (!($209)) {
    $210 = (___errno_location()|0);
    HEAP32[$210>>2] = 34;
   }
   $211 = (+_scalbnl($208,$182));
   $$0169 = $211;
  }
 } while(0);
 return (+$$0169);
}
function _decfloat($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0324 = 0, $$0324$be = 0, $$0327480 = 0, $$0328 = 0, $$0329 = 0, $$0331476 = 0, $$0335486 = 0, $$0336$lcssa = 0, $$0336453 = 0, $$0336454 = 0, $$0336455 = 0, $$0336503 = 0, $$0340$lcssa = 0, $$0340457 = 0, $$0340458 = 0, $$0340459 = 0, $$0340502 = 0, $$0345$lcssa540 = 0, $$0345484 = 0, $$0355 = 0.0;
 var $$0356 = 0.0, $$0360474 = 0.0, $$0367 = 0, $$0376 = 0, $$0376$ph = 0, $$0381$lcssa539 = 0, $$0381483 = 0, $$0390 = 0, $$0393 = 0, $$0398$lcssa = 0, $$0398463 = 0, $$0398464 = 0, $$0398465 = 0, $$0398499 = 0, $$1 = 0.0, $$10473 = 0, $$11 = 0, $$1330 = 0, $$1357 = 0.0, $$1361 = 0.0;
 var $$1377 = 0, $$1377$ph = 0, $$1377$ph$ph = 0, $$1391$lcssa = 0, $$1391501 = 0, $$2 = 0, $$2338 = 0, $$2342 = 0, $$2362 = 0.0, $$2366$v = 0, $$2369 = 0, $$2369$ph = 0, $$2369$ph579 = 0, $$2392 = 0, $$2395 = 0, $$2400 = 0, $$3$lcssa = 0, $$3339493 = 0, $$3343 = 0, $$3348$ph = 0;
 var $$3348$ph580 = 0, $$3359 = 0.0, $$3363 = 0.0, $$3370 = 0, $$3379 = 0, $$3384$ph = 0, $$3384$ph578 = 0, $$3396$lcssa = 0, $$3396500 = 0, $$3504 = 0, $$4344485 = 0, $$4380 = 0, $$4397 = 0, $$4475 = 0, $$5 = 0, $$5$in = 0, $$5350 = 0, $$5350$ph = 0, $$5350$ph$ph = 0, $$5372 = 0;
 var $$5386$ph = 0, $$5386$ph576 = 0, $$5386$ph576$ph = 0, $$6351478 = 0, $$6387477 = 0, $$6479 = 0, $$7374$ph$ph = 0, $$neg447 = 0, $$neg448 = 0, $$pre = 0, $$promoted = 0, $$sink$off0 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0.0, $108 = 0.0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0.0;
 var $125 = 0.0, $126 = 0.0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0.0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0.0, $164 = 0, $165 = 0.0, $166 = 0.0, $167 = 0, $168 = 0.0, $169 = 0, $17 = 0, $170 = 0.0, $171 = 0.0, $172 = 0, $173 = 0, $174 = 0, $175 = 0.0, $176 = 0.0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0, $185 = 0, $186 = 0, $187 = 0.0, $188 = 0.0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
 var $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0;
 var $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0;
 var $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0;
 var $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0;
 var $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0;
 var $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0;
 var $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0.0, $313 = 0, $314 = 0, $315 = 0.0, $316 = 0.0, $317 = 0, $318 = 0.0, $319 = 0.0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0;
 var $325 = 0, $326 = 0.0, $327 = 0.0, $328 = 0, $329 = 0.0, $33 = 0, $330 = 0.0, $331 = 0.0, $332 = 0.0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0;
 var $343 = 0.0, $344 = 0.0, $345 = 0, $346 = 0.0, $347 = 0.0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0.0, $352 = 0.0, $353 = 0.0, $354 = 0.0, $355 = 0, $356 = 0, $357 = 0.0, $358 = 0, $359 = 0.0, $36 = 0, $360 = 0.0;
 var $361 = 0.0, $362 = 0, $363 = 0, $364 = 0, $365 = 0.0, $366 = 0, $367 = 0.0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0.0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0;
 var $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $cond = 0, $exitcond = 0, $narrow = 0, $not$ = 0, $or$cond = 0, $or$cond3 = 0, $or$cond414 = 0, $or$cond416 = 0, $or$cond417 = 0, $or$cond418 = 0, $or$cond421 = 0, $or$cond559 = 0, $or$cond9 = 0, $spec$select = 0, $spec$select410 = 0, $spec$select411 = 0, $spec$select419 = 0, $spec$select420 = 0, $spec$select439 = 0;
 var $spec$select440 = 0, $spec$select441 = 0, $spec$select442 = 0, $spec$select443 = 0, $spec$store$select = 0, $storemerge446 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(512|0);
 $6 = sp;
 $7 = (($3) + ($2))|0;
 $8 = (0 - ($7))|0;
 $9 = ((($0)) + 4|0);
 $10 = ((($0)) + 100|0);
 $$0324 = $1;$$0393 = 0;
 L1: while(1) {
  switch ($$0324|0) {
  case 46:  {
   label = 7;
   break L1;
   break;
  }
  case 48:  {
   break;
  }
  default: {
   $$0390 = 0;$$2 = $$0324;$$2395 = $$0393;$375 = 0;$376 = 0;
   break L1;
  }
  }
  $11 = HEAP32[$9>>2]|0;
  $12 = HEAP32[$10>>2]|0;
  $13 = ($11>>>0)<($12>>>0);
  if ($13) {
   $14 = ((($11)) + 1|0);
   HEAP32[$9>>2] = $14;
   $15 = HEAP8[$11>>0]|0;
   $16 = $15&255;
   $$0324$be = $16;
  } else {
   $17 = (___shgetc($0)|0);
   $$0324$be = $17;
  }
  $$0324 = $$0324$be;$$0393 = 1;
 }
 if ((label|0) == 7) {
  $18 = HEAP32[$9>>2]|0;
  $19 = HEAP32[$10>>2]|0;
  $20 = ($18>>>0)<($19>>>0);
  if ($20) {
   $21 = ((($18)) + 1|0);
   HEAP32[$9>>2] = $21;
   $22 = HEAP8[$18>>0]|0;
   $23 = $22&255;
   $26 = $23;
  } else {
   $24 = (___shgetc($0)|0);
   $26 = $24;
  }
  $25 = ($26|0)==(48);
  if ($25) {
   $27 = 0;$28 = 0;
   while(1) {
    $29 = (_i64Add(($27|0),($28|0),-1,-1)|0);
    $30 = (getTempRet0() | 0);
    $31 = HEAP32[$9>>2]|0;
    $32 = HEAP32[$10>>2]|0;
    $33 = ($31>>>0)<($32>>>0);
    if ($33) {
     $34 = ((($31)) + 1|0);
     HEAP32[$9>>2] = $34;
     $35 = HEAP8[$31>>0]|0;
     $36 = $35&255;
     $39 = $36;
    } else {
     $37 = (___shgetc($0)|0);
     $39 = $37;
    }
    $38 = ($39|0)==(48);
    if ($38) {
     $27 = $29;$28 = $30;
    } else {
     $$0390 = 1;$$2 = $39;$$2395 = 1;$375 = $29;$376 = $30;
     break;
    }
   }
  } else {
   $$0390 = 1;$$2 = $26;$$2395 = $$0393;$375 = 0;$376 = 0;
  }
 }
 HEAP32[$6>>2] = 0;
 $40 = (($$2) + -48)|0;
 $41 = ($40>>>0)<(10);
 $42 = ($$2|0)==(46);
 $43 = $42 | $41;
 L22: do {
  if ($43) {
   $44 = ((($6)) + 496|0);
   $$0336503 = 0;$$0340502 = 0;$$0398499 = 0;$$1391501 = $$0390;$$3396500 = $$2395;$$3504 = $$2;$377 = $42;$378 = $40;$379 = $375;$380 = $376;$47 = 0;$48 = 0;
   L24: while(1) {
    do {
     if ($377) {
      $cond = ($$1391501|0)==(0);
      if ($cond) {
       $$2338 = $$0336503;$$2342 = $$0340502;$$2392 = 1;$$2400 = $$0398499;$$4397 = $$3396500;$381 = $47;$382 = $48;$383 = $47;$384 = $48;
      } else {
       break L24;
      }
     } else {
      $46 = ($$0340502|0)<(125);
      $49 = (_i64Add(($47|0),($48|0),1,0)|0);
      $50 = (getTempRet0() | 0);
      $51 = ($$3504|0)!=(48);
      if (!($46)) {
       if (!($51)) {
        $$2338 = $$0336503;$$2342 = $$0340502;$$2392 = $$1391501;$$2400 = $$0398499;$$4397 = $$3396500;$381 = $379;$382 = $380;$383 = $49;$384 = $50;
        break;
       }
       $61 = HEAP32[$44>>2]|0;
       $62 = $61 | 1;
       HEAP32[$44>>2] = $62;
       $$2338 = $$0336503;$$2342 = $$0340502;$$2392 = $$1391501;$$2400 = $$0398499;$$4397 = $$3396500;$381 = $379;$382 = $380;$383 = $49;$384 = $50;
       break;
      }
      $spec$select = $51 ? $49 : $$0398499;
      $52 = ($$0336503|0)==(0);
      $53 = (($6) + ($$0340502<<2)|0);
      if ($52) {
       $storemerge446 = $378;
      } else {
       $54 = HEAP32[$53>>2]|0;
       $55 = ($54*10)|0;
       $56 = (($$3504) + -48)|0;
       $57 = (($56) + ($55))|0;
       $storemerge446 = $57;
      }
      HEAP32[$53>>2] = $storemerge446;
      $58 = (($$0336503) + 1)|0;
      $59 = ($58|0)==(9);
      $60 = $59&1;
      $spec$select410 = (($$0340502) + ($60))|0;
      $spec$select411 = $59 ? 0 : $58;
      $$2338 = $spec$select411;$$2342 = $spec$select410;$$2392 = $$1391501;$$2400 = $spec$select;$$4397 = 1;$381 = $379;$382 = $380;$383 = $49;$384 = $50;
     }
    } while(0);
    $63 = HEAP32[$9>>2]|0;
    $64 = HEAP32[$10>>2]|0;
    $65 = ($63>>>0)<($64>>>0);
    if ($65) {
     $66 = ((($63)) + 1|0);
     HEAP32[$9>>2] = $66;
     $67 = HEAP8[$63>>0]|0;
     $68 = $67&255;
     $71 = $68;
    } else {
     $69 = (___shgetc($0)|0);
     $71 = $69;
    }
    $70 = (($71) + -48)|0;
    $72 = ($70>>>0)<(10);
    $73 = ($71|0)==(46);
    $74 = $73 | $72;
    if ($74) {
     $$0336503 = $$2338;$$0340502 = $$2342;$$0398499 = $$2400;$$1391501 = $$2392;$$3396500 = $$4397;$$3504 = $71;$377 = $73;$378 = $70;$379 = $381;$380 = $382;$47 = $383;$48 = $384;
    } else {
     $$0336$lcssa = $$2338;$$0340$lcssa = $$2342;$$0398$lcssa = $$2400;$$1391$lcssa = $$2392;$$3$lcssa = $71;$$3396$lcssa = $$4397;$77 = $383;$78 = $381;$80 = $384;$81 = $382;
     label = 31;
     break L22;
    }
   }
   $45 = ($$3396500|0)!=(0);
   $$0336455 = $$0336503;$$0340459 = $$0340502;$$0398465 = $$0398499;$385 = $47;$386 = $48;$387 = $379;$388 = $380;$389 = $45;
   label = 39;
  } else {
   $$0336$lcssa = 0;$$0340$lcssa = 0;$$0398$lcssa = 0;$$1391$lcssa = $$0390;$$3$lcssa = $$2;$$3396$lcssa = $$2395;$77 = 0;$78 = $375;$80 = 0;$81 = $376;
   label = 31;
  }
 } while(0);
 do {
  if ((label|0) == 31) {
   $75 = ($$1391$lcssa|0)==(0);
   $76 = $75 ? $77 : $78;
   $79 = $75 ? $80 : $81;
   $82 = ($$3396$lcssa|0)!=(0);
   $83 = $$3$lcssa | 32;
   $84 = ($83|0)==(101);
   $or$cond414 = $82 & $84;
   if (!($or$cond414)) {
    $99 = ($$3$lcssa|0)>(-1);
    if ($99) {
     $$0336455 = $$0336$lcssa;$$0340459 = $$0340$lcssa;$$0398465 = $$0398$lcssa;$385 = $77;$386 = $80;$387 = $76;$388 = $79;$389 = $82;
     label = 39;
     break;
    } else {
     $$0336454 = $$0336$lcssa;$$0340458 = $$0340$lcssa;$$0398464 = $$0398$lcssa;$390 = $77;$391 = $80;$392 = $82;$393 = $76;$394 = $79;
     label = 41;
     break;
    }
   }
   $85 = (_scanexp($0,$5)|0);
   $86 = (getTempRet0() | 0);
   $87 = ($85|0)==(0);
   $88 = ($86|0)==(-2147483648);
   $89 = $87 & $88;
   if ($89) {
    $90 = ($5|0)==(0);
    if ($90) {
     ___shlim($0,0);
     $$1 = 0.0;
     break;
    }
    $91 = HEAP32[$10>>2]|0;
    $92 = ($91|0)==(0|0);
    if ($92) {
     $95 = 0;$96 = 0;
    } else {
     $93 = HEAP32[$9>>2]|0;
     $94 = ((($93)) + -1|0);
     HEAP32[$9>>2] = $94;
     $95 = 0;$96 = 0;
    }
   } else {
    $95 = $85;$96 = $86;
   }
   $97 = (_i64Add(($95|0),($96|0),($76|0),($79|0))|0);
   $98 = (getTempRet0() | 0);
   $$0336453 = $$0336$lcssa;$$0340457 = $$0340$lcssa;$$0398463 = $$0398$lcssa;$110 = $97;$111 = $77;$113 = $98;$114 = $80;
   label = 43;
  }
 } while(0);
 if ((label|0) == 39) {
  $100 = HEAP32[$10>>2]|0;
  $101 = ($100|0)==(0|0);
  if ($101) {
   $$0336454 = $$0336455;$$0340458 = $$0340459;$$0398464 = $$0398465;$390 = $385;$391 = $386;$392 = $389;$393 = $387;$394 = $388;
   label = 41;
  } else {
   $102 = HEAP32[$9>>2]|0;
   $103 = ((($102)) + -1|0);
   HEAP32[$9>>2] = $103;
   if ($389) {
    $$0336453 = $$0336455;$$0340457 = $$0340459;$$0398463 = $$0398465;$110 = $387;$111 = $385;$113 = $388;$114 = $386;
    label = 43;
   } else {
    label = 42;
   }
  }
 }
 if ((label|0) == 41) {
  if ($392) {
   $$0336453 = $$0336454;$$0340457 = $$0340458;$$0398463 = $$0398464;$110 = $393;$111 = $390;$113 = $394;$114 = $391;
   label = 43;
  } else {
   label = 42;
  }
 }
 do {
  if ((label|0) == 42) {
   $104 = (___errno_location()|0);
   HEAP32[$104>>2] = 22;
   ___shlim($0,0);
   $$1 = 0.0;
  }
  else if ((label|0) == 43) {
   $105 = HEAP32[$6>>2]|0;
   $106 = ($105|0)==(0);
   if ($106) {
    $107 = (+($4|0));
    $108 = $107 * 0.0;
    $$1 = $108;
    break;
   }
   $109 = ($110|0)==($111|0);
   $112 = ($113|0)==($114|0);
   $115 = $109 & $112;
   $116 = ($114|0)<(0);
   $117 = ($111>>>0)<(10);
   $118 = ($114|0)==(0);
   $119 = $118 & $117;
   $120 = $116 | $119;
   $or$cond = $120 & $115;
   if ($or$cond) {
    $121 = ($2|0)>(30);
    $122 = $105 >>> $2;
    $123 = ($122|0)==(0);
    $or$cond416 = $121 | $123;
    if ($or$cond416) {
     $124 = (+($4|0));
     $125 = (+($105>>>0));
     $126 = $124 * $125;
     $$1 = $126;
     break;
    }
   }
   $127 = (($3|0) / -2)&-1;
   $128 = ($127|0)<(0);
   $129 = $128 << 31 >> 31;
   $130 = ($113|0)>($129|0);
   $131 = ($110>>>0)>($127>>>0);
   $132 = ($113|0)==($129|0);
   $133 = $132 & $131;
   $134 = $130 | $133;
   if ($134) {
    $135 = (___errno_location()|0);
    HEAP32[$135>>2] = 34;
    $136 = (+($4|0));
    $137 = $136 * 1.7976931348623157E+308;
    $138 = $137 * 1.7976931348623157E+308;
    $$1 = $138;
    break;
   }
   $139 = (($3) + -106)|0;
   $140 = ($139|0)<(0);
   $141 = $140 << 31 >> 31;
   $142 = ($113|0)<($141|0);
   $143 = ($110>>>0)<($139>>>0);
   $144 = ($113|0)==($141|0);
   $145 = $144 & $143;
   $146 = $142 | $145;
   if ($146) {
    $147 = (___errno_location()|0);
    HEAP32[$147>>2] = 34;
    $148 = (+($4|0));
    $149 = $148 * 2.2250738585072014E-308;
    $150 = $149 * 2.2250738585072014E-308;
    $$1 = $150;
    break;
   }
   $151 = ($$0336453|0)==(0);
   if ($151) {
    $$3343 = $$0340457;
   } else {
    $152 = ($$0336453|0)<(9);
    if ($152) {
     $153 = (($6) + ($$0340457<<2)|0);
     $$promoted = HEAP32[$153>>2]|0;
     $$3339493 = $$0336453;$155 = $$promoted;
     while(1) {
      $154 = ($155*10)|0;
      $156 = (($$3339493) + 1)|0;
      $157 = ($$3339493|0)<(8);
      if ($157) {
       $$3339493 = $156;$155 = $154;
      } else {
       break;
      }
     }
     HEAP32[$153>>2] = $154;
    }
    $158 = (($$0340457) + 1)|0;
    $$3343 = $158;
   }
   $159 = ($$0398463|0)<(9);
   if ($159) {
    $160 = ($$0398463|0)<=($110|0);
    $161 = ($110|0)<(18);
    $or$cond3 = $160 & $161;
    if ($or$cond3) {
     $162 = ($110|0)==(9);
     if ($162) {
      $163 = (+($4|0));
      $164 = HEAP32[$6>>2]|0;
      $165 = (+($164>>>0));
      $166 = $163 * $165;
      $$1 = $166;
      break;
     }
     $167 = ($110|0)<(9);
     if ($167) {
      $168 = (+($4|0));
      $169 = HEAP32[$6>>2]|0;
      $170 = (+($169>>>0));
      $171 = $168 * $170;
      $172 = (8 - ($110))|0;
      $173 = (20800 + ($172<<2)|0);
      $174 = HEAP32[$173>>2]|0;
      $175 = (+($174|0));
      $176 = $171 / $175;
      $$1 = $176;
      break;
     }
     $$neg447 = Math_imul($110, -3)|0;
     $$neg448 = (($2) + 27)|0;
     $177 = (($$neg448) + ($$neg447))|0;
     $178 = ($177|0)>(30);
     $$pre = HEAP32[$6>>2]|0;
     $179 = $$pre >>> $177;
     $180 = ($179|0)==(0);
     $or$cond559 = $178 | $180;
     if ($or$cond559) {
      $181 = (+($4|0));
      $182 = (+($$pre>>>0));
      $183 = $181 * $182;
      $184 = (($110) + -10)|0;
      $185 = (20800 + ($184<<2)|0);
      $186 = HEAP32[$185>>2]|0;
      $187 = (+($186|0));
      $188 = $183 * $187;
      $$1 = $188;
      break;
     }
    }
   }
   $189 = (($110|0) % 9)&-1;
   $190 = ($189|0)==(0);
   if ($190) {
    $$2369$ph = $$3343;$$3348$ph = 0;$$3384$ph = $110;
   } else {
    $191 = ($110|0)>(-1);
    $192 = (($189) + 9)|0;
    $193 = $191 ? $189 : $192;
    $194 = (8 - ($193))|0;
    $195 = (20800 + ($194<<2)|0);
    $196 = HEAP32[$195>>2]|0;
    $197 = ($$3343|0)==(0);
    if ($197) {
     $$0345$lcssa540 = 0;$$0367 = 0;$$0381$lcssa539 = $110;
    } else {
     $198 = (1000000000 / ($196|0))&-1;
     $$0335486 = 0;$$0345484 = 0;$$0381483 = $110;$$4344485 = 0;
     while(1) {
      $199 = (($6) + ($$4344485<<2)|0);
      $200 = HEAP32[$199>>2]|0;
      $201 = (($200>>>0) / ($196>>>0))&-1;
      $202 = Math_imul($201, $196)|0;
      $203 = (($200) - ($202))|0;
      $204 = (($201) + ($$0335486))|0;
      HEAP32[$199>>2] = $204;
      $205 = Math_imul($198, $203)|0;
      $206 = ($$4344485|0)==($$0345484|0);
      $207 = ($204|0)==(0);
      $or$cond417 = $206 & $207;
      $208 = (($$0345484) + 1)|0;
      $209 = $208 & 127;
      $210 = (($$0381483) + -9)|0;
      $spec$select439 = $or$cond417 ? $210 : $$0381483;
      $spec$select440 = $or$cond417 ? $209 : $$0345484;
      $211 = (($$4344485) + 1)|0;
      $212 = ($211|0)==($$3343|0);
      if ($212) {
       break;
      } else {
       $$0335486 = $205;$$0345484 = $spec$select440;$$0381483 = $spec$select439;$$4344485 = $211;
      }
     }
     $213 = ($205|0)==(0);
     if ($213) {
      $$0345$lcssa540 = $spec$select440;$$0367 = $$3343;$$0381$lcssa539 = $spec$select439;
     } else {
      $214 = (($6) + ($$3343<<2)|0);
      $215 = (($$3343) + 1)|0;
      HEAP32[$214>>2] = $205;
      $$0345$lcssa540 = $spec$select440;$$0367 = $215;$$0381$lcssa539 = $spec$select439;
     }
    }
    $216 = (9 - ($193))|0;
    $217 = (($216) + ($$0381$lcssa539))|0;
    $$2369$ph = $$0367;$$3348$ph = $$0345$lcssa540;$$3384$ph = $217;
   }
   $$0376$ph = 0;$$2369$ph579 = $$2369$ph;$$3348$ph580 = $$3348$ph;$$3384$ph578 = $$3384$ph;
   L104: while(1) {
    $218 = ($$3384$ph578|0)<(18);
    $219 = ($$3384$ph578|0)==(18);
    $220 = (($6) + ($$3348$ph580<<2)|0);
    $$0376 = $$0376$ph;$$2369 = $$2369$ph579;
    while(1) {
     if (!($218)) {
      if (!($219)) {
       $$5386$ph = $$3384$ph578;
       break L104;
      }
      $221 = HEAP32[$220>>2]|0;
      $222 = ($221>>>0)<(9007199);
      if (!($222)) {
       $$5386$ph = 18;
       break L104;
      }
     }
     $223 = (($$2369) + 127)|0;
     $$0329 = 0;$$3370 = $$2369;$$5$in = $223;
     while(1) {
      $$5 = $$5$in & 127;
      $224 = (($6) + ($$5<<2)|0);
      $225 = HEAP32[$224>>2]|0;
      $226 = (_bitshift64Shl(($225|0),0,29)|0);
      $227 = (getTempRet0() | 0);
      $228 = (_i64Add(($226|0),($227|0),($$0329|0),0)|0);
      $229 = (getTempRet0() | 0);
      $230 = ($229>>>0)>(0);
      $231 = ($228>>>0)>(1000000000);
      $232 = ($229|0)==(0);
      $233 = $232 & $231;
      $234 = $230 | $233;
      if ($234) {
       $235 = (___udivdi3(($228|0),($229|0),1000000000,0)|0);
       $236 = (getTempRet0() | 0);
       $237 = (___muldi3(($235|0),($236|0),1000000000,0)|0);
       $238 = (getTempRet0() | 0);
       $239 = (_i64Subtract(($228|0),($229|0),($237|0),($238|0))|0);
       $240 = (getTempRet0() | 0);
       $$1330 = $235;$$sink$off0 = $239;
      } else {
       $$1330 = 0;$$sink$off0 = $228;
      }
      HEAP32[$224>>2] = $$sink$off0;
      $241 = (($$3370) + 127)|0;
      $242 = $241 & 127;
      $243 = ($$5|0)!=($242|0);
      $244 = ($$5|0)==($$3348$ph580|0);
      $or$cond418 = $243 | $244;
      $245 = ($$sink$off0|0)==(0);
      $spec$select419 = $245 ? $$5 : $$3370;
      $spec$select441 = $or$cond418 ? $$3370 : $spec$select419;
      $246 = (($$5) + -1)|0;
      if ($244) {
       break;
      } else {
       $$0329 = $$1330;$$3370 = $spec$select441;$$5$in = $246;
      }
     }
     $247 = (($$0376) + -29)|0;
     $248 = ($$1330|0)==(0);
     if ($248) {
      $$0376 = $247;$$2369 = $$3370;
     } else {
      break;
     }
    }
    $249 = (($$3384$ph578) + 9)|0;
    $250 = (($$3348$ph580) + 127)|0;
    $251 = $250 & 127;
    $252 = ($251|0)==($spec$select441|0);
    $253 = (($spec$select441) + 127)|0;
    $254 = $253 & 127;
    $255 = (($spec$select441) + 126)|0;
    $256 = $255 & 127;
    $257 = (($6) + ($256<<2)|0);
    if ($252) {
     $258 = (($6) + ($254<<2)|0);
     $259 = HEAP32[$258>>2]|0;
     $260 = HEAP32[$257>>2]|0;
     $261 = $260 | $259;
     HEAP32[$257>>2] = $261;
     $$5372 = $254;
    } else {
     $$5372 = $$3370;
    }
    $262 = (($6) + ($251<<2)|0);
    HEAP32[$262>>2] = $$1330;
    $$0376$ph = $247;$$2369$ph579 = $$5372;$$3348$ph580 = $251;$$3384$ph578 = $249;
   }
   $$1377$ph$ph = $$0376;$$5350$ph$ph = $$3348$ph580;$$5386$ph576$ph = $$5386$ph;$$7374$ph$ph = $$2369;
   L123: while(1) {
    $299 = (($$7374$ph$ph) + 1)|0;
    $297 = $299 & 127;
    $300 = (($$7374$ph$ph) + 127)|0;
    $301 = $300 & 127;
    $302 = (($6) + ($301<<2)|0);
    $$1377$ph = $$1377$ph$ph;$$5350$ph = $$5350$ph$ph;$$5386$ph576 = $$5386$ph576$ph;
    while(1) {
     $294 = ($$5386$ph576|0)==(18);
     $295 = ($$5386$ph576|0)>(27);
     $spec$select420 = $295 ? 9 : 1;
     $$1377 = $$1377$ph;$$5350 = $$5350$ph;
     while(1) {
      $$0331476 = 0;
      while(1) {
       $263 = (($$0331476) + ($$5350))|0;
       $264 = $263 & 127;
       $265 = ($264|0)==($$7374$ph$ph|0);
       if ($265) {
        label = 92;
        break;
       }
       $266 = (($6) + ($264<<2)|0);
       $267 = HEAP32[$266>>2]|0;
       $268 = (27324 + ($$0331476<<2)|0);
       $269 = HEAP32[$268>>2]|0;
       $270 = ($267>>>0)<($269>>>0);
       if ($270) {
        label = 92;
        break;
       }
       $271 = ($267>>>0)>($269>>>0);
       if ($271) {
        break;
       }
       $272 = (($$0331476) + 1)|0;
       $273 = ($272>>>0)<(2);
       if ($273) {
        $$0331476 = 1;
       } else {
        label = 92;
        break;
       }
      }
      if ((label|0) == 92) {
       label = 0;
       if ($294) {
        break L123;
       }
      }
      $274 = (($spec$select420) + ($$1377))|0;
      $275 = ($$5350|0)==($$7374$ph$ph|0);
      if ($275) {
       $$1377 = $274;$$5350 = $$7374$ph$ph;
      } else {
       break;
      }
     }
     $276 = 1 << $spec$select420;
     $277 = (($276) + -1)|0;
     $278 = 1000000000 >>> $spec$select420;
     $$0327480 = 0;$$6351478 = $$5350;$$6387477 = $$5386$ph576;$$6479 = $$5350;
     while(1) {
      $279 = (($6) + ($$6479<<2)|0);
      $280 = HEAP32[$279>>2]|0;
      $281 = $280 & $277;
      $282 = $280 >>> $spec$select420;
      $283 = (($282) + ($$0327480))|0;
      HEAP32[$279>>2] = $283;
      $284 = Math_imul($281, $278)|0;
      $285 = ($$6479|0)==($$6351478|0);
      $286 = ($283|0)==(0);
      $or$cond421 = $285 & $286;
      $287 = (($$6351478) + 1)|0;
      $288 = $287 & 127;
      $289 = (($$6387477) + -9)|0;
      $spec$select442 = $or$cond421 ? $289 : $$6387477;
      $spec$select443 = $or$cond421 ? $288 : $$6351478;
      $290 = (($$6479) + 1)|0;
      $291 = $290 & 127;
      $292 = ($291|0)==($$7374$ph$ph|0);
      if ($292) {
       break;
      } else {
       $$0327480 = $284;$$6351478 = $spec$select443;$$6387477 = $spec$select442;$$6479 = $291;
      }
     }
     $293 = ($284|0)==(0);
     if (!($293)) {
      $296 = ($297|0)==($spec$select443|0);
      if (!($296)) {
       break;
      }
      $303 = HEAP32[$302>>2]|0;
      $304 = $303 | 1;
      HEAP32[$302>>2] = $304;
     }
     $$1377$ph = $274;$$5350$ph = $spec$select443;$$5386$ph576 = $spec$select442;
    }
    $298 = (($6) + ($$7374$ph$ph<<2)|0);
    HEAP32[$298>>2] = $284;
    $$1377$ph$ph = $274;$$5350$ph$ph = $spec$select443;$$5386$ph576$ph = $spec$select442;$$7374$ph$ph = $297;
   }
   $$0360474 = 0.0;$$10473 = $$7374$ph$ph;$$4475 = 0;
   while(1) {
    $305 = (($$4475) + ($$5350))|0;
    $306 = $305 & 127;
    $307 = ($306|0)==($$10473|0);
    $308 = (($$10473) + 1)|0;
    $309 = $308 & 127;
    if ($307) {
     $310 = (($309) + -1)|0;
     $311 = (($6) + ($310<<2)|0);
     HEAP32[$311>>2] = 0;
     $$11 = $309;
    } else {
     $$11 = $$10473;
    }
    $312 = $$0360474 * 1.0E+9;
    $313 = (($6) + ($306<<2)|0);
    $314 = HEAP32[$313>>2]|0;
    $315 = (+($314>>>0));
    $316 = $312 + $315;
    $317 = (($$4475) + 1)|0;
    $exitcond = ($317|0)==(2);
    if ($exitcond) {
     break;
    } else {
     $$0360474 = $316;$$10473 = $$11;$$4475 = $317;
    }
   }
   $318 = (+($4|0));
   $319 = $316 * $318;
   $320 = (($$1377) + 53)|0;
   $321 = (($320) - ($3))|0;
   $322 = ($321|0)<($2|0);
   $323 = ($321|0)>(0);
   $spec$store$select = $323 ? $321 : 0;
   $$0328 = $322 ? $spec$store$select : $2;
   $324 = ($$0328|0)<(53);
   if ($324) {
    $325 = (105 - ($$0328))|0;
    $326 = (+_scalbn(1.0,$325));
    $327 = (+_copysignl($326,$319));
    $328 = (53 - ($$0328))|0;
    $329 = (+_scalbn(1.0,$328));
    $330 = (+_fmodl($319,$329));
    $331 = $319 - $330;
    $332 = $327 + $331;
    $$0355 = $327;$$0356 = $330;$$1361 = $332;
   } else {
    $$0355 = 0.0;$$0356 = 0.0;$$1361 = $319;
   }
   $333 = (($$5350) + 2)|0;
   $334 = $333 & 127;
   $335 = ($334|0)==($$11|0);
   if ($335) {
    $$3359 = $$0356;
   } else {
    $336 = (($6) + ($334<<2)|0);
    $337 = HEAP32[$336>>2]|0;
    $338 = ($337>>>0)<(500000000);
    do {
     if ($338) {
      $339 = ($337|0)==(0);
      if ($339) {
       $340 = (($$5350) + 3)|0;
       $341 = $340 & 127;
       $342 = ($341|0)==($$11|0);
       if ($342) {
        $$1357 = $$0356;
        break;
       }
      }
      $343 = $318 * 0.25;
      $344 = $343 + $$0356;
      $$1357 = $344;
     } else {
      $345 = ($337|0)==(500000000);
      if (!($345)) {
       $346 = $318 * 0.75;
       $347 = $346 + $$0356;
       $$1357 = $347;
       break;
      }
      $348 = (($$5350) + 3)|0;
      $349 = $348 & 127;
      $350 = ($349|0)==($$11|0);
      if ($350) {
       $351 = $318 * 0.5;
       $352 = $351 + $$0356;
       $$1357 = $352;
       break;
      } else {
       $353 = $318 * 0.75;
       $354 = $353 + $$0356;
       $$1357 = $354;
       break;
      }
     }
    } while(0);
    $355 = (53 - ($$0328))|0;
    $356 = ($355|0)>(1);
    if ($356) {
     $357 = (+_fmodl($$1357,1.0));
     $358 = $357 != 0.0;
     if ($358) {
      $$3359 = $$1357;
     } else {
      $359 = $$1357 + 1.0;
      $$3359 = $359;
     }
    } else {
     $$3359 = $$1357;
    }
   }
   $360 = $$1361 + $$3359;
   $361 = $360 - $$0355;
   $362 = $320 & 2147483647;
   $363 = (-2 - ($7))|0;
   $364 = ($362|0)>($363|0);
   do {
    if ($364) {
     $365 = (+Math_abs((+$361)));
     $366 = !($365 >= 9007199254740992.0);
     $367 = $361 * 0.5;
     $not$ = $366 ^ 1;
     $368 = $not$&1;
     $$3379 = (($$1377) + ($368))|0;
     $$2362 = $366 ? $361 : $367;
     $369 = (($$3379) + 50)|0;
     $370 = ($369|0)>($8|0);
     if (!($370)) {
      $371 = ($$0328|0)!=($321|0);
      $narrow = $371 | $366;
      $$2366$v = $322 & $narrow;
      $372 = $$3359 != 0.0;
      $or$cond9 = $372 & $$2366$v;
      if (!($or$cond9)) {
       $$3363 = $$2362;$$4380 = $$3379;
       break;
      }
     }
     $373 = (___errno_location()|0);
     HEAP32[$373>>2] = 34;
     $$3363 = $$2362;$$4380 = $$3379;
    } else {
     $$3363 = $361;$$4380 = $$1377;
    }
   } while(0);
   $374 = (+_scalbnl($$3363,$$4380));
   $$1 = $374;
  }
 } while(0);
 STACKTOP = sp;return (+$$1);
}
function _scanexp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$04858 = 0, $$049 = 0, $$157 = 0, $$251 = 0, $$pr = 0, $$pre = 0, $$pre$phi69Z2D = 0, $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 100|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3>>>0)<($5>>>0);
 if ($6) {
  $7 = ((($3)) + 1|0);
  HEAP32[$2>>2] = $7;
  $8 = HEAP8[$3>>0]|0;
  $9 = $8&255;
  $11 = $9;
 } else {
  $10 = (___shgetc($0)|0);
  $11 = $10;
 }
 switch ($11|0) {
 case 43: case 45:  {
  $12 = ($11|0)==(45);
  $13 = $12&1;
  $14 = HEAP32[$2>>2]|0;
  $15 = HEAP32[$4>>2]|0;
  $16 = ($14>>>0)<($15>>>0);
  if ($16) {
   $17 = ((($14)) + 1|0);
   HEAP32[$2>>2] = $17;
   $18 = HEAP8[$14>>0]|0;
   $19 = $18&255;
   $22 = $19;
  } else {
   $20 = (___shgetc($0)|0);
   $22 = $20;
  }
  $21 = (($22) + -48)|0;
  $23 = ($21>>>0)>(9);
  $24 = ($1|0)!=(0);
  $or$cond3 = $24 & $23;
  if ($or$cond3) {
   $25 = HEAP32[$4>>2]|0;
   $26 = ($25|0)==(0|0);
   if ($26) {
    $100 = 0;$99 = -2147483648;
   } else {
    $27 = HEAP32[$2>>2]|0;
    $28 = ((($27)) + -1|0);
    HEAP32[$2>>2] = $28;
    label = 14;
   }
  } else {
   $$0 = $13;$$049 = $22;$$pre$phi69Z2D = $21;
   label = 12;
  }
  break;
 }
 default: {
  $$pre = (($11) + -48)|0;
  $$0 = 0;$$049 = $11;$$pre$phi69Z2D = $$pre;
  label = 12;
 }
 }
 if ((label|0) == 12) {
  $29 = ($$pre$phi69Z2D>>>0)>(9);
  if ($29) {
   label = 14;
  } else {
   $$04858 = 0;$$157 = $$049;
   while(1) {
    $33 = ($$04858*10)|0;
    $34 = (($$157) + -48)|0;
    $35 = (($34) + ($33))|0;
    $36 = HEAP32[$2>>2]|0;
    $37 = HEAP32[$4>>2]|0;
    $38 = ($36>>>0)<($37>>>0);
    if ($38) {
     $39 = ((($36)) + 1|0);
     HEAP32[$2>>2] = $39;
     $40 = HEAP8[$36>>0]|0;
     $41 = $40&255;
     $44 = $41;
    } else {
     $42 = (___shgetc($0)|0);
     $44 = $42;
    }
    $43 = (($44) + -48)|0;
    $45 = ($43>>>0)<(10);
    $46 = ($35|0)<(214748364);
    $47 = $45 & $46;
    if ($47) {
     $$04858 = $35;$$157 = $44;
    } else {
     break;
    }
   }
   $48 = ($35|0)<(0);
   $49 = $48 << 31 >> 31;
   $50 = ($43>>>0)<(10);
   if ($50) {
    $$251 = $44;$51 = $35;$52 = $49;
    while(1) {
     $53 = (___muldi3(($51|0),($52|0),10,0)|0);
     $54 = (getTempRet0() | 0);
     $55 = ($$251|0)<(0);
     $56 = $55 << 31 >> 31;
     $57 = (_i64Add(($$251|0),($56|0),-48,-1)|0);
     $58 = (getTempRet0() | 0);
     $59 = (_i64Add(($57|0),($58|0),($53|0),($54|0))|0);
     $60 = (getTempRet0() | 0);
     $61 = HEAP32[$2>>2]|0;
     $62 = HEAP32[$4>>2]|0;
     $63 = ($61>>>0)<($62>>>0);
     if ($63) {
      $64 = ((($61)) + 1|0);
      HEAP32[$2>>2] = $64;
      $65 = HEAP8[$61>>0]|0;
      $66 = $65&255;
      $69 = $66;
     } else {
      $67 = (___shgetc($0)|0);
      $69 = $67;
     }
     $68 = (($69) + -48)|0;
     $70 = ($68>>>0)<(10);
     $71 = ($60|0)<(21474836);
     $72 = ($59>>>0)<(2061584302);
     $73 = ($60|0)==(21474836);
     $74 = $73 & $72;
     $75 = $71 | $74;
     $76 = $70 & $75;
     if ($76) {
      $$251 = $69;$51 = $59;$52 = $60;
     } else {
      break;
     }
    }
    $77 = ($68>>>0)<(10);
    if ($77) {
     while(1) {
      $78 = HEAP32[$2>>2]|0;
      $79 = HEAP32[$4>>2]|0;
      $80 = ($78>>>0)<($79>>>0);
      if ($80) {
       $81 = ((($78)) + 1|0);
       HEAP32[$2>>2] = $81;
       $82 = HEAP8[$78>>0]|0;
       $83 = $82&255;
       $86 = $83;
      } else {
       $84 = (___shgetc($0)|0);
       $86 = $84;
      }
      $85 = (($86) + -48)|0;
      $87 = ($85>>>0)<(10);
      if (!($87)) {
       $93 = $59;$94 = $60;
       break;
      }
     }
    } else {
     $93 = $59;$94 = $60;
    }
   } else {
    $93 = $35;$94 = $49;
   }
   $88 = HEAP32[$4>>2]|0;
   $89 = ($88|0)==(0|0);
   if (!($89)) {
    $90 = HEAP32[$2>>2]|0;
    $91 = ((($90)) + -1|0);
    HEAP32[$2>>2] = $91;
   }
   $92 = ($$0|0)==(0);
   $95 = (_i64Subtract(0,0,($93|0),($94|0))|0);
   $96 = (getTempRet0() | 0);
   $97 = $92 ? $93 : $95;
   $98 = $92 ? $94 : $96;
   $100 = $97;$99 = $98;
  }
 }
 if ((label|0) == 14) {
  $$pr = HEAP32[$4>>2]|0;
  $30 = ($$pr|0)==(0|0);
  if ($30) {
   $100 = 0;$99 = -2147483648;
  } else {
   $31 = HEAP32[$2>>2]|0;
   $32 = ((($31)) + -1|0);
   HEAP32[$2>>2] = $32;
   $100 = 0;$99 = -2147483648;
  }
 }
 setTempRet0(($99) | 0);
 return ($100|0);
}
function _scalbn($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $$0 = 0.0, $$020 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0;
 var $9 = 0, $spec$select = 0, $spec$select21 = 0.0, $spec$select22 = 0, $spec$select23 = 0.0, $spec$store$select = 0, $spec$store$select1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)>(1023);
 if ($2) {
  $3 = $0 * 8.9884656743115795E+307;
  $4 = (($1) + -1023)|0;
  $5 = ($1|0)>(2046);
  $6 = $3 * 8.9884656743115795E+307;
  $7 = (($1) + -2046)|0;
  $8 = ($7|0)<(1023);
  $spec$store$select = $8 ? $7 : 1023;
  $spec$select = $5 ? $spec$store$select : $4;
  $spec$select21 = $5 ? $6 : $3;
  $$0 = $spec$select21;$$020 = $spec$select;
 } else {
  $9 = ($1|0)<(-1022);
  if ($9) {
   $10 = $0 * 2.2250738585072014E-308;
   $11 = (($1) + 1022)|0;
   $12 = ($1|0)<(-2044);
   $13 = $10 * 2.2250738585072014E-308;
   $14 = (($1) + 2044)|0;
   $15 = ($14|0)>(-1022);
   $spec$store$select1 = $15 ? $14 : -1022;
   $spec$select22 = $12 ? $spec$store$select1 : $11;
   $spec$select23 = $12 ? $13 : $10;
   $$0 = $spec$select23;$$020 = $spec$select22;
  } else {
   $$0 = $0;$$020 = $1;
  }
 }
 $16 = (($$020) + 1023)|0;
 $17 = (_bitshift64Shl(($16|0),0,52)|0);
 $18 = (getTempRet0() | 0);
 HEAP32[tempDoublePtr>>2] = $17;HEAP32[tempDoublePtr+4>>2] = $18;$19 = +HEAPF64[tempDoublePtr>>3];
 $20 = $$0 * $19;
 return (+$20);
}
function _copysignl($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_copysign($0,$1));
 return (+$2);
}
function _fmodl($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_fmod($0,$1));
 return (+$2);
}
function _scalbnl($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_scalbn($0,$1));
 return (+$2);
}
function _fmod($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $$070 = 0.0, $$071$lcssa = 0, $$07194 = 0, $$073$lcssa = 0, $$073100 = 0, $$172 = 0, $$174 = 0, $$275$lcssa = 0, $$27585 = 0, $$376$lcssa = 0, $$37682 = 0, $$lcssa = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0.0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $spec$select = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $1;$4 = HEAP32[tempDoublePtr>>2]|0;
 $5 = HEAP32[tempDoublePtr+4>>2]|0;
 $6 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $7 = (getTempRet0() | 0);
 $8 = $6 & 2047;
 $9 = (_bitshift64Lshr(($4|0),($5|0),52)|0);
 $10 = (getTempRet0() | 0);
 $11 = $9 & 2047;
 $12 = $3 & -2147483648;
 $13 = (_bitshift64Shl(($4|0),($5|0),1)|0);
 $14 = (getTempRet0() | 0);
 $15 = ($13|0)==(0);
 $16 = ($14|0)==(0);
 $17 = $15 & $16;
 L1: do {
  if ($17) {
   label = 3;
  } else {
   $18 = (___DOUBLE_BITS_273($1)|0);
   $19 = (getTempRet0() | 0);
   $20 = $19 & 2147483647;
   $21 = ($20>>>0)>(2146435072);
   $22 = ($18>>>0)>(0);
   $23 = ($20|0)==(2146435072);
   $24 = $23 & $22;
   $25 = $21 | $24;
   $26 = ($8|0)==(2047);
   $or$cond = $26 | $25;
   if ($or$cond) {
    label = 3;
   } else {
    $29 = (_bitshift64Shl(($2|0),($3|0),1)|0);
    $30 = (getTempRet0() | 0);
    $31 = ($30>>>0)>($14>>>0);
    $32 = ($29>>>0)>($13>>>0);
    $33 = ($30|0)==($14|0);
    $34 = $33 & $32;
    $35 = $31 | $34;
    if (!($35)) {
     $36 = ($29|0)==($13|0);
     $37 = ($30|0)==($14|0);
     $38 = $36 & $37;
     $39 = $0 * 0.0;
     $spec$select = $38 ? $39 : $0;
     return (+$spec$select);
    }
    $40 = ($8|0)==(0);
    if ($40) {
     $41 = (_bitshift64Shl(($2|0),($3|0),12)|0);
     $42 = (getTempRet0() | 0);
     $43 = ($42|0)>(-1);
     $44 = ($41>>>0)>(4294967295);
     $45 = ($42|0)==(-1);
     $46 = $45 & $44;
     $47 = $43 | $46;
     if ($47) {
      $$073100 = 0;$49 = $41;$50 = $42;
      while(1) {
       $48 = (($$073100) + -1)|0;
       $51 = (_bitshift64Shl(($49|0),($50|0),1)|0);
       $52 = (getTempRet0() | 0);
       $53 = ($52|0)>(-1);
       $54 = ($51>>>0)>(4294967295);
       $55 = ($52|0)==(-1);
       $56 = $55 & $54;
       $57 = $53 | $56;
       if ($57) {
        $$073100 = $48;$49 = $51;$50 = $52;
       } else {
        $$073$lcssa = $48;
        break;
       }
      }
     } else {
      $$073$lcssa = 0;
     }
     $58 = (1 - ($$073$lcssa))|0;
     $59 = (_bitshift64Shl(($2|0),($3|0),($58|0))|0);
     $60 = (getTempRet0() | 0);
     $$174 = $$073$lcssa;$87 = $59;$88 = $60;
    } else {
     $61 = $3 & 1048575;
     $62 = $61 | 1048576;
     $$174 = $8;$87 = $2;$88 = $62;
    }
    $63 = ($11|0)==(0);
    if ($63) {
     $64 = (_bitshift64Shl(($4|0),($5|0),12)|0);
     $65 = (getTempRet0() | 0);
     $66 = ($65|0)>(-1);
     $67 = ($64>>>0)>(4294967295);
     $68 = ($65|0)==(-1);
     $69 = $68 & $67;
     $70 = $66 | $69;
     if ($70) {
      $$07194 = 0;$72 = $64;$73 = $65;
      while(1) {
       $71 = (($$07194) + -1)|0;
       $74 = (_bitshift64Shl(($72|0),($73|0),1)|0);
       $75 = (getTempRet0() | 0);
       $76 = ($75|0)>(-1);
       $77 = ($74>>>0)>(4294967295);
       $78 = ($75|0)==(-1);
       $79 = $78 & $77;
       $80 = $76 | $79;
       if ($80) {
        $$07194 = $71;$72 = $74;$73 = $75;
       } else {
        $$071$lcssa = $71;
        break;
       }
      }
     } else {
      $$071$lcssa = 0;
     }
     $81 = (1 - ($$071$lcssa))|0;
     $82 = (_bitshift64Shl(($4|0),($5|0),($81|0))|0);
     $83 = (getTempRet0() | 0);
     $$172 = $$071$lcssa;$89 = $82;$90 = $83;
    } else {
     $84 = $5 & 1048575;
     $85 = $84 | 1048576;
     $$172 = $11;$89 = $4;$90 = $85;
    }
    $86 = ($$174|0)>($$172|0);
    $91 = (_i64Subtract(($87|0),($88|0),($89|0),($90|0))|0);
    $92 = (getTempRet0() | 0);
    $93 = ($92|0)>(-1);
    $94 = ($91>>>0)>(4294967295);
    $95 = ($92|0)==(-1);
    $96 = $95 & $94;
    $97 = $93 | $96;
    L25: do {
     if ($86) {
      $$27585 = $$174;$101 = $92;$158 = $97;$159 = $87;$160 = $88;$99 = $91;
      while(1) {
       if ($158) {
        $98 = ($99|0)==(0);
        $100 = ($101|0)==(0);
        $102 = $98 & $100;
        if ($102) {
         break;
        } else {
         $104 = $99;$105 = $101;
        }
       } else {
        $104 = $159;$105 = $160;
       }
       $106 = (_bitshift64Shl(($104|0),($105|0),1)|0);
       $107 = (getTempRet0() | 0);
       $108 = (($$27585) + -1)|0;
       $109 = ($108|0)>($$172|0);
       $110 = (_i64Subtract(($106|0),($107|0),($89|0),($90|0))|0);
       $111 = (getTempRet0() | 0);
       $112 = ($111|0)>(-1);
       $113 = ($110>>>0)>(4294967295);
       $114 = ($111|0)==(-1);
       $115 = $114 & $113;
       $116 = $112 | $115;
       if ($109) {
        $$27585 = $108;$101 = $111;$158 = $116;$159 = $106;$160 = $107;$99 = $110;
       } else {
        $$275$lcssa = $108;$$lcssa = $116;$118 = $110;$120 = $111;$156 = $106;$157 = $107;
        break L25;
       }
      }
      $103 = $0 * 0.0;
      $$070 = $103;
      break L1;
     } else {
      $$275$lcssa = $$174;$$lcssa = $97;$118 = $91;$120 = $92;$156 = $87;$157 = $88;
     }
    } while(0);
    if ($$lcssa) {
     $117 = ($118|0)==(0);
     $119 = ($120|0)==(0);
     $121 = $117 & $119;
     if ($121) {
      $122 = $0 * 0.0;
      $$070 = $122;
      break;
     } else {
      $124 = $120;$126 = $118;
     }
    } else {
     $124 = $157;$126 = $156;
    }
    $123 = ($124>>>0)<(1048576);
    $125 = ($126>>>0)<(0);
    $127 = ($124|0)==(1048576);
    $128 = $127 & $125;
    $129 = $123 | $128;
    if ($129) {
     $$37682 = $$275$lcssa;$130 = $126;$131 = $124;
     while(1) {
      $132 = (_bitshift64Shl(($130|0),($131|0),1)|0);
      $133 = (getTempRet0() | 0);
      $134 = (($$37682) + -1)|0;
      $135 = ($133>>>0)<(1048576);
      $136 = ($132>>>0)<(0);
      $137 = ($133|0)==(1048576);
      $138 = $137 & $136;
      $139 = $135 | $138;
      if ($139) {
       $$37682 = $134;$130 = $132;$131 = $133;
      } else {
       $$376$lcssa = $134;$141 = $132;$142 = $133;
       break;
      }
     }
    } else {
     $$376$lcssa = $$275$lcssa;$141 = $126;$142 = $124;
    }
    $140 = ($$376$lcssa|0)>(0);
    if ($140) {
     $143 = (_i64Add(($141|0),($142|0),0,-1048576)|0);
     $144 = (getTempRet0() | 0);
     $145 = (_bitshift64Shl(($$376$lcssa|0),0,52)|0);
     $146 = (getTempRet0() | 0);
     $147 = $143 | $145;
     $148 = $144 | $146;
     $153 = $148;$154 = $147;
    } else {
     $149 = (1 - ($$376$lcssa))|0;
     $150 = (_bitshift64Lshr(($141|0),($142|0),($149|0))|0);
     $151 = (getTempRet0() | 0);
     $153 = $151;$154 = $150;
    }
    $152 = $153 | $12;
    HEAP32[tempDoublePtr>>2] = $154;HEAP32[tempDoublePtr+4>>2] = $152;$155 = +HEAPF64[tempDoublePtr>>3];
    $$070 = $155;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $27 = $0 * $1;
  $28 = $27 / $27;
  $$070 = $28;
 }
 return (+$$070);
}
function ___DOUBLE_BITS_273($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$1 = HEAP32[tempDoublePtr>>2]|0;
 $2 = HEAP32[tempDoublePtr+4>>2]|0;
 setTempRet0(($2) | 0);
 return ($1|0);
}
function _catclose($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function _catgets($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($3|0);
}
function _catopen($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ((-1)|0);
}
function _strlen($0) {
 $0 = $0|0;
 var $$0 = 0, $$014 = 0, $$015$lcssa = 0, $$01518 = 0, $$1$lcssa = 0, $$pn = 0, $$pn29 = 0, $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0;
 $2 = $1 & 3;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $$015$lcssa = $0;
   label = 5;
  } else {
   $$01518 = $0;$22 = $1;
   while(1) {
    $4 = HEAP8[$$01518>>0]|0;
    $5 = ($4<<24>>24)==(0);
    if ($5) {
     $$pn = $22;
     break L1;
    }
    $6 = ((($$01518)) + 1|0);
    $7 = $6;
    $8 = $7 & 3;
    $9 = ($8|0)==(0);
    if ($9) {
     $$015$lcssa = $6;
     label = 5;
     break;
    } else {
     $$01518 = $6;$22 = $7;
    }
   }
  }
 } while(0);
 if ((label|0) == 5) {
  $$0 = $$015$lcssa;
  while(1) {
   $10 = HEAP32[$$0>>2]|0;
   $11 = (($10) + -16843009)|0;
   $12 = $10 & -2139062144;
   $13 = $12 ^ -2139062144;
   $14 = $13 & $11;
   $15 = ($14|0)==(0);
   $16 = ((($$0)) + 4|0);
   if ($15) {
    $$0 = $16;
   } else {
    break;
   }
  }
  $17 = $10&255;
  $18 = ($17<<24>>24)==(0);
  if ($18) {
   $$1$lcssa = $$0;
  } else {
   $$pn29 = $$0;
   while(1) {
    $19 = ((($$pn29)) + 1|0);
    $$pre = HEAP8[$19>>0]|0;
    $20 = ($$pre<<24>>24)==(0);
    if ($20) {
     $$1$lcssa = $19;
     break;
    } else {
     $$pn29 = $19;
    }
   }
  }
  $21 = $$1$lcssa;
  $$pn = $21;
 }
 $$014 = (($$pn) - ($1))|0;
 return ($$014|0);
}
function ___munmap($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $2 = $0;
 HEAP32[$vararg_buffer>>2] = $2;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $1;
 $3 = (___syscall91(91,($vararg_buffer|0))|0);
 $4 = (___syscall_ret($3)|0);
 STACKTOP = sp;return ($4|0);
}
function _strchr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (___strchrnul($0,$1)|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $1&255;
 $5 = ($3<<24>>24)==($4<<24>>24);
 $6 = $5 ? $2 : 0;
 return ($6|0);
}
function ___strchrnul($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$029$lcssa = 0, $$02936 = 0, $$030$lcssa = 0, $$03039 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond33 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1 & 255;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $4 = (_strlen($0)|0);
   $5 = (($0) + ($4)|0);
   $$0 = $5;
  } else {
   $6 = $0;
   $7 = $6 & 3;
   $8 = ($7|0)==(0);
   if ($8) {
    $$030$lcssa = $0;
   } else {
    $9 = $1&255;
    $$03039 = $0;
    while(1) {
     $10 = HEAP8[$$03039>>0]|0;
     $11 = ($10<<24>>24)==(0);
     $12 = ($10<<24>>24)==($9<<24>>24);
     $or$cond = $11 | $12;
     if ($or$cond) {
      $$0 = $$03039;
      break L1;
     }
     $13 = ((($$03039)) + 1|0);
     $14 = $13;
     $15 = $14 & 3;
     $16 = ($15|0)==(0);
     if ($16) {
      $$030$lcssa = $13;
      break;
     } else {
      $$03039 = $13;
     }
    }
   }
   $17 = Math_imul($2, 16843009)|0;
   $18 = HEAP32[$$030$lcssa>>2]|0;
   $19 = (($18) + -16843009)|0;
   $20 = $18 & -2139062144;
   $21 = $20 ^ -2139062144;
   $22 = $21 & $19;
   $23 = ($22|0)==(0);
   L10: do {
    if ($23) {
     $$02936 = $$030$lcssa;$25 = $18;
     while(1) {
      $24 = $25 ^ $17;
      $26 = (($24) + -16843009)|0;
      $27 = $24 & -2139062144;
      $28 = $27 ^ -2139062144;
      $29 = $28 & $26;
      $30 = ($29|0)==(0);
      if (!($30)) {
       $$029$lcssa = $$02936;
       break L10;
      }
      $31 = ((($$02936)) + 4|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = (($32) + -16843009)|0;
      $34 = $32 & -2139062144;
      $35 = $34 ^ -2139062144;
      $36 = $35 & $33;
      $37 = ($36|0)==(0);
      if ($37) {
       $$02936 = $31;$25 = $32;
      } else {
       $$029$lcssa = $31;
       break;
      }
     }
    } else {
     $$029$lcssa = $$030$lcssa;
    }
   } while(0);
   $38 = $1&255;
   $$1 = $$029$lcssa;
   while(1) {
    $39 = HEAP8[$$1>>0]|0;
    $40 = ($39<<24>>24)==(0);
    $41 = ($39<<24>>24)==($38<<24>>24);
    $or$cond33 = $40 | $41;
    $42 = ((($$1)) + 1|0);
    if ($or$cond33) {
     $$0 = $$1;
     break;
    } else {
     $$1 = $42;
    }
   }
  }
 } while(0);
 return ($$0|0);
}
function _dummy_405() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _freelocale($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___loc_is_allocated($0)|0);
 $2 = ($1|0)==(0);
 if (!($2)) {
  _free($0);
 }
 return;
}
function ___loc_is_allocated($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $narrow = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)!=(0|0);
 $2 = ($0|0)!=(49136|0);
 $or$cond = $1 & $2;
 $3 = ($0|0)!=(26532|0);
 $narrow = $3 & $or$cond;
 $4 = $narrow&1;
 return ($4|0);
}
function _mbrtowc($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$03952 = 0, $$03952$pn = 0, $$04051 = 0, $$04350 = 0, $$2 = 0, $$lcssa = 0, $$lcssa56 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, $spec$select47 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = ($3|0)==(0|0);
 $spec$select = $5 ? 49164 : $3;
 $6 = HEAP32[$spec$select>>2]|0;
 $7 = ($1|0)==(0|0);
 L1: do {
  if ($7) {
   $8 = ($6|0)==(0);
   if ($8) {
    $$0 = 0;
   } else {
    label = 19;
   }
  } else {
   $9 = ($0|0)==(0|0);
   $spec$select47 = $9 ? $4 : $0;
   $10 = ($2|0)==(0);
   if ($10) {
    $$0 = -2;
   } else {
    $11 = ($6|0)==(0);
    if ($11) {
     $12 = HEAP8[$1>>0]|0;
     $13 = ($12<<24>>24)>(-1);
     if ($13) {
      $14 = $12&255;
      HEAP32[$spec$select47>>2] = $14;
      $15 = ($12<<24>>24)!=(0);
      $16 = $15&1;
      $$0 = $16;
      break;
     }
     $17 = (___pthread_self_414()|0);
     $18 = ((($17)) + 188|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = HEAP32[$19>>2]|0;
     $21 = ($20|0)==(0|0);
     $22 = HEAP8[$1>>0]|0;
     if ($21) {
      $23 = $22 << 24 >> 24;
      $24 = $23 & 57343;
      HEAP32[$spec$select47>>2] = $24;
      $$0 = 1;
      break;
     }
     $25 = $22&255;
     $26 = (($25) + -194)|0;
     $27 = ($26>>>0)>(50);
     if ($27) {
      label = 19;
      break;
     }
     $28 = ((($1)) + 1|0);
     $29 = (14096 + ($26<<2)|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = (($2) + -1)|0;
     $32 = ($31|0)==(0);
     if ($32) {
      $$2 = $30;
     } else {
      $$03952 = $28;$$04051 = $30;$$04350 = $31;
      label = 11;
     }
    } else {
     $$03952 = $1;$$04051 = $6;$$04350 = $2;
     label = 11;
    }
    L14: do {
     if ((label|0) == 11) {
      $33 = HEAP8[$$03952>>0]|0;
      $34 = $33&255;
      $35 = $34 >>> 3;
      $36 = (($35) + -16)|0;
      $37 = $$04051 >> 26;
      $38 = (($35) + ($37))|0;
      $39 = $36 | $38;
      $40 = ($39>>>0)>(7);
      if ($40) {
       label = 19;
       break L1;
      }
      $41 = $$04051 << 6;
      $42 = (($34) + -128)|0;
      $43 = $42 | $41;
      $44 = (($$04350) + -1)|0;
      $45 = ($43|0)<(0);
      if ($45) {
       $$03952$pn = $$03952;$47 = $43;$53 = $44;
       while(1) {
        $56 = ((($$03952$pn)) + 1|0);
        $57 = ($53|0)==(0);
        if ($57) {
         $$2 = $47;
         break L14;
        }
        $49 = HEAP8[$56>>0]|0;
        $58 = $49 & -64;
        $59 = ($58<<24>>24)==(-128);
        if (!($59)) {
         label = 19;
         break L1;
        }
        $46 = $47 << 6;
        $48 = $49&255;
        $50 = (($48) + -128)|0;
        $51 = $50 | $46;
        $52 = (($53) + -1)|0;
        $54 = ($51|0)<(0);
        if ($54) {
         $$03952$pn = $56;$47 = $51;$53 = $52;
        } else {
         $$lcssa = $52;$$lcssa56 = $51;
         break;
        }
       }
      } else {
       $$lcssa = $44;$$lcssa56 = $43;
      }
      HEAP32[$spec$select>>2] = 0;
      HEAP32[$spec$select47>>2] = $$lcssa56;
      $55 = (($2) - ($$lcssa))|0;
      $$0 = $55;
      break L1;
     }
    } while(0);
    HEAP32[$spec$select>>2] = $$2;
    $$0 = -2;
   }
  }
 } while(0);
 if ((label|0) == 19) {
  HEAP32[$spec$select>>2] = 0;
  $60 = (___errno_location()|0);
  HEAP32[$60>>2] = 84;
  $$0 = -1;
 }
 STACKTOP = sp;return ($$0|0);
}
function ___pthread_self_414() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function _isdigit_l($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_isdigit($0)|0);
 return ($2|0);
}
function _isxdigit_l($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_isxdigit($0)|0);
 return ($2|0);
}
function ___get_locale($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$093$lcssa = 0, $$093118 = 0, $$094114 = 0, $$1 = 0, $$1100111 = 0, $$195112 = 0, $$2122 = 0, $$2123 = 0, $$2124 = 0, $$4 = 0, $$neg = 0, $$pre121 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $11 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(272|0);
 $2 = sp;
 $3 = sp + 256|0;
 $4 = HEAP8[$1>>0]|0;
 $5 = ($4<<24>>24)==(0);
 do {
  if ($5) {
   $6 = (_getenv((40879|0))|0);
   $7 = ($6|0)==(0|0);
   if (!($7)) {
    $8 = HEAP8[$6>>0]|0;
    $9 = ($8<<24>>24)==(0);
    if (!($9)) {
     $$1 = $6;
     break;
    }
   }
   $10 = (20832 + (($0*12)|0)|0);
   $11 = (_getenv(($10|0))|0);
   $12 = ($11|0)==(0|0);
   if (!($12)) {
    $13 = HEAP8[$11>>0]|0;
    $14 = ($13<<24>>24)==(0);
    if (!($14)) {
     $$1 = $11;
     break;
    }
   }
   $15 = (_getenv((40886|0))|0);
   $16 = ($15|0)==(0|0);
   if (!($16)) {
    $17 = HEAP8[$15>>0]|0;
    $18 = ($17<<24>>24)==(0);
    if (!($18)) {
     $$1 = $15;
     break;
    }
   }
   $$1 = 40891;
  } else {
   $$1 = $1;
  }
 } while(0);
 $$093118 = 0;
 L13: while(1) {
  $19 = (($$1) + ($$093118)|0);
  $20 = HEAP8[$19>>0]|0;
  switch ($20<<24>>24) {
  case 47: case 0:  {
   $$093$lcssa = $$093118;
   break L13;
   break;
  }
  default: {
  }
  }
  $21 = (($$093118) + 1)|0;
  $22 = ($21>>>0)<(15);
  if ($22) {
   $$093118 = $21;
  } else {
   $$093$lcssa = 15;
   break;
  }
 }
 $23 = HEAP8[$$1>>0]|0;
 $24 = ($23<<24>>24)==(46);
 if ($24) {
  $$2122 = 40891;
  label = 15;
 } else {
  $25 = (($$1) + ($$093$lcssa)|0);
  $26 = HEAP8[$25>>0]|0;
  $27 = ($26<<24>>24)==(0);
  if ($27) {
   $28 = ($23<<24>>24)==(67);
   if ($28) {
    $$2122 = $$1;
    label = 15;
   } else {
    $$2123 = $$1;
    label = 16;
   }
  } else {
   $$2122 = 40891;
   label = 15;
  }
 }
 if ((label|0) == 15) {
  $29 = ((($$2122)) + 1|0);
  $30 = HEAP8[$29>>0]|0;
  $31 = ($30<<24>>24)==(0);
  if ($31) {
   $$2124 = $$2122;
   label = 18;
  } else {
   $$2123 = $$2122;
   label = 16;
  }
 }
 L22: do {
  if ((label|0) == 16) {
   $32 = (_strcmp($$2123,40891)|0);
   $33 = ($32|0)==(0);
   if ($33) {
    $$2124 = $$2123;
    label = 18;
   } else {
    $34 = (_strcmp($$2123,40899)|0);
    $35 = ($34|0)==(0);
    if ($35) {
     $$2124 = $$2123;
     label = 18;
    } else {
     $40 = HEAP32[12292]|0;
     $41 = ($40|0)==(0|0);
     if (!($41)) {
      $$094114 = $40;
      while(1) {
       $42 = ((($$094114)) + 8|0);
       $43 = (_strcmp($$2123,$42)|0);
       $44 = ($43|0)==(0);
       if ($44) {
        $$0 = $$094114;
        break L22;
       }
       $45 = ((($$094114)) + 24|0);
       $46 = HEAP32[$45>>2]|0;
       $47 = ($46|0)==(0|0);
       if ($47) {
        break;
       } else {
        $$094114 = $46;
       }
      }
     }
     ___lock((49172|0));
     $48 = HEAP32[12292]|0;
     $49 = ($48|0)==(0|0);
     L32: do {
      if (!($49)) {
       $$195112 = $48;
       while(1) {
        $50 = ((($$195112)) + 8|0);
        $51 = (_strcmp($$2123,$50)|0);
        $52 = ($51|0)==(0);
        if ($52) {
         break;
        }
        $53 = ((($$195112)) + 24|0);
        $54 = HEAP32[$53>>2]|0;
        $55 = ($54|0)==(0|0);
        if ($55) {
         break L32;
        } else {
         $$195112 = $54;
        }
       }
       ___unlock((49172|0));
       $$0 = $$195112;
       break L22;
      }
     } while(0);
     $56 = HEAP32[(49080)>>2]|0;
     $57 = ($56|0)==(0);
     L39: do {
      if ($57) {
       $58 = (_getenv((40905|0))|0);
       $59 = ($58|0)==(0|0);
       if ($59) {
        label = 41;
       } else {
        $60 = HEAP8[$58>>0]|0;
        $61 = ($60<<24>>24)==(0);
        if ($61) {
         label = 41;
        } else {
         $62 = (254 - ($$093$lcssa))|0;
         $63 = (($$093$lcssa) + 1)|0;
         $$1100111 = $58;
         while(1) {
          $64 = (___strchrnul($$1100111,58)|0);
          $65 = $64;
          $66 = $$1100111;
          $67 = (($65) - ($66))|0;
          $68 = HEAP8[$64>>0]|0;
          $69 = ($68<<24>>24)!=(0);
          $$neg = $69 << 31 >> 31;
          $70 = (($67) + ($$neg))|0;
          $71 = ($70>>>0)<($62>>>0);
          if ($71) {
           (_memcpy(($2|0),($$1100111|0),($70|0))|0);
           $72 = (($2) + ($70)|0);
           HEAP8[$72>>0] = 47;
           $73 = ((($72)) + 1|0);
           (_memcpy(($73|0),($$2123|0),($$093$lcssa|0))|0);
           $74 = (($63) + ($70))|0;
           $75 = (($2) + ($74)|0);
           HEAP8[$75>>0] = 0;
           $76 = (___map_file(($2|0),($3|0))|0);
           $77 = ($76|0)==(0|0);
           if (!($77)) {
            break;
           }
           $$pre121 = HEAP8[$64>>0]|0;
           $87 = $$pre121;
          } else {
           $87 = $68;
          }
          $86 = ($87<<24>>24)!=(0);
          $88 = $86&1;
          $89 = (($64) + ($88)|0);
          $90 = HEAP8[$89>>0]|0;
          $91 = ($90<<24>>24)==(0);
          if ($91) {
           label = 41;
           break L39;
          } else {
           $$1100111 = $89;
          }
         }
         $78 = (_malloc(28)|0);
         $79 = ($78|0)==(0|0);
         if ($79) {
          $92 = HEAP32[$3>>2]|0;
          (___munmap($76,$92)|0);
          label = 41;
          break;
         } else {
          HEAP32[$78>>2] = $76;
          $80 = HEAP32[$3>>2]|0;
          $81 = ((($78)) + 4|0);
          HEAP32[$81>>2] = $80;
          $82 = ((($78)) + 8|0);
          (_memcpy(($82|0),($$2123|0),($$093$lcssa|0))|0);
          $83 = (($82) + ($$093$lcssa)|0);
          HEAP8[$83>>0] = 0;
          $84 = HEAP32[12292]|0;
          $85 = ((($78)) + 24|0);
          HEAP32[$85>>2] = $84;
          HEAP32[12292] = $78;
          $$4 = $78;
          break;
         }
        }
       }
      } else {
       label = 41;
      }
     } while(0);
     if ((label|0) == 41) {
      $93 = (_malloc(28)|0);
      $94 = ($93|0)==(0|0);
      if ($94) {
       $$4 = $93;
      } else {
       $95 = HEAP32[6626]|0;
       HEAP32[$93>>2] = $95;
       $96 = HEAP32[(26508)>>2]|0;
       $97 = ((($93)) + 4|0);
       HEAP32[$97>>2] = $96;
       $98 = ((($93)) + 8|0);
       (_memcpy(($98|0),($$2123|0),($$093$lcssa|0))|0);
       $99 = (($98) + ($$093$lcssa)|0);
       HEAP8[$99>>0] = 0;
       $100 = HEAP32[12292]|0;
       $101 = ((($93)) + 24|0);
       HEAP32[$101>>2] = $100;
       HEAP32[12292] = $93;
       $$4 = $93;
      }
     }
     $102 = ($$4|0)==(0|0);
     $103 = ($0|0)==(0);
     $or$cond = $103 & $102;
     $spec$select = $or$cond ? 26504 : $$4;
     ___unlock((49172|0));
     $$0 = $spec$select;
    }
   }
  }
 } while(0);
 do {
  if ((label|0) == 18) {
   $36 = ($0|0)==(0);
   if ($36) {
    $37 = ((($$2124)) + 1|0);
    $38 = HEAP8[$37>>0]|0;
    $39 = ($38<<24>>24)==(46);
    if ($39) {
     $$0 = 26504;
     break;
    }
   }
   $$0 = 0;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function ___newlocale($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$03338 = 0, $$03439 = 0, $$036 = 0, $$13537 = 0, $$pre = 0, $$pre41 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond40 = 0, $or$cond = 0, $trunc = 0, $trunc$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp;
 $4 = (___loc_is_allocated($2)|0);
 $5 = ($4|0)==(0);
 L1: do {
  if ($5) {
   $12 = ($2|0)!=(0|0);
   $$03338 = 0;$$13537 = 0;
   while(1) {
    $$pre = 1 << $$13537;
    $$pre41 = $$pre & $0;
    $13 = ($$pre41|0)==(0);
    $or$cond = $12 & $13;
    if ($or$cond) {
     $14 = (($2) + ($$13537<<2)|0);
     $15 = HEAP32[$14>>2]|0;
     $$0 = $15;
    } else {
     $16 = ($$pre41|0)==(0);
     $17 = $16 ? 51188 : $1;
     $18 = (___get_locale($$13537,$17)|0);
     $$0 = $18;
    }
    $19 = ($$0|0)!=(0|0);
    $20 = $19&1;
    $trunc = (($$03338) + ($20))|0;
    $21 = (($3) + ($$13537<<2)|0);
    HEAP32[$21>>2] = $$0;
    $22 = (($$13537) + 1)|0;
    $exitcond = ($22|0)==(6);
    if ($exitcond) {
     break;
    } else {
     $$03338 = $trunc;$$13537 = $22;
    }
   }
   $trunc$clear = $trunc & 2147483647;
   switch ($trunc$clear|0) {
   case 0:  {
    $$036 = 49136;
    break L1;
    break;
   }
   case 1:  {
    $23 = HEAP32[$3>>2]|0;
    $24 = ($23|0)==(26504|0);
    if ($24) {
     $$036 = 26532;
     break L1;
    }
    break;
   }
   default: {
   }
   }
   $$036 = $2;
  } else {
   $$03439 = 0;
   while(1) {
    $6 = 1 << $$03439;
    $7 = $6 & $0;
    $8 = ($7|0)==(0);
    if (!($8)) {
     $9 = (($2) + ($$03439<<2)|0);
     $10 = (___get_locale($$03439,$1)|0);
     HEAP32[$9>>2] = $10;
    }
    $11 = (($$03439) + 1)|0;
    $exitcond40 = ($11|0)==(6);
    if ($exitcond40) {
     $$036 = $2;
     break;
    } else {
     $$03439 = $11;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$036|0);
}
function _snprintf($0,$1,$2,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $varargs = $varargs|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 HEAP32[$3>>2] = $varargs;
 $4 = (_vsnprintf($0,$1,$2,$3)|0);
 STACKTOP = sp;return ($4|0);
}
function ___uselocale($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___pthread_self_234()|0);
 $2 = ((($1)) + 188|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($0|0)==(0|0);
 if (!($4)) {
  $5 = ($0|0)==((-1)|0);
  $6 = $5 ? (49112) : $0;
  HEAP32[$2>>2] = $6;
 }
 $7 = ($3|0)==((49112)|0);
 $8 = $7 ? (-1) : $3;
 return ($8|0);
}
function ___pthread_self_234() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function _wmemcpy($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$058 = 0, $$067 = 0, $$09 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 if (!($3)) {
  $$058 = $2;$$067 = $1;$$09 = $0;
  while(1) {
   $4 = (($$058) + -1)|0;
   $5 = ((($$067)) + 4|0);
   $6 = HEAP32[$$067>>2]|0;
   $7 = ((($$09)) + 4|0);
   HEAP32[$$09>>2] = $6;
   $8 = ($4|0)==(0);
   if ($8) {
    break;
   } else {
    $$058 = $4;$$067 = $5;$$09 = $7;
   }
  }
 }
 return ($0|0);
}
function ___strdup($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_strlen($0)|0);
 $2 = (($1) + 1)|0;
 $3 = (_malloc($2)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  $$0 = 0;
 } else {
  $5 = (_memcpy(($3|0),($0|0),($2|0))|0);
  $$0 = $5;
 }
 return ($$0|0);
}
function _fwrite($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = Math_imul($2, $1)|0;
 $5 = ($1|0)==(0);
 $spec$select = $5 ? 0 : $2;
 $6 = ((($3)) + 76|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)>(-1);
 if ($8) {
  $10 = (___lockfile($3)|0);
  $phitmp = ($10|0)==(0);
  $11 = (___fwritex($0,$4,$3)|0);
  if ($phitmp) {
   $13 = $11;
  } else {
   ___unlockfile($3);
   $13 = $11;
  }
 } else {
  $9 = (___fwritex($0,$4,$3)|0);
  $13 = $9;
 }
 $12 = ($13|0)==($4|0);
 if ($12) {
  $15 = $spec$select;
 } else {
  $14 = (($13>>>0) / ($1>>>0))&-1;
  $15 = $14;
 }
 return ($15|0);
}
function ___unlist_locked_file($0) {
 $0 = $0|0;
 var $$pre = 0, $$sink = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 68|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if (!($3)) {
  $4 = ((($0)) + 116|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==(0|0);
  $7 = $5;
  $$pre = ((($0)) + 112|0);
  if (!($6)) {
   $8 = HEAP32[$$pre>>2]|0;
   $9 = ((($5)) + 112|0);
   HEAP32[$9>>2] = $8;
  }
  $10 = HEAP32[$$pre>>2]|0;
  $11 = ($10|0)==(0|0);
  if ($11) {
   $13 = (___pthread_self_603()|0);
   $14 = ((($13)) + 232|0);
   $$sink = $14;
  } else {
   $12 = ((($10)) + 116|0);
   $$sink = $12;
  }
  HEAP32[$$sink>>2] = $7;
 }
 return;
}
function ___pthread_self_603() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function ___overflow($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = $1&255;
 HEAP8[$2>>0] = $3;
 $4 = ((($0)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $7 = (___towrite($0)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   $$pre = HEAP32[$4>>2]|0;
   $12 = $$pre;
   label = 4;
  } else {
   $$0 = -1;
  }
 } else {
  $12 = $5;
  label = 4;
 }
 do {
  if ((label|0) == 4) {
   $9 = ((($0)) + 20|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10>>>0)<($12>>>0);
   if ($11) {
    $13 = $1 & 255;
    $14 = ((($0)) + 75|0);
    $15 = HEAP8[$14>>0]|0;
    $16 = $15 << 24 >> 24;
    $17 = ($13|0)==($16|0);
    if (!($17)) {
     $18 = ((($10)) + 1|0);
     HEAP32[$9>>2] = $18;
     HEAP8[$10>>0] = $3;
     $$0 = $13;
     break;
    }
   }
   $19 = ((($0)) + 36|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = (FUNCTION_TABLE_iiii[$20 & 63]($0,$2,1)|0);
   $22 = ($21|0)==(1);
   if ($22) {
    $23 = HEAP8[$2>>0]|0;
    $24 = $23&255;
    $$0 = $24;
   } else {
    $$0 = -1;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _mbtowc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = ($1|0)==(0|0);
 L1: do {
  if ($4) {
   $$0 = 0;
  } else {
   $5 = ($2|0)==(0);
   do {
    if (!($5)) {
     $6 = ($0|0)==(0|0);
     $spec$select = $6 ? $3 : $0;
     $7 = HEAP8[$1>>0]|0;
     $8 = ($7<<24>>24)>(-1);
     if ($8) {
      $9 = $7&255;
      HEAP32[$spec$select>>2] = $9;
      $10 = ($7<<24>>24)!=(0);
      $11 = $10&1;
      $$0 = $11;
      break L1;
     }
     $12 = (___pthread_self_420()|0);
     $13 = ((($12)) + 188|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = HEAP32[$14>>2]|0;
     $16 = ($15|0)==(0|0);
     $17 = HEAP8[$1>>0]|0;
     if ($16) {
      $18 = $17 << 24 >> 24;
      $19 = $18 & 57343;
      HEAP32[$spec$select>>2] = $19;
      $$0 = 1;
      break L1;
     }
     $20 = $17&255;
     $21 = (($20) + -194)|0;
     $22 = ($21>>>0)>(50);
     if (!($22)) {
      $23 = ((($1)) + 1|0);
      $24 = (14096 + ($21<<2)|0);
      $25 = HEAP32[$24>>2]|0;
      $26 = ($2>>>0)<(4);
      if ($26) {
       $27 = ($2*6)|0;
       $28 = (($27) + -6)|0;
       $29 = -2147483648 >>> $28;
       $30 = $25 & $29;
       $31 = ($30|0)==(0);
       if (!($31)) {
        break;
       }
      }
      $32 = HEAP8[$23>>0]|0;
      $33 = $32&255;
      $34 = $33 >>> 3;
      $35 = (($34) + -16)|0;
      $36 = $25 >> 26;
      $37 = (($34) + ($36))|0;
      $38 = $35 | $37;
      $39 = ($38>>>0)>(7);
      if (!($39)) {
       $40 = $25 << 6;
       $41 = (($33) + -128)|0;
       $42 = $41 | $40;
       $43 = ($42|0)<(0);
       if (!($43)) {
        HEAP32[$spec$select>>2] = $42;
        $$0 = 2;
        break L1;
       }
       $44 = ((($1)) + 2|0);
       $45 = HEAP8[$44>>0]|0;
       $46 = $45&255;
       $47 = (($46) + -128)|0;
       $48 = ($47>>>0)>(63);
       if (!($48)) {
        $49 = $42 << 6;
        $50 = $47 | $49;
        $51 = ($50|0)<(0);
        if (!($51)) {
         HEAP32[$spec$select>>2] = $50;
         $$0 = 3;
         break L1;
        }
        $52 = ((($1)) + 3|0);
        $53 = HEAP8[$52>>0]|0;
        $54 = $53&255;
        $55 = (($54) + -128)|0;
        $56 = ($55>>>0)>(63);
        if (!($56)) {
         $57 = $50 << 6;
         $58 = $55 | $57;
         HEAP32[$spec$select>>2] = $58;
         $$0 = 4;
         break L1;
        }
       }
      }
     }
    }
   } while(0);
   $59 = (___errno_location()|0);
   HEAP32[$59>>2] = 84;
   $$0 = -1;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function ___pthread_self_420() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function _fopen($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_buffer8 = 0, $vararg_ptr1 = 0;
 var $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (_strchr(40918,$3)|0);
 $5 = ($4|0)==(0|0);
 if ($5) {
  $6 = (___errno_location()|0);
  HEAP32[$6>>2] = 22;
  $$0 = 0;
 } else {
  $7 = (___fmodeflags($1)|0);
  $8 = $0;
  $9 = $7 | 32768;
  HEAP32[$vararg_buffer>>2] = $8;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $9;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 438;
  $10 = (___syscall5(5,($vararg_buffer|0))|0);
  $11 = (___syscall_ret($10)|0);
  $12 = ($11|0)<(0);
  if ($12) {
   $$0 = 0;
  } else {
   $13 = $7 & 524288;
   $14 = ($13|0)==(0);
   if (!($14)) {
    HEAP32[$vararg_buffer3>>2] = $11;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = 2;
    $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
    HEAP32[$vararg_ptr7>>2] = 1;
    (___syscall221(221,($vararg_buffer3|0))|0);
   }
   $15 = (___fdopen($11,$1)|0);
   $16 = ($15|0)==(0|0);
   if ($16) {
    HEAP32[$vararg_buffer8>>2] = $11;
    (___syscall6(6,($vararg_buffer8|0))|0);
    $$0 = 0;
   } else {
    $$0 = $15;
   }
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___fmodeflags($0) {
 $0 = $0|0;
 var $$ = 0, $$0 = 0, $$2 = 0, $$4 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $spec$select = 0, $spec$select13 = 0, $spec$select14 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_strchr($0,43)|0);
 $2 = ($1|0)==(0|0);
 $3 = HEAP8[$0>>0]|0;
 $4 = ($3<<24>>24)!=(114);
 $$ = $4&1;
 $$0 = $2 ? $$ : 2;
 $5 = (_strchr($0,120)|0);
 $6 = ($5|0)==(0|0);
 $7 = $$0 | 128;
 $spec$select = $6 ? $$0 : $7;
 $8 = (_strchr($0,101)|0);
 $9 = ($8|0)==(0|0);
 $10 = $spec$select | 524288;
 $$2 = $9 ? $spec$select : $10;
 $11 = ($3<<24>>24)==(114);
 $12 = $$2 | 64;
 $spec$select13 = $11 ? $$2 : $12;
 $13 = ($3<<24>>24)==(119);
 $14 = $spec$select13 | 512;
 $$4 = $13 ? $14 : $spec$select13;
 $15 = ($3<<24>>24)==(97);
 $16 = $$4 | 1024;
 $spec$select14 = $15 ? $16 : $$4;
 return ($spec$select14|0);
}
function ___fdopen($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer12 = sp + 40|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $2 = sp + 56|0;
 $3 = HEAP8[$1>>0]|0;
 $4 = $3 << 24 >> 24;
 $5 = (_strchr(40918,$4)|0);
 $6 = ($5|0)==(0|0);
 if ($6) {
  $7 = (___errno_location()|0);
  HEAP32[$7>>2] = 22;
  $$0 = 0;
 } else {
  $8 = (_malloc(1156)|0);
  $9 = ($8|0)==(0|0);
  if ($9) {
   $$0 = 0;
  } else {
   (_memset(($8|0),0,124)|0);
   $10 = (_strchr($1,43)|0);
   $11 = ($10|0)==(0|0);
   if ($11) {
    $12 = HEAP8[$1>>0]|0;
    $13 = ($12<<24>>24)==(114);
    $14 = $13 ? 8 : 4;
    HEAP32[$8>>2] = $14;
   }
   $15 = (_strchr($1,101)|0);
   $16 = ($15|0)==(0|0);
   if (!($16)) {
    HEAP32[$vararg_buffer>>2] = $0;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = 2;
    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr2>>2] = 1;
    (___syscall221(221,($vararg_buffer|0))|0);
   }
   $17 = HEAP8[$1>>0]|0;
   $18 = ($17<<24>>24)==(97);
   if ($18) {
    HEAP32[$vararg_buffer3>>2] = $0;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = 3;
    $19 = (___syscall221(221,($vararg_buffer3|0))|0);
    $20 = $19 & 1024;
    $21 = ($20|0)==(0);
    if ($21) {
     $22 = $19 | 1024;
     HEAP32[$vararg_buffer7>>2] = $0;
     $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
     HEAP32[$vararg_ptr10>>2] = 4;
     $vararg_ptr11 = ((($vararg_buffer7)) + 8|0);
     HEAP32[$vararg_ptr11>>2] = $22;
     (___syscall221(221,($vararg_buffer7|0))|0);
    }
    $23 = HEAP32[$8>>2]|0;
    $24 = $23 | 128;
    HEAP32[$8>>2] = $24;
    $31 = $24;
   } else {
    $$pre = HEAP32[$8>>2]|0;
    $31 = $$pre;
   }
   $25 = ((($8)) + 60|0);
   HEAP32[$25>>2] = $0;
   $26 = ((($8)) + 132|0);
   $27 = ((($8)) + 44|0);
   HEAP32[$27>>2] = $26;
   $28 = ((($8)) + 48|0);
   HEAP32[$28>>2] = 1024;
   $29 = ((($8)) + 75|0);
   HEAP8[$29>>0] = -1;
   $30 = $31 & 8;
   $32 = ($30|0)==(0);
   if ($32) {
    $33 = $2;
    HEAP32[$vararg_buffer12>>2] = $0;
    $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
    HEAP32[$vararg_ptr15>>2] = 21523;
    $vararg_ptr16 = ((($vararg_buffer12)) + 8|0);
    HEAP32[$vararg_ptr16>>2] = $33;
    $34 = (___syscall54(54,($vararg_buffer12|0))|0);
    $35 = ($34|0)==(0);
    if ($35) {
     HEAP8[$29>>0] = 10;
    }
   }
   $36 = ((($8)) + 32|0);
   HEAP32[$36>>2] = 6;
   $37 = ((($8)) + 36|0);
   HEAP32[$37>>2] = 4;
   $38 = ((($8)) + 40|0);
   HEAP32[$38>>2] = 5;
   $39 = ((($8)) + 12|0);
   HEAP32[$39>>2] = 5;
   $40 = HEAP32[(49076)>>2]|0;
   $41 = ($40|0)==(0);
   if ($41) {
    $42 = ((($8)) + 76|0);
    HEAP32[$42>>2] = -1;
   }
   $43 = (___ofl_add($8)|0);
   $$0 = $8;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___ofl_add($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___ofl_lock()|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 56|0);
 HEAP32[$3>>2] = $2;
 $4 = HEAP32[$1>>2]|0;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  $6 = ((($4)) + 52|0);
  HEAP32[$6>>2] = $0;
 }
 HEAP32[$1>>2] = $0;
 ___ofl_unlock();
 return ($0|0);
}
function ___ofl_lock() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___lock((49180|0));
 return (49188|0);
}
function ___ofl_unlock() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___unlock((49180|0));
 return;
}
function _fclose($0) {
 $0 = $0|0;
 var $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $4 = (___lockfile($0)|0);
  $30 = $4;
 } else {
  $30 = 0;
 }
 ___unlist_locked_file($0);
 $5 = HEAP32[$0>>2]|0;
 $6 = $5 & 1;
 $7 = ($6|0)!=(0);
 if (!($7)) {
  $8 = (___ofl_lock()|0);
  $9 = ((($0)) + 52|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(0|0);
  $12 = $10;
  $$pre = ((($0)) + 56|0);
  if (!($11)) {
   $13 = HEAP32[$$pre>>2]|0;
   $14 = ((($10)) + 56|0);
   HEAP32[$14>>2] = $13;
  }
  $15 = HEAP32[$$pre>>2]|0;
  $16 = ($15|0)==(0|0);
  $17 = $15;
  if (!($16)) {
   $18 = ((($15)) + 52|0);
   HEAP32[$18>>2] = $12;
  }
  $19 = HEAP32[$8>>2]|0;
  $20 = ($19|0)==($0|0);
  if ($20) {
   HEAP32[$8>>2] = $17;
  }
  ___ofl_unlock();
 }
 $21 = (_fflush($0)|0);
 $22 = ((($0)) + 12|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (FUNCTION_TABLE_ii[$23 & 255]($0)|0);
 $25 = $24 | $21;
 $26 = ((($0)) + 92|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)==(0|0);
 if (!($28)) {
  _free($27);
 }
 if ($7) {
  $29 = ($30|0)==(0);
  if (!($29)) {
   ___unlockfile($0);
  }
 } else {
  _free($0);
 }
 return ($25|0);
}
function _fflush($0) {
 $0 = $0|0;
 var $$0 = 0, $$023 = 0, $$02325 = 0, $$02327 = 0, $$024$lcssa = 0, $$02426 = 0, $$1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $8 = HEAP32[6735]|0;
   $9 = ($8|0)==(0|0);
   if ($9) {
    $29 = 0;
   } else {
    $10 = HEAP32[6735]|0;
    $11 = (_fflush($10)|0);
    $29 = $11;
   }
   $12 = (___ofl_lock()|0);
   $$02325 = HEAP32[$12>>2]|0;
   $13 = ($$02325|0)==(0|0);
   if ($13) {
    $$024$lcssa = $29;
   } else {
    $$02327 = $$02325;$$02426 = $29;
    while(1) {
     $14 = ((($$02327)) + 76|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = ($15|0)>(-1);
     if ($16) {
      $17 = (___lockfile($$02327)|0);
      $26 = $17;
     } else {
      $26 = 0;
     }
     $18 = ((($$02327)) + 20|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = ((($$02327)) + 28|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($19>>>0)>($21>>>0);
     if ($22) {
      $23 = (___fflush_unlocked($$02327)|0);
      $24 = $23 | $$02426;
      $$1 = $24;
     } else {
      $$1 = $$02426;
     }
     $25 = ($26|0)==(0);
     if (!($25)) {
      ___unlockfile($$02327);
     }
     $27 = ((($$02327)) + 56|0);
     $$023 = HEAP32[$27>>2]|0;
     $28 = ($$023|0)==(0|0);
     if ($28) {
      $$024$lcssa = $$1;
      break;
     } else {
      $$02327 = $$023;$$02426 = $$1;
     }
    }
   }
   ___ofl_unlock();
   $$0 = $$024$lcssa;
  } else {
   $2 = ((($0)) + 76|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ($3|0)>(-1);
   if (!($4)) {
    $5 = (___fflush_unlocked($0)|0);
    $$0 = $5;
    break;
   }
   $6 = (___lockfile($0)|0);
   $phitmp = ($6|0)==(0);
   $7 = (___fflush_unlocked($0)|0);
   if ($phitmp) {
    $$0 = $7;
   } else {
    ___unlockfile($0);
    $$0 = $7;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___fflush_unlocked($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2>>>0)>($4>>>0);
 if ($5) {
  $6 = ((($0)) + 36|0);
  $7 = HEAP32[$6>>2]|0;
  (FUNCTION_TABLE_iiii[$7 & 63]($0,0,0)|0);
  $8 = HEAP32[$1>>2]|0;
  $9 = ($8|0)==(0|0);
  if ($9) {
   $$0 = -1;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $10 = ((($0)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($0)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($11>>>0)<($13>>>0);
  if ($14) {
   $15 = $11;
   $16 = $13;
   $17 = (($15) - ($16))|0;
   $18 = ((($0)) + 40|0);
   $19 = HEAP32[$18>>2]|0;
   (FUNCTION_TABLE_iiii[$19 & 63]($0,$17,1)|0);
  }
  $20 = ((($0)) + 16|0);
  HEAP32[$20>>2] = 0;
  HEAP32[$3>>2] = 0;
  HEAP32[$1>>2] = 0;
  HEAP32[$12>>2] = 0;
  HEAP32[$10>>2] = 0;
  $$0 = 0;
 }
 return ($$0|0);
}
function _sscanf($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 HEAP32[$2>>2] = $varargs;
 $3 = (_vsscanf($0,$1,$2)|0);
 STACKTOP = sp;return ($3|0);
}
function _vsscanf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $3 = sp;
 dest=$3; stop=dest+124|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $4 = ((($3)) + 32|0);
 HEAP32[$4>>2] = 42;
 $5 = ((($3)) + 44|0);
 HEAP32[$5>>2] = $0;
 $6 = ((($3)) + 76|0);
 HEAP32[$6>>2] = -1;
 $7 = ((($3)) + 84|0);
 HEAP32[$7>>2] = $0;
 $8 = (_vfscanf($3,$1,$2)|0);
 STACKTOP = sp;return ($8|0);
}
function _do_read($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (___string_read($0,$1,$2)|0);
 return ($3|0);
}
function _vfscanf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0266$lcssa = 0, $$0266409 = 0, $$0268 = 0, $$0270 = 0, $$0272 = 0, $$0273420 = 0, $$0276$ph$ph = 0, $$0280$ph = 0, $$0280$ph$ph = 0, $$0285419 = 0, $$0288411 = 0, $$0290416 = 0, $$0294 = 0, $$0295 = 0, $$0308414 = 0, $$10 = 0, $$10318 = 0, $$11 = 0, $$12 = 0, $$1267 = 0;
 var $$1271 = 0, $$1274 = 0, $$1281 = 0, $$1286 = 0, $$1291 = 0, $$1309 = 0, $$2 = 0, $$2275 = 0, $$2278$ph = 0, $$2282 = 0, $$2282$ph = 0, $$2287 = 0, $$2292 = 0, $$2310$ph = 0, $$3$lcssa = 0, $$3283 = 0, $$3293 = 0, $$3408 = 0, $$4 = 0, $$4284 = 0;
 var $$5 = 0, $$5313 = 0, $$6 = 0, $$6302 = 0, $$6314 = 0, $$7 = 0, $$7315 = 0, $$8 = 0, $$8316 = 0, $$9 = 0, $$9317 = 0, $$not = 0, $$old4 = 0, $$ph$ph = 0, $$pr = 0, $$pr332 = 0, $$pre = 0, $$pre$phi493Z2D = 0, $$pre$phiZ2D = 0, $$pre485 = 0;
 var $$pre487 = 0, $$pre488 = 0, $$pre490 = 0, $$pre492 = 0, $$sroa$2$0$$sroa_idx13 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0.0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0.0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_next = 0, $expanded = 0, $expanded1 = 0, $expanded3 = 0, $expanded4 = 0, $expanded5 = 0, $factor = 0, $factor335 = 0;
 var $or$cond = 0, $or$cond3 = 0, $or$cond321 = 0, $or$cond5 = 0, $spec$select = 0, $spec$select319 = 0, $spec$select320 = 0, $spec$select322 = 0, $spec$select323 = 0, $spec$select324 = 0, $spec$select325 = 0, $spec$select326 = 0, $trunc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(288|0);
 $3 = sp + 264|0;
 $4 = sp;
 $5 = sp + 260|0;
 $6 = sp + 272|0;
 $7 = ((($0)) + 76|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)>(-1);
 if ($9) {
  $10 = (___lockfile($0)|0);
  $320 = $10;
 } else {
  $320 = 0;
 }
 $11 = HEAP8[$1>>0]|0;
 $12 = ($11<<24>>24)==(0);
 L4: do {
  if ($12) {
   $$3293 = 0;
  } else {
   $13 = ((($0)) + 4|0);
   $14 = ((($0)) + 100|0);
   $15 = ((($0)) + 108|0);
   $16 = ((($0)) + 8|0);
   $17 = ((($4)) + 10|0);
   $18 = ((($4)) + 33|0);
   $19 = ((($4)) + 46|0);
   $20 = ((($4)) + 94|0);
   $$sroa$2$0$$sroa_idx13 = ((($3)) + 4|0);
   $$0273420 = $1;$$0285419 = 0;$$0290416 = 0;$$0308414 = 0;$22 = $11;$321 = 0;
   L6: while(1) {
    $21 = $22&255;
    $23 = (_isspace($21)|0);
    $24 = ($23|0)==(0);
    L8: do {
     if ($24) {
      $51 = HEAP8[$$0273420>>0]|0;
      $52 = ($51<<24>>24)==(37);
      L10: do {
       if ($52) {
        $53 = ((($$0273420)) + 1|0);
        $54 = HEAP8[$53>>0]|0;
        L12: do {
         switch ($54<<24>>24) {
         case 37:  {
          break L10;
          break;
         }
         case 42:  {
          $75 = ((($$0273420)) + 2|0);
          $$0295 = 0;$$2275 = $75;
          break;
         }
         default: {
          $76 = $54&255;
          $77 = (_isdigit($76)|0);
          $78 = ($77|0)==(0);
          if (!($78)) {
           $79 = ((($$0273420)) + 2|0);
           $80 = HEAP8[$79>>0]|0;
           $81 = ($80<<24>>24)==(36);
           if ($81) {
            $82 = HEAP8[$53>>0]|0;
            $83 = $82&255;
            $84 = (($83) + -48)|0;
            $85 = (_arg_n($2,$84)|0);
            $86 = ((($$0273420)) + 3|0);
            $$0295 = $85;$$2275 = $86;
            break L12;
           }
          }
          $arglist_current = HEAP32[$2>>2]|0;
          $87 = $arglist_current;
          $88 = ((0) + 4|0);
          $expanded1 = $88;
          $expanded = (($expanded1) - 1)|0;
          $89 = (($87) + ($expanded))|0;
          $90 = ((0) + 4|0);
          $expanded5 = $90;
          $expanded4 = (($expanded5) - 1)|0;
          $expanded3 = $expanded4 ^ -1;
          $91 = $89 & $expanded3;
          $92 = $91;
          $93 = HEAP32[$92>>2]|0;
          $arglist_next = ((($92)) + 4|0);
          HEAP32[$2>>2] = $arglist_next;
          $$0295 = $93;$$2275 = $53;
         }
         }
        } while(0);
        $94 = HEAP8[$$2275>>0]|0;
        $95 = $94&255;
        $96 = (_isdigit($95)|0);
        $97 = ($96|0)==(0);
        if ($97) {
         $$0266$lcssa = 0;$$3$lcssa = $$2275;
        } else {
         $$0266409 = 0;$$3408 = $$2275;
         while(1) {
          $98 = ($$0266409*10)|0;
          $99 = HEAP8[$$3408>>0]|0;
          $100 = $99&255;
          $101 = (($98) + -48)|0;
          $102 = (($101) + ($100))|0;
          $103 = ((($$3408)) + 1|0);
          $104 = HEAP8[$103>>0]|0;
          $105 = $104&255;
          $106 = (_isdigit($105)|0);
          $107 = ($106|0)==(0);
          if ($107) {
           $$0266$lcssa = $102;$$3$lcssa = $103;
           break;
          } else {
           $$0266409 = $102;$$3408 = $103;
          }
         }
        }
        $108 = HEAP8[$$3$lcssa>>0]|0;
        $109 = ($108<<24>>24)==(109);
        $110 = ((($$3$lcssa)) + 1|0);
        if ($109) {
         $111 = ($$0295|0)!=(0|0);
         $112 = $111&1;
         $$pr = HEAP8[$110>>0]|0;
         $$pre488 = ((($$3$lcssa)) + 2|0);
         $$0270 = $112;$$1309 = 0;$$4 = $110;$$pre$phiZ2D = $$pre488;$113 = $$pr;$324 = 0;
        } else {
         $$0270 = 0;$$1309 = $$0308414;$$4 = $$3$lcssa;$$pre$phiZ2D = $110;$113 = $108;$324 = $321;
        }
        switch ($113<<24>>24) {
        case 104:  {
         $114 = HEAP8[$$pre$phiZ2D>>0]|0;
         $115 = ($114<<24>>24)==(104);
         $116 = ((($$4)) + 2|0);
         $spec$select323 = $115 ? $116 : $$pre$phiZ2D;
         $spec$select324 = $115 ? -2 : -1;
         $$0268 = $spec$select324;$$5 = $spec$select323;
         break;
        }
        case 108:  {
         $117 = HEAP8[$$pre$phiZ2D>>0]|0;
         $118 = ($117<<24>>24)==(108);
         $119 = ((($$4)) + 2|0);
         $spec$select325 = $118 ? $119 : $$pre$phiZ2D;
         $spec$select326 = $118 ? 3 : 1;
         $$0268 = $spec$select326;$$5 = $spec$select325;
         break;
        }
        case 106:  {
         $$0268 = 3;$$5 = $$pre$phiZ2D;
         break;
        }
        case 116: case 122:  {
         $$0268 = 1;$$5 = $$pre$phiZ2D;
         break;
        }
        case 76:  {
         $$0268 = 2;$$5 = $$pre$phiZ2D;
         break;
        }
        case 110: case 112: case 67: case 83: case 91: case 99: case 115: case 88: case 71: case 70: case 69: case 65: case 103: case 102: case 101: case 97: case 120: case 117: case 111: case 105: case 100:  {
         $$0268 = 0;$$5 = $$4;
         break;
        }
        default: {
         $$8316 = $$1309;$325 = $324;
         label = 143;
         break L6;
        }
        }
        $120 = HEAP8[$$5>>0]|0;
        $121 = $120&255;
        $122 = $121 & 47;
        $123 = ($122|0)==(3);
        $124 = $121 | 32;
        $spec$select = $123 ? $124 : $121;
        $spec$select319 = $123 ? 1 : $$0268;
        $trunc = $spec$select&255;
        switch ($trunc<<24>>24) {
        case 99:  {
         $125 = ($$0266$lcssa|0)>(1);
         $spec$select320 = $125 ? $$0266$lcssa : 1;
         $$1267 = $spec$select320;$$1286 = $$0285419;
         break;
        }
        case 91:  {
         $$1267 = $$0266$lcssa;$$1286 = $$0285419;
         break;
        }
        case 110:  {
         $126 = ($$0285419|0)<(0);
         $127 = $126 << 31 >> 31;
         _store_int($$0295,$spec$select319,$$0285419,$127);
         $$12 = $$5;$$1291 = $$0290416;$$2287 = $$0285419;$$7315 = $$1309;$322 = $324;
         break L8;
         break;
        }
        default: {
         ___shlim($0,0);
         while(1) {
          $128 = HEAP32[$13>>2]|0;
          $129 = HEAP32[$14>>2]|0;
          $130 = ($128>>>0)<($129>>>0);
          if ($130) {
           $131 = ((($128)) + 1|0);
           HEAP32[$13>>2] = $131;
           $132 = HEAP8[$128>>0]|0;
           $133 = $132&255;
           $135 = $133;
          } else {
           $134 = (___shgetc($0)|0);
           $135 = $134;
          }
          $136 = (_isspace($135)|0);
          $137 = ($136|0)==(0);
          if ($137) {
           break;
          }
         }
         $138 = HEAP32[$14>>2]|0;
         $139 = ($138|0)==(0|0);
         if ($139) {
          $$pre485 = HEAP32[$13>>2]|0;
          $147 = $$pre485;
         } else {
          $140 = HEAP32[$13>>2]|0;
          $141 = ((($140)) + -1|0);
          HEAP32[$13>>2] = $141;
          $142 = $141;
          $147 = $142;
         }
         $143 = HEAP32[$15>>2]|0;
         $144 = HEAP32[$16>>2]|0;
         $145 = (($143) + ($$0285419))|0;
         $146 = (($145) + ($147))|0;
         $148 = (($146) - ($144))|0;
         $$1267 = $$0266$lcssa;$$1286 = $148;
        }
        }
        ___shlim($0,$$1267);
        $149 = HEAP32[$13>>2]|0;
        $150 = HEAP32[$14>>2]|0;
        $151 = ($149>>>0)<($150>>>0);
        if ($151) {
         $152 = ((($149)) + 1|0);
         HEAP32[$13>>2] = $152;
         $156 = $150;
        } else {
         $153 = (___shgetc($0)|0);
         $154 = ($153|0)<(0);
         if ($154) {
          $$8316 = $$1309;$325 = $324;
          label = 143;
          break L6;
         }
         $$pr332 = HEAP32[$14>>2]|0;
         $156 = $$pr332;
        }
        $155 = ($156|0)==(0|0);
        if (!($155)) {
         $157 = HEAP32[$13>>2]|0;
         $158 = ((($157)) + -1|0);
         HEAP32[$13>>2] = $158;
        }
        L59: do {
         switch ($trunc<<24>>24) {
         case 91: case 99: case 115:  {
          $159 = ($spec$select|0)==(99);
          $160 = $spec$select | 16;
          $161 = ($160|0)==(115);
          L61: do {
           if ($161) {
            $162 = ($spec$select|0)==(115);
            (_memset(($4|0),-1,257)|0);
            HEAP8[$4>>0] = 0;
            if ($162) {
             HEAP8[$18>>0] = 0;
             ;HEAP16[$17>>1]=0|0;HEAP16[$17+2>>1]=0|0;HEAP8[$17+4>>0]=0|0;
             $$10 = $$5;
            } else {
             $$10 = $$5;
            }
           } else {
            $163 = ((($$5)) + 1|0);
            $164 = HEAP8[$163>>0]|0;
            $165 = ($164<<24>>24)==(94);
            $166 = ((($$5)) + 2|0);
            $$0294 = $165&1;
            $$6 = $165 ? $166 : $163;
            (_memset(($4|0),($$0294|0),257)|0);
            HEAP8[$4>>0] = 0;
            $167 = HEAP8[$$6>>0]|0;
            switch ($167<<24>>24) {
            case 45:  {
             $168 = ((($$6)) + 1|0);
             $169 = $$0294 ^ 1;
             $170 = $169&255;
             HEAP8[$19>>0] = $170;
             $$7 = $168;$$pre$phi493Z2D = $170;
             break;
            }
            case 93:  {
             $171 = ((($$6)) + 1|0);
             $172 = $$0294 ^ 1;
             $173 = $172&255;
             HEAP8[$20>>0] = $173;
             $$7 = $171;$$pre$phi493Z2D = $173;
             break;
            }
            default: {
             $$pre490 = $$0294 ^ 1;
             $$pre492 = $$pre490&255;
             $$7 = $$6;$$pre$phi493Z2D = $$pre492;
            }
            }
            $$8 = $$7;
            while(1) {
             $174 = HEAP8[$$8>>0]|0;
             L72: do {
              switch ($174<<24>>24) {
              case 0:  {
               $$8316 = $$1309;$325 = $324;
               label = 143;
               break L6;
               break;
              }
              case 93:  {
               $$10 = $$8;
               break L61;
               break;
              }
              case 45:  {
               $175 = ((($$8)) + 1|0);
               $176 = HEAP8[$175>>0]|0;
               switch ($176<<24>>24) {
               case 93: case 0:  {
                $$9 = $$8;$187 = 45;
                break L72;
                break;
               }
               default: {
               }
               }
               $177 = ((($$8)) + -1|0);
               $178 = HEAP8[$177>>0]|0;
               $179 = ($178&255)<($176&255);
               if ($179) {
                $180 = $178&255;
                $$0288411 = $180;
                while(1) {
                 $181 = (($$0288411) + 1)|0;
                 $182 = (($4) + ($181)|0);
                 HEAP8[$182>>0] = $$pre$phi493Z2D;
                 $183 = HEAP8[$175>>0]|0;
                 $184 = $183&255;
                 $185 = ($181>>>0)<($184>>>0);
                 if ($185) {
                  $$0288411 = $181;
                 } else {
                  $$9 = $175;$187 = $183;
                  break;
                 }
                }
               } else {
                $$9 = $175;$187 = $176;
               }
               break;
              }
              default: {
               $$9 = $$8;$187 = $174;
              }
              }
             } while(0);
             $186 = $187&255;
             $188 = (($186) + 1)|0;
             $189 = (($4) + ($188)|0);
             HEAP8[$189>>0] = $$pre$phi493Z2D;
             $190 = ((($$9)) + 1|0);
             $$8 = $190;
            }
           }
          } while(0);
          $191 = (($$1267) + 1)|0;
          $192 = $159 ? $191 : 31;
          $193 = ($spec$select319|0)==(1);
          $194 = ($$0270|0)!=(0);
          L80: do {
           if ($193) {
            if ($194) {
             $195 = $192 << 2;
             $196 = (_malloc($195)|0);
             $197 = ($196|0)==(0|0);
             if ($197) {
              $$8316 = 0;$325 = 0;
              label = 143;
              break L6;
             } else {
              $327 = $196;
             }
            } else {
             $327 = $$0295;
            }
            HEAP32[$3>>2] = 0;
            HEAP32[$$sroa$2$0$$sroa_idx13>>2] = 0;
            $$0276$ph$ph = $192;$$0280$ph$ph = 0;$$ph$ph = $327;
            L85: while(1) {
             $198 = ($$ph$ph|0)==(0|0);
             $$0280$ph = $$0280$ph$ph;
             while(1) {
              L89: while(1) {
               $199 = HEAP32[$13>>2]|0;
               $200 = HEAP32[$14>>2]|0;
               $201 = ($199>>>0)<($200>>>0);
               if ($201) {
                $202 = ((($199)) + 1|0);
                HEAP32[$13>>2] = $202;
                $203 = HEAP8[$199>>0]|0;
                $204 = $203&255;
                $207 = $204;
               } else {
                $205 = (___shgetc($0)|0);
                $207 = $205;
               }
               $206 = (($207) + 1)|0;
               $208 = (($4) + ($206)|0);
               $209 = HEAP8[$208>>0]|0;
               $210 = ($209<<24>>24)==(0);
               if ($210) {
                break L85;
               }
               $211 = $207&255;
               HEAP8[$6>>0] = $211;
               $212 = (_mbrtowc($5,$6,1,$3)|0);
               switch ($212|0) {
               case -1:  {
                $$8316 = 0;$325 = $$ph$ph;
                label = 143;
                break L6;
                break;
               }
               case -2:  {
                break;
               }
               default: {
                break L89;
               }
               }
              }
              if ($198) {
               $$1281 = $$0280$ph;
              } else {
               $213 = (($$ph$ph) + ($$0280$ph<<2)|0);
               $214 = (($$0280$ph) + 1)|0;
               $215 = HEAP32[$5>>2]|0;
               HEAP32[$213>>2] = $215;
               $$1281 = $214;
              }
              $216 = ($$1281|0)==($$0276$ph$ph|0);
              $or$cond = $194 & $216;
              if ($or$cond) {
               break;
              } else {
               $$0280$ph = $$1281;
              }
             }
             $factor335 = $$0276$ph$ph << 1;
             $217 = $factor335 | 1;
             $218 = $217 << 2;
             $219 = (_realloc($$ph$ph,$218)|0);
             $220 = ($219|0)==(0|0);
             if ($220) {
              $$8316 = 0;$325 = $$ph$ph;
              label = 143;
              break L6;
             } else {
              $$0276$ph$ph = $217;$$0280$ph$ph = $$1281;$$ph$ph = $219;
             }
            }
            $221 = (_mbsinit($3)|0);
            $222 = ($221|0)==(0);
            if ($222) {
             $$8316 = 0;$325 = $$ph$ph;
             label = 143;
             break L6;
            } else {
             $$4284 = $$0280$ph;$$5313 = 0;$$6302 = $$ph$ph;$328 = $$ph$ph;
            }
           } else {
            if ($194) {
             $223 = (_malloc($192)|0);
             $224 = ($223|0)==(0|0);
             if ($224) {
              $$8316 = 0;$325 = 0;
              label = 143;
              break L6;
             }
             $$2278$ph = $192;$$2282$ph = 0;$$2310$ph = $223;
             while(1) {
              $$2282 = $$2282$ph;
              while(1) {
               $225 = HEAP32[$13>>2]|0;
               $226 = HEAP32[$14>>2]|0;
               $227 = ($225>>>0)<($226>>>0);
               if ($227) {
                $228 = ((($225)) + 1|0);
                HEAP32[$13>>2] = $228;
                $229 = HEAP8[$225>>0]|0;
                $230 = $229&255;
                $233 = $230;
               } else {
                $231 = (___shgetc($0)|0);
                $233 = $231;
               }
               $232 = (($233) + 1)|0;
               $234 = (($4) + ($232)|0);
               $235 = HEAP8[$234>>0]|0;
               $236 = ($235<<24>>24)==(0);
               if ($236) {
                $$4284 = $$2282;$$5313 = $$2310$ph;$$6302 = 0;$328 = 0;
                break L80;
               }
               $237 = $233&255;
               $238 = (($$2282) + 1)|0;
               $239 = (($$2310$ph) + ($$2282)|0);
               HEAP8[$239>>0] = $237;
               $240 = ($238|0)==($$2278$ph|0);
               if ($240) {
                break;
               } else {
                $$2282 = $238;
               }
              }
              $factor = $$2278$ph << 1;
              $241 = $factor | 1;
              $242 = (_realloc($$2310$ph,$241)|0);
              $243 = ($242|0)==(0|0);
              if ($243) {
               $$8316 = $$2310$ph;$325 = 0;
               label = 143;
               break L6;
              } else {
               $$2278$ph = $241;$$2282$ph = $238;$$2310$ph = $242;
              }
             }
            }
            $244 = ($$0295|0)==(0|0);
            if ($244) {
             while(1) {
              $260 = HEAP32[$13>>2]|0;
              $261 = HEAP32[$14>>2]|0;
              $262 = ($260>>>0)<($261>>>0);
              if ($262) {
               $263 = ((($260)) + 1|0);
               HEAP32[$13>>2] = $263;
               $264 = HEAP8[$260>>0]|0;
               $265 = $264&255;
               $268 = $265;
              } else {
               $266 = (___shgetc($0)|0);
               $268 = $266;
              }
              $267 = (($268) + 1)|0;
              $269 = (($4) + ($267)|0);
              $270 = HEAP8[$269>>0]|0;
              $271 = ($270<<24>>24)==(0);
              if ($271) {
               $$4284 = 0;$$5313 = 0;$$6302 = 0;$328 = 0;
               break L80;
              }
             }
            }
            $$3283 = 0;
            while(1) {
             $245 = HEAP32[$13>>2]|0;
             $246 = HEAP32[$14>>2]|0;
             $247 = ($245>>>0)<($246>>>0);
             if ($247) {
              $248 = ((($245)) + 1|0);
              HEAP32[$13>>2] = $248;
              $249 = HEAP8[$245>>0]|0;
              $250 = $249&255;
              $253 = $250;
             } else {
              $251 = (___shgetc($0)|0);
              $253 = $251;
             }
             $252 = (($253) + 1)|0;
             $254 = (($4) + ($252)|0);
             $255 = HEAP8[$254>>0]|0;
             $256 = ($255<<24>>24)==(0);
             if ($256) {
              $$4284 = $$3283;$$5313 = $$0295;$$6302 = 0;$328 = 0;
              break L80;
             }
             $257 = $253&255;
             $258 = (($$3283) + 1)|0;
             $259 = (($$0295) + ($$3283)|0);
             HEAP8[$259>>0] = $257;
             $$3283 = $258;
            }
           }
          } while(0);
          $272 = HEAP32[$14>>2]|0;
          $273 = ($272|0)==(0|0);
          if ($273) {
           $$pre487 = HEAP32[$13>>2]|0;
           $280 = $$pre487;
          } else {
           $274 = HEAP32[$13>>2]|0;
           $275 = ((($274)) + -1|0);
           HEAP32[$13>>2] = $275;
           $276 = $275;
           $280 = $276;
          }
          $277 = HEAP32[$15>>2]|0;
          $278 = HEAP32[$16>>2]|0;
          $279 = (($280) - ($278))|0;
          $281 = (($279) + ($277))|0;
          $282 = ($281|0)==(0);
          if ($282) {
           $$10318 = $$5313;$$2 = $$0270;$$2292 = $$0290416;$318 = $328;
           break L6;
          }
          $$not = $159 ^ 1;
          $283 = ($281|0)==($$1267|0);
          $or$cond321 = $283 | $$not;
          if (!($or$cond321)) {
           $$10318 = $$5313;$$2 = $$0270;$$2292 = $$0290416;$318 = $328;
           break L6;
          }
          do {
           if ($194) {
            if ($193) {
             HEAP32[$$0295>>2] = $$6302;
             break;
            } else {
             HEAP32[$$0295>>2] = $$5313;
             break;
            }
           }
          } while(0);
          if ($159) {
           $$11 = $$10;$$6314 = $$5313;$326 = $328;
          } else {
           $284 = ($$6302|0)==(0|0);
           if (!($284)) {
            $285 = (($$6302) + ($$4284<<2)|0);
            HEAP32[$285>>2] = 0;
           }
           $286 = ($$5313|0)==(0|0);
           if ($286) {
            $$11 = $$10;$$6314 = 0;$326 = $328;
            break L59;
           }
           $287 = (($$5313) + ($$4284)|0);
           HEAP8[$287>>0] = 0;
           $$11 = $$10;$$6314 = $$5313;$326 = $328;
          }
          break;
         }
         case 120: case 88: case 112:  {
          $$0272 = 16;
          label = 131;
          break;
         }
         case 111:  {
          $$0272 = 8;
          label = 131;
          break;
         }
         case 117: case 100:  {
          $$0272 = 10;
          label = 131;
          break;
         }
         case 105:  {
          $$0272 = 0;
          label = 131;
          break;
         }
         case 71: case 103: case 70: case 102: case 69: case 101: case 65: case 97:  {
          $298 = (+___floatscan($0,$spec$select319,0));
          $299 = HEAP32[$15>>2]|0;
          $300 = HEAP32[$13>>2]|0;
          $301 = HEAP32[$16>>2]|0;
          $302 = (($301) - ($300))|0;
          $303 = ($299|0)==($302|0);
          if ($303) {
           $$10318 = $$1309;$$2 = $$0270;$$2292 = $$0290416;$318 = $324;
           break L6;
          }
          $304 = ($$0295|0)==(0|0);
          if ($304) {
           $$11 = $$5;$$6314 = $$1309;$326 = $324;
          } else {
           switch ($spec$select319|0) {
           case 0:  {
            $305 = $298;
            HEAPF32[$$0295>>2] = $305;
            $$11 = $$5;$$6314 = $$1309;$326 = $324;
            break L59;
            break;
           }
           case 1:  {
            HEAPF64[$$0295>>3] = $298;
            $$11 = $$5;$$6314 = $$1309;$326 = $324;
            break L59;
            break;
           }
           case 2:  {
            HEAPF64[$$0295>>3] = $298;
            $$11 = $$5;$$6314 = $$1309;$326 = $324;
            break L59;
            break;
           }
           default: {
            $$11 = $$5;$$6314 = $$1309;$326 = $324;
            break L59;
           }
           }
          }
          break;
         }
         default: {
          $$11 = $$5;$$6314 = $$1309;$326 = $324;
         }
         }
        } while(0);
        do {
         if ((label|0) == 131) {
          label = 0;
          $288 = (___intscan($0,$$0272,0,-1,-1)|0);
          $289 = (getTempRet0() | 0);
          $290 = HEAP32[$15>>2]|0;
          $291 = HEAP32[$13>>2]|0;
          $292 = HEAP32[$16>>2]|0;
          $293 = (($292) - ($291))|0;
          $294 = ($290|0)==($293|0);
          if ($294) {
           $$10318 = $$1309;$$2 = $$0270;$$2292 = $$0290416;$318 = $324;
           break L6;
          }
          $295 = ($spec$select|0)==(112);
          $296 = ($$0295|0)!=(0|0);
          $or$cond3 = $296 & $295;
          if ($or$cond3) {
           $297 = $288;
           HEAP32[$$0295>>2] = $297;
           $$11 = $$5;$$6314 = $$1309;$326 = $324;
           break;
          } else {
           _store_int($$0295,$spec$select319,$288,$289);
           $$11 = $$5;$$6314 = $$1309;$326 = $324;
           break;
          }
         }
        } while(0);
        $306 = HEAP32[$15>>2]|0;
        $307 = HEAP32[$13>>2]|0;
        $308 = HEAP32[$16>>2]|0;
        $309 = (($306) + ($$1286))|0;
        $310 = (($309) + ($307))|0;
        $311 = (($310) - ($308))|0;
        $312 = ($$0295|0)!=(0|0);
        $313 = $312&1;
        $spec$select322 = (($$0290416) + ($313))|0;
        $$12 = $$11;$$1291 = $spec$select322;$$2287 = $311;$$7315 = $$6314;$322 = $326;
        break L8;
       }
      } while(0);
      $55 = $52&1;
      $56 = (($$0273420) + ($55)|0);
      ___shlim($0,0);
      $57 = HEAP32[$13>>2]|0;
      $58 = HEAP32[$14>>2]|0;
      $59 = ($57>>>0)<($58>>>0);
      if ($59) {
       $60 = ((($57)) + 1|0);
       HEAP32[$13>>2] = $60;
       $61 = HEAP8[$57>>0]|0;
       $62 = $61&255;
       $67 = $62;
      } else {
       $63 = (___shgetc($0)|0);
       $67 = $63;
      }
      $64 = HEAP8[$56>>0]|0;
      $65 = $64&255;
      $66 = ($67|0)==($65|0);
      if (!($66)) {
       label = 23;
       break L6;
      }
      $74 = (($$0285419) + 1)|0;
      $$12 = $56;$$1291 = $$0290416;$$2287 = $74;$$7315 = $$0308414;$322 = $321;
     } else {
      $$1274 = $$0273420;
      while(1) {
       $25 = ((($$1274)) + 1|0);
       $26 = HEAP8[$25>>0]|0;
       $27 = $26&255;
       $28 = (_isspace($27)|0);
       $29 = ($28|0)==(0);
       if ($29) {
        break;
       } else {
        $$1274 = $25;
       }
      }
      ___shlim($0,0);
      while(1) {
       $30 = HEAP32[$13>>2]|0;
       $31 = HEAP32[$14>>2]|0;
       $32 = ($30>>>0)<($31>>>0);
       if ($32) {
        $33 = ((($30)) + 1|0);
        HEAP32[$13>>2] = $33;
        $34 = HEAP8[$30>>0]|0;
        $35 = $34&255;
        $37 = $35;
       } else {
        $36 = (___shgetc($0)|0);
        $37 = $36;
       }
       $38 = (_isspace($37)|0);
       $39 = ($38|0)==(0);
       if ($39) {
        break;
       }
      }
      $40 = HEAP32[$14>>2]|0;
      $41 = ($40|0)==(0|0);
      if ($41) {
       $$pre = HEAP32[$13>>2]|0;
       $49 = $$pre;
      } else {
       $42 = HEAP32[$13>>2]|0;
       $43 = ((($42)) + -1|0);
       HEAP32[$13>>2] = $43;
       $44 = $43;
       $49 = $44;
      }
      $45 = HEAP32[$15>>2]|0;
      $46 = HEAP32[$16>>2]|0;
      $47 = (($45) + ($$0285419))|0;
      $48 = (($47) + ($49))|0;
      $50 = (($48) - ($46))|0;
      $$12 = $$1274;$$1291 = $$0290416;$$2287 = $50;$$7315 = $$0308414;$322 = $321;
     }
    } while(0);
    $314 = ((($$12)) + 1|0);
    $315 = HEAP8[$314>>0]|0;
    $316 = ($315<<24>>24)==(0);
    if ($316) {
     $$3293 = $$1291;
     break L4;
    } else {
     $$0273420 = $314;$$0285419 = $$2287;$$0290416 = $$1291;$$0308414 = $$7315;$22 = $315;$321 = $322;
    }
   }
   if ((label|0) == 23) {
    $68 = HEAP32[$14>>2]|0;
    $69 = ($68|0)==(0|0);
    if (!($69)) {
     $70 = HEAP32[$13>>2]|0;
     $71 = ((($70)) + -1|0);
     HEAP32[$13>>2] = $71;
    }
    $72 = ($67|0)>(-1);
    $73 = ($$0290416|0)!=(0);
    $or$cond5 = $73 | $72;
    if ($or$cond5) {
     $$3293 = $$0290416;
     break;
    } else {
     $$1271 = 0;$$9317 = $$0308414;$323 = $321;
     label = 144;
    }
   }
   else if ((label|0) == 143) {
    $$old4 = ($$0290416|0)==(0);
    if ($$old4) {
     $$1271 = $$0270;$$9317 = $$8316;$323 = $325;
     label = 144;
    } else {
     $$10318 = $$8316;$$2 = $$0270;$$2292 = $$0290416;$318 = $325;
    }
   }
   if ((label|0) == 144) {
    $$10318 = $$9317;$$2 = $$1271;$$2292 = -1;$318 = $323;
   }
   $317 = ($$2|0)==(0);
   if ($317) {
    $$3293 = $$2292;
   } else {
    _free($$10318);
    _free($318);
    $$3293 = $$2292;
   }
  }
 } while(0);
 $319 = ($320|0)==(0);
 if (!($319)) {
  ___unlockfile($0);
 }
 STACKTOP = sp;return ($$3293|0);
}
function _arg_n($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arglist_current = 0, $arglist_next = 0, $expanded = 0, $expanded1 = 0, $expanded3 = 0, $expanded4 = 0, $expanded5 = 0, $vacopy_currentptr = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $vacopy_currentptr = HEAP32[$0>>2]|0;
 HEAP32[$2>>2] = $vacopy_currentptr;
 $$0 = $1;
 while(1) {
  $3 = ($$0>>>0)>(1);
  $arglist_current = HEAP32[$2>>2]|0;
  $4 = $arglist_current;
  $5 = ((0) + 4|0);
  $expanded1 = $5;
  $expanded = (($expanded1) - 1)|0;
  $6 = (($4) + ($expanded))|0;
  $7 = ((0) + 4|0);
  $expanded5 = $7;
  $expanded4 = (($expanded5) - 1)|0;
  $expanded3 = $expanded4 ^ -1;
  $8 = $6 & $expanded3;
  $9 = $8;
  $10 = HEAP32[$9>>2]|0;
  $arglist_next = ((($9)) + 4|0);
  HEAP32[$2>>2] = $arglist_next;
  $11 = (($$0) + -1)|0;
  if ($3) {
   $$0 = $11;
  } else {
   break;
  }
 }
 STACKTOP = sp;return ($10|0);
}
function _store_int($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ($0|0)==(0|0);
 L1: do {
  if (!($4)) {
   switch ($1|0) {
   case -2:  {
    $5 = $2&255;
    HEAP8[$0>>0] = $5;
    break L1;
    break;
   }
   case -1:  {
    $6 = $2&65535;
    HEAP16[$0>>1] = $6;
    break L1;
    break;
   }
   case 0:  {
    HEAP32[$0>>2] = $2;
    break L1;
    break;
   }
   case 1:  {
    HEAP32[$0>>2] = $2;
    break L1;
    break;
   }
   case 3:  {
    $7 = $0;
    $8 = $7;
    HEAP32[$8>>2] = $2;
    $9 = (($7) + 4)|0;
    $10 = $9;
    HEAP32[$10>>2] = $3;
    break L1;
    break;
   }
   default: {
    break L1;
   }
   }
  }
 } while(0);
 return;
}
function _mbsinit($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $4 = 1;
 } else {
  $2 = HEAP32[$0>>2]|0;
  $3 = ($2|0)==(0);
  $phitmp = $3&1;
  $4 = $phitmp;
 }
 return ($4|0);
}
function ___string_read($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$027 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 84|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + 256)|0;
 $6 = (_memchr($4,0,$5)|0);
 $7 = ($6|0)==(0|0);
 $8 = $6;
 $9 = $4;
 $10 = (($8) - ($9))|0;
 $$027 = $7 ? $5 : $10;
 $11 = ($$027>>>0)<($2>>>0);
 $spec$select = $11 ? $$027 : $2;
 (_memcpy(($1|0),($4|0),($spec$select|0))|0);
 $12 = (($4) + ($spec$select)|0);
 $13 = ((($0)) + 4|0);
 HEAP32[$13>>2] = $12;
 $14 = (($4) + ($$027)|0);
 $15 = ((($0)) + 8|0);
 HEAP32[$15>>2] = $14;
 HEAP32[$3>>2] = $14;
 return ($spec$select|0);
}
function _fseek($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (___fseeko($0,$1,$2)|0);
 return ($3|0);
}
function ___fseeko($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 76|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)>(-1);
 if ($5) {
  $7 = (___lockfile($0)|0);
  $phitmp = ($7|0)==(0);
  $8 = (___fseeko_unlocked($0,$1,$2)|0);
  if ($phitmp) {
   $9 = $8;
  } else {
   ___unlockfile($0);
   $9 = $8;
  }
 } else {
  $6 = (___fseeko_unlocked($0,$1,$2)|0);
  $9 = $6;
 }
 return ($9|0);
}
function ___fseeko_unlocked($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$019 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(1);
 if ($3) {
  $4 = ((($0)) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($0)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (($1) - ($5))|0;
  $9 = (($8) + ($7))|0;
  $$019 = $9;
 } else {
  $$019 = $1;
 }
 $10 = ((($0)) + 20|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($0)) + 28|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($11>>>0)>($13>>>0);
 if ($14) {
  $15 = ((($0)) + 36|0);
  $16 = HEAP32[$15>>2]|0;
  (FUNCTION_TABLE_iiii[$16 & 63]($0,0,0)|0);
  $17 = HEAP32[$10>>2]|0;
  $18 = ($17|0)==(0|0);
  if ($18) {
   $$0 = -1;
  } else {
   label = 5;
  }
 } else {
  label = 5;
 }
 if ((label|0) == 5) {
  $19 = ((($0)) + 16|0);
  HEAP32[$19>>2] = 0;
  HEAP32[$12>>2] = 0;
  HEAP32[$10>>2] = 0;
  $20 = ((($0)) + 40|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (FUNCTION_TABLE_iiii[$21 & 63]($0,$$019,$2)|0);
  $23 = ($22|0)<(0);
  if ($23) {
   $$0 = -1;
  } else {
   $24 = ((($0)) + 8|0);
   HEAP32[$24>>2] = 0;
   $25 = ((($0)) + 4|0);
   HEAP32[$25>>2] = 0;
   $26 = HEAP32[$0>>2]|0;
   $27 = $26 & -17;
   HEAP32[$0>>2] = $27;
   $$0 = 0;
  }
 }
 return ($$0|0);
}
function _mbrlen($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0|0);
 $4 = $3 ? 49192 : $2;
 $5 = (_mbrtowc(0,$0,$1,$4)|0);
 return ($5|0);
}
function _mbsnrtowcs($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$04975 = 0, $$05374 = 0, $$056 = 0, $$150 = 0, $$154 = 0, $$15773 = 0, $$164 = 0, $$176 = 0, $$2 = 0, $$25170 = 0, $$25569 = 0, $$258 = 0, $$352 = 0, $$359 = 0, $$371 = 0, $$468 = 0, $$cast = 0, $$pr$pre = 0, $10 = 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0;
 var $or$cond72 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1040|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1040|0);
 $5 = sp;
 $6 = sp + 1024|0;
 $7 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $7;
 $8 = ($0|0)!=(0|0);
 $$056 = $8 ? $3 : 256;
 $$0 = $8 ? $0 : $5;
 $$cast = $7;
 $9 = ($7|0)!=(0);
 $10 = ($$056|0)!=(0);
 $or$cond72 = $10 & $9;
 L1: do {
  if ($or$cond72) {
   $$04975 = 0;$$05374 = $2;$$15773 = $$056;$$176 = $$0;$44 = $$cast;
   while(1) {
    $11 = $$05374 >>> 2;
    $12 = ($11>>>0)>=($$15773>>>0);
    $13 = ($$05374>>>0)>(131);
    $14 = $13 | $12;
    if (!($14)) {
     $$150 = $$04975;$$154 = $$05374;$$164 = $$176;$$359 = $$15773;$26 = $44;
     break L1;
    }
    $spec$select = $12 ? $$15773 : $11;
    $15 = (($$05374) - ($spec$select))|0;
    $16 = (_mbsrtowcs($$176,$6,$spec$select,$4)|0);
    $17 = ($16|0)==(-1);
    if ($17) {
     break;
    }
    $18 = ($$176|0)==($5|0);
    $19 = (($$176) + ($16<<2)|0);
    $20 = $18 ? 0 : $16;
    $$258 = (($$15773) - ($20))|0;
    $$2 = $18 ? $$176 : $19;
    $21 = (($16) + ($$04975))|0;
    $22 = HEAP32[$6>>2]|0;
    $23 = ($22|0)!=(0|0);
    $24 = ($$258|0)!=(0);
    $or$cond = $24 & $23;
    if ($or$cond) {
     $$04975 = $21;$$05374 = $15;$$15773 = $$258;$$176 = $$2;$44 = $22;
    } else {
     $$150 = $21;$$154 = $15;$$164 = $$2;$$359 = $$258;$26 = $22;
     break L1;
    }
   }
   $$pr$pre = HEAP32[$6>>2]|0;
   $$150 = -1;$$154 = $15;$$164 = $$176;$$359 = 0;$26 = $$pr$pre;
  } else {
   $$150 = 0;$$154 = $2;$$164 = $$0;$$359 = $$056;$26 = $$cast;
  }
 } while(0);
 $25 = ($26|0)==(0|0);
 L9: do {
  if ($25) {
   $$352 = $$150;
  } else {
   $27 = ($$359|0)!=(0);
   $28 = ($$154|0)!=(0);
   $29 = $27 & $28;
   if ($29) {
    $$25170 = $$150;$$25569 = $$154;$$371 = $$164;$$468 = $$359;$30 = $26;
    while(1) {
     $31 = (_mbrtowc($$371,$30,$$25569,$4)|0);
     $32 = (($31) + 2)|0;
     $33 = ($32>>>0)<(3);
     if ($33) {
      break;
     }
     $34 = HEAP32[$6>>2]|0;
     $35 = (($34) + ($31)|0);
     HEAP32[$6>>2] = $35;
     $36 = (($$25569) - ($31))|0;
     $37 = ((($$371)) + 4|0);
     $38 = (($$468) + -1)|0;
     $39 = (($$25170) + 1)|0;
     $40 = ($38|0)!=(0);
     $41 = ($36|0)!=(0);
     $42 = $40 & $41;
     if ($42) {
      $$25170 = $39;$$25569 = $36;$$371 = $37;$$468 = $38;$30 = $35;
     } else {
      $$352 = $39;
      break L9;
     }
    }
    switch ($31|0) {
    case -1:  {
     $$352 = $31;
     break L9;
     break;
    }
    case 0:  {
     HEAP32[$6>>2] = 0;
     $$352 = $$25170;
     break L9;
     break;
    }
    default: {
     HEAP32[$4>>2] = 0;
     $$352 = $$25170;
     break L9;
    }
    }
   } else {
    $$352 = $$150;
   }
  }
 } while(0);
 if ($8) {
  $43 = HEAP32[$6>>2]|0;
  HEAP32[$1>>2] = $43;
 }
 STACKTOP = sp;return ($$352|0);
}
function _mbsrtowcs($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0105132 = 0, $$0111131 = 0, $$097 = 0, $$098$lcssa = 0, $$098133 = 0, $$10 = 0, $$11$ph = 0, $$1106$ph = 0, $$1106147 = 0, $$1112 = 0, $$1112$ph = 0, $$11122124 = 0, $$11182 = 0, $$11183 = 0, $$199 = 0, $$199$ph = 0, $$2 = 0, $$2100154 = 0, $$2107135 = 0, $$2113153 = 0;
 var $$3101 = 0, $$3108 = 0, $$3108$ph = 0, $$3108176 = 0, $$3114 = 0, $$4 = 0, $$4102 = 0, $$4109 = 0, $$4115 = 0, $$5 = 0, $$5103 = 0, $$5110 = 0, $$5110180 = 0, $$5110181 = 0, $$5116$ph = 0, $$5116146 = 0, $$6 = 0, $$6104$lcssa = 0, $$6104$ph = 0, $$6104148 = 0;
 var $$6117134 = 0, $$7118 = 0, $$7118$ph = 0, $$7118175 = 0, $$7136 = 0, $$8 = 0, $$8$ph = 0, $$8119 = 0, $$8177 = 0, $$9 = 0, $$9$sink = 0, $$9120 = 0, $$9120179 = 0, $$pre = 0, $$pre$phi173Z2D = 0, $$pre$phi174Z2D = 0, $$pre$phiZ2D = 0, $$pre$pre = 0, $$pre171 = 0, $$pre172 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP32[$1>>2]|0;
 $5 = ($3|0)==(0|0);
 if ($5) {
  label = 5;
 } else {
  $6 = HEAP32[$3>>2]|0;
  $7 = ($6|0)==(0);
  if ($7) {
   label = 5;
  } else {
   $8 = ($0|0)==(0|0);
   if ($8) {
    $$2 = $6;$$4102 = $4;$$4115 = $2;
    label = 26;
   } else {
    HEAP32[$3>>2] = 0;
    $$4 = $6;$$4109 = $0;$$8119 = $2;$$9 = $4;
    label = 48;
   }
  }
 }
 L5: do {
  if ((label|0) == 5) {
   $9 = (___pthread_self_417()|0);
   $10 = ((($9)) + 188|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)==(0|0);
   $14 = ($0|0)!=(0|0);
   if (!($13)) {
    if ($14) {
     $$1106$ph = $0;$$5116$ph = $2;$$6104$ph = $4;
     label = 33;
     break;
    } else {
     $$1112$ph = $2;$$199$ph = $4;
     label = 15;
     break;
    }
   }
   if (!($14)) {
    $15 = (_strlen($4)|0);
    $$097 = $15;
    label = 63;
    break;
   }
   $16 = ($2|0)==(0);
   L13: do {
    if ($16) {
     $$098$lcssa = $4;
    } else {
     $$0105132 = $0;$$0111131 = $2;$$098133 = $4;
     while(1) {
      $17 = HEAP8[$$098133>>0]|0;
      $18 = ($17<<24>>24)==(0);
      if ($18) {
       break;
      }
      $19 = ((($$098133)) + 1|0);
      $20 = $17 << 24 >> 24;
      $21 = $20 & 57343;
      $22 = ((($$0105132)) + 4|0);
      HEAP32[$$0105132>>2] = $21;
      $23 = (($$0111131) + -1)|0;
      $24 = ($23|0)==(0);
      if ($24) {
       $$098$lcssa = $19;
       break L13;
      } else {
       $$0105132 = $22;$$0111131 = $23;$$098133 = $19;
      }
     }
     HEAP32[$$0105132>>2] = 0;
     HEAP32[$1>>2] = 0;
     $25 = (($2) - ($$0111131))|0;
     $$097 = $25;
     label = 63;
     break L5;
    }
   } while(0);
   HEAP32[$1>>2] = $$098$lcssa;
   $$097 = $2;
   label = 63;
  }
 } while(0);
 L20: while(1) {
  L21: do {
   if ((label|0) == 15) {
    label = 0;
    $$1112 = $$1112$ph;$$199 = $$199$ph;
    while(1) {
     $26 = HEAP8[$$199>>0]|0;
     $27 = $26&255;
     $28 = (($27) + -1)|0;
     $29 = ($28>>>0)<(127);
     if ($29) {
      $30 = $$199;
      $31 = $30 & 3;
      $32 = ($31|0)==(0);
      if ($32) {
       $33 = HEAP32[$$199>>2]|0;
       $34 = (($33) + -16843009)|0;
       $35 = $34 | $33;
       $36 = $35 & -2139062144;
       $37 = ($36|0)==(0);
       $38 = $33&255;
       if ($37) {
        $$2100154 = $$199;$$2113153 = $$1112;
        while(1) {
         $39 = ((($$2100154)) + 4|0);
         $40 = (($$2113153) + -4)|0;
         $41 = HEAP32[$39>>2]|0;
         $42 = (($41) + -16843009)|0;
         $43 = $42 | $41;
         $44 = $43 & -2139062144;
         $45 = ($44|0)==(0);
         if ($45) {
          $$2100154 = $39;$$2113153 = $40;
         } else {
          break;
         }
        }
        $46 = $41&255;
        $$3101 = $39;$$3114 = $40;$48 = $46;
       } else {
        $$3101 = $$199;$$3114 = $$1112;$48 = $38;
       }
      } else {
       $$3101 = $$199;$$3114 = $$1112;$48 = $26;
      }
     } else {
      $$3101 = $$199;$$3114 = $$1112;$48 = $26;
     }
     $47 = $48&255;
     $49 = (($47) + -1)|0;
     $50 = ($49>>>0)<(127);
     if (!($50)) {
      break;
     }
     $51 = ((($$3101)) + 1|0);
     $52 = (($$3114) + -1)|0;
     $$1112 = $52;$$199 = $51;
    }
    $53 = (($47) + -194)|0;
    $54 = ($53>>>0)>(50);
    if ($54) {
     $$11182 = $$3101;$$5110180 = $0;$$9120179 = $$3114;
     label = 57;
    } else {
     $55 = ((($$3101)) + 1|0);
     $56 = (14096 + ($53<<2)|0);
     $57 = HEAP32[$56>>2]|0;
     $$2 = $57;$$4102 = $55;$$4115 = $$3114;
     label = 26;
     continue L20;
    }
   }
   else if ((label|0) == 26) {
    label = 0;
    $58 = HEAP8[$$4102>>0]|0;
    $59 = $58&255;
    $60 = $59 >>> 3;
    $61 = (($60) + -16)|0;
    $62 = $$2 >> 26;
    $63 = (($60) + ($62))|0;
    $64 = $61 | $63;
    $65 = ($64>>>0)>(7);
    if ($65) {
     $$5110 = $0;$$6 = $$2;$$9$sink = $$4102;$$9120 = $$4115;
     label = 56;
    } else {
     $66 = ((($$4102)) + 1|0);
     $67 = $$2 & 33554432;
     $68 = ($67|0)==(0);
     if ($68) {
      $$5103 = $66;
     } else {
      $69 = HEAP8[$66>>0]|0;
      $70 = $69 & -64;
      $71 = ($70<<24>>24)==(-128);
      if (!($71)) {
       $$5110 = $0;$$6 = $$2;$$9$sink = $$4102;$$9120 = $$4115;
       label = 56;
       break;
      }
      $72 = ((($$4102)) + 2|0);
      $73 = $$2 & 524288;
      $74 = ($73|0)==(0);
      if ($74) {
       $$5103 = $72;
      } else {
       $75 = HEAP8[$72>>0]|0;
       $76 = $75 & -64;
       $77 = ($76<<24>>24)==(-128);
       if (!($77)) {
        $$5110 = $0;$$6 = $$2;$$9$sink = $$4102;$$9120 = $$4115;
        label = 56;
        break;
       }
       $78 = ((($$4102)) + 3|0);
       $$5103 = $78;
      }
     }
     $79 = (($$4115) + -1)|0;
     $$1112$ph = $79;$$199$ph = $$5103;
     label = 15;
     continue L20;
    }
   }
   else if ((label|0) == 33) {
    label = 0;
    $80 = ($$5116$ph|0)==(0);
    L23: do {
     if ($80) {
      $$6104$lcssa = $$6104$ph;
     } else {
      $$1106147 = $$1106$ph;$$5116146 = $$5116$ph;$$6104148 = $$6104$ph;
      while(1) {
       $81 = HEAP8[$$6104148>>0]|0;
       $82 = $81&255;
       $83 = (($82) + -1)|0;
       $84 = ($83>>>0)<(127);
       if ($84) {
        $85 = $$6104148;
        $86 = $85 & 3;
        $87 = ($86|0)==(0);
        $88 = ($$5116146>>>0)>(4);
        $or$cond = $87 & $88;
        if ($or$cond) {
         $$2107135 = $$1106147;$$6117134 = $$5116146;$$7136 = $$6104148;
         while(1) {
          $89 = HEAP32[$$7136>>2]|0;
          $90 = (($89) + -16843009)|0;
          $91 = $90 | $89;
          $92 = $91 & -2139062144;
          $93 = ($92|0)==(0);
          if (!($93)) {
           label = 42;
           break;
          }
          $94 = ((($$7136)) + 1|0);
          $95 = $89 & 255;
          $96 = ((($$2107135)) + 4|0);
          HEAP32[$$2107135>>2] = $95;
          $97 = ((($$7136)) + 2|0);
          $98 = HEAP8[$94>>0]|0;
          $99 = $98&255;
          $100 = ((($$2107135)) + 8|0);
          HEAP32[$96>>2] = $99;
          $101 = ((($$7136)) + 3|0);
          $102 = HEAP8[$97>>0]|0;
          $103 = $102&255;
          $104 = ((($$2107135)) + 12|0);
          HEAP32[$100>>2] = $103;
          $105 = ((($$7136)) + 4|0);
          $106 = HEAP8[$101>>0]|0;
          $107 = $106&255;
          $108 = ((($$2107135)) + 16|0);
          HEAP32[$104>>2] = $107;
          $109 = (($$6117134) + -4)|0;
          $110 = ($109>>>0)>(4);
          if ($110) {
           $$2107135 = $108;$$6117134 = $109;$$7136 = $105;
          } else {
           label = 41;
           break;
          }
         }
         if ((label|0) == 41) {
          label = 0;
          $$pre$pre = HEAP8[$105>>0]|0;
          $$3108$ph = $108;$$7118$ph = $109;$$8$ph = $105;$$pre = $$pre$pre;
         }
         else if ((label|0) == 42) {
          label = 0;
          $111 = $89&255;
          $$3108$ph = $$2107135;$$7118$ph = $$6117134;$$8$ph = $$7136;$$pre = $111;
         }
         $$pre171 = $$pre&255;
         $$pre172 = (($$pre171) + -1)|0;
         $$3108 = $$3108$ph;$$7118 = $$7118$ph;$$8 = $$8$ph;$$pre$phi173Z2D = $$pre172;$$pre$phiZ2D = $$pre171;
         label = 44;
        } else {
         $$3108176 = $$1106147;$$7118175 = $$5116146;$$8177 = $$6104148;$$pre$phi174Z2D = $82;
        }
       } else {
        $$3108 = $$1106147;$$7118 = $$5116146;$$8 = $$6104148;$$pre$phi173Z2D = $83;$$pre$phiZ2D = $82;
        label = 44;
       }
       if ((label|0) == 44) {
        label = 0;
        $112 = ($$pre$phi173Z2D>>>0)<(127);
        if ($112) {
         $$3108176 = $$3108;$$7118175 = $$7118;$$8177 = $$8;$$pre$phi174Z2D = $$pre$phiZ2D;
        } else {
         break;
        }
       }
       $113 = ((($$8177)) + 1|0);
       $114 = ((($$3108176)) + 4|0);
       HEAP32[$$3108176>>2] = $$pre$phi174Z2D;
       $115 = (($$7118175) + -1)|0;
       $116 = ($115|0)==(0);
       if ($116) {
        $$6104$lcssa = $113;
        break L23;
       } else {
        $$1106147 = $114;$$5116146 = $115;$$6104148 = $113;
       }
      }
      $117 = (($$pre$phiZ2D) + -194)|0;
      $118 = ($117>>>0)>(50);
      if ($118) {
       $$11182 = $$8;$$5110180 = $$3108;$$9120179 = $$7118;
       label = 57;
       break L21;
      }
      $119 = ((($$8)) + 1|0);
      $120 = (14096 + ($117<<2)|0);
      $121 = HEAP32[$120>>2]|0;
      $$4 = $121;$$4109 = $$3108;$$8119 = $$7118;$$9 = $119;
      label = 48;
      continue L20;
     }
    } while(0);
    HEAP32[$1>>2] = $$6104$lcssa;
    $$097 = $2;
    label = 63;
    continue L20;
   }
   else if ((label|0) == 48) {
    label = 0;
    $122 = HEAP8[$$9>>0]|0;
    $123 = $122&255;
    $124 = $123 >>> 3;
    $125 = (($124) + -16)|0;
    $126 = $$4 >> 26;
    $127 = (($124) + ($126))|0;
    $128 = $125 | $127;
    $129 = ($128>>>0)>(7);
    if ($129) {
     $$5110 = $$4109;$$6 = $$4;$$9$sink = $$9;$$9120 = $$8119;
     label = 56;
    } else {
     $130 = $$4 << 6;
     $131 = ((($$9)) + 1|0);
     $132 = (($123) + -128)|0;
     $133 = $132 | $130;
     $134 = ($133|0)<(0);
     do {
      if ($134) {
       $135 = HEAP8[$131>>0]|0;
       $136 = $135&255;
       $137 = (($136) + -128)|0;
       $138 = ($137>>>0)>(63);
       if (!($138)) {
        $139 = $133 << 6;
        $140 = ((($$9)) + 2|0);
        $141 = $137 | $139;
        $142 = ($141|0)<(0);
        if (!($142)) {
         $$10 = $140;$$5 = $141;
         break;
        }
        $143 = HEAP8[$140>>0]|0;
        $144 = $143&255;
        $145 = (($144) + -128)|0;
        $146 = ($145>>>0)>(63);
        if (!($146)) {
         $147 = $141 << 6;
         $148 = ((($$9)) + 3|0);
         $149 = $145 | $147;
         $$10 = $148;$$5 = $149;
         break;
        }
       }
       $$11$ph = ((($$9)) + -1|0);
       $152 = (___errno_location()|0);
       HEAP32[$152>>2] = 84;
       $$11122124 = $$11$ph;
       break L21;
      } else {
       $$10 = $131;$$5 = $133;
      }
     } while(0);
     $150 = ((($$4109)) + 4|0);
     HEAP32[$$4109>>2] = $$5;
     $151 = (($$8119) + -1)|0;
     $$1106$ph = $150;$$5116$ph = $151;$$6104$ph = $$10;
     label = 33;
     continue L20;
    }
   }
   else if ((label|0) == 63) {
    label = 0;
    return ($$097|0);
   }
  } while(0);
  if ((label|0) == 56) {
   label = 0;
   $153 = ((($$9$sink)) + -1|0);
   $154 = ($$6|0)==(0);
   if ($154) {
    $$11182 = $153;$$5110180 = $$5110;$$9120179 = $$9120;
    label = 57;
   } else {
    $$11183 = $153;$$5110181 = $$5110;
    label = 61;
   }
  }
  if ((label|0) == 57) {
   label = 0;
   $155 = HEAP8[$$11182>>0]|0;
   $156 = ($155<<24>>24)==(0);
   if ($156) {
    $157 = ($$5110180|0)==(0|0);
    if (!($157)) {
     HEAP32[$$5110180>>2] = 0;
     HEAP32[$1>>2] = 0;
    }
    $158 = (($2) - ($$9120179))|0;
    $$097 = $158;
    label = 63;
    continue;
   } else {
    $$11183 = $$11182;$$5110181 = $$5110180;
    label = 61;
   }
  }
  if ((label|0) == 61) {
   label = 0;
   $159 = (___errno_location()|0);
   HEAP32[$159>>2] = 84;
   $160 = ($$5110181|0)==(0|0);
   if ($160) {
    $$097 = -1;
    label = 63;
    continue;
   } else {
    $$11122124 = $$11183;
   }
  }
  HEAP32[$1>>2] = $$11122124;
  $$097 = -1;
  label = 63;
 }
 return (0)|0;
}
function ___pthread_self_417() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function _wcsnrtombs($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$04773 = 0, $$05172 = 0, $$054 = 0, $$148 = 0, $$152 = 0, $$15571 = 0, $$162 = 0, $$174 = 0, $$2 = 0, $$24968 = 0, $$25367 = 0, $$256 = 0, $$350 = 0, $$357 = 0, $$369 = 0, $$466 = 0, $$cast = 0, $$pr$pre = 0, $10 = 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $or$cond = 0, $or$cond70 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(272|0);
 $5 = sp;
 $6 = sp + 256|0;
 $7 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $7;
 $8 = ($0|0)!=(0|0);
 $$054 = $8 ? $3 : 256;
 $$0 = $8 ? $0 : $5;
 $$cast = $7;
 $9 = ($7|0)!=(0);
 $10 = ($$054|0)!=(0);
 $or$cond70 = $10 & $9;
 L1: do {
  if ($or$cond70) {
   $$04773 = 0;$$05172 = $2;$$15571 = $$054;$$174 = $$0;$45 = $$cast;
   while(1) {
    $11 = ($$05172>>>0)>=($$15571>>>0);
    $12 = ($$05172>>>0)>(32);
    $13 = $11 | $12;
    if (!($13)) {
     $$148 = $$04773;$$152 = $$05172;$$162 = $$174;$$357 = $$15571;$25 = $45;
     break L1;
    }
    $spec$select = $11 ? $$15571 : $$05172;
    $14 = (($$05172) - ($spec$select))|0;
    $15 = (_wcsrtombs($$174,$6,$spec$select,0)|0);
    $16 = ($15|0)==(-1);
    if ($16) {
     break;
    }
    $17 = ($$174|0)==($5|0);
    $18 = (($$174) + ($15)|0);
    $19 = $17 ? 0 : $15;
    $$256 = (($$15571) - ($19))|0;
    $$2 = $17 ? $$174 : $18;
    $20 = (($15) + ($$04773))|0;
    $21 = HEAP32[$6>>2]|0;
    $22 = ($21|0)!=(0|0);
    $23 = ($$256|0)!=(0);
    $or$cond = $23 & $22;
    if ($or$cond) {
     $$04773 = $20;$$05172 = $14;$$15571 = $$256;$$174 = $$2;$45 = $21;
    } else {
     $$148 = $20;$$152 = $14;$$162 = $$2;$$357 = $$256;$25 = $21;
     break L1;
    }
   }
   $$pr$pre = HEAP32[$6>>2]|0;
   $$148 = -1;$$152 = $14;$$162 = $$174;$$357 = 0;$25 = $$pr$pre;
  } else {
   $$148 = 0;$$152 = $2;$$162 = $$0;$$357 = $$054;$25 = $$cast;
  }
 } while(0);
 $24 = ($25|0)==(0|0);
 L9: do {
  if ($24) {
   $$350 = $$148;
  } else {
   $26 = ($$357|0)!=(0);
   $27 = ($$152|0)!=(0);
   $28 = $26 & $27;
   if ($28) {
    $$24968 = $$148;$$25367 = $$152;$$369 = $$162;$$466 = $$357;$30 = $25;
    while(1) {
     $29 = HEAP32[$30>>2]|0;
     $31 = (_wcrtomb($$369,$29,0)|0);
     $32 = (($31) + 1)|0;
     $33 = ($32>>>0)<(2);
     if ($33) {
      break;
     }
     $35 = HEAP32[$6>>2]|0;
     $36 = ((($35)) + 4|0);
     HEAP32[$6>>2] = $36;
     $37 = (($$25367) + -1)|0;
     $38 = (($$369) + ($31)|0);
     $39 = (($$466) - ($31))|0;
     $40 = (($31) + ($$24968))|0;
     $41 = ($39|0)!=(0);
     $42 = ($37|0)!=(0);
     $43 = $41 & $42;
     if ($43) {
      $$24968 = $40;$$25367 = $37;$$369 = $38;$$466 = $39;$30 = $36;
     } else {
      $$350 = $40;
      break L9;
     }
    }
    $34 = ($31|0)==(0);
    if ($34) {
     HEAP32[$6>>2] = 0;
     $$350 = $$24968;
    } else {
     $$350 = -1;
    }
   } else {
    $$350 = $$148;
   }
  }
 } while(0);
 if ($8) {
  $44 = HEAP32[$6>>2]|0;
  HEAP32[$1>>2] = $44;
 }
 STACKTOP = sp;return ($$350|0);
}
function _wcsrtombs($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$05674 = 0, $$057$lcssa = 0, $$05784 = 0, $$05873 = 0, $$1 = 0, $$159 = 0, $$260$lcssa = 0, $$26083 = 0, $$278 = 0, $$3 = 0, $$361 = 0, $$477 = 0, $$5 = 0, $$pn = 0, $$pre = 0, $$pre100 = 0, $$pre101 = 0, $$pre99 = 0, $10 = 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = ($0|0)==(0|0);
 L1: do {
  if ($5) {
   $6 = HEAP32[$1>>2]|0;
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7|0)==(0);
   if ($8) {
    $$0 = 0;
   } else {
    $$05674 = $6;$$05873 = 0;$10 = $7;
    while(1) {
     $9 = ($10>>>0)>(127);
     if ($9) {
      $11 = (_wcrtomb($4,$10,0)|0);
      $12 = ($11|0)==(-1);
      if ($12) {
       $$0 = -1;
       break L1;
      } else {
       $$pn = $11;
      }
     } else {
      $$pn = 1;
     }
     $$159 = (($$pn) + ($$05873))|0;
     $13 = ((($$05674)) + 4|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = ($14|0)==(0);
     if ($15) {
      $$0 = $$159;
      break;
     } else {
      $$05674 = $13;$$05873 = $$159;$10 = $14;
     }
    }
   }
  } else {
   $16 = ($2>>>0)>(3);
   L10: do {
    if ($16) {
     $$pre = HEAP32[$1>>2]|0;
     $$05784 = $0;$$26083 = $2;$18 = $$pre;
     while(1) {
      $17 = HEAP32[$18>>2]|0;
      $19 = (($17) + -1)|0;
      $20 = ($19>>>0)>(126);
      if ($20) {
       $21 = ($17|0)==(0);
       if ($21) {
        break;
       }
       $23 = (_wcrtomb($$05784,$17,0)|0);
       $24 = ($23|0)==(-1);
       if ($24) {
        $$0 = -1;
        break L1;
       }
       $25 = (($$05784) + ($23)|0);
       $26 = (($$26083) - ($23))|0;
       $$1 = $25;$$361 = $26;$31 = $18;
      } else {
       $27 = $17&255;
       $28 = ((($$05784)) + 1|0);
       HEAP8[$$05784>>0] = $27;
       $29 = (($$26083) + -1)|0;
       $$pre99 = HEAP32[$1>>2]|0;
       $$1 = $28;$$361 = $29;$31 = $$pre99;
      }
      $30 = ((($31)) + 4|0);
      HEAP32[$1>>2] = $30;
      $32 = ($$361>>>0)>(3);
      if ($32) {
       $$05784 = $$1;$$26083 = $$361;$18 = $30;
      } else {
       $$057$lcssa = $$1;$$260$lcssa = $$361;
       break L10;
      }
     }
     HEAP8[$$05784>>0] = 0;
     HEAP32[$1>>2] = 0;
     $22 = (($2) - ($$26083))|0;
     $$0 = $22;
     break L1;
    } else {
     $$057$lcssa = $0;$$260$lcssa = $2;
    }
   } while(0);
   $33 = ($$260$lcssa|0)==(0);
   if ($33) {
    $$0 = $2;
   } else {
    $$pre100 = HEAP32[$1>>2]|0;
    $$278 = $$057$lcssa;$$477 = $$260$lcssa;$35 = $$pre100;
    while(1) {
     $34 = HEAP32[$35>>2]|0;
     $36 = (($34) + -1)|0;
     $37 = ($36>>>0)>(126);
     if ($37) {
      $38 = ($34|0)==(0);
      if ($38) {
       label = 20;
       break;
      }
      $40 = (_wcrtomb($4,$34,0)|0);
      $41 = ($40|0)==(-1);
      if ($41) {
       $$0 = -1;
       break L1;
      }
      $42 = ($$477>>>0)<($40>>>0);
      if ($42) {
       label = 23;
       break;
      }
      $44 = HEAP32[$35>>2]|0;
      (_wcrtomb($$278,$44,0)|0);
      $45 = (($$278) + ($40)|0);
      $46 = (($$477) - ($40))|0;
      $$3 = $45;$$5 = $46;$51 = $35;
     } else {
      $47 = $34&255;
      $48 = ((($$278)) + 1|0);
      HEAP8[$$278>>0] = $47;
      $49 = (($$477) + -1)|0;
      $$pre101 = HEAP32[$1>>2]|0;
      $$3 = $48;$$5 = $49;$51 = $$pre101;
     }
     $50 = ((($51)) + 4|0);
     HEAP32[$1>>2] = $50;
     $52 = ($$5|0)==(0);
     if ($52) {
      $$0 = $2;
      break L1;
     } else {
      $$278 = $$3;$$477 = $$5;$35 = $50;
     }
    }
    if ((label|0) == 20) {
     HEAP8[$$278>>0] = 0;
     HEAP32[$1>>2] = 0;
     $39 = (($2) - ($$477))|0;
     $$0 = $39;
     break;
    }
    else if ((label|0) == 23) {
     $43 = (($2) - ($$477))|0;
     $$0 = $43;
     break;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _getc($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)<(0);
 if ($3) {
  label = 3;
 } else {
  $4 = (___lockfile($0)|0);
  $5 = ($4|0)==(0);
  if ($5) {
   label = 3;
  } else {
   $15 = ((($0)) + 4|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ((($0)) + 8|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($16>>>0)<($18>>>0);
   if ($19) {
    $20 = ((($16)) + 1|0);
    HEAP32[$15>>2] = $20;
    $21 = HEAP8[$16>>0]|0;
    $22 = $21&255;
    $24 = $22;
   } else {
    $23 = (___uflow($0)|0);
    $24 = $23;
   }
   $$0 = $24;
  }
 }
 do {
  if ((label|0) == 3) {
   $6 = ((($0)) + 4|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ((($0)) + 8|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ($7>>>0)<($9>>>0);
   if ($10) {
    $11 = ((($7)) + 1|0);
    HEAP32[$6>>2] = $11;
    $12 = HEAP8[$7>>0]|0;
    $13 = $12&255;
    $$0 = $13;
    break;
   } else {
    $14 = (___uflow($0)|0);
    $$0 = $14;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function _rand() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = 48400;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (___muldi3(($2|0),($5|0),1284865837,1481765933)|0);
 $7 = (getTempRet0() | 0);
 $8 = (_i64Add(($6|0),($7|0),1,0)|0);
 $9 = (getTempRet0() | 0);
 $10 = 48400;
 $11 = $10;
 HEAP32[$11>>2] = $8;
 $12 = (($10) + 4)|0;
 $13 = $12;
 HEAP32[$13>>2] = $9;
 $14 = (_bitshift64Lshr(($8|0),($9|0),33)|0);
 $15 = (getTempRet0() | 0);
 return ($14|0);
}
function _vasprintf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vacopy_currentptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $vacopy_currentptr = HEAP32[$2>>2]|0;
 HEAP32[$3>>2] = $vacopy_currentptr;
 $4 = (_vsnprintf(0,0,$1,$3)|0);
 $5 = ($4|0)<(0);
 if ($5) {
  $$0 = -1;
 } else {
  $6 = (($4) + 1)|0;
  $7 = (_malloc($6)|0);
  HEAP32[$0>>2] = $7;
  $8 = ($7|0)==(0|0);
  if ($8) {
   $$0 = -1;
  } else {
   $9 = (_vsnprintf($7,$6,$1,$2)|0);
   $$0 = $9;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _ungetc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1 = 0, $$pr = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(-1);
 do {
  if ($2) {
   $$1 = -1;
  } else {
   $3 = ((($1)) + 76|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)>(-1);
   if ($5) {
    $6 = (___lockfile($1)|0);
    $17 = $6;
   } else {
    $17 = 0;
   }
   $7 = ((($1)) + 4|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ($8|0)==(0|0);
   if ($9) {
    (___toread($1)|0);
    $$pr = HEAP32[$7>>2]|0;
    $10 = ($$pr|0)==(0|0);
    if (!($10)) {
     $15 = $$pr;
     label = 6;
    }
   } else {
    $15 = $8;
    label = 6;
   }
   if ((label|0) == 6) {
    $11 = ((($1)) + 44|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ((($12)) + -8|0);
    $14 = ($15>>>0)>($13>>>0);
    if ($14) {
     $18 = $0&255;
     $19 = ((($15)) + -1|0);
     HEAP32[$7>>2] = $19;
     HEAP8[$19>>0] = $18;
     $20 = HEAP32[$1>>2]|0;
     $21 = $20 & -17;
     HEAP32[$1>>2] = $21;
     $22 = ($17|0)==(0);
     if ($22) {
      $$1 = $0;
      break;
     }
     ___unlockfile($1);
     $$1 = $0;
     break;
    }
   }
   $16 = ($17|0)==(0);
   if ($16) {
    $$1 = -1;
   } else {
    ___unlockfile($1);
    $$1 = -1;
   }
  }
 } while(0);
 return ($$1|0);
}
function ___ftello($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $5 = (___lockfile($0)|0);
  $phitmp = ($5|0)==(0);
  $6 = (___ftello_unlocked($0)|0);
  if ($phitmp) {
   $7 = $6;
  } else {
   $7 = $6;
  }
 } else {
  $4 = (___ftello_unlocked($0)|0);
  $7 = $4;
 }
 return ($7|0);
}
function ___ftello_unlocked($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 40|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$0>>2]|0;
 $4 = $3 & 128;
 $5 = ($4|0)==(0);
 if ($5) {
  $11 = 1;
 } else {
  $6 = ((($0)) + 20|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ((($0)) + 28|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($7>>>0)>($9>>>0);
  $phitmp = $10 ? 2 : 1;
  $11 = $phitmp;
 }
 $12 = (FUNCTION_TABLE_iiii[$2 & 63]($0,0,$11)|0);
 $13 = ($12|0)<(0);
 if ($13) {
  $$0 = $12;
 } else {
  $14 = ((($0)) + 8|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ((($0)) + 4|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ((($0)) + 20|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ((($0)) + 28|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (($12) - ($15))|0;
  $23 = (($22) + ($17))|0;
  $24 = (($23) + ($19))|0;
  $25 = (($24) - ($21))|0;
  $$0 = $25;
 }
 return ($$0|0);
}
function _fputc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 76|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)<(0);
 if ($4) {
  label = 3;
 } else {
  $5 = (___lockfile($1)|0);
  $6 = ($5|0)==(0);
  if ($6) {
   label = 3;
  } else {
   $20 = $0&255;
   $21 = $0 & 255;
   $22 = ((($1)) + 75|0);
   $23 = HEAP8[$22>>0]|0;
   $24 = $23 << 24 >> 24;
   $25 = ($21|0)==($24|0);
   if ($25) {
    label = 10;
   } else {
    $26 = ((($1)) + 20|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ((($1)) + 16|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = ($27>>>0)<($29>>>0);
    if ($30) {
     $31 = ((($27)) + 1|0);
     HEAP32[$26>>2] = $31;
     HEAP8[$27>>0] = $20;
     $33 = $21;
    } else {
     label = 10;
    }
   }
   if ((label|0) == 10) {
    $32 = (___overflow($1,$0)|0);
    $33 = $32;
   }
   ___unlockfile($1);
   $$0 = $33;
  }
 }
 do {
  if ((label|0) == 3) {
   $7 = $0&255;
   $8 = $0 & 255;
   $9 = ((($1)) + 75|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = $10 << 24 >> 24;
   $12 = ($8|0)==($11|0);
   if (!($12)) {
    $13 = ((($1)) + 20|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ((($1)) + 16|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ($14>>>0)<($16>>>0);
    if ($17) {
     $18 = ((($14)) + 1|0);
     HEAP32[$13>>2] = $18;
     HEAP8[$14>>0] = $7;
     $$0 = $8;
     break;
    }
   }
   $19 = (___overflow($1,$0)|0);
   $$0 = $19;
  }
 } while(0);
 return ($$0|0);
}
function _fread($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$0 = 0, $$054 = 0, $$056 = 0, $$15759 = 0, $$160 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = Math_imul($2, $1)|0;
 $5 = ($1|0)==(0);
 $spec$select = $5 ? 0 : $2;
 $6 = ((($3)) + 76|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)>(-1);
 if ($8) {
  $9 = (___lockfile($3)|0);
  $37 = $9;
 } else {
  $37 = 0;
 }
 $10 = ((($3)) + 74|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11 << 24 >> 24;
 $13 = (($12) + 255)|0;
 $14 = $13 | $12;
 $15 = $14&255;
 HEAP8[$10>>0] = $15;
 $16 = ((($3)) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($3)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (($17) - ($19))|0;
 $21 = ($20|0)>(0);
 if ($21) {
  $22 = $19;
  $23 = ($20>>>0)<($4>>>0);
  $$ = $23 ? $20 : $4;
  (_memcpy(($0|0),($22|0),($$|0))|0);
  $24 = HEAP32[$18>>2]|0;
  $25 = (($24) + ($$)|0);
  HEAP32[$18>>2] = $25;
  $26 = (($0) + ($$)|0);
  $27 = (($4) - ($$))|0;
  $$054 = $27;$$056 = $26;
 } else {
  $$054 = $4;$$056 = $0;
 }
 $28 = ($$054|0)==(0);
 L7: do {
  if ($28) {
   label = 13;
  } else {
   $29 = ((($3)) + 32|0);
   $$15759 = $$056;$$160 = $$054;
   while(1) {
    $30 = (___toread($3)|0);
    $31 = ($30|0)==(0);
    if (!($31)) {
     break;
    }
    $32 = HEAP32[$29>>2]|0;
    $33 = (FUNCTION_TABLE_iiii[$32 & 63]($3,$$15759,$$160)|0);
    $34 = (($33) + 1)|0;
    $35 = ($34>>>0)<(2);
    if ($35) {
     break;
    }
    $40 = (($$160) - ($33))|0;
    $41 = (($$15759) + ($33)|0);
    $42 = ($40|0)==(0);
    if ($42) {
     label = 13;
     break L7;
    } else {
     $$15759 = $41;$$160 = $40;
    }
   }
   $36 = ($37|0)==(0);
   if (!($36)) {
    ___unlockfile($3);
   }
   $38 = (($4) - ($$160))|0;
   $39 = (($38>>>0) / ($1>>>0))&-1;
   $$0 = $39;
  }
 } while(0);
 if ((label|0) == 13) {
  $43 = ($37|0)==(0);
  if ($43) {
   $$0 = $spec$select;
  } else {
   ___unlockfile($3);
   $$0 = $spec$select;
  }
 }
 return ($$0|0);
}
function _printf($0,$varargs) {
 $0 = $0|0;
 $varargs = $varargs|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $varargs;
 $2 = HEAP32[6703]|0;
 $3 = (_vfprintf($2,$0,$1)|0);
 STACKTOP = sp;return ($3|0);
}
function _strtod($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_strtox($0,$1,1));
 return (+$2);
}
function _strtox($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $3 = sp;
 dest=$3; stop=dest+124|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $4 = ((($3)) + 4|0);
 HEAP32[$4>>2] = $0;
 $5 = ((($3)) + 8|0);
 HEAP32[$5>>2] = (-1);
 $6 = ((($3)) + 44|0);
 HEAP32[$6>>2] = $0;
 $7 = ((($3)) + 76|0);
 HEAP32[$7>>2] = -1;
 ___shlim($3,0);
 $8 = (+___floatscan($3,$2,1));
 $9 = ((($3)) + 108|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP32[$4>>2]|0;
 $12 = HEAP32[$5>>2]|0;
 $13 = (($11) - ($12))|0;
 $14 = (($13) + ($10))|0;
 $15 = ($1|0)==(0|0);
 if (!($15)) {
  $16 = ($14|0)==(0);
  $17 = (($0) + ($14)|0);
  $18 = $16 ? $0 : $17;
  HEAP32[$1>>2] = $18;
 }
 STACKTOP = sp;return (+$8);
}
function _strtof($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0.0, $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_strtox($0,$1,0));
 $3 = $2;
 return (+$3);
}
function _strtold($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_strtox($0,$1,2));
 return (+$2);
}
function _strtof_l($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (+_strtof($0,$1));
 return (+$3);
}
function _strtod_l($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (+_strtod($0,$1));
 return (+$3);
}
function _strtold_l($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (+_strtold($0,$1));
 return (+$3);
}
function _strerror_r($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_strerror($0)|0);
 $4 = (_strlen($3)|0);
 $5 = ($4>>>0)<($2>>>0);
 if ($5) {
  $9 = (($4) + 1)|0;
  (_memcpy(($1|0),($3|0),($9|0))|0);
  $$0 = 0;
 } else {
  $6 = ($2|0)==(0);
  $7 = (($2) + -1)|0;
  if ($6) {
   $$0 = 34;
  } else {
   $8 = (($1) + ($7)|0);
   (_memcpy(($1|0),($3|0),($7|0))|0);
   HEAP8[$8>>0] = 0;
   $$0 = 34;
  }
 }
 return ($$0|0);
}
function _wmemset($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$056 = 0, $$07 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 if (!($3)) {
  $$056 = $2;$$07 = $0;
  while(1) {
   $4 = (($$056) + -1)|0;
   $5 = ((($$07)) + 4|0);
   HEAP32[$$07>>2] = $1;
   $6 = ($4|0)==(0);
   if ($6) {
    break;
   } else {
    $$056 = $4;$$07 = $5;
   }
  }
 }
 return ($0|0);
}
function _wmemmove($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$01416 = 0, $$018 = 0, $$117 = 0, $$in = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $0;
 $4 = $1;
 $5 = (($3) - ($4))|0;
 $6 = $5 >> 2;
 $7 = ($6>>>0)<($2>>>0);
 if ($7) {
  $$in = $2;
  while(1) {
   $8 = (($$in) + -1)|0;
   $9 = (($1) + ($8<<2)|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (($0) + ($8<<2)|0);
   HEAP32[$11>>2] = $10;
   $12 = ($8|0)==(0);
   if ($12) {
    break;
   } else {
    $$in = $8;
   }
  }
 } else {
  $13 = ($2|0)==(0);
  if (!($13)) {
   $$01416 = $1;$$018 = $0;$$117 = $2;
   while(1) {
    $14 = (($$117) + -1)|0;
    $15 = ((($$01416)) + 4|0);
    $16 = HEAP32[$$01416>>2]|0;
    $17 = ((($$018)) + 4|0);
    HEAP32[$$018>>2] = $16;
    $18 = ($14|0)==(0);
    if ($18) {
     break;
    } else {
     $$01416 = $15;$$018 = $17;$$117 = $14;
    }
   }
  }
 }
 return ($0|0);
}
function _malloc($0) {
 $0 = $0|0;
 var $$0 = 0, $$0$i = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i20$i = 0, $$0169$i = 0, $$0170$i = 0, $$0171$i = 0, $$0192 = 0, $$0194 = 0, $$02014$i$i = 0, $$0202$lcssa$i$i = 0, $$02023$i$i = 0, $$0206$i$i = 0, $$0207$i$i = 0, $$024372$i = 0, $$0259$i$i = 0, $$02604$i$i = 0, $$0261$lcssa$i$i = 0, $$02613$i$i = 0;
 var $$0267$i$i = 0, $$0268$i$i = 0, $$0318$i = 0, $$032012$i = 0, $$0321$lcssa$i = 0, $$032111$i = 0, $$0323$i = 0, $$0329$i = 0, $$0335$i = 0, $$0336$i = 0, $$0338$i = 0, $$0339$i = 0, $$0344$i = 0, $$1174$i = 0, $$1174$i$be = 0, $$1174$i$ph = 0, $$1176$i = 0, $$1176$i$be = 0, $$1176$i$ph = 0, $$124471$i = 0;
 var $$1263$i$i = 0, $$1263$i$i$be = 0, $$1263$i$i$ph = 0, $$1265$i$i = 0, $$1265$i$i$be = 0, $$1265$i$i$ph = 0, $$1319$i = 0, $$1324$i = 0, $$1340$i = 0, $$1346$i = 0, $$1346$i$be = 0, $$1346$i$ph = 0, $$1350$i = 0, $$1350$i$be = 0, $$1350$i$ph = 0, $$2234243136$i = 0, $$2247$ph$i = 0, $$2253$ph$i = 0, $$2331$i = 0, $$3$i = 0;
 var $$3$i$i = 0, $$3$i198 = 0, $$3$i198211 = 0, $$3326$i = 0, $$3348$i = 0, $$4$lcssa$i = 0, $$415$i = 0, $$415$i$ph = 0, $$4236$i = 0, $$4327$lcssa$i = 0, $$432714$i = 0, $$432714$i$ph = 0, $$4333$i = 0, $$533413$i = 0, $$533413$i$ph = 0, $$723947$i = 0, $$748$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0;
 var $$pre$i16$i = 0, $$pre$i195 = 0, $$pre$i204 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i17$iZ2D = 0, $$pre$phi$i205Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phiZ2D = 0, $$sink = 0, $$sink320 = 0, $$sink321 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
 var $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
 var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;
 var $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0;
 var $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0;
 var $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0;
 var $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0;
 var $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0;
 var $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0;
 var $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0;
 var $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0;
 var $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0;
 var $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0;
 var $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0;
 var $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0;
 var $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0;
 var $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0;
 var $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0;
 var $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0;
 var $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0;
 var $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0;
 var $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0;
 var $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0;
 var $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0;
 var $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0;
 var $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0;
 var $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0;
 var $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0;
 var $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0;
 var $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0;
 var $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0;
 var $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0;
 var $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0;
 var $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0;
 var $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0;
 var $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0;
 var $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0;
 var $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0;
 var $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0;
 var $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0;
 var $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0;
 var $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0;
 var $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0;
 var $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $99 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i203 = 0, $not$$i = 0, $or$cond$i = 0, $or$cond$i199 = 0, $or$cond1$i = 0, $or$cond1$i197 = 0, $or$cond11$i = 0, $or$cond2$i = 0;
 var $or$cond5$i = 0, $or$cond50$i = 0, $or$cond51$i = 0, $or$cond6$i = 0, $or$cond7$i = 0, $or$cond8$i = 0, $or$cond8$not$i = 0, $spec$select$i = 0, $spec$select$i201 = 0, $spec$select1$i = 0, $spec$select2$i = 0, $spec$select4$i = 0, $spec$select49$i = 0, $spec$select9$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ($0>>>0)<(245);
 do {
  if ($2) {
   $3 = ($0>>>0)<(11);
   $4 = (($0) + 11)|0;
   $5 = $4 & -8;
   $6 = $3 ? 16 : $5;
   $7 = $6 >>> 3;
   $8 = HEAP32[12299]|0;
   $9 = $8 >>> $7;
   $10 = $9 & 3;
   $11 = ($10|0)==(0);
   if (!($11)) {
    $12 = $9 & 1;
    $13 = $12 ^ 1;
    $14 = (($13) + ($7))|0;
    $15 = $14 << 1;
    $16 = (49236 + ($15<<2)|0);
    $17 = ((($16)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($18)) + 8|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20|0)==($16|0);
    if ($21) {
     $22 = 1 << $14;
     $23 = $22 ^ -1;
     $24 = $8 & $23;
     HEAP32[12299] = $24;
    } else {
     $25 = ((($20)) + 12|0);
     HEAP32[$25>>2] = $16;
     HEAP32[$17>>2] = $20;
    }
    $26 = $14 << 3;
    $27 = $26 | 3;
    $28 = ((($18)) + 4|0);
    HEAP32[$28>>2] = $27;
    $29 = (($18) + ($26)|0);
    $30 = ((($29)) + 4|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = $31 | 1;
    HEAP32[$30>>2] = $32;
    $$0 = $19;
    STACKTOP = sp;return ($$0|0);
   }
   $33 = HEAP32[(49204)>>2]|0;
   $34 = ($6>>>0)>($33>>>0);
   if ($34) {
    $35 = ($9|0)==(0);
    if (!($35)) {
     $36 = $9 << $7;
     $37 = 2 << $7;
     $38 = (0 - ($37))|0;
     $39 = $37 | $38;
     $40 = $36 & $39;
     $41 = (0 - ($40))|0;
     $42 = $40 & $41;
     $43 = (($42) + -1)|0;
     $44 = $43 >>> 12;
     $45 = $44 & 16;
     $46 = $43 >>> $45;
     $47 = $46 >>> 5;
     $48 = $47 & 8;
     $49 = $48 | $45;
     $50 = $46 >>> $48;
     $51 = $50 >>> 2;
     $52 = $51 & 4;
     $53 = $49 | $52;
     $54 = $50 >>> $52;
     $55 = $54 >>> 1;
     $56 = $55 & 2;
     $57 = $53 | $56;
     $58 = $54 >>> $56;
     $59 = $58 >>> 1;
     $60 = $59 & 1;
     $61 = $57 | $60;
     $62 = $58 >>> $60;
     $63 = (($61) + ($62))|0;
     $64 = $63 << 1;
     $65 = (49236 + ($64<<2)|0);
     $66 = ((($65)) + 8|0);
     $67 = HEAP32[$66>>2]|0;
     $68 = ((($67)) + 8|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = ($69|0)==($65|0);
     if ($70) {
      $71 = 1 << $63;
      $72 = $71 ^ -1;
      $73 = $8 & $72;
      HEAP32[12299] = $73;
      $90 = $73;
     } else {
      $74 = ((($69)) + 12|0);
      HEAP32[$74>>2] = $65;
      HEAP32[$66>>2] = $69;
      $90 = $8;
     }
     $75 = $63 << 3;
     $76 = (($75) - ($6))|0;
     $77 = $6 | 3;
     $78 = ((($67)) + 4|0);
     HEAP32[$78>>2] = $77;
     $79 = (($67) + ($6)|0);
     $80 = $76 | 1;
     $81 = ((($79)) + 4|0);
     HEAP32[$81>>2] = $80;
     $82 = (($67) + ($75)|0);
     HEAP32[$82>>2] = $76;
     $83 = ($33|0)==(0);
     if (!($83)) {
      $84 = HEAP32[(49216)>>2]|0;
      $85 = $33 >>> 3;
      $86 = $85 << 1;
      $87 = (49236 + ($86<<2)|0);
      $88 = 1 << $85;
      $89 = $90 & $88;
      $91 = ($89|0)==(0);
      if ($91) {
       $92 = $90 | $88;
       HEAP32[12299] = $92;
       $$pre = ((($87)) + 8|0);
       $$0194 = $87;$$pre$phiZ2D = $$pre;
      } else {
       $93 = ((($87)) + 8|0);
       $94 = HEAP32[$93>>2]|0;
       $$0194 = $94;$$pre$phiZ2D = $93;
      }
      HEAP32[$$pre$phiZ2D>>2] = $84;
      $95 = ((($$0194)) + 12|0);
      HEAP32[$95>>2] = $84;
      $96 = ((($84)) + 8|0);
      HEAP32[$96>>2] = $$0194;
      $97 = ((($84)) + 12|0);
      HEAP32[$97>>2] = $87;
     }
     HEAP32[(49204)>>2] = $76;
     HEAP32[(49216)>>2] = $79;
     $$0 = $68;
     STACKTOP = sp;return ($$0|0);
    }
    $98 = HEAP32[(49200)>>2]|0;
    $99 = ($98|0)==(0);
    if ($99) {
     $$0192 = $6;
    } else {
     $100 = (0 - ($98))|0;
     $101 = $98 & $100;
     $102 = (($101) + -1)|0;
     $103 = $102 >>> 12;
     $104 = $103 & 16;
     $105 = $102 >>> $104;
     $106 = $105 >>> 5;
     $107 = $106 & 8;
     $108 = $107 | $104;
     $109 = $105 >>> $107;
     $110 = $109 >>> 2;
     $111 = $110 & 4;
     $112 = $108 | $111;
     $113 = $109 >>> $111;
     $114 = $113 >>> 1;
     $115 = $114 & 2;
     $116 = $112 | $115;
     $117 = $113 >>> $115;
     $118 = $117 >>> 1;
     $119 = $118 & 1;
     $120 = $116 | $119;
     $121 = $117 >>> $119;
     $122 = (($120) + ($121))|0;
     $123 = (49500 + ($122<<2)|0);
     $124 = HEAP32[$123>>2]|0;
     $125 = ((($124)) + 4|0);
     $126 = HEAP32[$125>>2]|0;
     $127 = $126 & -8;
     $128 = (($127) - ($6))|0;
     $$0169$i = $124;$$0170$i = $124;$$0171$i = $128;
     while(1) {
      $129 = ((($$0169$i)) + 16|0);
      $130 = HEAP32[$129>>2]|0;
      $131 = ($130|0)==(0|0);
      if ($131) {
       $132 = ((($$0169$i)) + 20|0);
       $133 = HEAP32[$132>>2]|0;
       $134 = ($133|0)==(0|0);
       if ($134) {
        break;
       } else {
        $136 = $133;
       }
      } else {
       $136 = $130;
      }
      $135 = ((($136)) + 4|0);
      $137 = HEAP32[$135>>2]|0;
      $138 = $137 & -8;
      $139 = (($138) - ($6))|0;
      $140 = ($139>>>0)<($$0171$i>>>0);
      $spec$select$i = $140 ? $139 : $$0171$i;
      $spec$select1$i = $140 ? $136 : $$0170$i;
      $$0169$i = $136;$$0170$i = $spec$select1$i;$$0171$i = $spec$select$i;
     }
     $141 = (($$0170$i) + ($6)|0);
     $142 = ($141>>>0)>($$0170$i>>>0);
     if ($142) {
      $143 = ((($$0170$i)) + 24|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ((($$0170$i)) + 12|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = ($146|0)==($$0170$i|0);
      do {
       if ($147) {
        $152 = ((($$0170$i)) + 20|0);
        $153 = HEAP32[$152>>2]|0;
        $154 = ($153|0)==(0|0);
        if ($154) {
         $155 = ((($$0170$i)) + 16|0);
         $156 = HEAP32[$155>>2]|0;
         $157 = ($156|0)==(0|0);
         if ($157) {
          $$3$i = 0;
          break;
         } else {
          $$1174$i$ph = $156;$$1176$i$ph = $155;
         }
        } else {
         $$1174$i$ph = $153;$$1176$i$ph = $152;
        }
        $$1174$i = $$1174$i$ph;$$1176$i = $$1176$i$ph;
        while(1) {
         $158 = ((($$1174$i)) + 20|0);
         $159 = HEAP32[$158>>2]|0;
         $160 = ($159|0)==(0|0);
         if ($160) {
          $161 = ((($$1174$i)) + 16|0);
          $162 = HEAP32[$161>>2]|0;
          $163 = ($162|0)==(0|0);
          if ($163) {
           break;
          } else {
           $$1174$i$be = $162;$$1176$i$be = $161;
          }
         } else {
          $$1174$i$be = $159;$$1176$i$be = $158;
         }
         $$1174$i = $$1174$i$be;$$1176$i = $$1176$i$be;
        }
        HEAP32[$$1176$i>>2] = 0;
        $$3$i = $$1174$i;
       } else {
        $148 = ((($$0170$i)) + 8|0);
        $149 = HEAP32[$148>>2]|0;
        $150 = ((($149)) + 12|0);
        HEAP32[$150>>2] = $146;
        $151 = ((($146)) + 8|0);
        HEAP32[$151>>2] = $149;
        $$3$i = $146;
       }
      } while(0);
      $164 = ($144|0)==(0|0);
      do {
       if (!($164)) {
        $165 = ((($$0170$i)) + 28|0);
        $166 = HEAP32[$165>>2]|0;
        $167 = (49500 + ($166<<2)|0);
        $168 = HEAP32[$167>>2]|0;
        $169 = ($$0170$i|0)==($168|0);
        if ($169) {
         HEAP32[$167>>2] = $$3$i;
         $cond$i = ($$3$i|0)==(0|0);
         if ($cond$i) {
          $170 = 1 << $166;
          $171 = $170 ^ -1;
          $172 = $98 & $171;
          HEAP32[(49200)>>2] = $172;
          break;
         }
        } else {
         $173 = ((($144)) + 16|0);
         $174 = HEAP32[$173>>2]|0;
         $175 = ($174|0)==($$0170$i|0);
         $176 = ((($144)) + 20|0);
         $$sink = $175 ? $173 : $176;
         HEAP32[$$sink>>2] = $$3$i;
         $177 = ($$3$i|0)==(0|0);
         if ($177) {
          break;
         }
        }
        $178 = ((($$3$i)) + 24|0);
        HEAP32[$178>>2] = $144;
        $179 = ((($$0170$i)) + 16|0);
        $180 = HEAP32[$179>>2]|0;
        $181 = ($180|0)==(0|0);
        if (!($181)) {
         $182 = ((($$3$i)) + 16|0);
         HEAP32[$182>>2] = $180;
         $183 = ((($180)) + 24|0);
         HEAP32[$183>>2] = $$3$i;
        }
        $184 = ((($$0170$i)) + 20|0);
        $185 = HEAP32[$184>>2]|0;
        $186 = ($185|0)==(0|0);
        if (!($186)) {
         $187 = ((($$3$i)) + 20|0);
         HEAP32[$187>>2] = $185;
         $188 = ((($185)) + 24|0);
         HEAP32[$188>>2] = $$3$i;
        }
       }
      } while(0);
      $189 = ($$0171$i>>>0)<(16);
      if ($189) {
       $190 = (($$0171$i) + ($6))|0;
       $191 = $190 | 3;
       $192 = ((($$0170$i)) + 4|0);
       HEAP32[$192>>2] = $191;
       $193 = (($$0170$i) + ($190)|0);
       $194 = ((($193)) + 4|0);
       $195 = HEAP32[$194>>2]|0;
       $196 = $195 | 1;
       HEAP32[$194>>2] = $196;
      } else {
       $197 = $6 | 3;
       $198 = ((($$0170$i)) + 4|0);
       HEAP32[$198>>2] = $197;
       $199 = $$0171$i | 1;
       $200 = ((($141)) + 4|0);
       HEAP32[$200>>2] = $199;
       $201 = (($141) + ($$0171$i)|0);
       HEAP32[$201>>2] = $$0171$i;
       $202 = ($33|0)==(0);
       if (!($202)) {
        $203 = HEAP32[(49216)>>2]|0;
        $204 = $33 >>> 3;
        $205 = $204 << 1;
        $206 = (49236 + ($205<<2)|0);
        $207 = 1 << $204;
        $208 = $207 & $8;
        $209 = ($208|0)==(0);
        if ($209) {
         $210 = $207 | $8;
         HEAP32[12299] = $210;
         $$pre$i = ((($206)) + 8|0);
         $$0$i = $206;$$pre$phi$iZ2D = $$pre$i;
        } else {
         $211 = ((($206)) + 8|0);
         $212 = HEAP32[$211>>2]|0;
         $$0$i = $212;$$pre$phi$iZ2D = $211;
        }
        HEAP32[$$pre$phi$iZ2D>>2] = $203;
        $213 = ((($$0$i)) + 12|0);
        HEAP32[$213>>2] = $203;
        $214 = ((($203)) + 8|0);
        HEAP32[$214>>2] = $$0$i;
        $215 = ((($203)) + 12|0);
        HEAP32[$215>>2] = $206;
       }
       HEAP32[(49204)>>2] = $$0171$i;
       HEAP32[(49216)>>2] = $141;
      }
      $216 = ((($$0170$i)) + 8|0);
      $$0 = $216;
      STACKTOP = sp;return ($$0|0);
     } else {
      $$0192 = $6;
     }
    }
   } else {
    $$0192 = $6;
   }
  } else {
   $217 = ($0>>>0)>(4294967231);
   if ($217) {
    $$0192 = -1;
   } else {
    $218 = (($0) + 11)|0;
    $219 = $218 & -8;
    $220 = HEAP32[(49200)>>2]|0;
    $221 = ($220|0)==(0);
    if ($221) {
     $$0192 = $219;
    } else {
     $222 = (0 - ($219))|0;
     $223 = $218 >>> 8;
     $224 = ($223|0)==(0);
     if ($224) {
      $$0335$i = 0;
     } else {
      $225 = ($219>>>0)>(16777215);
      if ($225) {
       $$0335$i = 31;
      } else {
       $226 = (($223) + 1048320)|0;
       $227 = $226 >>> 16;
       $228 = $227 & 8;
       $229 = $223 << $228;
       $230 = (($229) + 520192)|0;
       $231 = $230 >>> 16;
       $232 = $231 & 4;
       $233 = $232 | $228;
       $234 = $229 << $232;
       $235 = (($234) + 245760)|0;
       $236 = $235 >>> 16;
       $237 = $236 & 2;
       $238 = $233 | $237;
       $239 = (14 - ($238))|0;
       $240 = $234 << $237;
       $241 = $240 >>> 15;
       $242 = (($239) + ($241))|0;
       $243 = $242 << 1;
       $244 = (($242) + 7)|0;
       $245 = $219 >>> $244;
       $246 = $245 & 1;
       $247 = $246 | $243;
       $$0335$i = $247;
      }
     }
     $248 = (49500 + ($$0335$i<<2)|0);
     $249 = HEAP32[$248>>2]|0;
     $250 = ($249|0)==(0|0);
     L79: do {
      if ($250) {
       $$2331$i = 0;$$3$i198 = 0;$$3326$i = $222;
       label = 61;
      } else {
       $251 = ($$0335$i|0)==(31);
       $252 = $$0335$i >>> 1;
       $253 = (25 - ($252))|0;
       $254 = $251 ? 0 : $253;
       $255 = $219 << $254;
       $$0318$i = 0;$$0323$i = $222;$$0329$i = $249;$$0336$i = $255;$$0339$i = 0;
       while(1) {
        $256 = ((($$0329$i)) + 4|0);
        $257 = HEAP32[$256>>2]|0;
        $258 = $257 & -8;
        $259 = (($258) - ($219))|0;
        $260 = ($259>>>0)<($$0323$i>>>0);
        if ($260) {
         $261 = ($259|0)==(0);
         if ($261) {
          $$415$i$ph = $$0329$i;$$432714$i$ph = 0;$$533413$i$ph = $$0329$i;
          label = 65;
          break L79;
         } else {
          $$1319$i = $$0329$i;$$1324$i = $259;
         }
        } else {
         $$1319$i = $$0318$i;$$1324$i = $$0323$i;
        }
        $262 = ((($$0329$i)) + 20|0);
        $263 = HEAP32[$262>>2]|0;
        $264 = $$0336$i >>> 31;
        $265 = (((($$0329$i)) + 16|0) + ($264<<2)|0);
        $266 = HEAP32[$265>>2]|0;
        $267 = ($263|0)==(0|0);
        $268 = ($263|0)==($266|0);
        $or$cond1$i197 = $267 | $268;
        $$1340$i = $or$cond1$i197 ? $$0339$i : $263;
        $269 = ($266|0)==(0|0);
        $spec$select4$i = $$0336$i << 1;
        if ($269) {
         $$2331$i = $$1340$i;$$3$i198 = $$1319$i;$$3326$i = $$1324$i;
         label = 61;
         break;
        } else {
         $$0318$i = $$1319$i;$$0323$i = $$1324$i;$$0329$i = $266;$$0336$i = $spec$select4$i;$$0339$i = $$1340$i;
        }
       }
      }
     } while(0);
     if ((label|0) == 61) {
      $270 = ($$2331$i|0)==(0|0);
      $271 = ($$3$i198|0)==(0|0);
      $or$cond$i199 = $270 & $271;
      if ($or$cond$i199) {
       $272 = 2 << $$0335$i;
       $273 = (0 - ($272))|0;
       $274 = $272 | $273;
       $275 = $274 & $220;
       $276 = ($275|0)==(0);
       if ($276) {
        $$0192 = $219;
        break;
       }
       $277 = (0 - ($275))|0;
       $278 = $275 & $277;
       $279 = (($278) + -1)|0;
       $280 = $279 >>> 12;
       $281 = $280 & 16;
       $282 = $279 >>> $281;
       $283 = $282 >>> 5;
       $284 = $283 & 8;
       $285 = $284 | $281;
       $286 = $282 >>> $284;
       $287 = $286 >>> 2;
       $288 = $287 & 4;
       $289 = $285 | $288;
       $290 = $286 >>> $288;
       $291 = $290 >>> 1;
       $292 = $291 & 2;
       $293 = $289 | $292;
       $294 = $290 >>> $292;
       $295 = $294 >>> 1;
       $296 = $295 & 1;
       $297 = $293 | $296;
       $298 = $294 >>> $296;
       $299 = (($297) + ($298))|0;
       $300 = (49500 + ($299<<2)|0);
       $301 = HEAP32[$300>>2]|0;
       $$3$i198211 = 0;$$4333$i = $301;
      } else {
       $$3$i198211 = $$3$i198;$$4333$i = $$2331$i;
      }
      $302 = ($$4333$i|0)==(0|0);
      if ($302) {
       $$4$lcssa$i = $$3$i198211;$$4327$lcssa$i = $$3326$i;
      } else {
       $$415$i$ph = $$3$i198211;$$432714$i$ph = $$3326$i;$$533413$i$ph = $$4333$i;
       label = 65;
      }
     }
     if ((label|0) == 65) {
      $$415$i = $$415$i$ph;$$432714$i = $$432714$i$ph;$$533413$i = $$533413$i$ph;
      while(1) {
       $303 = ((($$533413$i)) + 4|0);
       $304 = HEAP32[$303>>2]|0;
       $305 = $304 & -8;
       $306 = (($305) - ($219))|0;
       $307 = ($306>>>0)<($$432714$i>>>0);
       $spec$select$i201 = $307 ? $306 : $$432714$i;
       $spec$select2$i = $307 ? $$533413$i : $$415$i;
       $308 = ((($$533413$i)) + 16|0);
       $309 = HEAP32[$308>>2]|0;
       $310 = ($309|0)==(0|0);
       if ($310) {
        $311 = ((($$533413$i)) + 20|0);
        $312 = HEAP32[$311>>2]|0;
        $314 = $312;
       } else {
        $314 = $309;
       }
       $313 = ($314|0)==(0|0);
       if ($313) {
        $$4$lcssa$i = $spec$select2$i;$$4327$lcssa$i = $spec$select$i201;
        break;
       } else {
        $$415$i = $spec$select2$i;$$432714$i = $spec$select$i201;$$533413$i = $314;
       }
      }
     }
     $315 = ($$4$lcssa$i|0)==(0|0);
     if ($315) {
      $$0192 = $219;
     } else {
      $316 = HEAP32[(49204)>>2]|0;
      $317 = (($316) - ($219))|0;
      $318 = ($$4327$lcssa$i>>>0)<($317>>>0);
      if ($318) {
       $319 = (($$4$lcssa$i) + ($219)|0);
       $320 = ($319>>>0)>($$4$lcssa$i>>>0);
       if ($320) {
        $321 = ((($$4$lcssa$i)) + 24|0);
        $322 = HEAP32[$321>>2]|0;
        $323 = ((($$4$lcssa$i)) + 12|0);
        $324 = HEAP32[$323>>2]|0;
        $325 = ($324|0)==($$4$lcssa$i|0);
        do {
         if ($325) {
          $330 = ((($$4$lcssa$i)) + 20|0);
          $331 = HEAP32[$330>>2]|0;
          $332 = ($331|0)==(0|0);
          if ($332) {
           $333 = ((($$4$lcssa$i)) + 16|0);
           $334 = HEAP32[$333>>2]|0;
           $335 = ($334|0)==(0|0);
           if ($335) {
            $$3348$i = 0;
            break;
           } else {
            $$1346$i$ph = $334;$$1350$i$ph = $333;
           }
          } else {
           $$1346$i$ph = $331;$$1350$i$ph = $330;
          }
          $$1346$i = $$1346$i$ph;$$1350$i = $$1350$i$ph;
          while(1) {
           $336 = ((($$1346$i)) + 20|0);
           $337 = HEAP32[$336>>2]|0;
           $338 = ($337|0)==(0|0);
           if ($338) {
            $339 = ((($$1346$i)) + 16|0);
            $340 = HEAP32[$339>>2]|0;
            $341 = ($340|0)==(0|0);
            if ($341) {
             break;
            } else {
             $$1346$i$be = $340;$$1350$i$be = $339;
            }
           } else {
            $$1346$i$be = $337;$$1350$i$be = $336;
           }
           $$1346$i = $$1346$i$be;$$1350$i = $$1350$i$be;
          }
          HEAP32[$$1350$i>>2] = 0;
          $$3348$i = $$1346$i;
         } else {
          $326 = ((($$4$lcssa$i)) + 8|0);
          $327 = HEAP32[$326>>2]|0;
          $328 = ((($327)) + 12|0);
          HEAP32[$328>>2] = $324;
          $329 = ((($324)) + 8|0);
          HEAP32[$329>>2] = $327;
          $$3348$i = $324;
         }
        } while(0);
        $342 = ($322|0)==(0|0);
        do {
         if ($342) {
          $425 = $220;
         } else {
          $343 = ((($$4$lcssa$i)) + 28|0);
          $344 = HEAP32[$343>>2]|0;
          $345 = (49500 + ($344<<2)|0);
          $346 = HEAP32[$345>>2]|0;
          $347 = ($$4$lcssa$i|0)==($346|0);
          if ($347) {
           HEAP32[$345>>2] = $$3348$i;
           $cond$i203 = ($$3348$i|0)==(0|0);
           if ($cond$i203) {
            $348 = 1 << $344;
            $349 = $348 ^ -1;
            $350 = $220 & $349;
            HEAP32[(49200)>>2] = $350;
            $425 = $350;
            break;
           }
          } else {
           $351 = ((($322)) + 16|0);
           $352 = HEAP32[$351>>2]|0;
           $353 = ($352|0)==($$4$lcssa$i|0);
           $354 = ((($322)) + 20|0);
           $$sink320 = $353 ? $351 : $354;
           HEAP32[$$sink320>>2] = $$3348$i;
           $355 = ($$3348$i|0)==(0|0);
           if ($355) {
            $425 = $220;
            break;
           }
          }
          $356 = ((($$3348$i)) + 24|0);
          HEAP32[$356>>2] = $322;
          $357 = ((($$4$lcssa$i)) + 16|0);
          $358 = HEAP32[$357>>2]|0;
          $359 = ($358|0)==(0|0);
          if (!($359)) {
           $360 = ((($$3348$i)) + 16|0);
           HEAP32[$360>>2] = $358;
           $361 = ((($358)) + 24|0);
           HEAP32[$361>>2] = $$3348$i;
          }
          $362 = ((($$4$lcssa$i)) + 20|0);
          $363 = HEAP32[$362>>2]|0;
          $364 = ($363|0)==(0|0);
          if ($364) {
           $425 = $220;
          } else {
           $365 = ((($$3348$i)) + 20|0);
           HEAP32[$365>>2] = $363;
           $366 = ((($363)) + 24|0);
           HEAP32[$366>>2] = $$3348$i;
           $425 = $220;
          }
         }
        } while(0);
        $367 = ($$4327$lcssa$i>>>0)<(16);
        L128: do {
         if ($367) {
          $368 = (($$4327$lcssa$i) + ($219))|0;
          $369 = $368 | 3;
          $370 = ((($$4$lcssa$i)) + 4|0);
          HEAP32[$370>>2] = $369;
          $371 = (($$4$lcssa$i) + ($368)|0);
          $372 = ((($371)) + 4|0);
          $373 = HEAP32[$372>>2]|0;
          $374 = $373 | 1;
          HEAP32[$372>>2] = $374;
         } else {
          $375 = $219 | 3;
          $376 = ((($$4$lcssa$i)) + 4|0);
          HEAP32[$376>>2] = $375;
          $377 = $$4327$lcssa$i | 1;
          $378 = ((($319)) + 4|0);
          HEAP32[$378>>2] = $377;
          $379 = (($319) + ($$4327$lcssa$i)|0);
          HEAP32[$379>>2] = $$4327$lcssa$i;
          $380 = $$4327$lcssa$i >>> 3;
          $381 = ($$4327$lcssa$i>>>0)<(256);
          if ($381) {
           $382 = $380 << 1;
           $383 = (49236 + ($382<<2)|0);
           $384 = HEAP32[12299]|0;
           $385 = 1 << $380;
           $386 = $384 & $385;
           $387 = ($386|0)==(0);
           if ($387) {
            $388 = $384 | $385;
            HEAP32[12299] = $388;
            $$pre$i204 = ((($383)) + 8|0);
            $$0344$i = $383;$$pre$phi$i205Z2D = $$pre$i204;
           } else {
            $389 = ((($383)) + 8|0);
            $390 = HEAP32[$389>>2]|0;
            $$0344$i = $390;$$pre$phi$i205Z2D = $389;
           }
           HEAP32[$$pre$phi$i205Z2D>>2] = $319;
           $391 = ((($$0344$i)) + 12|0);
           HEAP32[$391>>2] = $319;
           $392 = ((($319)) + 8|0);
           HEAP32[$392>>2] = $$0344$i;
           $393 = ((($319)) + 12|0);
           HEAP32[$393>>2] = $383;
           break;
          }
          $394 = $$4327$lcssa$i >>> 8;
          $395 = ($394|0)==(0);
          if ($395) {
           $$0338$i = 0;
          } else {
           $396 = ($$4327$lcssa$i>>>0)>(16777215);
           if ($396) {
            $$0338$i = 31;
           } else {
            $397 = (($394) + 1048320)|0;
            $398 = $397 >>> 16;
            $399 = $398 & 8;
            $400 = $394 << $399;
            $401 = (($400) + 520192)|0;
            $402 = $401 >>> 16;
            $403 = $402 & 4;
            $404 = $403 | $399;
            $405 = $400 << $403;
            $406 = (($405) + 245760)|0;
            $407 = $406 >>> 16;
            $408 = $407 & 2;
            $409 = $404 | $408;
            $410 = (14 - ($409))|0;
            $411 = $405 << $408;
            $412 = $411 >>> 15;
            $413 = (($410) + ($412))|0;
            $414 = $413 << 1;
            $415 = (($413) + 7)|0;
            $416 = $$4327$lcssa$i >>> $415;
            $417 = $416 & 1;
            $418 = $417 | $414;
            $$0338$i = $418;
           }
          }
          $419 = (49500 + ($$0338$i<<2)|0);
          $420 = ((($319)) + 28|0);
          HEAP32[$420>>2] = $$0338$i;
          $421 = ((($319)) + 16|0);
          $422 = ((($421)) + 4|0);
          HEAP32[$422>>2] = 0;
          HEAP32[$421>>2] = 0;
          $423 = 1 << $$0338$i;
          $424 = $425 & $423;
          $426 = ($424|0)==(0);
          if ($426) {
           $427 = $425 | $423;
           HEAP32[(49200)>>2] = $427;
           HEAP32[$419>>2] = $319;
           $428 = ((($319)) + 24|0);
           HEAP32[$428>>2] = $419;
           $429 = ((($319)) + 12|0);
           HEAP32[$429>>2] = $319;
           $430 = ((($319)) + 8|0);
           HEAP32[$430>>2] = $319;
           break;
          }
          $431 = HEAP32[$419>>2]|0;
          $432 = ((($431)) + 4|0);
          $433 = HEAP32[$432>>2]|0;
          $434 = $433 & -8;
          $435 = ($434|0)==($$4327$lcssa$i|0);
          L145: do {
           if ($435) {
            $$0321$lcssa$i = $431;
           } else {
            $436 = ($$0338$i|0)==(31);
            $437 = $$0338$i >>> 1;
            $438 = (25 - ($437))|0;
            $439 = $436 ? 0 : $438;
            $440 = $$4327$lcssa$i << $439;
            $$032012$i = $440;$$032111$i = $431;
            while(1) {
             $447 = $$032012$i >>> 31;
             $448 = (((($$032111$i)) + 16|0) + ($447<<2)|0);
             $443 = HEAP32[$448>>2]|0;
             $449 = ($443|0)==(0|0);
             if ($449) {
              break;
             }
             $441 = $$032012$i << 1;
             $442 = ((($443)) + 4|0);
             $444 = HEAP32[$442>>2]|0;
             $445 = $444 & -8;
             $446 = ($445|0)==($$4327$lcssa$i|0);
             if ($446) {
              $$0321$lcssa$i = $443;
              break L145;
             } else {
              $$032012$i = $441;$$032111$i = $443;
             }
            }
            HEAP32[$448>>2] = $319;
            $450 = ((($319)) + 24|0);
            HEAP32[$450>>2] = $$032111$i;
            $451 = ((($319)) + 12|0);
            HEAP32[$451>>2] = $319;
            $452 = ((($319)) + 8|0);
            HEAP32[$452>>2] = $319;
            break L128;
           }
          } while(0);
          $453 = ((($$0321$lcssa$i)) + 8|0);
          $454 = HEAP32[$453>>2]|0;
          $455 = ((($454)) + 12|0);
          HEAP32[$455>>2] = $319;
          HEAP32[$453>>2] = $319;
          $456 = ((($319)) + 8|0);
          HEAP32[$456>>2] = $454;
          $457 = ((($319)) + 12|0);
          HEAP32[$457>>2] = $$0321$lcssa$i;
          $458 = ((($319)) + 24|0);
          HEAP32[$458>>2] = 0;
         }
        } while(0);
        $459 = ((($$4$lcssa$i)) + 8|0);
        $$0 = $459;
        STACKTOP = sp;return ($$0|0);
       } else {
        $$0192 = $219;
       }
      } else {
       $$0192 = $219;
      }
     }
    }
   }
  }
 } while(0);
 $460 = HEAP32[(49204)>>2]|0;
 $461 = ($460>>>0)<($$0192>>>0);
 if (!($461)) {
  $462 = (($460) - ($$0192))|0;
  $463 = HEAP32[(49216)>>2]|0;
  $464 = ($462>>>0)>(15);
  if ($464) {
   $465 = (($463) + ($$0192)|0);
   HEAP32[(49216)>>2] = $465;
   HEAP32[(49204)>>2] = $462;
   $466 = $462 | 1;
   $467 = ((($465)) + 4|0);
   HEAP32[$467>>2] = $466;
   $468 = (($463) + ($460)|0);
   HEAP32[$468>>2] = $462;
   $469 = $$0192 | 3;
   $470 = ((($463)) + 4|0);
   HEAP32[$470>>2] = $469;
  } else {
   HEAP32[(49204)>>2] = 0;
   HEAP32[(49216)>>2] = 0;
   $471 = $460 | 3;
   $472 = ((($463)) + 4|0);
   HEAP32[$472>>2] = $471;
   $473 = (($463) + ($460)|0);
   $474 = ((($473)) + 4|0);
   $475 = HEAP32[$474>>2]|0;
   $476 = $475 | 1;
   HEAP32[$474>>2] = $476;
  }
  $477 = ((($463)) + 8|0);
  $$0 = $477;
  STACKTOP = sp;return ($$0|0);
 }
 $478 = HEAP32[(49208)>>2]|0;
 $479 = ($478>>>0)>($$0192>>>0);
 if ($479) {
  $480 = (($478) - ($$0192))|0;
  HEAP32[(49208)>>2] = $480;
  $481 = HEAP32[(49220)>>2]|0;
  $482 = (($481) + ($$0192)|0);
  HEAP32[(49220)>>2] = $482;
  $483 = $480 | 1;
  $484 = ((($482)) + 4|0);
  HEAP32[$484>>2] = $483;
  $485 = $$0192 | 3;
  $486 = ((($481)) + 4|0);
  HEAP32[$486>>2] = $485;
  $487 = ((($481)) + 8|0);
  $$0 = $487;
  STACKTOP = sp;return ($$0|0);
 }
 $488 = HEAP32[12417]|0;
 $489 = ($488|0)==(0);
 if ($489) {
  HEAP32[(49676)>>2] = 4096;
  HEAP32[(49672)>>2] = 4096;
  HEAP32[(49680)>>2] = -1;
  HEAP32[(49684)>>2] = -1;
  HEAP32[(49688)>>2] = 0;
  HEAP32[(49640)>>2] = 0;
  $490 = $1;
  $491 = $490 & -16;
  $492 = $491 ^ 1431655768;
  HEAP32[12417] = $492;
  $496 = 4096;
 } else {
  $$pre$i195 = HEAP32[(49676)>>2]|0;
  $496 = $$pre$i195;
 }
 $493 = (($$0192) + 48)|0;
 $494 = (($$0192) + 47)|0;
 $495 = (($496) + ($494))|0;
 $497 = (0 - ($496))|0;
 $498 = $495 & $497;
 $499 = ($498>>>0)>($$0192>>>0);
 if (!($499)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $500 = HEAP32[(49636)>>2]|0;
 $501 = ($500|0)==(0);
 if (!($501)) {
  $502 = HEAP32[(49628)>>2]|0;
  $503 = (($502) + ($498))|0;
  $504 = ($503>>>0)<=($502>>>0);
  $505 = ($503>>>0)>($500>>>0);
  $or$cond1$i = $504 | $505;
  if ($or$cond1$i) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $506 = HEAP32[(49640)>>2]|0;
 $507 = $506 & 4;
 $508 = ($507|0)==(0);
 L178: do {
  if ($508) {
   $509 = HEAP32[(49220)>>2]|0;
   $510 = ($509|0)==(0|0);
   L180: do {
    if ($510) {
     label = 128;
    } else {
     $$0$i20$i = (49644);
     while(1) {
      $511 = HEAP32[$$0$i20$i>>2]|0;
      $512 = ($511>>>0)>($509>>>0);
      if (!($512)) {
       $513 = ((($$0$i20$i)) + 4|0);
       $514 = HEAP32[$513>>2]|0;
       $515 = (($511) + ($514)|0);
       $516 = ($515>>>0)>($509>>>0);
       if ($516) {
        break;
       }
      }
      $517 = ((($$0$i20$i)) + 8|0);
      $518 = HEAP32[$517>>2]|0;
      $519 = ($518|0)==(0|0);
      if ($519) {
       label = 128;
       break L180;
      } else {
       $$0$i20$i = $518;
      }
     }
     $542 = (($495) - ($478))|0;
     $543 = $542 & $497;
     $544 = ($543>>>0)<(2147483647);
     if ($544) {
      $545 = ((($$0$i20$i)) + 4|0);
      $546 = (_sbrk(($543|0))|0);
      $547 = HEAP32[$$0$i20$i>>2]|0;
      $548 = HEAP32[$545>>2]|0;
      $549 = (($547) + ($548)|0);
      $550 = ($546|0)==($549|0);
      if ($550) {
       $551 = ($546|0)==((-1)|0);
       if ($551) {
        $$2234243136$i = $543;
       } else {
        $$723947$i = $543;$$748$i = $546;
        label = 145;
        break L178;
       }
      } else {
       $$2247$ph$i = $546;$$2253$ph$i = $543;
       label = 136;
      }
     } else {
      $$2234243136$i = 0;
     }
    }
   } while(0);
   do {
    if ((label|0) == 128) {
     $520 = (_sbrk(0)|0);
     $521 = ($520|0)==((-1)|0);
     if ($521) {
      $$2234243136$i = 0;
     } else {
      $522 = $520;
      $523 = HEAP32[(49672)>>2]|0;
      $524 = (($523) + -1)|0;
      $525 = $524 & $522;
      $526 = ($525|0)==(0);
      $527 = (($524) + ($522))|0;
      $528 = (0 - ($523))|0;
      $529 = $527 & $528;
      $530 = (($529) - ($522))|0;
      $531 = $526 ? 0 : $530;
      $spec$select49$i = (($531) + ($498))|0;
      $532 = HEAP32[(49628)>>2]|0;
      $533 = (($spec$select49$i) + ($532))|0;
      $534 = ($spec$select49$i>>>0)>($$0192>>>0);
      $535 = ($spec$select49$i>>>0)<(2147483647);
      $or$cond$i = $534 & $535;
      if ($or$cond$i) {
       $536 = HEAP32[(49636)>>2]|0;
       $537 = ($536|0)==(0);
       if (!($537)) {
        $538 = ($533>>>0)<=($532>>>0);
        $539 = ($533>>>0)>($536>>>0);
        $or$cond2$i = $538 | $539;
        if ($or$cond2$i) {
         $$2234243136$i = 0;
         break;
        }
       }
       $540 = (_sbrk(($spec$select49$i|0))|0);
       $541 = ($540|0)==($520|0);
       if ($541) {
        $$723947$i = $spec$select49$i;$$748$i = $520;
        label = 145;
        break L178;
       } else {
        $$2247$ph$i = $540;$$2253$ph$i = $spec$select49$i;
        label = 136;
       }
      } else {
       $$2234243136$i = 0;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 136) {
     $552 = (0 - ($$2253$ph$i))|0;
     $553 = ($$2247$ph$i|0)!=((-1)|0);
     $554 = ($$2253$ph$i>>>0)<(2147483647);
     $or$cond7$i = $554 & $553;
     $555 = ($493>>>0)>($$2253$ph$i>>>0);
     $or$cond6$i = $555 & $or$cond7$i;
     if (!($or$cond6$i)) {
      $565 = ($$2247$ph$i|0)==((-1)|0);
      if ($565) {
       $$2234243136$i = 0;
       break;
      } else {
       $$723947$i = $$2253$ph$i;$$748$i = $$2247$ph$i;
       label = 145;
       break L178;
      }
     }
     $556 = HEAP32[(49676)>>2]|0;
     $557 = (($494) - ($$2253$ph$i))|0;
     $558 = (($557) + ($556))|0;
     $559 = (0 - ($556))|0;
     $560 = $558 & $559;
     $561 = ($560>>>0)<(2147483647);
     if (!($561)) {
      $$723947$i = $$2253$ph$i;$$748$i = $$2247$ph$i;
      label = 145;
      break L178;
     }
     $562 = (_sbrk(($560|0))|0);
     $563 = ($562|0)==((-1)|0);
     if ($563) {
      (_sbrk(($552|0))|0);
      $$2234243136$i = 0;
      break;
     } else {
      $564 = (($560) + ($$2253$ph$i))|0;
      $$723947$i = $564;$$748$i = $$2247$ph$i;
      label = 145;
      break L178;
     }
    }
   } while(0);
   $566 = HEAP32[(49640)>>2]|0;
   $567 = $566 | 4;
   HEAP32[(49640)>>2] = $567;
   $$4236$i = $$2234243136$i;
   label = 143;
  } else {
   $$4236$i = 0;
   label = 143;
  }
 } while(0);
 if ((label|0) == 143) {
  $568 = ($498>>>0)<(2147483647);
  if ($568) {
   $569 = (_sbrk(($498|0))|0);
   $570 = (_sbrk(0)|0);
   $571 = ($569|0)!=((-1)|0);
   $572 = ($570|0)!=((-1)|0);
   $or$cond5$i = $571 & $572;
   $573 = ($569>>>0)<($570>>>0);
   $or$cond8$i = $573 & $or$cond5$i;
   $574 = $570;
   $575 = $569;
   $576 = (($574) - ($575))|0;
   $577 = (($$0192) + 40)|0;
   $578 = ($576>>>0)>($577>>>0);
   $spec$select9$i = $578 ? $576 : $$4236$i;
   $or$cond8$not$i = $or$cond8$i ^ 1;
   $579 = ($569|0)==((-1)|0);
   $not$$i = $578 ^ 1;
   $580 = $579 | $not$$i;
   $or$cond50$i = $580 | $or$cond8$not$i;
   if (!($or$cond50$i)) {
    $$723947$i = $spec$select9$i;$$748$i = $569;
    label = 145;
   }
  }
 }
 if ((label|0) == 145) {
  $581 = HEAP32[(49628)>>2]|0;
  $582 = (($581) + ($$723947$i))|0;
  HEAP32[(49628)>>2] = $582;
  $583 = HEAP32[(49632)>>2]|0;
  $584 = ($582>>>0)>($583>>>0);
  if ($584) {
   HEAP32[(49632)>>2] = $582;
  }
  $585 = HEAP32[(49220)>>2]|0;
  $586 = ($585|0)==(0|0);
  L215: do {
   if ($586) {
    $587 = HEAP32[(49212)>>2]|0;
    $588 = ($587|0)==(0|0);
    $589 = ($$748$i>>>0)<($587>>>0);
    $or$cond11$i = $588 | $589;
    if ($or$cond11$i) {
     HEAP32[(49212)>>2] = $$748$i;
    }
    HEAP32[(49644)>>2] = $$748$i;
    HEAP32[(49648)>>2] = $$723947$i;
    HEAP32[(49656)>>2] = 0;
    $590 = HEAP32[12417]|0;
    HEAP32[(49232)>>2] = $590;
    HEAP32[(49228)>>2] = -1;
    HEAP32[(49248)>>2] = (49236);
    HEAP32[(49244)>>2] = (49236);
    HEAP32[(49256)>>2] = (49244);
    HEAP32[(49252)>>2] = (49244);
    HEAP32[(49264)>>2] = (49252);
    HEAP32[(49260)>>2] = (49252);
    HEAP32[(49272)>>2] = (49260);
    HEAP32[(49268)>>2] = (49260);
    HEAP32[(49280)>>2] = (49268);
    HEAP32[(49276)>>2] = (49268);
    HEAP32[(49288)>>2] = (49276);
    HEAP32[(49284)>>2] = (49276);
    HEAP32[(49296)>>2] = (49284);
    HEAP32[(49292)>>2] = (49284);
    HEAP32[(49304)>>2] = (49292);
    HEAP32[(49300)>>2] = (49292);
    HEAP32[(49312)>>2] = (49300);
    HEAP32[(49308)>>2] = (49300);
    HEAP32[(49320)>>2] = (49308);
    HEAP32[(49316)>>2] = (49308);
    HEAP32[(49328)>>2] = (49316);
    HEAP32[(49324)>>2] = (49316);
    HEAP32[(49336)>>2] = (49324);
    HEAP32[(49332)>>2] = (49324);
    HEAP32[(49344)>>2] = (49332);
    HEAP32[(49340)>>2] = (49332);
    HEAP32[(49352)>>2] = (49340);
    HEAP32[(49348)>>2] = (49340);
    HEAP32[(49360)>>2] = (49348);
    HEAP32[(49356)>>2] = (49348);
    HEAP32[(49368)>>2] = (49356);
    HEAP32[(49364)>>2] = (49356);
    HEAP32[(49376)>>2] = (49364);
    HEAP32[(49372)>>2] = (49364);
    HEAP32[(49384)>>2] = (49372);
    HEAP32[(49380)>>2] = (49372);
    HEAP32[(49392)>>2] = (49380);
    HEAP32[(49388)>>2] = (49380);
    HEAP32[(49400)>>2] = (49388);
    HEAP32[(49396)>>2] = (49388);
    HEAP32[(49408)>>2] = (49396);
    HEAP32[(49404)>>2] = (49396);
    HEAP32[(49416)>>2] = (49404);
    HEAP32[(49412)>>2] = (49404);
    HEAP32[(49424)>>2] = (49412);
    HEAP32[(49420)>>2] = (49412);
    HEAP32[(49432)>>2] = (49420);
    HEAP32[(49428)>>2] = (49420);
    HEAP32[(49440)>>2] = (49428);
    HEAP32[(49436)>>2] = (49428);
    HEAP32[(49448)>>2] = (49436);
    HEAP32[(49444)>>2] = (49436);
    HEAP32[(49456)>>2] = (49444);
    HEAP32[(49452)>>2] = (49444);
    HEAP32[(49464)>>2] = (49452);
    HEAP32[(49460)>>2] = (49452);
    HEAP32[(49472)>>2] = (49460);
    HEAP32[(49468)>>2] = (49460);
    HEAP32[(49480)>>2] = (49468);
    HEAP32[(49476)>>2] = (49468);
    HEAP32[(49488)>>2] = (49476);
    HEAP32[(49484)>>2] = (49476);
    HEAP32[(49496)>>2] = (49484);
    HEAP32[(49492)>>2] = (49484);
    $591 = (($$723947$i) + -40)|0;
    $592 = ((($$748$i)) + 8|0);
    $593 = $592;
    $594 = $593 & 7;
    $595 = ($594|0)==(0);
    $596 = (0 - ($593))|0;
    $597 = $596 & 7;
    $598 = $595 ? 0 : $597;
    $599 = (($$748$i) + ($598)|0);
    $600 = (($591) - ($598))|0;
    HEAP32[(49220)>>2] = $599;
    HEAP32[(49208)>>2] = $600;
    $601 = $600 | 1;
    $602 = ((($599)) + 4|0);
    HEAP32[$602>>2] = $601;
    $603 = (($$748$i) + ($591)|0);
    $604 = ((($603)) + 4|0);
    HEAP32[$604>>2] = 40;
    $605 = HEAP32[(49684)>>2]|0;
    HEAP32[(49224)>>2] = $605;
   } else {
    $$024372$i = (49644);
    while(1) {
     $606 = HEAP32[$$024372$i>>2]|0;
     $607 = ((($$024372$i)) + 4|0);
     $608 = HEAP32[$607>>2]|0;
     $609 = (($606) + ($608)|0);
     $610 = ($$748$i|0)==($609|0);
     if ($610) {
      label = 154;
      break;
     }
     $611 = ((($$024372$i)) + 8|0);
     $612 = HEAP32[$611>>2]|0;
     $613 = ($612|0)==(0|0);
     if ($613) {
      break;
     } else {
      $$024372$i = $612;
     }
    }
    if ((label|0) == 154) {
     $614 = ((($$024372$i)) + 4|0);
     $615 = ((($$024372$i)) + 12|0);
     $616 = HEAP32[$615>>2]|0;
     $617 = $616 & 8;
     $618 = ($617|0)==(0);
     if ($618) {
      $619 = ($606>>>0)<=($585>>>0);
      $620 = ($$748$i>>>0)>($585>>>0);
      $or$cond51$i = $620 & $619;
      if ($or$cond51$i) {
       $621 = (($608) + ($$723947$i))|0;
       HEAP32[$614>>2] = $621;
       $622 = HEAP32[(49208)>>2]|0;
       $623 = (($622) + ($$723947$i))|0;
       $624 = ((($585)) + 8|0);
       $625 = $624;
       $626 = $625 & 7;
       $627 = ($626|0)==(0);
       $628 = (0 - ($625))|0;
       $629 = $628 & 7;
       $630 = $627 ? 0 : $629;
       $631 = (($585) + ($630)|0);
       $632 = (($623) - ($630))|0;
       HEAP32[(49220)>>2] = $631;
       HEAP32[(49208)>>2] = $632;
       $633 = $632 | 1;
       $634 = ((($631)) + 4|0);
       HEAP32[$634>>2] = $633;
       $635 = (($585) + ($623)|0);
       $636 = ((($635)) + 4|0);
       HEAP32[$636>>2] = 40;
       $637 = HEAP32[(49684)>>2]|0;
       HEAP32[(49224)>>2] = $637;
       break;
      }
     }
    }
    $638 = HEAP32[(49212)>>2]|0;
    $639 = ($$748$i>>>0)<($638>>>0);
    if ($639) {
     HEAP32[(49212)>>2] = $$748$i;
    }
    $640 = (($$748$i) + ($$723947$i)|0);
    $$124471$i = (49644);
    while(1) {
     $641 = HEAP32[$$124471$i>>2]|0;
     $642 = ($641|0)==($640|0);
     if ($642) {
      label = 162;
      break;
     }
     $643 = ((($$124471$i)) + 8|0);
     $644 = HEAP32[$643>>2]|0;
     $645 = ($644|0)==(0|0);
     if ($645) {
      break;
     } else {
      $$124471$i = $644;
     }
    }
    if ((label|0) == 162) {
     $646 = ((($$124471$i)) + 12|0);
     $647 = HEAP32[$646>>2]|0;
     $648 = $647 & 8;
     $649 = ($648|0)==(0);
     if ($649) {
      HEAP32[$$124471$i>>2] = $$748$i;
      $650 = ((($$124471$i)) + 4|0);
      $651 = HEAP32[$650>>2]|0;
      $652 = (($651) + ($$723947$i))|0;
      HEAP32[$650>>2] = $652;
      $653 = ((($$748$i)) + 8|0);
      $654 = $653;
      $655 = $654 & 7;
      $656 = ($655|0)==(0);
      $657 = (0 - ($654))|0;
      $658 = $657 & 7;
      $659 = $656 ? 0 : $658;
      $660 = (($$748$i) + ($659)|0);
      $661 = ((($640)) + 8|0);
      $662 = $661;
      $663 = $662 & 7;
      $664 = ($663|0)==(0);
      $665 = (0 - ($662))|0;
      $666 = $665 & 7;
      $667 = $664 ? 0 : $666;
      $668 = (($640) + ($667)|0);
      $669 = $668;
      $670 = $660;
      $671 = (($669) - ($670))|0;
      $672 = (($660) + ($$0192)|0);
      $673 = (($671) - ($$0192))|0;
      $674 = $$0192 | 3;
      $675 = ((($660)) + 4|0);
      HEAP32[$675>>2] = $674;
      $676 = ($585|0)==($668|0);
      L238: do {
       if ($676) {
        $677 = HEAP32[(49208)>>2]|0;
        $678 = (($677) + ($673))|0;
        HEAP32[(49208)>>2] = $678;
        HEAP32[(49220)>>2] = $672;
        $679 = $678 | 1;
        $680 = ((($672)) + 4|0);
        HEAP32[$680>>2] = $679;
       } else {
        $681 = HEAP32[(49216)>>2]|0;
        $682 = ($681|0)==($668|0);
        if ($682) {
         $683 = HEAP32[(49204)>>2]|0;
         $684 = (($683) + ($673))|0;
         HEAP32[(49204)>>2] = $684;
         HEAP32[(49216)>>2] = $672;
         $685 = $684 | 1;
         $686 = ((($672)) + 4|0);
         HEAP32[$686>>2] = $685;
         $687 = (($672) + ($684)|0);
         HEAP32[$687>>2] = $684;
         break;
        }
        $688 = ((($668)) + 4|0);
        $689 = HEAP32[$688>>2]|0;
        $690 = $689 & 3;
        $691 = ($690|0)==(1);
        if ($691) {
         $692 = $689 & -8;
         $693 = $689 >>> 3;
         $694 = ($689>>>0)<(256);
         L246: do {
          if ($694) {
           $695 = ((($668)) + 8|0);
           $696 = HEAP32[$695>>2]|0;
           $697 = ((($668)) + 12|0);
           $698 = HEAP32[$697>>2]|0;
           $699 = ($698|0)==($696|0);
           if ($699) {
            $700 = 1 << $693;
            $701 = $700 ^ -1;
            $702 = HEAP32[12299]|0;
            $703 = $702 & $701;
            HEAP32[12299] = $703;
            break;
           } else {
            $704 = ((($696)) + 12|0);
            HEAP32[$704>>2] = $698;
            $705 = ((($698)) + 8|0);
            HEAP32[$705>>2] = $696;
            break;
           }
          } else {
           $706 = ((($668)) + 24|0);
           $707 = HEAP32[$706>>2]|0;
           $708 = ((($668)) + 12|0);
           $709 = HEAP32[$708>>2]|0;
           $710 = ($709|0)==($668|0);
           do {
            if ($710) {
             $715 = ((($668)) + 16|0);
             $716 = ((($715)) + 4|0);
             $717 = HEAP32[$716>>2]|0;
             $718 = ($717|0)==(0|0);
             if ($718) {
              $719 = HEAP32[$715>>2]|0;
              $720 = ($719|0)==(0|0);
              if ($720) {
               $$3$i$i = 0;
               break;
              } else {
               $$1263$i$i$ph = $719;$$1265$i$i$ph = $715;
              }
             } else {
              $$1263$i$i$ph = $717;$$1265$i$i$ph = $716;
             }
             $$1263$i$i = $$1263$i$i$ph;$$1265$i$i = $$1265$i$i$ph;
             while(1) {
              $721 = ((($$1263$i$i)) + 20|0);
              $722 = HEAP32[$721>>2]|0;
              $723 = ($722|0)==(0|0);
              if ($723) {
               $724 = ((($$1263$i$i)) + 16|0);
               $725 = HEAP32[$724>>2]|0;
               $726 = ($725|0)==(0|0);
               if ($726) {
                break;
               } else {
                $$1263$i$i$be = $725;$$1265$i$i$be = $724;
               }
              } else {
               $$1263$i$i$be = $722;$$1265$i$i$be = $721;
              }
              $$1263$i$i = $$1263$i$i$be;$$1265$i$i = $$1265$i$i$be;
             }
             HEAP32[$$1265$i$i>>2] = 0;
             $$3$i$i = $$1263$i$i;
            } else {
             $711 = ((($668)) + 8|0);
             $712 = HEAP32[$711>>2]|0;
             $713 = ((($712)) + 12|0);
             HEAP32[$713>>2] = $709;
             $714 = ((($709)) + 8|0);
             HEAP32[$714>>2] = $712;
             $$3$i$i = $709;
            }
           } while(0);
           $727 = ($707|0)==(0|0);
           if ($727) {
            break;
           }
           $728 = ((($668)) + 28|0);
           $729 = HEAP32[$728>>2]|0;
           $730 = (49500 + ($729<<2)|0);
           $731 = HEAP32[$730>>2]|0;
           $732 = ($731|0)==($668|0);
           do {
            if ($732) {
             HEAP32[$730>>2] = $$3$i$i;
             $cond$i$i = ($$3$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $733 = 1 << $729;
             $734 = $733 ^ -1;
             $735 = HEAP32[(49200)>>2]|0;
             $736 = $735 & $734;
             HEAP32[(49200)>>2] = $736;
             break L246;
            } else {
             $737 = ((($707)) + 16|0);
             $738 = HEAP32[$737>>2]|0;
             $739 = ($738|0)==($668|0);
             $740 = ((($707)) + 20|0);
             $$sink321 = $739 ? $737 : $740;
             HEAP32[$$sink321>>2] = $$3$i$i;
             $741 = ($$3$i$i|0)==(0|0);
             if ($741) {
              break L246;
             }
            }
           } while(0);
           $742 = ((($$3$i$i)) + 24|0);
           HEAP32[$742>>2] = $707;
           $743 = ((($668)) + 16|0);
           $744 = HEAP32[$743>>2]|0;
           $745 = ($744|0)==(0|0);
           if (!($745)) {
            $746 = ((($$3$i$i)) + 16|0);
            HEAP32[$746>>2] = $744;
            $747 = ((($744)) + 24|0);
            HEAP32[$747>>2] = $$3$i$i;
           }
           $748 = ((($743)) + 4|0);
           $749 = HEAP32[$748>>2]|0;
           $750 = ($749|0)==(0|0);
           if ($750) {
            break;
           }
           $751 = ((($$3$i$i)) + 20|0);
           HEAP32[$751>>2] = $749;
           $752 = ((($749)) + 24|0);
           HEAP32[$752>>2] = $$3$i$i;
          }
         } while(0);
         $753 = (($668) + ($692)|0);
         $754 = (($692) + ($673))|0;
         $$0$i$i = $753;$$0259$i$i = $754;
        } else {
         $$0$i$i = $668;$$0259$i$i = $673;
        }
        $755 = ((($$0$i$i)) + 4|0);
        $756 = HEAP32[$755>>2]|0;
        $757 = $756 & -2;
        HEAP32[$755>>2] = $757;
        $758 = $$0259$i$i | 1;
        $759 = ((($672)) + 4|0);
        HEAP32[$759>>2] = $758;
        $760 = (($672) + ($$0259$i$i)|0);
        HEAP32[$760>>2] = $$0259$i$i;
        $761 = $$0259$i$i >>> 3;
        $762 = ($$0259$i$i>>>0)<(256);
        if ($762) {
         $763 = $761 << 1;
         $764 = (49236 + ($763<<2)|0);
         $765 = HEAP32[12299]|0;
         $766 = 1 << $761;
         $767 = $765 & $766;
         $768 = ($767|0)==(0);
         if ($768) {
          $769 = $765 | $766;
          HEAP32[12299] = $769;
          $$pre$i16$i = ((($764)) + 8|0);
          $$0267$i$i = $764;$$pre$phi$i17$iZ2D = $$pre$i16$i;
         } else {
          $770 = ((($764)) + 8|0);
          $771 = HEAP32[$770>>2]|0;
          $$0267$i$i = $771;$$pre$phi$i17$iZ2D = $770;
         }
         HEAP32[$$pre$phi$i17$iZ2D>>2] = $672;
         $772 = ((($$0267$i$i)) + 12|0);
         HEAP32[$772>>2] = $672;
         $773 = ((($672)) + 8|0);
         HEAP32[$773>>2] = $$0267$i$i;
         $774 = ((($672)) + 12|0);
         HEAP32[$774>>2] = $764;
         break;
        }
        $775 = $$0259$i$i >>> 8;
        $776 = ($775|0)==(0);
        do {
         if ($776) {
          $$0268$i$i = 0;
         } else {
          $777 = ($$0259$i$i>>>0)>(16777215);
          if ($777) {
           $$0268$i$i = 31;
           break;
          }
          $778 = (($775) + 1048320)|0;
          $779 = $778 >>> 16;
          $780 = $779 & 8;
          $781 = $775 << $780;
          $782 = (($781) + 520192)|0;
          $783 = $782 >>> 16;
          $784 = $783 & 4;
          $785 = $784 | $780;
          $786 = $781 << $784;
          $787 = (($786) + 245760)|0;
          $788 = $787 >>> 16;
          $789 = $788 & 2;
          $790 = $785 | $789;
          $791 = (14 - ($790))|0;
          $792 = $786 << $789;
          $793 = $792 >>> 15;
          $794 = (($791) + ($793))|0;
          $795 = $794 << 1;
          $796 = (($794) + 7)|0;
          $797 = $$0259$i$i >>> $796;
          $798 = $797 & 1;
          $799 = $798 | $795;
          $$0268$i$i = $799;
         }
        } while(0);
        $800 = (49500 + ($$0268$i$i<<2)|0);
        $801 = ((($672)) + 28|0);
        HEAP32[$801>>2] = $$0268$i$i;
        $802 = ((($672)) + 16|0);
        $803 = ((($802)) + 4|0);
        HEAP32[$803>>2] = 0;
        HEAP32[$802>>2] = 0;
        $804 = HEAP32[(49200)>>2]|0;
        $805 = 1 << $$0268$i$i;
        $806 = $804 & $805;
        $807 = ($806|0)==(0);
        if ($807) {
         $808 = $804 | $805;
         HEAP32[(49200)>>2] = $808;
         HEAP32[$800>>2] = $672;
         $809 = ((($672)) + 24|0);
         HEAP32[$809>>2] = $800;
         $810 = ((($672)) + 12|0);
         HEAP32[$810>>2] = $672;
         $811 = ((($672)) + 8|0);
         HEAP32[$811>>2] = $672;
         break;
        }
        $812 = HEAP32[$800>>2]|0;
        $813 = ((($812)) + 4|0);
        $814 = HEAP32[$813>>2]|0;
        $815 = $814 & -8;
        $816 = ($815|0)==($$0259$i$i|0);
        L291: do {
         if ($816) {
          $$0261$lcssa$i$i = $812;
         } else {
          $817 = ($$0268$i$i|0)==(31);
          $818 = $$0268$i$i >>> 1;
          $819 = (25 - ($818))|0;
          $820 = $817 ? 0 : $819;
          $821 = $$0259$i$i << $820;
          $$02604$i$i = $821;$$02613$i$i = $812;
          while(1) {
           $828 = $$02604$i$i >>> 31;
           $829 = (((($$02613$i$i)) + 16|0) + ($828<<2)|0);
           $824 = HEAP32[$829>>2]|0;
           $830 = ($824|0)==(0|0);
           if ($830) {
            break;
           }
           $822 = $$02604$i$i << 1;
           $823 = ((($824)) + 4|0);
           $825 = HEAP32[$823>>2]|0;
           $826 = $825 & -8;
           $827 = ($826|0)==($$0259$i$i|0);
           if ($827) {
            $$0261$lcssa$i$i = $824;
            break L291;
           } else {
            $$02604$i$i = $822;$$02613$i$i = $824;
           }
          }
          HEAP32[$829>>2] = $672;
          $831 = ((($672)) + 24|0);
          HEAP32[$831>>2] = $$02613$i$i;
          $832 = ((($672)) + 12|0);
          HEAP32[$832>>2] = $672;
          $833 = ((($672)) + 8|0);
          HEAP32[$833>>2] = $672;
          break L238;
         }
        } while(0);
        $834 = ((($$0261$lcssa$i$i)) + 8|0);
        $835 = HEAP32[$834>>2]|0;
        $836 = ((($835)) + 12|0);
        HEAP32[$836>>2] = $672;
        HEAP32[$834>>2] = $672;
        $837 = ((($672)) + 8|0);
        HEAP32[$837>>2] = $835;
        $838 = ((($672)) + 12|0);
        HEAP32[$838>>2] = $$0261$lcssa$i$i;
        $839 = ((($672)) + 24|0);
        HEAP32[$839>>2] = 0;
       }
      } while(0);
      $968 = ((($660)) + 8|0);
      $$0 = $968;
      STACKTOP = sp;return ($$0|0);
     }
    }
    $$0$i$i$i = (49644);
    while(1) {
     $840 = HEAP32[$$0$i$i$i>>2]|0;
     $841 = ($840>>>0)>($585>>>0);
     if (!($841)) {
      $842 = ((($$0$i$i$i)) + 4|0);
      $843 = HEAP32[$842>>2]|0;
      $844 = (($840) + ($843)|0);
      $845 = ($844>>>0)>($585>>>0);
      if ($845) {
       break;
      }
     }
     $846 = ((($$0$i$i$i)) + 8|0);
     $847 = HEAP32[$846>>2]|0;
     $$0$i$i$i = $847;
    }
    $848 = ((($844)) + -47|0);
    $849 = ((($848)) + 8|0);
    $850 = $849;
    $851 = $850 & 7;
    $852 = ($851|0)==(0);
    $853 = (0 - ($850))|0;
    $854 = $853 & 7;
    $855 = $852 ? 0 : $854;
    $856 = (($848) + ($855)|0);
    $857 = ((($585)) + 16|0);
    $858 = ($856>>>0)<($857>>>0);
    $859 = $858 ? $585 : $856;
    $860 = ((($859)) + 8|0);
    $861 = ((($859)) + 24|0);
    $862 = (($$723947$i) + -40)|0;
    $863 = ((($$748$i)) + 8|0);
    $864 = $863;
    $865 = $864 & 7;
    $866 = ($865|0)==(0);
    $867 = (0 - ($864))|0;
    $868 = $867 & 7;
    $869 = $866 ? 0 : $868;
    $870 = (($$748$i) + ($869)|0);
    $871 = (($862) - ($869))|0;
    HEAP32[(49220)>>2] = $870;
    HEAP32[(49208)>>2] = $871;
    $872 = $871 | 1;
    $873 = ((($870)) + 4|0);
    HEAP32[$873>>2] = $872;
    $874 = (($$748$i) + ($862)|0);
    $875 = ((($874)) + 4|0);
    HEAP32[$875>>2] = 40;
    $876 = HEAP32[(49684)>>2]|0;
    HEAP32[(49224)>>2] = $876;
    $877 = ((($859)) + 4|0);
    HEAP32[$877>>2] = 27;
    ;HEAP32[$860>>2]=HEAP32[(49644)>>2]|0;HEAP32[$860+4>>2]=HEAP32[(49644)+4>>2]|0;HEAP32[$860+8>>2]=HEAP32[(49644)+8>>2]|0;HEAP32[$860+12>>2]=HEAP32[(49644)+12>>2]|0;
    HEAP32[(49644)>>2] = $$748$i;
    HEAP32[(49648)>>2] = $$723947$i;
    HEAP32[(49656)>>2] = 0;
    HEAP32[(49652)>>2] = $860;
    $879 = $861;
    while(1) {
     $878 = ((($879)) + 4|0);
     HEAP32[$878>>2] = 7;
     $880 = ((($879)) + 8|0);
     $881 = ($880>>>0)<($844>>>0);
     if ($881) {
      $879 = $878;
     } else {
      break;
     }
    }
    $882 = ($859|0)==($585|0);
    if (!($882)) {
     $883 = $859;
     $884 = $585;
     $885 = (($883) - ($884))|0;
     $886 = HEAP32[$877>>2]|0;
     $887 = $886 & -2;
     HEAP32[$877>>2] = $887;
     $888 = $885 | 1;
     $889 = ((($585)) + 4|0);
     HEAP32[$889>>2] = $888;
     HEAP32[$859>>2] = $885;
     $890 = $885 >>> 3;
     $891 = ($885>>>0)<(256);
     if ($891) {
      $892 = $890 << 1;
      $893 = (49236 + ($892<<2)|0);
      $894 = HEAP32[12299]|0;
      $895 = 1 << $890;
      $896 = $894 & $895;
      $897 = ($896|0)==(0);
      if ($897) {
       $898 = $894 | $895;
       HEAP32[12299] = $898;
       $$pre$i$i = ((($893)) + 8|0);
       $$0206$i$i = $893;$$pre$phi$i$iZ2D = $$pre$i$i;
      } else {
       $899 = ((($893)) + 8|0);
       $900 = HEAP32[$899>>2]|0;
       $$0206$i$i = $900;$$pre$phi$i$iZ2D = $899;
      }
      HEAP32[$$pre$phi$i$iZ2D>>2] = $585;
      $901 = ((($$0206$i$i)) + 12|0);
      HEAP32[$901>>2] = $585;
      $902 = ((($585)) + 8|0);
      HEAP32[$902>>2] = $$0206$i$i;
      $903 = ((($585)) + 12|0);
      HEAP32[$903>>2] = $893;
      break;
     }
     $904 = $885 >>> 8;
     $905 = ($904|0)==(0);
     if ($905) {
      $$0207$i$i = 0;
     } else {
      $906 = ($885>>>0)>(16777215);
      if ($906) {
       $$0207$i$i = 31;
      } else {
       $907 = (($904) + 1048320)|0;
       $908 = $907 >>> 16;
       $909 = $908 & 8;
       $910 = $904 << $909;
       $911 = (($910) + 520192)|0;
       $912 = $911 >>> 16;
       $913 = $912 & 4;
       $914 = $913 | $909;
       $915 = $910 << $913;
       $916 = (($915) + 245760)|0;
       $917 = $916 >>> 16;
       $918 = $917 & 2;
       $919 = $914 | $918;
       $920 = (14 - ($919))|0;
       $921 = $915 << $918;
       $922 = $921 >>> 15;
       $923 = (($920) + ($922))|0;
       $924 = $923 << 1;
       $925 = (($923) + 7)|0;
       $926 = $885 >>> $925;
       $927 = $926 & 1;
       $928 = $927 | $924;
       $$0207$i$i = $928;
      }
     }
     $929 = (49500 + ($$0207$i$i<<2)|0);
     $930 = ((($585)) + 28|0);
     HEAP32[$930>>2] = $$0207$i$i;
     $931 = ((($585)) + 20|0);
     HEAP32[$931>>2] = 0;
     HEAP32[$857>>2] = 0;
     $932 = HEAP32[(49200)>>2]|0;
     $933 = 1 << $$0207$i$i;
     $934 = $932 & $933;
     $935 = ($934|0)==(0);
     if ($935) {
      $936 = $932 | $933;
      HEAP32[(49200)>>2] = $936;
      HEAP32[$929>>2] = $585;
      $937 = ((($585)) + 24|0);
      HEAP32[$937>>2] = $929;
      $938 = ((($585)) + 12|0);
      HEAP32[$938>>2] = $585;
      $939 = ((($585)) + 8|0);
      HEAP32[$939>>2] = $585;
      break;
     }
     $940 = HEAP32[$929>>2]|0;
     $941 = ((($940)) + 4|0);
     $942 = HEAP32[$941>>2]|0;
     $943 = $942 & -8;
     $944 = ($943|0)==($885|0);
     L325: do {
      if ($944) {
       $$0202$lcssa$i$i = $940;
      } else {
       $945 = ($$0207$i$i|0)==(31);
       $946 = $$0207$i$i >>> 1;
       $947 = (25 - ($946))|0;
       $948 = $945 ? 0 : $947;
       $949 = $885 << $948;
       $$02014$i$i = $949;$$02023$i$i = $940;
       while(1) {
        $956 = $$02014$i$i >>> 31;
        $957 = (((($$02023$i$i)) + 16|0) + ($956<<2)|0);
        $952 = HEAP32[$957>>2]|0;
        $958 = ($952|0)==(0|0);
        if ($958) {
         break;
        }
        $950 = $$02014$i$i << 1;
        $951 = ((($952)) + 4|0);
        $953 = HEAP32[$951>>2]|0;
        $954 = $953 & -8;
        $955 = ($954|0)==($885|0);
        if ($955) {
         $$0202$lcssa$i$i = $952;
         break L325;
        } else {
         $$02014$i$i = $950;$$02023$i$i = $952;
        }
       }
       HEAP32[$957>>2] = $585;
       $959 = ((($585)) + 24|0);
       HEAP32[$959>>2] = $$02023$i$i;
       $960 = ((($585)) + 12|0);
       HEAP32[$960>>2] = $585;
       $961 = ((($585)) + 8|0);
       HEAP32[$961>>2] = $585;
       break L215;
      }
     } while(0);
     $962 = ((($$0202$lcssa$i$i)) + 8|0);
     $963 = HEAP32[$962>>2]|0;
     $964 = ((($963)) + 12|0);
     HEAP32[$964>>2] = $585;
     HEAP32[$962>>2] = $585;
     $965 = ((($585)) + 8|0);
     HEAP32[$965>>2] = $963;
     $966 = ((($585)) + 12|0);
     HEAP32[$966>>2] = $$0202$lcssa$i$i;
     $967 = ((($585)) + 24|0);
     HEAP32[$967>>2] = 0;
    }
   }
  } while(0);
  $969 = HEAP32[(49208)>>2]|0;
  $970 = ($969>>>0)>($$0192>>>0);
  if ($970) {
   $971 = (($969) - ($$0192))|0;
   HEAP32[(49208)>>2] = $971;
   $972 = HEAP32[(49220)>>2]|0;
   $973 = (($972) + ($$0192)|0);
   HEAP32[(49220)>>2] = $973;
   $974 = $971 | 1;
   $975 = ((($973)) + 4|0);
   HEAP32[$975>>2] = $974;
   $976 = $$0192 | 3;
   $977 = ((($972)) + 4|0);
   HEAP32[$977>>2] = $976;
   $978 = ((($972)) + 8|0);
   $$0 = $978;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $979 = (___errno_location()|0);
 HEAP32[$979>>2] = 12;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _free($0) {
 $0 = $0|0;
 var $$0194$i = 0, $$0194$in$i = 0, $$0346381 = 0, $$0347$lcssa = 0, $$0347380 = 0, $$0359 = 0, $$0366 = 0, $$1 = 0, $$1345 = 0, $$1350 = 0, $$1350$be = 0, $$1350$ph = 0, $$1353 = 0, $$1353$be = 0, $$1353$ph = 0, $$1361 = 0, $$1361$be = 0, $$1361$ph = 0, $$1365 = 0, $$1365$be = 0;
 var $$1365$ph = 0, $$2 = 0, $$3 = 0, $$3363 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$sink = 0, $$sink395 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0;
 var $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0;
 var $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0;
 var $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0;
 var $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0;
 var $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond371 = 0, $cond372 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = ((($0)) + -8|0);
 $3 = HEAP32[(49212)>>2]|0;
 $4 = ((($0)) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & -8;
 $7 = (($2) + ($6)|0);
 $8 = $5 & 1;
 $9 = ($8|0)==(0);
 do {
  if ($9) {
   $10 = HEAP32[$2>>2]|0;
   $11 = $5 & 3;
   $12 = ($11|0)==(0);
   if ($12) {
    return;
   }
   $13 = (0 - ($10))|0;
   $14 = (($2) + ($13)|0);
   $15 = (($10) + ($6))|0;
   $16 = ($14>>>0)<($3>>>0);
   if ($16) {
    return;
   }
   $17 = HEAP32[(49216)>>2]|0;
   $18 = ($17|0)==($14|0);
   if ($18) {
    $79 = ((($7)) + 4|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = $80 & 3;
    $82 = ($81|0)==(3);
    if (!($82)) {
     $$1 = $14;$$1345 = $15;$88 = $14;
     break;
    }
    $83 = (($14) + ($15)|0);
    $84 = ((($14)) + 4|0);
    $85 = $15 | 1;
    $86 = $80 & -2;
    HEAP32[(49204)>>2] = $15;
    HEAP32[$79>>2] = $86;
    HEAP32[$84>>2] = $85;
    HEAP32[$83>>2] = $15;
    return;
   }
   $19 = $10 >>> 3;
   $20 = ($10>>>0)<(256);
   if ($20) {
    $21 = ((($14)) + 8|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = ((($14)) + 12|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ($24|0)==($22|0);
    if ($25) {
     $26 = 1 << $19;
     $27 = $26 ^ -1;
     $28 = HEAP32[12299]|0;
     $29 = $28 & $27;
     HEAP32[12299] = $29;
     $$1 = $14;$$1345 = $15;$88 = $14;
     break;
    } else {
     $30 = ((($22)) + 12|0);
     HEAP32[$30>>2] = $24;
     $31 = ((($24)) + 8|0);
     HEAP32[$31>>2] = $22;
     $$1 = $14;$$1345 = $15;$88 = $14;
     break;
    }
   }
   $32 = ((($14)) + 24|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ((($14)) + 12|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ($35|0)==($14|0);
   do {
    if ($36) {
     $41 = ((($14)) + 16|0);
     $42 = ((($41)) + 4|0);
     $43 = HEAP32[$42>>2]|0;
     $44 = ($43|0)==(0|0);
     if ($44) {
      $45 = HEAP32[$41>>2]|0;
      $46 = ($45|0)==(0|0);
      if ($46) {
       $$3 = 0;
       break;
      } else {
       $$1350$ph = $45;$$1353$ph = $41;
      }
     } else {
      $$1350$ph = $43;$$1353$ph = $42;
     }
     $$1350 = $$1350$ph;$$1353 = $$1353$ph;
     while(1) {
      $47 = ((($$1350)) + 20|0);
      $48 = HEAP32[$47>>2]|0;
      $49 = ($48|0)==(0|0);
      if ($49) {
       $50 = ((($$1350)) + 16|0);
       $51 = HEAP32[$50>>2]|0;
       $52 = ($51|0)==(0|0);
       if ($52) {
        break;
       } else {
        $$1350$be = $51;$$1353$be = $50;
       }
      } else {
       $$1350$be = $48;$$1353$be = $47;
      }
      $$1350 = $$1350$be;$$1353 = $$1353$be;
     }
     HEAP32[$$1353>>2] = 0;
     $$3 = $$1350;
    } else {
     $37 = ((($14)) + 8|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = ((($38)) + 12|0);
     HEAP32[$39>>2] = $35;
     $40 = ((($35)) + 8|0);
     HEAP32[$40>>2] = $38;
     $$3 = $35;
    }
   } while(0);
   $53 = ($33|0)==(0|0);
   if ($53) {
    $$1 = $14;$$1345 = $15;$88 = $14;
   } else {
    $54 = ((($14)) + 28|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = (49500 + ($55<<2)|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = ($57|0)==($14|0);
    if ($58) {
     HEAP32[$56>>2] = $$3;
     $cond371 = ($$3|0)==(0|0);
     if ($cond371) {
      $59 = 1 << $55;
      $60 = $59 ^ -1;
      $61 = HEAP32[(49200)>>2]|0;
      $62 = $61 & $60;
      HEAP32[(49200)>>2] = $62;
      $$1 = $14;$$1345 = $15;$88 = $14;
      break;
     }
    } else {
     $63 = ((($33)) + 16|0);
     $64 = HEAP32[$63>>2]|0;
     $65 = ($64|0)==($14|0);
     $66 = ((($33)) + 20|0);
     $$sink = $65 ? $63 : $66;
     HEAP32[$$sink>>2] = $$3;
     $67 = ($$3|0)==(0|0);
     if ($67) {
      $$1 = $14;$$1345 = $15;$88 = $14;
      break;
     }
    }
    $68 = ((($$3)) + 24|0);
    HEAP32[$68>>2] = $33;
    $69 = ((($14)) + 16|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($70|0)==(0|0);
    if (!($71)) {
     $72 = ((($$3)) + 16|0);
     HEAP32[$72>>2] = $70;
     $73 = ((($70)) + 24|0);
     HEAP32[$73>>2] = $$3;
    }
    $74 = ((($69)) + 4|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = ($75|0)==(0|0);
    if ($76) {
     $$1 = $14;$$1345 = $15;$88 = $14;
    } else {
     $77 = ((($$3)) + 20|0);
     HEAP32[$77>>2] = $75;
     $78 = ((($75)) + 24|0);
     HEAP32[$78>>2] = $$3;
     $$1 = $14;$$1345 = $15;$88 = $14;
    }
   }
  } else {
   $$1 = $2;$$1345 = $6;$88 = $2;
  }
 } while(0);
 $87 = ($88>>>0)<($7>>>0);
 if (!($87)) {
  return;
 }
 $89 = ((($7)) + 4|0);
 $90 = HEAP32[$89>>2]|0;
 $91 = $90 & 1;
 $92 = ($91|0)==(0);
 if ($92) {
  return;
 }
 $93 = $90 & 2;
 $94 = ($93|0)==(0);
 if ($94) {
  $95 = HEAP32[(49220)>>2]|0;
  $96 = ($95|0)==($7|0);
  if ($96) {
   $97 = HEAP32[(49208)>>2]|0;
   $98 = (($97) + ($$1345))|0;
   HEAP32[(49208)>>2] = $98;
   HEAP32[(49220)>>2] = $$1;
   $99 = $98 | 1;
   $100 = ((($$1)) + 4|0);
   HEAP32[$100>>2] = $99;
   $101 = HEAP32[(49216)>>2]|0;
   $102 = ($$1|0)==($101|0);
   if (!($102)) {
    return;
   }
   HEAP32[(49216)>>2] = 0;
   HEAP32[(49204)>>2] = 0;
   return;
  }
  $103 = HEAP32[(49216)>>2]|0;
  $104 = ($103|0)==($7|0);
  if ($104) {
   $105 = HEAP32[(49204)>>2]|0;
   $106 = (($105) + ($$1345))|0;
   HEAP32[(49204)>>2] = $106;
   HEAP32[(49216)>>2] = $88;
   $107 = $106 | 1;
   $108 = ((($$1)) + 4|0);
   HEAP32[$108>>2] = $107;
   $109 = (($88) + ($106)|0);
   HEAP32[$109>>2] = $106;
   return;
  }
  $110 = $90 & -8;
  $111 = (($110) + ($$1345))|0;
  $112 = $90 >>> 3;
  $113 = ($90>>>0)<(256);
  do {
   if ($113) {
    $114 = ((($7)) + 8|0);
    $115 = HEAP32[$114>>2]|0;
    $116 = ((($7)) + 12|0);
    $117 = HEAP32[$116>>2]|0;
    $118 = ($117|0)==($115|0);
    if ($118) {
     $119 = 1 << $112;
     $120 = $119 ^ -1;
     $121 = HEAP32[12299]|0;
     $122 = $121 & $120;
     HEAP32[12299] = $122;
     break;
    } else {
     $123 = ((($115)) + 12|0);
     HEAP32[$123>>2] = $117;
     $124 = ((($117)) + 8|0);
     HEAP32[$124>>2] = $115;
     break;
    }
   } else {
    $125 = ((($7)) + 24|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = ((($7)) + 12|0);
    $128 = HEAP32[$127>>2]|0;
    $129 = ($128|0)==($7|0);
    do {
     if ($129) {
      $134 = ((($7)) + 16|0);
      $135 = ((($134)) + 4|0);
      $136 = HEAP32[$135>>2]|0;
      $137 = ($136|0)==(0|0);
      if ($137) {
       $138 = HEAP32[$134>>2]|0;
       $139 = ($138|0)==(0|0);
       if ($139) {
        $$3363 = 0;
        break;
       } else {
        $$1361$ph = $138;$$1365$ph = $134;
       }
      } else {
       $$1361$ph = $136;$$1365$ph = $135;
      }
      $$1361 = $$1361$ph;$$1365 = $$1365$ph;
      while(1) {
       $140 = ((($$1361)) + 20|0);
       $141 = HEAP32[$140>>2]|0;
       $142 = ($141|0)==(0|0);
       if ($142) {
        $143 = ((($$1361)) + 16|0);
        $144 = HEAP32[$143>>2]|0;
        $145 = ($144|0)==(0|0);
        if ($145) {
         break;
        } else {
         $$1361$be = $144;$$1365$be = $143;
        }
       } else {
        $$1361$be = $141;$$1365$be = $140;
       }
       $$1361 = $$1361$be;$$1365 = $$1365$be;
      }
      HEAP32[$$1365>>2] = 0;
      $$3363 = $$1361;
     } else {
      $130 = ((($7)) + 8|0);
      $131 = HEAP32[$130>>2]|0;
      $132 = ((($131)) + 12|0);
      HEAP32[$132>>2] = $128;
      $133 = ((($128)) + 8|0);
      HEAP32[$133>>2] = $131;
      $$3363 = $128;
     }
    } while(0);
    $146 = ($126|0)==(0|0);
    if (!($146)) {
     $147 = ((($7)) + 28|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = (49500 + ($148<<2)|0);
     $150 = HEAP32[$149>>2]|0;
     $151 = ($150|0)==($7|0);
     if ($151) {
      HEAP32[$149>>2] = $$3363;
      $cond372 = ($$3363|0)==(0|0);
      if ($cond372) {
       $152 = 1 << $148;
       $153 = $152 ^ -1;
       $154 = HEAP32[(49200)>>2]|0;
       $155 = $154 & $153;
       HEAP32[(49200)>>2] = $155;
       break;
      }
     } else {
      $156 = ((($126)) + 16|0);
      $157 = HEAP32[$156>>2]|0;
      $158 = ($157|0)==($7|0);
      $159 = ((($126)) + 20|0);
      $$sink395 = $158 ? $156 : $159;
      HEAP32[$$sink395>>2] = $$3363;
      $160 = ($$3363|0)==(0|0);
      if ($160) {
       break;
      }
     }
     $161 = ((($$3363)) + 24|0);
     HEAP32[$161>>2] = $126;
     $162 = ((($7)) + 16|0);
     $163 = HEAP32[$162>>2]|0;
     $164 = ($163|0)==(0|0);
     if (!($164)) {
      $165 = ((($$3363)) + 16|0);
      HEAP32[$165>>2] = $163;
      $166 = ((($163)) + 24|0);
      HEAP32[$166>>2] = $$3363;
     }
     $167 = ((($162)) + 4|0);
     $168 = HEAP32[$167>>2]|0;
     $169 = ($168|0)==(0|0);
     if (!($169)) {
      $170 = ((($$3363)) + 20|0);
      HEAP32[$170>>2] = $168;
      $171 = ((($168)) + 24|0);
      HEAP32[$171>>2] = $$3363;
     }
    }
   }
  } while(0);
  $172 = $111 | 1;
  $173 = ((($$1)) + 4|0);
  HEAP32[$173>>2] = $172;
  $174 = (($88) + ($111)|0);
  HEAP32[$174>>2] = $111;
  $175 = HEAP32[(49216)>>2]|0;
  $176 = ($$1|0)==($175|0);
  if ($176) {
   HEAP32[(49204)>>2] = $111;
   return;
  } else {
   $$2 = $111;
  }
 } else {
  $177 = $90 & -2;
  HEAP32[$89>>2] = $177;
  $178 = $$1345 | 1;
  $179 = ((($$1)) + 4|0);
  HEAP32[$179>>2] = $178;
  $180 = (($88) + ($$1345)|0);
  HEAP32[$180>>2] = $$1345;
  $$2 = $$1345;
 }
 $181 = $$2 >>> 3;
 $182 = ($$2>>>0)<(256);
 if ($182) {
  $183 = $181 << 1;
  $184 = (49236 + ($183<<2)|0);
  $185 = HEAP32[12299]|0;
  $186 = 1 << $181;
  $187 = $185 & $186;
  $188 = ($187|0)==(0);
  if ($188) {
   $189 = $185 | $186;
   HEAP32[12299] = $189;
   $$pre = ((($184)) + 8|0);
   $$0366 = $184;$$pre$phiZ2D = $$pre;
  } else {
   $190 = ((($184)) + 8|0);
   $191 = HEAP32[$190>>2]|0;
   $$0366 = $191;$$pre$phiZ2D = $190;
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $192 = ((($$0366)) + 12|0);
  HEAP32[$192>>2] = $$1;
  $193 = ((($$1)) + 8|0);
  HEAP32[$193>>2] = $$0366;
  $194 = ((($$1)) + 12|0);
  HEAP32[$194>>2] = $184;
  return;
 }
 $195 = $$2 >>> 8;
 $196 = ($195|0)==(0);
 if ($196) {
  $$0359 = 0;
 } else {
  $197 = ($$2>>>0)>(16777215);
  if ($197) {
   $$0359 = 31;
  } else {
   $198 = (($195) + 1048320)|0;
   $199 = $198 >>> 16;
   $200 = $199 & 8;
   $201 = $195 << $200;
   $202 = (($201) + 520192)|0;
   $203 = $202 >>> 16;
   $204 = $203 & 4;
   $205 = $204 | $200;
   $206 = $201 << $204;
   $207 = (($206) + 245760)|0;
   $208 = $207 >>> 16;
   $209 = $208 & 2;
   $210 = $205 | $209;
   $211 = (14 - ($210))|0;
   $212 = $206 << $209;
   $213 = $212 >>> 15;
   $214 = (($211) + ($213))|0;
   $215 = $214 << 1;
   $216 = (($214) + 7)|0;
   $217 = $$2 >>> $216;
   $218 = $217 & 1;
   $219 = $218 | $215;
   $$0359 = $219;
  }
 }
 $220 = (49500 + ($$0359<<2)|0);
 $221 = ((($$1)) + 28|0);
 HEAP32[$221>>2] = $$0359;
 $222 = ((($$1)) + 16|0);
 $223 = ((($$1)) + 20|0);
 HEAP32[$223>>2] = 0;
 HEAP32[$222>>2] = 0;
 $224 = HEAP32[(49200)>>2]|0;
 $225 = 1 << $$0359;
 $226 = $224 & $225;
 $227 = ($226|0)==(0);
 L112: do {
  if ($227) {
   $228 = $224 | $225;
   HEAP32[(49200)>>2] = $228;
   HEAP32[$220>>2] = $$1;
   $229 = ((($$1)) + 24|0);
   HEAP32[$229>>2] = $220;
   $230 = ((($$1)) + 12|0);
   HEAP32[$230>>2] = $$1;
   $231 = ((($$1)) + 8|0);
   HEAP32[$231>>2] = $$1;
  } else {
   $232 = HEAP32[$220>>2]|0;
   $233 = ((($232)) + 4|0);
   $234 = HEAP32[$233>>2]|0;
   $235 = $234 & -8;
   $236 = ($235|0)==($$2|0);
   L115: do {
    if ($236) {
     $$0347$lcssa = $232;
    } else {
     $237 = ($$0359|0)==(31);
     $238 = $$0359 >>> 1;
     $239 = (25 - ($238))|0;
     $240 = $237 ? 0 : $239;
     $241 = $$2 << $240;
     $$0346381 = $241;$$0347380 = $232;
     while(1) {
      $248 = $$0346381 >>> 31;
      $249 = (((($$0347380)) + 16|0) + ($248<<2)|0);
      $244 = HEAP32[$249>>2]|0;
      $250 = ($244|0)==(0|0);
      if ($250) {
       break;
      }
      $242 = $$0346381 << 1;
      $243 = ((($244)) + 4|0);
      $245 = HEAP32[$243>>2]|0;
      $246 = $245 & -8;
      $247 = ($246|0)==($$2|0);
      if ($247) {
       $$0347$lcssa = $244;
       break L115;
      } else {
       $$0346381 = $242;$$0347380 = $244;
      }
     }
     HEAP32[$249>>2] = $$1;
     $251 = ((($$1)) + 24|0);
     HEAP32[$251>>2] = $$0347380;
     $252 = ((($$1)) + 12|0);
     HEAP32[$252>>2] = $$1;
     $253 = ((($$1)) + 8|0);
     HEAP32[$253>>2] = $$1;
     break L112;
    }
   } while(0);
   $254 = ((($$0347$lcssa)) + 8|0);
   $255 = HEAP32[$254>>2]|0;
   $256 = ((($255)) + 12|0);
   HEAP32[$256>>2] = $$1;
   HEAP32[$254>>2] = $$1;
   $257 = ((($$1)) + 8|0);
   HEAP32[$257>>2] = $255;
   $258 = ((($$1)) + 12|0);
   HEAP32[$258>>2] = $$0347$lcssa;
   $259 = ((($$1)) + 24|0);
   HEAP32[$259>>2] = 0;
  }
 } while(0);
 $260 = HEAP32[(49228)>>2]|0;
 $261 = (($260) + -1)|0;
 HEAP32[(49228)>>2] = $261;
 $262 = ($261|0)==(0);
 if (!($262)) {
  return;
 }
 $$0194$in$i = (49652);
 while(1) {
  $$0194$i = HEAP32[$$0194$in$i>>2]|0;
  $263 = ($$0194$i|0)==(0|0);
  $264 = ((($$0194$i)) + 8|0);
  if ($263) {
   break;
  } else {
   $$0194$in$i = $264;
  }
 }
 HEAP32[(49228)>>2] = -1;
 return;
}
function _realloc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $3 = (_malloc($1)|0);
  $$1 = $3;
  return ($$1|0);
 }
 $4 = ($1>>>0)>(4294967231);
 if ($4) {
  $5 = (___errno_location()|0);
  HEAP32[$5>>2] = 12;
  $$1 = 0;
  return ($$1|0);
 }
 $6 = ($1>>>0)<(11);
 $7 = (($1) + 11)|0;
 $8 = $7 & -8;
 $9 = $6 ? 16 : $8;
 $10 = ((($0)) + -8|0);
 $11 = (_try_realloc_chunk($10,$9)|0);
 $12 = ($11|0)==(0|0);
 if (!($12)) {
  $13 = ((($11)) + 8|0);
  $$1 = $13;
  return ($$1|0);
 }
 $14 = (_malloc($1)|0);
 $15 = ($14|0)==(0|0);
 if ($15) {
  $$1 = 0;
  return ($$1|0);
 }
 $16 = ((($0)) + -4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $17 & -8;
 $19 = $17 & 3;
 $20 = ($19|0)==(0);
 $21 = $20 ? 8 : 4;
 $22 = (($18) - ($21))|0;
 $23 = ($22>>>0)<($1>>>0);
 $24 = $23 ? $22 : $1;
 (_memcpy(($14|0),($0|0),($24|0))|0);
 _free($0);
 $$1 = $14;
 return ($$1|0);
}
function _try_realloc_chunk($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1245 = 0, $$1245$be = 0, $$1245$ph = 0, $$1248 = 0, $$1248$be = 0, $$1248$ph = 0, $$2 = 0, $$3 = 0, $$sink = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond = 0, $storemerge = 0, $storemerge1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & -8;
 $5 = (($0) + ($4)|0);
 $6 = $3 & 3;
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = ($1>>>0)<(256);
  if ($8) {
   $$2 = 0;
   return ($$2|0);
  }
  $9 = (($1) + 4)|0;
  $10 = ($4>>>0)<($9>>>0);
  if (!($10)) {
   $11 = (($4) - ($1))|0;
   $12 = HEAP32[(49676)>>2]|0;
   $13 = $12 << 1;
   $14 = ($11>>>0)>($13>>>0);
   if (!($14)) {
    $$2 = $0;
    return ($$2|0);
   }
  }
  $$2 = 0;
  return ($$2|0);
 }
 $15 = ($4>>>0)<($1>>>0);
 if (!($15)) {
  $16 = (($4) - ($1))|0;
  $17 = ($16>>>0)>(15);
  if (!($17)) {
   $$2 = $0;
   return ($$2|0);
  }
  $18 = (($0) + ($1)|0);
  $19 = $3 & 1;
  $20 = $19 | $1;
  $21 = $20 | 2;
  HEAP32[$2>>2] = $21;
  $22 = ((($18)) + 4|0);
  $23 = $16 | 3;
  HEAP32[$22>>2] = $23;
  $24 = ((($5)) + 4|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $25 | 1;
  HEAP32[$24>>2] = $26;
  _dispose_chunk($18,$16);
  $$2 = $0;
  return ($$2|0);
 }
 $27 = HEAP32[(49220)>>2]|0;
 $28 = ($27|0)==($5|0);
 if ($28) {
  $29 = HEAP32[(49208)>>2]|0;
  $30 = (($29) + ($4))|0;
  $31 = ($30>>>0)>($1>>>0);
  $32 = (($30) - ($1))|0;
  $33 = (($0) + ($1)|0);
  if (!($31)) {
   $$2 = 0;
   return ($$2|0);
  }
  $34 = $32 | 1;
  $35 = ((($33)) + 4|0);
  $36 = $3 & 1;
  $37 = $36 | $1;
  $38 = $37 | 2;
  HEAP32[$2>>2] = $38;
  HEAP32[$35>>2] = $34;
  HEAP32[(49220)>>2] = $33;
  HEAP32[(49208)>>2] = $32;
  $$2 = $0;
  return ($$2|0);
 }
 $39 = HEAP32[(49216)>>2]|0;
 $40 = ($39|0)==($5|0);
 if ($40) {
  $41 = HEAP32[(49204)>>2]|0;
  $42 = (($41) + ($4))|0;
  $43 = ($42>>>0)<($1>>>0);
  if ($43) {
   $$2 = 0;
   return ($$2|0);
  }
  $44 = (($42) - ($1))|0;
  $45 = ($44>>>0)>(15);
  if ($45) {
   $46 = (($0) + ($1)|0);
   $47 = (($0) + ($42)|0);
   $48 = $3 & 1;
   $49 = $48 | $1;
   $50 = $49 | 2;
   HEAP32[$2>>2] = $50;
   $51 = ((($46)) + 4|0);
   $52 = $44 | 1;
   HEAP32[$51>>2] = $52;
   HEAP32[$47>>2] = $44;
   $53 = ((($47)) + 4|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = $54 & -2;
   HEAP32[$53>>2] = $55;
   $storemerge = $46;$storemerge1 = $44;
  } else {
   $56 = $3 & 1;
   $57 = $56 | $42;
   $58 = $57 | 2;
   HEAP32[$2>>2] = $58;
   $59 = (($0) + ($42)|0);
   $60 = ((($59)) + 4|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = $61 | 1;
   HEAP32[$60>>2] = $62;
   $storemerge = 0;$storemerge1 = 0;
  }
  HEAP32[(49204)>>2] = $storemerge1;
  HEAP32[(49216)>>2] = $storemerge;
  $$2 = $0;
  return ($$2|0);
 }
 $63 = ((($5)) + 4|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = $64 & 2;
 $66 = ($65|0)==(0);
 if (!($66)) {
  $$2 = 0;
  return ($$2|0);
 }
 $67 = $64 & -8;
 $68 = (($67) + ($4))|0;
 $69 = ($68>>>0)<($1>>>0);
 if ($69) {
  $$2 = 0;
  return ($$2|0);
 }
 $70 = (($68) - ($1))|0;
 $71 = $64 >>> 3;
 $72 = ($64>>>0)<(256);
 do {
  if ($72) {
   $73 = ((($5)) + 8|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = ((($5)) + 12|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = ($76|0)==($74|0);
   if ($77) {
    $78 = 1 << $71;
    $79 = $78 ^ -1;
    $80 = HEAP32[12299]|0;
    $81 = $80 & $79;
    HEAP32[12299] = $81;
    break;
   } else {
    $82 = ((($74)) + 12|0);
    HEAP32[$82>>2] = $76;
    $83 = ((($76)) + 8|0);
    HEAP32[$83>>2] = $74;
    break;
   }
  } else {
   $84 = ((($5)) + 24|0);
   $85 = HEAP32[$84>>2]|0;
   $86 = ((($5)) + 12|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = ($87|0)==($5|0);
   do {
    if ($88) {
     $93 = ((($5)) + 16|0);
     $94 = ((($93)) + 4|0);
     $95 = HEAP32[$94>>2]|0;
     $96 = ($95|0)==(0|0);
     if ($96) {
      $97 = HEAP32[$93>>2]|0;
      $98 = ($97|0)==(0|0);
      if ($98) {
       $$3 = 0;
       break;
      } else {
       $$1245$ph = $97;$$1248$ph = $93;
      }
     } else {
      $$1245$ph = $95;$$1248$ph = $94;
     }
     $$1245 = $$1245$ph;$$1248 = $$1248$ph;
     while(1) {
      $99 = ((($$1245)) + 20|0);
      $100 = HEAP32[$99>>2]|0;
      $101 = ($100|0)==(0|0);
      if ($101) {
       $102 = ((($$1245)) + 16|0);
       $103 = HEAP32[$102>>2]|0;
       $104 = ($103|0)==(0|0);
       if ($104) {
        break;
       } else {
        $$1245$be = $103;$$1248$be = $102;
       }
      } else {
       $$1245$be = $100;$$1248$be = $99;
      }
      $$1245 = $$1245$be;$$1248 = $$1248$be;
     }
     HEAP32[$$1248>>2] = 0;
     $$3 = $$1245;
    } else {
     $89 = ((($5)) + 8|0);
     $90 = HEAP32[$89>>2]|0;
     $91 = ((($90)) + 12|0);
     HEAP32[$91>>2] = $87;
     $92 = ((($87)) + 8|0);
     HEAP32[$92>>2] = $90;
     $$3 = $87;
    }
   } while(0);
   $105 = ($85|0)==(0|0);
   if (!($105)) {
    $106 = ((($5)) + 28|0);
    $107 = HEAP32[$106>>2]|0;
    $108 = (49500 + ($107<<2)|0);
    $109 = HEAP32[$108>>2]|0;
    $110 = ($109|0)==($5|0);
    if ($110) {
     HEAP32[$108>>2] = $$3;
     $cond = ($$3|0)==(0|0);
     if ($cond) {
      $111 = 1 << $107;
      $112 = $111 ^ -1;
      $113 = HEAP32[(49200)>>2]|0;
      $114 = $113 & $112;
      HEAP32[(49200)>>2] = $114;
      break;
     }
    } else {
     $115 = ((($85)) + 16|0);
     $116 = HEAP32[$115>>2]|0;
     $117 = ($116|0)==($5|0);
     $118 = ((($85)) + 20|0);
     $$sink = $117 ? $115 : $118;
     HEAP32[$$sink>>2] = $$3;
     $119 = ($$3|0)==(0|0);
     if ($119) {
      break;
     }
    }
    $120 = ((($$3)) + 24|0);
    HEAP32[$120>>2] = $85;
    $121 = ((($5)) + 16|0);
    $122 = HEAP32[$121>>2]|0;
    $123 = ($122|0)==(0|0);
    if (!($123)) {
     $124 = ((($$3)) + 16|0);
     HEAP32[$124>>2] = $122;
     $125 = ((($122)) + 24|0);
     HEAP32[$125>>2] = $$3;
    }
    $126 = ((($121)) + 4|0);
    $127 = HEAP32[$126>>2]|0;
    $128 = ($127|0)==(0|0);
    if (!($128)) {
     $129 = ((($$3)) + 20|0);
     HEAP32[$129>>2] = $127;
     $130 = ((($127)) + 24|0);
     HEAP32[$130>>2] = $$3;
    }
   }
  }
 } while(0);
 $131 = ($70>>>0)<(16);
 if ($131) {
  $132 = $3 & 1;
  $133 = $132 | $68;
  $134 = $133 | 2;
  HEAP32[$2>>2] = $134;
  $135 = (($0) + ($68)|0);
  $136 = ((($135)) + 4|0);
  $137 = HEAP32[$136>>2]|0;
  $138 = $137 | 1;
  HEAP32[$136>>2] = $138;
  $$2 = $0;
  return ($$2|0);
 } else {
  $139 = (($0) + ($1)|0);
  $140 = $3 & 1;
  $141 = $140 | $1;
  $142 = $141 | 2;
  HEAP32[$2>>2] = $142;
  $143 = ((($139)) + 4|0);
  $144 = $70 | 3;
  HEAP32[$143>>2] = $144;
  $145 = (($0) + ($68)|0);
  $146 = ((($145)) + 4|0);
  $147 = HEAP32[$146>>2]|0;
  $148 = $147 | 1;
  HEAP32[$146>>2] = $148;
  _dispose_chunk($139,$70);
  $$2 = $0;
  return ($$2|0);
 }
 return (0)|0;
}
function _dispose_chunk($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$03649 = 0, $$0365$lcssa = 0, $$03658 = 0, $$0376 = 0, $$0383 = 0, $$1 = 0, $$1363 = 0, $$1371 = 0, $$1371$be = 0, $$1371$ph = 0, $$1374 = 0, $$1374$be = 0, $$1374$ph = 0, $$1378 = 0, $$1378$be = 0, $$1378$ph = 0, $$1382 = 0, $$1382$be = 0, $$1382$ph = 0, $$2 = 0;
 var $$3 = 0, $$3380 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$sink = 0, $$sink24 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
 var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0;
 var $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond = 0, $cond4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (($0) + ($1)|0);
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 1;
 $6 = ($5|0)==(0);
 do {
  if ($6) {
   $7 = HEAP32[$0>>2]|0;
   $8 = $4 & 3;
   $9 = ($8|0)==(0);
   if ($9) {
    return;
   }
   $10 = (0 - ($7))|0;
   $11 = (($0) + ($10)|0);
   $12 = (($7) + ($1))|0;
   $13 = HEAP32[(49216)>>2]|0;
   $14 = ($13|0)==($11|0);
   if ($14) {
    $75 = ((($2)) + 4|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = $76 & 3;
    $78 = ($77|0)==(3);
    if (!($78)) {
     $$1 = $11;$$1363 = $12;
     break;
    }
    $79 = ((($11)) + 4|0);
    $80 = $12 | 1;
    $81 = $76 & -2;
    HEAP32[(49204)>>2] = $12;
    HEAP32[$75>>2] = $81;
    HEAP32[$79>>2] = $80;
    HEAP32[$2>>2] = $12;
    return;
   }
   $15 = $7 >>> 3;
   $16 = ($7>>>0)<(256);
   if ($16) {
    $17 = ((($11)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($11)) + 12|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20|0)==($18|0);
    if ($21) {
     $22 = 1 << $15;
     $23 = $22 ^ -1;
     $24 = HEAP32[12299]|0;
     $25 = $24 & $23;
     HEAP32[12299] = $25;
     $$1 = $11;$$1363 = $12;
     break;
    } else {
     $26 = ((($18)) + 12|0);
     HEAP32[$26>>2] = $20;
     $27 = ((($20)) + 8|0);
     HEAP32[$27>>2] = $18;
     $$1 = $11;$$1363 = $12;
     break;
    }
   }
   $28 = ((($11)) + 24|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = ((($11)) + 12|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ($31|0)==($11|0);
   do {
    if ($32) {
     $37 = ((($11)) + 16|0);
     $38 = ((($37)) + 4|0);
     $39 = HEAP32[$38>>2]|0;
     $40 = ($39|0)==(0|0);
     if ($40) {
      $41 = HEAP32[$37>>2]|0;
      $42 = ($41|0)==(0|0);
      if ($42) {
       $$3 = 0;
       break;
      } else {
       $$1371$ph = $41;$$1374$ph = $37;
      }
     } else {
      $$1371$ph = $39;$$1374$ph = $38;
     }
     $$1371 = $$1371$ph;$$1374 = $$1374$ph;
     while(1) {
      $43 = ((($$1371)) + 20|0);
      $44 = HEAP32[$43>>2]|0;
      $45 = ($44|0)==(0|0);
      if ($45) {
       $46 = ((($$1371)) + 16|0);
       $47 = HEAP32[$46>>2]|0;
       $48 = ($47|0)==(0|0);
       if ($48) {
        break;
       } else {
        $$1371$be = $47;$$1374$be = $46;
       }
      } else {
       $$1371$be = $44;$$1374$be = $43;
      }
      $$1371 = $$1371$be;$$1374 = $$1374$be;
     }
     HEAP32[$$1374>>2] = 0;
     $$3 = $$1371;
    } else {
     $33 = ((($11)) + 8|0);
     $34 = HEAP32[$33>>2]|0;
     $35 = ((($34)) + 12|0);
     HEAP32[$35>>2] = $31;
     $36 = ((($31)) + 8|0);
     HEAP32[$36>>2] = $34;
     $$3 = $31;
    }
   } while(0);
   $49 = ($29|0)==(0|0);
   if ($49) {
    $$1 = $11;$$1363 = $12;
   } else {
    $50 = ((($11)) + 28|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = (49500 + ($51<<2)|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = ($53|0)==($11|0);
    if ($54) {
     HEAP32[$52>>2] = $$3;
     $cond = ($$3|0)==(0|0);
     if ($cond) {
      $55 = 1 << $51;
      $56 = $55 ^ -1;
      $57 = HEAP32[(49200)>>2]|0;
      $58 = $57 & $56;
      HEAP32[(49200)>>2] = $58;
      $$1 = $11;$$1363 = $12;
      break;
     }
    } else {
     $59 = ((($29)) + 16|0);
     $60 = HEAP32[$59>>2]|0;
     $61 = ($60|0)==($11|0);
     $62 = ((($29)) + 20|0);
     $$sink = $61 ? $59 : $62;
     HEAP32[$$sink>>2] = $$3;
     $63 = ($$3|0)==(0|0);
     if ($63) {
      $$1 = $11;$$1363 = $12;
      break;
     }
    }
    $64 = ((($$3)) + 24|0);
    HEAP32[$64>>2] = $29;
    $65 = ((($11)) + 16|0);
    $66 = HEAP32[$65>>2]|0;
    $67 = ($66|0)==(0|0);
    if (!($67)) {
     $68 = ((($$3)) + 16|0);
     HEAP32[$68>>2] = $66;
     $69 = ((($66)) + 24|0);
     HEAP32[$69>>2] = $$3;
    }
    $70 = ((($65)) + 4|0);
    $71 = HEAP32[$70>>2]|0;
    $72 = ($71|0)==(0|0);
    if ($72) {
     $$1 = $11;$$1363 = $12;
    } else {
     $73 = ((($$3)) + 20|0);
     HEAP32[$73>>2] = $71;
     $74 = ((($71)) + 24|0);
     HEAP32[$74>>2] = $$3;
     $$1 = $11;$$1363 = $12;
    }
   }
  } else {
   $$1 = $0;$$1363 = $1;
  }
 } while(0);
 $82 = ((($2)) + 4|0);
 $83 = HEAP32[$82>>2]|0;
 $84 = $83 & 2;
 $85 = ($84|0)==(0);
 if ($85) {
  $86 = HEAP32[(49220)>>2]|0;
  $87 = ($86|0)==($2|0);
  if ($87) {
   $88 = HEAP32[(49208)>>2]|0;
   $89 = (($88) + ($$1363))|0;
   HEAP32[(49208)>>2] = $89;
   HEAP32[(49220)>>2] = $$1;
   $90 = $89 | 1;
   $91 = ((($$1)) + 4|0);
   HEAP32[$91>>2] = $90;
   $92 = HEAP32[(49216)>>2]|0;
   $93 = ($$1|0)==($92|0);
   if (!($93)) {
    return;
   }
   HEAP32[(49216)>>2] = 0;
   HEAP32[(49204)>>2] = 0;
   return;
  }
  $94 = HEAP32[(49216)>>2]|0;
  $95 = ($94|0)==($2|0);
  if ($95) {
   $96 = HEAP32[(49204)>>2]|0;
   $97 = (($96) + ($$1363))|0;
   HEAP32[(49204)>>2] = $97;
   HEAP32[(49216)>>2] = $$1;
   $98 = $97 | 1;
   $99 = ((($$1)) + 4|0);
   HEAP32[$99>>2] = $98;
   $100 = (($$1) + ($97)|0);
   HEAP32[$100>>2] = $97;
   return;
  }
  $101 = $83 & -8;
  $102 = (($101) + ($$1363))|0;
  $103 = $83 >>> 3;
  $104 = ($83>>>0)<(256);
  do {
   if ($104) {
    $105 = ((($2)) + 8|0);
    $106 = HEAP32[$105>>2]|0;
    $107 = ((($2)) + 12|0);
    $108 = HEAP32[$107>>2]|0;
    $109 = ($108|0)==($106|0);
    if ($109) {
     $110 = 1 << $103;
     $111 = $110 ^ -1;
     $112 = HEAP32[12299]|0;
     $113 = $112 & $111;
     HEAP32[12299] = $113;
     break;
    } else {
     $114 = ((($106)) + 12|0);
     HEAP32[$114>>2] = $108;
     $115 = ((($108)) + 8|0);
     HEAP32[$115>>2] = $106;
     break;
    }
   } else {
    $116 = ((($2)) + 24|0);
    $117 = HEAP32[$116>>2]|0;
    $118 = ((($2)) + 12|0);
    $119 = HEAP32[$118>>2]|0;
    $120 = ($119|0)==($2|0);
    do {
     if ($120) {
      $125 = ((($2)) + 16|0);
      $126 = ((($125)) + 4|0);
      $127 = HEAP32[$126>>2]|0;
      $128 = ($127|0)==(0|0);
      if ($128) {
       $129 = HEAP32[$125>>2]|0;
       $130 = ($129|0)==(0|0);
       if ($130) {
        $$3380 = 0;
        break;
       } else {
        $$1378$ph = $129;$$1382$ph = $125;
       }
      } else {
       $$1378$ph = $127;$$1382$ph = $126;
      }
      $$1378 = $$1378$ph;$$1382 = $$1382$ph;
      while(1) {
       $131 = ((($$1378)) + 20|0);
       $132 = HEAP32[$131>>2]|0;
       $133 = ($132|0)==(0|0);
       if ($133) {
        $134 = ((($$1378)) + 16|0);
        $135 = HEAP32[$134>>2]|0;
        $136 = ($135|0)==(0|0);
        if ($136) {
         break;
        } else {
         $$1378$be = $135;$$1382$be = $134;
        }
       } else {
        $$1378$be = $132;$$1382$be = $131;
       }
       $$1378 = $$1378$be;$$1382 = $$1382$be;
      }
      HEAP32[$$1382>>2] = 0;
      $$3380 = $$1378;
     } else {
      $121 = ((($2)) + 8|0);
      $122 = HEAP32[$121>>2]|0;
      $123 = ((($122)) + 12|0);
      HEAP32[$123>>2] = $119;
      $124 = ((($119)) + 8|0);
      HEAP32[$124>>2] = $122;
      $$3380 = $119;
     }
    } while(0);
    $137 = ($117|0)==(0|0);
    if (!($137)) {
     $138 = ((($2)) + 28|0);
     $139 = HEAP32[$138>>2]|0;
     $140 = (49500 + ($139<<2)|0);
     $141 = HEAP32[$140>>2]|0;
     $142 = ($141|0)==($2|0);
     if ($142) {
      HEAP32[$140>>2] = $$3380;
      $cond4 = ($$3380|0)==(0|0);
      if ($cond4) {
       $143 = 1 << $139;
       $144 = $143 ^ -1;
       $145 = HEAP32[(49200)>>2]|0;
       $146 = $145 & $144;
       HEAP32[(49200)>>2] = $146;
       break;
      }
     } else {
      $147 = ((($117)) + 16|0);
      $148 = HEAP32[$147>>2]|0;
      $149 = ($148|0)==($2|0);
      $150 = ((($117)) + 20|0);
      $$sink24 = $149 ? $147 : $150;
      HEAP32[$$sink24>>2] = $$3380;
      $151 = ($$3380|0)==(0|0);
      if ($151) {
       break;
      }
     }
     $152 = ((($$3380)) + 24|0);
     HEAP32[$152>>2] = $117;
     $153 = ((($2)) + 16|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = ($154|0)==(0|0);
     if (!($155)) {
      $156 = ((($$3380)) + 16|0);
      HEAP32[$156>>2] = $154;
      $157 = ((($154)) + 24|0);
      HEAP32[$157>>2] = $$3380;
     }
     $158 = ((($153)) + 4|0);
     $159 = HEAP32[$158>>2]|0;
     $160 = ($159|0)==(0|0);
     if (!($160)) {
      $161 = ((($$3380)) + 20|0);
      HEAP32[$161>>2] = $159;
      $162 = ((($159)) + 24|0);
      HEAP32[$162>>2] = $$3380;
     }
    }
   }
  } while(0);
  $163 = $102 | 1;
  $164 = ((($$1)) + 4|0);
  HEAP32[$164>>2] = $163;
  $165 = (($$1) + ($102)|0);
  HEAP32[$165>>2] = $102;
  $166 = HEAP32[(49216)>>2]|0;
  $167 = ($$1|0)==($166|0);
  if ($167) {
   HEAP32[(49204)>>2] = $102;
   return;
  } else {
   $$2 = $102;
  }
 } else {
  $168 = $83 & -2;
  HEAP32[$82>>2] = $168;
  $169 = $$1363 | 1;
  $170 = ((($$1)) + 4|0);
  HEAP32[$170>>2] = $169;
  $171 = (($$1) + ($$1363)|0);
  HEAP32[$171>>2] = $$1363;
  $$2 = $$1363;
 }
 $172 = $$2 >>> 3;
 $173 = ($$2>>>0)<(256);
 if ($173) {
  $174 = $172 << 1;
  $175 = (49236 + ($174<<2)|0);
  $176 = HEAP32[12299]|0;
  $177 = 1 << $172;
  $178 = $176 & $177;
  $179 = ($178|0)==(0);
  if ($179) {
   $180 = $176 | $177;
   HEAP32[12299] = $180;
   $$pre = ((($175)) + 8|0);
   $$0383 = $175;$$pre$phiZ2D = $$pre;
  } else {
   $181 = ((($175)) + 8|0);
   $182 = HEAP32[$181>>2]|0;
   $$0383 = $182;$$pre$phiZ2D = $181;
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $183 = ((($$0383)) + 12|0);
  HEAP32[$183>>2] = $$1;
  $184 = ((($$1)) + 8|0);
  HEAP32[$184>>2] = $$0383;
  $185 = ((($$1)) + 12|0);
  HEAP32[$185>>2] = $175;
  return;
 }
 $186 = $$2 >>> 8;
 $187 = ($186|0)==(0);
 if ($187) {
  $$0376 = 0;
 } else {
  $188 = ($$2>>>0)>(16777215);
  if ($188) {
   $$0376 = 31;
  } else {
   $189 = (($186) + 1048320)|0;
   $190 = $189 >>> 16;
   $191 = $190 & 8;
   $192 = $186 << $191;
   $193 = (($192) + 520192)|0;
   $194 = $193 >>> 16;
   $195 = $194 & 4;
   $196 = $195 | $191;
   $197 = $192 << $195;
   $198 = (($197) + 245760)|0;
   $199 = $198 >>> 16;
   $200 = $199 & 2;
   $201 = $196 | $200;
   $202 = (14 - ($201))|0;
   $203 = $197 << $200;
   $204 = $203 >>> 15;
   $205 = (($202) + ($204))|0;
   $206 = $205 << 1;
   $207 = (($205) + 7)|0;
   $208 = $$2 >>> $207;
   $209 = $208 & 1;
   $210 = $209 | $206;
   $$0376 = $210;
  }
 }
 $211 = (49500 + ($$0376<<2)|0);
 $212 = ((($$1)) + 28|0);
 HEAP32[$212>>2] = $$0376;
 $213 = ((($$1)) + 16|0);
 $214 = ((($$1)) + 20|0);
 HEAP32[$214>>2] = 0;
 HEAP32[$213>>2] = 0;
 $215 = HEAP32[(49200)>>2]|0;
 $216 = 1 << $$0376;
 $217 = $215 & $216;
 $218 = ($217|0)==(0);
 if ($218) {
  $219 = $215 | $216;
  HEAP32[(49200)>>2] = $219;
  HEAP32[$211>>2] = $$1;
  $220 = ((($$1)) + 24|0);
  HEAP32[$220>>2] = $211;
  $221 = ((($$1)) + 12|0);
  HEAP32[$221>>2] = $$1;
  $222 = ((($$1)) + 8|0);
  HEAP32[$222>>2] = $$1;
  return;
 }
 $223 = HEAP32[$211>>2]|0;
 $224 = ((($223)) + 4|0);
 $225 = HEAP32[$224>>2]|0;
 $226 = $225 & -8;
 $227 = ($226|0)==($$2|0);
 L104: do {
  if ($227) {
   $$0365$lcssa = $223;
  } else {
   $228 = ($$0376|0)==(31);
   $229 = $$0376 >>> 1;
   $230 = (25 - ($229))|0;
   $231 = $228 ? 0 : $230;
   $232 = $$2 << $231;
   $$03649 = $232;$$03658 = $223;
   while(1) {
    $239 = $$03649 >>> 31;
    $240 = (((($$03658)) + 16|0) + ($239<<2)|0);
    $235 = HEAP32[$240>>2]|0;
    $241 = ($235|0)==(0|0);
    if ($241) {
     break;
    }
    $233 = $$03649 << 1;
    $234 = ((($235)) + 4|0);
    $236 = HEAP32[$234>>2]|0;
    $237 = $236 & -8;
    $238 = ($237|0)==($$2|0);
    if ($238) {
     $$0365$lcssa = $235;
     break L104;
    } else {
     $$03649 = $233;$$03658 = $235;
    }
   }
   HEAP32[$240>>2] = $$1;
   $242 = ((($$1)) + 24|0);
   HEAP32[$242>>2] = $$03658;
   $243 = ((($$1)) + 12|0);
   HEAP32[$243>>2] = $$1;
   $244 = ((($$1)) + 8|0);
   HEAP32[$244>>2] = $$1;
   return;
  }
 } while(0);
 $245 = ((($$0365$lcssa)) + 8|0);
 $246 = HEAP32[$245>>2]|0;
 $247 = ((($246)) + 12|0);
 HEAP32[$247>>2] = $$1;
 HEAP32[$245>>2] = $$1;
 $248 = ((($$1)) + 8|0);
 HEAP32[$248>>2] = $246;
 $249 = ((($$1)) + 12|0);
 HEAP32[$249>>2] = $$0365$lcssa;
 $250 = ((($$1)) + 24|0);
 HEAP32[$250>>2] = 0;
 return;
}
function __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__28ios_baseD2Ev($0);
 return;
}
function __ZNSt3__28ios_baseD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (27340);
 __THREW__ = 0;
 invoke_vii(162,($0|0),0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $12 = ___cxa_find_matching_catch_3(0|0)|0;
  $13 = (getTempRet0() | 0);
  ___clang_call_terminate($12);
  // unreachable;
 } else {
  $3 = ((($0)) + 28|0);
  __ZNSt3__26localeD2Ev($3);
  $4 = ((($0)) + 32|0);
  $5 = HEAP32[$4>>2]|0;
  _free($5);
  $6 = ((($0)) + 36|0);
  $7 = HEAP32[$6>>2]|0;
  _free($7);
  $8 = ((($0)) + 48|0);
  $9 = HEAP32[$8>>2]|0;
  _free($9);
  $10 = ((($0)) + 60|0);
  $11 = HEAP32[$10>>2]|0;
  _free($11);
  return;
 }
}
function __ZNSt3__28ios_base16__call_callbacksENS0_5eventE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 40|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 32|0);
 $5 = ((($0)) + 36|0);
 $$0 = $3;
 while(1) {
  $6 = ($$0|0)==(0);
  if ($6) {
   break;
  }
  $7 = (($$0) + -1)|0;
  $8 = HEAP32[$4>>2]|0;
  $9 = (($8) + ($7<<2)|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = HEAP32[$5>>2]|0;
  $12 = (($11) + ($7<<2)|0);
  $13 = HEAP32[$12>>2]|0;
  FUNCTION_TABLE_viii[$10 & 63]($1,$0,$13);
  $$0 = $7;
 }
 return;
}
function __ZNSt3__28ios_baseD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__28ios_baseD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__29basic_iosIwNS_11char_traitsIwEEED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__28ios_baseD2Ev($0);
 return;
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (27356);
 $1 = ((($0)) + 4|0);
 __ZNSt3__26localeD2Ev($1);
 return;
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6setbufEPcl($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = $0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = 0;
 $10 = ((($0)) + 8|0);
 $11 = $10;
 $12 = $11;
 HEAP32[$12>>2] = -1;
 $13 = (($11) + 4)|0;
 $14 = $13;
 HEAP32[$14>>2] = -1;
 return;
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = $0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = ((($0)) + 8|0);
 $9 = $8;
 $10 = $9;
 HEAP32[$10>>2] = -1;
 $11 = (($9) + 4)|0;
 $12 = $11;
 HEAP32[$12>>2] = -1;
 return;
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE4syncEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9showmanycEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPcl($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$023 = 0, $$1 = 0, $$124 = 0, $$pn = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 (__ZNSt3__211char_traitsIcE3eofEv()|0);
 $3 = ((($0)) + 12|0);
 $4 = ((($0)) + 16|0);
 $$0 = $1;$$023 = 0;
 while(1) {
  $5 = ($$023|0)<($2|0);
  if (!($5)) {
   break;
  }
  $6 = HEAP32[$3>>2]|0;
  $7 = HEAP32[$4>>2]|0;
  $8 = ($6>>>0)<($7>>>0);
  if ($8) {
   $9 = $6;
   $10 = $7;
   $11 = (($10) - ($9))|0;
   $12 = (($2) - ($$023))|0;
   $13 = ($12|0)<($11|0);
   $14 = $13 ? $12 : $11;
   (__ZNSt3__211char_traitsIcE4copyEPcPKcm($$0,$6,$14)|0);
   $15 = (($$0) + ($14)|0);
   $16 = HEAP32[$3>>2]|0;
   $17 = (($16) + ($14)|0);
   HEAP32[$3>>2] = $17;
   $$1 = $15;$$pn = $14;
  } else {
   $18 = HEAP32[$0>>2]|0;
   $19 = ((($18)) + 40|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = (FUNCTION_TABLE_ii[$20 & 255]($0)|0);
   $22 = ($21|0)==(-1);
   if ($22) {
    break;
   }
   $23 = (__ZNSt3__211char_traitsIcE12to_char_typeEi($21)|0);
   HEAP8[$$0>>0] = $23;
   $24 = ((($$0)) + 1|0);
   $$1 = $24;$$pn = 1;
  }
  $$124 = (($$pn) + ($$023))|0;
  $$0 = $$1;$$023 = $$124;
 }
 return ($$023|0);
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9underflowEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
 return ($1|0);
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5uflowEv($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 36|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_ii[$3 & 255]($0)|0);
 $5 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
 $6 = ($4|0)==($5|0);
 if ($6) {
  $7 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
  $$0 = $7;
 } else {
  $8 = ((($0)) + 12|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($9)) + 1|0);
  HEAP32[$8>>2] = $10;
  $11 = HEAP8[$9>>0]|0;
  $12 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($11)|0);
  $$0 = $12;
 }
 return ($$0|0);
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
 return ($2|0);
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKcl($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$0$be = 0, $$021 = 0, $$021$be = 0, $$sroa$speculated = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
 $4 = ((($0)) + 24|0);
 $5 = ((($0)) + 28|0);
 $$0 = $1;$$021 = 0;
 while(1) {
  $6 = ($$021|0)<($2|0);
  if (!($6)) {
   break;
  }
  $7 = HEAP32[$4>>2]|0;
  $8 = HEAP32[$5>>2]|0;
  $9 = ($7>>>0)<($8>>>0);
  if ($9) {
   $19 = $7;
   $20 = $8;
   $21 = (($20) - ($19))|0;
   $22 = (($2) - ($$021))|0;
   $23 = ($22|0)<($21|0);
   $$sroa$speculated = $23 ? $22 : $21;
   (__ZNSt3__211char_traitsIcE4copyEPcPKcm($7,$$0,$$sroa$speculated)|0);
   $24 = HEAP32[$4>>2]|0;
   $25 = (($24) + ($$sroa$speculated)|0);
   HEAP32[$4>>2] = $25;
   $26 = (($$0) + ($$sroa$speculated)|0);
   $27 = (($$sroa$speculated) + ($$021))|0;
   $$0$be = $26;$$021$be = $27;
  } else {
   $10 = HEAP32[$0>>2]|0;
   $11 = ((($10)) + 52|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = HEAP8[$$0>>0]|0;
   $14 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($13)|0);
   $15 = (FUNCTION_TABLE_iii[$12 & 127]($0,$14)|0);
   $16 = ($15|0)==($3|0);
   if ($16) {
    break;
   }
   $17 = ((($$0)) + 1|0);
   $18 = (($$021) + 1)|0;
   $$0$be = $17;$$021$be = $18;
  }
  $$0 = $$0$be;$$021 = $$021$be;
 }
 return ($$021|0);
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE8overflowEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
 return ($2|0);
}
function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (27420);
 $1 = ((($0)) + 4|0);
 __ZNSt3__26localeD2Ev($1);
 return;
}
function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6setbufEPwl($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = $0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = 0;
 $10 = ((($0)) + 8|0);
 $11 = $10;
 $12 = $11;
 HEAP32[$12>>2] = -1;
 $13 = (($11) + 4)|0;
 $14 = $13;
 HEAP32[$14>>2] = -1;
 return;
}
function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI11__mbstate_tEEj($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = $0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = ((($0)) + 8|0);
 $9 = $8;
 $10 = $9;
 HEAP32[$10>>2] = -1;
 $11 = (($9) + 4)|0;
 $12 = $11;
 HEAP32[$12>>2] = -1;
 return;
}
function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE4syncEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9showmanycEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwl($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$023 = 0, $$1 = 0, $$124 = 0, $$pn = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 (__ZNSt3__211char_traitsIwE3eofEv()|0);
 $3 = ((($0)) + 12|0);
 $4 = ((($0)) + 16|0);
 $$0 = $1;$$023 = 0;
 while(1) {
  $5 = ($$023|0)<($2|0);
  if (!($5)) {
   break;
  }
  $6 = HEAP32[$3>>2]|0;
  $7 = HEAP32[$4>>2]|0;
  $8 = ($6>>>0)<($7>>>0);
  if ($8) {
   $9 = $6;
   $10 = $7;
   $11 = (($10) - ($9))|0;
   $12 = $11 >> 2;
   $13 = (($2) - ($$023))|0;
   $14 = ($13|0)<($12|0);
   $15 = $14 ? $13 : $12;
   (__ZNSt3__211char_traitsIwE4copyEPwPKwm($$0,$6,$15)|0);
   $16 = (($$0) + ($15<<2)|0);
   $17 = HEAP32[$3>>2]|0;
   $18 = (($17) + ($15<<2)|0);
   HEAP32[$3>>2] = $18;
   $$1 = $16;$$pn = $15;
  } else {
   $19 = HEAP32[$0>>2]|0;
   $20 = ((($19)) + 40|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = (FUNCTION_TABLE_ii[$21 & 255]($0)|0);
   $23 = ($22|0)==(-1);
   if ($23) {
    break;
   }
   $24 = (__ZNSt3__211char_traitsIwE12to_char_typeEj($22)|0);
   HEAP32[$$0>>2] = $24;
   $25 = ((($$0)) + 4|0);
   $$1 = $25;$$pn = 1;
  }
  $$124 = (($$pn) + ($$023))|0;
  $$0 = $$1;$$023 = $$124;
 }
 return ($$023|0);
}
function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9underflowEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
 return ($1|0);
}
function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE5uflowEv($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 36|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_ii[$3 & 255]($0)|0);
 $5 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
 $6 = ($4|0)==($5|0);
 if ($6) {
  $7 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
  $$0 = $7;
 } else {
  $8 = ((($0)) + 12|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($9)) + 4|0);
  HEAP32[$8>>2] = $10;
  $11 = HEAP32[$9>>2]|0;
  $12 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($11)|0);
  $$0 = $12;
 }
 return ($$0|0);
}
function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9pbackfailEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
 return ($2|0);
}
function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwl($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$0$be = 0, $$021 = 0, $$021$be = 0, $$sroa$speculated = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
 $4 = ((($0)) + 24|0);
 $5 = ((($0)) + 28|0);
 $$0 = $1;$$021 = 0;
 while(1) {
  $6 = ($$021|0)<($2|0);
  if (!($6)) {
   break;
  }
  $7 = HEAP32[$4>>2]|0;
  $8 = HEAP32[$5>>2]|0;
  $9 = ($7>>>0)<($8>>>0);
  if ($9) {
   $19 = $7;
   $20 = $8;
   $21 = (($20) - ($19))|0;
   $22 = $21 >> 2;
   $23 = (($2) - ($$021))|0;
   $24 = ($23|0)<($22|0);
   $$sroa$speculated = $24 ? $23 : $22;
   (__ZNSt3__211char_traitsIwE4copyEPwPKwm($7,$$0,$$sroa$speculated)|0);
   $25 = HEAP32[$4>>2]|0;
   $26 = (($25) + ($$sroa$speculated<<2)|0);
   HEAP32[$4>>2] = $26;
   $27 = (($$0) + ($$sroa$speculated<<2)|0);
   $28 = (($$sroa$speculated) + ($$021))|0;
   $$0$be = $27;$$021$be = $28;
  } else {
   $10 = HEAP32[$0>>2]|0;
   $11 = ((($10)) + 52|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = HEAP32[$$0>>2]|0;
   $14 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($13)|0);
   $15 = (FUNCTION_TABLE_iii[$12 & 127]($0,$14)|0);
   $16 = ($15|0)==($3|0);
   if ($16) {
    break;
   }
   $17 = ((($$0)) + 4|0);
   $18 = (($$021) + 1)|0;
   $$0$be = $17;$$021$be = $18;
  }
  $$0 = $$0$be;$$021 = $$021$be;
 }
 return ($$021|0);
}
function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE8overflowEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
 return ($2|0);
}
function __ZNSt3__211char_traitsIwE3eofEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return -1;
}
function __ZNSt3__211char_traitsIwE11to_int_typeEw($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZNSt3__211char_traitsIwE4copyEPwPKwm($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 if ($3) {
  $5 = $0;
 } else {
  $4 = (_wmemcpy($0,$1,$2)|0);
  $5 = $0;
 }
 return ($5|0);
}
function __ZNSt3__211char_traitsIwE12to_char_typeEj($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED1Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED2Ev($0,27516);
 $1 = ((($0)) + 8|0);
 __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($1);
 return;
}
function __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED1Ev($0);
 __ZdlPv($0);
 return;
}
function __ZTv0_n12_NSt3__213basic_istreamIcNS_11char_traitsIcEEED1Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + -12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($0) + ($3)|0);
 __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED1Ev($4);
 return;
}
function __ZTv0_n12_NSt3__213basic_istreamIcNS_11char_traitsIcEEED0Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + -12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($0) + ($3)|0);
 __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED0Ev($4);
 return;
}
function __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED2Ev($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED1Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED2Ev($0,27564);
 $1 = ((($0)) + 8|0);
 __ZNSt3__29basic_iosIwNS_11char_traitsIwEEED2Ev($1);
 return;
}
function __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED1Ev($0);
 __ZdlPv($0);
 return;
}
function __ZTv0_n12_NSt3__213basic_istreamIwNS_11char_traitsIwEEED1Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + -12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($0) + ($3)|0);
 __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED1Ev($4);
 return;
}
function __ZTv0_n12_NSt3__213basic_istreamIwNS_11char_traitsIwEEED0Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + -12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($0) + ($3)|0);
 __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED0Ev($4);
 return;
}
function __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED2Ev($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED1Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED2Ev($0,27612);
 $1 = ((($0)) + 4|0);
 __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($1);
 return;
}
function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED1Ev($0);
 __ZdlPv($0);
 return;
}
function __ZTv0_n12_NSt3__213basic_ostreamIcNS_11char_traitsIcEEED1Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + -12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($0) + ($3)|0);
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED1Ev($4);
 return;
}
function __ZTv0_n12_NSt3__213basic_ostreamIcNS_11char_traitsIcEEED0Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + -12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($0) + ($3)|0);
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED0Ev($4);
 return;
}
function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED2Ev($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED1Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED2Ev($0,27660);
 $1 = ((($0)) + 4|0);
 __ZNSt3__29basic_iosIwNS_11char_traitsIwEEED2Ev($1);
 return;
}
function __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED1Ev($0);
 __ZdlPv($0);
 return;
}
function __ZTv0_n12_NSt3__213basic_ostreamIwNS_11char_traitsIwEEED1Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + -12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($0) + ($3)|0);
 __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED1Ev($4);
 return;
}
function __ZTv0_n12_NSt3__213basic_ostreamIwNS_11char_traitsIwEEED0Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + -12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($0) + ($3)|0);
 __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED0Ev($4);
 return;
}
function __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED2Ev($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__219__iostream_categoryD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZNKSt3__219__iostream_category4nameEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (41346|0);
}
function __ZNKSt3__219__iostream_category7messageEi($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)!=(1);
 $4 = ($2|0)<(257);
 $or$cond = $3 & $4;
 if ($or$cond) {
  __ZNKSt3__212__do_message7messageEi($0,$1,$2);
 } else {
  ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
  $5 = (__ZNSt3__211char_traitsIcE6lengthEPKc(41310)|0);
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($0,41310,$5);
 }
 return;
}
function __ZNSt3__28ios_base7failureD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__212system_errorD2Ev($0);
 return;
}
function __ZNSt3__28ios_base7failureD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__28ios_base7failureD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__28ios_base5clearEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$index = 0, $$index2 = 0, $$sroa_idx2$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = ((($0)) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 $6 = $5&1;
 $spec$select = $6 | $1;
 $7 = ((($0)) + 16|0);
 HEAP32[$7>>2] = $spec$select;
 $8 = $5&1;
 $9 = $8 | $1;
 $10 = ((($0)) + 20|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $11 & $9;
 $13 = ($12|0)==(0);
 if ($13) {
  STACKTOP = sp;return;
 }
 $14 = (___cxa_allocate_exception(16)|0);
 (__ZNSt3__217iostream_categoryEv()|0);
 HEAP32[$2>>2] = 1;
 $$sroa_idx2$i = ((($2)) + 4|0);
 HEAP32[$$sroa_idx2$i>>2] = (27724);
 __THREW__ = 0;
 invoke_viii(26,($14|0),(41411|0),($2|0));
 $15 = __THREW__; __THREW__ = 0;
 $16 = $15&1;
 if ($16) {
  $20 = ___cxa_find_matching_catch_2()|0;
  $21 = (getTempRet0() | 0);
  ___cxa_free_exception(($14|0));
  $$index = $20;$$index2 = $21;
 } else {
  __THREW__ = 0;
  invoke_viii(27,($14|0),(23360|0),(152|0));
  $17 = __THREW__; __THREW__ = 0;
  $18 = ___cxa_find_matching_catch_2()|0;
  $19 = (getTempRet0() | 0);
  $$index = $18;$$index2 = $19;
 }
 ___resumeException($$index|0);
 // unreachable;
}
function __ZNSt3__217iostream_categoryEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[48408]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  $2 = (___cxa_guard_acquire(48408)|0);
  $3 = ($2|0)==(0);
  if (!($3)) {
  }
 }
 return (27724|0);
}
function __ZNSt3__28ios_base7failureC2EPKcRKNS_10error_codeE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tmpcast$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmpcast$byval_copy = sp + 8|0;
 $3 = sp;
 $4 = $2;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) + 4)|0;
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 $10 = $3;
 $11 = $10;
 HEAP32[$11>>2] = $6;
 $12 = (($10) + 4)|0;
 $13 = $12;
 HEAP32[$13>>2] = $9;
 ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$3>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$3+4>>2]|0;
 __ZNSt3__212system_errorC2ENS_10error_codeEPKc($0,$tmpcast$byval_copy,$1);
 HEAP32[$0>>2] = (27712);
 STACKTOP = sp;return;
}
function __ZNSt3__28ios_base4initEPv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 24|0);
 HEAP32[$2>>2] = $1;
 $3 = ($1|0)==(0|0);
 $4 = $3&1;
 $5 = ((($0)) + 16|0);
 HEAP32[$5>>2] = $4;
 $6 = ((($0)) + 20|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($0)) + 4|0);
 HEAP32[$7>>2] = 4098;
 $8 = ((($0)) + 12|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($0)) + 8|0);
 HEAP32[$9>>2] = 6;
 $10 = ((($0)) + 32|0);
 $11 = ((($0)) + 28|0);
 dest=$10; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 __ZNSt3__26localeC2Ev($11);
 return;
}
function __ZNKSt3__28ios_base6getlocEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 28|0);
 __ZNSt3__26localeC2ERKS0_($0,$2);
 return;
}
function __ZNSt3__211char_traitsIwE11eq_int_typeEjj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==($1|0);
 return ($2|0);
}
function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEEC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (27356);
 $1 = ((($0)) + 4|0);
 __ZNSt3__26localeC2Ev($1);
 $2 = ((($0)) + 8|0);
 ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;HEAP32[$2+12>>2]=0|0;HEAP32[$2+16>>2]=0|0;HEAP32[$2+20>>2]=0|0;
 return;
}
function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEEC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (27420);
 $1 = ((($0)) + 4|0);
 __ZNSt3__26localeC2Ev($1);
 $2 = ((($0)) + 8|0);
 ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;HEAP32[$2+12>>2]=0|0;HEAP32[$2+16>>2]=0|0;HEAP32[$2+20>>2]=0|0;
 return;
}
function __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE6sentryC2ERS3_b($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i15 = 0, $$pre$phiZ2D = 0, $$sroa$028$138 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $sext = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 HEAP8[$0>>0] = 0;
 $4 = HEAP32[$1>>2]|0;
 $5 = ((($4)) + -12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($1) + ($6)|0);
 $8 = ((($7)) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0);
 if ($10) {
  $11 = ((($7)) + 72|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)==(0|0);
  if (!($13)) {
   (__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5flushEv($12)|0);
  }
  do {
   if (!($2)) {
    $14 = HEAP32[$1>>2]|0;
    $15 = ((($14)) + -12|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (($1) + ($16)|0);
    $18 = ((($17)) + 4|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = $19 & 4096;
    $21 = ($20|0)==(0);
    if (!($21)) {
     __ZNKSt3__28ios_base6getlocEv($3,$17);
     __THREW__ = 0;
     $22 = (invoke_iii(37,($3|0),(50740|0))|0);
     $23 = __THREW__; __THREW__ = 0;
     $24 = $23&1;
     if ($24) {
      $69 = ___cxa_find_matching_catch_2()|0;
      $70 = (getTempRet0() | 0);
      __ZNSt3__26localeD2Ev($3);
      ___resumeException($69|0);
      // unreachable;
     }
     __ZNSt3__26localeD2Ev($3);
     $25 = HEAP32[$1>>2]|0;
     $26 = ((($25)) + -12|0);
     $27 = HEAP32[$26>>2]|0;
     $28 = (($1) + ($27)|0);
     $29 = ((($28)) + 24|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = ((($22)) + 8|0);
     $32 = $30;
     $33 = ($30|0)==(0);
     $34 = ((($32)) + 12|0);
     $35 = ((($32)) + 16|0);
     $36 = $30;
     while(1) {
      if ($33) {
       $$pre$phiZ2D = 0;$$sroa$028$138 = 0;
       break;
      }
      $37 = HEAP32[$34>>2]|0;
      $38 = HEAP32[$35>>2]|0;
      $39 = ($37|0)==($38|0);
      if ($39) {
       $40 = HEAP32[$36>>2]|0;
       $41 = ((($40)) + 36|0);
       $42 = HEAP32[$41>>2]|0;
       $43 = (FUNCTION_TABLE_ii[$42 & 255]($32)|0);
       $$0$i$i$i$i15 = $43;
      } else {
       $44 = HEAP8[$37>>0]|0;
       $45 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($44)|0);
       $$0$i$i$i$i15 = $45;
      }
      $46 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
      $47 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i15,$46)|0);
      $spec$select = $47 ? 0 : $30;
      if ($47) {
       $$pre$phiZ2D = 0;$$sroa$028$138 = 0;
       break;
      }
      $48 = $spec$select;
      $49 = ((($48)) + 12|0);
      $50 = HEAP32[$49>>2]|0;
      $51 = ((($48)) + 16|0);
      $52 = HEAP32[$51>>2]|0;
      $53 = ($50|0)==($52|0);
      if ($53) {
       $54 = $spec$select;
       $55 = HEAP32[$54>>2]|0;
       $56 = ((($55)) + 36|0);
       $57 = HEAP32[$56>>2]|0;
       $58 = (FUNCTION_TABLE_ii[$57 & 255]($48)|0);
       $$0$i$i = $58;
      } else {
       $59 = HEAP8[$50>>0]|0;
       $60 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($59)|0);
       $$0$i$i = $60;
      }
      $61 = $$0$i$i&255;
      $62 = ($61<<24>>24)>(-1);
      if (!($62)) {
       label = 23;
       break;
      }
      $sext = $$0$i$i << 24;
      $63 = $sext >> 24;
      $64 = HEAP32[$31>>2]|0;
      $65 = (($64) + ($63<<1)|0);
      $66 = HEAP16[$65>>1]|0;
      $67 = $66 & 8192;
      $68 = ($67<<16>>16)==(0);
      if ($68) {
       label = 23;
       break;
      }
      $71 = HEAP32[$49>>2]|0;
      $72 = HEAP32[$51>>2]|0;
      $73 = ($71|0)==($72|0);
      if ($73) {
       $74 = $spec$select;
       $75 = HEAP32[$74>>2]|0;
       $76 = ((($75)) + 40|0);
       $77 = HEAP32[$76>>2]|0;
       (FUNCTION_TABLE_ii[$77 & 255]($48)|0);
      } else {
       $78 = ((($71)) + 1|0);
       HEAP32[$49>>2] = $78;
       $79 = HEAP8[$71>>0]|0;
       (__ZNSt3__211char_traitsIcE11to_int_typeEc($79)|0);
      }
     }
     if ((label|0) == 23) {
      $80 = $spec$select;
      $$pre$phiZ2D = $80;$$sroa$028$138 = $30;
     }
     $81 = ($$sroa$028$138|0)==(0);
     if (!($81)) {
      $82 = ((($$pre$phiZ2D)) + 12|0);
      $83 = HEAP32[$82>>2]|0;
      $84 = ((($$pre$phiZ2D)) + 16|0);
      $85 = HEAP32[$84>>2]|0;
      $86 = ($83|0)==($85|0);
      if ($86) {
       $87 = $$sroa$028$138;
       $88 = HEAP32[$87>>2]|0;
       $89 = ((($88)) + 36|0);
       $90 = HEAP32[$89>>2]|0;
       $91 = (FUNCTION_TABLE_ii[$90 & 255]($$pre$phiZ2D)|0);
       $$0$i$i$i$i = $91;
      } else {
       $92 = HEAP8[$83>>0]|0;
       $93 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($92)|0);
       $$0$i$i$i$i = $93;
      }
      $94 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
      $95 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i,$94)|0);
      if (!($95)) {
       break;
      }
     }
     $96 = HEAP32[$1>>2]|0;
     $97 = ((($96)) + -12|0);
     $98 = HEAP32[$97>>2]|0;
     $99 = (($1) + ($98)|0);
     $100 = ((($99)) + 16|0);
     $101 = HEAP32[$100>>2]|0;
     $102 = $101 | 6;
     __ZNSt3__28ios_base5clearEj($99,$102);
    }
   }
  } while(0);
  $103 = HEAP32[$1>>2]|0;
  $104 = ((($103)) + -12|0);
  $105 = HEAP32[$104>>2]|0;
  $106 = (($1) + ($105)|0);
  $107 = ((($106)) + 16|0);
  $108 = HEAP32[$107>>2]|0;
  $109 = ($108|0)==(0);
  $110 = $109&1;
  HEAP8[$0>>0] = $110;
 } else {
  $111 = $9 | 4;
  __ZNSt3__28ios_base5clearEj($7,$111);
 }
 STACKTOP = sp;return;
}
function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5flushEv($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($2)) + -12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($0) + ($4)|0);
 $6 = ((($5)) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 L1: do {
  if (!($8)) {
   __THREW__ = 0;
   invoke_vii(46,($1|0),($0|0));
   $9 = __THREW__; __THREW__ = 0;
   $10 = $9&1;
   L3: do {
    if ($10) {
     $35 = ___cxa_find_matching_catch_3(0|0)|0;
     $36 = (getTempRet0() | 0);
     $$0 = $35;
    } else {
     $11 = HEAP8[$1>>0]|0;
     $12 = ($11<<24>>24)==(0);
     do {
      if (!($12)) {
       $13 = HEAP32[$0>>2]|0;
       $14 = ((($13)) + -12|0);
       $15 = HEAP32[$14>>2]|0;
       $16 = (($0) + ($15)|0);
       $17 = ((($16)) + 24|0);
       $18 = HEAP32[$17>>2]|0;
       $19 = HEAP32[$18>>2]|0;
       $20 = ((($19)) + 24|0);
       $21 = HEAP32[$20>>2]|0;
       __THREW__ = 0;
       $22 = (invoke_ii($21|0,($18|0))|0);
       $23 = __THREW__; __THREW__ = 0;
       $24 = $23&1;
       if (!($24)) {
        $25 = ($22|0)==(-1);
        if (!($25)) {
         break;
        }
        $26 = HEAP32[$0>>2]|0;
        $27 = ((($26)) + -12|0);
        $28 = HEAP32[$27>>2]|0;
        $29 = (($0) + ($28)|0);
        $30 = ((($29)) + 16|0);
        $31 = HEAP32[$30>>2]|0;
        $32 = $31 | 1;
        __THREW__ = 0;
        invoke_vii(40,($29|0),($32|0));
        $33 = __THREW__; __THREW__ = 0;
        $34 = $33&1;
        if (!($34)) {
         break;
        }
       }
       $37 = ___cxa_find_matching_catch_3(0|0)|0;
       $38 = (getTempRet0() | 0);
       __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($1);
       $$0 = $37;
       break L3;
      }
     } while(0);
     __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($1);
     break L1;
    }
   } while(0);
   (___cxa_begin_catch(($$0|0))|0);
   $39 = HEAP32[$0>>2]|0;
   $40 = ((($39)) + -12|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = (($0) + ($41)|0);
   __THREW__ = 0;
   invoke_vi(237,($42|0));
   $43 = __THREW__; __THREW__ = 0;
   $44 = $43&1;
   if (!($44)) {
    ___cxa_end_catch();
    break;
   }
   $45 = ___cxa_find_matching_catch_2()|0;
   $46 = (getTempRet0() | 0);
   __THREW__ = 0;
   invoke_v(2);
   $47 = __THREW__; __THREW__ = 0;
   $48 = $47&1;
   if ($48) {
    $49 = ___cxa_find_matching_catch_3(0|0)|0;
    $50 = (getTempRet0() | 0);
    ___clang_call_terminate($49);
    // unreachable;
   } else {
    ___resumeException($45|0);
    // unreachable;
   }
  }
 } while(0);
 STACKTOP = sp;return ($0|0);
}
function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$0>>0] = 0;
 $2 = ((($0)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = HEAP32[$1>>2]|0;
 $4 = ((($3)) + -12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($1) + ($5)|0);
 $7 = ((($6)) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0);
 if ($9) {
  $10 = ((($6)) + 72|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==(0|0);
  if (!($12)) {
   (__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5flushEv($11)|0);
  }
  HEAP8[$0>>0] = 1;
 }
 return;
}
function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + -12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($2) + ($5)|0);
 $7 = ((($6)) + 24|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 do {
  if (!($9)) {
   $10 = ((($6)) + 16|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==(0);
   if ($12) {
    $13 = ((($6)) + 4|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = $14 & 8192;
    $16 = ($15|0)==(0);
    if (!($16)) {
     $17 = (__ZSt18uncaught_exceptionv()|0);
     if (!($17)) {
      $18 = HEAP32[$1>>2]|0;
      $19 = HEAP32[$18>>2]|0;
      $20 = ((($19)) + -12|0);
      $21 = HEAP32[$20>>2]|0;
      $22 = (($18) + ($21)|0);
      $23 = ((($22)) + 24|0);
      $24 = HEAP32[$23>>2]|0;
      $25 = HEAP32[$24>>2]|0;
      $26 = ((($25)) + 24|0);
      $27 = HEAP32[$26>>2]|0;
      __THREW__ = 0;
      $28 = (invoke_ii($27|0,($24|0))|0);
      $29 = __THREW__; __THREW__ = 0;
      $30 = $29&1;
      if (!($30)) {
       $31 = ($28|0)==(-1);
       if (!($31)) {
        break;
       }
       $32 = HEAP32[$1>>2]|0;
       $33 = HEAP32[$32>>2]|0;
       $34 = ((($33)) + -12|0);
       $35 = HEAP32[$34>>2]|0;
       $36 = (($32) + ($35)|0);
       $37 = ((($36)) + 16|0);
       $38 = HEAP32[$37>>2]|0;
       $39 = $38 | 1;
       __THREW__ = 0;
       invoke_vii(40,($36|0),($39|0));
       $40 = __THREW__; __THREW__ = 0;
       $41 = $40&1;
       if (!($41)) {
        break;
       }
      }
      $42 = ___cxa_find_matching_catch_3(0|0)|0;
      $43 = (getTempRet0() | 0);
      (___cxa_begin_catch(($42|0))|0);
      __THREW__ = 0;
      invoke_v(2);
      $44 = __THREW__; __THREW__ = 0;
      $45 = $44&1;
      if ($45) {
       $46 = ___cxa_find_matching_catch_3(0|0)|0;
       $47 = (getTempRet0() | 0);
       ___clang_call_terminate($46);
       // unreachable;
      }
     }
    }
   }
  }
 } while(0);
 return;
}
function __ZNSt3__28ios_base33__set_badbit_and_consider_rethrowEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 | 1;
 HEAP32[$1>>2] = $3;
 $4 = ((($0)) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 1;
 $7 = ($6|0)==(0);
 if ($7) {
  return;
 } else {
  ___cxa_rethrow();
  // unreachable;
 }
}
function __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE4readEPcl($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = ((($0)) + 4|0);
 HEAP32[$4>>2] = 0;
 __THREW__ = 0;
 invoke_viii(28,($3|0),($0|0),1);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 do {
  if ($6) {
   label = 6;
  } else {
   $7 = HEAP8[$3>>0]|0;
   $8 = ($7<<24>>24)==(0);
   $9 = HEAP32[$0>>2]|0;
   $10 = ((($9)) + -12|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = (($0) + ($11)|0);
   if ($8) {
    $39 = ((($12)) + 16|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = $40 | 4;
    __THREW__ = 0;
    invoke_vii(40,($12|0),($41|0));
    $42 = __THREW__; __THREW__ = 0;
    $43 = $42&1;
    if ($43) {
     label = 6;
     break;
    }
   } else {
    $13 = ((($12)) + 24|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = HEAP32[$14>>2]|0;
    $16 = ((($15)) + 32|0);
    $17 = HEAP32[$16>>2]|0;
    __THREW__ = 0;
    $18 = (invoke_iiii($17|0,($14|0),($1|0),($2|0))|0);
    $19 = __THREW__; __THREW__ = 0;
    $20 = $19&1;
    if ($20) {
     label = 6;
     break;
    }
    HEAP32[$4>>2] = $18;
    $21 = ($18|0)==($2|0);
    if (!($21)) {
     $22 = HEAP32[$0>>2]|0;
     $23 = ((($22)) + -12|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = (($0) + ($24)|0);
     $26 = ((($25)) + 16|0);
     $27 = HEAP32[$26>>2]|0;
     $28 = $27 | 6;
     __THREW__ = 0;
     invoke_vii(40,($25|0),($28|0));
     $29 = __THREW__; __THREW__ = 0;
     $30 = $29&1;
     if ($30) {
      label = 6;
      break;
     }
    }
   }
  }
 } while(0);
 do {
  if ((label|0) == 6) {
   $31 = ___cxa_find_matching_catch_3(0|0)|0;
   $32 = (getTempRet0() | 0);
   (___cxa_begin_catch(($31|0))|0);
   $33 = HEAP32[$0>>2]|0;
   $34 = ((($33)) + -12|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = (($0) + ($35)|0);
   __THREW__ = 0;
   invoke_vi(237,($36|0));
   $37 = __THREW__; __THREW__ = 0;
   $38 = $37&1;
   if (!($38)) {
    ___cxa_end_catch();
    break;
   }
   $44 = ___cxa_find_matching_catch_2()|0;
   $45 = (getTempRet0() | 0);
   __THREW__ = 0;
   invoke_v(2);
   $46 = __THREW__; __THREW__ = 0;
   $47 = $46&1;
   if ($47) {
    $48 = ___cxa_find_matching_catch_3(0|0)|0;
    $49 = (getTempRet0() | 0);
    ___clang_call_terminate($48);
    // unreachable;
   } else {
    ___resumeException($44|0);
    // unreachable;
   }
  }
 } while(0);
 STACKTOP = sp;return ($0|0);
}
function __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE5seekgExNS_8ios_base7seekdirE($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$1 = 0, $$2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp + 16|0;
 $5 = sp;
 $6 = HEAP32[$0>>2]|0;
 $7 = ((($6)) + -12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($0) + ($8)|0);
 $10 = ((($9)) + 16|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $11 & -3;
 __THREW__ = 0;
 invoke_vii(40,($9|0),($12|0));
 $13 = __THREW__; __THREW__ = 0;
 $14 = $13&1;
 L1: do {
  if ($14) {
   $49 = ___cxa_find_matching_catch_3(0|0)|0;
   $50 = (getTempRet0() | 0);
   $$2 = $49;
   label = 12;
  } else {
   __THREW__ = 0;
   invoke_viii(28,($4|0),($0|0),1);
   $15 = __THREW__; __THREW__ = 0;
   $16 = $15&1;
   do {
    if ($16) {
     label = 8;
    } else {
     $17 = HEAP8[$4>>0]|0;
     $18 = ($17<<24>>24)==(0);
     if (!($18)) {
      $19 = HEAP32[$0>>2]|0;
      $20 = ((($19)) + -12|0);
      $21 = HEAP32[$20>>2]|0;
      $22 = (($0) + ($21)|0);
      $23 = ((($22)) + 24|0);
      $24 = HEAP32[$23>>2]|0;
      $25 = HEAP32[$24>>2]|0;
      $26 = ((($25)) + 16|0);
      $27 = HEAP32[$26>>2]|0;
      __THREW__ = 0;
      invoke_viiiiii($27|0,($5|0),($24|0),($1|0),($2|0),($3|0),8);
      $28 = __THREW__; __THREW__ = 0;
      $29 = $28&1;
      if ($29) {
       $53 = ___cxa_find_matching_catch_3(0|0)|0;
       $54 = (getTempRet0() | 0);
       $$1 = $53;
       break;
      }
      $30 = ((($5)) + 8|0);
      $31 = $30;
      $32 = $31;
      $33 = HEAP32[$32>>2]|0;
      $34 = (($31) + 4)|0;
      $35 = $34;
      $36 = HEAP32[$35>>2]|0;
      $37 = ($33|0)==(-1);
      $38 = ($36|0)==(-1);
      $39 = $37 & $38;
      if ($39) {
       $40 = HEAP32[$0>>2]|0;
       $41 = ((($40)) + -12|0);
       $42 = HEAP32[$41>>2]|0;
       $43 = (($0) + ($42)|0);
       $44 = ((($43)) + 16|0);
       $45 = HEAP32[$44>>2]|0;
       $46 = $45 | 4;
       __THREW__ = 0;
       invoke_vii(40,($43|0),($46|0));
       $47 = __THREW__; __THREW__ = 0;
       $48 = $47&1;
       if ($48) {
        label = 8;
        break;
       }
      }
     }
     break L1;
    }
   } while(0);
   if ((label|0) == 8) {
    $51 = ___cxa_find_matching_catch_3(0|0)|0;
    $52 = (getTempRet0() | 0);
    $$1 = $51;
   }
   $$2 = $$1;
   label = 12;
  }
 } while(0);
 do {
  if ((label|0) == 12) {
   (___cxa_begin_catch(($$2|0))|0);
   $55 = HEAP32[$0>>2]|0;
   $56 = ((($55)) + -12|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = (($0) + ($57)|0);
   __THREW__ = 0;
   invoke_vi(237,($58|0));
   $59 = __THREW__; __THREW__ = 0;
   $60 = $59&1;
   if (!($60)) {
    ___cxa_end_catch();
    break;
   }
   $61 = ___cxa_find_matching_catch_2()|0;
   $62 = (getTempRet0() | 0);
   __THREW__ = 0;
   invoke_v(2);
   $63 = __THREW__; __THREW__ = 0;
   $64 = $63&1;
   if ($64) {
    $65 = ___cxa_find_matching_catch_3(0|0)|0;
    $66 = (getTempRet0() | 0);
    ___clang_call_terminate($65);
    // unreachable;
   } else {
    ___resumeException($61|0);
    // unreachable;
   }
  }
 } while(0);
 STACKTOP = sp;return ($0|0);
}
function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEs($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$1 = 0, $$byval_copy = 0, $$pre$i = 0, $$pre$phi20Z2D = 0, $$pre$phi22Z2D = 0, $$pre$phiZ2D = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $9 = 0, $eh$lpad$body$indexZ2D = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 12|0;
 $2 = sp + 8|0;
 $3 = sp;
 __THREW__ = 0;
 invoke_vii(46,($3|0),($0|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 L1: do {
  if ($5) {
   $63 = ___cxa_find_matching_catch_3(0|0)|0;
   $64 = (getTempRet0() | 0);
   $$1 = $63;$$pre$phi20Z2D = $0;$$pre$phi22Z2D = $0;
   label = 20;
  } else {
   $6 = HEAP8[$3>>0]|0;
   $7 = ($6<<24>>24)==(0);
   L4: do {
    if (!($7)) {
     $8 = HEAP32[$0>>2]|0;
     $9 = ((($8)) + -12|0);
     $10 = HEAP32[$9>>2]|0;
     $11 = (($0) + ($10)|0);
     $12 = ((($11)) + 4|0);
     $13 = HEAP32[$12>>2]|0;
     $14 = $13 & 74;
     __ZNKSt3__28ios_base6getlocEv($$byval_copy,$11);
     __THREW__ = 0;
     $15 = (invoke_iii(37,($$byval_copy|0),(50796|0))|0);
     $16 = __THREW__; __THREW__ = 0;
     $17 = $16&1;
     L6: do {
      if ($17) {
       $65 = ___cxa_find_matching_catch_3(0|0)|0;
       $66 = (getTempRet0() | 0);
       __ZNSt3__26localeD2Ev($$byval_copy);
       $$0 = $65;
      } else {
       __ZNSt3__26localeD2Ev($$byval_copy);
       $18 = HEAP32[$0>>2]|0;
       $19 = ((($18)) + -12|0);
       $20 = HEAP32[$19>>2]|0;
       $21 = (($0) + ($20)|0);
       $22 = ((($21)) + 24|0);
       $23 = HEAP32[$22>>2]|0;
       $24 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
       $25 = ((($21)) + 76|0);
       $26 = HEAP32[$25>>2]|0;
       $27 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($24,$26)|0);
       do {
        if ($27) {
         __ZNKSt3__28ios_base6getlocEv($$byval_copy,$21);
         __THREW__ = 0;
         $28 = (invoke_iii(37,($$byval_copy|0),(50740|0))|0);
         $29 = __THREW__; __THREW__ = 0;
         $30 = $29&1;
         if (!($30)) {
          $31 = HEAP32[$28>>2]|0;
          $32 = ((($31)) + 28|0);
          $33 = HEAP32[$32>>2]|0;
          __THREW__ = 0;
          $34 = (invoke_iii($33|0,($28|0),32)|0);
          $35 = __THREW__; __THREW__ = 0;
          $36 = $35&1;
          if (!($36)) {
           __ZNSt3__26localeD2Ev($$byval_copy);
           $39 = $34 << 24 >> 24;
           HEAP32[$25>>2] = $39;
           $$pre$phiZ2D = $21;$41 = $39;
           label = 10;
           break;
          }
         }
         $37 = ___cxa_find_matching_catch_3(0|0)|0;
         $38 = (getTempRet0() | 0);
         __ZNSt3__26localeD2Ev($$byval_copy);
         $eh$lpad$body$indexZ2D = $37;
        } else {
         $$pre$i = HEAP32[$25>>2]|0;
         $$pre$phiZ2D = $21;$41 = $$pre$i;
         label = 10;
        }
       } while(0);
       do {
        if ((label|0) == 10) {
         $40 = $41&255;
         $42 = ($14|0)==(64);
         $43 = ($14|0)==(8);
         $or$cond = $42 | $43;
         $44 = $1&65535;
         $45 = $1 << 16 >> 16;
         $46 = $or$cond ? $44 : $45;
         $47 = HEAP32[$15>>2]|0;
         $48 = ((($47)) + 16|0);
         $49 = HEAP32[$48>>2]|0;
         HEAP32[$2>>2] = $23;
         __THREW__ = 0;
         ;HEAP32[$$byval_copy>>2]=HEAP32[$2>>2]|0;
         $50 = (invoke_iiiiii($49|0,($15|0),($$byval_copy|0),($$pre$phiZ2D|0),($40|0),($46|0))|0);
         $51 = __THREW__; __THREW__ = 0;
         $52 = $51&1;
         if ($52) {
          $67 = ___cxa_find_matching_catch_3(0|0)|0;
          $68 = (getTempRet0() | 0);
          $eh$lpad$body$indexZ2D = $67;
          break;
         }
         $53 = ($50|0)==(0|0);
         if (!($53)) {
          break L4;
         }
         $54 = HEAP32[$0>>2]|0;
         $55 = ((($54)) + -12|0);
         $56 = HEAP32[$55>>2]|0;
         $57 = (($0) + ($56)|0);
         $58 = ((($57)) + 16|0);
         $59 = HEAP32[$58>>2]|0;
         $60 = $59 | 5;
         __THREW__ = 0;
         invoke_vii(40,($57|0),($60|0));
         $61 = __THREW__; __THREW__ = 0;
         $62 = $61&1;
         if (!($62)) {
          break L4;
         }
         $69 = ___cxa_find_matching_catch_3(0|0)|0;
         $70 = (getTempRet0() | 0);
         $$0 = $69;
         break L6;
        }
       } while(0);
       $$0 = $eh$lpad$body$indexZ2D;
      }
     } while(0);
     __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($3);
     $$1 = $$0;$$pre$phi20Z2D = $0;$$pre$phi22Z2D = $0;
     label = 20;
     break L1;
    }
   } while(0);
   __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($3);
  }
 } while(0);
 do {
  if ((label|0) == 20) {
   (___cxa_begin_catch(($$1|0))|0);
   $71 = HEAP32[$$pre$phi20Z2D>>2]|0;
   $72 = ((($71)) + -12|0);
   $73 = HEAP32[$72>>2]|0;
   $74 = (($$pre$phi22Z2D) + ($73)|0);
   __THREW__ = 0;
   invoke_vi(237,($74|0));
   $75 = __THREW__; __THREW__ = 0;
   $76 = $75&1;
   if (!($76)) {
    ___cxa_end_catch();
    break;
   }
   $77 = ___cxa_find_matching_catch_2()|0;
   $78 = (getTempRet0() | 0);
   __THREW__ = 0;
   invoke_v(2);
   $79 = __THREW__; __THREW__ = 0;
   $80 = $79&1;
   if ($80) {
    $81 = ___cxa_find_matching_catch_3(0|0)|0;
    $82 = (getTempRet0() | 0);
    ___clang_call_terminate($81);
    // unreachable;
   } else {
    ___resumeException($77|0);
    // unreachable;
   }
  }
 } while(0);
 STACKTOP = sp;return ($0|0);
}
function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$1 = 0, $$byval_copy = 0, $$pre$i = 0, $$pre$phi20Z2D = 0, $$pre$phi22Z2D = 0, $$pre$phiZ2D = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0;
 var $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 12|0;
 $2 = sp + 8|0;
 $3 = sp;
 __THREW__ = 0;
 invoke_vii(46,($3|0),($0|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 L1: do {
  if ($5) {
   $55 = ___cxa_find_matching_catch_3(0|0)|0;
   $56 = (getTempRet0() | 0);
   $$1 = $55;$$pre$phi20Z2D = $0;$$pre$phi22Z2D = $0;
   label = 20;
  } else {
   $6 = HEAP8[$3>>0]|0;
   $7 = ($6<<24>>24)==(0);
   L4: do {
    if (!($7)) {
     $8 = HEAP32[$0>>2]|0;
     $9 = ((($8)) + -12|0);
     $10 = HEAP32[$9>>2]|0;
     $11 = (($0) + ($10)|0);
     __ZNKSt3__28ios_base6getlocEv($$byval_copy,$11);
     __THREW__ = 0;
     $12 = (invoke_iii(37,($$byval_copy|0),(50796|0))|0);
     $13 = __THREW__; __THREW__ = 0;
     $14 = $13&1;
     L6: do {
      if ($14) {
       $57 = ___cxa_find_matching_catch_3(0|0)|0;
       $58 = (getTempRet0() | 0);
       __ZNSt3__26localeD2Ev($$byval_copy);
       $$0 = $57;
      } else {
       __ZNSt3__26localeD2Ev($$byval_copy);
       $15 = HEAP32[$0>>2]|0;
       $16 = ((($15)) + -12|0);
       $17 = HEAP32[$16>>2]|0;
       $18 = (($0) + ($17)|0);
       $19 = ((($18)) + 24|0);
       $20 = HEAP32[$19>>2]|0;
       $21 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
       $22 = ((($18)) + 76|0);
       $23 = HEAP32[$22>>2]|0;
       $24 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($21,$23)|0);
       do {
        if ($24) {
         __ZNKSt3__28ios_base6getlocEv($$byval_copy,$18);
         __THREW__ = 0;
         $25 = (invoke_iii(37,($$byval_copy|0),(50740|0))|0);
         $26 = __THREW__; __THREW__ = 0;
         $27 = $26&1;
         if (!($27)) {
          $28 = HEAP32[$25>>2]|0;
          $29 = ((($28)) + 28|0);
          $30 = HEAP32[$29>>2]|0;
          __THREW__ = 0;
          $31 = (invoke_iii($30|0,($25|0),32)|0);
          $32 = __THREW__; __THREW__ = 0;
          $33 = $32&1;
          if (!($33)) {
           __ZNSt3__26localeD2Ev($$byval_copy);
           $36 = $31 << 24 >> 24;
           HEAP32[$22>>2] = $36;
           $$pre$phiZ2D = $18;$38 = $36;
           label = 10;
           break;
          }
         }
         $34 = ___cxa_find_matching_catch_3(0|0)|0;
         $35 = (getTempRet0() | 0);
         __ZNSt3__26localeD2Ev($$byval_copy);
         $eh$lpad$body$indexZ2D = $34;
        } else {
         $$pre$i = HEAP32[$22>>2]|0;
         $$pre$phiZ2D = $18;$38 = $$pre$i;
         label = 10;
        }
       } while(0);
       do {
        if ((label|0) == 10) {
         $37 = $38&255;
         $39 = HEAP32[$12>>2]|0;
         $40 = ((($39)) + 16|0);
         $41 = HEAP32[$40>>2]|0;
         HEAP32[$2>>2] = $20;
         __THREW__ = 0;
         ;HEAP32[$$byval_copy>>2]=HEAP32[$2>>2]|0;
         $42 = (invoke_iiiiii($41|0,($12|0),($$byval_copy|0),($$pre$phiZ2D|0),($37|0),($1|0))|0);
         $43 = __THREW__; __THREW__ = 0;
         $44 = $43&1;
         if ($44) {
          $59 = ___cxa_find_matching_catch_3(0|0)|0;
          $60 = (getTempRet0() | 0);
          $eh$lpad$body$indexZ2D = $59;
          break;
         }
         $45 = ($42|0)==(0|0);
         if (!($45)) {
          break L4;
         }
         $46 = HEAP32[$0>>2]|0;
         $47 = ((($46)) + -12|0);
         $48 = HEAP32[$47>>2]|0;
         $49 = (($0) + ($48)|0);
         $50 = ((($49)) + 16|0);
         $51 = HEAP32[$50>>2]|0;
         $52 = $51 | 5;
         __THREW__ = 0;
         invoke_vii(40,($49|0),($52|0));
         $53 = __THREW__; __THREW__ = 0;
         $54 = $53&1;
         if (!($54)) {
          break L4;
         }
         $61 = ___cxa_find_matching_catch_3(0|0)|0;
         $62 = (getTempRet0() | 0);
         $$0 = $61;
         break L6;
        }
       } while(0);
       $$0 = $eh$lpad$body$indexZ2D;
      }
     } while(0);
     __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($3);
     $$1 = $$0;$$pre$phi20Z2D = $0;$$pre$phi22Z2D = $0;
     label = 20;
     break L1;
    }
   } while(0);
   __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($3);
  }
 } while(0);
 do {
  if ((label|0) == 20) {
   (___cxa_begin_catch(($$1|0))|0);
   $63 = HEAP32[$$pre$phi20Z2D>>2]|0;
   $64 = ((($63)) + -12|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = (($$pre$phi22Z2D) + ($65)|0);
   __THREW__ = 0;
   invoke_vi(237,($66|0));
   $67 = __THREW__; __THREW__ = 0;
   $68 = $67&1;
   if (!($68)) {
    ___cxa_end_catch();
    break;
   }
   $69 = ___cxa_find_matching_catch_2()|0;
   $70 = (getTempRet0() | 0);
   __THREW__ = 0;
   invoke_v(2);
   $71 = __THREW__; __THREW__ = 0;
   $72 = $71&1;
   if ($72) {
    $73 = ___cxa_find_matching_catch_3(0|0)|0;
    $74 = (getTempRet0() | 0);
    ___clang_call_terminate($73);
    // unreachable;
   } else {
    ___resumeException($69|0);
    // unreachable;
   }
  }
 } while(0);
 STACKTOP = sp;return ($0|0);
}
function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEm($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$1 = 0, $$byval_copy = 0, $$pre$i = 0, $$pre$phi13Z2D = 0, $$pre$phi15Z2D = 0, $$pre$phiZ2D = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0;
 var $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 12|0;
 $2 = sp + 8|0;
 $3 = sp;
 __THREW__ = 0;
 invoke_vii(46,($3|0),($0|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 L1: do {
  if ($5) {
   $55 = ___cxa_find_matching_catch_3(0|0)|0;
   $56 = (getTempRet0() | 0);
   $$1 = $55;$$pre$phi13Z2D = $0;$$pre$phi15Z2D = $0;
   label = 20;
  } else {
   $6 = HEAP8[$3>>0]|0;
   $7 = ($6<<24>>24)==(0);
   L4: do {
    if (!($7)) {
     $8 = HEAP32[$0>>2]|0;
     $9 = ((($8)) + -12|0);
     $10 = HEAP32[$9>>2]|0;
     $11 = (($0) + ($10)|0);
     __ZNKSt3__28ios_base6getlocEv($$byval_copy,$11);
     __THREW__ = 0;
     $12 = (invoke_iii(37,($$byval_copy|0),(50796|0))|0);
     $13 = __THREW__; __THREW__ = 0;
     $14 = $13&1;
     L6: do {
      if ($14) {
       $57 = ___cxa_find_matching_catch_3(0|0)|0;
       $58 = (getTempRet0() | 0);
       __ZNSt3__26localeD2Ev($$byval_copy);
       $$0 = $57;
      } else {
       __ZNSt3__26localeD2Ev($$byval_copy);
       $15 = HEAP32[$0>>2]|0;
       $16 = ((($15)) + -12|0);
       $17 = HEAP32[$16>>2]|0;
       $18 = (($0) + ($17)|0);
       $19 = ((($18)) + 24|0);
       $20 = HEAP32[$19>>2]|0;
       $21 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
       $22 = ((($18)) + 76|0);
       $23 = HEAP32[$22>>2]|0;
       $24 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($21,$23)|0);
       do {
        if ($24) {
         __ZNKSt3__28ios_base6getlocEv($$byval_copy,$18);
         __THREW__ = 0;
         $25 = (invoke_iii(37,($$byval_copy|0),(50740|0))|0);
         $26 = __THREW__; __THREW__ = 0;
         $27 = $26&1;
         if (!($27)) {
          $28 = HEAP32[$25>>2]|0;
          $29 = ((($28)) + 28|0);
          $30 = HEAP32[$29>>2]|0;
          __THREW__ = 0;
          $31 = (invoke_iii($30|0,($25|0),32)|0);
          $32 = __THREW__; __THREW__ = 0;
          $33 = $32&1;
          if (!($33)) {
           __ZNSt3__26localeD2Ev($$byval_copy);
           $36 = $31 << 24 >> 24;
           HEAP32[$22>>2] = $36;
           $$pre$phiZ2D = $18;$38 = $36;
           label = 10;
           break;
          }
         }
         $34 = ___cxa_find_matching_catch_3(0|0)|0;
         $35 = (getTempRet0() | 0);
         __ZNSt3__26localeD2Ev($$byval_copy);
         $eh$lpad$body$indexZ2D = $34;
        } else {
         $$pre$i = HEAP32[$22>>2]|0;
         $$pre$phiZ2D = $18;$38 = $$pre$i;
         label = 10;
        }
       } while(0);
       do {
        if ((label|0) == 10) {
         $37 = $38&255;
         $39 = HEAP32[$12>>2]|0;
         $40 = ((($39)) + 24|0);
         $41 = HEAP32[$40>>2]|0;
         HEAP32[$2>>2] = $20;
         __THREW__ = 0;
         ;HEAP32[$$byval_copy>>2]=HEAP32[$2>>2]|0;
         $42 = (invoke_iiiiii($41|0,($12|0),($$byval_copy|0),($$pre$phiZ2D|0),($37|0),($1|0))|0);
         $43 = __THREW__; __THREW__ = 0;
         $44 = $43&1;
         if ($44) {
          $59 = ___cxa_find_matching_catch_3(0|0)|0;
          $60 = (getTempRet0() | 0);
          $eh$lpad$body$indexZ2D = $59;
          break;
         }
         $45 = ($42|0)==(0|0);
         if (!($45)) {
          break L4;
         }
         $46 = HEAP32[$0>>2]|0;
         $47 = ((($46)) + -12|0);
         $48 = HEAP32[$47>>2]|0;
         $49 = (($0) + ($48)|0);
         $50 = ((($49)) + 16|0);
         $51 = HEAP32[$50>>2]|0;
         $52 = $51 | 5;
         __THREW__ = 0;
         invoke_vii(40,($49|0),($52|0));
         $53 = __THREW__; __THREW__ = 0;
         $54 = $53&1;
         if (!($54)) {
          break L4;
         }
         $61 = ___cxa_find_matching_catch_3(0|0)|0;
         $62 = (getTempRet0() | 0);
         $$0 = $61;
         break L6;
        }
       } while(0);
       $$0 = $eh$lpad$body$indexZ2D;
      }
     } while(0);
     __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($3);
     $$1 = $$0;$$pre$phi13Z2D = $0;$$pre$phi15Z2D = $0;
     label = 20;
     break L1;
    }
   } while(0);
   __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($3);
  }
 } while(0);
 do {
  if ((label|0) == 20) {
   (___cxa_begin_catch(($$1|0))|0);
   $63 = HEAP32[$$pre$phi13Z2D>>2]|0;
   $64 = ((($63)) + -12|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = (($$pre$phi15Z2D) + ($65)|0);
   __THREW__ = 0;
   invoke_vi(237,($66|0));
   $67 = __THREW__; __THREW__ = 0;
   $68 = $67&1;
   if (!($68)) {
    ___cxa_end_catch();
    break;
   }
   $69 = ___cxa_find_matching_catch_2()|0;
   $70 = (getTempRet0() | 0);
   __THREW__ = 0;
   invoke_v(2);
   $71 = __THREW__; __THREW__ = 0;
   $72 = $71&1;
   if ($72) {
    $73 = ___cxa_find_matching_catch_3(0|0)|0;
    $74 = (getTempRet0() | 0);
    ___clang_call_terminate($73);
    // unreachable;
   } else {
    ___resumeException($69|0);
    // unreachable;
   }
  }
 } while(0);
 STACKTOP = sp;return ($0|0);
}
function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE3putEc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$0$i$i = 0, $$pre$phi9Z2D = 0, $$pre$phiZ2D = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 __THREW__ = 0;
 invoke_vii(46,($2|0),($0|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 L1: do {
  if ($4) {
   $41 = ___cxa_find_matching_catch_3(0|0)|0;
   $42 = (getTempRet0() | 0);
   $$0 = $41;$$pre$phi9Z2D = $0;$$pre$phiZ2D = $0;
   label = 12;
  } else {
   $5 = HEAP8[$2>>0]|0;
   $6 = ($5<<24>>24)==(0);
   L4: do {
    if (!($6)) {
     $7 = HEAP32[$0>>2]|0;
     $8 = ((($7)) + -12|0);
     $9 = HEAP32[$8>>2]|0;
     $10 = (($0) + ($9)|0);
     $11 = ((($10)) + 24|0);
     $12 = HEAP32[$11>>2]|0;
     $13 = $12;
     $14 = ($12|0)==(0);
     do {
      if ($14) {
       label = 8;
      } else {
       $15 = ((($13)) + 24|0);
       $16 = HEAP32[$15>>2]|0;
       $17 = ((($13)) + 28|0);
       $18 = HEAP32[$17>>2]|0;
       $19 = ($16|0)==($18|0);
       if ($19) {
        $20 = $12;
        $21 = HEAP32[$20>>2]|0;
        $22 = ((($21)) + 52|0);
        $23 = HEAP32[$22>>2]|0;
        $24 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($1)|0);
        __THREW__ = 0;
        $25 = (invoke_iii($23|0,($13|0),($24|0))|0);
        $26 = __THREW__; __THREW__ = 0;
        $27 = $26&1;
        if ($27) {
         break;
        } else {
         $$0$i$i = $25;
        }
       } else {
        $28 = ((($16)) + 1|0);
        HEAP32[$15>>2] = $28;
        HEAP8[$16>>0] = $1;
        $29 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($1)|0);
        $$0$i$i = $29;
       }
       $30 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
       $31 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i,$30)|0);
       if ($31) {
        label = 8;
       } else {
        break L4;
       }
      }
     } while(0);
     if ((label|0) == 8) {
      $32 = HEAP32[$0>>2]|0;
      $33 = ((($32)) + -12|0);
      $34 = HEAP32[$33>>2]|0;
      $35 = (($0) + ($34)|0);
      $36 = ((($35)) + 16|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = $37 | 1;
      __THREW__ = 0;
      invoke_vii(40,($35|0),($38|0));
      $39 = __THREW__; __THREW__ = 0;
      $40 = $39&1;
      if (!($40)) {
       break;
      }
     }
     $43 = ___cxa_find_matching_catch_3(0|0)|0;
     $44 = (getTempRet0() | 0);
     __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($2);
     $$0 = $43;$$pre$phi9Z2D = $0;$$pre$phiZ2D = $0;
     label = 12;
     break L1;
    }
   } while(0);
   __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($2);
  }
 } while(0);
 do {
  if ((label|0) == 12) {
   (___cxa_begin_catch(($$0|0))|0);
   $45 = HEAP32[$$pre$phiZ2D>>2]|0;
   $46 = ((($45)) + -12|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = (($$pre$phi9Z2D) + ($47)|0);
   __THREW__ = 0;
   invoke_vi(237,($48|0));
   $49 = __THREW__; __THREW__ = 0;
   $50 = $49&1;
   if (!($50)) {
    ___cxa_end_catch();
    break;
   }
   $51 = ___cxa_find_matching_catch_2()|0;
   $52 = (getTempRet0() | 0);
   __THREW__ = 0;
   invoke_v(2);
   $53 = __THREW__; __THREW__ = 0;
   $54 = $53&1;
   if ($54) {
    $55 = ___cxa_find_matching_catch_3(0|0)|0;
    $56 = (getTempRet0() | 0);
    ___clang_call_terminate($55);
    // unreachable;
   } else {
    ___resumeException($51|0);
    // unreachable;
   }
  }
 } while(0);
 STACKTOP = sp;return ($0|0);
}
function __GLOBAL__I_000101() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___cxx_global_var_init_319();
 return;
}
function __GLOBAL__sub_I_iostream_cpp() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function ___cxx_global_var_init_319() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__28ios_base4InitC2Ev(0);
 return;
}
function __ZNSt3__28ios_base4InitC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[6671]|0;
 __ZNSt3__210__stdinbufIcEC2EP8_IO_FILEP11__mbstate_t(50372,$1,50428);
 HEAP32[12423] = (27488);
 HEAP32[(49700)>>2] = (27508);
 HEAP32[(49696)>>2] = 0;
 __ZNSt3__28ios_base4initEPv((49700),50372);
 HEAP32[(49772)>>2] = 0;
 $2 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
 HEAP32[(49776)>>2] = $2;
 __ZNSt3__210__stdinbufIwEC2EP8_IO_FILEP11__mbstate_t(50436,$1,50492);
 HEAP32[12445] = (27536);
 HEAP32[(49788)>>2] = (27556);
 HEAP32[(49784)>>2] = 0;
 __ZNSt3__28ios_base4initEPv((49788),50436);
 HEAP32[(49860)>>2] = 0;
 $3 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
 HEAP32[(49864)>>2] = $3;
 $4 = HEAP32[6703]|0;
 __ZNSt3__211__stdoutbufIcEC2EP8_IO_FILEP11__mbstate_t(50500,$4,50548);
 HEAP32[12467] = (27584);
 HEAP32[(49872)>>2] = (27604);
 __ZNSt3__28ios_base4initEPv((49872),50500);
 HEAP32[(49944)>>2] = 0;
 $5 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
 HEAP32[(49948)>>2] = $5;
 __ZNSt3__211__stdoutbufIwEC2EP8_IO_FILEP11__mbstate_t(50556,$4,50604);
 HEAP32[12488] = (27632);
 HEAP32[(49956)>>2] = (27652);
 __ZNSt3__28ios_base4initEPv((49956),50556);
 HEAP32[(50028)>>2] = 0;
 $6 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
 HEAP32[(50032)>>2] = $6;
 $7 = HEAP32[6639]|0;
 __ZNSt3__211__stdoutbufIcEC2EP8_IO_FILEP11__mbstate_t(50612,$7,50660);
 HEAP32[12509] = (27584);
 HEAP32[(50040)>>2] = (27604);
 __ZNSt3__28ios_base4initEPv((50040),50612);
 HEAP32[(50112)>>2] = 0;
 $8 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
 HEAP32[(50116)>>2] = $8;
 $9 = HEAP32[12509]|0;
 $10 = ((($9)) + -12|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (50036 + ($11)|0);
 $13 = ((($12)) + 24|0);
 $14 = HEAP32[$13>>2]|0;
 HEAP32[12551] = (27584);
 HEAP32[(50208)>>2] = (27604);
 __ZNSt3__28ios_base4initEPv((50208),$14);
 HEAP32[(50280)>>2] = 0;
 $15 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
 HEAP32[(50284)>>2] = $15;
 __ZNSt3__211__stdoutbufIwEC2EP8_IO_FILEP11__mbstate_t(50668,$7,50716);
 HEAP32[12530] = (27632);
 HEAP32[(50124)>>2] = (27652);
 __ZNSt3__28ios_base4initEPv((50124),50668);
 HEAP32[(50196)>>2] = 0;
 $16 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
 HEAP32[(50200)>>2] = $16;
 $17 = HEAP32[12530]|0;
 $18 = ((($17)) + -12|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (50120 + ($19)|0);
 $21 = ((($20)) + 24|0);
 $22 = HEAP32[$21>>2]|0;
 HEAP32[12572] = (27632);
 HEAP32[(50292)>>2] = (27652);
 __ZNSt3__28ios_base4initEPv((50292),$22);
 HEAP32[(50364)>>2] = 0;
 $23 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
 HEAP32[(50368)>>2] = $23;
 $24 = HEAP32[12423]|0;
 $25 = ((($24)) + -12|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (49692 + ($26)|0);
 $28 = ((($27)) + 72|0);
 HEAP32[$28>>2] = 49868;
 $29 = HEAP32[12445]|0;
 $30 = ((($29)) + -12|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = (49780 + ($31)|0);
 $33 = ((($32)) + 72|0);
 HEAP32[$33>>2] = 49952;
 $34 = HEAP32[12509]|0;
 $35 = ((($34)) + -12|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = (50036 + ($36)|0);
 $38 = ((($37)) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $39 | 8192;
 HEAP32[$38>>2] = $40;
 $41 = HEAP32[12530]|0;
 $42 = ((($41)) + -12|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = (50120 + ($43)|0);
 $45 = ((($44)) + 4|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = $46 | 8192;
 HEAP32[$45>>2] = $47;
 $48 = HEAP32[$35>>2]|0;
 $49 = (50036 + ($48)|0);
 $50 = ((($49)) + 72|0);
 HEAP32[$50>>2] = 49868;
 $51 = HEAP32[$42>>2]|0;
 $52 = (50120 + ($51)|0);
 $53 = ((($52)) + 72|0);
 HEAP32[$53>>2] = 49952;
 return;
}
function __ZNSt3__210__stdinbufIcEC2EP8_IO_FILEP11__mbstate_t($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEEC2Ev($0);
 HEAP32[$0>>2] = (27928);
 $4 = ((($0)) + 32|0);
 HEAP32[$4>>2] = $1;
 $5 = ((($0)) + 40|0);
 HEAP32[$5>>2] = $2;
 $6 = ((($0)) + 48|0);
 $7 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
 HEAP32[$6>>2] = $7;
 $8 = ((($0)) + 52|0);
 HEAP8[$8>>0] = 0;
 $9 = HEAP32[$0>>2]|0;
 $10 = ((($9)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($0)) + 4|0);
 __ZNSt3__26localeC2ERKS0_($3,$12);
 __THREW__ = 0;
 invoke_vii($11|0,($0|0),($3|0));
 $13 = __THREW__; __THREW__ = 0;
 $14 = $13&1;
 if ($14) {
  $15 = ___cxa_find_matching_catch_2()|0;
  $16 = (getTempRet0() | 0);
  __ZNSt3__26localeD2Ev($3);
  __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($0);
  ___resumeException($15|0);
  // unreachable;
 } else {
  __ZNSt3__26localeD2Ev($3);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__210__stdinbufIwEC2EP8_IO_FILEP11__mbstate_t($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEEC2Ev($0);
 HEAP32[$0>>2] = (27864);
 $4 = ((($0)) + 32|0);
 HEAP32[$4>>2] = $1;
 $5 = ((($0)) + 40|0);
 HEAP32[$5>>2] = $2;
 $6 = ((($0)) + 48|0);
 $7 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
 HEAP32[$6>>2] = $7;
 $8 = ((($0)) + 52|0);
 HEAP8[$8>>0] = 0;
 $9 = HEAP32[$0>>2]|0;
 $10 = ((($9)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($0)) + 4|0);
 __ZNSt3__26localeC2ERKS0_($3,$12);
 __THREW__ = 0;
 invoke_vii($11|0,($0|0),($3|0));
 $13 = __THREW__; __THREW__ = 0;
 $14 = $13&1;
 if ($14) {
  $15 = ___cxa_find_matching_catch_2()|0;
  $16 = (getTempRet0() | 0);
  __ZNSt3__26localeD2Ev($3);
  __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED2Ev($0);
  ___resumeException($15|0);
  // unreachable;
 } else {
  __ZNSt3__26localeD2Ev($3);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__211__stdoutbufIcEC2EP8_IO_FILEP11__mbstate_t($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEEC2Ev($0);
 HEAP32[$0>>2] = (27800);
 $4 = ((($0)) + 32|0);
 HEAP32[$4>>2] = $1;
 $5 = ((($0)) + 4|0);
 __ZNSt3__26localeC2ERKS0_($3,$5);
 __THREW__ = 0;
 $6 = (invoke_iii(37,($3|0),(51044|0))|0);
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $17 = ___cxa_find_matching_catch_2()|0;
  $18 = (getTempRet0() | 0);
  __ZNSt3__26localeD2Ev($3);
  __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($0);
  ___resumeException($17|0);
  // unreachable;
 } else {
  $9 = ((($0)) + 36|0);
  __ZNSt3__26localeD2Ev($3);
  HEAP32[$9>>2] = $6;
  $10 = ((($0)) + 40|0);
  HEAP32[$10>>2] = $2;
  $11 = ((($0)) + 44|0);
  $12 = HEAP32[$6>>2]|0;
  $13 = ((($12)) + 28|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (FUNCTION_TABLE_ii[$14 & 255]($6)|0);
  $16 = $15&1;
  HEAP8[$11>>0] = $16;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__211__stdoutbufIwEC2EP8_IO_FILEP11__mbstate_t($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEEC2Ev($0);
 HEAP32[$0>>2] = (27736);
 $4 = ((($0)) + 32|0);
 HEAP32[$4>>2] = $1;
 $5 = ((($0)) + 4|0);
 __ZNSt3__26localeC2ERKS0_($3,$5);
 __THREW__ = 0;
 $6 = (invoke_iii(37,($3|0),(51052|0))|0);
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $17 = ___cxa_find_matching_catch_2()|0;
  $18 = (getTempRet0() | 0);
  __ZNSt3__26localeD2Ev($3);
  __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED2Ev($0);
  ___resumeException($17|0);
  // unreachable;
 } else {
  $9 = ((($0)) + 36|0);
  __ZNSt3__26localeD2Ev($3);
  HEAP32[$9>>2] = $6;
  $10 = ((($0)) + 40|0);
  HEAP32[$10>>2] = $2;
  $11 = ((($0)) + 44|0);
  $12 = HEAP32[$6>>2]|0;
  $13 = ((($12)) + 28|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (FUNCTION_TABLE_ii[$14 & 255]($6)|0);
  $16 = $15&1;
  HEAP8[$11>>0] = $16;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__211__stdoutbufIwED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__211__stdoutbufIwE5imbueERKNS_6localeE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($2)) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 (FUNCTION_TABLE_ii[$4 & 255]($0)|0);
 $5 = (__ZNKSt3__26locale9use_facetERNS0_2idE($1,51052)|0);
 $6 = ((($0)) + 36|0);
 HEAP32[$6>>2] = $5;
 $7 = HEAP32[$5>>2]|0;
 $8 = ((($7)) + 28|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (FUNCTION_TABLE_ii[$9 & 255]($5)|0);
 $11 = ((($0)) + 44|0);
 $12 = $10&1;
 HEAP8[$11>>0] = $12;
 return;
}
function __ZNSt3__211__stdoutbufIwE4syncEv($0) {
 $0 = $0|0;
 var $$10 = 0, $$2 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 8|0;
 $2 = sp;
 $3 = ((($0)) + 36|0);
 $4 = ((($0)) + 40|0);
 $5 = ((($1)) + 8|0);
 $6 = $1;
 $7 = ((($0)) + 32|0);
 L1: while(1) {
  $8 = HEAP32[$3>>2]|0;
  $9 = HEAP32[$4>>2]|0;
  $10 = HEAP32[$8>>2]|0;
  $11 = ((($10)) + 20|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (FUNCTION_TABLE_iiiiii[$12 & 31]($8,$9,$1,$5,$2)|0);
  $14 = HEAP32[$2>>2]|0;
  $15 = (($14) - ($6))|0;
  $16 = HEAP32[$7>>2]|0;
  $17 = (_fwrite($1,1,$15,$16)|0);
  $18 = ($17|0)==($15|0);
  if (!($18)) {
   $$2 = -1;
   break;
  }
  switch ($13|0) {
  case 1:  {
   break;
  }
  case 2:  {
   $$2 = -1;
   break L1;
   break;
  }
  default: {
   label = 4;
   break L1;
  }
  }
 }
 if ((label|0) == 4) {
  $19 = HEAP32[$7>>2]|0;
  $20 = (_fflush($19)|0);
  $21 = ($20|0)!=(0);
  $$10 = $21 << 31 >> 31;
  $$2 = $$10;
 }
 STACKTOP = sp;return ($$2|0);
}
function __ZNSt3__211__stdoutbufIwE6xsputnEPKwl($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$010 = 0, $$011 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 44|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)==(0);
 L1: do {
  if ($5) {
   $$0 = 0;$$011 = $1;
   while(1) {
    $9 = ($$0|0)<($2|0);
    if (!($9)) {
     $$010 = $$0;
     break L1;
    }
    $10 = HEAP32[$0>>2]|0;
    $11 = ((($10)) + 52|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = HEAP32[$$011>>2]|0;
    $14 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($13)|0);
    $15 = (FUNCTION_TABLE_iii[$12 & 127]($0,$14)|0);
    $16 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
    $17 = ($15|0)==($16|0);
    if ($17) {
     $$010 = $$0;
     break L1;
    }
    $18 = (($$0) + 1)|0;
    $19 = ((($$011)) + 4|0);
    $$0 = $18;$$011 = $19;
   }
  } else {
   $6 = ((($0)) + 32|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = (_fwrite($1,4,$2,$7)|0);
   $$010 = $8;
  }
 } while(0);
 return ($$010|0);
}
function __ZNSt3__211__stdoutbufIwE8overflowEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$032 = 0, $$4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp + 16|0;
 $3 = sp + 8|0;
 $4 = sp + 4|0;
 $5 = sp;
 $6 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
 $7 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($1,$6)|0);
 do {
  if ($7) {
   label = 15;
  } else {
   $8 = (__ZNSt3__211char_traitsIwE12to_char_typeEj($1)|0);
   HEAP32[$3>>2] = $8;
   $9 = ((($0)) + 44|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = ($10<<24>>24)==(0);
   if (!($11)) {
    $12 = ((($0)) + 32|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = (_fwrite($3,4,1,$13)|0);
    $15 = ($14|0)==(1);
    if ($15) {
     label = 15;
     break;
    }
    $16 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
    $$4 = $16;
    break;
   }
   HEAP32[$4>>2] = $2;
   $17 = ((($3)) + 4|0);
   $18 = ((($0)) + 36|0);
   $19 = ((($0)) + 40|0);
   $20 = ((($2)) + 8|0);
   $21 = $2;
   $22 = ((($0)) + 32|0);
   $$032 = $3;
   while(1) {
    $23 = HEAP32[$18>>2]|0;
    $24 = HEAP32[$19>>2]|0;
    $25 = HEAP32[$23>>2]|0;
    $26 = ((($25)) + 12|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = (FUNCTION_TABLE_iiiiiiiii[$27 & 15]($23,$24,$$032,$17,$5,$2,$20,$4)|0);
    $29 = HEAP32[$5>>2]|0;
    $30 = ($29|0)==($$032|0);
    if ($30) {
     label = 14;
     break;
    }
    $31 = ($28|0)==(3);
    if ($31) {
     label = 8;
     break;
    }
    $35 = ($28|0)==(1);
    $36 = ($28>>>0)<(2);
    if (!($36)) {
     label = 14;
     break;
    }
    $37 = HEAP32[$4>>2]|0;
    $38 = (($37) - ($21))|0;
    $39 = HEAP32[$22>>2]|0;
    $40 = (_fwrite($2,1,$38,$39)|0);
    $41 = ($40|0)==($38|0);
    if (!($41)) {
     label = 14;
     break;
    }
    $42 = HEAP32[$5>>2]|0;
    if ($35) {
     $$032 = $42;
    } else {
     label = 13;
     break;
    }
   }
   if ((label|0) == 8) {
    $32 = HEAP32[$22>>2]|0;
    $33 = (_fwrite($$032,1,1,$32)|0);
    $34 = ($33|0)==(1);
    if ($34) {
     label = 13;
    } else {
     label = 14;
    }
   }
   if ((label|0) == 13) {
    label = 15;
    break;
   }
   else if ((label|0) == 14) {
    $43 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
    $$4 = $43;
    break;
   }
  }
 } while(0);
 if ((label|0) == 15) {
  $44 = (__ZNSt3__211char_traitsIwE7not_eofEj($1)|0);
  $$4 = $44;
 }
 STACKTOP = sp;return ($$4|0);
}
function __ZNSt3__211char_traitsIwE7not_eofEj($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
 $2 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($0,$1)|0);
 if ($2) {
  $3 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
  $4 = $3 ^ -1;
  $5 = $4;
 } else {
  $5 = $0;
 }
 return ($5|0);
}
function __ZNSt3__211__stdoutbufIcED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__211__stdoutbufIcE5imbueERKNS_6localeE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($2)) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 (FUNCTION_TABLE_ii[$4 & 255]($0)|0);
 $5 = (__ZNKSt3__26locale9use_facetERNS0_2idE($1,51044)|0);
 $6 = ((($0)) + 36|0);
 HEAP32[$6>>2] = $5;
 $7 = HEAP32[$5>>2]|0;
 $8 = ((($7)) + 28|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (FUNCTION_TABLE_ii[$9 & 255]($5)|0);
 $11 = ((($0)) + 44|0);
 $12 = $10&1;
 HEAP8[$11>>0] = $12;
 return;
}
function __ZNSt3__211__stdoutbufIcE4syncEv($0) {
 $0 = $0|0;
 var $$10 = 0, $$2 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 8|0;
 $2 = sp;
 $3 = ((($0)) + 36|0);
 $4 = ((($0)) + 40|0);
 $5 = ((($1)) + 8|0);
 $6 = $1;
 $7 = ((($0)) + 32|0);
 L1: while(1) {
  $8 = HEAP32[$3>>2]|0;
  $9 = HEAP32[$4>>2]|0;
  $10 = HEAP32[$8>>2]|0;
  $11 = ((($10)) + 20|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (FUNCTION_TABLE_iiiiii[$12 & 31]($8,$9,$1,$5,$2)|0);
  $14 = HEAP32[$2>>2]|0;
  $15 = (($14) - ($6))|0;
  $16 = HEAP32[$7>>2]|0;
  $17 = (_fwrite($1,1,$15,$16)|0);
  $18 = ($17|0)==($15|0);
  if (!($18)) {
   $$2 = -1;
   break;
  }
  switch ($13|0) {
  case 1:  {
   break;
  }
  case 2:  {
   $$2 = -1;
   break L1;
   break;
  }
  default: {
   label = 4;
   break L1;
  }
  }
 }
 if ((label|0) == 4) {
  $19 = HEAP32[$7>>2]|0;
  $20 = (_fflush($19)|0);
  $21 = ($20|0)!=(0);
  $$10 = $21 << 31 >> 31;
  $$2 = $$10;
 }
 STACKTOP = sp;return ($$2|0);
}
function __ZNSt3__211__stdoutbufIcE6xsputnEPKcl($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$010 = 0, $$011 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 44|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)==(0);
 L1: do {
  if ($5) {
   $$0 = 0;$$011 = $1;
   while(1) {
    $9 = ($$0|0)<($2|0);
    if (!($9)) {
     $$010 = $$0;
     break L1;
    }
    $10 = HEAP32[$0>>2]|0;
    $11 = ((($10)) + 52|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = HEAP8[$$011>>0]|0;
    $14 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($13)|0);
    $15 = (FUNCTION_TABLE_iii[$12 & 127]($0,$14)|0);
    $16 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
    $17 = ($15|0)==($16|0);
    if ($17) {
     $$010 = $$0;
     break L1;
    }
    $18 = (($$0) + 1)|0;
    $19 = ((($$011)) + 1|0);
    $$0 = $18;$$011 = $19;
   }
  } else {
   $6 = ((($0)) + 32|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = (_fwrite($1,1,$2,$7)|0);
   $$010 = $8;
  }
 } while(0);
 return ($$010|0);
}
function __ZNSt3__211__stdoutbufIcE8overflowEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$032 = 0, $$4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp + 16|0;
 $3 = sp + 8|0;
 $4 = sp + 4|0;
 $5 = sp;
 $6 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
 $7 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($1,$6)|0);
 do {
  if ($7) {
   label = 15;
  } else {
   $8 = (__ZNSt3__211char_traitsIcE12to_char_typeEi($1)|0);
   HEAP8[$3>>0] = $8;
   $9 = ((($0)) + 44|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = ($10<<24>>24)==(0);
   if (!($11)) {
    $12 = ((($0)) + 32|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = (_fwrite($3,1,1,$13)|0);
    $15 = ($14|0)==(1);
    if ($15) {
     label = 15;
     break;
    }
    $16 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
    $$4 = $16;
    break;
   }
   HEAP32[$4>>2] = $2;
   $17 = ((($3)) + 1|0);
   $18 = ((($0)) + 36|0);
   $19 = ((($0)) + 40|0);
   $20 = ((($2)) + 8|0);
   $21 = $2;
   $22 = ((($0)) + 32|0);
   $$032 = $3;
   while(1) {
    $23 = HEAP32[$18>>2]|0;
    $24 = HEAP32[$19>>2]|0;
    $25 = HEAP32[$23>>2]|0;
    $26 = ((($25)) + 12|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = (FUNCTION_TABLE_iiiiiiiii[$27 & 15]($23,$24,$$032,$17,$5,$2,$20,$4)|0);
    $29 = HEAP32[$5>>2]|0;
    $30 = ($29|0)==($$032|0);
    if ($30) {
     label = 14;
     break;
    }
    $31 = ($28|0)==(3);
    if ($31) {
     label = 8;
     break;
    }
    $35 = ($28|0)==(1);
    $36 = ($28>>>0)<(2);
    if (!($36)) {
     label = 14;
     break;
    }
    $37 = HEAP32[$4>>2]|0;
    $38 = (($37) - ($21))|0;
    $39 = HEAP32[$22>>2]|0;
    $40 = (_fwrite($2,1,$38,$39)|0);
    $41 = ($40|0)==($38|0);
    if (!($41)) {
     label = 14;
     break;
    }
    $42 = HEAP32[$5>>2]|0;
    if ($35) {
     $$032 = $42;
    } else {
     label = 13;
     break;
    }
   }
   if ((label|0) == 8) {
    $32 = HEAP32[$22>>2]|0;
    $33 = (_fwrite($$032,1,1,$32)|0);
    $34 = ($33|0)==(1);
    if ($34) {
     label = 13;
    } else {
     label = 14;
    }
   }
   if ((label|0) == 13) {
    label = 15;
    break;
   }
   else if ((label|0) == 14) {
    $43 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
    $$4 = $43;
    break;
   }
  }
 } while(0);
 if ((label|0) == 15) {
  $44 = (__ZNSt3__211char_traitsIcE7not_eofEi($1)|0);
  $$4 = $44;
 }
 STACKTOP = sp;return ($$4|0);
}
function __ZNSt3__210__stdinbufIwED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__210__stdinbufIwE5imbueERKNS_6localeE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNKSt3__26locale9use_facetERNS0_2idE($1,51052)|0);
 $3 = ((($0)) + 36|0);
 HEAP32[$3>>2] = $2;
 $4 = HEAP32[$2>>2]|0;
 $5 = ((($4)) + 24|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (FUNCTION_TABLE_ii[$6 & 255]($2)|0);
 $8 = ((($0)) + 44|0);
 HEAP32[$8>>2] = $7;
 $9 = HEAP32[$3>>2]|0;
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 28|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (FUNCTION_TABLE_ii[$12 & 255]($9)|0);
 $14 = ((($0)) + 53|0);
 $15 = $13&1;
 HEAP8[$14>>0] = $15;
 $16 = HEAP32[$8>>2]|0;
 $17 = ($16|0)>(8);
 if ($17) {
  __ZNSt3__221__throw_runtime_errorEPKc(41477);
  // unreachable;
 } else {
  return;
 }
}
function __ZNSt3__210__stdinbufIwE9underflowEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZNSt3__210__stdinbufIwE9__getcharEb($0,0)|0);
 return ($1|0);
}
function __ZNSt3__210__stdinbufIwE5uflowEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZNSt3__210__stdinbufIwE9__getcharEb($0,1)|0);
 return ($1|0);
}
function __ZNSt3__210__stdinbufIwE9pbackfailEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$07 = 0, $$1 = 0, $$pre = 0, $$pre$phiZ2D = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp + 16|0;
 $3 = sp + 8|0;
 $4 = sp + 4|0;
 $5 = sp;
 $6 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
 $7 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($1,$6)|0);
 $8 = ((($0)) + 52|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = ($9<<24>>24)!=(0);
 do {
  if ($7) {
   if ($10) {
    $$1 = $1;
   } else {
    $11 = ((($0)) + 48|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
    $14 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($12,$13)|0);
    $15 = $14 ^ 1;
    $16 = $15&1;
    HEAP8[$8>>0] = $16;
    $$1 = $12;
   }
  } else {
   if ($10) {
    $17 = ((($0)) + 48|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = (__ZNSt3__211char_traitsIwE12to_char_typeEj($18)|0);
    HEAP32[$4>>2] = $19;
    $20 = ((($0)) + 36|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = ((($0)) + 40|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = ((($4)) + 4|0);
    $25 = ((($2)) + 8|0);
    $26 = HEAP32[$21>>2]|0;
    $27 = ((($26)) + 12|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = (FUNCTION_TABLE_iiiiiiiii[$28 & 15]($21,$23,$4,$24,$5,$2,$25,$3)|0);
    switch ($29|0) {
    case 1: case 2:  {
     label = 11;
     break;
    }
    case 3:  {
     $30 = HEAP32[$17>>2]|0;
     $31 = $30&255;
     HEAP8[$2>>0] = $31;
     $32 = ((($2)) + 1|0);
     HEAP32[$3>>2] = $32;
     label = 8;
     break;
    }
    default: {
     label = 8;
    }
    }
    L9: do {
     if ((label|0) == 8) {
      $33 = ((($0)) + 32|0);
      while(1) {
       $34 = HEAP32[$3>>2]|0;
       $35 = ($34>>>0)>($2>>>0);
       if (!($35)) {
        $$0 = 1;$$07 = 0;
        break L9;
       }
       $36 = ((($34)) + -1|0);
       HEAP32[$3>>2] = $36;
       $37 = HEAP8[$36>>0]|0;
       $38 = $37 << 24 >> 24;
       $39 = HEAP32[$33>>2]|0;
       $40 = (_ungetc($38,$39)|0);
       $41 = ($40|0)==(-1);
       if ($41) {
        label = 11;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 11) {
     $42 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
     $$0 = 0;$$07 = $42;
    }
    if ($$0) {
     $$pre$phiZ2D = $17;
    } else {
     $$1 = $$07;
     break;
    }
   } else {
    $$pre = ((($0)) + 48|0);
    $$pre$phiZ2D = $$pre;
   }
   HEAP32[$$pre$phiZ2D>>2] = $1;
   HEAP8[$8>>0] = 1;
   $$1 = $1;
  }
 } while(0);
 STACKTOP = sp;return ($$1|0);
}
function __ZNSt3__210__stdinbufIwE9__getcharEb($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$048 = 0, $$052 = 0, $$10 = 0, $$11 = 0, $$351 = 0, $$9 = 0, $$sroa$speculated = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp + 16|0;
 $3 = sp + 8|0;
 $4 = sp + 4|0;
 $5 = sp;
 $6 = ((($0)) + 52|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = ($7<<24>>24)==(0);
 if ($8) {
  $12 = ((($0)) + 44|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)>(1);
  $$sroa$speculated = $14 ? $13 : 1;
  $15 = ((($0)) + 32|0);
  $$052 = 0;
  while(1) {
   $16 = ($$052>>>0)<($$sroa$speculated>>>0);
   if (!($16)) {
    label = 9;
    break;
   }
   $17 = HEAP32[$15>>2]|0;
   $18 = (_getc($17)|0);
   $19 = ($18|0)==(-1);
   if ($19) {
    label = 8;
    break;
   }
   $20 = $18&255;
   $21 = (($2) + ($$052)|0);
   HEAP8[$21>>0] = $20;
   $22 = (($$052) + 1)|0;
   $$052 = $22;
  }
  if ((label|0) == 8) {
   $23 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $$10 = $23;
  }
  else if ((label|0) == 9) {
   $24 = ((($0)) + 53|0);
   $25 = HEAP8[$24>>0]|0;
   $26 = ($25<<24>>24)==(0);
   do {
    if ($26) {
     $29 = ((($0)) + 40|0);
     $30 = ((($0)) + 36|0);
     $31 = ((($3)) + 4|0);
     $$048 = $$sroa$speculated;
     L11: while(1) {
      $32 = HEAP32[$29>>2]|0;
      $33 = $32;
      $34 = $33;
      $35 = HEAP32[$34>>2]|0;
      $36 = (($33) + 4)|0;
      $37 = $36;
      $38 = HEAP32[$37>>2]|0;
      $39 = HEAP32[$30>>2]|0;
      $40 = (($2) + ($$048)|0);
      $41 = HEAP32[$39>>2]|0;
      $42 = ((($41)) + 16|0);
      $43 = HEAP32[$42>>2]|0;
      $44 = (FUNCTION_TABLE_iiiiiiiii[$43 & 15]($39,$32,$2,$40,$4,$3,$31,$5)|0);
      switch ($44|0) {
      case 3:  {
       label = 15;
       break L11;
       break;
      }
      case 2:  {
       label = 17;
       break L11;
       break;
      }
      case 1:  {
       break;
      }
      default: {
       break L11;
      }
      }
      $45 = HEAP32[$29>>2]|0;
      $46 = $45;
      $47 = $46;
      HEAP32[$47>>2] = $35;
      $48 = (($46) + 4)|0;
      $49 = $48;
      HEAP32[$49>>2] = $38;
      $50 = ($$048|0)==(8);
      if ($50) {
       label = 17;
       break;
      }
      $51 = HEAP32[$15>>2]|0;
      $52 = (_getc($51)|0);
      $53 = ($52|0)==(-1);
      if ($53) {
       label = 17;
       break;
      }
      $56 = $52&255;
      HEAP8[$40>>0] = $56;
      $57 = (($$048) + 1)|0;
      $$048 = $57;
     }
     if ((label|0) == 15) {
      $54 = HEAP8[$2>>0]|0;
      $55 = $54 << 24 >> 24;
      HEAP32[$3>>2] = $55;
     }
     else if ((label|0) == 17) {
      $58 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
      $$9 = $58;
      break;
     }
     $$351 = $$048;
     label = 19;
    } else {
     $27 = HEAP8[$2>>0]|0;
     $28 = $27 << 24 >> 24;
     HEAP32[$3>>2] = $28;
     $$351 = $$sroa$speculated;
     label = 19;
    }
   } while(0);
   L21: do {
    if ((label|0) == 19) {
     L23: do {
      if ($1) {
       $69 = HEAP32[$3>>2]|0;
       $70 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($69)|0);
       $71 = ((($0)) + 48|0);
       HEAP32[$71>>2] = $70;
      } else {
       $$0 = $$351;
       while(1) {
        $59 = ($$0|0)>(0);
        if (!($59)) {
         break L23;
        }
        $60 = (($$0) + -1)|0;
        $61 = (($2) + ($60)|0);
        $62 = HEAP8[$61>>0]|0;
        $63 = $62 << 24 >> 24;
        $64 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($63)|0);
        $65 = HEAP32[$15>>2]|0;
        $66 = (_ungetc($64,$65)|0);
        $67 = ($66|0)==(-1);
        if ($67) {
         break;
        } else {
         $$0 = $60;
        }
       }
       $68 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
       $$9 = $68;
       break L21;
      }
     } while(0);
     $72 = HEAP32[$3>>2]|0;
     $73 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($72)|0);
     $$9 = $73;
    }
   } while(0);
   $$10 = $$9;
  }
  $$11 = $$10;
 } else {
  $9 = ((($0)) + 48|0);
  $10 = HEAP32[$9>>2]|0;
  if ($1) {
   $11 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   HEAP32[$9>>2] = $11;
   HEAP8[$6>>0] = 0;
   $$11 = $10;
  } else {
   $$11 = $10;
  }
 }
 STACKTOP = sp;return ($$11|0);
}
function __ZNSt3__210__stdinbufIcED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__210__stdinbufIcE5imbueERKNS_6localeE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNKSt3__26locale9use_facetERNS0_2idE($1,51044)|0);
 $3 = ((($0)) + 36|0);
 HEAP32[$3>>2] = $2;
 $4 = HEAP32[$2>>2]|0;
 $5 = ((($4)) + 24|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (FUNCTION_TABLE_ii[$6 & 255]($2)|0);
 $8 = ((($0)) + 44|0);
 HEAP32[$8>>2] = $7;
 $9 = HEAP32[$3>>2]|0;
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 28|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (FUNCTION_TABLE_ii[$12 & 255]($9)|0);
 $14 = ((($0)) + 53|0);
 $15 = $13&1;
 HEAP8[$14>>0] = $15;
 $16 = HEAP32[$8>>2]|0;
 $17 = ($16|0)>(8);
 if ($17) {
  __ZNSt3__221__throw_runtime_errorEPKc(41477);
  // unreachable;
 } else {
  return;
 }
}
function __ZNSt3__210__stdinbufIcE9underflowEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZNSt3__210__stdinbufIcE9__getcharEb($0,0)|0);
 return ($1|0);
}
function __ZNSt3__210__stdinbufIcE5uflowEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZNSt3__210__stdinbufIcE9__getcharEb($0,1)|0);
 return ($1|0);
}
function __ZNSt3__210__stdinbufIcE9pbackfailEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$07 = 0, $$1 = 0, $$pre = 0, $$pre$phiZ2D = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp + 16|0;
 $3 = sp + 4|0;
 $4 = sp + 8|0;
 $5 = sp;
 $6 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
 $7 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($1,$6)|0);
 $8 = ((($0)) + 52|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = ($9<<24>>24)!=(0);
 do {
  if ($7) {
   if ($10) {
    $$1 = $1;
   } else {
    $11 = ((($0)) + 48|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
    $14 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($12,$13)|0);
    $15 = $14 ^ 1;
    $16 = $15&1;
    HEAP8[$8>>0] = $16;
    $$1 = $12;
   }
  } else {
   if ($10) {
    $17 = ((($0)) + 48|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = (__ZNSt3__211char_traitsIcE12to_char_typeEi($18)|0);
    HEAP8[$4>>0] = $19;
    $20 = ((($0)) + 36|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = ((($0)) + 40|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = ((($4)) + 1|0);
    $25 = ((($2)) + 8|0);
    $26 = HEAP32[$21>>2]|0;
    $27 = ((($26)) + 12|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = (FUNCTION_TABLE_iiiiiiiii[$28 & 15]($21,$23,$4,$24,$5,$2,$25,$3)|0);
    switch ($29|0) {
    case 1: case 2:  {
     label = 11;
     break;
    }
    case 3:  {
     $30 = HEAP32[$17>>2]|0;
     $31 = $30&255;
     HEAP8[$2>>0] = $31;
     $32 = ((($2)) + 1|0);
     HEAP32[$3>>2] = $32;
     label = 8;
     break;
    }
    default: {
     label = 8;
    }
    }
    L9: do {
     if ((label|0) == 8) {
      $33 = ((($0)) + 32|0);
      while(1) {
       $34 = HEAP32[$3>>2]|0;
       $35 = ($34>>>0)>($2>>>0);
       if (!($35)) {
        $$0 = 1;$$07 = 0;
        break L9;
       }
       $36 = ((($34)) + -1|0);
       HEAP32[$3>>2] = $36;
       $37 = HEAP8[$36>>0]|0;
       $38 = $37 << 24 >> 24;
       $39 = HEAP32[$33>>2]|0;
       $40 = (_ungetc($38,$39)|0);
       $41 = ($40|0)==(-1);
       if ($41) {
        label = 11;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 11) {
     $42 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
     $$0 = 0;$$07 = $42;
    }
    if ($$0) {
     $$pre$phiZ2D = $17;
    } else {
     $$1 = $$07;
     break;
    }
   } else {
    $$pre = ((($0)) + 48|0);
    $$pre$phiZ2D = $$pre;
   }
   HEAP32[$$pre$phiZ2D>>2] = $1;
   HEAP8[$8>>0] = 1;
   $$1 = $1;
  }
 } while(0);
 STACKTOP = sp;return ($$1|0);
}
function __ZNSt3__210__stdinbufIcE9__getcharEb($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$048 = 0, $$052 = 0, $$10 = 0, $$11 = 0, $$351 = 0, $$9 = 0, $$sroa$speculated = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp + 16|0;
 $3 = sp + 8|0;
 $4 = sp + 4|0;
 $5 = sp;
 $6 = ((($0)) + 52|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = ($7<<24>>24)==(0);
 if ($8) {
  $12 = ((($0)) + 44|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)>(1);
  $$sroa$speculated = $14 ? $13 : 1;
  $15 = ((($0)) + 32|0);
  $$052 = 0;
  while(1) {
   $16 = ($$052>>>0)<($$sroa$speculated>>>0);
   if (!($16)) {
    label = 9;
    break;
   }
   $17 = HEAP32[$15>>2]|0;
   $18 = (_getc($17)|0);
   $19 = ($18|0)==(-1);
   if ($19) {
    label = 8;
    break;
   }
   $20 = $18&255;
   $21 = (($2) + ($$052)|0);
   HEAP8[$21>>0] = $20;
   $22 = (($$052) + 1)|0;
   $$052 = $22;
  }
  if ((label|0) == 8) {
   $23 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $$10 = $23;
  }
  else if ((label|0) == 9) {
   $24 = ((($0)) + 53|0);
   $25 = HEAP8[$24>>0]|0;
   $26 = ($25<<24>>24)==(0);
   do {
    if ($26) {
     $28 = ((($0)) + 40|0);
     $29 = ((($0)) + 36|0);
     $30 = ((($3)) + 1|0);
     $$048 = $$sroa$speculated;
     L11: while(1) {
      $31 = HEAP32[$28>>2]|0;
      $32 = $31;
      $33 = $32;
      $34 = HEAP32[$33>>2]|0;
      $35 = (($32) + 4)|0;
      $36 = $35;
      $37 = HEAP32[$36>>2]|0;
      $38 = HEAP32[$29>>2]|0;
      $39 = (($2) + ($$048)|0);
      $40 = HEAP32[$38>>2]|0;
      $41 = ((($40)) + 16|0);
      $42 = HEAP32[$41>>2]|0;
      $43 = (FUNCTION_TABLE_iiiiiiiii[$42 & 15]($38,$31,$2,$39,$4,$3,$30,$5)|0);
      switch ($43|0) {
      case 3:  {
       label = 15;
       break L11;
       break;
      }
      case 2:  {
       label = 17;
       break L11;
       break;
      }
      case 1:  {
       break;
      }
      default: {
       break L11;
      }
      }
      $44 = HEAP32[$28>>2]|0;
      $45 = $44;
      $46 = $45;
      HEAP32[$46>>2] = $34;
      $47 = (($45) + 4)|0;
      $48 = $47;
      HEAP32[$48>>2] = $37;
      $49 = ($$048|0)==(8);
      if ($49) {
       label = 17;
       break;
      }
      $50 = HEAP32[$15>>2]|0;
      $51 = (_getc($50)|0);
      $52 = ($51|0)==(-1);
      if ($52) {
       label = 17;
       break;
      }
      $54 = $51&255;
      HEAP8[$39>>0] = $54;
      $55 = (($$048) + 1)|0;
      $$048 = $55;
     }
     if ((label|0) == 15) {
      $53 = HEAP8[$2>>0]|0;
      HEAP8[$3>>0] = $53;
     }
     else if ((label|0) == 17) {
      $56 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
      $$9 = $56;
      break;
     }
     $$351 = $$048;
     label = 19;
    } else {
     $27 = HEAP8[$2>>0]|0;
     HEAP8[$3>>0] = $27;
     $$351 = $$sroa$speculated;
     label = 19;
    }
   } while(0);
   L21: do {
    if ((label|0) == 19) {
     L23: do {
      if ($1) {
       $66 = HEAP8[$3>>0]|0;
       $67 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($66)|0);
       $68 = ((($0)) + 48|0);
       HEAP32[$68>>2] = $67;
      } else {
       $$0 = $$351;
       while(1) {
        $57 = ($$0|0)>(0);
        if (!($57)) {
         break L23;
        }
        $58 = (($$0) + -1)|0;
        $59 = (($2) + ($58)|0);
        $60 = HEAP8[$59>>0]|0;
        $61 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($60)|0);
        $62 = HEAP32[$15>>2]|0;
        $63 = (_ungetc($61,$62)|0);
        $64 = ($63|0)==(-1);
        if ($64) {
         break;
        } else {
         $$0 = $58;
        }
       }
       $65 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
       $$9 = $65;
       break L21;
      }
     } while(0);
     $69 = HEAP8[$3>>0]|0;
     $70 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($69)|0);
     $$9 = $70;
    }
   } while(0);
   $$10 = $$9;
  }
  $$11 = $$10;
 } else {
  $9 = ((($0)) + 48|0);
  $10 = HEAP32[$9>>2]|0;
  if ($1) {
   $11 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   HEAP32[$9>>2] = $11;
   HEAP8[$6>>0] = 0;
   $$11 = $10;
  } else {
   $$11 = $10;
  }
 }
 STACKTOP = sp;return ($$11|0);
}
function __ZNSt3__27collateIcED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}
function __ZNSt3__27collateIcED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__27collateIcED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__26locale5facet16__on_zero_sharedEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  $2 = HEAP32[$0>>2]|0;
  $3 = ((($2)) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  FUNCTION_TABLE_vi[$4 & 511]($0);
 }
 return;
}
function __ZNKSt3__27collateIcE10do_compareEPKcS3_S3_S3_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$011 = 0, $$012 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$011 = $3;$$012 = $1;
 while(1) {
  $5 = ($$011|0)==($4|0);
  if ($5) {
   label = 7;
   break;
  }
  $6 = ($$012|0)==($2|0);
  if ($6) {
   $$0 = -1;
   break;
  }
  $7 = HEAP8[$$012>>0]|0;
  $8 = HEAP8[$$011>>0]|0;
  $9 = ($7<<24>>24)<($8<<24>>24);
  if ($9) {
   $$0 = -1;
   break;
  }
  $10 = ($8<<24>>24)<($7<<24>>24);
  if ($10) {
   $$0 = 1;
   break;
  }
  $11 = ((($$012)) + 1|0);
  $12 = ((($$011)) + 1|0);
  $$011 = $12;$$012 = $11;
 }
 if ((label|0) == 7) {
  $13 = ($$012|0)!=($2|0);
  $14 = $13&1;
  $$0 = $14;
 }
 return ($$0|0);
}
function __ZNKSt3__27collateIcE12do_transformEPKcS3_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($0,$2,$3);
 return;
}
function __ZNKSt3__27collateIcE7do_hashEPKcS3_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$020 = 0, $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = 0;$$020 = $1;
 while(1) {
  $3 = ($$020|0)==($2|0);
  if ($3) {
   break;
  }
  $4 = $$0 << 4;
  $5 = HEAP8[$$020>>0]|0;
  $6 = $5 << 24 >> 24;
  $7 = (($4) + ($6))|0;
  $8 = $7 & -268435456;
  $9 = $8 >>> 24;
  $10 = $9 | $8;
  $11 = $10 ^ $7;
  $12 = ((($$020)) + 1|0);
  $$0 = $11;$$020 = $12;
 }
 return ($$0|0);
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$021 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $scevgep23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $1;
 $4 = sp;
 $5 = $2;
 $6 = (($5) - ($3))|0;
 $7 = ($6>>>0)>(4294967279);
 if ($7) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $8 = ($6>>>0)<(11);
 if ($8) {
  $9 = $6&255;
  $10 = ((($0)) + 11|0);
  HEAP8[$10>>0] = $9;
  $$021 = $0;
 } else {
  $11 = (($6) + 16)|0;
  $12 = $11 & -16;
  $13 = (__Znwm($12)|0);
  HEAP32[$0>>2] = $13;
  $14 = $12 | -2147483648;
  $15 = ((($0)) + 8|0);
  HEAP32[$15>>2] = $14;
  $16 = ((($0)) + 4|0);
  HEAP32[$16>>2] = $6;
  $$021 = $13;
 }
 $17 = $2;
 $18 = (($17) - ($3))|0;
 $$0 = $1;$$1 = $$021;
 while(1) {
  $19 = ($$0|0)==($2|0);
  if ($19) {
   break;
  }
  __ZNSt3__211char_traitsIcE6assignERcRKc($$1,$$0);
  $20 = ((($$0)) + 1|0);
  $21 = ((($$1)) + 1|0);
  $$0 = $20;$$1 = $21;
 }
 $scevgep23 = (($$021) + ($18)|0);
 HEAP8[$4>>0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($scevgep23,$4);
 STACKTOP = sp;return;
}
function __ZNSt3__26locale5facetD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__27collateIwED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}
function __ZNSt3__27collateIwED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__27collateIwED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt3__27collateIwE10do_compareEPKwS3_S3_S3_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$011 = 0, $$012 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$011 = $3;$$012 = $1;
 while(1) {
  $5 = ($$011|0)==($4|0);
  if ($5) {
   label = 7;
   break;
  }
  $6 = ($$012|0)==($2|0);
  if ($6) {
   $$0 = -1;
   break;
  }
  $7 = HEAP32[$$012>>2]|0;
  $8 = HEAP32[$$011>>2]|0;
  $9 = ($7|0)<($8|0);
  if ($9) {
   $$0 = -1;
   break;
  }
  $10 = ($8|0)<($7|0);
  if ($10) {
   $$0 = 1;
   break;
  }
  $11 = ((($$012)) + 4|0);
  $12 = ((($$011)) + 4|0);
  $$011 = $12;$$012 = $11;
 }
 if ((label|0) == 7) {
  $13 = ($$012|0)!=($2|0);
  $14 = $13&1;
  $$0 = $14;
 }
 return ($$0|0);
}
function __ZNKSt3__27collateIwE12do_transformEPKwS3_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initIPKwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($0,$2,$3);
 return;
}
function __ZNKSt3__27collateIwE7do_hashEPKwS3_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$020 = 0, $10 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = 0;$$020 = $1;
 while(1) {
  $3 = ($$020|0)==($2|0);
  if ($3) {
   break;
  }
  $4 = $$0 << 4;
  $5 = HEAP32[$$020>>2]|0;
  $6 = (($5) + ($4))|0;
  $7 = $6 & -268435456;
  $8 = $7 >>> 24;
  $9 = $8 | $7;
  $10 = $9 ^ $6;
  $11 = ((($$020)) + 4|0);
  $$0 = $10;$$020 = $11;
 }
 return ($$0|0);
}
function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initIPKwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$1 = 0, $$1$ph = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = $2;
 $5 = $1;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 2;
 $8 = ($7>>>0)>(1073741807);
 if ($8) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $9 = ($7>>>0)<(2);
 do {
  if ($9) {
   $10 = $7&255;
   $11 = ((($0)) + 8|0);
   $12 = ((($11)) + 3|0);
   HEAP8[$12>>0] = $10;
   $$1$ph = $0;
  } else {
   $13 = (($7) + 4)|0;
   $14 = $13 & -4;
   $15 = ($14>>>0)>(1073741823);
   if (!($15)) {
    $21 = $14 << 2;
    $22 = (__Znwm($21)|0);
    HEAP32[$0>>2] = $22;
    $23 = $14 | -2147483648;
    $24 = ((($0)) + 8|0);
    HEAP32[$24>>2] = $23;
    $25 = ((($0)) + 4|0);
    HEAP32[$25>>2] = $7;
    $$1$ph = $22;
    break;
   }
   $16 = (___cxa_allocate_exception(8)|0);
   __THREW__ = 0;
   invoke_vii(45,($16|0),(43841|0));
   $17 = __THREW__; __THREW__ = 0;
   $18 = $17&1;
   if ($18) {
    $19 = ___cxa_find_matching_catch_2()|0;
    $20 = (getTempRet0() | 0);
    ___cxa_free_exception(($16|0));
    ___resumeException($19|0);
    // unreachable;
   } else {
    HEAP32[$16>>2] = (30800);
    ___cxa_throw(($16|0),(24744|0),(226|0));
    // unreachable;
   }
  }
 } while(0);
 $$0 = $1;$$1 = $$1$ph;
 while(1) {
  $26 = ($$0|0)==($2|0);
  if ($26) {
   break;
  }
  __ZNSt3__211char_traitsIwE6assignERwRKw($$1,$$0);
  $27 = ((($$0)) + 4|0);
  $28 = ((($$1)) + 4|0);
  $$0 = $27;$$1 = $28;
 }
 HEAP32[$3>>2] = 0;
 __ZNSt3__211char_traitsIwE6assignERwRKw($$1,$3);
 STACKTOP = sp;return;
}
function __ZNSt3__211char_traitsIwE6assignERwRKw($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$0>>2] = $2;
 return;
}
function __ZNSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}
function __ZNSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$030 = 0, $$2 = 0, $$233 = 0, $$byval_copy = 0, $$byval_copy9 = 0, $$ptr = 0, $$sink$index3 = 0, $$sroa$027$0 = 0, $$sroa$027$0$copyload = 0, $$sroa$027$0$copyload29 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $$byval_copy9 = sp + 40|0;
 $$byval_copy = sp;
 $6 = sp + 32|0;
 $7 = sp + 36|0;
 $8 = sp + 28|0;
 $9 = sp + 24|0;
 $10 = ((($3)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $11 & 1;
 $13 = ($12|0)==(0);
 L1: do {
  if ($13) {
   HEAP32[$6>>2] = -1;
   $14 = HEAP32[$0>>2]|0;
   $15 = ((($14)) + 16|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = HEAP32[$1>>2]|0;
   HEAP32[$7>>2] = $17;
   $18 = HEAP32[$2>>2]|0;
   HEAP32[$8>>2] = $18;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$7>>2]|0;
   ;HEAP32[$$byval_copy9>>2]=HEAP32[$8>>2]|0;
   $19 = (FUNCTION_TABLE_iiiiiii[$16 & 63]($0,$$byval_copy,$$byval_copy9,$3,$4,$6)|0);
   HEAP32[$1>>2] = $19;
   $20 = HEAP32[$6>>2]|0;
   switch ($20|0) {
   case 0:  {
    HEAP8[$5>>0] = 0;
    break;
   }
   case 1:  {
    HEAP8[$5>>0] = 1;
    break;
   }
   default: {
    HEAP8[$5>>0] = 1;
    HEAP32[$4>>2] = 4;
   }
   }
   $$sroa$027$0$copyload = HEAP32[$1>>2]|0;
   $$sroa$027$0 = $$sroa$027$0$copyload;
  } else {
   __ZNKSt3__28ios_base6getlocEv($$byval_copy9,$3);
   __THREW__ = 0;
   $21 = (invoke_iii(37,($$byval_copy9|0),(50740|0))|0);
   $22 = __THREW__; __THREW__ = 0;
   $23 = $22&1;
   do {
    if ($23) {
     $46 = ___cxa_find_matching_catch_2()|0;
     $47 = (getTempRet0() | 0);
     __ZNSt3__26localeD2Ev($$byval_copy9);
     $$2 = $46;$$233 = $47;
    } else {
     __ZNSt3__26localeD2Ev($$byval_copy9);
     __ZNKSt3__28ios_base6getlocEv($$byval_copy9,$3);
     __THREW__ = 0;
     $24 = (invoke_iii(37,($$byval_copy9|0),(50756|0))|0);
     $25 = __THREW__; __THREW__ = 0;
     $26 = $25&1;
     if ($26) {
      $48 = ___cxa_find_matching_catch_2()|0;
      $49 = (getTempRet0() | 0);
      __ZNSt3__26localeD2Ev($$byval_copy9);
      $$2 = $48;$$233 = $49;
      break;
     }
     __ZNSt3__26localeD2Ev($$byval_copy9);
     $27 = HEAP32[$24>>2]|0;
     $28 = ((($27)) + 24|0);
     $29 = HEAP32[$28>>2]|0;
     __THREW__ = 0;
     invoke_vii($29|0,($$byval_copy|0),($24|0));
     $30 = __THREW__; __THREW__ = 0;
     $31 = $30&1;
     L15: do {
      if ($31) {
       $32 = ___cxa_find_matching_catch_2()|0;
       $33 = (getTempRet0() | 0);
       $$030 = $32;$$sink$index3 = $33;
      } else {
       $$ptr = ((($$byval_copy)) + 12|0);
       $34 = HEAP32[$24>>2]|0;
       $35 = ((($34)) + 28|0);
       $36 = HEAP32[$35>>2]|0;
       __THREW__ = 0;
       invoke_vii($36|0,($$ptr|0),($24|0));
       $37 = __THREW__; __THREW__ = 0;
       $38 = $37&1;
       if ($38) {
        $58 = ___cxa_find_matching_catch_2()|0;
        $59 = (getTempRet0() | 0);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($$byval_copy);
        $$030 = $58;$$sink$index3 = $59;
        break;
       }
       $39 = HEAP32[$2>>2]|0;
       HEAP32[$9>>2] = $39;
       $40 = ((($$byval_copy)) + 24|0);
       __THREW__ = 0;
       ;HEAP32[$$byval_copy9>>2]=HEAP32[$9>>2]|0;
       $41 = (invoke_iiiiiiii(7,($1|0),($$byval_copy9|0),($$byval_copy|0),($40|0),($21|0),($4|0),1)|0);
       $42 = __THREW__; __THREW__ = 0;
       $43 = $42&1;
       if ($43) {
        $50 = ___cxa_find_matching_catch_2()|0;
        $51 = (getTempRet0() | 0);
        $56 = $40;
        while(1) {
         $55 = ((($56)) + -12|0);
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($55);
         $57 = ($55|0)==($$byval_copy|0);
         if ($57) {
          $$030 = $50;$$sink$index3 = $51;
          break L15;
         } else {
          $56 = $55;
         }
        }
       }
       $44 = ($41|0)==($$byval_copy|0);
       $45 = $44&1;
       HEAP8[$5>>0] = $45;
       $$sroa$027$0$copyload29 = HEAP32[$1>>2]|0;
       $53 = $40;
       while(1) {
        $52 = ((($53)) + -12|0);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($52);
        $54 = ($52|0)==($$byval_copy|0);
        if ($54) {
         break;
        } else {
         $53 = $52;
        }
       }
       $$sroa$027$0 = $$sroa$027$0$copyload29;
       break L1;
      }
     } while(0);
     $$2 = $$030;$$233 = $$sink$index3;
    }
   } while(0);
   ___resumeException($$2|0);
   // unreachable;
  }
 } while(0);
 STACKTOP = sp;return ($$sroa$027$0|0);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $9;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $10 = (__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($0,$$byval_copy,$$byval_copy1,$3,$4,$5)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $9;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $10 = (__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($0,$$byval_copy,$$byval_copy1,$3,$4,$5)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $9;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $10 = (__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($0,$$byval_copy,$$byval_copy1,$3,$4,$5)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $9;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $10 = (__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($0,$$byval_copy,$$byval_copy1,$3,$4,$5)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $9;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $10 = (__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($0,$$byval_copy,$$byval_copy1,$3,$4,$5)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $9;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $10 = (__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($0,$$byval_copy,$$byval_copy1,$3,$4,$5)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $9;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $10 = (__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($0,$$byval_copy,$$byval_copy1,$3,$4,$5)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $9;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $10 = (__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($0,$$byval_copy,$$byval_copy1,$3,$4,$5)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $9;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $10 = (__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($0,$$byval_copy,$$byval_copy1,$3,$4,$5)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i47 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i53 = 0, $$0$i$i29 = 0, $$0$i$i42 = 0, $$022 = 0, $$123 = 0, $$2 = 0, $$224 = 0, $$227 = 0, $$3 = 0, $$328 = 0, $$pre = 0, $$sink71$index = 0, $$sink71$index3 = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i = 0, $exitcond$i$i30 = 0, $phitmp$i = 0, $phitmp$i37 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $vararg_buffer = sp + 192|0;
 $6 = sp + 160|0;
 $7 = sp + 220|0;
 $8 = sp + 208|0;
 $9 = sp + 204|0;
 $10 = sp;
 $11 = sp + 200|0;
 $12 = sp + 196|0;
 ;HEAP32[$7>>2]=0|0;HEAP32[$7+4>>2]=0|0;HEAP32[$7+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $13 = (($7) + ($$0$i$i<<2)|0);
  HEAP32[$13>>2] = 0;
  $14 = (($$0$i$i) + 1)|0;
  $$0$i$i = $14;
 }
 __ZNKSt3__28ios_base6getlocEv($8,$3);
 __THREW__ = 0;
 $15 = (invoke_iii(37,($8|0),(50740|0))|0);
 $16 = __THREW__; __THREW__ = 0;
 $17 = $16&1;
 if ($17) {
  label = 33;
 } else {
  $18 = HEAP32[$15>>2]|0;
  $19 = ((($18)) + 32|0);
  $20 = HEAP32[$19>>2]|0;
  __THREW__ = 0;
  (invoke_iiiii($20|0,($15|0),(20912|0),((20938)|0),($6|0))|0);
  $21 = __THREW__; __THREW__ = 0;
  $22 = $21&1;
  if ($22) {
   label = 33;
  } else {
   __ZNSt3__26localeD2Ev($8);
   ;HEAP32[$8>>2]=0|0;HEAP32[$8+4>>2]=0|0;HEAP32[$8+8>>2]=0|0;
   $$0$i$i29 = 0;
   while(1) {
    $exitcond$i$i30 = ($$0$i$i29|0)==(3);
    if ($exitcond$i$i30) {
     break;
    }
    $23 = (($8) + ($$0$i$i29<<2)|0);
    HEAP32[$23>>2] = 0;
    $24 = (($$0$i$i29) + 1)|0;
    $$0$i$i29 = $24;
   }
   $25 = ((($8)) + 11|0);
   $26 = HEAP8[$25>>0]|0;
   $27 = ($26<<24>>24)<(0);
   if ($27) {
    $28 = ((($8)) + 8|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = $29 & 2147483647;
    $phitmp$i = (($30) + -1)|0;
    $31 = $phitmp$i;
   } else {
    $31 = 10;
   }
   __THREW__ = 0;
   invoke_viii(29,($8|0),($31|0),0);
   $32 = __THREW__; __THREW__ = 0;
   $33 = $32&1;
   if ($33) {
    $99 = ___cxa_find_matching_catch_2()|0;
    $100 = (getTempRet0() | 0);
    $$2 = $99;$$227 = $100;
   } else {
    $34 = HEAP8[$25>>0]|0;
    $35 = ($34<<24>>24)<(0);
    $36 = HEAP32[$8>>2]|0;
    $37 = $35 ? $36 : $8;
    HEAP32[$9>>2] = $37;
    HEAP32[$11>>2] = $10;
    HEAP32[$12>>2] = 0;
    $38 = ((($8)) + 4|0);
    $39 = ((($8)) + 8|0);
    $$pre = HEAP32[$1>>2]|0;
    $$022 = $37;$188 = $$pre;$41 = $$pre;
    L18: while(1) {
     $40 = ($41|0)==(0|0);
     if ($40) {
      $108 = 0;$159 = 0;$189 = 1;
     } else {
      $42 = ((($41)) + 12|0);
      $43 = HEAP32[$42>>2]|0;
      $44 = ((($41)) + 16|0);
      $45 = HEAP32[$44>>2]|0;
      $46 = ($43|0)==($45|0);
      if ($46) {
       $47 = HEAP32[$41>>2]|0;
       $48 = ((($47)) + 36|0);
       $49 = HEAP32[$48>>2]|0;
       __THREW__ = 0;
       $50 = (invoke_ii($49|0,($41|0))|0);
       $51 = __THREW__; __THREW__ = 0;
       $52 = $51&1;
       if ($52) {
        label = 35;
        break;
       } else {
        $$0$i$i$i$i = $50;
       }
      } else {
       $53 = HEAP8[$43>>0]|0;
       $54 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($53)|0);
       $$0$i$i$i$i = $54;
      }
      $55 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
      $56 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i,$55)|0);
      if ($56) {
       HEAP32[$1>>2] = 0;
       $108 = 0;$159 = 0;$189 = 1;
      } else {
       $108 = $41;$159 = $188;$189 = 0;
      }
     }
     $57 = HEAP32[$2>>2]|0;
     $58 = ($57|0)==(0|0);
     do {
      if ($58) {
       label = 25;
      } else {
       $59 = ((($57)) + 12|0);
       $60 = HEAP32[$59>>2]|0;
       $61 = ((($57)) + 16|0);
       $62 = HEAP32[$61>>2]|0;
       $63 = ($60|0)==($62|0);
       if ($63) {
        $64 = HEAP32[$57>>2]|0;
        $65 = ((($64)) + 36|0);
        $66 = HEAP32[$65>>2]|0;
        __THREW__ = 0;
        $67 = (invoke_ii($66|0,($57|0))|0);
        $68 = __THREW__; __THREW__ = 0;
        $69 = $68&1;
        if ($69) {
         label = 35;
         break L18;
        } else {
         $$0$i$i2$i$i = $67;
        }
       } else {
        $70 = HEAP8[$60>>0]|0;
        $71 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($70)|0);
        $$0$i$i2$i$i = $71;
       }
       $72 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
       $73 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i,$72)|0);
       if ($73) {
        HEAP32[$2>>2] = 0;
        label = 25;
        break;
       } else {
        if ($189) {
         $190 = $57;
         break;
        } else {
         $$224 = $$022;$170 = $57;
         label = 47;
         break L18;
        }
       }
      }
     } while(0);
     if ((label|0) == 25) {
      label = 0;
      if ($189) {
       $$224 = $$022;$170 = 0;
       label = 47;
       break;
      } else {
       $190 = 0;
      }
     }
     $74 = HEAP32[$9>>2]|0;
     $75 = HEAP8[$25>>0]|0;
     $76 = ($75<<24>>24)<(0);
     $77 = HEAP32[$38>>2]|0;
     $78 = $75&255;
     $79 = $76 ? $77 : $78;
     $80 = (($$022) + ($79)|0);
     $81 = ($74|0)==($80|0);
     if ($81) {
      $82 = $79 << 1;
      __THREW__ = 0;
      invoke_viii(29,($8|0),($82|0),0);
      $83 = __THREW__; __THREW__ = 0;
      $84 = $83&1;
      if ($84) {
       label = 37;
       break;
      }
      $85 = HEAP8[$25>>0]|0;
      $86 = ($85<<24>>24)<(0);
      if ($86) {
       $87 = HEAP32[$39>>2]|0;
       $88 = $87 & 2147483647;
       $phitmp$i37 = (($88) + -1)|0;
       $89 = $phitmp$i37;
      } else {
       $89 = 10;
      }
      __THREW__ = 0;
      invoke_viii(29,($8|0),($89|0),0);
      $90 = __THREW__; __THREW__ = 0;
      $91 = $90&1;
      if ($91) {
       label = 37;
       break;
      }
      $92 = HEAP8[$25>>0]|0;
      $93 = ($92<<24>>24)<(0);
      $94 = HEAP32[$8>>2]|0;
      $95 = $93 ? $94 : $8;
      $96 = (($95) + ($79)|0);
      HEAP32[$9>>2] = $96;
      $$123 = $95;
     } else {
      $$123 = $$022;
     }
     $107 = ((($108)) + 12|0);
     $109 = HEAP32[$107>>2]|0;
     $110 = ((($108)) + 16|0);
     $111 = HEAP32[$110>>2]|0;
     $112 = ($109|0)==($111|0);
     if ($112) {
      $113 = HEAP32[$108>>2]|0;
      $114 = ((($113)) + 36|0);
      $115 = HEAP32[$114>>2]|0;
      __THREW__ = 0;
      $116 = (invoke_ii($115|0,($108|0))|0);
      $117 = __THREW__; __THREW__ = 0;
      $118 = $117&1;
      if ($118) {
       label = 35;
       break;
      } else {
       $$0$i$i42 = $116;
      }
     } else {
      $119 = HEAP8[$109>>0]|0;
      $120 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($119)|0);
      $$0$i$i42 = $120;
     }
     $121 = $$0$i$i42&255;
     __THREW__ = 0;
     $122 = (invoke_iiiiiiiiiii(1,($121|0),16,($$123|0),($9|0),($12|0),0,($7|0),($10|0),($11|0),($6|0))|0);
     $123 = __THREW__; __THREW__ = 0;
     $124 = $123&1;
     if ($124) {
      label = 35;
      break;
     }
     $125 = ($122|0)==(0);
     if (!($125)) {
      $$224 = $$123;$170 = $190;
      label = 47;
      break;
     }
     $126 = HEAP32[$107>>2]|0;
     $127 = HEAP32[$110>>2]|0;
     $128 = ($126|0)==($127|0);
     if ($128) {
      $129 = HEAP32[$108>>2]|0;
      $130 = ((($129)) + 40|0);
      $131 = HEAP32[$130>>2]|0;
      __THREW__ = 0;
      (invoke_ii($131|0,($108|0))|0);
      $132 = __THREW__; __THREW__ = 0;
      $133 = $132&1;
      if ($133) {
       label = 35;
       break;
      }
     } else {
      $134 = ((($126)) + 1|0);
      HEAP32[$107>>2] = $134;
      $135 = HEAP8[$126>>0]|0;
      (__ZNSt3__211char_traitsIcE11to_int_typeEc($135)|0);
     }
     $$022 = $$123;$188 = $159;$41 = $108;
    }
    if ((label|0) == 35) {
     $101 = ___cxa_find_matching_catch_2()|0;
     $102 = (getTempRet0() | 0);
     $$sink71$index = $101;$$sink71$index3 = $102;
    }
    else if ((label|0) == 37) {
     $105 = ___cxa_find_matching_catch_2()|0;
     $106 = (getTempRet0() | 0);
     $$sink71$index = $105;$$sink71$index3 = $106;
    }
    else if ((label|0) == 47) {
     $136 = HEAP32[$9>>2]|0;
     $137 = $$224;
     $138 = (($136) - ($137))|0;
     __THREW__ = 0;
     invoke_viii(29,($8|0),($138|0),0);
     $139 = __THREW__; __THREW__ = 0;
     $140 = $139&1;
     L61: do {
      if (!($140)) {
       $141 = HEAP8[$25>>0]|0;
       $142 = HEAP32[$8>>2]|0;
       __THREW__ = 0;
       $143 = (invoke_i(24)|0);
       $144 = __THREW__; __THREW__ = 0;
       $145 = $144&1;
       if (!($145)) {
        $146 = ($141<<24>>24)<(0);
        $147 = $146 ? $142 : $8;
        __THREW__ = 0;
        HEAP32[$vararg_buffer>>2] = $5;
        $148 = (invoke_iiiii(11,($147|0),($143|0),(41625|0),($vararg_buffer|0))|0);
        $149 = __THREW__; __THREW__ = 0;
        $150 = $149&1;
        if (!($150)) {
         $151 = ($148|0)==(1);
         if (!($151)) {
          HEAP32[$4>>2] = 4;
         }
         $152 = ($108|0)==(0|0);
         if ($152) {
          $191 = 1;
         } else {
          $153 = ((($108)) + 12|0);
          $154 = HEAP32[$153>>2]|0;
          $155 = ((($108)) + 16|0);
          $156 = HEAP32[$155>>2]|0;
          $157 = ($154|0)==($156|0);
          if ($157) {
           $158 = HEAP32[$159>>2]|0;
           $160 = ((($158)) + 36|0);
           $161 = HEAP32[$160>>2]|0;
           __THREW__ = 0;
           $162 = (invoke_ii($161|0,($108|0))|0);
           $163 = __THREW__; __THREW__ = 0;
           $164 = $163&1;
           if ($164) {
            break;
           } else {
            $$0$i$i$i$i47 = $162;
           }
          } else {
           $165 = HEAP8[$154>>0]|0;
           $166 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($165)|0);
           $$0$i$i$i$i47 = $166;
          }
          $167 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
          $168 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i47,$167)|0);
          if ($168) {
           HEAP32[$1>>2] = 0;
           $191 = 1;
          } else {
           $191 = 0;
          }
         }
         $169 = ($170|0)==(0|0);
         do {
          if ($169) {
           label = 64;
          } else {
           $171 = ((($170)) + 12|0);
           $172 = HEAP32[$171>>2]|0;
           $173 = ((($170)) + 16|0);
           $174 = HEAP32[$173>>2]|0;
           $175 = ($172|0)==($174|0);
           if ($175) {
            $176 = HEAP32[$170>>2]|0;
            $177 = ((($176)) + 36|0);
            $178 = HEAP32[$177>>2]|0;
            __THREW__ = 0;
            $179 = (invoke_ii($178|0,($170|0))|0);
            $180 = __THREW__; __THREW__ = 0;
            $181 = $180&1;
            if ($181) {
             break L61;
            } else {
             $$0$i$i2$i$i53 = $179;
            }
           } else {
            $182 = HEAP8[$172>>0]|0;
            $183 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($182)|0);
            $$0$i$i2$i$i53 = $183;
           }
           $184 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
           $185 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i53,$184)|0);
           if ($185) {
            HEAP32[$2>>2] = 0;
            label = 64;
            break;
           } else {
            if ($191) {
             break;
            } else {
             label = 66;
             break;
            }
           }
          }
         } while(0);
         if ((label|0) == 64) {
          if ($191) {
           label = 66;
          }
         }
         if ((label|0) == 66) {
          $186 = HEAP32[$4>>2]|0;
          $187 = $186 | 2;
          HEAP32[$4>>2] = $187;
         }
         $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7);
         STACKTOP = sp;return ($$sroa$0$0$copyload|0);
        }
       }
      }
     } while(0);
     $103 = ___cxa_find_matching_catch_2()|0;
     $104 = (getTempRet0() | 0);
     $$sink71$index = $103;$$sink71$index3 = $104;
    }
    $$2 = $$sink71$index;$$227 = $$sink71$index3;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
   $$3 = $$2;$$328 = $$227;
  }
 }
 if ((label|0) == 33) {
  $97 = ___cxa_find_matching_catch_2()|0;
  $98 = (getTempRet0() | 0);
  __ZNSt3__26localeD2Ev($8);
  $$3 = $97;$$328 = $98;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7);
 ___resumeException($$3|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__26locale9use_facetERNS0_2idE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = (__ZNSt3__26locale2id5__getEv($1)|0);
 $4 = (__ZNKSt3__26locale5__imp9use_facetEl($2,$3)|0);
 return ($4|0);
}
function __ZNSt3__26localeD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + -1)|0;
 HEAP32[$2>>2] = $4;
 $5 = ($3|0)==(0);
 if ($5) {
  $6 = HEAP32[$1>>2]|0;
  $7 = ((($6)) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  FUNCTION_TABLE_vi[$8 & 511]($1);
 }
 return;
}
function __ZNSt3__29__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKc($0,$1,$2,$3,$4,$5,$6,$7,$8,$9) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 var $$0$i$add = 0, $$0$i$idx = 0, $$0$i$ptr = 0, $$0$lcssa$i = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $10 = HEAP32[$3>>2]|0;
 $11 = ($10|0)==($2|0);
 do {
  if ($11) {
   $12 = ((($9)) + 24|0);
   $13 = HEAP8[$12>>0]|0;
   $14 = ($13<<24>>24)==($0<<24>>24);
   if (!($14)) {
    $15 = ((($9)) + 25|0);
    $16 = HEAP8[$15>>0]|0;
    $17 = ($16<<24>>24)==($0<<24>>24);
    if (!($17)) {
     label = 5;
     break;
    }
   }
   $18 = $14 ? 43 : 45;
   $19 = ((($2)) + 1|0);
   HEAP32[$3>>2] = $19;
   HEAP8[$2>>0] = $18;
   HEAP32[$4>>2] = 0;
   $$1 = 0;
  } else {
   label = 5;
  }
 } while(0);
 L6: do {
  if ((label|0) == 5) {
   $20 = ((($6)) + 11|0);
   $21 = HEAP8[$20>>0]|0;
   $22 = ($21<<24>>24)<(0);
   $23 = ((($6)) + 4|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = $21&255;
   $26 = $22 ? $24 : $25;
   $27 = ($26|0)!=(0);
   $28 = ($0<<24>>24)==($5<<24>>24);
   $or$cond = $28 & $27;
   if ($or$cond) {
    $29 = HEAP32[$8>>2]|0;
    $30 = $29;
    $31 = $7;
    $32 = (($30) - ($31))|0;
    $33 = ($32|0)<(160);
    if (!($33)) {
     $$1 = 0;
     break;
    }
    $34 = HEAP32[$4>>2]|0;
    $35 = ((($29)) + 4|0);
    HEAP32[$8>>2] = $35;
    HEAP32[$29>>2] = $34;
    HEAP32[$4>>2] = 0;
    $$1 = 0;
    break;
   }
   $36 = ((($9)) + 26|0);
   $$0$i$idx = 0;
   while(1) {
    $$0$i$ptr = (($9) + ($$0$i$idx)|0);
    $37 = ($$0$i$idx|0)==(26);
    if ($37) {
     $$0$lcssa$i = $36;
     break;
    }
    $38 = HEAP8[$$0$i$ptr>>0]|0;
    $39 = ($38<<24>>24)==($0<<24>>24);
    $$0$i$add = (($$0$i$idx) + 1)|0;
    if ($39) {
     $$0$lcssa$i = $$0$i$ptr;
     break;
    } else {
     $$0$i$idx = $$0$i$add;
    }
   }
   $40 = $$0$lcssa$i;
   $41 = $9;
   $42 = (($40) - ($41))|0;
   $43 = ($42|0)>(23);
   if ($43) {
    $$1 = -1;
   } else {
    switch ($1|0) {
    case 10: case 8:  {
     $44 = ($42|0)<($1|0);
     if (!($44)) {
      $$1 = -1;
      break L6;
     }
     break;
    }
    case 16:  {
     $45 = ($42|0)<(22);
     if (!($45)) {
      if ($11) {
       $$1 = -1;
       break L6;
      }
      $46 = $10;
      $47 = $2;
      $48 = (($46) - ($47))|0;
      $49 = ($48|0)<(3);
      if (!($49)) {
       $$1 = -1;
       break L6;
      }
      $50 = ((($10)) + -1|0);
      $51 = HEAP8[$50>>0]|0;
      $52 = ($51<<24>>24)==(48);
      if (!($52)) {
       $$1 = -1;
       break L6;
      }
      $53 = ((($10)) + 1|0);
      $54 = (20912 + ($42)|0);
      HEAP32[$4>>2] = 0;
      $55 = HEAP8[$54>>0]|0;
      HEAP32[$3>>2] = $53;
      HEAP8[$10>>0] = $55;
      $$1 = 0;
      break L6;
     }
     break;
    }
    default: {
    }
    }
    $56 = (20912 + ($42)|0);
    $57 = HEAP8[$56>>0]|0;
    $58 = ((($10)) + 1|0);
    HEAP32[$3>>2] = $58;
    HEAP8[$10>>0] = $57;
    $59 = HEAP32[$4>>2]|0;
    $60 = (($59) + 1)|0;
    HEAP32[$4>>2] = $60;
    $$1 = 0;
   }
  }
 } while(0);
 return ($$1|0);
}
function __ZNSt3__26__clocEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[48416]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  $2 = (___cxa_guard_acquire(48416)|0);
  $3 = ($2|0)==(0);
  if (!($3)) {
   $4 = (___newlocale(2147483647,41628,0)|0);
   HEAP32[12687] = $4;
  }
 }
 $5 = HEAP32[12687]|0;
 return ($5|0);
}
function __ZNSt3__217__libcpp_sscanf_lEPKcP15__locale_structS1_z($0,$1,$2,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $varargs = $varargs|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 HEAP32[$3>>2] = $varargs;
 $4 = (___uselocale($1)|0);
 $5 = (_vsscanf($0,$2,$3)|0);
 $6 = ($4|0)==(0|0);
 if (!($6)) {
  (___uselocale($4)|0);
 }
 STACKTOP = sp;return ($5|0);
}
function __ZNSt3__26locale2id5__getEv($0) {
 $0 = $0|0;
 var $$byval_copy = 0, $$fca$1$gep = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $$byval_copy = sp + 32|0;
 $1 = sp + 24|0;
 $2 = sp;
 $3 = sp + 16|0;
 HEAP32[$3>>2] = (306);
 $$fca$1$gep = ((($3)) + 4|0);
 HEAP32[$$fca$1$gep>>2] = 0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$3+4>>2]|0;
 __ZNSt3__212_GLOBAL__N_111__fake_bindC2EMNS_6locale2idEFvvEPS3_($2,$$byval_copy,$0);
 $4 = HEAP32[$0>>2]|0;
 $5 = ($4|0)==(-1);
 if (!($5)) {
  HEAP32[$$byval_copy>>2] = $2;
  HEAP32[$1>>2] = $$byval_copy;
  __ZNSt3__211__call_onceERVmPvPFvS2_E($0,$1,307);
 }
 $6 = ((($0)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + -1)|0;
 STACKTOP = sp;return ($8|0);
}
function __ZNKSt3__26locale5__imp9use_facetEl($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNKSt3__26locale5__imp9has_facetEl($0,$1)|0);
 if ($2) {
  $4 = ((($0)) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (($5) + ($1<<2)|0);
  $7 = HEAP32[$6>>2]|0;
  return ($7|0);
 } else {
  $3 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($3);
  ___cxa_throw(($3|0),(24760|0),(231|0));
  // unreachable;
 }
 return (0)|0;
}
function __ZNKSt3__26locale5__imp9has_facetEl($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $3 = ((($0)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$2>>2]|0;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 2;
 $8 = ($7>>>0)>($1>>>0);
 if ($8) {
  $9 = $5;
  $10 = (($9) + ($1<<2)|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)!=(0|0);
  $13 = $12;
 } else {
  $13 = 0;
 }
 return ($13|0);
}
function __ZNSt3__26locale2id6__initEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[12688]|0;
 $2 = (($1) + 1)|0;
 HEAP32[12688] = $2;
 $3 = (($1) + 1)|0;
 $4 = ((($0)) + 4|0);
 HEAP32[$4>>2] = $3;
 return;
}
function __ZNSt3__212_GLOBAL__N_111__fake_bindC2EMNS_6locale2idEFvvEPS3_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$elt4 = 0, $$repack = 0, $$repack7 = 0, $$unpack = 0, $$unpack5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$unpack = HEAP32[$1>>2]|0;
 $$elt4 = ((($1)) + 4|0);
 $$unpack5 = HEAP32[$$elt4>>2]|0;
 HEAP32[$0>>2] = $2;
 $$repack = ((($0)) + 4|0);
 HEAP32[$$repack>>2] = $$unpack;
 $$repack7 = ((($0)) + 8|0);
 HEAP32[$$repack7>>2] = $$unpack5;
 return;
}
function __ZNSt3__217__call_once_proxyINS_5tupleIJONS_12_GLOBAL__N_111__fake_bindEEEEEEvPv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 __ZNKSt3__212_GLOBAL__N_111__fake_bindclEv($2);
 return;
}
function __ZNKSt3__212_GLOBAL__N_111__fake_bindclEv($0) {
 $0 = $0|0;
 var $$elt = 0, $$elt1 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $$elt = ((($0)) + 4|0);
 $$unpack = HEAP32[$$elt>>2]|0;
 $$elt1 = ((($0)) + 8|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 $2 = $$unpack2 >> 1;
 $3 = (($1) + ($2)|0);
 $4 = $$unpack2 & 1;
 $5 = ($4|0)==(0);
 if ($5) {
  $9 = $$unpack;
  $10 = $9;
 } else {
  $6 = HEAP32[$3>>2]|0;
  $7 = (($6) + ($$unpack)|0);
  $8 = HEAP32[$7>>2]|0;
  $10 = $8;
 }
 FUNCTION_TABLE_vi[$10 & 511]($3);
 return;
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i37 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i43 = 0, $$0$i$i33 = 0, $$018 = 0, $$1 = 0, $$119 = 0, $$121 = 0, $$2 = 0, $$pre = 0, $$sink61$index = 0, $$sink61$index3 = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0.0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
 var $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i = 0, $or$cond = 0, $phitmp$i = 0, $phitmp$i28 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $6 = sp + 160|0;
 $7 = sp + 231|0;
 $8 = sp + 230|0;
 $9 = sp + 216|0;
 $10 = sp + 204|0;
 $11 = sp + 200|0;
 $12 = sp;
 $13 = sp + 196|0;
 $14 = sp + 192|0;
 $15 = sp + 229|0;
 $16 = sp + 228|0;
 __ZNSt3__29__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($9,$3,$6,$7,$8);
 ;HEAP32[$10>>2]=0|0;HEAP32[$10+4>>2]=0|0;HEAP32[$10+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $17 = (($10) + ($$0$i$i<<2)|0);
  HEAP32[$17>>2] = 0;
  $18 = (($$0$i$i) + 1)|0;
  $$0$i$i = $18;
 }
 $19 = ((($10)) + 11|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = ($20<<24>>24)<(0);
 if ($21) {
  $22 = ((($10)) + 8|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $23 & 2147483647;
  $phitmp$i = (($24) + -1)|0;
  $25 = $phitmp$i;
 } else {
  $25 = 10;
 }
 __THREW__ = 0;
 invoke_viii(29,($10|0),($25|0),0);
 $26 = __THREW__; __THREW__ = 0;
 $27 = $26&1;
 if ($27) {
  $91 = ___cxa_find_matching_catch_2()|0;
  $92 = (getTempRet0() | 0);
  $$1 = $91;$$121 = $92;
 } else {
  $28 = HEAP8[$19>>0]|0;
  $29 = ($28<<24>>24)<(0);
  $30 = HEAP32[$10>>2]|0;
  $31 = $29 ? $30 : $10;
  HEAP32[$11>>2] = $31;
  HEAP32[$13>>2] = $12;
  HEAP32[$14>>2] = 0;
  HEAP8[$15>>0] = 1;
  HEAP8[$16>>0] = 69;
  $32 = ((($10)) + 4|0);
  $33 = ((($10)) + 8|0);
  $$pre = HEAP32[$1>>2]|0;
  $$018 = $31;$190 = $$pre;$35 = $$pre;
  L11: while(1) {
   $34 = ($35|0)==(0|0);
   if ($34) {
    $100 = 0;$161 = 0;$191 = 1;
   } else {
    $36 = ((($35)) + 12|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = ((($35)) + 16|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = ($37|0)==($39|0);
    if ($40) {
     $41 = HEAP32[$35>>2]|0;
     $42 = ((($41)) + 36|0);
     $43 = HEAP32[$42>>2]|0;
     __THREW__ = 0;
     $44 = (invoke_ii($43|0,($35|0))|0);
     $45 = __THREW__; __THREW__ = 0;
     $46 = $45&1;
     if ($46) {
      label = 29;
      break;
     } else {
      $$0$i$i$i$i = $44;
     }
    } else {
     $47 = HEAP8[$37>>0]|0;
     $48 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($47)|0);
     $$0$i$i$i$i = $48;
    }
    $49 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
    $50 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i,$49)|0);
    if ($50) {
     HEAP32[$1>>2] = 0;
     $100 = 0;$161 = 0;$191 = 1;
    } else {
     $100 = $35;$161 = $190;$191 = 0;
    }
   }
   $51 = HEAP32[$2>>2]|0;
   $52 = ($51|0)==(0|0);
   do {
    if ($52) {
     label = 20;
    } else {
     $53 = ((($51)) + 12|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = ((($51)) + 16|0);
     $56 = HEAP32[$55>>2]|0;
     $57 = ($54|0)==($56|0);
     if ($57) {
      $58 = HEAP32[$51>>2]|0;
      $59 = ((($58)) + 36|0);
      $60 = HEAP32[$59>>2]|0;
      __THREW__ = 0;
      $61 = (invoke_ii($60|0,($51|0))|0);
      $62 = __THREW__; __THREW__ = 0;
      $63 = $62&1;
      if ($63) {
       label = 29;
       break L11;
      } else {
       $$0$i$i2$i$i = $61;
      }
     } else {
      $64 = HEAP8[$54>>0]|0;
      $65 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($64)|0);
      $$0$i$i2$i$i = $65;
     }
     $66 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
     $67 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i,$66)|0);
     if ($67) {
      HEAP32[$2>>2] = 0;
      label = 20;
      break;
     } else {
      if ($191) {
       $192 = $51;
       break;
      } else {
       $$2 = $$018;$172 = $51;
       label = 41;
       break L11;
      }
     }
    }
   } while(0);
   if ((label|0) == 20) {
    label = 0;
    if ($191) {
     $$2 = $$018;$172 = 0;
     label = 41;
     break;
    } else {
     $192 = 0;
    }
   }
   $68 = HEAP32[$11>>2]|0;
   $69 = HEAP8[$19>>0]|0;
   $70 = ($69<<24>>24)<(0);
   $71 = HEAP32[$32>>2]|0;
   $72 = $69&255;
   $73 = $70 ? $71 : $72;
   $74 = (($$018) + ($73)|0);
   $75 = ($68|0)==($74|0);
   if ($75) {
    $76 = $73 << 1;
    __THREW__ = 0;
    invoke_viii(29,($10|0),($76|0),0);
    $77 = __THREW__; __THREW__ = 0;
    $78 = $77&1;
    if ($78) {
     label = 31;
     break;
    }
    $79 = HEAP8[$19>>0]|0;
    $80 = ($79<<24>>24)<(0);
    if ($80) {
     $81 = HEAP32[$33>>2]|0;
     $82 = $81 & 2147483647;
     $phitmp$i28 = (($82) + -1)|0;
     $83 = $phitmp$i28;
    } else {
     $83 = 10;
    }
    __THREW__ = 0;
    invoke_viii(29,($10|0),($83|0),0);
    $84 = __THREW__; __THREW__ = 0;
    $85 = $84&1;
    if ($85) {
     label = 31;
     break;
    }
    $86 = HEAP8[$19>>0]|0;
    $87 = ($86<<24>>24)<(0);
    $88 = HEAP32[$10>>2]|0;
    $89 = $87 ? $88 : $10;
    $90 = (($89) + ($73)|0);
    HEAP32[$11>>2] = $90;
    $$119 = $89;
   } else {
    $$119 = $$018;
   }
   $99 = ((($100)) + 12|0);
   $101 = HEAP32[$99>>2]|0;
   $102 = ((($100)) + 16|0);
   $103 = HEAP32[$102>>2]|0;
   $104 = ($101|0)==($103|0);
   if ($104) {
    $105 = HEAP32[$100>>2]|0;
    $106 = ((($105)) + 36|0);
    $107 = HEAP32[$106>>2]|0;
    __THREW__ = 0;
    $108 = (invoke_ii($107|0,($100|0))|0);
    $109 = __THREW__; __THREW__ = 0;
    $110 = $109&1;
    if ($110) {
     label = 29;
     break;
    } else {
     $$0$i$i33 = $108;
    }
   } else {
    $111 = HEAP8[$101>>0]|0;
    $112 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($111)|0);
    $$0$i$i33 = $112;
   }
   $113 = $$0$i$i33&255;
   $114 = HEAP8[$7>>0]|0;
   $115 = HEAP8[$8>>0]|0;
   __THREW__ = 0;
   $116 = (invoke_iiiiiiiiiiiii(1,($113|0),($15|0),($16|0),($$119|0),($11|0),($114|0),($115|0),($9|0),($12|0),($13|0),($14|0),($6|0))|0);
   $117 = __THREW__; __THREW__ = 0;
   $118 = $117&1;
   if ($118) {
    label = 29;
    break;
   }
   $119 = ($116|0)==(0);
   if (!($119)) {
    $$2 = $$119;$172 = $192;
    label = 41;
    break;
   }
   $120 = HEAP32[$99>>2]|0;
   $121 = HEAP32[$102>>2]|0;
   $122 = ($120|0)==($121|0);
   if ($122) {
    $123 = HEAP32[$100>>2]|0;
    $124 = ((($123)) + 40|0);
    $125 = HEAP32[$124>>2]|0;
    __THREW__ = 0;
    (invoke_ii($125|0,($100|0))|0);
    $126 = __THREW__; __THREW__ = 0;
    $127 = $126&1;
    if ($127) {
     label = 29;
     break;
    }
   } else {
    $128 = ((($120)) + 1|0);
    HEAP32[$99>>2] = $128;
    $129 = HEAP8[$120>>0]|0;
    (__ZNSt3__211char_traitsIcE11to_int_typeEc($129)|0);
   }
   $$018 = $$119;$190 = $161;$35 = $100;
  }
  if ((label|0) == 29) {
   $93 = ___cxa_find_matching_catch_2()|0;
   $94 = (getTempRet0() | 0);
   $$sink61$index = $93;$$sink61$index3 = $94;
  }
  else if ((label|0) == 31) {
   $97 = ___cxa_find_matching_catch_2()|0;
   $98 = (getTempRet0() | 0);
   $$sink61$index = $97;$$sink61$index3 = $98;
  }
  else if ((label|0) == 41) {
   $130 = ((($9)) + 11|0);
   $131 = HEAP8[$130>>0]|0;
   $132 = ($131<<24>>24)<(0);
   $133 = ((($9)) + 4|0);
   $134 = HEAP32[$133>>2]|0;
   $135 = $131&255;
   $136 = $132 ? $134 : $135;
   $137 = ($136|0)==(0);
   $138 = HEAP8[$15>>0]|0;
   $139 = ($138<<24>>24)==(0);
   $or$cond = $137 | $139;
   if (!($or$cond)) {
    $140 = HEAP32[$13>>2]|0;
    $141 = $140;
    $142 = $12;
    $143 = (($141) - ($142))|0;
    $144 = ($143|0)<(160);
    if ($144) {
     $145 = HEAP32[$14>>2]|0;
     $146 = ((($140)) + 4|0);
     HEAP32[$13>>2] = $146;
     HEAP32[$140>>2] = $145;
    }
   }
   $147 = HEAP32[$11>>2]|0;
   __THREW__ = 0;
   $148 = (+invoke_diii(3,($$2|0),($147|0),($4|0)));
   $149 = __THREW__; __THREW__ = 0;
   $150 = $149&1;
   L58: do {
    if (!($150)) {
     HEAPF64[$5>>3] = $148;
     $151 = HEAP32[$13>>2]|0;
     __THREW__ = 0;
     invoke_viiii(30,($9|0),($12|0),($151|0),($4|0));
     $152 = __THREW__; __THREW__ = 0;
     $153 = $152&1;
     if (!($153)) {
      $154 = ($100|0)==(0|0);
      if ($154) {
       $193 = 1;
      } else {
       $155 = ((($100)) + 12|0);
       $156 = HEAP32[$155>>2]|0;
       $157 = ((($100)) + 16|0);
       $158 = HEAP32[$157>>2]|0;
       $159 = ($156|0)==($158|0);
       if ($159) {
        $160 = HEAP32[$161>>2]|0;
        $162 = ((($160)) + 36|0);
        $163 = HEAP32[$162>>2]|0;
        __THREW__ = 0;
        $164 = (invoke_ii($163|0,($100|0))|0);
        $165 = __THREW__; __THREW__ = 0;
        $166 = $165&1;
        if ($166) {
         break;
        } else {
         $$0$i$i$i$i37 = $164;
        }
       } else {
        $167 = HEAP8[$156>>0]|0;
        $168 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($167)|0);
        $$0$i$i$i$i37 = $168;
       }
       $169 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
       $170 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i37,$169)|0);
       if ($170) {
        HEAP32[$1>>2] = 0;
        $193 = 1;
       } else {
        $193 = 0;
       }
      }
      $171 = ($172|0)==(0|0);
      do {
       if ($171) {
        label = 58;
       } else {
        $173 = ((($172)) + 12|0);
        $174 = HEAP32[$173>>2]|0;
        $175 = ((($172)) + 16|0);
        $176 = HEAP32[$175>>2]|0;
        $177 = ($174|0)==($176|0);
        if ($177) {
         $178 = HEAP32[$172>>2]|0;
         $179 = ((($178)) + 36|0);
         $180 = HEAP32[$179>>2]|0;
         __THREW__ = 0;
         $181 = (invoke_ii($180|0,($172|0))|0);
         $182 = __THREW__; __THREW__ = 0;
         $183 = $182&1;
         if ($183) {
          break L58;
         } else {
          $$0$i$i2$i$i43 = $181;
         }
        } else {
         $184 = HEAP8[$174>>0]|0;
         $185 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($184)|0);
         $$0$i$i2$i$i43 = $185;
        }
        $186 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
        $187 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i43,$186)|0);
        if ($187) {
         HEAP32[$2>>2] = 0;
         label = 58;
         break;
        } else {
         if ($193) {
          break;
         } else {
          label = 60;
          break;
         }
        }
       }
      } while(0);
      if ((label|0) == 58) {
       if ($193) {
        label = 60;
       }
      }
      if ((label|0) == 60) {
       $188 = HEAP32[$4>>2]|0;
       $189 = $188 | 2;
       HEAP32[$4>>2] = $189;
      }
      $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
      STACKTOP = sp;return ($$sroa$0$0$copyload|0);
     }
    }
   } while(0);
   $95 = ___cxa_find_matching_catch_2()|0;
   $96 = (getTempRet0() | 0);
   $$sink61$index = $95;$$sink61$index3 = $96;
  }
  $$1 = $$sink61$index;$$121 = $$sink61$index3;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 ___resumeException($$1|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__29__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$sink11$index = 0, $$sink11$index2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $5 = sp;
 __ZNKSt3__28ios_base6getlocEv($5,$1);
 __THREW__ = 0;
 $6 = (invoke_iii(37,($5|0),(50740|0))|0);
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  label = 8;
 } else {
  $9 = HEAP32[$6>>2]|0;
  $10 = ((($9)) + 32|0);
  $11 = HEAP32[$10>>2]|0;
  __THREW__ = 0;
  (invoke_iiiii($11|0,($6|0),(20912|0),((20944)|0),($2|0))|0);
  $12 = __THREW__; __THREW__ = 0;
  $13 = $12&1;
  if ($13) {
   label = 8;
  } else {
   __THREW__ = 0;
   $14 = (invoke_iii(37,($5|0),(50756|0))|0);
   $15 = __THREW__; __THREW__ = 0;
   $16 = $15&1;
   if (!($16)) {
    $17 = HEAP32[$14>>2]|0;
    $18 = ((($17)) + 12|0);
    $19 = HEAP32[$18>>2]|0;
    __THREW__ = 0;
    $20 = (invoke_ii($19|0,($14|0))|0);
    $21 = __THREW__; __THREW__ = 0;
    $22 = $21&1;
    if (!($22)) {
     HEAP8[$3>>0] = $20;
     $23 = HEAP32[$14>>2]|0;
     $24 = ((($23)) + 16|0);
     $25 = HEAP32[$24>>2]|0;
     __THREW__ = 0;
     $26 = (invoke_ii($25|0,($14|0))|0);
     $27 = __THREW__; __THREW__ = 0;
     $28 = $27&1;
     if (!($28)) {
      HEAP8[$4>>0] = $26;
      $29 = HEAP32[$14>>2]|0;
      $30 = ((($29)) + 20|0);
      $31 = HEAP32[$30>>2]|0;
      __THREW__ = 0;
      invoke_vii($31|0,($0|0),($14|0));
      $32 = __THREW__; __THREW__ = 0;
      $33 = $32&1;
      if (!($33)) {
       __ZNSt3__26localeD2Ev($5);
       STACKTOP = sp;return;
      }
     }
    }
   }
   $36 = ___cxa_find_matching_catch_2()|0;
   $37 = (getTempRet0() | 0);
   $$sink11$index = $36;$$sink11$index2 = $37;
  }
 }
 if ((label|0) == 8) {
  $34 = ___cxa_find_matching_catch_2()|0;
  $35 = (getTempRet0() | 0);
  $$sink11$index = $34;$$sink11$index2 = $35;
 }
 __ZNSt3__26localeD2Ev($5);
 ___resumeException($$sink11$index|0);
 // unreachable;
}
function __ZNSt3__29__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 var $$0$i$add = 0, $$0$i$idx = 0, $$0$i$ptr = 0, $$0$lcssa$i = 0, $$2 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $12 = ($0<<24>>24)==($5<<24>>24);
 L1: do {
  if ($12) {
   $13 = HEAP8[$1>>0]|0;
   $14 = ($13<<24>>24)==(0);
   if ($14) {
    $$2 = -1;
   } else {
    HEAP8[$1>>0] = 0;
    $15 = HEAP32[$4>>2]|0;
    $16 = ((($15)) + 1|0);
    HEAP32[$4>>2] = $16;
    HEAP8[$15>>0] = 46;
    $17 = ((($7)) + 11|0);
    $18 = HEAP8[$17>>0]|0;
    $19 = ($18<<24>>24)<(0);
    $20 = ((($7)) + 4|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = $18&255;
    $23 = $19 ? $21 : $22;
    $24 = ($23|0)==(0);
    if ($24) {
     $$2 = 0;
    } else {
     $25 = HEAP32[$9>>2]|0;
     $26 = $25;
     $27 = $8;
     $28 = (($26) - ($27))|0;
     $29 = ($28|0)<(160);
     if ($29) {
      $30 = HEAP32[$10>>2]|0;
      $31 = ((($25)) + 4|0);
      HEAP32[$9>>2] = $31;
      HEAP32[$25>>2] = $30;
      $$2 = 0;
     } else {
      $$2 = 0;
     }
    }
   }
  } else {
   $32 = ($0<<24>>24)==($6<<24>>24);
   if ($32) {
    $33 = ((($7)) + 11|0);
    $34 = HEAP8[$33>>0]|0;
    $35 = ($34<<24>>24)<(0);
    $36 = ((($7)) + 4|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = $34&255;
    $39 = $35 ? $37 : $38;
    $40 = ($39|0)==(0);
    if (!($40)) {
     $41 = HEAP8[$1>>0]|0;
     $42 = ($41<<24>>24)==(0);
     if ($42) {
      $$2 = -1;
      break;
     }
     $43 = HEAP32[$9>>2]|0;
     $44 = $43;
     $45 = $8;
     $46 = (($44) - ($45))|0;
     $47 = ($46|0)<(160);
     if (!($47)) {
      $$2 = 0;
      break;
     }
     $48 = HEAP32[$10>>2]|0;
     $49 = ((($43)) + 4|0);
     HEAP32[$9>>2] = $49;
     HEAP32[$43>>2] = $48;
     HEAP32[$10>>2] = 0;
     $$2 = 0;
     break;
    }
   }
   $50 = ((($11)) + 32|0);
   $$0$i$idx = 0;
   while(1) {
    $$0$i$ptr = (($11) + ($$0$i$idx)|0);
    $51 = ($$0$i$idx|0)==(32);
    if ($51) {
     $$0$lcssa$i = $50;
     break;
    }
    $52 = HEAP8[$$0$i$ptr>>0]|0;
    $53 = ($52<<24>>24)==($0<<24>>24);
    $$0$i$add = (($$0$i$idx) + 1)|0;
    if ($53) {
     $$0$lcssa$i = $$0$i$ptr;
     break;
    } else {
     $$0$i$idx = $$0$i$add;
    }
   }
   $54 = $$0$lcssa$i;
   $55 = $11;
   $56 = (($54) - ($55))|0;
   $57 = ($56|0)>(31);
   if ($57) {
    $$2 = -1;
   } else {
    $58 = (20912 + ($56)|0);
    $59 = HEAP8[$58>>0]|0;
    switch ($56|0) {
    case 24: case 25:  {
     $60 = HEAP32[$4>>2]|0;
     $61 = ($60|0)==($3|0);
     if (!($61)) {
      $62 = ((($60)) + -1|0);
      $63 = HEAP8[$62>>0]|0;
      $64 = $63 & 95;
      $65 = HEAP8[$2>>0]|0;
      $66 = $65 & 127;
      $67 = ($64<<24>>24)==($66<<24>>24);
      if (!($67)) {
       $$2 = -1;
       break L1;
      }
     }
     $68 = ((($60)) + 1|0);
     HEAP32[$4>>2] = $68;
     HEAP8[$60>>0] = $59;
     $$2 = 0;
     break L1;
     break;
    }
    case 23: case 22:  {
     HEAP8[$2>>0] = 80;
     $69 = HEAP32[$4>>2]|0;
     $70 = ((($69)) + 1|0);
     HEAP32[$4>>2] = $70;
     HEAP8[$69>>0] = $59;
     $$2 = 0;
     break L1;
     break;
    }
    default: {
     $71 = $59 & 95;
     $72 = $71&255;
     $73 = HEAP8[$2>>0]|0;
     $74 = $73 << 24 >> 24;
     $75 = ($72|0)==($74|0);
     if ($75) {
      $76 = $72 | 128;
      $77 = $76&255;
      HEAP8[$2>>0] = $77;
      $78 = HEAP8[$1>>0]|0;
      $79 = ($78<<24>>24)==(0);
      if (!($79)) {
       HEAP8[$1>>0] = 0;
       $80 = ((($7)) + 11|0);
       $81 = HEAP8[$80>>0]|0;
       $82 = ($81<<24>>24)<(0);
       $83 = ((($7)) + 4|0);
       $84 = HEAP32[$83>>2]|0;
       $85 = $81&255;
       $86 = $82 ? $84 : $85;
       $87 = ($86|0)==(0);
       if (!($87)) {
        $88 = HEAP32[$9>>2]|0;
        $89 = $88;
        $90 = $8;
        $91 = (($89) - ($90))|0;
        $92 = ($91|0)<(160);
        if ($92) {
         $93 = HEAP32[$10>>2]|0;
         $94 = ((($88)) + 4|0);
         HEAP32[$9>>2] = $94;
         HEAP32[$88>>2] = $93;
        }
       }
      }
     }
     $95 = HEAP32[$4>>2]|0;
     $96 = ((($95)) + 1|0);
     HEAP32[$4>>2] = $96;
     HEAP8[$95>>0] = $59;
     $97 = ($56|0)>(21);
     if ($97) {
      $$2 = 0;
      break L1;
     }
     $98 = HEAP32[$10>>2]|0;
     $99 = (($98) + 1)|0;
     HEAP32[$10>>2] = $99;
     $$2 = 0;
     break L1;
    }
    }
   }
  }
 } while(0);
 return ($$2|0);
}
function __ZNSt3__215__num_get_floatIeEET_PKcS3_Rj($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0.0, $$0$ph = 0.0, $$1 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = ($0|0)==($1|0);
 if ($4) {
  HEAP32[$2>>2] = 4;
  $$1 = 0.0;
 } else {
  $5 = (___errno_location()|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (___errno_location()|0);
  HEAP32[$7>>2] = 0;
  $8 = (__ZNSt3__26__clocEv()|0);
  $9 = (+_strtold_l($0,$3,$8));
  $10 = (___errno_location()|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==(0);
  if ($12) {
   $13 = (___errno_location()|0);
   HEAP32[$13>>2] = $6;
  }
  $14 = HEAP32[$3>>2]|0;
  $15 = ($14|0)==($1|0);
  if ($15) {
   $16 = ($11|0)==(34);
   if ($16) {
    $$0$ph = $9;
    label = 6;
   } else {
    $$0 = $9;
   }
  } else {
   $$0$ph = 0.0;
   label = 6;
  }
  if ((label|0) == 6) {
   HEAP32[$2>>2] = 4;
   $$0 = $$0$ph;
  }
  $$1 = $$0;
 }
 STACKTOP = sp;return (+$$1);
}
function __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0$i$i = 0, $$029 = 0, $$030 = 0, $$07$i$i = 0, $$pre = 0, $$pre$phiZ2D = 0, $$pre40 = 0, $$pre41 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond32 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 11|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)<(0);
 $7 = ((($0)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $5&255;
 $10 = $6 ? $8 : $9;
 $11 = ($10|0)==(0);
 do {
  if (!($11)) {
   $12 = ($1|0)==($2|0);
   if ($12) {
    $$pre$phiZ2D = $9;$19 = $5;$23 = $8;
   } else {
    $$0$i$i = $2;$$07$i$i = $1;
    while(1) {
     $13 = ((($$0$i$i)) + -4|0);
     $14 = ($$07$i$i>>>0)<($13>>>0);
     if (!($14)) {
      break;
     }
     $15 = HEAP32[$$07$i$i>>2]|0;
     $16 = HEAP32[$13>>2]|0;
     HEAP32[$$07$i$i>>2] = $16;
     HEAP32[$13>>2] = $15;
     $17 = ((($$07$i$i)) + 4|0);
     $$0$i$i = $13;$$07$i$i = $17;
    }
    $$pre = HEAP8[$4>>0]|0;
    $$pre40 = HEAP32[$7>>2]|0;
    $$pre41 = $$pre&255;
    $$pre$phiZ2D = $$pre41;$19 = $$pre;$23 = $$pre40;
   }
   $18 = ($19<<24>>24)<(0);
   $20 = HEAP32[$0>>2]|0;
   $21 = $18 ? $20 : $0;
   $22 = $18 ? $23 : $$pre$phiZ2D;
   $24 = (($21) + ($22)|0);
   $25 = ((($2)) + -4|0);
   $26 = $24;
   $$029 = $1;$$030 = $21;
   while(1) {
    $27 = ($$029>>>0)<($25>>>0);
    $28 = HEAP8[$$030>>0]|0;
    $29 = ($28<<24>>24)>(0);
    $30 = ($28<<24>>24)!=(127);
    $or$cond32 = $29 & $30;
    if (!($27)) {
     break;
    }
    if ($or$cond32) {
     $31 = $28 << 24 >> 24;
     $32 = HEAP32[$$029>>2]|0;
     $33 = ($32|0)==($31|0);
     if (!($33)) {
      label = 11;
      break;
     }
    }
    $34 = $$030;
    $35 = (($26) - ($34))|0;
    $36 = ($35|0)>(1);
    $37 = ((($$030)) + 1|0);
    $spec$select = $36 ? $37 : $$030;
    $38 = ((($$029)) + 4|0);
    $$029 = $38;$$030 = $spec$select;
   }
   if ((label|0) == 11) {
    HEAP32[$3>>2] = 4;
    break;
   }
   if ($or$cond32) {
    $39 = $28 << 24 >> 24;
    $40 = HEAP32[$25>>2]|0;
    $41 = (($40) + -1)|0;
    $42 = ($41>>>0)<($39>>>0);
    if (!($42)) {
     HEAP32[$3>>2] = 4;
    }
   }
  }
 } while(0);
 return;
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i37 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i43 = 0, $$0$i$i33 = 0, $$018 = 0, $$1 = 0, $$119 = 0, $$121 = 0, $$2 = 0, $$pre = 0, $$sink61$index = 0, $$sink61$index3 = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0.0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
 var $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i = 0, $or$cond = 0, $phitmp$i = 0, $phitmp$i28 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $6 = sp + 160|0;
 $7 = sp + 231|0;
 $8 = sp + 230|0;
 $9 = sp + 216|0;
 $10 = sp + 204|0;
 $11 = sp + 200|0;
 $12 = sp;
 $13 = sp + 196|0;
 $14 = sp + 192|0;
 $15 = sp + 229|0;
 $16 = sp + 228|0;
 __ZNSt3__29__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($9,$3,$6,$7,$8);
 ;HEAP32[$10>>2]=0|0;HEAP32[$10+4>>2]=0|0;HEAP32[$10+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $17 = (($10) + ($$0$i$i<<2)|0);
  HEAP32[$17>>2] = 0;
  $18 = (($$0$i$i) + 1)|0;
  $$0$i$i = $18;
 }
 $19 = ((($10)) + 11|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = ($20<<24>>24)<(0);
 if ($21) {
  $22 = ((($10)) + 8|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $23 & 2147483647;
  $phitmp$i = (($24) + -1)|0;
  $25 = $phitmp$i;
 } else {
  $25 = 10;
 }
 __THREW__ = 0;
 invoke_viii(29,($10|0),($25|0),0);
 $26 = __THREW__; __THREW__ = 0;
 $27 = $26&1;
 if ($27) {
  $91 = ___cxa_find_matching_catch_2()|0;
  $92 = (getTempRet0() | 0);
  $$1 = $91;$$121 = $92;
 } else {
  $28 = HEAP8[$19>>0]|0;
  $29 = ($28<<24>>24)<(0);
  $30 = HEAP32[$10>>2]|0;
  $31 = $29 ? $30 : $10;
  HEAP32[$11>>2] = $31;
  HEAP32[$13>>2] = $12;
  HEAP32[$14>>2] = 0;
  HEAP8[$15>>0] = 1;
  HEAP8[$16>>0] = 69;
  $32 = ((($10)) + 4|0);
  $33 = ((($10)) + 8|0);
  $$pre = HEAP32[$1>>2]|0;
  $$018 = $31;$190 = $$pre;$35 = $$pre;
  L11: while(1) {
   $34 = ($35|0)==(0|0);
   if ($34) {
    $100 = 0;$161 = 0;$191 = 1;
   } else {
    $36 = ((($35)) + 12|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = ((($35)) + 16|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = ($37|0)==($39|0);
    if ($40) {
     $41 = HEAP32[$35>>2]|0;
     $42 = ((($41)) + 36|0);
     $43 = HEAP32[$42>>2]|0;
     __THREW__ = 0;
     $44 = (invoke_ii($43|0,($35|0))|0);
     $45 = __THREW__; __THREW__ = 0;
     $46 = $45&1;
     if ($46) {
      label = 29;
      break;
     } else {
      $$0$i$i$i$i = $44;
     }
    } else {
     $47 = HEAP8[$37>>0]|0;
     $48 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($47)|0);
     $$0$i$i$i$i = $48;
    }
    $49 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
    $50 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i,$49)|0);
    if ($50) {
     HEAP32[$1>>2] = 0;
     $100 = 0;$161 = 0;$191 = 1;
    } else {
     $100 = $35;$161 = $190;$191 = 0;
    }
   }
   $51 = HEAP32[$2>>2]|0;
   $52 = ($51|0)==(0|0);
   do {
    if ($52) {
     label = 20;
    } else {
     $53 = ((($51)) + 12|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = ((($51)) + 16|0);
     $56 = HEAP32[$55>>2]|0;
     $57 = ($54|0)==($56|0);
     if ($57) {
      $58 = HEAP32[$51>>2]|0;
      $59 = ((($58)) + 36|0);
      $60 = HEAP32[$59>>2]|0;
      __THREW__ = 0;
      $61 = (invoke_ii($60|0,($51|0))|0);
      $62 = __THREW__; __THREW__ = 0;
      $63 = $62&1;
      if ($63) {
       label = 29;
       break L11;
      } else {
       $$0$i$i2$i$i = $61;
      }
     } else {
      $64 = HEAP8[$54>>0]|0;
      $65 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($64)|0);
      $$0$i$i2$i$i = $65;
     }
     $66 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
     $67 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i,$66)|0);
     if ($67) {
      HEAP32[$2>>2] = 0;
      label = 20;
      break;
     } else {
      if ($191) {
       $192 = $51;
       break;
      } else {
       $$2 = $$018;$172 = $51;
       label = 41;
       break L11;
      }
     }
    }
   } while(0);
   if ((label|0) == 20) {
    label = 0;
    if ($191) {
     $$2 = $$018;$172 = 0;
     label = 41;
     break;
    } else {
     $192 = 0;
    }
   }
   $68 = HEAP32[$11>>2]|0;
   $69 = HEAP8[$19>>0]|0;
   $70 = ($69<<24>>24)<(0);
   $71 = HEAP32[$32>>2]|0;
   $72 = $69&255;
   $73 = $70 ? $71 : $72;
   $74 = (($$018) + ($73)|0);
   $75 = ($68|0)==($74|0);
   if ($75) {
    $76 = $73 << 1;
    __THREW__ = 0;
    invoke_viii(29,($10|0),($76|0),0);
    $77 = __THREW__; __THREW__ = 0;
    $78 = $77&1;
    if ($78) {
     label = 31;
     break;
    }
    $79 = HEAP8[$19>>0]|0;
    $80 = ($79<<24>>24)<(0);
    if ($80) {
     $81 = HEAP32[$33>>2]|0;
     $82 = $81 & 2147483647;
     $phitmp$i28 = (($82) + -1)|0;
     $83 = $phitmp$i28;
    } else {
     $83 = 10;
    }
    __THREW__ = 0;
    invoke_viii(29,($10|0),($83|0),0);
    $84 = __THREW__; __THREW__ = 0;
    $85 = $84&1;
    if ($85) {
     label = 31;
     break;
    }
    $86 = HEAP8[$19>>0]|0;
    $87 = ($86<<24>>24)<(0);
    $88 = HEAP32[$10>>2]|0;
    $89 = $87 ? $88 : $10;
    $90 = (($89) + ($73)|0);
    HEAP32[$11>>2] = $90;
    $$119 = $89;
   } else {
    $$119 = $$018;
   }
   $99 = ((($100)) + 12|0);
   $101 = HEAP32[$99>>2]|0;
   $102 = ((($100)) + 16|0);
   $103 = HEAP32[$102>>2]|0;
   $104 = ($101|0)==($103|0);
   if ($104) {
    $105 = HEAP32[$100>>2]|0;
    $106 = ((($105)) + 36|0);
    $107 = HEAP32[$106>>2]|0;
    __THREW__ = 0;
    $108 = (invoke_ii($107|0,($100|0))|0);
    $109 = __THREW__; __THREW__ = 0;
    $110 = $109&1;
    if ($110) {
     label = 29;
     break;
    } else {
     $$0$i$i33 = $108;
    }
   } else {
    $111 = HEAP8[$101>>0]|0;
    $112 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($111)|0);
    $$0$i$i33 = $112;
   }
   $113 = $$0$i$i33&255;
   $114 = HEAP8[$7>>0]|0;
   $115 = HEAP8[$8>>0]|0;
   __THREW__ = 0;
   $116 = (invoke_iiiiiiiiiiiii(1,($113|0),($15|0),($16|0),($$119|0),($11|0),($114|0),($115|0),($9|0),($12|0),($13|0),($14|0),($6|0))|0);
   $117 = __THREW__; __THREW__ = 0;
   $118 = $117&1;
   if ($118) {
    label = 29;
    break;
   }
   $119 = ($116|0)==(0);
   if (!($119)) {
    $$2 = $$119;$172 = $192;
    label = 41;
    break;
   }
   $120 = HEAP32[$99>>2]|0;
   $121 = HEAP32[$102>>2]|0;
   $122 = ($120|0)==($121|0);
   if ($122) {
    $123 = HEAP32[$100>>2]|0;
    $124 = ((($123)) + 40|0);
    $125 = HEAP32[$124>>2]|0;
    __THREW__ = 0;
    (invoke_ii($125|0,($100|0))|0);
    $126 = __THREW__; __THREW__ = 0;
    $127 = $126&1;
    if ($127) {
     label = 29;
     break;
    }
   } else {
    $128 = ((($120)) + 1|0);
    HEAP32[$99>>2] = $128;
    $129 = HEAP8[$120>>0]|0;
    (__ZNSt3__211char_traitsIcE11to_int_typeEc($129)|0);
   }
   $$018 = $$119;$190 = $161;$35 = $100;
  }
  if ((label|0) == 29) {
   $93 = ___cxa_find_matching_catch_2()|0;
   $94 = (getTempRet0() | 0);
   $$sink61$index = $93;$$sink61$index3 = $94;
  }
  else if ((label|0) == 31) {
   $97 = ___cxa_find_matching_catch_2()|0;
   $98 = (getTempRet0() | 0);
   $$sink61$index = $97;$$sink61$index3 = $98;
  }
  else if ((label|0) == 41) {
   $130 = ((($9)) + 11|0);
   $131 = HEAP8[$130>>0]|0;
   $132 = ($131<<24>>24)<(0);
   $133 = ((($9)) + 4|0);
   $134 = HEAP32[$133>>2]|0;
   $135 = $131&255;
   $136 = $132 ? $134 : $135;
   $137 = ($136|0)==(0);
   $138 = HEAP8[$15>>0]|0;
   $139 = ($138<<24>>24)==(0);
   $or$cond = $137 | $139;
   if (!($or$cond)) {
    $140 = HEAP32[$13>>2]|0;
    $141 = $140;
    $142 = $12;
    $143 = (($141) - ($142))|0;
    $144 = ($143|0)<(160);
    if ($144) {
     $145 = HEAP32[$14>>2]|0;
     $146 = ((($140)) + 4|0);
     HEAP32[$13>>2] = $146;
     HEAP32[$140>>2] = $145;
    }
   }
   $147 = HEAP32[$11>>2]|0;
   __THREW__ = 0;
   $148 = (+invoke_diii(4,($$2|0),($147|0),($4|0)));
   $149 = __THREW__; __THREW__ = 0;
   $150 = $149&1;
   L58: do {
    if (!($150)) {
     HEAPF64[$5>>3] = $148;
     $151 = HEAP32[$13>>2]|0;
     __THREW__ = 0;
     invoke_viiii(30,($9|0),($12|0),($151|0),($4|0));
     $152 = __THREW__; __THREW__ = 0;
     $153 = $152&1;
     if (!($153)) {
      $154 = ($100|0)==(0|0);
      if ($154) {
       $193 = 1;
      } else {
       $155 = ((($100)) + 12|0);
       $156 = HEAP32[$155>>2]|0;
       $157 = ((($100)) + 16|0);
       $158 = HEAP32[$157>>2]|0;
       $159 = ($156|0)==($158|0);
       if ($159) {
        $160 = HEAP32[$161>>2]|0;
        $162 = ((($160)) + 36|0);
        $163 = HEAP32[$162>>2]|0;
        __THREW__ = 0;
        $164 = (invoke_ii($163|0,($100|0))|0);
        $165 = __THREW__; __THREW__ = 0;
        $166 = $165&1;
        if ($166) {
         break;
        } else {
         $$0$i$i$i$i37 = $164;
        }
       } else {
        $167 = HEAP8[$156>>0]|0;
        $168 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($167)|0);
        $$0$i$i$i$i37 = $168;
       }
       $169 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
       $170 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i37,$169)|0);
       if ($170) {
        HEAP32[$1>>2] = 0;
        $193 = 1;
       } else {
        $193 = 0;
       }
      }
      $171 = ($172|0)==(0|0);
      do {
       if ($171) {
        label = 58;
       } else {
        $173 = ((($172)) + 12|0);
        $174 = HEAP32[$173>>2]|0;
        $175 = ((($172)) + 16|0);
        $176 = HEAP32[$175>>2]|0;
        $177 = ($174|0)==($176|0);
        if ($177) {
         $178 = HEAP32[$172>>2]|0;
         $179 = ((($178)) + 36|0);
         $180 = HEAP32[$179>>2]|0;
         __THREW__ = 0;
         $181 = (invoke_ii($180|0,($172|0))|0);
         $182 = __THREW__; __THREW__ = 0;
         $183 = $182&1;
         if ($183) {
          break L58;
         } else {
          $$0$i$i2$i$i43 = $181;
         }
        } else {
         $184 = HEAP8[$174>>0]|0;
         $185 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($184)|0);
         $$0$i$i2$i$i43 = $185;
        }
        $186 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
        $187 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i43,$186)|0);
        if ($187) {
         HEAP32[$2>>2] = 0;
         label = 58;
         break;
        } else {
         if ($193) {
          break;
         } else {
          label = 60;
          break;
         }
        }
       }
      } while(0);
      if ((label|0) == 58) {
       if ($193) {
        label = 60;
       }
      }
      if ((label|0) == 60) {
       $188 = HEAP32[$4>>2]|0;
       $189 = $188 | 2;
       HEAP32[$4>>2] = $189;
      }
      $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
      STACKTOP = sp;return ($$sroa$0$0$copyload|0);
     }
    }
   } while(0);
   $95 = ___cxa_find_matching_catch_2()|0;
   $96 = (getTempRet0() | 0);
   $$sink61$index = $95;$$sink61$index3 = $96;
  }
  $$1 = $$sink61$index;$$121 = $$sink61$index3;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 ___resumeException($$1|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__215__num_get_floatIdEET_PKcS3_Rj($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0.0, $$0$ph = 0.0, $$1 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = ($0|0)==($1|0);
 if ($4) {
  HEAP32[$2>>2] = 4;
  $$1 = 0.0;
 } else {
  $5 = (___errno_location()|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (___errno_location()|0);
  HEAP32[$7>>2] = 0;
  $8 = (__ZNSt3__26__clocEv()|0);
  $9 = (+_strtod_l($0,$3,$8));
  $10 = (___errno_location()|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==(0);
  if ($12) {
   $13 = (___errno_location()|0);
   HEAP32[$13>>2] = $6;
  }
  $14 = HEAP32[$3>>2]|0;
  $15 = ($14|0)==($1|0);
  if ($15) {
   $16 = ($11|0)==(34);
   if ($16) {
    $$0$ph = $9;
    label = 6;
   } else {
    $$0 = $9;
   }
  } else {
   $$0$ph = 0.0;
   label = 6;
  }
  if ((label|0) == 6) {
   HEAP32[$2>>2] = 4;
   $$0 = $$0$ph;
  }
  $$1 = $$0;
 }
 STACKTOP = sp;return (+$$1);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i37 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i43 = 0, $$0$i$i33 = 0, $$018 = 0, $$1 = 0, $$119 = 0, $$121 = 0, $$2 = 0, $$pre = 0, $$sink61$index = 0, $$sink61$index3 = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0.0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
 var $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i = 0, $or$cond = 0, $phitmp$i = 0, $phitmp$i28 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $6 = sp + 160|0;
 $7 = sp + 231|0;
 $8 = sp + 230|0;
 $9 = sp + 216|0;
 $10 = sp + 204|0;
 $11 = sp + 200|0;
 $12 = sp;
 $13 = sp + 196|0;
 $14 = sp + 192|0;
 $15 = sp + 229|0;
 $16 = sp + 228|0;
 __ZNSt3__29__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($9,$3,$6,$7,$8);
 ;HEAP32[$10>>2]=0|0;HEAP32[$10+4>>2]=0|0;HEAP32[$10+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $17 = (($10) + ($$0$i$i<<2)|0);
  HEAP32[$17>>2] = 0;
  $18 = (($$0$i$i) + 1)|0;
  $$0$i$i = $18;
 }
 $19 = ((($10)) + 11|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = ($20<<24>>24)<(0);
 if ($21) {
  $22 = ((($10)) + 8|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $23 & 2147483647;
  $phitmp$i = (($24) + -1)|0;
  $25 = $phitmp$i;
 } else {
  $25 = 10;
 }
 __THREW__ = 0;
 invoke_viii(29,($10|0),($25|0),0);
 $26 = __THREW__; __THREW__ = 0;
 $27 = $26&1;
 if ($27) {
  $91 = ___cxa_find_matching_catch_2()|0;
  $92 = (getTempRet0() | 0);
  $$1 = $91;$$121 = $92;
 } else {
  $28 = HEAP8[$19>>0]|0;
  $29 = ($28<<24>>24)<(0);
  $30 = HEAP32[$10>>2]|0;
  $31 = $29 ? $30 : $10;
  HEAP32[$11>>2] = $31;
  HEAP32[$13>>2] = $12;
  HEAP32[$14>>2] = 0;
  HEAP8[$15>>0] = 1;
  HEAP8[$16>>0] = 69;
  $32 = ((($10)) + 4|0);
  $33 = ((($10)) + 8|0);
  $$pre = HEAP32[$1>>2]|0;
  $$018 = $31;$190 = $$pre;$35 = $$pre;
  L11: while(1) {
   $34 = ($35|0)==(0|0);
   if ($34) {
    $100 = 0;$161 = 0;$191 = 1;
   } else {
    $36 = ((($35)) + 12|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = ((($35)) + 16|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = ($37|0)==($39|0);
    if ($40) {
     $41 = HEAP32[$35>>2]|0;
     $42 = ((($41)) + 36|0);
     $43 = HEAP32[$42>>2]|0;
     __THREW__ = 0;
     $44 = (invoke_ii($43|0,($35|0))|0);
     $45 = __THREW__; __THREW__ = 0;
     $46 = $45&1;
     if ($46) {
      label = 29;
      break;
     } else {
      $$0$i$i$i$i = $44;
     }
    } else {
     $47 = HEAP8[$37>>0]|0;
     $48 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($47)|0);
     $$0$i$i$i$i = $48;
    }
    $49 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
    $50 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i,$49)|0);
    if ($50) {
     HEAP32[$1>>2] = 0;
     $100 = 0;$161 = 0;$191 = 1;
    } else {
     $100 = $35;$161 = $190;$191 = 0;
    }
   }
   $51 = HEAP32[$2>>2]|0;
   $52 = ($51|0)==(0|0);
   do {
    if ($52) {
     label = 20;
    } else {
     $53 = ((($51)) + 12|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = ((($51)) + 16|0);
     $56 = HEAP32[$55>>2]|0;
     $57 = ($54|0)==($56|0);
     if ($57) {
      $58 = HEAP32[$51>>2]|0;
      $59 = ((($58)) + 36|0);
      $60 = HEAP32[$59>>2]|0;
      __THREW__ = 0;
      $61 = (invoke_ii($60|0,($51|0))|0);
      $62 = __THREW__; __THREW__ = 0;
      $63 = $62&1;
      if ($63) {
       label = 29;
       break L11;
      } else {
       $$0$i$i2$i$i = $61;
      }
     } else {
      $64 = HEAP8[$54>>0]|0;
      $65 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($64)|0);
      $$0$i$i2$i$i = $65;
     }
     $66 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
     $67 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i,$66)|0);
     if ($67) {
      HEAP32[$2>>2] = 0;
      label = 20;
      break;
     } else {
      if ($191) {
       $192 = $51;
       break;
      } else {
       $$2 = $$018;$172 = $51;
       label = 41;
       break L11;
      }
     }
    }
   } while(0);
   if ((label|0) == 20) {
    label = 0;
    if ($191) {
     $$2 = $$018;$172 = 0;
     label = 41;
     break;
    } else {
     $192 = 0;
    }
   }
   $68 = HEAP32[$11>>2]|0;
   $69 = HEAP8[$19>>0]|0;
   $70 = ($69<<24>>24)<(0);
   $71 = HEAP32[$32>>2]|0;
   $72 = $69&255;
   $73 = $70 ? $71 : $72;
   $74 = (($$018) + ($73)|0);
   $75 = ($68|0)==($74|0);
   if ($75) {
    $76 = $73 << 1;
    __THREW__ = 0;
    invoke_viii(29,($10|0),($76|0),0);
    $77 = __THREW__; __THREW__ = 0;
    $78 = $77&1;
    if ($78) {
     label = 31;
     break;
    }
    $79 = HEAP8[$19>>0]|0;
    $80 = ($79<<24>>24)<(0);
    if ($80) {
     $81 = HEAP32[$33>>2]|0;
     $82 = $81 & 2147483647;
     $phitmp$i28 = (($82) + -1)|0;
     $83 = $phitmp$i28;
    } else {
     $83 = 10;
    }
    __THREW__ = 0;
    invoke_viii(29,($10|0),($83|0),0);
    $84 = __THREW__; __THREW__ = 0;
    $85 = $84&1;
    if ($85) {
     label = 31;
     break;
    }
    $86 = HEAP8[$19>>0]|0;
    $87 = ($86<<24>>24)<(0);
    $88 = HEAP32[$10>>2]|0;
    $89 = $87 ? $88 : $10;
    $90 = (($89) + ($73)|0);
    HEAP32[$11>>2] = $90;
    $$119 = $89;
   } else {
    $$119 = $$018;
   }
   $99 = ((($100)) + 12|0);
   $101 = HEAP32[$99>>2]|0;
   $102 = ((($100)) + 16|0);
   $103 = HEAP32[$102>>2]|0;
   $104 = ($101|0)==($103|0);
   if ($104) {
    $105 = HEAP32[$100>>2]|0;
    $106 = ((($105)) + 36|0);
    $107 = HEAP32[$106>>2]|0;
    __THREW__ = 0;
    $108 = (invoke_ii($107|0,($100|0))|0);
    $109 = __THREW__; __THREW__ = 0;
    $110 = $109&1;
    if ($110) {
     label = 29;
     break;
    } else {
     $$0$i$i33 = $108;
    }
   } else {
    $111 = HEAP8[$101>>0]|0;
    $112 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($111)|0);
    $$0$i$i33 = $112;
   }
   $113 = $$0$i$i33&255;
   $114 = HEAP8[$7>>0]|0;
   $115 = HEAP8[$8>>0]|0;
   __THREW__ = 0;
   $116 = (invoke_iiiiiiiiiiiii(1,($113|0),($15|0),($16|0),($$119|0),($11|0),($114|0),($115|0),($9|0),($12|0),($13|0),($14|0),($6|0))|0);
   $117 = __THREW__; __THREW__ = 0;
   $118 = $117&1;
   if ($118) {
    label = 29;
    break;
   }
   $119 = ($116|0)==(0);
   if (!($119)) {
    $$2 = $$119;$172 = $192;
    label = 41;
    break;
   }
   $120 = HEAP32[$99>>2]|0;
   $121 = HEAP32[$102>>2]|0;
   $122 = ($120|0)==($121|0);
   if ($122) {
    $123 = HEAP32[$100>>2]|0;
    $124 = ((($123)) + 40|0);
    $125 = HEAP32[$124>>2]|0;
    __THREW__ = 0;
    (invoke_ii($125|0,($100|0))|0);
    $126 = __THREW__; __THREW__ = 0;
    $127 = $126&1;
    if ($127) {
     label = 29;
     break;
    }
   } else {
    $128 = ((($120)) + 1|0);
    HEAP32[$99>>2] = $128;
    $129 = HEAP8[$120>>0]|0;
    (__ZNSt3__211char_traitsIcE11to_int_typeEc($129)|0);
   }
   $$018 = $$119;$190 = $161;$35 = $100;
  }
  if ((label|0) == 29) {
   $93 = ___cxa_find_matching_catch_2()|0;
   $94 = (getTempRet0() | 0);
   $$sink61$index = $93;$$sink61$index3 = $94;
  }
  else if ((label|0) == 31) {
   $97 = ___cxa_find_matching_catch_2()|0;
   $98 = (getTempRet0() | 0);
   $$sink61$index = $97;$$sink61$index3 = $98;
  }
  else if ((label|0) == 41) {
   $130 = ((($9)) + 11|0);
   $131 = HEAP8[$130>>0]|0;
   $132 = ($131<<24>>24)<(0);
   $133 = ((($9)) + 4|0);
   $134 = HEAP32[$133>>2]|0;
   $135 = $131&255;
   $136 = $132 ? $134 : $135;
   $137 = ($136|0)==(0);
   $138 = HEAP8[$15>>0]|0;
   $139 = ($138<<24>>24)==(0);
   $or$cond = $137 | $139;
   if (!($or$cond)) {
    $140 = HEAP32[$13>>2]|0;
    $141 = $140;
    $142 = $12;
    $143 = (($141) - ($142))|0;
    $144 = ($143|0)<(160);
    if ($144) {
     $145 = HEAP32[$14>>2]|0;
     $146 = ((($140)) + 4|0);
     HEAP32[$13>>2] = $146;
     HEAP32[$140>>2] = $145;
    }
   }
   $147 = HEAP32[$11>>2]|0;
   __THREW__ = 0;
   $148 = (+invoke_diii(5,($$2|0),($147|0),($4|0)));
   $149 = __THREW__; __THREW__ = 0;
   $150 = $149&1;
   L58: do {
    if (!($150)) {
     HEAPF32[$5>>2] = $148;
     $151 = HEAP32[$13>>2]|0;
     __THREW__ = 0;
     invoke_viiii(30,($9|0),($12|0),($151|0),($4|0));
     $152 = __THREW__; __THREW__ = 0;
     $153 = $152&1;
     if (!($153)) {
      $154 = ($100|0)==(0|0);
      if ($154) {
       $193 = 1;
      } else {
       $155 = ((($100)) + 12|0);
       $156 = HEAP32[$155>>2]|0;
       $157 = ((($100)) + 16|0);
       $158 = HEAP32[$157>>2]|0;
       $159 = ($156|0)==($158|0);
       if ($159) {
        $160 = HEAP32[$161>>2]|0;
        $162 = ((($160)) + 36|0);
        $163 = HEAP32[$162>>2]|0;
        __THREW__ = 0;
        $164 = (invoke_ii($163|0,($100|0))|0);
        $165 = __THREW__; __THREW__ = 0;
        $166 = $165&1;
        if ($166) {
         break;
        } else {
         $$0$i$i$i$i37 = $164;
        }
       } else {
        $167 = HEAP8[$156>>0]|0;
        $168 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($167)|0);
        $$0$i$i$i$i37 = $168;
       }
       $169 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
       $170 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i37,$169)|0);
       if ($170) {
        HEAP32[$1>>2] = 0;
        $193 = 1;
       } else {
        $193 = 0;
       }
      }
      $171 = ($172|0)==(0|0);
      do {
       if ($171) {
        label = 58;
       } else {
        $173 = ((($172)) + 12|0);
        $174 = HEAP32[$173>>2]|0;
        $175 = ((($172)) + 16|0);
        $176 = HEAP32[$175>>2]|0;
        $177 = ($174|0)==($176|0);
        if ($177) {
         $178 = HEAP32[$172>>2]|0;
         $179 = ((($178)) + 36|0);
         $180 = HEAP32[$179>>2]|0;
         __THREW__ = 0;
         $181 = (invoke_ii($180|0,($172|0))|0);
         $182 = __THREW__; __THREW__ = 0;
         $183 = $182&1;
         if ($183) {
          break L58;
         } else {
          $$0$i$i2$i$i43 = $181;
         }
        } else {
         $184 = HEAP8[$174>>0]|0;
         $185 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($184)|0);
         $$0$i$i2$i$i43 = $185;
        }
        $186 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
        $187 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i43,$186)|0);
        if ($187) {
         HEAP32[$2>>2] = 0;
         label = 58;
         break;
        } else {
         if ($193) {
          break;
         } else {
          label = 60;
          break;
         }
        }
       }
      } while(0);
      if ((label|0) == 58) {
       if ($193) {
        label = 60;
       }
      }
      if ((label|0) == 60) {
       $188 = HEAP32[$4>>2]|0;
       $189 = $188 | 2;
       HEAP32[$4>>2] = $189;
      }
      $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
      STACKTOP = sp;return ($$sroa$0$0$copyload|0);
     }
    }
   } while(0);
   $95 = ___cxa_find_matching_catch_2()|0;
   $96 = (getTempRet0() | 0);
   $$sink61$index = $95;$$sink61$index3 = $96;
  }
  $$1 = $$sink61$index;$$121 = $$sink61$index3;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 ___resumeException($$1|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__215__num_get_floatIfEET_PKcS3_Rj($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0.0, $$0$ph = 0.0, $$1 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = ($0|0)==($1|0);
 if ($4) {
  HEAP32[$2>>2] = 4;
  $$1 = 0.0;
 } else {
  $5 = (___errno_location()|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (___errno_location()|0);
  HEAP32[$7>>2] = 0;
  $8 = (__ZNSt3__26__clocEv()|0);
  $9 = (+_strtof_l($0,$3,$8));
  $10 = (___errno_location()|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==(0);
  if ($12) {
   $13 = (___errno_location()|0);
   HEAP32[$13>>2] = $6;
  }
  $14 = HEAP32[$3>>2]|0;
  $15 = ($14|0)==($1|0);
  if ($15) {
   $16 = ($11|0)==(34);
   if ($16) {
    $$0$ph = $9;
    label = 6;
   } else {
    $$0 = $9;
   }
  } else {
   $$0$ph = 0.0;
   label = 6;
  }
  if ((label|0) == 6) {
   HEAP32[$2>>2] = 4;
   $$0 = $$0$ph;
  }
  $$1 = $$0;
 }
 STACKTOP = sp;return (+$$1);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i50 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i56 = 0, $$0$i$i46 = 0, $$032 = 0, $$1 = 0, $$133 = 0, $$135 = 0, $$2 = 0, $$pre = 0, $$sink74$index = 0, $$sink74$index3 = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
 var $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i = 0, $phitmp$i = 0, $phitmp$i41 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $6 = sp + 224|0;
 $7 = sp + 160|0;
 $8 = sp + 212|0;
 $9 = sp + 200|0;
 $10 = sp + 196|0;
 $11 = sp;
 $12 = sp + 192|0;
 $13 = sp + 188|0;
 $14 = (__ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($3)|0);
 $15 = (__ZNKSt3__29__num_getIcE10__do_widenERNS_8ios_baseEPc($0,$3,$7)|0);
 __ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseERc($8,$3,$6);
 ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $16 = (($9) + ($$0$i$i<<2)|0);
  HEAP32[$16>>2] = 0;
  $17 = (($$0$i$i) + 1)|0;
  $$0$i$i = $17;
 }
 $18 = ((($9)) + 11|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = ($19<<24>>24)<(0);
 if ($20) {
  $21 = ((($9)) + 8|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $22 & 2147483647;
  $phitmp$i = (($23) + -1)|0;
  $24 = $phitmp$i;
 } else {
  $24 = 10;
 }
 __THREW__ = 0;
 invoke_viii(29,($9|0),($24|0),0);
 $25 = __THREW__; __THREW__ = 0;
 $26 = $25&1;
 if ($26) {
  $90 = ___cxa_find_matching_catch_2()|0;
  $91 = (getTempRet0() | 0);
  $$1 = $90;$$135 = $91;
 } else {
  $27 = HEAP8[$18>>0]|0;
  $28 = ($27<<24>>24)<(0);
  $29 = HEAP32[$9>>2]|0;
  $30 = $28 ? $29 : $9;
  HEAP32[$10>>2] = $30;
  HEAP32[$12>>2] = $11;
  HEAP32[$13>>2] = 0;
  $31 = ((($9)) + 4|0);
  $32 = ((($9)) + 8|0);
  $$pre = HEAP32[$1>>2]|0;
  $$032 = $30;$191 = $$pre;$34 = $$pre;
  L11: while(1) {
   $33 = ($34|0)==(0|0);
   if ($33) {
    $162 = 0;$192 = 1;$99 = 0;
   } else {
    $35 = ((($34)) + 12|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ((($34)) + 16|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = ($36|0)==($38|0);
    if ($39) {
     $40 = HEAP32[$34>>2]|0;
     $41 = ((($40)) + 36|0);
     $42 = HEAP32[$41>>2]|0;
     __THREW__ = 0;
     $43 = (invoke_ii($42|0,($34|0))|0);
     $44 = __THREW__; __THREW__ = 0;
     $45 = $44&1;
     if ($45) {
      label = 29;
      break;
     } else {
      $$0$i$i$i$i = $43;
     }
    } else {
     $46 = HEAP8[$36>>0]|0;
     $47 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($46)|0);
     $$0$i$i$i$i = $47;
    }
    $48 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
    $49 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i,$48)|0);
    if ($49) {
     HEAP32[$1>>2] = 0;
     $162 = 0;$192 = 1;$99 = 0;
    } else {
     $162 = $191;$192 = 0;$99 = $34;
    }
   }
   $50 = HEAP32[$2>>2]|0;
   $51 = ($50|0)==(0|0);
   do {
    if ($51) {
     label = 20;
    } else {
     $52 = ((($50)) + 12|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = ((($50)) + 16|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ($53|0)==($55|0);
     if ($56) {
      $57 = HEAP32[$50>>2]|0;
      $58 = ((($57)) + 36|0);
      $59 = HEAP32[$58>>2]|0;
      __THREW__ = 0;
      $60 = (invoke_ii($59|0,($50|0))|0);
      $61 = __THREW__; __THREW__ = 0;
      $62 = $61&1;
      if ($62) {
       label = 29;
       break L11;
      } else {
       $$0$i$i2$i$i = $60;
      }
     } else {
      $63 = HEAP8[$53>>0]|0;
      $64 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($63)|0);
      $$0$i$i2$i$i = $64;
     }
     $65 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
     $66 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i,$65)|0);
     if ($66) {
      HEAP32[$2>>2] = 0;
      label = 20;
      break;
     } else {
      if ($192) {
       $193 = $50;
       break;
      } else {
       $$2 = $$032;$173 = $50;
       label = 41;
       break L11;
      }
     }
    }
   } while(0);
   if ((label|0) == 20) {
    label = 0;
    if ($192) {
     $$2 = $$032;$173 = 0;
     label = 41;
     break;
    } else {
     $193 = 0;
    }
   }
   $67 = HEAP32[$10>>2]|0;
   $68 = HEAP8[$18>>0]|0;
   $69 = ($68<<24>>24)<(0);
   $70 = HEAP32[$31>>2]|0;
   $71 = $68&255;
   $72 = $69 ? $70 : $71;
   $73 = (($$032) + ($72)|0);
   $74 = ($67|0)==($73|0);
   if ($74) {
    $75 = $72 << 1;
    __THREW__ = 0;
    invoke_viii(29,($9|0),($75|0),0);
    $76 = __THREW__; __THREW__ = 0;
    $77 = $76&1;
    if ($77) {
     label = 31;
     break;
    }
    $78 = HEAP8[$18>>0]|0;
    $79 = ($78<<24>>24)<(0);
    if ($79) {
     $80 = HEAP32[$32>>2]|0;
     $81 = $80 & 2147483647;
     $phitmp$i41 = (($81) + -1)|0;
     $82 = $phitmp$i41;
    } else {
     $82 = 10;
    }
    __THREW__ = 0;
    invoke_viii(29,($9|0),($82|0),0);
    $83 = __THREW__; __THREW__ = 0;
    $84 = $83&1;
    if ($84) {
     label = 31;
     break;
    }
    $85 = HEAP8[$18>>0]|0;
    $86 = ($85<<24>>24)<(0);
    $87 = HEAP32[$9>>2]|0;
    $88 = $86 ? $87 : $9;
    $89 = (($88) + ($72)|0);
    HEAP32[$10>>2] = $89;
    $$133 = $88;
   } else {
    $$133 = $$032;
   }
   $98 = ((($99)) + 12|0);
   $100 = HEAP32[$98>>2]|0;
   $101 = ((($99)) + 16|0);
   $102 = HEAP32[$101>>2]|0;
   $103 = ($100|0)==($102|0);
   if ($103) {
    $104 = HEAP32[$99>>2]|0;
    $105 = ((($104)) + 36|0);
    $106 = HEAP32[$105>>2]|0;
    __THREW__ = 0;
    $107 = (invoke_ii($106|0,($99|0))|0);
    $108 = __THREW__; __THREW__ = 0;
    $109 = $108&1;
    if ($109) {
     label = 29;
     break;
    } else {
     $$0$i$i46 = $107;
    }
   } else {
    $110 = HEAP8[$100>>0]|0;
    $111 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($110)|0);
    $$0$i$i46 = $111;
   }
   $112 = $$0$i$i46&255;
   $113 = HEAP8[$6>>0]|0;
   __THREW__ = 0;
   $114 = (invoke_iiiiiiiiiii(1,($112|0),($14|0),($$133|0),($10|0),($13|0),($113|0),($8|0),($11|0),($12|0),($15|0))|0);
   $115 = __THREW__; __THREW__ = 0;
   $116 = $115&1;
   if ($116) {
    label = 29;
    break;
   }
   $117 = ($114|0)==(0);
   if (!($117)) {
    $$2 = $$133;$173 = $193;
    label = 41;
    break;
   }
   $118 = HEAP32[$98>>2]|0;
   $119 = HEAP32[$101>>2]|0;
   $120 = ($118|0)==($119|0);
   if ($120) {
    $121 = HEAP32[$99>>2]|0;
    $122 = ((($121)) + 40|0);
    $123 = HEAP32[$122>>2]|0;
    __THREW__ = 0;
    (invoke_ii($123|0,($99|0))|0);
    $124 = __THREW__; __THREW__ = 0;
    $125 = $124&1;
    if ($125) {
     label = 29;
     break;
    }
   } else {
    $126 = ((($118)) + 1|0);
    HEAP32[$98>>2] = $126;
    $127 = HEAP8[$118>>0]|0;
    (__ZNSt3__211char_traitsIcE11to_int_typeEc($127)|0);
   }
   $$032 = $$133;$191 = $162;$34 = $99;
  }
  if ((label|0) == 29) {
   $92 = ___cxa_find_matching_catch_2()|0;
   $93 = (getTempRet0() | 0);
   $$sink74$index = $92;$$sink74$index3 = $93;
  }
  else if ((label|0) == 31) {
   $96 = ___cxa_find_matching_catch_2()|0;
   $97 = (getTempRet0() | 0);
   $$sink74$index = $96;$$sink74$index3 = $97;
  }
  else if ((label|0) == 41) {
   $128 = ((($8)) + 11|0);
   $129 = HEAP8[$128>>0]|0;
   $130 = ($129<<24>>24)<(0);
   $131 = ((($8)) + 4|0);
   $132 = HEAP32[$131>>2]|0;
   $133 = $129&255;
   $134 = $130 ? $132 : $133;
   $135 = ($134|0)==(0);
   if (!($135)) {
    $136 = HEAP32[$12>>2]|0;
    $137 = $136;
    $138 = $11;
    $139 = (($137) - ($138))|0;
    $140 = ($139|0)<(160);
    if ($140) {
     $141 = HEAP32[$13>>2]|0;
     $142 = ((($136)) + 4|0);
     HEAP32[$12>>2] = $142;
     HEAP32[$136>>2] = $141;
    }
   }
   $143 = HEAP32[$10>>2]|0;
   __THREW__ = 0;
   $144 = (invoke_iiiii(12,($$2|0),($143|0),($4|0),($14|0))|0);
   $145 = (getTempRet0() | 0);
   $146 = __THREW__; __THREW__ = 0;
   $147 = $146&1;
   L58: do {
    if (!($147)) {
     $148 = $5;
     $149 = $148;
     HEAP32[$149>>2] = $144;
     $150 = (($148) + 4)|0;
     $151 = $150;
     HEAP32[$151>>2] = $145;
     $152 = HEAP32[$12>>2]|0;
     __THREW__ = 0;
     invoke_viiii(30,($8|0),($11|0),($152|0),($4|0));
     $153 = __THREW__; __THREW__ = 0;
     $154 = $153&1;
     if (!($154)) {
      $155 = ($99|0)==(0|0);
      if ($155) {
       $194 = 1;
      } else {
       $156 = ((($99)) + 12|0);
       $157 = HEAP32[$156>>2]|0;
       $158 = ((($99)) + 16|0);
       $159 = HEAP32[$158>>2]|0;
       $160 = ($157|0)==($159|0);
       if ($160) {
        $161 = HEAP32[$162>>2]|0;
        $163 = ((($161)) + 36|0);
        $164 = HEAP32[$163>>2]|0;
        __THREW__ = 0;
        $165 = (invoke_ii($164|0,($99|0))|0);
        $166 = __THREW__; __THREW__ = 0;
        $167 = $166&1;
        if ($167) {
         break;
        } else {
         $$0$i$i$i$i50 = $165;
        }
       } else {
        $168 = HEAP8[$157>>0]|0;
        $169 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($168)|0);
        $$0$i$i$i$i50 = $169;
       }
       $170 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
       $171 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i50,$170)|0);
       if ($171) {
        HEAP32[$1>>2] = 0;
        $194 = 1;
       } else {
        $194 = 0;
       }
      }
      $172 = ($173|0)==(0|0);
      do {
       if ($172) {
        label = 58;
       } else {
        $174 = ((($173)) + 12|0);
        $175 = HEAP32[$174>>2]|0;
        $176 = ((($173)) + 16|0);
        $177 = HEAP32[$176>>2]|0;
        $178 = ($175|0)==($177|0);
        if ($178) {
         $179 = HEAP32[$173>>2]|0;
         $180 = ((($179)) + 36|0);
         $181 = HEAP32[$180>>2]|0;
         __THREW__ = 0;
         $182 = (invoke_ii($181|0,($173|0))|0);
         $183 = __THREW__; __THREW__ = 0;
         $184 = $183&1;
         if ($184) {
          break L58;
         } else {
          $$0$i$i2$i$i56 = $182;
         }
        } else {
         $185 = HEAP8[$175>>0]|0;
         $186 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($185)|0);
         $$0$i$i2$i$i56 = $186;
        }
        $187 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
        $188 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i56,$187)|0);
        if ($188) {
         HEAP32[$2>>2] = 0;
         label = 58;
         break;
        } else {
         if ($194) {
          break;
         } else {
          label = 60;
          break;
         }
        }
       }
      } while(0);
      if ((label|0) == 58) {
       if ($194) {
        label = 60;
       }
      }
      if ((label|0) == 60) {
       $189 = HEAP32[$4>>2]|0;
       $190 = $189 | 2;
       HEAP32[$4>>2] = $190;
      }
      $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
      STACKTOP = sp;return ($$sroa$0$0$copyload|0);
     }
    }
   } while(0);
   $94 = ___cxa_find_matching_catch_2()|0;
   $95 = (getTempRet0() | 0);
   $$sink74$index = $94;$$sink74$index3 = $95;
  }
  $$1 = $$sink74$index;$$135 = $$sink74$index3;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
 ___resumeException($$1|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $trunc = 0, $trunc$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 74;
 $trunc = $3&255;
 $trunc$clear = $trunc & 127;
 switch ($trunc$clear<<24>>24) {
 case 64:  {
  $$0 = 8;
  break;
 }
 case 8:  {
  $$0 = 16;
  break;
 }
 case 0:  {
  $$0 = 0;
  break;
 }
 default: {
  $$0 = 10;
 }
 }
 return ($$0|0);
}
function __ZNKSt3__29__num_getIcE10__do_widenERNS_8ios_baseEPc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (__ZNKSt3__29__num_getIcE12__do_widen_pERNS_8ios_baseEPc($0,$1,$2)|0);
 return ($3|0);
}
function __ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseERc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 __ZNKSt3__28ios_base6getlocEv($3,$1);
 __THREW__ = 0;
 $4 = (invoke_iii(37,($3|0),(50756|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  $7 = HEAP32[$4>>2]|0;
  $8 = ((($7)) + 16|0);
  $9 = HEAP32[$8>>2]|0;
  __THREW__ = 0;
  $10 = (invoke_ii($9|0,($4|0))|0);
  $11 = __THREW__; __THREW__ = 0;
  $12 = $11&1;
  if (!($12)) {
   HEAP8[$2>>0] = $10;
   $13 = HEAP32[$4>>2]|0;
   $14 = ((($13)) + 20|0);
   $15 = HEAP32[$14>>2]|0;
   __THREW__ = 0;
   invoke_vii($15|0,($0|0),($4|0));
   $16 = __THREW__; __THREW__ = 0;
   $17 = $16&1;
   if (!($17)) {
    __ZNSt3__26localeD2Ev($3);
    STACKTOP = sp;return;
   }
  }
 }
 $18 = ___cxa_find_matching_catch_2()|0;
 $19 = (getTempRet0() | 0);
 __ZNSt3__26localeD2Ev($3);
 ___resumeException($18|0);
 // unreachable;
}
function __ZNSt3__227__num_get_unsigned_integralIyEET_PKcS3_Rji($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = ($0|0)==($1|0);
 do {
  if ($5) {
   HEAP32[$2>>2] = 4;
   $21 = 0;$22 = 0;
  } else {
   $6 = HEAP8[$0>>0]|0;
   $7 = ($6<<24>>24)==(45);
   if ($7) {
    HEAP32[$2>>2] = 4;
    $21 = 0;$22 = 0;
    break;
   }
   $8 = (___errno_location()|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = (___errno_location()|0);
   HEAP32[$10>>2] = 0;
   $11 = (__ZNSt3__26__clocEv()|0);
   $12 = (_strtoull_l($0,$4,$3,$11)|0);
   $13 = (getTempRet0() | 0);
   $14 = (___errno_location()|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ($15|0)==(0);
   if ($16) {
    $17 = (___errno_location()|0);
    HEAP32[$17>>2] = $9;
   }
   $18 = HEAP32[$4>>2]|0;
   $19 = ($18|0)==($1|0);
   if ($19) {
    $20 = ($15|0)==(34);
    if ($20) {
     $23 = -1;$24 = -1;
     label = 8;
    } else {
     $25 = $12;$26 = $13;
    }
   } else {
    $23 = 0;$24 = 0;
    label = 8;
   }
   if ((label|0) == 8) {
    HEAP32[$2>>2] = 4;
    $25 = $23;$26 = $24;
   }
   $21 = $26;$22 = $25;
  }
 } while(0);
 setTempRet0(($21) | 0);
 STACKTOP = sp;return ($22|0);
}
function __ZNKSt3__29__num_getIcE12__do_widen_pERNS_8ios_baseEPc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (20912|0);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i50 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i56 = 0, $$0$i$i46 = 0, $$032 = 0, $$1 = 0, $$133 = 0, $$135 = 0, $$2 = 0, $$pre = 0, $$sink74$index = 0, $$sink74$index3 = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
 var $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i = 0;
 var $phitmp$i = 0, $phitmp$i41 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $6 = sp + 224|0;
 $7 = sp + 160|0;
 $8 = sp + 212|0;
 $9 = sp + 200|0;
 $10 = sp + 196|0;
 $11 = sp;
 $12 = sp + 192|0;
 $13 = sp + 188|0;
 $14 = (__ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($3)|0);
 $15 = (__ZNKSt3__29__num_getIcE10__do_widenERNS_8ios_baseEPc($0,$3,$7)|0);
 __ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseERc($8,$3,$6);
 ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $16 = (($9) + ($$0$i$i<<2)|0);
  HEAP32[$16>>2] = 0;
  $17 = (($$0$i$i) + 1)|0;
  $$0$i$i = $17;
 }
 $18 = ((($9)) + 11|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = ($19<<24>>24)<(0);
 if ($20) {
  $21 = ((($9)) + 8|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $22 & 2147483647;
  $phitmp$i = (($23) + -1)|0;
  $24 = $phitmp$i;
 } else {
  $24 = 10;
 }
 __THREW__ = 0;
 invoke_viii(29,($9|0),($24|0),0);
 $25 = __THREW__; __THREW__ = 0;
 $26 = $25&1;
 if ($26) {
  $90 = ___cxa_find_matching_catch_2()|0;
  $91 = (getTempRet0() | 0);
  $$1 = $90;$$135 = $91;
 } else {
  $27 = HEAP8[$18>>0]|0;
  $28 = ($27<<24>>24)<(0);
  $29 = HEAP32[$9>>2]|0;
  $30 = $28 ? $29 : $9;
  HEAP32[$10>>2] = $30;
  HEAP32[$12>>2] = $11;
  HEAP32[$13>>2] = 0;
  $31 = ((($9)) + 4|0);
  $32 = ((($9)) + 8|0);
  $$pre = HEAP32[$1>>2]|0;
  $$032 = $30;$186 = $$pre;$34 = $$pre;
  L11: while(1) {
   $33 = ($34|0)==(0|0);
   if ($33) {
    $157 = 0;$187 = 1;$99 = 0;
   } else {
    $35 = ((($34)) + 12|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ((($34)) + 16|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = ($36|0)==($38|0);
    if ($39) {
     $40 = HEAP32[$34>>2]|0;
     $41 = ((($40)) + 36|0);
     $42 = HEAP32[$41>>2]|0;
     __THREW__ = 0;
     $43 = (invoke_ii($42|0,($34|0))|0);
     $44 = __THREW__; __THREW__ = 0;
     $45 = $44&1;
     if ($45) {
      label = 29;
      break;
     } else {
      $$0$i$i$i$i = $43;
     }
    } else {
     $46 = HEAP8[$36>>0]|0;
     $47 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($46)|0);
     $$0$i$i$i$i = $47;
    }
    $48 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
    $49 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i,$48)|0);
    if ($49) {
     HEAP32[$1>>2] = 0;
     $157 = 0;$187 = 1;$99 = 0;
    } else {
     $157 = $186;$187 = 0;$99 = $34;
    }
   }
   $50 = HEAP32[$2>>2]|0;
   $51 = ($50|0)==(0|0);
   do {
    if ($51) {
     label = 20;
    } else {
     $52 = ((($50)) + 12|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = ((($50)) + 16|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ($53|0)==($55|0);
     if ($56) {
      $57 = HEAP32[$50>>2]|0;
      $58 = ((($57)) + 36|0);
      $59 = HEAP32[$58>>2]|0;
      __THREW__ = 0;
      $60 = (invoke_ii($59|0,($50|0))|0);
      $61 = __THREW__; __THREW__ = 0;
      $62 = $61&1;
      if ($62) {
       label = 29;
       break L11;
      } else {
       $$0$i$i2$i$i = $60;
      }
     } else {
      $63 = HEAP8[$53>>0]|0;
      $64 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($63)|0);
      $$0$i$i2$i$i = $64;
     }
     $65 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
     $66 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i,$65)|0);
     if ($66) {
      HEAP32[$2>>2] = 0;
      label = 20;
      break;
     } else {
      if ($187) {
       $188 = $50;
       break;
      } else {
       $$2 = $$032;$168 = $50;
       label = 41;
       break L11;
      }
     }
    }
   } while(0);
   if ((label|0) == 20) {
    label = 0;
    if ($187) {
     $$2 = $$032;$168 = 0;
     label = 41;
     break;
    } else {
     $188 = 0;
    }
   }
   $67 = HEAP32[$10>>2]|0;
   $68 = HEAP8[$18>>0]|0;
   $69 = ($68<<24>>24)<(0);
   $70 = HEAP32[$31>>2]|0;
   $71 = $68&255;
   $72 = $69 ? $70 : $71;
   $73 = (($$032) + ($72)|0);
   $74 = ($67|0)==($73|0);
   if ($74) {
    $75 = $72 << 1;
    __THREW__ = 0;
    invoke_viii(29,($9|0),($75|0),0);
    $76 = __THREW__; __THREW__ = 0;
    $77 = $76&1;
    if ($77) {
     label = 31;
     break;
    }
    $78 = HEAP8[$18>>0]|0;
    $79 = ($78<<24>>24)<(0);
    if ($79) {
     $80 = HEAP32[$32>>2]|0;
     $81 = $80 & 2147483647;
     $phitmp$i41 = (($81) + -1)|0;
     $82 = $phitmp$i41;
    } else {
     $82 = 10;
    }
    __THREW__ = 0;
    invoke_viii(29,($9|0),($82|0),0);
    $83 = __THREW__; __THREW__ = 0;
    $84 = $83&1;
    if ($84) {
     label = 31;
     break;
    }
    $85 = HEAP8[$18>>0]|0;
    $86 = ($85<<24>>24)<(0);
    $87 = HEAP32[$9>>2]|0;
    $88 = $86 ? $87 : $9;
    $89 = (($88) + ($72)|0);
    HEAP32[$10>>2] = $89;
    $$133 = $88;
   } else {
    $$133 = $$032;
   }
   $98 = ((($99)) + 12|0);
   $100 = HEAP32[$98>>2]|0;
   $101 = ((($99)) + 16|0);
   $102 = HEAP32[$101>>2]|0;
   $103 = ($100|0)==($102|0);
   if ($103) {
    $104 = HEAP32[$99>>2]|0;
    $105 = ((($104)) + 36|0);
    $106 = HEAP32[$105>>2]|0;
    __THREW__ = 0;
    $107 = (invoke_ii($106|0,($99|0))|0);
    $108 = __THREW__; __THREW__ = 0;
    $109 = $108&1;
    if ($109) {
     label = 29;
     break;
    } else {
     $$0$i$i46 = $107;
    }
   } else {
    $110 = HEAP8[$100>>0]|0;
    $111 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($110)|0);
    $$0$i$i46 = $111;
   }
   $112 = $$0$i$i46&255;
   $113 = HEAP8[$6>>0]|0;
   __THREW__ = 0;
   $114 = (invoke_iiiiiiiiiii(1,($112|0),($14|0),($$133|0),($10|0),($13|0),($113|0),($8|0),($11|0),($12|0),($15|0))|0);
   $115 = __THREW__; __THREW__ = 0;
   $116 = $115&1;
   if ($116) {
    label = 29;
    break;
   }
   $117 = ($114|0)==(0);
   if (!($117)) {
    $$2 = $$133;$168 = $188;
    label = 41;
    break;
   }
   $118 = HEAP32[$98>>2]|0;
   $119 = HEAP32[$101>>2]|0;
   $120 = ($118|0)==($119|0);
   if ($120) {
    $121 = HEAP32[$99>>2]|0;
    $122 = ((($121)) + 40|0);
    $123 = HEAP32[$122>>2]|0;
    __THREW__ = 0;
    (invoke_ii($123|0,($99|0))|0);
    $124 = __THREW__; __THREW__ = 0;
    $125 = $124&1;
    if ($125) {
     label = 29;
     break;
    }
   } else {
    $126 = ((($118)) + 1|0);
    HEAP32[$98>>2] = $126;
    $127 = HEAP8[$118>>0]|0;
    (__ZNSt3__211char_traitsIcE11to_int_typeEc($127)|0);
   }
   $$032 = $$133;$186 = $157;$34 = $99;
  }
  if ((label|0) == 29) {
   $92 = ___cxa_find_matching_catch_2()|0;
   $93 = (getTempRet0() | 0);
   $$sink74$index = $92;$$sink74$index3 = $93;
  }
  else if ((label|0) == 31) {
   $96 = ___cxa_find_matching_catch_2()|0;
   $97 = (getTempRet0() | 0);
   $$sink74$index = $96;$$sink74$index3 = $97;
  }
  else if ((label|0) == 41) {
   $128 = ((($8)) + 11|0);
   $129 = HEAP8[$128>>0]|0;
   $130 = ($129<<24>>24)<(0);
   $131 = ((($8)) + 4|0);
   $132 = HEAP32[$131>>2]|0;
   $133 = $129&255;
   $134 = $130 ? $132 : $133;
   $135 = ($134|0)==(0);
   if (!($135)) {
    $136 = HEAP32[$12>>2]|0;
    $137 = $136;
    $138 = $11;
    $139 = (($137) - ($138))|0;
    $140 = ($139|0)<(160);
    if ($140) {
     $141 = HEAP32[$13>>2]|0;
     $142 = ((($136)) + 4|0);
     HEAP32[$12>>2] = $142;
     HEAP32[$136>>2] = $141;
    }
   }
   $143 = HEAP32[$10>>2]|0;
   __THREW__ = 0;
   $144 = (invoke_iiiii(13,($$2|0),($143|0),($4|0),($14|0))|0);
   $145 = __THREW__; __THREW__ = 0;
   $146 = $145&1;
   L58: do {
    if (!($146)) {
     HEAP32[$5>>2] = $144;
     $147 = HEAP32[$12>>2]|0;
     __THREW__ = 0;
     invoke_viiii(30,($8|0),($11|0),($147|0),($4|0));
     $148 = __THREW__; __THREW__ = 0;
     $149 = $148&1;
     if (!($149)) {
      $150 = ($99|0)==(0|0);
      if ($150) {
       $189 = 1;
      } else {
       $151 = ((($99)) + 12|0);
       $152 = HEAP32[$151>>2]|0;
       $153 = ((($99)) + 16|0);
       $154 = HEAP32[$153>>2]|0;
       $155 = ($152|0)==($154|0);
       if ($155) {
        $156 = HEAP32[$157>>2]|0;
        $158 = ((($156)) + 36|0);
        $159 = HEAP32[$158>>2]|0;
        __THREW__ = 0;
        $160 = (invoke_ii($159|0,($99|0))|0);
        $161 = __THREW__; __THREW__ = 0;
        $162 = $161&1;
        if ($162) {
         break;
        } else {
         $$0$i$i$i$i50 = $160;
        }
       } else {
        $163 = HEAP8[$152>>0]|0;
        $164 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($163)|0);
        $$0$i$i$i$i50 = $164;
       }
       $165 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
       $166 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i50,$165)|0);
       if ($166) {
        HEAP32[$1>>2] = 0;
        $189 = 1;
       } else {
        $189 = 0;
       }
      }
      $167 = ($168|0)==(0|0);
      do {
       if ($167) {
        label = 58;
       } else {
        $169 = ((($168)) + 12|0);
        $170 = HEAP32[$169>>2]|0;
        $171 = ((($168)) + 16|0);
        $172 = HEAP32[$171>>2]|0;
        $173 = ($170|0)==($172|0);
        if ($173) {
         $174 = HEAP32[$168>>2]|0;
         $175 = ((($174)) + 36|0);
         $176 = HEAP32[$175>>2]|0;
         __THREW__ = 0;
         $177 = (invoke_ii($176|0,($168|0))|0);
         $178 = __THREW__; __THREW__ = 0;
         $179 = $178&1;
         if ($179) {
          break L58;
         } else {
          $$0$i$i2$i$i56 = $177;
         }
        } else {
         $180 = HEAP8[$170>>0]|0;
         $181 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($180)|0);
         $$0$i$i2$i$i56 = $181;
        }
        $182 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
        $183 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i56,$182)|0);
        if ($183) {
         HEAP32[$2>>2] = 0;
         label = 58;
         break;
        } else {
         if ($189) {
          break;
         } else {
          label = 60;
          break;
         }
        }
       }
      } while(0);
      if ((label|0) == 58) {
       if ($189) {
        label = 60;
       }
      }
      if ((label|0) == 60) {
       $184 = HEAP32[$4>>2]|0;
       $185 = $184 | 2;
       HEAP32[$4>>2] = $185;
      }
      $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
      STACKTOP = sp;return ($$sroa$0$0$copyload|0);
     }
    }
   } while(0);
   $94 = ___cxa_find_matching_catch_2()|0;
   $95 = (getTempRet0() | 0);
   $$sink74$index = $94;$$sink74$index3 = $95;
  }
  $$1 = $$sink74$index;$$135 = $$sink74$index3;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
 ___resumeException($$1|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__227__num_get_unsigned_integralImEET_PKcS3_Rji($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = ($0|0)==($1|0);
 do {
  if ($5) {
   HEAP32[$2>>2] = 4;
   $$1 = 0;
  } else {
   $6 = HEAP8[$0>>0]|0;
   $7 = ($6<<24>>24)==(45);
   if ($7) {
    HEAP32[$2>>2] = 4;
    $$1 = 0;
    break;
   }
   $8 = (___errno_location()|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = (___errno_location()|0);
   HEAP32[$10>>2] = 0;
   $11 = (__ZNSt3__26__clocEv()|0);
   $12 = (_strtoull_l($0,$4,$3,$11)|0);
   $13 = (getTempRet0() | 0);
   $14 = (___errno_location()|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ($15|0)==(0);
   if ($16) {
    $17 = (___errno_location()|0);
    HEAP32[$17>>2] = $9;
   }
   $18 = HEAP32[$4>>2]|0;
   $19 = ($18|0)==($1|0);
   do {
    if ($19) {
     $20 = ($15|0)==(34);
     $21 = ($13>>>0)>(0);
     $22 = ($12>>>0)>(4294967295);
     $23 = ($13|0)==(0);
     $24 = $23 & $22;
     $25 = $21 | $24;
     $or$cond = $25 | $20;
     if ($or$cond) {
      HEAP32[$2>>2] = 4;
      $$0 = -1;
      break;
     } else {
      $$0 = $12;
      break;
     }
    } else {
     HEAP32[$2>>2] = 4;
     $$0 = 0;
    }
   } while(0);
   $$1 = $$0;
  }
 } while(0);
 STACKTOP = sp;return ($$1|0);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i50 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i56 = 0, $$0$i$i46 = 0, $$032 = 0, $$1 = 0, $$133 = 0, $$135 = 0, $$2 = 0, $$pre = 0, $$sink74$index = 0, $$sink74$index3 = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
 var $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i = 0;
 var $phitmp$i = 0, $phitmp$i41 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $6 = sp + 224|0;
 $7 = sp + 160|0;
 $8 = sp + 212|0;
 $9 = sp + 200|0;
 $10 = sp + 196|0;
 $11 = sp;
 $12 = sp + 192|0;
 $13 = sp + 188|0;
 $14 = (__ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($3)|0);
 $15 = (__ZNKSt3__29__num_getIcE10__do_widenERNS_8ios_baseEPc($0,$3,$7)|0);
 __ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseERc($8,$3,$6);
 ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $16 = (($9) + ($$0$i$i<<2)|0);
  HEAP32[$16>>2] = 0;
  $17 = (($$0$i$i) + 1)|0;
  $$0$i$i = $17;
 }
 $18 = ((($9)) + 11|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = ($19<<24>>24)<(0);
 if ($20) {
  $21 = ((($9)) + 8|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $22 & 2147483647;
  $phitmp$i = (($23) + -1)|0;
  $24 = $phitmp$i;
 } else {
  $24 = 10;
 }
 __THREW__ = 0;
 invoke_viii(29,($9|0),($24|0),0);
 $25 = __THREW__; __THREW__ = 0;
 $26 = $25&1;
 if ($26) {
  $90 = ___cxa_find_matching_catch_2()|0;
  $91 = (getTempRet0() | 0);
  $$1 = $90;$$135 = $91;
 } else {
  $27 = HEAP8[$18>>0]|0;
  $28 = ($27<<24>>24)<(0);
  $29 = HEAP32[$9>>2]|0;
  $30 = $28 ? $29 : $9;
  HEAP32[$10>>2] = $30;
  HEAP32[$12>>2] = $11;
  HEAP32[$13>>2] = 0;
  $31 = ((($9)) + 4|0);
  $32 = ((($9)) + 8|0);
  $$pre = HEAP32[$1>>2]|0;
  $$032 = $30;$186 = $$pre;$34 = $$pre;
  L11: while(1) {
   $33 = ($34|0)==(0|0);
   if ($33) {
    $157 = 0;$187 = 1;$99 = 0;
   } else {
    $35 = ((($34)) + 12|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ((($34)) + 16|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = ($36|0)==($38|0);
    if ($39) {
     $40 = HEAP32[$34>>2]|0;
     $41 = ((($40)) + 36|0);
     $42 = HEAP32[$41>>2]|0;
     __THREW__ = 0;
     $43 = (invoke_ii($42|0,($34|0))|0);
     $44 = __THREW__; __THREW__ = 0;
     $45 = $44&1;
     if ($45) {
      label = 29;
      break;
     } else {
      $$0$i$i$i$i = $43;
     }
    } else {
     $46 = HEAP8[$36>>0]|0;
     $47 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($46)|0);
     $$0$i$i$i$i = $47;
    }
    $48 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
    $49 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i,$48)|0);
    if ($49) {
     HEAP32[$1>>2] = 0;
     $157 = 0;$187 = 1;$99 = 0;
    } else {
     $157 = $186;$187 = 0;$99 = $34;
    }
   }
   $50 = HEAP32[$2>>2]|0;
   $51 = ($50|0)==(0|0);
   do {
    if ($51) {
     label = 20;
    } else {
     $52 = ((($50)) + 12|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = ((($50)) + 16|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ($53|0)==($55|0);
     if ($56) {
      $57 = HEAP32[$50>>2]|0;
      $58 = ((($57)) + 36|0);
      $59 = HEAP32[$58>>2]|0;
      __THREW__ = 0;
      $60 = (invoke_ii($59|0,($50|0))|0);
      $61 = __THREW__; __THREW__ = 0;
      $62 = $61&1;
      if ($62) {
       label = 29;
       break L11;
      } else {
       $$0$i$i2$i$i = $60;
      }
     } else {
      $63 = HEAP8[$53>>0]|0;
      $64 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($63)|0);
      $$0$i$i2$i$i = $64;
     }
     $65 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
     $66 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i,$65)|0);
     if ($66) {
      HEAP32[$2>>2] = 0;
      label = 20;
      break;
     } else {
      if ($187) {
       $188 = $50;
       break;
      } else {
       $$2 = $$032;$168 = $50;
       label = 41;
       break L11;
      }
     }
    }
   } while(0);
   if ((label|0) == 20) {
    label = 0;
    if ($187) {
     $$2 = $$032;$168 = 0;
     label = 41;
     break;
    } else {
     $188 = 0;
    }
   }
   $67 = HEAP32[$10>>2]|0;
   $68 = HEAP8[$18>>0]|0;
   $69 = ($68<<24>>24)<(0);
   $70 = HEAP32[$31>>2]|0;
   $71 = $68&255;
   $72 = $69 ? $70 : $71;
   $73 = (($$032) + ($72)|0);
   $74 = ($67|0)==($73|0);
   if ($74) {
    $75 = $72 << 1;
    __THREW__ = 0;
    invoke_viii(29,($9|0),($75|0),0);
    $76 = __THREW__; __THREW__ = 0;
    $77 = $76&1;
    if ($77) {
     label = 31;
     break;
    }
    $78 = HEAP8[$18>>0]|0;
    $79 = ($78<<24>>24)<(0);
    if ($79) {
     $80 = HEAP32[$32>>2]|0;
     $81 = $80 & 2147483647;
     $phitmp$i41 = (($81) + -1)|0;
     $82 = $phitmp$i41;
    } else {
     $82 = 10;
    }
    __THREW__ = 0;
    invoke_viii(29,($9|0),($82|0),0);
    $83 = __THREW__; __THREW__ = 0;
    $84 = $83&1;
    if ($84) {
     label = 31;
     break;
    }
    $85 = HEAP8[$18>>0]|0;
    $86 = ($85<<24>>24)<(0);
    $87 = HEAP32[$9>>2]|0;
    $88 = $86 ? $87 : $9;
    $89 = (($88) + ($72)|0);
    HEAP32[$10>>2] = $89;
    $$133 = $88;
   } else {
    $$133 = $$032;
   }
   $98 = ((($99)) + 12|0);
   $100 = HEAP32[$98>>2]|0;
   $101 = ((($99)) + 16|0);
   $102 = HEAP32[$101>>2]|0;
   $103 = ($100|0)==($102|0);
   if ($103) {
    $104 = HEAP32[$99>>2]|0;
    $105 = ((($104)) + 36|0);
    $106 = HEAP32[$105>>2]|0;
    __THREW__ = 0;
    $107 = (invoke_ii($106|0,($99|0))|0);
    $108 = __THREW__; __THREW__ = 0;
    $109 = $108&1;
    if ($109) {
     label = 29;
     break;
    } else {
     $$0$i$i46 = $107;
    }
   } else {
    $110 = HEAP8[$100>>0]|0;
    $111 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($110)|0);
    $$0$i$i46 = $111;
   }
   $112 = $$0$i$i46&255;
   $113 = HEAP8[$6>>0]|0;
   __THREW__ = 0;
   $114 = (invoke_iiiiiiiiiii(1,($112|0),($14|0),($$133|0),($10|0),($13|0),($113|0),($8|0),($11|0),($12|0),($15|0))|0);
   $115 = __THREW__; __THREW__ = 0;
   $116 = $115&1;
   if ($116) {
    label = 29;
    break;
   }
   $117 = ($114|0)==(0);
   if (!($117)) {
    $$2 = $$133;$168 = $188;
    label = 41;
    break;
   }
   $118 = HEAP32[$98>>2]|0;
   $119 = HEAP32[$101>>2]|0;
   $120 = ($118|0)==($119|0);
   if ($120) {
    $121 = HEAP32[$99>>2]|0;
    $122 = ((($121)) + 40|0);
    $123 = HEAP32[$122>>2]|0;
    __THREW__ = 0;
    (invoke_ii($123|0,($99|0))|0);
    $124 = __THREW__; __THREW__ = 0;
    $125 = $124&1;
    if ($125) {
     label = 29;
     break;
    }
   } else {
    $126 = ((($118)) + 1|0);
    HEAP32[$98>>2] = $126;
    $127 = HEAP8[$118>>0]|0;
    (__ZNSt3__211char_traitsIcE11to_int_typeEc($127)|0);
   }
   $$032 = $$133;$186 = $157;$34 = $99;
  }
  if ((label|0) == 29) {
   $92 = ___cxa_find_matching_catch_2()|0;
   $93 = (getTempRet0() | 0);
   $$sink74$index = $92;$$sink74$index3 = $93;
  }
  else if ((label|0) == 31) {
   $96 = ___cxa_find_matching_catch_2()|0;
   $97 = (getTempRet0() | 0);
   $$sink74$index = $96;$$sink74$index3 = $97;
  }
  else if ((label|0) == 41) {
   $128 = ((($8)) + 11|0);
   $129 = HEAP8[$128>>0]|0;
   $130 = ($129<<24>>24)<(0);
   $131 = ((($8)) + 4|0);
   $132 = HEAP32[$131>>2]|0;
   $133 = $129&255;
   $134 = $130 ? $132 : $133;
   $135 = ($134|0)==(0);
   if (!($135)) {
    $136 = HEAP32[$12>>2]|0;
    $137 = $136;
    $138 = $11;
    $139 = (($137) - ($138))|0;
    $140 = ($139|0)<(160);
    if ($140) {
     $141 = HEAP32[$13>>2]|0;
     $142 = ((($136)) + 4|0);
     HEAP32[$12>>2] = $142;
     HEAP32[$136>>2] = $141;
    }
   }
   $143 = HEAP32[$10>>2]|0;
   __THREW__ = 0;
   $144 = (invoke_iiiii(14,($$2|0),($143|0),($4|0),($14|0))|0);
   $145 = __THREW__; __THREW__ = 0;
   $146 = $145&1;
   L58: do {
    if (!($146)) {
     HEAP32[$5>>2] = $144;
     $147 = HEAP32[$12>>2]|0;
     __THREW__ = 0;
     invoke_viiii(30,($8|0),($11|0),($147|0),($4|0));
     $148 = __THREW__; __THREW__ = 0;
     $149 = $148&1;
     if (!($149)) {
      $150 = ($99|0)==(0|0);
      if ($150) {
       $189 = 1;
      } else {
       $151 = ((($99)) + 12|0);
       $152 = HEAP32[$151>>2]|0;
       $153 = ((($99)) + 16|0);
       $154 = HEAP32[$153>>2]|0;
       $155 = ($152|0)==($154|0);
       if ($155) {
        $156 = HEAP32[$157>>2]|0;
        $158 = ((($156)) + 36|0);
        $159 = HEAP32[$158>>2]|0;
        __THREW__ = 0;
        $160 = (invoke_ii($159|0,($99|0))|0);
        $161 = __THREW__; __THREW__ = 0;
        $162 = $161&1;
        if ($162) {
         break;
        } else {
         $$0$i$i$i$i50 = $160;
        }
       } else {
        $163 = HEAP8[$152>>0]|0;
        $164 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($163)|0);
        $$0$i$i$i$i50 = $164;
       }
       $165 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
       $166 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i50,$165)|0);
       if ($166) {
        HEAP32[$1>>2] = 0;
        $189 = 1;
       } else {
        $189 = 0;
       }
      }
      $167 = ($168|0)==(0|0);
      do {
       if ($167) {
        label = 58;
       } else {
        $169 = ((($168)) + 12|0);
        $170 = HEAP32[$169>>2]|0;
        $171 = ((($168)) + 16|0);
        $172 = HEAP32[$171>>2]|0;
        $173 = ($170|0)==($172|0);
        if ($173) {
         $174 = HEAP32[$168>>2]|0;
         $175 = ((($174)) + 36|0);
         $176 = HEAP32[$175>>2]|0;
         __THREW__ = 0;
         $177 = (invoke_ii($176|0,($168|0))|0);
         $178 = __THREW__; __THREW__ = 0;
         $179 = $178&1;
         if ($179) {
          break L58;
         } else {
          $$0$i$i2$i$i56 = $177;
         }
        } else {
         $180 = HEAP8[$170>>0]|0;
         $181 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($180)|0);
         $$0$i$i2$i$i56 = $181;
        }
        $182 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
        $183 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i56,$182)|0);
        if ($183) {
         HEAP32[$2>>2] = 0;
         label = 58;
         break;
        } else {
         if ($189) {
          break;
         } else {
          label = 60;
          break;
         }
        }
       }
      } while(0);
      if ((label|0) == 58) {
       if ($189) {
        label = 60;
       }
      }
      if ((label|0) == 60) {
       $184 = HEAP32[$4>>2]|0;
       $185 = $184 | 2;
       HEAP32[$4>>2] = $185;
      }
      $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
      STACKTOP = sp;return ($$sroa$0$0$copyload|0);
     }
    }
   } while(0);
   $94 = ___cxa_find_matching_catch_2()|0;
   $95 = (getTempRet0() | 0);
   $$sink74$index = $94;$$sink74$index3 = $95;
  }
  $$1 = $$sink74$index;$$135 = $$sink74$index3;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
 ___resumeException($$1|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__227__num_get_unsigned_integralIjEET_PKcS3_Rji($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = ($0|0)==($1|0);
 do {
  if ($5) {
   HEAP32[$2>>2] = 4;
   $$1 = 0;
  } else {
   $6 = HEAP8[$0>>0]|0;
   $7 = ($6<<24>>24)==(45);
   if ($7) {
    HEAP32[$2>>2] = 4;
    $$1 = 0;
    break;
   }
   $8 = (___errno_location()|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = (___errno_location()|0);
   HEAP32[$10>>2] = 0;
   $11 = (__ZNSt3__26__clocEv()|0);
   $12 = (_strtoull_l($0,$4,$3,$11)|0);
   $13 = (getTempRet0() | 0);
   $14 = (___errno_location()|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ($15|0)==(0);
   if ($16) {
    $17 = (___errno_location()|0);
    HEAP32[$17>>2] = $9;
   }
   $18 = HEAP32[$4>>2]|0;
   $19 = ($18|0)==($1|0);
   do {
    if ($19) {
     $20 = ($15|0)==(34);
     $21 = ($13>>>0)>(0);
     $22 = ($12>>>0)>(4294967295);
     $23 = ($13|0)==(0);
     $24 = $23 & $22;
     $25 = $21 | $24;
     $or$cond = $25 | $20;
     if ($or$cond) {
      HEAP32[$2>>2] = 4;
      $$0 = -1;
      break;
     } else {
      $$0 = $12;
      break;
     }
    } else {
     HEAP32[$2>>2] = 4;
     $$0 = 0;
    }
   } while(0);
   $$1 = $$0;
  }
 } while(0);
 STACKTOP = sp;return ($$1|0);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i50 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i56 = 0, $$0$i$i46 = 0, $$032 = 0, $$1 = 0, $$133 = 0, $$135 = 0, $$2 = 0, $$pre = 0, $$sink74$index = 0, $$sink74$index3 = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
 var $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i = 0;
 var $phitmp$i = 0, $phitmp$i41 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $6 = sp + 224|0;
 $7 = sp + 160|0;
 $8 = sp + 212|0;
 $9 = sp + 200|0;
 $10 = sp + 196|0;
 $11 = sp;
 $12 = sp + 192|0;
 $13 = sp + 188|0;
 $14 = (__ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($3)|0);
 $15 = (__ZNKSt3__29__num_getIcE10__do_widenERNS_8ios_baseEPc($0,$3,$7)|0);
 __ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseERc($8,$3,$6);
 ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $16 = (($9) + ($$0$i$i<<2)|0);
  HEAP32[$16>>2] = 0;
  $17 = (($$0$i$i) + 1)|0;
  $$0$i$i = $17;
 }
 $18 = ((($9)) + 11|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = ($19<<24>>24)<(0);
 if ($20) {
  $21 = ((($9)) + 8|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $22 & 2147483647;
  $phitmp$i = (($23) + -1)|0;
  $24 = $phitmp$i;
 } else {
  $24 = 10;
 }
 __THREW__ = 0;
 invoke_viii(29,($9|0),($24|0),0);
 $25 = __THREW__; __THREW__ = 0;
 $26 = $25&1;
 if ($26) {
  $90 = ___cxa_find_matching_catch_2()|0;
  $91 = (getTempRet0() | 0);
  $$1 = $90;$$135 = $91;
 } else {
  $27 = HEAP8[$18>>0]|0;
  $28 = ($27<<24>>24)<(0);
  $29 = HEAP32[$9>>2]|0;
  $30 = $28 ? $29 : $9;
  HEAP32[$10>>2] = $30;
  HEAP32[$12>>2] = $11;
  HEAP32[$13>>2] = 0;
  $31 = ((($9)) + 4|0);
  $32 = ((($9)) + 8|0);
  $$pre = HEAP32[$1>>2]|0;
  $$032 = $30;$186 = $$pre;$34 = $$pre;
  L11: while(1) {
   $33 = ($34|0)==(0|0);
   if ($33) {
    $157 = 0;$187 = 1;$99 = 0;
   } else {
    $35 = ((($34)) + 12|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ((($34)) + 16|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = ($36|0)==($38|0);
    if ($39) {
     $40 = HEAP32[$34>>2]|0;
     $41 = ((($40)) + 36|0);
     $42 = HEAP32[$41>>2]|0;
     __THREW__ = 0;
     $43 = (invoke_ii($42|0,($34|0))|0);
     $44 = __THREW__; __THREW__ = 0;
     $45 = $44&1;
     if ($45) {
      label = 29;
      break;
     } else {
      $$0$i$i$i$i = $43;
     }
    } else {
     $46 = HEAP8[$36>>0]|0;
     $47 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($46)|0);
     $$0$i$i$i$i = $47;
    }
    $48 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
    $49 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i,$48)|0);
    if ($49) {
     HEAP32[$1>>2] = 0;
     $157 = 0;$187 = 1;$99 = 0;
    } else {
     $157 = $186;$187 = 0;$99 = $34;
    }
   }
   $50 = HEAP32[$2>>2]|0;
   $51 = ($50|0)==(0|0);
   do {
    if ($51) {
     label = 20;
    } else {
     $52 = ((($50)) + 12|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = ((($50)) + 16|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ($53|0)==($55|0);
     if ($56) {
      $57 = HEAP32[$50>>2]|0;
      $58 = ((($57)) + 36|0);
      $59 = HEAP32[$58>>2]|0;
      __THREW__ = 0;
      $60 = (invoke_ii($59|0,($50|0))|0);
      $61 = __THREW__; __THREW__ = 0;
      $62 = $61&1;
      if ($62) {
       label = 29;
       break L11;
      } else {
       $$0$i$i2$i$i = $60;
      }
     } else {
      $63 = HEAP8[$53>>0]|0;
      $64 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($63)|0);
      $$0$i$i2$i$i = $64;
     }
     $65 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
     $66 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i,$65)|0);
     if ($66) {
      HEAP32[$2>>2] = 0;
      label = 20;
      break;
     } else {
      if ($187) {
       $188 = $50;
       break;
      } else {
       $$2 = $$032;$168 = $50;
       label = 41;
       break L11;
      }
     }
    }
   } while(0);
   if ((label|0) == 20) {
    label = 0;
    if ($187) {
     $$2 = $$032;$168 = 0;
     label = 41;
     break;
    } else {
     $188 = 0;
    }
   }
   $67 = HEAP32[$10>>2]|0;
   $68 = HEAP8[$18>>0]|0;
   $69 = ($68<<24>>24)<(0);
   $70 = HEAP32[$31>>2]|0;
   $71 = $68&255;
   $72 = $69 ? $70 : $71;
   $73 = (($$032) + ($72)|0);
   $74 = ($67|0)==($73|0);
   if ($74) {
    $75 = $72 << 1;
    __THREW__ = 0;
    invoke_viii(29,($9|0),($75|0),0);
    $76 = __THREW__; __THREW__ = 0;
    $77 = $76&1;
    if ($77) {
     label = 31;
     break;
    }
    $78 = HEAP8[$18>>0]|0;
    $79 = ($78<<24>>24)<(0);
    if ($79) {
     $80 = HEAP32[$32>>2]|0;
     $81 = $80 & 2147483647;
     $phitmp$i41 = (($81) + -1)|0;
     $82 = $phitmp$i41;
    } else {
     $82 = 10;
    }
    __THREW__ = 0;
    invoke_viii(29,($9|0),($82|0),0);
    $83 = __THREW__; __THREW__ = 0;
    $84 = $83&1;
    if ($84) {
     label = 31;
     break;
    }
    $85 = HEAP8[$18>>0]|0;
    $86 = ($85<<24>>24)<(0);
    $87 = HEAP32[$9>>2]|0;
    $88 = $86 ? $87 : $9;
    $89 = (($88) + ($72)|0);
    HEAP32[$10>>2] = $89;
    $$133 = $88;
   } else {
    $$133 = $$032;
   }
   $98 = ((($99)) + 12|0);
   $100 = HEAP32[$98>>2]|0;
   $101 = ((($99)) + 16|0);
   $102 = HEAP32[$101>>2]|0;
   $103 = ($100|0)==($102|0);
   if ($103) {
    $104 = HEAP32[$99>>2]|0;
    $105 = ((($104)) + 36|0);
    $106 = HEAP32[$105>>2]|0;
    __THREW__ = 0;
    $107 = (invoke_ii($106|0,($99|0))|0);
    $108 = __THREW__; __THREW__ = 0;
    $109 = $108&1;
    if ($109) {
     label = 29;
     break;
    } else {
     $$0$i$i46 = $107;
    }
   } else {
    $110 = HEAP8[$100>>0]|0;
    $111 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($110)|0);
    $$0$i$i46 = $111;
   }
   $112 = $$0$i$i46&255;
   $113 = HEAP8[$6>>0]|0;
   __THREW__ = 0;
   $114 = (invoke_iiiiiiiiiii(1,($112|0),($14|0),($$133|0),($10|0),($13|0),($113|0),($8|0),($11|0),($12|0),($15|0))|0);
   $115 = __THREW__; __THREW__ = 0;
   $116 = $115&1;
   if ($116) {
    label = 29;
    break;
   }
   $117 = ($114|0)==(0);
   if (!($117)) {
    $$2 = $$133;$168 = $188;
    label = 41;
    break;
   }
   $118 = HEAP32[$98>>2]|0;
   $119 = HEAP32[$101>>2]|0;
   $120 = ($118|0)==($119|0);
   if ($120) {
    $121 = HEAP32[$99>>2]|0;
    $122 = ((($121)) + 40|0);
    $123 = HEAP32[$122>>2]|0;
    __THREW__ = 0;
    (invoke_ii($123|0,($99|0))|0);
    $124 = __THREW__; __THREW__ = 0;
    $125 = $124&1;
    if ($125) {
     label = 29;
     break;
    }
   } else {
    $126 = ((($118)) + 1|0);
    HEAP32[$98>>2] = $126;
    $127 = HEAP8[$118>>0]|0;
    (__ZNSt3__211char_traitsIcE11to_int_typeEc($127)|0);
   }
   $$032 = $$133;$186 = $157;$34 = $99;
  }
  if ((label|0) == 29) {
   $92 = ___cxa_find_matching_catch_2()|0;
   $93 = (getTempRet0() | 0);
   $$sink74$index = $92;$$sink74$index3 = $93;
  }
  else if ((label|0) == 31) {
   $96 = ___cxa_find_matching_catch_2()|0;
   $97 = (getTempRet0() | 0);
   $$sink74$index = $96;$$sink74$index3 = $97;
  }
  else if ((label|0) == 41) {
   $128 = ((($8)) + 11|0);
   $129 = HEAP8[$128>>0]|0;
   $130 = ($129<<24>>24)<(0);
   $131 = ((($8)) + 4|0);
   $132 = HEAP32[$131>>2]|0;
   $133 = $129&255;
   $134 = $130 ? $132 : $133;
   $135 = ($134|0)==(0);
   if (!($135)) {
    $136 = HEAP32[$12>>2]|0;
    $137 = $136;
    $138 = $11;
    $139 = (($137) - ($138))|0;
    $140 = ($139|0)<(160);
    if ($140) {
     $141 = HEAP32[$13>>2]|0;
     $142 = ((($136)) + 4|0);
     HEAP32[$12>>2] = $142;
     HEAP32[$136>>2] = $141;
    }
   }
   $143 = HEAP32[$10>>2]|0;
   __THREW__ = 0;
   $144 = (invoke_iiiii(15,($$2|0),($143|0),($4|0),($14|0))|0);
   $145 = __THREW__; __THREW__ = 0;
   $146 = $145&1;
   L58: do {
    if (!($146)) {
     HEAP16[$5>>1] = $144;
     $147 = HEAP32[$12>>2]|0;
     __THREW__ = 0;
     invoke_viiii(30,($8|0),($11|0),($147|0),($4|0));
     $148 = __THREW__; __THREW__ = 0;
     $149 = $148&1;
     if (!($149)) {
      $150 = ($99|0)==(0|0);
      if ($150) {
       $189 = 1;
      } else {
       $151 = ((($99)) + 12|0);
       $152 = HEAP32[$151>>2]|0;
       $153 = ((($99)) + 16|0);
       $154 = HEAP32[$153>>2]|0;
       $155 = ($152|0)==($154|0);
       if ($155) {
        $156 = HEAP32[$157>>2]|0;
        $158 = ((($156)) + 36|0);
        $159 = HEAP32[$158>>2]|0;
        __THREW__ = 0;
        $160 = (invoke_ii($159|0,($99|0))|0);
        $161 = __THREW__; __THREW__ = 0;
        $162 = $161&1;
        if ($162) {
         break;
        } else {
         $$0$i$i$i$i50 = $160;
        }
       } else {
        $163 = HEAP8[$152>>0]|0;
        $164 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($163)|0);
        $$0$i$i$i$i50 = $164;
       }
       $165 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
       $166 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i50,$165)|0);
       if ($166) {
        HEAP32[$1>>2] = 0;
        $189 = 1;
       } else {
        $189 = 0;
       }
      }
      $167 = ($168|0)==(0|0);
      do {
       if ($167) {
        label = 58;
       } else {
        $169 = ((($168)) + 12|0);
        $170 = HEAP32[$169>>2]|0;
        $171 = ((($168)) + 16|0);
        $172 = HEAP32[$171>>2]|0;
        $173 = ($170|0)==($172|0);
        if ($173) {
         $174 = HEAP32[$168>>2]|0;
         $175 = ((($174)) + 36|0);
         $176 = HEAP32[$175>>2]|0;
         __THREW__ = 0;
         $177 = (invoke_ii($176|0,($168|0))|0);
         $178 = __THREW__; __THREW__ = 0;
         $179 = $178&1;
         if ($179) {
          break L58;
         } else {
          $$0$i$i2$i$i56 = $177;
         }
        } else {
         $180 = HEAP8[$170>>0]|0;
         $181 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($180)|0);
         $$0$i$i2$i$i56 = $181;
        }
        $182 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
        $183 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i56,$182)|0);
        if ($183) {
         HEAP32[$2>>2] = 0;
         label = 58;
         break;
        } else {
         if ($189) {
          break;
         } else {
          label = 60;
          break;
         }
        }
       }
      } while(0);
      if ((label|0) == 58) {
       if ($189) {
        label = 60;
       }
      }
      if ((label|0) == 60) {
       $184 = HEAP32[$4>>2]|0;
       $185 = $184 | 2;
       HEAP32[$4>>2] = $185;
      }
      $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
      STACKTOP = sp;return ($$sroa$0$0$copyload|0);
     }
    }
   } while(0);
   $94 = ___cxa_find_matching_catch_2()|0;
   $95 = (getTempRet0() | 0);
   $$sink74$index = $94;$$sink74$index3 = $95;
  }
  $$1 = $$sink74$index;$$135 = $$sink74$index3;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
 ___resumeException($$1|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__227__num_get_unsigned_integralItEET_PKcS3_Rji($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = ($0|0)==($1|0);
 do {
  if ($5) {
   HEAP32[$2>>2] = 4;
   $$1 = 0;
  } else {
   $6 = HEAP8[$0>>0]|0;
   $7 = ($6<<24>>24)==(45);
   if ($7) {
    HEAP32[$2>>2] = 4;
    $$1 = 0;
    break;
   }
   $8 = (___errno_location()|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = (___errno_location()|0);
   HEAP32[$10>>2] = 0;
   $11 = (__ZNSt3__26__clocEv()|0);
   $12 = (_strtoull_l($0,$4,$3,$11)|0);
   $13 = (getTempRet0() | 0);
   $14 = (___errno_location()|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ($15|0)==(0);
   if ($16) {
    $17 = (___errno_location()|0);
    HEAP32[$17>>2] = $9;
   }
   $18 = HEAP32[$4>>2]|0;
   $19 = ($18|0)==($1|0);
   do {
    if ($19) {
     $20 = ($15|0)==(34);
     $21 = ($13>>>0)>(0);
     $22 = ($12>>>0)>(65535);
     $23 = ($13|0)==(0);
     $24 = $23 & $22;
     $25 = $21 | $24;
     $or$cond = $25 | $20;
     if ($or$cond) {
      HEAP32[$2>>2] = 4;
      $$0 = -1;
      break;
     } else {
      $26 = $12&65535;
      $$0 = $26;
      break;
     }
    } else {
     HEAP32[$2>>2] = 4;
     $$0 = 0;
    }
   } while(0);
   $$1 = $$0;
  }
 } while(0);
 STACKTOP = sp;return ($$1|0);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i50 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i56 = 0, $$0$i$i46 = 0, $$032 = 0, $$1 = 0, $$133 = 0, $$135 = 0, $$2 = 0, $$pre = 0, $$sink74$index = 0, $$sink74$index3 = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
 var $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i = 0, $phitmp$i = 0, $phitmp$i41 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $6 = sp + 224|0;
 $7 = sp + 160|0;
 $8 = sp + 212|0;
 $9 = sp + 200|0;
 $10 = sp + 196|0;
 $11 = sp;
 $12 = sp + 192|0;
 $13 = sp + 188|0;
 $14 = (__ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($3)|0);
 $15 = (__ZNKSt3__29__num_getIcE10__do_widenERNS_8ios_baseEPc($0,$3,$7)|0);
 __ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseERc($8,$3,$6);
 ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $16 = (($9) + ($$0$i$i<<2)|0);
  HEAP32[$16>>2] = 0;
  $17 = (($$0$i$i) + 1)|0;
  $$0$i$i = $17;
 }
 $18 = ((($9)) + 11|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = ($19<<24>>24)<(0);
 if ($20) {
  $21 = ((($9)) + 8|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $22 & 2147483647;
  $phitmp$i = (($23) + -1)|0;
  $24 = $phitmp$i;
 } else {
  $24 = 10;
 }
 __THREW__ = 0;
 invoke_viii(29,($9|0),($24|0),0);
 $25 = __THREW__; __THREW__ = 0;
 $26 = $25&1;
 if ($26) {
  $90 = ___cxa_find_matching_catch_2()|0;
  $91 = (getTempRet0() | 0);
  $$1 = $90;$$135 = $91;
 } else {
  $27 = HEAP8[$18>>0]|0;
  $28 = ($27<<24>>24)<(0);
  $29 = HEAP32[$9>>2]|0;
  $30 = $28 ? $29 : $9;
  HEAP32[$10>>2] = $30;
  HEAP32[$12>>2] = $11;
  HEAP32[$13>>2] = 0;
  $31 = ((($9)) + 4|0);
  $32 = ((($9)) + 8|0);
  $$pre = HEAP32[$1>>2]|0;
  $$032 = $30;$191 = $$pre;$34 = $$pre;
  L11: while(1) {
   $33 = ($34|0)==(0|0);
   if ($33) {
    $162 = 0;$192 = 1;$99 = 0;
   } else {
    $35 = ((($34)) + 12|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ((($34)) + 16|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = ($36|0)==($38|0);
    if ($39) {
     $40 = HEAP32[$34>>2]|0;
     $41 = ((($40)) + 36|0);
     $42 = HEAP32[$41>>2]|0;
     __THREW__ = 0;
     $43 = (invoke_ii($42|0,($34|0))|0);
     $44 = __THREW__; __THREW__ = 0;
     $45 = $44&1;
     if ($45) {
      label = 29;
      break;
     } else {
      $$0$i$i$i$i = $43;
     }
    } else {
     $46 = HEAP8[$36>>0]|0;
     $47 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($46)|0);
     $$0$i$i$i$i = $47;
    }
    $48 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
    $49 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i,$48)|0);
    if ($49) {
     HEAP32[$1>>2] = 0;
     $162 = 0;$192 = 1;$99 = 0;
    } else {
     $162 = $191;$192 = 0;$99 = $34;
    }
   }
   $50 = HEAP32[$2>>2]|0;
   $51 = ($50|0)==(0|0);
   do {
    if ($51) {
     label = 20;
    } else {
     $52 = ((($50)) + 12|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = ((($50)) + 16|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ($53|0)==($55|0);
     if ($56) {
      $57 = HEAP32[$50>>2]|0;
      $58 = ((($57)) + 36|0);
      $59 = HEAP32[$58>>2]|0;
      __THREW__ = 0;
      $60 = (invoke_ii($59|0,($50|0))|0);
      $61 = __THREW__; __THREW__ = 0;
      $62 = $61&1;
      if ($62) {
       label = 29;
       break L11;
      } else {
       $$0$i$i2$i$i = $60;
      }
     } else {
      $63 = HEAP8[$53>>0]|0;
      $64 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($63)|0);
      $$0$i$i2$i$i = $64;
     }
     $65 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
     $66 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i,$65)|0);
     if ($66) {
      HEAP32[$2>>2] = 0;
      label = 20;
      break;
     } else {
      if ($192) {
       $193 = $50;
       break;
      } else {
       $$2 = $$032;$173 = $50;
       label = 41;
       break L11;
      }
     }
    }
   } while(0);
   if ((label|0) == 20) {
    label = 0;
    if ($192) {
     $$2 = $$032;$173 = 0;
     label = 41;
     break;
    } else {
     $193 = 0;
    }
   }
   $67 = HEAP32[$10>>2]|0;
   $68 = HEAP8[$18>>0]|0;
   $69 = ($68<<24>>24)<(0);
   $70 = HEAP32[$31>>2]|0;
   $71 = $68&255;
   $72 = $69 ? $70 : $71;
   $73 = (($$032) + ($72)|0);
   $74 = ($67|0)==($73|0);
   if ($74) {
    $75 = $72 << 1;
    __THREW__ = 0;
    invoke_viii(29,($9|0),($75|0),0);
    $76 = __THREW__; __THREW__ = 0;
    $77 = $76&1;
    if ($77) {
     label = 31;
     break;
    }
    $78 = HEAP8[$18>>0]|0;
    $79 = ($78<<24>>24)<(0);
    if ($79) {
     $80 = HEAP32[$32>>2]|0;
     $81 = $80 & 2147483647;
     $phitmp$i41 = (($81) + -1)|0;
     $82 = $phitmp$i41;
    } else {
     $82 = 10;
    }
    __THREW__ = 0;
    invoke_viii(29,($9|0),($82|0),0);
    $83 = __THREW__; __THREW__ = 0;
    $84 = $83&1;
    if ($84) {
     label = 31;
     break;
    }
    $85 = HEAP8[$18>>0]|0;
    $86 = ($85<<24>>24)<(0);
    $87 = HEAP32[$9>>2]|0;
    $88 = $86 ? $87 : $9;
    $89 = (($88) + ($72)|0);
    HEAP32[$10>>2] = $89;
    $$133 = $88;
   } else {
    $$133 = $$032;
   }
   $98 = ((($99)) + 12|0);
   $100 = HEAP32[$98>>2]|0;
   $101 = ((($99)) + 16|0);
   $102 = HEAP32[$101>>2]|0;
   $103 = ($100|0)==($102|0);
   if ($103) {
    $104 = HEAP32[$99>>2]|0;
    $105 = ((($104)) + 36|0);
    $106 = HEAP32[$105>>2]|0;
    __THREW__ = 0;
    $107 = (invoke_ii($106|0,($99|0))|0);
    $108 = __THREW__; __THREW__ = 0;
    $109 = $108&1;
    if ($109) {
     label = 29;
     break;
    } else {
     $$0$i$i46 = $107;
    }
   } else {
    $110 = HEAP8[$100>>0]|0;
    $111 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($110)|0);
    $$0$i$i46 = $111;
   }
   $112 = $$0$i$i46&255;
   $113 = HEAP8[$6>>0]|0;
   __THREW__ = 0;
   $114 = (invoke_iiiiiiiiiii(1,($112|0),($14|0),($$133|0),($10|0),($13|0),($113|0),($8|0),($11|0),($12|0),($15|0))|0);
   $115 = __THREW__; __THREW__ = 0;
   $116 = $115&1;
   if ($116) {
    label = 29;
    break;
   }
   $117 = ($114|0)==(0);
   if (!($117)) {
    $$2 = $$133;$173 = $193;
    label = 41;
    break;
   }
   $118 = HEAP32[$98>>2]|0;
   $119 = HEAP32[$101>>2]|0;
   $120 = ($118|0)==($119|0);
   if ($120) {
    $121 = HEAP32[$99>>2]|0;
    $122 = ((($121)) + 40|0);
    $123 = HEAP32[$122>>2]|0;
    __THREW__ = 0;
    (invoke_ii($123|0,($99|0))|0);
    $124 = __THREW__; __THREW__ = 0;
    $125 = $124&1;
    if ($125) {
     label = 29;
     break;
    }
   } else {
    $126 = ((($118)) + 1|0);
    HEAP32[$98>>2] = $126;
    $127 = HEAP8[$118>>0]|0;
    (__ZNSt3__211char_traitsIcE11to_int_typeEc($127)|0);
   }
   $$032 = $$133;$191 = $162;$34 = $99;
  }
  if ((label|0) == 29) {
   $92 = ___cxa_find_matching_catch_2()|0;
   $93 = (getTempRet0() | 0);
   $$sink74$index = $92;$$sink74$index3 = $93;
  }
  else if ((label|0) == 31) {
   $96 = ___cxa_find_matching_catch_2()|0;
   $97 = (getTempRet0() | 0);
   $$sink74$index = $96;$$sink74$index3 = $97;
  }
  else if ((label|0) == 41) {
   $128 = ((($8)) + 11|0);
   $129 = HEAP8[$128>>0]|0;
   $130 = ($129<<24>>24)<(0);
   $131 = ((($8)) + 4|0);
   $132 = HEAP32[$131>>2]|0;
   $133 = $129&255;
   $134 = $130 ? $132 : $133;
   $135 = ($134|0)==(0);
   if (!($135)) {
    $136 = HEAP32[$12>>2]|0;
    $137 = $136;
    $138 = $11;
    $139 = (($137) - ($138))|0;
    $140 = ($139|0)<(160);
    if ($140) {
     $141 = HEAP32[$13>>2]|0;
     $142 = ((($136)) + 4|0);
     HEAP32[$12>>2] = $142;
     HEAP32[$136>>2] = $141;
    }
   }
   $143 = HEAP32[$10>>2]|0;
   __THREW__ = 0;
   $144 = (invoke_iiiii(16,($$2|0),($143|0),($4|0),($14|0))|0);
   $145 = (getTempRet0() | 0);
   $146 = __THREW__; __THREW__ = 0;
   $147 = $146&1;
   L58: do {
    if (!($147)) {
     $148 = $5;
     $149 = $148;
     HEAP32[$149>>2] = $144;
     $150 = (($148) + 4)|0;
     $151 = $150;
     HEAP32[$151>>2] = $145;
     $152 = HEAP32[$12>>2]|0;
     __THREW__ = 0;
     invoke_viiii(30,($8|0),($11|0),($152|0),($4|0));
     $153 = __THREW__; __THREW__ = 0;
     $154 = $153&1;
     if (!($154)) {
      $155 = ($99|0)==(0|0);
      if ($155) {
       $194 = 1;
      } else {
       $156 = ((($99)) + 12|0);
       $157 = HEAP32[$156>>2]|0;
       $158 = ((($99)) + 16|0);
       $159 = HEAP32[$158>>2]|0;
       $160 = ($157|0)==($159|0);
       if ($160) {
        $161 = HEAP32[$162>>2]|0;
        $163 = ((($161)) + 36|0);
        $164 = HEAP32[$163>>2]|0;
        __THREW__ = 0;
        $165 = (invoke_ii($164|0,($99|0))|0);
        $166 = __THREW__; __THREW__ = 0;
        $167 = $166&1;
        if ($167) {
         break;
        } else {
         $$0$i$i$i$i50 = $165;
        }
       } else {
        $168 = HEAP8[$157>>0]|0;
        $169 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($168)|0);
        $$0$i$i$i$i50 = $169;
       }
       $170 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
       $171 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i50,$170)|0);
       if ($171) {
        HEAP32[$1>>2] = 0;
        $194 = 1;
       } else {
        $194 = 0;
       }
      }
      $172 = ($173|0)==(0|0);
      do {
       if ($172) {
        label = 58;
       } else {
        $174 = ((($173)) + 12|0);
        $175 = HEAP32[$174>>2]|0;
        $176 = ((($173)) + 16|0);
        $177 = HEAP32[$176>>2]|0;
        $178 = ($175|0)==($177|0);
        if ($178) {
         $179 = HEAP32[$173>>2]|0;
         $180 = ((($179)) + 36|0);
         $181 = HEAP32[$180>>2]|0;
         __THREW__ = 0;
         $182 = (invoke_ii($181|0,($173|0))|0);
         $183 = __THREW__; __THREW__ = 0;
         $184 = $183&1;
         if ($184) {
          break L58;
         } else {
          $$0$i$i2$i$i56 = $182;
         }
        } else {
         $185 = HEAP8[$175>>0]|0;
         $186 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($185)|0);
         $$0$i$i2$i$i56 = $186;
        }
        $187 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
        $188 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i56,$187)|0);
        if ($188) {
         HEAP32[$2>>2] = 0;
         label = 58;
         break;
        } else {
         if ($194) {
          break;
         } else {
          label = 60;
          break;
         }
        }
       }
      } while(0);
      if ((label|0) == 58) {
       if ($194) {
        label = 60;
       }
      }
      if ((label|0) == 60) {
       $189 = HEAP32[$4>>2]|0;
       $190 = $189 | 2;
       HEAP32[$4>>2] = $190;
      }
      $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
      STACKTOP = sp;return ($$sroa$0$0$copyload|0);
     }
    }
   } while(0);
   $94 = ___cxa_find_matching_catch_2()|0;
   $95 = (getTempRet0() | 0);
   $$sink74$index = $94;$$sink74$index3 = $95;
  }
  $$1 = $$sink74$index;$$135 = $$sink74$index3;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
 ___resumeException($$1|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__225__num_get_signed_integralIxEET_PKcS3_Rji($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = ($0|0)==($1|0);
 if ($5) {
  HEAP32[$2>>2] = 4;
  $26 = 0;$27 = 0;
 } else {
  $6 = (___errno_location()|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (___errno_location()|0);
  HEAP32[$8>>2] = 0;
  $9 = (__ZNSt3__26__clocEv()|0);
  $10 = (_strtoll_l($0,$4,$3,$9)|0);
  $11 = (getTempRet0() | 0);
  $12 = (___errno_location()|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)==(0);
  if ($14) {
   $15 = (___errno_location()|0);
   HEAP32[$15>>2] = $7;
  }
  $16 = HEAP32[$4>>2]|0;
  $17 = ($16|0)==($1|0);
  if ($17) {
   $18 = ($13|0)==(34);
   if ($18) {
    HEAP32[$2>>2] = 4;
    $19 = ($11|0)>(0);
    $20 = ($10>>>0)>(0);
    $21 = ($11|0)==(0);
    $22 = $21 & $20;
    $23 = $19 | $22;
    $24 = $23 ? -1 : 0;
    $25 = $23 ? 2147483647 : -2147483648;
    $28 = $24;$29 = $25;
   } else {
    $28 = $10;$29 = $11;
   }
  } else {
   HEAP32[$2>>2] = 4;
   $28 = 0;$29 = 0;
  }
  $26 = $29;$27 = $28;
 }
 setTempRet0(($26) | 0);
 STACKTOP = sp;return ($27|0);
}
function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i50 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i56 = 0, $$0$i$i46 = 0, $$032 = 0, $$1 = 0, $$133 = 0, $$135 = 0, $$2 = 0, $$pre = 0, $$sink74$index = 0, $$sink74$index3 = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
 var $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i = 0;
 var $phitmp$i = 0, $phitmp$i41 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $6 = sp + 224|0;
 $7 = sp + 160|0;
 $8 = sp + 212|0;
 $9 = sp + 200|0;
 $10 = sp + 196|0;
 $11 = sp;
 $12 = sp + 192|0;
 $13 = sp + 188|0;
 $14 = (__ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($3)|0);
 $15 = (__ZNKSt3__29__num_getIcE10__do_widenERNS_8ios_baseEPc($0,$3,$7)|0);
 __ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseERc($8,$3,$6);
 ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $16 = (($9) + ($$0$i$i<<2)|0);
  HEAP32[$16>>2] = 0;
  $17 = (($$0$i$i) + 1)|0;
  $$0$i$i = $17;
 }
 $18 = ((($9)) + 11|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = ($19<<24>>24)<(0);
 if ($20) {
  $21 = ((($9)) + 8|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $22 & 2147483647;
  $phitmp$i = (($23) + -1)|0;
  $24 = $phitmp$i;
 } else {
  $24 = 10;
 }
 __THREW__ = 0;
 invoke_viii(29,($9|0),($24|0),0);
 $25 = __THREW__; __THREW__ = 0;
 $26 = $25&1;
 if ($26) {
  $90 = ___cxa_find_matching_catch_2()|0;
  $91 = (getTempRet0() | 0);
  $$1 = $90;$$135 = $91;
 } else {
  $27 = HEAP8[$18>>0]|0;
  $28 = ($27<<24>>24)<(0);
  $29 = HEAP32[$9>>2]|0;
  $30 = $28 ? $29 : $9;
  HEAP32[$10>>2] = $30;
  HEAP32[$12>>2] = $11;
  HEAP32[$13>>2] = 0;
  $31 = ((($9)) + 4|0);
  $32 = ((($9)) + 8|0);
  $$pre = HEAP32[$1>>2]|0;
  $$032 = $30;$186 = $$pre;$34 = $$pre;
  L11: while(1) {
   $33 = ($34|0)==(0|0);
   if ($33) {
    $157 = 0;$187 = 1;$99 = 0;
   } else {
    $35 = ((($34)) + 12|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ((($34)) + 16|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = ($36|0)==($38|0);
    if ($39) {
     $40 = HEAP32[$34>>2]|0;
     $41 = ((($40)) + 36|0);
     $42 = HEAP32[$41>>2]|0;
     __THREW__ = 0;
     $43 = (invoke_ii($42|0,($34|0))|0);
     $44 = __THREW__; __THREW__ = 0;
     $45 = $44&1;
     if ($45) {
      label = 29;
      break;
     } else {
      $$0$i$i$i$i = $43;
     }
    } else {
     $46 = HEAP8[$36>>0]|0;
     $47 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($46)|0);
     $$0$i$i$i$i = $47;
    }
    $48 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
    $49 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i,$48)|0);
    if ($49) {
     HEAP32[$1>>2] = 0;
     $157 = 0;$187 = 1;$99 = 0;
    } else {
     $157 = $186;$187 = 0;$99 = $34;
    }
   }
   $50 = HEAP32[$2>>2]|0;
   $51 = ($50|0)==(0|0);
   do {
    if ($51) {
     label = 20;
    } else {
     $52 = ((($50)) + 12|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = ((($50)) + 16|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ($53|0)==($55|0);
     if ($56) {
      $57 = HEAP32[$50>>2]|0;
      $58 = ((($57)) + 36|0);
      $59 = HEAP32[$58>>2]|0;
      __THREW__ = 0;
      $60 = (invoke_ii($59|0,($50|0))|0);
      $61 = __THREW__; __THREW__ = 0;
      $62 = $61&1;
      if ($62) {
       label = 29;
       break L11;
      } else {
       $$0$i$i2$i$i = $60;
      }
     } else {
      $63 = HEAP8[$53>>0]|0;
      $64 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($63)|0);
      $$0$i$i2$i$i = $64;
     }
     $65 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
     $66 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i,$65)|0);
     if ($66) {
      HEAP32[$2>>2] = 0;
      label = 20;
      break;
     } else {
      if ($187) {
       $188 = $50;
       break;
      } else {
       $$2 = $$032;$168 = $50;
       label = 41;
       break L11;
      }
     }
    }
   } while(0);
   if ((label|0) == 20) {
    label = 0;
    if ($187) {
     $$2 = $$032;$168 = 0;
     label = 41;
     break;
    } else {
     $188 = 0;
    }
   }
   $67 = HEAP32[$10>>2]|0;
   $68 = HEAP8[$18>>0]|0;
   $69 = ($68<<24>>24)<(0);
   $70 = HEAP32[$31>>2]|0;
   $71 = $68&255;
   $72 = $69 ? $70 : $71;
   $73 = (($$032) + ($72)|0);
   $74 = ($67|0)==($73|0);
   if ($74) {
    $75 = $72 << 1;
    __THREW__ = 0;
    invoke_viii(29,($9|0),($75|0),0);
    $76 = __THREW__; __THREW__ = 0;
    $77 = $76&1;
    if ($77) {
     label = 31;
     break;
    }
    $78 = HEAP8[$18>>0]|0;
    $79 = ($78<<24>>24)<(0);
    if ($79) {
     $80 = HEAP32[$32>>2]|0;
     $81 = $80 & 2147483647;
     $phitmp$i41 = (($81) + -1)|0;
     $82 = $phitmp$i41;
    } else {
     $82 = 10;
    }
    __THREW__ = 0;
    invoke_viii(29,($9|0),($82|0),0);
    $83 = __THREW__; __THREW__ = 0;
    $84 = $83&1;
    if ($84) {
     label = 31;
     break;
    }
    $85 = HEAP8[$18>>0]|0;
    $86 = ($85<<24>>24)<(0);
    $87 = HEAP32[$9>>2]|0;
    $88 = $86 ? $87 : $9;
    $89 = (($88) + ($72)|0);
    HEAP32[$10>>2] = $89;
    $$133 = $88;
   } else {
    $$133 = $$032;
   }
   $98 = ((($99)) + 12|0);
   $100 = HEAP32[$98>>2]|0;
   $101 = ((($99)) + 16|0);
   $102 = HEAP32[$101>>2]|0;
   $103 = ($100|0)==($102|0);
   if ($103) {
    $104 = HEAP32[$99>>2]|0;
    $105 = ((($104)) + 36|0);
    $106 = HEAP32[$105>>2]|0;
    __THREW__ = 0;
    $107 = (invoke_ii($106|0,($99|0))|0);
    $108 = __THREW__; __THREW__ = 0;
    $109 = $108&1;
    if ($109) {
     label = 29;
     break;
    } else {
     $$0$i$i46 = $107;
    }
   } else {
    $110 = HEAP8[$100>>0]|0;
    $111 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($110)|0);
    $$0$i$i46 = $111;
   }
   $112 = $$0$i$i46&255;
   $113 = HEAP8[$6>>0]|0;
   __THREW__ = 0;
   $114 = (invoke_iiiiiiiiiii(1,($112|0),($14|0),($$133|0),($10|0),($13|0),($113|0),($8|0),($11|0),($12|0),($15|0))|0);
   $115 = __THREW__; __THREW__ = 0;
   $116 = $115&1;
   if ($116) {
    label = 29;
    break;
   }
   $117 = ($114|0)==(0);
   if (!($117)) {
    $$2 = $$133;$168 = $188;
    label = 41;
    break;
   }
   $118 = HEAP32[$98>>2]|0;
   $119 = HEAP32[$101>>2]|0;
   $120 = ($118|0)==($119|0);
   if ($120) {
    $121 = HEAP32[$99>>2]|0;
    $122 = ((($121)) + 40|0);
    $123 = HEAP32[$122>>2]|0;
    __THREW__ = 0;
    (invoke_ii($123|0,($99|0))|0);
    $124 = __THREW__; __THREW__ = 0;
    $125 = $124&1;
    if ($125) {
     label = 29;
     break;
    }
   } else {
    $126 = ((($118)) + 1|0);
    HEAP32[$98>>2] = $126;
    $127 = HEAP8[$118>>0]|0;
    (__ZNSt3__211char_traitsIcE11to_int_typeEc($127)|0);
   }
   $$032 = $$133;$186 = $157;$34 = $99;
  }
  if ((label|0) == 29) {
   $92 = ___cxa_find_matching_catch_2()|0;
   $93 = (getTempRet0() | 0);
   $$sink74$index = $92;$$sink74$index3 = $93;
  }
  else if ((label|0) == 31) {
   $96 = ___cxa_find_matching_catch_2()|0;
   $97 = (getTempRet0() | 0);
   $$sink74$index = $96;$$sink74$index3 = $97;
  }
  else if ((label|0) == 41) {
   $128 = ((($8)) + 11|0);
   $129 = HEAP8[$128>>0]|0;
   $130 = ($129<<24>>24)<(0);
   $131 = ((($8)) + 4|0);
   $132 = HEAP32[$131>>2]|0;
   $133 = $129&255;
   $134 = $130 ? $132 : $133;
   $135 = ($134|0)==(0);
   if (!($135)) {
    $136 = HEAP32[$12>>2]|0;
    $137 = $136;
    $138 = $11;
    $139 = (($137) - ($138))|0;
    $140 = ($139|0)<(160);
    if ($140) {
     $141 = HEAP32[$13>>2]|0;
     $142 = ((($136)) + 4|0);
     HEAP32[$12>>2] = $142;
     HEAP32[$136>>2] = $141;
    }
   }
   $143 = HEAP32[$10>>2]|0;
   __THREW__ = 0;
   $144 = (invoke_iiiii(17,($$2|0),($143|0),($4|0),($14|0))|0);
   $145 = __THREW__; __THREW__ = 0;
   $146 = $145&1;
   L58: do {
    if (!($146)) {
     HEAP32[$5>>2] = $144;
     $147 = HEAP32[$12>>2]|0;
     __THREW__ = 0;
     invoke_viiii(30,($8|0),($11|0),($147|0),($4|0));
     $148 = __THREW__; __THREW__ = 0;
     $149 = $148&1;
     if (!($149)) {
      $150 = ($99|0)==(0|0);
      if ($150) {
       $189 = 1;
      } else {
       $151 = ((($99)) + 12|0);
       $152 = HEAP32[$151>>2]|0;
       $153 = ((($99)) + 16|0);
       $154 = HEAP32[$153>>2]|0;
       $155 = ($152|0)==($154|0);
       if ($155) {
        $156 = HEAP32[$157>>2]|0;
        $158 = ((($156)) + 36|0);
        $159 = HEAP32[$158>>2]|0;
        __THREW__ = 0;
        $160 = (invoke_ii($159|0,($99|0))|0);
        $161 = __THREW__; __THREW__ = 0;
        $162 = $161&1;
        if ($162) {
         break;
        } else {
         $$0$i$i$i$i50 = $160;
        }
       } else {
        $163 = HEAP8[$152>>0]|0;
        $164 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($163)|0);
        $$0$i$i$i$i50 = $164;
       }
       $165 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
       $166 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i50,$165)|0);
       if ($166) {
        HEAP32[$1>>2] = 0;
        $189 = 1;
       } else {
        $189 = 0;
       }
      }
      $167 = ($168|0)==(0|0);
      do {
       if ($167) {
        label = 58;
       } else {
        $169 = ((($168)) + 12|0);
        $170 = HEAP32[$169>>2]|0;
        $171 = ((($168)) + 16|0);
        $172 = HEAP32[$171>>2]|0;
        $173 = ($170|0)==($172|0);
        if ($173) {
         $174 = HEAP32[$168>>2]|0;
         $175 = ((($174)) + 36|0);
         $176 = HEAP32[$175>>2]|0;
         __THREW__ = 0;
         $177 = (invoke_ii($176|0,($168|0))|0);
         $178 = __THREW__; __THREW__ = 0;
         $179 = $178&1;
         if ($179) {
          break L58;
         } else {
          $$0$i$i2$i$i56 = $177;
         }
        } else {
         $180 = HEAP8[$170>>0]|0;
         $181 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($180)|0);
         $$0$i$i2$i$i56 = $181;
        }
        $182 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
        $183 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i56,$182)|0);
        if ($183) {
         HEAP32[$2>>2] = 0;
         label = 58;
         break;
        } else {
         if ($189) {
          break;
         } else {
          label = 60;
          break;
         }
        }
       }
      } while(0);
      if ((label|0) == 58) {
       if ($189) {
        label = 60;
       }
      }
      if ((label|0) == 60) {
       $184 = HEAP32[$4>>2]|0;
       $185 = $184 | 2;
       HEAP32[$4>>2] = $185;
      }
      $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
      STACKTOP = sp;return ($$sroa$0$0$copyload|0);
     }
    }
   } while(0);
   $94 = ___cxa_find_matching_catch_2()|0;
   $95 = (getTempRet0() | 0);
   $$sink74$index = $94;$$sink74$index3 = $95;
  }
  $$1 = $$sink74$index;$$135 = $$sink74$index3;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
 ___resumeException($$1|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__225__num_get_signed_integralIlEET_PKcS3_Rji($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = ($0|0)==($1|0);
 if ($5) {
  HEAP32[$2>>2] = 4;
  $$1 = 0;
 } else {
  $6 = (___errno_location()|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (___errno_location()|0);
  HEAP32[$8>>2] = 0;
  $9 = (__ZNSt3__26__clocEv()|0);
  $10 = (_strtoll_l($0,$4,$3,$9)|0);
  $11 = (getTempRet0() | 0);
  $12 = (___errno_location()|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)==(0);
  if ($14) {
   $15 = (___errno_location()|0);
   HEAP32[$15>>2] = $7;
  }
  $16 = HEAP32[$4>>2]|0;
  $17 = ($16|0)==($1|0);
  L7: do {
   if ($17) {
    $18 = ($13|0)==(34);
    do {
     if ($18) {
      HEAP32[$2>>2] = 4;
      $29 = ($11|0)>(0);
      $30 = ($10>>>0)>(0);
      $31 = ($11|0)==(0);
      $32 = $31 & $30;
      $33 = $29 | $32;
      if ($33) {
       $$0 = 2147483647;
       break L7;
      }
     } else {
      $19 = ($11|0)<(-1);
      $20 = ($10>>>0)<(2147483648);
      $21 = ($11|0)==(-1);
      $22 = $21 & $20;
      $23 = $19 | $22;
      if ($23) {
       HEAP32[$2>>2] = 4;
       break;
      }
      $24 = ($11|0)>(0);
      $25 = ($10>>>0)>(2147483647);
      $26 = ($11|0)==(0);
      $27 = $26 & $25;
      $28 = $24 | $27;
      if ($28) {
       HEAP32[$2>>2] = 4;
       $$0 = 2147483647;
       break L7;
      } else {
       $$0 = $10;
       break L7;
      }
     }
    } while(0);
    $$0 = -2147483648;
   } else {
    HEAP32[$2>>2] = 4;
    $$0 = 0;
   }
  } while(0);
  $$1 = $$0;
 }
 STACKTOP = sp;return ($$1|0);
}
function __ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i132 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i138 = 0, $$0100 = 0, $$0101 = 0, $$0102 = 0, $$0103 = 0, $$0106 = 0, $$0110 = 0, $$0126 = 0, $$0127 = 0, $$0127182 = 0, $$097 = 0, $$098 = 0, $$099$off0 = 0, $$1104 = 0, $$1107 = 0;
 var $$1111 = 0, $$2$off0 = 0, $$2105 = 0, $$2108 = 0, $$2108$be = 0, $$2112 = 0, $$3 = 0, $$3109 = 0, $$3113 = 0, $$4120190 = 0, $$4125189 = 0, $$5 = 0, $$5115 = 0, $$6 = 0, $$7 = 0, $$pre$i$i$i = 0, $$pre$i$i$i134 = 0, $$sink247$index = 0, $$sink247$index5 = 0, $$sroa$0153$0 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i135 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $7 = sp;
 $8 = $3;
 $9 = $2;
 $10 = (($8) - ($9))|0;
 $11 = (($10|0) / 12)&-1;
 $12 = ($11>>>0)>(100);
 do {
  if ($12) {
   $13 = (_malloc($11)|0);
   $14 = ($13|0)==(0|0);
   if ($14) {
    __THREW__ = 0;
    invoke_v(4);
    $15 = __THREW__; __THREW__ = 0;
    $16 = ___cxa_find_matching_catch_2()|0;
    $17 = (getTempRet0() | 0);
    $$4120190 = $17;$$4125189 = $16;
    break;
   } else {
    $18 = $13;
    $$0126 = $13;$$sroa$0153$0 = $18;
    label = 5;
    break;
   }
  } else {
   $$0126 = $7;$$sroa$0153$0 = 0;
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  $$0102 = $2;$$0103 = $$0126;$$0106 = 0;$$0110 = $11;
  while(1) {
   $19 = ($$0102|0)==($3|0);
   if ($19) {
    break;
   }
   $20 = ((($$0102)) + 11|0);
   $21 = HEAP8[$20>>0]|0;
   $22 = ($21<<24>>24)<(0);
   if ($22) {
    $23 = ((($$0102)) + 4|0);
    $24 = HEAP32[$23>>2]|0;
    $27 = $24;
   } else {
    $25 = $21&255;
    $27 = $25;
   }
   $26 = ($27|0)==(0);
   if ($26) {
    HEAP8[$$0103>>0] = 2;
    $28 = (($$0110) + -1)|0;
    $29 = (($$0106) + 1)|0;
    $$1107 = $29;$$1111 = $28;
   } else {
    HEAP8[$$0103>>0] = 1;
    $$1107 = $$0106;$$1111 = $$0110;
   }
   $30 = ((($$0102)) + 12|0);
   $31 = ((($$0103)) + 1|0);
   $$0102 = $30;$$0103 = $31;$$0106 = $$1107;$$0110 = $$1111;
  }
  $$0101 = 0;$$2108 = $$0106;$$2112 = $$0110;
  L20: while(1) {
   $32 = HEAP32[$0>>2]|0;
   $33 = ($32|0)==(0|0);
   do {
    if ($33) {
     $67 = 1;
    } else {
     $34 = ((($32)) + 12|0);
     $35 = HEAP32[$34>>2]|0;
     $36 = ((($32)) + 16|0);
     $37 = HEAP32[$36>>2]|0;
     $38 = ($35|0)==($37|0);
     if ($38) {
      $39 = HEAP32[$32>>2]|0;
      $40 = ((($39)) + 36|0);
      $41 = HEAP32[$40>>2]|0;
      __THREW__ = 0;
      $42 = (invoke_ii($41|0,($32|0))|0);
      $43 = __THREW__; __THREW__ = 0;
      $44 = $43&1;
      if ($44) {
       label = 42;
       break L20;
      } else {
       $$0$i$i$i$i = $42;
      }
     } else {
      $45 = HEAP8[$35>>0]|0;
      $46 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($45)|0);
      $$0$i$i$i$i = $46;
     }
     $47 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
     $48 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i,$47)|0);
     if ($48) {
      HEAP32[$0>>2] = 0;
      $67 = 1;
      break;
     } else {
      $$pre$i$i$i = HEAP32[$0>>2]|0;
      $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
      $67 = $phitmp$i$i$i;
      break;
     }
    }
   } while(0);
   $49 = HEAP32[$1>>2]|0;
   $50 = ($49|0)==(0|0);
   if ($50) {
    $68 = 1;$89 = 0;
   } else {
    $51 = ((($49)) + 12|0);
    $52 = HEAP32[$51>>2]|0;
    $53 = ((($49)) + 16|0);
    $54 = HEAP32[$53>>2]|0;
    $55 = ($52|0)==($54|0);
    if ($55) {
     $56 = HEAP32[$49>>2]|0;
     $57 = ((($56)) + 36|0);
     $58 = HEAP32[$57>>2]|0;
     __THREW__ = 0;
     $59 = (invoke_ii($58|0,($49|0))|0);
     $60 = __THREW__; __THREW__ = 0;
     $61 = $60&1;
     if ($61) {
      label = 42;
      break;
     } else {
      $$0$i$i2$i$i = $59;
     }
    } else {
     $62 = HEAP8[$52>>0]|0;
     $63 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($62)|0);
     $$0$i$i2$i$i = $63;
    }
    $64 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
    $65 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i,$64)|0);
    if ($65) {
     HEAP32[$1>>2] = 0;
     $68 = 1;$89 = 0;
    } else {
     $68 = 0;$89 = $49;
    }
   }
   $66 = $67 ^ $68;
   $69 = ($$2112|0)!=(0);
   $70 = $69 & $66;
   $71 = HEAP32[$0>>2]|0;
   if (!($70)) {
    label = 29;
    break;
   }
   $107 = ((($71)) + 12|0);
   $108 = HEAP32[$107>>2]|0;
   $109 = ((($71)) + 16|0);
   $110 = HEAP32[$109>>2]|0;
   $111 = ($108|0)==($110|0);
   if ($111) {
    $112 = HEAP32[$71>>2]|0;
    $113 = ((($112)) + 36|0);
    $114 = HEAP32[$113>>2]|0;
    __THREW__ = 0;
    $115 = (invoke_ii($114|0,($71|0))|0);
    $116 = __THREW__; __THREW__ = 0;
    $117 = $116&1;
    if ($117) {
     label = 48;
     break;
    } else {
     $$0$i$i = $115;
    }
   } else {
    $118 = HEAP8[$108>>0]|0;
    $119 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($118)|0);
    $$0$i$i = $119;
   }
   $120 = $$0$i$i&255;
   if ($6) {
    $$0100 = $120;
   } else {
    $121 = HEAP32[$4>>2]|0;
    $122 = ((($121)) + 12|0);
    $123 = HEAP32[$122>>2]|0;
    __THREW__ = 0;
    $124 = (invoke_iii($123|0,($4|0),($120|0))|0);
    $125 = __THREW__; __THREW__ = 0;
    $126 = $125&1;
    if ($126) {
     label = 48;
     break;
    } else {
     $$0100 = $124;
    }
   }
   $129 = (($$0101) + 1)|0;
   $$098 = $2;$$099$off0 = 0;$$1104 = $$0126;$$3109 = $$2108;$$3113 = $$2112;
   while(1) {
    $130 = ($$098|0)==($3|0);
    if ($130) {
     break;
    }
    $131 = HEAP8[$$1104>>0]|0;
    $132 = ($131<<24>>24)==(1);
    do {
     if ($132) {
      $133 = ((($$098)) + 11|0);
      $134 = HEAP8[$133>>0]|0;
      $135 = ($134<<24>>24)<(0);
      if ($135) {
       $136 = HEAP32[$$098>>2]|0;
       $138 = $136;
      } else {
       $138 = $$098;
      }
      $137 = (($138) + ($$0101)|0);
      $139 = HEAP8[$137>>0]|0;
      if ($6) {
       $$097 = $139;
      } else {
       $140 = HEAP32[$4>>2]|0;
       $141 = ((($140)) + 12|0);
       $142 = HEAP32[$141>>2]|0;
       __THREW__ = 0;
       $143 = (invoke_iii($142|0,($4|0),($139|0))|0);
       $144 = __THREW__; __THREW__ = 0;
       $145 = $144&1;
       if ($145) {
        label = 58;
        break L20;
       } else {
        $$097 = $143;
       }
      }
      $148 = ($$0100<<24>>24)==($$097<<24>>24);
      if (!($148)) {
       HEAP8[$$1104>>0] = 0;
       $158 = (($$3113) + -1)|0;
       $$2$off0 = $$099$off0;$$5 = $$3109;$$5115 = $158;
       break;
      }
      $149 = HEAP8[$133>>0]|0;
      $150 = ($149<<24>>24)<(0);
      if ($150) {
       $151 = ((($$098)) + 4|0);
       $152 = HEAP32[$151>>2]|0;
       $155 = $152;
      } else {
       $153 = $149&255;
       $155 = $153;
      }
      $154 = ($155|0)==($129|0);
      if ($154) {
       $156 = (($$3113) + -1)|0;
       $157 = (($$3109) + 1)|0;
       HEAP8[$$1104>>0] = 2;
       $$2$off0 = 1;$$5 = $157;$$5115 = $156;
      } else {
       $$2$off0 = 1;$$5 = $$3109;$$5115 = $$3113;
      }
     } else {
      $$2$off0 = $$099$off0;$$5 = $$3109;$$5115 = $$3113;
     }
    } while(0);
    $159 = ((($$098)) + 12|0);
    $160 = ((($$1104)) + 1|0);
    $$098 = $159;$$099$off0 = $$2$off0;$$1104 = $160;$$3109 = $$5;$$3113 = $$5115;
   }
   L70: do {
    if ($$099$off0) {
     $161 = HEAP32[$0>>2]|0;
     $162 = ((($161)) + 12|0);
     $163 = HEAP32[$162>>2]|0;
     $164 = ((($161)) + 16|0);
     $165 = HEAP32[$164>>2]|0;
     $166 = ($163|0)==($165|0);
     if ($166) {
      $167 = HEAP32[$161>>2]|0;
      $168 = ((($167)) + 40|0);
      $169 = HEAP32[$168>>2]|0;
      __THREW__ = 0;
      (invoke_ii($169|0,($161|0))|0);
      $170 = __THREW__; __THREW__ = 0;
      $171 = $170&1;
      if ($171) {
       label = 74;
       break L20;
      }
     } else {
      $172 = ((($163)) + 1|0);
      HEAP32[$162>>2] = $172;
      $173 = HEAP8[$163>>0]|0;
      (__ZNSt3__211char_traitsIcE11to_int_typeEc($173)|0);
     }
     $174 = (($$3109) + ($$3113))|0;
     $175 = ($174>>>0)>(1);
     if ($175) {
      $$0 = $2;$$2105 = $$0126;$$6 = $$3109;
      while(1) {
       $176 = ($$0|0)==($3|0);
       if ($176) {
        $$2108$be = $$6;
        break L70;
       }
       $179 = HEAP8[$$2105>>0]|0;
       $180 = ($179<<24>>24)==(2);
       if ($180) {
        $181 = ((($$0)) + 11|0);
        $182 = HEAP8[$181>>0]|0;
        $183 = ($182<<24>>24)<(0);
        if ($183) {
         $184 = ((($$0)) + 4|0);
         $185 = HEAP32[$184>>2]|0;
         $188 = $185;
        } else {
         $186 = $182&255;
         $188 = $186;
        }
        $187 = ($188|0)==($129|0);
        if ($187) {
         $$7 = $$6;
        } else {
         $189 = (($$6) + -1)|0;
         HEAP8[$$2105>>0] = 0;
         $$7 = $189;
        }
       } else {
        $$7 = $$6;
       }
       $190 = ((($$0)) + 12|0);
       $191 = ((($$2105)) + 1|0);
       $$0 = $190;$$2105 = $191;$$6 = $$7;
      }
     } else {
      $$2108$be = $$3109;
     }
    } else {
     $$2108$be = $$3109;
    }
   } while(0);
   $$0101 = $129;$$2108 = $$2108$be;$$2112 = $$3113;
  }
  if ((label|0) == 29) {
   $72 = ($71|0)==(0|0);
   do {
    if ($72) {
     $207 = 1;
     label = 36;
    } else {
     $73 = ((($71)) + 12|0);
     $74 = HEAP32[$73>>2]|0;
     $75 = ((($71)) + 16|0);
     $76 = HEAP32[$75>>2]|0;
     $77 = ($74|0)==($76|0);
     if ($77) {
      $78 = HEAP32[$71>>2]|0;
      $79 = ((($78)) + 36|0);
      $80 = HEAP32[$79>>2]|0;
      __THREW__ = 0;
      $81 = (invoke_ii($80|0,($71|0))|0);
      $82 = __THREW__; __THREW__ = 0;
      $83 = $82&1;
      if ($83) {
       break;
      } else {
       $$0$i$i$i$i132 = $81;
      }
     } else {
      $84 = HEAP8[$74>>0]|0;
      $85 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($84)|0);
      $$0$i$i$i$i132 = $85;
     }
     $86 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
     $87 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i132,$86)|0);
     if ($87) {
      HEAP32[$0>>2] = 0;
      $207 = 1;
      label = 36;
      break;
     } else {
      $$pre$i$i$i134 = HEAP32[$0>>2]|0;
      $phitmp$i$i$i135 = ($$pre$i$i$i134|0)==(0|0);
      $207 = $phitmp$i$i$i135;
      label = 36;
      break;
     }
    }
   } while(0);
   L103: do {
    if ((label|0) == 36) {
     $88 = ($89|0)==(0|0);
     do {
      if ($88) {
       label = 82;
      } else {
       $90 = ((($89)) + 12|0);
       $91 = HEAP32[$90>>2]|0;
       $92 = ((($89)) + 16|0);
       $93 = HEAP32[$92>>2]|0;
       $94 = ($91|0)==($93|0);
       if ($94) {
        $95 = HEAP32[$89>>2]|0;
        $96 = ((($95)) + 36|0);
        $97 = HEAP32[$96>>2]|0;
        __THREW__ = 0;
        $98 = (invoke_ii($97|0,($89|0))|0);
        $99 = __THREW__; __THREW__ = 0;
        $100 = $99&1;
        if ($100) {
         break L103;
        } else {
         $$0$i$i2$i$i138 = $98;
        }
       } else {
        $101 = HEAP8[$91>>0]|0;
        $102 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($101)|0);
        $$0$i$i2$i$i138 = $102;
       }
       $103 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
       $104 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i138,$103)|0);
       if ($104) {
        HEAP32[$1>>2] = 0;
        label = 82;
        break;
       } else {
        if ($207) {
         break;
        } else {
         label = 84;
         break;
        }
       }
      }
     } while(0);
     if ((label|0) == 82) {
      if ($207) {
       label = 84;
      }
     }
     if ((label|0) == 84) {
      $192 = HEAP32[$5>>2]|0;
      $193 = $192 | 2;
      HEAP32[$5>>2] = $193;
     }
     $$0127 = $2;$$3 = $$0126;
     while(1) {
      $196 = ($$0127|0)==($3|0);
      if ($196) {
       label = 90;
       break;
      }
      $197 = HEAP8[$$3>>0]|0;
      $198 = ($197<<24>>24)==(2);
      if ($198) {
       $$0127182 = $$0127;
       break;
      }
      $199 = ((($$0127)) + 12|0);
      $200 = ((($$3)) + 1|0);
      $$0127 = $199;$$3 = $200;
     }
     if ((label|0) == 90) {
      $201 = HEAP32[$5>>2]|0;
      $202 = $201 | 4;
      HEAP32[$5>>2] = $202;
      $$0127182 = $3;
     }
     $203 = ($$sroa$0153$0|0)==(0);
     if (!($203)) {
      $204 = $$sroa$0153$0;
      _free($204);
     }
     STACKTOP = sp;return ($$0127182|0);
    }
   } while(0);
   $194 = ___cxa_find_matching_catch_2()|0;
   $195 = (getTempRet0() | 0);
   $$sink247$index = $194;$$sink247$index5 = $195;
  }
  else if ((label|0) == 42) {
   $105 = ___cxa_find_matching_catch_2()|0;
   $106 = (getTempRet0() | 0);
   $$sink247$index = $105;$$sink247$index5 = $106;
  }
  else if ((label|0) == 48) {
   $127 = ___cxa_find_matching_catch_2()|0;
   $128 = (getTempRet0() | 0);
   $$sink247$index = $127;$$sink247$index5 = $128;
  }
  else if ((label|0) == 58) {
   $146 = ___cxa_find_matching_catch_2()|0;
   $147 = (getTempRet0() | 0);
   $$sink247$index = $146;$$sink247$index5 = $147;
  }
  else if ((label|0) == 74) {
   $177 = ___cxa_find_matching_catch_2()|0;
   $178 = (getTempRet0() | 0);
   $$sink247$index = $177;$$sink247$index5 = $178;
  }
  $205 = ($$sroa$0153$0|0)==(0);
  if ($205) {
   $$4120190 = $$sink247$index5;$$4125189 = $$sink247$index;
  } else {
   $206 = $$sroa$0153$0;
   _free($206);
   $$4120190 = $$sink247$index5;$$4125189 = $$sink247$index;
  }
 }
 ___resumeException($$4125189|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}
function __ZNSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$030 = 0, $$2 = 0, $$233 = 0, $$byval_copy = 0, $$byval_copy9 = 0, $$ptr = 0, $$sink$index3 = 0, $$sroa$027$0 = 0, $$sroa$027$0$copyload = 0, $$sroa$027$0$copyload29 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $$byval_copy9 = sp + 40|0;
 $$byval_copy = sp;
 $6 = sp + 32|0;
 $7 = sp + 36|0;
 $8 = sp + 28|0;
 $9 = sp + 24|0;
 $10 = ((($3)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $11 & 1;
 $13 = ($12|0)==(0);
 L1: do {
  if ($13) {
   HEAP32[$6>>2] = -1;
   $14 = HEAP32[$0>>2]|0;
   $15 = ((($14)) + 16|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = HEAP32[$1>>2]|0;
   HEAP32[$7>>2] = $17;
   $18 = HEAP32[$2>>2]|0;
   HEAP32[$8>>2] = $18;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$7>>2]|0;
   ;HEAP32[$$byval_copy9>>2]=HEAP32[$8>>2]|0;
   $19 = (FUNCTION_TABLE_iiiiiii[$16 & 63]($0,$$byval_copy,$$byval_copy9,$3,$4,$6)|0);
   HEAP32[$1>>2] = $19;
   $20 = HEAP32[$6>>2]|0;
   switch ($20|0) {
   case 0:  {
    HEAP8[$5>>0] = 0;
    break;
   }
   case 1:  {
    HEAP8[$5>>0] = 1;
    break;
   }
   default: {
    HEAP8[$5>>0] = 1;
    HEAP32[$4>>2] = 4;
   }
   }
   $$sroa$027$0$copyload = HEAP32[$1>>2]|0;
   $$sroa$027$0 = $$sroa$027$0$copyload;
  } else {
   __ZNKSt3__28ios_base6getlocEv($$byval_copy9,$3);
   __THREW__ = 0;
   $21 = (invoke_iii(37,($$byval_copy9|0),(50772|0))|0);
   $22 = __THREW__; __THREW__ = 0;
   $23 = $22&1;
   do {
    if ($23) {
     $46 = ___cxa_find_matching_catch_2()|0;
     $47 = (getTempRet0() | 0);
     __ZNSt3__26localeD2Ev($$byval_copy9);
     $$2 = $46;$$233 = $47;
    } else {
     __ZNSt3__26localeD2Ev($$byval_copy9);
     __ZNKSt3__28ios_base6getlocEv($$byval_copy9,$3);
     __THREW__ = 0;
     $24 = (invoke_iii(37,($$byval_copy9|0),(50780|0))|0);
     $25 = __THREW__; __THREW__ = 0;
     $26 = $25&1;
     if ($26) {
      $48 = ___cxa_find_matching_catch_2()|0;
      $49 = (getTempRet0() | 0);
      __ZNSt3__26localeD2Ev($$byval_copy9);
      $$2 = $48;$$233 = $49;
      break;
     }
     __ZNSt3__26localeD2Ev($$byval_copy9);
     $27 = HEAP32[$24>>2]|0;
     $28 = ((($27)) + 24|0);
     $29 = HEAP32[$28>>2]|0;
     __THREW__ = 0;
     invoke_vii($29|0,($$byval_copy|0),($24|0));
     $30 = __THREW__; __THREW__ = 0;
     $31 = $30&1;
     L15: do {
      if ($31) {
       $32 = ___cxa_find_matching_catch_2()|0;
       $33 = (getTempRet0() | 0);
       $$030 = $32;$$sink$index3 = $33;
      } else {
       $$ptr = ((($$byval_copy)) + 12|0);
       $34 = HEAP32[$24>>2]|0;
       $35 = ((($34)) + 28|0);
       $36 = HEAP32[$35>>2]|0;
       __THREW__ = 0;
       invoke_vii($36|0,($$ptr|0),($24|0));
       $37 = __THREW__; __THREW__ = 0;
       $38 = $37&1;
       if ($38) {
        $58 = ___cxa_find_matching_catch_2()|0;
        $59 = (getTempRet0() | 0);
        __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($$byval_copy);
        $$030 = $58;$$sink$index3 = $59;
        break;
       }
       $39 = HEAP32[$2>>2]|0;
       HEAP32[$9>>2] = $39;
       $40 = ((($$byval_copy)) + 24|0);
       __THREW__ = 0;
       ;HEAP32[$$byval_copy9>>2]=HEAP32[$9>>2]|0;
       $41 = (invoke_iiiiiiii(8,($1|0),($$byval_copy9|0),($$byval_copy|0),($40|0),($21|0),($4|0),1)|0);
       $42 = __THREW__; __THREW__ = 0;
       $43 = $42&1;
       if ($43) {
        $50 = ___cxa_find_matching_catch_2()|0;
        $51 = (getTempRet0() | 0);
        $56 = $40;
        while(1) {
         $55 = ((($56)) + -12|0);
         __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($55);
         $57 = ($55|0)==($$byval_copy|0);
         if ($57) {
          $$030 = $50;$$sink$index3 = $51;
          break L15;
         } else {
          $56 = $55;
         }
        }
       }
       $44 = ($41|0)==($$byval_copy|0);
       $45 = $44&1;
       HEAP8[$5>>0] = $45;
       $$sroa$027$0$copyload29 = HEAP32[$1>>2]|0;
       $53 = $40;
       while(1) {
        $52 = ((($53)) + -12|0);
        __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($52);
        $54 = ($52|0)==($$byval_copy|0);
        if ($54) {
         break;
        } else {
         $53 = $52;
        }
       }
       $$sroa$027$0 = $$sroa$027$0$copyload29;
       break L1;
      }
     } while(0);
     $$2 = $$030;$$233 = $$sink$index3;
    }
   } while(0);
   ___resumeException($$2|0);
   // unreachable;
  }
 } while(0);
 STACKTOP = sp;return ($$sroa$027$0|0);
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $9;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $10 = (__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($0,$$byval_copy,$$byval_copy1,$3,$4,$5)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $9;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $10 = (__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($0,$$byval_copy,$$byval_copy1,$3,$4,$5)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $9;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $10 = (__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($0,$$byval_copy,$$byval_copy1,$3,$4,$5)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $9;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $10 = (__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($0,$$byval_copy,$$byval_copy1,$3,$4,$5)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $9;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $10 = (__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($0,$$byval_copy,$$byval_copy1,$3,$4,$5)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $9;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $10 = (__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($0,$$byval_copy,$$byval_copy1,$3,$4,$5)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $9;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $10 = (__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($0,$$byval_copy,$$byval_copy1,$3,$4,$5)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $9;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $10 = (__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($0,$$byval_copy,$$byval_copy1,$3,$4,$5)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $9;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $10 = (__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($0,$$byval_copy,$$byval_copy1,$3,$4,$5)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i50 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i56 = 0, $$0$i$i32 = 0, $$0$i$i45 = 0, $$025 = 0, $$126 = 0, $$2 = 0, $$227 = 0, $$230 = 0, $$3 = 0, $$331 = 0, $$pre = 0, $$sink74$index = 0, $$sink74$index3 = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i = 0, $exitcond$i$i33 = 0, $phitmp$i = 0, $phitmp$i40 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(304|0);
 $vararg_buffer = sp + 264|0;
 $6 = sp + 160|0;
 $7 = sp + 292|0;
 $8 = sp + 280|0;
 $9 = sp + 276|0;
 $10 = sp;
 $11 = sp + 272|0;
 $12 = sp + 268|0;
 ;HEAP32[$7>>2]=0|0;HEAP32[$7+4>>2]=0|0;HEAP32[$7+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $13 = (($7) + ($$0$i$i<<2)|0);
  HEAP32[$13>>2] = 0;
  $14 = (($$0$i$i) + 1)|0;
  $$0$i$i = $14;
 }
 __ZNKSt3__28ios_base6getlocEv($8,$3);
 __THREW__ = 0;
 $15 = (invoke_iii(37,($8|0),(50772|0))|0);
 $16 = __THREW__; __THREW__ = 0;
 $17 = $16&1;
 if ($17) {
  label = 33;
 } else {
  $18 = HEAP32[$15>>2]|0;
  $19 = ((($18)) + 48|0);
  $20 = HEAP32[$19>>2]|0;
  __THREW__ = 0;
  (invoke_iiiii($20|0,($15|0),(20912|0),((20938)|0),($6|0))|0);
  $21 = __THREW__; __THREW__ = 0;
  $22 = $21&1;
  if ($22) {
   label = 33;
  } else {
   __ZNSt3__26localeD2Ev($8);
   ;HEAP32[$8>>2]=0|0;HEAP32[$8+4>>2]=0|0;HEAP32[$8+8>>2]=0|0;
   $$0$i$i32 = 0;
   while(1) {
    $exitcond$i$i33 = ($$0$i$i32|0)==(3);
    if ($exitcond$i$i33) {
     break;
    }
    $23 = (($8) + ($$0$i$i32<<2)|0);
    HEAP32[$23>>2] = 0;
    $24 = (($$0$i$i32) + 1)|0;
    $$0$i$i32 = $24;
   }
   $25 = ((($8)) + 11|0);
   $26 = HEAP8[$25>>0]|0;
   $27 = ($26<<24>>24)<(0);
   if ($27) {
    $28 = ((($8)) + 8|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = $29 & 2147483647;
    $phitmp$i = (($30) + -1)|0;
    $31 = $phitmp$i;
   } else {
    $31 = 10;
   }
   __THREW__ = 0;
   invoke_viii(29,($8|0),($31|0),0);
   $32 = __THREW__; __THREW__ = 0;
   $33 = $32&1;
   if ($33) {
    $99 = ___cxa_find_matching_catch_2()|0;
    $100 = (getTempRet0() | 0);
    $$2 = $99;$$230 = $100;
   } else {
    $34 = HEAP8[$25>>0]|0;
    $35 = ($34<<24>>24)<(0);
    $36 = HEAP32[$8>>2]|0;
    $37 = $35 ? $36 : $8;
    HEAP32[$9>>2] = $37;
    HEAP32[$11>>2] = $10;
    HEAP32[$12>>2] = 0;
    $38 = ((($8)) + 4|0);
    $39 = ((($8)) + 8|0);
    $$pre = HEAP32[$1>>2]|0;
    $$025 = $37;$187 = $$pre;$41 = $$pre;
    L18: while(1) {
     $40 = ($41|0)==(0|0);
     if ($40) {
      $108 = 0;$158 = 0;$188 = 1;
     } else {
      $42 = ((($41)) + 12|0);
      $43 = HEAP32[$42>>2]|0;
      $44 = ((($41)) + 16|0);
      $45 = HEAP32[$44>>2]|0;
      $46 = ($43|0)==($45|0);
      if ($46) {
       $47 = HEAP32[$41>>2]|0;
       $48 = ((($47)) + 36|0);
       $49 = HEAP32[$48>>2]|0;
       __THREW__ = 0;
       $50 = (invoke_ii($49|0,($41|0))|0);
       $51 = __THREW__; __THREW__ = 0;
       $52 = $51&1;
       if ($52) {
        label = 35;
        break;
       } else {
        $$0$i$i$i$i = $50;
       }
      } else {
       $53 = HEAP32[$43>>2]|0;
       $54 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($53)|0);
       $$0$i$i$i$i = $54;
      }
      $55 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
      $56 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i,$55)|0);
      if ($56) {
       HEAP32[$1>>2] = 0;
       $108 = 0;$158 = 0;$188 = 1;
      } else {
       $108 = $41;$158 = $187;$188 = 0;
      }
     }
     $57 = HEAP32[$2>>2]|0;
     $58 = ($57|0)==(0|0);
     do {
      if ($58) {
       label = 25;
      } else {
       $59 = ((($57)) + 12|0);
       $60 = HEAP32[$59>>2]|0;
       $61 = ((($57)) + 16|0);
       $62 = HEAP32[$61>>2]|0;
       $63 = ($60|0)==($62|0);
       if ($63) {
        $64 = HEAP32[$57>>2]|0;
        $65 = ((($64)) + 36|0);
        $66 = HEAP32[$65>>2]|0;
        __THREW__ = 0;
        $67 = (invoke_ii($66|0,($57|0))|0);
        $68 = __THREW__; __THREW__ = 0;
        $69 = $68&1;
        if ($69) {
         label = 35;
         break L18;
        } else {
         $$0$i$i2$i$i = $67;
        }
       } else {
        $70 = HEAP32[$60>>2]|0;
        $71 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($70)|0);
        $$0$i$i2$i$i = $71;
       }
       $72 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
       $73 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i,$72)|0);
       if ($73) {
        HEAP32[$2>>2] = 0;
        label = 25;
        break;
       } else {
        if ($188) {
         $189 = $57;
         break;
        } else {
         $$227 = $$025;$169 = $57;
         label = 47;
         break L18;
        }
       }
      }
     } while(0);
     if ((label|0) == 25) {
      label = 0;
      if ($188) {
       $$227 = $$025;$169 = 0;
       label = 47;
       break;
      } else {
       $189 = 0;
      }
     }
     $74 = HEAP32[$9>>2]|0;
     $75 = HEAP8[$25>>0]|0;
     $76 = ($75<<24>>24)<(0);
     $77 = HEAP32[$38>>2]|0;
     $78 = $75&255;
     $79 = $76 ? $77 : $78;
     $80 = (($$025) + ($79)|0);
     $81 = ($74|0)==($80|0);
     if ($81) {
      $82 = $79 << 1;
      __THREW__ = 0;
      invoke_viii(29,($8|0),($82|0),0);
      $83 = __THREW__; __THREW__ = 0;
      $84 = $83&1;
      if ($84) {
       label = 37;
       break;
      }
      $85 = HEAP8[$25>>0]|0;
      $86 = ($85<<24>>24)<(0);
      if ($86) {
       $87 = HEAP32[$39>>2]|0;
       $88 = $87 & 2147483647;
       $phitmp$i40 = (($88) + -1)|0;
       $89 = $phitmp$i40;
      } else {
       $89 = 10;
      }
      __THREW__ = 0;
      invoke_viii(29,($8|0),($89|0),0);
      $90 = __THREW__; __THREW__ = 0;
      $91 = $90&1;
      if ($91) {
       label = 37;
       break;
      }
      $92 = HEAP8[$25>>0]|0;
      $93 = ($92<<24>>24)<(0);
      $94 = HEAP32[$8>>2]|0;
      $95 = $93 ? $94 : $8;
      $96 = (($95) + ($79)|0);
      HEAP32[$9>>2] = $96;
      $$126 = $95;
     } else {
      $$126 = $$025;
     }
     $107 = ((($108)) + 12|0);
     $109 = HEAP32[$107>>2]|0;
     $110 = ((($108)) + 16|0);
     $111 = HEAP32[$110>>2]|0;
     $112 = ($109|0)==($111|0);
     if ($112) {
      $113 = HEAP32[$108>>2]|0;
      $114 = ((($113)) + 36|0);
      $115 = HEAP32[$114>>2]|0;
      __THREW__ = 0;
      $116 = (invoke_ii($115|0,($108|0))|0);
      $117 = __THREW__; __THREW__ = 0;
      $118 = $117&1;
      if ($118) {
       label = 35;
       break;
      } else {
       $$0$i$i45 = $116;
      }
     } else {
      $119 = HEAP32[$109>>2]|0;
      $120 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($119)|0);
      $$0$i$i45 = $120;
     }
     __THREW__ = 0;
     $121 = (invoke_iiiiiiiiiii(2,($$0$i$i45|0),16,($$126|0),($9|0),($12|0),0,($7|0),($10|0),($11|0),($6|0))|0);
     $122 = __THREW__; __THREW__ = 0;
     $123 = $122&1;
     if ($123) {
      label = 35;
      break;
     }
     $124 = ($121|0)==(0);
     if (!($124)) {
      $$227 = $$126;$169 = $189;
      label = 47;
      break;
     }
     $125 = HEAP32[$107>>2]|0;
     $126 = HEAP32[$110>>2]|0;
     $127 = ($125|0)==($126|0);
     if ($127) {
      $128 = HEAP32[$108>>2]|0;
      $129 = ((($128)) + 40|0);
      $130 = HEAP32[$129>>2]|0;
      __THREW__ = 0;
      (invoke_ii($130|0,($108|0))|0);
      $131 = __THREW__; __THREW__ = 0;
      $132 = $131&1;
      if ($132) {
       label = 35;
       break;
      }
     } else {
      $133 = ((($125)) + 4|0);
      HEAP32[$107>>2] = $133;
      $134 = HEAP32[$125>>2]|0;
      (__ZNSt3__211char_traitsIwE11to_int_typeEw($134)|0);
     }
     $$025 = $$126;$187 = $158;$41 = $108;
    }
    if ((label|0) == 35) {
     $101 = ___cxa_find_matching_catch_2()|0;
     $102 = (getTempRet0() | 0);
     $$sink74$index = $101;$$sink74$index3 = $102;
    }
    else if ((label|0) == 37) {
     $105 = ___cxa_find_matching_catch_2()|0;
     $106 = (getTempRet0() | 0);
     $$sink74$index = $105;$$sink74$index3 = $106;
    }
    else if ((label|0) == 47) {
     $135 = HEAP32[$9>>2]|0;
     $136 = $$227;
     $137 = (($135) - ($136))|0;
     __THREW__ = 0;
     invoke_viii(29,($8|0),($137|0),0);
     $138 = __THREW__; __THREW__ = 0;
     $139 = $138&1;
     L61: do {
      if (!($139)) {
       $140 = HEAP8[$25>>0]|0;
       $141 = HEAP32[$8>>2]|0;
       __THREW__ = 0;
       $142 = (invoke_i(24)|0);
       $143 = __THREW__; __THREW__ = 0;
       $144 = $143&1;
       if (!($144)) {
        $145 = ($140<<24>>24)<(0);
        $146 = $145 ? $141 : $8;
        __THREW__ = 0;
        HEAP32[$vararg_buffer>>2] = $5;
        $147 = (invoke_iiiii(11,($146|0),($142|0),(41625|0),($vararg_buffer|0))|0);
        $148 = __THREW__; __THREW__ = 0;
        $149 = $148&1;
        if (!($149)) {
         $150 = ($147|0)==(1);
         if (!($150)) {
          HEAP32[$4>>2] = 4;
         }
         $151 = ($108|0)==(0|0);
         if ($151) {
          $190 = 1;
         } else {
          $152 = ((($108)) + 12|0);
          $153 = HEAP32[$152>>2]|0;
          $154 = ((($108)) + 16|0);
          $155 = HEAP32[$154>>2]|0;
          $156 = ($153|0)==($155|0);
          if ($156) {
           $157 = HEAP32[$158>>2]|0;
           $159 = ((($157)) + 36|0);
           $160 = HEAP32[$159>>2]|0;
           __THREW__ = 0;
           $161 = (invoke_ii($160|0,($108|0))|0);
           $162 = __THREW__; __THREW__ = 0;
           $163 = $162&1;
           if ($163) {
            break;
           } else {
            $$0$i$i$i$i50 = $161;
           }
          } else {
           $164 = HEAP32[$153>>2]|0;
           $165 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($164)|0);
           $$0$i$i$i$i50 = $165;
          }
          $166 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
          $167 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i50,$166)|0);
          if ($167) {
           HEAP32[$1>>2] = 0;
           $190 = 1;
          } else {
           $190 = 0;
          }
         }
         $168 = ($169|0)==(0|0);
         do {
          if ($168) {
           label = 64;
          } else {
           $170 = ((($169)) + 12|0);
           $171 = HEAP32[$170>>2]|0;
           $172 = ((($169)) + 16|0);
           $173 = HEAP32[$172>>2]|0;
           $174 = ($171|0)==($173|0);
           if ($174) {
            $175 = HEAP32[$169>>2]|0;
            $176 = ((($175)) + 36|0);
            $177 = HEAP32[$176>>2]|0;
            __THREW__ = 0;
            $178 = (invoke_ii($177|0,($169|0))|0);
            $179 = __THREW__; __THREW__ = 0;
            $180 = $179&1;
            if ($180) {
             break L61;
            } else {
             $$0$i$i2$i$i56 = $178;
            }
           } else {
            $181 = HEAP32[$171>>2]|0;
            $182 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($181)|0);
            $$0$i$i2$i$i56 = $182;
           }
           $183 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
           $184 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i56,$183)|0);
           if ($184) {
            HEAP32[$2>>2] = 0;
            label = 64;
            break;
           } else {
            if ($190) {
             break;
            } else {
             label = 66;
             break;
            }
           }
          }
         } while(0);
         if ((label|0) == 64) {
          if ($190) {
           label = 66;
          }
         }
         if ((label|0) == 66) {
          $185 = HEAP32[$4>>2]|0;
          $186 = $185 | 2;
          HEAP32[$4>>2] = $186;
         }
         $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
         __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7);
         STACKTOP = sp;return ($$sroa$0$0$copyload|0);
        }
       }
      }
     } while(0);
     $103 = ___cxa_find_matching_catch_2()|0;
     $104 = (getTempRet0() | 0);
     $$sink74$index = $103;$$sink74$index3 = $104;
    }
    $$2 = $$sink74$index;$$230 = $$sink74$index3;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
   $$3 = $$2;$$331 = $$230;
  }
 }
 if ((label|0) == 33) {
  $97 = ___cxa_find_matching_catch_2()|0;
  $98 = (getTempRet0() | 0);
  __ZNSt3__26localeD2Ev($8);
  $$3 = $97;$$331 = $98;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7);
 ___resumeException($$3|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__29__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKw($0,$1,$2,$3,$4,$5,$6,$7,$8,$9) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 var $$0$i$add = 0, $$0$i$idx = 0, $$0$i$ptr = 0, $$0$lcssa$i = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $10 = HEAP32[$3>>2]|0;
 $11 = ($10|0)==($2|0);
 do {
  if ($11) {
   $12 = ((($9)) + 96|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = ($13|0)==($0|0);
   if (!($14)) {
    $15 = ((($9)) + 100|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ($16|0)==($0|0);
    if (!($17)) {
     label = 5;
     break;
    }
   }
   $18 = $14 ? 43 : 45;
   $19 = ((($2)) + 1|0);
   HEAP32[$3>>2] = $19;
   HEAP8[$2>>0] = $18;
   HEAP32[$4>>2] = 0;
   $$1 = 0;
  } else {
   label = 5;
  }
 } while(0);
 L6: do {
  if ((label|0) == 5) {
   $20 = ((($6)) + 11|0);
   $21 = HEAP8[$20>>0]|0;
   $22 = ($21<<24>>24)<(0);
   $23 = ((($6)) + 4|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = $21&255;
   $26 = $22 ? $24 : $25;
   $27 = ($26|0)!=(0);
   $28 = ($0|0)==($5|0);
   $or$cond = $28 & $27;
   if ($or$cond) {
    $29 = HEAP32[$8>>2]|0;
    $30 = $29;
    $31 = $7;
    $32 = (($30) - ($31))|0;
    $33 = ($32|0)<(160);
    if (!($33)) {
     $$1 = 0;
     break;
    }
    $34 = HEAP32[$4>>2]|0;
    $35 = ((($29)) + 4|0);
    HEAP32[$8>>2] = $35;
    HEAP32[$29>>2] = $34;
    HEAP32[$4>>2] = 0;
    $$1 = 0;
    break;
   }
   $36 = ((($9)) + 104|0);
   $$0$i$idx = 0;
   while(1) {
    $$0$i$ptr = (($9) + ($$0$i$idx<<2)|0);
    $37 = ($$0$i$idx|0)==(26);
    if ($37) {
     $$0$lcssa$i = $36;
     break;
    }
    $38 = HEAP32[$$0$i$ptr>>2]|0;
    $39 = ($38|0)==($0|0);
    $$0$i$add = (($$0$i$idx) + 1)|0;
    if ($39) {
     $$0$lcssa$i = $$0$i$ptr;
     break;
    } else {
     $$0$i$idx = $$0$i$add;
    }
   }
   $40 = $$0$lcssa$i;
   $41 = $9;
   $42 = (($40) - ($41))|0;
   $43 = $42 >> 2;
   $44 = ($42|0)>(92);
   if ($44) {
    $$1 = -1;
   } else {
    switch ($1|0) {
    case 10: case 8:  {
     $45 = ($43|0)<($1|0);
     if (!($45)) {
      $$1 = -1;
      break L6;
     }
     break;
    }
    case 16:  {
     $46 = ($42|0)<(88);
     if (!($46)) {
      if ($11) {
       $$1 = -1;
       break L6;
      }
      $47 = $10;
      $48 = $2;
      $49 = (($47) - ($48))|0;
      $50 = ($49|0)<(3);
      if (!($50)) {
       $$1 = -1;
       break L6;
      }
      $51 = ((($10)) + -1|0);
      $52 = HEAP8[$51>>0]|0;
      $53 = ($52<<24>>24)==(48);
      if (!($53)) {
       $$1 = -1;
       break L6;
      }
      $54 = ((($10)) + 1|0);
      $55 = (20912 + ($43)|0);
      HEAP32[$4>>2] = 0;
      $56 = HEAP8[$55>>0]|0;
      HEAP32[$3>>2] = $54;
      HEAP8[$10>>0] = $56;
      $$1 = 0;
      break L6;
     }
     break;
    }
    default: {
    }
    }
    $57 = (20912 + ($43)|0);
    $58 = HEAP8[$57>>0]|0;
    $59 = ((($10)) + 1|0);
    HEAP32[$3>>2] = $59;
    HEAP8[$10>>0] = $58;
    $60 = HEAP32[$4>>2]|0;
    $61 = (($60) + 1)|0;
    HEAP32[$4>>2] = $61;
    $$1 = 0;
   }
  }
 } while(0);
 return ($$1|0);
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i37 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i43 = 0, $$0$i$i33 = 0, $$018 = 0, $$1 = 0, $$119 = 0, $$121 = 0, $$2 = 0, $$pre = 0, $$sink61$index = 0, $$sink61$index3 = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0.0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
 var $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $exitcond$i$i = 0, $or$cond = 0, $phitmp$i = 0, $phitmp$i28 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(336|0);
 $6 = sp + 160|0;
 $7 = sp + 328|0;
 $8 = sp + 324|0;
 $9 = sp + 312|0;
 $10 = sp + 300|0;
 $11 = sp + 296|0;
 $12 = sp;
 $13 = sp + 292|0;
 $14 = sp + 288|0;
 $15 = sp + 333|0;
 $16 = sp + 332|0;
 __ZNSt3__29__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($9,$3,$6,$7,$8);
 ;HEAP32[$10>>2]=0|0;HEAP32[$10+4>>2]=0|0;HEAP32[$10+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $17 = (($10) + ($$0$i$i<<2)|0);
  HEAP32[$17>>2] = 0;
  $18 = (($$0$i$i) + 1)|0;
  $$0$i$i = $18;
 }
 $19 = ((($10)) + 11|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = ($20<<24>>24)<(0);
 if ($21) {
  $22 = ((($10)) + 8|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $23 & 2147483647;
  $phitmp$i = (($24) + -1)|0;
  $25 = $phitmp$i;
 } else {
  $25 = 10;
 }
 __THREW__ = 0;
 invoke_viii(29,($10|0),($25|0),0);
 $26 = __THREW__; __THREW__ = 0;
 $27 = $26&1;
 if ($27) {
  $91 = ___cxa_find_matching_catch_2()|0;
  $92 = (getTempRet0() | 0);
  $$1 = $91;$$121 = $92;
 } else {
  $28 = HEAP8[$19>>0]|0;
  $29 = ($28<<24>>24)<(0);
  $30 = HEAP32[$10>>2]|0;
  $31 = $29 ? $30 : $10;
  HEAP32[$11>>2] = $31;
  HEAP32[$13>>2] = $12;
  HEAP32[$14>>2] = 0;
  HEAP8[$15>>0] = 1;
  HEAP8[$16>>0] = 69;
  $32 = ((($10)) + 4|0);
  $33 = ((($10)) + 8|0);
  $$pre = HEAP32[$1>>2]|0;
  $$018 = $31;$189 = $$pre;$35 = $$pre;
  L11: while(1) {
   $34 = ($35|0)==(0|0);
   if ($34) {
    $100 = 0;$160 = 0;$190 = 1;
   } else {
    $36 = ((($35)) + 12|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = ((($35)) + 16|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = ($37|0)==($39|0);
    if ($40) {
     $41 = HEAP32[$35>>2]|0;
     $42 = ((($41)) + 36|0);
     $43 = HEAP32[$42>>2]|0;
     __THREW__ = 0;
     $44 = (invoke_ii($43|0,($35|0))|0);
     $45 = __THREW__; __THREW__ = 0;
     $46 = $45&1;
     if ($46) {
      label = 29;
      break;
     } else {
      $$0$i$i$i$i = $44;
     }
    } else {
     $47 = HEAP32[$37>>2]|0;
     $48 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($47)|0);
     $$0$i$i$i$i = $48;
    }
    $49 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
    $50 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i,$49)|0);
    if ($50) {
     HEAP32[$1>>2] = 0;
     $100 = 0;$160 = 0;$190 = 1;
    } else {
     $100 = $35;$160 = $189;$190 = 0;
    }
   }
   $51 = HEAP32[$2>>2]|0;
   $52 = ($51|0)==(0|0);
   do {
    if ($52) {
     label = 20;
    } else {
     $53 = ((($51)) + 12|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = ((($51)) + 16|0);
     $56 = HEAP32[$55>>2]|0;
     $57 = ($54|0)==($56|0);
     if ($57) {
      $58 = HEAP32[$51>>2]|0;
      $59 = ((($58)) + 36|0);
      $60 = HEAP32[$59>>2]|0;
      __THREW__ = 0;
      $61 = (invoke_ii($60|0,($51|0))|0);
      $62 = __THREW__; __THREW__ = 0;
      $63 = $62&1;
      if ($63) {
       label = 29;
       break L11;
      } else {
       $$0$i$i2$i$i = $61;
      }
     } else {
      $64 = HEAP32[$54>>2]|0;
      $65 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($64)|0);
      $$0$i$i2$i$i = $65;
     }
     $66 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
     $67 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i,$66)|0);
     if ($67) {
      HEAP32[$2>>2] = 0;
      label = 20;
      break;
     } else {
      if ($190) {
       $191 = $51;
       break;
      } else {
       $$2 = $$018;$171 = $51;
       label = 41;
       break L11;
      }
     }
    }
   } while(0);
   if ((label|0) == 20) {
    label = 0;
    if ($190) {
     $$2 = $$018;$171 = 0;
     label = 41;
     break;
    } else {
     $191 = 0;
    }
   }
   $68 = HEAP32[$11>>2]|0;
   $69 = HEAP8[$19>>0]|0;
   $70 = ($69<<24>>24)<(0);
   $71 = HEAP32[$32>>2]|0;
   $72 = $69&255;
   $73 = $70 ? $71 : $72;
   $74 = (($$018) + ($73)|0);
   $75 = ($68|0)==($74|0);
   if ($75) {
    $76 = $73 << 1;
    __THREW__ = 0;
    invoke_viii(29,($10|0),($76|0),0);
    $77 = __THREW__; __THREW__ = 0;
    $78 = $77&1;
    if ($78) {
     label = 31;
     break;
    }
    $79 = HEAP8[$19>>0]|0;
    $80 = ($79<<24>>24)<(0);
    if ($80) {
     $81 = HEAP32[$33>>2]|0;
     $82 = $81 & 2147483647;
     $phitmp$i28 = (($82) + -1)|0;
     $83 = $phitmp$i28;
    } else {
     $83 = 10;
    }
    __THREW__ = 0;
    invoke_viii(29,($10|0),($83|0),0);
    $84 = __THREW__; __THREW__ = 0;
    $85 = $84&1;
    if ($85) {
     label = 31;
     break;
    }
    $86 = HEAP8[$19>>0]|0;
    $87 = ($86<<24>>24)<(0);
    $88 = HEAP32[$10>>2]|0;
    $89 = $87 ? $88 : $10;
    $90 = (($89) + ($73)|0);
    HEAP32[$11>>2] = $90;
    $$119 = $89;
   } else {
    $$119 = $$018;
   }
   $99 = ((($100)) + 12|0);
   $101 = HEAP32[$99>>2]|0;
   $102 = ((($100)) + 16|0);
   $103 = HEAP32[$102>>2]|0;
   $104 = ($101|0)==($103|0);
   if ($104) {
    $105 = HEAP32[$100>>2]|0;
    $106 = ((($105)) + 36|0);
    $107 = HEAP32[$106>>2]|0;
    __THREW__ = 0;
    $108 = (invoke_ii($107|0,($100|0))|0);
    $109 = __THREW__; __THREW__ = 0;
    $110 = $109&1;
    if ($110) {
     label = 29;
     break;
    } else {
     $$0$i$i33 = $108;
    }
   } else {
    $111 = HEAP32[$101>>2]|0;
    $112 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($111)|0);
    $$0$i$i33 = $112;
   }
   $113 = HEAP32[$7>>2]|0;
   $114 = HEAP32[$8>>2]|0;
   __THREW__ = 0;
   $115 = (invoke_iiiiiiiiiiiii(2,($$0$i$i33|0),($15|0),($16|0),($$119|0),($11|0),($113|0),($114|0),($9|0),($12|0),($13|0),($14|0),($6|0))|0);
   $116 = __THREW__; __THREW__ = 0;
   $117 = $116&1;
   if ($117) {
    label = 29;
    break;
   }
   $118 = ($115|0)==(0);
   if (!($118)) {
    $$2 = $$119;$171 = $191;
    label = 41;
    break;
   }
   $119 = HEAP32[$99>>2]|0;
   $120 = HEAP32[$102>>2]|0;
   $121 = ($119|0)==($120|0);
   if ($121) {
    $122 = HEAP32[$100>>2]|0;
    $123 = ((($122)) + 40|0);
    $124 = HEAP32[$123>>2]|0;
    __THREW__ = 0;
    (invoke_ii($124|0,($100|0))|0);
    $125 = __THREW__; __THREW__ = 0;
    $126 = $125&1;
    if ($126) {
     label = 29;
     break;
    }
   } else {
    $127 = ((($119)) + 4|0);
    HEAP32[$99>>2] = $127;
    $128 = HEAP32[$119>>2]|0;
    (__ZNSt3__211char_traitsIwE11to_int_typeEw($128)|0);
   }
   $$018 = $$119;$189 = $160;$35 = $100;
  }
  if ((label|0) == 29) {
   $93 = ___cxa_find_matching_catch_2()|0;
   $94 = (getTempRet0() | 0);
   $$sink61$index = $93;$$sink61$index3 = $94;
  }
  else if ((label|0) == 31) {
   $97 = ___cxa_find_matching_catch_2()|0;
   $98 = (getTempRet0() | 0);
   $$sink61$index = $97;$$sink61$index3 = $98;
  }
  else if ((label|0) == 41) {
   $129 = ((($9)) + 11|0);
   $130 = HEAP8[$129>>0]|0;
   $131 = ($130<<24>>24)<(0);
   $132 = ((($9)) + 4|0);
   $133 = HEAP32[$132>>2]|0;
   $134 = $130&255;
   $135 = $131 ? $133 : $134;
   $136 = ($135|0)==(0);
   $137 = HEAP8[$15>>0]|0;
   $138 = ($137<<24>>24)==(0);
   $or$cond = $136 | $138;
   if (!($or$cond)) {
    $139 = HEAP32[$13>>2]|0;
    $140 = $139;
    $141 = $12;
    $142 = (($140) - ($141))|0;
    $143 = ($142|0)<(160);
    if ($143) {
     $144 = HEAP32[$14>>2]|0;
     $145 = ((($139)) + 4|0);
     HEAP32[$13>>2] = $145;
     HEAP32[$139>>2] = $144;
    }
   }
   $146 = HEAP32[$11>>2]|0;
   __THREW__ = 0;
   $147 = (+invoke_diii(3,($$2|0),($146|0),($4|0)));
   $148 = __THREW__; __THREW__ = 0;
   $149 = $148&1;
   L58: do {
    if (!($149)) {
     HEAPF64[$5>>3] = $147;
     $150 = HEAP32[$13>>2]|0;
     __THREW__ = 0;
     invoke_viiii(30,($9|0),($12|0),($150|0),($4|0));
     $151 = __THREW__; __THREW__ = 0;
     $152 = $151&1;
     if (!($152)) {
      $153 = ($100|0)==(0|0);
      if ($153) {
       $192 = 1;
      } else {
       $154 = ((($100)) + 12|0);
       $155 = HEAP32[$154>>2]|0;
       $156 = ((($100)) + 16|0);
       $157 = HEAP32[$156>>2]|0;
       $158 = ($155|0)==($157|0);
       if ($158) {
        $159 = HEAP32[$160>>2]|0;
        $161 = ((($159)) + 36|0);
        $162 = HEAP32[$161>>2]|0;
        __THREW__ = 0;
        $163 = (invoke_ii($162|0,($100|0))|0);
        $164 = __THREW__; __THREW__ = 0;
        $165 = $164&1;
        if ($165) {
         break;
        } else {
         $$0$i$i$i$i37 = $163;
        }
       } else {
        $166 = HEAP32[$155>>2]|0;
        $167 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($166)|0);
        $$0$i$i$i$i37 = $167;
       }
       $168 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
       $169 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i37,$168)|0);
       if ($169) {
        HEAP32[$1>>2] = 0;
        $192 = 1;
       } else {
        $192 = 0;
       }
      }
      $170 = ($171|0)==(0|0);
      do {
       if ($170) {
        label = 58;
       } else {
        $172 = ((($171)) + 12|0);
        $173 = HEAP32[$172>>2]|0;
        $174 = ((($171)) + 16|0);
        $175 = HEAP32[$174>>2]|0;
        $176 = ($173|0)==($175|0);
        if ($176) {
         $177 = HEAP32[$171>>2]|0;
         $178 = ((($177)) + 36|0);
         $179 = HEAP32[$178>>2]|0;
         __THREW__ = 0;
         $180 = (invoke_ii($179|0,($171|0))|0);
         $181 = __THREW__; __THREW__ = 0;
         $182 = $181&1;
         if ($182) {
          break L58;
         } else {
          $$0$i$i2$i$i43 = $180;
         }
        } else {
         $183 = HEAP32[$173>>2]|0;
         $184 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($183)|0);
         $$0$i$i2$i$i43 = $184;
        }
        $185 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
        $186 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i43,$185)|0);
        if ($186) {
         HEAP32[$2>>2] = 0;
         label = 58;
         break;
        } else {
         if ($192) {
          break;
         } else {
          label = 60;
          break;
         }
        }
       }
      } while(0);
      if ((label|0) == 58) {
       if ($192) {
        label = 60;
       }
      }
      if ((label|0) == 60) {
       $187 = HEAP32[$4>>2]|0;
       $188 = $187 | 2;
       HEAP32[$4>>2] = $188;
      }
      $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
      STACKTOP = sp;return ($$sroa$0$0$copyload|0);
     }
    }
   } while(0);
   $95 = ___cxa_find_matching_catch_2()|0;
   $96 = (getTempRet0() | 0);
   $$sink61$index = $95;$$sink61$index3 = $96;
  }
  $$1 = $$sink61$index;$$121 = $$sink61$index3;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 ___resumeException($$1|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__29__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$sink11$index = 0, $$sink11$index2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $5 = sp;
 __ZNKSt3__28ios_base6getlocEv($5,$1);
 __THREW__ = 0;
 $6 = (invoke_iii(37,($5|0),(50772|0))|0);
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  label = 8;
 } else {
  $9 = HEAP32[$6>>2]|0;
  $10 = ((($9)) + 48|0);
  $11 = HEAP32[$10>>2]|0;
  __THREW__ = 0;
  (invoke_iiiii($11|0,($6|0),(20912|0),((20944)|0),($2|0))|0);
  $12 = __THREW__; __THREW__ = 0;
  $13 = $12&1;
  if ($13) {
   label = 8;
  } else {
   __THREW__ = 0;
   $14 = (invoke_iii(37,($5|0),(50780|0))|0);
   $15 = __THREW__; __THREW__ = 0;
   $16 = $15&1;
   if (!($16)) {
    $17 = HEAP32[$14>>2]|0;
    $18 = ((($17)) + 12|0);
    $19 = HEAP32[$18>>2]|0;
    __THREW__ = 0;
    $20 = (invoke_ii($19|0,($14|0))|0);
    $21 = __THREW__; __THREW__ = 0;
    $22 = $21&1;
    if (!($22)) {
     HEAP32[$3>>2] = $20;
     $23 = HEAP32[$14>>2]|0;
     $24 = ((($23)) + 16|0);
     $25 = HEAP32[$24>>2]|0;
     __THREW__ = 0;
     $26 = (invoke_ii($25|0,($14|0))|0);
     $27 = __THREW__; __THREW__ = 0;
     $28 = $27&1;
     if (!($28)) {
      HEAP32[$4>>2] = $26;
      $29 = HEAP32[$14>>2]|0;
      $30 = ((($29)) + 20|0);
      $31 = HEAP32[$30>>2]|0;
      __THREW__ = 0;
      invoke_vii($31|0,($0|0),($14|0));
      $32 = __THREW__; __THREW__ = 0;
      $33 = $32&1;
      if (!($33)) {
       __ZNSt3__26localeD2Ev($5);
       STACKTOP = sp;return;
      }
     }
    }
   }
   $36 = ___cxa_find_matching_catch_2()|0;
   $37 = (getTempRet0() | 0);
   $$sink11$index = $36;$$sink11$index2 = $37;
  }
 }
 if ((label|0) == 8) {
  $34 = ___cxa_find_matching_catch_2()|0;
  $35 = (getTempRet0() | 0);
  $$sink11$index = $34;$$sink11$index2 = $35;
 }
 __ZNSt3__26localeD2Ev($5);
 ___resumeException($$sink11$index|0);
 // unreachable;
}
function __ZNSt3__29__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 var $$0$i$add = 0, $$0$i$idx = 0, $$0$i$ptr = 0, $$0$lcssa$i = 0, $$2 = 0, $100 = 0, $101 = 0, $102 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $12 = ($0|0)==($5|0);
 L1: do {
  if ($12) {
   $13 = HEAP8[$1>>0]|0;
   $14 = ($13<<24>>24)==(0);
   if ($14) {
    $$2 = -1;
   } else {
    HEAP8[$1>>0] = 0;
    $15 = HEAP32[$4>>2]|0;
    $16 = ((($15)) + 1|0);
    HEAP32[$4>>2] = $16;
    HEAP8[$15>>0] = 46;
    $17 = ((($7)) + 11|0);
    $18 = HEAP8[$17>>0]|0;
    $19 = ($18<<24>>24)<(0);
    $20 = ((($7)) + 4|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = $18&255;
    $23 = $19 ? $21 : $22;
    $24 = ($23|0)==(0);
    if ($24) {
     $$2 = 0;
    } else {
     $25 = HEAP32[$9>>2]|0;
     $26 = $25;
     $27 = $8;
     $28 = (($26) - ($27))|0;
     $29 = ($28|0)<(160);
     if ($29) {
      $30 = HEAP32[$10>>2]|0;
      $31 = ((($25)) + 4|0);
      HEAP32[$9>>2] = $31;
      HEAP32[$25>>2] = $30;
      $$2 = 0;
     } else {
      $$2 = 0;
     }
    }
   }
  } else {
   $32 = ($0|0)==($6|0);
   if ($32) {
    $33 = ((($7)) + 11|0);
    $34 = HEAP8[$33>>0]|0;
    $35 = ($34<<24>>24)<(0);
    $36 = ((($7)) + 4|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = $34&255;
    $39 = $35 ? $37 : $38;
    $40 = ($39|0)==(0);
    if (!($40)) {
     $41 = HEAP8[$1>>0]|0;
     $42 = ($41<<24>>24)==(0);
     if ($42) {
      $$2 = -1;
      break;
     }
     $43 = HEAP32[$9>>2]|0;
     $44 = $43;
     $45 = $8;
     $46 = (($44) - ($45))|0;
     $47 = ($46|0)<(160);
     if (!($47)) {
      $$2 = 0;
      break;
     }
     $48 = HEAP32[$10>>2]|0;
     $49 = ((($43)) + 4|0);
     HEAP32[$9>>2] = $49;
     HEAP32[$43>>2] = $48;
     HEAP32[$10>>2] = 0;
     $$2 = 0;
     break;
    }
   }
   $50 = ((($11)) + 128|0);
   $$0$i$idx = 0;
   while(1) {
    $$0$i$ptr = (($11) + ($$0$i$idx<<2)|0);
    $51 = ($$0$i$idx|0)==(32);
    if ($51) {
     $$0$lcssa$i = $50;
     break;
    }
    $52 = HEAP32[$$0$i$ptr>>2]|0;
    $53 = ($52|0)==($0|0);
    $$0$i$add = (($$0$i$idx) + 1)|0;
    if ($53) {
     $$0$lcssa$i = $$0$i$ptr;
     break;
    } else {
     $$0$i$idx = $$0$i$add;
    }
   }
   $54 = $$0$lcssa$i;
   $55 = $11;
   $56 = (($54) - ($55))|0;
   $57 = ($56|0)>(124);
   if ($57) {
    $$2 = -1;
   } else {
    $58 = $56 >> 2;
    $59 = (20912 + ($58)|0);
    $60 = HEAP8[$59>>0]|0;
    $61 = (($56) + -88)|0;
    $62 = $61 >>> 2;
    $63 = $61 << 30;
    $64 = $62 | $63;
    switch ($64|0) {
    case 2: case 3:  {
     $65 = HEAP32[$4>>2]|0;
     $66 = ($65|0)==($3|0);
     if (!($66)) {
      $67 = ((($65)) + -1|0);
      $68 = HEAP8[$67>>0]|0;
      $69 = $68 & 95;
      $70 = HEAP8[$2>>0]|0;
      $71 = $70 & 127;
      $72 = ($69<<24>>24)==($71<<24>>24);
      if (!($72)) {
       $$2 = -1;
       break L1;
      }
     }
     $73 = ((($65)) + 1|0);
     HEAP32[$4>>2] = $73;
     HEAP8[$65>>0] = $60;
     $$2 = 0;
     break L1;
     break;
    }
    case 1: case 0:  {
     HEAP8[$2>>0] = 80;
     break;
    }
    default: {
     $74 = $60 & 95;
     $75 = $74&255;
     $76 = HEAP8[$2>>0]|0;
     $77 = $76 << 24 >> 24;
     $78 = ($75|0)==($77|0);
     if ($78) {
      $79 = $75 | 128;
      $80 = $79&255;
      HEAP8[$2>>0] = $80;
      $81 = HEAP8[$1>>0]|0;
      $82 = ($81<<24>>24)==(0);
      if (!($82)) {
       HEAP8[$1>>0] = 0;
       $83 = ((($7)) + 11|0);
       $84 = HEAP8[$83>>0]|0;
       $85 = ($84<<24>>24)<(0);
       $86 = ((($7)) + 4|0);
       $87 = HEAP32[$86>>2]|0;
       $88 = $84&255;
       $89 = $85 ? $87 : $88;
       $90 = ($89|0)==(0);
       if (!($90)) {
        $91 = HEAP32[$9>>2]|0;
        $92 = $91;
        $93 = $8;
        $94 = (($92) - ($93))|0;
        $95 = ($94|0)<(160);
        if ($95) {
         $96 = HEAP32[$10>>2]|0;
         $97 = ((($91)) + 4|0);
         HEAP32[$9>>2] = $97;
         HEAP32[$91>>2] = $96;
        }
       }
      }
     }
    }
    }
    $98 = HEAP32[$4>>2]|0;
    $99 = ((($98)) + 1|0);
    HEAP32[$4>>2] = $99;
    HEAP8[$98>>0] = $60;
    $100 = ($56|0)>(84);
    if ($100) {
     $$2 = 0;
    } else {
     $101 = HEAP32[$10>>2]|0;
     $102 = (($101) + 1)|0;
     HEAP32[$10>>2] = $102;
     $$2 = 0;
    }
   }
  }
 } while(0);
 return ($$2|0);
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i37 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i43 = 0, $$0$i$i33 = 0, $$018 = 0, $$1 = 0, $$119 = 0, $$121 = 0, $$2 = 0, $$pre = 0, $$sink61$index = 0, $$sink61$index3 = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0.0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
 var $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $exitcond$i$i = 0, $or$cond = 0, $phitmp$i = 0, $phitmp$i28 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(336|0);
 $6 = sp + 160|0;
 $7 = sp + 328|0;
 $8 = sp + 324|0;
 $9 = sp + 312|0;
 $10 = sp + 300|0;
 $11 = sp + 296|0;
 $12 = sp;
 $13 = sp + 292|0;
 $14 = sp + 288|0;
 $15 = sp + 333|0;
 $16 = sp + 332|0;
 __ZNSt3__29__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($9,$3,$6,$7,$8);
 ;HEAP32[$10>>2]=0|0;HEAP32[$10+4>>2]=0|0;HEAP32[$10+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $17 = (($10) + ($$0$i$i<<2)|0);
  HEAP32[$17>>2] = 0;
  $18 = (($$0$i$i) + 1)|0;
  $$0$i$i = $18;
 }
 $19 = ((($10)) + 11|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = ($20<<24>>24)<(0);
 if ($21) {
  $22 = ((($10)) + 8|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $23 & 2147483647;
  $phitmp$i = (($24) + -1)|0;
  $25 = $phitmp$i;
 } else {
  $25 = 10;
 }
 __THREW__ = 0;
 invoke_viii(29,($10|0),($25|0),0);
 $26 = __THREW__; __THREW__ = 0;
 $27 = $26&1;
 if ($27) {
  $91 = ___cxa_find_matching_catch_2()|0;
  $92 = (getTempRet0() | 0);
  $$1 = $91;$$121 = $92;
 } else {
  $28 = HEAP8[$19>>0]|0;
  $29 = ($28<<24>>24)<(0);
  $30 = HEAP32[$10>>2]|0;
  $31 = $29 ? $30 : $10;
  HEAP32[$11>>2] = $31;
  HEAP32[$13>>2] = $12;
  HEAP32[$14>>2] = 0;
  HEAP8[$15>>0] = 1;
  HEAP8[$16>>0] = 69;
  $32 = ((($10)) + 4|0);
  $33 = ((($10)) + 8|0);
  $$pre = HEAP32[$1>>2]|0;
  $$018 = $31;$189 = $$pre;$35 = $$pre;
  L11: while(1) {
   $34 = ($35|0)==(0|0);
   if ($34) {
    $100 = 0;$160 = 0;$190 = 1;
   } else {
    $36 = ((($35)) + 12|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = ((($35)) + 16|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = ($37|0)==($39|0);
    if ($40) {
     $41 = HEAP32[$35>>2]|0;
     $42 = ((($41)) + 36|0);
     $43 = HEAP32[$42>>2]|0;
     __THREW__ = 0;
     $44 = (invoke_ii($43|0,($35|0))|0);
     $45 = __THREW__; __THREW__ = 0;
     $46 = $45&1;
     if ($46) {
      label = 29;
      break;
     } else {
      $$0$i$i$i$i = $44;
     }
    } else {
     $47 = HEAP32[$37>>2]|0;
     $48 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($47)|0);
     $$0$i$i$i$i = $48;
    }
    $49 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
    $50 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i,$49)|0);
    if ($50) {
     HEAP32[$1>>2] = 0;
     $100 = 0;$160 = 0;$190 = 1;
    } else {
     $100 = $35;$160 = $189;$190 = 0;
    }
   }
   $51 = HEAP32[$2>>2]|0;
   $52 = ($51|0)==(0|0);
   do {
    if ($52) {
     label = 20;
    } else {
     $53 = ((($51)) + 12|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = ((($51)) + 16|0);
     $56 = HEAP32[$55>>2]|0;
     $57 = ($54|0)==($56|0);
     if ($57) {
      $58 = HEAP32[$51>>2]|0;
      $59 = ((($58)) + 36|0);
      $60 = HEAP32[$59>>2]|0;
      __THREW__ = 0;
      $61 = (invoke_ii($60|0,($51|0))|0);
      $62 = __THREW__; __THREW__ = 0;
      $63 = $62&1;
      if ($63) {
       label = 29;
       break L11;
      } else {
       $$0$i$i2$i$i = $61;
      }
     } else {
      $64 = HEAP32[$54>>2]|0;
      $65 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($64)|0);
      $$0$i$i2$i$i = $65;
     }
     $66 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
     $67 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i,$66)|0);
     if ($67) {
      HEAP32[$2>>2] = 0;
      label = 20;
      break;
     } else {
      if ($190) {
       $191 = $51;
       break;
      } else {
       $$2 = $$018;$171 = $51;
       label = 41;
       break L11;
      }
     }
    }
   } while(0);
   if ((label|0) == 20) {
    label = 0;
    if ($190) {
     $$2 = $$018;$171 = 0;
     label = 41;
     break;
    } else {
     $191 = 0;
    }
   }
   $68 = HEAP32[$11>>2]|0;
   $69 = HEAP8[$19>>0]|0;
   $70 = ($69<<24>>24)<(0);
   $71 = HEAP32[$32>>2]|0;
   $72 = $69&255;
   $73 = $70 ? $71 : $72;
   $74 = (($$018) + ($73)|0);
   $75 = ($68|0)==($74|0);
   if ($75) {
    $76 = $73 << 1;
    __THREW__ = 0;
    invoke_viii(29,($10|0),($76|0),0);
    $77 = __THREW__; __THREW__ = 0;
    $78 = $77&1;
    if ($78) {
     label = 31;
     break;
    }
    $79 = HEAP8[$19>>0]|0;
    $80 = ($79<<24>>24)<(0);
    if ($80) {
     $81 = HEAP32[$33>>2]|0;
     $82 = $81 & 2147483647;
     $phitmp$i28 = (($82) + -1)|0;
     $83 = $phitmp$i28;
    } else {
     $83 = 10;
    }
    __THREW__ = 0;
    invoke_viii(29,($10|0),($83|0),0);
    $84 = __THREW__; __THREW__ = 0;
    $85 = $84&1;
    if ($85) {
     label = 31;
     break;
    }
    $86 = HEAP8[$19>>0]|0;
    $87 = ($86<<24>>24)<(0);
    $88 = HEAP32[$10>>2]|0;
    $89 = $87 ? $88 : $10;
    $90 = (($89) + ($73)|0);
    HEAP32[$11>>2] = $90;
    $$119 = $89;
   } else {
    $$119 = $$018;
   }
   $99 = ((($100)) + 12|0);
   $101 = HEAP32[$99>>2]|0;
   $102 = ((($100)) + 16|0);
   $103 = HEAP32[$102>>2]|0;
   $104 = ($101|0)==($103|0);
   if ($104) {
    $105 = HEAP32[$100>>2]|0;
    $106 = ((($105)) + 36|0);
    $107 = HEAP32[$106>>2]|0;
    __THREW__ = 0;
    $108 = (invoke_ii($107|0,($100|0))|0);
    $109 = __THREW__; __THREW__ = 0;
    $110 = $109&1;
    if ($110) {
     label = 29;
     break;
    } else {
     $$0$i$i33 = $108;
    }
   } else {
    $111 = HEAP32[$101>>2]|0;
    $112 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($111)|0);
    $$0$i$i33 = $112;
   }
   $113 = HEAP32[$7>>2]|0;
   $114 = HEAP32[$8>>2]|0;
   __THREW__ = 0;
   $115 = (invoke_iiiiiiiiiiiii(2,($$0$i$i33|0),($15|0),($16|0),($$119|0),($11|0),($113|0),($114|0),($9|0),($12|0),($13|0),($14|0),($6|0))|0);
   $116 = __THREW__; __THREW__ = 0;
   $117 = $116&1;
   if ($117) {
    label = 29;
    break;
   }
   $118 = ($115|0)==(0);
   if (!($118)) {
    $$2 = $$119;$171 = $191;
    label = 41;
    break;
   }
   $119 = HEAP32[$99>>2]|0;
   $120 = HEAP32[$102>>2]|0;
   $121 = ($119|0)==($120|0);
   if ($121) {
    $122 = HEAP32[$100>>2]|0;
    $123 = ((($122)) + 40|0);
    $124 = HEAP32[$123>>2]|0;
    __THREW__ = 0;
    (invoke_ii($124|0,($100|0))|0);
    $125 = __THREW__; __THREW__ = 0;
    $126 = $125&1;
    if ($126) {
     label = 29;
     break;
    }
   } else {
    $127 = ((($119)) + 4|0);
    HEAP32[$99>>2] = $127;
    $128 = HEAP32[$119>>2]|0;
    (__ZNSt3__211char_traitsIwE11to_int_typeEw($128)|0);
   }
   $$018 = $$119;$189 = $160;$35 = $100;
  }
  if ((label|0) == 29) {
   $93 = ___cxa_find_matching_catch_2()|0;
   $94 = (getTempRet0() | 0);
   $$sink61$index = $93;$$sink61$index3 = $94;
  }
  else if ((label|0) == 31) {
   $97 = ___cxa_find_matching_catch_2()|0;
   $98 = (getTempRet0() | 0);
   $$sink61$index = $97;$$sink61$index3 = $98;
  }
  else if ((label|0) == 41) {
   $129 = ((($9)) + 11|0);
   $130 = HEAP8[$129>>0]|0;
   $131 = ($130<<24>>24)<(0);
   $132 = ((($9)) + 4|0);
   $133 = HEAP32[$132>>2]|0;
   $134 = $130&255;
   $135 = $131 ? $133 : $134;
   $136 = ($135|0)==(0);
   $137 = HEAP8[$15>>0]|0;
   $138 = ($137<<24>>24)==(0);
   $or$cond = $136 | $138;
   if (!($or$cond)) {
    $139 = HEAP32[$13>>2]|0;
    $140 = $139;
    $141 = $12;
    $142 = (($140) - ($141))|0;
    $143 = ($142|0)<(160);
    if ($143) {
     $144 = HEAP32[$14>>2]|0;
     $145 = ((($139)) + 4|0);
     HEAP32[$13>>2] = $145;
     HEAP32[$139>>2] = $144;
    }
   }
   $146 = HEAP32[$11>>2]|0;
   __THREW__ = 0;
   $147 = (+invoke_diii(4,($$2|0),($146|0),($4|0)));
   $148 = __THREW__; __THREW__ = 0;
   $149 = $148&1;
   L58: do {
    if (!($149)) {
     HEAPF64[$5>>3] = $147;
     $150 = HEAP32[$13>>2]|0;
     __THREW__ = 0;
     invoke_viiii(30,($9|0),($12|0),($150|0),($4|0));
     $151 = __THREW__; __THREW__ = 0;
     $152 = $151&1;
     if (!($152)) {
      $153 = ($100|0)==(0|0);
      if ($153) {
       $192 = 1;
      } else {
       $154 = ((($100)) + 12|0);
       $155 = HEAP32[$154>>2]|0;
       $156 = ((($100)) + 16|0);
       $157 = HEAP32[$156>>2]|0;
       $158 = ($155|0)==($157|0);
       if ($158) {
        $159 = HEAP32[$160>>2]|0;
        $161 = ((($159)) + 36|0);
        $162 = HEAP32[$161>>2]|0;
        __THREW__ = 0;
        $163 = (invoke_ii($162|0,($100|0))|0);
        $164 = __THREW__; __THREW__ = 0;
        $165 = $164&1;
        if ($165) {
         break;
        } else {
         $$0$i$i$i$i37 = $163;
        }
       } else {
        $166 = HEAP32[$155>>2]|0;
        $167 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($166)|0);
        $$0$i$i$i$i37 = $167;
       }
       $168 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
       $169 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i37,$168)|0);
       if ($169) {
        HEAP32[$1>>2] = 0;
        $192 = 1;
       } else {
        $192 = 0;
       }
      }
      $170 = ($171|0)==(0|0);
      do {
       if ($170) {
        label = 58;
       } else {
        $172 = ((($171)) + 12|0);
        $173 = HEAP32[$172>>2]|0;
        $174 = ((($171)) + 16|0);
        $175 = HEAP32[$174>>2]|0;
        $176 = ($173|0)==($175|0);
        if ($176) {
         $177 = HEAP32[$171>>2]|0;
         $178 = ((($177)) + 36|0);
         $179 = HEAP32[$178>>2]|0;
         __THREW__ = 0;
         $180 = (invoke_ii($179|0,($171|0))|0);
         $181 = __THREW__; __THREW__ = 0;
         $182 = $181&1;
         if ($182) {
          break L58;
         } else {
          $$0$i$i2$i$i43 = $180;
         }
        } else {
         $183 = HEAP32[$173>>2]|0;
         $184 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($183)|0);
         $$0$i$i2$i$i43 = $184;
        }
        $185 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
        $186 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i43,$185)|0);
        if ($186) {
         HEAP32[$2>>2] = 0;
         label = 58;
         break;
        } else {
         if ($192) {
          break;
         } else {
          label = 60;
          break;
         }
        }
       }
      } while(0);
      if ((label|0) == 58) {
       if ($192) {
        label = 60;
       }
      }
      if ((label|0) == 60) {
       $187 = HEAP32[$4>>2]|0;
       $188 = $187 | 2;
       HEAP32[$4>>2] = $188;
      }
      $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
      STACKTOP = sp;return ($$sroa$0$0$copyload|0);
     }
    }
   } while(0);
   $95 = ___cxa_find_matching_catch_2()|0;
   $96 = (getTempRet0() | 0);
   $$sink61$index = $95;$$sink61$index3 = $96;
  }
  $$1 = $$sink61$index;$$121 = $$sink61$index3;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 ___resumeException($$1|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i37 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i43 = 0, $$0$i$i33 = 0, $$018 = 0, $$1 = 0, $$119 = 0, $$121 = 0, $$2 = 0, $$pre = 0, $$sink61$index = 0, $$sink61$index3 = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0.0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
 var $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $exitcond$i$i = 0, $or$cond = 0, $phitmp$i = 0, $phitmp$i28 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(336|0);
 $6 = sp + 160|0;
 $7 = sp + 328|0;
 $8 = sp + 324|0;
 $9 = sp + 312|0;
 $10 = sp + 300|0;
 $11 = sp + 296|0;
 $12 = sp;
 $13 = sp + 292|0;
 $14 = sp + 288|0;
 $15 = sp + 333|0;
 $16 = sp + 332|0;
 __ZNSt3__29__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($9,$3,$6,$7,$8);
 ;HEAP32[$10>>2]=0|0;HEAP32[$10+4>>2]=0|0;HEAP32[$10+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $17 = (($10) + ($$0$i$i<<2)|0);
  HEAP32[$17>>2] = 0;
  $18 = (($$0$i$i) + 1)|0;
  $$0$i$i = $18;
 }
 $19 = ((($10)) + 11|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = ($20<<24>>24)<(0);
 if ($21) {
  $22 = ((($10)) + 8|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $23 & 2147483647;
  $phitmp$i = (($24) + -1)|0;
  $25 = $phitmp$i;
 } else {
  $25 = 10;
 }
 __THREW__ = 0;
 invoke_viii(29,($10|0),($25|0),0);
 $26 = __THREW__; __THREW__ = 0;
 $27 = $26&1;
 if ($27) {
  $91 = ___cxa_find_matching_catch_2()|0;
  $92 = (getTempRet0() | 0);
  $$1 = $91;$$121 = $92;
 } else {
  $28 = HEAP8[$19>>0]|0;
  $29 = ($28<<24>>24)<(0);
  $30 = HEAP32[$10>>2]|0;
  $31 = $29 ? $30 : $10;
  HEAP32[$11>>2] = $31;
  HEAP32[$13>>2] = $12;
  HEAP32[$14>>2] = 0;
  HEAP8[$15>>0] = 1;
  HEAP8[$16>>0] = 69;
  $32 = ((($10)) + 4|0);
  $33 = ((($10)) + 8|0);
  $$pre = HEAP32[$1>>2]|0;
  $$018 = $31;$189 = $$pre;$35 = $$pre;
  L11: while(1) {
   $34 = ($35|0)==(0|0);
   if ($34) {
    $100 = 0;$160 = 0;$190 = 1;
   } else {
    $36 = ((($35)) + 12|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = ((($35)) + 16|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = ($37|0)==($39|0);
    if ($40) {
     $41 = HEAP32[$35>>2]|0;
     $42 = ((($41)) + 36|0);
     $43 = HEAP32[$42>>2]|0;
     __THREW__ = 0;
     $44 = (invoke_ii($43|0,($35|0))|0);
     $45 = __THREW__; __THREW__ = 0;
     $46 = $45&1;
     if ($46) {
      label = 29;
      break;
     } else {
      $$0$i$i$i$i = $44;
     }
    } else {
     $47 = HEAP32[$37>>2]|0;
     $48 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($47)|0);
     $$0$i$i$i$i = $48;
    }
    $49 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
    $50 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i,$49)|0);
    if ($50) {
     HEAP32[$1>>2] = 0;
     $100 = 0;$160 = 0;$190 = 1;
    } else {
     $100 = $35;$160 = $189;$190 = 0;
    }
   }
   $51 = HEAP32[$2>>2]|0;
   $52 = ($51|0)==(0|0);
   do {
    if ($52) {
     label = 20;
    } else {
     $53 = ((($51)) + 12|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = ((($51)) + 16|0);
     $56 = HEAP32[$55>>2]|0;
     $57 = ($54|0)==($56|0);
     if ($57) {
      $58 = HEAP32[$51>>2]|0;
      $59 = ((($58)) + 36|0);
      $60 = HEAP32[$59>>2]|0;
      __THREW__ = 0;
      $61 = (invoke_ii($60|0,($51|0))|0);
      $62 = __THREW__; __THREW__ = 0;
      $63 = $62&1;
      if ($63) {
       label = 29;
       break L11;
      } else {
       $$0$i$i2$i$i = $61;
      }
     } else {
      $64 = HEAP32[$54>>2]|0;
      $65 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($64)|0);
      $$0$i$i2$i$i = $65;
     }
     $66 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
     $67 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i,$66)|0);
     if ($67) {
      HEAP32[$2>>2] = 0;
      label = 20;
      break;
     } else {
      if ($190) {
       $191 = $51;
       break;
      } else {
       $$2 = $$018;$171 = $51;
       label = 41;
       break L11;
      }
     }
    }
   } while(0);
   if ((label|0) == 20) {
    label = 0;
    if ($190) {
     $$2 = $$018;$171 = 0;
     label = 41;
     break;
    } else {
     $191 = 0;
    }
   }
   $68 = HEAP32[$11>>2]|0;
   $69 = HEAP8[$19>>0]|0;
   $70 = ($69<<24>>24)<(0);
   $71 = HEAP32[$32>>2]|0;
   $72 = $69&255;
   $73 = $70 ? $71 : $72;
   $74 = (($$018) + ($73)|0);
   $75 = ($68|0)==($74|0);
   if ($75) {
    $76 = $73 << 1;
    __THREW__ = 0;
    invoke_viii(29,($10|0),($76|0),0);
    $77 = __THREW__; __THREW__ = 0;
    $78 = $77&1;
    if ($78) {
     label = 31;
     break;
    }
    $79 = HEAP8[$19>>0]|0;
    $80 = ($79<<24>>24)<(0);
    if ($80) {
     $81 = HEAP32[$33>>2]|0;
     $82 = $81 & 2147483647;
     $phitmp$i28 = (($82) + -1)|0;
     $83 = $phitmp$i28;
    } else {
     $83 = 10;
    }
    __THREW__ = 0;
    invoke_viii(29,($10|0),($83|0),0);
    $84 = __THREW__; __THREW__ = 0;
    $85 = $84&1;
    if ($85) {
     label = 31;
     break;
    }
    $86 = HEAP8[$19>>0]|0;
    $87 = ($86<<24>>24)<(0);
    $88 = HEAP32[$10>>2]|0;
    $89 = $87 ? $88 : $10;
    $90 = (($89) + ($73)|0);
    HEAP32[$11>>2] = $90;
    $$119 = $89;
   } else {
    $$119 = $$018;
   }
   $99 = ((($100)) + 12|0);
   $101 = HEAP32[$99>>2]|0;
   $102 = ((($100)) + 16|0);
   $103 = HEAP32[$102>>2]|0;
   $104 = ($101|0)==($103|0);
   if ($104) {
    $105 = HEAP32[$100>>2]|0;
    $106 = ((($105)) + 36|0);
    $107 = HEAP32[$106>>2]|0;
    __THREW__ = 0;
    $108 = (invoke_ii($107|0,($100|0))|0);
    $109 = __THREW__; __THREW__ = 0;
    $110 = $109&1;
    if ($110) {
     label = 29;
     break;
    } else {
     $$0$i$i33 = $108;
    }
   } else {
    $111 = HEAP32[$101>>2]|0;
    $112 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($111)|0);
    $$0$i$i33 = $112;
   }
   $113 = HEAP32[$7>>2]|0;
   $114 = HEAP32[$8>>2]|0;
   __THREW__ = 0;
   $115 = (invoke_iiiiiiiiiiiii(2,($$0$i$i33|0),($15|0),($16|0),($$119|0),($11|0),($113|0),($114|0),($9|0),($12|0),($13|0),($14|0),($6|0))|0);
   $116 = __THREW__; __THREW__ = 0;
   $117 = $116&1;
   if ($117) {
    label = 29;
    break;
   }
   $118 = ($115|0)==(0);
   if (!($118)) {
    $$2 = $$119;$171 = $191;
    label = 41;
    break;
   }
   $119 = HEAP32[$99>>2]|0;
   $120 = HEAP32[$102>>2]|0;
   $121 = ($119|0)==($120|0);
   if ($121) {
    $122 = HEAP32[$100>>2]|0;
    $123 = ((($122)) + 40|0);
    $124 = HEAP32[$123>>2]|0;
    __THREW__ = 0;
    (invoke_ii($124|0,($100|0))|0);
    $125 = __THREW__; __THREW__ = 0;
    $126 = $125&1;
    if ($126) {
     label = 29;
     break;
    }
   } else {
    $127 = ((($119)) + 4|0);
    HEAP32[$99>>2] = $127;
    $128 = HEAP32[$119>>2]|0;
    (__ZNSt3__211char_traitsIwE11to_int_typeEw($128)|0);
   }
   $$018 = $$119;$189 = $160;$35 = $100;
  }
  if ((label|0) == 29) {
   $93 = ___cxa_find_matching_catch_2()|0;
   $94 = (getTempRet0() | 0);
   $$sink61$index = $93;$$sink61$index3 = $94;
  }
  else if ((label|0) == 31) {
   $97 = ___cxa_find_matching_catch_2()|0;
   $98 = (getTempRet0() | 0);
   $$sink61$index = $97;$$sink61$index3 = $98;
  }
  else if ((label|0) == 41) {
   $129 = ((($9)) + 11|0);
   $130 = HEAP8[$129>>0]|0;
   $131 = ($130<<24>>24)<(0);
   $132 = ((($9)) + 4|0);
   $133 = HEAP32[$132>>2]|0;
   $134 = $130&255;
   $135 = $131 ? $133 : $134;
   $136 = ($135|0)==(0);
   $137 = HEAP8[$15>>0]|0;
   $138 = ($137<<24>>24)==(0);
   $or$cond = $136 | $138;
   if (!($or$cond)) {
    $139 = HEAP32[$13>>2]|0;
    $140 = $139;
    $141 = $12;
    $142 = (($140) - ($141))|0;
    $143 = ($142|0)<(160);
    if ($143) {
     $144 = HEAP32[$14>>2]|0;
     $145 = ((($139)) + 4|0);
     HEAP32[$13>>2] = $145;
     HEAP32[$139>>2] = $144;
    }
   }
   $146 = HEAP32[$11>>2]|0;
   __THREW__ = 0;
   $147 = (+invoke_diii(5,($$2|0),($146|0),($4|0)));
   $148 = __THREW__; __THREW__ = 0;
   $149 = $148&1;
   L58: do {
    if (!($149)) {
     HEAPF32[$5>>2] = $147;
     $150 = HEAP32[$13>>2]|0;
     __THREW__ = 0;
     invoke_viiii(30,($9|0),($12|0),($150|0),($4|0));
     $151 = __THREW__; __THREW__ = 0;
     $152 = $151&1;
     if (!($152)) {
      $153 = ($100|0)==(0|0);
      if ($153) {
       $192 = 1;
      } else {
       $154 = ((($100)) + 12|0);
       $155 = HEAP32[$154>>2]|0;
       $156 = ((($100)) + 16|0);
       $157 = HEAP32[$156>>2]|0;
       $158 = ($155|0)==($157|0);
       if ($158) {
        $159 = HEAP32[$160>>2]|0;
        $161 = ((($159)) + 36|0);
        $162 = HEAP32[$161>>2]|0;
        __THREW__ = 0;
        $163 = (invoke_ii($162|0,($100|0))|0);
        $164 = __THREW__; __THREW__ = 0;
        $165 = $164&1;
        if ($165) {
         break;
        } else {
         $$0$i$i$i$i37 = $163;
        }
       } else {
        $166 = HEAP32[$155>>2]|0;
        $167 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($166)|0);
        $$0$i$i$i$i37 = $167;
       }
       $168 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
       $169 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i37,$168)|0);
       if ($169) {
        HEAP32[$1>>2] = 0;
        $192 = 1;
       } else {
        $192 = 0;
       }
      }
      $170 = ($171|0)==(0|0);
      do {
       if ($170) {
        label = 58;
       } else {
        $172 = ((($171)) + 12|0);
        $173 = HEAP32[$172>>2]|0;
        $174 = ((($171)) + 16|0);
        $175 = HEAP32[$174>>2]|0;
        $176 = ($173|0)==($175|0);
        if ($176) {
         $177 = HEAP32[$171>>2]|0;
         $178 = ((($177)) + 36|0);
         $179 = HEAP32[$178>>2]|0;
         __THREW__ = 0;
         $180 = (invoke_ii($179|0,($171|0))|0);
         $181 = __THREW__; __THREW__ = 0;
         $182 = $181&1;
         if ($182) {
          break L58;
         } else {
          $$0$i$i2$i$i43 = $180;
         }
        } else {
         $183 = HEAP32[$173>>2]|0;
         $184 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($183)|0);
         $$0$i$i2$i$i43 = $184;
        }
        $185 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
        $186 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i43,$185)|0);
        if ($186) {
         HEAP32[$2>>2] = 0;
         label = 58;
         break;
        } else {
         if ($192) {
          break;
         } else {
          label = 60;
          break;
         }
        }
       }
      } while(0);
      if ((label|0) == 58) {
       if ($192) {
        label = 60;
       }
      }
      if ((label|0) == 60) {
       $187 = HEAP32[$4>>2]|0;
       $188 = $187 | 2;
       HEAP32[$4>>2] = $188;
      }
      $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
      STACKTOP = sp;return ($$sroa$0$0$copyload|0);
     }
    }
   } while(0);
   $95 = ___cxa_find_matching_catch_2()|0;
   $96 = (getTempRet0() | 0);
   $$sink61$index = $95;$$sink61$index3 = $96;
  }
  $$1 = $$sink61$index;$$121 = $$sink61$index3;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 ___resumeException($$1|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i50 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i56 = 0, $$0$i$i46 = 0, $$032 = 0, $$1 = 0, $$133 = 0, $$135 = 0, $$2 = 0, $$pre = 0, $$sink74$index = 0, $$sink74$index3 = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
 var $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i = 0, $phitmp$i = 0, $phitmp$i41 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(304|0);
 $6 = sp + 300|0;
 $7 = sp + 160|0;
 $8 = sp + 288|0;
 $9 = sp + 276|0;
 $10 = sp + 272|0;
 $11 = sp;
 $12 = sp + 268|0;
 $13 = sp + 264|0;
 $14 = (__ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($3)|0);
 $15 = (__ZNKSt3__29__num_getIwE10__do_widenERNS_8ios_baseEPw($0,$3,$7)|0);
 __ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseERw($8,$3,$6);
 ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $16 = (($9) + ($$0$i$i<<2)|0);
  HEAP32[$16>>2] = 0;
  $17 = (($$0$i$i) + 1)|0;
  $$0$i$i = $17;
 }
 $18 = ((($9)) + 11|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = ($19<<24>>24)<(0);
 if ($20) {
  $21 = ((($9)) + 8|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $22 & 2147483647;
  $phitmp$i = (($23) + -1)|0;
  $24 = $phitmp$i;
 } else {
  $24 = 10;
 }
 __THREW__ = 0;
 invoke_viii(29,($9|0),($24|0),0);
 $25 = __THREW__; __THREW__ = 0;
 $26 = $25&1;
 if ($26) {
  $90 = ___cxa_find_matching_catch_2()|0;
  $91 = (getTempRet0() | 0);
  $$1 = $90;$$135 = $91;
 } else {
  $27 = HEAP8[$18>>0]|0;
  $28 = ($27<<24>>24)<(0);
  $29 = HEAP32[$9>>2]|0;
  $30 = $28 ? $29 : $9;
  HEAP32[$10>>2] = $30;
  HEAP32[$12>>2] = $11;
  HEAP32[$13>>2] = 0;
  $31 = ((($9)) + 4|0);
  $32 = ((($9)) + 8|0);
  $$pre = HEAP32[$1>>2]|0;
  $$032 = $30;$190 = $$pre;$34 = $$pre;
  L11: while(1) {
   $33 = ($34|0)==(0|0);
   if ($33) {
    $161 = 0;$191 = 1;$99 = 0;
   } else {
    $35 = ((($34)) + 12|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ((($34)) + 16|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = ($36|0)==($38|0);
    if ($39) {
     $40 = HEAP32[$34>>2]|0;
     $41 = ((($40)) + 36|0);
     $42 = HEAP32[$41>>2]|0;
     __THREW__ = 0;
     $43 = (invoke_ii($42|0,($34|0))|0);
     $44 = __THREW__; __THREW__ = 0;
     $45 = $44&1;
     if ($45) {
      label = 29;
      break;
     } else {
      $$0$i$i$i$i = $43;
     }
    } else {
     $46 = HEAP32[$36>>2]|0;
     $47 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($46)|0);
     $$0$i$i$i$i = $47;
    }
    $48 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
    $49 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i,$48)|0);
    if ($49) {
     HEAP32[$1>>2] = 0;
     $161 = 0;$191 = 1;$99 = 0;
    } else {
     $161 = $190;$191 = 0;$99 = $34;
    }
   }
   $50 = HEAP32[$2>>2]|0;
   $51 = ($50|0)==(0|0);
   do {
    if ($51) {
     label = 20;
    } else {
     $52 = ((($50)) + 12|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = ((($50)) + 16|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ($53|0)==($55|0);
     if ($56) {
      $57 = HEAP32[$50>>2]|0;
      $58 = ((($57)) + 36|0);
      $59 = HEAP32[$58>>2]|0;
      __THREW__ = 0;
      $60 = (invoke_ii($59|0,($50|0))|0);
      $61 = __THREW__; __THREW__ = 0;
      $62 = $61&1;
      if ($62) {
       label = 29;
       break L11;
      } else {
       $$0$i$i2$i$i = $60;
      }
     } else {
      $63 = HEAP32[$53>>2]|0;
      $64 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($63)|0);
      $$0$i$i2$i$i = $64;
     }
     $65 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
     $66 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i,$65)|0);
     if ($66) {
      HEAP32[$2>>2] = 0;
      label = 20;
      break;
     } else {
      if ($191) {
       $192 = $50;
       break;
      } else {
       $$2 = $$032;$172 = $50;
       label = 41;
       break L11;
      }
     }
    }
   } while(0);
   if ((label|0) == 20) {
    label = 0;
    if ($191) {
     $$2 = $$032;$172 = 0;
     label = 41;
     break;
    } else {
     $192 = 0;
    }
   }
   $67 = HEAP32[$10>>2]|0;
   $68 = HEAP8[$18>>0]|0;
   $69 = ($68<<24>>24)<(0);
   $70 = HEAP32[$31>>2]|0;
   $71 = $68&255;
   $72 = $69 ? $70 : $71;
   $73 = (($$032) + ($72)|0);
   $74 = ($67|0)==($73|0);
   if ($74) {
    $75 = $72 << 1;
    __THREW__ = 0;
    invoke_viii(29,($9|0),($75|0),0);
    $76 = __THREW__; __THREW__ = 0;
    $77 = $76&1;
    if ($77) {
     label = 31;
     break;
    }
    $78 = HEAP8[$18>>0]|0;
    $79 = ($78<<24>>24)<(0);
    if ($79) {
     $80 = HEAP32[$32>>2]|0;
     $81 = $80 & 2147483647;
     $phitmp$i41 = (($81) + -1)|0;
     $82 = $phitmp$i41;
    } else {
     $82 = 10;
    }
    __THREW__ = 0;
    invoke_viii(29,($9|0),($82|0),0);
    $83 = __THREW__; __THREW__ = 0;
    $84 = $83&1;
    if ($84) {
     label = 31;
     break;
    }
    $85 = HEAP8[$18>>0]|0;
    $86 = ($85<<24>>24)<(0);
    $87 = HEAP32[$9>>2]|0;
    $88 = $86 ? $87 : $9;
    $89 = (($88) + ($72)|0);
    HEAP32[$10>>2] = $89;
    $$133 = $88;
   } else {
    $$133 = $$032;
   }
   $98 = ((($99)) + 12|0);
   $100 = HEAP32[$98>>2]|0;
   $101 = ((($99)) + 16|0);
   $102 = HEAP32[$101>>2]|0;
   $103 = ($100|0)==($102|0);
   if ($103) {
    $104 = HEAP32[$99>>2]|0;
    $105 = ((($104)) + 36|0);
    $106 = HEAP32[$105>>2]|0;
    __THREW__ = 0;
    $107 = (invoke_ii($106|0,($99|0))|0);
    $108 = __THREW__; __THREW__ = 0;
    $109 = $108&1;
    if ($109) {
     label = 29;
     break;
    } else {
     $$0$i$i46 = $107;
    }
   } else {
    $110 = HEAP32[$100>>2]|0;
    $111 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($110)|0);
    $$0$i$i46 = $111;
   }
   $112 = HEAP32[$6>>2]|0;
   __THREW__ = 0;
   $113 = (invoke_iiiiiiiiiii(2,($$0$i$i46|0),($14|0),($$133|0),($10|0),($13|0),($112|0),($8|0),($11|0),($12|0),($15|0))|0);
   $114 = __THREW__; __THREW__ = 0;
   $115 = $114&1;
   if ($115) {
    label = 29;
    break;
   }
   $116 = ($113|0)==(0);
   if (!($116)) {
    $$2 = $$133;$172 = $192;
    label = 41;
    break;
   }
   $117 = HEAP32[$98>>2]|0;
   $118 = HEAP32[$101>>2]|0;
   $119 = ($117|0)==($118|0);
   if ($119) {
    $120 = HEAP32[$99>>2]|0;
    $121 = ((($120)) + 40|0);
    $122 = HEAP32[$121>>2]|0;
    __THREW__ = 0;
    (invoke_ii($122|0,($99|0))|0);
    $123 = __THREW__; __THREW__ = 0;
    $124 = $123&1;
    if ($124) {
     label = 29;
     break;
    }
   } else {
    $125 = ((($117)) + 4|0);
    HEAP32[$98>>2] = $125;
    $126 = HEAP32[$117>>2]|0;
    (__ZNSt3__211char_traitsIwE11to_int_typeEw($126)|0);
   }
   $$032 = $$133;$190 = $161;$34 = $99;
  }
  if ((label|0) == 29) {
   $92 = ___cxa_find_matching_catch_2()|0;
   $93 = (getTempRet0() | 0);
   $$sink74$index = $92;$$sink74$index3 = $93;
  }
  else if ((label|0) == 31) {
   $96 = ___cxa_find_matching_catch_2()|0;
   $97 = (getTempRet0() | 0);
   $$sink74$index = $96;$$sink74$index3 = $97;
  }
  else if ((label|0) == 41) {
   $127 = ((($8)) + 11|0);
   $128 = HEAP8[$127>>0]|0;
   $129 = ($128<<24>>24)<(0);
   $130 = ((($8)) + 4|0);
   $131 = HEAP32[$130>>2]|0;
   $132 = $128&255;
   $133 = $129 ? $131 : $132;
   $134 = ($133|0)==(0);
   if (!($134)) {
    $135 = HEAP32[$12>>2]|0;
    $136 = $135;
    $137 = $11;
    $138 = (($136) - ($137))|0;
    $139 = ($138|0)<(160);
    if ($139) {
     $140 = HEAP32[$13>>2]|0;
     $141 = ((($135)) + 4|0);
     HEAP32[$12>>2] = $141;
     HEAP32[$135>>2] = $140;
    }
   }
   $142 = HEAP32[$10>>2]|0;
   __THREW__ = 0;
   $143 = (invoke_iiiii(12,($$2|0),($142|0),($4|0),($14|0))|0);
   $144 = (getTempRet0() | 0);
   $145 = __THREW__; __THREW__ = 0;
   $146 = $145&1;
   L58: do {
    if (!($146)) {
     $147 = $5;
     $148 = $147;
     HEAP32[$148>>2] = $143;
     $149 = (($147) + 4)|0;
     $150 = $149;
     HEAP32[$150>>2] = $144;
     $151 = HEAP32[$12>>2]|0;
     __THREW__ = 0;
     invoke_viiii(30,($8|0),($11|0),($151|0),($4|0));
     $152 = __THREW__; __THREW__ = 0;
     $153 = $152&1;
     if (!($153)) {
      $154 = ($99|0)==(0|0);
      if ($154) {
       $193 = 1;
      } else {
       $155 = ((($99)) + 12|0);
       $156 = HEAP32[$155>>2]|0;
       $157 = ((($99)) + 16|0);
       $158 = HEAP32[$157>>2]|0;
       $159 = ($156|0)==($158|0);
       if ($159) {
        $160 = HEAP32[$161>>2]|0;
        $162 = ((($160)) + 36|0);
        $163 = HEAP32[$162>>2]|0;
        __THREW__ = 0;
        $164 = (invoke_ii($163|0,($99|0))|0);
        $165 = __THREW__; __THREW__ = 0;
        $166 = $165&1;
        if ($166) {
         break;
        } else {
         $$0$i$i$i$i50 = $164;
        }
       } else {
        $167 = HEAP32[$156>>2]|0;
        $168 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($167)|0);
        $$0$i$i$i$i50 = $168;
       }
       $169 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
       $170 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i50,$169)|0);
       if ($170) {
        HEAP32[$1>>2] = 0;
        $193 = 1;
       } else {
        $193 = 0;
       }
      }
      $171 = ($172|0)==(0|0);
      do {
       if ($171) {
        label = 58;
       } else {
        $173 = ((($172)) + 12|0);
        $174 = HEAP32[$173>>2]|0;
        $175 = ((($172)) + 16|0);
        $176 = HEAP32[$175>>2]|0;
        $177 = ($174|0)==($176|0);
        if ($177) {
         $178 = HEAP32[$172>>2]|0;
         $179 = ((($178)) + 36|0);
         $180 = HEAP32[$179>>2]|0;
         __THREW__ = 0;
         $181 = (invoke_ii($180|0,($172|0))|0);
         $182 = __THREW__; __THREW__ = 0;
         $183 = $182&1;
         if ($183) {
          break L58;
         } else {
          $$0$i$i2$i$i56 = $181;
         }
        } else {
         $184 = HEAP32[$174>>2]|0;
         $185 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($184)|0);
         $$0$i$i2$i$i56 = $185;
        }
        $186 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
        $187 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i56,$186)|0);
        if ($187) {
         HEAP32[$2>>2] = 0;
         label = 58;
         break;
        } else {
         if ($193) {
          break;
         } else {
          label = 60;
          break;
         }
        }
       }
      } while(0);
      if ((label|0) == 58) {
       if ($193) {
        label = 60;
       }
      }
      if ((label|0) == 60) {
       $188 = HEAP32[$4>>2]|0;
       $189 = $188 | 2;
       HEAP32[$4>>2] = $189;
      }
      $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
      STACKTOP = sp;return ($$sroa$0$0$copyload|0);
     }
    }
   } while(0);
   $94 = ___cxa_find_matching_catch_2()|0;
   $95 = (getTempRet0() | 0);
   $$sink74$index = $94;$$sink74$index3 = $95;
  }
  $$1 = $$sink74$index;$$135 = $$sink74$index3;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
 ___resumeException($$1|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__29__num_getIwE10__do_widenERNS_8ios_baseEPw($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (__ZNKSt3__29__num_getIwE12__do_widen_pIwEEPKT_RNS_8ios_baseEPS3_($0,$1,$2)|0);
 return ($3|0);
}
function __ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseERw($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 __ZNKSt3__28ios_base6getlocEv($3,$1);
 __THREW__ = 0;
 $4 = (invoke_iii(37,($3|0),(50780|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  $7 = HEAP32[$4>>2]|0;
  $8 = ((($7)) + 16|0);
  $9 = HEAP32[$8>>2]|0;
  __THREW__ = 0;
  $10 = (invoke_ii($9|0,($4|0))|0);
  $11 = __THREW__; __THREW__ = 0;
  $12 = $11&1;
  if (!($12)) {
   HEAP32[$2>>2] = $10;
   $13 = HEAP32[$4>>2]|0;
   $14 = ((($13)) + 20|0);
   $15 = HEAP32[$14>>2]|0;
   __THREW__ = 0;
   invoke_vii($15|0,($0|0),($4|0));
   $16 = __THREW__; __THREW__ = 0;
   $17 = $16&1;
   if (!($17)) {
    __ZNSt3__26localeD2Ev($3);
    STACKTOP = sp;return;
   }
  }
 }
 $18 = ___cxa_find_matching_catch_2()|0;
 $19 = (getTempRet0() | 0);
 __ZNSt3__26localeD2Ev($3);
 ___resumeException($18|0);
 // unreachable;
}
function __ZNKSt3__29__num_getIwE12__do_widen_pIwEEPKT_RNS_8ios_baseEPS3_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 __ZNKSt3__28ios_base6getlocEv($3,$1);
 __THREW__ = 0;
 $4 = (invoke_iii(37,($3|0),(50772|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  $7 = HEAP32[$4>>2]|0;
  $8 = ((($7)) + 48|0);
  $9 = HEAP32[$8>>2]|0;
  __THREW__ = 0;
  (invoke_iiiii($9|0,($4|0),(20912|0),((20938)|0),($2|0))|0);
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if (!($11)) {
   __ZNSt3__26localeD2Ev($3);
   STACKTOP = sp;return ($2|0);
  }
 }
 $12 = ___cxa_find_matching_catch_2()|0;
 $13 = (getTempRet0() | 0);
 __ZNSt3__26localeD2Ev($3);
 ___resumeException($12|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i50 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i56 = 0, $$0$i$i46 = 0, $$032 = 0, $$1 = 0, $$133 = 0, $$135 = 0, $$2 = 0, $$pre = 0, $$sink74$index = 0, $$sink74$index3 = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
 var $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i = 0, $phitmp$i = 0;
 var $phitmp$i41 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(304|0);
 $6 = sp + 300|0;
 $7 = sp + 160|0;
 $8 = sp + 288|0;
 $9 = sp + 276|0;
 $10 = sp + 272|0;
 $11 = sp;
 $12 = sp + 268|0;
 $13 = sp + 264|0;
 $14 = (__ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($3)|0);
 $15 = (__ZNKSt3__29__num_getIwE10__do_widenERNS_8ios_baseEPw($0,$3,$7)|0);
 __ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseERw($8,$3,$6);
 ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $16 = (($9) + ($$0$i$i<<2)|0);
  HEAP32[$16>>2] = 0;
  $17 = (($$0$i$i) + 1)|0;
  $$0$i$i = $17;
 }
 $18 = ((($9)) + 11|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = ($19<<24>>24)<(0);
 if ($20) {
  $21 = ((($9)) + 8|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $22 & 2147483647;
  $phitmp$i = (($23) + -1)|0;
  $24 = $phitmp$i;
 } else {
  $24 = 10;
 }
 __THREW__ = 0;
 invoke_viii(29,($9|0),($24|0),0);
 $25 = __THREW__; __THREW__ = 0;
 $26 = $25&1;
 if ($26) {
  $90 = ___cxa_find_matching_catch_2()|0;
  $91 = (getTempRet0() | 0);
  $$1 = $90;$$135 = $91;
 } else {
  $27 = HEAP8[$18>>0]|0;
  $28 = ($27<<24>>24)<(0);
  $29 = HEAP32[$9>>2]|0;
  $30 = $28 ? $29 : $9;
  HEAP32[$10>>2] = $30;
  HEAP32[$12>>2] = $11;
  HEAP32[$13>>2] = 0;
  $31 = ((($9)) + 4|0);
  $32 = ((($9)) + 8|0);
  $$pre = HEAP32[$1>>2]|0;
  $$032 = $30;$185 = $$pre;$34 = $$pre;
  L11: while(1) {
   $33 = ($34|0)==(0|0);
   if ($33) {
    $156 = 0;$186 = 1;$99 = 0;
   } else {
    $35 = ((($34)) + 12|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ((($34)) + 16|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = ($36|0)==($38|0);
    if ($39) {
     $40 = HEAP32[$34>>2]|0;
     $41 = ((($40)) + 36|0);
     $42 = HEAP32[$41>>2]|0;
     __THREW__ = 0;
     $43 = (invoke_ii($42|0,($34|0))|0);
     $44 = __THREW__; __THREW__ = 0;
     $45 = $44&1;
     if ($45) {
      label = 29;
      break;
     } else {
      $$0$i$i$i$i = $43;
     }
    } else {
     $46 = HEAP32[$36>>2]|0;
     $47 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($46)|0);
     $$0$i$i$i$i = $47;
    }
    $48 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
    $49 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i,$48)|0);
    if ($49) {
     HEAP32[$1>>2] = 0;
     $156 = 0;$186 = 1;$99 = 0;
    } else {
     $156 = $185;$186 = 0;$99 = $34;
    }
   }
   $50 = HEAP32[$2>>2]|0;
   $51 = ($50|0)==(0|0);
   do {
    if ($51) {
     label = 20;
    } else {
     $52 = ((($50)) + 12|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = ((($50)) + 16|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ($53|0)==($55|0);
     if ($56) {
      $57 = HEAP32[$50>>2]|0;
      $58 = ((($57)) + 36|0);
      $59 = HEAP32[$58>>2]|0;
      __THREW__ = 0;
      $60 = (invoke_ii($59|0,($50|0))|0);
      $61 = __THREW__; __THREW__ = 0;
      $62 = $61&1;
      if ($62) {
       label = 29;
       break L11;
      } else {
       $$0$i$i2$i$i = $60;
      }
     } else {
      $63 = HEAP32[$53>>2]|0;
      $64 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($63)|0);
      $$0$i$i2$i$i = $64;
     }
     $65 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
     $66 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i,$65)|0);
     if ($66) {
      HEAP32[$2>>2] = 0;
      label = 20;
      break;
     } else {
      if ($186) {
       $187 = $50;
       break;
      } else {
       $$2 = $$032;$167 = $50;
       label = 41;
       break L11;
      }
     }
    }
   } while(0);
   if ((label|0) == 20) {
    label = 0;
    if ($186) {
     $$2 = $$032;$167 = 0;
     label = 41;
     break;
    } else {
     $187 = 0;
    }
   }
   $67 = HEAP32[$10>>2]|0;
   $68 = HEAP8[$18>>0]|0;
   $69 = ($68<<24>>24)<(0);
   $70 = HEAP32[$31>>2]|0;
   $71 = $68&255;
   $72 = $69 ? $70 : $71;
   $73 = (($$032) + ($72)|0);
   $74 = ($67|0)==($73|0);
   if ($74) {
    $75 = $72 << 1;
    __THREW__ = 0;
    invoke_viii(29,($9|0),($75|0),0);
    $76 = __THREW__; __THREW__ = 0;
    $77 = $76&1;
    if ($77) {
     label = 31;
     break;
    }
    $78 = HEAP8[$18>>0]|0;
    $79 = ($78<<24>>24)<(0);
    if ($79) {
     $80 = HEAP32[$32>>2]|0;
     $81 = $80 & 2147483647;
     $phitmp$i41 = (($81) + -1)|0;
     $82 = $phitmp$i41;
    } else {
     $82 = 10;
    }
    __THREW__ = 0;
    invoke_viii(29,($9|0),($82|0),0);
    $83 = __THREW__; __THREW__ = 0;
    $84 = $83&1;
    if ($84) {
     label = 31;
     break;
    }
    $85 = HEAP8[$18>>0]|0;
    $86 = ($85<<24>>24)<(0);
    $87 = HEAP32[$9>>2]|0;
    $88 = $86 ? $87 : $9;
    $89 = (($88) + ($72)|0);
    HEAP32[$10>>2] = $89;
    $$133 = $88;
   } else {
    $$133 = $$032;
   }
   $98 = ((($99)) + 12|0);
   $100 = HEAP32[$98>>2]|0;
   $101 = ((($99)) + 16|0);
   $102 = HEAP32[$101>>2]|0;
   $103 = ($100|0)==($102|0);
   if ($103) {
    $104 = HEAP32[$99>>2]|0;
    $105 = ((($104)) + 36|0);
    $106 = HEAP32[$105>>2]|0;
    __THREW__ = 0;
    $107 = (invoke_ii($106|0,($99|0))|0);
    $108 = __THREW__; __THREW__ = 0;
    $109 = $108&1;
    if ($109) {
     label = 29;
     break;
    } else {
     $$0$i$i46 = $107;
    }
   } else {
    $110 = HEAP32[$100>>2]|0;
    $111 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($110)|0);
    $$0$i$i46 = $111;
   }
   $112 = HEAP32[$6>>2]|0;
   __THREW__ = 0;
   $113 = (invoke_iiiiiiiiiii(2,($$0$i$i46|0),($14|0),($$133|0),($10|0),($13|0),($112|0),($8|0),($11|0),($12|0),($15|0))|0);
   $114 = __THREW__; __THREW__ = 0;
   $115 = $114&1;
   if ($115) {
    label = 29;
    break;
   }
   $116 = ($113|0)==(0);
   if (!($116)) {
    $$2 = $$133;$167 = $187;
    label = 41;
    break;
   }
   $117 = HEAP32[$98>>2]|0;
   $118 = HEAP32[$101>>2]|0;
   $119 = ($117|0)==($118|0);
   if ($119) {
    $120 = HEAP32[$99>>2]|0;
    $121 = ((($120)) + 40|0);
    $122 = HEAP32[$121>>2]|0;
    __THREW__ = 0;
    (invoke_ii($122|0,($99|0))|0);
    $123 = __THREW__; __THREW__ = 0;
    $124 = $123&1;
    if ($124) {
     label = 29;
     break;
    }
   } else {
    $125 = ((($117)) + 4|0);
    HEAP32[$98>>2] = $125;
    $126 = HEAP32[$117>>2]|0;
    (__ZNSt3__211char_traitsIwE11to_int_typeEw($126)|0);
   }
   $$032 = $$133;$185 = $156;$34 = $99;
  }
  if ((label|0) == 29) {
   $92 = ___cxa_find_matching_catch_2()|0;
   $93 = (getTempRet0() | 0);
   $$sink74$index = $92;$$sink74$index3 = $93;
  }
  else if ((label|0) == 31) {
   $96 = ___cxa_find_matching_catch_2()|0;
   $97 = (getTempRet0() | 0);
   $$sink74$index = $96;$$sink74$index3 = $97;
  }
  else if ((label|0) == 41) {
   $127 = ((($8)) + 11|0);
   $128 = HEAP8[$127>>0]|0;
   $129 = ($128<<24>>24)<(0);
   $130 = ((($8)) + 4|0);
   $131 = HEAP32[$130>>2]|0;
   $132 = $128&255;
   $133 = $129 ? $131 : $132;
   $134 = ($133|0)==(0);
   if (!($134)) {
    $135 = HEAP32[$12>>2]|0;
    $136 = $135;
    $137 = $11;
    $138 = (($136) - ($137))|0;
    $139 = ($138|0)<(160);
    if ($139) {
     $140 = HEAP32[$13>>2]|0;
     $141 = ((($135)) + 4|0);
     HEAP32[$12>>2] = $141;
     HEAP32[$135>>2] = $140;
    }
   }
   $142 = HEAP32[$10>>2]|0;
   __THREW__ = 0;
   $143 = (invoke_iiiii(13,($$2|0),($142|0),($4|0),($14|0))|0);
   $144 = __THREW__; __THREW__ = 0;
   $145 = $144&1;
   L58: do {
    if (!($145)) {
     HEAP32[$5>>2] = $143;
     $146 = HEAP32[$12>>2]|0;
     __THREW__ = 0;
     invoke_viiii(30,($8|0),($11|0),($146|0),($4|0));
     $147 = __THREW__; __THREW__ = 0;
     $148 = $147&1;
     if (!($148)) {
      $149 = ($99|0)==(0|0);
      if ($149) {
       $188 = 1;
      } else {
       $150 = ((($99)) + 12|0);
       $151 = HEAP32[$150>>2]|0;
       $152 = ((($99)) + 16|0);
       $153 = HEAP32[$152>>2]|0;
       $154 = ($151|0)==($153|0);
       if ($154) {
        $155 = HEAP32[$156>>2]|0;
        $157 = ((($155)) + 36|0);
        $158 = HEAP32[$157>>2]|0;
        __THREW__ = 0;
        $159 = (invoke_ii($158|0,($99|0))|0);
        $160 = __THREW__; __THREW__ = 0;
        $161 = $160&1;
        if ($161) {
         break;
        } else {
         $$0$i$i$i$i50 = $159;
        }
       } else {
        $162 = HEAP32[$151>>2]|0;
        $163 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($162)|0);
        $$0$i$i$i$i50 = $163;
       }
       $164 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
       $165 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i50,$164)|0);
       if ($165) {
        HEAP32[$1>>2] = 0;
        $188 = 1;
       } else {
        $188 = 0;
       }
      }
      $166 = ($167|0)==(0|0);
      do {
       if ($166) {
        label = 58;
       } else {
        $168 = ((($167)) + 12|0);
        $169 = HEAP32[$168>>2]|0;
        $170 = ((($167)) + 16|0);
        $171 = HEAP32[$170>>2]|0;
        $172 = ($169|0)==($171|0);
        if ($172) {
         $173 = HEAP32[$167>>2]|0;
         $174 = ((($173)) + 36|0);
         $175 = HEAP32[$174>>2]|0;
         __THREW__ = 0;
         $176 = (invoke_ii($175|0,($167|0))|0);
         $177 = __THREW__; __THREW__ = 0;
         $178 = $177&1;
         if ($178) {
          break L58;
         } else {
          $$0$i$i2$i$i56 = $176;
         }
        } else {
         $179 = HEAP32[$169>>2]|0;
         $180 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($179)|0);
         $$0$i$i2$i$i56 = $180;
        }
        $181 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
        $182 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i56,$181)|0);
        if ($182) {
         HEAP32[$2>>2] = 0;
         label = 58;
         break;
        } else {
         if ($188) {
          break;
         } else {
          label = 60;
          break;
         }
        }
       }
      } while(0);
      if ((label|0) == 58) {
       if ($188) {
        label = 60;
       }
      }
      if ((label|0) == 60) {
       $183 = HEAP32[$4>>2]|0;
       $184 = $183 | 2;
       HEAP32[$4>>2] = $184;
      }
      $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
      STACKTOP = sp;return ($$sroa$0$0$copyload|0);
     }
    }
   } while(0);
   $94 = ___cxa_find_matching_catch_2()|0;
   $95 = (getTempRet0() | 0);
   $$sink74$index = $94;$$sink74$index3 = $95;
  }
  $$1 = $$sink74$index;$$135 = $$sink74$index3;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
 ___resumeException($$1|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i50 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i56 = 0, $$0$i$i46 = 0, $$032 = 0, $$1 = 0, $$133 = 0, $$135 = 0, $$2 = 0, $$pre = 0, $$sink74$index = 0, $$sink74$index3 = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
 var $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i = 0, $phitmp$i = 0;
 var $phitmp$i41 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(304|0);
 $6 = sp + 300|0;
 $7 = sp + 160|0;
 $8 = sp + 288|0;
 $9 = sp + 276|0;
 $10 = sp + 272|0;
 $11 = sp;
 $12 = sp + 268|0;
 $13 = sp + 264|0;
 $14 = (__ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($3)|0);
 $15 = (__ZNKSt3__29__num_getIwE10__do_widenERNS_8ios_baseEPw($0,$3,$7)|0);
 __ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseERw($8,$3,$6);
 ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $16 = (($9) + ($$0$i$i<<2)|0);
  HEAP32[$16>>2] = 0;
  $17 = (($$0$i$i) + 1)|0;
  $$0$i$i = $17;
 }
 $18 = ((($9)) + 11|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = ($19<<24>>24)<(0);
 if ($20) {
  $21 = ((($9)) + 8|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $22 & 2147483647;
  $phitmp$i = (($23) + -1)|0;
  $24 = $phitmp$i;
 } else {
  $24 = 10;
 }
 __THREW__ = 0;
 invoke_viii(29,($9|0),($24|0),0);
 $25 = __THREW__; __THREW__ = 0;
 $26 = $25&1;
 if ($26) {
  $90 = ___cxa_find_matching_catch_2()|0;
  $91 = (getTempRet0() | 0);
  $$1 = $90;$$135 = $91;
 } else {
  $27 = HEAP8[$18>>0]|0;
  $28 = ($27<<24>>24)<(0);
  $29 = HEAP32[$9>>2]|0;
  $30 = $28 ? $29 : $9;
  HEAP32[$10>>2] = $30;
  HEAP32[$12>>2] = $11;
  HEAP32[$13>>2] = 0;
  $31 = ((($9)) + 4|0);
  $32 = ((($9)) + 8|0);
  $$pre = HEAP32[$1>>2]|0;
  $$032 = $30;$185 = $$pre;$34 = $$pre;
  L11: while(1) {
   $33 = ($34|0)==(0|0);
   if ($33) {
    $156 = 0;$186 = 1;$99 = 0;
   } else {
    $35 = ((($34)) + 12|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ((($34)) + 16|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = ($36|0)==($38|0);
    if ($39) {
     $40 = HEAP32[$34>>2]|0;
     $41 = ((($40)) + 36|0);
     $42 = HEAP32[$41>>2]|0;
     __THREW__ = 0;
     $43 = (invoke_ii($42|0,($34|0))|0);
     $44 = __THREW__; __THREW__ = 0;
     $45 = $44&1;
     if ($45) {
      label = 29;
      break;
     } else {
      $$0$i$i$i$i = $43;
     }
    } else {
     $46 = HEAP32[$36>>2]|0;
     $47 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($46)|0);
     $$0$i$i$i$i = $47;
    }
    $48 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
    $49 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i,$48)|0);
    if ($49) {
     HEAP32[$1>>2] = 0;
     $156 = 0;$186 = 1;$99 = 0;
    } else {
     $156 = $185;$186 = 0;$99 = $34;
    }
   }
   $50 = HEAP32[$2>>2]|0;
   $51 = ($50|0)==(0|0);
   do {
    if ($51) {
     label = 20;
    } else {
     $52 = ((($50)) + 12|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = ((($50)) + 16|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ($53|0)==($55|0);
     if ($56) {
      $57 = HEAP32[$50>>2]|0;
      $58 = ((($57)) + 36|0);
      $59 = HEAP32[$58>>2]|0;
      __THREW__ = 0;
      $60 = (invoke_ii($59|0,($50|0))|0);
      $61 = __THREW__; __THREW__ = 0;
      $62 = $61&1;
      if ($62) {
       label = 29;
       break L11;
      } else {
       $$0$i$i2$i$i = $60;
      }
     } else {
      $63 = HEAP32[$53>>2]|0;
      $64 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($63)|0);
      $$0$i$i2$i$i = $64;
     }
     $65 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
     $66 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i,$65)|0);
     if ($66) {
      HEAP32[$2>>2] = 0;
      label = 20;
      break;
     } else {
      if ($186) {
       $187 = $50;
       break;
      } else {
       $$2 = $$032;$167 = $50;
       label = 41;
       break L11;
      }
     }
    }
   } while(0);
   if ((label|0) == 20) {
    label = 0;
    if ($186) {
     $$2 = $$032;$167 = 0;
     label = 41;
     break;
    } else {
     $187 = 0;
    }
   }
   $67 = HEAP32[$10>>2]|0;
   $68 = HEAP8[$18>>0]|0;
   $69 = ($68<<24>>24)<(0);
   $70 = HEAP32[$31>>2]|0;
   $71 = $68&255;
   $72 = $69 ? $70 : $71;
   $73 = (($$032) + ($72)|0);
   $74 = ($67|0)==($73|0);
   if ($74) {
    $75 = $72 << 1;
    __THREW__ = 0;
    invoke_viii(29,($9|0),($75|0),0);
    $76 = __THREW__; __THREW__ = 0;
    $77 = $76&1;
    if ($77) {
     label = 31;
     break;
    }
    $78 = HEAP8[$18>>0]|0;
    $79 = ($78<<24>>24)<(0);
    if ($79) {
     $80 = HEAP32[$32>>2]|0;
     $81 = $80 & 2147483647;
     $phitmp$i41 = (($81) + -1)|0;
     $82 = $phitmp$i41;
    } else {
     $82 = 10;
    }
    __THREW__ = 0;
    invoke_viii(29,($9|0),($82|0),0);
    $83 = __THREW__; __THREW__ = 0;
    $84 = $83&1;
    if ($84) {
     label = 31;
     break;
    }
    $85 = HEAP8[$18>>0]|0;
    $86 = ($85<<24>>24)<(0);
    $87 = HEAP32[$9>>2]|0;
    $88 = $86 ? $87 : $9;
    $89 = (($88) + ($72)|0);
    HEAP32[$10>>2] = $89;
    $$133 = $88;
   } else {
    $$133 = $$032;
   }
   $98 = ((($99)) + 12|0);
   $100 = HEAP32[$98>>2]|0;
   $101 = ((($99)) + 16|0);
   $102 = HEAP32[$101>>2]|0;
   $103 = ($100|0)==($102|0);
   if ($103) {
    $104 = HEAP32[$99>>2]|0;
    $105 = ((($104)) + 36|0);
    $106 = HEAP32[$105>>2]|0;
    __THREW__ = 0;
    $107 = (invoke_ii($106|0,($99|0))|0);
    $108 = __THREW__; __THREW__ = 0;
    $109 = $108&1;
    if ($109) {
     label = 29;
     break;
    } else {
     $$0$i$i46 = $107;
    }
   } else {
    $110 = HEAP32[$100>>2]|0;
    $111 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($110)|0);
    $$0$i$i46 = $111;
   }
   $112 = HEAP32[$6>>2]|0;
   __THREW__ = 0;
   $113 = (invoke_iiiiiiiiiii(2,($$0$i$i46|0),($14|0),($$133|0),($10|0),($13|0),($112|0),($8|0),($11|0),($12|0),($15|0))|0);
   $114 = __THREW__; __THREW__ = 0;
   $115 = $114&1;
   if ($115) {
    label = 29;
    break;
   }
   $116 = ($113|0)==(0);
   if (!($116)) {
    $$2 = $$133;$167 = $187;
    label = 41;
    break;
   }
   $117 = HEAP32[$98>>2]|0;
   $118 = HEAP32[$101>>2]|0;
   $119 = ($117|0)==($118|0);
   if ($119) {
    $120 = HEAP32[$99>>2]|0;
    $121 = ((($120)) + 40|0);
    $122 = HEAP32[$121>>2]|0;
    __THREW__ = 0;
    (invoke_ii($122|0,($99|0))|0);
    $123 = __THREW__; __THREW__ = 0;
    $124 = $123&1;
    if ($124) {
     label = 29;
     break;
    }
   } else {
    $125 = ((($117)) + 4|0);
    HEAP32[$98>>2] = $125;
    $126 = HEAP32[$117>>2]|0;
    (__ZNSt3__211char_traitsIwE11to_int_typeEw($126)|0);
   }
   $$032 = $$133;$185 = $156;$34 = $99;
  }
  if ((label|0) == 29) {
   $92 = ___cxa_find_matching_catch_2()|0;
   $93 = (getTempRet0() | 0);
   $$sink74$index = $92;$$sink74$index3 = $93;
  }
  else if ((label|0) == 31) {
   $96 = ___cxa_find_matching_catch_2()|0;
   $97 = (getTempRet0() | 0);
   $$sink74$index = $96;$$sink74$index3 = $97;
  }
  else if ((label|0) == 41) {
   $127 = ((($8)) + 11|0);
   $128 = HEAP8[$127>>0]|0;
   $129 = ($128<<24>>24)<(0);
   $130 = ((($8)) + 4|0);
   $131 = HEAP32[$130>>2]|0;
   $132 = $128&255;
   $133 = $129 ? $131 : $132;
   $134 = ($133|0)==(0);
   if (!($134)) {
    $135 = HEAP32[$12>>2]|0;
    $136 = $135;
    $137 = $11;
    $138 = (($136) - ($137))|0;
    $139 = ($138|0)<(160);
    if ($139) {
     $140 = HEAP32[$13>>2]|0;
     $141 = ((($135)) + 4|0);
     HEAP32[$12>>2] = $141;
     HEAP32[$135>>2] = $140;
    }
   }
   $142 = HEAP32[$10>>2]|0;
   __THREW__ = 0;
   $143 = (invoke_iiiii(14,($$2|0),($142|0),($4|0),($14|0))|0);
   $144 = __THREW__; __THREW__ = 0;
   $145 = $144&1;
   L58: do {
    if (!($145)) {
     HEAP32[$5>>2] = $143;
     $146 = HEAP32[$12>>2]|0;
     __THREW__ = 0;
     invoke_viiii(30,($8|0),($11|0),($146|0),($4|0));
     $147 = __THREW__; __THREW__ = 0;
     $148 = $147&1;
     if (!($148)) {
      $149 = ($99|0)==(0|0);
      if ($149) {
       $188 = 1;
      } else {
       $150 = ((($99)) + 12|0);
       $151 = HEAP32[$150>>2]|0;
       $152 = ((($99)) + 16|0);
       $153 = HEAP32[$152>>2]|0;
       $154 = ($151|0)==($153|0);
       if ($154) {
        $155 = HEAP32[$156>>2]|0;
        $157 = ((($155)) + 36|0);
        $158 = HEAP32[$157>>2]|0;
        __THREW__ = 0;
        $159 = (invoke_ii($158|0,($99|0))|0);
        $160 = __THREW__; __THREW__ = 0;
        $161 = $160&1;
        if ($161) {
         break;
        } else {
         $$0$i$i$i$i50 = $159;
        }
       } else {
        $162 = HEAP32[$151>>2]|0;
        $163 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($162)|0);
        $$0$i$i$i$i50 = $163;
       }
       $164 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
       $165 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i50,$164)|0);
       if ($165) {
        HEAP32[$1>>2] = 0;
        $188 = 1;
       } else {
        $188 = 0;
       }
      }
      $166 = ($167|0)==(0|0);
      do {
       if ($166) {
        label = 58;
       } else {
        $168 = ((($167)) + 12|0);
        $169 = HEAP32[$168>>2]|0;
        $170 = ((($167)) + 16|0);
        $171 = HEAP32[$170>>2]|0;
        $172 = ($169|0)==($171|0);
        if ($172) {
         $173 = HEAP32[$167>>2]|0;
         $174 = ((($173)) + 36|0);
         $175 = HEAP32[$174>>2]|0;
         __THREW__ = 0;
         $176 = (invoke_ii($175|0,($167|0))|0);
         $177 = __THREW__; __THREW__ = 0;
         $178 = $177&1;
         if ($178) {
          break L58;
         } else {
          $$0$i$i2$i$i56 = $176;
         }
        } else {
         $179 = HEAP32[$169>>2]|0;
         $180 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($179)|0);
         $$0$i$i2$i$i56 = $180;
        }
        $181 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
        $182 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i56,$181)|0);
        if ($182) {
         HEAP32[$2>>2] = 0;
         label = 58;
         break;
        } else {
         if ($188) {
          break;
         } else {
          label = 60;
          break;
         }
        }
       }
      } while(0);
      if ((label|0) == 58) {
       if ($188) {
        label = 60;
       }
      }
      if ((label|0) == 60) {
       $183 = HEAP32[$4>>2]|0;
       $184 = $183 | 2;
       HEAP32[$4>>2] = $184;
      }
      $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
      STACKTOP = sp;return ($$sroa$0$0$copyload|0);
     }
    }
   } while(0);
   $94 = ___cxa_find_matching_catch_2()|0;
   $95 = (getTempRet0() | 0);
   $$sink74$index = $94;$$sink74$index3 = $95;
  }
  $$1 = $$sink74$index;$$135 = $$sink74$index3;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
 ___resumeException($$1|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i50 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i56 = 0, $$0$i$i46 = 0, $$032 = 0, $$1 = 0, $$133 = 0, $$135 = 0, $$2 = 0, $$pre = 0, $$sink74$index = 0, $$sink74$index3 = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
 var $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i = 0, $phitmp$i = 0;
 var $phitmp$i41 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(304|0);
 $6 = sp + 300|0;
 $7 = sp + 160|0;
 $8 = sp + 288|0;
 $9 = sp + 276|0;
 $10 = sp + 272|0;
 $11 = sp;
 $12 = sp + 268|0;
 $13 = sp + 264|0;
 $14 = (__ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($3)|0);
 $15 = (__ZNKSt3__29__num_getIwE10__do_widenERNS_8ios_baseEPw($0,$3,$7)|0);
 __ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseERw($8,$3,$6);
 ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $16 = (($9) + ($$0$i$i<<2)|0);
  HEAP32[$16>>2] = 0;
  $17 = (($$0$i$i) + 1)|0;
  $$0$i$i = $17;
 }
 $18 = ((($9)) + 11|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = ($19<<24>>24)<(0);
 if ($20) {
  $21 = ((($9)) + 8|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $22 & 2147483647;
  $phitmp$i = (($23) + -1)|0;
  $24 = $phitmp$i;
 } else {
  $24 = 10;
 }
 __THREW__ = 0;
 invoke_viii(29,($9|0),($24|0),0);
 $25 = __THREW__; __THREW__ = 0;
 $26 = $25&1;
 if ($26) {
  $90 = ___cxa_find_matching_catch_2()|0;
  $91 = (getTempRet0() | 0);
  $$1 = $90;$$135 = $91;
 } else {
  $27 = HEAP8[$18>>0]|0;
  $28 = ($27<<24>>24)<(0);
  $29 = HEAP32[$9>>2]|0;
  $30 = $28 ? $29 : $9;
  HEAP32[$10>>2] = $30;
  HEAP32[$12>>2] = $11;
  HEAP32[$13>>2] = 0;
  $31 = ((($9)) + 4|0);
  $32 = ((($9)) + 8|0);
  $$pre = HEAP32[$1>>2]|0;
  $$032 = $30;$185 = $$pre;$34 = $$pre;
  L11: while(1) {
   $33 = ($34|0)==(0|0);
   if ($33) {
    $156 = 0;$186 = 1;$99 = 0;
   } else {
    $35 = ((($34)) + 12|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ((($34)) + 16|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = ($36|0)==($38|0);
    if ($39) {
     $40 = HEAP32[$34>>2]|0;
     $41 = ((($40)) + 36|0);
     $42 = HEAP32[$41>>2]|0;
     __THREW__ = 0;
     $43 = (invoke_ii($42|0,($34|0))|0);
     $44 = __THREW__; __THREW__ = 0;
     $45 = $44&1;
     if ($45) {
      label = 29;
      break;
     } else {
      $$0$i$i$i$i = $43;
     }
    } else {
     $46 = HEAP32[$36>>2]|0;
     $47 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($46)|0);
     $$0$i$i$i$i = $47;
    }
    $48 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
    $49 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i,$48)|0);
    if ($49) {
     HEAP32[$1>>2] = 0;
     $156 = 0;$186 = 1;$99 = 0;
    } else {
     $156 = $185;$186 = 0;$99 = $34;
    }
   }
   $50 = HEAP32[$2>>2]|0;
   $51 = ($50|0)==(0|0);
   do {
    if ($51) {
     label = 20;
    } else {
     $52 = ((($50)) + 12|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = ((($50)) + 16|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ($53|0)==($55|0);
     if ($56) {
      $57 = HEAP32[$50>>2]|0;
      $58 = ((($57)) + 36|0);
      $59 = HEAP32[$58>>2]|0;
      __THREW__ = 0;
      $60 = (invoke_ii($59|0,($50|0))|0);
      $61 = __THREW__; __THREW__ = 0;
      $62 = $61&1;
      if ($62) {
       label = 29;
       break L11;
      } else {
       $$0$i$i2$i$i = $60;
      }
     } else {
      $63 = HEAP32[$53>>2]|0;
      $64 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($63)|0);
      $$0$i$i2$i$i = $64;
     }
     $65 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
     $66 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i,$65)|0);
     if ($66) {
      HEAP32[$2>>2] = 0;
      label = 20;
      break;
     } else {
      if ($186) {
       $187 = $50;
       break;
      } else {
       $$2 = $$032;$167 = $50;
       label = 41;
       break L11;
      }
     }
    }
   } while(0);
   if ((label|0) == 20) {
    label = 0;
    if ($186) {
     $$2 = $$032;$167 = 0;
     label = 41;
     break;
    } else {
     $187 = 0;
    }
   }
   $67 = HEAP32[$10>>2]|0;
   $68 = HEAP8[$18>>0]|0;
   $69 = ($68<<24>>24)<(0);
   $70 = HEAP32[$31>>2]|0;
   $71 = $68&255;
   $72 = $69 ? $70 : $71;
   $73 = (($$032) + ($72)|0);
   $74 = ($67|0)==($73|0);
   if ($74) {
    $75 = $72 << 1;
    __THREW__ = 0;
    invoke_viii(29,($9|0),($75|0),0);
    $76 = __THREW__; __THREW__ = 0;
    $77 = $76&1;
    if ($77) {
     label = 31;
     break;
    }
    $78 = HEAP8[$18>>0]|0;
    $79 = ($78<<24>>24)<(0);
    if ($79) {
     $80 = HEAP32[$32>>2]|0;
     $81 = $80 & 2147483647;
     $phitmp$i41 = (($81) + -1)|0;
     $82 = $phitmp$i41;
    } else {
     $82 = 10;
    }
    __THREW__ = 0;
    invoke_viii(29,($9|0),($82|0),0);
    $83 = __THREW__; __THREW__ = 0;
    $84 = $83&1;
    if ($84) {
     label = 31;
     break;
    }
    $85 = HEAP8[$18>>0]|0;
    $86 = ($85<<24>>24)<(0);
    $87 = HEAP32[$9>>2]|0;
    $88 = $86 ? $87 : $9;
    $89 = (($88) + ($72)|0);
    HEAP32[$10>>2] = $89;
    $$133 = $88;
   } else {
    $$133 = $$032;
   }
   $98 = ((($99)) + 12|0);
   $100 = HEAP32[$98>>2]|0;
   $101 = ((($99)) + 16|0);
   $102 = HEAP32[$101>>2]|0;
   $103 = ($100|0)==($102|0);
   if ($103) {
    $104 = HEAP32[$99>>2]|0;
    $105 = ((($104)) + 36|0);
    $106 = HEAP32[$105>>2]|0;
    __THREW__ = 0;
    $107 = (invoke_ii($106|0,($99|0))|0);
    $108 = __THREW__; __THREW__ = 0;
    $109 = $108&1;
    if ($109) {
     label = 29;
     break;
    } else {
     $$0$i$i46 = $107;
    }
   } else {
    $110 = HEAP32[$100>>2]|0;
    $111 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($110)|0);
    $$0$i$i46 = $111;
   }
   $112 = HEAP32[$6>>2]|0;
   __THREW__ = 0;
   $113 = (invoke_iiiiiiiiiii(2,($$0$i$i46|0),($14|0),($$133|0),($10|0),($13|0),($112|0),($8|0),($11|0),($12|0),($15|0))|0);
   $114 = __THREW__; __THREW__ = 0;
   $115 = $114&1;
   if ($115) {
    label = 29;
    break;
   }
   $116 = ($113|0)==(0);
   if (!($116)) {
    $$2 = $$133;$167 = $187;
    label = 41;
    break;
   }
   $117 = HEAP32[$98>>2]|0;
   $118 = HEAP32[$101>>2]|0;
   $119 = ($117|0)==($118|0);
   if ($119) {
    $120 = HEAP32[$99>>2]|0;
    $121 = ((($120)) + 40|0);
    $122 = HEAP32[$121>>2]|0;
    __THREW__ = 0;
    (invoke_ii($122|0,($99|0))|0);
    $123 = __THREW__; __THREW__ = 0;
    $124 = $123&1;
    if ($124) {
     label = 29;
     break;
    }
   } else {
    $125 = ((($117)) + 4|0);
    HEAP32[$98>>2] = $125;
    $126 = HEAP32[$117>>2]|0;
    (__ZNSt3__211char_traitsIwE11to_int_typeEw($126)|0);
   }
   $$032 = $$133;$185 = $156;$34 = $99;
  }
  if ((label|0) == 29) {
   $92 = ___cxa_find_matching_catch_2()|0;
   $93 = (getTempRet0() | 0);
   $$sink74$index = $92;$$sink74$index3 = $93;
  }
  else if ((label|0) == 31) {
   $96 = ___cxa_find_matching_catch_2()|0;
   $97 = (getTempRet0() | 0);
   $$sink74$index = $96;$$sink74$index3 = $97;
  }
  else if ((label|0) == 41) {
   $127 = ((($8)) + 11|0);
   $128 = HEAP8[$127>>0]|0;
   $129 = ($128<<24>>24)<(0);
   $130 = ((($8)) + 4|0);
   $131 = HEAP32[$130>>2]|0;
   $132 = $128&255;
   $133 = $129 ? $131 : $132;
   $134 = ($133|0)==(0);
   if (!($134)) {
    $135 = HEAP32[$12>>2]|0;
    $136 = $135;
    $137 = $11;
    $138 = (($136) - ($137))|0;
    $139 = ($138|0)<(160);
    if ($139) {
     $140 = HEAP32[$13>>2]|0;
     $141 = ((($135)) + 4|0);
     HEAP32[$12>>2] = $141;
     HEAP32[$135>>2] = $140;
    }
   }
   $142 = HEAP32[$10>>2]|0;
   __THREW__ = 0;
   $143 = (invoke_iiiii(15,($$2|0),($142|0),($4|0),($14|0))|0);
   $144 = __THREW__; __THREW__ = 0;
   $145 = $144&1;
   L58: do {
    if (!($145)) {
     HEAP16[$5>>1] = $143;
     $146 = HEAP32[$12>>2]|0;
     __THREW__ = 0;
     invoke_viiii(30,($8|0),($11|0),($146|0),($4|0));
     $147 = __THREW__; __THREW__ = 0;
     $148 = $147&1;
     if (!($148)) {
      $149 = ($99|0)==(0|0);
      if ($149) {
       $188 = 1;
      } else {
       $150 = ((($99)) + 12|0);
       $151 = HEAP32[$150>>2]|0;
       $152 = ((($99)) + 16|0);
       $153 = HEAP32[$152>>2]|0;
       $154 = ($151|0)==($153|0);
       if ($154) {
        $155 = HEAP32[$156>>2]|0;
        $157 = ((($155)) + 36|0);
        $158 = HEAP32[$157>>2]|0;
        __THREW__ = 0;
        $159 = (invoke_ii($158|0,($99|0))|0);
        $160 = __THREW__; __THREW__ = 0;
        $161 = $160&1;
        if ($161) {
         break;
        } else {
         $$0$i$i$i$i50 = $159;
        }
       } else {
        $162 = HEAP32[$151>>2]|0;
        $163 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($162)|0);
        $$0$i$i$i$i50 = $163;
       }
       $164 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
       $165 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i50,$164)|0);
       if ($165) {
        HEAP32[$1>>2] = 0;
        $188 = 1;
       } else {
        $188 = 0;
       }
      }
      $166 = ($167|0)==(0|0);
      do {
       if ($166) {
        label = 58;
       } else {
        $168 = ((($167)) + 12|0);
        $169 = HEAP32[$168>>2]|0;
        $170 = ((($167)) + 16|0);
        $171 = HEAP32[$170>>2]|0;
        $172 = ($169|0)==($171|0);
        if ($172) {
         $173 = HEAP32[$167>>2]|0;
         $174 = ((($173)) + 36|0);
         $175 = HEAP32[$174>>2]|0;
         __THREW__ = 0;
         $176 = (invoke_ii($175|0,($167|0))|0);
         $177 = __THREW__; __THREW__ = 0;
         $178 = $177&1;
         if ($178) {
          break L58;
         } else {
          $$0$i$i2$i$i56 = $176;
         }
        } else {
         $179 = HEAP32[$169>>2]|0;
         $180 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($179)|0);
         $$0$i$i2$i$i56 = $180;
        }
        $181 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
        $182 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i56,$181)|0);
        if ($182) {
         HEAP32[$2>>2] = 0;
         label = 58;
         break;
        } else {
         if ($188) {
          break;
         } else {
          label = 60;
          break;
         }
        }
       }
      } while(0);
      if ((label|0) == 58) {
       if ($188) {
        label = 60;
       }
      }
      if ((label|0) == 60) {
       $183 = HEAP32[$4>>2]|0;
       $184 = $183 | 2;
       HEAP32[$4>>2] = $184;
      }
      $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
      STACKTOP = sp;return ($$sroa$0$0$copyload|0);
     }
    }
   } while(0);
   $94 = ___cxa_find_matching_catch_2()|0;
   $95 = (getTempRet0() | 0);
   $$sink74$index = $94;$$sink74$index3 = $95;
  }
  $$1 = $$sink74$index;$$135 = $$sink74$index3;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
 ___resumeException($$1|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i50 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i56 = 0, $$0$i$i46 = 0, $$032 = 0, $$1 = 0, $$133 = 0, $$135 = 0, $$2 = 0, $$pre = 0, $$sink74$index = 0, $$sink74$index3 = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
 var $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i = 0, $phitmp$i = 0, $phitmp$i41 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(304|0);
 $6 = sp + 300|0;
 $7 = sp + 160|0;
 $8 = sp + 288|0;
 $9 = sp + 276|0;
 $10 = sp + 272|0;
 $11 = sp;
 $12 = sp + 268|0;
 $13 = sp + 264|0;
 $14 = (__ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($3)|0);
 $15 = (__ZNKSt3__29__num_getIwE10__do_widenERNS_8ios_baseEPw($0,$3,$7)|0);
 __ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseERw($8,$3,$6);
 ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $16 = (($9) + ($$0$i$i<<2)|0);
  HEAP32[$16>>2] = 0;
  $17 = (($$0$i$i) + 1)|0;
  $$0$i$i = $17;
 }
 $18 = ((($9)) + 11|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = ($19<<24>>24)<(0);
 if ($20) {
  $21 = ((($9)) + 8|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $22 & 2147483647;
  $phitmp$i = (($23) + -1)|0;
  $24 = $phitmp$i;
 } else {
  $24 = 10;
 }
 __THREW__ = 0;
 invoke_viii(29,($9|0),($24|0),0);
 $25 = __THREW__; __THREW__ = 0;
 $26 = $25&1;
 if ($26) {
  $90 = ___cxa_find_matching_catch_2()|0;
  $91 = (getTempRet0() | 0);
  $$1 = $90;$$135 = $91;
 } else {
  $27 = HEAP8[$18>>0]|0;
  $28 = ($27<<24>>24)<(0);
  $29 = HEAP32[$9>>2]|0;
  $30 = $28 ? $29 : $9;
  HEAP32[$10>>2] = $30;
  HEAP32[$12>>2] = $11;
  HEAP32[$13>>2] = 0;
  $31 = ((($9)) + 4|0);
  $32 = ((($9)) + 8|0);
  $$pre = HEAP32[$1>>2]|0;
  $$032 = $30;$190 = $$pre;$34 = $$pre;
  L11: while(1) {
   $33 = ($34|0)==(0|0);
   if ($33) {
    $161 = 0;$191 = 1;$99 = 0;
   } else {
    $35 = ((($34)) + 12|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ((($34)) + 16|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = ($36|0)==($38|0);
    if ($39) {
     $40 = HEAP32[$34>>2]|0;
     $41 = ((($40)) + 36|0);
     $42 = HEAP32[$41>>2]|0;
     __THREW__ = 0;
     $43 = (invoke_ii($42|0,($34|0))|0);
     $44 = __THREW__; __THREW__ = 0;
     $45 = $44&1;
     if ($45) {
      label = 29;
      break;
     } else {
      $$0$i$i$i$i = $43;
     }
    } else {
     $46 = HEAP32[$36>>2]|0;
     $47 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($46)|0);
     $$0$i$i$i$i = $47;
    }
    $48 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
    $49 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i,$48)|0);
    if ($49) {
     HEAP32[$1>>2] = 0;
     $161 = 0;$191 = 1;$99 = 0;
    } else {
     $161 = $190;$191 = 0;$99 = $34;
    }
   }
   $50 = HEAP32[$2>>2]|0;
   $51 = ($50|0)==(0|0);
   do {
    if ($51) {
     label = 20;
    } else {
     $52 = ((($50)) + 12|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = ((($50)) + 16|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ($53|0)==($55|0);
     if ($56) {
      $57 = HEAP32[$50>>2]|0;
      $58 = ((($57)) + 36|0);
      $59 = HEAP32[$58>>2]|0;
      __THREW__ = 0;
      $60 = (invoke_ii($59|0,($50|0))|0);
      $61 = __THREW__; __THREW__ = 0;
      $62 = $61&1;
      if ($62) {
       label = 29;
       break L11;
      } else {
       $$0$i$i2$i$i = $60;
      }
     } else {
      $63 = HEAP32[$53>>2]|0;
      $64 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($63)|0);
      $$0$i$i2$i$i = $64;
     }
     $65 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
     $66 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i,$65)|0);
     if ($66) {
      HEAP32[$2>>2] = 0;
      label = 20;
      break;
     } else {
      if ($191) {
       $192 = $50;
       break;
      } else {
       $$2 = $$032;$172 = $50;
       label = 41;
       break L11;
      }
     }
    }
   } while(0);
   if ((label|0) == 20) {
    label = 0;
    if ($191) {
     $$2 = $$032;$172 = 0;
     label = 41;
     break;
    } else {
     $192 = 0;
    }
   }
   $67 = HEAP32[$10>>2]|0;
   $68 = HEAP8[$18>>0]|0;
   $69 = ($68<<24>>24)<(0);
   $70 = HEAP32[$31>>2]|0;
   $71 = $68&255;
   $72 = $69 ? $70 : $71;
   $73 = (($$032) + ($72)|0);
   $74 = ($67|0)==($73|0);
   if ($74) {
    $75 = $72 << 1;
    __THREW__ = 0;
    invoke_viii(29,($9|0),($75|0),0);
    $76 = __THREW__; __THREW__ = 0;
    $77 = $76&1;
    if ($77) {
     label = 31;
     break;
    }
    $78 = HEAP8[$18>>0]|0;
    $79 = ($78<<24>>24)<(0);
    if ($79) {
     $80 = HEAP32[$32>>2]|0;
     $81 = $80 & 2147483647;
     $phitmp$i41 = (($81) + -1)|0;
     $82 = $phitmp$i41;
    } else {
     $82 = 10;
    }
    __THREW__ = 0;
    invoke_viii(29,($9|0),($82|0),0);
    $83 = __THREW__; __THREW__ = 0;
    $84 = $83&1;
    if ($84) {
     label = 31;
     break;
    }
    $85 = HEAP8[$18>>0]|0;
    $86 = ($85<<24>>24)<(0);
    $87 = HEAP32[$9>>2]|0;
    $88 = $86 ? $87 : $9;
    $89 = (($88) + ($72)|0);
    HEAP32[$10>>2] = $89;
    $$133 = $88;
   } else {
    $$133 = $$032;
   }
   $98 = ((($99)) + 12|0);
   $100 = HEAP32[$98>>2]|0;
   $101 = ((($99)) + 16|0);
   $102 = HEAP32[$101>>2]|0;
   $103 = ($100|0)==($102|0);
   if ($103) {
    $104 = HEAP32[$99>>2]|0;
    $105 = ((($104)) + 36|0);
    $106 = HEAP32[$105>>2]|0;
    __THREW__ = 0;
    $107 = (invoke_ii($106|0,($99|0))|0);
    $108 = __THREW__; __THREW__ = 0;
    $109 = $108&1;
    if ($109) {
     label = 29;
     break;
    } else {
     $$0$i$i46 = $107;
    }
   } else {
    $110 = HEAP32[$100>>2]|0;
    $111 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($110)|0);
    $$0$i$i46 = $111;
   }
   $112 = HEAP32[$6>>2]|0;
   __THREW__ = 0;
   $113 = (invoke_iiiiiiiiiii(2,($$0$i$i46|0),($14|0),($$133|0),($10|0),($13|0),($112|0),($8|0),($11|0),($12|0),($15|0))|0);
   $114 = __THREW__; __THREW__ = 0;
   $115 = $114&1;
   if ($115) {
    label = 29;
    break;
   }
   $116 = ($113|0)==(0);
   if (!($116)) {
    $$2 = $$133;$172 = $192;
    label = 41;
    break;
   }
   $117 = HEAP32[$98>>2]|0;
   $118 = HEAP32[$101>>2]|0;
   $119 = ($117|0)==($118|0);
   if ($119) {
    $120 = HEAP32[$99>>2]|0;
    $121 = ((($120)) + 40|0);
    $122 = HEAP32[$121>>2]|0;
    __THREW__ = 0;
    (invoke_ii($122|0,($99|0))|0);
    $123 = __THREW__; __THREW__ = 0;
    $124 = $123&1;
    if ($124) {
     label = 29;
     break;
    }
   } else {
    $125 = ((($117)) + 4|0);
    HEAP32[$98>>2] = $125;
    $126 = HEAP32[$117>>2]|0;
    (__ZNSt3__211char_traitsIwE11to_int_typeEw($126)|0);
   }
   $$032 = $$133;$190 = $161;$34 = $99;
  }
  if ((label|0) == 29) {
   $92 = ___cxa_find_matching_catch_2()|0;
   $93 = (getTempRet0() | 0);
   $$sink74$index = $92;$$sink74$index3 = $93;
  }
  else if ((label|0) == 31) {
   $96 = ___cxa_find_matching_catch_2()|0;
   $97 = (getTempRet0() | 0);
   $$sink74$index = $96;$$sink74$index3 = $97;
  }
  else if ((label|0) == 41) {
   $127 = ((($8)) + 11|0);
   $128 = HEAP8[$127>>0]|0;
   $129 = ($128<<24>>24)<(0);
   $130 = ((($8)) + 4|0);
   $131 = HEAP32[$130>>2]|0;
   $132 = $128&255;
   $133 = $129 ? $131 : $132;
   $134 = ($133|0)==(0);
   if (!($134)) {
    $135 = HEAP32[$12>>2]|0;
    $136 = $135;
    $137 = $11;
    $138 = (($136) - ($137))|0;
    $139 = ($138|0)<(160);
    if ($139) {
     $140 = HEAP32[$13>>2]|0;
     $141 = ((($135)) + 4|0);
     HEAP32[$12>>2] = $141;
     HEAP32[$135>>2] = $140;
    }
   }
   $142 = HEAP32[$10>>2]|0;
   __THREW__ = 0;
   $143 = (invoke_iiiii(16,($$2|0),($142|0),($4|0),($14|0))|0);
   $144 = (getTempRet0() | 0);
   $145 = __THREW__; __THREW__ = 0;
   $146 = $145&1;
   L58: do {
    if (!($146)) {
     $147 = $5;
     $148 = $147;
     HEAP32[$148>>2] = $143;
     $149 = (($147) + 4)|0;
     $150 = $149;
     HEAP32[$150>>2] = $144;
     $151 = HEAP32[$12>>2]|0;
     __THREW__ = 0;
     invoke_viiii(30,($8|0),($11|0),($151|0),($4|0));
     $152 = __THREW__; __THREW__ = 0;
     $153 = $152&1;
     if (!($153)) {
      $154 = ($99|0)==(0|0);
      if ($154) {
       $193 = 1;
      } else {
       $155 = ((($99)) + 12|0);
       $156 = HEAP32[$155>>2]|0;
       $157 = ((($99)) + 16|0);
       $158 = HEAP32[$157>>2]|0;
       $159 = ($156|0)==($158|0);
       if ($159) {
        $160 = HEAP32[$161>>2]|0;
        $162 = ((($160)) + 36|0);
        $163 = HEAP32[$162>>2]|0;
        __THREW__ = 0;
        $164 = (invoke_ii($163|0,($99|0))|0);
        $165 = __THREW__; __THREW__ = 0;
        $166 = $165&1;
        if ($166) {
         break;
        } else {
         $$0$i$i$i$i50 = $164;
        }
       } else {
        $167 = HEAP32[$156>>2]|0;
        $168 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($167)|0);
        $$0$i$i$i$i50 = $168;
       }
       $169 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
       $170 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i50,$169)|0);
       if ($170) {
        HEAP32[$1>>2] = 0;
        $193 = 1;
       } else {
        $193 = 0;
       }
      }
      $171 = ($172|0)==(0|0);
      do {
       if ($171) {
        label = 58;
       } else {
        $173 = ((($172)) + 12|0);
        $174 = HEAP32[$173>>2]|0;
        $175 = ((($172)) + 16|0);
        $176 = HEAP32[$175>>2]|0;
        $177 = ($174|0)==($176|0);
        if ($177) {
         $178 = HEAP32[$172>>2]|0;
         $179 = ((($178)) + 36|0);
         $180 = HEAP32[$179>>2]|0;
         __THREW__ = 0;
         $181 = (invoke_ii($180|0,($172|0))|0);
         $182 = __THREW__; __THREW__ = 0;
         $183 = $182&1;
         if ($183) {
          break L58;
         } else {
          $$0$i$i2$i$i56 = $181;
         }
        } else {
         $184 = HEAP32[$174>>2]|0;
         $185 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($184)|0);
         $$0$i$i2$i$i56 = $185;
        }
        $186 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
        $187 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i56,$186)|0);
        if ($187) {
         HEAP32[$2>>2] = 0;
         label = 58;
         break;
        } else {
         if ($193) {
          break;
         } else {
          label = 60;
          break;
         }
        }
       }
      } while(0);
      if ((label|0) == 58) {
       if ($193) {
        label = 60;
       }
      }
      if ((label|0) == 60) {
       $188 = HEAP32[$4>>2]|0;
       $189 = $188 | 2;
       HEAP32[$4>>2] = $189;
      }
      $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
      STACKTOP = sp;return ($$sroa$0$0$copyload|0);
     }
    }
   } while(0);
   $94 = ___cxa_find_matching_catch_2()|0;
   $95 = (getTempRet0() | 0);
   $$sink74$index = $94;$$sink74$index3 = $95;
  }
  $$1 = $$sink74$index;$$135 = $$sink74$index3;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
 ___resumeException($$1|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i50 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i56 = 0, $$0$i$i46 = 0, $$032 = 0, $$1 = 0, $$133 = 0, $$135 = 0, $$2 = 0, $$pre = 0, $$sink74$index = 0, $$sink74$index3 = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
 var $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i = 0, $phitmp$i = 0;
 var $phitmp$i41 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(304|0);
 $6 = sp + 300|0;
 $7 = sp + 160|0;
 $8 = sp + 288|0;
 $9 = sp + 276|0;
 $10 = sp + 272|0;
 $11 = sp;
 $12 = sp + 268|0;
 $13 = sp + 264|0;
 $14 = (__ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($3)|0);
 $15 = (__ZNKSt3__29__num_getIwE10__do_widenERNS_8ios_baseEPw($0,$3,$7)|0);
 __ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseERw($8,$3,$6);
 ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $16 = (($9) + ($$0$i$i<<2)|0);
  HEAP32[$16>>2] = 0;
  $17 = (($$0$i$i) + 1)|0;
  $$0$i$i = $17;
 }
 $18 = ((($9)) + 11|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = ($19<<24>>24)<(0);
 if ($20) {
  $21 = ((($9)) + 8|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $22 & 2147483647;
  $phitmp$i = (($23) + -1)|0;
  $24 = $phitmp$i;
 } else {
  $24 = 10;
 }
 __THREW__ = 0;
 invoke_viii(29,($9|0),($24|0),0);
 $25 = __THREW__; __THREW__ = 0;
 $26 = $25&1;
 if ($26) {
  $90 = ___cxa_find_matching_catch_2()|0;
  $91 = (getTempRet0() | 0);
  $$1 = $90;$$135 = $91;
 } else {
  $27 = HEAP8[$18>>0]|0;
  $28 = ($27<<24>>24)<(0);
  $29 = HEAP32[$9>>2]|0;
  $30 = $28 ? $29 : $9;
  HEAP32[$10>>2] = $30;
  HEAP32[$12>>2] = $11;
  HEAP32[$13>>2] = 0;
  $31 = ((($9)) + 4|0);
  $32 = ((($9)) + 8|0);
  $$pre = HEAP32[$1>>2]|0;
  $$032 = $30;$185 = $$pre;$34 = $$pre;
  L11: while(1) {
   $33 = ($34|0)==(0|0);
   if ($33) {
    $156 = 0;$186 = 1;$99 = 0;
   } else {
    $35 = ((($34)) + 12|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ((($34)) + 16|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = ($36|0)==($38|0);
    if ($39) {
     $40 = HEAP32[$34>>2]|0;
     $41 = ((($40)) + 36|0);
     $42 = HEAP32[$41>>2]|0;
     __THREW__ = 0;
     $43 = (invoke_ii($42|0,($34|0))|0);
     $44 = __THREW__; __THREW__ = 0;
     $45 = $44&1;
     if ($45) {
      label = 29;
      break;
     } else {
      $$0$i$i$i$i = $43;
     }
    } else {
     $46 = HEAP32[$36>>2]|0;
     $47 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($46)|0);
     $$0$i$i$i$i = $47;
    }
    $48 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
    $49 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i,$48)|0);
    if ($49) {
     HEAP32[$1>>2] = 0;
     $156 = 0;$186 = 1;$99 = 0;
    } else {
     $156 = $185;$186 = 0;$99 = $34;
    }
   }
   $50 = HEAP32[$2>>2]|0;
   $51 = ($50|0)==(0|0);
   do {
    if ($51) {
     label = 20;
    } else {
     $52 = ((($50)) + 12|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = ((($50)) + 16|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ($53|0)==($55|0);
     if ($56) {
      $57 = HEAP32[$50>>2]|0;
      $58 = ((($57)) + 36|0);
      $59 = HEAP32[$58>>2]|0;
      __THREW__ = 0;
      $60 = (invoke_ii($59|0,($50|0))|0);
      $61 = __THREW__; __THREW__ = 0;
      $62 = $61&1;
      if ($62) {
       label = 29;
       break L11;
      } else {
       $$0$i$i2$i$i = $60;
      }
     } else {
      $63 = HEAP32[$53>>2]|0;
      $64 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($63)|0);
      $$0$i$i2$i$i = $64;
     }
     $65 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
     $66 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i,$65)|0);
     if ($66) {
      HEAP32[$2>>2] = 0;
      label = 20;
      break;
     } else {
      if ($186) {
       $187 = $50;
       break;
      } else {
       $$2 = $$032;$167 = $50;
       label = 41;
       break L11;
      }
     }
    }
   } while(0);
   if ((label|0) == 20) {
    label = 0;
    if ($186) {
     $$2 = $$032;$167 = 0;
     label = 41;
     break;
    } else {
     $187 = 0;
    }
   }
   $67 = HEAP32[$10>>2]|0;
   $68 = HEAP8[$18>>0]|0;
   $69 = ($68<<24>>24)<(0);
   $70 = HEAP32[$31>>2]|0;
   $71 = $68&255;
   $72 = $69 ? $70 : $71;
   $73 = (($$032) + ($72)|0);
   $74 = ($67|0)==($73|0);
   if ($74) {
    $75 = $72 << 1;
    __THREW__ = 0;
    invoke_viii(29,($9|0),($75|0),0);
    $76 = __THREW__; __THREW__ = 0;
    $77 = $76&1;
    if ($77) {
     label = 31;
     break;
    }
    $78 = HEAP8[$18>>0]|0;
    $79 = ($78<<24>>24)<(0);
    if ($79) {
     $80 = HEAP32[$32>>2]|0;
     $81 = $80 & 2147483647;
     $phitmp$i41 = (($81) + -1)|0;
     $82 = $phitmp$i41;
    } else {
     $82 = 10;
    }
    __THREW__ = 0;
    invoke_viii(29,($9|0),($82|0),0);
    $83 = __THREW__; __THREW__ = 0;
    $84 = $83&1;
    if ($84) {
     label = 31;
     break;
    }
    $85 = HEAP8[$18>>0]|0;
    $86 = ($85<<24>>24)<(0);
    $87 = HEAP32[$9>>2]|0;
    $88 = $86 ? $87 : $9;
    $89 = (($88) + ($72)|0);
    HEAP32[$10>>2] = $89;
    $$133 = $88;
   } else {
    $$133 = $$032;
   }
   $98 = ((($99)) + 12|0);
   $100 = HEAP32[$98>>2]|0;
   $101 = ((($99)) + 16|0);
   $102 = HEAP32[$101>>2]|0;
   $103 = ($100|0)==($102|0);
   if ($103) {
    $104 = HEAP32[$99>>2]|0;
    $105 = ((($104)) + 36|0);
    $106 = HEAP32[$105>>2]|0;
    __THREW__ = 0;
    $107 = (invoke_ii($106|0,($99|0))|0);
    $108 = __THREW__; __THREW__ = 0;
    $109 = $108&1;
    if ($109) {
     label = 29;
     break;
    } else {
     $$0$i$i46 = $107;
    }
   } else {
    $110 = HEAP32[$100>>2]|0;
    $111 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($110)|0);
    $$0$i$i46 = $111;
   }
   $112 = HEAP32[$6>>2]|0;
   __THREW__ = 0;
   $113 = (invoke_iiiiiiiiiii(2,($$0$i$i46|0),($14|0),($$133|0),($10|0),($13|0),($112|0),($8|0),($11|0),($12|0),($15|0))|0);
   $114 = __THREW__; __THREW__ = 0;
   $115 = $114&1;
   if ($115) {
    label = 29;
    break;
   }
   $116 = ($113|0)==(0);
   if (!($116)) {
    $$2 = $$133;$167 = $187;
    label = 41;
    break;
   }
   $117 = HEAP32[$98>>2]|0;
   $118 = HEAP32[$101>>2]|0;
   $119 = ($117|0)==($118|0);
   if ($119) {
    $120 = HEAP32[$99>>2]|0;
    $121 = ((($120)) + 40|0);
    $122 = HEAP32[$121>>2]|0;
    __THREW__ = 0;
    (invoke_ii($122|0,($99|0))|0);
    $123 = __THREW__; __THREW__ = 0;
    $124 = $123&1;
    if ($124) {
     label = 29;
     break;
    }
   } else {
    $125 = ((($117)) + 4|0);
    HEAP32[$98>>2] = $125;
    $126 = HEAP32[$117>>2]|0;
    (__ZNSt3__211char_traitsIwE11to_int_typeEw($126)|0);
   }
   $$032 = $$133;$185 = $156;$34 = $99;
  }
  if ((label|0) == 29) {
   $92 = ___cxa_find_matching_catch_2()|0;
   $93 = (getTempRet0() | 0);
   $$sink74$index = $92;$$sink74$index3 = $93;
  }
  else if ((label|0) == 31) {
   $96 = ___cxa_find_matching_catch_2()|0;
   $97 = (getTempRet0() | 0);
   $$sink74$index = $96;$$sink74$index3 = $97;
  }
  else if ((label|0) == 41) {
   $127 = ((($8)) + 11|0);
   $128 = HEAP8[$127>>0]|0;
   $129 = ($128<<24>>24)<(0);
   $130 = ((($8)) + 4|0);
   $131 = HEAP32[$130>>2]|0;
   $132 = $128&255;
   $133 = $129 ? $131 : $132;
   $134 = ($133|0)==(0);
   if (!($134)) {
    $135 = HEAP32[$12>>2]|0;
    $136 = $135;
    $137 = $11;
    $138 = (($136) - ($137))|0;
    $139 = ($138|0)<(160);
    if ($139) {
     $140 = HEAP32[$13>>2]|0;
     $141 = ((($135)) + 4|0);
     HEAP32[$12>>2] = $141;
     HEAP32[$135>>2] = $140;
    }
   }
   $142 = HEAP32[$10>>2]|0;
   __THREW__ = 0;
   $143 = (invoke_iiiii(17,($$2|0),($142|0),($4|0),($14|0))|0);
   $144 = __THREW__; __THREW__ = 0;
   $145 = $144&1;
   L58: do {
    if (!($145)) {
     HEAP32[$5>>2] = $143;
     $146 = HEAP32[$12>>2]|0;
     __THREW__ = 0;
     invoke_viiii(30,($8|0),($11|0),($146|0),($4|0));
     $147 = __THREW__; __THREW__ = 0;
     $148 = $147&1;
     if (!($148)) {
      $149 = ($99|0)==(0|0);
      if ($149) {
       $188 = 1;
      } else {
       $150 = ((($99)) + 12|0);
       $151 = HEAP32[$150>>2]|0;
       $152 = ((($99)) + 16|0);
       $153 = HEAP32[$152>>2]|0;
       $154 = ($151|0)==($153|0);
       if ($154) {
        $155 = HEAP32[$156>>2]|0;
        $157 = ((($155)) + 36|0);
        $158 = HEAP32[$157>>2]|0;
        __THREW__ = 0;
        $159 = (invoke_ii($158|0,($99|0))|0);
        $160 = __THREW__; __THREW__ = 0;
        $161 = $160&1;
        if ($161) {
         break;
        } else {
         $$0$i$i$i$i50 = $159;
        }
       } else {
        $162 = HEAP32[$151>>2]|0;
        $163 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($162)|0);
        $$0$i$i$i$i50 = $163;
       }
       $164 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
       $165 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i50,$164)|0);
       if ($165) {
        HEAP32[$1>>2] = 0;
        $188 = 1;
       } else {
        $188 = 0;
       }
      }
      $166 = ($167|0)==(0|0);
      do {
       if ($166) {
        label = 58;
       } else {
        $168 = ((($167)) + 12|0);
        $169 = HEAP32[$168>>2]|0;
        $170 = ((($167)) + 16|0);
        $171 = HEAP32[$170>>2]|0;
        $172 = ($169|0)==($171|0);
        if ($172) {
         $173 = HEAP32[$167>>2]|0;
         $174 = ((($173)) + 36|0);
         $175 = HEAP32[$174>>2]|0;
         __THREW__ = 0;
         $176 = (invoke_ii($175|0,($167|0))|0);
         $177 = __THREW__; __THREW__ = 0;
         $178 = $177&1;
         if ($178) {
          break L58;
         } else {
          $$0$i$i2$i$i56 = $176;
         }
        } else {
         $179 = HEAP32[$169>>2]|0;
         $180 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($179)|0);
         $$0$i$i2$i$i56 = $180;
        }
        $181 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
        $182 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i56,$181)|0);
        if ($182) {
         HEAP32[$2>>2] = 0;
         label = 58;
         break;
        } else {
         if ($188) {
          break;
         } else {
          label = 60;
          break;
         }
        }
       }
      } while(0);
      if ((label|0) == 58) {
       if ($188) {
        label = 60;
       }
      }
      if ((label|0) == 60) {
       $183 = HEAP32[$4>>2]|0;
       $184 = $183 | 2;
       HEAP32[$4>>2] = $184;
      }
      $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
      STACKTOP = sp;return ($$sroa$0$0$copyload|0);
     }
    }
   } while(0);
   $94 = ___cxa_find_matching_catch_2()|0;
   $95 = (getTempRet0() | 0);
   $$sink74$index = $94;$$sink74$index3 = $95;
  }
  $$1 = $$sink74$index;$$135 = $$sink74$index3;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
 ___resumeException($$1|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i138 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i144 = 0, $$0103 = 0, $$0104 = 0, $$0105$off0 = 0, $$0106 = 0, $$0107 = 0, $$0108 = 0, $$0109 = 0, $$0112 = 0, $$0116 = 0, $$0132 = 0, $$0133 = 0, $$0133188 = 0, $$1110 = 0, $$1113 = 0;
 var $$1117 = 0, $$2$off0 = 0, $$2111 = 0, $$2114 = 0, $$2114$be = 0, $$2118 = 0, $$3 = 0, $$3115 = 0, $$3119 = 0, $$4126196 = 0, $$4131195 = 0, $$5 = 0, $$5121 = 0, $$6 = 0, $$7 = 0, $$pre$i$i$i = 0, $$pre$i$i$i140 = 0, $$sink253$index = 0, $$sink253$index5 = 0, $$sroa$0159$0 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i141 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $7 = sp;
 $8 = $3;
 $9 = $2;
 $10 = (($8) - ($9))|0;
 $11 = (($10|0) / 12)&-1;
 $12 = ($11>>>0)>(100);
 do {
  if ($12) {
   $13 = (_malloc($11)|0);
   $14 = ($13|0)==(0|0);
   if ($14) {
    __THREW__ = 0;
    invoke_v(4);
    $15 = __THREW__; __THREW__ = 0;
    $16 = ___cxa_find_matching_catch_2()|0;
    $17 = (getTempRet0() | 0);
    $$4126196 = $17;$$4131195 = $16;
    break;
   } else {
    $18 = $13;
    $$0132 = $13;$$sroa$0159$0 = $18;
    label = 5;
    break;
   }
  } else {
   $$0132 = $7;$$sroa$0159$0 = 0;
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  $$0108 = $2;$$0109 = $$0132;$$0112 = 0;$$0116 = $11;
  while(1) {
   $19 = ($$0108|0)==($3|0);
   if ($19) {
    break;
   }
   $20 = ((($$0108)) + 8|0);
   $21 = ((($20)) + 3|0);
   $22 = HEAP8[$21>>0]|0;
   $23 = ($22<<24>>24)<(0);
   if ($23) {
    $24 = ((($$0108)) + 4|0);
    $25 = HEAP32[$24>>2]|0;
    $28 = $25;
   } else {
    $26 = $22&255;
    $28 = $26;
   }
   $27 = ($28|0)==(0);
   if ($27) {
    HEAP8[$$0109>>0] = 2;
    $29 = (($$0116) + -1)|0;
    $30 = (($$0112) + 1)|0;
    $$1113 = $30;$$1117 = $29;
   } else {
    HEAP8[$$0109>>0] = 1;
    $$1113 = $$0112;$$1117 = $$0116;
   }
   $31 = ((($$0108)) + 12|0);
   $32 = ((($$0109)) + 1|0);
   $$0108 = $31;$$0109 = $32;$$0112 = $$1113;$$0116 = $$1117;
  }
  $$0107 = 0;$$2114 = $$0112;$$2118 = $$0116;
  L20: while(1) {
   $33 = HEAP32[$0>>2]|0;
   $34 = ($33|0)==(0|0);
   do {
    if ($34) {
     $68 = 1;
    } else {
     $35 = ((($33)) + 12|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = ((($33)) + 16|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = ($36|0)==($38|0);
     if ($39) {
      $40 = HEAP32[$33>>2]|0;
      $41 = ((($40)) + 36|0);
      $42 = HEAP32[$41>>2]|0;
      __THREW__ = 0;
      $43 = (invoke_ii($42|0,($33|0))|0);
      $44 = __THREW__; __THREW__ = 0;
      $45 = $44&1;
      if ($45) {
       label = 42;
       break L20;
      } else {
       $$0$i$i$i$i = $43;
      }
     } else {
      $46 = HEAP32[$36>>2]|0;
      $47 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($46)|0);
      $$0$i$i$i$i = $47;
     }
     $48 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
     $49 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i,$48)|0);
     if ($49) {
      HEAP32[$0>>2] = 0;
      $68 = 1;
      break;
     } else {
      $$pre$i$i$i = HEAP32[$0>>2]|0;
      $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
      $68 = $phitmp$i$i$i;
      break;
     }
    }
   } while(0);
   $50 = HEAP32[$1>>2]|0;
   $51 = ($50|0)==(0|0);
   if ($51) {
    $69 = 1;$90 = 0;
   } else {
    $52 = ((($50)) + 12|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = ((($50)) + 16|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = ($53|0)==($55|0);
    if ($56) {
     $57 = HEAP32[$50>>2]|0;
     $58 = ((($57)) + 36|0);
     $59 = HEAP32[$58>>2]|0;
     __THREW__ = 0;
     $60 = (invoke_ii($59|0,($50|0))|0);
     $61 = __THREW__; __THREW__ = 0;
     $62 = $61&1;
     if ($62) {
      label = 42;
      break;
     } else {
      $$0$i$i2$i$i = $60;
     }
    } else {
     $63 = HEAP32[$53>>2]|0;
     $64 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($63)|0);
     $$0$i$i2$i$i = $64;
    }
    $65 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
    $66 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i,$65)|0);
    if ($66) {
     HEAP32[$1>>2] = 0;
     $69 = 1;$90 = 0;
    } else {
     $69 = 0;$90 = $50;
    }
   }
   $67 = $68 ^ $69;
   $70 = ($$2118|0)!=(0);
   $71 = $70 & $67;
   $72 = HEAP32[$0>>2]|0;
   if (!($71)) {
    label = 29;
    break;
   }
   $108 = ((($72)) + 12|0);
   $109 = HEAP32[$108>>2]|0;
   $110 = ((($72)) + 16|0);
   $111 = HEAP32[$110>>2]|0;
   $112 = ($109|0)==($111|0);
   if ($112) {
    $113 = HEAP32[$72>>2]|0;
    $114 = ((($113)) + 36|0);
    $115 = HEAP32[$114>>2]|0;
    __THREW__ = 0;
    $116 = (invoke_ii($115|0,($72|0))|0);
    $117 = __THREW__; __THREW__ = 0;
    $118 = $117&1;
    if ($118) {
     label = 48;
     break;
    } else {
     $$0$i$i = $116;
    }
   } else {
    $119 = HEAP32[$109>>2]|0;
    $120 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($119)|0);
    $$0$i$i = $120;
   }
   if ($6) {
    $$0106 = $$0$i$i;
   } else {
    $121 = HEAP32[$4>>2]|0;
    $122 = ((($121)) + 28|0);
    $123 = HEAP32[$122>>2]|0;
    __THREW__ = 0;
    $124 = (invoke_iii($123|0,($4|0),($$0$i$i|0))|0);
    $125 = __THREW__; __THREW__ = 0;
    $126 = $125&1;
    if ($126) {
     label = 48;
     break;
    } else {
     $$0106 = $124;
    }
   }
   $129 = (($$0107) + 1)|0;
   $$0104 = $2;$$0105$off0 = 0;$$1110 = $$0132;$$3115 = $$2114;$$3119 = $$2118;
   while(1) {
    $130 = ($$0104|0)==($3|0);
    if ($130) {
     break;
    }
    $131 = HEAP8[$$1110>>0]|0;
    $132 = ($131<<24>>24)==(1);
    do {
     if ($132) {
      $133 = ((($$0104)) + 8|0);
      $134 = ((($133)) + 3|0);
      $135 = HEAP8[$134>>0]|0;
      $136 = ($135<<24>>24)<(0);
      if ($136) {
       $137 = HEAP32[$$0104>>2]|0;
       $139 = $137;
      } else {
       $139 = $$0104;
      }
      $138 = (($139) + ($$0107<<2)|0);
      $140 = HEAP32[$138>>2]|0;
      if ($6) {
       $$0103 = $140;
      } else {
       $141 = HEAP32[$4>>2]|0;
       $142 = ((($141)) + 28|0);
       $143 = HEAP32[$142>>2]|0;
       __THREW__ = 0;
       $144 = (invoke_iii($143|0,($4|0),($140|0))|0);
       $145 = __THREW__; __THREW__ = 0;
       $146 = $145&1;
       if ($146) {
        label = 58;
        break L20;
       } else {
        $$0103 = $144;
       }
      }
      $149 = ($$0106|0)==($$0103|0);
      if (!($149)) {
       HEAP8[$$1110>>0] = 0;
       $159 = (($$3119) + -1)|0;
       $$2$off0 = $$0105$off0;$$5 = $$3115;$$5121 = $159;
       break;
      }
      $150 = HEAP8[$134>>0]|0;
      $151 = ($150<<24>>24)<(0);
      if ($151) {
       $152 = ((($$0104)) + 4|0);
       $153 = HEAP32[$152>>2]|0;
       $156 = $153;
      } else {
       $154 = $150&255;
       $156 = $154;
      }
      $155 = ($156|0)==($129|0);
      if ($155) {
       $157 = (($$3119) + -1)|0;
       $158 = (($$3115) + 1)|0;
       HEAP8[$$1110>>0] = 2;
       $$2$off0 = 1;$$5 = $158;$$5121 = $157;
      } else {
       $$2$off0 = 1;$$5 = $$3115;$$5121 = $$3119;
      }
     } else {
      $$2$off0 = $$0105$off0;$$5 = $$3115;$$5121 = $$3119;
     }
    } while(0);
    $160 = ((($$0104)) + 12|0);
    $161 = ((($$1110)) + 1|0);
    $$0104 = $160;$$0105$off0 = $$2$off0;$$1110 = $161;$$3115 = $$5;$$3119 = $$5121;
   }
   L70: do {
    if ($$0105$off0) {
     $162 = HEAP32[$0>>2]|0;
     $163 = ((($162)) + 12|0);
     $164 = HEAP32[$163>>2]|0;
     $165 = ((($162)) + 16|0);
     $166 = HEAP32[$165>>2]|0;
     $167 = ($164|0)==($166|0);
     if ($167) {
      $168 = HEAP32[$162>>2]|0;
      $169 = ((($168)) + 40|0);
      $170 = HEAP32[$169>>2]|0;
      __THREW__ = 0;
      (invoke_ii($170|0,($162|0))|0);
      $171 = __THREW__; __THREW__ = 0;
      $172 = $171&1;
      if ($172) {
       label = 74;
       break L20;
      }
     } else {
      $173 = ((($164)) + 4|0);
      HEAP32[$163>>2] = $173;
      $174 = HEAP32[$164>>2]|0;
      (__ZNSt3__211char_traitsIwE11to_int_typeEw($174)|0);
     }
     $175 = (($$3115) + ($$3119))|0;
     $176 = ($175>>>0)>(1);
     if ($176) {
      $$0 = $2;$$2111 = $$0132;$$6 = $$3115;
      while(1) {
       $177 = ($$0|0)==($3|0);
       if ($177) {
        $$2114$be = $$6;
        break L70;
       }
       $180 = HEAP8[$$2111>>0]|0;
       $181 = ($180<<24>>24)==(2);
       if ($181) {
        $182 = ((($$0)) + 8|0);
        $183 = ((($182)) + 3|0);
        $184 = HEAP8[$183>>0]|0;
        $185 = ($184<<24>>24)<(0);
        if ($185) {
         $186 = ((($$0)) + 4|0);
         $187 = HEAP32[$186>>2]|0;
         $190 = $187;
        } else {
         $188 = $184&255;
         $190 = $188;
        }
        $189 = ($190|0)==($129|0);
        if ($189) {
         $$7 = $$6;
        } else {
         $191 = (($$6) + -1)|0;
         HEAP8[$$2111>>0] = 0;
         $$7 = $191;
        }
       } else {
        $$7 = $$6;
       }
       $192 = ((($$0)) + 12|0);
       $193 = ((($$2111)) + 1|0);
       $$0 = $192;$$2111 = $193;$$6 = $$7;
      }
     } else {
      $$2114$be = $$3115;
     }
    } else {
     $$2114$be = $$3115;
    }
   } while(0);
   $$0107 = $129;$$2114 = $$2114$be;$$2118 = $$3119;
  }
  if ((label|0) == 29) {
   $73 = ($72|0)==(0|0);
   do {
    if ($73) {
     $209 = 1;
     label = 36;
    } else {
     $74 = ((($72)) + 12|0);
     $75 = HEAP32[$74>>2]|0;
     $76 = ((($72)) + 16|0);
     $77 = HEAP32[$76>>2]|0;
     $78 = ($75|0)==($77|0);
     if ($78) {
      $79 = HEAP32[$72>>2]|0;
      $80 = ((($79)) + 36|0);
      $81 = HEAP32[$80>>2]|0;
      __THREW__ = 0;
      $82 = (invoke_ii($81|0,($72|0))|0);
      $83 = __THREW__; __THREW__ = 0;
      $84 = $83&1;
      if ($84) {
       break;
      } else {
       $$0$i$i$i$i138 = $82;
      }
     } else {
      $85 = HEAP32[$75>>2]|0;
      $86 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($85)|0);
      $$0$i$i$i$i138 = $86;
     }
     $87 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
     $88 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i138,$87)|0);
     if ($88) {
      HEAP32[$0>>2] = 0;
      $209 = 1;
      label = 36;
      break;
     } else {
      $$pre$i$i$i140 = HEAP32[$0>>2]|0;
      $phitmp$i$i$i141 = ($$pre$i$i$i140|0)==(0|0);
      $209 = $phitmp$i$i$i141;
      label = 36;
      break;
     }
    }
   } while(0);
   L103: do {
    if ((label|0) == 36) {
     $89 = ($90|0)==(0|0);
     do {
      if ($89) {
       label = 82;
      } else {
       $91 = ((($90)) + 12|0);
       $92 = HEAP32[$91>>2]|0;
       $93 = ((($90)) + 16|0);
       $94 = HEAP32[$93>>2]|0;
       $95 = ($92|0)==($94|0);
       if ($95) {
        $96 = HEAP32[$90>>2]|0;
        $97 = ((($96)) + 36|0);
        $98 = HEAP32[$97>>2]|0;
        __THREW__ = 0;
        $99 = (invoke_ii($98|0,($90|0))|0);
        $100 = __THREW__; __THREW__ = 0;
        $101 = $100&1;
        if ($101) {
         break L103;
        } else {
         $$0$i$i2$i$i144 = $99;
        }
       } else {
        $102 = HEAP32[$92>>2]|0;
        $103 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($102)|0);
        $$0$i$i2$i$i144 = $103;
       }
       $104 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
       $105 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i144,$104)|0);
       if ($105) {
        HEAP32[$1>>2] = 0;
        label = 82;
        break;
       } else {
        if ($209) {
         break;
        } else {
         label = 84;
         break;
        }
       }
      }
     } while(0);
     if ((label|0) == 82) {
      if ($209) {
       label = 84;
      }
     }
     if ((label|0) == 84) {
      $194 = HEAP32[$5>>2]|0;
      $195 = $194 | 2;
      HEAP32[$5>>2] = $195;
     }
     $$0133 = $2;$$3 = $$0132;
     while(1) {
      $198 = ($$0133|0)==($3|0);
      if ($198) {
       label = 90;
       break;
      }
      $199 = HEAP8[$$3>>0]|0;
      $200 = ($199<<24>>24)==(2);
      if ($200) {
       $$0133188 = $$0133;
       break;
      }
      $201 = ((($$0133)) + 12|0);
      $202 = ((($$3)) + 1|0);
      $$0133 = $201;$$3 = $202;
     }
     if ((label|0) == 90) {
      $203 = HEAP32[$5>>2]|0;
      $204 = $203 | 4;
      HEAP32[$5>>2] = $204;
      $$0133188 = $3;
     }
     $205 = ($$sroa$0159$0|0)==(0);
     if (!($205)) {
      $206 = $$sroa$0159$0;
      _free($206);
     }
     STACKTOP = sp;return ($$0133188|0);
    }
   } while(0);
   $196 = ___cxa_find_matching_catch_2()|0;
   $197 = (getTempRet0() | 0);
   $$sink253$index = $196;$$sink253$index5 = $197;
  }
  else if ((label|0) == 42) {
   $106 = ___cxa_find_matching_catch_2()|0;
   $107 = (getTempRet0() | 0);
   $$sink253$index = $106;$$sink253$index5 = $107;
  }
  else if ((label|0) == 48) {
   $127 = ___cxa_find_matching_catch_2()|0;
   $128 = (getTempRet0() | 0);
   $$sink253$index = $127;$$sink253$index5 = $128;
  }
  else if ((label|0) == 58) {
   $147 = ___cxa_find_matching_catch_2()|0;
   $148 = (getTempRet0() | 0);
   $$sink253$index = $147;$$sink253$index5 = $148;
  }
  else if ((label|0) == 74) {
   $178 = ___cxa_find_matching_catch_2()|0;
   $179 = (getTempRet0() | 0);
   $$sink253$index = $178;$$sink253$index5 = $179;
  }
  $207 = ($$sroa$0159$0|0)==(0);
  if ($207) {
   $$4126196 = $$sink253$index5;$$4131195 = $$sink253$index;
  } else {
   $208 = $$sroa$0159$0;
   _free($208);
   $$4126196 = $$sink253$index5;$$4131195 = $$sink253$index;
  }
 }
 ___resumeException($$4131195|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}
function __ZNSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$0$i$i = 0, $$011 = 0, $$byval_copy = 0, $$pre = 0, $$pre18 = 0, $$sroa$0$0 = 0, $$sroa$0$0$copyload = 0, $$sroa$013$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $5 = sp;
 $6 = ((($2)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 & 1;
 $9 = ($8|0)==(0);
 L1: do {
  if ($9) {
   $10 = HEAP32[$0>>2]|0;
   $11 = ((($10)) + 24|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = HEAP32[$1>>2]|0;
   HEAP32[$5>>2] = $13;
   $14 = $4&1;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$5>>2]|0;
   $15 = (FUNCTION_TABLE_iiiiii[$12 & 31]($0,$$byval_copy,$2,$3,$14)|0);
   $$sroa$0$0 = $15;
  } else {
   __ZNKSt3__28ios_base6getlocEv($$byval_copy,$2);
   __THREW__ = 0;
   $16 = (invoke_iii(37,($$byval_copy|0),(50756|0))|0);
   $17 = __THREW__; __THREW__ = 0;
   $18 = $17&1;
   do {
    if ($18) {
     $39 = ___cxa_find_matching_catch_2()|0;
     $40 = (getTempRet0() | 0);
     __ZNSt3__26localeD2Ev($$byval_copy);
     $$0 = $40;$$011 = $39;
    } else {
     __ZNSt3__26localeD2Ev($$byval_copy);
     $19 = HEAP32[$16>>2]|0;
     if ($4) {
      $20 = ((($19)) + 24|0);
      $21 = HEAP32[$20>>2]|0;
      FUNCTION_TABLE_vii[$21 & 255]($$byval_copy,$16);
     } else {
      $22 = ((($19)) + 28|0);
      $23 = HEAP32[$22>>2]|0;
      FUNCTION_TABLE_vii[$23 & 255]($$byval_copy,$16);
     }
     $24 = ((($$byval_copy)) + 11|0);
     $25 = HEAP8[$24>>0]|0;
     $26 = ($25<<24>>24)<(0);
     $27 = HEAP32[$$byval_copy>>2]|0;
     $28 = $26 ? $27 : $$byval_copy;
     $29 = ((($$byval_copy)) + 4|0);
     $$sroa$013$0 = $28;$31 = $25;$35 = $27;
     while(1) {
      $30 = ($31<<24>>24)<(0);
      $32 = HEAP32[$29>>2]|0;
      $33 = $31&255;
      $34 = $30 ? $35 : $$byval_copy;
      $36 = $30 ? $32 : $33;
      $37 = (($34) + ($36)|0);
      $38 = ($$sroa$013$0|0)==($37|0);
      if ($38) {
       label = 9;
       break;
      }
      $41 = HEAP8[$$sroa$013$0>>0]|0;
      $42 = HEAP32[$1>>2]|0;
      $43 = ($42|0)==(0|0);
      if (!($43)) {
       $44 = ((($42)) + 24|0);
       $45 = HEAP32[$44>>2]|0;
       $46 = ((($42)) + 28|0);
       $47 = HEAP32[$46>>2]|0;
       $48 = ($45|0)==($47|0);
       if ($48) {
        $49 = HEAP32[$42>>2]|0;
        $50 = ((($49)) + 52|0);
        $51 = HEAP32[$50>>2]|0;
        $52 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($41)|0);
        __THREW__ = 0;
        $53 = (invoke_iii($51|0,($42|0),($52|0))|0);
        $54 = __THREW__; __THREW__ = 0;
        $55 = $54&1;
        if ($55) {
         label = 18;
         break;
        } else {
         $$0$i$i = $53;
        }
       } else {
        $56 = ((($45)) + 1|0);
        HEAP32[$44>>2] = $56;
        HEAP8[$45>>0] = $41;
        $57 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($41)|0);
        $$0$i$i = $57;
       }
       $58 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
       $59 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i,$58)|0);
       if ($59) {
        HEAP32[$1>>2] = 0;
       }
      }
      $60 = ((($$sroa$013$0)) + 1|0);
      $$pre = HEAP8[$24>>0]|0;
      $$pre18 = HEAP32[$$byval_copy>>2]|0;
      $$sroa$013$0 = $60;$31 = $$pre;$35 = $$pre18;
     }
     if ((label|0) == 9) {
      $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($$byval_copy);
      $$sroa$0$0 = $$sroa$0$0$copyload;
      break L1;
     }
     else if ((label|0) == 18) {
      $61 = ___cxa_find_matching_catch_2()|0;
      $62 = (getTempRet0() | 0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($$byval_copy);
      $$0 = $62;$$011 = $61;
      break;
     }
    }
   } while(0);
   ___resumeException($$011|0);
   // unreachable;
  }
 } while(0);
 STACKTOP = sp;return ($$sroa$0$0|0);
}
function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$alloca_mul = 0, $$alloca_mul6 = 0, $$byval_copy = 0, $$lobit = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $$byval_copy = sp;
 $5 = sp + 16|0;
 $6 = sp + 12|0;
 $7 = sp + 4|0;
 $8 = sp + 8|0;
 ;HEAP8[$5>>0]=HEAP8[41846>>0]|0;HEAP8[$5+1>>0]=HEAP8[41846+1>>0]|0;HEAP8[$5+2>>0]=HEAP8[41846+2>>0]|0;HEAP8[$5+3>>0]=HEAP8[41846+3>>0]|0;HEAP8[$5+4>>0]=HEAP8[41846+4>>0]|0;HEAP8[$5+5>>0]=HEAP8[41846+5>>0]|0;
 $9 = ((($5)) + 1|0);
 $10 = ((($2)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj($9,41852,1,$11);
 $12 = HEAP32[$10>>2]|0;
 $13 = $12 >>> 9;
 $$lobit = $13 & 1;
 $14 = (($$lobit) + 13)|0;
 $15 = (_llvm_stacksave()|0);
 $$alloca_mul = $14;
 $16 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul)|0)+15)&-16)|0);;
 $17 = (__ZNSt3__26__clocEv()|0);
 HEAP32[$$byval_copy>>2] = $4;
 $18 = (__ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($16,$14,$17,$5,$$byval_copy)|0);
 $19 = (($16) + ($18)|0);
 $20 = (__ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($16,$19,$2)|0);
 $21 = $$lobit << 1;
 $22 = $21 | 24;
 $23 = (($22) + -1)|0;
 $$alloca_mul6 = $23;
 $24 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul6)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul6)|0)+15)&-16)|0);;
 __ZNKSt3__28ios_base6getlocEv($$byval_copy,$2);
 __THREW__ = 0;
 invoke_viiiiiii(1,($16|0),($20|0),($19|0),($24|0),($6|0),($7|0),($$byval_copy|0));
 $25 = __THREW__; __THREW__ = 0;
 $26 = $25&1;
 if ($26) {
  $31 = ___cxa_find_matching_catch_2()|0;
  $32 = (getTempRet0() | 0);
  __ZNSt3__26localeD2Ev($$byval_copy);
  ___resumeException($31|0);
  // unreachable;
 } else {
  __ZNSt3__26localeD2Ev($$byval_copy);
  $27 = HEAP32[$1>>2]|0;
  HEAP32[$8>>2] = $27;
  $28 = HEAP32[$6>>2]|0;
  $29 = HEAP32[$7>>2]|0;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$8>>2]|0;
  $30 = (__ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$24,$28,$29,$2,$3)|0);
  _llvm_stackrestore(($15|0));
  STACKTOP = sp;return ($30|0);
 }
 return (0)|0;
}
function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$alloca_mul = 0, $$alloca_mul6 = 0, $$byval_copy = 0, $$lobit = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $$byval_copy = sp + 8|0;
 $6 = sp;
 $7 = sp + 24|0;
 $8 = sp + 16|0;
 $9 = sp + 20|0;
 $10 = $6;
 $11 = $10;
 HEAP32[$11>>2] = 37;
 $12 = (($10) + 4)|0;
 $13 = $12;
 HEAP32[$13>>2] = 0;
 $14 = ((($6)) + 1|0);
 $15 = ((($2)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj($14,41843,1,$16);
 $17 = HEAP32[$15>>2]|0;
 $18 = $17 >>> 9;
 $$lobit = $18 & 1;
 $19 = (($$lobit) + 23)|0;
 $20 = (_llvm_stacksave()|0);
 $$alloca_mul = $19;
 $21 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul)|0)+15)&-16)|0);;
 $22 = (__ZNSt3__26__clocEv()|0);
 $23 = $$byval_copy;
 $24 = $23;
 HEAP32[$24>>2] = $4;
 $25 = (($23) + 4)|0;
 $26 = $25;
 HEAP32[$26>>2] = $5;
 $27 = (__ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($21,$19,$22,$6,$$byval_copy)|0);
 $28 = (($21) + ($27)|0);
 $29 = (__ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($21,$28,$2)|0);
 $30 = $$lobit << 1;
 $31 = $30 | 44;
 $32 = (($31) + -1)|0;
 $$alloca_mul6 = $32;
 $33 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul6)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul6)|0)+15)&-16)|0);;
 __ZNKSt3__28ios_base6getlocEv($$byval_copy,$2);
 __THREW__ = 0;
 invoke_viiiiiii(1,($21|0),($29|0),($28|0),($33|0),($7|0),($8|0),($$byval_copy|0));
 $34 = __THREW__; __THREW__ = 0;
 $35 = $34&1;
 if ($35) {
  $40 = ___cxa_find_matching_catch_2()|0;
  $41 = (getTempRet0() | 0);
  __ZNSt3__26localeD2Ev($$byval_copy);
  ___resumeException($40|0);
  // unreachable;
 } else {
  __ZNSt3__26localeD2Ev($$byval_copy);
  $36 = HEAP32[$1>>2]|0;
  HEAP32[$9>>2] = $36;
  $37 = HEAP32[$7>>2]|0;
  $38 = HEAP32[$8>>2]|0;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$9>>2]|0;
  $39 = (__ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$33,$37,$38,$2,$3)|0);
  _llvm_stackrestore(($20|0));
  STACKTOP = sp;return ($39|0);
 }
 return (0)|0;
}
function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$alloca_mul = 0, $$alloca_mul6 = 0, $$byval_copy = 0, $$lobit = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $$byval_copy = sp;
 $5 = sp + 16|0;
 $6 = sp + 12|0;
 $7 = sp + 4|0;
 $8 = sp + 8|0;
 ;HEAP8[$5>>0]=HEAP8[41846>>0]|0;HEAP8[$5+1>>0]=HEAP8[41846+1>>0]|0;HEAP8[$5+2>>0]=HEAP8[41846+2>>0]|0;HEAP8[$5+3>>0]=HEAP8[41846+3>>0]|0;HEAP8[$5+4>>0]=HEAP8[41846+4>>0]|0;HEAP8[$5+5>>0]=HEAP8[41846+5>>0]|0;
 $9 = ((($5)) + 1|0);
 $10 = ((($2)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj($9,41852,0,$11);
 $12 = HEAP32[$10>>2]|0;
 $13 = $12 >>> 9;
 $$lobit = $13 & 1;
 $14 = $$lobit | 12;
 $15 = (_llvm_stacksave()|0);
 $$alloca_mul = $14;
 $16 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul)|0)+15)&-16)|0);;
 $17 = (__ZNSt3__26__clocEv()|0);
 HEAP32[$$byval_copy>>2] = $4;
 $18 = (__ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($16,$14,$17,$5,$$byval_copy)|0);
 $19 = (($16) + ($18)|0);
 $20 = (__ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($16,$19,$2)|0);
 $21 = $$lobit << 1;
 $22 = $21 | 21;
 $$alloca_mul6 = $22;
 $23 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul6)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul6)|0)+15)&-16)|0);;
 __ZNKSt3__28ios_base6getlocEv($$byval_copy,$2);
 __THREW__ = 0;
 invoke_viiiiiii(1,($16|0),($20|0),($19|0),($23|0),($6|0),($7|0),($$byval_copy|0));
 $24 = __THREW__; __THREW__ = 0;
 $25 = $24&1;
 if ($25) {
  $30 = ___cxa_find_matching_catch_2()|0;
  $31 = (getTempRet0() | 0);
  __ZNSt3__26localeD2Ev($$byval_copy);
  ___resumeException($30|0);
  // unreachable;
 } else {
  __ZNSt3__26localeD2Ev($$byval_copy);
  $26 = HEAP32[$1>>2]|0;
  HEAP32[$8>>2] = $26;
  $27 = HEAP32[$6>>2]|0;
  $28 = HEAP32[$7>>2]|0;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$8>>2]|0;
  $29 = (__ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$23,$27,$28,$2,$3)|0);
  _llvm_stackrestore(($15|0));
  STACKTOP = sp;return ($29|0);
 }
 return (0)|0;
}
function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$alloca_mul = 0, $$alloca_mul6 = 0, $$byval_copy = 0, $$lobit = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $$byval_copy = sp + 8|0;
 $6 = sp;
 $7 = sp + 24|0;
 $8 = sp + 16|0;
 $9 = sp + 20|0;
 $10 = $6;
 $11 = $10;
 HEAP32[$11>>2] = 37;
 $12 = (($10) + 4)|0;
 $13 = $12;
 HEAP32[$13>>2] = 0;
 $14 = ((($6)) + 1|0);
 $15 = ((($2)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj($14,41843,0,$16);
 $17 = HEAP32[$15>>2]|0;
 $18 = $17 >>> 9;
 $$lobit = $18 & 1;
 $19 = $$lobit | 22;
 $20 = (($19) + 1)|0;
 $21 = (_llvm_stacksave()|0);
 $$alloca_mul = $20;
 $22 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul)|0)+15)&-16)|0);;
 $23 = (__ZNSt3__26__clocEv()|0);
 $24 = $$byval_copy;
 $25 = $24;
 HEAP32[$25>>2] = $4;
 $26 = (($24) + 4)|0;
 $27 = $26;
 HEAP32[$27>>2] = $5;
 $28 = (__ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($22,$20,$23,$6,$$byval_copy)|0);
 $29 = (($22) + ($28)|0);
 $30 = (__ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($22,$29,$2)|0);
 $31 = $19 << 1;
 $32 = (($31) + -1)|0;
 $$alloca_mul6 = $32;
 $33 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul6)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul6)|0)+15)&-16)|0);;
 __ZNKSt3__28ios_base6getlocEv($$byval_copy,$2);
 __THREW__ = 0;
 invoke_viiiiiii(1,($22|0),($30|0),($29|0),($33|0),($7|0),($8|0),($$byval_copy|0));
 $34 = __THREW__; __THREW__ = 0;
 $35 = $34&1;
 if ($35) {
  $40 = ___cxa_find_matching_catch_2()|0;
  $41 = (getTempRet0() | 0);
  __ZNSt3__26localeD2Ev($$byval_copy);
  ___resumeException($40|0);
  // unreachable;
 } else {
  __ZNSt3__26localeD2Ev($$byval_copy);
  $36 = HEAP32[$1>>2]|0;
  HEAP32[$9>>2] = $36;
  $37 = HEAP32[$7>>2]|0;
  $38 = HEAP32[$8>>2]|0;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$9>>2]|0;
  $39 = (__ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$33,$37,$38,$2,$3)|0);
  _llvm_stackrestore(($21|0));
  STACKTOP = sp;return ($39|0);
 }
 return (0)|0;
}
function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = +$4;
 var $$0 = 0, $$046 = 0, $$1 = 0, $$148 = 0, $$151 = 0, $$2 = 0, $$24982 = 0, $$25281 = 0, $$45484 = 0, $$485 = 0, $$byval_copy = 0, $$pre = 0, $$sroa$060$0 = 0, $$sroa$071$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $$byval_copy = sp + 168|0;
 $vararg_buffer9 = sp + 144|0;
 $vararg_buffer5 = sp + 128|0;
 $vararg_buffer2 = sp + 120|0;
 $vararg_buffer = sp + 104|0;
 $5 = sp + 96|0;
 $6 = sp + 64|0;
 $7 = sp + 164|0;
 $8 = sp;
 $9 = sp + 160|0;
 $10 = sp + 156|0;
 $11 = sp + 152|0;
 $12 = $5;
 $13 = $12;
 HEAP32[$13>>2] = 37;
 $14 = (($12) + 4)|0;
 $15 = $14;
 HEAP32[$15>>2] = 0;
 $16 = ((($5)) + 1|0);
 $17 = ((($2)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (__ZNSt3__214__num_put_base14__format_floatEPcPKcj($16,51188,$18)|0);
 HEAP32[$7>>2] = $6;
 $20 = (__ZNSt3__26__clocEv()|0);
 if ($19) {
  $21 = ((($2)) + 8|0);
  $22 = HEAP32[$21>>2]|0;
  HEAP32[$vararg_buffer>>2] = $22;
  $vararg_ptr1 = ((($vararg_buffer)) + 8|0);
  HEAPF64[$vararg_ptr1>>3] = $4;
  $23 = (__ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($6,30,$20,$5,$vararg_buffer)|0);
  $$0 = $23;
 } else {
  HEAPF64[$vararg_buffer2>>3] = $4;
  $24 = (__ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($6,30,$20,$5,$vararg_buffer2)|0);
  $$0 = $24;
 }
 $25 = ($$0|0)>(29);
 L5: do {
  if ($25) {
   if ($19) {
    __THREW__ = 0;
    $26 = (invoke_i(24)|0);
    $27 = __THREW__; __THREW__ = 0;
    $28 = $27&1;
    if (!($28)) {
     $29 = ((($2)) + 8|0);
     $30 = HEAP32[$29>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer5>>2] = $30;
     $vararg_ptr8 = ((($vararg_buffer5)) + 8|0);
     HEAPF64[$vararg_ptr8>>3] = $4;
     $31 = (invoke_iiiii(18,($7|0),($26|0),($5|0),($vararg_buffer5|0))|0);
     $32 = __THREW__; __THREW__ = 0;
     $33 = $32&1;
     if (!($33)) {
      $$1 = $31;
      label = 12;
     }
    }
   } else {
    __THREW__ = 0;
    $36 = (invoke_i(24)|0);
    $37 = __THREW__; __THREW__ = 0;
    $38 = $37&1;
    if (!($38)) {
     __THREW__ = 0;
     HEAPF64[$vararg_buffer9>>3] = $4;
     $39 = (invoke_iiiii(18,($7|0),($36|0),($5|0),($vararg_buffer9|0))|0);
     $40 = __THREW__; __THREW__ = 0;
     $41 = $40&1;
     if (!($41)) {
      $$1 = $39;
      label = 12;
     }
    }
   }
   do {
    if ((label|0) == 12) {
     $42 = HEAP32[$7>>2]|0;
     $43 = ($42|0)==(0|0);
     if ($43) {
      __THREW__ = 0;
      invoke_v(4);
      $44 = __THREW__; __THREW__ = 0;
      break;
     } else {
      $45 = $42;
      $$2 = $$1;$$sroa$071$0 = $45;$47 = $42;
      label = 15;
      break L5;
     }
    }
   } while(0);
   $34 = ___cxa_find_matching_catch_2()|0;
   $35 = (getTempRet0() | 0);
   $$45484 = $35;$$485 = $34;
  } else {
   $$pre = HEAP32[$7>>2]|0;
   $$2 = $$0;$$sroa$071$0 = 0;$47 = $$pre;
   label = 15;
  }
 } while(0);
 if ((label|0) == 15) {
  $46 = (($47) + ($$2)|0);
  $48 = (__ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($47,$46,$2)|0);
  $49 = ($47|0)==($6|0);
  do {
   if ($49) {
    $$046 = $8;$$sroa$060$0 = 0;
    label = 19;
   } else {
    $50 = $$2 << 1;
    $51 = (_malloc($50)|0);
    $52 = ($51|0)==(0|0);
    if ($52) {
     __THREW__ = 0;
     invoke_v(4);
     $53 = __THREW__; __THREW__ = 0;
     $54 = ___cxa_find_matching_catch_2()|0;
     $55 = (getTempRet0() | 0);
     $$24982 = $54;$$25281 = $55;
     break;
    } else {
     $56 = $51;
     $$046 = $51;$$sroa$060$0 = $56;
     label = 19;
     break;
    }
   }
  } while(0);
  if ((label|0) == 19) {
   __ZNKSt3__28ios_base6getlocEv($$byval_copy,$2);
   __THREW__ = 0;
   invoke_viiiiiii(2,($47|0),($48|0),($46|0),($$046|0),($9|0),($10|0),($$byval_copy|0));
   $57 = __THREW__; __THREW__ = 0;
   $58 = $57&1;
   do {
    if ($58) {
     $69 = ___cxa_find_matching_catch_2()|0;
     $70 = (getTempRet0() | 0);
     __ZNSt3__26localeD2Ev($$byval_copy);
     $$148 = $69;$$151 = $70;
    } else {
     __ZNSt3__26localeD2Ev($$byval_copy);
     $59 = HEAP32[$1>>2]|0;
     HEAP32[$11>>2] = $59;
     $60 = HEAP32[$9>>2]|0;
     $61 = HEAP32[$10>>2]|0;
     __THREW__ = 0;
     ;HEAP32[$$byval_copy>>2]=HEAP32[$11>>2]|0;
     $62 = (invoke_iiiiiii(39,($$byval_copy|0),($$046|0),($60|0),($61|0),($2|0),($3|0))|0);
     $63 = __THREW__; __THREW__ = 0;
     $64 = $63&1;
     if ($64) {
      $71 = ___cxa_find_matching_catch_2()|0;
      $72 = (getTempRet0() | 0);
      $$148 = $71;$$151 = $72;
      break;
     }
     HEAP32[$1>>2] = $62;
     $65 = ($$sroa$060$0|0)==(0);
     if (!($65)) {
      $66 = $$sroa$060$0;
      _free($66);
     }
     $67 = ($$sroa$071$0|0)==(0);
     if (!($67)) {
      $68 = $$sroa$071$0;
      _free($68);
     }
     STACKTOP = sp;return ($62|0);
    }
   } while(0);
   $73 = ($$sroa$060$0|0)==(0);
   if ($73) {
    $$24982 = $$148;$$25281 = $$151;
   } else {
    $74 = $$sroa$060$0;
    _free($74);
    $$24982 = $$148;$$25281 = $$151;
   }
  }
  $75 = ($$sroa$071$0|0)==(0);
  if ($75) {
   $$45484 = $$25281;$$485 = $$24982;
  } else {
   $76 = $$sroa$071$0;
   _free($76);
   $$45484 = $$25281;$$485 = $$24982;
  }
 }
 ___resumeException($$485|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = +$4;
 var $$0 = 0, $$046 = 0, $$1 = 0, $$148 = 0, $$151 = 0, $$2 = 0, $$24982 = 0, $$25281 = 0, $$45484 = 0, $$485 = 0, $$byval_copy = 0, $$pre = 0, $$sroa$060$0 = 0, $$sroa$071$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $$byval_copy = sp + 168|0;
 $vararg_buffer9 = sp + 144|0;
 $vararg_buffer5 = sp + 128|0;
 $vararg_buffer2 = sp + 120|0;
 $vararg_buffer = sp + 104|0;
 $5 = sp + 96|0;
 $6 = sp + 64|0;
 $7 = sp + 164|0;
 $8 = sp;
 $9 = sp + 160|0;
 $10 = sp + 156|0;
 $11 = sp + 152|0;
 $12 = $5;
 $13 = $12;
 HEAP32[$13>>2] = 37;
 $14 = (($12) + 4)|0;
 $15 = $14;
 HEAP32[$15>>2] = 0;
 $16 = ((($5)) + 1|0);
 $17 = ((($2)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (__ZNSt3__214__num_put_base14__format_floatEPcPKcj($16,41841,$18)|0);
 HEAP32[$7>>2] = $6;
 $20 = (__ZNSt3__26__clocEv()|0);
 if ($19) {
  $21 = ((($2)) + 8|0);
  $22 = HEAP32[$21>>2]|0;
  HEAP32[$vararg_buffer>>2] = $22;
  $vararg_ptr1 = ((($vararg_buffer)) + 8|0);
  HEAPF64[$vararg_ptr1>>3] = $4;
  $23 = (__ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($6,30,$20,$5,$vararg_buffer)|0);
  $$0 = $23;
 } else {
  HEAPF64[$vararg_buffer2>>3] = $4;
  $24 = (__ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($6,30,$20,$5,$vararg_buffer2)|0);
  $$0 = $24;
 }
 $25 = ($$0|0)>(29);
 L5: do {
  if ($25) {
   if ($19) {
    __THREW__ = 0;
    $26 = (invoke_i(24)|0);
    $27 = __THREW__; __THREW__ = 0;
    $28 = $27&1;
    if (!($28)) {
     $29 = ((($2)) + 8|0);
     $30 = HEAP32[$29>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer5>>2] = $30;
     $vararg_ptr8 = ((($vararg_buffer5)) + 8|0);
     HEAPF64[$vararg_ptr8>>3] = $4;
     $31 = (invoke_iiiii(18,($7|0),($26|0),($5|0),($vararg_buffer5|0))|0);
     $32 = __THREW__; __THREW__ = 0;
     $33 = $32&1;
     if (!($33)) {
      $$1 = $31;
      label = 12;
     }
    }
   } else {
    __THREW__ = 0;
    $36 = (invoke_i(24)|0);
    $37 = __THREW__; __THREW__ = 0;
    $38 = $37&1;
    if (!($38)) {
     __THREW__ = 0;
     HEAPF64[$vararg_buffer9>>3] = $4;
     $39 = (invoke_iiiii(18,($7|0),($36|0),($5|0),($vararg_buffer9|0))|0);
     $40 = __THREW__; __THREW__ = 0;
     $41 = $40&1;
     if (!($41)) {
      $$1 = $39;
      label = 12;
     }
    }
   }
   do {
    if ((label|0) == 12) {
     $42 = HEAP32[$7>>2]|0;
     $43 = ($42|0)==(0|0);
     if ($43) {
      __THREW__ = 0;
      invoke_v(4);
      $44 = __THREW__; __THREW__ = 0;
      break;
     } else {
      $45 = $42;
      $$2 = $$1;$$sroa$071$0 = $45;$47 = $42;
      label = 15;
      break L5;
     }
    }
   } while(0);
   $34 = ___cxa_find_matching_catch_2()|0;
   $35 = (getTempRet0() | 0);
   $$45484 = $35;$$485 = $34;
  } else {
   $$pre = HEAP32[$7>>2]|0;
   $$2 = $$0;$$sroa$071$0 = 0;$47 = $$pre;
   label = 15;
  }
 } while(0);
 if ((label|0) == 15) {
  $46 = (($47) + ($$2)|0);
  $48 = (__ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($47,$46,$2)|0);
  $49 = ($47|0)==($6|0);
  do {
   if ($49) {
    $$046 = $8;$$sroa$060$0 = 0;
    label = 19;
   } else {
    $50 = $$2 << 1;
    $51 = (_malloc($50)|0);
    $52 = ($51|0)==(0|0);
    if ($52) {
     __THREW__ = 0;
     invoke_v(4);
     $53 = __THREW__; __THREW__ = 0;
     $54 = ___cxa_find_matching_catch_2()|0;
     $55 = (getTempRet0() | 0);
     $$24982 = $54;$$25281 = $55;
     break;
    } else {
     $56 = $51;
     $$046 = $51;$$sroa$060$0 = $56;
     label = 19;
     break;
    }
   }
  } while(0);
  if ((label|0) == 19) {
   __ZNKSt3__28ios_base6getlocEv($$byval_copy,$2);
   __THREW__ = 0;
   invoke_viiiiiii(2,($47|0),($48|0),($46|0),($$046|0),($9|0),($10|0),($$byval_copy|0));
   $57 = __THREW__; __THREW__ = 0;
   $58 = $57&1;
   do {
    if ($58) {
     $69 = ___cxa_find_matching_catch_2()|0;
     $70 = (getTempRet0() | 0);
     __ZNSt3__26localeD2Ev($$byval_copy);
     $$148 = $69;$$151 = $70;
    } else {
     __ZNSt3__26localeD2Ev($$byval_copy);
     $59 = HEAP32[$1>>2]|0;
     HEAP32[$11>>2] = $59;
     $60 = HEAP32[$9>>2]|0;
     $61 = HEAP32[$10>>2]|0;
     __THREW__ = 0;
     ;HEAP32[$$byval_copy>>2]=HEAP32[$11>>2]|0;
     $62 = (invoke_iiiiiii(39,($$byval_copy|0),($$046|0),($60|0),($61|0),($2|0),($3|0))|0);
     $63 = __THREW__; __THREW__ = 0;
     $64 = $63&1;
     if ($64) {
      $71 = ___cxa_find_matching_catch_2()|0;
      $72 = (getTempRet0() | 0);
      $$148 = $71;$$151 = $72;
      break;
     }
     HEAP32[$1>>2] = $62;
     $65 = ($$sroa$060$0|0)==(0);
     if (!($65)) {
      $66 = $$sroa$060$0;
      _free($66);
     }
     $67 = ($$sroa$071$0|0)==(0);
     if (!($67)) {
      $68 = $$sroa$071$0;
      _free($68);
     }
     STACKTOP = sp;return ($62|0);
    }
   } while(0);
   $73 = ($$sroa$060$0|0)==(0);
   if ($73) {
    $$24982 = $$148;$$25281 = $$151;
   } else {
    $74 = $$sroa$060$0;
    _free($74);
    $$24982 = $$148;$$25281 = $$151;
   }
  }
  $75 = ($$sroa$071$0|0)==(0);
  if ($75) {
   $$45484 = $$25281;$$485 = $$24982;
  } else {
   $76 = $$sroa$071$0;
   _free($76);
   $$45484 = $$25281;$$485 = $$24982;
  }
 }
 ___resumeException($$485|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $$byval_copy = sp + 72|0;
 $5 = sp + 80|0;
 $6 = sp + 48|0;
 $7 = sp;
 $8 = sp + 76|0;
 ;HEAP8[$5>>0]=HEAP8[41835>>0]|0;HEAP8[$5+1>>0]=HEAP8[41835+1>>0]|0;HEAP8[$5+2>>0]=HEAP8[41835+2>>0]|0;HEAP8[$5+3>>0]=HEAP8[41835+3>>0]|0;HEAP8[$5+4>>0]=HEAP8[41835+4>>0]|0;HEAP8[$5+5>>0]=HEAP8[41835+5>>0]|0;
 $9 = (__ZNSt3__26__clocEv()|0);
 HEAP32[$$byval_copy>>2] = $4;
 $10 = (__ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($6,20,$9,$5,$$byval_copy)|0);
 $11 = (($6) + ($10)|0);
 $12 = (__ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($6,$11,$2)|0);
 __ZNKSt3__28ios_base6getlocEv($$byval_copy,$2);
 __THREW__ = 0;
 $13 = (invoke_iii(37,($$byval_copy|0),(50740|0))|0);
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 if ($15) {
  $27 = ___cxa_find_matching_catch_2()|0;
  $28 = (getTempRet0() | 0);
  __ZNSt3__26localeD2Ev($$byval_copy);
  ___resumeException($27|0);
  // unreachable;
 } else {
  __ZNSt3__26localeD2Ev($$byval_copy);
  $16 = HEAP32[$13>>2]|0;
  $17 = ((($16)) + 32|0);
  $18 = HEAP32[$17>>2]|0;
  (FUNCTION_TABLE_iiiii[$18 & 31]($13,$6,$11,$7)|0);
  $19 = (($7) + ($10)|0);
  $20 = ($12|0)==($11|0);
  $21 = $6;
  $22 = $12;
  $23 = (($22) - ($21))|0;
  $24 = (($7) + ($23)|0);
  $$0 = $20 ? $19 : $24;
  $25 = HEAP32[$1>>2]|0;
  HEAP32[$8>>2] = $25;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$8>>2]|0;
  $26 = (__ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$7,$$0,$19,$2,$3)|0);
  STACKTOP = sp;return ($26|0);
 }
 return (0)|0;
}
function __ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($0,$1,$2,$3,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $varargs = $varargs|0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 HEAP32[$4>>2] = $varargs;
 $5 = (___uselocale($2)|0);
 $6 = (_vsnprintf($0,$1,$3,$4)|0);
 $7 = ($5|0)==(0|0);
 if (!($7)) {
  (___uselocale($5)|0);
 }
 STACKTOP = sp;return ($6|0);
}
function __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $trunc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 176;
 $trunc = $5&255;
 L1: do {
  switch ($trunc<<24>>24) {
  case 16:  {
   $6 = HEAP8[$0>>0]|0;
   switch ($6<<24>>24) {
   case 43: case 45:  {
    $7 = ((($0)) + 1|0);
    $$0 = $7;
    break L1;
    break;
   }
   default: {
   }
   }
   $8 = $1;
   $9 = $0;
   $10 = (($8) - ($9))|0;
   $11 = ($10|0)>(1);
   $12 = ($6<<24>>24)==(48);
   $or$cond = $11 & $12;
   if ($or$cond) {
    $13 = ((($0)) + 1|0);
    $14 = HEAP8[$13>>0]|0;
    switch ($14<<24>>24) {
    case 88: case 120:  {
     break;
    }
    default: {
     label = 7;
     break L1;
    }
    }
    $15 = ((($0)) + 2|0);
    $$0 = $15;
   } else {
    label = 7;
   }
   break;
  }
  case 32:  {
   $$0 = $1;
   break;
  }
  default: {
   label = 7;
  }
  }
 } while(0);
 if ((label|0) == 7) {
  $$0 = $0;
 }
 return ($$0|0);
}
function __ZNSt3__214__num_put_base14__format_floatEPcPKcj($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$022 = 0, $$023$off0 = 0, $$1 = 0, $$2 = 0, $$3 = 0, $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $trunc = 0, $trunc$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $2 & 2048;
 $4 = ($3|0)==(0);
 if ($4) {
  $$0 = $0;
 } else {
  $5 = ((($0)) + 1|0);
  HEAP8[$0>>0] = 43;
  $$0 = $5;
 }
 $6 = $2 & 1024;
 $7 = ($6|0)==(0);
 if ($7) {
  $$1 = $$0;
 } else {
  $8 = ((($$0)) + 1|0);
  HEAP8[$$0>>0] = 35;
  $$1 = $8;
 }
 $9 = $2 & 260;
 $10 = $2 & 16384;
 $11 = ($9|0)==(260);
 if ($11) {
  $$023$off0 = 0;$$2 = $$1;
 } else {
  $12 = ((($$1)) + 1|0);
  HEAP8[$$1>>0] = 46;
  $13 = ((($$1)) + 2|0);
  HEAP8[$12>>0] = 42;
  $$023$off0 = 1;$$2 = $13;
 }
 $$022 = $1;$$3 = $$2;
 while(1) {
  $14 = HEAP8[$$022>>0]|0;
  $15 = ($14<<24>>24)==(0);
  if ($15) {
   break;
  }
  $16 = ((($$022)) + 1|0);
  $17 = ((($$3)) + 1|0);
  HEAP8[$$3>>0] = $14;
  $$022 = $16;$$3 = $17;
 }
 $trunc = $9&65535;
 $trunc$clear = $trunc & 511;
 L14: do {
  switch ($trunc$clear<<16>>16) {
  case 4:  {
   $18 = $10 >>> 9;
   $19 = $18&255;
   $20 = $19 ^ 102;
   $$sink = $20;
   break;
  }
  case 256:  {
   $21 = $10 >>> 9;
   $22 = $21&255;
   $23 = $22 ^ 101;
   $$sink = $23;
   break;
  }
  default: {
   $24 = $10 >>> 9;
   $25 = $24&255;
   if ($11) {
    $26 = $25 ^ 97;
    $$sink = $26;
    break L14;
   } else {
    $27 = $25 ^ 103;
    $$sink = $27;
    break L14;
   }
  }
  }
 } while(0);
 HEAP8[$$3>>0] = $$sink;
 return ($$023$off0|0);
}
function __ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz($0,$1,$2,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $varargs = $varargs|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 HEAP32[$3>>2] = $varargs;
 $4 = (___uselocale($1)|0);
 $5 = (_vasprintf($0,$2,$3)|0);
 $6 = ($4|0)==(0|0);
 if (!($6)) {
  (___uselocale($4)|0);
 }
 STACKTOP = sp;return ($5|0);
}
function __ZNSt3__29__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i127 = 0, $$0108 = 0, $$0109 = 0, $$0111 = 0, $$0113 = 0, $$07$i$i = 0, $$07$i$i126 = 0, $$1 = 0, $$1110 = 0, $$1112 = 0, $$1114 = 0, $$2 = 0, $$2115 = 0, $$3 = 0, $$pre$phiZ2D = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $lpad$phi$sink160$index = 0, $lpad$phi$sink160$index7 = 0, $or$cond = 0, $spec$select = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $7 = sp;
 $8 = (__ZNKSt3__26locale9use_facetERNS0_2idE($6,50740)|0);
 $9 = (__ZNKSt3__26locale9use_facetERNS0_2idE($6,50756)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 20|0);
 $12 = HEAP32[$11>>2]|0;
 FUNCTION_TABLE_vii[$12 & 255]($7,$9);
 HEAP32[$5>>2] = $3;
 $13 = HEAP8[$0>>0]|0;
 L1: do {
  switch ($13<<24>>24) {
  case 43: case 45:  {
   $14 = HEAP32[$8>>2]|0;
   $15 = ((($14)) + 28|0);
   $16 = HEAP32[$15>>2]|0;
   __THREW__ = 0;
   $17 = (invoke_iii($16|0,($8|0),($13|0))|0);
   $18 = __THREW__; __THREW__ = 0;
   $19 = $18&1;
   if ($19) {
    $23 = ___cxa_find_matching_catch_2()|0;
    $24 = (getTempRet0() | 0);
    $lpad$phi$sink160$index = $23;$lpad$phi$sink160$index7 = $24;
    break L1;
   } else {
    $20 = ((($0)) + 1|0);
    $21 = HEAP32[$5>>2]|0;
    $22 = ((($21)) + 1|0);
    HEAP32[$5>>2] = $22;
    HEAP8[$21>>0] = $17;
    $$0111 = $20;
    label = 5;
    break L1;
   }
   break;
  }
  default: {
   $$0111 = $0;
   label = 5;
  }
  }
 } while(0);
 L6: do {
  if ((label|0) == 5) {
   $25 = $2;
   $26 = $$0111;
   $27 = (($25) - ($26))|0;
   $28 = ($27|0)>(1);
   L8: do {
    if ($28) {
     $29 = HEAP8[$$0111>>0]|0;
     $30 = ($29<<24>>24)==(48);
     if ($30) {
      $31 = ((($$0111)) + 1|0);
      $32 = HEAP8[$31>>0]|0;
      switch ($32<<24>>24) {
      case 88: case 120:  {
       break;
      }
      default: {
       label = 6;
       break L8;
      }
      }
      $33 = HEAP32[$8>>2]|0;
      $34 = ((($33)) + 28|0);
      $35 = HEAP32[$34>>2]|0;
      __THREW__ = 0;
      $36 = (invoke_iii($35|0,($8|0),48)|0);
      $37 = __THREW__; __THREW__ = 0;
      $38 = $37&1;
      if (!($38)) {
       $39 = HEAP32[$5>>2]|0;
       $40 = ((($39)) + 1|0);
       HEAP32[$5>>2] = $40;
       HEAP8[$39>>0] = $36;
       $41 = ((($$0111)) + 2|0);
       $42 = HEAP8[$31>>0]|0;
       $43 = HEAP32[$8>>2]|0;
       $44 = ((($43)) + 28|0);
       $45 = HEAP32[$44>>2]|0;
       __THREW__ = 0;
       $46 = (invoke_iii($45|0,($8|0),($42|0))|0);
       $47 = __THREW__; __THREW__ = 0;
       $48 = $47&1;
       if (!($48)) {
        $49 = HEAP32[$5>>2]|0;
        $50 = ((($49)) + 1|0);
        HEAP32[$5>>2] = $50;
        HEAP8[$49>>0] = $46;
        $$0113 = $41;
        while(1) {
         $51 = ($$0113>>>0)<($2>>>0);
         if (!($51)) {
          $$1112 = $41;$$2115 = $$0113;
          label = 24;
          break L8;
         }
         $52 = HEAP8[$$0113>>0]|0;
         __THREW__ = 0;
         $53 = (invoke_i(24)|0);
         $54 = __THREW__; __THREW__ = 0;
         $55 = $54&1;
         if ($55) {
          break;
         }
         $56 = $52 << 24 >> 24;
         $57 = (_isxdigit_l($56,$53)|0);
         $58 = ($57|0)==(0);
         if ($58) {
          $$1112 = $41;$$2115 = $$0113;
          label = 24;
          break L8;
         }
         $67 = ((($$0113)) + 1|0);
         $$0113 = $67;
        }
        $63 = ___cxa_find_matching_catch_2()|0;
        $64 = (getTempRet0() | 0);
        $lpad$phi$sink160$index = $63;$lpad$phi$sink160$index7 = $64;
        break L6;
       }
      }
     } else {
      label = 6;
     }
    } else {
     label = 6;
    }
   } while(0);
   L20: do {
    if ((label|0) == 6) {
     $$1114 = $$0111;
     while(1) {
      $68 = ($$1114>>>0)<($2>>>0);
      if (!($68)) {
       $$1112 = $$0111;$$2115 = $$1114;
       label = 24;
       break L20;
      }
      $69 = HEAP8[$$1114>>0]|0;
      __THREW__ = 0;
      $70 = (invoke_i(24)|0);
      $71 = __THREW__; __THREW__ = 0;
      $72 = $71&1;
      if ($72) {
       break;
      }
      $73 = $69 << 24 >> 24;
      $74 = (_isdigit_l($73,$70)|0);
      $75 = ($74|0)==(0);
      if ($75) {
       $$1112 = $$0111;$$2115 = $$1114;
       label = 24;
       break L20;
      }
      $76 = ((($$1114)) + 1|0);
      $$1114 = $76;
     }
     $61 = ___cxa_find_matching_catch_2()|0;
     $62 = (getTempRet0() | 0);
     $lpad$phi$sink160$index = $61;$lpad$phi$sink160$index7 = $62;
     break L6;
    }
   } while(0);
   L28: do {
    if ((label|0) == 24) {
     $77 = ((($7)) + 11|0);
     $78 = HEAP8[$77>>0]|0;
     $79 = ($78<<24>>24)<(0);
     $80 = ((($7)) + 4|0);
     $81 = HEAP32[$80>>2]|0;
     $82 = $78&255;
     $83 = $79 ? $81 : $82;
     $84 = ($83|0)==(0);
     L30: do {
      if ($84) {
       $85 = HEAP32[$5>>2]|0;
       $86 = HEAP32[$8>>2]|0;
       $87 = ((($86)) + 32|0);
       $88 = HEAP32[$87>>2]|0;
       __THREW__ = 0;
       (invoke_iiiii($88|0,($8|0),($$1112|0),($$2115|0),($85|0))|0);
       $89 = __THREW__; __THREW__ = 0;
       $90 = $89&1;
       if ($90) {
        break L28;
       }
       $91 = $$2115;
       $92 = $$1112;
       $93 = (($91) - ($92))|0;
       $94 = HEAP32[$5>>2]|0;
       $95 = (($94) + ($93)|0);
       HEAP32[$5>>2] = $95;
       $$pre$phiZ2D = $8;
      } else {
       $96 = ($$1112|0)==($$2115|0);
       L34: do {
        if (!($96)) {
         $$0$i$i = $$2115;$$07$i$i = $$1112;
         while(1) {
          $97 = ((($$0$i$i)) + -1|0);
          $98 = ($$07$i$i>>>0)<($97>>>0);
          if (!($98)) {
           break L34;
          }
          $99 = HEAP8[$$07$i$i>>0]|0;
          $100 = HEAP8[$97>>0]|0;
          HEAP8[$$07$i$i>>0] = $100;
          HEAP8[$97>>0] = $99;
          $101 = ((($$07$i$i)) + 1|0);
          $$0$i$i = $97;$$07$i$i = $101;
         }
        }
       } while(0);
       $102 = HEAP32[$9>>2]|0;
       $103 = ((($102)) + 16|0);
       $104 = HEAP32[$103>>2]|0;
       __THREW__ = 0;
       $105 = (invoke_ii($104|0,($9|0))|0);
       $106 = __THREW__; __THREW__ = 0;
       $107 = $106&1;
       if ($107) {
        $120 = ___cxa_find_matching_catch_2()|0;
        $121 = (getTempRet0() | 0);
        $lpad$phi$sink160$index = $120;$lpad$phi$sink160$index7 = $121;
        break L6;
       }
       $$0 = $$1112;$$0108 = 0;$$0109 = 0;
       while(1) {
        $108 = ($$0>>>0)<($$2115>>>0);
        if (!($108)) {
         break;
        }
        $122 = HEAP8[$77>>0]|0;
        $123 = ($122<<24>>24)<(0);
        $124 = HEAP32[$7>>2]|0;
        $125 = $123 ? $124 : $7;
        $126 = (($125) + ($$0108)|0);
        $127 = HEAP8[$126>>0]|0;
        $128 = ($127<<24>>24)>(0);
        $129 = $127 << 24 >> 24;
        $130 = ($$0109|0)==($129|0);
        $or$cond = $128 & $130;
        if ($or$cond) {
         $131 = HEAP32[$5>>2]|0;
         $132 = ((($131)) + 1|0);
         HEAP32[$5>>2] = $132;
         HEAP8[$131>>0] = $105;
         $133 = HEAP8[$77>>0]|0;
         $134 = ($133<<24>>24)<(0);
         $135 = HEAP32[$80>>2]|0;
         $136 = $133&255;
         $137 = $134 ? $135 : $136;
         $138 = (($137) + -1)|0;
         $139 = ($$0108>>>0)<($138>>>0);
         $140 = $139&1;
         $spec$select = (($$0108) + ($140))|0;
         $$1 = $spec$select;$$1110 = 0;
        } else {
         $$1 = $$0108;$$1110 = $$0109;
        }
        $141 = HEAP8[$$0>>0]|0;
        $142 = HEAP32[$8>>2]|0;
        $143 = ((($142)) + 28|0);
        $144 = HEAP32[$143>>2]|0;
        __THREW__ = 0;
        $145 = (invoke_iii($144|0,($8|0),($141|0))|0);
        $146 = __THREW__; __THREW__ = 0;
        $147 = $146&1;
        if ($147) {
         label = 43;
         break;
        }
        $148 = HEAP32[$5>>2]|0;
        $149 = ((($148)) + 1|0);
        HEAP32[$5>>2] = $149;
        HEAP8[$148>>0] = $145;
        $150 = (($$1110) + 1)|0;
        $151 = ((($$0)) + 1|0);
        $$0 = $151;$$0108 = $$1;$$0109 = $150;
       }
       if ((label|0) == 43) {
        $152 = ___cxa_find_matching_catch_2()|0;
        $153 = (getTempRet0() | 0);
        $lpad$phi$sink160$index = $152;$lpad$phi$sink160$index7 = $153;
        break L6;
       }
       $109 = $$1112;
       $110 = $0;
       $111 = (($109) - ($110))|0;
       $112 = (($3) + ($111)|0);
       $113 = HEAP32[$5>>2]|0;
       $114 = ($112|0)==($113|0);
       if ($114) {
        $$pre$phiZ2D = $8;
       } else {
        $$0$i$i127 = $113;$$07$i$i126 = $112;
        while(1) {
         $115 = ((($$0$i$i127)) + -1|0);
         $116 = ($$07$i$i126>>>0)<($115>>>0);
         if (!($116)) {
          $$pre$phiZ2D = $8;
          break L30;
         }
         $117 = HEAP8[$$07$i$i126>>0]|0;
         $118 = HEAP8[$115>>0]|0;
         HEAP8[$$07$i$i126>>0] = $118;
         HEAP8[$115>>0] = $117;
         $119 = ((($$07$i$i126)) + 1|0);
         $$0$i$i127 = $115;$$07$i$i126 = $119;
        }
       }
      }
     } while(0);
     $$2 = $$2115;
     while(1) {
      $154 = ($$2>>>0)<($2>>>0);
      if (!($154)) {
       $$3 = $$2;
       break;
      }
      $155 = HEAP8[$$2>>0]|0;
      $156 = ($155<<24>>24)==(46);
      if ($156) {
       label = 47;
       break;
      }
      $166 = HEAP32[$$pre$phiZ2D>>2]|0;
      $167 = ((($166)) + 28|0);
      $168 = HEAP32[$167>>2]|0;
      __THREW__ = 0;
      $169 = (invoke_iii($168|0,($8|0),($155|0))|0);
      $170 = __THREW__; __THREW__ = 0;
      $171 = $170&1;
      if ($171) {
       label = 15;
       break;
      }
      $172 = HEAP32[$5>>2]|0;
      $173 = ((($172)) + 1|0);
      HEAP32[$5>>2] = $173;
      HEAP8[$172>>0] = $169;
      $174 = ((($$2)) + 1|0);
      $$2 = $174;
     }
     if ((label|0) == 15) {
      $59 = ___cxa_find_matching_catch_2()|0;
      $60 = (getTempRet0() | 0);
      $lpad$phi$sink160$index = $59;$lpad$phi$sink160$index7 = $60;
      break L6;
     }
     if ((label|0) == 47) {
      $157 = HEAP32[$9>>2]|0;
      $158 = ((($157)) + 12|0);
      $159 = HEAP32[$158>>2]|0;
      __THREW__ = 0;
      $160 = (invoke_ii($159|0,($9|0))|0);
      $161 = __THREW__; __THREW__ = 0;
      $162 = $161&1;
      if ($162) {
       break;
      }
      $163 = HEAP32[$5>>2]|0;
      $164 = ((($163)) + 1|0);
      HEAP32[$5>>2] = $164;
      HEAP8[$163>>0] = $160;
      $165 = ((($$2)) + 1|0);
      $$3 = $165;
     }
     $175 = HEAP32[$5>>2]|0;
     $176 = HEAP32[$8>>2]|0;
     $177 = ((($176)) + 32|0);
     $178 = HEAP32[$177>>2]|0;
     __THREW__ = 0;
     (invoke_iiiii($178|0,($8|0),($$3|0),($2|0),($175|0))|0);
     $179 = __THREW__; __THREW__ = 0;
     $180 = $179&1;
     if (!($180)) {
      $181 = $$3;
      $182 = (($25) - ($181))|0;
      $183 = HEAP32[$5>>2]|0;
      $184 = (($183) + ($182)|0);
      HEAP32[$5>>2] = $184;
      $185 = ($1|0)==($2|0);
      $186 = $1;
      $187 = $0;
      $188 = (($186) - ($187))|0;
      $189 = (($3) + ($188)|0);
      $storemerge = $185 ? $184 : $189;
      HEAP32[$4>>2] = $storemerge;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7);
      STACKTOP = sp;return;
     }
    }
   } while(0);
   $65 = ___cxa_find_matching_catch_2()|0;
   $66 = (getTempRet0() | 0);
   $lpad$phi$sink160$index = $65;$lpad$phi$sink160$index7 = $66;
  }
 } while(0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7);
 ___resumeException($lpad$phi$sink160$index|0);
 // unreachable;
}
function __ZNSt3__214__num_put_base12__format_intEPcPKcbj($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$013 = 0, $$14 = 0, $$2 = 0, $$2$ph = 0, $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $trunc = 0, $trunc$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = $3 & 2048;
 $5 = ($4|0)==(0);
 if ($5) {
  $$0 = $0;
 } else {
  $6 = ((($0)) + 1|0);
  HEAP8[$0>>0] = 43;
  $$0 = $6;
 }
 $7 = $3 & 512;
 $8 = ($7|0)==(0);
 if ($8) {
  $$2$ph = $$0;
 } else {
  $9 = ((($$0)) + 1|0);
  HEAP8[$$0>>0] = 35;
  $$2$ph = $9;
 }
 $$013 = $1;$$2 = $$2$ph;
 while(1) {
  $10 = HEAP8[$$013>>0]|0;
  $11 = ($10<<24>>24)==(0);
  if ($11) {
   break;
  }
  $12 = ((($$013)) + 1|0);
  $13 = ((($$2)) + 1|0);
  HEAP8[$$2>>0] = $10;
  $$013 = $12;$$2 = $13;
 }
 $14 = $3 & 74;
 $trunc = $14&255;
 $trunc$clear = $trunc & 127;
 switch ($trunc$clear<<24>>24) {
 case 64:  {
  $$sink = 111;
  break;
 }
 case 8:  {
  $15 = $3 >>> 9;
  $16 = $15 & 32;
  $17 = $16&255;
  $18 = $17 ^ 120;
  $$sink = $18;
  break;
 }
 default: {
  $$14 = $2 ? 100 : 117;
  $$sink = $$14;
 }
 }
 HEAP8[$$2>>0] = $$sink;
 return;
}
function __ZNSt3__29__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i92 = 0, $$07$i$i = 0, $$07$i$i91 = 0, $$078 = 0, $$079 = 0, $$083 = 0, $$1 = 0, $$180 = 0, $$184 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$sink97$index = 0, $$sink97$index4 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $or$cond = 0, $spec$select = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $7 = sp;
 $8 = (__ZNKSt3__26locale9use_facetERNS0_2idE($6,50740)|0);
 $9 = (__ZNKSt3__26locale9use_facetERNS0_2idE($6,50756)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 20|0);
 $12 = HEAP32[$11>>2]|0;
 FUNCTION_TABLE_vii[$12 & 255]($7,$9);
 $13 = ((($7)) + 11|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = ($14<<24>>24)<(0);
 $16 = ((($7)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $14&255;
 $19 = $15 ? $17 : $18;
 $20 = ($19|0)==(0);
 L1: do {
  if ($20) {
   $21 = HEAP32[$8>>2]|0;
   $22 = ((($21)) + 32|0);
   $23 = HEAP32[$22>>2]|0;
   __THREW__ = 0;
   (invoke_iiiii($23|0,($8|0),($0|0),($2|0),($3|0))|0);
   $24 = __THREW__; __THREW__ = 0;
   $25 = $24&1;
   if ($25) {
    $30 = ___cxa_find_matching_catch_2()|0;
    $31 = (getTempRet0() | 0);
    $$sink97$index = $30;$$sink97$index4 = $31;
    label = 34;
    break;
   } else {
    $26 = $2;
    $27 = $0;
    $28 = (($26) - ($27))|0;
    $29 = (($3) + ($28)|0);
    HEAP32[$5>>2] = $29;
    $$pre$phiZ2D = $27;$132 = $29;
    label = 33;
    break;
   }
  } else {
   HEAP32[$5>>2] = $3;
   $32 = HEAP8[$0>>0]|0;
   switch ($32<<24>>24) {
   case 43: case 45:  {
    $33 = HEAP32[$8>>2]|0;
    $34 = ((($33)) + 28|0);
    $35 = HEAP32[$34>>2]|0;
    __THREW__ = 0;
    $36 = (invoke_iii($35|0,($8|0),($32|0))|0);
    $37 = __THREW__; __THREW__ = 0;
    $38 = $37&1;
    if (!($38)) {
     $39 = ((($0)) + 1|0);
     $40 = HEAP32[$5>>2]|0;
     $41 = ((($40)) + 1|0);
     HEAP32[$5>>2] = $41;
     HEAP8[$40>>0] = $36;
     $$083 = $39;
     label = 9;
    }
    break;
   }
   default: {
    $$083 = $0;
    label = 9;
   }
   }
   L10: do {
    if ((label|0) == 9) {
     $44 = $2;
     $45 = $$083;
     $46 = (($44) - ($45))|0;
     $47 = ($46|0)>(1);
     L12: do {
      if ($47) {
       $48 = HEAP8[$$083>>0]|0;
       $49 = ($48<<24>>24)==(48);
       if ($49) {
        $50 = ((($$083)) + 1|0);
        $51 = HEAP8[$50>>0]|0;
        switch ($51<<24>>24) {
        case 88: case 120:  {
         break;
        }
        default: {
         $$184 = $$083;
         break L12;
        }
        }
        $52 = HEAP32[$8>>2]|0;
        $53 = ((($52)) + 28|0);
        $54 = HEAP32[$53>>2]|0;
        __THREW__ = 0;
        $55 = (invoke_iii($54|0,($8|0),48)|0);
        $56 = __THREW__; __THREW__ = 0;
        $57 = $56&1;
        if ($57) {
         break L10;
        }
        $58 = HEAP32[$5>>2]|0;
        $59 = ((($58)) + 1|0);
        HEAP32[$5>>2] = $59;
        HEAP8[$58>>0] = $55;
        $60 = HEAP8[$50>>0]|0;
        $61 = HEAP32[$8>>2]|0;
        $62 = ((($61)) + 28|0);
        $63 = HEAP32[$62>>2]|0;
        __THREW__ = 0;
        $64 = (invoke_iii($63|0,($8|0),($60|0))|0);
        $65 = __THREW__; __THREW__ = 0;
        $66 = $65&1;
        if ($66) {
         break L10;
        }
        $67 = ((($$083)) + 2|0);
        $68 = HEAP32[$5>>2]|0;
        $69 = ((($68)) + 1|0);
        HEAP32[$5>>2] = $69;
        HEAP8[$68>>0] = $64;
        $$184 = $67;
       } else {
        $$184 = $$083;
       }
      } else {
       $$184 = $$083;
      }
     } while(0);
     $70 = ($$184|0)==($2|0);
     L19: do {
      if (!($70)) {
       $$0$i$i = $2;$$07$i$i = $$184;
       while(1) {
        $71 = ((($$0$i$i)) + -1|0);
        $72 = ($$07$i$i>>>0)<($71>>>0);
        if (!($72)) {
         break L19;
        }
        $73 = HEAP8[$$07$i$i>>0]|0;
        $74 = HEAP8[$71>>0]|0;
        HEAP8[$$07$i$i>>0] = $74;
        HEAP8[$71>>0] = $73;
        $75 = ((($$07$i$i)) + 1|0);
        $$0$i$i = $71;$$07$i$i = $75;
       }
      }
     } while(0);
     $76 = HEAP32[$9>>2]|0;
     $77 = ((($76)) + 16|0);
     $78 = HEAP32[$77>>2]|0;
     __THREW__ = 0;
     $79 = (invoke_ii($78|0,($9|0))|0);
     $80 = __THREW__; __THREW__ = 0;
     $81 = $80&1;
     if ($81) {
      $94 = ___cxa_find_matching_catch_2()|0;
      $95 = (getTempRet0() | 0);
      $$sink97$index = $94;$$sink97$index4 = $95;
      label = 34;
      break L1;
     }
     $$0 = $$184;$$078 = 0;$$079 = 0;
     while(1) {
      $82 = ($$0>>>0)<($2>>>0);
      if (!($82)) {
       break;
      }
      $96 = HEAP8[$13>>0]|0;
      $97 = ($96<<24>>24)<(0);
      $98 = HEAP32[$7>>2]|0;
      $99 = $97 ? $98 : $7;
      $100 = (($99) + ($$078)|0);
      $101 = HEAP8[$100>>0]|0;
      $102 = ($101<<24>>24)!=(0);
      $103 = $101 << 24 >> 24;
      $104 = ($$079|0)==($103|0);
      $or$cond = $102 & $104;
      if ($or$cond) {
       $105 = HEAP32[$5>>2]|0;
       $106 = ((($105)) + 1|0);
       HEAP32[$5>>2] = $106;
       HEAP8[$105>>0] = $79;
       $107 = HEAP8[$13>>0]|0;
       $108 = ($107<<24>>24)<(0);
       $109 = HEAP32[$16>>2]|0;
       $110 = $107&255;
       $111 = $108 ? $109 : $110;
       $112 = (($111) + -1)|0;
       $113 = ($$078>>>0)<($112>>>0);
       $114 = $113&1;
       $spec$select = (($$078) + ($114))|0;
       $$1 = $spec$select;$$180 = 0;
      } else {
       $$1 = $$078;$$180 = $$079;
      }
      $115 = HEAP8[$$0>>0]|0;
      $116 = HEAP32[$8>>2]|0;
      $117 = ((($116)) + 28|0);
      $118 = HEAP32[$117>>2]|0;
      __THREW__ = 0;
      $119 = (invoke_iii($118|0,($8|0),($115|0))|0);
      $120 = __THREW__; __THREW__ = 0;
      $121 = $120&1;
      if ($121) {
       label = 31;
       break;
      }
      $122 = HEAP32[$5>>2]|0;
      $123 = ((($122)) + 1|0);
      HEAP32[$5>>2] = $123;
      HEAP8[$122>>0] = $119;
      $124 = (($$180) + 1)|0;
      $125 = ((($$0)) + 1|0);
      $$0 = $125;$$078 = $$1;$$079 = $124;
     }
     if ((label|0) == 31) {
      $126 = ___cxa_find_matching_catch_2()|0;
      $127 = (getTempRet0() | 0);
      $$sink97$index = $126;$$sink97$index4 = $127;
      label = 34;
      break L1;
     }
     $83 = $$184;
     $84 = $0;
     $85 = (($83) - ($84))|0;
     $86 = (($3) + ($85)|0);
     $87 = HEAP32[$5>>2]|0;
     $88 = ($86|0)==($87|0);
     if ($88) {
      $$pre$phiZ2D = $84;$132 = $86;
      label = 33;
      break L1;
     }
     $$0$i$i92 = $87;$$07$i$i91 = $86;
     while(1) {
      $89 = ((($$0$i$i92)) + -1|0);
      $90 = ($$07$i$i91>>>0)<($89>>>0);
      if (!($90)) {
       break;
      }
      $91 = HEAP8[$$07$i$i91>>0]|0;
      $92 = HEAP8[$89>>0]|0;
      HEAP8[$$07$i$i91>>0] = $92;
      HEAP8[$89>>0] = $91;
      $93 = ((($$07$i$i91)) + 1|0);
      $$0$i$i92 = $89;$$07$i$i91 = $93;
     }
     $$pre = HEAP32[$5>>2]|0;
     $$pre$phiZ2D = $84;$132 = $$pre;
     label = 33;
     break L1;
    }
   } while(0);
   $42 = ___cxa_find_matching_catch_2()|0;
   $43 = (getTempRet0() | 0);
   $$sink97$index = $42;$$sink97$index4 = $43;
   label = 34;
  }
 } while(0);
 if ((label|0) == 33) {
  $128 = ($1|0)==($2|0);
  $129 = $1;
  $130 = (($129) - ($$pre$phiZ2D))|0;
  $131 = (($3) + ($130)|0);
  $storemerge = $128 ? $132 : $131;
  HEAP32[$4>>2] = $storemerge;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 34) {
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7);
  ___resumeException($$sink97$index|0);
  // unreachable;
 }
}
function __ZNSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}
function __ZNSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$0$i$i = 0, $$011 = 0, $$byval_copy = 0, $$pre = 0, $$pre18 = 0, $$sroa$0$0 = 0, $$sroa$0$0$copyload = 0, $$sroa$013$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $5 = sp;
 $6 = ((($2)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 & 1;
 $9 = ($8|0)==(0);
 L1: do {
  if ($9) {
   $10 = HEAP32[$0>>2]|0;
   $11 = ((($10)) + 24|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = HEAP32[$1>>2]|0;
   HEAP32[$5>>2] = $13;
   $14 = $4&1;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$5>>2]|0;
   $15 = (FUNCTION_TABLE_iiiiii[$12 & 31]($0,$$byval_copy,$2,$3,$14)|0);
   $$sroa$0$0 = $15;
  } else {
   __ZNKSt3__28ios_base6getlocEv($$byval_copy,$2);
   __THREW__ = 0;
   $16 = (invoke_iii(37,($$byval_copy|0),(50780|0))|0);
   $17 = __THREW__; __THREW__ = 0;
   $18 = $17&1;
   do {
    if ($18) {
     $40 = ___cxa_find_matching_catch_2()|0;
     $41 = (getTempRet0() | 0);
     __ZNSt3__26localeD2Ev($$byval_copy);
     $$0 = $41;$$011 = $40;
    } else {
     __ZNSt3__26localeD2Ev($$byval_copy);
     $19 = HEAP32[$16>>2]|0;
     if ($4) {
      $20 = ((($19)) + 24|0);
      $21 = HEAP32[$20>>2]|0;
      FUNCTION_TABLE_vii[$21 & 255]($$byval_copy,$16);
     } else {
      $22 = ((($19)) + 28|0);
      $23 = HEAP32[$22>>2]|0;
      FUNCTION_TABLE_vii[$23 & 255]($$byval_copy,$16);
     }
     $24 = ((($$byval_copy)) + 8|0);
     $25 = ((($24)) + 3|0);
     $26 = HEAP8[$25>>0]|0;
     $27 = ($26<<24>>24)<(0);
     $28 = HEAP32[$$byval_copy>>2]|0;
     $29 = $27 ? $28 : $$byval_copy;
     $30 = ((($$byval_copy)) + 4|0);
     $$sroa$013$0 = $29;$32 = $26;$36 = $28;
     while(1) {
      $31 = ($32<<24>>24)<(0);
      $33 = HEAP32[$30>>2]|0;
      $34 = $32&255;
      $35 = $31 ? $36 : $$byval_copy;
      $37 = $31 ? $33 : $34;
      $38 = (($35) + ($37<<2)|0);
      $39 = ($$sroa$013$0|0)==($38|0);
      if ($39) {
       label = 9;
       break;
      }
      $42 = HEAP32[$$sroa$013$0>>2]|0;
      $43 = HEAP32[$1>>2]|0;
      $44 = ($43|0)==(0|0);
      if (!($44)) {
       $45 = ((($43)) + 24|0);
       $46 = HEAP32[$45>>2]|0;
       $47 = ((($43)) + 28|0);
       $48 = HEAP32[$47>>2]|0;
       $49 = ($46|0)==($48|0);
       if ($49) {
        $50 = HEAP32[$43>>2]|0;
        $51 = ((($50)) + 52|0);
        $52 = HEAP32[$51>>2]|0;
        $53 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($42)|0);
        __THREW__ = 0;
        $54 = (invoke_iii($52|0,($43|0),($53|0))|0);
        $55 = __THREW__; __THREW__ = 0;
        $56 = $55&1;
        if ($56) {
         label = 18;
         break;
        } else {
         $$0$i$i = $54;
        }
       } else {
        $57 = ((($46)) + 4|0);
        HEAP32[$45>>2] = $57;
        HEAP32[$46>>2] = $42;
        $58 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($42)|0);
        $$0$i$i = $58;
       }
       $59 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
       $60 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i,$59)|0);
       if ($60) {
        HEAP32[$1>>2] = 0;
       }
      }
      $61 = ((($$sroa$013$0)) + 4|0);
      $$pre = HEAP8[$25>>0]|0;
      $$pre18 = HEAP32[$$byval_copy>>2]|0;
      $$sroa$013$0 = $61;$32 = $$pre;$36 = $$pre18;
     }
     if ((label|0) == 9) {
      $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
      __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($$byval_copy);
      $$sroa$0$0 = $$sroa$0$0$copyload;
      break L1;
     }
     else if ((label|0) == 18) {
      $62 = ___cxa_find_matching_catch_2()|0;
      $63 = (getTempRet0() | 0);
      __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($$byval_copy);
      $$0 = $63;$$011 = $62;
      break;
     }
    }
   } while(0);
   ___resumeException($$011|0);
   // unreachable;
  }
 } while(0);
 STACKTOP = sp;return ($$sroa$0$0|0);
}
function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$alloca_mul = 0, $$alloca_mul6 = 0, $$byval_copy = 0, $$lobit = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $$byval_copy = sp;
 $5 = sp + 16|0;
 $6 = sp + 12|0;
 $7 = sp + 4|0;
 $8 = sp + 8|0;
 ;HEAP8[$5>>0]=HEAP8[41846>>0]|0;HEAP8[$5+1>>0]=HEAP8[41846+1>>0]|0;HEAP8[$5+2>>0]=HEAP8[41846+2>>0]|0;HEAP8[$5+3>>0]=HEAP8[41846+3>>0]|0;HEAP8[$5+4>>0]=HEAP8[41846+4>>0]|0;HEAP8[$5+5>>0]=HEAP8[41846+5>>0]|0;
 $9 = ((($5)) + 1|0);
 $10 = ((($2)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj($9,41852,1,$11);
 $12 = HEAP32[$10>>2]|0;
 $13 = $12 >>> 9;
 $$lobit = $13 & 1;
 $14 = (($$lobit) + 13)|0;
 $15 = (_llvm_stacksave()|0);
 $$alloca_mul = $14;
 $16 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul)|0)+15)&-16)|0);;
 $17 = (__ZNSt3__26__clocEv()|0);
 HEAP32[$$byval_copy>>2] = $4;
 $18 = (__ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($16,$14,$17,$5,$$byval_copy)|0);
 $19 = (($16) + ($18)|0);
 $20 = (__ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($16,$19,$2)|0);
 $21 = $$lobit << 1;
 $22 = $21 | 24;
 $23 = (($22) + -1)|0;
 $$alloca_mul6 = $23<<2;
 $24 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul6)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul6)|0)+15)&-16)|0);;
 __ZNKSt3__28ios_base6getlocEv($$byval_copy,$2);
 __THREW__ = 0;
 invoke_viiiiiii(3,($16|0),($20|0),($19|0),($24|0),($6|0),($7|0),($$byval_copy|0));
 $25 = __THREW__; __THREW__ = 0;
 $26 = $25&1;
 if ($26) {
  $31 = ___cxa_find_matching_catch_2()|0;
  $32 = (getTempRet0() | 0);
  __ZNSt3__26localeD2Ev($$byval_copy);
  ___resumeException($31|0);
  // unreachable;
 } else {
  __ZNSt3__26localeD2Ev($$byval_copy);
  $27 = HEAP32[$1>>2]|0;
  HEAP32[$8>>2] = $27;
  $28 = HEAP32[$6>>2]|0;
  $29 = HEAP32[$7>>2]|0;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$8>>2]|0;
  $30 = (__ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$24,$28,$29,$2,$3)|0);
  _llvm_stackrestore(($15|0));
  STACKTOP = sp;return ($30|0);
 }
 return (0)|0;
}
function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$alloca_mul = 0, $$alloca_mul6 = 0, $$byval_copy = 0, $$lobit = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $$byval_copy = sp + 8|0;
 $6 = sp;
 $7 = sp + 24|0;
 $8 = sp + 16|0;
 $9 = sp + 20|0;
 $10 = $6;
 $11 = $10;
 HEAP32[$11>>2] = 37;
 $12 = (($10) + 4)|0;
 $13 = $12;
 HEAP32[$13>>2] = 0;
 $14 = ((($6)) + 1|0);
 $15 = ((($2)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj($14,41843,1,$16);
 $17 = HEAP32[$15>>2]|0;
 $18 = $17 >>> 9;
 $$lobit = $18 & 1;
 $19 = (($$lobit) + 23)|0;
 $20 = (_llvm_stacksave()|0);
 $$alloca_mul = $19;
 $21 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul)|0)+15)&-16)|0);;
 $22 = (__ZNSt3__26__clocEv()|0);
 $23 = $$byval_copy;
 $24 = $23;
 HEAP32[$24>>2] = $4;
 $25 = (($23) + 4)|0;
 $26 = $25;
 HEAP32[$26>>2] = $5;
 $27 = (__ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($21,$19,$22,$6,$$byval_copy)|0);
 $28 = (($21) + ($27)|0);
 $29 = (__ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($21,$28,$2)|0);
 $30 = $$lobit << 1;
 $31 = $30 | 44;
 $32 = (($31) + -1)|0;
 $$alloca_mul6 = $32<<2;
 $33 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul6)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul6)|0)+15)&-16)|0);;
 __ZNKSt3__28ios_base6getlocEv($$byval_copy,$2);
 __THREW__ = 0;
 invoke_viiiiiii(3,($21|0),($29|0),($28|0),($33|0),($7|0),($8|0),($$byval_copy|0));
 $34 = __THREW__; __THREW__ = 0;
 $35 = $34&1;
 if ($35) {
  $40 = ___cxa_find_matching_catch_2()|0;
  $41 = (getTempRet0() | 0);
  __ZNSt3__26localeD2Ev($$byval_copy);
  ___resumeException($40|0);
  // unreachable;
 } else {
  __ZNSt3__26localeD2Ev($$byval_copy);
  $36 = HEAP32[$1>>2]|0;
  HEAP32[$9>>2] = $36;
  $37 = HEAP32[$7>>2]|0;
  $38 = HEAP32[$8>>2]|0;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$9>>2]|0;
  $39 = (__ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$33,$37,$38,$2,$3)|0);
  _llvm_stackrestore(($20|0));
  STACKTOP = sp;return ($39|0);
 }
 return (0)|0;
}
function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$alloca_mul = 0, $$alloca_mul6 = 0, $$byval_copy = 0, $$lobit = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $$byval_copy = sp;
 $5 = sp + 16|0;
 $6 = sp + 12|0;
 $7 = sp + 4|0;
 $8 = sp + 8|0;
 ;HEAP8[$5>>0]=HEAP8[41846>>0]|0;HEAP8[$5+1>>0]=HEAP8[41846+1>>0]|0;HEAP8[$5+2>>0]=HEAP8[41846+2>>0]|0;HEAP8[$5+3>>0]=HEAP8[41846+3>>0]|0;HEAP8[$5+4>>0]=HEAP8[41846+4>>0]|0;HEAP8[$5+5>>0]=HEAP8[41846+5>>0]|0;
 $9 = ((($5)) + 1|0);
 $10 = ((($2)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj($9,41852,0,$11);
 $12 = HEAP32[$10>>2]|0;
 $13 = $12 >>> 9;
 $$lobit = $13 & 1;
 $14 = $$lobit | 12;
 $15 = (_llvm_stacksave()|0);
 $$alloca_mul = $14;
 $16 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul)|0)+15)&-16)|0);;
 $17 = (__ZNSt3__26__clocEv()|0);
 HEAP32[$$byval_copy>>2] = $4;
 $18 = (__ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($16,$14,$17,$5,$$byval_copy)|0);
 $19 = (($16) + ($18)|0);
 $20 = (__ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($16,$19,$2)|0);
 $21 = $$lobit << 1;
 $22 = $21 | 21;
 $$alloca_mul6 = $22<<2;
 $23 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul6)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul6)|0)+15)&-16)|0);;
 __ZNKSt3__28ios_base6getlocEv($$byval_copy,$2);
 __THREW__ = 0;
 invoke_viiiiiii(3,($16|0),($20|0),($19|0),($23|0),($6|0),($7|0),($$byval_copy|0));
 $24 = __THREW__; __THREW__ = 0;
 $25 = $24&1;
 if ($25) {
  $30 = ___cxa_find_matching_catch_2()|0;
  $31 = (getTempRet0() | 0);
  __ZNSt3__26localeD2Ev($$byval_copy);
  ___resumeException($30|0);
  // unreachable;
 } else {
  __ZNSt3__26localeD2Ev($$byval_copy);
  $26 = HEAP32[$1>>2]|0;
  HEAP32[$8>>2] = $26;
  $27 = HEAP32[$6>>2]|0;
  $28 = HEAP32[$7>>2]|0;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$8>>2]|0;
  $29 = (__ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$23,$27,$28,$2,$3)|0);
  _llvm_stackrestore(($15|0));
  STACKTOP = sp;return ($29|0);
 }
 return (0)|0;
}
function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$alloca_mul = 0, $$alloca_mul6 = 0, $$byval_copy = 0, $$lobit = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $$byval_copy = sp + 8|0;
 $6 = sp;
 $7 = sp + 24|0;
 $8 = sp + 16|0;
 $9 = sp + 20|0;
 $10 = $6;
 $11 = $10;
 HEAP32[$11>>2] = 37;
 $12 = (($10) + 4)|0;
 $13 = $12;
 HEAP32[$13>>2] = 0;
 $14 = ((($6)) + 1|0);
 $15 = ((($2)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj($14,41843,0,$16);
 $17 = HEAP32[$15>>2]|0;
 $18 = $17 >>> 9;
 $$lobit = $18 & 1;
 $19 = $$lobit | 22;
 $20 = (($19) + 1)|0;
 $21 = (_llvm_stacksave()|0);
 $$alloca_mul = $20;
 $22 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul)|0)+15)&-16)|0);;
 $23 = (__ZNSt3__26__clocEv()|0);
 $24 = $$byval_copy;
 $25 = $24;
 HEAP32[$25>>2] = $4;
 $26 = (($24) + 4)|0;
 $27 = $26;
 HEAP32[$27>>2] = $5;
 $28 = (__ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($22,$20,$23,$6,$$byval_copy)|0);
 $29 = (($22) + ($28)|0);
 $30 = (__ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($22,$29,$2)|0);
 $31 = $19 << 1;
 $32 = (($31) + -1)|0;
 $$alloca_mul6 = $32<<2;
 $33 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul6)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul6)|0)+15)&-16)|0);;
 __ZNKSt3__28ios_base6getlocEv($$byval_copy,$2);
 __THREW__ = 0;
 invoke_viiiiiii(3,($22|0),($30|0),($29|0),($33|0),($7|0),($8|0),($$byval_copy|0));
 $34 = __THREW__; __THREW__ = 0;
 $35 = $34&1;
 if ($35) {
  $40 = ___cxa_find_matching_catch_2()|0;
  $41 = (getTempRet0() | 0);
  __ZNSt3__26localeD2Ev($$byval_copy);
  ___resumeException($40|0);
  // unreachable;
 } else {
  __ZNSt3__26localeD2Ev($$byval_copy);
  $36 = HEAP32[$1>>2]|0;
  HEAP32[$9>>2] = $36;
  $37 = HEAP32[$7>>2]|0;
  $38 = HEAP32[$8>>2]|0;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$9>>2]|0;
  $39 = (__ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$33,$37,$38,$2,$3)|0);
  _llvm_stackrestore(($21|0));
  STACKTOP = sp;return ($39|0);
 }
 return (0)|0;
}
function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = +$4;
 var $$0 = 0, $$046 = 0, $$1 = 0, $$148 = 0, $$151 = 0, $$2 = 0, $$24980 = 0, $$25279 = 0, $$45482 = 0, $$483 = 0, $$byval_copy = 0, $$pre = 0, $$sroa$058$0 = 0, $$sroa$069$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(352|0);
 $$byval_copy = sp + 344|0;
 $vararg_buffer9 = sp + 320|0;
 $vararg_buffer5 = sp + 304|0;
 $vararg_buffer2 = sp + 296|0;
 $vararg_buffer = sp + 280|0;
 $5 = sp + 272|0;
 $6 = sp + 240|0;
 $7 = sp + 340|0;
 $8 = sp;
 $9 = sp + 336|0;
 $10 = sp + 332|0;
 $11 = sp + 328|0;
 $12 = $5;
 $13 = $12;
 HEAP32[$13>>2] = 37;
 $14 = (($12) + 4)|0;
 $15 = $14;
 HEAP32[$15>>2] = 0;
 $16 = ((($5)) + 1|0);
 $17 = ((($2)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (__ZNSt3__214__num_put_base14__format_floatEPcPKcj($16,51188,$18)|0);
 HEAP32[$7>>2] = $6;
 $20 = (__ZNSt3__26__clocEv()|0);
 if ($19) {
  $21 = ((($2)) + 8|0);
  $22 = HEAP32[$21>>2]|0;
  HEAP32[$vararg_buffer>>2] = $22;
  $vararg_ptr1 = ((($vararg_buffer)) + 8|0);
  HEAPF64[$vararg_ptr1>>3] = $4;
  $23 = (__ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($6,30,$20,$5,$vararg_buffer)|0);
  $$0 = $23;
 } else {
  HEAPF64[$vararg_buffer2>>3] = $4;
  $24 = (__ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($6,30,$20,$5,$vararg_buffer2)|0);
  $$0 = $24;
 }
 $25 = ($$0|0)>(29);
 L5: do {
  if ($25) {
   if ($19) {
    __THREW__ = 0;
    $26 = (invoke_i(24)|0);
    $27 = __THREW__; __THREW__ = 0;
    $28 = $27&1;
    if (!($28)) {
     $29 = ((($2)) + 8|0);
     $30 = HEAP32[$29>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer5>>2] = $30;
     $vararg_ptr8 = ((($vararg_buffer5)) + 8|0);
     HEAPF64[$vararg_ptr8>>3] = $4;
     $31 = (invoke_iiiii(18,($7|0),($26|0),($5|0),($vararg_buffer5|0))|0);
     $32 = __THREW__; __THREW__ = 0;
     $33 = $32&1;
     if (!($33)) {
      $$1 = $31;
      label = 12;
     }
    }
   } else {
    __THREW__ = 0;
    $36 = (invoke_i(24)|0);
    $37 = __THREW__; __THREW__ = 0;
    $38 = $37&1;
    if (!($38)) {
     __THREW__ = 0;
     HEAPF64[$vararg_buffer9>>3] = $4;
     $39 = (invoke_iiiii(18,($7|0),($36|0),($5|0),($vararg_buffer9|0))|0);
     $40 = __THREW__; __THREW__ = 0;
     $41 = $40&1;
     if (!($41)) {
      $$1 = $39;
      label = 12;
     }
    }
   }
   do {
    if ((label|0) == 12) {
     $42 = HEAP32[$7>>2]|0;
     $43 = ($42|0)==(0|0);
     if ($43) {
      __THREW__ = 0;
      invoke_v(4);
      $44 = __THREW__; __THREW__ = 0;
      break;
     } else {
      $45 = $42;
      $$2 = $$1;$$sroa$069$0 = $45;$47 = $42;
      label = 15;
      break L5;
     }
    }
   } while(0);
   $34 = ___cxa_find_matching_catch_2()|0;
   $35 = (getTempRet0() | 0);
   $$45482 = $35;$$483 = $34;
  } else {
   $$pre = HEAP32[$7>>2]|0;
   $$2 = $$0;$$sroa$069$0 = 0;$47 = $$pre;
   label = 15;
  }
 } while(0);
 if ((label|0) == 15) {
  $46 = (($47) + ($$2)|0);
  $48 = (__ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($47,$46,$2)|0);
  $49 = ($47|0)==($6|0);
  do {
   if ($49) {
    $$046 = $8;$$sroa$058$0 = 0;
    label = 19;
   } else {
    $50 = $$2 << 3;
    $51 = (_malloc($50)|0);
    $52 = ($51|0)==(0|0);
    if ($52) {
     __THREW__ = 0;
     invoke_v(4);
     $53 = __THREW__; __THREW__ = 0;
     $54 = ___cxa_find_matching_catch_2()|0;
     $55 = (getTempRet0() | 0);
     $$24980 = $54;$$25279 = $55;
     break;
    } else {
     $56 = $51;
     $$046 = $51;$$sroa$058$0 = $56;
     label = 19;
     break;
    }
   }
  } while(0);
  if ((label|0) == 19) {
   __ZNKSt3__28ios_base6getlocEv($$byval_copy,$2);
   __THREW__ = 0;
   invoke_viiiiiii(4,($47|0),($48|0),($46|0),($$046|0),($9|0),($10|0),($$byval_copy|0));
   $57 = __THREW__; __THREW__ = 0;
   $58 = $57&1;
   do {
    if ($58) {
     $69 = ___cxa_find_matching_catch_2()|0;
     $70 = (getTempRet0() | 0);
     __ZNSt3__26localeD2Ev($$byval_copy);
     $$148 = $69;$$151 = $70;
    } else {
     __ZNSt3__26localeD2Ev($$byval_copy);
     $59 = HEAP32[$1>>2]|0;
     HEAP32[$11>>2] = $59;
     $60 = HEAP32[$9>>2]|0;
     $61 = HEAP32[$10>>2]|0;
     __THREW__ = 0;
     ;HEAP32[$$byval_copy>>2]=HEAP32[$11>>2]|0;
     $62 = (invoke_iiiiiii(40,($$byval_copy|0),($$046|0),($60|0),($61|0),($2|0),($3|0))|0);
     $63 = __THREW__; __THREW__ = 0;
     $64 = $63&1;
     if ($64) {
      $71 = ___cxa_find_matching_catch_2()|0;
      $72 = (getTempRet0() | 0);
      $$148 = $71;$$151 = $72;
      break;
     }
     HEAP32[$1>>2] = $62;
     $65 = ($$sroa$058$0|0)==(0);
     if (!($65)) {
      $66 = $$sroa$058$0;
      _free($66);
     }
     $67 = ($$sroa$069$0|0)==(0);
     if (!($67)) {
      $68 = $$sroa$069$0;
      _free($68);
     }
     STACKTOP = sp;return ($62|0);
    }
   } while(0);
   $73 = ($$sroa$058$0|0)==(0);
   if ($73) {
    $$24980 = $$148;$$25279 = $$151;
   } else {
    $74 = $$sroa$058$0;
    _free($74);
    $$24980 = $$148;$$25279 = $$151;
   }
  }
  $75 = ($$sroa$069$0|0)==(0);
  if ($75) {
   $$45482 = $$25279;$$483 = $$24980;
  } else {
   $76 = $$sroa$069$0;
   _free($76);
   $$45482 = $$25279;$$483 = $$24980;
  }
 }
 ___resumeException($$483|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = +$4;
 var $$0 = 0, $$046 = 0, $$1 = 0, $$148 = 0, $$151 = 0, $$2 = 0, $$24980 = 0, $$25279 = 0, $$45482 = 0, $$483 = 0, $$byval_copy = 0, $$pre = 0, $$sroa$058$0 = 0, $$sroa$069$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(352|0);
 $$byval_copy = sp + 344|0;
 $vararg_buffer9 = sp + 320|0;
 $vararg_buffer5 = sp + 304|0;
 $vararg_buffer2 = sp + 296|0;
 $vararg_buffer = sp + 280|0;
 $5 = sp + 272|0;
 $6 = sp + 240|0;
 $7 = sp + 340|0;
 $8 = sp;
 $9 = sp + 336|0;
 $10 = sp + 332|0;
 $11 = sp + 328|0;
 $12 = $5;
 $13 = $12;
 HEAP32[$13>>2] = 37;
 $14 = (($12) + 4)|0;
 $15 = $14;
 HEAP32[$15>>2] = 0;
 $16 = ((($5)) + 1|0);
 $17 = ((($2)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (__ZNSt3__214__num_put_base14__format_floatEPcPKcj($16,41841,$18)|0);
 HEAP32[$7>>2] = $6;
 $20 = (__ZNSt3__26__clocEv()|0);
 if ($19) {
  $21 = ((($2)) + 8|0);
  $22 = HEAP32[$21>>2]|0;
  HEAP32[$vararg_buffer>>2] = $22;
  $vararg_ptr1 = ((($vararg_buffer)) + 8|0);
  HEAPF64[$vararg_ptr1>>3] = $4;
  $23 = (__ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($6,30,$20,$5,$vararg_buffer)|0);
  $$0 = $23;
 } else {
  HEAPF64[$vararg_buffer2>>3] = $4;
  $24 = (__ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($6,30,$20,$5,$vararg_buffer2)|0);
  $$0 = $24;
 }
 $25 = ($$0|0)>(29);
 L5: do {
  if ($25) {
   if ($19) {
    __THREW__ = 0;
    $26 = (invoke_i(24)|0);
    $27 = __THREW__; __THREW__ = 0;
    $28 = $27&1;
    if (!($28)) {
     $29 = ((($2)) + 8|0);
     $30 = HEAP32[$29>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer5>>2] = $30;
     $vararg_ptr8 = ((($vararg_buffer5)) + 8|0);
     HEAPF64[$vararg_ptr8>>3] = $4;
     $31 = (invoke_iiiii(18,($7|0),($26|0),($5|0),($vararg_buffer5|0))|0);
     $32 = __THREW__; __THREW__ = 0;
     $33 = $32&1;
     if (!($33)) {
      $$1 = $31;
      label = 12;
     }
    }
   } else {
    __THREW__ = 0;
    $36 = (invoke_i(24)|0);
    $37 = __THREW__; __THREW__ = 0;
    $38 = $37&1;
    if (!($38)) {
     __THREW__ = 0;
     HEAPF64[$vararg_buffer9>>3] = $4;
     $39 = (invoke_iiiii(18,($7|0),($36|0),($5|0),($vararg_buffer9|0))|0);
     $40 = __THREW__; __THREW__ = 0;
     $41 = $40&1;
     if (!($41)) {
      $$1 = $39;
      label = 12;
     }
    }
   }
   do {
    if ((label|0) == 12) {
     $42 = HEAP32[$7>>2]|0;
     $43 = ($42|0)==(0|0);
     if ($43) {
      __THREW__ = 0;
      invoke_v(4);
      $44 = __THREW__; __THREW__ = 0;
      break;
     } else {
      $45 = $42;
      $$2 = $$1;$$sroa$069$0 = $45;$47 = $42;
      label = 15;
      break L5;
     }
    }
   } while(0);
   $34 = ___cxa_find_matching_catch_2()|0;
   $35 = (getTempRet0() | 0);
   $$45482 = $35;$$483 = $34;
  } else {
   $$pre = HEAP32[$7>>2]|0;
   $$2 = $$0;$$sroa$069$0 = 0;$47 = $$pre;
   label = 15;
  }
 } while(0);
 if ((label|0) == 15) {
  $46 = (($47) + ($$2)|0);
  $48 = (__ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($47,$46,$2)|0);
  $49 = ($47|0)==($6|0);
  do {
   if ($49) {
    $$046 = $8;$$sroa$058$0 = 0;
    label = 19;
   } else {
    $50 = $$2 << 3;
    $51 = (_malloc($50)|0);
    $52 = ($51|0)==(0|0);
    if ($52) {
     __THREW__ = 0;
     invoke_v(4);
     $53 = __THREW__; __THREW__ = 0;
     $54 = ___cxa_find_matching_catch_2()|0;
     $55 = (getTempRet0() | 0);
     $$24980 = $54;$$25279 = $55;
     break;
    } else {
     $56 = $51;
     $$046 = $51;$$sroa$058$0 = $56;
     label = 19;
     break;
    }
   }
  } while(0);
  if ((label|0) == 19) {
   __ZNKSt3__28ios_base6getlocEv($$byval_copy,$2);
   __THREW__ = 0;
   invoke_viiiiiii(4,($47|0),($48|0),($46|0),($$046|0),($9|0),($10|0),($$byval_copy|0));
   $57 = __THREW__; __THREW__ = 0;
   $58 = $57&1;
   do {
    if ($58) {
     $69 = ___cxa_find_matching_catch_2()|0;
     $70 = (getTempRet0() | 0);
     __ZNSt3__26localeD2Ev($$byval_copy);
     $$148 = $69;$$151 = $70;
    } else {
     __ZNSt3__26localeD2Ev($$byval_copy);
     $59 = HEAP32[$1>>2]|0;
     HEAP32[$11>>2] = $59;
     $60 = HEAP32[$9>>2]|0;
     $61 = HEAP32[$10>>2]|0;
     __THREW__ = 0;
     ;HEAP32[$$byval_copy>>2]=HEAP32[$11>>2]|0;
     $62 = (invoke_iiiiiii(40,($$byval_copy|0),($$046|0),($60|0),($61|0),($2|0),($3|0))|0);
     $63 = __THREW__; __THREW__ = 0;
     $64 = $63&1;
     if ($64) {
      $71 = ___cxa_find_matching_catch_2()|0;
      $72 = (getTempRet0() | 0);
      $$148 = $71;$$151 = $72;
      break;
     }
     HEAP32[$1>>2] = $62;
     $65 = ($$sroa$058$0|0)==(0);
     if (!($65)) {
      $66 = $$sroa$058$0;
      _free($66);
     }
     $67 = ($$sroa$069$0|0)==(0);
     if (!($67)) {
      $68 = $$sroa$069$0;
      _free($68);
     }
     STACKTOP = sp;return ($62|0);
    }
   } while(0);
   $73 = ($$sroa$058$0|0)==(0);
   if ($73) {
    $$24980 = $$148;$$25279 = $$151;
   } else {
    $74 = $$sroa$058$0;
    _free($74);
    $$24980 = $$148;$$25279 = $$151;
   }
  }
  $75 = ($$sroa$069$0|0)==(0);
  if ($75) {
   $$45482 = $$25279;$$483 = $$24980;
  } else {
   $76 = $$sroa$069$0;
   _free($76);
   $$45482 = $$25279;$$483 = $$24980;
  }
 }
 ___resumeException($$483|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(208|0);
 $$byval_copy = sp + 184|0;
 $5 = sp + 192|0;
 $6 = sp + 160|0;
 $7 = sp;
 $8 = sp + 188|0;
 ;HEAP8[$5>>0]=HEAP8[41835>>0]|0;HEAP8[$5+1>>0]=HEAP8[41835+1>>0]|0;HEAP8[$5+2>>0]=HEAP8[41835+2>>0]|0;HEAP8[$5+3>>0]=HEAP8[41835+3>>0]|0;HEAP8[$5+4>>0]=HEAP8[41835+4>>0]|0;HEAP8[$5+5>>0]=HEAP8[41835+5>>0]|0;
 $9 = (__ZNSt3__26__clocEv()|0);
 HEAP32[$$byval_copy>>2] = $4;
 $10 = (__ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($6,20,$9,$5,$$byval_copy)|0);
 $11 = (($6) + ($10)|0);
 $12 = (__ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($6,$11,$2)|0);
 __ZNKSt3__28ios_base6getlocEv($$byval_copy,$2);
 __THREW__ = 0;
 $13 = (invoke_iii(37,($$byval_copy|0),(50772|0))|0);
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 if ($15) {
  $27 = ___cxa_find_matching_catch_2()|0;
  $28 = (getTempRet0() | 0);
  __ZNSt3__26localeD2Ev($$byval_copy);
  ___resumeException($27|0);
  // unreachable;
 } else {
  __ZNSt3__26localeD2Ev($$byval_copy);
  $16 = HEAP32[$13>>2]|0;
  $17 = ((($16)) + 48|0);
  $18 = HEAP32[$17>>2]|0;
  (FUNCTION_TABLE_iiiii[$18 & 31]($13,$6,$11,$7)|0);
  $19 = (($7) + ($10<<2)|0);
  $20 = ($12|0)==($11|0);
  $21 = $6;
  $22 = $12;
  $23 = (($22) - ($21))|0;
  $24 = (($7) + ($23<<2)|0);
  $$0 = $20 ? $19 : $24;
  $25 = HEAP32[$1>>2]|0;
  HEAP32[$8>>2] = $25;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$8>>2]|0;
  $26 = (__ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy,$7,$$0,$19,$2,$3)|0);
  STACKTOP = sp;return ($26|0);
 }
 return (0)|0;
}
function __ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $$sroa$0$2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $6 = sp;
 $7 = HEAP32[$0>>2]|0;
 $8 = ($7|0)==(0|0);
 L1: do {
  if ($8) {
   $$sroa$0$2 = 0;
  } else {
   $9 = $3;
   $10 = $1;
   $11 = (($9) - ($10))|0;
   $12 = $11 >> 2;
   $13 = ((($4)) + 12|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ($14|0)>($12|0);
   $16 = (($14) - ($12))|0;
   $$0 = $15 ? $16 : 0;
   $17 = $2;
   $18 = (($17) - ($10))|0;
   $19 = $18 >> 2;
   $20 = ($18|0)>(0);
   if ($20) {
    $21 = HEAP32[$7>>2]|0;
    $22 = ((($21)) + 48|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = (FUNCTION_TABLE_iiii[$23 & 63]($7,$1,$19)|0);
    $25 = ($24|0)==($19|0);
    if (!($25)) {
     HEAP32[$0>>2] = 0;
     $$sroa$0$2 = 0;
     break;
    }
   }
   $26 = ($$0|0)>(0);
   do {
    if ($26) {
     ;HEAP32[$6>>2]=0|0;HEAP32[$6+4>>2]=0|0;HEAP32[$6+8>>2]=0|0;
     __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEmw($6,$$0,$5);
     $27 = ((($6)) + 8|0);
     $28 = ((($27)) + 3|0);
     $29 = HEAP8[$28>>0]|0;
     $30 = ($29<<24>>24)<(0);
     $31 = HEAP32[$6>>2]|0;
     $32 = $30 ? $31 : $6;
     $33 = HEAP32[$7>>2]|0;
     $34 = ((($33)) + 48|0);
     $35 = HEAP32[$34>>2]|0;
     __THREW__ = 0;
     $36 = (invoke_iiii($35|0,($7|0),($32|0),($$0|0))|0);
     $37 = __THREW__; __THREW__ = 0;
     $38 = $37&1;
     if ($38) {
      $40 = ___cxa_find_matching_catch_2()|0;
      $41 = (getTempRet0() | 0);
      __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($6);
      ___resumeException($40|0);
      // unreachable;
     }
     $39 = ($36|0)==($$0|0);
     if ($39) {
      __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($6);
      break;
     } else {
      HEAP32[$0>>2] = 0;
      __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($6);
      $$sroa$0$2 = 0;
      break L1;
     }
    }
   } while(0);
   $42 = (($9) - ($17))|0;
   $43 = $42 >> 2;
   $44 = ($42|0)>(0);
   if ($44) {
    $45 = HEAP32[$7>>2]|0;
    $46 = ((($45)) + 48|0);
    $47 = HEAP32[$46>>2]|0;
    $48 = (FUNCTION_TABLE_iiii[$47 & 63]($7,$2,$43)|0);
    $49 = ($48|0)==($43|0);
    if (!($49)) {
     HEAP32[$0>>2] = 0;
     $$sroa$0$2 = 0;
     break;
    }
   }
   HEAP32[$13>>2] = 0;
   $$sroa$0$2 = $7;
  }
 } while(0);
 STACKTOP = sp;return ($$sroa$0$2|0);
}
function __ZNSt3__29__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i130 = 0, $$0111 = 0, $$0112 = 0, $$0114 = 0, $$0116 = 0, $$07$i$i = 0, $$07$i$i129 = 0, $$1 = 0, $$1113 = 0, $$1115 = 0, $$1117 = 0, $$2 = 0, $$2118 = 0, $$3 = 0, $$pre$phiZ2D = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $lpad$phi$sink166$index = 0, $lpad$phi$sink166$index7 = 0, $or$cond = 0, $spec$select = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $7 = sp;
 $8 = (__ZNKSt3__26locale9use_facetERNS0_2idE($6,50772)|0);
 $9 = (__ZNKSt3__26locale9use_facetERNS0_2idE($6,50780)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 20|0);
 $12 = HEAP32[$11>>2]|0;
 FUNCTION_TABLE_vii[$12 & 255]($7,$9);
 HEAP32[$5>>2] = $3;
 $13 = HEAP8[$0>>0]|0;
 L1: do {
  switch ($13<<24>>24) {
  case 43: case 45:  {
   $14 = HEAP32[$8>>2]|0;
   $15 = ((($14)) + 44|0);
   $16 = HEAP32[$15>>2]|0;
   __THREW__ = 0;
   $17 = (invoke_iii($16|0,($8|0),($13|0))|0);
   $18 = __THREW__; __THREW__ = 0;
   $19 = $18&1;
   if ($19) {
    $23 = ___cxa_find_matching_catch_2()|0;
    $24 = (getTempRet0() | 0);
    $lpad$phi$sink166$index = $23;$lpad$phi$sink166$index7 = $24;
    break L1;
   } else {
    $20 = ((($0)) + 1|0);
    $21 = HEAP32[$5>>2]|0;
    $22 = ((($21)) + 4|0);
    HEAP32[$5>>2] = $22;
    HEAP32[$21>>2] = $17;
    $$0114 = $20;
    label = 5;
    break L1;
   }
   break;
  }
  default: {
   $$0114 = $0;
   label = 5;
  }
  }
 } while(0);
 L6: do {
  if ((label|0) == 5) {
   $25 = $2;
   $26 = $$0114;
   $27 = (($25) - ($26))|0;
   $28 = ($27|0)>(1);
   L8: do {
    if ($28) {
     $29 = HEAP8[$$0114>>0]|0;
     $30 = ($29<<24>>24)==(48);
     if ($30) {
      $31 = ((($$0114)) + 1|0);
      $32 = HEAP8[$31>>0]|0;
      switch ($32<<24>>24) {
      case 88: case 120:  {
       break;
      }
      default: {
       label = 6;
       break L8;
      }
      }
      $33 = HEAP32[$8>>2]|0;
      $34 = ((($33)) + 44|0);
      $35 = HEAP32[$34>>2]|0;
      __THREW__ = 0;
      $36 = (invoke_iii($35|0,($8|0),48)|0);
      $37 = __THREW__; __THREW__ = 0;
      $38 = $37&1;
      if (!($38)) {
       $39 = HEAP32[$5>>2]|0;
       $40 = ((($39)) + 4|0);
       HEAP32[$5>>2] = $40;
       HEAP32[$39>>2] = $36;
       $41 = ((($$0114)) + 2|0);
       $42 = HEAP8[$31>>0]|0;
       $43 = HEAP32[$8>>2]|0;
       $44 = ((($43)) + 44|0);
       $45 = HEAP32[$44>>2]|0;
       __THREW__ = 0;
       $46 = (invoke_iii($45|0,($8|0),($42|0))|0);
       $47 = __THREW__; __THREW__ = 0;
       $48 = $47&1;
       if (!($48)) {
        $49 = HEAP32[$5>>2]|0;
        $50 = ((($49)) + 4|0);
        HEAP32[$5>>2] = $50;
        HEAP32[$49>>2] = $46;
        $$0116 = $41;
        while(1) {
         $51 = ($$0116>>>0)<($2>>>0);
         if (!($51)) {
          $$1115 = $41;$$2118 = $$0116;
          label = 24;
          break L8;
         }
         $52 = HEAP8[$$0116>>0]|0;
         __THREW__ = 0;
         $53 = (invoke_i(24)|0);
         $54 = __THREW__; __THREW__ = 0;
         $55 = $54&1;
         if ($55) {
          break;
         }
         $56 = $52 << 24 >> 24;
         $57 = (_isxdigit_l($56,$53)|0);
         $58 = ($57|0)==(0);
         if ($58) {
          $$1115 = $41;$$2118 = $$0116;
          label = 24;
          break L8;
         }
         $67 = ((($$0116)) + 1|0);
         $$0116 = $67;
        }
        $63 = ___cxa_find_matching_catch_2()|0;
        $64 = (getTempRet0() | 0);
        $lpad$phi$sink166$index = $63;$lpad$phi$sink166$index7 = $64;
        break L6;
       }
      }
     } else {
      label = 6;
     }
    } else {
     label = 6;
    }
   } while(0);
   L20: do {
    if ((label|0) == 6) {
     $$1117 = $$0114;
     while(1) {
      $68 = ($$1117>>>0)<($2>>>0);
      if (!($68)) {
       $$1115 = $$0114;$$2118 = $$1117;
       label = 24;
       break L20;
      }
      $69 = HEAP8[$$1117>>0]|0;
      __THREW__ = 0;
      $70 = (invoke_i(24)|0);
      $71 = __THREW__; __THREW__ = 0;
      $72 = $71&1;
      if ($72) {
       break;
      }
      $73 = $69 << 24 >> 24;
      $74 = (_isdigit_l($73,$70)|0);
      $75 = ($74|0)==(0);
      if ($75) {
       $$1115 = $$0114;$$2118 = $$1117;
       label = 24;
       break L20;
      }
      $76 = ((($$1117)) + 1|0);
      $$1117 = $76;
     }
     $61 = ___cxa_find_matching_catch_2()|0;
     $62 = (getTempRet0() | 0);
     $lpad$phi$sink166$index = $61;$lpad$phi$sink166$index7 = $62;
     break L6;
    }
   } while(0);
   L28: do {
    if ((label|0) == 24) {
     $77 = ((($7)) + 11|0);
     $78 = HEAP8[$77>>0]|0;
     $79 = ($78<<24>>24)<(0);
     $80 = ((($7)) + 4|0);
     $81 = HEAP32[$80>>2]|0;
     $82 = $78&255;
     $83 = $79 ? $81 : $82;
     $84 = ($83|0)==(0);
     L30: do {
      if ($84) {
       $85 = HEAP32[$5>>2]|0;
       $86 = HEAP32[$8>>2]|0;
       $87 = ((($86)) + 48|0);
       $88 = HEAP32[$87>>2]|0;
       __THREW__ = 0;
       (invoke_iiiii($88|0,($8|0),($$1115|0),($$2118|0),($85|0))|0);
       $89 = __THREW__; __THREW__ = 0;
       $90 = $89&1;
       if ($90) {
        break L28;
       }
       $91 = $$2118;
       $92 = $$1115;
       $93 = (($91) - ($92))|0;
       $94 = HEAP32[$5>>2]|0;
       $95 = (($94) + ($93<<2)|0);
       HEAP32[$5>>2] = $95;
       $$pre$phiZ2D = $8;$190 = $95;
      } else {
       $96 = ($$1115|0)==($$2118|0);
       L34: do {
        if (!($96)) {
         $$0$i$i = $$2118;$$07$i$i = $$1115;
         while(1) {
          $97 = ((($$0$i$i)) + -1|0);
          $98 = ($$07$i$i>>>0)<($97>>>0);
          if (!($98)) {
           break L34;
          }
          $99 = HEAP8[$$07$i$i>>0]|0;
          $100 = HEAP8[$97>>0]|0;
          HEAP8[$$07$i$i>>0] = $100;
          HEAP8[$97>>0] = $99;
          $101 = ((($$07$i$i)) + 1|0);
          $$0$i$i = $97;$$07$i$i = $101;
         }
        }
       } while(0);
       $102 = HEAP32[$9>>2]|0;
       $103 = ((($102)) + 16|0);
       $104 = HEAP32[$103>>2]|0;
       __THREW__ = 0;
       $105 = (invoke_ii($104|0,($9|0))|0);
       $106 = __THREW__; __THREW__ = 0;
       $107 = $106&1;
       if ($107) {
        $120 = ___cxa_find_matching_catch_2()|0;
        $121 = (getTempRet0() | 0);
        $lpad$phi$sink166$index = $120;$lpad$phi$sink166$index7 = $121;
        break L6;
       }
       $$0 = $$1115;$$0111 = 0;$$0112 = 0;
       while(1) {
        $108 = ($$0>>>0)<($$2118>>>0);
        if (!($108)) {
         break;
        }
        $122 = HEAP8[$77>>0]|0;
        $123 = ($122<<24>>24)<(0);
        $124 = HEAP32[$7>>2]|0;
        $125 = $123 ? $124 : $7;
        $126 = (($125) + ($$0111)|0);
        $127 = HEAP8[$126>>0]|0;
        $128 = ($127<<24>>24)>(0);
        $129 = $127 << 24 >> 24;
        $130 = ($$0112|0)==($129|0);
        $or$cond = $128 & $130;
        if ($or$cond) {
         $131 = HEAP32[$5>>2]|0;
         $132 = ((($131)) + 4|0);
         HEAP32[$5>>2] = $132;
         HEAP32[$131>>2] = $105;
         $133 = HEAP8[$77>>0]|0;
         $134 = ($133<<24>>24)<(0);
         $135 = HEAP32[$80>>2]|0;
         $136 = $133&255;
         $137 = $134 ? $135 : $136;
         $138 = (($137) + -1)|0;
         $139 = ($$0111>>>0)<($138>>>0);
         $140 = $139&1;
         $spec$select = (($$0111) + ($140))|0;
         $$1 = $spec$select;$$1113 = 0;
        } else {
         $$1 = $$0111;$$1113 = $$0112;
        }
        $141 = HEAP8[$$0>>0]|0;
        $142 = HEAP32[$8>>2]|0;
        $143 = ((($142)) + 44|0);
        $144 = HEAP32[$143>>2]|0;
        __THREW__ = 0;
        $145 = (invoke_iii($144|0,($8|0),($141|0))|0);
        $146 = __THREW__; __THREW__ = 0;
        $147 = $146&1;
        if ($147) {
         label = 43;
         break;
        }
        $148 = HEAP32[$5>>2]|0;
        $149 = ((($148)) + 4|0);
        HEAP32[$5>>2] = $149;
        HEAP32[$148>>2] = $145;
        $150 = (($$1113) + 1)|0;
        $151 = ((($$0)) + 1|0);
        $$0 = $151;$$0111 = $$1;$$0112 = $150;
       }
       if ((label|0) == 43) {
        $152 = ___cxa_find_matching_catch_2()|0;
        $153 = (getTempRet0() | 0);
        $lpad$phi$sink166$index = $152;$lpad$phi$sink166$index7 = $153;
        break L6;
       }
       $109 = $$1115;
       $110 = $0;
       $111 = (($109) - ($110))|0;
       $112 = (($3) + ($111<<2)|0);
       $113 = HEAP32[$5>>2]|0;
       $114 = ($112|0)==($113|0);
       if ($114) {
        $$pre$phiZ2D = $8;$190 = $112;
       } else {
        $$0$i$i130 = $113;$$07$i$i129 = $112;
        while(1) {
         $115 = ((($$0$i$i130)) + -4|0);
         $116 = ($$07$i$i129>>>0)<($115>>>0);
         if (!($116)) {
          $$pre$phiZ2D = $8;$190 = $113;
          break L30;
         }
         $117 = HEAP32[$$07$i$i129>>2]|0;
         $118 = HEAP32[$115>>2]|0;
         HEAP32[$$07$i$i129>>2] = $118;
         HEAP32[$115>>2] = $117;
         $119 = ((($$07$i$i129)) + 4|0);
         $$0$i$i130 = $115;$$07$i$i129 = $119;
        }
       }
      }
     } while(0);
     $$2 = $$2118;$191 = $190;
     while(1) {
      $154 = ($$2>>>0)<($2>>>0);
      if (!($154)) {
       $$3 = $$2;$178 = $191;
       break;
      }
      $155 = HEAP8[$$2>>0]|0;
      $156 = ($155<<24>>24)==(46);
      if ($156) {
       label = 47;
       break;
      }
      $166 = HEAP32[$$pre$phiZ2D>>2]|0;
      $167 = ((($166)) + 44|0);
      $168 = HEAP32[$167>>2]|0;
      __THREW__ = 0;
      $169 = (invoke_iii($168|0,($8|0),($155|0))|0);
      $170 = __THREW__; __THREW__ = 0;
      $171 = $170&1;
      if ($171) {
       label = 15;
       break;
      }
      $172 = HEAP32[$5>>2]|0;
      $173 = ((($172)) + 4|0);
      HEAP32[$5>>2] = $173;
      HEAP32[$172>>2] = $169;
      $174 = ((($$2)) + 1|0);
      $$2 = $174;$191 = $173;
     }
     if ((label|0) == 15) {
      $59 = ___cxa_find_matching_catch_2()|0;
      $60 = (getTempRet0() | 0);
      $lpad$phi$sink166$index = $59;$lpad$phi$sink166$index7 = $60;
      break L6;
     }
     if ((label|0) == 47) {
      $157 = HEAP32[$9>>2]|0;
      $158 = ((($157)) + 12|0);
      $159 = HEAP32[$158>>2]|0;
      __THREW__ = 0;
      $160 = (invoke_ii($159|0,($9|0))|0);
      $161 = __THREW__; __THREW__ = 0;
      $162 = $161&1;
      if ($162) {
       break;
      }
      $163 = HEAP32[$5>>2]|0;
      $164 = ((($163)) + 4|0);
      HEAP32[$5>>2] = $164;
      HEAP32[$163>>2] = $160;
      $165 = ((($$2)) + 1|0);
      $$3 = $165;$178 = $164;
     }
     $175 = HEAP32[$8>>2]|0;
     $176 = ((($175)) + 48|0);
     $177 = HEAP32[$176>>2]|0;
     __THREW__ = 0;
     (invoke_iiiii($177|0,($8|0),($$3|0),($2|0),($178|0))|0);
     $179 = __THREW__; __THREW__ = 0;
     $180 = $179&1;
     if (!($180)) {
      $181 = $$3;
      $182 = (($25) - ($181))|0;
      $183 = HEAP32[$5>>2]|0;
      $184 = (($183) + ($182<<2)|0);
      HEAP32[$5>>2] = $184;
      $185 = ($1|0)==($2|0);
      $186 = $1;
      $187 = $0;
      $188 = (($186) - ($187))|0;
      $189 = (($3) + ($188<<2)|0);
      $storemerge = $185 ? $184 : $189;
      HEAP32[$4>>2] = $storemerge;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7);
      STACKTOP = sp;return;
     }
    }
   } while(0);
   $65 = ___cxa_find_matching_catch_2()|0;
   $66 = (getTempRet0() | 0);
   $lpad$phi$sink166$index = $65;$lpad$phi$sink166$index7 = $66;
  }
 } while(0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7);
 ___resumeException($lpad$phi$sink166$index|0);
 // unreachable;
}
function __ZNSt3__29__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i95 = 0, $$07$i$i = 0, $$07$i$i94 = 0, $$081 = 0, $$082 = 0, $$086 = 0, $$1 = 0, $$183 = 0, $$187 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$sink99$index = 0, $$sink99$index4 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $or$cond = 0, $spec$select = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $7 = sp;
 $8 = (__ZNKSt3__26locale9use_facetERNS0_2idE($6,50772)|0);
 $9 = (__ZNKSt3__26locale9use_facetERNS0_2idE($6,50780)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 20|0);
 $12 = HEAP32[$11>>2]|0;
 FUNCTION_TABLE_vii[$12 & 255]($7,$9);
 $13 = ((($7)) + 11|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = ($14<<24>>24)<(0);
 $16 = ((($7)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $14&255;
 $19 = $15 ? $17 : $18;
 $20 = ($19|0)==(0);
 L1: do {
  if ($20) {
   $21 = HEAP32[$8>>2]|0;
   $22 = ((($21)) + 48|0);
   $23 = HEAP32[$22>>2]|0;
   __THREW__ = 0;
   (invoke_iiiii($23|0,($8|0),($0|0),($2|0),($3|0))|0);
   $24 = __THREW__; __THREW__ = 0;
   $25 = $24&1;
   if ($25) {
    $30 = ___cxa_find_matching_catch_2()|0;
    $31 = (getTempRet0() | 0);
    $$sink99$index = $30;$$sink99$index4 = $31;
    label = 34;
    break;
   } else {
    $26 = $2;
    $27 = $0;
    $28 = (($26) - ($27))|0;
    $29 = (($3) + ($28<<2)|0);
    HEAP32[$5>>2] = $29;
    $$pre$phiZ2D = $27;$132 = $29;
    label = 33;
    break;
   }
  } else {
   HEAP32[$5>>2] = $3;
   $32 = HEAP8[$0>>0]|0;
   switch ($32<<24>>24) {
   case 43: case 45:  {
    $33 = HEAP32[$8>>2]|0;
    $34 = ((($33)) + 44|0);
    $35 = HEAP32[$34>>2]|0;
    __THREW__ = 0;
    $36 = (invoke_iii($35|0,($8|0),($32|0))|0);
    $37 = __THREW__; __THREW__ = 0;
    $38 = $37&1;
    if (!($38)) {
     $39 = ((($0)) + 1|0);
     $40 = HEAP32[$5>>2]|0;
     $41 = ((($40)) + 4|0);
     HEAP32[$5>>2] = $41;
     HEAP32[$40>>2] = $36;
     $$086 = $39;
     label = 9;
    }
    break;
   }
   default: {
    $$086 = $0;
    label = 9;
   }
   }
   L10: do {
    if ((label|0) == 9) {
     $44 = $2;
     $45 = $$086;
     $46 = (($44) - ($45))|0;
     $47 = ($46|0)>(1);
     L12: do {
      if ($47) {
       $48 = HEAP8[$$086>>0]|0;
       $49 = ($48<<24>>24)==(48);
       if ($49) {
        $50 = ((($$086)) + 1|0);
        $51 = HEAP8[$50>>0]|0;
        switch ($51<<24>>24) {
        case 88: case 120:  {
         break;
        }
        default: {
         $$187 = $$086;
         break L12;
        }
        }
        $52 = HEAP32[$8>>2]|0;
        $53 = ((($52)) + 44|0);
        $54 = HEAP32[$53>>2]|0;
        __THREW__ = 0;
        $55 = (invoke_iii($54|0,($8|0),48)|0);
        $56 = __THREW__; __THREW__ = 0;
        $57 = $56&1;
        if ($57) {
         break L10;
        }
        $58 = HEAP32[$5>>2]|0;
        $59 = ((($58)) + 4|0);
        HEAP32[$5>>2] = $59;
        HEAP32[$58>>2] = $55;
        $60 = HEAP8[$50>>0]|0;
        $61 = HEAP32[$8>>2]|0;
        $62 = ((($61)) + 44|0);
        $63 = HEAP32[$62>>2]|0;
        __THREW__ = 0;
        $64 = (invoke_iii($63|0,($8|0),($60|0))|0);
        $65 = __THREW__; __THREW__ = 0;
        $66 = $65&1;
        if ($66) {
         break L10;
        }
        $67 = ((($$086)) + 2|0);
        $68 = HEAP32[$5>>2]|0;
        $69 = ((($68)) + 4|0);
        HEAP32[$5>>2] = $69;
        HEAP32[$68>>2] = $64;
        $$187 = $67;
       } else {
        $$187 = $$086;
       }
      } else {
       $$187 = $$086;
      }
     } while(0);
     $70 = ($$187|0)==($2|0);
     L19: do {
      if (!($70)) {
       $$0$i$i = $2;$$07$i$i = $$187;
       while(1) {
        $71 = ((($$0$i$i)) + -1|0);
        $72 = ($$07$i$i>>>0)<($71>>>0);
        if (!($72)) {
         break L19;
        }
        $73 = HEAP8[$$07$i$i>>0]|0;
        $74 = HEAP8[$71>>0]|0;
        HEAP8[$$07$i$i>>0] = $74;
        HEAP8[$71>>0] = $73;
        $75 = ((($$07$i$i)) + 1|0);
        $$0$i$i = $71;$$07$i$i = $75;
       }
      }
     } while(0);
     $76 = HEAP32[$9>>2]|0;
     $77 = ((($76)) + 16|0);
     $78 = HEAP32[$77>>2]|0;
     __THREW__ = 0;
     $79 = (invoke_ii($78|0,($9|0))|0);
     $80 = __THREW__; __THREW__ = 0;
     $81 = $80&1;
     if ($81) {
      $94 = ___cxa_find_matching_catch_2()|0;
      $95 = (getTempRet0() | 0);
      $$sink99$index = $94;$$sink99$index4 = $95;
      label = 34;
      break L1;
     }
     $$0 = $$187;$$081 = 0;$$082 = 0;
     while(1) {
      $82 = ($$0>>>0)<($2>>>0);
      if (!($82)) {
       break;
      }
      $96 = HEAP8[$13>>0]|0;
      $97 = ($96<<24>>24)<(0);
      $98 = HEAP32[$7>>2]|0;
      $99 = $97 ? $98 : $7;
      $100 = (($99) + ($$081)|0);
      $101 = HEAP8[$100>>0]|0;
      $102 = ($101<<24>>24)!=(0);
      $103 = $101 << 24 >> 24;
      $104 = ($$082|0)==($103|0);
      $or$cond = $102 & $104;
      if ($or$cond) {
       $105 = HEAP32[$5>>2]|0;
       $106 = ((($105)) + 4|0);
       HEAP32[$5>>2] = $106;
       HEAP32[$105>>2] = $79;
       $107 = HEAP8[$13>>0]|0;
       $108 = ($107<<24>>24)<(0);
       $109 = HEAP32[$16>>2]|0;
       $110 = $107&255;
       $111 = $108 ? $109 : $110;
       $112 = (($111) + -1)|0;
       $113 = ($$081>>>0)<($112>>>0);
       $114 = $113&1;
       $spec$select = (($$081) + ($114))|0;
       $$1 = $spec$select;$$183 = 0;
      } else {
       $$1 = $$081;$$183 = $$082;
      }
      $115 = HEAP8[$$0>>0]|0;
      $116 = HEAP32[$8>>2]|0;
      $117 = ((($116)) + 44|0);
      $118 = HEAP32[$117>>2]|0;
      __THREW__ = 0;
      $119 = (invoke_iii($118|0,($8|0),($115|0))|0);
      $120 = __THREW__; __THREW__ = 0;
      $121 = $120&1;
      if ($121) {
       label = 31;
       break;
      }
      $122 = HEAP32[$5>>2]|0;
      $123 = ((($122)) + 4|0);
      HEAP32[$5>>2] = $123;
      HEAP32[$122>>2] = $119;
      $124 = (($$183) + 1)|0;
      $125 = ((($$0)) + 1|0);
      $$0 = $125;$$081 = $$1;$$082 = $124;
     }
     if ((label|0) == 31) {
      $126 = ___cxa_find_matching_catch_2()|0;
      $127 = (getTempRet0() | 0);
      $$sink99$index = $126;$$sink99$index4 = $127;
      label = 34;
      break L1;
     }
     $83 = $$187;
     $84 = $0;
     $85 = (($83) - ($84))|0;
     $86 = (($3) + ($85<<2)|0);
     $87 = HEAP32[$5>>2]|0;
     $88 = ($86|0)==($87|0);
     if ($88) {
      $$pre$phiZ2D = $84;$132 = $86;
      label = 33;
      break L1;
     }
     $$0$i$i95 = $87;$$07$i$i94 = $86;
     while(1) {
      $89 = ((($$0$i$i95)) + -4|0);
      $90 = ($$07$i$i94>>>0)<($89>>>0);
      if (!($90)) {
       break;
      }
      $91 = HEAP32[$$07$i$i94>>2]|0;
      $92 = HEAP32[$89>>2]|0;
      HEAP32[$$07$i$i94>>2] = $92;
      HEAP32[$89>>2] = $91;
      $93 = ((($$07$i$i94)) + 4|0);
      $$0$i$i95 = $89;$$07$i$i94 = $93;
     }
     $$pre = HEAP32[$5>>2]|0;
     $$pre$phiZ2D = $84;$132 = $$pre;
     label = 33;
     break L1;
    }
   } while(0);
   $42 = ___cxa_find_matching_catch_2()|0;
   $43 = (getTempRet0() | 0);
   $$sink99$index = $42;$$sink99$index4 = $43;
   label = 34;
  }
 } while(0);
 if ((label|0) == 33) {
  $128 = ($1|0)==($2|0);
  $129 = $1;
  $130 = (($129) - ($$pre$phiZ2D))|0;
  $131 = (($3) + ($130<<2)|0);
  $storemerge = $128 ? $132 : $131;
  HEAP32[$4>>2] = $storemerge;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 34) {
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7);
  ___resumeException($$sink99$index|0);
  // unreachable;
 }
}
function __ZNSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}
function __ZNSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $9;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $10 = (__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($0,$$byval_copy,$$byval_copy1,$3,$4,$5,42371,(42379))|0);
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = ((($0)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 20|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (FUNCTION_TABLE_ii[$11 & 255]($8)|0);
 $13 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $13;
 $14 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $14;
 $15 = ((($12)) + 11|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = ($16<<24>>24)<(0);
 $18 = HEAP32[$12>>2]|0;
 $19 = ((($12)) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $16&255;
 $22 = $17 ? $18 : $12;
 $23 = $17 ? $20 : $21;
 $24 = (($22) + ($23)|0);
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $25 = (__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($0,$$byval_copy,$$byval_copy1,$3,$4,$5,$22,$24)|0);
 STACKTOP = sp;return ($25|0);
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$sroa$0$0$copyload = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 __ZNKSt3__28ios_base6getlocEv($$byval_copy,$3);
 __THREW__ = 0;
 $7 = (invoke_iii(37,($$byval_copy|0),(50740|0))|0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $12 = ___cxa_find_matching_catch_2()|0;
  $13 = (getTempRet0() | 0);
  __ZNSt3__26localeD2Ev($$byval_copy);
  ___resumeException($12|0);
  // unreachable;
 } else {
  __ZNSt3__26localeD2Ev($$byval_copy);
  $10 = ((($5)) + 24|0);
  $11 = HEAP32[$2>>2]|0;
  HEAP32[$6>>2] = $11;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
  __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE($0,$10,$1,$$byval_copy,$4,$7);
  $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
  STACKTOP = sp;return ($$sroa$0$0$copyload|0);
 }
 return (0)|0;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$sroa$0$0$copyload = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 __ZNKSt3__28ios_base6getlocEv($$byval_copy,$3);
 __THREW__ = 0;
 $7 = (invoke_iii(37,($$byval_copy|0),(50740|0))|0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $12 = ___cxa_find_matching_catch_2()|0;
  $13 = (getTempRet0() | 0);
  __ZNSt3__26localeD2Ev($$byval_copy);
  ___resumeException($12|0);
  // unreachable;
 } else {
  __ZNSt3__26localeD2Ev($$byval_copy);
  $10 = ((($5)) + 16|0);
  $11 = HEAP32[$2>>2]|0;
  HEAP32[$6>>2] = $11;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
  __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE($0,$10,$1,$$byval_copy,$4,$7);
  $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
  STACKTOP = sp;return ($$sroa$0$0$copyload|0);
 }
 return (0)|0;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$sroa$0$0$copyload = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 __ZNKSt3__28ios_base6getlocEv($$byval_copy,$3);
 __THREW__ = 0;
 $7 = (invoke_iii(37,($$byval_copy|0),(50740|0))|0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $12 = ___cxa_find_matching_catch_2()|0;
  $13 = (getTempRet0() | 0);
  __ZNSt3__26localeD2Ev($$byval_copy);
  ___resumeException($12|0);
  // unreachable;
 } else {
  __ZNSt3__26localeD2Ev($$byval_copy);
  $10 = ((($5)) + 20|0);
  $11 = HEAP32[$2>>2]|0;
  HEAP32[$6>>2] = $11;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
  __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE($0,$10,$1,$$byval_copy,$4,$7);
  $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
  STACKTOP = sp;return ($$sroa$0$0$copyload|0);
 }
 return (0)|0;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$byval_copy26 = 0, $$byval_copy30 = 0, $$sroa$098$0 = 0, $$sroa$098$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $$byval_copy30 = sp + 128|0;
 $$byval_copy26 = sp + 112|0;
 $8 = sp + 124|0;
 $9 = sp + 120|0;
 $10 = sp + 116|0;
 $11 = sp + 108|0;
 $12 = sp + 104|0;
 $13 = sp + 100|0;
 $14 = sp + 96|0;
 $15 = sp + 92|0;
 $16 = sp + 88|0;
 $17 = sp + 84|0;
 $18 = sp + 80|0;
 $19 = sp + 76|0;
 $20 = sp + 72|0;
 $21 = sp + 68|0;
 $22 = sp + 64|0;
 $23 = sp + 60|0;
 $24 = sp + 56|0;
 $25 = sp + 52|0;
 $26 = sp + 48|0;
 $27 = sp + 44|0;
 $28 = sp + 40|0;
 $29 = sp + 36|0;
 $30 = sp + 32|0;
 $31 = sp + 28|0;
 $32 = sp + 24|0;
 $33 = sp + 20|0;
 $34 = sp + 16|0;
 $35 = sp + 12|0;
 $36 = sp + 8|0;
 $37 = sp + 4|0;
 $38 = sp;
 HEAP32[$4>>2] = 0;
 __ZNKSt3__28ios_base6getlocEv($$byval_copy30,$3);
 __THREW__ = 0;
 $39 = (invoke_iii(37,($$byval_copy30|0),(50740|0))|0);
 $40 = __THREW__; __THREW__ = 0;
 $41 = $40&1;
 if ($41) {
  $43 = ___cxa_find_matching_catch_2()|0;
  $44 = (getTempRet0() | 0);
  __ZNSt3__26localeD2Ev($$byval_copy30);
  ___resumeException($43|0);
  // unreachable;
 }
 __ZNSt3__26localeD2Ev($$byval_copy30);
 $42 = $6 << 24 >> 24;
 do {
  switch ($42|0) {
  case 65: case 97:  {
   $45 = ((($5)) + 24|0);
   $46 = HEAP32[$2>>2]|0;
   HEAP32[$8>>2] = $46;
   ;HEAP32[$$byval_copy30>>2]=HEAP32[$8>>2]|0;
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE($0,$45,$1,$$byval_copy30,$4,$39);
   label = 28;
   break;
  }
  case 104: case 66: case 98:  {
   $47 = ((($5)) + 16|0);
   $48 = HEAP32[$2>>2]|0;
   HEAP32[$9>>2] = $48;
   ;HEAP32[$$byval_copy30>>2]=HEAP32[$9>>2]|0;
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE($0,$47,$1,$$byval_copy30,$4,$39);
   label = 28;
   break;
  }
  case 99:  {
   $49 = ((($0)) + 8|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = ((($50)) + 12|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = (FUNCTION_TABLE_ii[$52 & 255]($49)|0);
   $54 = HEAP32[$1>>2]|0;
   HEAP32[$10>>2] = $54;
   $55 = HEAP32[$2>>2]|0;
   HEAP32[$11>>2] = $55;
   $56 = ((($53)) + 11|0);
   $57 = HEAP8[$56>>0]|0;
   $58 = ($57<<24>>24)<(0);
   $59 = HEAP32[$53>>2]|0;
   $60 = ((($53)) + 4|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = $57&255;
   $63 = $58 ? $59 : $53;
   $64 = $58 ? $61 : $62;
   $65 = (($63) + ($64)|0);
   ;HEAP32[$$byval_copy26>>2]=HEAP32[$10>>2]|0;
   ;HEAP32[$$byval_copy30>>2]=HEAP32[$11>>2]|0;
   $66 = (__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($0,$$byval_copy26,$$byval_copy30,$3,$4,$5,$63,$65)|0);
   HEAP32[$1>>2] = $66;
   label = 28;
   break;
  }
  case 101: case 100:  {
   $67 = ((($5)) + 12|0);
   $68 = HEAP32[$2>>2]|0;
   HEAP32[$12>>2] = $68;
   ;HEAP32[$$byval_copy30>>2]=HEAP32[$12>>2]|0;
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIcEE($0,$67,$1,$$byval_copy30,$4,$39);
   label = 28;
   break;
  }
  case 68:  {
   $69 = HEAP32[$1>>2]|0;
   HEAP32[$13>>2] = $69;
   $70 = HEAP32[$2>>2]|0;
   HEAP32[$14>>2] = $70;
   ;HEAP32[$$byval_copy26>>2]=HEAP32[$13>>2]|0;
   ;HEAP32[$$byval_copy30>>2]=HEAP32[$14>>2]|0;
   $71 = (__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($0,$$byval_copy26,$$byval_copy30,$3,$4,$5,42331,(42339))|0);
   HEAP32[$1>>2] = $71;
   label = 28;
   break;
  }
  case 70:  {
   $72 = HEAP32[$1>>2]|0;
   HEAP32[$15>>2] = $72;
   $73 = HEAP32[$2>>2]|0;
   HEAP32[$16>>2] = $73;
   ;HEAP32[$$byval_copy26>>2]=HEAP32[$15>>2]|0;
   ;HEAP32[$$byval_copy30>>2]=HEAP32[$16>>2]|0;
   $74 = (__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($0,$$byval_copy26,$$byval_copy30,$3,$4,$5,42339,(42347))|0);
   HEAP32[$1>>2] = $74;
   label = 28;
   break;
  }
  case 72:  {
   $75 = ((($5)) + 8|0);
   $76 = HEAP32[$2>>2]|0;
   HEAP32[$17>>2] = $76;
   ;HEAP32[$$byval_copy30>>2]=HEAP32[$17>>2]|0;
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIcEE($0,$75,$1,$$byval_copy30,$4,$39);
   label = 28;
   break;
  }
  case 73:  {
   $77 = ((($5)) + 8|0);
   $78 = HEAP32[$2>>2]|0;
   HEAP32[$18>>2] = $78;
   ;HEAP32[$$byval_copy30>>2]=HEAP32[$18>>2]|0;
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIcEE($0,$77,$1,$$byval_copy30,$4,$39);
   label = 28;
   break;
  }
  case 106:  {
   $79 = ((($5)) + 28|0);
   $80 = HEAP32[$2>>2]|0;
   HEAP32[$19>>2] = $80;
   ;HEAP32[$$byval_copy30>>2]=HEAP32[$19>>2]|0;
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIcEE($0,$79,$1,$$byval_copy30,$4,$39);
   label = 28;
   break;
  }
  case 109:  {
   $81 = ((($5)) + 16|0);
   $82 = HEAP32[$2>>2]|0;
   HEAP32[$20>>2] = $82;
   ;HEAP32[$$byval_copy30>>2]=HEAP32[$20>>2]|0;
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIcEE($0,$81,$1,$$byval_copy30,$4,$39);
   label = 28;
   break;
  }
  case 77:  {
   $83 = ((($5)) + 4|0);
   $84 = HEAP32[$2>>2]|0;
   HEAP32[$21>>2] = $84;
   ;HEAP32[$$byval_copy30>>2]=HEAP32[$21>>2]|0;
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIcEE($0,$83,$1,$$byval_copy30,$4,$39);
   label = 28;
   break;
  }
  case 116: case 110:  {
   $85 = HEAP32[$2>>2]|0;
   HEAP32[$22>>2] = $85;
   ;HEAP32[$$byval_copy30>>2]=HEAP32[$22>>2]|0;
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE($0,$1,$$byval_copy30,$4,$39);
   label = 28;
   break;
  }
  case 112:  {
   $86 = ((($5)) + 8|0);
   $87 = HEAP32[$2>>2]|0;
   HEAP32[$23>>2] = $87;
   ;HEAP32[$$byval_copy30>>2]=HEAP32[$23>>2]|0;
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIcEE($0,$86,$1,$$byval_copy30,$4,$39);
   label = 28;
   break;
  }
  case 114:  {
   $88 = HEAP32[$1>>2]|0;
   HEAP32[$24>>2] = $88;
   $89 = HEAP32[$2>>2]|0;
   HEAP32[$25>>2] = $89;
   ;HEAP32[$$byval_copy26>>2]=HEAP32[$24>>2]|0;
   ;HEAP32[$$byval_copy30>>2]=HEAP32[$25>>2]|0;
   $90 = (__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($0,$$byval_copy26,$$byval_copy30,$3,$4,$5,42347,(42358))|0);
   HEAP32[$1>>2] = $90;
   label = 28;
   break;
  }
  case 82:  {
   $91 = HEAP32[$1>>2]|0;
   HEAP32[$26>>2] = $91;
   $92 = HEAP32[$2>>2]|0;
   HEAP32[$27>>2] = $92;
   ;HEAP32[$$byval_copy26>>2]=HEAP32[$26>>2]|0;
   ;HEAP32[$$byval_copy30>>2]=HEAP32[$27>>2]|0;
   $93 = (__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($0,$$byval_copy26,$$byval_copy30,$3,$4,$5,42358,(42363))|0);
   HEAP32[$1>>2] = $93;
   label = 28;
   break;
  }
  case 83:  {
   $94 = HEAP32[$2>>2]|0;
   HEAP32[$28>>2] = $94;
   ;HEAP32[$$byval_copy30>>2]=HEAP32[$28>>2]|0;
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIcEE($0,$5,$1,$$byval_copy30,$4,$39);
   label = 28;
   break;
  }
  case 84:  {
   $95 = HEAP32[$1>>2]|0;
   HEAP32[$29>>2] = $95;
   $96 = HEAP32[$2>>2]|0;
   HEAP32[$30>>2] = $96;
   ;HEAP32[$$byval_copy26>>2]=HEAP32[$29>>2]|0;
   ;HEAP32[$$byval_copy30>>2]=HEAP32[$30>>2]|0;
   $97 = (__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($0,$$byval_copy26,$$byval_copy30,$3,$4,$5,42363,(42371))|0);
   HEAP32[$1>>2] = $97;
   label = 28;
   break;
  }
  case 119:  {
   $98 = ((($5)) + 24|0);
   $99 = HEAP32[$2>>2]|0;
   HEAP32[$31>>2] = $99;
   ;HEAP32[$$byval_copy30>>2]=HEAP32[$31>>2]|0;
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIcEE($0,$98,$1,$$byval_copy30,$4,$39);
   label = 28;
   break;
  }
  case 120:  {
   $100 = HEAP32[$0>>2]|0;
   $101 = ((($100)) + 20|0);
   $102 = HEAP32[$101>>2]|0;
   $103 = HEAP32[$1>>2]|0;
   HEAP32[$32>>2] = $103;
   $104 = HEAP32[$2>>2]|0;
   HEAP32[$33>>2] = $104;
   ;HEAP32[$$byval_copy26>>2]=HEAP32[$32>>2]|0;
   ;HEAP32[$$byval_copy30>>2]=HEAP32[$33>>2]|0;
   $105 = (FUNCTION_TABLE_iiiiiii[$102 & 63]($0,$$byval_copy26,$$byval_copy30,$3,$4,$5)|0);
   $$sroa$098$0 = $105;
   break;
  }
  case 88:  {
   $106 = ((($0)) + 8|0);
   $107 = HEAP32[$106>>2]|0;
   $108 = ((($107)) + 24|0);
   $109 = HEAP32[$108>>2]|0;
   $110 = (FUNCTION_TABLE_ii[$109 & 255]($106)|0);
   $111 = HEAP32[$1>>2]|0;
   HEAP32[$34>>2] = $111;
   $112 = HEAP32[$2>>2]|0;
   HEAP32[$35>>2] = $112;
   $113 = ((($110)) + 11|0);
   $114 = HEAP8[$113>>0]|0;
   $115 = ($114<<24>>24)<(0);
   $116 = HEAP32[$110>>2]|0;
   $117 = ((($110)) + 4|0);
   $118 = HEAP32[$117>>2]|0;
   $119 = $114&255;
   $120 = $115 ? $116 : $110;
   $121 = $115 ? $118 : $119;
   $122 = (($120) + ($121)|0);
   ;HEAP32[$$byval_copy26>>2]=HEAP32[$34>>2]|0;
   ;HEAP32[$$byval_copy30>>2]=HEAP32[$35>>2]|0;
   $123 = (__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($0,$$byval_copy26,$$byval_copy30,$3,$4,$5,$120,$122)|0);
   HEAP32[$1>>2] = $123;
   label = 28;
   break;
  }
  case 121:  {
   $124 = ((($5)) + 20|0);
   $125 = HEAP32[$2>>2]|0;
   HEAP32[$36>>2] = $125;
   ;HEAP32[$$byval_copy30>>2]=HEAP32[$36>>2]|0;
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE($0,$124,$1,$$byval_copy30,$4,$39);
   label = 28;
   break;
  }
  case 89:  {
   $126 = ((($5)) + 20|0);
   $127 = HEAP32[$2>>2]|0;
   HEAP32[$37>>2] = $127;
   ;HEAP32[$$byval_copy30>>2]=HEAP32[$37>>2]|0;
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIcEE($0,$126,$1,$$byval_copy30,$4,$39);
   label = 28;
   break;
  }
  case 37:  {
   $128 = HEAP32[$2>>2]|0;
   HEAP32[$38>>2] = $128;
   ;HEAP32[$$byval_copy30>>2]=HEAP32[$38>>2]|0;
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE($0,$1,$$byval_copy30,$4,$39);
   label = 28;
   break;
  }
  default: {
   $129 = HEAP32[$4>>2]|0;
   $130 = $129 | 4;
   HEAP32[$4>>2] = $130;
   label = 28;
  }
  }
 } while(0);
 if ((label|0) == 28) {
  $$sroa$098$0$copyload = HEAP32[$1>>2]|0;
  $$sroa$098$0 = $$sroa$098$0$copyload;
 }
 STACKTOP = sp;return ($$sroa$098$0|0);
}
function __ZNKSt3__220__time_get_c_storageIcE7__weeksEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[48488]|0;
 $2 = ($1<<24>>24)==(0);
 do {
  if ($2) {
   $3 = (___cxa_guard_acquire(48488)|0);
   $4 = ($3|0)==(0);
   if (!($4)) {
    __THREW__ = 0;
    invoke_v(5);
    $5 = __THREW__; __THREW__ = 0;
    $6 = $5&1;
    if ($6) {
     $8 = ___cxa_find_matching_catch_2()|0;
     $9 = (getTempRet0() | 0);
     ___resumeException($8|0);
     // unreachable;
    } else {
     HEAP32[12717] = 47472;
     break;
    }
   }
  }
 } while(0);
 $7 = HEAP32[12717]|0;
 return ($7|0);
}
function __ZNKSt3__220__time_get_c_storageIcE8__monthsEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[48472]|0;
 $2 = ($1<<24>>24)==(0);
 do {
  if ($2) {
   $3 = (___cxa_guard_acquire(48472)|0);
   $4 = ($3|0)==(0);
   if (!($4)) {
    __THREW__ = 0;
    invoke_v(6);
    $5 = __THREW__; __THREW__ = 0;
    $6 = $5&1;
    if ($6) {
     $8 = ___cxa_find_matching_catch_2()|0;
     $9 = (getTempRet0() | 0);
     ___resumeException($8|0);
     // unreachable;
    } else {
     HEAP32[12716] = 47184;
     break;
    }
   }
  }
 } while(0);
 $7 = HEAP32[12716]|0;
 return ($7|0);
}
function __ZNKSt3__220__time_get_c_storageIcE7__am_pmEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[48456]|0;
 $2 = ($1<<24>>24)==(0);
 do {
  if ($2) {
   $3 = (___cxa_guard_acquire(48456)|0);
   $4 = ($3|0)==(0);
   if (!($4)) {
    __THREW__ = 0;
    invoke_v(7);
    $5 = __THREW__; __THREW__ = 0;
    $6 = $5&1;
    if ($6) {
     $8 = ___cxa_find_matching_catch_2()|0;
     $9 = (getTempRet0() | 0);
     ___resumeException($8|0);
     // unreachable;
    } else {
     HEAP32[12715] = 46896;
     break;
    }
   }
  }
 } while(0);
 $7 = HEAP32[12715]|0;
 return ($7|0);
}
function __ZNKSt3__220__time_get_c_storageIcE3__cEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[48448]|0;
 $2 = ($1<<24>>24)==(0);
 do {
  if ($2) {
   $3 = (___cxa_guard_acquire(48448)|0);
   $4 = ($3|0)==(0);
   if (!($4)) {
    ;HEAP32[50848>>2]=0|0;HEAP32[50848+4>>2]=0|0;HEAP32[50848+8>>2]=0|0;
    $5 = (__ZNSt3__211char_traitsIcE6lengthEPKc(42089)|0);
    __THREW__ = 0;
    invoke_viii(30,(50848|0),(42089|0),($5|0));
    $6 = __THREW__; __THREW__ = 0;
    $7 = $6&1;
    if ($7) {
     $8 = ___cxa_find_matching_catch_2()|0;
     $9 = (getTempRet0() | 0);
     ___resumeException($8|0);
     // unreachable;
    } else {
     break;
    }
   }
  }
 } while(0);
 return (50848|0);
}
function __ZNKSt3__220__time_get_c_storageIcE3__rEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[48440]|0;
 $2 = ($1<<24>>24)==(0);
 do {
  if ($2) {
   $3 = (___cxa_guard_acquire(48440)|0);
   $4 = ($3|0)==(0);
   if (!($4)) {
    ;HEAP32[50836>>2]=0|0;HEAP32[50836+4>>2]=0|0;HEAP32[50836+8>>2]=0|0;
    $5 = (__ZNSt3__211char_traitsIcE6lengthEPKc(42077)|0);
    __THREW__ = 0;
    invoke_viii(30,(50836|0),(42077|0),($5|0));
    $6 = __THREW__; __THREW__ = 0;
    $7 = $6&1;
    if ($7) {
     $8 = ___cxa_find_matching_catch_2()|0;
     $9 = (getTempRet0() | 0);
     ___resumeException($8|0);
     // unreachable;
    } else {
     break;
    }
   }
  }
 } while(0);
 return (50836|0);
}
function __ZNKSt3__220__time_get_c_storageIcE3__xEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[48432]|0;
 $2 = ($1<<24>>24)==(0);
 do {
  if ($2) {
   $3 = (___cxa_guard_acquire(48432)|0);
   $4 = ($3|0)==(0);
   if (!($4)) {
    ;HEAP32[50824>>2]=0|0;HEAP32[50824+4>>2]=0|0;HEAP32[50824+8>>2]=0|0;
    $5 = (__ZNSt3__211char_traitsIcE6lengthEPKc(42068)|0);
    __THREW__ = 0;
    invoke_viii(30,(50824|0),(42068|0),($5|0));
    $6 = __THREW__; __THREW__ = 0;
    $7 = $6&1;
    if ($7) {
     $8 = ___cxa_find_matching_catch_2()|0;
     $9 = (getTempRet0() | 0);
     ___resumeException($8|0);
     // unreachable;
    } else {
     break;
    }
   }
  }
 } while(0);
 return (50824|0);
}
function __ZNKSt3__220__time_get_c_storageIcE3__XEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[48424]|0;
 $2 = ($1<<24>>24)==(0);
 do {
  if ($2) {
   $3 = (___cxa_guard_acquire(48424)|0);
   $4 = ($3|0)==(0);
   if (!($4)) {
    ;HEAP32[50812>>2]=0|0;HEAP32[50812+4>>2]=0|0;HEAP32[50812+8>>2]=0|0;
    $5 = (__ZNSt3__211char_traitsIcE6lengthEPKc(42059)|0);
    __THREW__ = 0;
    invoke_viii(30,(50812|0),(42059|0),($5|0));
    $6 = __THREW__; __THREW__ = 0;
    $7 = $6&1;
    if ($7) {
     $8 = ___cxa_find_matching_catch_2()|0;
     $9 = (getTempRet0() | 0);
     ___resumeException($8|0);
     // unreachable;
    } else {
     break;
    }
   }
  }
 } while(0);
 return (50812|0);
}
function __ZNSt3__2L10init_am_pmEv() {
 var $$0$i$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[48464]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  $2 = (___cxa_guard_acquire(48464)|0);
  $3 = ($2|0)==(0);
  if (!($3)) {
   $4 = 46896;
   while(1) {
    ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
    $$0$i$i = 0;
    while(1) {
     $exitcond$i$i = ($$0$i$i|0)==(3);
     if ($exitcond$i$i) {
      break;
     }
     $5 = (($4) + ($$0$i$i<<2)|0);
     HEAP32[$5>>2] = 0;
     $6 = (($$0$i$i) + 1)|0;
     $$0$i$i = $6;
    }
    $7 = ((($4)) + 12|0);
    $8 = ($7|0)==((47184)|0);
    if ($8) {
     break;
    } else {
     $4 = $7;
    }
   }
  }
 }
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(46896,42110)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((46908),42113)|0);
 return;
}
function __ZNSt3__2L11init_monthsEv() {
 var $$0$i$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[48480]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  $2 = (___cxa_guard_acquire(48480)|0);
  $3 = ($2|0)==(0);
  if (!($3)) {
   $4 = 47184;
   while(1) {
    ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
    $$0$i$i = 0;
    while(1) {
     $exitcond$i$i = ($$0$i$i|0)==(3);
     if ($exitcond$i$i) {
      break;
     }
     $5 = (($4) + ($$0$i$i<<2)|0);
     HEAP32[$5>>2] = 0;
     $6 = (($$0$i$i) + 1)|0;
     $$0$i$i = $6;
    }
    $7 = ((($4)) + 12|0);
    $8 = ($7|0)==((47472)|0);
    if ($8) {
     break;
    } else {
     $4 = $7;
    }
   }
  }
 }
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(47184,42116)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((47196),42124)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((47208),42133)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((47220),42139)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((47232),42145)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((47244),42149)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((47256),42154)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((47268),42159)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((47280),42166)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((47292),42176)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((47304),42184)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((47316),42193)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((47328),42202)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((47340),42206)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((47352),42210)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((47364),42214)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((47376),42145)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((47388),42218)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((47400),42222)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((47412),42226)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((47424),42230)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((47436),42234)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((47448),42238)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((47460),42242)|0);
 return;
}
function __ZNSt3__2L10init_weeksEv() {
 var $$0$i$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[48496]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  $2 = (___cxa_guard_acquire(48496)|0);
  $3 = ($2|0)==(0);
  if (!($3)) {
   $4 = 47472;
   while(1) {
    ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
    $$0$i$i = 0;
    while(1) {
     $exitcond$i$i = ($$0$i$i|0)==(3);
     if ($exitcond$i$i) {
      break;
     }
     $5 = (($4) + ($$0$i$i<<2)|0);
     HEAP32[$5>>2] = 0;
     $6 = (($$0$i$i) + 1)|0;
     $$0$i$i = $6;
    }
    $7 = ((($4)) + 12|0);
    $8 = ($7|0)==((47640)|0);
    if ($8) {
     break;
    } else {
     $4 = $7;
    }
   }
  }
 }
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(47472,42246)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((47484),42253)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((47496),42260)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((47508),42268)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((47520),42278)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((47532),42287)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((47544),42294)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((47556),42303)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((47568),42307)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((47580),42311)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((47592),42315)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((47604),42319)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((47616),42323)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc((47628),42327)|0);
 return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = ((($0)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = (FUNCTION_TABLE_ii[$9 & 255]($7)|0);
 $11 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $11;
 $12 = ((($10)) + 168|0);
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $13 = (__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($2,$$byval_copy,$10,$12,$5,$4,0)|0);
 $14 = $13;
 $15 = $10;
 $16 = (($14) - ($15))|0;
 $17 = ($16|0)<(168);
 if ($17) {
  $18 = (($16|0) / 12)&-1;
  $19 = (($18|0) % 7)&-1;
  HEAP32[$1>>2] = $19;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = ((($0)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (FUNCTION_TABLE_ii[$10 & 255]($7)|0);
 $12 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $12;
 $13 = ((($11)) + 288|0);
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $14 = (__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($2,$$byval_copy,$11,$13,$5,$4,0)|0);
 $15 = $14;
 $16 = $11;
 $17 = (($15) - ($16))|0;
 $18 = ($17|0)<(288);
 if ($18) {
  $19 = (($17|0) / 12)&-1;
  $20 = (($19|0) % 12)&-1;
  HEAP32[$1>>2] = $20;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i56 = 0, $$0$i$i$i$i71 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i62 = 0, $$0$i$i2$i$i77 = 0, $$0$i$i68 = 0, $$0$pn = 0, $$052 = 0, $$053 = 0, $$3 = 0, $$3$lcssa = 0, $$4 = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$ph = 0, $$pre = 0, $$sroa$050$0$copyload = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $sext = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $8 = sp + 4|0;
 $9 = sp;
 __ZNKSt3__28ios_base6getlocEv($$byval_copy1,$3);
 __THREW__ = 0;
 $10 = (invoke_iii(37,($$byval_copy1|0),(50740|0))|0);
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 if ($12) {
  $49 = ___cxa_find_matching_catch_2()|0;
  $50 = (getTempRet0() | 0);
  __ZNSt3__26localeD2Ev($$byval_copy1);
  ___resumeException($49|0);
  // unreachable;
 }
 __ZNSt3__26localeD2Ev($$byval_copy1);
 HEAP32[$4>>2] = 0;
 $13 = ((($10)) + 8|0);
 $$0 = $6;$16 = 0;
 L4: while(1) {
  $14 = ($$0|0)!=($7|0);
  $15 = ($16|0)==(0);
  $or$cond = $14 & $15;
  $17 = HEAP32[$1>>2]|0;
  if (!($or$cond)) {
   $186 = $17;
   break;
  }
  $18 = ($17|0)==(0|0);
  $19 = $17;
  if ($18) {
   $154 = 0;$217 = 1;$74 = $19;
  } else {
   $20 = ((($17)) + 12|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = ((($17)) + 16|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = ($21|0)==($23|0);
   if ($24) {
    $25 = HEAP32[$17>>2]|0;
    $26 = ((($25)) + 36|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = (FUNCTION_TABLE_ii[$27 & 255]($17)|0);
    $$0$i$i$i$i = $28;
   } else {
    $29 = HEAP8[$21>>0]|0;
    $30 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($29)|0);
    $$0$i$i$i$i = $30;
   }
   $31 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $32 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i,$31)|0);
   if ($32) {
    HEAP32[$1>>2] = 0;
    $154 = 0;$217 = 1;$74 = 0;
   } else {
    $154 = $17;$217 = 0;$74 = $19;
   }
  }
  $33 = HEAP32[$2>>2]|0;
  $34 = ($33|0)==(0|0);
  $35 = $33;
  do {
   if ($34) {
    $$ph = $35;
    label = 16;
   } else {
    $36 = ((($33)) + 12|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = ((($33)) + 16|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = ($37|0)==($39|0);
    if ($40) {
     $41 = HEAP32[$33>>2]|0;
     $42 = ((($41)) + 36|0);
     $43 = HEAP32[$42>>2]|0;
     $44 = (FUNCTION_TABLE_ii[$43 & 255]($33)|0);
     $$0$i$i2$i$i = $44;
    } else {
     $45 = HEAP8[$37>>0]|0;
     $46 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($45)|0);
     $$0$i$i2$i$i = $46;
    }
    $47 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
    $48 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i,$47)|0);
    if ($48) {
     HEAP32[$2>>2] = 0;
     $$ph = 0;
     label = 16;
     break;
    } else {
     if ($217) {
      $218 = $33;$75 = $35;
      break;
     } else {
      label = 65;
      break L4;
     }
    }
   }
  } while(0);
  if ((label|0) == 16) {
   label = 0;
   if ($217) {
    label = 65;
    break;
   } else {
    $218 = 0;$75 = $$ph;
   }
  }
  $51 = HEAP8[$$0>>0]|0;
  $52 = HEAP32[$10>>2]|0;
  $53 = ((($52)) + 36|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = (FUNCTION_TABLE_iiii[$54 & 63]($10,$51,0)|0);
  $56 = ($55<<24>>24)==(37);
  L27: do {
   if ($56) {
    $57 = ((($$0)) + 1|0);
    $58 = ($57|0)==($7|0);
    if ($58) {
     label = 65;
     break L4;
    }
    $59 = HEAP8[$57>>0]|0;
    $60 = HEAP32[$10>>2]|0;
    $61 = ((($60)) + 36|0);
    $62 = HEAP32[$61>>2]|0;
    $63 = (FUNCTION_TABLE_iiii[$62 & 63]($10,$59,0)|0);
    switch ($63<<24>>24) {
    case 48: case 69:  {
     $64 = ((($$0)) + 2|0);
     $65 = ($64|0)==($7|0);
     if ($65) {
      label = 65;
      break L4;
     }
     $66 = HEAP8[$64>>0]|0;
     $67 = HEAP32[$10>>2]|0;
     $68 = ((($67)) + 36|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = (FUNCTION_TABLE_iiii[$69 & 63]($10,$66,0)|0);
     $$052 = $63;$$053 = $70;$78 = $57;
     break;
    }
    default: {
     $$052 = 0;$$053 = $63;$78 = $$0;
    }
    }
    $71 = HEAP32[$0>>2]|0;
    $72 = ((($71)) + 36|0);
    $73 = HEAP32[$72>>2]|0;
    HEAP32[$8>>2] = $74;
    HEAP32[$9>>2] = $75;
    ;HEAP32[$$byval_copy>>2]=HEAP32[$8>>2]|0;
    ;HEAP32[$$byval_copy1>>2]=HEAP32[$9>>2]|0;
    $76 = (FUNCTION_TABLE_iiiiiiiii[$73 & 15]($0,$$byval_copy,$$byval_copy1,$3,$4,$5,$$053,$$052)|0);
    HEAP32[$1>>2] = $76;
    $77 = ((($78)) + 2|0);
    $$4 = $77;
   } else {
    $79 = HEAP8[$$0>>0]|0;
    $80 = ($79<<24>>24)>(-1);
    if ($80) {
     $81 = $79 << 24 >> 24;
     $82 = HEAP32[$13>>2]|0;
     $83 = (($82) + ($81<<1)|0);
     $84 = HEAP16[$83>>1]|0;
     $85 = $84 & 8192;
     $86 = ($85<<16>>16)==(0);
     if (!($86)) {
      $$0$pn = $$0;
      while(1) {
       $$3 = ((($$0$pn)) + 1|0);
       $87 = ($$3|0)==($7|0);
       if ($87) {
        $$3$lcssa = $7;
        break;
       }
       $88 = HEAP8[$$3>>0]|0;
       $89 = ($88<<24>>24)>(-1);
       if (!($89)) {
        $$3$lcssa = $$3;
        break;
       }
       $90 = $88 << 24 >> 24;
       $91 = (($82) + ($90<<1)|0);
       $92 = HEAP16[$91>>1]|0;
       $93 = $92 & 8192;
       $94 = ($93<<16>>16)==(0);
       if ($94) {
        $$3$lcssa = $$3;
        break;
       } else {
        $$0$pn = $$3;
       }
      }
      $111 = $218;$96 = $154;
      while(1) {
       $95 = ($96|0)==(0|0);
       if ($95) {
        $126 = 0;$219 = 1;
       } else {
        $97 = ((($96)) + 12|0);
        $98 = HEAP32[$97>>2]|0;
        $99 = ((($96)) + 16|0);
        $100 = HEAP32[$99>>2]|0;
        $101 = ($98|0)==($100|0);
        if ($101) {
         $102 = HEAP32[$96>>2]|0;
         $103 = ((($102)) + 36|0);
         $104 = HEAP32[$103>>2]|0;
         $105 = (FUNCTION_TABLE_ii[$104 & 255]($96)|0);
         $$0$i$i$i$i56 = $105;
        } else {
         $106 = HEAP8[$98>>0]|0;
         $107 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($106)|0);
         $$0$i$i$i$i56 = $107;
        }
        $108 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
        $109 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i56,$108)|0);
        if ($109) {
         HEAP32[$1>>2] = 0;
         $126 = 0;$219 = 1;
        } else {
         $126 = $96;$219 = 0;
        }
       }
       $110 = ($111|0)==(0|0);
       do {
        if ($110) {
         label = 44;
        } else {
         $112 = ((($111)) + 12|0);
         $113 = HEAP32[$112>>2]|0;
         $114 = ((($111)) + 16|0);
         $115 = HEAP32[$114>>2]|0;
         $116 = ($113|0)==($115|0);
         if ($116) {
          $117 = HEAP32[$111>>2]|0;
          $118 = ((($117)) + 36|0);
          $119 = HEAP32[$118>>2]|0;
          $120 = (FUNCTION_TABLE_ii[$119 & 255]($111)|0);
          $$0$i$i2$i$i62 = $120;
         } else {
          $121 = HEAP8[$113>>0]|0;
          $122 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($121)|0);
          $$0$i$i2$i$i62 = $122;
         }
         $123 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
         $124 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i62,$123)|0);
         if ($124) {
          HEAP32[$2>>2] = 0;
          label = 44;
          break;
         } else {
          if ($219) {
           $220 = $111;
           break;
          } else {
           $$4 = $$3$lcssa;
           break L27;
          }
         }
        }
       } while(0);
       if ((label|0) == 44) {
        label = 0;
        if ($219) {
         $$4 = $$3$lcssa;
         break L27;
        } else {
         $220 = 0;
        }
       }
       $125 = ((($126)) + 12|0);
       $127 = HEAP32[$125>>2]|0;
       $128 = ((($126)) + 16|0);
       $129 = HEAP32[$128>>2]|0;
       $130 = ($127|0)==($129|0);
       if ($130) {
        $131 = HEAP32[$126>>2]|0;
        $132 = ((($131)) + 36|0);
        $133 = HEAP32[$132>>2]|0;
        $134 = (FUNCTION_TABLE_ii[$133 & 255]($126)|0);
        $$0$i$i = $134;
       } else {
        $135 = HEAP8[$127>>0]|0;
        $136 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($135)|0);
        $$0$i$i = $136;
       }
       $137 = $$0$i$i&255;
       $138 = ($137<<24>>24)>(-1);
       if (!($138)) {
        $$4 = $$3$lcssa;
        break L27;
       }
       $sext = $$0$i$i << 24;
       $139 = $sext >> 24;
       $140 = HEAP32[$13>>2]|0;
       $141 = (($140) + ($139<<1)|0);
       $142 = HEAP16[$141>>1]|0;
       $143 = $142 & 8192;
       $144 = ($143<<16>>16)==(0);
       if ($144) {
        $$4 = $$3$lcssa;
        break L27;
       }
       $145 = HEAP32[$125>>2]|0;
       $146 = HEAP32[$128>>2]|0;
       $147 = ($145|0)==($146|0);
       if ($147) {
        $148 = HEAP32[$126>>2]|0;
        $149 = ((($148)) + 40|0);
        $150 = HEAP32[$149>>2]|0;
        (FUNCTION_TABLE_ii[$150 & 255]($126)|0);
       } else {
        $151 = ((($145)) + 1|0);
        HEAP32[$125>>2] = $151;
        $152 = HEAP8[$145>>0]|0;
        (__ZNSt3__211char_traitsIcE11to_int_typeEc($152)|0);
       }
       $111 = $220;$96 = $126;
      }
     }
    }
    $153 = ((($154)) + 12|0);
    $155 = HEAP32[$153>>2]|0;
    $156 = ((($154)) + 16|0);
    $157 = HEAP32[$156>>2]|0;
    $158 = ($155|0)==($157|0);
    if ($158) {
     $159 = HEAP32[$154>>2]|0;
     $160 = ((($159)) + 36|0);
     $161 = HEAP32[$160>>2]|0;
     $162 = (FUNCTION_TABLE_ii[$161 & 255]($154)|0);
     $$0$i$i68 = $162;
    } else {
     $163 = HEAP8[$155>>0]|0;
     $164 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($163)|0);
     $$0$i$i68 = $164;
    }
    $165 = $$0$i$i68&255;
    $166 = HEAP32[$10>>2]|0;
    $167 = ((($166)) + 12|0);
    $168 = HEAP32[$167>>2]|0;
    $169 = (FUNCTION_TABLE_iii[$168 & 127]($10,$165)|0);
    $170 = HEAP8[$$0>>0]|0;
    $171 = HEAP32[$10>>2]|0;
    $172 = ((($171)) + 12|0);
    $173 = HEAP32[$172>>2]|0;
    $174 = (FUNCTION_TABLE_iii[$173 & 127]($10,$170)|0);
    $175 = ($169<<24>>24)==($174<<24>>24);
    if (!($175)) {
     HEAP32[$4>>2] = 4;
     $$4 = $$0;
     break;
    }
    $176 = HEAP32[$153>>2]|0;
    $177 = HEAP32[$156>>2]|0;
    $178 = ($176|0)==($177|0);
    if ($178) {
     $179 = HEAP32[$154>>2]|0;
     $180 = ((($179)) + 40|0);
     $181 = HEAP32[$180>>2]|0;
     (FUNCTION_TABLE_ii[$181 & 255]($154)|0);
    } else {
     $182 = ((($176)) + 1|0);
     HEAP32[$153>>2] = $182;
     $183 = HEAP8[$176>>0]|0;
     (__ZNSt3__211char_traitsIcE11to_int_typeEc($183)|0);
    }
    $184 = ((($$0)) + 1|0);
    $$4 = $184;
   }
  } while(0);
  $$pre = HEAP32[$4>>2]|0;
  $$0 = $$4;$16 = $$pre;
 }
 if ((label|0) == 65) {
  HEAP32[$4>>2] = 4;
  $186 = $154;
 }
 $185 = ($186|0)==(0|0);
 if ($185) {
  $$sroa$050$0$copyload = 0;$221 = 1;
 } else {
  $187 = ((($186)) + 12|0);
  $188 = HEAP32[$187>>2]|0;
  $189 = ((($186)) + 16|0);
  $190 = HEAP32[$189>>2]|0;
  $191 = ($188|0)==($190|0);
  if ($191) {
   $192 = HEAP32[$186>>2]|0;
   $193 = ((($192)) + 36|0);
   $194 = HEAP32[$193>>2]|0;
   $195 = (FUNCTION_TABLE_ii[$194 & 255]($186)|0);
   $$0$i$i$i$i71 = $195;
  } else {
   $196 = HEAP8[$188>>0]|0;
   $197 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($196)|0);
   $$0$i$i$i$i71 = $197;
  }
  $198 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
  $199 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i71,$198)|0);
  if ($199) {
   HEAP32[$1>>2] = 0;
   $$sroa$050$0$copyload = 0;$221 = 1;
  } else {
   $$sroa$050$0$copyload = $186;$221 = 0;
  }
 }
 $200 = HEAP32[$2>>2]|0;
 $201 = ($200|0)==(0|0);
 do {
  if ($201) {
   label = 78;
  } else {
   $202 = ((($200)) + 12|0);
   $203 = HEAP32[$202>>2]|0;
   $204 = ((($200)) + 16|0);
   $205 = HEAP32[$204>>2]|0;
   $206 = ($203|0)==($205|0);
   if ($206) {
    $207 = HEAP32[$200>>2]|0;
    $208 = ((($207)) + 36|0);
    $209 = HEAP32[$208>>2]|0;
    $210 = (FUNCTION_TABLE_ii[$209 & 255]($200)|0);
    $$0$i$i2$i$i77 = $210;
   } else {
    $211 = HEAP8[$203>>0]|0;
    $212 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($211)|0);
    $$0$i$i2$i$i77 = $212;
   }
   $213 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $214 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i77,$213)|0);
   if ($214) {
    HEAP32[$2>>2] = 0;
    label = 78;
    break;
   } else {
    if ($221) {
     break;
    } else {
     label = 80;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 78) {
  if ($221) {
   label = 80;
  }
 }
 if ((label|0) == 80) {
  $215 = HEAP32[$4>>2]|0;
  $216 = $215 | 2;
  HEAP32[$4>>2] = $216;
 }
 STACKTOP = sp;return ($$sroa$050$0$copyload|0);
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIcEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$off = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $8 = (__ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2,$$byval_copy,$4,$5,2)|0);
 $9 = HEAP32[$4>>2]|0;
 $10 = $9 & 4;
 $11 = ($10|0)==(0);
 $$off = (($8) + -1)|0;
 $12 = ($$off>>>0)<(31);
 $13 = $12 & $11;
 if ($13) {
  HEAP32[$1>>2] = $8;
 } else {
  $14 = $9 | 4;
  HEAP32[$4>>2] = $14;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIcEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $8 = (__ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2,$$byval_copy,$4,$5,2)|0);
 $9 = HEAP32[$4>>2]|0;
 $10 = $9 & 4;
 $11 = ($10|0)==(0);
 $12 = ($8|0)<(24);
 $or$cond = $12 & $11;
 if ($or$cond) {
  HEAP32[$1>>2] = $8;
 } else {
  $13 = $9 | 4;
  HEAP32[$4>>2] = $13;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIcEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$off = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $8 = (__ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2,$$byval_copy,$4,$5,2)|0);
 $9 = HEAP32[$4>>2]|0;
 $10 = $9 & 4;
 $11 = ($10|0)==(0);
 $$off = (($8) + -1)|0;
 $12 = ($$off>>>0)<(12);
 $13 = $12 & $11;
 if ($13) {
  HEAP32[$1>>2] = $8;
 } else {
  $14 = $9 | 4;
  HEAP32[$4>>2] = $14;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIcEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $8 = (__ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2,$$byval_copy,$4,$5,3)|0);
 $9 = HEAP32[$4>>2]|0;
 $10 = $9 & 4;
 $11 = ($10|0)==(0);
 $12 = ($8|0)<(366);
 $or$cond = $12 & $11;
 if ($or$cond) {
  HEAP32[$1>>2] = $8;
 } else {
  $13 = $9 | 4;
  HEAP32[$4>>2] = $13;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIcEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $8 = (__ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2,$$byval_copy,$4,$5,2)|0);
 $9 = HEAP32[$4>>2]|0;
 $10 = $9 & 4;
 $11 = ($10|0)==(0);
 $12 = ($8|0)<(13);
 $or$cond = $12 & $11;
 if ($or$cond) {
  $13 = (($8) + -1)|0;
  HEAP32[$1>>2] = $13;
 } else {
  $14 = $9 | 4;
  HEAP32[$4>>2] = $14;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIcEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $8 = (__ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2,$$byval_copy,$4,$5,2)|0);
 $9 = HEAP32[$4>>2]|0;
 $10 = $9 & 4;
 $11 = ($10|0)==(0);
 $12 = ($8|0)<(60);
 $or$cond = $12 & $11;
 if ($or$cond) {
  HEAP32[$1>>2] = $8;
 } else {
  $13 = $9 | 4;
  HEAP32[$4>>2] = $13;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i7 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i13 = 0, $$pre$i$i$i = 0, $$pre$i$i$i9 = 0, $10 = 0, $100 = 0, $101 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i10 = 0, $sext = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($4)) + 8|0);
 L1: while(1) {
  $6 = HEAP32[$1>>2]|0;
  $7 = ($6|0)==(0|0);
  do {
   if ($7) {
    $99 = 1;
   } else {
    $8 = ((($6)) + 12|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = ((($6)) + 16|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ($9|0)==($11|0);
    if ($12) {
     $13 = HEAP32[$6>>2]|0;
     $14 = ((($13)) + 36|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = (FUNCTION_TABLE_ii[$15 & 255]($6)|0);
     $$0$i$i$i$i = $16;
    } else {
     $17 = HEAP8[$9>>0]|0;
     $18 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($17)|0);
     $$0$i$i$i$i = $18;
    }
    $19 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
    $20 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i,$19)|0);
    if ($20) {
     HEAP32[$1>>2] = 0;
     $99 = 1;
     break;
    } else {
     $$pre$i$i$i = HEAP32[$1>>2]|0;
     $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
     $99 = $phitmp$i$i$i;
     break;
    }
   }
  } while(0);
  $21 = HEAP32[$2>>2]|0;
  $22 = ($21|0)==(0|0);
  do {
   if ($22) {
    label = 15;
   } else {
    $23 = ((($21)) + 12|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ((($21)) + 16|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = ($24|0)==($26|0);
    if ($27) {
     $28 = HEAP32[$21>>2]|0;
     $29 = ((($28)) + 36|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = (FUNCTION_TABLE_ii[$30 & 255]($21)|0);
     $$0$i$i2$i$i = $31;
    } else {
     $32 = HEAP8[$24>>0]|0;
     $33 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($32)|0);
     $$0$i$i2$i$i = $33;
    }
    $34 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
    $35 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i,$34)|0);
    if ($35) {
     HEAP32[$2>>2] = 0;
     label = 15;
     break;
    } else {
     if ($99) {
      $100 = $21;
      break;
     } else {
      $83 = $21;
      break L1;
     }
    }
   }
  } while(0);
  if ((label|0) == 15) {
   label = 0;
   if ($99) {
    $83 = 0;
    break;
   } else {
    $100 = 0;
   }
  }
  $36 = HEAP32[$1>>2]|0;
  $37 = ((($36)) + 12|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ((($36)) + 16|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = ($38|0)==($40|0);
  if ($41) {
   $42 = HEAP32[$36>>2]|0;
   $43 = ((($42)) + 36|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = (FUNCTION_TABLE_ii[$44 & 255]($36)|0);
   $$0$i$i = $45;
  } else {
   $46 = HEAP8[$38>>0]|0;
   $47 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($46)|0);
   $$0$i$i = $47;
  }
  $48 = $$0$i$i&255;
  $49 = ($48<<24>>24)>(-1);
  if (!($49)) {
   $83 = $100;
   break;
  }
  $sext = $$0$i$i << 24;
  $50 = $sext >> 24;
  $51 = HEAP32[$5>>2]|0;
  $52 = (($51) + ($50<<1)|0);
  $53 = HEAP16[$52>>1]|0;
  $54 = $53 & 8192;
  $55 = ($54<<16>>16)==(0);
  if ($55) {
   $83 = $100;
   break;
  }
  $56 = HEAP32[$1>>2]|0;
  $57 = ((($56)) + 12|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = ((($56)) + 16|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = ($58|0)==($60|0);
  if ($61) {
   $62 = HEAP32[$56>>2]|0;
   $63 = ((($62)) + 40|0);
   $64 = HEAP32[$63>>2]|0;
   (FUNCTION_TABLE_ii[$64 & 255]($56)|0);
  } else {
   $65 = ((($58)) + 1|0);
   HEAP32[$57>>2] = $65;
   $66 = HEAP8[$58>>0]|0;
   (__ZNSt3__211char_traitsIcE11to_int_typeEc($66)|0);
  }
 }
 $67 = HEAP32[$1>>2]|0;
 $68 = ($67|0)==(0|0);
 do {
  if ($68) {
   $101 = 1;
  } else {
   $69 = ((($67)) + 12|0);
   $70 = HEAP32[$69>>2]|0;
   $71 = ((($67)) + 16|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = ($70|0)==($72|0);
   if ($73) {
    $74 = HEAP32[$67>>2]|0;
    $75 = ((($74)) + 36|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = (FUNCTION_TABLE_ii[$76 & 255]($67)|0);
    $$0$i$i$i$i7 = $77;
   } else {
    $78 = HEAP8[$70>>0]|0;
    $79 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($78)|0);
    $$0$i$i$i$i7 = $79;
   }
   $80 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $81 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i7,$80)|0);
   if ($81) {
    HEAP32[$1>>2] = 0;
    $101 = 1;
    break;
   } else {
    $$pre$i$i$i9 = HEAP32[$1>>2]|0;
    $phitmp$i$i$i10 = ($$pre$i$i$i9|0)==(0|0);
    $101 = $phitmp$i$i$i10;
    break;
   }
  }
 } while(0);
 $82 = ($83|0)==(0|0);
 do {
  if ($82) {
   label = 39;
  } else {
   $84 = ((($83)) + 12|0);
   $85 = HEAP32[$84>>2]|0;
   $86 = ((($83)) + 16|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = ($85|0)==($87|0);
   if ($88) {
    $89 = HEAP32[$83>>2]|0;
    $90 = ((($89)) + 36|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = (FUNCTION_TABLE_ii[$91 & 255]($83)|0);
    $$0$i$i2$i$i13 = $92;
   } else {
    $93 = HEAP8[$85>>0]|0;
    $94 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($93)|0);
    $$0$i$i2$i$i13 = $94;
   }
   $95 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $96 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i13,$95)|0);
   if ($96) {
    HEAP32[$2>>2] = 0;
    label = 39;
    break;
   } else {
    if ($101) {
     break;
    } else {
     label = 41;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 39) {
  if ($101) {
   label = 41;
  }
 }
 if ((label|0) == 41) {
  $97 = HEAP32[$3>>2]|0;
  $98 = $97 | 2;
  HEAP32[$3>>2] = $98;
 }
 return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIcEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond20 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = ((($0)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (FUNCTION_TABLE_ii[$10 & 255]($7)|0);
 $12 = ((($11)) + 11|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = ($13<<24>>24)<(0);
 if ($14) {
  $15 = ((($11)) + 4|0);
  $16 = HEAP32[$15>>2]|0;
  $28 = $16;
 } else {
  $17 = $13&255;
  $28 = $17;
 }
 $18 = ((($11)) + 12|0);
 $19 = ((($18)) + 11|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = ($20<<24>>24)<(0);
 if ($21) {
  $22 = ((($11)) + 16|0);
  $23 = HEAP32[$22>>2]|0;
  $26 = $23;
 } else {
  $24 = $20&255;
  $26 = $24;
 }
 $25 = (0 - ($26))|0;
 $27 = ($28|0)==($25|0);
 do {
  if ($27) {
   $29 = HEAP32[$4>>2]|0;
   $30 = $29 | 4;
   HEAP32[$4>>2] = $30;
  } else {
   $31 = HEAP32[$3>>2]|0;
   HEAP32[$6>>2] = $31;
   $32 = ((($11)) + 24|0);
   ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
   $33 = (__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($2,$$byval_copy,$11,$32,$5,$4,0)|0);
   $34 = $33;
   $35 = $11;
   $36 = (($34) - ($35))|0;
   $37 = ($36|0)==(0);
   $38 = HEAP32[$1>>2]|0;
   $39 = ($38|0)==(12);
   $or$cond = $39 & $37;
   if ($or$cond) {
    HEAP32[$1>>2] = 0;
    break;
   }
   $40 = ($36|0)==(12);
   $41 = ($38|0)<(12);
   $or$cond20 = $41 & $40;
   if ($or$cond20) {
    $42 = (($38) + 12)|0;
    HEAP32[$1>>2] = $42;
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIcEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $8 = (__ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2,$$byval_copy,$4,$5,2)|0);
 $9 = HEAP32[$4>>2]|0;
 $10 = $9 & 4;
 $11 = ($10|0)==(0);
 $12 = ($8|0)<(61);
 $or$cond = $12 & $11;
 if ($or$cond) {
  HEAP32[$1>>2] = $8;
 } else {
  $13 = $9 | 4;
  HEAP32[$4>>2] = $13;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIcEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $8 = (__ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2,$$byval_copy,$4,$5,1)|0);
 $9 = HEAP32[$4>>2]|0;
 $10 = $9 & 4;
 $11 = ($10|0)==(0);
 $12 = ($8|0)<(7);
 $or$cond = $12 & $11;
 if ($or$cond) {
  HEAP32[$1>>2] = $8;
 } else {
  $13 = $9 | 4;
  HEAP32[$4>>2] = $13;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $8 = (__ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2,$$byval_copy,$4,$5,4)|0);
 $9 = HEAP32[$4>>2]|0;
 $10 = $9 & 4;
 $11 = ($10|0)==(0);
 if ($11) {
  $12 = ($8|0)<(69);
  if ($12) {
   $13 = (($8) + 2000)|0;
   $$0 = $13;
  } else {
   $14 = ($8|0)<(100);
   $15 = (($8) + 1900)|0;
   $spec$select = $14 ? $15 : $8;
   $$0 = $spec$select;
  }
  $16 = (($$0) + -1900)|0;
  HEAP32[$1>>2] = $16;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIcEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $8 = (__ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2,$$byval_copy,$4,$5,4)|0);
 $9 = HEAP32[$4>>2]|0;
 $10 = $9 & 4;
 $11 = ($10|0)==(0);
 if ($11) {
  $12 = (($8) + -1900)|0;
  HEAP32[$1>>2] = $12;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i8 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i14 = 0, $$pre$i$i$i = 0, $$pre$i$i$i10 = 0, $10 = 0, $100 = 0, $101 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i11 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = HEAP32[$1>>2]|0;
 $6 = ($5|0)==(0|0);
 do {
  if ($6) {
   $100 = 1;
  } else {
   $7 = ((($5)) + 12|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ((($5)) + 16|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($8|0)==($10|0);
   if ($11) {
    $12 = HEAP32[$5>>2]|0;
    $13 = ((($12)) + 36|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = (FUNCTION_TABLE_ii[$14 & 255]($5)|0);
    $$0$i$i$i$i = $15;
   } else {
    $16 = HEAP8[$8>>0]|0;
    $17 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($16)|0);
    $$0$i$i$i$i = $17;
   }
   $18 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $19 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i,$18)|0);
   if ($19) {
    HEAP32[$1>>2] = 0;
    $100 = 1;
    break;
   } else {
    $$pre$i$i$i = HEAP32[$1>>2]|0;
    $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
    $100 = $phitmp$i$i$i;
    break;
   }
  }
 } while(0);
 $20 = HEAP32[$2>>2]|0;
 $21 = ($20|0)==(0|0);
 do {
  if ($21) {
   label = 14;
  } else {
   $22 = ((($20)) + 12|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = ((($20)) + 16|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ($23|0)==($25|0);
   if ($26) {
    $27 = HEAP32[$20>>2]|0;
    $28 = ((($27)) + 36|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = (FUNCTION_TABLE_ii[$29 & 255]($20)|0);
    $$0$i$i2$i$i = $30;
   } else {
    $31 = HEAP8[$23>>0]|0;
    $32 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($31)|0);
    $$0$i$i2$i$i = $32;
   }
   $33 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $34 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i,$33)|0);
   if ($34) {
    HEAP32[$2>>2] = 0;
    label = 14;
    break;
   } else {
    if ($100) {
     $84 = $20;
     label = 17;
     break;
    } else {
     label = 16;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 14) {
  if ($100) {
   label = 16;
  } else {
   $84 = 0;
   label = 17;
  }
 }
 L22: do {
  if ((label|0) == 16) {
   $35 = HEAP32[$3>>2]|0;
   $36 = $35 | 6;
   HEAP32[$3>>2] = $36;
  }
  else if ((label|0) == 17) {
   $37 = HEAP32[$1>>2]|0;
   $38 = ((($37)) + 12|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = ((($37)) + 16|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = ($39|0)==($41|0);
   if ($42) {
    $43 = HEAP32[$37>>2]|0;
    $44 = ((($43)) + 36|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = (FUNCTION_TABLE_ii[$45 & 255]($37)|0);
    $$0$i$i = $46;
   } else {
    $47 = HEAP8[$39>>0]|0;
    $48 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($47)|0);
    $$0$i$i = $48;
   }
   $49 = $$0$i$i&255;
   $50 = HEAP32[$4>>2]|0;
   $51 = ((($50)) + 36|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = (FUNCTION_TABLE_iiii[$52 & 63]($4,$49,0)|0);
   $54 = ($53<<24>>24)==(37);
   if (!($54)) {
    $55 = HEAP32[$3>>2]|0;
    $56 = $55 | 4;
    HEAP32[$3>>2] = $56;
    break;
   }
   $57 = HEAP32[$1>>2]|0;
   $58 = ((($57)) + 12|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = ((($57)) + 16|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = ($59|0)==($61|0);
   if ($62) {
    $63 = HEAP32[$57>>2]|0;
    $64 = ((($63)) + 40|0);
    $65 = HEAP32[$64>>2]|0;
    (FUNCTION_TABLE_ii[$65 & 255]($57)|0);
   } else {
    $66 = ((($59)) + 1|0);
    HEAP32[$58>>2] = $66;
    $67 = HEAP8[$59>>0]|0;
    (__ZNSt3__211char_traitsIcE11to_int_typeEc($67)|0);
   }
   $68 = HEAP32[$1>>2]|0;
   $69 = ($68|0)==(0|0);
   do {
    if ($69) {
     $101 = 1;
    } else {
     $70 = ((($68)) + 12|0);
     $71 = HEAP32[$70>>2]|0;
     $72 = ((($68)) + 16|0);
     $73 = HEAP32[$72>>2]|0;
     $74 = ($71|0)==($73|0);
     if ($74) {
      $75 = HEAP32[$68>>2]|0;
      $76 = ((($75)) + 36|0);
      $77 = HEAP32[$76>>2]|0;
      $78 = (FUNCTION_TABLE_ii[$77 & 255]($68)|0);
      $$0$i$i$i$i8 = $78;
     } else {
      $79 = HEAP8[$71>>0]|0;
      $80 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($79)|0);
      $$0$i$i$i$i8 = $80;
     }
     $81 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
     $82 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i8,$81)|0);
     if ($82) {
      HEAP32[$1>>2] = 0;
      $101 = 1;
      break;
     } else {
      $$pre$i$i$i10 = HEAP32[$1>>2]|0;
      $phitmp$i$i$i11 = ($$pre$i$i$i10|0)==(0|0);
      $101 = $phitmp$i$i$i11;
      break;
     }
    }
   } while(0);
   $83 = ($84|0)==(0|0);
   do {
    if ($83) {
     label = 38;
    } else {
     $85 = ((($84)) + 12|0);
     $86 = HEAP32[$85>>2]|0;
     $87 = ((($84)) + 16|0);
     $88 = HEAP32[$87>>2]|0;
     $89 = ($86|0)==($88|0);
     if ($89) {
      $90 = HEAP32[$84>>2]|0;
      $91 = ((($90)) + 36|0);
      $92 = HEAP32[$91>>2]|0;
      $93 = (FUNCTION_TABLE_ii[$92 & 255]($84)|0);
      $$0$i$i2$i$i14 = $93;
     } else {
      $94 = HEAP8[$86>>0]|0;
      $95 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($94)|0);
      $$0$i$i2$i$i14 = $95;
     }
     $96 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
     $97 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i14,$96)|0);
     if ($97) {
      HEAP32[$2>>2] = 0;
      label = 38;
      break;
     } else {
      if ($101) {
       break L22;
      } else {
       break;
      }
     }
    }
   } while(0);
   if ((label|0) == 38) {
    if (!($101)) {
     break;
    }
   }
   $98 = HEAP32[$3>>2]|0;
   $99 = $98 | 2;
   HEAP32[$3>>2] = $99;
  }
 } while(0);
 return;
}
function __ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i25 = 0, $$0$i$i$i$i40 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i31 = 0, $$0$i$i2$i$i46 = 0, $$0$i$i36 = 0, $$0$in = 0, $$023 = 0, $$023$in = 0, $$2 = 0, $$pre$i$i$i = 0, $$pre$i$i$i27 = 0, $$pre$i$i$i42 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i28 = 0, $phitmp$i$i$i43 = 0, $sext = 0;
 var $sext52 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = HEAP32[$0>>2]|0;
 $6 = ($5|0)==(0|0);
 do {
  if ($6) {
   $180 = 1;
  } else {
   $7 = ((($5)) + 12|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ((($5)) + 16|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($8|0)==($10|0);
   if ($11) {
    $12 = HEAP32[$5>>2]|0;
    $13 = ((($12)) + 36|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = (FUNCTION_TABLE_ii[$14 & 255]($5)|0);
    $$0$i$i$i$i = $15;
   } else {
    $16 = HEAP8[$8>>0]|0;
    $17 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($16)|0);
    $$0$i$i$i$i = $17;
   }
   $18 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $19 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i,$18)|0);
   if ($19) {
    HEAP32[$0>>2] = 0;
    $180 = 1;
    break;
   } else {
    $$pre$i$i$i = HEAP32[$0>>2]|0;
    $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
    $180 = $phitmp$i$i$i;
    break;
   }
  }
 } while(0);
 $20 = HEAP32[$1>>2]|0;
 $21 = ($20|0)==(0|0);
 do {
  if ($21) {
   label = 14;
  } else {
   $22 = ((($20)) + 12|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = ((($20)) + 16|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ($23|0)==($25|0);
   if ($26) {
    $27 = HEAP32[$20>>2]|0;
    $28 = ((($27)) + 36|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = (FUNCTION_TABLE_ii[$29 & 255]($20)|0);
    $$0$i$i2$i$i = $30;
   } else {
    $31 = HEAP8[$23>>0]|0;
    $32 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($31)|0);
    $$0$i$i2$i$i = $32;
   }
   $33 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $34 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i,$33)|0);
   if ($34) {
    HEAP32[$1>>2] = 0;
    label = 14;
    break;
   } else {
    if ($180) {
     $181 = $20;
     label = 17;
     break;
    } else {
     label = 16;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 14) {
  if ($180) {
   label = 16;
  } else {
   $181 = 0;
   label = 17;
  }
 }
 L22: do {
  if ((label|0) == 16) {
   $35 = HEAP32[$2>>2]|0;
   $36 = $35 | 6;
   HEAP32[$2>>2] = $36;
   $$2 = 0;
  }
  else if ((label|0) == 17) {
   $37 = HEAP32[$0>>2]|0;
   $38 = ((($37)) + 12|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = ((($37)) + 16|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = ($39|0)==($41|0);
   if ($42) {
    $43 = HEAP32[$37>>2]|0;
    $44 = ((($43)) + 36|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = (FUNCTION_TABLE_ii[$45 & 255]($37)|0);
    $$0$i$i = $46;
   } else {
    $47 = HEAP8[$39>>0]|0;
    $48 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($47)|0);
    $$0$i$i = $48;
   }
   $49 = $$0$i$i&255;
   $50 = ($49<<24>>24)>(-1);
   if ($50) {
    $sext = $$0$i$i << 24;
    $51 = $sext >> 24;
    $52 = ((($3)) + 8|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = (($53) + ($51<<1)|0);
    $55 = HEAP16[$54>>1]|0;
    $56 = $55 & 2048;
    $57 = ($56<<16>>16)==(0);
    if (!($57)) {
     $60 = HEAP32[$3>>2]|0;
     $61 = ((($60)) + 36|0);
     $62 = HEAP32[$61>>2]|0;
     $63 = (FUNCTION_TABLE_iiii[$62 & 63]($3,$49,0)|0);
     $64 = $63 << 24 >> 24;
     $65 = HEAP32[$0>>2]|0;
     $66 = ((($65)) + 12|0);
     $67 = HEAP32[$66>>2]|0;
     $68 = ((($65)) + 16|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = ($67|0)==($69|0);
     if ($70) {
      $71 = HEAP32[$65>>2]|0;
      $72 = ((($71)) + 40|0);
      $73 = HEAP32[$72>>2]|0;
      (FUNCTION_TABLE_ii[$73 & 255]($65)|0);
     } else {
      $74 = ((($67)) + 1|0);
      HEAP32[$66>>2] = $74;
      $75 = HEAP8[$67>>0]|0;
      (__ZNSt3__211char_traitsIcE11to_int_typeEc($75)|0);
     }
     $$0$in = $64;$$023$in = $4;$182 = $181;$92 = $181;
     while(1) {
      $$0 = (($$0$in) + -48)|0;
      $$023 = (($$023$in) + -1)|0;
      $76 = HEAP32[$0>>2]|0;
      $77 = ($76|0)==(0|0);
      do {
       if ($77) {
        $107 = 1;
       } else {
        $78 = ((($76)) + 12|0);
        $79 = HEAP32[$78>>2]|0;
        $80 = ((($76)) + 16|0);
        $81 = HEAP32[$80>>2]|0;
        $82 = ($79|0)==($81|0);
        if ($82) {
         $83 = HEAP32[$76>>2]|0;
         $84 = ((($83)) + 36|0);
         $85 = HEAP32[$84>>2]|0;
         $86 = (FUNCTION_TABLE_ii[$85 & 255]($76)|0);
         $$0$i$i$i$i25 = $86;
        } else {
         $87 = HEAP8[$79>>0]|0;
         $88 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($87)|0);
         $$0$i$i$i$i25 = $88;
        }
        $89 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
        $90 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i25,$89)|0);
        if ($90) {
         HEAP32[$0>>2] = 0;
         $107 = 1;
         break;
        } else {
         $$pre$i$i$i27 = HEAP32[$0>>2]|0;
         $phitmp$i$i$i28 = ($$pre$i$i$i27|0)==(0|0);
         $107 = $phitmp$i$i$i28;
         break;
        }
       }
      } while(0);
      $91 = ($92|0)==(0|0);
      if ($91) {
       $108 = 1;$164 = $182;$183 = 0;
      } else {
       $93 = ((($92)) + 12|0);
       $94 = HEAP32[$93>>2]|0;
       $95 = ((($92)) + 16|0);
       $96 = HEAP32[$95>>2]|0;
       $97 = ($94|0)==($96|0);
       if ($97) {
        $98 = HEAP32[$92>>2]|0;
        $99 = ((($98)) + 36|0);
        $100 = HEAP32[$99>>2]|0;
        $101 = (FUNCTION_TABLE_ii[$100 & 255]($92)|0);
        $$0$i$i2$i$i31 = $101;
       } else {
        $102 = HEAP8[$94>>0]|0;
        $103 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($102)|0);
        $$0$i$i2$i$i31 = $103;
       }
       $104 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
       $105 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i31,$104)|0);
       if ($105) {
        HEAP32[$1>>2] = 0;
        $108 = 1;$164 = 0;$183 = 0;
       } else {
        $108 = 0;$164 = $182;$183 = $92;
       }
      }
      $106 = $107 ^ $108;
      $109 = ($$023$in|0)>(1);
      $110 = $109 & $106;
      $111 = HEAP32[$0>>2]|0;
      if (!($110)) {
       break;
      }
      $112 = ((($111)) + 12|0);
      $113 = HEAP32[$112>>2]|0;
      $114 = ((($111)) + 16|0);
      $115 = HEAP32[$114>>2]|0;
      $116 = ($113|0)==($115|0);
      if ($116) {
       $117 = HEAP32[$111>>2]|0;
       $118 = ((($117)) + 36|0);
       $119 = HEAP32[$118>>2]|0;
       $120 = (FUNCTION_TABLE_ii[$119 & 255]($111)|0);
       $$0$i$i36 = $120;
      } else {
       $121 = HEAP8[$113>>0]|0;
       $122 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($121)|0);
       $$0$i$i36 = $122;
      }
      $123 = $$0$i$i36&255;
      $124 = ($123<<24>>24)>(-1);
      if (!($124)) {
       $$2 = $$0;
       break L22;
      }
      $sext52 = $$0$i$i36 << 24;
      $125 = $sext52 >> 24;
      $126 = HEAP32[$52>>2]|0;
      $127 = (($126) + ($125<<1)|0);
      $128 = HEAP16[$127>>1]|0;
      $129 = $128 & 2048;
      $130 = ($129<<16>>16)==(0);
      if ($130) {
       $$2 = $$0;
       break L22;
      }
      $131 = ($$0*10)|0;
      $132 = HEAP32[$3>>2]|0;
      $133 = ((($132)) + 36|0);
      $134 = HEAP32[$133>>2]|0;
      $135 = (FUNCTION_TABLE_iiii[$134 & 63]($3,$123,0)|0);
      $136 = $135 << 24 >> 24;
      $137 = (($131) + ($136))|0;
      $138 = HEAP32[$0>>2]|0;
      $139 = ((($138)) + 12|0);
      $140 = HEAP32[$139>>2]|0;
      $141 = ((($138)) + 16|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = ($140|0)==($142|0);
      if ($143) {
       $144 = HEAP32[$138>>2]|0;
       $145 = ((($144)) + 40|0);
       $146 = HEAP32[$145>>2]|0;
       (FUNCTION_TABLE_ii[$146 & 255]($138)|0);
      } else {
       $147 = ((($140)) + 1|0);
       HEAP32[$139>>2] = $147;
       $148 = HEAP8[$140>>0]|0;
       (__ZNSt3__211char_traitsIcE11to_int_typeEc($148)|0);
      }
      $$0$in = $137;$$023$in = $$023;$182 = $164;$92 = $183;
     }
     $149 = ($111|0)==(0|0);
     do {
      if ($149) {
       $184 = 1;
      } else {
       $150 = ((($111)) + 12|0);
       $151 = HEAP32[$150>>2]|0;
       $152 = ((($111)) + 16|0);
       $153 = HEAP32[$152>>2]|0;
       $154 = ($151|0)==($153|0);
       if ($154) {
        $155 = HEAP32[$111>>2]|0;
        $156 = ((($155)) + 36|0);
        $157 = HEAP32[$156>>2]|0;
        $158 = (FUNCTION_TABLE_ii[$157 & 255]($111)|0);
        $$0$i$i$i$i40 = $158;
       } else {
        $159 = HEAP8[$151>>0]|0;
        $160 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($159)|0);
        $$0$i$i$i$i40 = $160;
       }
       $161 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
       $162 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i40,$161)|0);
       if ($162) {
        HEAP32[$0>>2] = 0;
        $184 = 1;
        break;
       } else {
        $$pre$i$i$i42 = HEAP32[$0>>2]|0;
        $phitmp$i$i$i43 = ($$pre$i$i$i42|0)==(0|0);
        $184 = $phitmp$i$i$i43;
        break;
       }
      }
     } while(0);
     $163 = ($164|0)==(0|0);
     do {
      if ($163) {
       label = 63;
      } else {
       $165 = ((($164)) + 12|0);
       $166 = HEAP32[$165>>2]|0;
       $167 = ((($164)) + 16|0);
       $168 = HEAP32[$167>>2]|0;
       $169 = ($166|0)==($168|0);
       if ($169) {
        $170 = HEAP32[$164>>2]|0;
        $171 = ((($170)) + 36|0);
        $172 = HEAP32[$171>>2]|0;
        $173 = (FUNCTION_TABLE_ii[$172 & 255]($164)|0);
        $$0$i$i2$i$i46 = $173;
       } else {
        $174 = HEAP8[$166>>0]|0;
        $175 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($174)|0);
        $$0$i$i2$i$i46 = $175;
       }
       $176 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
       $177 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i46,$176)|0);
       if ($177) {
        HEAP32[$1>>2] = 0;
        label = 63;
        break;
       } else {
        if ($184) {
         $$2 = $$0;
         break L22;
        } else {
         break;
        }
       }
      }
     } while(0);
     if ((label|0) == 63) {
      if (!($184)) {
       $$2 = $$0;
       break;
      }
     }
     $178 = HEAP32[$2>>2]|0;
     $179 = $178 | 2;
     HEAP32[$2>>2] = $179;
     $$2 = $$0;
     break;
    }
   }
   $58 = HEAP32[$2>>2]|0;
   $59 = $58 | 4;
   HEAP32[$2>>2] = $59;
   $$2 = 0;
  }
 } while(0);
 return ($$2|0);
}
function __ZNSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}
function __ZNSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $9;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $10 = (__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($0,$$byval_copy,$$byval_copy1,$3,$4,$5,21136,(21168))|0);
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp;
 $8 = ((($0)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 20|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (FUNCTION_TABLE_ii[$11 & 255]($8)|0);
 $13 = HEAP32[$1>>2]|0;
 HEAP32[$6>>2] = $13;
 $14 = HEAP32[$2>>2]|0;
 HEAP32[$7>>2] = $14;
 $15 = ((($12)) + 8|0);
 $16 = ((($15)) + 3|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = ($17<<24>>24)<(0);
 $19 = HEAP32[$12>>2]|0;
 $20 = ((($12)) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $17&255;
 $23 = $18 ? $19 : $12;
 $24 = $18 ? $21 : $22;
 $25 = (($23) + ($24<<2)|0);
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$7>>2]|0;
 $26 = (__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($0,$$byval_copy,$$byval_copy1,$3,$4,$5,$23,$25)|0);
 STACKTOP = sp;return ($26|0);
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$sroa$0$0$copyload = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 __ZNKSt3__28ios_base6getlocEv($$byval_copy,$3);
 __THREW__ = 0;
 $7 = (invoke_iii(37,($$byval_copy|0),(50772|0))|0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $12 = ___cxa_find_matching_catch_2()|0;
  $13 = (getTempRet0() | 0);
  __ZNSt3__26localeD2Ev($$byval_copy);
  ___resumeException($12|0);
  // unreachable;
 } else {
  __ZNSt3__26localeD2Ev($$byval_copy);
  $10 = ((($5)) + 24|0);
  $11 = HEAP32[$2>>2]|0;
  HEAP32[$6>>2] = $11;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
  __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE($0,$10,$1,$$byval_copy,$4,$7);
  $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
  STACKTOP = sp;return ($$sroa$0$0$copyload|0);
 }
 return (0)|0;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$sroa$0$0$copyload = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 __ZNKSt3__28ios_base6getlocEv($$byval_copy,$3);
 __THREW__ = 0;
 $7 = (invoke_iii(37,($$byval_copy|0),(50772|0))|0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $12 = ___cxa_find_matching_catch_2()|0;
  $13 = (getTempRet0() | 0);
  __ZNSt3__26localeD2Ev($$byval_copy);
  ___resumeException($12|0);
  // unreachable;
 } else {
  __ZNSt3__26localeD2Ev($$byval_copy);
  $10 = ((($5)) + 16|0);
  $11 = HEAP32[$2>>2]|0;
  HEAP32[$6>>2] = $11;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
  __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE($0,$10,$1,$$byval_copy,$4,$7);
  $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
  STACKTOP = sp;return ($$sroa$0$0$copyload|0);
 }
 return (0)|0;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$sroa$0$0$copyload = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 __ZNKSt3__28ios_base6getlocEv($$byval_copy,$3);
 __THREW__ = 0;
 $7 = (invoke_iii(37,($$byval_copy|0),(50772|0))|0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $12 = ___cxa_find_matching_catch_2()|0;
  $13 = (getTempRet0() | 0);
  __ZNSt3__26localeD2Ev($$byval_copy);
  ___resumeException($12|0);
  // unreachable;
 } else {
  __ZNSt3__26localeD2Ev($$byval_copy);
  $10 = ((($5)) + 20|0);
  $11 = HEAP32[$2>>2]|0;
  HEAP32[$6>>2] = $11;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
  __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE($0,$10,$1,$$byval_copy,$4,$7);
  $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
  STACKTOP = sp;return ($$sroa$0$0$copyload|0);
 }
 return (0)|0;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$byval_copy26 = 0, $$byval_copy30 = 0, $$sroa$098$0 = 0, $$sroa$098$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $$byval_copy30 = sp + 128|0;
 $$byval_copy26 = sp + 112|0;
 $8 = sp + 124|0;
 $9 = sp + 120|0;
 $10 = sp + 116|0;
 $11 = sp + 108|0;
 $12 = sp + 104|0;
 $13 = sp + 100|0;
 $14 = sp + 96|0;
 $15 = sp + 92|0;
 $16 = sp + 88|0;
 $17 = sp + 84|0;
 $18 = sp + 80|0;
 $19 = sp + 76|0;
 $20 = sp + 72|0;
 $21 = sp + 68|0;
 $22 = sp + 64|0;
 $23 = sp + 60|0;
 $24 = sp + 56|0;
 $25 = sp + 52|0;
 $26 = sp + 48|0;
 $27 = sp + 44|0;
 $28 = sp + 40|0;
 $29 = sp + 36|0;
 $30 = sp + 32|0;
 $31 = sp + 28|0;
 $32 = sp + 24|0;
 $33 = sp + 20|0;
 $34 = sp + 16|0;
 $35 = sp + 12|0;
 $36 = sp + 8|0;
 $37 = sp + 4|0;
 $38 = sp;
 HEAP32[$4>>2] = 0;
 __ZNKSt3__28ios_base6getlocEv($$byval_copy30,$3);
 __THREW__ = 0;
 $39 = (invoke_iii(37,($$byval_copy30|0),(50772|0))|0);
 $40 = __THREW__; __THREW__ = 0;
 $41 = $40&1;
 if ($41) {
  $43 = ___cxa_find_matching_catch_2()|0;
  $44 = (getTempRet0() | 0);
  __ZNSt3__26localeD2Ev($$byval_copy30);
  ___resumeException($43|0);
  // unreachable;
 }
 __ZNSt3__26localeD2Ev($$byval_copy30);
 $42 = $6 << 24 >> 24;
 do {
  switch ($42|0) {
  case 65: case 97:  {
   $45 = ((($5)) + 24|0);
   $46 = HEAP32[$2>>2]|0;
   HEAP32[$8>>2] = $46;
   ;HEAP32[$$byval_copy30>>2]=HEAP32[$8>>2]|0;
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE($0,$45,$1,$$byval_copy30,$4,$39);
   label = 28;
   break;
  }
  case 104: case 66: case 98:  {
   $47 = ((($5)) + 16|0);
   $48 = HEAP32[$2>>2]|0;
   HEAP32[$9>>2] = $48;
   ;HEAP32[$$byval_copy30>>2]=HEAP32[$9>>2]|0;
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE($0,$47,$1,$$byval_copy30,$4,$39);
   label = 28;
   break;
  }
  case 99:  {
   $49 = ((($0)) + 8|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = ((($50)) + 12|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = (FUNCTION_TABLE_ii[$52 & 255]($49)|0);
   $54 = HEAP32[$1>>2]|0;
   HEAP32[$10>>2] = $54;
   $55 = HEAP32[$2>>2]|0;
   HEAP32[$11>>2] = $55;
   $56 = ((($53)) + 8|0);
   $57 = ((($56)) + 3|0);
   $58 = HEAP8[$57>>0]|0;
   $59 = ($58<<24>>24)<(0);
   $60 = HEAP32[$53>>2]|0;
   $61 = ((($53)) + 4|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = $58&255;
   $64 = $59 ? $60 : $53;
   $65 = $59 ? $62 : $63;
   $66 = (($64) + ($65<<2)|0);
   ;HEAP32[$$byval_copy26>>2]=HEAP32[$10>>2]|0;
   ;HEAP32[$$byval_copy30>>2]=HEAP32[$11>>2]|0;
   $67 = (__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($0,$$byval_copy26,$$byval_copy30,$3,$4,$5,$64,$66)|0);
   HEAP32[$1>>2] = $67;
   label = 28;
   break;
  }
  case 101: case 100:  {
   $68 = ((($5)) + 12|0);
   $69 = HEAP32[$2>>2]|0;
   HEAP32[$12>>2] = $69;
   ;HEAP32[$$byval_copy30>>2]=HEAP32[$12>>2]|0;
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIwEE($0,$68,$1,$$byval_copy30,$4,$39);
   label = 28;
   break;
  }
  case 68:  {
   $70 = HEAP32[$1>>2]|0;
   HEAP32[$13>>2] = $70;
   $71 = HEAP32[$2>>2]|0;
   HEAP32[$14>>2] = $71;
   ;HEAP32[$$byval_copy26>>2]=HEAP32[$13>>2]|0;
   ;HEAP32[$$byval_copy30>>2]=HEAP32[$14>>2]|0;
   $72 = (__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($0,$$byval_copy26,$$byval_copy30,$3,$4,$5,20960,(20992))|0);
   HEAP32[$1>>2] = $72;
   label = 28;
   break;
  }
  case 70:  {
   $73 = HEAP32[$1>>2]|0;
   HEAP32[$15>>2] = $73;
   $74 = HEAP32[$2>>2]|0;
   HEAP32[$16>>2] = $74;
   ;HEAP32[$$byval_copy26>>2]=HEAP32[$15>>2]|0;
   ;HEAP32[$$byval_copy30>>2]=HEAP32[$16>>2]|0;
   $75 = (__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($0,$$byval_copy26,$$byval_copy30,$3,$4,$5,20992,(21024))|0);
   HEAP32[$1>>2] = $75;
   label = 28;
   break;
  }
  case 72:  {
   $76 = ((($5)) + 8|0);
   $77 = HEAP32[$2>>2]|0;
   HEAP32[$17>>2] = $77;
   ;HEAP32[$$byval_copy30>>2]=HEAP32[$17>>2]|0;
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIwEE($0,$76,$1,$$byval_copy30,$4,$39);
   label = 28;
   break;
  }
  case 73:  {
   $78 = ((($5)) + 8|0);
   $79 = HEAP32[$2>>2]|0;
   HEAP32[$18>>2] = $79;
   ;HEAP32[$$byval_copy30>>2]=HEAP32[$18>>2]|0;
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIwEE($0,$78,$1,$$byval_copy30,$4,$39);
   label = 28;
   break;
  }
  case 106:  {
   $80 = ((($5)) + 28|0);
   $81 = HEAP32[$2>>2]|0;
   HEAP32[$19>>2] = $81;
   ;HEAP32[$$byval_copy30>>2]=HEAP32[$19>>2]|0;
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIwEE($0,$80,$1,$$byval_copy30,$4,$39);
   label = 28;
   break;
  }
  case 109:  {
   $82 = ((($5)) + 16|0);
   $83 = HEAP32[$2>>2]|0;
   HEAP32[$20>>2] = $83;
   ;HEAP32[$$byval_copy30>>2]=HEAP32[$20>>2]|0;
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIwEE($0,$82,$1,$$byval_copy30,$4,$39);
   label = 28;
   break;
  }
  case 77:  {
   $84 = ((($5)) + 4|0);
   $85 = HEAP32[$2>>2]|0;
   HEAP32[$21>>2] = $85;
   ;HEAP32[$$byval_copy30>>2]=HEAP32[$21>>2]|0;
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIwEE($0,$84,$1,$$byval_copy30,$4,$39);
   label = 28;
   break;
  }
  case 116: case 110:  {
   $86 = HEAP32[$2>>2]|0;
   HEAP32[$22>>2] = $86;
   ;HEAP32[$$byval_copy30>>2]=HEAP32[$22>>2]|0;
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE($0,$1,$$byval_copy30,$4,$39);
   label = 28;
   break;
  }
  case 112:  {
   $87 = ((($5)) + 8|0);
   $88 = HEAP32[$2>>2]|0;
   HEAP32[$23>>2] = $88;
   ;HEAP32[$$byval_copy30>>2]=HEAP32[$23>>2]|0;
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIwEE($0,$87,$1,$$byval_copy30,$4,$39);
   label = 28;
   break;
  }
  case 114:  {
   $89 = HEAP32[$1>>2]|0;
   HEAP32[$24>>2] = $89;
   $90 = HEAP32[$2>>2]|0;
   HEAP32[$25>>2] = $90;
   ;HEAP32[$$byval_copy26>>2]=HEAP32[$24>>2]|0;
   ;HEAP32[$$byval_copy30>>2]=HEAP32[$25>>2]|0;
   $91 = (__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($0,$$byval_copy26,$$byval_copy30,$3,$4,$5,21024,(21068))|0);
   HEAP32[$1>>2] = $91;
   label = 28;
   break;
  }
  case 82:  {
   $92 = HEAP32[$1>>2]|0;
   HEAP32[$26>>2] = $92;
   $93 = HEAP32[$2>>2]|0;
   HEAP32[$27>>2] = $93;
   ;HEAP32[$$byval_copy26>>2]=HEAP32[$26>>2]|0;
   ;HEAP32[$$byval_copy30>>2]=HEAP32[$27>>2]|0;
   $94 = (__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($0,$$byval_copy26,$$byval_copy30,$3,$4,$5,21072,(21092))|0);
   HEAP32[$1>>2] = $94;
   label = 28;
   break;
  }
  case 83:  {
   $95 = HEAP32[$2>>2]|0;
   HEAP32[$28>>2] = $95;
   ;HEAP32[$$byval_copy30>>2]=HEAP32[$28>>2]|0;
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIwEE($0,$5,$1,$$byval_copy30,$4,$39);
   label = 28;
   break;
  }
  case 84:  {
   $96 = HEAP32[$1>>2]|0;
   HEAP32[$29>>2] = $96;
   $97 = HEAP32[$2>>2]|0;
   HEAP32[$30>>2] = $97;
   ;HEAP32[$$byval_copy26>>2]=HEAP32[$29>>2]|0;
   ;HEAP32[$$byval_copy30>>2]=HEAP32[$30>>2]|0;
   $98 = (__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($0,$$byval_copy26,$$byval_copy30,$3,$4,$5,21104,(21136))|0);
   HEAP32[$1>>2] = $98;
   label = 28;
   break;
  }
  case 119:  {
   $99 = ((($5)) + 24|0);
   $100 = HEAP32[$2>>2]|0;
   HEAP32[$31>>2] = $100;
   ;HEAP32[$$byval_copy30>>2]=HEAP32[$31>>2]|0;
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIwEE($0,$99,$1,$$byval_copy30,$4,$39);
   label = 28;
   break;
  }
  case 120:  {
   $101 = HEAP32[$0>>2]|0;
   $102 = ((($101)) + 20|0);
   $103 = HEAP32[$102>>2]|0;
   $104 = HEAP32[$1>>2]|0;
   HEAP32[$32>>2] = $104;
   $105 = HEAP32[$2>>2]|0;
   HEAP32[$33>>2] = $105;
   ;HEAP32[$$byval_copy26>>2]=HEAP32[$32>>2]|0;
   ;HEAP32[$$byval_copy30>>2]=HEAP32[$33>>2]|0;
   $106 = (FUNCTION_TABLE_iiiiiii[$103 & 63]($0,$$byval_copy26,$$byval_copy30,$3,$4,$5)|0);
   $$sroa$098$0 = $106;
   break;
  }
  case 88:  {
   $107 = ((($0)) + 8|0);
   $108 = HEAP32[$107>>2]|0;
   $109 = ((($108)) + 24|0);
   $110 = HEAP32[$109>>2]|0;
   $111 = (FUNCTION_TABLE_ii[$110 & 255]($107)|0);
   $112 = HEAP32[$1>>2]|0;
   HEAP32[$34>>2] = $112;
   $113 = HEAP32[$2>>2]|0;
   HEAP32[$35>>2] = $113;
   $114 = ((($111)) + 8|0);
   $115 = ((($114)) + 3|0);
   $116 = HEAP8[$115>>0]|0;
   $117 = ($116<<24>>24)<(0);
   $118 = HEAP32[$111>>2]|0;
   $119 = ((($111)) + 4|0);
   $120 = HEAP32[$119>>2]|0;
   $121 = $116&255;
   $122 = $117 ? $118 : $111;
   $123 = $117 ? $120 : $121;
   $124 = (($122) + ($123<<2)|0);
   ;HEAP32[$$byval_copy26>>2]=HEAP32[$34>>2]|0;
   ;HEAP32[$$byval_copy30>>2]=HEAP32[$35>>2]|0;
   $125 = (__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($0,$$byval_copy26,$$byval_copy30,$3,$4,$5,$122,$124)|0);
   HEAP32[$1>>2] = $125;
   label = 28;
   break;
  }
  case 121:  {
   $126 = ((($5)) + 20|0);
   $127 = HEAP32[$2>>2]|0;
   HEAP32[$36>>2] = $127;
   ;HEAP32[$$byval_copy30>>2]=HEAP32[$36>>2]|0;
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE($0,$126,$1,$$byval_copy30,$4,$39);
   label = 28;
   break;
  }
  case 89:  {
   $128 = ((($5)) + 20|0);
   $129 = HEAP32[$2>>2]|0;
   HEAP32[$37>>2] = $129;
   ;HEAP32[$$byval_copy30>>2]=HEAP32[$37>>2]|0;
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIwEE($0,$128,$1,$$byval_copy30,$4,$39);
   label = 28;
   break;
  }
  case 37:  {
   $130 = HEAP32[$2>>2]|0;
   HEAP32[$38>>2] = $130;
   ;HEAP32[$$byval_copy30>>2]=HEAP32[$38>>2]|0;
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE($0,$1,$$byval_copy30,$4,$39);
   label = 28;
   break;
  }
  default: {
   $131 = HEAP32[$4>>2]|0;
   $132 = $131 | 4;
   HEAP32[$4>>2] = $132;
   label = 28;
  }
  }
 } while(0);
 if ((label|0) == 28) {
  $$sroa$098$0$copyload = HEAP32[$1>>2]|0;
  $$sroa$098$0 = $$sroa$098$0$copyload;
 }
 STACKTOP = sp;return ($$sroa$098$0|0);
}
function __ZNKSt3__220__time_get_c_storageIwE7__weeksEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[48568]|0;
 $2 = ($1<<24>>24)==(0);
 do {
  if ($2) {
   $3 = (___cxa_guard_acquire(48568)|0);
   $4 = ($3|0)==(0);
   if (!($4)) {
    __THREW__ = 0;
    invoke_v(8);
    $5 = __THREW__; __THREW__ = 0;
    $6 = $5&1;
    if ($6) {
     $8 = ___cxa_find_matching_catch_2()|0;
     $9 = (getTempRet0() | 0);
     ___resumeException($8|0);
     // unreachable;
    } else {
     HEAP32[12734] = 48224;
     break;
    }
   }
  }
 } while(0);
 $7 = HEAP32[12734]|0;
 return ($7|0);
}
function __ZNKSt3__220__time_get_c_storageIwE8__monthsEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[48552]|0;
 $2 = ($1<<24>>24)==(0);
 do {
  if ($2) {
   $3 = (___cxa_guard_acquire(48552)|0);
   $4 = ($3|0)==(0);
   if (!($4)) {
    __THREW__ = 0;
    invoke_v(9);
    $5 = __THREW__; __THREW__ = 0;
    $6 = $5&1;
    if ($6) {
     $8 = ___cxa_find_matching_catch_2()|0;
     $9 = (getTempRet0() | 0);
     ___resumeException($8|0);
     // unreachable;
    } else {
     HEAP32[12733] = 47936;
     break;
    }
   }
  }
 } while(0);
 $7 = HEAP32[12733]|0;
 return ($7|0);
}
function __ZNKSt3__220__time_get_c_storageIwE7__am_pmEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[48536]|0;
 $2 = ($1<<24>>24)==(0);
 do {
  if ($2) {
   $3 = (___cxa_guard_acquire(48536)|0);
   $4 = ($3|0)==(0);
   if (!($4)) {
    __THREW__ = 0;
    invoke_v(10);
    $5 = __THREW__; __THREW__ = 0;
    $6 = $5&1;
    if ($6) {
     $8 = ___cxa_find_matching_catch_2()|0;
     $9 = (getTempRet0() | 0);
     ___resumeException($8|0);
     // unreachable;
    } else {
     HEAP32[12732] = 47648;
     break;
    }
   }
  }
 } while(0);
 $7 = HEAP32[12732]|0;
 return ($7|0);
}
function __ZNKSt3__220__time_get_c_storageIwE3__cEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[48528]|0;
 $2 = ($1<<24>>24)==(0);
 do {
  if ($2) {
   $3 = (___cxa_guard_acquire(48528)|0);
   $4 = ($3|0)==(0);
   if (!($4)) {
    ;HEAP32[50916>>2]=0|0;HEAP32[50916+4>>2]=0|0;HEAP32[50916+8>>2]=0|0;
    $5 = (__ZNSt3__211char_traitsIwE6lengthEPKw(28568)|0);
    __THREW__ = 0;
    invoke_viii(31,(50916|0),(28568|0),($5|0));
    $6 = __THREW__; __THREW__ = 0;
    $7 = $6&1;
    if ($7) {
     $8 = ___cxa_find_matching_catch_2()|0;
     $9 = (getTempRet0() | 0);
     ___resumeException($8|0);
     // unreachable;
    } else {
     break;
    }
   }
  }
 } while(0);
 return (50916|0);
}
function __ZNKSt3__220__time_get_c_storageIwE3__rEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[48520]|0;
 $2 = ($1<<24>>24)==(0);
 do {
  if ($2) {
   $3 = (___cxa_guard_acquire(48520)|0);
   $4 = ($3|0)==(0);
   if (!($4)) {
    ;HEAP32[50904>>2]=0|0;HEAP32[50904+4>>2]=0|0;HEAP32[50904+8>>2]=0|0;
    $5 = (__ZNSt3__211char_traitsIwE6lengthEPKw(28520)|0);
    __THREW__ = 0;
    invoke_viii(31,(50904|0),(28520|0),($5|0));
    $6 = __THREW__; __THREW__ = 0;
    $7 = $6&1;
    if ($7) {
     $8 = ___cxa_find_matching_catch_2()|0;
     $9 = (getTempRet0() | 0);
     ___resumeException($8|0);
     // unreachable;
    } else {
     break;
    }
   }
  }
 } while(0);
 return (50904|0);
}
function __ZNKSt3__220__time_get_c_storageIwE3__xEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[48512]|0;
 $2 = ($1<<24>>24)==(0);
 do {
  if ($2) {
   $3 = (___cxa_guard_acquire(48512)|0);
   $4 = ($3|0)==(0);
   if (!($4)) {
    ;HEAP32[50892>>2]=0|0;HEAP32[50892+4>>2]=0|0;HEAP32[50892+8>>2]=0|0;
    $5 = (__ZNSt3__211char_traitsIwE6lengthEPKw(28484)|0);
    __THREW__ = 0;
    invoke_viii(31,(50892|0),(28484|0),($5|0));
    $6 = __THREW__; __THREW__ = 0;
    $7 = $6&1;
    if ($7) {
     $8 = ___cxa_find_matching_catch_2()|0;
     $9 = (getTempRet0() | 0);
     ___resumeException($8|0);
     // unreachable;
    } else {
     break;
    }
   }
  }
 } while(0);
 return (50892|0);
}
function __ZNKSt3__220__time_get_c_storageIwE3__XEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[48504]|0;
 $2 = ($1<<24>>24)==(0);
 do {
  if ($2) {
   $3 = (___cxa_guard_acquire(48504)|0);
   $4 = ($3|0)==(0);
   if (!($4)) {
    ;HEAP32[50880>>2]=0|0;HEAP32[50880+4>>2]=0|0;HEAP32[50880+8>>2]=0|0;
    $5 = (__ZNSt3__211char_traitsIwE6lengthEPKw(28448)|0);
    __THREW__ = 0;
    invoke_viii(31,(50880|0),(28448|0),($5|0));
    $6 = __THREW__; __THREW__ = 0;
    $7 = $6&1;
    if ($7) {
     $8 = ___cxa_find_matching_catch_2()|0;
     $9 = (getTempRet0() | 0);
     ___resumeException($8|0);
     // unreachable;
    } else {
     break;
    }
   }
  }
 } while(0);
 return (50880|0);
}
function __ZNSt3__211char_traitsIwE6lengthEPKw($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_wcslen($0)|0);
 return ($1|0);
}
function __ZNSt3__2L11init_wam_pmEv() {
 var $$0$i$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[48544]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  $2 = (___cxa_guard_acquire(48544)|0);
  $3 = ($2|0)==(0);
  if (!($3)) {
   $4 = 47648;
   while(1) {
    ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
    $$0$i$i = 0;
    while(1) {
     $exitcond$i$i = ($$0$i$i|0)==(3);
     if ($exitcond$i$i) {
      break;
     }
     $5 = (($4) + ($$0$i$i<<2)|0);
     HEAP32[$5>>2] = 0;
     $6 = (($$0$i$i) + 1)|0;
     $$0$i$i = $6;
    }
    $7 = ((($4)) + 12|0);
    $8 = ($7|0)==((47936)|0);
    if ($8) {
     break;
    } else {
     $4 = $7;
    }
   }
  }
 }
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(47648,28652)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((47660),28664)|0);
 return;
}
function __ZNSt3__2L12init_wmonthsEv() {
 var $$0$i$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[48560]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  $2 = (___cxa_guard_acquire(48560)|0);
  $3 = ($2|0)==(0);
  if (!($3)) {
   $4 = 47936;
   while(1) {
    ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
    $$0$i$i = 0;
    while(1) {
     $exitcond$i$i = ($$0$i$i|0)==(3);
     if ($exitcond$i$i) {
      break;
     }
     $5 = (($4) + ($$0$i$i<<2)|0);
     HEAP32[$5>>2] = 0;
     $6 = (($$0$i$i) + 1)|0;
     $$0$i$i = $6;
    }
    $7 = ((($4)) + 12|0);
    $8 = ($7|0)==((48224)|0);
    if ($8) {
     break;
    } else {
     $4 = $7;
    }
   }
  }
 }
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(47936,28676)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((47948),28708)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((47960),28744)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((47972),28768)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((47984),28792)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((47996),28808)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((48008),28828)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((48020),28848)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((48032),28876)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((48044),28916)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((48056),28948)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((48068),28984)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((48080),29020)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((48092),29036)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((48104),29052)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((48116),29068)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((48128),28792)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((48140),29084)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((48152),29100)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((48164),29116)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((48176),29132)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((48188),29148)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((48200),29164)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((48212),29180)|0);
 return;
}
function __ZNSt3__2L11init_wweeksEv() {
 var $$0$i$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[48576]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  $2 = (___cxa_guard_acquire(48576)|0);
  $3 = ($2|0)==(0);
  if (!($3)) {
   $4 = 48224;
   while(1) {
    ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
    $$0$i$i = 0;
    while(1) {
     $exitcond$i$i = ($$0$i$i|0)==(3);
     if ($exitcond$i$i) {
      break;
     }
     $5 = (($4) + ($$0$i$i<<2)|0);
     HEAP32[$5>>2] = 0;
     $6 = (($$0$i$i) + 1)|0;
     $$0$i$i = $6;
    }
    $7 = ((($4)) + 12|0);
    $8 = ($7|0)==((48392)|0);
    if ($8) {
     break;
    } else {
     $4 = $7;
    }
   }
  }
 }
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(48224,29196)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((48236),29224)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((48248),29252)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((48260),29284)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((48272),29324)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((48284),29360)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((48296),29388)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((48308),29424)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((48320),29440)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((48332),29456)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((48344),29472)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((48356),29488)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((48368),29504)|0);
 (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw((48380),29520)|0);
 return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = ((($0)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = (FUNCTION_TABLE_ii[$9 & 255]($7)|0);
 $11 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $11;
 $12 = ((($10)) + 168|0);
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $13 = (__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($2,$$byval_copy,$10,$12,$5,$4,0)|0);
 $14 = $13;
 $15 = $10;
 $16 = (($14) - ($15))|0;
 $17 = ($16|0)<(168);
 if ($17) {
  $18 = (($16|0) / 12)&-1;
  $19 = (($18|0) % 7)&-1;
  HEAP32[$1>>2] = $19;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = ((($0)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (FUNCTION_TABLE_ii[$10 & 255]($7)|0);
 $12 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $12;
 $13 = ((($11)) + 288|0);
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $14 = (__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($2,$$byval_copy,$11,$13,$5,$4,0)|0);
 $15 = $14;
 $16 = $11;
 $17 = (($15) - ($16))|0;
 $18 = ($17|0)<(288);
 if ($18) {
  $19 = (($17|0) / 12)&-1;
  $20 = (($19|0) % 12)&-1;
  HEAP32[$1>>2] = $20;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i55 = 0, $$0$i$i$i$i69 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i61 = 0, $$0$i$i2$i$i75 = 0, $$0$i$i66 = 0, $$0$pn = 0, $$052 = 0, $$053 = 0, $$3 = 0, $$3$lcssa = 0, $$4 = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$ph = 0, $$pre = 0, $$sroa$050$0$copyload = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $8 = sp + 4|0;
 $9 = sp;
 __ZNKSt3__28ios_base6getlocEv($$byval_copy1,$3);
 __THREW__ = 0;
 $10 = (invoke_iii(37,($$byval_copy1|0),(50772|0))|0);
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 if ($12) {
  $48 = ___cxa_find_matching_catch_2()|0;
  $49 = (getTempRet0() | 0);
  __ZNSt3__26localeD2Ev($$byval_copy1);
  ___resumeException($48|0);
  // unreachable;
 }
 __ZNSt3__26localeD2Ev($$byval_copy1);
 HEAP32[$4>>2] = 0;
 $$0 = $6;$15 = 0;
 L4: while(1) {
  $13 = ($$0|0)!=($7|0);
  $14 = ($15|0)==(0);
  $or$cond = $13 & $14;
  $16 = HEAP32[$1>>2]|0;
  if (!($or$cond)) {
   $175 = $16;
   break;
  }
  $17 = ($16|0)==(0|0);
  $18 = $16;
  if ($17) {
   $144 = 0;$206 = 1;$73 = $18;
  } else {
   $19 = ((($16)) + 12|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = ((($16)) + 16|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ($20|0)==($22|0);
   if ($23) {
    $24 = HEAP32[$16>>2]|0;
    $25 = ((($24)) + 36|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = (FUNCTION_TABLE_ii[$26 & 255]($16)|0);
    $$0$i$i$i$i = $27;
   } else {
    $28 = HEAP32[$20>>2]|0;
    $29 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($28)|0);
    $$0$i$i$i$i = $29;
   }
   $30 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $31 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i,$30)|0);
   if ($31) {
    HEAP32[$1>>2] = 0;
    $144 = 0;$206 = 1;$73 = 0;
   } else {
    $144 = $16;$206 = 0;$73 = $18;
   }
  }
  $32 = HEAP32[$2>>2]|0;
  $33 = ($32|0)==(0|0);
  $34 = $32;
  do {
   if ($33) {
    $$ph = $34;
    label = 16;
   } else {
    $35 = ((($32)) + 12|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ((($32)) + 16|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = ($36|0)==($38|0);
    if ($39) {
     $40 = HEAP32[$32>>2]|0;
     $41 = ((($40)) + 36|0);
     $42 = HEAP32[$41>>2]|0;
     $43 = (FUNCTION_TABLE_ii[$42 & 255]($32)|0);
     $$0$i$i2$i$i = $43;
    } else {
     $44 = HEAP32[$36>>2]|0;
     $45 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($44)|0);
     $$0$i$i2$i$i = $45;
    }
    $46 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
    $47 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i,$46)|0);
    if ($47) {
     HEAP32[$2>>2] = 0;
     $$ph = 0;
     label = 16;
     break;
    } else {
     if ($206) {
      $207 = $32;$74 = $34;
      break;
     } else {
      label = 62;
      break L4;
     }
    }
   }
  } while(0);
  if ((label|0) == 16) {
   label = 0;
   if ($206) {
    label = 62;
    break;
   } else {
    $207 = 0;$74 = $$ph;
   }
  }
  $50 = HEAP32[$$0>>2]|0;
  $51 = HEAP32[$10>>2]|0;
  $52 = ((($51)) + 52|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = (FUNCTION_TABLE_iiii[$53 & 63]($10,$50,0)|0);
  $55 = ($54<<24>>24)==(37);
  L27: do {
   if ($55) {
    $56 = ((($$0)) + 4|0);
    $57 = ($56|0)==($7|0);
    if ($57) {
     label = 62;
     break L4;
    }
    $58 = HEAP32[$56>>2]|0;
    $59 = HEAP32[$10>>2]|0;
    $60 = ((($59)) + 52|0);
    $61 = HEAP32[$60>>2]|0;
    $62 = (FUNCTION_TABLE_iiii[$61 & 63]($10,$58,0)|0);
    switch ($62<<24>>24) {
    case 48: case 69:  {
     $63 = ((($$0)) + 8|0);
     $64 = ($63|0)==($7|0);
     if ($64) {
      label = 62;
      break L4;
     }
     $65 = HEAP32[$63>>2]|0;
     $66 = HEAP32[$10>>2]|0;
     $67 = ((($66)) + 52|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = (FUNCTION_TABLE_iiii[$68 & 63]($10,$65,0)|0);
     $$052 = $62;$$053 = $69;$77 = $56;
     break;
    }
    default: {
     $$052 = 0;$$053 = $62;$77 = $$0;
    }
    }
    $70 = HEAP32[$0>>2]|0;
    $71 = ((($70)) + 36|0);
    $72 = HEAP32[$71>>2]|0;
    HEAP32[$8>>2] = $73;
    HEAP32[$9>>2] = $74;
    ;HEAP32[$$byval_copy>>2]=HEAP32[$8>>2]|0;
    ;HEAP32[$$byval_copy1>>2]=HEAP32[$9>>2]|0;
    $75 = (FUNCTION_TABLE_iiiiiiiii[$72 & 15]($0,$$byval_copy,$$byval_copy1,$3,$4,$5,$$053,$$052)|0);
    HEAP32[$1>>2] = $75;
    $76 = ((($77)) + 8|0);
    $$4 = $76;
   } else {
    $78 = HEAP32[$$0>>2]|0;
    $79 = HEAP32[$10>>2]|0;
    $80 = ((($79)) + 12|0);
    $81 = HEAP32[$80>>2]|0;
    $82 = (FUNCTION_TABLE_iiii[$81 & 63]($10,8192,$78)|0);
    if (!($82)) {
     $143 = ((($144)) + 12|0);
     $145 = HEAP32[$143>>2]|0;
     $146 = ((($144)) + 16|0);
     $147 = HEAP32[$146>>2]|0;
     $148 = ($145|0)==($147|0);
     if ($148) {
      $149 = HEAP32[$144>>2]|0;
      $150 = ((($149)) + 36|0);
      $151 = HEAP32[$150>>2]|0;
      $152 = (FUNCTION_TABLE_ii[$151 & 255]($144)|0);
      $$0$i$i66 = $152;
     } else {
      $153 = HEAP32[$145>>2]|0;
      $154 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($153)|0);
      $$0$i$i66 = $154;
     }
     $155 = HEAP32[$10>>2]|0;
     $156 = ((($155)) + 28|0);
     $157 = HEAP32[$156>>2]|0;
     $158 = (FUNCTION_TABLE_iii[$157 & 127]($10,$$0$i$i66)|0);
     $159 = HEAP32[$$0>>2]|0;
     $160 = HEAP32[$10>>2]|0;
     $161 = ((($160)) + 28|0);
     $162 = HEAP32[$161>>2]|0;
     $163 = (FUNCTION_TABLE_iii[$162 & 127]($10,$159)|0);
     $164 = ($158|0)==($163|0);
     if (!($164)) {
      HEAP32[$4>>2] = 4;
      $$4 = $$0;
      break;
     }
     $165 = HEAP32[$143>>2]|0;
     $166 = HEAP32[$146>>2]|0;
     $167 = ($165|0)==($166|0);
     if ($167) {
      $168 = HEAP32[$144>>2]|0;
      $169 = ((($168)) + 40|0);
      $170 = HEAP32[$169>>2]|0;
      (FUNCTION_TABLE_ii[$170 & 255]($144)|0);
     } else {
      $171 = ((($165)) + 4|0);
      HEAP32[$143>>2] = $171;
      $172 = HEAP32[$165>>2]|0;
      (__ZNSt3__211char_traitsIwE11to_int_typeEw($172)|0);
     }
     $173 = ((($$0)) + 4|0);
     $$4 = $173;
     break;
    }
    $$0$pn = $$0;
    while(1) {
     $$3 = ((($$0$pn)) + 4|0);
     $83 = ($$3|0)==($7|0);
     if ($83) {
      $$3$lcssa = $7;
      break;
     }
     $84 = HEAP32[$$3>>2]|0;
     $85 = HEAP32[$10>>2]|0;
     $86 = ((($85)) + 12|0);
     $87 = HEAP32[$86>>2]|0;
     $88 = (FUNCTION_TABLE_iiii[$87 & 63]($10,8192,$84)|0);
     if ($88) {
      $$0$pn = $$3;
     } else {
      $$3$lcssa = $$3;
      break;
     }
    }
    $105 = $207;$90 = $144;
    while(1) {
     $89 = ($90|0)==(0|0);
     if ($89) {
      $120 = 0;$208 = 1;
     } else {
      $91 = ((($90)) + 12|0);
      $92 = HEAP32[$91>>2]|0;
      $93 = ((($90)) + 16|0);
      $94 = HEAP32[$93>>2]|0;
      $95 = ($92|0)==($94|0);
      if ($95) {
       $96 = HEAP32[$90>>2]|0;
       $97 = ((($96)) + 36|0);
       $98 = HEAP32[$97>>2]|0;
       $99 = (FUNCTION_TABLE_ii[$98 & 255]($90)|0);
       $$0$i$i$i$i55 = $99;
      } else {
       $100 = HEAP32[$92>>2]|0;
       $101 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($100)|0);
       $$0$i$i$i$i55 = $101;
      }
      $102 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
      $103 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i55,$102)|0);
      if ($103) {
       HEAP32[$1>>2] = 0;
       $120 = 0;$208 = 1;
      } else {
       $120 = $90;$208 = 0;
      }
     }
     $104 = ($105|0)==(0|0);
     do {
      if ($104) {
       label = 42;
      } else {
       $106 = ((($105)) + 12|0);
       $107 = HEAP32[$106>>2]|0;
       $108 = ((($105)) + 16|0);
       $109 = HEAP32[$108>>2]|0;
       $110 = ($107|0)==($109|0);
       if ($110) {
        $111 = HEAP32[$105>>2]|0;
        $112 = ((($111)) + 36|0);
        $113 = HEAP32[$112>>2]|0;
        $114 = (FUNCTION_TABLE_ii[$113 & 255]($105)|0);
        $$0$i$i2$i$i61 = $114;
       } else {
        $115 = HEAP32[$107>>2]|0;
        $116 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($115)|0);
        $$0$i$i2$i$i61 = $116;
       }
       $117 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
       $118 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i61,$117)|0);
       if ($118) {
        HEAP32[$2>>2] = 0;
        label = 42;
        break;
       } else {
        if ($208) {
         $209 = $105;
         break;
        } else {
         $$4 = $$3$lcssa;
         break L27;
        }
       }
      }
     } while(0);
     if ((label|0) == 42) {
      label = 0;
      if ($208) {
       $$4 = $$3$lcssa;
       break L27;
      } else {
       $209 = 0;
      }
     }
     $119 = ((($120)) + 12|0);
     $121 = HEAP32[$119>>2]|0;
     $122 = ((($120)) + 16|0);
     $123 = HEAP32[$122>>2]|0;
     $124 = ($121|0)==($123|0);
     if ($124) {
      $125 = HEAP32[$120>>2]|0;
      $126 = ((($125)) + 36|0);
      $127 = HEAP32[$126>>2]|0;
      $128 = (FUNCTION_TABLE_ii[$127 & 255]($120)|0);
      $$0$i$i = $128;
     } else {
      $129 = HEAP32[$121>>2]|0;
      $130 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($129)|0);
      $$0$i$i = $130;
     }
     $131 = HEAP32[$10>>2]|0;
     $132 = ((($131)) + 12|0);
     $133 = HEAP32[$132>>2]|0;
     $134 = (FUNCTION_TABLE_iiii[$133 & 63]($10,8192,$$0$i$i)|0);
     if (!($134)) {
      $$4 = $$3$lcssa;
      break L27;
     }
     $135 = HEAP32[$119>>2]|0;
     $136 = HEAP32[$122>>2]|0;
     $137 = ($135|0)==($136|0);
     if ($137) {
      $138 = HEAP32[$120>>2]|0;
      $139 = ((($138)) + 40|0);
      $140 = HEAP32[$139>>2]|0;
      (FUNCTION_TABLE_ii[$140 & 255]($120)|0);
     } else {
      $141 = ((($135)) + 4|0);
      HEAP32[$119>>2] = $141;
      $142 = HEAP32[$135>>2]|0;
      (__ZNSt3__211char_traitsIwE11to_int_typeEw($142)|0);
     }
     $105 = $209;$90 = $120;
    }
   }
  } while(0);
  $$pre = HEAP32[$4>>2]|0;
  $$0 = $$4;$15 = $$pre;
 }
 if ((label|0) == 62) {
  HEAP32[$4>>2] = 4;
  $175 = $144;
 }
 $174 = ($175|0)==(0|0);
 if ($174) {
  $$sroa$050$0$copyload = 0;$210 = 1;
 } else {
  $176 = ((($175)) + 12|0);
  $177 = HEAP32[$176>>2]|0;
  $178 = ((($175)) + 16|0);
  $179 = HEAP32[$178>>2]|0;
  $180 = ($177|0)==($179|0);
  if ($180) {
   $181 = HEAP32[$175>>2]|0;
   $182 = ((($181)) + 36|0);
   $183 = HEAP32[$182>>2]|0;
   $184 = (FUNCTION_TABLE_ii[$183 & 255]($175)|0);
   $$0$i$i$i$i69 = $184;
  } else {
   $185 = HEAP32[$177>>2]|0;
   $186 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($185)|0);
   $$0$i$i$i$i69 = $186;
  }
  $187 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
  $188 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i69,$187)|0);
  if ($188) {
   HEAP32[$1>>2] = 0;
   $$sroa$050$0$copyload = 0;$210 = 1;
  } else {
   $$sroa$050$0$copyload = $175;$210 = 0;
  }
 }
 $189 = HEAP32[$2>>2]|0;
 $190 = ($189|0)==(0|0);
 do {
  if ($190) {
   label = 75;
  } else {
   $191 = ((($189)) + 12|0);
   $192 = HEAP32[$191>>2]|0;
   $193 = ((($189)) + 16|0);
   $194 = HEAP32[$193>>2]|0;
   $195 = ($192|0)==($194|0);
   if ($195) {
    $196 = HEAP32[$189>>2]|0;
    $197 = ((($196)) + 36|0);
    $198 = HEAP32[$197>>2]|0;
    $199 = (FUNCTION_TABLE_ii[$198 & 255]($189)|0);
    $$0$i$i2$i$i75 = $199;
   } else {
    $200 = HEAP32[$192>>2]|0;
    $201 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($200)|0);
    $$0$i$i2$i$i75 = $201;
   }
   $202 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $203 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i75,$202)|0);
   if ($203) {
    HEAP32[$2>>2] = 0;
    label = 75;
    break;
   } else {
    if ($210) {
     break;
    } else {
     label = 77;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 75) {
  if ($210) {
   label = 77;
  }
 }
 if ((label|0) == 77) {
  $204 = HEAP32[$4>>2]|0;
  $205 = $204 | 2;
  HEAP32[$4>>2] = $205;
 }
 STACKTOP = sp;return ($$sroa$050$0$copyload|0);
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIwEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$off = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $8 = (__ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2,$$byval_copy,$4,$5,2)|0);
 $9 = HEAP32[$4>>2]|0;
 $10 = $9 & 4;
 $11 = ($10|0)==(0);
 $$off = (($8) + -1)|0;
 $12 = ($$off>>>0)<(31);
 $13 = $12 & $11;
 if ($13) {
  HEAP32[$1>>2] = $8;
 } else {
  $14 = $9 | 4;
  HEAP32[$4>>2] = $14;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIwEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $8 = (__ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2,$$byval_copy,$4,$5,2)|0);
 $9 = HEAP32[$4>>2]|0;
 $10 = $9 & 4;
 $11 = ($10|0)==(0);
 $12 = ($8|0)<(24);
 $or$cond = $12 & $11;
 if ($or$cond) {
  HEAP32[$1>>2] = $8;
 } else {
  $13 = $9 | 4;
  HEAP32[$4>>2] = $13;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIwEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$off = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $8 = (__ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2,$$byval_copy,$4,$5,2)|0);
 $9 = HEAP32[$4>>2]|0;
 $10 = $9 & 4;
 $11 = ($10|0)==(0);
 $$off = (($8) + -1)|0;
 $12 = ($$off>>>0)<(12);
 $13 = $12 & $11;
 if ($13) {
  HEAP32[$1>>2] = $8;
 } else {
  $14 = $9 | 4;
  HEAP32[$4>>2] = $14;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIwEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $8 = (__ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2,$$byval_copy,$4,$5,3)|0);
 $9 = HEAP32[$4>>2]|0;
 $10 = $9 & 4;
 $11 = ($10|0)==(0);
 $12 = ($8|0)<(366);
 $or$cond = $12 & $11;
 if ($or$cond) {
  HEAP32[$1>>2] = $8;
 } else {
  $13 = $9 | 4;
  HEAP32[$4>>2] = $13;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIwEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $8 = (__ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2,$$byval_copy,$4,$5,2)|0);
 $9 = HEAP32[$4>>2]|0;
 $10 = $9 & 4;
 $11 = ($10|0)==(0);
 $12 = ($8|0)<(13);
 $or$cond = $12 & $11;
 if ($or$cond) {
  $13 = (($8) + -1)|0;
  HEAP32[$1>>2] = $13;
 } else {
  $14 = $9 | 4;
  HEAP32[$4>>2] = $14;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIwEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $8 = (__ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2,$$byval_copy,$4,$5,2)|0);
 $9 = HEAP32[$4>>2]|0;
 $10 = $9 & 4;
 $11 = ($10|0)==(0);
 $12 = ($8|0)<(60);
 $or$cond = $12 & $11;
 if ($or$cond) {
  HEAP32[$1>>2] = $8;
 } else {
  $13 = $9 | 4;
  HEAP32[$4>>2] = $13;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i7 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i13 = 0, $$pre$i$i$i = 0, $$pre$i$i$i9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $phitmp$i$i$i = 0;
 var $phitmp$i$i$i10 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 L1: while(1) {
  $5 = HEAP32[$1>>2]|0;
  $6 = ($5|0)==(0|0);
  do {
   if ($6) {
    $94 = 1;
   } else {
    $7 = ((($5)) + 12|0);
    $8 = HEAP32[$7>>2]|0;
    $9 = ((($5)) + 16|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = ($8|0)==($10|0);
    if ($11) {
     $12 = HEAP32[$5>>2]|0;
     $13 = ((($12)) + 36|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (FUNCTION_TABLE_ii[$14 & 255]($5)|0);
     $$0$i$i$i$i = $15;
    } else {
     $16 = HEAP32[$8>>2]|0;
     $17 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($16)|0);
     $$0$i$i$i$i = $17;
    }
    $18 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
    $19 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i,$18)|0);
    if ($19) {
     HEAP32[$1>>2] = 0;
     $94 = 1;
     break;
    } else {
     $$pre$i$i$i = HEAP32[$1>>2]|0;
     $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
     $94 = $phitmp$i$i$i;
     break;
    }
   }
  } while(0);
  $20 = HEAP32[$2>>2]|0;
  $21 = ($20|0)==(0|0);
  do {
   if ($21) {
    label = 15;
   } else {
    $22 = ((($20)) + 12|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = ((($20)) + 16|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = ($23|0)==($25|0);
    if ($26) {
     $27 = HEAP32[$20>>2]|0;
     $28 = ((($27)) + 36|0);
     $29 = HEAP32[$28>>2]|0;
     $30 = (FUNCTION_TABLE_ii[$29 & 255]($20)|0);
     $$0$i$i2$i$i = $30;
    } else {
     $31 = HEAP32[$23>>2]|0;
     $32 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($31)|0);
     $$0$i$i2$i$i = $32;
    }
    $33 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
    $34 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i,$33)|0);
    if ($34) {
     HEAP32[$2>>2] = 0;
     label = 15;
     break;
    } else {
     if ($94) {
      $95 = $20;
      break;
     } else {
      $78 = $20;
      break L1;
     }
    }
   }
  } while(0);
  if ((label|0) == 15) {
   label = 0;
   if ($94) {
    $78 = 0;
    break;
   } else {
    $95 = 0;
   }
  }
  $35 = HEAP32[$1>>2]|0;
  $36 = ((($35)) + 12|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = ((($35)) + 16|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = ($37|0)==($39|0);
  if ($40) {
   $41 = HEAP32[$35>>2]|0;
   $42 = ((($41)) + 36|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = (FUNCTION_TABLE_ii[$43 & 255]($35)|0);
   $$0$i$i = $44;
  } else {
   $45 = HEAP32[$37>>2]|0;
   $46 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($45)|0);
   $$0$i$i = $46;
  }
  $47 = HEAP32[$4>>2]|0;
  $48 = ((($47)) + 12|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = (FUNCTION_TABLE_iiii[$49 & 63]($4,8192,$$0$i$i)|0);
  if (!($50)) {
   $78 = $95;
   break;
  }
  $51 = HEAP32[$1>>2]|0;
  $52 = ((($51)) + 12|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = ((($51)) + 16|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = ($53|0)==($55|0);
  if ($56) {
   $57 = HEAP32[$51>>2]|0;
   $58 = ((($57)) + 40|0);
   $59 = HEAP32[$58>>2]|0;
   (FUNCTION_TABLE_ii[$59 & 255]($51)|0);
  } else {
   $60 = ((($53)) + 4|0);
   HEAP32[$52>>2] = $60;
   $61 = HEAP32[$53>>2]|0;
   (__ZNSt3__211char_traitsIwE11to_int_typeEw($61)|0);
  }
 }
 $62 = HEAP32[$1>>2]|0;
 $63 = ($62|0)==(0|0);
 do {
  if ($63) {
   $96 = 1;
  } else {
   $64 = ((($62)) + 12|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = ((($62)) + 16|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = ($65|0)==($67|0);
   if ($68) {
    $69 = HEAP32[$62>>2]|0;
    $70 = ((($69)) + 36|0);
    $71 = HEAP32[$70>>2]|0;
    $72 = (FUNCTION_TABLE_ii[$71 & 255]($62)|0);
    $$0$i$i$i$i7 = $72;
   } else {
    $73 = HEAP32[$65>>2]|0;
    $74 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($73)|0);
    $$0$i$i$i$i7 = $74;
   }
   $75 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $76 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i7,$75)|0);
   if ($76) {
    HEAP32[$1>>2] = 0;
    $96 = 1;
    break;
   } else {
    $$pre$i$i$i9 = HEAP32[$1>>2]|0;
    $phitmp$i$i$i10 = ($$pre$i$i$i9|0)==(0|0);
    $96 = $phitmp$i$i$i10;
    break;
   }
  }
 } while(0);
 $77 = ($78|0)==(0|0);
 do {
  if ($77) {
   label = 38;
  } else {
   $79 = ((($78)) + 12|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = ((($78)) + 16|0);
   $82 = HEAP32[$81>>2]|0;
   $83 = ($80|0)==($82|0);
   if ($83) {
    $84 = HEAP32[$78>>2]|0;
    $85 = ((($84)) + 36|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = (FUNCTION_TABLE_ii[$86 & 255]($78)|0);
    $$0$i$i2$i$i13 = $87;
   } else {
    $88 = HEAP32[$80>>2]|0;
    $89 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($88)|0);
    $$0$i$i2$i$i13 = $89;
   }
   $90 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $91 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i13,$90)|0);
   if ($91) {
    HEAP32[$2>>2] = 0;
    label = 38;
    break;
   } else {
    if ($96) {
     break;
    } else {
     label = 40;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 38) {
  if ($96) {
   label = 40;
  }
 }
 if ((label|0) == 40) {
  $92 = HEAP32[$3>>2]|0;
  $93 = $92 | 2;
  HEAP32[$3>>2] = $93;
 }
 return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIwEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0;
 var $or$cond20 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = ((($0)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (FUNCTION_TABLE_ii[$10 & 255]($7)|0);
 $12 = ((($11)) + 8|0);
 $13 = ((($12)) + 3|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = ($14<<24>>24)<(0);
 if ($15) {
  $16 = ((($11)) + 4|0);
  $17 = HEAP32[$16>>2]|0;
  $29 = $17;
 } else {
  $18 = $14&255;
  $29 = $18;
 }
 $19 = ((($11)) + 20|0);
 $20 = ((($19)) + 3|0);
 $21 = HEAP8[$20>>0]|0;
 $22 = ($21<<24>>24)<(0);
 if ($22) {
  $23 = ((($11)) + 16|0);
  $24 = HEAP32[$23>>2]|0;
  $27 = $24;
 } else {
  $25 = $21&255;
  $27 = $25;
 }
 $26 = (0 - ($27))|0;
 $28 = ($29|0)==($26|0);
 do {
  if ($28) {
   $30 = HEAP32[$4>>2]|0;
   $31 = $30 | 4;
   HEAP32[$4>>2] = $31;
  } else {
   $32 = HEAP32[$3>>2]|0;
   HEAP32[$6>>2] = $32;
   $33 = ((($11)) + 24|0);
   ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
   $34 = (__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($2,$$byval_copy,$11,$33,$5,$4,0)|0);
   $35 = $34;
   $36 = $11;
   $37 = (($35) - ($36))|0;
   $38 = ($37|0)==(0);
   $39 = HEAP32[$1>>2]|0;
   $40 = ($39|0)==(12);
   $or$cond = $40 & $38;
   if ($or$cond) {
    HEAP32[$1>>2] = 0;
    break;
   }
   $41 = ($37|0)==(12);
   $42 = ($39|0)<(12);
   $or$cond20 = $42 & $41;
   if ($or$cond20) {
    $43 = (($39) + 12)|0;
    HEAP32[$1>>2] = $43;
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIwEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $8 = (__ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2,$$byval_copy,$4,$5,2)|0);
 $9 = HEAP32[$4>>2]|0;
 $10 = $9 & 4;
 $11 = ($10|0)==(0);
 $12 = ($8|0)<(61);
 $or$cond = $12 & $11;
 if ($or$cond) {
  HEAP32[$1>>2] = $8;
 } else {
  $13 = $9 | 4;
  HEAP32[$4>>2] = $13;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIwEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $8 = (__ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2,$$byval_copy,$4,$5,1)|0);
 $9 = HEAP32[$4>>2]|0;
 $10 = $9 & 4;
 $11 = ($10|0)==(0);
 $12 = ($8|0)<(7);
 $or$cond = $12 & $11;
 if ($or$cond) {
  HEAP32[$1>>2] = $8;
 } else {
  $13 = $9 | 4;
  HEAP32[$4>>2] = $13;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $8 = (__ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2,$$byval_copy,$4,$5,4)|0);
 $9 = HEAP32[$4>>2]|0;
 $10 = $9 & 4;
 $11 = ($10|0)==(0);
 if ($11) {
  $12 = ($8|0)<(69);
  if ($12) {
   $13 = (($8) + 2000)|0;
   $$0 = $13;
  } else {
   $14 = ($8|0)<(100);
   $15 = (($8) + 1900)|0;
   $spec$select = $14 ? $15 : $8;
   $$0 = $spec$select;
  }
  $16 = (($$0) + -1900)|0;
  HEAP32[$1>>2] = $16;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIwEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $6 = sp;
 $7 = HEAP32[$3>>2]|0;
 HEAP32[$6>>2] = $7;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$6>>2]|0;
 $8 = (__ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2,$$byval_copy,$4,$5,4)|0);
 $9 = HEAP32[$4>>2]|0;
 $10 = $9 & 4;
 $11 = ($10|0)==(0);
 if ($11) {
  $12 = (($8) + -1900)|0;
  HEAP32[$1>>2] = $12;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i8 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i14 = 0, $$pre$i$i$i = 0, $$pre$i$i$i10 = 0, $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i11 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = HEAP32[$1>>2]|0;
 $6 = ($5|0)==(0|0);
 do {
  if ($6) {
   $99 = 1;
  } else {
   $7 = ((($5)) + 12|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ((($5)) + 16|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($8|0)==($10|0);
   if ($11) {
    $12 = HEAP32[$5>>2]|0;
    $13 = ((($12)) + 36|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = (FUNCTION_TABLE_ii[$14 & 255]($5)|0);
    $$0$i$i$i$i = $15;
   } else {
    $16 = HEAP32[$8>>2]|0;
    $17 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($16)|0);
    $$0$i$i$i$i = $17;
   }
   $18 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $19 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i,$18)|0);
   if ($19) {
    HEAP32[$1>>2] = 0;
    $99 = 1;
    break;
   } else {
    $$pre$i$i$i = HEAP32[$1>>2]|0;
    $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
    $99 = $phitmp$i$i$i;
    break;
   }
  }
 } while(0);
 $20 = HEAP32[$2>>2]|0;
 $21 = ($20|0)==(0|0);
 do {
  if ($21) {
   label = 14;
  } else {
   $22 = ((($20)) + 12|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = ((($20)) + 16|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ($23|0)==($25|0);
   if ($26) {
    $27 = HEAP32[$20>>2]|0;
    $28 = ((($27)) + 36|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = (FUNCTION_TABLE_ii[$29 & 255]($20)|0);
    $$0$i$i2$i$i = $30;
   } else {
    $31 = HEAP32[$23>>2]|0;
    $32 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($31)|0);
    $$0$i$i2$i$i = $32;
   }
   $33 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $34 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i,$33)|0);
   if ($34) {
    HEAP32[$2>>2] = 0;
    label = 14;
    break;
   } else {
    if ($99) {
     $83 = $20;
     label = 17;
     break;
    } else {
     label = 16;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 14) {
  if ($99) {
   label = 16;
  } else {
   $83 = 0;
   label = 17;
  }
 }
 L22: do {
  if ((label|0) == 16) {
   $35 = HEAP32[$3>>2]|0;
   $36 = $35 | 6;
   HEAP32[$3>>2] = $36;
  }
  else if ((label|0) == 17) {
   $37 = HEAP32[$1>>2]|0;
   $38 = ((($37)) + 12|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = ((($37)) + 16|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = ($39|0)==($41|0);
   if ($42) {
    $43 = HEAP32[$37>>2]|0;
    $44 = ((($43)) + 36|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = (FUNCTION_TABLE_ii[$45 & 255]($37)|0);
    $$0$i$i = $46;
   } else {
    $47 = HEAP32[$39>>2]|0;
    $48 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($47)|0);
    $$0$i$i = $48;
   }
   $49 = HEAP32[$4>>2]|0;
   $50 = ((($49)) + 52|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = (FUNCTION_TABLE_iiii[$51 & 63]($4,$$0$i$i,0)|0);
   $53 = ($52<<24>>24)==(37);
   if (!($53)) {
    $54 = HEAP32[$3>>2]|0;
    $55 = $54 | 4;
    HEAP32[$3>>2] = $55;
    break;
   }
   $56 = HEAP32[$1>>2]|0;
   $57 = ((($56)) + 12|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = ((($56)) + 16|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = ($58|0)==($60|0);
   if ($61) {
    $62 = HEAP32[$56>>2]|0;
    $63 = ((($62)) + 40|0);
    $64 = HEAP32[$63>>2]|0;
    (FUNCTION_TABLE_ii[$64 & 255]($56)|0);
   } else {
    $65 = ((($58)) + 4|0);
    HEAP32[$57>>2] = $65;
    $66 = HEAP32[$58>>2]|0;
    (__ZNSt3__211char_traitsIwE11to_int_typeEw($66)|0);
   }
   $67 = HEAP32[$1>>2]|0;
   $68 = ($67|0)==(0|0);
   do {
    if ($68) {
     $100 = 1;
    } else {
     $69 = ((($67)) + 12|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = ((($67)) + 16|0);
     $72 = HEAP32[$71>>2]|0;
     $73 = ($70|0)==($72|0);
     if ($73) {
      $74 = HEAP32[$67>>2]|0;
      $75 = ((($74)) + 36|0);
      $76 = HEAP32[$75>>2]|0;
      $77 = (FUNCTION_TABLE_ii[$76 & 255]($67)|0);
      $$0$i$i$i$i8 = $77;
     } else {
      $78 = HEAP32[$70>>2]|0;
      $79 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($78)|0);
      $$0$i$i$i$i8 = $79;
     }
     $80 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
     $81 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i8,$80)|0);
     if ($81) {
      HEAP32[$1>>2] = 0;
      $100 = 1;
      break;
     } else {
      $$pre$i$i$i10 = HEAP32[$1>>2]|0;
      $phitmp$i$i$i11 = ($$pre$i$i$i10|0)==(0|0);
      $100 = $phitmp$i$i$i11;
      break;
     }
    }
   } while(0);
   $82 = ($83|0)==(0|0);
   do {
    if ($82) {
     label = 38;
    } else {
     $84 = ((($83)) + 12|0);
     $85 = HEAP32[$84>>2]|0;
     $86 = ((($83)) + 16|0);
     $87 = HEAP32[$86>>2]|0;
     $88 = ($85|0)==($87|0);
     if ($88) {
      $89 = HEAP32[$83>>2]|0;
      $90 = ((($89)) + 36|0);
      $91 = HEAP32[$90>>2]|0;
      $92 = (FUNCTION_TABLE_ii[$91 & 255]($83)|0);
      $$0$i$i2$i$i14 = $92;
     } else {
      $93 = HEAP32[$85>>2]|0;
      $94 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($93)|0);
      $$0$i$i2$i$i14 = $94;
     }
     $95 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
     $96 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i14,$95)|0);
     if ($96) {
      HEAP32[$2>>2] = 0;
      label = 38;
      break;
     } else {
      if ($100) {
       break L22;
      } else {
       break;
      }
     }
    }
   } while(0);
   if ((label|0) == 38) {
    if (!($100)) {
     break;
    }
   }
   $97 = HEAP32[$3>>2]|0;
   $98 = $97 | 2;
   HEAP32[$3>>2] = $98;
  }
 } while(0);
 return;
}
function __ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i27 = 0, $$0$i$i$i$i41 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i33 = 0, $$0$i$i2$i$i47 = 0, $$0$i$i38 = 0, $$0$in = 0, $$025 = 0, $$025$in = 0, $$2 = 0, $$pre$i$i$i = 0, $$pre$i$i$i29 = 0, $$pre$i$i$i43 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i30 = 0, $phitmp$i$i$i44 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = HEAP32[$0>>2]|0;
 $6 = ($5|0)==(0|0);
 do {
  if ($6) {
   $171 = 1;
  } else {
   $7 = ((($5)) + 12|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ((($5)) + 16|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($8|0)==($10|0);
   if ($11) {
    $12 = HEAP32[$5>>2]|0;
    $13 = ((($12)) + 36|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = (FUNCTION_TABLE_ii[$14 & 255]($5)|0);
    $$0$i$i$i$i = $15;
   } else {
    $16 = HEAP32[$8>>2]|0;
    $17 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($16)|0);
    $$0$i$i$i$i = $17;
   }
   $18 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $19 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i,$18)|0);
   if ($19) {
    HEAP32[$0>>2] = 0;
    $171 = 1;
    break;
   } else {
    $$pre$i$i$i = HEAP32[$0>>2]|0;
    $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
    $171 = $phitmp$i$i$i;
    break;
   }
  }
 } while(0);
 $20 = HEAP32[$1>>2]|0;
 $21 = ($20|0)==(0|0);
 do {
  if ($21) {
   label = 14;
  } else {
   $22 = ((($20)) + 12|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = ((($20)) + 16|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ($23|0)==($25|0);
   if ($26) {
    $27 = HEAP32[$20>>2]|0;
    $28 = ((($27)) + 36|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = (FUNCTION_TABLE_ii[$29 & 255]($20)|0);
    $$0$i$i2$i$i = $30;
   } else {
    $31 = HEAP32[$23>>2]|0;
    $32 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($31)|0);
    $$0$i$i2$i$i = $32;
   }
   $33 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $34 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i,$33)|0);
   if ($34) {
    HEAP32[$1>>2] = 0;
    label = 14;
    break;
   } else {
    if ($171) {
     $172 = $20;
     label = 17;
     break;
    } else {
     label = 16;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 14) {
  if ($171) {
   label = 16;
  } else {
   $172 = 0;
   label = 17;
  }
 }
 L22: do {
  if ((label|0) == 16) {
   $35 = HEAP32[$2>>2]|0;
   $36 = $35 | 6;
   HEAP32[$2>>2] = $36;
   $$2 = 0;
  }
  else if ((label|0) == 17) {
   $37 = HEAP32[$0>>2]|0;
   $38 = ((($37)) + 12|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = ((($37)) + 16|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = ($39|0)==($41|0);
   if ($42) {
    $43 = HEAP32[$37>>2]|0;
    $44 = ((($43)) + 36|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = (FUNCTION_TABLE_ii[$45 & 255]($37)|0);
    $$0$i$i = $46;
   } else {
    $47 = HEAP32[$39>>2]|0;
    $48 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($47)|0);
    $$0$i$i = $48;
   }
   $49 = HEAP32[$3>>2]|0;
   $50 = ((($49)) + 12|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = (FUNCTION_TABLE_iiii[$51 & 63]($3,2048,$$0$i$i)|0);
   if (!($52)) {
    $53 = HEAP32[$2>>2]|0;
    $54 = $53 | 4;
    HEAP32[$2>>2] = $54;
    $$2 = 0;
    break;
   }
   $55 = HEAP32[$3>>2]|0;
   $56 = ((($55)) + 52|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = (FUNCTION_TABLE_iiii[$57 & 63]($3,$$0$i$i,0)|0);
   $59 = $58 << 24 >> 24;
   $60 = HEAP32[$0>>2]|0;
   $61 = ((($60)) + 12|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = ((($60)) + 16|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = ($62|0)==($64|0);
   if ($65) {
    $66 = HEAP32[$60>>2]|0;
    $67 = ((($66)) + 40|0);
    $68 = HEAP32[$67>>2]|0;
    (FUNCTION_TABLE_ii[$68 & 255]($60)|0);
   } else {
    $69 = ((($62)) + 4|0);
    HEAP32[$61>>2] = $69;
    $70 = HEAP32[$62>>2]|0;
    (__ZNSt3__211char_traitsIwE11to_int_typeEw($70)|0);
   }
   $$0$in = $59;$$025$in = $4;$173 = $172;$87 = $172;
   while(1) {
    $$0 = (($$0$in) + -48)|0;
    $$025 = (($$025$in) + -1)|0;
    $71 = HEAP32[$0>>2]|0;
    $72 = ($71|0)==(0|0);
    do {
     if ($72) {
      $102 = 1;
     } else {
      $73 = ((($71)) + 12|0);
      $74 = HEAP32[$73>>2]|0;
      $75 = ((($71)) + 16|0);
      $76 = HEAP32[$75>>2]|0;
      $77 = ($74|0)==($76|0);
      if ($77) {
       $78 = HEAP32[$71>>2]|0;
       $79 = ((($78)) + 36|0);
       $80 = HEAP32[$79>>2]|0;
       $81 = (FUNCTION_TABLE_ii[$80 & 255]($71)|0);
       $$0$i$i$i$i27 = $81;
      } else {
       $82 = HEAP32[$74>>2]|0;
       $83 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($82)|0);
       $$0$i$i$i$i27 = $83;
      }
      $84 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
      $85 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i27,$84)|0);
      if ($85) {
       HEAP32[$0>>2] = 0;
       $102 = 1;
       break;
      } else {
       $$pre$i$i$i29 = HEAP32[$0>>2]|0;
       $phitmp$i$i$i30 = ($$pre$i$i$i29|0)==(0|0);
       $102 = $phitmp$i$i$i30;
       break;
      }
     }
    } while(0);
    $86 = ($87|0)==(0|0);
    if ($86) {
     $103 = 1;$155 = $173;$174 = 0;
    } else {
     $88 = ((($87)) + 12|0);
     $89 = HEAP32[$88>>2]|0;
     $90 = ((($87)) + 16|0);
     $91 = HEAP32[$90>>2]|0;
     $92 = ($89|0)==($91|0);
     if ($92) {
      $93 = HEAP32[$87>>2]|0;
      $94 = ((($93)) + 36|0);
      $95 = HEAP32[$94>>2]|0;
      $96 = (FUNCTION_TABLE_ii[$95 & 255]($87)|0);
      $$0$i$i2$i$i33 = $96;
     } else {
      $97 = HEAP32[$89>>2]|0;
      $98 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($97)|0);
      $$0$i$i2$i$i33 = $98;
     }
     $99 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
     $100 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i33,$99)|0);
     if ($100) {
      HEAP32[$1>>2] = 0;
      $103 = 1;$155 = 0;$174 = 0;
     } else {
      $103 = 0;$155 = $173;$174 = $87;
     }
    }
    $101 = $102 ^ $103;
    $104 = ($$025$in|0)>(1);
    $105 = $104 & $101;
    $106 = HEAP32[$0>>2]|0;
    if (!($105)) {
     break;
    }
    $107 = ((($106)) + 12|0);
    $108 = HEAP32[$107>>2]|0;
    $109 = ((($106)) + 16|0);
    $110 = HEAP32[$109>>2]|0;
    $111 = ($108|0)==($110|0);
    if ($111) {
     $112 = HEAP32[$106>>2]|0;
     $113 = ((($112)) + 36|0);
     $114 = HEAP32[$113>>2]|0;
     $115 = (FUNCTION_TABLE_ii[$114 & 255]($106)|0);
     $$0$i$i38 = $115;
    } else {
     $116 = HEAP32[$108>>2]|0;
     $117 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($116)|0);
     $$0$i$i38 = $117;
    }
    $118 = HEAP32[$3>>2]|0;
    $119 = ((($118)) + 12|0);
    $120 = HEAP32[$119>>2]|0;
    $121 = (FUNCTION_TABLE_iiii[$120 & 63]($3,2048,$$0$i$i38)|0);
    if (!($121)) {
     $$2 = $$0;
     break L22;
    }
    $122 = ($$0*10)|0;
    $123 = HEAP32[$3>>2]|0;
    $124 = ((($123)) + 52|0);
    $125 = HEAP32[$124>>2]|0;
    $126 = (FUNCTION_TABLE_iiii[$125 & 63]($3,$$0$i$i38,0)|0);
    $127 = $126 << 24 >> 24;
    $128 = (($122) + ($127))|0;
    $129 = HEAP32[$0>>2]|0;
    $130 = ((($129)) + 12|0);
    $131 = HEAP32[$130>>2]|0;
    $132 = ((($129)) + 16|0);
    $133 = HEAP32[$132>>2]|0;
    $134 = ($131|0)==($133|0);
    if ($134) {
     $135 = HEAP32[$129>>2]|0;
     $136 = ((($135)) + 40|0);
     $137 = HEAP32[$136>>2]|0;
     (FUNCTION_TABLE_ii[$137 & 255]($129)|0);
    } else {
     $138 = ((($131)) + 4|0);
     HEAP32[$130>>2] = $138;
     $139 = HEAP32[$131>>2]|0;
     (__ZNSt3__211char_traitsIwE11to_int_typeEw($139)|0);
    }
    $$0$in = $128;$$025$in = $$025;$173 = $155;$87 = $174;
   }
   $140 = ($106|0)==(0|0);
   do {
    if ($140) {
     $175 = 1;
    } else {
     $141 = ((($106)) + 12|0);
     $142 = HEAP32[$141>>2]|0;
     $143 = ((($106)) + 16|0);
     $144 = HEAP32[$143>>2]|0;
     $145 = ($142|0)==($144|0);
     if ($145) {
      $146 = HEAP32[$106>>2]|0;
      $147 = ((($146)) + 36|0);
      $148 = HEAP32[$147>>2]|0;
      $149 = (FUNCTION_TABLE_ii[$148 & 255]($106)|0);
      $$0$i$i$i$i41 = $149;
     } else {
      $150 = HEAP32[$142>>2]|0;
      $151 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($150)|0);
      $$0$i$i$i$i41 = $151;
     }
     $152 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
     $153 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i41,$152)|0);
     if ($153) {
      HEAP32[$0>>2] = 0;
      $175 = 1;
      break;
     } else {
      $$pre$i$i$i43 = HEAP32[$0>>2]|0;
      $phitmp$i$i$i44 = ($$pre$i$i$i43|0)==(0|0);
      $175 = $phitmp$i$i$i44;
      break;
     }
    }
   } while(0);
   $154 = ($155|0)==(0|0);
   do {
    if ($154) {
     label = 61;
    } else {
     $156 = ((($155)) + 12|0);
     $157 = HEAP32[$156>>2]|0;
     $158 = ((($155)) + 16|0);
     $159 = HEAP32[$158>>2]|0;
     $160 = ($157|0)==($159|0);
     if ($160) {
      $161 = HEAP32[$155>>2]|0;
      $162 = ((($161)) + 36|0);
      $163 = HEAP32[$162>>2]|0;
      $164 = (FUNCTION_TABLE_ii[$163 & 255]($155)|0);
      $$0$i$i2$i$i47 = $164;
     } else {
      $165 = HEAP32[$157>>2]|0;
      $166 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($165)|0);
      $$0$i$i2$i$i47 = $166;
     }
     $167 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
     $168 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i47,$167)|0);
     if ($168) {
      HEAP32[$1>>2] = 0;
      label = 61;
      break;
     } else {
      if ($175) {
       $$2 = $$0;
       break L22;
      } else {
       break;
      }
     }
    }
   } while(0);
   if ((label|0) == 61) {
    if (!($175)) {
     $$2 = $$0;
     break;
    }
   }
   $169 = HEAP32[$2>>2]|0;
   $170 = $169 | 2;
   HEAP32[$2>>2] = $170;
   $$2 = $$0;
  }
 } while(0);
 return ($$2|0);
}
function __ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 __ZNSt3__210__time_putD2Ev($1);
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}
function __ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 __ZNSt3__210__time_putD2Ev($1);
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$sroa$04$0$i = 0, $$sroa$04$1$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $7 = sp;
 $8 = sp + 100|0;
 $9 = ((($7)) + 100|0);
 HEAP32[$8>>2] = $9;
 $10 = ((($0)) + 8|0);
 __ZNKSt3__210__time_put8__do_putEPcRS1_PK2tmcc($10,$7,$8,$4,$5,$6);
 $11 = HEAP32[$8>>2]|0;
 $12 = HEAP32[$1>>2]|0;
 $$0$i$i = $7;$$sroa$04$0$i = $12;
 while(1) {
  $13 = ($$0$i$i|0)==($11|0);
  if ($13) {
   break;
  }
  $14 = HEAP8[$$0$i$i>>0]|0;
  $15 = ($$sroa$04$0$i|0)==(0|0);
  if ($15) {
   $$sroa$04$1$i = 0;
  } else {
   $16 = ((($$sroa$04$0$i)) + 24|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ((($$sroa$04$0$i)) + 28|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($17|0)==($19|0);
   if ($20) {
    $21 = HEAP32[$$sroa$04$0$i>>2]|0;
    $22 = ((($21)) + 52|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($14)|0);
    $25 = (FUNCTION_TABLE_iii[$23 & 127]($$sroa$04$0$i,$24)|0);
    $$0$i$i$i$i = $25;
   } else {
    $26 = ((($17)) + 1|0);
    HEAP32[$16>>2] = $26;
    HEAP8[$17>>0] = $14;
    $27 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($14)|0);
    $$0$i$i$i$i = $27;
   }
   $28 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
   $29 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i,$28)|0);
   $spec$select$i = $29 ? 0 : $$sroa$04$0$i;
   $$sroa$04$1$i = $spec$select$i;
  }
  $30 = ((($$0$i$i)) + 1|0);
  $$0$i$i = $30;$$sroa$04$0$i = $$sroa$04$1$i;
 }
 STACKTOP = sp;return ($$sroa$04$0$i|0);
}
function __ZNKSt3__210__time_put8__do_putEPcRS1_PK2tmcc($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $6 = sp;
 HEAP8[$6>>0] = 37;
 $7 = ((($6)) + 1|0);
 HEAP8[$7>>0] = $4;
 $8 = ((($6)) + 2|0);
 HEAP8[$8>>0] = $5;
 $9 = ((($6)) + 3|0);
 HEAP8[$9>>0] = 0;
 $10 = ($5<<24>>24)==(0);
 if (!($10)) {
  HEAP8[$7>>0] = $5;
  HEAP8[$8>>0] = $4;
 }
 $11 = HEAP32[$2>>2]|0;
 $12 = (__ZNSt3__212_GLOBAL__N_17countofIcEEmPKT_S4_($1,$11)|0);
 $13 = HEAP32[$0>>2]|0;
 $14 = (_strftime_l(($1|0),($12|0),($6|0),($3|0),($13|0))|0);
 $15 = (($1) + ($14)|0);
 HEAP32[$2>>2] = $15;
 STACKTOP = sp;return;
}
function __ZNSt3__212_GLOBAL__N_17countofIcEEmPKT_S4_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1;
 $3 = $0;
 $4 = (($2) - ($3))|0;
 return ($4|0);
}
function __ZNSt3__210__time_putD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 __THREW__ = 0;
 $2 = (invoke_i(24)|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $7 = ___cxa_find_matching_catch_3(0|0)|0;
  $8 = (getTempRet0() | 0);
  ___clang_call_terminate($7);
  // unreachable;
 }
 $5 = ($1|0)==($2|0);
 if (!($5)) {
  $6 = HEAP32[$0>>2]|0;
  _freelocale($6);
 }
 return;
}
function __ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 __ZNSt3__210__time_putD2Ev($1);
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}
function __ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 __ZNSt3__210__time_putD2Ev($1);
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$sroa$04$0$i = 0, $$sroa$04$1$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 416|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(416|0);
 $7 = sp;
 $8 = sp + 400|0;
 $9 = ((($7)) + 400|0);
 HEAP32[$8>>2] = $9;
 $10 = ((($0)) + 8|0);
 __ZNKSt3__210__time_put8__do_putEPwRS1_PK2tmcc($10,$7,$8,$4,$5,$6);
 $11 = HEAP32[$8>>2]|0;
 $12 = HEAP32[$1>>2]|0;
 $$0$i$i = $7;$$sroa$04$0$i = $12;
 while(1) {
  $13 = ($$0$i$i|0)==($11|0);
  if ($13) {
   break;
  }
  $14 = HEAP32[$$0$i$i>>2]|0;
  $15 = ($$sroa$04$0$i|0)==(0|0);
  if ($15) {
   $$sroa$04$1$i = 0;
  } else {
   $16 = ((($$sroa$04$0$i)) + 24|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ((($$sroa$04$0$i)) + 28|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($17|0)==($19|0);
   if ($20) {
    $21 = HEAP32[$$sroa$04$0$i>>2]|0;
    $22 = ((($21)) + 52|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($14)|0);
    $25 = (FUNCTION_TABLE_iii[$23 & 127]($$sroa$04$0$i,$24)|0);
    $$0$i$i$i$i = $25;
   } else {
    $26 = ((($17)) + 4|0);
    HEAP32[$16>>2] = $26;
    HEAP32[$17>>2] = $14;
    $27 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($14)|0);
    $$0$i$i$i$i = $27;
   }
   $28 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
   $29 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i,$28)|0);
   $spec$select$i = $29 ? 0 : $$sroa$04$0$i;
   $$sroa$04$1$i = $spec$select$i;
  }
  $30 = ((($$0$i$i)) + 4|0);
  $$0$i$i = $30;$$sroa$04$0$i = $$sroa$04$1$i;
 }
 STACKTOP = sp;return ($$sroa$04$0$i|0);
}
function __ZNKSt3__210__time_put8__do_putEPwRS1_PK2tmcc($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $6 = sp;
 $7 = sp + 116|0;
 $8 = sp + 104|0;
 $9 = sp + 112|0;
 $10 = ((($6)) + 100|0);
 HEAP32[$7>>2] = $10;
 __ZNKSt3__210__time_put8__do_putEPcRS1_PK2tmcc($0,$6,$7,$3,$4,$5);
 $11 = $8;
 $12 = $11;
 HEAP32[$12>>2] = 0;
 $13 = (($11) + 4)|0;
 $14 = $13;
 HEAP32[$14>>2] = 0;
 HEAP32[$9>>2] = $6;
 $15 = HEAP32[$2>>2]|0;
 $16 = (__ZNSt3__212_GLOBAL__N_17countofIwEEmPKT_S4_($1,$15)|0);
 $17 = HEAP32[$0>>2]|0;
 $18 = (___uselocale($17)|0);
 $19 = (_mbsrtowcs($1,$9,$16,$8)|0);
 $20 = ($18|0)==(0|0);
 if (!($20)) {
  (___uselocale($18)|0);
 }
 $21 = ($19|0)==(-1);
 if ($21) {
  __ZNSt3__221__throw_runtime_errorEPKc(42694);
  // unreachable;
 } else {
  $22 = (($1) + ($19<<2)|0);
  HEAP32[$2>>2] = $22;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__212_GLOBAL__N_17countofIwEEmPKT_S4_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1;
 $3 = $0;
 $4 = (($2) - ($3))|0;
 $5 = $4 >> 2;
 return ($5|0);
}
function __ZNSt3__221__throw_runtime_errorEPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___cxa_allocate_exception(8)|0);
 __THREW__ = 0;
 invoke_vii(163,($1|0),($0|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $4 = ___cxa_find_matching_catch_2()|0;
  $5 = (getTempRet0() | 0);
  ___cxa_free_exception(($1|0));
  ___resumeException($4|0);
  // unreachable;
 } else {
  ___cxa_throw(($1|0),(24728|0),(228|0));
  // unreachable;
 }
}
function __ZNSt3__210moneypunctIcLb0EED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}
function __ZNSt3__210moneypunctIcLb0EED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt3__210moneypunctIcLb0EE16do_decimal_pointEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 127;
}
function __ZNKSt3__210moneypunctIcLb0EE16do_thousands_sepEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 127;
}
function __ZNKSt3__210moneypunctIcLb0EE11do_groupingEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $2 = 0, $3 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $2 = (($0) + ($$0$i$i<<2)|0);
  HEAP32[$2>>2] = 0;
  $3 = (($$0$i$i) + 1)|0;
  $$0$i$i = $3;
 }
 return;
}
function __ZNKSt3__210moneypunctIcLb0EE14do_curr_symbolEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $2 = 0, $3 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $2 = (($0) + ($$0$i$i<<2)|0);
  HEAP32[$2>>2] = 0;
  $3 = (($$0$i$i) + 1)|0;
  $$0$i$i = $3;
 }
 return;
}
function __ZNKSt3__210moneypunctIcLb0EE16do_positive_signEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $2 = 0, $3 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $2 = (($0) + ($$0$i$i<<2)|0);
  HEAP32[$2>>2] = 0;
  $3 = (($$0$i$i) + 1)|0;
  $$0$i$i = $3;
 }
 return;
}
function __ZNKSt3__210moneypunctIcLb0EE16do_negative_signEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEmc($0,1,45);
 return;
}
function __ZNKSt3__210moneypunctIcLb0EE14do_frac_digitsEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__210moneypunctIcLb0EE13do_pos_formatEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$0>>0]=67109634&255;HEAP8[$0+1>>0]=(67109634>>8)&255;HEAP8[$0+2>>0]=(67109634>>16)&255;HEAP8[$0+3>>0]=67109634>>24;
 return;
}
function __ZNKSt3__210moneypunctIcLb0EE13do_neg_formatEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$0>>0]=67109634&255;HEAP8[$0+1>>0]=(67109634>>8)&255;HEAP8[$0+2>>0]=(67109634>>16)&255;HEAP8[$0+3>>0]=67109634>>24;
 return;
}
function __ZNSt3__210moneypunctIcLb1EED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}
function __ZNSt3__210moneypunctIcLb1EED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt3__210moneypunctIcLb1EE16do_decimal_pointEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 127;
}
function __ZNKSt3__210moneypunctIcLb1EE16do_thousands_sepEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 127;
}
function __ZNKSt3__210moneypunctIcLb1EE11do_groupingEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $2 = 0, $3 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $2 = (($0) + ($$0$i$i<<2)|0);
  HEAP32[$2>>2] = 0;
  $3 = (($$0$i$i) + 1)|0;
  $$0$i$i = $3;
 }
 return;
}
function __ZNKSt3__210moneypunctIcLb1EE14do_curr_symbolEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $2 = 0, $3 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $2 = (($0) + ($$0$i$i<<2)|0);
  HEAP32[$2>>2] = 0;
  $3 = (($$0$i$i) + 1)|0;
  $$0$i$i = $3;
 }
 return;
}
function __ZNKSt3__210moneypunctIcLb1EE16do_positive_signEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $2 = 0, $3 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $2 = (($0) + ($$0$i$i<<2)|0);
  HEAP32[$2>>2] = 0;
  $3 = (($$0$i$i) + 1)|0;
  $$0$i$i = $3;
 }
 return;
}
function __ZNKSt3__210moneypunctIcLb1EE16do_negative_signEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEmc($0,1,45);
 return;
}
function __ZNKSt3__210moneypunctIcLb1EE14do_frac_digitsEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__210moneypunctIcLb1EE13do_pos_formatEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$0>>0]=67109634&255;HEAP8[$0+1>>0]=(67109634>>8)&255;HEAP8[$0+2>>0]=(67109634>>16)&255;HEAP8[$0+3>>0]=67109634>>24;
 return;
}
function __ZNKSt3__210moneypunctIcLb1EE13do_neg_formatEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$0>>0]=67109634&255;HEAP8[$0+1>>0]=(67109634>>8)&255;HEAP8[$0+2>>0]=(67109634>>16)&255;HEAP8[$0+3>>0]=67109634>>24;
 return;
}
function __ZNSt3__210moneypunctIwLb0EED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}
function __ZNSt3__210moneypunctIwLb0EED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt3__210moneypunctIwLb0EE16do_decimal_pointEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2147483647;
}
function __ZNKSt3__210moneypunctIwLb0EE16do_thousands_sepEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2147483647;
}
function __ZNKSt3__210moneypunctIwLb0EE11do_groupingEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $2 = 0, $3 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $2 = (($0) + ($$0$i$i<<2)|0);
  HEAP32[$2>>2] = 0;
  $3 = (($$0$i$i) + 1)|0;
  $$0$i$i = $3;
 }
 return;
}
function __ZNKSt3__210moneypunctIwLb0EE14do_curr_symbolEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $2 = 0, $3 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $2 = (($0) + ($$0$i$i<<2)|0);
  HEAP32[$2>>2] = 0;
  $3 = (($$0$i$i) + 1)|0;
  $$0$i$i = $3;
 }
 return;
}
function __ZNKSt3__210moneypunctIwLb0EE16do_positive_signEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $2 = 0, $3 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $2 = (($0) + ($$0$i$i<<2)|0);
  HEAP32[$2>>2] = 0;
  $3 = (($$0$i$i) + 1)|0;
  $$0$i$i = $3;
 }
 return;
}
function __ZNKSt3__210moneypunctIwLb0EE16do_negative_signEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEmw($0,1,45);
 return;
}
function __ZNKSt3__210moneypunctIwLb0EE14do_frac_digitsEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__210moneypunctIwLb0EE13do_pos_formatEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$0>>0]=67109634&255;HEAP8[$0+1>>0]=(67109634>>8)&255;HEAP8[$0+2>>0]=(67109634>>16)&255;HEAP8[$0+3>>0]=67109634>>24;
 return;
}
function __ZNKSt3__210moneypunctIwLb0EE13do_neg_formatEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$0>>0]=67109634&255;HEAP8[$0+1>>0]=(67109634>>8)&255;HEAP8[$0+2>>0]=(67109634>>16)&255;HEAP8[$0+3>>0]=67109634>>24;
 return;
}
function __ZNSt3__210moneypunctIwLb1EED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}
function __ZNSt3__210moneypunctIwLb1EED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt3__210moneypunctIwLb1EE16do_decimal_pointEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2147483647;
}
function __ZNKSt3__210moneypunctIwLb1EE16do_thousands_sepEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2147483647;
}
function __ZNKSt3__210moneypunctIwLb1EE11do_groupingEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $2 = 0, $3 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $2 = (($0) + ($$0$i$i<<2)|0);
  HEAP32[$2>>2] = 0;
  $3 = (($$0$i$i) + 1)|0;
  $$0$i$i = $3;
 }
 return;
}
function __ZNKSt3__210moneypunctIwLb1EE14do_curr_symbolEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $2 = 0, $3 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $2 = (($0) + ($$0$i$i<<2)|0);
  HEAP32[$2>>2] = 0;
  $3 = (($$0$i$i) + 1)|0;
  $$0$i$i = $3;
 }
 return;
}
function __ZNKSt3__210moneypunctIwLb1EE16do_positive_signEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $2 = 0, $3 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $2 = (($0) + ($$0$i$i<<2)|0);
  HEAP32[$2>>2] = 0;
  $3 = (($$0$i$i) + 1)|0;
  $$0$i$i = $3;
 }
 return;
}
function __ZNKSt3__210moneypunctIwLb1EE16do_negative_signEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEmw($0,1,45);
 return;
}
function __ZNKSt3__210moneypunctIwLb1EE14do_frac_digitsEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__210moneypunctIwLb1EE13do_pos_formatEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$0>>0]=67109634&255;HEAP8[$0+1>>0]=(67109634>>8)&255;HEAP8[$0+2>>0]=(67109634>>16)&255;HEAP8[$0+3>>0]=67109634>>24;
 return;
}
function __ZNKSt3__210moneypunctIwLb1EE13do_neg_formatEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$0>>0]=67109634&255;HEAP8[$0+1>>0]=(67109634>>8)&255;HEAP8[$0+2>>0]=(67109634>>16)&255;HEAP8[$0+3>>0]=67109634>>24;
 return;
}
function __ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}
function __ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$0 = 0, $$0$i = 0, $$0$i$i$i$i = 0, $$0$i$i2$i$i = 0, $$0$lcssa$i = 0, $$031 = 0, $$032 = 0, $$035 = 0, $$1 = 0, $$133 = 0, $$136 = 0, $$2 = 0, $$234 = 0, $$237 = 0, $$33860 = 0, $$362 = 0, $$byval_copy = 0, $$phi$trans$insert63 = 0, $$pre = 0, $$pre$i$i$i = 0;
 var $$pre57 = 0, $$pre64 = 0, $$sroa$0$0$copyload = 0, $$sroa$044$0 = 0, $$sroa$044$1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $phitmp$i$i$i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $$byval_copy = sp + 240|0;
 $vararg_buffer = sp + 216|0;
 $7 = sp + 112|0;
 $8 = sp + 232|0;
 $9 = sp + 228|0;
 $10 = sp + 224|0;
 $11 = sp + 250|0;
 $12 = sp + 220|0;
 $13 = sp;
 $14 = $7;
 HEAP32[$8>>2] = $14;
 $15 = ((($8)) + 4|0);
 HEAP32[$15>>2] = (308);
 $16 = ((($7)) + 100|0);
 __ZNKSt3__28ios_base6getlocEv($10,$4);
 __THREW__ = 0;
 $17 = (invoke_iii(37,($10|0),(50740|0))|0);
 $18 = __THREW__; __THREW__ = 0;
 $19 = $18&1;
 if ($19) {
  $42 = ___cxa_find_matching_catch_2()|0;
  $43 = (getTempRet0() | 0);
  $$234 = $42;$$237 = $43;
 } else {
  HEAP8[$11>>0] = 0;
  $20 = HEAP32[$2>>2]|0;
  HEAP32[$12>>2] = $20;
  $21 = ((($4)) + 4|0);
  $22 = HEAP32[$21>>2]|0;
  __THREW__ = 0;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$12>>2]|0;
  $23 = (invoke_iiiiiiiiiiii(1,($1|0),($$byval_copy|0),($3|0),($10|0),($22|0),($5|0),($11|0),($17|0),($8|0),($9|0),($16|0))|0);
  $24 = __THREW__; __THREW__ = 0;
  $25 = $24&1;
  L4: do {
   if ($25) {
    label = 9;
   } else {
    L6: do {
     if ($23) {
      $26 = HEAP32[$17>>2]|0;
      $27 = ((($26)) + 32|0);
      $28 = HEAP32[$27>>2]|0;
      __THREW__ = 0;
      (invoke_iiiii($28|0,($17|0),(42917|0),((42927)|0),($$byval_copy|0))|0);
      $29 = __THREW__; __THREW__ = 0;
      $30 = $29&1;
      if ($30) {
       $46 = ___cxa_find_matching_catch_2()|0;
       $47 = (getTempRet0() | 0);
       $$032 = $46;$$035 = $47;
      } else {
       $31 = HEAP32[$9>>2]|0;
       $32 = HEAP32[$8>>2]|0;
       $33 = (($31) - ($32))|0;
       $34 = ($33|0)>(98);
       $35 = $32;
       $36 = $31;
       if ($34) {
        $37 = (($33) + 2)|0;
        $38 = (_malloc($37)|0);
        $39 = $38;
        $40 = ($38|0)==(0|0);
        if ($40) {
         __THREW__ = 0;
         invoke_v(4);
         $41 = __THREW__; __THREW__ = 0;
         $$sroa$044$0 = $39;
        } else {
         $$031 = $38;$$sroa$044$1 = $39;
         label = 14;
        }
       } else {
        $$031 = $13;$$sroa$044$1 = 0;
        label = 14;
       }
       do {
        if ((label|0) == 14) {
         $52 = HEAP8[$11>>0]|0;
         $53 = ($52<<24>>24)==(0);
         if ($53) {
          $$1 = $$031;
         } else {
          $54 = ((($$031)) + 1|0);
          HEAP8[$$031>>0] = 45;
          $$1 = $54;
         }
         $55 = ((($$byval_copy)) + 10|0);
         $56 = $$byval_copy;
         $$0 = $35;$$2 = $$1;$58 = $36;
         while(1) {
          $57 = ($$0>>>0)<($58>>>0);
          if (!($57)) {
           break;
          }
          $61 = HEAP8[$$0>>0]|0;
          $$0$i = $$byval_copy;
          while(1) {
           $62 = ($$0$i|0)==($55|0);
           if ($62) {
            $$0$lcssa$i = $55;
            break;
           }
           $63 = HEAP8[$$0$i>>0]|0;
           $64 = ($63<<24>>24)==($61<<24>>24);
           if ($64) {
            $$0$lcssa$i = $$0$i;
            break;
           }
           $65 = ((($$0$i)) + 1|0);
           $$0$i = $65;
          }
          $66 = $$0$lcssa$i;
          $67 = (($66) - ($56))|0;
          $68 = (42917 + ($67)|0);
          $69 = HEAP8[$68>>0]|0;
          HEAP8[$$2>>0] = $69;
          $70 = ((($$0)) + 1|0);
          $71 = ((($$2)) + 1|0);
          $$pre = HEAP32[$9>>2]|0;
          $$0 = $70;$$2 = $71;$58 = $$pre;
         }
         HEAP8[$$2>>0] = 0;
         HEAP32[$vararg_buffer>>2] = $6;
         $59 = (_sscanf($13,42928,$vararg_buffer)|0);
         $60 = ($59|0)==(1);
         if (!($60)) {
          __THREW__ = 0;
          invoke_vi(309,(42932|0));
          $72 = __THREW__; __THREW__ = 0;
          $$sroa$044$0 = $$sroa$044$1;
          break;
         }
         $73 = ($$sroa$044$1|0)==(0);
         if (!($73)) {
          $74 = $$sroa$044$1;
          _free($74);
         }
         break L6;
        }
       } while(0);
       $48 = ___cxa_find_matching_catch_2()|0;
       $49 = (getTempRet0() | 0);
       $50 = ($$sroa$044$0|0)==(0);
       if (!($50)) {
        $51 = $$sroa$044$0;
        _free($51);
       }
       $$032 = $48;$$035 = $49;
      }
      $$133 = $$032;$$136 = $$035;
      break L4;
     }
    } while(0);
    $75 = HEAP32[$1>>2]|0;
    $76 = ($75|0)==(0|0);
    do {
     if ($76) {
      $124 = 1;
     } else {
      $77 = ((($75)) + 12|0);
      $78 = HEAP32[$77>>2]|0;
      $79 = ((($75)) + 16|0);
      $80 = HEAP32[$79>>2]|0;
      $81 = ($78|0)==($80|0);
      if ($81) {
       $82 = HEAP32[$75>>2]|0;
       $83 = ((($82)) + 36|0);
       $84 = HEAP32[$83>>2]|0;
       __THREW__ = 0;
       $85 = (invoke_ii($84|0,($75|0))|0);
       $86 = __THREW__; __THREW__ = 0;
       $87 = $86&1;
       if ($87) {
        label = 9;
        break L4;
       } else {
        $$0$i$i$i$i = $85;
       }
      } else {
       $88 = HEAP8[$78>>0]|0;
       $89 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($88)|0);
       $$0$i$i$i$i = $89;
      }
      $90 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
      $91 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i,$90)|0);
      if ($91) {
       HEAP32[$1>>2] = 0;
       $124 = 1;
       break;
      } else {
       $$pre$i$i$i = HEAP32[$1>>2]|0;
       $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
       $124 = $phitmp$i$i$i;
       break;
      }
     }
    } while(0);
    $92 = HEAP32[$2>>2]|0;
    $93 = ($92|0)==(0|0);
    do {
     if ($93) {
      label = 42;
     } else {
      $94 = ((($92)) + 12|0);
      $95 = HEAP32[$94>>2]|0;
      $96 = ((($92)) + 16|0);
      $97 = HEAP32[$96>>2]|0;
      $98 = ($95|0)==($97|0);
      if ($98) {
       $99 = HEAP32[$92>>2]|0;
       $100 = ((($99)) + 36|0);
       $101 = HEAP32[$100>>2]|0;
       __THREW__ = 0;
       $102 = (invoke_ii($101|0,($92|0))|0);
       $103 = __THREW__; __THREW__ = 0;
       $104 = $103&1;
       if ($104) {
        label = 9;
        break L4;
       } else {
        $$0$i$i2$i$i = $102;
       }
      } else {
       $105 = HEAP8[$95>>0]|0;
       $106 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($105)|0);
       $$0$i$i2$i$i = $106;
      }
      $107 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
      $108 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i,$107)|0);
      if ($108) {
       HEAP32[$2>>2] = 0;
       label = 42;
       break;
      } else {
       if ($124) {
        break;
       } else {
        label = 44;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 42) {
     if ($124) {
      label = 44;
     }
    }
    if ((label|0) == 44) {
     $109 = HEAP32[$5>>2]|0;
     $110 = $109 | 2;
     HEAP32[$5>>2] = $110;
    }
    $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
    __ZNSt3__26localeD2Ev($10);
    $111 = HEAP32[$8>>2]|0;
    HEAP32[$8>>2] = 0;
    $112 = ($111|0)==(0|0);
    if (!($112)) {
     $113 = ((($8)) + 4|0);
     $114 = HEAP32[$113>>2]|0;
     __THREW__ = 0;
     invoke_vi($114|0,($111|0));
     $115 = __THREW__; __THREW__ = 0;
     $116 = $115&1;
     if ($116) {
      $117 = ___cxa_find_matching_catch_3(0|0)|0;
      $118 = (getTempRet0() | 0);
      ___clang_call_terminate($117);
      // unreachable;
     }
    }
    STACKTOP = sp;return ($$sroa$0$0$copyload|0);
   }
  } while(0);
  if ((label|0) == 9) {
   $44 = ___cxa_find_matching_catch_2()|0;
   $45 = (getTempRet0() | 0);
   $$133 = $44;$$136 = $45;
  }
  $$234 = $$133;$$237 = $$136;
 }
 __ZNSt3__26localeD2Ev($10);
 $$pre57 = HEAP32[$8>>2]|0;
 HEAP32[$8>>2] = 0;
 $119 = ($$pre57|0)==(0|0);
 if ($119) {
  $$33860 = $$237;$$362 = $$234;
 } else {
  $$phi$trans$insert63 = ((($8)) + 4|0);
  $$pre64 = HEAP32[$$phi$trans$insert63>>2]|0;
  __THREW__ = 0;
  invoke_vi($$pre64|0,($$pre57|0));
  $120 = __THREW__; __THREW__ = 0;
  $121 = $120&1;
  if ($121) {
   $122 = ___cxa_find_matching_catch_3(0|0)|0;
   $123 = (getTempRet0() | 0);
   ___clang_call_terminate($122);
   // unreachable;
  } else {
   $$33860 = $$237;$$362 = $$234;
  }
 }
 ___resumeException($$362|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$0 = 0, $$0$i$i$i$i = 0, $$0$i$i2$i$i = 0, $$2 = 0, $$233 = 0, $$33443 = 0, $$345 = 0, $$byval_copy = 0, $$pre = 0, $$pre$i$i$i = 0, $$sink46$index = 0, $$sink46$index3 = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $phitmp$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $$byval_copy = sp + 120|0;
 $7 = sp;
 $8 = sp + 112|0;
 $9 = sp + 108|0;
 $10 = sp + 100|0;
 $11 = sp + 124|0;
 $12 = sp + 104|0;
 $13 = $7;
 HEAP32[$8>>2] = $13;
 $14 = ((($8)) + 4|0);
 HEAP32[$14>>2] = (308);
 $15 = ((($7)) + 100|0);
 __ZNKSt3__28ios_base6getlocEv($10,$4);
 __THREW__ = 0;
 $16 = (invoke_iii(37,($10|0),(50740|0))|0);
 $17 = __THREW__; __THREW__ = 0;
 $18 = $17&1;
 if ($18) {
  $41 = ___cxa_find_matching_catch_2()|0;
  $42 = (getTempRet0() | 0);
  $$2 = $41;$$233 = $42;
 } else {
  HEAP8[$11>>0] = 0;
  $19 = HEAP32[$2>>2]|0;
  HEAP32[$12>>2] = $19;
  $20 = ((($4)) + 4|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $19;
  __THREW__ = 0;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$12>>2]|0;
  $23 = (invoke_iiiiiiiiiiii(1,($1|0),($$byval_copy|0),($3|0),($10|0),($21|0),($5|0),($11|0),($16|0),($8|0),($9|0),($15|0))|0);
  $24 = __THREW__; __THREW__ = 0;
  $25 = $24&1;
  L4: do {
   if ($25) {
    label = 11;
   } else {
    if ($23) {
     $26 = ((($6)) + 11|0);
     $27 = HEAP8[$26>>0]|0;
     $28 = ($27<<24>>24)<(0);
     if ($28) {
      $29 = HEAP32[$6>>2]|0;
      HEAP8[$$byval_copy>>0] = 0;
      __ZNSt3__211char_traitsIcE6assignERcRKc($29,$$byval_copy);
      $30 = ((($6)) + 4|0);
      HEAP32[$30>>2] = 0;
     } else {
      HEAP8[$$byval_copy>>0] = 0;
      __ZNSt3__211char_traitsIcE6assignERcRKc($6,$$byval_copy);
      HEAP8[$26>>0] = 0;
     }
     $31 = HEAP8[$11>>0]|0;
     $32 = ($31<<24>>24)==(0);
     if (!($32)) {
      $33 = HEAP32[$16>>2]|0;
      $34 = ((($33)) + 28|0);
      $35 = HEAP32[$34>>2]|0;
      __THREW__ = 0;
      $36 = (invoke_iii($35|0,($16|0),45)|0);
      $37 = __THREW__; __THREW__ = 0;
      $38 = $37&1;
      if ($38) {
       label = 11;
       break;
      }
      __THREW__ = 0;
      invoke_vii(164,($6|0),($36|0));
      $39 = __THREW__; __THREW__ = 0;
      $40 = $39&1;
      if ($40) {
       label = 11;
       break;
      }
     }
     $45 = HEAP32[$16>>2]|0;
     $46 = ((($45)) + 28|0);
     $47 = HEAP32[$46>>2]|0;
     __THREW__ = 0;
     $48 = (invoke_iii($47|0,($16|0),48)|0);
     $49 = __THREW__; __THREW__ = 0;
     $50 = $49&1;
     if ($50) {
      $57 = ___cxa_find_matching_catch_2()|0;
      $58 = (getTempRet0() | 0);
      $$sink46$index = $57;$$sink46$index3 = $58;
      break;
     }
     $51 = HEAP32[$8>>2]|0;
     $52 = HEAP32[$9>>2]|0;
     $53 = ((($52)) + -1|0);
     $$0 = $51;
     while(1) {
      $54 = ($$0>>>0)<($53>>>0);
      if (!($54)) {
       break;
      }
      $55 = HEAP8[$$0>>0]|0;
      $56 = ($55<<24>>24)==($48<<24>>24);
      if (!($56)) {
       break;
      }
      $59 = ((($$0)) + 1|0);
      $$0 = $59;
     }
     __THREW__ = 0;
     (invoke_iiii(43,($6|0),($$0|0),($52|0))|0);
     $60 = __THREW__; __THREW__ = 0;
     $61 = $60&1;
     if ($61) {
      $62 = ___cxa_find_matching_catch_2()|0;
      $63 = (getTempRet0() | 0);
      $$sink46$index = $62;$$sink46$index3 = $63;
      break;
     }
    }
    $64 = HEAP32[$1>>2]|0;
    $65 = ($64|0)==(0|0);
    do {
     if ($65) {
      $115 = 1;
     } else {
      $66 = ((($64)) + 12|0);
      $67 = HEAP32[$66>>2]|0;
      $68 = ((($64)) + 16|0);
      $69 = HEAP32[$68>>2]|0;
      $70 = ($67|0)==($69|0);
      if ($70) {
       $71 = HEAP32[$64>>2]|0;
       $72 = ((($71)) + 36|0);
       $73 = HEAP32[$72>>2]|0;
       __THREW__ = 0;
       $74 = (invoke_ii($73|0,($64|0))|0);
       $75 = __THREW__; __THREW__ = 0;
       $76 = $75&1;
       if ($76) {
        label = 11;
        break L4;
       } else {
        $$0$i$i$i$i = $74;
       }
      } else {
       $77 = HEAP8[$67>>0]|0;
       $78 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($77)|0);
       $$0$i$i$i$i = $78;
      }
      $79 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
      $80 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i,$79)|0);
      if ($80) {
       HEAP32[$1>>2] = 0;
       $115 = 1;
       break;
      } else {
       $$pre$i$i$i = HEAP32[$1>>2]|0;
       $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
       $115 = $phitmp$i$i$i;
       break;
      }
     }
    } while(0);
    $81 = ($19|0)==(0);
    do {
     if ($81) {
      label = 33;
     } else {
      $82 = ((($22)) + 12|0);
      $83 = HEAP32[$82>>2]|0;
      $84 = ((($22)) + 16|0);
      $85 = HEAP32[$84>>2]|0;
      $86 = ($83|0)==($85|0);
      if ($86) {
       $87 = $19;
       $88 = HEAP32[$87>>2]|0;
       $89 = ((($88)) + 36|0);
       $90 = HEAP32[$89>>2]|0;
       __THREW__ = 0;
       $91 = (invoke_ii($90|0,($22|0))|0);
       $92 = __THREW__; __THREW__ = 0;
       $93 = $92&1;
       if ($93) {
        label = 11;
        break L4;
       } else {
        $$0$i$i2$i$i = $91;
       }
      } else {
       $94 = HEAP8[$83>>0]|0;
       $95 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($94)|0);
       $$0$i$i2$i$i = $95;
      }
      $96 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
      $97 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i,$96)|0);
      if ($97) {
       HEAP32[$2>>2] = 0;
       label = 33;
       break;
      } else {
       if ($115) {
        break;
       } else {
        label = 35;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 33) {
     if ($115) {
      label = 35;
     }
    }
    if ((label|0) == 35) {
     $98 = HEAP32[$5>>2]|0;
     $99 = $98 | 2;
     HEAP32[$5>>2] = $99;
    }
    $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
    __ZNSt3__26localeD2Ev($10);
    $100 = HEAP32[$8>>2]|0;
    HEAP32[$8>>2] = 0;
    $101 = ($100|0)==(0|0);
    if (!($101)) {
     $102 = ((($8)) + 4|0);
     $103 = HEAP32[$102>>2]|0;
     __THREW__ = 0;
     invoke_vi($103|0,($100|0));
     $104 = __THREW__; __THREW__ = 0;
     $105 = $104&1;
     if ($105) {
      $106 = ___cxa_find_matching_catch_3(0|0)|0;
      $107 = (getTempRet0() | 0);
      ___clang_call_terminate($106);
      // unreachable;
     }
    }
    STACKTOP = sp;return ($$sroa$0$0$copyload|0);
   }
  } while(0);
  if ((label|0) == 11) {
   $43 = ___cxa_find_matching_catch_2()|0;
   $44 = (getTempRet0() | 0);
   $$sink46$index = $43;$$sink46$index3 = $44;
  }
  $$2 = $$sink46$index;$$233 = $$sink46$index3;
 }
 __ZNSt3__26localeD2Ev($10);
 $$pre = HEAP32[$8>>2]|0;
 HEAP32[$8>>2] = 0;
 $108 = ($$pre|0)==(0|0);
 if ($108) {
  $$33443 = $$233;$$345 = $$2;
 } else {
  $109 = ((($8)) + 4|0);
  $110 = HEAP32[$109>>2]|0;
  __THREW__ = 0;
  invoke_vi($110|0,($$pre|0));
  $111 = __THREW__; __THREW__ = 0;
  $112 = $111&1;
  if ($112) {
   $113 = ___cxa_find_matching_catch_3(0|0)|0;
   $114 = (getTempRet0() | 0);
   ___clang_call_terminate($113);
   // unreachable;
  } else {
   $$33443 = $$233;$$345 = $$2;
  }
 }
 ___resumeException($$345|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__212__do_nothingEPv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i185 = 0, $$0$i$i$i$i250 = 0, $$0$i$i$i$i270 = 0, $$0$i$i$i$i291 = 0, $$0$i$i$i$i309 = 0, $$0$i$i$i$i333 = 0, $$0$i$i167 = 0, $$0$i$i170 = 0, $$0$i$i173 = 0, $$0$i$i176 = 0, $$0$i$i181 = 0, $$0$i$i183 = 0, $$0$i$i199 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i191 = 0, $$0$i$i2$i$i256 = 0, $$0$i$i2$i$i276 = 0;
 var $$0$i$i2$i$i297 = 0, $$0$i$i2$i$i315 = 0, $$0$i$i2$i$i339 = 0, $$0$i$i203 = 0, $$0$i$i210 = 0, $$0$i$i215 = 0, $$0$i$i222 = 0, $$0$i$i229 = 0, $$0$i$i247 = 0, $$0$i$i264 = 0, $$0$i$i284 = 0, $$0$i$i304 = 0, $$0$i$i323 = 0, $$0$i$i327 = 0, $$0132 = 0, $$0149 = 0, $$0158 = 0, $$10 = 0, $$1150 = 0, $$2134$ph = 0;
 var $$5142 = 0, $$5148 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i187 = 0, $$pre$i$i$i252 = 0, $$pre$i$i$i272 = 0, $$pre$i$i$i293 = 0, $$pre$i$i$i311 = 0, $$pre$i$i$i335 = 0, $$pre$phiZ2D = 0, $$pre461 = 0, $$pre463 = 0, $$pre464 = 0, $$pre465 = 0, $$sroa$0353$0$ptr = 0, $$sroa$0374$0 = 0, $$sroa$0374$1 = 0, $$sroa$0374$1$ptr = 0, $$sroa$08$0$ptr$i = 0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
 var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0;
 var $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0;
 var $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0;
 var $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0;
 var $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0;
 var $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0;
 var $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0;
 var $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0;
 var $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0;
 var $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0;
 var $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0;
 var $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0;
 var $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0;
 var $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0;
 var $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0;
 var $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0;
 var $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0;
 var $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0;
 var $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $50 = 0;
 var $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0;
 var $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0;
 var $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0;
 var $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0;
 var $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0;
 var $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0;
 var $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0;
 var $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0;
 var $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0;
 var $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0;
 var $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $70 = 0;
 var $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0;
 var $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0;
 var $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0;
 var $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0;
 var $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0;
 var $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0;
 var $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0;
 var $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0;
 var $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0;
 var $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0;
 var $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $90 = 0;
 var $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0;
 var $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0;
 var $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $brmerge = 0, $cond166 = 0, $exitcond$i$i = 0, $exitcond$i$i168 = 0, $exitcond$i$i171 = 0, $exitcond$i$i174 = 0, $exitcond$i$i177 = 0, $lpad$phi$index = 0;
 var $lpad$phi$index2 = 0, $lpad$phi420$index = 0, $lpad$phi420$index8 = 0, $or$cond = 0, $or$cond13 = 0, $or$cond15 = 0, $or$cond163 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i188 = 0, $phitmp$i$i$i253 = 0, $phitmp$i$i$i273 = 0, $phitmp$i$i$i294 = 0, $phitmp$i$i$i312 = 0, $phitmp$i$i$i336 = 0, $sext = 0, $sext411 = 0, $sext412 = 0, $sext413 = 0, $spec$select = 0, $spec$select159 = 0;
 var $spec$select160 = 0, $spec$select161 = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(512|0);
 $11 = sp + 488|0;
 $12 = sp;
 $13 = sp + 480|0;
 $14 = sp + 472|0;
 $15 = sp + 468|0;
 $16 = sp + 496|0;
 $17 = sp + 493|0;
 $18 = sp + 492|0;
 $19 = sp + 456|0;
 $20 = sp + 444|0;
 $21 = sp + 432|0;
 $22 = sp + 420|0;
 $23 = sp + 408|0;
 $24 = sp + 404|0;
 $25 = sp + 400|0;
 HEAP32[$11>>2] = $10;
 $26 = $12;
 HEAP32[$13>>2] = $26;
 $27 = ((($13)) + 4|0);
 HEAP32[$27>>2] = (308);
 HEAP32[$14>>2] = $12;
 $28 = ((($12)) + 400|0);
 HEAP32[$15>>2] = $28;
 ;HEAP32[$19>>2]=0|0;HEAP32[$19+4>>2]=0|0;HEAP32[$19+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $29 = (($19) + ($$0$i$i<<2)|0);
  HEAP32[$29>>2] = 0;
  $30 = (($$0$i$i) + 1)|0;
  $$0$i$i = $30;
 }
 ;HEAP32[$20>>2]=0|0;HEAP32[$20+4>>2]=0|0;HEAP32[$20+8>>2]=0|0;
 $$0$i$i167 = 0;
 while(1) {
  $exitcond$i$i168 = ($$0$i$i167|0)==(3);
  if ($exitcond$i$i168) {
   break;
  }
  $31 = (($20) + ($$0$i$i167<<2)|0);
  HEAP32[$31>>2] = 0;
  $32 = (($$0$i$i167) + 1)|0;
  $$0$i$i167 = $32;
 }
 ;HEAP32[$21>>2]=0|0;HEAP32[$21+4>>2]=0|0;HEAP32[$21+8>>2]=0|0;
 $$0$i$i170 = 0;
 while(1) {
  $exitcond$i$i171 = ($$0$i$i170|0)==(3);
  if ($exitcond$i$i171) {
   break;
  }
  $33 = (($21) + ($$0$i$i170<<2)|0);
  HEAP32[$33>>2] = 0;
  $34 = (($$0$i$i170) + 1)|0;
  $$0$i$i170 = $34;
 }
 ;HEAP32[$22>>2]=0|0;HEAP32[$22+4>>2]=0|0;HEAP32[$22+8>>2]=0|0;
 $$0$i$i173 = 0;
 while(1) {
  $exitcond$i$i174 = ($$0$i$i173|0)==(3);
  if ($exitcond$i$i174) {
   break;
  }
  $35 = (($22) + ($$0$i$i173<<2)|0);
  HEAP32[$35>>2] = 0;
  $36 = (($$0$i$i173) + 1)|0;
  $$0$i$i173 = $36;
 }
 ;HEAP32[$23>>2]=0|0;HEAP32[$23+4>>2]=0|0;HEAP32[$23+8>>2]=0|0;
 $$0$i$i176 = 0;
 while(1) {
  $exitcond$i$i177 = ($$0$i$i176|0)==(3);
  if ($exitcond$i$i177) {
   break;
  }
  $37 = (($23) + ($$0$i$i176<<2)|0);
  HEAP32[$37>>2] = 0;
  $38 = (($$0$i$i176) + 1)|0;
  $$0$i$i176 = $38;
 }
 __THREW__ = 0;
 invoke_viiiiiiiiii(1,($2|0),($3|0),($16|0),($17|0),($18|0),($19|0),($20|0),($21|0),($22|0),($24|0));
 $39 = __THREW__; __THREW__ = 0;
 $40 = $39&1;
 L21: do {
  if ($40) {
   $91 = ___cxa_find_matching_catch_2()|0;
   $92 = (getTempRet0() | 0);
   $$5142 = $91;$$5148 = $92;
  } else {
   $41 = HEAP32[$8>>2]|0;
   HEAP32[$9>>2] = $41;
   $42 = ((($7)) + 8|0);
   $43 = ((($21)) + 11|0);
   $44 = ((($21)) + 4|0);
   $45 = ((($22)) + 11|0);
   $46 = ((($22)) + 4|0);
   $47 = ((($19)) + 11|0);
   $48 = ((($19)) + 4|0);
   $49 = $4 & 512;
   $50 = ($49|0)!=(0);
   $51 = ((($20)) + 11|0);
   $52 = ((($16)) + 3|0);
   $53 = ((($20)) + 4|0);
   $54 = ((($23)) + 11|0);
   $55 = ((($23)) + 4|0);
   $$0149 = 0;$$0158 = 0;
   L24: while(1) {
    $56 = ($$0158>>>0)<(4);
    if (!($56)) {
     label = 261;
     break;
    }
    $57 = HEAP32[$0>>2]|0;
    $58 = ($57|0)==(0|0);
    do {
     if ($58) {
      $924 = 1;
     } else {
      $59 = ((($57)) + 12|0);
      $60 = HEAP32[$59>>2]|0;
      $61 = ((($57)) + 16|0);
      $62 = HEAP32[$61>>2]|0;
      $63 = ($60|0)==($62|0);
      if ($63) {
       $64 = HEAP32[$57>>2]|0;
       $65 = ((($64)) + 36|0);
       $66 = HEAP32[$65>>2]|0;
       __THREW__ = 0;
       $67 = (invoke_ii($66|0,($57|0))|0);
       $68 = __THREW__; __THREW__ = 0;
       $69 = $68&1;
       if ($69) {
        label = 36;
        break L24;
       } else {
        $$0$i$i$i$i = $67;
       }
      } else {
       $70 = HEAP8[$60>>0]|0;
       $71 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($70)|0);
       $$0$i$i$i$i = $71;
      }
      $72 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
      $73 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i,$72)|0);
      if ($73) {
       HEAP32[$0>>2] = 0;
       $924 = 1;
       break;
      } else {
       $$pre$i$i$i = HEAP32[$0>>2]|0;
       $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
       $924 = $phitmp$i$i$i;
       break;
      }
     }
    } while(0);
    $74 = HEAP32[$1>>2]|0;
    $75 = ($74|0)==(0|0);
    do {
     if ($75) {
      label = 32;
     } else {
      $76 = ((($74)) + 12|0);
      $77 = HEAP32[$76>>2]|0;
      $78 = ((($74)) + 16|0);
      $79 = HEAP32[$78>>2]|0;
      $80 = ($77|0)==($79|0);
      if ($80) {
       $81 = HEAP32[$74>>2]|0;
       $82 = ((($81)) + 36|0);
       $83 = HEAP32[$82>>2]|0;
       __THREW__ = 0;
       $84 = (invoke_ii($83|0,($74|0))|0);
       $85 = __THREW__; __THREW__ = 0;
       $86 = $85&1;
       if ($86) {
        label = 36;
        break L24;
       } else {
        $$0$i$i2$i$i = $84;
       }
      } else {
       $87 = HEAP8[$77>>0]|0;
       $88 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($87)|0);
       $$0$i$i2$i$i = $88;
      }
      $89 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
      $90 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i,$89)|0);
      if ($90) {
       HEAP32[$1>>2] = 0;
       label = 32;
       break;
      } else {
       if ($924) {
        $925 = $74;
        break;
       } else {
        label = 261;
        break L24;
       }
      }
     }
    } while(0);
    if ((label|0) == 32) {
     label = 0;
     if ($924) {
      label = 261;
      break;
     } else {
      $925 = 0;
     }
    }
    $97 = (($16) + ($$0158)|0);
    $98 = HEAP8[$97>>0]|0;
    $99 = $98 << 24 >> 24;
    L49: do {
     switch ($99|0) {
     case 1:  {
      $cond166 = ($$0158|0)==(3);
      if ($cond166) {
       $$1150 = $$0149;
      } else {
       $100 = HEAP32[$0>>2]|0;
       $101 = ((($100)) + 12|0);
       $102 = HEAP32[$101>>2]|0;
       $103 = ((($100)) + 16|0);
       $104 = HEAP32[$103>>2]|0;
       $105 = ($102|0)==($104|0);
       if ($105) {
        $106 = HEAP32[$100>>2]|0;
        $107 = ((($106)) + 36|0);
        $108 = HEAP32[$107>>2]|0;
        __THREW__ = 0;
        $109 = (invoke_ii($108|0,($100|0))|0);
        $110 = __THREW__; __THREW__ = 0;
        $111 = $110&1;
        if ($111) {
         label = 36;
         break L24;
        } else {
         $$0$i$i181 = $109;
        }
       } else {
        $112 = HEAP8[$102>>0]|0;
        $113 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($112)|0);
        $$0$i$i181 = $113;
       }
       $114 = $$0$i$i181&255;
       $115 = ($114<<24>>24)>(-1);
       if (!($115)) {
        label = 50;
        break L24;
       }
       $sext413 = $$0$i$i181 << 24;
       $116 = $sext413 >> 24;
       $117 = HEAP32[$42>>2]|0;
       $118 = (($117) + ($116<<1)|0);
       $119 = HEAP16[$118>>1]|0;
       $120 = $119 & 8192;
       $121 = ($120<<16>>16)==(0);
       if ($121) {
        label = 50;
        break L24;
       }
       $122 = HEAP32[$0>>2]|0;
       $123 = ((($122)) + 12|0);
       $124 = HEAP32[$123>>2]|0;
       $125 = ((($122)) + 16|0);
       $126 = HEAP32[$125>>2]|0;
       $127 = ($124|0)==($126|0);
       if ($127) {
        $128 = HEAP32[$122>>2]|0;
        $129 = ((($128)) + 40|0);
        $130 = HEAP32[$129>>2]|0;
        __THREW__ = 0;
        $131 = (invoke_ii($130|0,($122|0))|0);
        $132 = __THREW__; __THREW__ = 0;
        $133 = $132&1;
        if ($133) {
         label = 36;
         break L24;
        } else {
         $$0$i$i183 = $131;
        }
       } else {
        $134 = ((($124)) + 1|0);
        HEAP32[$123>>2] = $134;
        $135 = HEAP8[$124>>0]|0;
        $136 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($135)|0);
        $$0$i$i183 = $136;
       }
       $137 = $$0$i$i183&255;
       __THREW__ = 0;
       invoke_vii(164,($23|0),($137|0));
       $138 = __THREW__; __THREW__ = 0;
       $139 = $138&1;
       if ($139) {
        label = 36;
        break L24;
       } else {
        label = 52;
       }
      }
      break;
     }
     case 0:  {
      $142 = ($$0158|0)==(3);
      if ($142) {
       $$1150 = $$0149;
      } else {
       label = 52;
      }
      break;
     }
     case 3:  {
      $217 = HEAP8[$43>>0]|0;
      $218 = ($217<<24>>24)<(0);
      $219 = HEAP32[$44>>2]|0;
      $220 = $217&255;
      $221 = $218 ? $219 : $220;
      $222 = HEAP8[$45>>0]|0;
      $223 = ($222<<24>>24)<(0);
      $224 = HEAP32[$46>>2]|0;
      $225 = $222&255;
      $226 = $223 ? $224 : $225;
      $227 = (0 - ($226))|0;
      $228 = ($221|0)==($227|0);
      if ($228) {
       $$1150 = $$0149;
      } else {
       $229 = ($221|0)==(0);
       if ($229) {
        $271 = HEAP32[$0>>2]|0;
        $272 = ((($271)) + 12|0);
        $273 = HEAP32[$272>>2]|0;
        $274 = ((($271)) + 16|0);
        $275 = HEAP32[$274>>2]|0;
        $276 = ($273|0)==($275|0);
        if ($276) {
         $277 = HEAP32[$271>>2]|0;
         $278 = ((($277)) + 36|0);
         $279 = HEAP32[$278>>2]|0;
         __THREW__ = 0;
         $280 = (invoke_ii($279|0,($271|0))|0);
         $281 = __THREW__; __THREW__ = 0;
         $282 = $281&1;
         if ($282) {
          label = 36;
          break L24;
         } else {
          $$0$i$i215 = $280;
         }
        } else {
         $283 = HEAP8[$273>>0]|0;
         $284 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($283)|0);
         $$0$i$i215 = $284;
        }
        $285 = $$0$i$i215&255;
        $286 = HEAP8[$45>>0]|0;
        $287 = ($286<<24>>24)<(0);
        $288 = HEAP32[$22>>2]|0;
        $289 = $287 ? $288 : $22;
        $290 = HEAP8[$289>>0]|0;
        $291 = ($290<<24>>24)==($285<<24>>24);
        if (!($291)) {
         $$1150 = $$0149;
         break L49;
        }
        $292 = HEAP32[$0>>2]|0;
        $293 = ((($292)) + 12|0);
        $294 = HEAP32[$293>>2]|0;
        $295 = ((($292)) + 16|0);
        $296 = HEAP32[$295>>2]|0;
        $297 = ($294|0)==($296|0);
        if ($297) {
         $298 = HEAP32[$292>>2]|0;
         $299 = ((($298)) + 40|0);
         $300 = HEAP32[$299>>2]|0;
         __THREW__ = 0;
         (invoke_ii($300|0,($292|0))|0);
         $301 = __THREW__; __THREW__ = 0;
         $302 = $301&1;
         if ($302) {
          label = 36;
          break L24;
         }
        } else {
         $303 = ((($294)) + 1|0);
         HEAP32[$293>>2] = $303;
         $304 = HEAP8[$294>>0]|0;
         (__ZNSt3__211char_traitsIcE11to_int_typeEc($304)|0);
        }
        HEAP8[$6>>0] = 1;
        $305 = HEAP8[$45>>0]|0;
        $306 = ($305<<24>>24)<(0);
        $307 = HEAP32[$46>>2]|0;
        $308 = $305&255;
        $309 = $306 ? $307 : $308;
        $310 = ($309>>>0)>(1);
        $spec$select159 = $310 ? $22 : $$0149;
        $$1150 = $spec$select159;
        break L49;
       }
       $230 = ($226|0)==(0);
       $231 = HEAP32[$0>>2]|0;
       $232 = ((($231)) + 12|0);
       $233 = HEAP32[$232>>2]|0;
       $234 = ((($231)) + 16|0);
       $235 = HEAP32[$234>>2]|0;
       $236 = ($233|0)==($235|0);
       if ($230) {
        if ($236) {
         $237 = HEAP32[$231>>2]|0;
         $238 = ((($237)) + 36|0);
         $239 = HEAP32[$238>>2]|0;
         __THREW__ = 0;
         $240 = (invoke_ii($239|0,($231|0))|0);
         $241 = __THREW__; __THREW__ = 0;
         $242 = $241&1;
         if ($242) {
          label = 36;
          break L24;
         } else {
          $$0$i$i210 = $240;
         }
        } else {
         $243 = HEAP8[$233>>0]|0;
         $244 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($243)|0);
         $$0$i$i210 = $244;
        }
        $245 = $$0$i$i210&255;
        $246 = HEAP8[$43>>0]|0;
        $247 = ($246<<24>>24)<(0);
        $248 = HEAP32[$21>>2]|0;
        $249 = $247 ? $248 : $21;
        $250 = HEAP8[$249>>0]|0;
        $251 = ($250<<24>>24)==($245<<24>>24);
        if (!($251)) {
         HEAP8[$6>>0] = 1;
         $$1150 = $$0149;
         break L49;
        }
        $252 = HEAP32[$0>>2]|0;
        $253 = ((($252)) + 12|0);
        $254 = HEAP32[$253>>2]|0;
        $255 = ((($252)) + 16|0);
        $256 = HEAP32[$255>>2]|0;
        $257 = ($254|0)==($256|0);
        if ($257) {
         $258 = HEAP32[$252>>2]|0;
         $259 = ((($258)) + 40|0);
         $260 = HEAP32[$259>>2]|0;
         __THREW__ = 0;
         (invoke_ii($260|0,($252|0))|0);
         $261 = __THREW__; __THREW__ = 0;
         $262 = $261&1;
         if ($262) {
          label = 36;
          break L24;
         }
        } else {
         $263 = ((($254)) + 1|0);
         HEAP32[$253>>2] = $263;
         $264 = HEAP8[$254>>0]|0;
         (__ZNSt3__211char_traitsIcE11to_int_typeEc($264)|0);
        }
        $265 = HEAP8[$43>>0]|0;
        $266 = ($265<<24>>24)<(0);
        $267 = HEAP32[$44>>2]|0;
        $268 = $265&255;
        $269 = $266 ? $267 : $268;
        $270 = ($269>>>0)>(1);
        $spec$select = $270 ? $21 : $$0149;
        $$1150 = $spec$select;
        break L49;
       }
       if ($236) {
        $311 = HEAP32[$231>>2]|0;
        $312 = ((($311)) + 36|0);
        $313 = HEAP32[$312>>2]|0;
        __THREW__ = 0;
        $314 = (invoke_ii($313|0,($231|0))|0);
        $315 = __THREW__; __THREW__ = 0;
        $316 = $315&1;
        if ($316) {
         label = 36;
         break L24;
        } else {
         $$0$i$i222 = $314;
        }
       } else {
        $317 = HEAP8[$233>>0]|0;
        $318 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($317)|0);
        $$0$i$i222 = $318;
       }
       $319 = $$0$i$i222&255;
       $320 = HEAP8[$43>>0]|0;
       $321 = ($320<<24>>24)<(0);
       $322 = HEAP32[$21>>2]|0;
       $323 = $321 ? $322 : $21;
       $324 = HEAP8[$323>>0]|0;
       $325 = ($324<<24>>24)==($319<<24>>24);
       $326 = HEAP32[$0>>2]|0;
       $327 = ((($326)) + 12|0);
       $328 = HEAP32[$327>>2]|0;
       $329 = ((($326)) + 16|0);
       $330 = HEAP32[$329>>2]|0;
       $331 = ($328|0)==($330|0);
       if ($325) {
        if ($331) {
         $332 = HEAP32[$326>>2]|0;
         $333 = ((($332)) + 40|0);
         $334 = HEAP32[$333>>2]|0;
         __THREW__ = 0;
         (invoke_ii($334|0,($326|0))|0);
         $335 = __THREW__; __THREW__ = 0;
         $336 = $335&1;
         if ($336) {
          label = 36;
          break L24;
         }
        } else {
         $337 = ((($328)) + 1|0);
         HEAP32[$327>>2] = $337;
         $338 = HEAP8[$328>>0]|0;
         (__ZNSt3__211char_traitsIcE11to_int_typeEc($338)|0);
        }
        $339 = HEAP8[$43>>0]|0;
        $340 = ($339<<24>>24)<(0);
        $341 = HEAP32[$44>>2]|0;
        $342 = $339&255;
        $343 = $340 ? $341 : $342;
        $344 = ($343>>>0)>(1);
        $spec$select160 = $344 ? $21 : $$0149;
        $$1150 = $spec$select160;
        break L49;
       }
       if ($331) {
        $345 = HEAP32[$326>>2]|0;
        $346 = ((($345)) + 36|0);
        $347 = HEAP32[$346>>2]|0;
        __THREW__ = 0;
        $348 = (invoke_ii($347|0,($326|0))|0);
        $349 = __THREW__; __THREW__ = 0;
        $350 = $349&1;
        if ($350) {
         label = 36;
         break L24;
        } else {
         $$0$i$i229 = $348;
        }
       } else {
        $351 = HEAP8[$328>>0]|0;
        $352 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($351)|0);
        $$0$i$i229 = $352;
       }
       $353 = $$0$i$i229&255;
       $354 = HEAP8[$45>>0]|0;
       $355 = ($354<<24>>24)<(0);
       $356 = HEAP32[$22>>2]|0;
       $357 = $355 ? $356 : $22;
       $358 = HEAP8[$357>>0]|0;
       $359 = ($358<<24>>24)==($353<<24>>24);
       if (!($359)) {
        label = 113;
        break L24;
       }
       $360 = HEAP32[$0>>2]|0;
       $361 = ((($360)) + 12|0);
       $362 = HEAP32[$361>>2]|0;
       $363 = ((($360)) + 16|0);
       $364 = HEAP32[$363>>2]|0;
       $365 = ($362|0)==($364|0);
       if ($365) {
        $366 = HEAP32[$360>>2]|0;
        $367 = ((($366)) + 40|0);
        $368 = HEAP32[$367>>2]|0;
        __THREW__ = 0;
        (invoke_ii($368|0,($360|0))|0);
        $369 = __THREW__; __THREW__ = 0;
        $370 = $369&1;
        if ($370) {
         label = 36;
         break L24;
        }
       } else {
        $371 = ((($362)) + 1|0);
        HEAP32[$361>>2] = $371;
        $372 = HEAP8[$362>>0]|0;
        (__ZNSt3__211char_traitsIcE11to_int_typeEc($372)|0);
       }
       HEAP8[$6>>0] = 1;
       $373 = HEAP8[$45>>0]|0;
       $374 = ($373<<24>>24)<(0);
       $375 = HEAP32[$46>>2]|0;
       $376 = $373&255;
       $377 = $374 ? $375 : $376;
       $378 = ($377>>>0)>(1);
       $spec$select161 = $378 ? $22 : $$0149;
       $$1150 = $spec$select161;
      }
      break;
     }
     case 2:  {
      $381 = ($$0149|0)!=(0|0);
      $382 = ($$0158>>>0)<(2);
      $or$cond = $382 | $381;
      if ($or$cond) {
       $392 = HEAP8[$51>>0]|0;
       $393 = ($392<<24>>24)<(0);
       $394 = HEAP32[$20>>2]|0;
       $395 = $393 ? $394 : $20;
       $396 = $395;
       $397 = ($$0158|0)==(0);
       if ($397) {
        $$sroa$0374$1 = $396;$930 = $394;$931 = $392;
       } else {
        $403 = $392;$405 = $393;$407 = $395;$421 = $396;$929 = $394;
        label = 118;
       }
      } else {
       $383 = ($$0158|0)==(2);
       $384 = HEAP8[$52>>0]|0;
       $385 = ($384<<24>>24)!=(0);
       $386 = $383 & $385;
       $brmerge = $50 | $386;
       if (!($brmerge)) {
        $$1150 = 0;
        break L49;
       }
       $387 = HEAP8[$51>>0]|0;
       $388 = ($387<<24>>24)<(0);
       $389 = HEAP32[$20>>2]|0;
       $390 = $388 ? $389 : $20;
       $391 = $390;
       $403 = $387;$405 = $388;$407 = $390;$421 = $391;$929 = $389;
       label = 118;
      }
      L116: do {
       if ((label|0) == 118) {
        label = 0;
        $398 = (($$0158) + -1)|0;
        $399 = (($16) + ($398)|0);
        $400 = HEAP8[$399>>0]|0;
        $switch = ($400&255)<(2);
        if ($switch) {
         $401 = HEAP32[$53>>2]|0;
         $402 = $403&255;
         $404 = $405 ? $401 : $402;
         $406 = (($407) + ($404)|0);
         $$sroa$0374$0 = $421;
         while(1) {
          $408 = $$sroa$0374$0;
          $409 = ($406|0)==($408|0);
          if ($409) {
           break;
          }
          $410 = HEAP8[$408>>0]|0;
          $411 = ($410<<24>>24)>(-1);
          if (!($411)) {
           break;
          }
          $412 = $410 << 24 >> 24;
          $413 = HEAP32[$42>>2]|0;
          $414 = (($413) + ($412<<1)|0);
          $415 = HEAP16[$414>>1]|0;
          $416 = $415 & 8192;
          $417 = ($416<<16>>16)==(0);
          if ($417) {
           break;
          }
          $418 = ((($408)) + 1|0);
          $419 = $418;
          $$sroa$0374$0 = $419;
         }
         $420 = (($$sroa$0374$0) - ($421))|0;
         $422 = HEAP8[$54>>0]|0;
         $423 = ($422<<24>>24)<(0);
         $424 = HEAP32[$55>>2]|0;
         $425 = $422&255;
         $426 = $423 ? $424 : $425;
         $427 = ($420>>>0)>($426>>>0);
         if ($427) {
          $$sroa$0374$1 = $421;$930 = $929;$931 = $403;
         } else {
          $428 = HEAP32[$23>>2]|0;
          $429 = (($428) + ($424)|0);
          $430 = (0 - ($420))|0;
          $431 = (($429) + ($430)|0);
          $432 = (($23) + ($425)|0);
          $433 = (0 - ($420))|0;
          $434 = (($432) + ($433)|0);
          $$pre$phiZ2D = $423 ? $429 : $432;
          $435 = $423 ? $431 : $434;
          $$sroa$08$0$ptr$i = $407;$437 = $435;
          while(1) {
           $436 = ($437|0)==($$pre$phiZ2D|0);
           if ($436) {
            $$sroa$0374$1 = $$sroa$0374$0;$930 = $929;$931 = $403;
            break L116;
           }
           $438 = HEAP8[$437>>0]|0;
           $439 = HEAP8[$$sroa$08$0$ptr$i>>0]|0;
           $440 = ($438<<24>>24)==($439<<24>>24);
           if (!($440)) {
            $$sroa$0374$1 = $421;$930 = $929;$931 = $403;
            break L116;
           }
           $441 = ((($437)) + 1|0);
           $442 = ((($$sroa$08$0$ptr$i)) + 1|0);
           $$sroa$08$0$ptr$i = $442;$437 = $441;
          }
         }
        } else {
         $$sroa$0374$1 = $421;$930 = $929;$931 = $403;
        }
       }
      } while(0);
      $$sroa$0374$1$ptr = $$sroa$0374$1;
      $$sroa$0353$0$ptr = $$sroa$0374$1$ptr;$444 = $931;$448 = $930;$470 = $925;
      L131: while(1) {
       $443 = ($444<<24>>24)<(0);
       $445 = HEAP32[$53>>2]|0;
       $446 = $444&255;
       $447 = $443 ? $448 : $20;
       $449 = $443 ? $445 : $446;
       $450 = (($447) + ($449)|0);
       $451 = ($$sroa$0353$0$ptr|0)==($450|0);
       if ($451) {
        break;
       }
       $452 = HEAP32[$0>>2]|0;
       $453 = ($452|0)==(0|0);
       do {
        if ($453) {
         $932 = 1;
        } else {
         $454 = ((($452)) + 12|0);
         $455 = HEAP32[$454>>2]|0;
         $456 = ((($452)) + 16|0);
         $457 = HEAP32[$456>>2]|0;
         $458 = ($455|0)==($457|0);
         if ($458) {
          $459 = HEAP32[$452>>2]|0;
          $460 = ((($459)) + 36|0);
          $461 = HEAP32[$460>>2]|0;
          __THREW__ = 0;
          $462 = (invoke_ii($461|0,($452|0))|0);
          $463 = __THREW__; __THREW__ = 0;
          $464 = $463&1;
          if ($464) {
           label = 154;
           break L24;
          } else {
           $$0$i$i$i$i250 = $462;
          }
         } else {
          $465 = HEAP8[$455>>0]|0;
          $466 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($465)|0);
          $$0$i$i$i$i250 = $466;
         }
         $467 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
         $468 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i250,$467)|0);
         if ($468) {
          HEAP32[$0>>2] = 0;
          $932 = 1;
          break;
         } else {
          $$pre$i$i$i252 = HEAP32[$0>>2]|0;
          $phitmp$i$i$i253 = ($$pre$i$i$i252|0)==(0|0);
          $932 = $phitmp$i$i$i253;
          break;
         }
        }
       } while(0);
       $469 = ($470|0)==(0|0);
       do {
        if ($469) {
         label = 144;
        } else {
         $471 = ((($470)) + 12|0);
         $472 = HEAP32[$471>>2]|0;
         $473 = ((($470)) + 16|0);
         $474 = HEAP32[$473>>2]|0;
         $475 = ($472|0)==($474|0);
         if ($475) {
          $476 = HEAP32[$470>>2]|0;
          $477 = ((($476)) + 36|0);
          $478 = HEAP32[$477>>2]|0;
          __THREW__ = 0;
          $479 = (invoke_ii($478|0,($470|0))|0);
          $480 = __THREW__; __THREW__ = 0;
          $481 = $480&1;
          if ($481) {
           label = 154;
           break L24;
          } else {
           $$0$i$i2$i$i256 = $479;
          }
         } else {
          $482 = HEAP8[$472>>0]|0;
          $483 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($482)|0);
          $$0$i$i2$i$i256 = $483;
         }
         $484 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
         $485 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i256,$484)|0);
         if ($485) {
          HEAP32[$1>>2] = 0;
          label = 144;
          break;
         } else {
          if ($932) {
           $933 = $470;
           break;
          } else {
           break L131;
          }
         }
        }
       } while(0);
       if ((label|0) == 144) {
        label = 0;
        if ($932) {
         break;
        } else {
         $933 = 0;
        }
       }
       $486 = HEAP32[$0>>2]|0;
       $487 = ((($486)) + 12|0);
       $488 = HEAP32[$487>>2]|0;
       $489 = ((($486)) + 16|0);
       $490 = HEAP32[$489>>2]|0;
       $491 = ($488|0)==($490|0);
       if ($491) {
        $492 = HEAP32[$486>>2]|0;
        $493 = ((($492)) + 36|0);
        $494 = HEAP32[$493>>2]|0;
        __THREW__ = 0;
        $495 = (invoke_ii($494|0,($486|0))|0);
        $496 = __THREW__; __THREW__ = 0;
        $497 = $496&1;
        if ($497) {
         label = 154;
         break L24;
        } else {
         $$0$i$i264 = $495;
        }
       } else {
        $498 = HEAP8[$488>>0]|0;
        $499 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($498)|0);
        $$0$i$i264 = $499;
       }
       $500 = $$0$i$i264&255;
       $501 = HEAP8[$$sroa$0353$0$ptr>>0]|0;
       $502 = ($501<<24>>24)==($500<<24>>24);
       if (!($502)) {
        break;
       }
       $503 = HEAP32[$0>>2]|0;
       $504 = ((($503)) + 12|0);
       $505 = HEAP32[$504>>2]|0;
       $506 = ((($503)) + 16|0);
       $507 = HEAP32[$506>>2]|0;
       $508 = ($505|0)==($507|0);
       if ($508) {
        $509 = HEAP32[$503>>2]|0;
        $510 = ((($509)) + 40|0);
        $511 = HEAP32[$510>>2]|0;
        __THREW__ = 0;
        (invoke_ii($511|0,($503|0))|0);
        $512 = __THREW__; __THREW__ = 0;
        $513 = $512&1;
        if ($513) {
         label = 155;
         break L24;
        }
       } else {
        $514 = ((($505)) + 1|0);
        HEAP32[$504>>2] = $514;
        $515 = HEAP8[$505>>0]|0;
        (__ZNSt3__211char_traitsIcE11to_int_typeEc($515)|0);
       }
       $516 = ((($$sroa$0353$0$ptr)) + 1|0);
       $$pre464 = HEAP8[$51>>0]|0;
       $$pre465 = HEAP32[$20>>2]|0;
       $$sroa$0353$0$ptr = $516;$444 = $$pre464;$448 = $$pre465;$470 = $933;
      }
      if ($50) {
       $521 = HEAP8[$51>>0]|0;
       $522 = ($521<<24>>24)<(0);
       $523 = HEAP32[$20>>2]|0;
       $524 = HEAP32[$53>>2]|0;
       $525 = $521&255;
       $526 = $522 ? $523 : $20;
       $527 = $522 ? $524 : $525;
       $528 = (($526) + ($527)|0);
       $529 = ($$sroa$0353$0$ptr|0)==($528|0);
       if ($529) {
        $$1150 = $$0149;
       } else {
        label = 158;
        break L24;
       }
      } else {
       $$1150 = $$0149;
      }
      break;
     }
     case 4:  {
      $$0132 = 0;$550 = $925;$926 = $925;
      L168: while(1) {
       $532 = HEAP32[$0>>2]|0;
       $533 = ($532|0)==(0|0);
       do {
        if ($533) {
         $934 = 1;
        } else {
         $534 = ((($532)) + 12|0);
         $535 = HEAP32[$534>>2]|0;
         $536 = ((($532)) + 16|0);
         $537 = HEAP32[$536>>2]|0;
         $538 = ($535|0)==($537|0);
         if ($538) {
          $539 = HEAP32[$532>>2]|0;
          $540 = ((($539)) + 36|0);
          $541 = HEAP32[$540>>2]|0;
          __THREW__ = 0;
          $542 = (invoke_ii($541|0,($532|0))|0);
          $543 = __THREW__; __THREW__ = 0;
          $544 = $543&1;
          if ($544) {
           label = 183;
           break L24;
          } else {
           $$0$i$i$i$i270 = $542;
          }
         } else {
          $545 = HEAP8[$535>>0]|0;
          $546 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($545)|0);
          $$0$i$i$i$i270 = $546;
         }
         $547 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
         $548 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i270,$547)|0);
         if ($548) {
          HEAP32[$0>>2] = 0;
          $934 = 1;
          break;
         } else {
          $$pre$i$i$i272 = HEAP32[$0>>2]|0;
          $phitmp$i$i$i273 = ($$pre$i$i$i272|0)==(0|0);
          $934 = $phitmp$i$i$i273;
          break;
         }
        }
       } while(0);
       $549 = ($550|0)==(0|0);
       do {
        if ($549) {
         $935 = $926;
         label = 172;
        } else {
         $551 = ((($550)) + 12|0);
         $552 = HEAP32[$551>>2]|0;
         $553 = ((($550)) + 16|0);
         $554 = HEAP32[$553>>2]|0;
         $555 = ($552|0)==($554|0);
         if ($555) {
          $556 = HEAP32[$550>>2]|0;
          $557 = ((($556)) + 36|0);
          $558 = HEAP32[$557>>2]|0;
          __THREW__ = 0;
          $559 = (invoke_ii($558|0,($550|0))|0);
          $560 = __THREW__; __THREW__ = 0;
          $561 = $560&1;
          if ($561) {
           label = 183;
           break L24;
          } else {
           $$0$i$i2$i$i276 = $559;
          }
         } else {
          $562 = HEAP8[$552>>0]|0;
          $563 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($562)|0);
          $$0$i$i2$i$i276 = $563;
         }
         $564 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
         $565 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i276,$564)|0);
         if ($565) {
          HEAP32[$1>>2] = 0;
          $935 = 0;
          label = 172;
          break;
         } else {
          if ($934) {
           $936 = $926;$937 = $550;
           break;
          } else {
           $663 = $926;
           break L168;
          }
         }
        }
       } while(0);
       if ((label|0) == 172) {
        label = 0;
        if ($934) {
         $663 = $935;
         break;
        } else {
         $936 = $935;$937 = 0;
        }
       }
       $566 = HEAP32[$0>>2]|0;
       $567 = ((($566)) + 12|0);
       $568 = HEAP32[$567>>2]|0;
       $569 = ((($566)) + 16|0);
       $570 = HEAP32[$569>>2]|0;
       $571 = ($568|0)==($570|0);
       if ($571) {
        $572 = HEAP32[$566>>2]|0;
        $573 = ((($572)) + 36|0);
        $574 = HEAP32[$573>>2]|0;
        __THREW__ = 0;
        $575 = (invoke_ii($574|0,($566|0))|0);
        $576 = __THREW__; __THREW__ = 0;
        $577 = $576&1;
        if ($577) {
         label = 186;
         break L24;
        } else {
         $$0$i$i284 = $575;
        }
       } else {
        $578 = HEAP8[$568>>0]|0;
        $579 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($578)|0);
        $$0$i$i284 = $579;
       }
       $580 = $$0$i$i284&255;
       $581 = ($580<<24>>24)>(-1);
       if ($581) {
        $sext411 = $$0$i$i284 << 24;
        $582 = $sext411 >> 24;
        $583 = HEAP32[$42>>2]|0;
        $584 = (($583) + ($582<<1)|0);
        $585 = HEAP16[$584>>1]|0;
        $586 = $585 & 2048;
        $587 = ($586<<16>>16)==(0);
        if ($587) {
         label = 188;
        } else {
         $588 = HEAP32[$9>>2]|0;
         $589 = HEAP32[$11>>2]|0;
         $590 = ($588|0)==($589|0);
         if ($590) {
          __THREW__ = 0;
          invoke_viii(32,($8|0),($9|0),($11|0));
          $591 = __THREW__; __THREW__ = 0;
          $592 = $591&1;
          if ($592) {
           label = 186;
           break L24;
          }
          $$pre = HEAP32[$9>>2]|0;
          $602 = $$pre;
         } else {
          $602 = $588;
         }
         $601 = ((($602)) + 1|0);
         HEAP32[$9>>2] = $601;
         HEAP8[$602>>0] = $580;
         $603 = (($$0132) + 1)|0;
         $$2134$ph = $603;
        }
       } else {
        label = 188;
       }
       if ((label|0) == 188) {
        label = 0;
        $604 = HEAP8[$47>>0]|0;
        $605 = ($604<<24>>24)<(0);
        $606 = HEAP32[$48>>2]|0;
        $607 = $604&255;
        $608 = $605 ? $606 : $607;
        $609 = ($608|0)!=(0);
        $610 = ($$0132|0)!=(0);
        $or$cond13 = $610 & $609;
        $611 = HEAP8[$18>>0]|0;
        $612 = ($611<<24>>24)==($580<<24>>24);
        $or$cond163 = $612 & $or$cond13;
        if (!($or$cond163)) {
         $663 = $936;
         break;
        }
        $613 = HEAP32[$14>>2]|0;
        $614 = HEAP32[$15>>2]|0;
        $615 = ($613|0)==($614|0);
        if ($615) {
         __THREW__ = 0;
         invoke_viii(33,($13|0),($14|0),($15|0));
         $616 = __THREW__; __THREW__ = 0;
         $617 = $616&1;
         if ($617) {
          label = 186;
          break L24;
         }
         $$pre461 = HEAP32[$14>>2]|0;
         $619 = $$pre461;
        } else {
         $619 = $613;
        }
        $618 = ((($619)) + 4|0);
        HEAP32[$14>>2] = $618;
        HEAP32[$619>>2] = $$0132;
        $$2134$ph = 0;
       }
       $620 = HEAP32[$0>>2]|0;
       $621 = ((($620)) + 12|0);
       $622 = HEAP32[$621>>2]|0;
       $623 = ((($620)) + 16|0);
       $624 = HEAP32[$623>>2]|0;
       $625 = ($622|0)==($624|0);
       if ($625) {
        $626 = HEAP32[$620>>2]|0;
        $627 = ((($626)) + 40|0);
        $628 = HEAP32[$627>>2]|0;
        __THREW__ = 0;
        (invoke_ii($628|0,($620|0))|0);
        $629 = __THREW__; __THREW__ = 0;
        $630 = $629&1;
        if ($630) {
         label = 183;
         break L24;
        }
       } else {
        $631 = ((($622)) + 1|0);
        HEAP32[$621>>2] = $631;
        $632 = HEAP8[$622>>0]|0;
        (__ZNSt3__211char_traitsIcE11to_int_typeEc($632)|0);
       }
       $$0132 = $$2134$ph;$550 = $937;$926 = $936;
      }
      $633 = HEAP32[$13>>2]|0;
      $634 = HEAP32[$14>>2]|0;
      $635 = ($633|0)!=($634|0);
      $636 = ($$0132|0)!=(0);
      $or$cond15 = $636 & $635;
      if ($or$cond15) {
       $637 = HEAP32[$15>>2]|0;
       $638 = ($634|0)==($637|0);
       if ($638) {
        __THREW__ = 0;
        invoke_viii(33,($13|0),($14|0),($15|0));
        $639 = __THREW__; __THREW__ = 0;
        $640 = $639&1;
        if ($640) {
         label = 184;
         break L24;
        }
        $$pre463 = HEAP32[$14>>2]|0;
        $642 = $$pre463;
       } else {
        $642 = $634;
       }
       $641 = ((($642)) + 4|0);
       HEAP32[$14>>2] = $641;
       HEAP32[$642>>2] = $$0132;
      }
      $643 = HEAP32[$24>>2]|0;
      $644 = ($643|0)>(0);
      L223: do {
       if ($644) {
        $645 = HEAP32[$0>>2]|0;
        $646 = ($645|0)==(0|0);
        do {
         if ($646) {
          $938 = 1;
         } else {
          $647 = ((($645)) + 12|0);
          $648 = HEAP32[$647>>2]|0;
          $649 = ((($645)) + 16|0);
          $650 = HEAP32[$649>>2]|0;
          $651 = ($648|0)==($650|0);
          if ($651) {
           $652 = HEAP32[$645>>2]|0;
           $653 = ((($652)) + 36|0);
           $654 = HEAP32[$653>>2]|0;
           __THREW__ = 0;
           $655 = (invoke_ii($654|0,($645|0))|0);
           $656 = __THREW__; __THREW__ = 0;
           $657 = $656&1;
           if ($657) {
            label = 184;
            break L24;
           } else {
            $$0$i$i$i$i291 = $655;
           }
          } else {
           $658 = HEAP8[$648>>0]|0;
           $659 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($658)|0);
           $$0$i$i$i$i291 = $659;
          }
          $660 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
          $661 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i291,$660)|0);
          if ($661) {
           HEAP32[$0>>2] = 0;
           $938 = 1;
           break;
          } else {
           $$pre$i$i$i293 = HEAP32[$0>>2]|0;
           $phitmp$i$i$i294 = ($$pre$i$i$i293|0)==(0|0);
           $938 = $phitmp$i$i$i294;
           break;
          }
         }
        } while(0);
        $662 = ($663|0)==(0|0);
        do {
         if ($662) {
          label = 216;
         } else {
          $664 = ((($663)) + 12|0);
          $665 = HEAP32[$664>>2]|0;
          $666 = ((($663)) + 16|0);
          $667 = HEAP32[$666>>2]|0;
          $668 = ($665|0)==($667|0);
          if ($668) {
           $669 = HEAP32[$663>>2]|0;
           $670 = ((($669)) + 36|0);
           $671 = HEAP32[$670>>2]|0;
           __THREW__ = 0;
           $672 = (invoke_ii($671|0,($663|0))|0);
           $673 = __THREW__; __THREW__ = 0;
           $674 = $673&1;
           if ($674) {
            label = 184;
            break L24;
           } else {
            $$0$i$i2$i$i297 = $672;
           }
          } else {
           $675 = HEAP8[$665>>0]|0;
           $676 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($675)|0);
           $$0$i$i2$i$i297 = $676;
          }
          $677 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
          $678 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i297,$677)|0);
          if ($678) {
           HEAP32[$1>>2] = 0;
           label = 216;
           break;
          } else {
           if ($938) {
            $939 = $663;
            break;
           } else {
            label = 222;
            break L24;
           }
          }
         }
        } while(0);
        if ((label|0) == 216) {
         label = 0;
         if ($938) {
          label = 222;
          break L24;
         } else {
          $939 = 0;
         }
        }
        $679 = HEAP32[$0>>2]|0;
        $680 = ((($679)) + 12|0);
        $681 = HEAP32[$680>>2]|0;
        $682 = ((($679)) + 16|0);
        $683 = HEAP32[$682>>2]|0;
        $684 = ($681|0)==($683|0);
        if ($684) {
         $685 = HEAP32[$679>>2]|0;
         $686 = ((($685)) + 36|0);
         $687 = HEAP32[$686>>2]|0;
         __THREW__ = 0;
         $688 = (invoke_ii($687|0,($679|0))|0);
         $689 = __THREW__; __THREW__ = 0;
         $690 = $689&1;
         if ($690) {
          label = 184;
          break L24;
         } else {
          $$0$i$i304 = $688;
         }
        } else {
         $691 = HEAP8[$681>>0]|0;
         $692 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($691)|0);
         $$0$i$i304 = $692;
        }
        $693 = $$0$i$i304&255;
        $694 = HEAP8[$17>>0]|0;
        $695 = ($694<<24>>24)==($693<<24>>24);
        if (!($695)) {
         label = 222;
         break L24;
        }
        $698 = HEAP32[$0>>2]|0;
        $699 = ((($698)) + 12|0);
        $700 = HEAP32[$699>>2]|0;
        $701 = ((($698)) + 16|0);
        $702 = HEAP32[$701>>2]|0;
        $703 = ($700|0)==($702|0);
        if ($703) {
         $704 = HEAP32[$698>>2]|0;
         $705 = ((($704)) + 40|0);
         $706 = HEAP32[$705>>2]|0;
         __THREW__ = 0;
         (invoke_ii($706|0,($698|0))|0);
         $707 = __THREW__; __THREW__ = 0;
         $708 = $707&1;
         if ($708) {
          label = 184;
          break L24;
         }
        } else {
         $709 = ((($700)) + 1|0);
         HEAP32[$699>>2] = $709;
         $710 = HEAP8[$700>>0]|0;
         (__ZNSt3__211char_traitsIcE11to_int_typeEc($710)|0);
        }
        $731 = $939;
        while(1) {
         $711 = HEAP32[$24>>2]|0;
         $712 = ($711|0)>(0);
         if (!($712)) {
          break L223;
         }
         $713 = HEAP32[$0>>2]|0;
         $714 = ($713|0)==(0|0);
         do {
          if ($714) {
           $940 = 1;
          } else {
           $715 = ((($713)) + 12|0);
           $716 = HEAP32[$715>>2]|0;
           $717 = ((($713)) + 16|0);
           $718 = HEAP32[$717>>2]|0;
           $719 = ($716|0)==($718|0);
           if ($719) {
            $720 = HEAP32[$713>>2]|0;
            $721 = ((($720)) + 36|0);
            $722 = HEAP32[$721>>2]|0;
            __THREW__ = 0;
            $723 = (invoke_ii($722|0,($713|0))|0);
            $724 = __THREW__; __THREW__ = 0;
            $725 = $724&1;
            if ($725) {
             label = 182;
             break L24;
            } else {
             $$0$i$i$i$i309 = $723;
            }
           } else {
            $726 = HEAP8[$716>>0]|0;
            $727 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($726)|0);
            $$0$i$i$i$i309 = $727;
           }
           $728 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
           $729 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i309,$728)|0);
           if ($729) {
            HEAP32[$0>>2] = 0;
            $940 = 1;
            break;
           } else {
            $$pre$i$i$i311 = HEAP32[$0>>2]|0;
            $phitmp$i$i$i312 = ($$pre$i$i$i311|0)==(0|0);
            $940 = $phitmp$i$i$i312;
            break;
           }
          }
         } while(0);
         $730 = ($731|0)==(0|0);
         do {
          if ($730) {
           label = 241;
          } else {
           $732 = ((($731)) + 12|0);
           $733 = HEAP32[$732>>2]|0;
           $734 = ((($731)) + 16|0);
           $735 = HEAP32[$734>>2]|0;
           $736 = ($733|0)==($735|0);
           if ($736) {
            $737 = HEAP32[$731>>2]|0;
            $738 = ((($737)) + 36|0);
            $739 = HEAP32[$738>>2]|0;
            __THREW__ = 0;
            $740 = (invoke_ii($739|0,($731|0))|0);
            $741 = __THREW__; __THREW__ = 0;
            $742 = $741&1;
            if ($742) {
             label = 182;
             break L24;
            } else {
             $$0$i$i2$i$i315 = $740;
            }
           } else {
            $743 = HEAP8[$733>>0]|0;
            $744 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($743)|0);
            $$0$i$i2$i$i315 = $744;
           }
           $745 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
           $746 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i315,$745)|0);
           if ($746) {
            HEAP32[$1>>2] = 0;
            label = 241;
            break;
           } else {
            if ($940) {
             $941 = $731;
             break;
            } else {
             label = 248;
             break L24;
            }
           }
          }
         } while(0);
         if ((label|0) == 241) {
          label = 0;
          if ($940) {
           label = 248;
           break L24;
          } else {
           $941 = 0;
          }
         }
         $747 = HEAP32[$0>>2]|0;
         $748 = ((($747)) + 12|0);
         $749 = HEAP32[$748>>2]|0;
         $750 = ((($747)) + 16|0);
         $751 = HEAP32[$750>>2]|0;
         $752 = ($749|0)==($751|0);
         if ($752) {
          $753 = HEAP32[$747>>2]|0;
          $754 = ((($753)) + 36|0);
          $755 = HEAP32[$754>>2]|0;
          __THREW__ = 0;
          $756 = (invoke_ii($755|0,($747|0))|0);
          $757 = __THREW__; __THREW__ = 0;
          $758 = $757&1;
          if ($758) {
           label = 182;
           break L24;
          } else {
           $$0$i$i323 = $756;
          }
         } else {
          $759 = HEAP8[$749>>0]|0;
          $760 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($759)|0);
          $$0$i$i323 = $760;
         }
         $761 = $$0$i$i323&255;
         $762 = ($761<<24>>24)>(-1);
         if (!($762)) {
          label = 248;
          break L24;
         }
         $sext = $$0$i$i323 << 24;
         $763 = $sext >> 24;
         $764 = HEAP32[$42>>2]|0;
         $765 = (($764) + ($763<<1)|0);
         $766 = HEAP16[$765>>1]|0;
         $767 = $766 & 2048;
         $768 = ($767<<16>>16)==(0);
         if ($768) {
          label = 248;
          break L24;
         }
         $771 = HEAP32[$9>>2]|0;
         $772 = HEAP32[$11>>2]|0;
         $773 = ($771|0)==($772|0);
         if ($773) {
          __THREW__ = 0;
          invoke_viii(32,($8|0),($9|0),($11|0));
          $774 = __THREW__; __THREW__ = 0;
          $775 = $774&1;
          if ($775) {
           label = 182;
           break L24;
          }
         }
         $776 = HEAP32[$0>>2]|0;
         $777 = ((($776)) + 12|0);
         $778 = HEAP32[$777>>2]|0;
         $779 = ((($776)) + 16|0);
         $780 = HEAP32[$779>>2]|0;
         $781 = ($778|0)==($780|0);
         if ($781) {
          $782 = HEAP32[$776>>2]|0;
          $783 = ((($782)) + 36|0);
          $784 = HEAP32[$783>>2]|0;
          __THREW__ = 0;
          $785 = (invoke_ii($784|0,($776|0))|0);
          $786 = __THREW__; __THREW__ = 0;
          $787 = $786&1;
          if ($787) {
           label = 182;
           break L24;
          } else {
           $$0$i$i327 = $785;
          }
         } else {
          $788 = HEAP8[$778>>0]|0;
          $789 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($788)|0);
          $$0$i$i327 = $789;
         }
         $790 = $$0$i$i327&255;
         $791 = HEAP32[$9>>2]|0;
         $792 = ((($791)) + 1|0);
         HEAP32[$9>>2] = $792;
         HEAP8[$791>>0] = $790;
         $793 = HEAP32[$24>>2]|0;
         $794 = (($793) + -1)|0;
         HEAP32[$24>>2] = $794;
         $795 = HEAP32[$0>>2]|0;
         $796 = ((($795)) + 12|0);
         $797 = HEAP32[$796>>2]|0;
         $798 = ((($795)) + 16|0);
         $799 = HEAP32[$798>>2]|0;
         $800 = ($797|0)==($799|0);
         if ($800) {
          $801 = HEAP32[$795>>2]|0;
          $802 = ((($801)) + 40|0);
          $803 = HEAP32[$802>>2]|0;
          __THREW__ = 0;
          (invoke_ii($803|0,($795|0))|0);
          $804 = __THREW__; __THREW__ = 0;
          $805 = $804&1;
          if ($805) {
           label = 182;
           break L24;
          }
         } else {
          $806 = ((($797)) + 1|0);
          HEAP32[$796>>2] = $806;
          $807 = HEAP8[$797>>0]|0;
          (__ZNSt3__211char_traitsIcE11to_int_typeEc($807)|0);
         }
         $731 = $941;
        }
       }
      } while(0);
      $808 = HEAP32[$9>>2]|0;
      $809 = HEAP32[$8>>2]|0;
      $810 = ($808|0)==($809|0);
      if ($810) {
       label = 259;
       break L24;
      } else {
       $$1150 = $$0149;
      }
      break;
     }
     default: {
      $$1150 = $$0149;
     }
     }
    } while(0);
    L299: do {
     if ((label|0) == 52) {
      label = 0;
      $161 = $925;
      while(1) {
       $143 = HEAP32[$0>>2]|0;
       $144 = ($143|0)==(0|0);
       do {
        if ($144) {
         $927 = 1;
        } else {
         $145 = ((($143)) + 12|0);
         $146 = HEAP32[$145>>2]|0;
         $147 = ((($143)) + 16|0);
         $148 = HEAP32[$147>>2]|0;
         $149 = ($146|0)==($148|0);
         if ($149) {
          $150 = HEAP32[$143>>2]|0;
          $151 = ((($150)) + 36|0);
          $152 = HEAP32[$151>>2]|0;
          __THREW__ = 0;
          $153 = (invoke_ii($152|0,($143|0))|0);
          $154 = __THREW__; __THREW__ = 0;
          $155 = $154&1;
          if ($155) {
           label = 35;
           break L24;
          } else {
           $$0$i$i$i$i185 = $153;
          }
         } else {
          $156 = HEAP8[$146>>0]|0;
          $157 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($156)|0);
          $$0$i$i$i$i185 = $157;
         }
         $158 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
         $159 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i185,$158)|0);
         if ($159) {
          HEAP32[$0>>2] = 0;
          $927 = 1;
          break;
         } else {
          $$pre$i$i$i187 = HEAP32[$0>>2]|0;
          $phitmp$i$i$i188 = ($$pre$i$i$i187|0)==(0|0);
          $927 = $phitmp$i$i$i188;
          break;
         }
        }
       } while(0);
       $160 = ($161|0)==(0|0);
       do {
        if ($160) {
         label = 66;
        } else {
         $162 = ((($161)) + 12|0);
         $163 = HEAP32[$162>>2]|0;
         $164 = ((($161)) + 16|0);
         $165 = HEAP32[$164>>2]|0;
         $166 = ($163|0)==($165|0);
         if ($166) {
          $167 = HEAP32[$161>>2]|0;
          $168 = ((($167)) + 36|0);
          $169 = HEAP32[$168>>2]|0;
          __THREW__ = 0;
          $170 = (invoke_ii($169|0,($161|0))|0);
          $171 = __THREW__; __THREW__ = 0;
          $172 = $171&1;
          if ($172) {
           label = 35;
           break L24;
          } else {
           $$0$i$i2$i$i191 = $170;
          }
         } else {
          $173 = HEAP8[$163>>0]|0;
          $174 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($173)|0);
          $$0$i$i2$i$i191 = $174;
         }
         $175 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
         $176 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i191,$175)|0);
         if ($176) {
          HEAP32[$1>>2] = 0;
          label = 66;
          break;
         } else {
          if ($927) {
           $928 = $161;
           break;
          } else {
           $$1150 = $$0149;
           break L299;
          }
         }
        }
       } while(0);
       if ((label|0) == 66) {
        label = 0;
        if ($927) {
         $$1150 = $$0149;
         break L299;
        } else {
         $928 = 0;
        }
       }
       $177 = HEAP32[$0>>2]|0;
       $178 = ((($177)) + 12|0);
       $179 = HEAP32[$178>>2]|0;
       $180 = ((($177)) + 16|0);
       $181 = HEAP32[$180>>2]|0;
       $182 = ($179|0)==($181|0);
       if ($182) {
        $183 = HEAP32[$177>>2]|0;
        $184 = ((($183)) + 36|0);
        $185 = HEAP32[$184>>2]|0;
        __THREW__ = 0;
        $186 = (invoke_ii($185|0,($177|0))|0);
        $187 = __THREW__; __THREW__ = 0;
        $188 = $187&1;
        if ($188) {
         label = 35;
         break L24;
        } else {
         $$0$i$i199 = $186;
        }
       } else {
        $189 = HEAP8[$179>>0]|0;
        $190 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($189)|0);
        $$0$i$i199 = $190;
       }
       $191 = $$0$i$i199&255;
       $192 = ($191<<24>>24)>(-1);
       if (!($192)) {
        $$1150 = $$0149;
        break L299;
       }
       $sext412 = $$0$i$i199 << 24;
       $193 = $sext412 >> 24;
       $194 = HEAP32[$42>>2]|0;
       $195 = (($194) + ($193<<1)|0);
       $196 = HEAP16[$195>>1]|0;
       $197 = $196 & 8192;
       $198 = ($197<<16>>16)==(0);
       if ($198) {
        $$1150 = $$0149;
        break L299;
       }
       $199 = HEAP32[$0>>2]|0;
       $200 = ((($199)) + 12|0);
       $201 = HEAP32[$200>>2]|0;
       $202 = ((($199)) + 16|0);
       $203 = HEAP32[$202>>2]|0;
       $204 = ($201|0)==($203|0);
       if ($204) {
        $205 = HEAP32[$199>>2]|0;
        $206 = ((($205)) + 40|0);
        $207 = HEAP32[$206>>2]|0;
        __THREW__ = 0;
        $208 = (invoke_ii($207|0,($199|0))|0);
        $209 = __THREW__; __THREW__ = 0;
        $210 = $209&1;
        if ($210) {
         label = 35;
         break L24;
        } else {
         $$0$i$i203 = $208;
        }
       } else {
        $211 = ((($201)) + 1|0);
        HEAP32[$200>>2] = $211;
        $212 = HEAP8[$201>>0]|0;
        $213 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($212)|0);
        $$0$i$i203 = $213;
       }
       $214 = $$0$i$i203&255;
       __THREW__ = 0;
       invoke_vii(164,($23|0),($214|0));
       $215 = __THREW__; __THREW__ = 0;
       $216 = $215&1;
       if ($216) {
        label = 35;
        break L24;
       } else {
        $161 = $928;
       }
      }
     }
    } while(0);
    $813 = (($$0158) + 1)|0;
    $$0149 = $$1150;$$0158 = $813;
   }
   L336:    switch (label|0) {
    case 35: {
     $93 = ___cxa_find_matching_catch_2()|0;
     $94 = (getTempRet0() | 0);
     $lpad$phi$index = $93;$lpad$phi$index2 = $94;
     label = 37;
     break;
    }
    case 36: {
     $95 = ___cxa_find_matching_catch_2()|0;
     $96 = (getTempRet0() | 0);
     $lpad$phi$index = $95;$lpad$phi$index2 = $96;
     label = 37;
     break;
    }
    case 50: {
     $140 = HEAP32[$5>>2]|0;
     $141 = $140 | 4;
     HEAP32[$5>>2] = $141;
     $$10 = 0;
     label = 300;
     break;
    }
    case 113: {
     $379 = HEAP32[$5>>2]|0;
     $380 = $379 | 4;
     HEAP32[$5>>2] = $380;
     $$10 = 0;
     label = 300;
     break;
    }
    case 154: {
     $517 = ___cxa_find_matching_catch_2()|0;
     $518 = (getTempRet0() | 0);
     $$5142 = $517;$$5148 = $518;
     break L21;
     break;
    }
    case 155: {
     $519 = ___cxa_find_matching_catch_2()|0;
     $520 = (getTempRet0() | 0);
     $$5142 = $519;$$5148 = $520;
     break L21;
     break;
    }
    case 158: {
     $530 = HEAP32[$5>>2]|0;
     $531 = $530 | 4;
     HEAP32[$5>>2] = $531;
     $$10 = 0;
     label = 300;
     break;
    }
    case 182: {
     $593 = ___cxa_find_matching_catch_2()|0;
     $594 = (getTempRet0() | 0);
     $lpad$phi420$index = $593;$lpad$phi420$index8 = $594;
     label = 185;
     break;
    }
    case 183: {
     $595 = ___cxa_find_matching_catch_2()|0;
     $596 = (getTempRet0() | 0);
     $lpad$phi420$index = $595;$lpad$phi420$index8 = $596;
     label = 185;
     break;
    }
    case 184: {
     $597 = ___cxa_find_matching_catch_2()|0;
     $598 = (getTempRet0() | 0);
     $lpad$phi420$index = $597;$lpad$phi420$index8 = $598;
     label = 185;
     break;
    }
    case 186: {
     $599 = ___cxa_find_matching_catch_2()|0;
     $600 = (getTempRet0() | 0);
     $$5142 = $599;$$5148 = $600;
     break L21;
     break;
    }
    case 222: {
     $696 = HEAP32[$5>>2]|0;
     $697 = $696 | 4;
     HEAP32[$5>>2] = $697;
     $$10 = 0;
     label = 300;
     break;
    }
    case 248: {
     $769 = HEAP32[$5>>2]|0;
     $770 = $769 | 4;
     HEAP32[$5>>2] = $770;
     $$10 = 0;
     label = 300;
     break;
    }
    case 259: {
     $811 = HEAP32[$5>>2]|0;
     $812 = $811 | 4;
     HEAP32[$5>>2] = $812;
     $$10 = 0;
     label = 300;
     break;
    }
    case 261: {
     $814 = ($$0149|0)==(0|0);
     L338: do {
      if (!($814)) {
       $815 = ((($$0149)) + 11|0);
       $816 = ((($$0149)) + 4|0);
       $$0 = 1;
       L340: while(1) {
        $817 = HEAP8[$815>>0]|0;
        $818 = ($817<<24>>24)<(0);
        if ($818) {
         $819 = HEAP32[$816>>2]|0;
         $822 = $819;
        } else {
         $820 = $817&255;
         $822 = $820;
        }
        $821 = ($$0>>>0)<($822>>>0);
        if (!($821)) {
         break L338;
        }
        $823 = HEAP32[$0>>2]|0;
        $824 = ($823|0)==(0|0);
        do {
         if ($824) {
          $942 = 1;
         } else {
          $825 = ((($823)) + 12|0);
          $826 = HEAP32[$825>>2]|0;
          $827 = ((($823)) + 16|0);
          $828 = HEAP32[$827>>2]|0;
          $829 = ($826|0)==($828|0);
          if ($829) {
           $830 = HEAP32[$823>>2]|0;
           $831 = ((($830)) + 36|0);
           $832 = HEAP32[$831>>2]|0;
           __THREW__ = 0;
           $833 = (invoke_ii($832|0,($823|0))|0);
           $834 = __THREW__; __THREW__ = 0;
           $835 = $834&1;
           if ($835) {
            label = 289;
            break L340;
           } else {
            $$0$i$i$i$i333 = $833;
           }
          } else {
           $836 = HEAP8[$826>>0]|0;
           $837 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($836)|0);
           $$0$i$i$i$i333 = $837;
          }
          $838 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
          $839 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i333,$838)|0);
          if ($839) {
           HEAP32[$0>>2] = 0;
           $942 = 1;
           break;
          } else {
           $$pre$i$i$i335 = HEAP32[$0>>2]|0;
           $phitmp$i$i$i336 = ($$pre$i$i$i335|0)==(0|0);
           $942 = $phitmp$i$i$i336;
           break;
          }
         }
        } while(0);
        $840 = HEAP32[$1>>2]|0;
        $841 = ($840|0)==(0|0);
        do {
         if ($841) {
          label = 280;
         } else {
          $842 = ((($840)) + 12|0);
          $843 = HEAP32[$842>>2]|0;
          $844 = ((($840)) + 16|0);
          $845 = HEAP32[$844>>2]|0;
          $846 = ($843|0)==($845|0);
          if ($846) {
           $847 = HEAP32[$840>>2]|0;
           $848 = ((($847)) + 36|0);
           $849 = HEAP32[$848>>2]|0;
           __THREW__ = 0;
           $850 = (invoke_ii($849|0,($840|0))|0);
           $851 = __THREW__; __THREW__ = 0;
           $852 = $851&1;
           if ($852) {
            label = 289;
            break L340;
           } else {
            $$0$i$i2$i$i339 = $850;
           }
          } else {
           $853 = HEAP8[$843>>0]|0;
           $854 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($853)|0);
           $$0$i$i2$i$i339 = $854;
          }
          $855 = (__ZNSt3__211char_traitsIcE3eofEv()|0);
          $856 = (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i339,$855)|0);
          if ($856) {
           HEAP32[$1>>2] = 0;
           label = 280;
           break;
          } else {
           if ($942) {
            break;
           } else {
            label = 288;
            break L340;
           }
          }
         }
        } while(0);
        if ((label|0) == 280) {
         label = 0;
         if ($942) {
          label = 288;
          break;
         }
        }
        $857 = HEAP32[$0>>2]|0;
        $858 = ((($857)) + 12|0);
        $859 = HEAP32[$858>>2]|0;
        $860 = ((($857)) + 16|0);
        $861 = HEAP32[$860>>2]|0;
        $862 = ($859|0)==($861|0);
        if ($862) {
         $863 = HEAP32[$857>>2]|0;
         $864 = ((($863)) + 36|0);
         $865 = HEAP32[$864>>2]|0;
         __THREW__ = 0;
         $866 = (invoke_ii($865|0,($857|0))|0);
         $867 = __THREW__; __THREW__ = 0;
         $868 = $867&1;
         if ($868) {
          label = 289;
          break;
         } else {
          $$0$i$i247 = $866;
         }
        } else {
         $869 = HEAP8[$859>>0]|0;
         $870 = (__ZNSt3__211char_traitsIcE11to_int_typeEc($869)|0);
         $$0$i$i247 = $870;
        }
        $871 = $$0$i$i247&255;
        $872 = HEAP8[$815>>0]|0;
        $873 = ($872<<24>>24)<(0);
        if ($873) {
         $874 = HEAP32[$$0149>>2]|0;
         $876 = $874;
        } else {
         $876 = $$0149;
        }
        $875 = (($876) + ($$0)|0);
        $877 = HEAP8[$875>>0]|0;
        $878 = ($877<<24>>24)==($871<<24>>24);
        if (!($878)) {
         label = 288;
         break;
        }
        $883 = HEAP32[$0>>2]|0;
        $884 = ((($883)) + 12|0);
        $885 = HEAP32[$884>>2]|0;
        $886 = ((($883)) + 16|0);
        $887 = HEAP32[$886>>2]|0;
        $888 = ($885|0)==($887|0);
        if ($888) {
         $889 = HEAP32[$883>>2]|0;
         $890 = ((($889)) + 40|0);
         $891 = HEAP32[$890>>2]|0;
         __THREW__ = 0;
         (invoke_ii($891|0,($883|0))|0);
         $892 = __THREW__; __THREW__ = 0;
         $893 = $892&1;
         if ($893) {
          label = 289;
          break;
         }
        } else {
         $894 = ((($885)) + 1|0);
         HEAP32[$884>>2] = $894;
         $895 = HEAP8[$885>>0]|0;
         (__ZNSt3__211char_traitsIcE11to_int_typeEc($895)|0);
        }
        $896 = (($$0) + 1)|0;
        $$0 = $896;
       }
       if ((label|0) == 288) {
        $879 = HEAP32[$5>>2]|0;
        $880 = $879 | 4;
        HEAP32[$5>>2] = $880;
        $$10 = 0;
        label = 300;
        break L336;
       }
       else if ((label|0) == 289) {
        $881 = ___cxa_find_matching_catch_2()|0;
        $882 = (getTempRet0() | 0);
        $$5142 = $881;$$5148 = $882;
        break L21;
       }
      }
     } while(0);
     $897 = HEAP32[$13>>2]|0;
     $898 = HEAP32[$14>>2]|0;
     $899 = ($897|0)==($898|0);
     if ($899) {
      $$10 = 1;
      label = 300;
     } else {
      HEAP32[$25>>2] = 0;
      __THREW__ = 0;
      invoke_viiii(30,($19|0),($897|0),($898|0),($25|0));
      $900 = __THREW__; __THREW__ = 0;
      $901 = $900&1;
      if ($901) {
       $906 = ___cxa_find_matching_catch_2()|0;
       $907 = (getTempRet0() | 0);
       $$5142 = $906;$$5148 = $907;
       break L21;
      }
      $902 = HEAP32[$25>>2]|0;
      $903 = ($902|0)==(0);
      if ($903) {
       $$10 = 1;
       label = 300;
       break;
      } else {
       $904 = HEAP32[$5>>2]|0;
       $905 = $904 | 4;
       HEAP32[$5>>2] = $905;
       $$10 = 0;
       label = 300;
       break;
      }
     }
     break;
    }
   }
   if ((label|0) == 37) {
    $$5142 = $lpad$phi$index;$$5148 = $lpad$phi$index2;
    break;
   }
   else if ((label|0) == 185) {
    $$5142 = $lpad$phi420$index;$$5148 = $lpad$phi420$index8;
    break;
   }
   else if ((label|0) == 300) {
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($23);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($22);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($21);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($20);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($19);
    $908 = HEAP32[$13>>2]|0;
    HEAP32[$13>>2] = 0;
    $909 = ($908|0)==(0|0);
    if (!($909)) {
     $910 = ((($13)) + 4|0);
     $911 = HEAP32[$910>>2]|0;
     __THREW__ = 0;
     invoke_vi($911|0,($908|0));
     $912 = __THREW__; __THREW__ = 0;
     $913 = $912&1;
     if ($913) {
      $914 = ___cxa_find_matching_catch_3(0|0)|0;
      $915 = (getTempRet0() | 0);
      ___clang_call_terminate($914);
      // unreachable;
     }
    }
    STACKTOP = sp;return ($$10|0);
   }
  }
 } while(0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($23);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($22);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($21);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($20);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($19);
 $916 = HEAP32[$13>>2]|0;
 HEAP32[$13>>2] = 0;
 $917 = ($916|0)==(0|0);
 if (!($917)) {
  $918 = ((($13)) + 4|0);
  $919 = HEAP32[$918>>2]|0;
  __THREW__ = 0;
  invoke_vi($919|0,($916|0));
  $920 = __THREW__; __THREW__ = 0;
  $921 = $920&1;
  if ($921) {
   $922 = ___cxa_find_matching_catch_3(0|0)|0;
   $923 = (getTempRet0() | 0);
   ___clang_call_terminate($922);
   // unreachable;
  }
 }
 ___resumeException($$5142|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE23__append_forward_unsafeIPcEERS5_T_S9_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$040 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, $scevgep = 0, $scevgep44 = 0;
 var $scevgep45 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $1;
 $4 = sp;
 $5 = ((($0)) + 11|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = ($6<<24>>24)<(0);
 if ($7) {
  $9 = ((($0)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($0)) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = $12 & 2147483647;
  $phitmp$i = (($13) + -1)|0;
  $39 = $phitmp$i;$40 = $10;
 } else {
  $8 = $6&255;
  $39 = 10;$40 = $8;
 }
 $14 = $2;
 $15 = (($14) - ($3))|0;
 $16 = ($15|0)==(0);
 do {
  if (!($16)) {
   if ($7) {
    $17 = HEAP32[$0>>2]|0;
    $18 = ((($0)) + 4|0);
    $19 = HEAP32[$18>>2]|0;
    $22 = $17;$23 = $19;
   } else {
    $20 = $6&255;
    $22 = $0;$23 = $20;
   }
   $21 = (($22) + ($23)|0);
   $24 = (__ZNSt3__214__ptr_in_rangeIcEEbPKT_S3_S3_($1,$22,$21)|0);
   if ($24) {
    ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_($4,$1,$2);
    $25 = ((($4)) + 11|0);
    $26 = HEAP8[$25>>0]|0;
    $27 = ($26<<24>>24)<(0);
    $28 = HEAP32[$4>>2]|0;
    $29 = ((($4)) + 4|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = $26&255;
    $32 = $27 ? $28 : $4;
    $33 = $27 ? $30 : $31;
    __THREW__ = 0;
    (invoke_iiii(44,($0|0),($32|0),($33|0))|0);
    $34 = __THREW__; __THREW__ = 0;
    $35 = $34&1;
    if ($35) {
     $36 = ___cxa_find_matching_catch_2()|0;
     $37 = (getTempRet0() | 0);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($4);
     ___resumeException($36|0);
     // unreachable;
    } else {
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($4);
     break;
    }
   }
   $38 = (($39) - ($40))|0;
   $41 = ($38>>>0)<($15>>>0);
   if ($41) {
    $42 = (($40) + ($15))|0;
    $43 = (($42) - ($39))|0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEmmmmmm($0,$39,$43,$40,$40,0,0);
   }
   $44 = HEAP8[$5>>0]|0;
   $45 = ($44<<24>>24)<(0);
   if ($45) {
    $46 = HEAP32[$0>>2]|0;
    $48 = $46;
   } else {
    $48 = $0;
   }
   $47 = (($48) + ($40)|0);
   $49 = (($40) - ($3))|0;
   $scevgep = (($2) + ($49)|0);
   $scevgep44 = $scevgep;
   $$0 = $47;$$040 = $1;
   while(1) {
    $50 = ($$040|0)==($2|0);
    if ($50) {
     break;
    }
    __ZNSt3__211char_traitsIcE6assignERcRKc($$0,$$040);
    $51 = ((($$0)) + 1|0);
    $52 = ((($$040)) + 1|0);
    $$0 = $51;$$040 = $52;
   }
   $scevgep45 = (($48) + ($scevgep44)|0);
   HEAP8[$4>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($scevgep45,$4);
   $53 = (($40) + ($15))|0;
   $54 = HEAP8[$5>>0]|0;
   $55 = ($54<<24>>24)<(0);
   if ($55) {
    $56 = ((($0)) + 4|0);
    HEAP32[$56>>2] = $53;
    break;
   } else {
    $57 = $53&255;
    HEAP8[$5>>0] = $57;
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return ($0|0);
}
function __ZNSt3__214__ptr_in_rangeIcEEbPKT_S3_S3_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1>>>0)<=($0>>>0);
 $4 = ($0>>>0)<($2>>>0);
 $spec$select = $3 & $4;
 return ($spec$select|0);
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$021 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $scevgep23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $1;
 $4 = sp;
 $5 = $2;
 $6 = (($5) - ($3))|0;
 $7 = ($6>>>0)>(4294967279);
 if ($7) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $8 = ($6>>>0)<(11);
 if ($8) {
  $9 = $6&255;
  $10 = ((($0)) + 11|0);
  HEAP8[$10>>0] = $9;
  $$021 = $0;
 } else {
  $11 = (($6) + 16)|0;
  $12 = $11 & -16;
  $13 = (__Znwm($12)|0);
  HEAP32[$0>>2] = $13;
  $14 = $12 | -2147483648;
  $15 = ((($0)) + 8|0);
  HEAP32[$15>>2] = $14;
  $16 = ((($0)) + 4|0);
  HEAP32[$16>>2] = $6;
  $$021 = $13;
 }
 $17 = $2;
 $18 = (($17) - ($3))|0;
 $$0 = $1;$$1 = $$021;
 while(1) {
  $19 = ($$0|0)==($2|0);
  if ($19) {
   break;
  }
  __ZNSt3__211char_traitsIcE6assignERcRKc($$1,$$0);
  $20 = ((($$0)) + 1|0);
  $21 = ((($$1)) + 1|0);
  $$0 = $20;$$1 = $21;
 }
 $scevgep23 = (($$021) + ($18)|0);
 HEAP8[$4>>0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($scevgep23,$4);
 STACKTOP = sp;return;
}
function __ZNSt3__211__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri($0,$1,$2,$3,$4,$5,$6,$7,$8,$9) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 var $$0$i$i$i = 0, $$0$i$i$i40 = 0, $$0$i$i$i45 = 0, $$0$i$i$i50 = 0, $$0$i$i$i55 = 0, $$0$i$i$i60 = 0, $$0$i$i$i65 = 0, $$0$i$i$i70 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i$i = 0, $exitcond$i$i$i41 = 0, $exitcond$i$i$i46 = 0, $exitcond$i$i$i51 = 0;
 var $exitcond$i$i$i56 = 0, $exitcond$i$i$i61 = 0, $exitcond$i$i$i66 = 0, $exitcond$i$i$i71 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $10 = sp + 12|0;
 $11 = sp;
 if ($0) {
  $12 = (__ZNKSt3__26locale9use_facetERNS0_2idE($1,50972)|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ((($13)) + 44|0);
  $15 = HEAP32[$14>>2]|0;
  FUNCTION_TABLE_vii[$15 & 255]($10,$12);
  $16 = HEAP32[$10>>2]|0;
  HEAP8[$2>>0]=$16&255;HEAP8[$2+1>>0]=($16>>8)&255;HEAP8[$2+2>>0]=($16>>16)&255;HEAP8[$2+3>>0]=$16>>24;
  $17 = HEAP32[$12>>2]|0;
  $18 = ((($17)) + 32|0);
  $19 = HEAP32[$18>>2]|0;
  FUNCTION_TABLE_vii[$19 & 255]($11,$12);
  $20 = ((($8)) + 11|0);
  $21 = HEAP8[$20>>0]|0;
  $22 = ($21<<24>>24)<(0);
  if ($22) {
   $23 = HEAP32[$8>>2]|0;
   HEAP8[$10>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($23,$10);
   $24 = ((($8)) + 4|0);
   HEAP32[$24>>2] = 0;
  } else {
   HEAP8[$10>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($8,$10);
   HEAP8[$20>>0] = 0;
  }
  __THREW__ = 0;
  invoke_vii(165,($8|0),0);
  $25 = __THREW__; __THREW__ = 0;
  $26 = $25&1;
  if ($26) {
   $27 = ___cxa_find_matching_catch_3(0|0)|0;
   $28 = (getTempRet0() | 0);
   ___clang_call_terminate($27);
   // unreachable;
  }
  ;HEAP32[$8>>2]=HEAP32[$11>>2]|0;HEAP32[$8+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$11+8>>2]|0;
  $$0$i$i$i = 0;
  while(1) {
   $exitcond$i$i$i = ($$0$i$i$i|0)==(3);
   if ($exitcond$i$i$i) {
    break;
   }
   $29 = (($11) + ($$0$i$i$i<<2)|0);
   HEAP32[$29>>2] = 0;
   $30 = (($$0$i$i$i) + 1)|0;
   $$0$i$i$i = $30;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($11);
  $31 = HEAP32[$12>>2]|0;
  $32 = ((($31)) + 28|0);
  $33 = HEAP32[$32>>2]|0;
  FUNCTION_TABLE_vii[$33 & 255]($11,$12);
  $34 = ((($7)) + 11|0);
  $35 = HEAP8[$34>>0]|0;
  $36 = ($35<<24>>24)<(0);
  if ($36) {
   $37 = HEAP32[$7>>2]|0;
   HEAP8[$10>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($37,$10);
   $38 = ((($7)) + 4|0);
   HEAP32[$38>>2] = 0;
  } else {
   HEAP8[$10>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($7,$10);
   HEAP8[$34>>0] = 0;
  }
  __THREW__ = 0;
  invoke_vii(165,($7|0),0);
  $39 = __THREW__; __THREW__ = 0;
  $40 = $39&1;
  if ($40) {
   $41 = ___cxa_find_matching_catch_3(0|0)|0;
   $42 = (getTempRet0() | 0);
   ___clang_call_terminate($41);
   // unreachable;
  }
  ;HEAP32[$7>>2]=HEAP32[$11>>2]|0;HEAP32[$7+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$7+8>>2]=HEAP32[$11+8>>2]|0;
  $$0$i$i$i40 = 0;
  while(1) {
   $exitcond$i$i$i41 = ($$0$i$i$i40|0)==(3);
   if ($exitcond$i$i$i41) {
    break;
   }
   $43 = (($11) + ($$0$i$i$i40<<2)|0);
   HEAP32[$43>>2] = 0;
   $44 = (($$0$i$i$i40) + 1)|0;
   $$0$i$i$i40 = $44;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($11);
  $45 = HEAP32[$12>>2]|0;
  $46 = ((($45)) + 12|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = (FUNCTION_TABLE_ii[$47 & 255]($12)|0);
  HEAP8[$3>>0] = $48;
  $49 = HEAP32[$12>>2]|0;
  $50 = ((($49)) + 16|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = (FUNCTION_TABLE_ii[$51 & 255]($12)|0);
  HEAP8[$4>>0] = $52;
  $53 = HEAP32[$12>>2]|0;
  $54 = ((($53)) + 20|0);
  $55 = HEAP32[$54>>2]|0;
  FUNCTION_TABLE_vii[$55 & 255]($11,$12);
  $56 = ((($5)) + 11|0);
  $57 = HEAP8[$56>>0]|0;
  $58 = ($57<<24>>24)<(0);
  if ($58) {
   $59 = HEAP32[$5>>2]|0;
   HEAP8[$10>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($59,$10);
   $60 = ((($5)) + 4|0);
   HEAP32[$60>>2] = 0;
  } else {
   HEAP8[$10>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($5,$10);
   HEAP8[$56>>0] = 0;
  }
  __THREW__ = 0;
  invoke_vii(165,($5|0),0);
  $61 = __THREW__; __THREW__ = 0;
  $62 = $61&1;
  if ($62) {
   $63 = ___cxa_find_matching_catch_3(0|0)|0;
   $64 = (getTempRet0() | 0);
   ___clang_call_terminate($63);
   // unreachable;
  }
  ;HEAP32[$5>>2]=HEAP32[$11>>2]|0;HEAP32[$5+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$11+8>>2]|0;
  $$0$i$i$i45 = 0;
  while(1) {
   $exitcond$i$i$i46 = ($$0$i$i$i45|0)==(3);
   if ($exitcond$i$i$i46) {
    break;
   }
   $65 = (($11) + ($$0$i$i$i45<<2)|0);
   HEAP32[$65>>2] = 0;
   $66 = (($$0$i$i$i45) + 1)|0;
   $$0$i$i$i45 = $66;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($11);
  $67 = HEAP32[$12>>2]|0;
  $68 = ((($67)) + 24|0);
  $69 = HEAP32[$68>>2]|0;
  FUNCTION_TABLE_vii[$69 & 255]($11,$12);
  $70 = ((($6)) + 11|0);
  $71 = HEAP8[$70>>0]|0;
  $72 = ($71<<24>>24)<(0);
  if ($72) {
   $73 = HEAP32[$6>>2]|0;
   HEAP8[$10>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($73,$10);
   $74 = ((($6)) + 4|0);
   HEAP32[$74>>2] = 0;
  } else {
   HEAP8[$10>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($6,$10);
   HEAP8[$70>>0] = 0;
  }
  __THREW__ = 0;
  invoke_vii(165,($6|0),0);
  $75 = __THREW__; __THREW__ = 0;
  $76 = $75&1;
  if ($76) {
   $77 = ___cxa_find_matching_catch_3(0|0)|0;
   $78 = (getTempRet0() | 0);
   ___clang_call_terminate($77);
   // unreachable;
  }
  ;HEAP32[$6>>2]=HEAP32[$11>>2]|0;HEAP32[$6+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$11+8>>2]|0;
  $$0$i$i$i50 = 0;
  while(1) {
   $exitcond$i$i$i51 = ($$0$i$i$i50|0)==(3);
   if ($exitcond$i$i$i51) {
    break;
   }
   $79 = (($11) + ($$0$i$i$i50<<2)|0);
   HEAP32[$79>>2] = 0;
   $80 = (($$0$i$i$i50) + 1)|0;
   $$0$i$i$i50 = $80;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($11);
  $81 = HEAP32[$12>>2]|0;
  $82 = ((($81)) + 36|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = (FUNCTION_TABLE_ii[$83 & 255]($12)|0);
  $storemerge = $84;
 } else {
  $85 = (__ZNKSt3__26locale9use_facetERNS0_2idE($1,50964)|0);
  $86 = HEAP32[$85>>2]|0;
  $87 = ((($86)) + 44|0);
  $88 = HEAP32[$87>>2]|0;
  FUNCTION_TABLE_vii[$88 & 255]($10,$85);
  $89 = HEAP32[$10>>2]|0;
  HEAP8[$2>>0]=$89&255;HEAP8[$2+1>>0]=($89>>8)&255;HEAP8[$2+2>>0]=($89>>16)&255;HEAP8[$2+3>>0]=$89>>24;
  $90 = HEAP32[$85>>2]|0;
  $91 = ((($90)) + 32|0);
  $92 = HEAP32[$91>>2]|0;
  FUNCTION_TABLE_vii[$92 & 255]($11,$85);
  $93 = ((($8)) + 11|0);
  $94 = HEAP8[$93>>0]|0;
  $95 = ($94<<24>>24)<(0);
  if ($95) {
   $96 = HEAP32[$8>>2]|0;
   HEAP8[$10>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($96,$10);
   $97 = ((($8)) + 4|0);
   HEAP32[$97>>2] = 0;
  } else {
   HEAP8[$10>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($8,$10);
   HEAP8[$93>>0] = 0;
  }
  __THREW__ = 0;
  invoke_vii(165,($8|0),0);
  $98 = __THREW__; __THREW__ = 0;
  $99 = $98&1;
  if ($99) {
   $100 = ___cxa_find_matching_catch_3(0|0)|0;
   $101 = (getTempRet0() | 0);
   ___clang_call_terminate($100);
   // unreachable;
  }
  ;HEAP32[$8>>2]=HEAP32[$11>>2]|0;HEAP32[$8+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$11+8>>2]|0;
  $$0$i$i$i55 = 0;
  while(1) {
   $exitcond$i$i$i56 = ($$0$i$i$i55|0)==(3);
   if ($exitcond$i$i$i56) {
    break;
   }
   $102 = (($11) + ($$0$i$i$i55<<2)|0);
   HEAP32[$102>>2] = 0;
   $103 = (($$0$i$i$i55) + 1)|0;
   $$0$i$i$i55 = $103;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($11);
  $104 = HEAP32[$85>>2]|0;
  $105 = ((($104)) + 28|0);
  $106 = HEAP32[$105>>2]|0;
  FUNCTION_TABLE_vii[$106 & 255]($11,$85);
  $107 = ((($7)) + 11|0);
  $108 = HEAP8[$107>>0]|0;
  $109 = ($108<<24>>24)<(0);
  if ($109) {
   $110 = HEAP32[$7>>2]|0;
   HEAP8[$10>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($110,$10);
   $111 = ((($7)) + 4|0);
   HEAP32[$111>>2] = 0;
  } else {
   HEAP8[$10>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($7,$10);
   HEAP8[$107>>0] = 0;
  }
  __THREW__ = 0;
  invoke_vii(165,($7|0),0);
  $112 = __THREW__; __THREW__ = 0;
  $113 = $112&1;
  if ($113) {
   $114 = ___cxa_find_matching_catch_3(0|0)|0;
   $115 = (getTempRet0() | 0);
   ___clang_call_terminate($114);
   // unreachable;
  }
  ;HEAP32[$7>>2]=HEAP32[$11>>2]|0;HEAP32[$7+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$7+8>>2]=HEAP32[$11+8>>2]|0;
  $$0$i$i$i60 = 0;
  while(1) {
   $exitcond$i$i$i61 = ($$0$i$i$i60|0)==(3);
   if ($exitcond$i$i$i61) {
    break;
   }
   $116 = (($11) + ($$0$i$i$i60<<2)|0);
   HEAP32[$116>>2] = 0;
   $117 = (($$0$i$i$i60) + 1)|0;
   $$0$i$i$i60 = $117;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($11);
  $118 = HEAP32[$85>>2]|0;
  $119 = ((($118)) + 12|0);
  $120 = HEAP32[$119>>2]|0;
  $121 = (FUNCTION_TABLE_ii[$120 & 255]($85)|0);
  HEAP8[$3>>0] = $121;
  $122 = HEAP32[$85>>2]|0;
  $123 = ((($122)) + 16|0);
  $124 = HEAP32[$123>>2]|0;
  $125 = (FUNCTION_TABLE_ii[$124 & 255]($85)|0);
  HEAP8[$4>>0] = $125;
  $126 = HEAP32[$85>>2]|0;
  $127 = ((($126)) + 20|0);
  $128 = HEAP32[$127>>2]|0;
  FUNCTION_TABLE_vii[$128 & 255]($11,$85);
  $129 = ((($5)) + 11|0);
  $130 = HEAP8[$129>>0]|0;
  $131 = ($130<<24>>24)<(0);
  if ($131) {
   $132 = HEAP32[$5>>2]|0;
   HEAP8[$10>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($132,$10);
   $133 = ((($5)) + 4|0);
   HEAP32[$133>>2] = 0;
  } else {
   HEAP8[$10>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($5,$10);
   HEAP8[$129>>0] = 0;
  }
  __THREW__ = 0;
  invoke_vii(165,($5|0),0);
  $134 = __THREW__; __THREW__ = 0;
  $135 = $134&1;
  if ($135) {
   $136 = ___cxa_find_matching_catch_3(0|0)|0;
   $137 = (getTempRet0() | 0);
   ___clang_call_terminate($136);
   // unreachable;
  }
  ;HEAP32[$5>>2]=HEAP32[$11>>2]|0;HEAP32[$5+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$11+8>>2]|0;
  $$0$i$i$i65 = 0;
  while(1) {
   $exitcond$i$i$i66 = ($$0$i$i$i65|0)==(3);
   if ($exitcond$i$i$i66) {
    break;
   }
   $138 = (($11) + ($$0$i$i$i65<<2)|0);
   HEAP32[$138>>2] = 0;
   $139 = (($$0$i$i$i65) + 1)|0;
   $$0$i$i$i65 = $139;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($11);
  $140 = HEAP32[$85>>2]|0;
  $141 = ((($140)) + 24|0);
  $142 = HEAP32[$141>>2]|0;
  FUNCTION_TABLE_vii[$142 & 255]($11,$85);
  $143 = ((($6)) + 11|0);
  $144 = HEAP8[$143>>0]|0;
  $145 = ($144<<24>>24)<(0);
  if ($145) {
   $146 = HEAP32[$6>>2]|0;
   HEAP8[$10>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($146,$10);
   $147 = ((($6)) + 4|0);
   HEAP32[$147>>2] = 0;
  } else {
   HEAP8[$10>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($6,$10);
   HEAP8[$143>>0] = 0;
  }
  __THREW__ = 0;
  invoke_vii(165,($6|0),0);
  $148 = __THREW__; __THREW__ = 0;
  $149 = $148&1;
  if ($149) {
   $150 = ___cxa_find_matching_catch_3(0|0)|0;
   $151 = (getTempRet0() | 0);
   ___clang_call_terminate($150);
   // unreachable;
  }
  ;HEAP32[$6>>2]=HEAP32[$11>>2]|0;HEAP32[$6+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$11+8>>2]|0;
  $$0$i$i$i70 = 0;
  while(1) {
   $exitcond$i$i$i71 = ($$0$i$i$i70|0)==(3);
   if ($exitcond$i$i$i71) {
    break;
   }
   $152 = (($11) + ($$0$i$i$i70<<2)|0);
   HEAP32[$152>>2] = 0;
   $153 = (($$0$i$i$i70) + 1)|0;
   $$0$i$i$i70 = $153;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($11);
  $154 = HEAP32[$85>>2]|0;
  $155 = ((($154)) + 36|0);
  $156 = HEAP32[$155>>2]|0;
  $157 = (FUNCTION_TABLE_ii[$156 & 255]($85)|0);
  $storemerge = $157;
 }
 HEAP32[$9>>2] = $storemerge;
 STACKTOP = sp;return;
}
function __ZNSt3__219__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$pr = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, $spec$select35 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(308|0);
 $6 = HEAP32[$2>>2]|0;
 $7 = HEAP32[$0>>2]|0;
 $8 = $7;
 $9 = (($6) - ($8))|0;
 $10 = ($9>>>0)<(2147483647);
 $11 = $9 << 1;
 $12 = ($11|0)==(0);
 $spec$select = $12 ? 1 : $11;
 $13 = $10 ? $spec$select : -1;
 $14 = HEAP32[$1>>2]|0;
 $15 = (($14) - ($8))|0;
 $spec$select35 = $5 ? $7 : 0;
 $16 = (_realloc($spec$select35,$13)|0);
 $17 = ($16|0)==(0|0);
 if ($17) {
  __ZSt17__throw_bad_allocv();
  // unreachable;
 }
 do {
  if ($5) {
   $18 = $16;
   HEAP32[$0>>2] = $18;
   $27 = $16;
  } else {
   $$pr = HEAP32[$0>>2]|0;
   $19 = $16;
   HEAP32[$0>>2] = $19;
   $20 = ($$pr|0)==(0|0);
   if ($20) {
    $27 = $16;
   } else {
    $21 = HEAP32[$3>>2]|0;
    __THREW__ = 0;
    invoke_vi($21|0,($$pr|0));
    $22 = __THREW__; __THREW__ = 0;
    $23 = $22&1;
    if ($23) {
     $24 = ___cxa_find_matching_catch_3(0|0)|0;
     $25 = (getTempRet0() | 0);
     ___clang_call_terminate($24);
     // unreachable;
    } else {
     $$pre = HEAP32[$0>>2]|0;
     $27 = $$pre;
     break;
    }
   }
  }
 } while(0);
 HEAP32[$3>>2] = (310);
 $26 = (($27) + ($15)|0);
 HEAP32[$1>>2] = $26;
 $28 = HEAP32[$0>>2]|0;
 $29 = (($28) + ($13)|0);
 HEAP32[$2>>2] = $29;
 return;
}
function __ZNSt3__219__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$pr = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, $spec$select35 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(308|0);
 $6 = HEAP32[$2>>2]|0;
 $7 = HEAP32[$0>>2]|0;
 $8 = $7;
 $9 = (($6) - ($8))|0;
 $10 = ($9>>>0)<(2147483647);
 $11 = $9 << 1;
 $12 = ($11|0)==(0);
 $spec$select = $12 ? 4 : $11;
 $13 = $10 ? $spec$select : -1;
 $14 = HEAP32[$1>>2]|0;
 $15 = (($14) - ($8))|0;
 $16 = $15 >> 2;
 $spec$select35 = $5 ? $7 : 0;
 $17 = (_realloc($spec$select35,$13)|0);
 $18 = ($17|0)==(0|0);
 if ($18) {
  __ZSt17__throw_bad_allocv();
  // unreachable;
 }
 do {
  if ($5) {
   $19 = $17;
   HEAP32[$0>>2] = $19;
   $29 = $17;
  } else {
   $$pr = HEAP32[$0>>2]|0;
   $20 = $17;
   HEAP32[$0>>2] = $20;
   $21 = ($$pr|0)==(0|0);
   if ($21) {
    $29 = $17;
   } else {
    $22 = HEAP32[$3>>2]|0;
    __THREW__ = 0;
    invoke_vi($22|0,($$pr|0));
    $23 = __THREW__; __THREW__ = 0;
    $24 = $23&1;
    if ($24) {
     $25 = ___cxa_find_matching_catch_3(0|0)|0;
     $26 = (getTempRet0() | 0);
     ___clang_call_terminate($25);
     // unreachable;
    } else {
     $$pre = HEAP32[$0>>2]|0;
     $29 = $$pre;
     break;
    }
   }
  }
 } while(0);
 HEAP32[$3>>2] = (310);
 $27 = $13 >>> 2;
 $28 = (($29) + ($16<<2)|0);
 HEAP32[$1>>2] = $28;
 $30 = HEAP32[$0>>2]|0;
 $31 = (($30) + ($27<<2)|0);
 HEAP32[$2>>2] = $31;
 return;
}
function __ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}
function __ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$0 = 0, $$0$i = 0, $$0$i$i$i$i = 0, $$0$i$i2$i$i = 0, $$0$lcssa$i = 0, $$031 = 0, $$032 = 0, $$035 = 0, $$1 = 0, $$133 = 0, $$136 = 0, $$2 = 0, $$234 = 0, $$237 = 0, $$33859 = 0, $$361 = 0, $$byval_copy = 0, $$phi$trans$insert62 = 0, $$pre = 0, $$pre$i$i$i = 0;
 var $$pre56 = 0, $$pre63 = 0, $$sroa$0$0$copyload = 0, $$sroa$043$0 = 0, $$sroa$043$1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $phitmp$i$i$i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 592|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(592|0);
 $$byval_copy = sp + 512|0;
 $vararg_buffer = sp + 552|0;
 $7 = sp + 112|0;
 $8 = sp + 568|0;
 $9 = sp + 564|0;
 $10 = sp + 560|0;
 $11 = sp + 576|0;
 $12 = sp + 556|0;
 $13 = sp;
 $14 = $7;
 HEAP32[$8>>2] = $14;
 $15 = ((($8)) + 4|0);
 HEAP32[$15>>2] = (308);
 $16 = ((($7)) + 400|0);
 __ZNKSt3__28ios_base6getlocEv($10,$4);
 __THREW__ = 0;
 $17 = (invoke_iii(37,($10|0),(50772|0))|0);
 $18 = __THREW__; __THREW__ = 0;
 $19 = $18&1;
 if ($19) {
  $43 = ___cxa_find_matching_catch_2()|0;
  $44 = (getTempRet0() | 0);
  $$234 = $43;$$237 = $44;
 } else {
  HEAP8[$11>>0] = 0;
  $20 = HEAP32[$2>>2]|0;
  HEAP32[$12>>2] = $20;
  $21 = ((($4)) + 4|0);
  $22 = HEAP32[$21>>2]|0;
  __THREW__ = 0;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$12>>2]|0;
  $23 = (invoke_iiiiiiiiiiii(2,($1|0),($$byval_copy|0),($3|0),($10|0),($22|0),($5|0),($11|0),($17|0),($8|0),($9|0),($16|0))|0);
  $24 = __THREW__; __THREW__ = 0;
  $25 = $24&1;
  L4: do {
   if ($25) {
    label = 9;
   } else {
    L6: do {
     if ($23) {
      $26 = HEAP32[$17>>2]|0;
      $27 = ((($26)) + 48|0);
      $28 = HEAP32[$27>>2]|0;
      __THREW__ = 0;
      (invoke_iiiii($28|0,($17|0),(43043|0),((43053)|0),($$byval_copy|0))|0);
      $29 = __THREW__; __THREW__ = 0;
      $30 = $29&1;
      if ($30) {
       $47 = ___cxa_find_matching_catch_2()|0;
       $48 = (getTempRet0() | 0);
       $$032 = $47;$$035 = $48;
      } else {
       $31 = HEAP32[$9>>2]|0;
       $32 = HEAP32[$8>>2]|0;
       $33 = (($31) - ($32))|0;
       $34 = ($33|0)>(392);
       $35 = $32;
       $36 = $31;
       if ($34) {
        $37 = $33 >>> 2;
        $38 = (($37) + 2)|0;
        $39 = (_malloc($38)|0);
        $40 = $39;
        $41 = ($39|0)==(0|0);
        if ($41) {
         __THREW__ = 0;
         invoke_v(4);
         $42 = __THREW__; __THREW__ = 0;
         $$sroa$043$0 = $40;
        } else {
         $$031 = $39;$$sroa$043$1 = $40;
         label = 14;
        }
       } else {
        $$031 = $13;$$sroa$043$1 = 0;
        label = 14;
       }
       do {
        if ((label|0) == 14) {
         $53 = HEAP8[$11>>0]|0;
         $54 = ($53<<24>>24)==(0);
         if ($54) {
          $$1 = $$031;
         } else {
          $55 = ((($$031)) + 1|0);
          HEAP8[$$031>>0] = 45;
          $$1 = $55;
         }
         $56 = ((($$byval_copy)) + 40|0);
         $57 = $$byval_copy;
         $$0 = $35;$$2 = $$1;$59 = $36;
         while(1) {
          $58 = ($$0>>>0)<($59>>>0);
          if (!($58)) {
           break;
          }
          $62 = HEAP32[$$0>>2]|0;
          $$0$i = $$byval_copy;
          while(1) {
           $63 = ($$0$i|0)==($56|0);
           if ($63) {
            $$0$lcssa$i = $56;
            break;
           }
           $64 = HEAP32[$$0$i>>2]|0;
           $65 = ($64|0)==($62|0);
           if ($65) {
            $$0$lcssa$i = $$0$i;
            break;
           }
           $66 = ((($$0$i)) + 4|0);
           $$0$i = $66;
          }
          $67 = $$0$lcssa$i;
          $68 = (($67) - ($57))|0;
          $69 = $68 >> 2;
          $70 = (43043 + ($69)|0);
          $71 = HEAP8[$70>>0]|0;
          HEAP8[$$2>>0] = $71;
          $72 = ((($$0)) + 4|0);
          $73 = ((($$2)) + 1|0);
          $$pre = HEAP32[$9>>2]|0;
          $$0 = $72;$$2 = $73;$59 = $$pre;
         }
         HEAP8[$$2>>0] = 0;
         HEAP32[$vararg_buffer>>2] = $6;
         $60 = (_sscanf($13,42928,$vararg_buffer)|0);
         $61 = ($60|0)==(1);
         if (!($61)) {
          __THREW__ = 0;
          invoke_vi(309,(42932|0));
          $74 = __THREW__; __THREW__ = 0;
          $$sroa$043$0 = $$sroa$043$1;
          break;
         }
         $75 = ($$sroa$043$1|0)==(0);
         if (!($75)) {
          $76 = $$sroa$043$1;
          _free($76);
         }
         break L6;
        }
       } while(0);
       $49 = ___cxa_find_matching_catch_2()|0;
       $50 = (getTempRet0() | 0);
       $51 = ($$sroa$043$0|0)==(0);
       if (!($51)) {
        $52 = $$sroa$043$0;
        _free($52);
       }
       $$032 = $49;$$035 = $50;
      }
      $$133 = $$032;$$136 = $$035;
      break L4;
     }
    } while(0);
    $77 = HEAP32[$1>>2]|0;
    $78 = ($77|0)==(0|0);
    do {
     if ($78) {
      $126 = 1;
     } else {
      $79 = ((($77)) + 12|0);
      $80 = HEAP32[$79>>2]|0;
      $81 = ((($77)) + 16|0);
      $82 = HEAP32[$81>>2]|0;
      $83 = ($80|0)==($82|0);
      if ($83) {
       $84 = HEAP32[$77>>2]|0;
       $85 = ((($84)) + 36|0);
       $86 = HEAP32[$85>>2]|0;
       __THREW__ = 0;
       $87 = (invoke_ii($86|0,($77|0))|0);
       $88 = __THREW__; __THREW__ = 0;
       $89 = $88&1;
       if ($89) {
        label = 9;
        break L4;
       } else {
        $$0$i$i$i$i = $87;
       }
      } else {
       $90 = HEAP32[$80>>2]|0;
       $91 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($90)|0);
       $$0$i$i$i$i = $91;
      }
      $92 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
      $93 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i,$92)|0);
      if ($93) {
       HEAP32[$1>>2] = 0;
       $126 = 1;
       break;
      } else {
       $$pre$i$i$i = HEAP32[$1>>2]|0;
       $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
       $126 = $phitmp$i$i$i;
       break;
      }
     }
    } while(0);
    $94 = HEAP32[$2>>2]|0;
    $95 = ($94|0)==(0|0);
    do {
     if ($95) {
      label = 42;
     } else {
      $96 = ((($94)) + 12|0);
      $97 = HEAP32[$96>>2]|0;
      $98 = ((($94)) + 16|0);
      $99 = HEAP32[$98>>2]|0;
      $100 = ($97|0)==($99|0);
      if ($100) {
       $101 = HEAP32[$94>>2]|0;
       $102 = ((($101)) + 36|0);
       $103 = HEAP32[$102>>2]|0;
       __THREW__ = 0;
       $104 = (invoke_ii($103|0,($94|0))|0);
       $105 = __THREW__; __THREW__ = 0;
       $106 = $105&1;
       if ($106) {
        label = 9;
        break L4;
       } else {
        $$0$i$i2$i$i = $104;
       }
      } else {
       $107 = HEAP32[$97>>2]|0;
       $108 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($107)|0);
       $$0$i$i2$i$i = $108;
      }
      $109 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
      $110 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i,$109)|0);
      if ($110) {
       HEAP32[$2>>2] = 0;
       label = 42;
       break;
      } else {
       if ($126) {
        break;
       } else {
        label = 44;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 42) {
     if ($126) {
      label = 44;
     }
    }
    if ((label|0) == 44) {
     $111 = HEAP32[$5>>2]|0;
     $112 = $111 | 2;
     HEAP32[$5>>2] = $112;
    }
    $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
    __ZNSt3__26localeD2Ev($10);
    $113 = HEAP32[$8>>2]|0;
    HEAP32[$8>>2] = 0;
    $114 = ($113|0)==(0|0);
    if (!($114)) {
     $115 = ((($8)) + 4|0);
     $116 = HEAP32[$115>>2]|0;
     __THREW__ = 0;
     invoke_vi($116|0,($113|0));
     $117 = __THREW__; __THREW__ = 0;
     $118 = $117&1;
     if ($118) {
      $119 = ___cxa_find_matching_catch_3(0|0)|0;
      $120 = (getTempRet0() | 0);
      ___clang_call_terminate($119);
      // unreachable;
     }
    }
    STACKTOP = sp;return ($$sroa$0$0$copyload|0);
   }
  } while(0);
  if ((label|0) == 9) {
   $45 = ___cxa_find_matching_catch_2()|0;
   $46 = (getTempRet0() | 0);
   $$133 = $45;$$136 = $46;
  }
  $$234 = $$133;$$237 = $$136;
 }
 __ZNSt3__26localeD2Ev($10);
 $$pre56 = HEAP32[$8>>2]|0;
 HEAP32[$8>>2] = 0;
 $121 = ($$pre56|0)==(0|0);
 if ($121) {
  $$33859 = $$237;$$361 = $$234;
 } else {
  $$phi$trans$insert62 = ((($8)) + 4|0);
  $$pre63 = HEAP32[$$phi$trans$insert62>>2]|0;
  __THREW__ = 0;
  invoke_vi($$pre63|0,($$pre56|0));
  $122 = __THREW__; __THREW__ = 0;
  $123 = $122&1;
  if ($123) {
   $124 = ___cxa_find_matching_catch_3(0|0)|0;
   $125 = (getTempRet0() | 0);
   ___clang_call_terminate($124);
   // unreachable;
  } else {
   $$33859 = $$237;$$361 = $$234;
  }
 }
 ___resumeException($$361|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$0 = 0, $$0$i$i$i$i = 0, $$0$i$i2$i$i = 0, $$2 = 0, $$236 = 0, $$33746 = 0, $$348 = 0, $$byval_copy = 0, $$pre = 0, $$pre$i$i$i = 0, $$sink49$index = 0, $$sink49$index3 = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $phitmp$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 432|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(432|0);
 $$byval_copy = sp + 424|0;
 $7 = sp;
 $8 = sp + 416|0;
 $9 = sp + 408|0;
 $10 = sp + 400|0;
 $11 = sp + 428|0;
 $12 = sp + 404|0;
 $13 = $7;
 HEAP32[$8>>2] = $13;
 $14 = ((($8)) + 4|0);
 HEAP32[$14>>2] = (308);
 $15 = ((($7)) + 400|0);
 __ZNKSt3__28ios_base6getlocEv($10,$4);
 __THREW__ = 0;
 $16 = (invoke_iii(37,($10|0),(50772|0))|0);
 $17 = __THREW__; __THREW__ = 0;
 $18 = $17&1;
 if ($18) {
  $42 = ___cxa_find_matching_catch_2()|0;
  $43 = (getTempRet0() | 0);
  $$2 = $42;$$236 = $43;
 } else {
  HEAP8[$11>>0] = 0;
  $19 = HEAP32[$2>>2]|0;
  HEAP32[$12>>2] = $19;
  $20 = ((($4)) + 4|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $19;
  __THREW__ = 0;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$12>>2]|0;
  $23 = (invoke_iiiiiiiiiiii(2,($1|0),($$byval_copy|0),($3|0),($10|0),($21|0),($5|0),($11|0),($16|0),($8|0),($9|0),($15|0))|0);
  $24 = __THREW__; __THREW__ = 0;
  $25 = $24&1;
  L4: do {
   if ($25) {
    label = 11;
   } else {
    if ($23) {
     $26 = ((($6)) + 8|0);
     $27 = ((($26)) + 3|0);
     $28 = HEAP8[$27>>0]|0;
     $29 = ($28<<24>>24)<(0);
     if ($29) {
      $30 = HEAP32[$6>>2]|0;
      HEAP32[$$byval_copy>>2] = 0;
      __ZNSt3__211char_traitsIwE6assignERwRKw($30,$$byval_copy);
      $31 = ((($6)) + 4|0);
      HEAP32[$31>>2] = 0;
     } else {
      HEAP32[$$byval_copy>>2] = 0;
      __ZNSt3__211char_traitsIwE6assignERwRKw($6,$$byval_copy);
      HEAP8[$27>>0] = 0;
     }
     $32 = HEAP8[$11>>0]|0;
     $33 = ($32<<24>>24)==(0);
     if (!($33)) {
      $34 = HEAP32[$16>>2]|0;
      $35 = ((($34)) + 44|0);
      $36 = HEAP32[$35>>2]|0;
      __THREW__ = 0;
      $37 = (invoke_iii($36|0,($16|0),45)|0);
      $38 = __THREW__; __THREW__ = 0;
      $39 = $38&1;
      if ($39) {
       label = 11;
       break;
      }
      __THREW__ = 0;
      invoke_vii(166,($6|0),($37|0));
      $40 = __THREW__; __THREW__ = 0;
      $41 = $40&1;
      if ($41) {
       label = 11;
       break;
      }
     }
     $46 = HEAP32[$16>>2]|0;
     $47 = ((($46)) + 44|0);
     $48 = HEAP32[$47>>2]|0;
     __THREW__ = 0;
     $49 = (invoke_iii($48|0,($16|0),48)|0);
     $50 = __THREW__; __THREW__ = 0;
     $51 = $50&1;
     if ($51) {
      $58 = ___cxa_find_matching_catch_2()|0;
      $59 = (getTempRet0() | 0);
      $$sink49$index = $58;$$sink49$index3 = $59;
      break;
     }
     $52 = HEAP32[$8>>2]|0;
     $53 = HEAP32[$9>>2]|0;
     $54 = ((($53)) + -4|0);
     $$0 = $52;
     while(1) {
      $55 = ($$0>>>0)<($54>>>0);
      if (!($55)) {
       break;
      }
      $56 = HEAP32[$$0>>2]|0;
      $57 = ($56|0)==($49|0);
      if (!($57)) {
       break;
      }
      $60 = ((($$0)) + 4|0);
      $$0 = $60;
     }
     __THREW__ = 0;
     (invoke_iiii(45,($6|0),($$0|0),($53|0))|0);
     $61 = __THREW__; __THREW__ = 0;
     $62 = $61&1;
     if ($62) {
      $63 = ___cxa_find_matching_catch_2()|0;
      $64 = (getTempRet0() | 0);
      $$sink49$index = $63;$$sink49$index3 = $64;
      break;
     }
    }
    $65 = HEAP32[$1>>2]|0;
    $66 = ($65|0)==(0|0);
    do {
     if ($66) {
      $116 = 1;
     } else {
      $67 = ((($65)) + 12|0);
      $68 = HEAP32[$67>>2]|0;
      $69 = ((($65)) + 16|0);
      $70 = HEAP32[$69>>2]|0;
      $71 = ($68|0)==($70|0);
      if ($71) {
       $72 = HEAP32[$65>>2]|0;
       $73 = ((($72)) + 36|0);
       $74 = HEAP32[$73>>2]|0;
       __THREW__ = 0;
       $75 = (invoke_ii($74|0,($65|0))|0);
       $76 = __THREW__; __THREW__ = 0;
       $77 = $76&1;
       if ($77) {
        label = 11;
        break L4;
       } else {
        $$0$i$i$i$i = $75;
       }
      } else {
       $78 = HEAP32[$68>>2]|0;
       $79 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($78)|0);
       $$0$i$i$i$i = $79;
      }
      $80 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
      $81 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i,$80)|0);
      if ($81) {
       HEAP32[$1>>2] = 0;
       $116 = 1;
       break;
      } else {
       $$pre$i$i$i = HEAP32[$1>>2]|0;
       $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
       $116 = $phitmp$i$i$i;
       break;
      }
     }
    } while(0);
    $82 = ($19|0)==(0);
    do {
     if ($82) {
      label = 33;
     } else {
      $83 = ((($22)) + 12|0);
      $84 = HEAP32[$83>>2]|0;
      $85 = ((($22)) + 16|0);
      $86 = HEAP32[$85>>2]|0;
      $87 = ($84|0)==($86|0);
      if ($87) {
       $88 = $19;
       $89 = HEAP32[$88>>2]|0;
       $90 = ((($89)) + 36|0);
       $91 = HEAP32[$90>>2]|0;
       __THREW__ = 0;
       $92 = (invoke_ii($91|0,($22|0))|0);
       $93 = __THREW__; __THREW__ = 0;
       $94 = $93&1;
       if ($94) {
        label = 11;
        break L4;
       } else {
        $$0$i$i2$i$i = $92;
       }
      } else {
       $95 = HEAP32[$84>>2]|0;
       $96 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($95)|0);
       $$0$i$i2$i$i = $96;
      }
      $97 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
      $98 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i,$97)|0);
      if ($98) {
       HEAP32[$2>>2] = 0;
       label = 33;
       break;
      } else {
       if ($116) {
        break;
       } else {
        label = 35;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 33) {
     if ($116) {
      label = 35;
     }
    }
    if ((label|0) == 35) {
     $99 = HEAP32[$5>>2]|0;
     $100 = $99 | 2;
     HEAP32[$5>>2] = $100;
    }
    $$sroa$0$0$copyload = HEAP32[$1>>2]|0;
    __ZNSt3__26localeD2Ev($10);
    $101 = HEAP32[$8>>2]|0;
    HEAP32[$8>>2] = 0;
    $102 = ($101|0)==(0|0);
    if (!($102)) {
     $103 = ((($8)) + 4|0);
     $104 = HEAP32[$103>>2]|0;
     __THREW__ = 0;
     invoke_vi($104|0,($101|0));
     $105 = __THREW__; __THREW__ = 0;
     $106 = $105&1;
     if ($106) {
      $107 = ___cxa_find_matching_catch_3(0|0)|0;
      $108 = (getTempRet0() | 0);
      ___clang_call_terminate($107);
      // unreachable;
     }
    }
    STACKTOP = sp;return ($$sroa$0$0$copyload|0);
   }
  } while(0);
  if ((label|0) == 11) {
   $44 = ___cxa_find_matching_catch_2()|0;
   $45 = (getTempRet0() | 0);
   $$sink49$index = $44;$$sink49$index3 = $45;
  }
  $$2 = $$sink49$index;$$236 = $$sink49$index3;
 }
 __ZNSt3__26localeD2Ev($10);
 $$pre = HEAP32[$8>>2]|0;
 HEAP32[$8>>2] = 0;
 $109 = ($$pre|0)==(0|0);
 if ($109) {
  $$33746 = $$236;$$348 = $$2;
 } else {
  $110 = ((($8)) + 4|0);
  $111 = HEAP32[$110>>2]|0;
  __THREW__ = 0;
  invoke_vi($111|0,($$pre|0));
  $112 = __THREW__; __THREW__ = 0;
  $113 = $112&1;
  if ($113) {
   $114 = ___cxa_find_matching_catch_3(0|0)|0;
   $115 = (getTempRet0() | 0);
   ___clang_call_terminate($114);
   // unreachable;
  } else {
   $$33746 = $$236;$$348 = $$2;
  }
 }
 ___resumeException($$348|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i188 = 0, $$0$i$i$i$i250 = 0, $$0$i$i$i$i270 = 0, $$0$i$i$i$i291 = 0, $$0$i$i$i$i309 = 0, $$0$i$i$i$i334 = 0, $$0$i$i170 = 0, $$0$i$i172 = 0, $$0$i$i175 = 0, $$0$i$i178 = 0, $$0$i$i183 = 0, $$0$i$i186 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i194 = 0, $$0$i$i2$i$i256 = 0, $$0$i$i2$i$i276 = 0, $$0$i$i2$i$i297 = 0;
 var $$0$i$i2$i$i315 = 0, $$0$i$i2$i$i340 = 0, $$0$i$i202 = 0, $$0$i$i207 = 0, $$0$i$i214 = 0, $$0$i$i219 = 0, $$0$i$i226 = 0, $$0$i$i233 = 0, $$0$i$i264 = 0, $$0$i$i284 = 0, $$0$i$i304 = 0, $$0$i$i323 = 0, $$0$i$i328 = 0, $$0$i$i348 = 0, $$0135 = 0, $$0152 = 0, $$0161 = 0, $$10 = 0, $$1153 = 0, $$2137$ph = 0;
 var $$5145 = 0, $$5151 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i190 = 0, $$pre$i$i$i252 = 0, $$pre$i$i$i272 = 0, $$pre$i$i$i293 = 0, $$pre$i$i$i311 = 0, $$pre$i$i$i336 = 0, $$pre$phiZ2D = 0, $$pre469 = 0, $$pre471 = 0, $$pre472 = 0, $$pre473 = 0, $$pre474 = 0, $$pre475 = 0, $$pre476 = 0, $$pre477 = 0, $$sink = 0;
 var $$sroa$0359$0$ptr = 0, $$sroa$0381$0 = 0, $$sroa$0381$1 = 0, $$sroa$0381$1$ptr = 0, $$sroa$08$0$ptr$i = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
 var $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0;
 var $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0;
 var $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0;
 var $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0;
 var $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0;
 var $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0;
 var $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0;
 var $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0;
 var $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0;
 var $496 = 0, $497 = 0, $498 = 0, $499 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0;
 var $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0;
 var $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0;
 var $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0;
 var $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0;
 var $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0;
 var $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0;
 var $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0;
 var $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0;
 var $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0;
 var $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0;
 var $696 = 0, $697 = 0, $698 = 0, $699 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0;
 var $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0;
 var $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0;
 var $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0;
 var $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0;
 var $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0;
 var $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0;
 var $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0;
 var $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0;
 var $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0;
 var $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0;
 var $896 = 0, $897 = 0, $898 = 0, $899 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0;
 var $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0;
 var $932 = 0, $933 = 0, $934 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $brmerge = 0, $cond169 = 0, $exitcond$i$i = 0, $exitcond$i$i171 = 0, $exitcond$i$i173 = 0, $exitcond$i$i176 = 0, $exitcond$i$i179 = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $lpad$phi424$index = 0, $lpad$phi424$index8 = 0;
 var $or$cond = 0, $or$cond13 = 0, $or$cond15 = 0, $or$cond166 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i191 = 0, $phitmp$i$i$i253 = 0, $phitmp$i$i$i273 = 0, $phitmp$i$i$i294 = 0, $phitmp$i$i$i312 = 0, $phitmp$i$i$i337 = 0, $spec$select = 0, $spec$select162 = 0, $spec$select163 = 0, $spec$select164 = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(512|0);
 $11 = sp + 496|0;
 $12 = sp;
 $13 = sp + 488|0;
 $14 = sp + 480|0;
 $15 = sp + 476|0;
 $16 = sp + 500|0;
 $17 = sp + 472|0;
 $18 = sp + 468|0;
 $19 = sp + 456|0;
 $20 = sp + 444|0;
 $21 = sp + 432|0;
 $22 = sp + 420|0;
 $23 = sp + 408|0;
 $24 = sp + 404|0;
 $25 = sp + 400|0;
 HEAP32[$11>>2] = $10;
 $26 = $12;
 HEAP32[$13>>2] = $26;
 $27 = ((($13)) + 4|0);
 HEAP32[$27>>2] = (308);
 HEAP32[$14>>2] = $12;
 $28 = ((($12)) + 400|0);
 HEAP32[$15>>2] = $28;
 ;HEAP32[$19>>2]=0|0;HEAP32[$19+4>>2]=0|0;HEAP32[$19+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $29 = (($19) + ($$0$i$i<<2)|0);
  HEAP32[$29>>2] = 0;
  $30 = (($$0$i$i) + 1)|0;
  $$0$i$i = $30;
 }
 ;HEAP32[$20>>2]=0|0;HEAP32[$20+4>>2]=0|0;HEAP32[$20+8>>2]=0|0;
 $$0$i$i170 = 0;
 while(1) {
  $exitcond$i$i171 = ($$0$i$i170|0)==(3);
  if ($exitcond$i$i171) {
   break;
  }
  $31 = (($20) + ($$0$i$i170<<2)|0);
  HEAP32[$31>>2] = 0;
  $32 = (($$0$i$i170) + 1)|0;
  $$0$i$i170 = $32;
 }
 ;HEAP32[$21>>2]=0|0;HEAP32[$21+4>>2]=0|0;HEAP32[$21+8>>2]=0|0;
 $$0$i$i172 = 0;
 while(1) {
  $exitcond$i$i173 = ($$0$i$i172|0)==(3);
  if ($exitcond$i$i173) {
   break;
  }
  $33 = (($21) + ($$0$i$i172<<2)|0);
  HEAP32[$33>>2] = 0;
  $34 = (($$0$i$i172) + 1)|0;
  $$0$i$i172 = $34;
 }
 ;HEAP32[$22>>2]=0|0;HEAP32[$22+4>>2]=0|0;HEAP32[$22+8>>2]=0|0;
 $$0$i$i175 = 0;
 while(1) {
  $exitcond$i$i176 = ($$0$i$i175|0)==(3);
  if ($exitcond$i$i176) {
   break;
  }
  $35 = (($22) + ($$0$i$i175<<2)|0);
  HEAP32[$35>>2] = 0;
  $36 = (($$0$i$i175) + 1)|0;
  $$0$i$i175 = $36;
 }
 ;HEAP32[$23>>2]=0|0;HEAP32[$23+4>>2]=0|0;HEAP32[$23+8>>2]=0|0;
 $$0$i$i178 = 0;
 while(1) {
  $exitcond$i$i179 = ($$0$i$i178|0)==(3);
  if ($exitcond$i$i179) {
   break;
  }
  $37 = (($23) + ($$0$i$i178<<2)|0);
  HEAP32[$37>>2] = 0;
  $38 = (($$0$i$i178) + 1)|0;
  $$0$i$i178 = $38;
 }
 __THREW__ = 0;
 invoke_viiiiiiiiii(2,($2|0),($3|0),($16|0),($17|0),($18|0),($19|0),($20|0),($21|0),($22|0),($24|0));
 $39 = __THREW__; __THREW__ = 0;
 $40 = $39&1;
 L21: do {
  if ($40) {
   $94 = ___cxa_find_matching_catch_2()|0;
   $95 = (getTempRet0() | 0);
   $$5145 = $94;$$5151 = $95;
  } else {
   $41 = HEAP32[$8>>2]|0;
   HEAP32[$9>>2] = $41;
   $42 = ((($21)) + 8|0);
   $43 = ((($42)) + 3|0);
   $44 = ((($21)) + 4|0);
   $45 = ((($22)) + 8|0);
   $46 = ((($45)) + 3|0);
   $47 = ((($22)) + 4|0);
   $48 = ((($19)) + 11|0);
   $49 = ((($19)) + 4|0);
   $50 = $4 & 512;
   $51 = ($50|0)!=(0);
   $52 = ((($20)) + 8|0);
   $53 = ((($52)) + 3|0);
   $54 = ((($16)) + 3|0);
   $55 = ((($20)) + 4|0);
   $56 = ((($23)) + 8|0);
   $57 = ((($56)) + 3|0);
   $58 = ((($23)) + 4|0);
   $$0152 = 0;$$0161 = 0;
   L24: while(1) {
    $59 = ($$0161>>>0)<(4);
    if (!($59)) {
     label = 263;
     break;
    }
    $60 = HEAP32[$0>>2]|0;
    $61 = ($60|0)==(0|0);
    do {
     if ($61) {
      $914 = 1;
     } else {
      $62 = ((($60)) + 12|0);
      $63 = HEAP32[$62>>2]|0;
      $64 = ((($60)) + 16|0);
      $65 = HEAP32[$64>>2]|0;
      $66 = ($63|0)==($65|0);
      if ($66) {
       $67 = HEAP32[$60>>2]|0;
       $68 = ((($67)) + 36|0);
       $69 = HEAP32[$68>>2]|0;
       __THREW__ = 0;
       $70 = (invoke_ii($69|0,($60|0))|0);
       $71 = __THREW__; __THREW__ = 0;
       $72 = $71&1;
       if ($72) {
        label = 36;
        break L24;
       } else {
        $$0$i$i$i$i = $70;
       }
      } else {
       $73 = HEAP32[$63>>2]|0;
       $74 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($73)|0);
       $$0$i$i$i$i = $74;
      }
      $75 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
      $76 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i,$75)|0);
      if ($76) {
       HEAP32[$0>>2] = 0;
       $914 = 1;
       break;
      } else {
       $$pre$i$i$i = HEAP32[$0>>2]|0;
       $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
       $914 = $phitmp$i$i$i;
       break;
      }
     }
    } while(0);
    $77 = HEAP32[$1>>2]|0;
    $78 = ($77|0)==(0|0);
    do {
     if ($78) {
      label = 32;
     } else {
      $79 = ((($77)) + 12|0);
      $80 = HEAP32[$79>>2]|0;
      $81 = ((($77)) + 16|0);
      $82 = HEAP32[$81>>2]|0;
      $83 = ($80|0)==($82|0);
      if ($83) {
       $84 = HEAP32[$77>>2]|0;
       $85 = ((($84)) + 36|0);
       $86 = HEAP32[$85>>2]|0;
       __THREW__ = 0;
       $87 = (invoke_ii($86|0,($77|0))|0);
       $88 = __THREW__; __THREW__ = 0;
       $89 = $88&1;
       if ($89) {
        label = 36;
        break L24;
       } else {
        $$0$i$i2$i$i = $87;
       }
      } else {
       $90 = HEAP32[$80>>2]|0;
       $91 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($90)|0);
       $$0$i$i2$i$i = $91;
      }
      $92 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
      $93 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i,$92)|0);
      if ($93) {
       HEAP32[$1>>2] = 0;
       label = 32;
       break;
      } else {
       if ($914) {
        $915 = $77;
        break;
       } else {
        label = 263;
        break L24;
       }
      }
     }
    } while(0);
    if ((label|0) == 32) {
     label = 0;
     if ($914) {
      label = 263;
      break;
     } else {
      $915 = 0;
     }
    }
    $100 = (($16) + ($$0161)|0);
    $101 = HEAP8[$100>>0]|0;
    $102 = $101 << 24 >> 24;
    L49: do {
     switch ($102|0) {
     case 1:  {
      $cond169 = ($$0161|0)==(3);
      if ($cond169) {
       $$1153 = $$0152;
      } else {
       $103 = HEAP32[$0>>2]|0;
       $104 = ((($103)) + 12|0);
       $105 = HEAP32[$104>>2]|0;
       $106 = ((($103)) + 16|0);
       $107 = HEAP32[$106>>2]|0;
       $108 = ($105|0)==($107|0);
       if ($108) {
        $109 = HEAP32[$103>>2]|0;
        $110 = ((($109)) + 36|0);
        $111 = HEAP32[$110>>2]|0;
        __THREW__ = 0;
        $112 = (invoke_ii($111|0,($103|0))|0);
        $113 = __THREW__; __THREW__ = 0;
        $114 = $113&1;
        if ($114) {
         label = 36;
         break L24;
        } else {
         $$0$i$i183 = $112;
        }
       } else {
        $115 = HEAP32[$105>>2]|0;
        $116 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($115)|0);
        $$0$i$i183 = $116;
       }
       $117 = HEAP32[$7>>2]|0;
       $118 = ((($117)) + 12|0);
       $119 = HEAP32[$118>>2]|0;
       __THREW__ = 0;
       $120 = (invoke_iiii($119|0,($7|0),8192,($$0$i$i183|0))|0);
       $121 = __THREW__; __THREW__ = 0;
       $122 = $121&1;
       if ($122) {
        label = 36;
        break L24;
       }
       if (!($120)) {
        label = 50;
        break L24;
       }
       $123 = HEAP32[$0>>2]|0;
       $124 = ((($123)) + 12|0);
       $125 = HEAP32[$124>>2]|0;
       $126 = ((($123)) + 16|0);
       $127 = HEAP32[$126>>2]|0;
       $128 = ($125|0)==($127|0);
       if ($128) {
        $129 = HEAP32[$123>>2]|0;
        $130 = ((($129)) + 40|0);
        $131 = HEAP32[$130>>2]|0;
        __THREW__ = 0;
        $132 = (invoke_ii($131|0,($123|0))|0);
        $133 = __THREW__; __THREW__ = 0;
        $134 = $133&1;
        if ($134) {
         label = 36;
         break L24;
        } else {
         $$0$i$i186 = $132;
        }
       } else {
        $135 = ((($125)) + 4|0);
        HEAP32[$124>>2] = $135;
        $136 = HEAP32[$125>>2]|0;
        $137 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($136)|0);
        $$0$i$i186 = $137;
       }
       __THREW__ = 0;
       invoke_vii(166,($23|0),($$0$i$i186|0));
       $138 = __THREW__; __THREW__ = 0;
       $139 = $138&1;
       if ($139) {
        label = 36;
        break L24;
       } else {
        label = 52;
       }
      }
      break;
     }
     case 0:  {
      $142 = ($$0161|0)==(3);
      if ($142) {
       $$1153 = $$0152;
      } else {
       label = 52;
      }
      break;
     }
     case 3:  {
      $214 = HEAP8[$43>>0]|0;
      $215 = ($214<<24>>24)<(0);
      $216 = HEAP32[$44>>2]|0;
      $217 = $214&255;
      $218 = $215 ? $216 : $217;
      $219 = HEAP8[$46>>0]|0;
      $220 = ($219<<24>>24)<(0);
      $221 = HEAP32[$47>>2]|0;
      $222 = $219&255;
      $223 = $220 ? $221 : $222;
      $224 = (0 - ($223))|0;
      $225 = ($218|0)==($224|0);
      if ($225) {
       $$1153 = $$0152;
      } else {
       $226 = ($218|0)==(0);
       if ($226) {
        $267 = HEAP32[$0>>2]|0;
        $268 = ((($267)) + 12|0);
        $269 = HEAP32[$268>>2]|0;
        $270 = ((($267)) + 16|0);
        $271 = HEAP32[$270>>2]|0;
        $272 = ($269|0)==($271|0);
        if ($272) {
         $273 = HEAP32[$267>>2]|0;
         $274 = ((($273)) + 36|0);
         $275 = HEAP32[$274>>2]|0;
         __THREW__ = 0;
         $276 = (invoke_ii($275|0,($267|0))|0);
         $277 = __THREW__; __THREW__ = 0;
         $278 = $277&1;
         if ($278) {
          label = 36;
          break L24;
         } else {
          $$0$i$i219 = $276;
         }
        } else {
         $279 = HEAP32[$269>>2]|0;
         $280 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($279)|0);
         $$0$i$i219 = $280;
        }
        $281 = HEAP8[$46>>0]|0;
        $282 = ($281<<24>>24)<(0);
        $283 = HEAP32[$22>>2]|0;
        $284 = $282 ? $283 : $22;
        $285 = HEAP32[$284>>2]|0;
        $286 = ($$0$i$i219|0)==($285|0);
        if (!($286)) {
         $$1153 = $$0152;
         break L49;
        }
        $287 = HEAP32[$0>>2]|0;
        $288 = ((($287)) + 12|0);
        $289 = HEAP32[$288>>2]|0;
        $290 = ((($287)) + 16|0);
        $291 = HEAP32[$290>>2]|0;
        $292 = ($289|0)==($291|0);
        if ($292) {
         $293 = HEAP32[$287>>2]|0;
         $294 = ((($293)) + 40|0);
         $295 = HEAP32[$294>>2]|0;
         __THREW__ = 0;
         (invoke_ii($295|0,($287|0))|0);
         $296 = __THREW__; __THREW__ = 0;
         $297 = $296&1;
         if ($297) {
          label = 36;
          break L24;
         }
        } else {
         $298 = ((($289)) + 4|0);
         HEAP32[$288>>2] = $298;
         $299 = HEAP32[$289>>2]|0;
         (__ZNSt3__211char_traitsIwE11to_int_typeEw($299)|0);
        }
        HEAP8[$6>>0] = 1;
        $300 = HEAP8[$46>>0]|0;
        $301 = ($300<<24>>24)<(0);
        $302 = HEAP32[$47>>2]|0;
        $303 = $300&255;
        $304 = $301 ? $302 : $303;
        $305 = ($304>>>0)>(1);
        $spec$select162 = $305 ? $22 : $$0152;
        $$1153 = $spec$select162;
        break L49;
       }
       $227 = ($223|0)==(0);
       $228 = HEAP32[$0>>2]|0;
       $229 = ((($228)) + 12|0);
       $230 = HEAP32[$229>>2]|0;
       $231 = ((($228)) + 16|0);
       $232 = HEAP32[$231>>2]|0;
       $233 = ($230|0)==($232|0);
       if ($227) {
        if ($233) {
         $234 = HEAP32[$228>>2]|0;
         $235 = ((($234)) + 36|0);
         $236 = HEAP32[$235>>2]|0;
         __THREW__ = 0;
         $237 = (invoke_ii($236|0,($228|0))|0);
         $238 = __THREW__; __THREW__ = 0;
         $239 = $238&1;
         if ($239) {
          label = 36;
          break L24;
         } else {
          $$0$i$i214 = $237;
         }
        } else {
         $240 = HEAP32[$230>>2]|0;
         $241 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($240)|0);
         $$0$i$i214 = $241;
        }
        $242 = HEAP8[$43>>0]|0;
        $243 = ($242<<24>>24)<(0);
        $244 = HEAP32[$21>>2]|0;
        $245 = $243 ? $244 : $21;
        $246 = HEAP32[$245>>2]|0;
        $247 = ($$0$i$i214|0)==($246|0);
        if (!($247)) {
         HEAP8[$6>>0] = 1;
         $$1153 = $$0152;
         break L49;
        }
        $248 = HEAP32[$0>>2]|0;
        $249 = ((($248)) + 12|0);
        $250 = HEAP32[$249>>2]|0;
        $251 = ((($248)) + 16|0);
        $252 = HEAP32[$251>>2]|0;
        $253 = ($250|0)==($252|0);
        if ($253) {
         $254 = HEAP32[$248>>2]|0;
         $255 = ((($254)) + 40|0);
         $256 = HEAP32[$255>>2]|0;
         __THREW__ = 0;
         (invoke_ii($256|0,($248|0))|0);
         $257 = __THREW__; __THREW__ = 0;
         $258 = $257&1;
         if ($258) {
          label = 36;
          break L24;
         }
        } else {
         $259 = ((($250)) + 4|0);
         HEAP32[$249>>2] = $259;
         $260 = HEAP32[$250>>2]|0;
         (__ZNSt3__211char_traitsIwE11to_int_typeEw($260)|0);
        }
        $261 = HEAP8[$43>>0]|0;
        $262 = ($261<<24>>24)<(0);
        $263 = HEAP32[$44>>2]|0;
        $264 = $261&255;
        $265 = $262 ? $263 : $264;
        $266 = ($265>>>0)>(1);
        $spec$select = $266 ? $21 : $$0152;
        $$1153 = $spec$select;
        break L49;
       }
       if ($233) {
        $306 = HEAP32[$228>>2]|0;
        $307 = ((($306)) + 36|0);
        $308 = HEAP32[$307>>2]|0;
        __THREW__ = 0;
        $309 = (invoke_ii($308|0,($228|0))|0);
        $310 = __THREW__; __THREW__ = 0;
        $311 = $310&1;
        if ($311) {
         label = 36;
         break L24;
        } else {
         $$0$i$i226 = $309;
        }
       } else {
        $312 = HEAP32[$230>>2]|0;
        $313 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($312)|0);
        $$0$i$i226 = $313;
       }
       $314 = HEAP8[$43>>0]|0;
       $315 = ($314<<24>>24)<(0);
       $316 = HEAP32[$21>>2]|0;
       $317 = $315 ? $316 : $21;
       $318 = HEAP32[$317>>2]|0;
       $319 = ($$0$i$i226|0)==($318|0);
       $320 = HEAP32[$0>>2]|0;
       $321 = ((($320)) + 12|0);
       $322 = HEAP32[$321>>2]|0;
       $323 = ((($320)) + 16|0);
       $324 = HEAP32[$323>>2]|0;
       $325 = ($322|0)==($324|0);
       if ($319) {
        if ($325) {
         $326 = HEAP32[$320>>2]|0;
         $327 = ((($326)) + 40|0);
         $328 = HEAP32[$327>>2]|0;
         __THREW__ = 0;
         (invoke_ii($328|0,($320|0))|0);
         $329 = __THREW__; __THREW__ = 0;
         $330 = $329&1;
         if ($330) {
          label = 36;
          break L24;
         }
        } else {
         $331 = ((($322)) + 4|0);
         HEAP32[$321>>2] = $331;
         $332 = HEAP32[$322>>2]|0;
         (__ZNSt3__211char_traitsIwE11to_int_typeEw($332)|0);
        }
        $333 = HEAP8[$43>>0]|0;
        $334 = ($333<<24>>24)<(0);
        $335 = HEAP32[$44>>2]|0;
        $336 = $333&255;
        $337 = $334 ? $335 : $336;
        $338 = ($337>>>0)>(1);
        $spec$select163 = $338 ? $21 : $$0152;
        $$1153 = $spec$select163;
        break L49;
       }
       if ($325) {
        $339 = HEAP32[$320>>2]|0;
        $340 = ((($339)) + 36|0);
        $341 = HEAP32[$340>>2]|0;
        __THREW__ = 0;
        $342 = (invoke_ii($341|0,($320|0))|0);
        $343 = __THREW__; __THREW__ = 0;
        $344 = $343&1;
        if ($344) {
         label = 36;
         break L24;
        } else {
         $$0$i$i233 = $342;
        }
       } else {
        $345 = HEAP32[$322>>2]|0;
        $346 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($345)|0);
        $$0$i$i233 = $346;
       }
       $347 = HEAP8[$46>>0]|0;
       $348 = ($347<<24>>24)<(0);
       $349 = HEAP32[$22>>2]|0;
       $350 = $348 ? $349 : $22;
       $351 = HEAP32[$350>>2]|0;
       $352 = ($$0$i$i233|0)==($351|0);
       if (!($352)) {
        label = 113;
        break L24;
       }
       $353 = HEAP32[$0>>2]|0;
       $354 = ((($353)) + 12|0);
       $355 = HEAP32[$354>>2]|0;
       $356 = ((($353)) + 16|0);
       $357 = HEAP32[$356>>2]|0;
       $358 = ($355|0)==($357|0);
       if ($358) {
        $359 = HEAP32[$353>>2]|0;
        $360 = ((($359)) + 40|0);
        $361 = HEAP32[$360>>2]|0;
        __THREW__ = 0;
        (invoke_ii($361|0,($353|0))|0);
        $362 = __THREW__; __THREW__ = 0;
        $363 = $362&1;
        if ($363) {
         label = 36;
         break L24;
        }
       } else {
        $364 = ((($355)) + 4|0);
        HEAP32[$354>>2] = $364;
        $365 = HEAP32[$355>>2]|0;
        (__ZNSt3__211char_traitsIwE11to_int_typeEw($365)|0);
       }
       HEAP8[$6>>0] = 1;
       $366 = HEAP8[$46>>0]|0;
       $367 = ($366<<24>>24)<(0);
       $368 = HEAP32[$47>>2]|0;
       $369 = $366&255;
       $370 = $367 ? $368 : $369;
       $371 = ($370>>>0)>(1);
       $spec$select164 = $371 ? $22 : $$0152;
       $$1153 = $spec$select164;
      }
      break;
     }
     case 2:  {
      $374 = ($$0152|0)!=(0|0);
      $375 = ($$0161>>>0)<(2);
      $or$cond = $375 | $374;
      if ($or$cond) {
       $385 = HEAP8[$53>>0]|0;
       $386 = ($385<<24>>24)<(0);
       $387 = HEAP32[$20>>2]|0;
       $388 = $386 ? $387 : $20;
       $389 = $388;
       $390 = ($$0161|0)==(0);
       if ($390) {
        $$sroa$0381$1 = $389;$922 = $387;$923 = $385;
       } else {
        $919 = $389;$920 = $387;$921 = $385;
        label = 118;
       }
      } else {
       $376 = ($$0161|0)==(2);
       $377 = HEAP8[$54>>0]|0;
       $378 = ($377<<24>>24)!=(0);
       $379 = $376 & $378;
       $brmerge = $51 | $379;
       if (!($brmerge)) {
        $$1153 = 0;
        break L49;
       }
       $380 = HEAP8[$53>>0]|0;
       $381 = ($380<<24>>24)<(0);
       $382 = HEAP32[$20>>2]|0;
       $383 = $381 ? $382 : $20;
       $384 = $383;
       $919 = $384;$920 = $382;$921 = $380;
       label = 118;
      }
      L116: do {
       if ((label|0) == 118) {
        label = 0;
        $391 = (($$0161) + -1)|0;
        $392 = (($16) + ($391)|0);
        $393 = HEAP8[$392>>0]|0;
        $switch = ($393&255)<(2);
        if ($switch) {
         $$sroa$0381$0 = $919;$395 = $921;$399 = $920;
         while(1) {
          $394 = ($395<<24>>24)<(0);
          $396 = HEAP32[$55>>2]|0;
          $397 = $395&255;
          $398 = $394 ? $399 : $20;
          $400 = $394 ? $396 : $397;
          $401 = (($398) + ($400<<2)|0);
          $402 = $$sroa$0381$0;
          $403 = ($401|0)==($402|0);
          if ($403) {
           $416 = $395;$418 = $399;
           break;
          }
          $404 = HEAP32[$402>>2]|0;
          $405 = HEAP32[$7>>2]|0;
          $406 = ((($405)) + 12|0);
          $407 = HEAP32[$406>>2]|0;
          __THREW__ = 0;
          $408 = (invoke_iiii($407|0,($7|0),8192,($404|0))|0);
          $409 = __THREW__; __THREW__ = 0;
          $410 = $409&1;
          if ($410) {
           label = 125;
           break L24;
          }
          if (!($408)) {
           label = 123;
           break;
          }
          $411 = ((($402)) + 4|0);
          $412 = $411;
          $$pre472 = HEAP8[$53>>0]|0;
          $$pre473 = HEAP32[$20>>2]|0;
          $$sroa$0381$0 = $412;$395 = $$pre472;$399 = $$pre473;
         }
         if ((label|0) == 123) {
          label = 0;
          $$pre474 = HEAP8[$53>>0]|0;
          $$pre475 = HEAP32[$20>>2]|0;
          $416 = $$pre474;$418 = $$pre475;
         }
         $415 = ($416<<24>>24)<(0);
         $417 = $415 ? $418 : $20;
         $419 = $417;
         $420 = (($$sroa$0381$0) - ($419))|0;
         $421 = $420 >> 2;
         $422 = HEAP8[$57>>0]|0;
         $423 = ($422<<24>>24)<(0);
         $424 = HEAP32[$58>>2]|0;
         $425 = $422&255;
         $426 = $423 ? $424 : $425;
         $427 = ($421>>>0)>($426>>>0);
         if ($427) {
          $$sroa$0381$1 = $419;$922 = $418;$923 = $416;
         } else {
          $428 = HEAP32[$23>>2]|0;
          $429 = (($428) + ($424<<2)|0);
          $430 = (($23) + ($425<<2)|0);
          $$sink = $423 ? $429 : $430;
          $$pre$phiZ2D = $423 ? $429 : $430;
          $431 = (0 - ($421))|0;
          $432 = (($$sink) + ($431<<2)|0);
          $$sroa$08$0$ptr$i = $417;$434 = $432;
          while(1) {
           $433 = ($434|0)==($$pre$phiZ2D|0);
           if ($433) {
            $$sroa$0381$1 = $$sroa$0381$0;$922 = $418;$923 = $416;
            break L116;
           }
           $435 = HEAP32[$434>>2]|0;
           $436 = HEAP32[$$sroa$08$0$ptr$i>>2]|0;
           $437 = ($435|0)==($436|0);
           if (!($437)) {
            $$sroa$0381$1 = $419;$922 = $418;$923 = $416;
            break L116;
           }
           $438 = ((($434)) + 4|0);
           $439 = ((($$sroa$08$0$ptr$i)) + 4|0);
           $$sroa$08$0$ptr$i = $439;$434 = $438;
          }
         }
        } else {
         $$sroa$0381$1 = $919;$922 = $920;$923 = $921;
        }
       }
      } while(0);
      $$sroa$0381$1$ptr = $$sroa$0381$1;
      $$sroa$0359$0$ptr = $$sroa$0381$1$ptr;$441 = $923;$445 = $922;$467 = $915;
      L133: while(1) {
       $440 = ($441<<24>>24)<(0);
       $442 = HEAP32[$55>>2]|0;
       $443 = $441&255;
       $444 = $440 ? $445 : $20;
       $446 = $440 ? $442 : $443;
       $447 = (($444) + ($446<<2)|0);
       $448 = ($$sroa$0359$0$ptr|0)==($447|0);
       if ($448) {
        break;
       }
       $449 = HEAP32[$0>>2]|0;
       $450 = ($449|0)==(0|0);
       do {
        if ($450) {
         $924 = 1;
        } else {
         $451 = ((($449)) + 12|0);
         $452 = HEAP32[$451>>2]|0;
         $453 = ((($449)) + 16|0);
         $454 = HEAP32[$453>>2]|0;
         $455 = ($452|0)==($454|0);
         if ($455) {
          $456 = HEAP32[$449>>2]|0;
          $457 = ((($456)) + 36|0);
          $458 = HEAP32[$457>>2]|0;
          __THREW__ = 0;
          $459 = (invoke_ii($458|0,($449|0))|0);
          $460 = __THREW__; __THREW__ = 0;
          $461 = $460&1;
          if ($461) {
           label = 156;
           break L24;
          } else {
           $$0$i$i$i$i250 = $459;
          }
         } else {
          $462 = HEAP32[$452>>2]|0;
          $463 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($462)|0);
          $$0$i$i$i$i250 = $463;
         }
         $464 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
         $465 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i250,$464)|0);
         if ($465) {
          HEAP32[$0>>2] = 0;
          $924 = 1;
          break;
         } else {
          $$pre$i$i$i252 = HEAP32[$0>>2]|0;
          $phitmp$i$i$i253 = ($$pre$i$i$i252|0)==(0|0);
          $924 = $phitmp$i$i$i253;
          break;
         }
        }
       } while(0);
       $466 = ($467|0)==(0|0);
       do {
        if ($466) {
         label = 146;
        } else {
         $468 = ((($467)) + 12|0);
         $469 = HEAP32[$468>>2]|0;
         $470 = ((($467)) + 16|0);
         $471 = HEAP32[$470>>2]|0;
         $472 = ($469|0)==($471|0);
         if ($472) {
          $473 = HEAP32[$467>>2]|0;
          $474 = ((($473)) + 36|0);
          $475 = HEAP32[$474>>2]|0;
          __THREW__ = 0;
          $476 = (invoke_ii($475|0,($467|0))|0);
          $477 = __THREW__; __THREW__ = 0;
          $478 = $477&1;
          if ($478) {
           label = 156;
           break L24;
          } else {
           $$0$i$i2$i$i256 = $476;
          }
         } else {
          $479 = HEAP32[$469>>2]|0;
          $480 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($479)|0);
          $$0$i$i2$i$i256 = $480;
         }
         $481 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
         $482 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i256,$481)|0);
         if ($482) {
          HEAP32[$1>>2] = 0;
          label = 146;
          break;
         } else {
          if ($924) {
           $925 = $467;
           break;
          } else {
           break L133;
          }
         }
        }
       } while(0);
       if ((label|0) == 146) {
        label = 0;
        if ($924) {
         break;
        } else {
         $925 = 0;
        }
       }
       $483 = HEAP32[$0>>2]|0;
       $484 = ((($483)) + 12|0);
       $485 = HEAP32[$484>>2]|0;
       $486 = ((($483)) + 16|0);
       $487 = HEAP32[$486>>2]|0;
       $488 = ($485|0)==($487|0);
       if ($488) {
        $489 = HEAP32[$483>>2]|0;
        $490 = ((($489)) + 36|0);
        $491 = HEAP32[$490>>2]|0;
        __THREW__ = 0;
        $492 = (invoke_ii($491|0,($483|0))|0);
        $493 = __THREW__; __THREW__ = 0;
        $494 = $493&1;
        if ($494) {
         label = 156;
         break L24;
        } else {
         $$0$i$i264 = $492;
        }
       } else {
        $495 = HEAP32[$485>>2]|0;
        $496 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($495)|0);
        $$0$i$i264 = $496;
       }
       $497 = HEAP32[$$sroa$0359$0$ptr>>2]|0;
       $498 = ($$0$i$i264|0)==($497|0);
       if (!($498)) {
        break;
       }
       $499 = HEAP32[$0>>2]|0;
       $500 = ((($499)) + 12|0);
       $501 = HEAP32[$500>>2]|0;
       $502 = ((($499)) + 16|0);
       $503 = HEAP32[$502>>2]|0;
       $504 = ($501|0)==($503|0);
       if ($504) {
        $505 = HEAP32[$499>>2]|0;
        $506 = ((($505)) + 40|0);
        $507 = HEAP32[$506>>2]|0;
        __THREW__ = 0;
        (invoke_ii($507|0,($499|0))|0);
        $508 = __THREW__; __THREW__ = 0;
        $509 = $508&1;
        if ($509) {
         label = 157;
         break L24;
        }
       } else {
        $510 = ((($501)) + 4|0);
        HEAP32[$500>>2] = $510;
        $511 = HEAP32[$501>>2]|0;
        (__ZNSt3__211char_traitsIwE11to_int_typeEw($511)|0);
       }
       $512 = ((($$sroa$0359$0$ptr)) + 4|0);
       $$pre476 = HEAP8[$53>>0]|0;
       $$pre477 = HEAP32[$20>>2]|0;
       $$sroa$0359$0$ptr = $512;$441 = $$pre476;$445 = $$pre477;$467 = $925;
      }
      if ($51) {
       $517 = HEAP8[$53>>0]|0;
       $518 = ($517<<24>>24)<(0);
       $519 = HEAP32[$20>>2]|0;
       $520 = HEAP32[$55>>2]|0;
       $521 = $517&255;
       $522 = $518 ? $519 : $20;
       $523 = $518 ? $520 : $521;
       $524 = (($522) + ($523<<2)|0);
       $525 = ($$sroa$0359$0$ptr|0)==($524|0);
       if ($525) {
        $$1153 = $$0152;
       } else {
        label = 160;
        break L24;
       }
      } else {
       $$1153 = $$0152;
      }
      break;
     }
     case 4:  {
      $$0135 = 0;$546 = $915;$916 = $915;
      L170: while(1) {
       $528 = HEAP32[$0>>2]|0;
       $529 = ($528|0)==(0|0);
       do {
        if ($529) {
         $926 = 1;
        } else {
         $530 = ((($528)) + 12|0);
         $531 = HEAP32[$530>>2]|0;
         $532 = ((($528)) + 16|0);
         $533 = HEAP32[$532>>2]|0;
         $534 = ($531|0)==($533|0);
         if ($534) {
          $535 = HEAP32[$528>>2]|0;
          $536 = ((($535)) + 36|0);
          $537 = HEAP32[$536>>2]|0;
          __THREW__ = 0;
          $538 = (invoke_ii($537|0,($528|0))|0);
          $539 = __THREW__; __THREW__ = 0;
          $540 = $539&1;
          if ($540) {
           label = 185;
           break L24;
          } else {
           $$0$i$i$i$i270 = $538;
          }
         } else {
          $541 = HEAP32[$531>>2]|0;
          $542 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($541)|0);
          $$0$i$i$i$i270 = $542;
         }
         $543 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
         $544 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i270,$543)|0);
         if ($544) {
          HEAP32[$0>>2] = 0;
          $926 = 1;
          break;
         } else {
          $$pre$i$i$i272 = HEAP32[$0>>2]|0;
          $phitmp$i$i$i273 = ($$pre$i$i$i272|0)==(0|0);
          $926 = $phitmp$i$i$i273;
          break;
         }
        }
       } while(0);
       $545 = ($546|0)==(0|0);
       do {
        if ($545) {
         $927 = $916;
         label = 174;
        } else {
         $547 = ((($546)) + 12|0);
         $548 = HEAP32[$547>>2]|0;
         $549 = ((($546)) + 16|0);
         $550 = HEAP32[$549>>2]|0;
         $551 = ($548|0)==($550|0);
         if ($551) {
          $552 = HEAP32[$546>>2]|0;
          $553 = ((($552)) + 36|0);
          $554 = HEAP32[$553>>2]|0;
          __THREW__ = 0;
          $555 = (invoke_ii($554|0,($546|0))|0);
          $556 = __THREW__; __THREW__ = 0;
          $557 = $556&1;
          if ($557) {
           label = 185;
           break L24;
          } else {
           $$0$i$i2$i$i276 = $555;
          }
         } else {
          $558 = HEAP32[$548>>2]|0;
          $559 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($558)|0);
          $$0$i$i2$i$i276 = $559;
         }
         $560 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
         $561 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i276,$560)|0);
         if ($561) {
          HEAP32[$1>>2] = 0;
          $927 = 0;
          label = 174;
          break;
         } else {
          if ($926) {
           $928 = $916;$929 = $546;
           break;
          } else {
           $657 = $916;
           break L170;
          }
         }
        }
       } while(0);
       if ((label|0) == 174) {
        label = 0;
        if ($926) {
         $657 = $927;
         break;
        } else {
         $928 = $927;$929 = 0;
        }
       }
       $562 = HEAP32[$0>>2]|0;
       $563 = ((($562)) + 12|0);
       $564 = HEAP32[$563>>2]|0;
       $565 = ((($562)) + 16|0);
       $566 = HEAP32[$565>>2]|0;
       $567 = ($564|0)==($566|0);
       if ($567) {
        $568 = HEAP32[$562>>2]|0;
        $569 = ((($568)) + 36|0);
        $570 = HEAP32[$569>>2]|0;
        __THREW__ = 0;
        $571 = (invoke_ii($570|0,($562|0))|0);
        $572 = __THREW__; __THREW__ = 0;
        $573 = $572&1;
        if ($573) {
         label = 188;
         break L24;
        } else {
         $$0$i$i284 = $571;
        }
       } else {
        $574 = HEAP32[$564>>2]|0;
        $575 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($574)|0);
        $$0$i$i284 = $575;
       }
       $576 = HEAP32[$7>>2]|0;
       $577 = ((($576)) + 12|0);
       $578 = HEAP32[$577>>2]|0;
       __THREW__ = 0;
       $579 = (invoke_iiii($578|0,($7|0),2048,($$0$i$i284|0))|0);
       $580 = __THREW__; __THREW__ = 0;
       $581 = $580&1;
       if ($581) {
        label = 188;
        break L24;
       }
       if ($579) {
        $582 = HEAP32[$9>>2]|0;
        $583 = HEAP32[$11>>2]|0;
        $584 = ($582|0)==($583|0);
        if ($584) {
         __THREW__ = 0;
         invoke_viii(34,($8|0),($9|0),($11|0));
         $585 = __THREW__; __THREW__ = 0;
         $586 = $585&1;
         if ($586) {
          label = 188;
          break L24;
         }
         $$pre469 = HEAP32[$9>>2]|0;
         $596 = $$pre469;
        } else {
         $596 = $582;
        }
        $595 = ((($596)) + 4|0);
        HEAP32[$9>>2] = $595;
        HEAP32[$596>>2] = $$0$i$i284;
        $597 = (($$0135) + 1)|0;
        $$2137$ph = $597;
       } else {
        $598 = HEAP8[$48>>0]|0;
        $599 = ($598<<24>>24)<(0);
        $600 = HEAP32[$49>>2]|0;
        $601 = $598&255;
        $602 = $599 ? $600 : $601;
        $603 = ($602|0)!=(0);
        $604 = ($$0135|0)!=(0);
        $or$cond13 = $604 & $603;
        $605 = HEAP32[$18>>2]|0;
        $606 = ($$0$i$i284|0)==($605|0);
        $or$cond166 = $606 & $or$cond13;
        if (!($or$cond166)) {
         $657 = $928;
         break;
        }
        $607 = HEAP32[$14>>2]|0;
        $608 = HEAP32[$15>>2]|0;
        $609 = ($607|0)==($608|0);
        if ($609) {
         __THREW__ = 0;
         invoke_viii(33,($13|0),($14|0),($15|0));
         $610 = __THREW__; __THREW__ = 0;
         $611 = $610&1;
         if ($611) {
          label = 188;
          break L24;
         }
         $$pre = HEAP32[$14>>2]|0;
         $613 = $$pre;
        } else {
         $613 = $607;
        }
        $612 = ((($613)) + 4|0);
        HEAP32[$14>>2] = $612;
        HEAP32[$613>>2] = $$0135;
        $$2137$ph = 0;
       }
       $614 = HEAP32[$0>>2]|0;
       $615 = ((($614)) + 12|0);
       $616 = HEAP32[$615>>2]|0;
       $617 = ((($614)) + 16|0);
       $618 = HEAP32[$617>>2]|0;
       $619 = ($616|0)==($618|0);
       if ($619) {
        $620 = HEAP32[$614>>2]|0;
        $621 = ((($620)) + 40|0);
        $622 = HEAP32[$621>>2]|0;
        __THREW__ = 0;
        (invoke_ii($622|0,($614|0))|0);
        $623 = __THREW__; __THREW__ = 0;
        $624 = $623&1;
        if ($624) {
         label = 185;
         break L24;
        }
       } else {
        $625 = ((($616)) + 4|0);
        HEAP32[$615>>2] = $625;
        $626 = HEAP32[$616>>2]|0;
        (__ZNSt3__211char_traitsIwE11to_int_typeEw($626)|0);
       }
       $$0135 = $$2137$ph;$546 = $929;$916 = $928;
      }
      $627 = HEAP32[$13>>2]|0;
      $628 = HEAP32[$14>>2]|0;
      $629 = ($627|0)!=($628|0);
      $630 = ($$0135|0)!=(0);
      $or$cond15 = $630 & $629;
      if ($or$cond15) {
       $631 = HEAP32[$15>>2]|0;
       $632 = ($628|0)==($631|0);
       if ($632) {
        __THREW__ = 0;
        invoke_viii(33,($13|0),($14|0),($15|0));
        $633 = __THREW__; __THREW__ = 0;
        $634 = $633&1;
        if ($634) {
         label = 186;
         break L24;
        }
        $$pre471 = HEAP32[$14>>2]|0;
        $636 = $$pre471;
       } else {
        $636 = $628;
       }
       $635 = ((($636)) + 4|0);
       HEAP32[$14>>2] = $635;
       HEAP32[$636>>2] = $$0135;
      }
      $637 = HEAP32[$24>>2]|0;
      $638 = ($637|0)>(0);
      L224: do {
       if ($638) {
        $639 = HEAP32[$0>>2]|0;
        $640 = ($639|0)==(0|0);
        do {
         if ($640) {
          $930 = 1;
         } else {
          $641 = ((($639)) + 12|0);
          $642 = HEAP32[$641>>2]|0;
          $643 = ((($639)) + 16|0);
          $644 = HEAP32[$643>>2]|0;
          $645 = ($642|0)==($644|0);
          if ($645) {
           $646 = HEAP32[$639>>2]|0;
           $647 = ((($646)) + 36|0);
           $648 = HEAP32[$647>>2]|0;
           __THREW__ = 0;
           $649 = (invoke_ii($648|0,($639|0))|0);
           $650 = __THREW__; __THREW__ = 0;
           $651 = $650&1;
           if ($651) {
            label = 186;
            break L24;
           } else {
            $$0$i$i$i$i291 = $649;
           }
          } else {
           $652 = HEAP32[$642>>2]|0;
           $653 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($652)|0);
           $$0$i$i$i$i291 = $653;
          }
          $654 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
          $655 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i291,$654)|0);
          if ($655) {
           HEAP32[$0>>2] = 0;
           $930 = 1;
           break;
          } else {
           $$pre$i$i$i293 = HEAP32[$0>>2]|0;
           $phitmp$i$i$i294 = ($$pre$i$i$i293|0)==(0|0);
           $930 = $phitmp$i$i$i294;
           break;
          }
         }
        } while(0);
        $656 = ($657|0)==(0|0);
        do {
         if ($656) {
          label = 218;
         } else {
          $658 = ((($657)) + 12|0);
          $659 = HEAP32[$658>>2]|0;
          $660 = ((($657)) + 16|0);
          $661 = HEAP32[$660>>2]|0;
          $662 = ($659|0)==($661|0);
          if ($662) {
           $663 = HEAP32[$657>>2]|0;
           $664 = ((($663)) + 36|0);
           $665 = HEAP32[$664>>2]|0;
           __THREW__ = 0;
           $666 = (invoke_ii($665|0,($657|0))|0);
           $667 = __THREW__; __THREW__ = 0;
           $668 = $667&1;
           if ($668) {
            label = 186;
            break L24;
           } else {
            $$0$i$i2$i$i297 = $666;
           }
          } else {
           $669 = HEAP32[$659>>2]|0;
           $670 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($669)|0);
           $$0$i$i2$i$i297 = $670;
          }
          $671 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
          $672 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i297,$671)|0);
          if ($672) {
           HEAP32[$1>>2] = 0;
           label = 218;
           break;
          } else {
           if ($930) {
            $931 = $657;
            break;
           } else {
            label = 224;
            break L24;
           }
          }
         }
        } while(0);
        if ((label|0) == 218) {
         label = 0;
         if ($930) {
          label = 224;
          break L24;
         } else {
          $931 = 0;
         }
        }
        $673 = HEAP32[$0>>2]|0;
        $674 = ((($673)) + 12|0);
        $675 = HEAP32[$674>>2]|0;
        $676 = ((($673)) + 16|0);
        $677 = HEAP32[$676>>2]|0;
        $678 = ($675|0)==($677|0);
        if ($678) {
         $679 = HEAP32[$673>>2]|0;
         $680 = ((($679)) + 36|0);
         $681 = HEAP32[$680>>2]|0;
         __THREW__ = 0;
         $682 = (invoke_ii($681|0,($673|0))|0);
         $683 = __THREW__; __THREW__ = 0;
         $684 = $683&1;
         if ($684) {
          label = 186;
          break L24;
         } else {
          $$0$i$i304 = $682;
         }
        } else {
         $685 = HEAP32[$675>>2]|0;
         $686 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($685)|0);
         $$0$i$i304 = $686;
        }
        $687 = HEAP32[$17>>2]|0;
        $688 = ($$0$i$i304|0)==($687|0);
        if (!($688)) {
         label = 224;
         break L24;
        }
        $691 = HEAP32[$0>>2]|0;
        $692 = ((($691)) + 12|0);
        $693 = HEAP32[$692>>2]|0;
        $694 = ((($691)) + 16|0);
        $695 = HEAP32[$694>>2]|0;
        $696 = ($693|0)==($695|0);
        if ($696) {
         $697 = HEAP32[$691>>2]|0;
         $698 = ((($697)) + 40|0);
         $699 = HEAP32[$698>>2]|0;
         __THREW__ = 0;
         (invoke_ii($699|0,($691|0))|0);
         $700 = __THREW__; __THREW__ = 0;
         $701 = $700&1;
         if ($701) {
          label = 186;
          break L24;
         }
        } else {
         $702 = ((($693)) + 4|0);
         HEAP32[$692>>2] = $702;
         $703 = HEAP32[$693>>2]|0;
         (__ZNSt3__211char_traitsIwE11to_int_typeEw($703)|0);
        }
        $724 = $931;
        while(1) {
         $704 = HEAP32[$24>>2]|0;
         $705 = ($704|0)>(0);
         if (!($705)) {
          break L224;
         }
         $706 = HEAP32[$0>>2]|0;
         $707 = ($706|0)==(0|0);
         do {
          if ($707) {
           $932 = 1;
          } else {
           $708 = ((($706)) + 12|0);
           $709 = HEAP32[$708>>2]|0;
           $710 = ((($706)) + 16|0);
           $711 = HEAP32[$710>>2]|0;
           $712 = ($709|0)==($711|0);
           if ($712) {
            $713 = HEAP32[$706>>2]|0;
            $714 = ((($713)) + 36|0);
            $715 = HEAP32[$714>>2]|0;
            __THREW__ = 0;
            $716 = (invoke_ii($715|0,($706|0))|0);
            $717 = __THREW__; __THREW__ = 0;
            $718 = $717&1;
            if ($718) {
             label = 184;
             break L24;
            } else {
             $$0$i$i$i$i309 = $716;
            }
           } else {
            $719 = HEAP32[$709>>2]|0;
            $720 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($719)|0);
            $$0$i$i$i$i309 = $720;
           }
           $721 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
           $722 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i309,$721)|0);
           if ($722) {
            HEAP32[$0>>2] = 0;
            $932 = 1;
            break;
           } else {
            $$pre$i$i$i311 = HEAP32[$0>>2]|0;
            $phitmp$i$i$i312 = ($$pre$i$i$i311|0)==(0|0);
            $932 = $phitmp$i$i$i312;
            break;
           }
          }
         } while(0);
         $723 = ($724|0)==(0|0);
         do {
          if ($723) {
           label = 243;
          } else {
           $725 = ((($724)) + 12|0);
           $726 = HEAP32[$725>>2]|0;
           $727 = ((($724)) + 16|0);
           $728 = HEAP32[$727>>2]|0;
           $729 = ($726|0)==($728|0);
           if ($729) {
            $730 = HEAP32[$724>>2]|0;
            $731 = ((($730)) + 36|0);
            $732 = HEAP32[$731>>2]|0;
            __THREW__ = 0;
            $733 = (invoke_ii($732|0,($724|0))|0);
            $734 = __THREW__; __THREW__ = 0;
            $735 = $734&1;
            if ($735) {
             label = 184;
             break L24;
            } else {
             $$0$i$i2$i$i315 = $733;
            }
           } else {
            $736 = HEAP32[$726>>2]|0;
            $737 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($736)|0);
            $$0$i$i2$i$i315 = $737;
           }
           $738 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
           $739 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i315,$738)|0);
           if ($739) {
            HEAP32[$1>>2] = 0;
            label = 243;
            break;
           } else {
            if ($932) {
             $933 = $724;
             break;
            } else {
             label = 250;
             break L24;
            }
           }
          }
         } while(0);
         if ((label|0) == 243) {
          label = 0;
          if ($932) {
           label = 250;
           break L24;
          } else {
           $933 = 0;
          }
         }
         $740 = HEAP32[$0>>2]|0;
         $741 = ((($740)) + 12|0);
         $742 = HEAP32[$741>>2]|0;
         $743 = ((($740)) + 16|0);
         $744 = HEAP32[$743>>2]|0;
         $745 = ($742|0)==($744|0);
         if ($745) {
          $746 = HEAP32[$740>>2]|0;
          $747 = ((($746)) + 36|0);
          $748 = HEAP32[$747>>2]|0;
          __THREW__ = 0;
          $749 = (invoke_ii($748|0,($740|0))|0);
          $750 = __THREW__; __THREW__ = 0;
          $751 = $750&1;
          if ($751) {
           label = 184;
           break L24;
          } else {
           $$0$i$i323 = $749;
          }
         } else {
          $752 = HEAP32[$742>>2]|0;
          $753 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($752)|0);
          $$0$i$i323 = $753;
         }
         $754 = HEAP32[$7>>2]|0;
         $755 = ((($754)) + 12|0);
         $756 = HEAP32[$755>>2]|0;
         __THREW__ = 0;
         $757 = (invoke_iiii($756|0,($7|0),2048,($$0$i$i323|0))|0);
         $758 = __THREW__; __THREW__ = 0;
         $759 = $758&1;
         if ($759) {
          label = 184;
          break L24;
         }
         if (!($757)) {
          label = 250;
          break L24;
         }
         $762 = HEAP32[$9>>2]|0;
         $763 = HEAP32[$11>>2]|0;
         $764 = ($762|0)==($763|0);
         if ($764) {
          __THREW__ = 0;
          invoke_viii(34,($8|0),($9|0),($11|0));
          $765 = __THREW__; __THREW__ = 0;
          $766 = $765&1;
          if ($766) {
           label = 184;
           break L24;
          }
         }
         $767 = HEAP32[$0>>2]|0;
         $768 = ((($767)) + 12|0);
         $769 = HEAP32[$768>>2]|0;
         $770 = ((($767)) + 16|0);
         $771 = HEAP32[$770>>2]|0;
         $772 = ($769|0)==($771|0);
         if ($772) {
          $773 = HEAP32[$767>>2]|0;
          $774 = ((($773)) + 36|0);
          $775 = HEAP32[$774>>2]|0;
          __THREW__ = 0;
          $776 = (invoke_ii($775|0,($767|0))|0);
          $777 = __THREW__; __THREW__ = 0;
          $778 = $777&1;
          if ($778) {
           label = 184;
           break L24;
          } else {
           $$0$i$i328 = $776;
          }
         } else {
          $779 = HEAP32[$769>>2]|0;
          $780 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($779)|0);
          $$0$i$i328 = $780;
         }
         $781 = HEAP32[$9>>2]|0;
         $782 = ((($781)) + 4|0);
         HEAP32[$9>>2] = $782;
         HEAP32[$781>>2] = $$0$i$i328;
         $783 = HEAP32[$24>>2]|0;
         $784 = (($783) + -1)|0;
         HEAP32[$24>>2] = $784;
         $785 = HEAP32[$0>>2]|0;
         $786 = ((($785)) + 12|0);
         $787 = HEAP32[$786>>2]|0;
         $788 = ((($785)) + 16|0);
         $789 = HEAP32[$788>>2]|0;
         $790 = ($787|0)==($789|0);
         if ($790) {
          $791 = HEAP32[$785>>2]|0;
          $792 = ((($791)) + 40|0);
          $793 = HEAP32[$792>>2]|0;
          __THREW__ = 0;
          (invoke_ii($793|0,($785|0))|0);
          $794 = __THREW__; __THREW__ = 0;
          $795 = $794&1;
          if ($795) {
           label = 184;
           break L24;
          }
         } else {
          $796 = ((($787)) + 4|0);
          HEAP32[$786>>2] = $796;
          $797 = HEAP32[$787>>2]|0;
          (__ZNSt3__211char_traitsIwE11to_int_typeEw($797)|0);
         }
         $724 = $933;
        }
       }
      } while(0);
      $798 = HEAP32[$9>>2]|0;
      $799 = HEAP32[$8>>2]|0;
      $800 = ($798|0)==($799|0);
      if ($800) {
       label = 261;
       break L24;
      } else {
       $$1153 = $$0152;
      }
      break;
     }
     default: {
      $$1153 = $$0152;
     }
     }
    } while(0);
    L300: do {
     if ((label|0) == 52) {
      label = 0;
      $161 = $915;
      while(1) {
       $143 = HEAP32[$0>>2]|0;
       $144 = ($143|0)==(0|0);
       do {
        if ($144) {
         $917 = 1;
        } else {
         $145 = ((($143)) + 12|0);
         $146 = HEAP32[$145>>2]|0;
         $147 = ((($143)) + 16|0);
         $148 = HEAP32[$147>>2]|0;
         $149 = ($146|0)==($148|0);
         if ($149) {
          $150 = HEAP32[$143>>2]|0;
          $151 = ((($150)) + 36|0);
          $152 = HEAP32[$151>>2]|0;
          __THREW__ = 0;
          $153 = (invoke_ii($152|0,($143|0))|0);
          $154 = __THREW__; __THREW__ = 0;
          $155 = $154&1;
          if ($155) {
           label = 35;
           break L24;
          } else {
           $$0$i$i$i$i188 = $153;
          }
         } else {
          $156 = HEAP32[$146>>2]|0;
          $157 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($156)|0);
          $$0$i$i$i$i188 = $157;
         }
         $158 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
         $159 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i188,$158)|0);
         if ($159) {
          HEAP32[$0>>2] = 0;
          $917 = 1;
          break;
         } else {
          $$pre$i$i$i190 = HEAP32[$0>>2]|0;
          $phitmp$i$i$i191 = ($$pre$i$i$i190|0)==(0|0);
          $917 = $phitmp$i$i$i191;
          break;
         }
        }
       } while(0);
       $160 = ($161|0)==(0|0);
       do {
        if ($160) {
         label = 66;
        } else {
         $162 = ((($161)) + 12|0);
         $163 = HEAP32[$162>>2]|0;
         $164 = ((($161)) + 16|0);
         $165 = HEAP32[$164>>2]|0;
         $166 = ($163|0)==($165|0);
         if ($166) {
          $167 = HEAP32[$161>>2]|0;
          $168 = ((($167)) + 36|0);
          $169 = HEAP32[$168>>2]|0;
          __THREW__ = 0;
          $170 = (invoke_ii($169|0,($161|0))|0);
          $171 = __THREW__; __THREW__ = 0;
          $172 = $171&1;
          if ($172) {
           label = 35;
           break L24;
          } else {
           $$0$i$i2$i$i194 = $170;
          }
         } else {
          $173 = HEAP32[$163>>2]|0;
          $174 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($173)|0);
          $$0$i$i2$i$i194 = $174;
         }
         $175 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
         $176 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i194,$175)|0);
         if ($176) {
          HEAP32[$1>>2] = 0;
          label = 66;
          break;
         } else {
          if ($917) {
           $918 = $161;
           break;
          } else {
           $$1153 = $$0152;
           break L300;
          }
         }
        }
       } while(0);
       if ((label|0) == 66) {
        label = 0;
        if ($917) {
         $$1153 = $$0152;
         break L300;
        } else {
         $918 = 0;
        }
       }
       $177 = HEAP32[$0>>2]|0;
       $178 = ((($177)) + 12|0);
       $179 = HEAP32[$178>>2]|0;
       $180 = ((($177)) + 16|0);
       $181 = HEAP32[$180>>2]|0;
       $182 = ($179|0)==($181|0);
       if ($182) {
        $183 = HEAP32[$177>>2]|0;
        $184 = ((($183)) + 36|0);
        $185 = HEAP32[$184>>2]|0;
        __THREW__ = 0;
        $186 = (invoke_ii($185|0,($177|0))|0);
        $187 = __THREW__; __THREW__ = 0;
        $188 = $187&1;
        if ($188) {
         label = 35;
         break L24;
        } else {
         $$0$i$i202 = $186;
        }
       } else {
        $189 = HEAP32[$179>>2]|0;
        $190 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($189)|0);
        $$0$i$i202 = $190;
       }
       $191 = HEAP32[$7>>2]|0;
       $192 = ((($191)) + 12|0);
       $193 = HEAP32[$192>>2]|0;
       __THREW__ = 0;
       $194 = (invoke_iiii($193|0,($7|0),8192,($$0$i$i202|0))|0);
       $195 = __THREW__; __THREW__ = 0;
       $196 = $195&1;
       if ($196) {
        label = 35;
        break L24;
       }
       if (!($194)) {
        $$1153 = $$0152;
        break L300;
       }
       $197 = HEAP32[$0>>2]|0;
       $198 = ((($197)) + 12|0);
       $199 = HEAP32[$198>>2]|0;
       $200 = ((($197)) + 16|0);
       $201 = HEAP32[$200>>2]|0;
       $202 = ($199|0)==($201|0);
       if ($202) {
        $203 = HEAP32[$197>>2]|0;
        $204 = ((($203)) + 40|0);
        $205 = HEAP32[$204>>2]|0;
        __THREW__ = 0;
        $206 = (invoke_ii($205|0,($197|0))|0);
        $207 = __THREW__; __THREW__ = 0;
        $208 = $207&1;
        if ($208) {
         label = 35;
         break L24;
        } else {
         $$0$i$i207 = $206;
        }
       } else {
        $209 = ((($199)) + 4|0);
        HEAP32[$198>>2] = $209;
        $210 = HEAP32[$199>>2]|0;
        $211 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($210)|0);
        $$0$i$i207 = $211;
       }
       __THREW__ = 0;
       invoke_vii(166,($23|0),($$0$i$i207|0));
       $212 = __THREW__; __THREW__ = 0;
       $213 = $212&1;
       if ($213) {
        label = 35;
        break L24;
       } else {
        $161 = $918;
       }
      }
     }
    } while(0);
    $803 = (($$0161) + 1)|0;
    $$0152 = $$1153;$$0161 = $803;
   }
   L337:    switch (label|0) {
    case 35: {
     $96 = ___cxa_find_matching_catch_2()|0;
     $97 = (getTempRet0() | 0);
     $lpad$phi$index = $96;$lpad$phi$index2 = $97;
     label = 37;
     break;
    }
    case 36: {
     $98 = ___cxa_find_matching_catch_2()|0;
     $99 = (getTempRet0() | 0);
     $lpad$phi$index = $98;$lpad$phi$index2 = $99;
     label = 37;
     break;
    }
    case 50: {
     $140 = HEAP32[$5>>2]|0;
     $141 = $140 | 4;
     HEAP32[$5>>2] = $141;
     $$10 = 0;
     label = 302;
     break;
    }
    case 113: {
     $372 = HEAP32[$5>>2]|0;
     $373 = $372 | 4;
     HEAP32[$5>>2] = $373;
     $$10 = 0;
     label = 302;
     break;
    }
    case 125: {
     $413 = ___cxa_find_matching_catch_2()|0;
     $414 = (getTempRet0() | 0);
     $$5145 = $413;$$5151 = $414;
     break L21;
     break;
    }
    case 156: {
     $513 = ___cxa_find_matching_catch_2()|0;
     $514 = (getTempRet0() | 0);
     $$5145 = $513;$$5151 = $514;
     break L21;
     break;
    }
    case 157: {
     $515 = ___cxa_find_matching_catch_2()|0;
     $516 = (getTempRet0() | 0);
     $$5145 = $515;$$5151 = $516;
     break L21;
     break;
    }
    case 160: {
     $526 = HEAP32[$5>>2]|0;
     $527 = $526 | 4;
     HEAP32[$5>>2] = $527;
     $$10 = 0;
     label = 302;
     break;
    }
    case 184: {
     $587 = ___cxa_find_matching_catch_2()|0;
     $588 = (getTempRet0() | 0);
     $lpad$phi424$index = $587;$lpad$phi424$index8 = $588;
     label = 187;
     break;
    }
    case 185: {
     $589 = ___cxa_find_matching_catch_2()|0;
     $590 = (getTempRet0() | 0);
     $lpad$phi424$index = $589;$lpad$phi424$index8 = $590;
     label = 187;
     break;
    }
    case 186: {
     $591 = ___cxa_find_matching_catch_2()|0;
     $592 = (getTempRet0() | 0);
     $lpad$phi424$index = $591;$lpad$phi424$index8 = $592;
     label = 187;
     break;
    }
    case 188: {
     $593 = ___cxa_find_matching_catch_2()|0;
     $594 = (getTempRet0() | 0);
     $$5145 = $593;$$5151 = $594;
     break L21;
     break;
    }
    case 224: {
     $689 = HEAP32[$5>>2]|0;
     $690 = $689 | 4;
     HEAP32[$5>>2] = $690;
     $$10 = 0;
     label = 302;
     break;
    }
    case 250: {
     $760 = HEAP32[$5>>2]|0;
     $761 = $760 | 4;
     HEAP32[$5>>2] = $761;
     $$10 = 0;
     label = 302;
     break;
    }
    case 261: {
     $801 = HEAP32[$5>>2]|0;
     $802 = $801 | 4;
     HEAP32[$5>>2] = $802;
     $$10 = 0;
     label = 302;
     break;
    }
    case 263: {
     $804 = ($$0152|0)==(0|0);
     L339: do {
      if (!($804)) {
       $805 = ((($$0152)) + 8|0);
       $806 = ((($805)) + 3|0);
       $807 = ((($$0152)) + 4|0);
       $$0 = 1;
       L341: while(1) {
        $808 = HEAP8[$806>>0]|0;
        $809 = ($808<<24>>24)<(0);
        if ($809) {
         $810 = HEAP32[$807>>2]|0;
         $813 = $810;
        } else {
         $811 = $808&255;
         $813 = $811;
        }
        $812 = ($$0>>>0)<($813>>>0);
        if (!($812)) {
         break L339;
        }
        $814 = HEAP32[$0>>2]|0;
        $815 = ($814|0)==(0|0);
        do {
         if ($815) {
          $934 = 1;
         } else {
          $816 = ((($814)) + 12|0);
          $817 = HEAP32[$816>>2]|0;
          $818 = ((($814)) + 16|0);
          $819 = HEAP32[$818>>2]|0;
          $820 = ($817|0)==($819|0);
          if ($820) {
           $821 = HEAP32[$814>>2]|0;
           $822 = ((($821)) + 36|0);
           $823 = HEAP32[$822>>2]|0;
           __THREW__ = 0;
           $824 = (invoke_ii($823|0,($814|0))|0);
           $825 = __THREW__; __THREW__ = 0;
           $826 = $825&1;
           if ($826) {
            label = 291;
            break L341;
           } else {
            $$0$i$i$i$i334 = $824;
           }
          } else {
           $827 = HEAP32[$817>>2]|0;
           $828 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($827)|0);
           $$0$i$i$i$i334 = $828;
          }
          $829 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
          $830 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i334,$829)|0);
          if ($830) {
           HEAP32[$0>>2] = 0;
           $934 = 1;
           break;
          } else {
           $$pre$i$i$i336 = HEAP32[$0>>2]|0;
           $phitmp$i$i$i337 = ($$pre$i$i$i336|0)==(0|0);
           $934 = $phitmp$i$i$i337;
           break;
          }
         }
        } while(0);
        $831 = HEAP32[$1>>2]|0;
        $832 = ($831|0)==(0|0);
        do {
         if ($832) {
          label = 282;
         } else {
          $833 = ((($831)) + 12|0);
          $834 = HEAP32[$833>>2]|0;
          $835 = ((($831)) + 16|0);
          $836 = HEAP32[$835>>2]|0;
          $837 = ($834|0)==($836|0);
          if ($837) {
           $838 = HEAP32[$831>>2]|0;
           $839 = ((($838)) + 36|0);
           $840 = HEAP32[$839>>2]|0;
           __THREW__ = 0;
           $841 = (invoke_ii($840|0,($831|0))|0);
           $842 = __THREW__; __THREW__ = 0;
           $843 = $842&1;
           if ($843) {
            label = 291;
            break L341;
           } else {
            $$0$i$i2$i$i340 = $841;
           }
          } else {
           $844 = HEAP32[$834>>2]|0;
           $845 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($844)|0);
           $$0$i$i2$i$i340 = $845;
          }
          $846 = (__ZNSt3__211char_traitsIwE3eofEv()|0);
          $847 = (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i340,$846)|0);
          if ($847) {
           HEAP32[$1>>2] = 0;
           label = 282;
           break;
          } else {
           if ($934) {
            break;
           } else {
            label = 290;
            break L341;
           }
          }
         }
        } while(0);
        if ((label|0) == 282) {
         label = 0;
         if ($934) {
          label = 290;
          break;
         }
        }
        $848 = HEAP32[$0>>2]|0;
        $849 = ((($848)) + 12|0);
        $850 = HEAP32[$849>>2]|0;
        $851 = ((($848)) + 16|0);
        $852 = HEAP32[$851>>2]|0;
        $853 = ($850|0)==($852|0);
        if ($853) {
         $854 = HEAP32[$848>>2]|0;
         $855 = ((($854)) + 36|0);
         $856 = HEAP32[$855>>2]|0;
         __THREW__ = 0;
         $857 = (invoke_ii($856|0,($848|0))|0);
         $858 = __THREW__; __THREW__ = 0;
         $859 = $858&1;
         if ($859) {
          label = 291;
          break;
         } else {
          $$0$i$i348 = $857;
         }
        } else {
         $860 = HEAP32[$850>>2]|0;
         $861 = (__ZNSt3__211char_traitsIwE11to_int_typeEw($860)|0);
         $$0$i$i348 = $861;
        }
        $862 = HEAP8[$806>>0]|0;
        $863 = ($862<<24>>24)<(0);
        if ($863) {
         $864 = HEAP32[$$0152>>2]|0;
         $866 = $864;
        } else {
         $866 = $$0152;
        }
        $865 = (($866) + ($$0<<2)|0);
        $867 = HEAP32[$865>>2]|0;
        $868 = ($$0$i$i348|0)==($867|0);
        if (!($868)) {
         label = 290;
         break;
        }
        $873 = HEAP32[$0>>2]|0;
        $874 = ((($873)) + 12|0);
        $875 = HEAP32[$874>>2]|0;
        $876 = ((($873)) + 16|0);
        $877 = HEAP32[$876>>2]|0;
        $878 = ($875|0)==($877|0);
        if ($878) {
         $879 = HEAP32[$873>>2]|0;
         $880 = ((($879)) + 40|0);
         $881 = HEAP32[$880>>2]|0;
         __THREW__ = 0;
         (invoke_ii($881|0,($873|0))|0);
         $882 = __THREW__; __THREW__ = 0;
         $883 = $882&1;
         if ($883) {
          label = 291;
          break;
         }
        } else {
         $884 = ((($875)) + 4|0);
         HEAP32[$874>>2] = $884;
         $885 = HEAP32[$875>>2]|0;
         (__ZNSt3__211char_traitsIwE11to_int_typeEw($885)|0);
        }
        $886 = (($$0) + 1)|0;
        $$0 = $886;
       }
       if ((label|0) == 290) {
        $869 = HEAP32[$5>>2]|0;
        $870 = $869 | 4;
        HEAP32[$5>>2] = $870;
        $$10 = 0;
        label = 302;
        break L337;
       }
       else if ((label|0) == 291) {
        $871 = ___cxa_find_matching_catch_2()|0;
        $872 = (getTempRet0() | 0);
        $$5145 = $871;$$5151 = $872;
        break L21;
       }
      }
     } while(0);
     $887 = HEAP32[$13>>2]|0;
     $888 = HEAP32[$14>>2]|0;
     $889 = ($887|0)==($888|0);
     if ($889) {
      $$10 = 1;
      label = 302;
     } else {
      HEAP32[$25>>2] = 0;
      __THREW__ = 0;
      invoke_viiii(30,($19|0),($887|0),($888|0),($25|0));
      $890 = __THREW__; __THREW__ = 0;
      $891 = $890&1;
      if ($891) {
       $896 = ___cxa_find_matching_catch_2()|0;
       $897 = (getTempRet0() | 0);
       $$5145 = $896;$$5151 = $897;
       break L21;
      }
      $892 = HEAP32[$25>>2]|0;
      $893 = ($892|0)==(0);
      if ($893) {
       $$10 = 1;
       label = 302;
       break;
      } else {
       $894 = HEAP32[$5>>2]|0;
       $895 = $894 | 4;
       HEAP32[$5>>2] = $895;
       $$10 = 0;
       label = 302;
       break;
      }
     }
     break;
    }
   }
   if ((label|0) == 37) {
    $$5145 = $lpad$phi$index;$$5151 = $lpad$phi$index2;
    break;
   }
   else if ((label|0) == 187) {
    $$5145 = $lpad$phi424$index;$$5151 = $lpad$phi424$index8;
    break;
   }
   else if ((label|0) == 302) {
    __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($23);
    __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($22);
    __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($21);
    __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($20);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($19);
    $898 = HEAP32[$13>>2]|0;
    HEAP32[$13>>2] = 0;
    $899 = ($898|0)==(0|0);
    if (!($899)) {
     $900 = ((($13)) + 4|0);
     $901 = HEAP32[$900>>2]|0;
     __THREW__ = 0;
     invoke_vi($901|0,($898|0));
     $902 = __THREW__; __THREW__ = 0;
     $903 = $902&1;
     if ($903) {
      $904 = ___cxa_find_matching_catch_3(0|0)|0;
      $905 = (getTempRet0() | 0);
      ___clang_call_terminate($904);
      // unreachable;
     }
    }
    STACKTOP = sp;return ($$10|0);
   }
  }
 } while(0);
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($23);
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($22);
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($21);
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($20);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($19);
 $906 = HEAP32[$13>>2]|0;
 HEAP32[$13>>2] = 0;
 $907 = ($906|0)==(0|0);
 if (!($907)) {
  $908 = ((($13)) + 4|0);
  $909 = HEAP32[$908>>2]|0;
  __THREW__ = 0;
  invoke_vi($909|0,($906|0));
  $910 = __THREW__; __THREW__ = 0;
  $911 = $910&1;
  if ($911) {
   $912 = ___cxa_find_matching_catch_3(0|0)|0;
   $913 = (getTempRet0() | 0);
   ___clang_call_terminate($912);
   // unreachable;
  }
 }
 ___resumeException($$5145|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE23__append_forward_unsafeIPwEERS5_T_S9_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$040 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = ((($0)) + 8|0);
 $5 = ((($4)) + 3|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = ($6<<24>>24)<(0);
 if ($7) {
  $9 = ((($0)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = HEAP32[$4>>2]|0;
  $12 = $11 & 2147483647;
  $phitmp$i = (($12) + -1)|0;
  $41 = $phitmp$i;$42 = $10;
 } else {
  $8 = $6&255;
  $41 = 1;$42 = $8;
 }
 $13 = $2;
 $14 = $1;
 $15 = (($13) - ($14))|0;
 $16 = $15 >> 2;
 $17 = ($15|0)==(0);
 do {
  if (!($17)) {
   if ($7) {
    $18 = HEAP32[$0>>2]|0;
    $19 = ((($0)) + 4|0);
    $20 = HEAP32[$19>>2]|0;
    $23 = $18;$24 = $20;
   } else {
    $21 = $6&255;
    $23 = $0;$24 = $21;
   }
   $22 = (($23) + ($24<<2)|0);
   $25 = (__ZNSt3__214__ptr_in_rangeIwEEbPKT_S3_S3_($1,$23,$22)|0);
   if ($25) {
    ;HEAP32[$3>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;
    __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initIPwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_($3,$1,$2);
    $26 = ((($3)) + 8|0);
    $27 = ((($26)) + 3|0);
    $28 = HEAP8[$27>>0]|0;
    $29 = ($28<<24>>24)<(0);
    $30 = HEAP32[$3>>2]|0;
    $31 = ((($3)) + 4|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = $28&255;
    $34 = $29 ? $30 : $3;
    $35 = $29 ? $32 : $33;
    __THREW__ = 0;
    (invoke_iiii(46,($0|0),($34|0),($35|0))|0);
    $36 = __THREW__; __THREW__ = 0;
    $37 = $36&1;
    if ($37) {
     $38 = ___cxa_find_matching_catch_2()|0;
     $39 = (getTempRet0() | 0);
     __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($3);
     ___resumeException($38|0);
     // unreachable;
    } else {
     __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($3);
     break;
    }
   }
   $40 = (($41) - ($42))|0;
   $43 = ($40>>>0)<($16>>>0);
   if ($43) {
    $44 = (($42) + ($16))|0;
    $45 = (($44) - ($41))|0;
    __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEmmmmmm($0,$41,$45,$42,$42,0,0);
   }
   $46 = HEAP8[$5>>0]|0;
   $47 = ($46<<24>>24)<(0);
   if ($47) {
    $48 = HEAP32[$0>>2]|0;
    $50 = $48;
   } else {
    $50 = $0;
   }
   $49 = (($50) + ($42<<2)|0);
   $$0 = $49;$$040 = $1;
   while(1) {
    $51 = ($$040|0)==($2|0);
    if ($51) {
     break;
    }
    __ZNSt3__211char_traitsIwE6assignERwRKw($$0,$$040);
    $52 = ((($$0)) + 4|0);
    $53 = ((($$040)) + 4|0);
    $$0 = $52;$$040 = $53;
   }
   HEAP32[$3>>2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($$0,$3);
   $54 = (($42) + ($16))|0;
   $55 = HEAP8[$5>>0]|0;
   $56 = ($55<<24>>24)<(0);
   if ($56) {
    $57 = ((($0)) + 4|0);
    HEAP32[$57>>2] = $54;
    break;
   } else {
    $58 = $54&255;
    HEAP8[$5>>0] = $58;
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return ($0|0);
}
function __ZNSt3__214__ptr_in_rangeIwEEbPKT_S3_S3_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1>>>0)<=($0>>>0);
 $4 = ($0>>>0)<($2>>>0);
 $spec$select = $3 & $4;
 return ($spec$select|0);
}
function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initIPwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$1 = 0, $$1$ph = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = $2;
 $5 = $1;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 2;
 $8 = ($7>>>0)>(1073741807);
 if ($8) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $9 = ($7>>>0)<(2);
 do {
  if ($9) {
   $10 = $7&255;
   $11 = ((($0)) + 8|0);
   $12 = ((($11)) + 3|0);
   HEAP8[$12>>0] = $10;
   $$1$ph = $0;
  } else {
   $13 = (($7) + 4)|0;
   $14 = $13 & -4;
   $15 = ($14>>>0)>(1073741823);
   if (!($15)) {
    $21 = $14 << 2;
    $22 = (__Znwm($21)|0);
    HEAP32[$0>>2] = $22;
    $23 = $14 | -2147483648;
    $24 = ((($0)) + 8|0);
    HEAP32[$24>>2] = $23;
    $25 = ((($0)) + 4|0);
    HEAP32[$25>>2] = $7;
    $$1$ph = $22;
    break;
   }
   $16 = (___cxa_allocate_exception(8)|0);
   __THREW__ = 0;
   invoke_vii(45,($16|0),(43841|0));
   $17 = __THREW__; __THREW__ = 0;
   $18 = $17&1;
   if ($18) {
    $19 = ___cxa_find_matching_catch_2()|0;
    $20 = (getTempRet0() | 0);
    ___cxa_free_exception(($16|0));
    ___resumeException($19|0);
    // unreachable;
   } else {
    HEAP32[$16>>2] = (30800);
    ___cxa_throw(($16|0),(24744|0),(226|0));
    // unreachable;
   }
  }
 } while(0);
 $$0 = $1;$$1 = $$1$ph;
 while(1) {
  $26 = ($$0|0)==($2|0);
  if ($26) {
   break;
  }
  __ZNSt3__211char_traitsIwE6assignERwRKw($$1,$$0);
  $27 = ((($$0)) + 4|0);
  $28 = ((($$1)) + 4|0);
  $$0 = $27;$$1 = $28;
 }
 HEAP32[$3>>2] = 0;
 __ZNSt3__211char_traitsIwE6assignERwRKw($$1,$3);
 STACKTOP = sp;return;
}
function __ZNSt3__211__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri($0,$1,$2,$3,$4,$5,$6,$7,$8,$9) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 var $$0$i$i$i = 0, $$0$i$i$i40 = 0, $$0$i$i$i43 = 0, $$0$i$i$i47 = 0, $$0$i$i$i52 = 0, $$0$i$i$i57 = 0, $$0$i$i$i62 = 0, $$0$i$i$i67 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $exitcond$i$i$i = 0, $exitcond$i$i$i41 = 0, $exitcond$i$i$i44 = 0, $exitcond$i$i$i48 = 0, $exitcond$i$i$i53 = 0, $exitcond$i$i$i58 = 0, $exitcond$i$i$i63 = 0, $exitcond$i$i$i68 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $10 = sp + 12|0;
 $11 = sp;
 if ($0) {
  $12 = (__ZNKSt3__26locale9use_facetERNS0_2idE($1,50988)|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ((($13)) + 44|0);
  $15 = HEAP32[$14>>2]|0;
  FUNCTION_TABLE_vii[$15 & 255]($10,$12);
  $16 = HEAP32[$10>>2]|0;
  HEAP8[$2>>0]=$16&255;HEAP8[$2+1>>0]=($16>>8)&255;HEAP8[$2+2>>0]=($16>>16)&255;HEAP8[$2+3>>0]=$16>>24;
  $17 = HEAP32[$12>>2]|0;
  $18 = ((($17)) + 32|0);
  $19 = HEAP32[$18>>2]|0;
  FUNCTION_TABLE_vii[$19 & 255]($11,$12);
  $20 = ((($8)) + 8|0);
  $21 = ((($20)) + 3|0);
  $22 = HEAP8[$21>>0]|0;
  $23 = ($22<<24>>24)<(0);
  if ($23) {
   $24 = HEAP32[$8>>2]|0;
   HEAP32[$10>>2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($24,$10);
   $25 = ((($8)) + 4|0);
   HEAP32[$25>>2] = 0;
  } else {
   HEAP32[$10>>2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($8,$10);
   HEAP8[$21>>0] = 0;
  }
  __THREW__ = 0;
  invoke_vii(167,($8|0),0);
  $26 = __THREW__; __THREW__ = 0;
  $27 = $26&1;
  if ($27) {
   $28 = ___cxa_find_matching_catch_3(0|0)|0;
   $29 = (getTempRet0() | 0);
   ___clang_call_terminate($28);
   // unreachable;
  }
  ;HEAP32[$8>>2]=HEAP32[$11>>2]|0;HEAP32[$8+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$11+8>>2]|0;
  $$0$i$i$i = 0;
  while(1) {
   $exitcond$i$i$i = ($$0$i$i$i|0)==(3);
   if ($exitcond$i$i$i) {
    break;
   }
   $30 = (($11) + ($$0$i$i$i<<2)|0);
   HEAP32[$30>>2] = 0;
   $31 = (($$0$i$i$i) + 1)|0;
   $$0$i$i$i = $31;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($11);
  $32 = HEAP32[$12>>2]|0;
  $33 = ((($32)) + 28|0);
  $34 = HEAP32[$33>>2]|0;
  FUNCTION_TABLE_vii[$34 & 255]($11,$12);
  $35 = ((($7)) + 8|0);
  $36 = ((($35)) + 3|0);
  $37 = HEAP8[$36>>0]|0;
  $38 = ($37<<24>>24)<(0);
  if ($38) {
   $39 = HEAP32[$7>>2]|0;
   HEAP32[$10>>2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($39,$10);
   $40 = ((($7)) + 4|0);
   HEAP32[$40>>2] = 0;
  } else {
   HEAP32[$10>>2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($7,$10);
   HEAP8[$36>>0] = 0;
  }
  __THREW__ = 0;
  invoke_vii(167,($7|0),0);
  $41 = __THREW__; __THREW__ = 0;
  $42 = $41&1;
  if ($42) {
   $43 = ___cxa_find_matching_catch_3(0|0)|0;
   $44 = (getTempRet0() | 0);
   ___clang_call_terminate($43);
   // unreachable;
  }
  ;HEAP32[$7>>2]=HEAP32[$11>>2]|0;HEAP32[$7+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$7+8>>2]=HEAP32[$11+8>>2]|0;
  $$0$i$i$i40 = 0;
  while(1) {
   $exitcond$i$i$i41 = ($$0$i$i$i40|0)==(3);
   if ($exitcond$i$i$i41) {
    break;
   }
   $45 = (($11) + ($$0$i$i$i40<<2)|0);
   HEAP32[$45>>2] = 0;
   $46 = (($$0$i$i$i40) + 1)|0;
   $$0$i$i$i40 = $46;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($11);
  $47 = HEAP32[$12>>2]|0;
  $48 = ((($47)) + 12|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = (FUNCTION_TABLE_ii[$49 & 255]($12)|0);
  HEAP32[$3>>2] = $50;
  $51 = HEAP32[$12>>2]|0;
  $52 = ((($51)) + 16|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = (FUNCTION_TABLE_ii[$53 & 255]($12)|0);
  HEAP32[$4>>2] = $54;
  $55 = HEAP32[$12>>2]|0;
  $56 = ((($55)) + 20|0);
  $57 = HEAP32[$56>>2]|0;
  FUNCTION_TABLE_vii[$57 & 255]($11,$12);
  $58 = ((($5)) + 11|0);
  $59 = HEAP8[$58>>0]|0;
  $60 = ($59<<24>>24)<(0);
  if ($60) {
   $61 = HEAP32[$5>>2]|0;
   HEAP8[$10>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($61,$10);
   $62 = ((($5)) + 4|0);
   HEAP32[$62>>2] = 0;
  } else {
   HEAP8[$10>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($5,$10);
   HEAP8[$58>>0] = 0;
  }
  __THREW__ = 0;
  invoke_vii(165,($5|0),0);
  $63 = __THREW__; __THREW__ = 0;
  $64 = $63&1;
  if ($64) {
   $65 = ___cxa_find_matching_catch_3(0|0)|0;
   $66 = (getTempRet0() | 0);
   ___clang_call_terminate($65);
   // unreachable;
  }
  ;HEAP32[$5>>2]=HEAP32[$11>>2]|0;HEAP32[$5+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$11+8>>2]|0;
  $$0$i$i$i43 = 0;
  while(1) {
   $exitcond$i$i$i44 = ($$0$i$i$i43|0)==(3);
   if ($exitcond$i$i$i44) {
    break;
   }
   $67 = (($11) + ($$0$i$i$i43<<2)|0);
   HEAP32[$67>>2] = 0;
   $68 = (($$0$i$i$i43) + 1)|0;
   $$0$i$i$i43 = $68;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($11);
  $69 = HEAP32[$12>>2]|0;
  $70 = ((($69)) + 24|0);
  $71 = HEAP32[$70>>2]|0;
  FUNCTION_TABLE_vii[$71 & 255]($11,$12);
  $72 = ((($6)) + 8|0);
  $73 = ((($72)) + 3|0);
  $74 = HEAP8[$73>>0]|0;
  $75 = ($74<<24>>24)<(0);
  if ($75) {
   $76 = HEAP32[$6>>2]|0;
   HEAP32[$10>>2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($76,$10);
   $77 = ((($6)) + 4|0);
   HEAP32[$77>>2] = 0;
  } else {
   HEAP32[$10>>2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($6,$10);
   HEAP8[$73>>0] = 0;
  }
  __THREW__ = 0;
  invoke_vii(167,($6|0),0);
  $78 = __THREW__; __THREW__ = 0;
  $79 = $78&1;
  if ($79) {
   $80 = ___cxa_find_matching_catch_3(0|0)|0;
   $81 = (getTempRet0() | 0);
   ___clang_call_terminate($80);
   // unreachable;
  }
  ;HEAP32[$6>>2]=HEAP32[$11>>2]|0;HEAP32[$6+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$11+8>>2]|0;
  $$0$i$i$i47 = 0;
  while(1) {
   $exitcond$i$i$i48 = ($$0$i$i$i47|0)==(3);
   if ($exitcond$i$i$i48) {
    break;
   }
   $82 = (($11) + ($$0$i$i$i47<<2)|0);
   HEAP32[$82>>2] = 0;
   $83 = (($$0$i$i$i47) + 1)|0;
   $$0$i$i$i47 = $83;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($11);
  $84 = HEAP32[$12>>2]|0;
  $85 = ((($84)) + 36|0);
  $86 = HEAP32[$85>>2]|0;
  $87 = (FUNCTION_TABLE_ii[$86 & 255]($12)|0);
  $storemerge = $87;
 } else {
  $88 = (__ZNKSt3__26locale9use_facetERNS0_2idE($1,50980)|0);
  $89 = HEAP32[$88>>2]|0;
  $90 = ((($89)) + 44|0);
  $91 = HEAP32[$90>>2]|0;
  FUNCTION_TABLE_vii[$91 & 255]($10,$88);
  $92 = HEAP32[$10>>2]|0;
  HEAP8[$2>>0]=$92&255;HEAP8[$2+1>>0]=($92>>8)&255;HEAP8[$2+2>>0]=($92>>16)&255;HEAP8[$2+3>>0]=$92>>24;
  $93 = HEAP32[$88>>2]|0;
  $94 = ((($93)) + 32|0);
  $95 = HEAP32[$94>>2]|0;
  FUNCTION_TABLE_vii[$95 & 255]($11,$88);
  $96 = ((($8)) + 8|0);
  $97 = ((($96)) + 3|0);
  $98 = HEAP8[$97>>0]|0;
  $99 = ($98<<24>>24)<(0);
  if ($99) {
   $100 = HEAP32[$8>>2]|0;
   HEAP32[$10>>2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($100,$10);
   $101 = ((($8)) + 4|0);
   HEAP32[$101>>2] = 0;
  } else {
   HEAP32[$10>>2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($8,$10);
   HEAP8[$97>>0] = 0;
  }
  __THREW__ = 0;
  invoke_vii(167,($8|0),0);
  $102 = __THREW__; __THREW__ = 0;
  $103 = $102&1;
  if ($103) {
   $104 = ___cxa_find_matching_catch_3(0|0)|0;
   $105 = (getTempRet0() | 0);
   ___clang_call_terminate($104);
   // unreachable;
  }
  ;HEAP32[$8>>2]=HEAP32[$11>>2]|0;HEAP32[$8+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$11+8>>2]|0;
  $$0$i$i$i52 = 0;
  while(1) {
   $exitcond$i$i$i53 = ($$0$i$i$i52|0)==(3);
   if ($exitcond$i$i$i53) {
    break;
   }
   $106 = (($11) + ($$0$i$i$i52<<2)|0);
   HEAP32[$106>>2] = 0;
   $107 = (($$0$i$i$i52) + 1)|0;
   $$0$i$i$i52 = $107;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($11);
  $108 = HEAP32[$88>>2]|0;
  $109 = ((($108)) + 28|0);
  $110 = HEAP32[$109>>2]|0;
  FUNCTION_TABLE_vii[$110 & 255]($11,$88);
  $111 = ((($7)) + 8|0);
  $112 = ((($111)) + 3|0);
  $113 = HEAP8[$112>>0]|0;
  $114 = ($113<<24>>24)<(0);
  if ($114) {
   $115 = HEAP32[$7>>2]|0;
   HEAP32[$10>>2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($115,$10);
   $116 = ((($7)) + 4|0);
   HEAP32[$116>>2] = 0;
  } else {
   HEAP32[$10>>2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($7,$10);
   HEAP8[$112>>0] = 0;
  }
  __THREW__ = 0;
  invoke_vii(167,($7|0),0);
  $117 = __THREW__; __THREW__ = 0;
  $118 = $117&1;
  if ($118) {
   $119 = ___cxa_find_matching_catch_3(0|0)|0;
   $120 = (getTempRet0() | 0);
   ___clang_call_terminate($119);
   // unreachable;
  }
  ;HEAP32[$7>>2]=HEAP32[$11>>2]|0;HEAP32[$7+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$7+8>>2]=HEAP32[$11+8>>2]|0;
  $$0$i$i$i57 = 0;
  while(1) {
   $exitcond$i$i$i58 = ($$0$i$i$i57|0)==(3);
   if ($exitcond$i$i$i58) {
    break;
   }
   $121 = (($11) + ($$0$i$i$i57<<2)|0);
   HEAP32[$121>>2] = 0;
   $122 = (($$0$i$i$i57) + 1)|0;
   $$0$i$i$i57 = $122;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($11);
  $123 = HEAP32[$88>>2]|0;
  $124 = ((($123)) + 12|0);
  $125 = HEAP32[$124>>2]|0;
  $126 = (FUNCTION_TABLE_ii[$125 & 255]($88)|0);
  HEAP32[$3>>2] = $126;
  $127 = HEAP32[$88>>2]|0;
  $128 = ((($127)) + 16|0);
  $129 = HEAP32[$128>>2]|0;
  $130 = (FUNCTION_TABLE_ii[$129 & 255]($88)|0);
  HEAP32[$4>>2] = $130;
  $131 = HEAP32[$88>>2]|0;
  $132 = ((($131)) + 20|0);
  $133 = HEAP32[$132>>2]|0;
  FUNCTION_TABLE_vii[$133 & 255]($11,$88);
  $134 = ((($5)) + 11|0);
  $135 = HEAP8[$134>>0]|0;
  $136 = ($135<<24>>24)<(0);
  if ($136) {
   $137 = HEAP32[$5>>2]|0;
   HEAP8[$10>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($137,$10);
   $138 = ((($5)) + 4|0);
   HEAP32[$138>>2] = 0;
  } else {
   HEAP8[$10>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($5,$10);
   HEAP8[$134>>0] = 0;
  }
  __THREW__ = 0;
  invoke_vii(165,($5|0),0);
  $139 = __THREW__; __THREW__ = 0;
  $140 = $139&1;
  if ($140) {
   $141 = ___cxa_find_matching_catch_3(0|0)|0;
   $142 = (getTempRet0() | 0);
   ___clang_call_terminate($141);
   // unreachable;
  }
  ;HEAP32[$5>>2]=HEAP32[$11>>2]|0;HEAP32[$5+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$11+8>>2]|0;
  $$0$i$i$i62 = 0;
  while(1) {
   $exitcond$i$i$i63 = ($$0$i$i$i62|0)==(3);
   if ($exitcond$i$i$i63) {
    break;
   }
   $143 = (($11) + ($$0$i$i$i62<<2)|0);
   HEAP32[$143>>2] = 0;
   $144 = (($$0$i$i$i62) + 1)|0;
   $$0$i$i$i62 = $144;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($11);
  $145 = HEAP32[$88>>2]|0;
  $146 = ((($145)) + 24|0);
  $147 = HEAP32[$146>>2]|0;
  FUNCTION_TABLE_vii[$147 & 255]($11,$88);
  $148 = ((($6)) + 8|0);
  $149 = ((($148)) + 3|0);
  $150 = HEAP8[$149>>0]|0;
  $151 = ($150<<24>>24)<(0);
  if ($151) {
   $152 = HEAP32[$6>>2]|0;
   HEAP32[$10>>2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($152,$10);
   $153 = ((($6)) + 4|0);
   HEAP32[$153>>2] = 0;
  } else {
   HEAP32[$10>>2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($6,$10);
   HEAP8[$149>>0] = 0;
  }
  __THREW__ = 0;
  invoke_vii(167,($6|0),0);
  $154 = __THREW__; __THREW__ = 0;
  $155 = $154&1;
  if ($155) {
   $156 = ___cxa_find_matching_catch_3(0|0)|0;
   $157 = (getTempRet0() | 0);
   ___clang_call_terminate($156);
   // unreachable;
  }
  ;HEAP32[$6>>2]=HEAP32[$11>>2]|0;HEAP32[$6+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$11+8>>2]|0;
  $$0$i$i$i67 = 0;
  while(1) {
   $exitcond$i$i$i68 = ($$0$i$i$i67|0)==(3);
   if ($exitcond$i$i$i68) {
    break;
   }
   $158 = (($11) + ($$0$i$i$i67<<2)|0);
   HEAP32[$158>>2] = 0;
   $159 = (($$0$i$i$i67) + 1)|0;
   $$0$i$i$i67 = $159;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($11);
  $160 = HEAP32[$88>>2]|0;
  $161 = ((($160)) + 36|0);
  $162 = HEAP32[$161>>2]|0;
  $163 = (FUNCTION_TABLE_ii[$162 & 255]($88)|0);
  $storemerge = $163;
 }
 HEAP32[$9>>2] = $storemerge;
 STACKTOP = sp;return;
}
function __ZNSt3__219__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$pr = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, $spec$select35 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(308|0);
 $6 = HEAP32[$2>>2]|0;
 $7 = HEAP32[$0>>2]|0;
 $8 = $7;
 $9 = (($6) - ($8))|0;
 $10 = ($9>>>0)<(2147483647);
 $11 = $9 << 1;
 $12 = ($11|0)==(0);
 $spec$select = $12 ? 4 : $11;
 $13 = $10 ? $spec$select : -1;
 $14 = HEAP32[$1>>2]|0;
 $15 = (($14) - ($8))|0;
 $16 = $15 >> 2;
 $spec$select35 = $5 ? $7 : 0;
 $17 = (_realloc($spec$select35,$13)|0);
 $18 = ($17|0)==(0|0);
 if ($18) {
  __ZSt17__throw_bad_allocv();
  // unreachable;
 }
 do {
  if ($5) {
   $19 = $17;
   HEAP32[$0>>2] = $19;
   $29 = $17;
  } else {
   $$pr = HEAP32[$0>>2]|0;
   $20 = $17;
   HEAP32[$0>>2] = $20;
   $21 = ($$pr|0)==(0|0);
   if ($21) {
    $29 = $17;
   } else {
    $22 = HEAP32[$3>>2]|0;
    __THREW__ = 0;
    invoke_vi($22|0,($$pr|0));
    $23 = __THREW__; __THREW__ = 0;
    $24 = $23&1;
    if ($24) {
     $25 = ___cxa_find_matching_catch_3(0|0)|0;
     $26 = (getTempRet0() | 0);
     ___clang_call_terminate($25);
     // unreachable;
    } else {
     $$pre = HEAP32[$0>>2]|0;
     $29 = $$pre;
     break;
    }
   }
  }
 } while(0);
 HEAP32[$3>>2] = (310);
 $27 = $13 >>> 2;
 $28 = (($29) + ($16<<2)|0);
 HEAP32[$1>>2] = $28;
 $30 = HEAP32[$0>>2]|0;
 $31 = (($30) + ($27<<2)|0);
 HEAP32[$2>>2] = $31;
 return;
}
function __ZNSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}
function __ZNSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = +$5;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i55 = 0, $$0$i$i58 = 0, $$045 = 0, $$046 = 0, $$047 = 0, $$048 = 0, $$1 = 0, $$149 = 0, $$2 = 0, $$250 = 0, $$4 = 0, $$452 = 0, $$byval_copy = 0, $$sink104 = 0, $$sink105 = 0, $$sink106 = 0, $$sroa$070$0 = 0, $$sroa$070$1 = 0;
 var $$sroa$082$0 = 0, $$sroa$082$1 = 0, $$sroa$082$2 = 0, $$sroa$095$0 = 0, $$sroa$095$1 = 0, $$sroa$095$2 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i = 0, $exitcond$i$i56 = 0, $exitcond$i$i59 = 0;
 var $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 416|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(416|0);
 $$byval_copy = sp + 336|0;
 $vararg_buffer1 = sp + 328|0;
 $6 = sp + 224|0;
 $7 = sp + 400|0;
 $8 = sp + 112|0;
 $9 = sp + 396|0;
 $10 = sp + 408|0;
 $11 = sp + 405|0;
 $12 = sp + 404|0;
 $13 = sp + 384|0;
 $14 = sp + 372|0;
 $15 = sp + 360|0;
 $16 = sp + 356|0;
 $17 = sp;
 $18 = sp + 352|0;
 $19 = sp + 348|0;
 $20 = sp + 344|0;
 HEAP32[$7>>2] = $6;
 HEAPF64[$$byval_copy>>3] = $5;
 $21 = (_snprintf($6,100,43149,$$byval_copy)|0);
 $22 = ($21>>>0)>(99);
 L1: do {
  if ($22) {
   __THREW__ = 0;
   $23 = (invoke_i(24)|0);
   $24 = __THREW__; __THREW__ = 0;
   $25 = $24&1;
   do {
    if ($25) {
     $$sroa$082$0 = 0;$$sroa$095$0 = 0;
    } else {
     __THREW__ = 0;
     HEAPF64[$vararg_buffer1>>3] = $5;
     $26 = (invoke_iiiii(18,($7|0),($23|0),(43149|0),($vararg_buffer1|0))|0);
     $27 = __THREW__; __THREW__ = 0;
     $28 = $27&1;
     if ($28) {
      $$sroa$082$0 = 0;$$sroa$095$0 = 0;
     } else {
      $29 = HEAP32[$7>>2]|0;
      $30 = ($29|0)==(0|0);
      if ($30) {
       __THREW__ = 0;
       invoke_v(4);
       $31 = __THREW__; __THREW__ = 0;
       $$sroa$082$0 = 0;$$sroa$095$0 = 0;
       break;
      }
      $34 = $29;
      $35 = (_malloc($26)|0);
      $36 = $35;
      $37 = ($35|0)==(0|0);
      if (!($37)) {
       $$0 = $35;$$046 = $26;$$sroa$082$1 = $36;$$sroa$095$1 = $34;
       label = 9;
       break L1;
      }
      __THREW__ = 0;
      invoke_v(4);
      $38 = __THREW__; __THREW__ = 0;
      $$sroa$082$0 = $36;$$sroa$095$0 = $34;
     }
    }
   } while(0);
   $32 = ___cxa_find_matching_catch_2()|0;
   $33 = (getTempRet0() | 0);
   $$4 = $32;$$452 = $33;$$sroa$082$2 = $$sroa$082$0;$$sroa$095$2 = $$sroa$095$0;
  } else {
   $$0 = $8;$$046 = $21;$$sroa$082$1 = 0;$$sroa$095$1 = 0;
   label = 9;
  }
 } while(0);
 if ((label|0) == 9) {
  __ZNKSt3__28ios_base6getlocEv($9,$3);
  __THREW__ = 0;
  $39 = (invoke_iii(37,($9|0),(50740|0))|0);
  $40 = __THREW__; __THREW__ = 0;
  $41 = $40&1;
  if ($41) {
   label = 29;
  } else {
   $42 = HEAP32[$7>>2]|0;
   $43 = (($42) + ($$046)|0);
   $44 = HEAP32[$39>>2]|0;
   $45 = ((($44)) + 32|0);
   $46 = HEAP32[$45>>2]|0;
   __THREW__ = 0;
   (invoke_iiiii($46|0,($39|0),($42|0),($43|0),($$0|0))|0);
   $47 = __THREW__; __THREW__ = 0;
   $48 = $47&1;
   if ($48) {
    label = 29;
   } else {
    $49 = ($$046|0)==(0);
    if ($49) {
     $59 = 0;
    } else {
     $50 = HEAP32[$7>>2]|0;
     $51 = HEAP8[$50>>0]|0;
     $52 = ($51<<24>>24)==(45);
     $59 = $52;
    }
    ;HEAP32[$13>>2]=0|0;HEAP32[$13+4>>2]=0|0;HEAP32[$13+8>>2]=0|0;
    $$0$i$i = 0;
    while(1) {
     $exitcond$i$i = ($$0$i$i|0)==(3);
     if ($exitcond$i$i) {
      break;
     }
     $53 = (($13) + ($$0$i$i<<2)|0);
     HEAP32[$53>>2] = 0;
     $54 = (($$0$i$i) + 1)|0;
     $$0$i$i = $54;
    }
    ;HEAP32[$14>>2]=0|0;HEAP32[$14+4>>2]=0|0;HEAP32[$14+8>>2]=0|0;
    $$0$i$i55 = 0;
    while(1) {
     $exitcond$i$i56 = ($$0$i$i55|0)==(3);
     if ($exitcond$i$i56) {
      break;
     }
     $55 = (($14) + ($$0$i$i55<<2)|0);
     HEAP32[$55>>2] = 0;
     $56 = (($$0$i$i55) + 1)|0;
     $$0$i$i55 = $56;
    }
    ;HEAP32[$15>>2]=0|0;HEAP32[$15+4>>2]=0|0;HEAP32[$15+8>>2]=0|0;
    $$0$i$i58 = 0;
    while(1) {
     $exitcond$i$i59 = ($$0$i$i58|0)==(3);
     if ($exitcond$i$i59) {
      break;
     }
     $57 = (($15) + ($$0$i$i58<<2)|0);
     HEAP32[$57>>2] = 0;
     $58 = (($$0$i$i58) + 1)|0;
     $$0$i$i58 = $58;
    }
    __THREW__ = 0;
    invoke_viiiiiiiiii(3,($2|0),($59|0),($9|0),($10|0),($11|0),($12|0),($13|0),($14|0),($15|0),($16|0));
    $60 = __THREW__; __THREW__ = 0;
    $61 = $60&1;
    if ($61) {
     $108 = ___cxa_find_matching_catch_2()|0;
     $109 = (getTempRet0() | 0);
     $$1 = $108;$$149 = $109;
    } else {
     $62 = HEAP32[$16>>2]|0;
     $63 = ($$046|0)>($62|0);
     if ($63) {
      $64 = (($$046) - ($62))|0;
      $65 = $64 << 1;
      $66 = ((($15)) + 11|0);
      $67 = HEAP8[$66>>0]|0;
      $68 = ($67<<24>>24)<(0);
      $69 = ((($15)) + 4|0);
      $70 = HEAP32[$69>>2]|0;
      $71 = $67&255;
      $72 = $68 ? $70 : $71;
      $73 = ((($14)) + 11|0);
      $74 = HEAP8[$73>>0]|0;
      $75 = ($74<<24>>24)<(0);
      $76 = ((($14)) + 4|0);
      $77 = HEAP32[$76>>2]|0;
      $78 = $74&255;
      $79 = $75 ? $77 : $78;
      $80 = (($62) + 1)|0;
      $81 = (($80) + ($65))|0;
      $$sink104 = $79;$$sink105 = $81;$$sink106 = $72;
     } else {
      $82 = ((($15)) + 11|0);
      $83 = HEAP8[$82>>0]|0;
      $84 = ($83<<24>>24)<(0);
      $85 = ((($15)) + 4|0);
      $86 = HEAP32[$85>>2]|0;
      $87 = $83&255;
      $88 = $84 ? $86 : $87;
      $89 = ((($14)) + 11|0);
      $90 = HEAP8[$89>>0]|0;
      $91 = ($90<<24>>24)<(0);
      $92 = ((($14)) + 4|0);
      $93 = HEAP32[$92>>2]|0;
      $94 = $90&255;
      $95 = $91 ? $93 : $94;
      $96 = (($62) + 2)|0;
      $$sink104 = $95;$$sink105 = $96;$$sink106 = $88;
     }
     $97 = (($$sink105) + ($$sink106))|0;
     $98 = (($97) + ($$sink104))|0;
     $99 = ($98>>>0)>(100);
     if ($99) {
      $100 = (_malloc($98)|0);
      $101 = $100;
      $102 = ($100|0)==(0|0);
      if ($102) {
       __THREW__ = 0;
       invoke_v(4);
       $103 = __THREW__; __THREW__ = 0;
       $104 = ___cxa_find_matching_catch_2()|0;
       $105 = (getTempRet0() | 0);
       $$047 = $104;$$048 = $105;$$sroa$070$1 = $101;
      } else {
       $$045 = $100;$$sroa$070$0 = $101;
       label = 31;
      }
     } else {
      $$045 = $17;$$sroa$070$0 = 0;
      label = 31;
     }
     if ((label|0) == 31) {
      $110 = ((($3)) + 4|0);
      $111 = HEAP32[$110>>2]|0;
      $112 = (($$0) + ($$046)|0);
      $113 = HEAP8[$11>>0]|0;
      $114 = HEAP8[$12>>0]|0;
      __THREW__ = 0;
      invoke_viiiiiiiiiiiiiii(1,($$045|0),($18|0),($19|0),($111|0),($$0|0),($112|0),($39|0),($59|0),($10|0),($113|0),($114|0),($13|0),($14|0),($15|0),($62|0));
      $115 = __THREW__; __THREW__ = 0;
      $116 = $115&1;
      if (!($116)) {
       $117 = HEAP32[$1>>2]|0;
       HEAP32[$20>>2] = $117;
       $118 = HEAP32[$18>>2]|0;
       $119 = HEAP32[$19>>2]|0;
       __THREW__ = 0;
       ;HEAP32[$$byval_copy>>2]=HEAP32[$20>>2]|0;
       $120 = (invoke_iiiiiii(39,($$byval_copy|0),($$045|0),($118|0),($119|0),($3|0),($4|0))|0);
       $121 = __THREW__; __THREW__ = 0;
       $122 = $121&1;
       if (!($122)) {
        $123 = ($$sroa$070$0|0)==(0);
        if (!($123)) {
         $124 = $$sroa$070$0;
         _free($124);
        }
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($15);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($14);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($13);
        __ZNSt3__26localeD2Ev($9);
        $125 = ($$sroa$082$1|0)==(0);
        if (!($125)) {
         $126 = $$sroa$082$1;
         _free($126);
        }
        $127 = ($$sroa$095$1|0)==(0);
        if (!($127)) {
         $128 = $$sroa$095$1;
         _free($128);
        }
        STACKTOP = sp;return ($120|0);
       }
      }
      $129 = ___cxa_find_matching_catch_2()|0;
      $130 = (getTempRet0() | 0);
      $$047 = $129;$$048 = $130;$$sroa$070$1 = $$sroa$070$0;
     }
     $131 = ($$sroa$070$1|0)==(0);
     if (!($131)) {
      $132 = $$sroa$070$1;
      _free($132);
     }
     $$1 = $$047;$$149 = $$048;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($15);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($14);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($13);
    $$2 = $$1;$$250 = $$149;
   }
  }
  if ((label|0) == 29) {
   $106 = ___cxa_find_matching_catch_2()|0;
   $107 = (getTempRet0() | 0);
   $$2 = $106;$$250 = $107;
  }
  __ZNSt3__26localeD2Ev($9);
  $$4 = $$2;$$452 = $$250;$$sroa$082$2 = $$sroa$082$1;$$sroa$095$2 = $$sroa$095$1;
 }
 $133 = ($$sroa$082$2|0)==(0);
 if (!($133)) {
  $134 = $$sroa$082$2;
  _free($134);
 }
 $135 = ($$sroa$095$2|0)==(0);
 if (!($135)) {
  $136 = $$sroa$095$2;
  _free($136);
 }
 ___resumeException($$4|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i36 = 0, $$0$i$i39 = 0, $$031 = 0, $$032 = 0, $$1 = 0, $$133 = 0, $$3 = 0, $$335 = 0, $$byval_copy = 0, $$sink62 = 0, $$sink63 = 0, $$sink64 = 0, $$sroa$052$0 = 0, $$sroa$052$1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i = 0, $exitcond$i$i37 = 0, $exitcond$i$i40 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $$byval_copy = sp + 156|0;
 $6 = sp + 152|0;
 $7 = sp + 164|0;
 $8 = sp + 161|0;
 $9 = sp + 160|0;
 $10 = sp + 140|0;
 $11 = sp + 128|0;
 $12 = sp + 116|0;
 $13 = sp + 112|0;
 $14 = sp;
 $15 = sp + 108|0;
 $16 = sp + 104|0;
 $17 = sp + 100|0;
 __ZNKSt3__28ios_base6getlocEv($6,$3);
 __THREW__ = 0;
 $18 = (invoke_iii(37,($6|0),(50740|0))|0);
 $19 = __THREW__; __THREW__ = 0;
 $20 = $19&1;
 L1: do {
  if ($20) {
   $97 = ___cxa_find_matching_catch_2()|0;
   $98 = (getTempRet0() | 0);
   $$3 = $97;$$335 = $98;
  } else {
   $21 = ((($5)) + 11|0);
   $22 = HEAP8[$21>>0]|0;
   $23 = ($22<<24>>24)<(0);
   $24 = ((($5)) + 4|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = $22&255;
   $27 = $23 ? $25 : $26;
   $28 = ($27|0)==(0);
   do {
    if ($28) {
     $45 = 0;
    } else {
     $29 = HEAP32[$5>>2]|0;
     $30 = $23 ? $29 : $5;
     $31 = HEAP8[$30>>0]|0;
     $32 = HEAP32[$18>>2]|0;
     $33 = ((($32)) + 28|0);
     $34 = HEAP32[$33>>2]|0;
     __THREW__ = 0;
     $35 = (invoke_iii($34|0,($18|0),45)|0);
     $36 = __THREW__; __THREW__ = 0;
     $37 = $36&1;
     if ($37) {
      $99 = ___cxa_find_matching_catch_2()|0;
      $100 = (getTempRet0() | 0);
      $$3 = $99;$$335 = $100;
      break L1;
     } else {
      $38 = ($31<<24>>24)==($35<<24>>24);
      $45 = $38;
      break;
     }
    }
   } while(0);
   ;HEAP32[$10>>2]=0|0;HEAP32[$10+4>>2]=0|0;HEAP32[$10+8>>2]=0|0;
   $$0$i$i = 0;
   while(1) {
    $exitcond$i$i = ($$0$i$i|0)==(3);
    if ($exitcond$i$i) {
     break;
    }
    $39 = (($10) + ($$0$i$i<<2)|0);
    HEAP32[$39>>2] = 0;
    $40 = (($$0$i$i) + 1)|0;
    $$0$i$i = $40;
   }
   ;HEAP32[$11>>2]=0|0;HEAP32[$11+4>>2]=0|0;HEAP32[$11+8>>2]=0|0;
   $$0$i$i36 = 0;
   while(1) {
    $exitcond$i$i37 = ($$0$i$i36|0)==(3);
    if ($exitcond$i$i37) {
     break;
    }
    $41 = (($11) + ($$0$i$i36<<2)|0);
    HEAP32[$41>>2] = 0;
    $42 = (($$0$i$i36) + 1)|0;
    $$0$i$i36 = $42;
   }
   ;HEAP32[$12>>2]=0|0;HEAP32[$12+4>>2]=0|0;HEAP32[$12+8>>2]=0|0;
   $$0$i$i39 = 0;
   while(1) {
    $exitcond$i$i40 = ($$0$i$i39|0)==(3);
    if ($exitcond$i$i40) {
     break;
    }
    $43 = (($12) + ($$0$i$i39<<2)|0);
    HEAP32[$43>>2] = 0;
    $44 = (($$0$i$i39) + 1)|0;
    $$0$i$i39 = $44;
   }
   __THREW__ = 0;
   invoke_viiiiiiiiii(3,($2|0),($45|0),($6|0),($7|0),($8|0),($9|0),($10|0),($11|0),($12|0),($13|0));
   $46 = __THREW__; __THREW__ = 0;
   $47 = $46&1;
   if ($47) {
    $101 = ___cxa_find_matching_catch_2()|0;
    $102 = (getTempRet0() | 0);
    $$1 = $101;$$133 = $102;
   } else {
    $48 = HEAP8[$21>>0]|0;
    $49 = ($48<<24>>24)<(0);
    $50 = HEAP32[$24>>2]|0;
    $51 = $48&255;
    $52 = $49 ? $50 : $51;
    $53 = HEAP32[$13>>2]|0;
    $54 = ($52|0)>($53|0);
    if ($54) {
     $55 = (($52) - ($53))|0;
     $56 = $55 << 1;
     $57 = ((($12)) + 11|0);
     $58 = HEAP8[$57>>0]|0;
     $59 = ($58<<24>>24)<(0);
     $60 = ((($12)) + 4|0);
     $61 = HEAP32[$60>>2]|0;
     $62 = $58&255;
     $63 = $59 ? $61 : $62;
     $64 = ((($11)) + 11|0);
     $65 = HEAP8[$64>>0]|0;
     $66 = ($65<<24>>24)<(0);
     $67 = ((($11)) + 4|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = $65&255;
     $70 = $66 ? $68 : $69;
     $71 = (($53) + 1)|0;
     $72 = (($71) + ($56))|0;
     $$sink62 = $70;$$sink63 = $72;$$sink64 = $63;
    } else {
     $73 = ((($12)) + 11|0);
     $74 = HEAP8[$73>>0]|0;
     $75 = ($74<<24>>24)<(0);
     $76 = ((($12)) + 4|0);
     $77 = HEAP32[$76>>2]|0;
     $78 = $74&255;
     $79 = $75 ? $77 : $78;
     $80 = ((($11)) + 11|0);
     $81 = HEAP8[$80>>0]|0;
     $82 = ($81<<24>>24)<(0);
     $83 = ((($11)) + 4|0);
     $84 = HEAP32[$83>>2]|0;
     $85 = $81&255;
     $86 = $82 ? $84 : $85;
     $87 = (($53) + 2)|0;
     $$sink62 = $86;$$sink63 = $87;$$sink64 = $79;
    }
    $88 = (($$sink63) + ($$sink64))|0;
    $89 = (($88) + ($$sink62))|0;
    $90 = ($89>>>0)>(100);
    if ($90) {
     $91 = (_malloc($89)|0);
     $92 = $91;
     $93 = ($91|0)==(0|0);
     if ($93) {
      __THREW__ = 0;
      invoke_v(4);
      $94 = __THREW__; __THREW__ = 0;
      $95 = ___cxa_find_matching_catch_2()|0;
      $96 = (getTempRet0() | 0);
      $$0 = $95;$$032 = $96;$$sroa$052$1 = $92;
     } else {
      $$031 = $91;$$sroa$052$0 = $92;
      label = 24;
     }
    } else {
     $$031 = $14;$$sroa$052$0 = 0;
     label = 24;
    }
    if ((label|0) == 24) {
     $103 = ((($3)) + 4|0);
     $104 = HEAP32[$103>>2]|0;
     $105 = HEAP32[$5>>2]|0;
     $106 = $49 ? $105 : $5;
     $107 = (($106) + ($52)|0);
     $108 = HEAP8[$8>>0]|0;
     $109 = HEAP8[$9>>0]|0;
     __THREW__ = 0;
     invoke_viiiiiiiiiiiiiii(1,($$031|0),($15|0),($16|0),($104|0),($106|0),($107|0),($18|0),($45|0),($7|0),($108|0),($109|0),($10|0),($11|0),($12|0),($53|0));
     $110 = __THREW__; __THREW__ = 0;
     $111 = $110&1;
     if (!($111)) {
      $112 = HEAP32[$1>>2]|0;
      HEAP32[$17>>2] = $112;
      $113 = HEAP32[$15>>2]|0;
      $114 = HEAP32[$16>>2]|0;
      __THREW__ = 0;
      ;HEAP32[$$byval_copy>>2]=HEAP32[$17>>2]|0;
      $115 = (invoke_iiiiiii(39,($$byval_copy|0),($$031|0),($113|0),($114|0),($3|0),($4|0))|0);
      $116 = __THREW__; __THREW__ = 0;
      $117 = $116&1;
      if (!($117)) {
       $118 = ($$sroa$052$0|0)==(0);
       if (!($118)) {
        $119 = $$sroa$052$0;
        _free($119);
       }
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($12);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($11);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
       __ZNSt3__26localeD2Ev($6);
       STACKTOP = sp;return ($115|0);
      }
     }
     $120 = ___cxa_find_matching_catch_2()|0;
     $121 = (getTempRet0() | 0);
     $$0 = $120;$$032 = $121;$$sroa$052$1 = $$sroa$052$0;
    }
    $122 = ($$sroa$052$1|0)==(0);
    if (!($122)) {
     $123 = $$sroa$052$1;
     _free($123);
    }
    $$1 = $$0;$$133 = $$032;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($12);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($11);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
   $$3 = $$1;$$335 = $$133;
  }
 } while(0);
 __ZNSt3__26localeD2Ev($6);
 ___resumeException($$3|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__211__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri($0,$1,$2,$3,$4,$5,$6,$7,$8,$9) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 var $$0$i$i$i = 0, $$0$i$i$i48 = 0, $$0$i$i$i53 = 0, $$0$i$i$i58 = 0, $$0$i$i$i63 = 0, $$0$i$i$i68 = 0, $$0$i$i$i73 = 0, $$0$i$i$i78 = 0, $$pre$phi81Z2D = 0, $$pre$phiZ2D = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $163 = 0, $164 = 0, $165 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i$i = 0, $exitcond$i$i$i49 = 0, $exitcond$i$i$i54 = 0, $exitcond$i$i$i59 = 0, $exitcond$i$i$i64 = 0, $exitcond$i$i$i69 = 0, $exitcond$i$i$i74 = 0, $exitcond$i$i$i79 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $10 = sp + 12|0;
 $11 = sp;
 if ($0) {
  $12 = (__ZNKSt3__26locale9use_facetERNS0_2idE($2,50972)|0);
  if ($1) {
   $13 = HEAP32[$12>>2]|0;
   $14 = ((($13)) + 44|0);
   $15 = HEAP32[$14>>2]|0;
   FUNCTION_TABLE_vii[$15 & 255]($10,$12);
   $16 = HEAP32[$10>>2]|0;
   HEAP8[$3>>0]=$16&255;HEAP8[$3+1>>0]=($16>>8)&255;HEAP8[$3+2>>0]=($16>>16)&255;HEAP8[$3+3>>0]=$16>>24;
   $17 = HEAP32[$12>>2]|0;
   $18 = ((($17)) + 32|0);
   $19 = HEAP32[$18>>2]|0;
   FUNCTION_TABLE_vii[$19 & 255]($11,$12);
   $20 = ((($8)) + 11|0);
   $21 = HEAP8[$20>>0]|0;
   $22 = ($21<<24>>24)<(0);
   if ($22) {
    $23 = HEAP32[$8>>2]|0;
    HEAP8[$10>>0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($23,$10);
    $24 = ((($8)) + 4|0);
    HEAP32[$24>>2] = 0;
   } else {
    HEAP8[$10>>0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($8,$10);
    HEAP8[$20>>0] = 0;
   }
   __THREW__ = 0;
   invoke_vii(165,($8|0),0);
   $25 = __THREW__; __THREW__ = 0;
   $26 = $25&1;
   if ($26) {
    $27 = ___cxa_find_matching_catch_3(0|0)|0;
    $28 = (getTempRet0() | 0);
    ___clang_call_terminate($27);
    // unreachable;
   }
   ;HEAP32[$8>>2]=HEAP32[$11>>2]|0;HEAP32[$8+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$11+8>>2]|0;
   $$0$i$i$i = 0;
   while(1) {
    $exitcond$i$i$i = ($$0$i$i$i|0)==(3);
    if ($exitcond$i$i$i) {
     break;
    }
    $29 = (($11) + ($$0$i$i$i<<2)|0);
    HEAP32[$29>>2] = 0;
    $30 = (($$0$i$i$i) + 1)|0;
    $$0$i$i$i = $30;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($11);
   $$pre$phiZ2D = $12;
  } else {
   $31 = HEAP32[$12>>2]|0;
   $32 = ((($31)) + 40|0);
   $33 = HEAP32[$32>>2]|0;
   FUNCTION_TABLE_vii[$33 & 255]($10,$12);
   $34 = HEAP32[$10>>2]|0;
   HEAP8[$3>>0]=$34&255;HEAP8[$3+1>>0]=($34>>8)&255;HEAP8[$3+2>>0]=($34>>16)&255;HEAP8[$3+3>>0]=$34>>24;
   $35 = HEAP32[$12>>2]|0;
   $36 = ((($35)) + 28|0);
   $37 = HEAP32[$36>>2]|0;
   FUNCTION_TABLE_vii[$37 & 255]($11,$12);
   $38 = ((($8)) + 11|0);
   $39 = HEAP8[$38>>0]|0;
   $40 = ($39<<24>>24)<(0);
   if ($40) {
    $41 = HEAP32[$8>>2]|0;
    HEAP8[$10>>0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($41,$10);
    $42 = ((($8)) + 4|0);
    HEAP32[$42>>2] = 0;
   } else {
    HEAP8[$10>>0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($8,$10);
    HEAP8[$38>>0] = 0;
   }
   __THREW__ = 0;
   invoke_vii(165,($8|0),0);
   $43 = __THREW__; __THREW__ = 0;
   $44 = $43&1;
   if ($44) {
    $45 = ___cxa_find_matching_catch_3(0|0)|0;
    $46 = (getTempRet0() | 0);
    ___clang_call_terminate($45);
    // unreachable;
   }
   ;HEAP32[$8>>2]=HEAP32[$11>>2]|0;HEAP32[$8+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$11+8>>2]|0;
   $$0$i$i$i48 = 0;
   while(1) {
    $exitcond$i$i$i49 = ($$0$i$i$i48|0)==(3);
    if ($exitcond$i$i$i49) {
     break;
    }
    $47 = (($11) + ($$0$i$i$i48<<2)|0);
    HEAP32[$47>>2] = 0;
    $48 = (($$0$i$i$i48) + 1)|0;
    $$0$i$i$i48 = $48;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($11);
   $$pre$phiZ2D = $12;
  }
  $49 = HEAP32[$12>>2]|0;
  $50 = ((($49)) + 12|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = (FUNCTION_TABLE_ii[$51 & 255]($12)|0);
  HEAP8[$4>>0] = $52;
  $53 = HEAP32[$12>>2]|0;
  $54 = ((($53)) + 16|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = (FUNCTION_TABLE_ii[$55 & 255]($12)|0);
  HEAP8[$5>>0] = $56;
  $57 = HEAP32[$$pre$phiZ2D>>2]|0;
  $58 = ((($57)) + 20|0);
  $59 = HEAP32[$58>>2]|0;
  FUNCTION_TABLE_vii[$59 & 255]($11,$12);
  $60 = ((($6)) + 11|0);
  $61 = HEAP8[$60>>0]|0;
  $62 = ($61<<24>>24)<(0);
  if ($62) {
   $63 = HEAP32[$6>>2]|0;
   HEAP8[$10>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($63,$10);
   $64 = ((($6)) + 4|0);
   HEAP32[$64>>2] = 0;
  } else {
   HEAP8[$10>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($6,$10);
   HEAP8[$60>>0] = 0;
  }
  __THREW__ = 0;
  invoke_vii(165,($6|0),0);
  $65 = __THREW__; __THREW__ = 0;
  $66 = $65&1;
  if ($66) {
   $67 = ___cxa_find_matching_catch_3(0|0)|0;
   $68 = (getTempRet0() | 0);
   ___clang_call_terminate($67);
   // unreachable;
  }
  ;HEAP32[$6>>2]=HEAP32[$11>>2]|0;HEAP32[$6+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$11+8>>2]|0;
  $$0$i$i$i53 = 0;
  while(1) {
   $exitcond$i$i$i54 = ($$0$i$i$i53|0)==(3);
   if ($exitcond$i$i$i54) {
    break;
   }
   $69 = (($11) + ($$0$i$i$i53<<2)|0);
   HEAP32[$69>>2] = 0;
   $70 = (($$0$i$i$i53) + 1)|0;
   $$0$i$i$i53 = $70;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($11);
  $71 = HEAP32[$$pre$phiZ2D>>2]|0;
  $72 = ((($71)) + 24|0);
  $73 = HEAP32[$72>>2]|0;
  FUNCTION_TABLE_vii[$73 & 255]($11,$12);
  $74 = ((($7)) + 11|0);
  $75 = HEAP8[$74>>0]|0;
  $76 = ($75<<24>>24)<(0);
  if ($76) {
   $77 = HEAP32[$7>>2]|0;
   HEAP8[$10>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($77,$10);
   $78 = ((($7)) + 4|0);
   HEAP32[$78>>2] = 0;
  } else {
   HEAP8[$10>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($7,$10);
   HEAP8[$74>>0] = 0;
  }
  __THREW__ = 0;
  invoke_vii(165,($7|0),0);
  $79 = __THREW__; __THREW__ = 0;
  $80 = $79&1;
  if ($80) {
   $81 = ___cxa_find_matching_catch_3(0|0)|0;
   $82 = (getTempRet0() | 0);
   ___clang_call_terminate($81);
   // unreachable;
  }
  ;HEAP32[$7>>2]=HEAP32[$11>>2]|0;HEAP32[$7+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$7+8>>2]=HEAP32[$11+8>>2]|0;
  $$0$i$i$i58 = 0;
  while(1) {
   $exitcond$i$i$i59 = ($$0$i$i$i58|0)==(3);
   if ($exitcond$i$i$i59) {
    break;
   }
   $83 = (($11) + ($$0$i$i$i58<<2)|0);
   HEAP32[$83>>2] = 0;
   $84 = (($$0$i$i$i58) + 1)|0;
   $$0$i$i$i58 = $84;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($11);
  $85 = HEAP32[$12>>2]|0;
  $86 = ((($85)) + 36|0);
  $87 = HEAP32[$86>>2]|0;
  $88 = (FUNCTION_TABLE_ii[$87 & 255]($12)|0);
  $storemerge = $88;
 } else {
  $89 = (__ZNKSt3__26locale9use_facetERNS0_2idE($2,50964)|0);
  if ($1) {
   $90 = HEAP32[$89>>2]|0;
   $91 = ((($90)) + 44|0);
   $92 = HEAP32[$91>>2]|0;
   FUNCTION_TABLE_vii[$92 & 255]($10,$89);
   $93 = HEAP32[$10>>2]|0;
   HEAP8[$3>>0]=$93&255;HEAP8[$3+1>>0]=($93>>8)&255;HEAP8[$3+2>>0]=($93>>16)&255;HEAP8[$3+3>>0]=$93>>24;
   $94 = HEAP32[$89>>2]|0;
   $95 = ((($94)) + 32|0);
   $96 = HEAP32[$95>>2]|0;
   FUNCTION_TABLE_vii[$96 & 255]($11,$89);
   $97 = ((($8)) + 11|0);
   $98 = HEAP8[$97>>0]|0;
   $99 = ($98<<24>>24)<(0);
   if ($99) {
    $100 = HEAP32[$8>>2]|0;
    HEAP8[$10>>0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($100,$10);
    $101 = ((($8)) + 4|0);
    HEAP32[$101>>2] = 0;
   } else {
    HEAP8[$10>>0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($8,$10);
    HEAP8[$97>>0] = 0;
   }
   __THREW__ = 0;
   invoke_vii(165,($8|0),0);
   $102 = __THREW__; __THREW__ = 0;
   $103 = $102&1;
   if ($103) {
    $104 = ___cxa_find_matching_catch_3(0|0)|0;
    $105 = (getTempRet0() | 0);
    ___clang_call_terminate($104);
    // unreachable;
   }
   ;HEAP32[$8>>2]=HEAP32[$11>>2]|0;HEAP32[$8+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$11+8>>2]|0;
   $$0$i$i$i63 = 0;
   while(1) {
    $exitcond$i$i$i64 = ($$0$i$i$i63|0)==(3);
    if ($exitcond$i$i$i64) {
     break;
    }
    $106 = (($11) + ($$0$i$i$i63<<2)|0);
    HEAP32[$106>>2] = 0;
    $107 = (($$0$i$i$i63) + 1)|0;
    $$0$i$i$i63 = $107;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($11);
   $$pre$phi81Z2D = $89;
  } else {
   $108 = HEAP32[$89>>2]|0;
   $109 = ((($108)) + 40|0);
   $110 = HEAP32[$109>>2]|0;
   FUNCTION_TABLE_vii[$110 & 255]($10,$89);
   $111 = HEAP32[$10>>2]|0;
   HEAP8[$3>>0]=$111&255;HEAP8[$3+1>>0]=($111>>8)&255;HEAP8[$3+2>>0]=($111>>16)&255;HEAP8[$3+3>>0]=$111>>24;
   $112 = HEAP32[$89>>2]|0;
   $113 = ((($112)) + 28|0);
   $114 = HEAP32[$113>>2]|0;
   FUNCTION_TABLE_vii[$114 & 255]($11,$89);
   $115 = ((($8)) + 11|0);
   $116 = HEAP8[$115>>0]|0;
   $117 = ($116<<24>>24)<(0);
   if ($117) {
    $118 = HEAP32[$8>>2]|0;
    HEAP8[$10>>0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($118,$10);
    $119 = ((($8)) + 4|0);
    HEAP32[$119>>2] = 0;
   } else {
    HEAP8[$10>>0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($8,$10);
    HEAP8[$115>>0] = 0;
   }
   __THREW__ = 0;
   invoke_vii(165,($8|0),0);
   $120 = __THREW__; __THREW__ = 0;
   $121 = $120&1;
   if ($121) {
    $122 = ___cxa_find_matching_catch_3(0|0)|0;
    $123 = (getTempRet0() | 0);
    ___clang_call_terminate($122);
    // unreachable;
   }
   ;HEAP32[$8>>2]=HEAP32[$11>>2]|0;HEAP32[$8+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$11+8>>2]|0;
   $$0$i$i$i68 = 0;
   while(1) {
    $exitcond$i$i$i69 = ($$0$i$i$i68|0)==(3);
    if ($exitcond$i$i$i69) {
     break;
    }
    $124 = (($11) + ($$0$i$i$i68<<2)|0);
    HEAP32[$124>>2] = 0;
    $125 = (($$0$i$i$i68) + 1)|0;
    $$0$i$i$i68 = $125;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($11);
   $$pre$phi81Z2D = $89;
  }
  $126 = HEAP32[$89>>2]|0;
  $127 = ((($126)) + 12|0);
  $128 = HEAP32[$127>>2]|0;
  $129 = (FUNCTION_TABLE_ii[$128 & 255]($89)|0);
  HEAP8[$4>>0] = $129;
  $130 = HEAP32[$89>>2]|0;
  $131 = ((($130)) + 16|0);
  $132 = HEAP32[$131>>2]|0;
  $133 = (FUNCTION_TABLE_ii[$132 & 255]($89)|0);
  HEAP8[$5>>0] = $133;
  $134 = HEAP32[$$pre$phi81Z2D>>2]|0;
  $135 = ((($134)) + 20|0);
  $136 = HEAP32[$135>>2]|0;
  FUNCTION_TABLE_vii[$136 & 255]($11,$89);
  $137 = ((($6)) + 11|0);
  $138 = HEAP8[$137>>0]|0;
  $139 = ($138<<24>>24)<(0);
  if ($139) {
   $140 = HEAP32[$6>>2]|0;
   HEAP8[$10>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($140,$10);
   $141 = ((($6)) + 4|0);
   HEAP32[$141>>2] = 0;
  } else {
   HEAP8[$10>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($6,$10);
   HEAP8[$137>>0] = 0;
  }
  __THREW__ = 0;
  invoke_vii(165,($6|0),0);
  $142 = __THREW__; __THREW__ = 0;
  $143 = $142&1;
  if ($143) {
   $144 = ___cxa_find_matching_catch_3(0|0)|0;
   $145 = (getTempRet0() | 0);
   ___clang_call_terminate($144);
   // unreachable;
  }
  ;HEAP32[$6>>2]=HEAP32[$11>>2]|0;HEAP32[$6+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$11+8>>2]|0;
  $$0$i$i$i73 = 0;
  while(1) {
   $exitcond$i$i$i74 = ($$0$i$i$i73|0)==(3);
   if ($exitcond$i$i$i74) {
    break;
   }
   $146 = (($11) + ($$0$i$i$i73<<2)|0);
   HEAP32[$146>>2] = 0;
   $147 = (($$0$i$i$i73) + 1)|0;
   $$0$i$i$i73 = $147;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($11);
  $148 = HEAP32[$$pre$phi81Z2D>>2]|0;
  $149 = ((($148)) + 24|0);
  $150 = HEAP32[$149>>2]|0;
  FUNCTION_TABLE_vii[$150 & 255]($11,$89);
  $151 = ((($7)) + 11|0);
  $152 = HEAP8[$151>>0]|0;
  $153 = ($152<<24>>24)<(0);
  if ($153) {
   $154 = HEAP32[$7>>2]|0;
   HEAP8[$10>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($154,$10);
   $155 = ((($7)) + 4|0);
   HEAP32[$155>>2] = 0;
  } else {
   HEAP8[$10>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($7,$10);
   HEAP8[$151>>0] = 0;
  }
  __THREW__ = 0;
  invoke_vii(165,($7|0),0);
  $156 = __THREW__; __THREW__ = 0;
  $157 = $156&1;
  if ($157) {
   $158 = ___cxa_find_matching_catch_3(0|0)|0;
   $159 = (getTempRet0() | 0);
   ___clang_call_terminate($158);
   // unreachable;
  }
  ;HEAP32[$7>>2]=HEAP32[$11>>2]|0;HEAP32[$7+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$7+8>>2]=HEAP32[$11+8>>2]|0;
  $$0$i$i$i78 = 0;
  while(1) {
   $exitcond$i$i$i79 = ($$0$i$i$i78|0)==(3);
   if ($exitcond$i$i$i79) {
    break;
   }
   $160 = (($11) + ($$0$i$i$i78<<2)|0);
   HEAP32[$160>>2] = 0;
   $161 = (($$0$i$i$i78) + 1)|0;
   $$0$i$i$i78 = $161;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($11);
  $162 = HEAP32[$89>>2]|0;
  $163 = ((($162)) + 36|0);
  $164 = HEAP32[$163>>2]|0;
  $165 = (FUNCTION_TABLE_ii[$164 & 255]($89)|0);
  $storemerge = $165;
 }
 HEAP32[$9>>2] = $storemerge;
 STACKTOP = sp;return;
}
function __ZNSt3__211__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 $12 = $12|0;
 $13 = $13|0;
 $14 = $14|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i106 = 0, $$0$i$i113 = 0, $$0$ph = 0, $$0101 = 0, $$0104 = 0, $$07$i$i = 0, $$093 = 0, $$095 = 0, $$097 = 0, $$099 = 0, $$1 = 0, $$1100 = 0, $$1102 = 0, $$194 = 0, $$196 = 0, $$2 = 0, $$2103 = 0, $$3 = 0;
 var $$pn = 0, $$pn$pn = 0, $$sroa$08$0$i = 0, $$sroa$08$0$i112 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $exitcond = 0, $or$cond = 0, $spec$select = 0, $spec$select142 = 0, $trunc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$2>>2] = $0;
 $15 = ((($13)) + 11|0);
 $16 = ((($13)) + 4|0);
 $17 = ((($12)) + 11|0);
 $18 = ((($12)) + 4|0);
 $19 = $3 & 512;
 $20 = ($19|0)==(0);
 $21 = ((($6)) + 8|0);
 $22 = ($14|0)>(0);
 $23 = ((($11)) + 11|0);
 $24 = ((($11)) + 4|0);
 $$0104 = 0;$$097 = $4;
 while(1) {
  $exitcond = ($$0104|0)==(4);
  if ($exitcond) {
   break;
  }
  $31 = (($8) + ($$0104)|0);
  $32 = HEAP8[$31>>0]|0;
  $33 = $32 << 24 >> 24;
  L4: do {
   switch ($33|0) {
   case 0:  {
    $34 = HEAP32[$2>>2]|0;
    HEAP32[$1>>2] = $34;
    $$2 = $$097;
    break;
   }
   case 1:  {
    $35 = HEAP32[$2>>2]|0;
    HEAP32[$1>>2] = $35;
    $36 = HEAP32[$6>>2]|0;
    $37 = ((($36)) + 28|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = (FUNCTION_TABLE_iii[$38 & 127]($6,32)|0);
    $40 = HEAP32[$2>>2]|0;
    $41 = ((($40)) + 1|0);
    HEAP32[$2>>2] = $41;
    HEAP8[$40>>0] = $39;
    $$2 = $$097;
    break;
   }
   case 3:  {
    $42 = HEAP8[$15>>0]|0;
    $43 = ($42<<24>>24)<(0);
    $44 = HEAP32[$16>>2]|0;
    $45 = $42&255;
    $46 = $43 ? $44 : $45;
    $47 = ($46|0)==(0);
    if ($47) {
     $$2 = $$097;
    } else {
     $48 = HEAP32[$13>>2]|0;
     $49 = $43 ? $48 : $13;
     $50 = HEAP8[$49>>0]|0;
     $51 = HEAP32[$2>>2]|0;
     $52 = ((($51)) + 1|0);
     HEAP32[$2>>2] = $52;
     HEAP8[$51>>0] = $50;
     $$2 = $$097;
    }
    break;
   }
   case 2:  {
    $53 = HEAP8[$17>>0]|0;
    $54 = ($53<<24>>24)<(0);
    $55 = HEAP32[$18>>2]|0;
    $56 = $53&255;
    $57 = $54 ? $55 : $56;
    $58 = ($57|0)==(0);
    $or$cond = $20 | $58;
    if ($or$cond) {
     $$2 = $$097;
    } else {
     $59 = HEAP32[$12>>2]|0;
     $60 = $54 ? $59 : $12;
     $61 = (($60) + ($57)|0);
     $62 = HEAP32[$2>>2]|0;
     $$0$i$i113 = $62;$$sroa$08$0$i112 = $60;
     while(1) {
      $63 = ($$sroa$08$0$i112|0)==($61|0);
      if ($63) {
       break;
      }
      $64 = HEAP8[$$sroa$08$0$i112>>0]|0;
      HEAP8[$$0$i$i113>>0] = $64;
      $65 = ((($$sroa$08$0$i112)) + 1|0);
      $66 = ((($$0$i$i113)) + 1|0);
      $$0$i$i113 = $66;$$sroa$08$0$i112 = $65;
     }
     HEAP32[$2>>2] = $$0$i$i113;
     $$2 = $$097;
    }
    break;
   }
   case 4:  {
    $67 = HEAP32[$2>>2]|0;
    $68 = ((($$097)) + 1|0);
    $spec$select = $7 ? $68 : $$097;
    $$0101 = $spec$select;
    while(1) {
     $69 = ($$0101>>>0)<($5>>>0);
     if (!($69)) {
      break;
     }
     $70 = HEAP8[$$0101>>0]|0;
     $71 = ($70<<24>>24)>(-1);
     if (!($71)) {
      break;
     }
     $72 = $70 << 24 >> 24;
     $73 = HEAP32[$21>>2]|0;
     $74 = (($73) + ($72<<1)|0);
     $75 = HEAP16[$74>>1]|0;
     $76 = $75 & 2048;
     $77 = ($76<<16>>16)==(0);
     if ($77) {
      break;
     }
     $78 = ((($$0101)) + 1|0);
     $$0101 = $78;
    }
    if ($22) {
     $$099 = $14;$$1102 = $$0101;
     while(1) {
      $79 = ($$1102>>>0)>($spec$select>>>0);
      $80 = ($$099|0)>(0);
      $81 = $79 & $80;
      if (!($81)) {
       break;
      }
      $82 = ((($$1102)) + -1|0);
      $83 = HEAP8[$82>>0]|0;
      $84 = HEAP32[$2>>2]|0;
      $85 = ((($84)) + 1|0);
      HEAP32[$2>>2] = $85;
      HEAP8[$84>>0] = $83;
      $86 = (($$099) + -1)|0;
      $$099 = $86;$$1102 = $82;
     }
     if ($80) {
      $87 = HEAP32[$6>>2]|0;
      $88 = ((($87)) + 28|0);
      $89 = HEAP32[$88>>2]|0;
      $90 = (FUNCTION_TABLE_iii[$89 & 127]($6,48)|0);
      $94 = $90;
     } else {
      $94 = 0;
     }
     $$1100 = $$099;
     while(1) {
      $91 = ($$1100|0)>(0);
      $92 = HEAP32[$2>>2]|0;
      $93 = ((($92)) + 1|0);
      HEAP32[$2>>2] = $93;
      if (!($91)) {
       break;
      }
      HEAP8[$92>>0] = $94;
      $95 = (($$1100) + -1)|0;
      $$1100 = $95;
     }
     HEAP8[$92>>0] = $9;
     $$2103 = $$1102;
    } else {
     $$2103 = $$0101;
    }
    $96 = ($$2103|0)==($spec$select|0);
    L36: do {
     if ($96) {
      $97 = HEAP32[$6>>2]|0;
      $98 = ((($97)) + 28|0);
      $99 = HEAP32[$98>>2]|0;
      $100 = (FUNCTION_TABLE_iii[$99 & 127]($6,48)|0);
      $101 = HEAP32[$2>>2]|0;
      $102 = ((($101)) + 1|0);
      HEAP32[$2>>2] = $102;
      HEAP8[$101>>0] = $100;
     } else {
      $103 = HEAP8[$23>>0]|0;
      $104 = ($103<<24>>24)<(0);
      $105 = HEAP32[$24>>2]|0;
      $106 = $103&255;
      $107 = $104 ? $105 : $106;
      $108 = ($107|0)==(0);
      if ($108) {
       $$0$ph = -1;
      } else {
       $109 = HEAP32[$11>>2]|0;
       $110 = $104 ? $109 : $11;
       $111 = HEAP8[$110>>0]|0;
       $112 = $111 << 24 >> 24;
       $$0$ph = $112;
      }
      $$0 = $$0$ph;$$093 = 0;$$095 = 0;$$3 = $$2103;
      while(1) {
       $113 = ($$3|0)==($spec$select|0);
       if ($113) {
        break L36;
       }
       $114 = ($$095|0)==($$0|0);
       if ($114) {
        $115 = HEAP32[$2>>2]|0;
        $116 = ((($115)) + 1|0);
        HEAP32[$2>>2] = $116;
        HEAP8[$115>>0] = $10;
        $117 = (($$093) + 1)|0;
        $118 = HEAP8[$23>>0]|0;
        $119 = ($118<<24>>24)<(0);
        $120 = HEAP32[$24>>2]|0;
        $121 = $118&255;
        $122 = $119 ? $120 : $121;
        $123 = ($117>>>0)<($122>>>0);
        if ($123) {
         $124 = HEAP32[$11>>2]|0;
         $125 = $119 ? $124 : $11;
         $126 = (($125) + ($117)|0);
         $127 = HEAP8[$126>>0]|0;
         $128 = ($127<<24>>24)==(127);
         $129 = $127 << 24 >> 24;
         $spec$select142 = $128 ? -1 : $129;
         $$1 = $spec$select142;$$194 = $117;$$196 = 0;
        } else {
         $$1 = $$095;$$194 = $117;$$196 = 0;
        }
       } else {
        $$1 = $$0;$$194 = $$093;$$196 = $$095;
       }
       $130 = ((($$3)) + -1|0);
       $131 = HEAP8[$130>>0]|0;
       $132 = HEAP32[$2>>2]|0;
       $133 = ((($132)) + 1|0);
       HEAP32[$2>>2] = $133;
       HEAP8[$132>>0] = $131;
       $134 = (($$196) + 1)|0;
       $$0 = $$1;$$093 = $$194;$$095 = $134;$$3 = $130;
      }
     }
    } while(0);
    $135 = HEAP32[$2>>2]|0;
    $136 = ($67|0)==($135|0);
    if ($136) {
     $$2 = $spec$select;
    } else {
     $$0$i$i106 = $135;$$07$i$i = $67;
     while(1) {
      $137 = ((($$0$i$i106)) + -1|0);
      $138 = ($$07$i$i>>>0)<($137>>>0);
      if (!($138)) {
       $$2 = $spec$select;
       break L4;
      }
      $139 = HEAP8[$$07$i$i>>0]|0;
      $140 = HEAP8[$137>>0]|0;
      HEAP8[$$07$i$i>>0] = $140;
      HEAP8[$137>>0] = $139;
      $141 = ((($$07$i$i)) + 1|0);
      $$0$i$i106 = $137;$$07$i$i = $141;
     }
    }
    break;
   }
   default: {
    $$2 = $$097;
   }
   }
  } while(0);
  $142 = (($$0104) + 1)|0;
  $$0104 = $142;$$097 = $$2;
 }
 $25 = HEAP8[$15>>0]|0;
 $26 = ($25<<24>>24)<(0);
 $27 = HEAP32[$16>>2]|0;
 $28 = $25&255;
 $29 = $26 ? $27 : $28;
 $30 = ($29>>>0)>(1);
 if ($30) {
  $143 = HEAP32[$13>>2]|0;
  $$pn = $26 ? $143 : $13;
  $144 = (($$pn) + ($29)|0);
  $145 = HEAP32[$2>>2]|0;
  $$0$i$i = $145;$$pn$pn = $$pn;
  while(1) {
   $$sroa$08$0$i = ((($$pn$pn)) + 1|0);
   $146 = ($$sroa$08$0$i|0)==($144|0);
   if ($146) {
    break;
   }
   $147 = HEAP8[$$sroa$08$0$i>>0]|0;
   HEAP8[$$0$i$i>>0] = $147;
   $148 = ((($$0$i$i)) + 1|0);
   $$0$i$i = $148;$$pn$pn = $$sroa$08$0$i;
  }
  HEAP32[$2>>2] = $$0$i$i;
 }
 $149 = $3 & 176;
 $trunc = $149&255;
 switch ($trunc<<24>>24) {
 case 32:  {
  $150 = HEAP32[$2>>2]|0;
  HEAP32[$1>>2] = $150;
  break;
 }
 case 16:  {
  break;
 }
 default: {
  HEAP32[$1>>2] = $0;
 }
 }
 return;
}
function __ZNSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}
function __ZNSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = +$5;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i53 = 0, $$0$i$i55 = 0, $$045 = 0, $$046 = 0, $$047 = 0, $$048 = 0, $$1 = 0, $$149 = 0, $$2 = 0, $$250 = 0, $$4 = 0, $$452 = 0, $$byval_copy = 0, $$sink101 = 0, $$sink102 = 0, $$sink103 = 0, $$sroa$067$0 = 0, $$sroa$067$1 = 0;
 var $$sroa$079$0 = 0, $$sroa$079$1 = 0, $$sroa$079$2 = 0, $$sroa$092$0 = 0, $$sroa$092$1 = 0, $$sroa$092$2 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i = 0, $exitcond$i$i54 = 0, $exitcond$i$i56 = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 992|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(992|0);
 $$byval_copy = sp + 912|0;
 $vararg_buffer1 = sp + 904|0;
 $6 = sp + 800|0;
 $7 = sp + 984|0;
 $8 = sp + 400|0;
 $9 = sp + 980|0;
 $10 = sp + 988|0;
 $11 = sp + 976|0;
 $12 = sp + 972|0;
 $13 = sp + 960|0;
 $14 = sp + 948|0;
 $15 = sp + 936|0;
 $16 = sp + 932|0;
 $17 = sp;
 $18 = sp + 928|0;
 $19 = sp + 924|0;
 $20 = sp + 920|0;
 HEAP32[$7>>2] = $6;
 HEAPF64[$$byval_copy>>3] = $5;
 $21 = (_snprintf($6,100,43149,$$byval_copy)|0);
 $22 = ($21>>>0)>(99);
 L1: do {
  if ($22) {
   __THREW__ = 0;
   $23 = (invoke_i(24)|0);
   $24 = __THREW__; __THREW__ = 0;
   $25 = $24&1;
   do {
    if ($25) {
     $$sroa$079$0 = 0;$$sroa$092$0 = 0;
    } else {
     __THREW__ = 0;
     HEAPF64[$vararg_buffer1>>3] = $5;
     $26 = (invoke_iiiii(18,($7|0),($23|0),(43149|0),($vararg_buffer1|0))|0);
     $27 = __THREW__; __THREW__ = 0;
     $28 = $27&1;
     if ($28) {
      $$sroa$079$0 = 0;$$sroa$092$0 = 0;
     } else {
      $29 = HEAP32[$7>>2]|0;
      $30 = ($29|0)==(0|0);
      if ($30) {
       __THREW__ = 0;
       invoke_v(4);
       $31 = __THREW__; __THREW__ = 0;
       $$sroa$079$0 = 0;$$sroa$092$0 = 0;
       break;
      }
      $34 = $29;
      $35 = $26 << 2;
      $36 = (_malloc($35)|0);
      $37 = $36;
      $38 = ($36|0)==(0|0);
      if (!($38)) {
       $$0 = $36;$$046 = $26;$$sroa$079$1 = $37;$$sroa$092$1 = $34;
       label = 9;
       break L1;
      }
      __THREW__ = 0;
      invoke_v(4);
      $39 = __THREW__; __THREW__ = 0;
      $$sroa$079$0 = $37;$$sroa$092$0 = $34;
     }
    }
   } while(0);
   $32 = ___cxa_find_matching_catch_2()|0;
   $33 = (getTempRet0() | 0);
   $$4 = $32;$$452 = $33;$$sroa$079$2 = $$sroa$079$0;$$sroa$092$2 = $$sroa$092$0;
  } else {
   $$0 = $8;$$046 = $21;$$sroa$079$1 = 0;$$sroa$092$1 = 0;
   label = 9;
  }
 } while(0);
 if ((label|0) == 9) {
  __ZNKSt3__28ios_base6getlocEv($9,$3);
  __THREW__ = 0;
  $40 = (invoke_iii(37,($9|0),(50772|0))|0);
  $41 = __THREW__; __THREW__ = 0;
  $42 = $41&1;
  if ($42) {
   label = 29;
  } else {
   $43 = HEAP32[$7>>2]|0;
   $44 = (($43) + ($$046)|0);
   $45 = HEAP32[$40>>2]|0;
   $46 = ((($45)) + 48|0);
   $47 = HEAP32[$46>>2]|0;
   __THREW__ = 0;
   (invoke_iiiii($47|0,($40|0),($43|0),($44|0),($$0|0))|0);
   $48 = __THREW__; __THREW__ = 0;
   $49 = $48&1;
   if ($49) {
    label = 29;
   } else {
    $50 = ($$046|0)==(0);
    if ($50) {
     $60 = 0;
    } else {
     $51 = HEAP32[$7>>2]|0;
     $52 = HEAP8[$51>>0]|0;
     $53 = ($52<<24>>24)==(45);
     $60 = $53;
    }
    ;HEAP32[$13>>2]=0|0;HEAP32[$13+4>>2]=0|0;HEAP32[$13+8>>2]=0|0;
    $$0$i$i = 0;
    while(1) {
     $exitcond$i$i = ($$0$i$i|0)==(3);
     if ($exitcond$i$i) {
      break;
     }
     $54 = (($13) + ($$0$i$i<<2)|0);
     HEAP32[$54>>2] = 0;
     $55 = (($$0$i$i) + 1)|0;
     $$0$i$i = $55;
    }
    ;HEAP32[$14>>2]=0|0;HEAP32[$14+4>>2]=0|0;HEAP32[$14+8>>2]=0|0;
    $$0$i$i53 = 0;
    while(1) {
     $exitcond$i$i54 = ($$0$i$i53|0)==(3);
     if ($exitcond$i$i54) {
      break;
     }
     $56 = (($14) + ($$0$i$i53<<2)|0);
     HEAP32[$56>>2] = 0;
     $57 = (($$0$i$i53) + 1)|0;
     $$0$i$i53 = $57;
    }
    ;HEAP32[$15>>2]=0|0;HEAP32[$15+4>>2]=0|0;HEAP32[$15+8>>2]=0|0;
    $$0$i$i55 = 0;
    while(1) {
     $exitcond$i$i56 = ($$0$i$i55|0)==(3);
     if ($exitcond$i$i56) {
      break;
     }
     $58 = (($15) + ($$0$i$i55<<2)|0);
     HEAP32[$58>>2] = 0;
     $59 = (($$0$i$i55) + 1)|0;
     $$0$i$i55 = $59;
    }
    __THREW__ = 0;
    invoke_viiiiiiiiii(4,($2|0),($60|0),($9|0),($10|0),($11|0),($12|0),($13|0),($14|0),($15|0),($16|0));
    $61 = __THREW__; __THREW__ = 0;
    $62 = $61&1;
    if ($62) {
     $114 = ___cxa_find_matching_catch_2()|0;
     $115 = (getTempRet0() | 0);
     $$1 = $114;$$149 = $115;
    } else {
     $63 = HEAP32[$16>>2]|0;
     $64 = ($$046|0)>($63|0);
     if ($64) {
      $65 = (($$046) - ($63))|0;
      $66 = $65 << 1;
      $67 = ((($15)) + 8|0);
      $68 = ((($67)) + 3|0);
      $69 = HEAP8[$68>>0]|0;
      $70 = ($69<<24>>24)<(0);
      $71 = ((($15)) + 4|0);
      $72 = HEAP32[$71>>2]|0;
      $73 = $69&255;
      $74 = $70 ? $72 : $73;
      $75 = ((($14)) + 8|0);
      $76 = ((($75)) + 3|0);
      $77 = HEAP8[$76>>0]|0;
      $78 = ($77<<24>>24)<(0);
      $79 = ((($14)) + 4|0);
      $80 = HEAP32[$79>>2]|0;
      $81 = $77&255;
      $82 = $78 ? $80 : $81;
      $83 = (($63) + 1)|0;
      $84 = (($83) + ($66))|0;
      $$sink101 = $82;$$sink102 = $84;$$sink103 = $74;
     } else {
      $85 = ((($15)) + 8|0);
      $86 = ((($85)) + 3|0);
      $87 = HEAP8[$86>>0]|0;
      $88 = ($87<<24>>24)<(0);
      $89 = ((($15)) + 4|0);
      $90 = HEAP32[$89>>2]|0;
      $91 = $87&255;
      $92 = $88 ? $90 : $91;
      $93 = ((($14)) + 8|0);
      $94 = ((($93)) + 3|0);
      $95 = HEAP8[$94>>0]|0;
      $96 = ($95<<24>>24)<(0);
      $97 = ((($14)) + 4|0);
      $98 = HEAP32[$97>>2]|0;
      $99 = $95&255;
      $100 = $96 ? $98 : $99;
      $101 = (($63) + 2)|0;
      $$sink101 = $100;$$sink102 = $101;$$sink103 = $92;
     }
     $102 = (($$sink102) + ($$sink103))|0;
     $103 = (($102) + ($$sink101))|0;
     $104 = ($103>>>0)>(100);
     if ($104) {
      $105 = $103 << 2;
      $106 = (_malloc($105)|0);
      $107 = $106;
      $108 = ($106|0)==(0|0);
      if ($108) {
       __THREW__ = 0;
       invoke_v(4);
       $109 = __THREW__; __THREW__ = 0;
       $110 = ___cxa_find_matching_catch_2()|0;
       $111 = (getTempRet0() | 0);
       $$047 = $110;$$048 = $111;$$sroa$067$1 = $107;
      } else {
       $$045 = $106;$$sroa$067$0 = $107;
       label = 31;
      }
     } else {
      $$045 = $17;$$sroa$067$0 = 0;
      label = 31;
     }
     if ((label|0) == 31) {
      $116 = ((($3)) + 4|0);
      $117 = HEAP32[$116>>2]|0;
      $118 = (($$0) + ($$046<<2)|0);
      $119 = HEAP32[$11>>2]|0;
      $120 = HEAP32[$12>>2]|0;
      __THREW__ = 0;
      invoke_viiiiiiiiiiiiiii(2,($$045|0),($18|0),($19|0),($117|0),($$0|0),($118|0),($40|0),($60|0),($10|0),($119|0),($120|0),($13|0),($14|0),($15|0),($63|0));
      $121 = __THREW__; __THREW__ = 0;
      $122 = $121&1;
      if (!($122)) {
       $123 = HEAP32[$1>>2]|0;
       HEAP32[$20>>2] = $123;
       $124 = HEAP32[$18>>2]|0;
       $125 = HEAP32[$19>>2]|0;
       __THREW__ = 0;
       ;HEAP32[$$byval_copy>>2]=HEAP32[$20>>2]|0;
       $126 = (invoke_iiiiiii(40,($$byval_copy|0),($$045|0),($124|0),($125|0),($3|0),($4|0))|0);
       $127 = __THREW__; __THREW__ = 0;
       $128 = $127&1;
       if (!($128)) {
        $129 = ($$sroa$067$0|0)==(0);
        if (!($129)) {
         $130 = $$sroa$067$0;
         _free($130);
        }
        __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($15);
        __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($14);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($13);
        __ZNSt3__26localeD2Ev($9);
        $131 = ($$sroa$079$1|0)==(0);
        if (!($131)) {
         $132 = $$sroa$079$1;
         _free($132);
        }
        $133 = ($$sroa$092$1|0)==(0);
        if (!($133)) {
         $134 = $$sroa$092$1;
         _free($134);
        }
        STACKTOP = sp;return ($126|0);
       }
      }
      $135 = ___cxa_find_matching_catch_2()|0;
      $136 = (getTempRet0() | 0);
      $$047 = $135;$$048 = $136;$$sroa$067$1 = $$sroa$067$0;
     }
     $137 = ($$sroa$067$1|0)==(0);
     if (!($137)) {
      $138 = $$sroa$067$1;
      _free($138);
     }
     $$1 = $$047;$$149 = $$048;
    }
    __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($15);
    __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($14);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($13);
    $$2 = $$1;$$250 = $$149;
   }
  }
  if ((label|0) == 29) {
   $112 = ___cxa_find_matching_catch_2()|0;
   $113 = (getTempRet0() | 0);
   $$2 = $112;$$250 = $113;
  }
  __ZNSt3__26localeD2Ev($9);
  $$4 = $$2;$$452 = $$250;$$sroa$079$2 = $$sroa$079$1;$$sroa$092$2 = $$sroa$092$1;
 }
 $139 = ($$sroa$079$2|0)==(0);
 if (!($139)) {
  $140 = $$sroa$079$2;
  _free($140);
 }
 $141 = ($$sroa$092$2|0)==(0);
 if (!($141)) {
  $142 = $$sroa$092$2;
  _free($142);
 }
 ___resumeException($$4|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i36 = 0, $$0$i$i38 = 0, $$031 = 0, $$032 = 0, $$1 = 0, $$133 = 0, $$3 = 0, $$335 = 0, $$byval_copy = 0, $$sink61 = 0, $$sink62 = 0, $$sink63 = 0, $$sroa$051$0 = 0, $$sroa$051$1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $exitcond$i$i = 0, $exitcond$i$i37 = 0, $exitcond$i$i39 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 480|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(480|0);
 $$byval_copy = sp + 464|0;
 $6 = sp + 460|0;
 $7 = sp + 468|0;
 $8 = sp + 456|0;
 $9 = sp + 452|0;
 $10 = sp + 440|0;
 $11 = sp + 428|0;
 $12 = sp + 416|0;
 $13 = sp + 412|0;
 $14 = sp;
 $15 = sp + 408|0;
 $16 = sp + 404|0;
 $17 = sp + 400|0;
 __ZNKSt3__28ios_base6getlocEv($6,$3);
 __THREW__ = 0;
 $18 = (invoke_iii(37,($6|0),(50772|0))|0);
 $19 = __THREW__; __THREW__ = 0;
 $20 = $19&1;
 L1: do {
  if ($20) {
   $103 = ___cxa_find_matching_catch_2()|0;
   $104 = (getTempRet0() | 0);
   $$3 = $103;$$335 = $104;
  } else {
   $21 = ((($5)) + 8|0);
   $22 = ((($21)) + 3|0);
   $23 = HEAP8[$22>>0]|0;
   $24 = ($23<<24>>24)<(0);
   $25 = ((($5)) + 4|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = $23&255;
   $28 = $24 ? $26 : $27;
   $29 = ($28|0)==(0);
   do {
    if ($29) {
     $46 = 0;
    } else {
     $30 = HEAP32[$5>>2]|0;
     $31 = $24 ? $30 : $5;
     $32 = HEAP32[$31>>2]|0;
     $33 = HEAP32[$18>>2]|0;
     $34 = ((($33)) + 44|0);
     $35 = HEAP32[$34>>2]|0;
     __THREW__ = 0;
     $36 = (invoke_iii($35|0,($18|0),45)|0);
     $37 = __THREW__; __THREW__ = 0;
     $38 = $37&1;
     if ($38) {
      $105 = ___cxa_find_matching_catch_2()|0;
      $106 = (getTempRet0() | 0);
      $$3 = $105;$$335 = $106;
      break L1;
     } else {
      $39 = ($32|0)==($36|0);
      $46 = $39;
      break;
     }
    }
   } while(0);
   ;HEAP32[$10>>2]=0|0;HEAP32[$10+4>>2]=0|0;HEAP32[$10+8>>2]=0|0;
   $$0$i$i = 0;
   while(1) {
    $exitcond$i$i = ($$0$i$i|0)==(3);
    if ($exitcond$i$i) {
     break;
    }
    $40 = (($10) + ($$0$i$i<<2)|0);
    HEAP32[$40>>2] = 0;
    $41 = (($$0$i$i) + 1)|0;
    $$0$i$i = $41;
   }
   ;HEAP32[$11>>2]=0|0;HEAP32[$11+4>>2]=0|0;HEAP32[$11+8>>2]=0|0;
   $$0$i$i36 = 0;
   while(1) {
    $exitcond$i$i37 = ($$0$i$i36|0)==(3);
    if ($exitcond$i$i37) {
     break;
    }
    $42 = (($11) + ($$0$i$i36<<2)|0);
    HEAP32[$42>>2] = 0;
    $43 = (($$0$i$i36) + 1)|0;
    $$0$i$i36 = $43;
   }
   ;HEAP32[$12>>2]=0|0;HEAP32[$12+4>>2]=0|0;HEAP32[$12+8>>2]=0|0;
   $$0$i$i38 = 0;
   while(1) {
    $exitcond$i$i39 = ($$0$i$i38|0)==(3);
    if ($exitcond$i$i39) {
     break;
    }
    $44 = (($12) + ($$0$i$i38<<2)|0);
    HEAP32[$44>>2] = 0;
    $45 = (($$0$i$i38) + 1)|0;
    $$0$i$i38 = $45;
   }
   __THREW__ = 0;
   invoke_viiiiiiiiii(4,($2|0),($46|0),($6|0),($7|0),($8|0),($9|0),($10|0),($11|0),($12|0),($13|0));
   $47 = __THREW__; __THREW__ = 0;
   $48 = $47&1;
   if ($48) {
    $107 = ___cxa_find_matching_catch_2()|0;
    $108 = (getTempRet0() | 0);
    $$1 = $107;$$133 = $108;
   } else {
    $49 = HEAP8[$22>>0]|0;
    $50 = ($49<<24>>24)<(0);
    $51 = HEAP32[$25>>2]|0;
    $52 = $49&255;
    $53 = $50 ? $51 : $52;
    $54 = HEAP32[$13>>2]|0;
    $55 = ($53|0)>($54|0);
    if ($55) {
     $56 = (($53) - ($54))|0;
     $57 = $56 << 1;
     $58 = ((($12)) + 8|0);
     $59 = ((($58)) + 3|0);
     $60 = HEAP8[$59>>0]|0;
     $61 = ($60<<24>>24)<(0);
     $62 = ((($12)) + 4|0);
     $63 = HEAP32[$62>>2]|0;
     $64 = $60&255;
     $65 = $61 ? $63 : $64;
     $66 = ((($11)) + 8|0);
     $67 = ((($66)) + 3|0);
     $68 = HEAP8[$67>>0]|0;
     $69 = ($68<<24>>24)<(0);
     $70 = ((($11)) + 4|0);
     $71 = HEAP32[$70>>2]|0;
     $72 = $68&255;
     $73 = $69 ? $71 : $72;
     $74 = (($54) + 1)|0;
     $75 = (($74) + ($57))|0;
     $$sink61 = $73;$$sink62 = $75;$$sink63 = $65;
    } else {
     $76 = ((($12)) + 8|0);
     $77 = ((($76)) + 3|0);
     $78 = HEAP8[$77>>0]|0;
     $79 = ($78<<24>>24)<(0);
     $80 = ((($12)) + 4|0);
     $81 = HEAP32[$80>>2]|0;
     $82 = $78&255;
     $83 = $79 ? $81 : $82;
     $84 = ((($11)) + 8|0);
     $85 = ((($84)) + 3|0);
     $86 = HEAP8[$85>>0]|0;
     $87 = ($86<<24>>24)<(0);
     $88 = ((($11)) + 4|0);
     $89 = HEAP32[$88>>2]|0;
     $90 = $86&255;
     $91 = $87 ? $89 : $90;
     $92 = (($54) + 2)|0;
     $$sink61 = $91;$$sink62 = $92;$$sink63 = $83;
    }
    $93 = (($$sink62) + ($$sink63))|0;
    $94 = (($93) + ($$sink61))|0;
    $95 = ($94>>>0)>(100);
    if ($95) {
     $96 = $94 << 2;
     $97 = (_malloc($96)|0);
     $98 = $97;
     $99 = ($97|0)==(0|0);
     if ($99) {
      __THREW__ = 0;
      invoke_v(4);
      $100 = __THREW__; __THREW__ = 0;
      $101 = ___cxa_find_matching_catch_2()|0;
      $102 = (getTempRet0() | 0);
      $$0 = $101;$$032 = $102;$$sroa$051$1 = $98;
     } else {
      $$031 = $97;$$sroa$051$0 = $98;
      label = 24;
     }
    } else {
     $$031 = $14;$$sroa$051$0 = 0;
     label = 24;
    }
    if ((label|0) == 24) {
     $109 = ((($3)) + 4|0);
     $110 = HEAP32[$109>>2]|0;
     $111 = HEAP32[$5>>2]|0;
     $112 = $50 ? $111 : $5;
     $113 = (($112) + ($53<<2)|0);
     $114 = HEAP32[$8>>2]|0;
     $115 = HEAP32[$9>>2]|0;
     __THREW__ = 0;
     invoke_viiiiiiiiiiiiiii(2,($$031|0),($15|0),($16|0),($110|0),($112|0),($113|0),($18|0),($46|0),($7|0),($114|0),($115|0),($10|0),($11|0),($12|0),($54|0));
     $116 = __THREW__; __THREW__ = 0;
     $117 = $116&1;
     if (!($117)) {
      $118 = HEAP32[$1>>2]|0;
      HEAP32[$17>>2] = $118;
      $119 = HEAP32[$15>>2]|0;
      $120 = HEAP32[$16>>2]|0;
      __THREW__ = 0;
      ;HEAP32[$$byval_copy>>2]=HEAP32[$17>>2]|0;
      $121 = (invoke_iiiiiii(40,($$byval_copy|0),($$031|0),($119|0),($120|0),($3|0),($4|0))|0);
      $122 = __THREW__; __THREW__ = 0;
      $123 = $122&1;
      if (!($123)) {
       $124 = ($$sroa$051$0|0)==(0);
       if (!($124)) {
        $125 = $$sroa$051$0;
        _free($125);
       }
       __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($12);
       __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($11);
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
       __ZNSt3__26localeD2Ev($6);
       STACKTOP = sp;return ($121|0);
      }
     }
     $126 = ___cxa_find_matching_catch_2()|0;
     $127 = (getTempRet0() | 0);
     $$0 = $126;$$032 = $127;$$sroa$051$1 = $$sroa$051$0;
    }
    $128 = ($$sroa$051$1|0)==(0);
    if (!($128)) {
     $129 = $$sroa$051$1;
     _free($129);
    }
    $$1 = $$0;$$133 = $$032;
   }
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($12);
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($11);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
   $$3 = $$1;$$335 = $$133;
  }
 } while(0);
 __ZNSt3__26localeD2Ev($6);
 ___resumeException($$3|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__211__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri($0,$1,$2,$3,$4,$5,$6,$7,$8,$9) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 var $$0$i$i$i = 0, $$0$i$i$i48 = 0, $$0$i$i$i51 = 0, $$0$i$i$i55 = 0, $$0$i$i$i60 = 0, $$0$i$i$i65 = 0, $$0$i$i$i70 = 0, $$0$i$i$i75 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i$i = 0, $exitcond$i$i$i49 = 0, $exitcond$i$i$i52 = 0, $exitcond$i$i$i56 = 0, $exitcond$i$i$i61 = 0, $exitcond$i$i$i66 = 0, $exitcond$i$i$i71 = 0, $exitcond$i$i$i76 = 0, $storemerge = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $10 = sp + 12|0;
 $11 = sp;
 if ($0) {
  $12 = (__ZNKSt3__26locale9use_facetERNS0_2idE($2,50988)|0);
  if ($1) {
   $13 = HEAP32[$12>>2]|0;
   $14 = ((($13)) + 44|0);
   $15 = HEAP32[$14>>2]|0;
   FUNCTION_TABLE_vii[$15 & 255]($10,$12);
   $16 = HEAP32[$10>>2]|0;
   HEAP8[$3>>0]=$16&255;HEAP8[$3+1>>0]=($16>>8)&255;HEAP8[$3+2>>0]=($16>>16)&255;HEAP8[$3+3>>0]=$16>>24;
   $17 = HEAP32[$12>>2]|0;
   $18 = ((($17)) + 32|0);
   $19 = HEAP32[$18>>2]|0;
   FUNCTION_TABLE_vii[$19 & 255]($11,$12);
   $20 = ((($8)) + 8|0);
   $21 = ((($20)) + 3|0);
   $22 = HEAP8[$21>>0]|0;
   $23 = ($22<<24>>24)<(0);
   if ($23) {
    $24 = HEAP32[$8>>2]|0;
    HEAP32[$10>>2] = 0;
    __ZNSt3__211char_traitsIwE6assignERwRKw($24,$10);
    $25 = ((($8)) + 4|0);
    HEAP32[$25>>2] = 0;
   } else {
    HEAP32[$10>>2] = 0;
    __ZNSt3__211char_traitsIwE6assignERwRKw($8,$10);
    HEAP8[$21>>0] = 0;
   }
   __THREW__ = 0;
   invoke_vii(167,($8|0),0);
   $26 = __THREW__; __THREW__ = 0;
   $27 = $26&1;
   if ($27) {
    $28 = ___cxa_find_matching_catch_3(0|0)|0;
    $29 = (getTempRet0() | 0);
    ___clang_call_terminate($28);
    // unreachable;
   }
   ;HEAP32[$8>>2]=HEAP32[$11>>2]|0;HEAP32[$8+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$11+8>>2]|0;
   $$0$i$i$i = 0;
   while(1) {
    $exitcond$i$i$i = ($$0$i$i$i|0)==(3);
    if ($exitcond$i$i$i) {
     break;
    }
    $30 = (($11) + ($$0$i$i$i<<2)|0);
    HEAP32[$30>>2] = 0;
    $31 = (($$0$i$i$i) + 1)|0;
    $$0$i$i$i = $31;
   }
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($11);
  } else {
   $32 = HEAP32[$12>>2]|0;
   $33 = ((($32)) + 40|0);
   $34 = HEAP32[$33>>2]|0;
   FUNCTION_TABLE_vii[$34 & 255]($10,$12);
   $35 = HEAP32[$10>>2]|0;
   HEAP8[$3>>0]=$35&255;HEAP8[$3+1>>0]=($35>>8)&255;HEAP8[$3+2>>0]=($35>>16)&255;HEAP8[$3+3>>0]=$35>>24;
   $36 = HEAP32[$12>>2]|0;
   $37 = ((($36)) + 28|0);
   $38 = HEAP32[$37>>2]|0;
   FUNCTION_TABLE_vii[$38 & 255]($11,$12);
   $39 = ((($8)) + 8|0);
   $40 = ((($39)) + 3|0);
   $41 = HEAP8[$40>>0]|0;
   $42 = ($41<<24>>24)<(0);
   if ($42) {
    $43 = HEAP32[$8>>2]|0;
    HEAP32[$10>>2] = 0;
    __ZNSt3__211char_traitsIwE6assignERwRKw($43,$10);
    $44 = ((($8)) + 4|0);
    HEAP32[$44>>2] = 0;
   } else {
    HEAP32[$10>>2] = 0;
    __ZNSt3__211char_traitsIwE6assignERwRKw($8,$10);
    HEAP8[$40>>0] = 0;
   }
   __THREW__ = 0;
   invoke_vii(167,($8|0),0);
   $45 = __THREW__; __THREW__ = 0;
   $46 = $45&1;
   if ($46) {
    $47 = ___cxa_find_matching_catch_3(0|0)|0;
    $48 = (getTempRet0() | 0);
    ___clang_call_terminate($47);
    // unreachable;
   }
   ;HEAP32[$8>>2]=HEAP32[$11>>2]|0;HEAP32[$8+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$11+8>>2]|0;
   $$0$i$i$i48 = 0;
   while(1) {
    $exitcond$i$i$i49 = ($$0$i$i$i48|0)==(3);
    if ($exitcond$i$i$i49) {
     break;
    }
    $49 = (($11) + ($$0$i$i$i48<<2)|0);
    HEAP32[$49>>2] = 0;
    $50 = (($$0$i$i$i48) + 1)|0;
    $$0$i$i$i48 = $50;
   }
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($11);
  }
  $51 = HEAP32[$12>>2]|0;
  $52 = ((($51)) + 12|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = (FUNCTION_TABLE_ii[$53 & 255]($12)|0);
  HEAP32[$4>>2] = $54;
  $55 = HEAP32[$12>>2]|0;
  $56 = ((($55)) + 16|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = (FUNCTION_TABLE_ii[$57 & 255]($12)|0);
  HEAP32[$5>>2] = $58;
  $59 = HEAP32[$12>>2]|0;
  $60 = ((($59)) + 20|0);
  $61 = HEAP32[$60>>2]|0;
  FUNCTION_TABLE_vii[$61 & 255]($11,$12);
  $62 = ((($6)) + 11|0);
  $63 = HEAP8[$62>>0]|0;
  $64 = ($63<<24>>24)<(0);
  if ($64) {
   $65 = HEAP32[$6>>2]|0;
   HEAP8[$10>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($65,$10);
   $66 = ((($6)) + 4|0);
   HEAP32[$66>>2] = 0;
  } else {
   HEAP8[$10>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($6,$10);
   HEAP8[$62>>0] = 0;
  }
  __THREW__ = 0;
  invoke_vii(165,($6|0),0);
  $67 = __THREW__; __THREW__ = 0;
  $68 = $67&1;
  if ($68) {
   $69 = ___cxa_find_matching_catch_3(0|0)|0;
   $70 = (getTempRet0() | 0);
   ___clang_call_terminate($69);
   // unreachable;
  }
  ;HEAP32[$6>>2]=HEAP32[$11>>2]|0;HEAP32[$6+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$11+8>>2]|0;
  $$0$i$i$i51 = 0;
  while(1) {
   $exitcond$i$i$i52 = ($$0$i$i$i51|0)==(3);
   if ($exitcond$i$i$i52) {
    break;
   }
   $71 = (($11) + ($$0$i$i$i51<<2)|0);
   HEAP32[$71>>2] = 0;
   $72 = (($$0$i$i$i51) + 1)|0;
   $$0$i$i$i51 = $72;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($11);
  $73 = HEAP32[$12>>2]|0;
  $74 = ((($73)) + 24|0);
  $75 = HEAP32[$74>>2]|0;
  FUNCTION_TABLE_vii[$75 & 255]($11,$12);
  $76 = ((($7)) + 8|0);
  $77 = ((($76)) + 3|0);
  $78 = HEAP8[$77>>0]|0;
  $79 = ($78<<24>>24)<(0);
  if ($79) {
   $80 = HEAP32[$7>>2]|0;
   HEAP32[$10>>2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($80,$10);
   $81 = ((($7)) + 4|0);
   HEAP32[$81>>2] = 0;
  } else {
   HEAP32[$10>>2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($7,$10);
   HEAP8[$77>>0] = 0;
  }
  __THREW__ = 0;
  invoke_vii(167,($7|0),0);
  $82 = __THREW__; __THREW__ = 0;
  $83 = $82&1;
  if ($83) {
   $84 = ___cxa_find_matching_catch_3(0|0)|0;
   $85 = (getTempRet0() | 0);
   ___clang_call_terminate($84);
   // unreachable;
  }
  ;HEAP32[$7>>2]=HEAP32[$11>>2]|0;HEAP32[$7+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$7+8>>2]=HEAP32[$11+8>>2]|0;
  $$0$i$i$i55 = 0;
  while(1) {
   $exitcond$i$i$i56 = ($$0$i$i$i55|0)==(3);
   if ($exitcond$i$i$i56) {
    break;
   }
   $86 = (($11) + ($$0$i$i$i55<<2)|0);
   HEAP32[$86>>2] = 0;
   $87 = (($$0$i$i$i55) + 1)|0;
   $$0$i$i$i55 = $87;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($11);
  $88 = HEAP32[$12>>2]|0;
  $89 = ((($88)) + 36|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = (FUNCTION_TABLE_ii[$90 & 255]($12)|0);
  $storemerge = $91;
 } else {
  $92 = (__ZNKSt3__26locale9use_facetERNS0_2idE($2,50980)|0);
  if ($1) {
   $93 = HEAP32[$92>>2]|0;
   $94 = ((($93)) + 44|0);
   $95 = HEAP32[$94>>2]|0;
   FUNCTION_TABLE_vii[$95 & 255]($10,$92);
   $96 = HEAP32[$10>>2]|0;
   HEAP8[$3>>0]=$96&255;HEAP8[$3+1>>0]=($96>>8)&255;HEAP8[$3+2>>0]=($96>>16)&255;HEAP8[$3+3>>0]=$96>>24;
   $97 = HEAP32[$92>>2]|0;
   $98 = ((($97)) + 32|0);
   $99 = HEAP32[$98>>2]|0;
   FUNCTION_TABLE_vii[$99 & 255]($11,$92);
   $100 = ((($8)) + 8|0);
   $101 = ((($100)) + 3|0);
   $102 = HEAP8[$101>>0]|0;
   $103 = ($102<<24>>24)<(0);
   if ($103) {
    $104 = HEAP32[$8>>2]|0;
    HEAP32[$10>>2] = 0;
    __ZNSt3__211char_traitsIwE6assignERwRKw($104,$10);
    $105 = ((($8)) + 4|0);
    HEAP32[$105>>2] = 0;
   } else {
    HEAP32[$10>>2] = 0;
    __ZNSt3__211char_traitsIwE6assignERwRKw($8,$10);
    HEAP8[$101>>0] = 0;
   }
   __THREW__ = 0;
   invoke_vii(167,($8|0),0);
   $106 = __THREW__; __THREW__ = 0;
   $107 = $106&1;
   if ($107) {
    $108 = ___cxa_find_matching_catch_3(0|0)|0;
    $109 = (getTempRet0() | 0);
    ___clang_call_terminate($108);
    // unreachable;
   }
   ;HEAP32[$8>>2]=HEAP32[$11>>2]|0;HEAP32[$8+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$11+8>>2]|0;
   $$0$i$i$i60 = 0;
   while(1) {
    $exitcond$i$i$i61 = ($$0$i$i$i60|0)==(3);
    if ($exitcond$i$i$i61) {
     break;
    }
    $110 = (($11) + ($$0$i$i$i60<<2)|0);
    HEAP32[$110>>2] = 0;
    $111 = (($$0$i$i$i60) + 1)|0;
    $$0$i$i$i60 = $111;
   }
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($11);
  } else {
   $112 = HEAP32[$92>>2]|0;
   $113 = ((($112)) + 40|0);
   $114 = HEAP32[$113>>2]|0;
   FUNCTION_TABLE_vii[$114 & 255]($10,$92);
   $115 = HEAP32[$10>>2]|0;
   HEAP8[$3>>0]=$115&255;HEAP8[$3+1>>0]=($115>>8)&255;HEAP8[$3+2>>0]=($115>>16)&255;HEAP8[$3+3>>0]=$115>>24;
   $116 = HEAP32[$92>>2]|0;
   $117 = ((($116)) + 28|0);
   $118 = HEAP32[$117>>2]|0;
   FUNCTION_TABLE_vii[$118 & 255]($11,$92);
   $119 = ((($8)) + 8|0);
   $120 = ((($119)) + 3|0);
   $121 = HEAP8[$120>>0]|0;
   $122 = ($121<<24>>24)<(0);
   if ($122) {
    $123 = HEAP32[$8>>2]|0;
    HEAP32[$10>>2] = 0;
    __ZNSt3__211char_traitsIwE6assignERwRKw($123,$10);
    $124 = ((($8)) + 4|0);
    HEAP32[$124>>2] = 0;
   } else {
    HEAP32[$10>>2] = 0;
    __ZNSt3__211char_traitsIwE6assignERwRKw($8,$10);
    HEAP8[$120>>0] = 0;
   }
   __THREW__ = 0;
   invoke_vii(167,($8|0),0);
   $125 = __THREW__; __THREW__ = 0;
   $126 = $125&1;
   if ($126) {
    $127 = ___cxa_find_matching_catch_3(0|0)|0;
    $128 = (getTempRet0() | 0);
    ___clang_call_terminate($127);
    // unreachable;
   }
   ;HEAP32[$8>>2]=HEAP32[$11>>2]|0;HEAP32[$8+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$11+8>>2]|0;
   $$0$i$i$i65 = 0;
   while(1) {
    $exitcond$i$i$i66 = ($$0$i$i$i65|0)==(3);
    if ($exitcond$i$i$i66) {
     break;
    }
    $129 = (($11) + ($$0$i$i$i65<<2)|0);
    HEAP32[$129>>2] = 0;
    $130 = (($$0$i$i$i65) + 1)|0;
    $$0$i$i$i65 = $130;
   }
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($11);
  }
  $131 = HEAP32[$92>>2]|0;
  $132 = ((($131)) + 12|0);
  $133 = HEAP32[$132>>2]|0;
  $134 = (FUNCTION_TABLE_ii[$133 & 255]($92)|0);
  HEAP32[$4>>2] = $134;
  $135 = HEAP32[$92>>2]|0;
  $136 = ((($135)) + 16|0);
  $137 = HEAP32[$136>>2]|0;
  $138 = (FUNCTION_TABLE_ii[$137 & 255]($92)|0);
  HEAP32[$5>>2] = $138;
  $139 = HEAP32[$92>>2]|0;
  $140 = ((($139)) + 20|0);
  $141 = HEAP32[$140>>2]|0;
  FUNCTION_TABLE_vii[$141 & 255]($11,$92);
  $142 = ((($6)) + 11|0);
  $143 = HEAP8[$142>>0]|0;
  $144 = ($143<<24>>24)<(0);
  if ($144) {
   $145 = HEAP32[$6>>2]|0;
   HEAP8[$10>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($145,$10);
   $146 = ((($6)) + 4|0);
   HEAP32[$146>>2] = 0;
  } else {
   HEAP8[$10>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($6,$10);
   HEAP8[$142>>0] = 0;
  }
  __THREW__ = 0;
  invoke_vii(165,($6|0),0);
  $147 = __THREW__; __THREW__ = 0;
  $148 = $147&1;
  if ($148) {
   $149 = ___cxa_find_matching_catch_3(0|0)|0;
   $150 = (getTempRet0() | 0);
   ___clang_call_terminate($149);
   // unreachable;
  }
  ;HEAP32[$6>>2]=HEAP32[$11>>2]|0;HEAP32[$6+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$11+8>>2]|0;
  $$0$i$i$i70 = 0;
  while(1) {
   $exitcond$i$i$i71 = ($$0$i$i$i70|0)==(3);
   if ($exitcond$i$i$i71) {
    break;
   }
   $151 = (($11) + ($$0$i$i$i70<<2)|0);
   HEAP32[$151>>2] = 0;
   $152 = (($$0$i$i$i70) + 1)|0;
   $$0$i$i$i70 = $152;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($11);
  $153 = HEAP32[$92>>2]|0;
  $154 = ((($153)) + 24|0);
  $155 = HEAP32[$154>>2]|0;
  FUNCTION_TABLE_vii[$155 & 255]($11,$92);
  $156 = ((($7)) + 8|0);
  $157 = ((($156)) + 3|0);
  $158 = HEAP8[$157>>0]|0;
  $159 = ($158<<24>>24)<(0);
  if ($159) {
   $160 = HEAP32[$7>>2]|0;
   HEAP32[$10>>2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($160,$10);
   $161 = ((($7)) + 4|0);
   HEAP32[$161>>2] = 0;
  } else {
   HEAP32[$10>>2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($7,$10);
   HEAP8[$157>>0] = 0;
  }
  __THREW__ = 0;
  invoke_vii(167,($7|0),0);
  $162 = __THREW__; __THREW__ = 0;
  $163 = $162&1;
  if ($163) {
   $164 = ___cxa_find_matching_catch_3(0|0)|0;
   $165 = (getTempRet0() | 0);
   ___clang_call_terminate($164);
   // unreachable;
  }
  ;HEAP32[$7>>2]=HEAP32[$11>>2]|0;HEAP32[$7+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$7+8>>2]=HEAP32[$11+8>>2]|0;
  $$0$i$i$i75 = 0;
  while(1) {
   $exitcond$i$i$i76 = ($$0$i$i$i75|0)==(3);
   if ($exitcond$i$i$i76) {
    break;
   }
   $166 = (($11) + ($$0$i$i$i75<<2)|0);
   HEAP32[$166>>2] = 0;
   $167 = (($$0$i$i$i75) + 1)|0;
   $$0$i$i$i75 = $167;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($11);
  $168 = HEAP32[$92>>2]|0;
  $169 = ((($168)) + 36|0);
  $170 = HEAP32[$169>>2]|0;
  $171 = (FUNCTION_TABLE_ii[$170 & 255]($92)|0);
  $storemerge = $171;
 }
 HEAP32[$9>>2] = $storemerge;
 STACKTOP = sp;return;
}
function __ZNSt3__211__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 $12 = $12|0;
 $13 = $13|0;
 $14 = $14|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i108 = 0, $$0$i$i112 = 0, $$0$ph = 0, $$0101 = 0, $$0103 = 0, $$0106 = 0, $$07$i$i = 0, $$095 = 0, $$097 = 0, $$099 = 0, $$1 = 0, $$1102 = 0, $$1104 = 0, $$196 = 0, $$198 = 0, $$2 = 0, $$2105 = 0, $$3 = 0;
 var $$pre136 = 0, $$promoted = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $or$cond = 0, $scevgep$i = 0, $scevgep$i113 = 0, $spec$select = 0, $spec$select139 = 0, $trunc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$2>>2] = $0;
 $15 = ((($13)) + 8|0);
 $16 = ((($15)) + 3|0);
 $17 = ((($13)) + 4|0);
 $18 = ((($12)) + 8|0);
 $19 = ((($18)) + 3|0);
 $20 = ((($12)) + 4|0);
 $21 = $3 & 512;
 $22 = ($21|0)==(0);
 $23 = ($14|0)>(0);
 $24 = ((($11)) + 11|0);
 $25 = ((($11)) + 4|0);
 $$0106 = 0;$$099 = $4;
 while(1) {
  $exitcond = ($$0106|0)==(4);
  if ($exitcond) {
   break;
  }
  $32 = (($8) + ($$0106)|0);
  $33 = HEAP8[$32>>0]|0;
  $34 = $33 << 24 >> 24;
  L4: do {
   switch ($34|0) {
   case 0:  {
    $35 = HEAP32[$2>>2]|0;
    HEAP32[$1>>2] = $35;
    $$2 = $$099;
    break;
   }
   case 1:  {
    $36 = HEAP32[$2>>2]|0;
    HEAP32[$1>>2] = $36;
    $37 = HEAP32[$6>>2]|0;
    $38 = ((($37)) + 44|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = (FUNCTION_TABLE_iii[$39 & 127]($6,32)|0);
    $41 = HEAP32[$2>>2]|0;
    $42 = ((($41)) + 4|0);
    HEAP32[$2>>2] = $42;
    HEAP32[$41>>2] = $40;
    $$2 = $$099;
    break;
   }
   case 3:  {
    $43 = HEAP8[$16>>0]|0;
    $44 = ($43<<24>>24)<(0);
    $45 = HEAP32[$17>>2]|0;
    $46 = $43&255;
    $47 = $44 ? $45 : $46;
    $48 = ($47|0)==(0);
    if ($48) {
     $$2 = $$099;
    } else {
     $49 = HEAP32[$13>>2]|0;
     $50 = $44 ? $49 : $13;
     $51 = HEAP32[$50>>2]|0;
     $52 = HEAP32[$2>>2]|0;
     $53 = ((($52)) + 4|0);
     HEAP32[$2>>2] = $53;
     HEAP32[$52>>2] = $51;
     $$2 = $$099;
    }
    break;
   }
   case 2:  {
    $54 = HEAP8[$19>>0]|0;
    $55 = ($54<<24>>24)<(0);
    $56 = HEAP32[$20>>2]|0;
    $57 = $54&255;
    $58 = $55 ? $56 : $57;
    $59 = ($58|0)==(0);
    $or$cond = $22 | $59;
    if ($or$cond) {
     $$2 = $$099;
    } else {
     $60 = HEAP32[$12>>2]|0;
     $61 = $55 ? $60 : $12;
     $62 = (($61) + ($58<<2)|0);
     $63 = HEAP32[$2>>2]|0;
     $$0$i$i112 = $63;$65 = $61;
     while(1) {
      $64 = ($65|0)==($62|0);
      if ($64) {
       break;
      }
      $66 = HEAP32[$65>>2]|0;
      HEAP32[$$0$i$i112>>2] = $66;
      $67 = ((($65)) + 4|0);
      $68 = ((($$0$i$i112)) + 4|0);
      $$0$i$i112 = $68;$65 = $67;
     }
     $scevgep$i113 = (($63) + ($58<<2)|0);
     HEAP32[$2>>2] = $scevgep$i113;
     $$2 = $$099;
    }
    break;
   }
   case 4:  {
    $69 = HEAP32[$2>>2]|0;
    $70 = ((($$099)) + 4|0);
    $spec$select = $7 ? $70 : $$099;
    $$0103 = $spec$select;
    while(1) {
     $71 = ($$0103>>>0)<($5>>>0);
     if (!($71)) {
      break;
     }
     $72 = HEAP32[$$0103>>2]|0;
     $73 = HEAP32[$6>>2]|0;
     $74 = ((($73)) + 12|0);
     $75 = HEAP32[$74>>2]|0;
     $76 = (FUNCTION_TABLE_iiii[$75 & 63]($6,2048,$72)|0);
     if (!($76)) {
      break;
     }
     $77 = ((($$0103)) + 4|0);
     $$0103 = $77;
    }
    if ($23) {
     $$0101 = $14;$$1104 = $$0103;
     while(1) {
      $78 = ($$1104>>>0)>($spec$select>>>0);
      $79 = ($$0101|0)>(0);
      $80 = $78 & $79;
      if (!($80)) {
       break;
      }
      $81 = ((($$1104)) + -4|0);
      $82 = HEAP32[$81>>2]|0;
      $83 = HEAP32[$2>>2]|0;
      $84 = ((($83)) + 4|0);
      HEAP32[$2>>2] = $84;
      HEAP32[$83>>2] = $82;
      $85 = (($$0101) + -1)|0;
      $$0101 = $85;$$1104 = $81;
     }
     if ($79) {
      $86 = HEAP32[$6>>2]|0;
      $87 = ((($86)) + 44|0);
      $88 = HEAP32[$87>>2]|0;
      $89 = (FUNCTION_TABLE_iii[$88 & 127]($6,48)|0);
      $93 = $89;
     } else {
      $93 = 0;
     }
     $$promoted = HEAP32[$2>>2]|0;
     $$1102 = $$0101;$92 = $$promoted;
     while(1) {
      $90 = ($$1102|0)>(0);
      $91 = ((($92)) + 4|0);
      if (!($90)) {
       break;
      }
      HEAP32[$92>>2] = $93;
      $94 = (($$1102) + -1)|0;
      $$1102 = $94;$92 = $91;
     }
     HEAP32[$2>>2] = $91;
     HEAP32[$92>>2] = $9;
     $$2105 = $$1104;
    } else {
     $$2105 = $$0103;
    }
    $95 = ($$2105|0)==($spec$select|0);
    if ($95) {
     $96 = HEAP32[$6>>2]|0;
     $97 = ((($96)) + 44|0);
     $98 = HEAP32[$97>>2]|0;
     $99 = (FUNCTION_TABLE_iii[$98 & 127]($6,48)|0);
     $100 = HEAP32[$2>>2]|0;
     $101 = ((($100)) + 4|0);
     HEAP32[$2>>2] = $101;
     HEAP32[$100>>2] = $99;
     $135 = $101;
    } else {
     $102 = HEAP8[$24>>0]|0;
     $103 = ($102<<24>>24)<(0);
     $104 = HEAP32[$25>>2]|0;
     $105 = $102&255;
     $106 = $103 ? $104 : $105;
     $107 = ($106|0)==(0);
     if ($107) {
      $$0$ph = -1;
     } else {
      $108 = HEAP32[$11>>2]|0;
      $109 = $103 ? $108 : $11;
      $110 = HEAP8[$109>>0]|0;
      $111 = $110 << 24 >> 24;
      $$0$ph = $111;
     }
     $$0 = $$0$ph;$$095 = 0;$$097 = 0;$$3 = $$2105;
     while(1) {
      $112 = ($$3|0)==($spec$select|0);
      if ($112) {
       break;
      }
      $113 = ($$097|0)==($$0|0);
      $114 = HEAP32[$2>>2]|0;
      if ($113) {
       $115 = ((($114)) + 4|0);
       HEAP32[$2>>2] = $115;
       HEAP32[$114>>2] = $10;
       $116 = (($$095) + 1)|0;
       $117 = HEAP8[$24>>0]|0;
       $118 = ($117<<24>>24)<(0);
       $119 = HEAP32[$25>>2]|0;
       $120 = $117&255;
       $121 = $118 ? $119 : $120;
       $122 = ($116>>>0)<($121>>>0);
       if ($122) {
        $123 = HEAP32[$11>>2]|0;
        $124 = $118 ? $123 : $11;
        $125 = (($124) + ($116)|0);
        $126 = HEAP8[$125>>0]|0;
        $127 = ($126<<24>>24)==(127);
        $128 = $126 << 24 >> 24;
        $spec$select139 = $127 ? -1 : $128;
        $$1 = $spec$select139;$$196 = $116;$$198 = 0;$132 = $115;
       } else {
        $$1 = $$097;$$196 = $116;$$198 = 0;$132 = $115;
       }
      } else {
       $$1 = $$0;$$196 = $$095;$$198 = $$097;$132 = $114;
      }
      $129 = ((($$3)) + -4|0);
      $130 = HEAP32[$129>>2]|0;
      $131 = ((($132)) + 4|0);
      HEAP32[$2>>2] = $131;
      HEAP32[$132>>2] = $130;
      $133 = (($$198) + 1)|0;
      $$0 = $$1;$$095 = $$196;$$097 = $133;$$3 = $129;
     }
     $$pre136 = HEAP32[$2>>2]|0;
     $135 = $$pre136;
    }
    $134 = ($69|0)==($135|0);
    if ($134) {
     $$2 = $spec$select;
    } else {
     $$0$i$i108 = $135;$$07$i$i = $69;
     while(1) {
      $136 = ((($$0$i$i108)) + -4|0);
      $137 = ($$07$i$i>>>0)<($136>>>0);
      if (!($137)) {
       $$2 = $spec$select;
       break L4;
      }
      $138 = HEAP32[$$07$i$i>>2]|0;
      $139 = HEAP32[$136>>2]|0;
      HEAP32[$$07$i$i>>2] = $139;
      HEAP32[$136>>2] = $138;
      $140 = ((($$07$i$i)) + 4|0);
      $$0$i$i108 = $136;$$07$i$i = $140;
     }
    }
    break;
   }
   default: {
    $$2 = $$099;
   }
   }
  } while(0);
  $141 = (($$0106) + 1)|0;
  $$0106 = $141;$$099 = $$2;
 }
 $26 = HEAP8[$16>>0]|0;
 $27 = ($26<<24>>24)<(0);
 $28 = HEAP32[$17>>2]|0;
 $29 = $26&255;
 $30 = $27 ? $28 : $29;
 $31 = ($30>>>0)>(1);
 if ($31) {
  $142 = HEAP32[$13>>2]|0;
  $143 = ((($142)) + 4|0);
  $144 = $27 ? $143 : $17;
  $145 = $27 ? $142 : $13;
  $146 = (($145) + ($30<<2)|0);
  $147 = HEAP32[$2>>2]|0;
  $148 = $144;
  $149 = $146;
  $150 = (($149) - ($148))|0;
  $$0$i$i = $147;$152 = $144;
  while(1) {
   $151 = ($152|0)==($146|0);
   if ($151) {
    break;
   }
   $153 = HEAP32[$152>>2]|0;
   HEAP32[$$0$i$i>>2] = $153;
   $154 = ((($152)) + 4|0);
   $155 = ((($$0$i$i)) + 4|0);
   $$0$i$i = $155;$152 = $154;
  }
  $156 = $150 >>> 2;
  $scevgep$i = (($147) + ($156<<2)|0);
  HEAP32[$2>>2] = $scevgep$i;
 }
 $157 = $3 & 176;
 $trunc = $157&255;
 switch ($trunc<<24>>24) {
 case 32:  {
  $158 = HEAP32[$2>>2]|0;
  HEAP32[$1>>2] = $158;
  break;
 }
 case 16:  {
  break;
 }
 default: {
  HEAP32[$1>>2] = $0;
 }
 }
 return;
}
function __ZNSt3__28messagesIcED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}
function __ZNSt3__28messagesIcED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt3__28messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($1)) + 11|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)<(0);
 $6 = HEAP32[$1>>2]|0;
 $7 = $5 ? $6 : $1;
 $8 = (_catopen($7,1)|0);
 $9 = $8;
 $10 = ($8|0)!=((-1)|0);
 $11 = $10&1;
 $spec$select = $9 >>> $11;
 return ($spec$select|0);
}
function __ZNKSt3__28messagesIcE6do_getEliiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0$i = 0, $$0$i$i = 0, $$0$i$i25 = 0, $$0$i30 = 0, $$1 = 0, $$123 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond$i$i = 0, $exitcond$i$i26 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $6 = sp;
 ;HEAP32[$6>>2]=0|0;HEAP32[$6+4>>2]=0|0;HEAP32[$6+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $7 = (($6) + ($$0$i$i<<2)|0);
  HEAP32[$7>>2] = 0;
  $8 = (($$0$i$i) + 1)|0;
  $$0$i$i = $8;
 }
 $9 = ((($5)) + 11|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = ($10<<24>>24)<(0);
 $12 = HEAP32[$5>>2]|0;
 $13 = ((($5)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $10&255;
 $16 = $11 ? $12 : $5;
 $17 = $11 ? $14 : $15;
 $18 = (($16) + ($17)|0);
 $$0$i30 = $16;
 while(1) {
  $19 = ($$0$i30>>>0)<($18>>>0);
  if (!($19)) {
   label = 8;
   break;
  }
  $20 = HEAP8[$$0$i30>>0]|0;
  __THREW__ = 0;
  invoke_vii(164,($6|0),($20|0));
  $21 = __THREW__; __THREW__ = 0;
  $22 = $21&1;
  if ($22) {
   label = 9;
   break;
  }
  $23 = ((($$0$i30)) + 1|0);
  $$0$i30 = $23;
 }
 do {
  if ((label|0) == 8) {
   $24 = ($2|0)==(-1);
   $25 = $2 << 1;
   $26 = $25;
   $27 = $24 ? (-1) : $26;
   $28 = ((($6)) + 11|0);
   $29 = HEAP8[$28>>0]|0;
   $30 = ($29<<24>>24)<(0);
   $31 = HEAP32[$6>>2]|0;
   $32 = $30 ? $31 : $6;
   $33 = (_catgets($27,$3,$4,$32)|0);
   ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
   $$0$i$i25 = 0;
   while(1) {
    $exitcond$i$i26 = ($$0$i$i25|0)==(3);
    if ($exitcond$i$i26) {
     break;
    }
    $36 = (($0) + ($$0$i$i25<<2)|0);
    HEAP32[$36>>2] = 0;
    $37 = (($$0$i$i25) + 1)|0;
    $$0$i$i25 = $37;
   }
   $38 = (_strlen($33)|0);
   $39 = (($32) + ($38)|0);
   $$0$i = $32;
   while(1) {
    $40 = ($$0$i>>>0)<($39>>>0);
    if (!($40)) {
     label = 17;
     break;
    }
    $41 = HEAP8[$$0$i>>0]|0;
    __THREW__ = 0;
    invoke_vii(164,($0|0),($41|0));
    $42 = __THREW__; __THREW__ = 0;
    $43 = $42&1;
    if ($43) {
     label = 16;
     break;
    }
    $44 = ((($$0$i)) + 1|0);
    $$0$i = $44;
   }
   if ((label|0) == 16) {
    $45 = ___cxa_find_matching_catch_2()|0;
    $46 = (getTempRet0() | 0);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0);
    $$1 = $45;$$123 = $46;
    break;
   }
   else if ((label|0) == 17) {
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($6);
    STACKTOP = sp;return;
   }
  }
  else if ((label|0) == 9) {
   $34 = ___cxa_find_matching_catch_2()|0;
   $35 = (getTempRet0() | 0);
   $$1 = $34;$$123 = $35;
  }
 } while(0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($6);
 ___resumeException($$1|0);
 // unreachable;
}
function __ZNKSt3__28messagesIcE8do_closeEl($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__28messagesIwED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}
function __ZNSt3__28messagesIwED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt3__28messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($1)) + 11|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)<(0);
 $6 = HEAP32[$1>>2]|0;
 $7 = $5 ? $6 : $1;
 $8 = (_catopen($7,1)|0);
 $9 = $8;
 $10 = ($8|0)!=((-1)|0);
 $11 = $10&1;
 $spec$select = $9 >>> $11;
 return ($spec$select|0);
}
function __ZNKSt3__28messagesIwE6do_getEliiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0$i = 0, $$0$i$i = 0, $$0$i$i33 = 0, $$0$i29 = 0, $$016$i = 0, $$017$i = 0, $$019$i = 0, $$020$i = 0, $$2 = 0, $$224 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $11 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$i = 0, $exitcond$i$i34 = 0, $lpad$phi$index = 0, $lpad$phi$index10 = 0, $lpad$phi46$index = 0, $lpad$phi46$index3 = 0, $or$cond$i = 0, $or$cond$i28 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $6 = sp + 216|0;
 $7 = sp + 128|0;
 $8 = sp + 212|0;
 $9 = sp + 208|0;
 $10 = sp + 200|0;
 $11 = sp;
 $12 = sp + 192|0;
 $13 = sp + 188|0;
 $14 = sp + 176|0;
 $15 = sp + 168|0;
 $16 = sp + 160|0;
 ;HEAP32[$14>>2]=0|0;HEAP32[$14+4>>2]=0|0;HEAP32[$14+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $17 = (($14) + ($$0$i$i<<2)|0);
  HEAP32[$17>>2] = 0;
  $18 = (($$0$i$i) + 1)|0;
  $$0$i$i = $18;
 }
 $19 = ((($15)) + 4|0);
 HEAP32[$19>>2] = 0;
 HEAP32[$15>>2] = (29992);
 $20 = ((($5)) + 8|0);
 $21 = ((($20)) + 3|0);
 $22 = HEAP8[$21>>0]|0;
 $23 = ($22<<24>>24)<(0);
 $24 = HEAP32[$5>>2]|0;
 $25 = ((($5)) + 4|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = $22&255;
 $28 = $23 ? $24 : $5;
 $29 = $23 ? $26 : $27;
 $30 = (($28) + ($29<<2)|0);
 $31 = ((($7)) + 32|0);
 $$016$i = $28;$$017$i = 0;
 L5: while(1) {
  $32 = ($$016$i>>>0)<($30>>>0);
  $33 = ($$017$i|0)!=(2);
  $34 = $33 & $32;
  if (!($34)) {
   label = 14;
   break;
  }
  HEAP32[$9>>2] = $$016$i;
  $35 = HEAP32[$15>>2]|0;
  $36 = ((($35)) + 12|0);
  $37 = HEAP32[$36>>2]|0;
  __THREW__ = 0;
  $38 = (invoke_iiiiiiiii($37|0,($15|0),($6|0),($$016$i|0),($30|0),($9|0),($7|0),($31|0),($8|0))|0);
  $39 = __THREW__; __THREW__ = 0;
  $40 = $39&1;
  if ($40) {
   label = 16;
   break;
  }
  $41 = ($38|0)==(2);
  $42 = HEAP32[$9>>2]|0;
  $43 = ($42|0)==($$016$i|0);
  $or$cond$i28 = $41 | $43;
  if ($or$cond$i28) {
   label = 9;
   break;
  }
  $$0$i29 = $7;
  while(1) {
   $47 = HEAP32[$8>>2]|0;
   $48 = ($$0$i29>>>0)<($47>>>0);
   if (!($48)) {
    break;
   }
   $50 = HEAP8[$$0$i29>>0]|0;
   __THREW__ = 0;
   invoke_vii(164,($14|0),($50|0));
   $51 = __THREW__; __THREW__ = 0;
   $52 = $51&1;
   if ($52) {
    label = 15;
    break L5;
   }
   $53 = ((($$0$i29)) + 1|0);
   $$0$i29 = $53;
  }
  $49 = HEAP32[$9>>2]|0;
  $$016$i = $49;$$017$i = $38;
 }
 if ((label|0) == 9) {
  __THREW__ = 0;
  invoke_vi(309,(42694|0));
  $44 = __THREW__; __THREW__ = 0;
  $45 = ___cxa_find_matching_catch_2()|0;
  $46 = (getTempRet0() | 0);
  $lpad$phi46$index = $45;$lpad$phi46$index3 = $46;
  label = 17;
 }
 else if ((label|0) == 14) {
  __ZNSt3__26locale5facetD2Ev($15);
  $54 = ($2|0)==(-1);
  $55 = $2 << 1;
  $56 = $55;
  $57 = $54 ? (-1) : $56;
  $58 = ((($14)) + 11|0);
  $59 = HEAP8[$58>>0]|0;
  $60 = ($59<<24>>24)<(0);
  $61 = HEAP32[$14>>2]|0;
  $62 = $60 ? $61 : $14;
  $63 = (_catgets($57,$3,$4,$62)|0);
  ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
  $$0$i$i33 = 0;
  while(1) {
   $exitcond$i$i34 = ($$0$i$i33|0)==(3);
   if ($exitcond$i$i34) {
    break;
   }
   $68 = (($0) + ($$0$i$i33<<2)|0);
   HEAP32[$68>>2] = 0;
   $69 = (($$0$i$i33) + 1)|0;
   $$0$i$i33 = $69;
  }
  $70 = ((($16)) + 4|0);
  HEAP32[$70>>2] = 0;
  HEAP32[$16>>2] = (30040);
  $71 = (_strlen($63)|0);
  $72 = (($62) + ($71)|0);
  $73 = $72;
  $74 = ((($11)) + 128|0);
  $$019$i = $62;$$020$i = 0;
  L21: while(1) {
   $75 = ($$019$i>>>0)<($72>>>0);
   $76 = ($$020$i|0)!=(2);
   $77 = $76 & $75;
   if (!($77)) {
    label = 30;
    break;
   }
   HEAP32[$13>>2] = $$019$i;
   $78 = HEAP32[$16>>2]|0;
   $79 = ((($78)) + 16|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = $$019$i;
   $82 = (($73) - ($81))|0;
   $83 = ($82|0)>(32);
   $84 = ((($$019$i)) + 32|0);
   $85 = $83 ? $84 : $72;
   __THREW__ = 0;
   $86 = (invoke_iiiiiiiii($80|0,($16|0),($10|0),($$019$i|0),($85|0),($13|0),($11|0),($74|0),($12|0))|0);
   $87 = __THREW__; __THREW__ = 0;
   $88 = $87&1;
   if ($88) {
    label = 32;
    break;
   }
   $89 = ($86|0)==(2);
   $90 = HEAP32[$13>>2]|0;
   $91 = ($90|0)==($$019$i|0);
   $or$cond$i = $89 | $91;
   if ($or$cond$i) {
    label = 25;
    break;
   }
   $$0$i = $11;
   while(1) {
    $95 = HEAP32[$12>>2]|0;
    $96 = ($$0$i>>>0)<($95>>>0);
    if (!($96)) {
     break;
    }
    $98 = HEAP32[$$0$i>>2]|0;
    __THREW__ = 0;
    invoke_vii(166,($0|0),($98|0));
    $99 = __THREW__; __THREW__ = 0;
    $100 = $99&1;
    if ($100) {
     label = 31;
     break L21;
    }
    $101 = ((($$0$i)) + 4|0);
    $$0$i = $101;
   }
   $97 = HEAP32[$13>>2]|0;
   $$019$i = $97;$$020$i = $86;
  }
  if ((label|0) == 25) {
   __THREW__ = 0;
   invoke_vi(309,(42694|0));
   $92 = __THREW__; __THREW__ = 0;
   $93 = ___cxa_find_matching_catch_2()|0;
   $94 = (getTempRet0() | 0);
   $lpad$phi$index = $93;$lpad$phi$index10 = $94;
  }
  else if ((label|0) == 30) {
   __ZNSt3__26locale5facetD2Ev($16);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($14);
   STACKTOP = sp;return;
  }
  else if ((label|0) == 31) {
   $102 = ___cxa_find_matching_catch_2()|0;
   $103 = (getTempRet0() | 0);
   $lpad$phi$index = $102;$lpad$phi$index10 = $103;
  }
  else if ((label|0) == 32) {
   $104 = ___cxa_find_matching_catch_2()|0;
   $105 = (getTempRet0() | 0);
   $lpad$phi$index = $104;$lpad$phi$index10 = $105;
  }
  __ZNSt3__26locale5facetD2Ev($16);
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($0);
  $$2 = $lpad$phi$index;$$224 = $lpad$phi$index10;
 }
 else if ((label|0) == 15) {
  $64 = ___cxa_find_matching_catch_2()|0;
  $65 = (getTempRet0() | 0);
  $lpad$phi46$index = $64;$lpad$phi46$index3 = $65;
  label = 17;
 }
 else if ((label|0) == 16) {
  $66 = ___cxa_find_matching_catch_2()|0;
  $67 = (getTempRet0() | 0);
  $lpad$phi46$index = $66;$lpad$phi46$index3 = $67;
  label = 17;
 }
 if ((label|0) == 17) {
  __ZNSt3__26locale5facetD2Ev($15);
  $$2 = $lpad$phi46$index;$$224 = $lpad$phi46$index3;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($14);
 ___resumeException($$2|0);
 // unreachable;
}
function __ZNKSt3__28messagesIwE8do_closeEl($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__217__widen_from_utf8ILm32EED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt3__27codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $10 = 0, $11 = 0, $12 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $8 = sp + 4|0;
 $9 = sp;
 HEAP32[$8>>2] = $2;
 HEAP32[$9>>2] = $5;
 $10 = (__ZNSt3__2L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($2,$3,$8,$5,$6,$9,1114111,0)|0);
 $11 = HEAP32[$8>>2]|0;
 HEAP32[$4>>2] = $11;
 $12 = HEAP32[$9>>2]|0;
 HEAP32[$7>>2] = $12;
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $10 = 0, $11 = 0, $12 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $8 = sp + 4|0;
 $9 = sp;
 HEAP32[$8>>2] = $2;
 HEAP32[$9>>2] = $5;
 $10 = (__ZNSt3__2L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE($2,$3,$8,$5,$6,$9,1114111,0)|0);
 $11 = HEAP32[$8>>2]|0;
 HEAP32[$4>>2] = $11;
 $12 = HEAP32[$9>>2]|0;
 HEAP32[$7>>2] = $12;
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$4>>2] = $2;
 return 3;
}
function __ZNKSt3__27codecvtIDic11__mbstate_tE11do_encodingEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__27codecvtIDic11__mbstate_tE16do_always_noconvEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__27codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_m($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = (__ZNSt3__2L19utf8_to_ucs4_lengthEPKhS1_mmNS_12codecvt_modeE($2,$3,$4,1114111,0)|0);
 return ($5|0);
}
function __ZNKSt3__27codecvtIDic11__mbstate_tE13do_max_lengthEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 4;
}
function __ZNSt3__2L19utf8_to_ucs4_lengthEPKhS1_mmNS_12codecvt_modeE($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$091 = 0, $$185 = 0, $$185$ph = 0, $$589 = 0, $$off = 0, $$pre = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = $4 & 4;
 $6 = ($5|0)==(0);
 $$pre = $1;
 if ($6) {
  $$185$ph = $0;
 } else {
  $7 = $0;
  $8 = (($$pre) - ($7))|0;
  $9 = ($8|0)>(2);
  if ($9) {
   $10 = HEAP8[$0>>0]|0;
   $11 = ($10<<24>>24)==(-17);
   if ($11) {
    $12 = ((($0)) + 1|0);
    $13 = HEAP8[$12>>0]|0;
    $14 = ($13<<24>>24)==(-69);
    if ($14) {
     $15 = ((($0)) + 2|0);
     $16 = HEAP8[$15>>0]|0;
     $17 = ($16<<24>>24)==(-65);
     $18 = ((($0)) + 3|0);
     $spec$select = $17 ? $18 : $0;
     $$185$ph = $spec$select;
    } else {
     $$185$ph = $0;
    }
   } else {
    $$185$ph = $0;
   }
  } else {
   $$185$ph = $0;
  }
 }
 $$091 = 0;$$185 = $$185$ph;
 L7: while(1) {
  $19 = ($$185>>>0)<($1>>>0);
  $20 = ($$091>>>0)<($2>>>0);
  $or$cond = $20 & $19;
  if (!($or$cond)) {
   break;
  }
  $21 = HEAP8[$$185>>0]|0;
  $22 = $21&255;
  $23 = ($21<<24>>24)>(-1);
  do {
   if ($23) {
    $24 = ($22>>>0)>($3>>>0);
    if ($24) {
     break L7;
    }
    $25 = ((($$185)) + 1|0);
    $$589 = $25;
   } else {
    $26 = ($21&255)<(194);
    if ($26) {
     break L7;
    }
    $27 = ($21&255)<(224);
    if ($27) {
     $28 = $$185;
     $29 = (($$pre) - ($28))|0;
     $30 = ($29|0)<(2);
     if ($30) {
      break L7;
     }
     $31 = ((($$185)) + 1|0);
     $32 = HEAP8[$31>>0]|0;
     $33 = $32&255;
     $34 = $33 & 192;
     $35 = ($34|0)==(128);
     if (!($35)) {
      break L7;
     }
     $36 = $22 << 6;
     $37 = $36 & 1984;
     $38 = $33 & 63;
     $39 = $38 | $37;
     $40 = ($39>>>0)>($3>>>0);
     if ($40) {
      break L7;
     }
     $41 = ((($$185)) + 2|0);
     $$589 = $41;
     break;
    }
    $42 = ($21&255)<(240);
    if ($42) {
     $43 = $$185;
     $44 = (($$pre) - ($43))|0;
     $45 = ($44|0)<(3);
     if ($45) {
      break L7;
     }
     $46 = ((($$185)) + 1|0);
     $47 = HEAP8[$46>>0]|0;
     $48 = ((($$185)) + 2|0);
     $49 = HEAP8[$48>>0]|0;
     switch ($21<<24>>24) {
     case -32:  {
      $50 = $47 & -32;
      $51 = ($50<<24>>24)==(-96);
      if (!($51)) {
       break L7;
      }
      break;
     }
     case -19:  {
      $52 = $47 & -32;
      $53 = ($52<<24>>24)==(-128);
      if (!($53)) {
       break L7;
      }
      break;
     }
     default: {
      $54 = $47 & -64;
      $55 = ($54<<24>>24)==(-128);
      if (!($55)) {
       break L7;
      }
     }
     }
     $56 = $49&255;
     $57 = $56 & 192;
     $58 = ($57|0)==(128);
     if (!($58)) {
      break L7;
     }
     $59 = $22 << 12;
     $60 = $59 & 61440;
     $61 = $47 & 63;
     $62 = $61&255;
     $63 = $62 << 6;
     $64 = $63 | $60;
     $65 = $56 & 63;
     $66 = $64 | $65;
     $67 = ($66>>>0)>($3>>>0);
     $68 = ((($$185)) + 3|0);
     if ($67) {
      break L7;
     } else {
      $$589 = $68;
      break;
     }
    }
    $69 = ($21&255)<(245);
    if (!($69)) {
     break L7;
    }
    $70 = $$185;
    $71 = (($$pre) - ($70))|0;
    $72 = ($71|0)<(4);
    if ($72) {
     break L7;
    }
    $73 = ((($$185)) + 1|0);
    $74 = HEAP8[$73>>0]|0;
    $75 = ((($$185)) + 2|0);
    $76 = HEAP8[$75>>0]|0;
    $77 = ((($$185)) + 3|0);
    $78 = HEAP8[$77>>0]|0;
    switch ($21<<24>>24) {
    case -16:  {
     $$off = (($74) + 112)<<24>>24;
     $79 = ($$off&255)<(48);
     if (!($79)) {
      break L7;
     }
     break;
    }
    case -12:  {
     $80 = $74 & -16;
     $81 = ($80<<24>>24)==(-128);
     if (!($81)) {
      break L7;
     }
     break;
    }
    default: {
     $82 = $74 & -64;
     $83 = ($82<<24>>24)==(-128);
     if (!($83)) {
      break L7;
     }
    }
    }
    $84 = $76&255;
    $85 = $84 & 192;
    $86 = ($85|0)==(128);
    if (!($86)) {
     break L7;
    }
    $87 = $78&255;
    $88 = $87 & 192;
    $89 = ($88|0)==(128);
    if (!($89)) {
     break L7;
    }
    $90 = $22 << 18;
    $91 = $90 & 1835008;
    $92 = $74 & 63;
    $93 = $92&255;
    $94 = $93 << 12;
    $95 = $94 | $91;
    $96 = $84 << 6;
    $97 = $96 & 4032;
    $98 = $95 | $97;
    $99 = $87 & 63;
    $100 = $98 | $99;
    $101 = ($100>>>0)>($3>>>0);
    $102 = ((($$185)) + 4|0);
    if ($101) {
     break L7;
    } else {
     $$589 = $102;
    }
   }
  } while(0);
  $103 = (($$091) + 1)|0;
  $$091 = $103;$$185 = $$589;
 }
 $104 = $$185;
 $105 = $0;
 $106 = (($104) - ($105))|0;
 return ($106|0);
}
function __ZNSt3__2L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$9 = 0, $$off = 0, $$pre = 0, $$pre$phiZ2D = 0, $$sink = 0, $$sink107 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$2>>2] = $0;
 HEAP32[$5>>2] = $3;
 $8 = $7 & 4;
 $9 = ($8|0)==(0);
 if ($9) {
  $$pre = $1;
  $$pre$phiZ2D = $$pre;
 } else {
  $10 = HEAP32[$2>>2]|0;
  $11 = $1;
  $12 = $10;
  $13 = (($11) - ($12))|0;
  $14 = ($13|0)>(2);
  if ($14) {
   $15 = HEAP8[$10>>0]|0;
   $16 = ($15<<24>>24)==(-17);
   if ($16) {
    $17 = ((($10)) + 1|0);
    $18 = HEAP8[$17>>0]|0;
    $19 = ($18<<24>>24)==(-69);
    if ($19) {
     $20 = ((($10)) + 2|0);
     $21 = HEAP8[$20>>0]|0;
     $22 = ($21<<24>>24)==(-65);
     if ($22) {
      $23 = ((($10)) + 3|0);
      HEAP32[$2>>2] = $23;
      $$pre$phiZ2D = $11;
     } else {
      $$pre$phiZ2D = $11;
     }
    } else {
     $$pre$phiZ2D = $11;
    }
   } else {
    $$pre$phiZ2D = $11;
   }
  } else {
   $$pre$phiZ2D = $11;
  }
 }
 L9: while(1) {
  $24 = HEAP32[$2>>2]|0;
  $25 = ($24>>>0)<($1>>>0);
  if (!($25)) {
   $$9 = 0;
   break;
  }
  $26 = HEAP32[$5>>2]|0;
  $27 = ($26>>>0)<($4>>>0);
  if (!($27)) {
   $$9 = 1;
   break;
  }
  $28 = HEAP8[$24>>0]|0;
  $29 = $28&255;
  $30 = ($28<<24>>24)>(-1);
  do {
   if ($30) {
    $31 = ($29>>>0)>($6>>>0);
    if ($31) {
     $$9 = 2;
     break L9;
    } else {
     $$sink = $29;$$sink107 = 1;
    }
   } else {
    $32 = ($28&255)<(194);
    if ($32) {
     $$9 = 2;
     break L9;
    }
    $33 = ($28&255)<(224);
    if ($33) {
     $34 = $24;
     $35 = (($$pre$phiZ2D) - ($34))|0;
     $36 = ($35|0)<(2);
     if ($36) {
      $$9 = 1;
      break L9;
     }
     $37 = ((($24)) + 1|0);
     $38 = HEAP8[$37>>0]|0;
     $39 = $38&255;
     $40 = $39 & 192;
     $41 = ($40|0)==(128);
     if (!($41)) {
      $$9 = 2;
      break L9;
     }
     $42 = $29 << 6;
     $43 = $42 & 1984;
     $44 = $39 & 63;
     $45 = $44 | $43;
     $46 = ($45>>>0)>($6>>>0);
     if ($46) {
      $$9 = 2;
      break L9;
     } else {
      $$sink = $45;$$sink107 = 2;
      break;
     }
    }
    $47 = ($28&255)<(240);
    if ($47) {
     $48 = $24;
     $49 = (($$pre$phiZ2D) - ($48))|0;
     $50 = ($49|0)<(3);
     if ($50) {
      $$9 = 1;
      break L9;
     }
     $51 = ((($24)) + 1|0);
     $52 = HEAP8[$51>>0]|0;
     $53 = ((($24)) + 2|0);
     $54 = HEAP8[$53>>0]|0;
     switch ($28<<24>>24) {
     case -32:  {
      $55 = $52 & -32;
      $56 = ($55<<24>>24)==(-96);
      if (!($56)) {
       $$9 = 2;
       break L9;
      }
      break;
     }
     case -19:  {
      $57 = $52 & -32;
      $58 = ($57<<24>>24)==(-128);
      if (!($58)) {
       $$9 = 2;
       break L9;
      }
      break;
     }
     default: {
      $59 = $52 & -64;
      $60 = ($59<<24>>24)==(-128);
      if (!($60)) {
       $$9 = 2;
       break L9;
      }
     }
     }
     $61 = $54&255;
     $62 = $61 & 192;
     $63 = ($62|0)==(128);
     if (!($63)) {
      $$9 = 2;
      break L9;
     }
     $64 = $29 << 12;
     $65 = $64 & 61440;
     $66 = $52 & 63;
     $67 = $66&255;
     $68 = $67 << 6;
     $69 = $68 | $65;
     $70 = $61 & 63;
     $71 = $69 | $70;
     $72 = ($71>>>0)>($6>>>0);
     if ($72) {
      $$9 = 2;
      break L9;
     } else {
      $$sink = $71;$$sink107 = 3;
      break;
     }
    }
    $73 = ($28&255)<(245);
    if (!($73)) {
     $$9 = 2;
     break L9;
    }
    $74 = $24;
    $75 = (($$pre$phiZ2D) - ($74))|0;
    $76 = ($75|0)<(4);
    if ($76) {
     $$9 = 1;
     break L9;
    }
    $77 = ((($24)) + 1|0);
    $78 = HEAP8[$77>>0]|0;
    $79 = ((($24)) + 2|0);
    $80 = HEAP8[$79>>0]|0;
    $81 = ((($24)) + 3|0);
    $82 = HEAP8[$81>>0]|0;
    switch ($28<<24>>24) {
    case -16:  {
     $$off = (($78) + 112)<<24>>24;
     $83 = ($$off&255)<(48);
     if (!($83)) {
      $$9 = 2;
      break L9;
     }
     break;
    }
    case -12:  {
     $84 = $78 & -16;
     $85 = ($84<<24>>24)==(-128);
     if (!($85)) {
      $$9 = 2;
      break L9;
     }
     break;
    }
    default: {
     $86 = $78 & -64;
     $87 = ($86<<24>>24)==(-128);
     if (!($87)) {
      $$9 = 2;
      break L9;
     }
    }
    }
    $88 = $80&255;
    $89 = $88 & 192;
    $90 = ($89|0)==(128);
    if (!($90)) {
     $$9 = 2;
     break L9;
    }
    $91 = $82&255;
    $92 = $91 & 192;
    $93 = ($92|0)==(128);
    if (!($93)) {
     $$9 = 2;
     break L9;
    }
    $94 = $29 << 18;
    $95 = $94 & 1835008;
    $96 = $78 & 63;
    $97 = $96&255;
    $98 = $97 << 12;
    $99 = $98 | $95;
    $100 = $88 << 6;
    $101 = $100 & 4032;
    $102 = $99 | $101;
    $103 = $91 & 63;
    $104 = $102 | $103;
    $105 = ($104>>>0)>($6>>>0);
    if ($105) {
     $$9 = 2;
     break L9;
    } else {
     $$sink = $104;$$sink107 = 4;
    }
   }
  } while(0);
  HEAP32[$26>>2] = $$sink;
  $106 = (($24) + ($$sink107)|0);
  HEAP32[$2>>2] = $106;
  $107 = HEAP32[$5>>2]|0;
  $108 = ((($107)) + 4|0);
  HEAP32[$5>>2] = $108;
 }
 return ($$9|0);
}
function __ZNSt3__2L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$2 = 0, $$pre = 0, $$pre49 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$2>>2] = $0;
 HEAP32[$5>>2] = $3;
 $8 = $7 & 2;
 $9 = ($8|0)==(0);
 $$pre49 = $4;
 if ($9) {
  label = 4;
 } else {
  $10 = $3;
  $11 = (($$pre49) - ($10))|0;
  $12 = ($11|0)<(3);
  if ($12) {
   $$2 = 1;
  } else {
   $13 = ((($3)) + 1|0);
   HEAP32[$5>>2] = $13;
   HEAP8[$3>>0] = -17;
   $14 = HEAP32[$5>>2]|0;
   $15 = ((($14)) + 1|0);
   HEAP32[$5>>2] = $15;
   HEAP8[$14>>0] = -69;
   $16 = HEAP32[$5>>2]|0;
   $17 = ((($16)) + 1|0);
   HEAP32[$5>>2] = $17;
   HEAP8[$16>>0] = -65;
   label = 4;
  }
 }
 L4: do {
  if ((label|0) == 4) {
   $$pre = HEAP32[$2>>2]|0;
   $19 = $$pre;
   while(1) {
    $18 = ($19>>>0)<($1>>>0);
    if (!($18)) {
     $$2 = 0;
     break L4;
    }
    $20 = HEAP32[$19>>2]|0;
    $21 = $20 & -2048;
    $22 = ($21|0)==(55296);
    $23 = ($20>>>0)>($6>>>0);
    $or$cond = $23 | $22;
    if ($or$cond) {
     $$2 = 2;
     break L4;
    }
    $24 = ($20>>>0)<(128);
    do {
     if ($24) {
      $25 = HEAP32[$5>>2]|0;
      $26 = $25;
      $27 = (($$pre49) - ($26))|0;
      $28 = ($27|0)<(1);
      if ($28) {
       $$2 = 1;
       break L4;
      }
      $29 = $20&255;
      $30 = ((($25)) + 1|0);
      HEAP32[$5>>2] = $30;
      HEAP8[$25>>0] = $29;
     } else {
      $31 = ($20>>>0)<(2048);
      if ($31) {
       $32 = HEAP32[$5>>2]|0;
       $33 = $32;
       $34 = (($$pre49) - ($33))|0;
       $35 = ($34|0)<(2);
       if ($35) {
        $$2 = 1;
        break L4;
       }
       $36 = $20 >>> 6;
       $37 = $36 | 192;
       $38 = $37&255;
       $39 = ((($32)) + 1|0);
       HEAP32[$5>>2] = $39;
       HEAP8[$32>>0] = $38;
       $40 = $20 & 63;
       $41 = $40 | 128;
       $42 = $41&255;
       $43 = HEAP32[$5>>2]|0;
       $44 = ((($43)) + 1|0);
       HEAP32[$5>>2] = $44;
       HEAP8[$43>>0] = $42;
       break;
      }
      $45 = ($20>>>0)<(65536);
      $46 = HEAP32[$5>>2]|0;
      $47 = $46;
      $48 = (($$pre49) - ($47))|0;
      if ($45) {
       $49 = ($48|0)<(3);
       if ($49) {
        $$2 = 1;
        break L4;
       }
       $50 = $20 >>> 12;
       $51 = $50 | 224;
       $52 = $51&255;
       $53 = ((($46)) + 1|0);
       HEAP32[$5>>2] = $53;
       HEAP8[$46>>0] = $52;
       $54 = $20 >>> 6;
       $55 = $54 & 63;
       $56 = $55 | 128;
       $57 = $56&255;
       $58 = HEAP32[$5>>2]|0;
       $59 = ((($58)) + 1|0);
       HEAP32[$5>>2] = $59;
       HEAP8[$58>>0] = $57;
       $60 = $20 & 63;
       $61 = $60 | 128;
       $62 = $61&255;
       $63 = HEAP32[$5>>2]|0;
       $64 = ((($63)) + 1|0);
       HEAP32[$5>>2] = $64;
       HEAP8[$63>>0] = $62;
       break;
      } else {
       $65 = ($48|0)<(4);
       if ($65) {
        $$2 = 1;
        break L4;
       }
       $66 = $20 >>> 18;
       $67 = $66 | 240;
       $68 = $67&255;
       $69 = ((($46)) + 1|0);
       HEAP32[$5>>2] = $69;
       HEAP8[$46>>0] = $68;
       $70 = $20 >>> 12;
       $71 = $70 & 63;
       $72 = $71 | 128;
       $73 = $72&255;
       $74 = HEAP32[$5>>2]|0;
       $75 = ((($74)) + 1|0);
       HEAP32[$5>>2] = $75;
       HEAP8[$74>>0] = $73;
       $76 = $20 >>> 6;
       $77 = $76 & 63;
       $78 = $77 | 128;
       $79 = $78&255;
       $80 = HEAP32[$5>>2]|0;
       $81 = ((($80)) + 1|0);
       HEAP32[$5>>2] = $81;
       HEAP8[$80>>0] = $79;
       $82 = $20 & 63;
       $83 = $82 | 128;
       $84 = $83&255;
       $85 = HEAP32[$5>>2]|0;
       $86 = ((($85)) + 1|0);
       HEAP32[$5>>2] = $86;
       HEAP8[$85>>0] = $84;
       break;
      }
     }
    } while(0);
    $87 = HEAP32[$2>>2]|0;
    $88 = ((($87)) + 4|0);
    HEAP32[$2>>2] = $88;
    $19 = $88;
   }
  }
 } while(0);
 return ($$2|0);
}
function __ZNSt3__216__narrow_to_utf8ILm32EED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt3__27codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$4>>2] = $2;
 HEAP32[$7>>2] = $5;
 return 3;
}
function __ZNKSt3__27codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$4>>2] = $2;
 HEAP32[$7>>2] = $5;
 return 3;
}
function __ZNKSt3__27codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$4>>2] = $2;
 return 3;
}
function __ZNKSt3__27codecvtIcc11__mbstate_tE11do_encodingEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNKSt3__27codecvtIcc11__mbstate_tE16do_always_noconvEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNKSt3__27codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_m($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$sroa$speculated = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = $3;
 $6 = $2;
 $7 = (($5) - ($6))|0;
 $8 = ($7>>>0)<($4>>>0);
 $$sroa$speculated = $8 ? $7 : $4;
 return ($$sroa$speculated|0);
}
function __ZNKSt3__27codecvtIcc11__mbstate_tE13do_max_lengthEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNKSt3__27codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$0 = 0, $$069 = 0, $$070 = 0, $$070$lcssa = 0, $$077 = 0, $$079 = 0, $$171 = 0, $$173 = 0, $$178 = 0, $$2 = 0, $$2$lcssa = 0, $$375$ph = 0, $$476 = 0, $$5$ph86 = 0, $$pre = 0, $$pre169 = 0, $$pre170 = 0, $10 = 0, $11 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $8 = sp;
 $9 = sp + 8|0;
 $$070 = $2;
 while(1) {
  $10 = ($$070|0)==($3|0);
  if ($10) {
   $$070$lcssa = $3;
   break;
  }
  $11 = HEAP32[$$070>>2]|0;
  $12 = ($11|0)==(0);
  if ($12) {
   $$070$lcssa = $$070;
   break;
  }
  $13 = ((($$070)) + 4|0);
  $$070 = $13;
 }
 HEAP32[$7>>2] = $5;
 HEAP32[$4>>2] = $2;
 $14 = $6;
 $15 = ((($0)) + 8|0);
 $$077 = $2;$$079 = $5;$$171 = $$070$lcssa;
 L6: while(1) {
  $16 = ($$077|0)==($3|0);
  $17 = ($$079|0)==($6|0);
  $or$cond = $17 | $16;
  if ($or$cond) {
   $75 = $$077;
   label = 36;
   break;
  }
  $18 = $1;
  $19 = $18;
  $20 = HEAP32[$19>>2]|0;
  $21 = (($18) + 4)|0;
  $22 = $21;
  $23 = HEAP32[$22>>2]|0;
  $24 = $8;
  $25 = $24;
  HEAP32[$25>>2] = $20;
  $26 = (($24) + 4)|0;
  $27 = $26;
  HEAP32[$27>>2] = $23;
  $28 = $$171;
  $29 = $$077;
  $30 = (($28) - ($29))|0;
  $31 = $30 >> 2;
  $32 = $$079;
  $33 = (($14) - ($32))|0;
  $34 = HEAP32[$15>>2]|0;
  $35 = (___uselocale($34)|0);
  $36 = (_wcsnrtombs($$079,$4,$31,$33,$1)|0);
  $37 = ($35|0)==(0|0);
  if (!($37)) {
   (___uselocale($35)|0);
  }
  switch ($36|0) {
  case -1:  {
   label = 10;
   break L6;
   break;
  }
  case 0:  {
   $$375$ph = 1;
   label = 33;
   break L6;
   break;
  }
  default: {
  }
  }
  $50 = HEAP32[$7>>2]|0;
  $51 = (($50) + ($36)|0);
  HEAP32[$7>>2] = $51;
  $52 = ($51|0)==($6|0);
  if ($52) {
   label = 34;
   break;
  }
  $53 = ($$171|0)==($3|0);
  if ($53) {
   $$pre = HEAP32[$4>>2]|0;
   $$5$ph86 = $3;$77 = $51;$78 = $$pre;
  } else {
   $54 = HEAP32[$15>>2]|0;
   $55 = (___uselocale($54)|0);
   $56 = (_wcrtomb($9,0,$1)|0);
   $57 = ($55|0)==(0|0);
   if (!($57)) {
    (___uselocale($55)|0);
   }
   $58 = ($56|0)==(-1);
   if ($58) {
    $$173 = 2;
    label = 32;
    break;
   }
   $59 = HEAP32[$7>>2]|0;
   $60 = (($14) - ($59))|0;
   $61 = ($56>>>0)>($60>>>0);
   if ($61) {
    $$173 = 1;
    label = 32;
    break;
   }
   $$0 = $9;$$069 = $56;
   while(1) {
    $62 = ($$069|0)==(0);
    if ($62) {
     break;
    }
    $65 = ((($$0)) + 1|0);
    $66 = HEAP8[$$0>>0]|0;
    $67 = HEAP32[$7>>2]|0;
    $68 = ((($67)) + 1|0);
    HEAP32[$7>>2] = $68;
    HEAP8[$67>>0] = $66;
    $69 = (($$069) + -1)|0;
    $$0 = $65;$$069 = $69;
   }
   $63 = HEAP32[$4>>2]|0;
   $64 = ((($63)) + 4|0);
   HEAP32[$4>>2] = $64;
   $$2 = $64;
   while(1) {
    $70 = ($$2|0)==($3|0);
    if ($70) {
     $$2$lcssa = $3;
     break;
    }
    $71 = HEAP32[$$2>>2]|0;
    $72 = ($71|0)==(0);
    if ($72) {
     $$2$lcssa = $$2;
     break;
    }
    $73 = ((($$2)) + 4|0);
    $$2 = $73;
   }
   $$pre169 = HEAP32[$7>>2]|0;
   $$5$ph86 = $$2$lcssa;$77 = $$pre169;$78 = $64;
  }
  $$077 = $78;$$079 = $77;$$171 = $$5$ph86;
 }
 if ((label|0) == 10) {
  HEAP32[$7>>2] = $$079;
  $$178 = $$077;$43 = $$079;
  while(1) {
   $38 = HEAP32[$4>>2]|0;
   $39 = ($$178|0)==($38|0);
   if ($39) {
    break;
   }
   $40 = HEAP32[$$178>>2]|0;
   $41 = HEAP32[$15>>2]|0;
   $42 = (___uselocale($41)|0);
   $44 = (_wcrtomb($43,$40,$8)|0);
   $45 = ($42|0)==(0|0);
   if (!($45)) {
    (___uselocale($42)|0);
   }
   $46 = ($44|0)==(-1);
   if ($46) {
    break;
   }
   $47 = HEAP32[$7>>2]|0;
   $48 = (($47) + ($44)|0);
   HEAP32[$7>>2] = $48;
   $49 = ((($$178)) + 4|0);
   $$178 = $49;$43 = $48;
  }
  HEAP32[$4>>2] = $$178;
  $$375$ph = 2;
  label = 33;
 }
 else if ((label|0) == 32) {
  $$375$ph = $$173;
  label = 33;
 }
 else if ((label|0) == 34) {
  $$pre170 = HEAP32[$4>>2]|0;
  $75 = $$pre170;
  label = 36;
 }
 if ((label|0) == 33) {
  $$476 = $$375$ph;
 }
 else if ((label|0) == 36) {
  $74 = ($75|0)!=($3|0);
  $76 = $74&1;
  $$476 = $76;
 }
 STACKTOP = sp;return ($$476|0);
}
function __ZNKSt3__27codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$070 = 0, $$070$lcssa = 0, $$074 = 0, $$077 = 0, $$1 = 0, $$172$ph = 0, $$175 = 0, $$2 = 0, $$2$lcssa = 0, $$273 = 0, $$4$ph = 0, $$pre = 0, $$pre174 = 0, $$pre175 = 0, $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0;
 var $9 = 0, $or$cond = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $8 = sp;
 $$070 = $2;
 while(1) {
  $9 = ($$070|0)==($3|0);
  if ($9) {
   $$070$lcssa = $3;
   break;
  }
  $10 = HEAP8[$$070>>0]|0;
  $11 = ($10<<24>>24)==(0);
  if ($11) {
   $$070$lcssa = $$070;
   break;
  }
  $12 = ((($$070)) + 1|0);
  $$070 = $12;
 }
 HEAP32[$7>>2] = $5;
 HEAP32[$4>>2] = $2;
 $13 = $6;
 $14 = ((($0)) + 8|0);
 $$074 = $2;$$077 = $5;$$1 = $$070$lcssa;
 while(1) {
  $15 = ($$074|0)==($3|0);
  $16 = ($$077|0)==($6|0);
  $or$cond = $16 | $15;
  if ($or$cond) {
   $70 = $$074;
   label = 33;
   break;
  }
  $17 = $1;
  $18 = $17;
  $19 = HEAP32[$18>>2]|0;
  $20 = (($17) + 4)|0;
  $21 = $20;
  $22 = HEAP32[$21>>2]|0;
  $23 = $8;
  $24 = $23;
  HEAP32[$24>>2] = $19;
  $25 = (($23) + 4)|0;
  $26 = $25;
  HEAP32[$26>>2] = $22;
  $27 = $$1;
  $28 = $$074;
  $29 = (($27) - ($28))|0;
  $30 = $$077;
  $31 = (($13) - ($30))|0;
  $32 = $31 >> 2;
  $33 = HEAP32[$14>>2]|0;
  $34 = (___uselocale($33)|0);
  $35 = (_mbsnrtowcs($$077,$4,$29,$32,$1)|0);
  $36 = ($34|0)==(0|0);
  if (!($36)) {
   (___uselocale($34)|0);
  }
  $37 = ($35|0)==(-1);
  if ($37) {
   label = 10;
   break;
  }
  $52 = HEAP32[$7>>2]|0;
  $53 = (($52) + ($35<<2)|0);
  HEAP32[$7>>2] = $53;
  $54 = ($53|0)==($6|0);
  if ($54) {
   label = 30;
   break;
  }
  $55 = ($$1|0)==($3|0);
  $$pre = HEAP32[$4>>2]|0;
  if ($55) {
   $$4$ph = $3;$72 = $53;$73 = $$pre;
  } else {
   $56 = HEAP32[$14>>2]|0;
   $57 = (___uselocale($56)|0);
   $58 = (_mbrtowc($53,$$pre,1,$1)|0);
   $59 = ($57|0)==(0|0);
   if (!($59)) {
    (___uselocale($57)|0);
   }
   $60 = ($58|0)==(0);
   if (!($60)) {
    $$172$ph = 2;
    label = 29;
    break;
   }
   $61 = HEAP32[$7>>2]|0;
   $62 = ((($61)) + 4|0);
   HEAP32[$7>>2] = $62;
   $63 = HEAP32[$4>>2]|0;
   $64 = ((($63)) + 1|0);
   HEAP32[$4>>2] = $64;
   $$2 = $64;
   while(1) {
    $65 = ($$2|0)==($3|0);
    if ($65) {
     $$2$lcssa = $3;
     break;
    }
    $66 = HEAP8[$$2>>0]|0;
    $67 = ($66<<24>>24)==(0);
    if ($67) {
     $$2$lcssa = $$2;
     break;
    }
    $68 = ((($$2)) + 1|0);
    $$2 = $68;
   }
   $$pre174 = HEAP32[$7>>2]|0;
   $$4$ph = $$2$lcssa;$72 = $$pre174;$73 = $64;
  }
  $$074 = $73;$$077 = $72;$$1 = $$4$ph;
 }
 do {
  if ((label|0) == 10) {
   $38 = $$1;
   $$175 = $$074;$storemerge = $$077;
   L29: while(1) {
    HEAP32[$7>>2] = $storemerge;
    $39 = HEAP32[$4>>2]|0;
    $40 = ($$175|0)==($39|0);
    if ($40) {
     label = 19;
     break;
    }
    $41 = $$175;
    $42 = (($38) - ($41))|0;
    $43 = HEAP32[$14>>2]|0;
    $44 = (___uselocale($43)|0);
    $45 = (_mbrtowc($storemerge,$$175,$42,$8)|0);
    $46 = ($44|0)==(0|0);
    if (!($46)) {
     (___uselocale($44)|0);
    }
    switch ($45|0) {
    case -1:  {
     label = 15;
     break L29;
     break;
    }
    case -2:  {
     label = 16;
     break L29;
     break;
    }
    case 0:  {
     $$sink = 1;
     break;
    }
    default: {
     $$sink = $45;
    }
    }
    $47 = (($$175) + ($$sink)|0);
    $48 = HEAP32[$7>>2]|0;
    $49 = ((($48)) + 4|0);
    $$175 = $47;$storemerge = $49;
   }
   if ((label|0) == 15) {
    HEAP32[$4>>2] = $$175;
    $$172$ph = 2;
    label = 29;
    break;
   }
   else if ((label|0) == 16) {
    HEAP32[$4>>2] = $$175;
    $$172$ph = 1;
    label = 29;
    break;
   }
   else if ((label|0) == 19) {
    HEAP32[$4>>2] = $$175;
    $50 = ($$175|0)!=($3|0);
    $51 = $50&1;
    $$172$ph = $51;
    label = 29;
    break;
   }
  }
  else if ((label|0) == 30) {
   $$pre175 = HEAP32[$4>>2]|0;
   $70 = $$pre175;
   label = 33;
  }
 } while(0);
 if ((label|0) == 29) {
  $$273 = $$172$ph;
 }
 else if ((label|0) == 33) {
  $69 = ($70|0)!=($3|0);
  $71 = $69&1;
  $$273 = $71;
 }
 STACKTOP = sp;return ($$273|0);
}
function __ZNKSt3__27codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$018 = 0, $$019 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $5 = sp;
 HEAP32[$4>>2] = $2;
 $6 = ((($0)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (___uselocale($7)|0);
 $9 = (_wcrtomb($5,0,$1)|0);
 $10 = ($8|0)==(0|0);
 if (!($10)) {
  (___uselocale($8)|0);
 }
 $11 = (($9) + 1)|0;
 $12 = ($11>>>0)<(2);
 L4: do {
  if ($12) {
   $$019 = 2;
  } else {
   $13 = (($9) + -1)|0;
   $14 = HEAP32[$4>>2]|0;
   $15 = $3;
   $16 = (($15) - ($14))|0;
   $17 = ($13>>>0)>($16>>>0);
   if ($17) {
    $$019 = 1;
   } else {
    $$0 = $5;$$018 = $13;
    while(1) {
     $18 = ($$018|0)==(0);
     if ($18) {
      $$019 = 0;
      break L4;
     }
     $19 = ((($$0)) + 1|0);
     $20 = HEAP8[$$0>>0]|0;
     $21 = HEAP32[$4>>2]|0;
     $22 = ((($21)) + 1|0);
     HEAP32[$4>>2] = $22;
     HEAP8[$21>>0] = $20;
     $23 = (($$018) + -1)|0;
     $$0 = $19;$$018 = $23;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$019|0);
}
function __ZNKSt3__27codecvtIwc11__mbstate_tE11do_encodingEv($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (___uselocale($2)|0);
 $4 = (_mbtowc(0,0,4)|0);
 $5 = ($3|0)==(0|0);
 if (!($5)) {
  (___uselocale($3)|0);
 }
 $6 = ($4|0)==(0);
 if ($6) {
  $7 = HEAP32[$1>>2]|0;
  $8 = ($7|0)==(0|0);
  if ($8) {
   $$0 = 1;
  } else {
   $9 = (___uselocale($7)|0);
   $10 = (___ctype_get_mb_cur_max()|0);
   $11 = ($9|0)==(0|0);
   if (!($11)) {
    (___uselocale($9)|0);
   }
   $12 = ($10|0)==(1);
   $spec$select = $12&1;
   return ($spec$select|0);
  }
 } else {
  $$0 = -1;
 }
 return ($$0|0);
}
function __ZNKSt3__27codecvtIwc11__mbstate_tE16do_always_noconvEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__27codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_m($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$029 = 0, $$030 = 0, $$034 = 0, $$131 = 0, $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = $3;
 $6 = ((($0)) + 8|0);
 $$029 = 0;$$030 = 0;$$034 = $2;
 L1: while(1) {
  $7 = ($$029>>>0)>=($4>>>0);
  $8 = ($$034|0)==($3|0);
  $or$cond = $8 | $7;
  if ($or$cond) {
   break;
  }
  $9 = $$034;
  $10 = (($5) - ($9))|0;
  $11 = HEAP32[$6>>2]|0;
  $12 = (___uselocale($11)|0);
  $13 = (_mbrlen($$034,$10,$1)|0);
  $14 = ($12|0)==(0|0);
  if (!($14)) {
   (___uselocale($12)|0);
  }
  switch ($13|0) {
  case -2: case -1:  {
   break L1;
   break;
  }
  case 0:  {
   $$sink = 1;
   break;
  }
  default: {
   $$sink = $13;
  }
  }
  $15 = (($$034) + ($$sink)|0);
  $$131 = (($$sink) + ($$030))|0;
  $16 = (($$029) + 1)|0;
  $$029 = $16;$$030 = $$131;$$034 = $15;
 }
 return ($$030|0);
}
function __ZNKSt3__27codecvtIwc11__mbstate_tE13do_max_lengthEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $7 = 1;
 } else {
  $4 = (___uselocale($2)|0);
  $5 = (___ctype_get_mb_cur_max()|0);
  $6 = ($4|0)==(0|0);
  if ($6) {
   $7 = $5;
  } else {
   (___uselocale($4)|0);
   $7 = $5;
  }
 }
 return ($7|0);
}
function __ZNSt3__27codecvtIwc11__mbstate_tED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (30088);
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 __THREW__ = 0;
 $3 = (invoke_i(24)|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $8 = ___cxa_find_matching_catch_3(0|0)|0;
  $9 = (getTempRet0() | 0);
  __ZNSt3__26locale5facetD2Ev($0);
  ___clang_call_terminate($8);
  // unreachable;
 }
 $6 = ($2|0)==($3|0);
 if (!($6)) {
  $7 = HEAP32[$1>>2]|0;
  _freelocale($7);
 }
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}
function __ZNSt3__27codecvtIwc11__mbstate_tED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__27codecvtIwc11__mbstate_tED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt3__27codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $10 = 0, $11 = 0, $12 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $8 = sp + 4|0;
 $9 = sp;
 HEAP32[$8>>2] = $2;
 HEAP32[$9>>2] = $5;
 $10 = (__ZNSt3__2L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($2,$3,$8,$5,$6,$9,1114111,0)|0);
 $11 = HEAP32[$8>>2]|0;
 HEAP32[$4>>2] = $11;
 $12 = HEAP32[$9>>2]|0;
 HEAP32[$7>>2] = $12;
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $10 = 0, $11 = 0, $12 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $8 = sp + 4|0;
 $9 = sp;
 HEAP32[$8>>2] = $2;
 HEAP32[$9>>2] = $5;
 $10 = (__ZNSt3__2L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE($2,$3,$8,$5,$6,$9,1114111,0)|0);
 $11 = HEAP32[$8>>2]|0;
 HEAP32[$4>>2] = $11;
 $12 = HEAP32[$9>>2]|0;
 HEAP32[$7>>2] = $12;
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__27codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$4>>2] = $2;
 return 3;
}
function __ZNKSt3__27codecvtIDsc11__mbstate_tE11do_encodingEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__27codecvtIDsc11__mbstate_tE16do_always_noconvEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__27codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_m($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = (__ZNSt3__2L20utf8_to_utf16_lengthEPKhS1_mmNS_12codecvt_modeE($2,$3,$4,1114111,0)|0);
 return ($5|0);
}
function __ZNKSt3__27codecvtIDsc11__mbstate_tE13do_max_lengthEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 4;
}
function __ZNSt3__2L20utf8_to_utf16_lengthEPKhS1_mmNS_12codecvt_modeE($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0100 = 0, $$194 = 0, $$194$ph = 0, $$2102 = 0, $$598 = 0, $$off = 0, $$pre = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond110 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = $4 & 4;
 $6 = ($5|0)==(0);
 $$pre = $1;
 if ($6) {
  $$194$ph = $0;
 } else {
  $7 = $0;
  $8 = (($$pre) - ($7))|0;
  $9 = ($8|0)>(2);
  if ($9) {
   $10 = HEAP8[$0>>0]|0;
   $11 = ($10<<24>>24)==(-17);
   if ($11) {
    $12 = ((($0)) + 1|0);
    $13 = HEAP8[$12>>0]|0;
    $14 = ($13<<24>>24)==(-69);
    if ($14) {
     $15 = ((($0)) + 2|0);
     $16 = HEAP8[$15>>0]|0;
     $17 = ($16<<24>>24)==(-65);
     $18 = ((($0)) + 3|0);
     $spec$select = $17 ? $18 : $0;
     $$194$ph = $spec$select;
    } else {
     $$194$ph = $0;
    }
   } else {
    $$194$ph = $0;
   }
  } else {
   $$194$ph = $0;
  }
 }
 $$0100 = 0;$$194 = $$194$ph;
 L7: while(1) {
  $19 = ($$194>>>0)<($1>>>0);
  $20 = ($$0100>>>0)<($2>>>0);
  $or$cond = $20 & $19;
  if (!($or$cond)) {
   break;
  }
  $21 = HEAP8[$$194>>0]|0;
  $22 = $21&255;
  $23 = ($22>>>0)>($3>>>0);
  if ($23) {
   break;
  }
  $24 = ($21<<24>>24)>(-1);
  do {
   if ($24) {
    $25 = ((($$194)) + 1|0);
    $$2102 = $$0100;$$598 = $25;
   } else {
    $26 = ($21&255)<(194);
    if ($26) {
     break L7;
    }
    $27 = ($21&255)<(224);
    if ($27) {
     $28 = $$194;
     $29 = (($$pre) - ($28))|0;
     $30 = ($29|0)<(2);
     if ($30) {
      break L7;
     }
     $31 = ((($$194)) + 1|0);
     $32 = HEAP8[$31>>0]|0;
     $33 = $32&255;
     $34 = $33 & 192;
     $35 = ($34|0)==(128);
     if (!($35)) {
      break L7;
     }
     $36 = $22 << 6;
     $37 = $36 & 1984;
     $38 = $33 & 63;
     $39 = $38 | $37;
     $40 = ($39>>>0)>($3>>>0);
     $41 = ((($$194)) + 2|0);
     if ($40) {
      break L7;
     } else {
      $$2102 = $$0100;$$598 = $41;
      break;
     }
    }
    $42 = ($21&255)<(240);
    if ($42) {
     $43 = $$194;
     $44 = (($$pre) - ($43))|0;
     $45 = ($44|0)<(3);
     if ($45) {
      break L7;
     }
     $46 = ((($$194)) + 1|0);
     $47 = HEAP8[$46>>0]|0;
     $48 = ((($$194)) + 2|0);
     $49 = HEAP8[$48>>0]|0;
     switch ($21<<24>>24) {
     case -32:  {
      $50 = $47 & -32;
      $51 = ($50<<24>>24)==(-96);
      if (!($51)) {
       break L7;
      }
      break;
     }
     case -19:  {
      $52 = $47 & -32;
      $53 = ($52<<24>>24)==(-128);
      if (!($53)) {
       break L7;
      }
      break;
     }
     default: {
      $54 = $47 & -64;
      $55 = ($54<<24>>24)==(-128);
      if (!($55)) {
       break L7;
      }
     }
     }
     $56 = $49&255;
     $57 = $56 & 192;
     $58 = ($57|0)==(128);
     if (!($58)) {
      break L7;
     }
     $59 = $22 << 12;
     $60 = $59 & 61440;
     $61 = $47 & 63;
     $62 = $61&255;
     $63 = $62 << 6;
     $64 = $63 | $60;
     $65 = $56 & 63;
     $66 = $64 | $65;
     $67 = ($66>>>0)>($3>>>0);
     $68 = ((($$194)) + 3|0);
     if ($67) {
      break L7;
     } else {
      $$2102 = $$0100;$$598 = $68;
      break;
     }
    }
    $69 = ($21&255)<(245);
    if (!($69)) {
     break L7;
    }
    $70 = $$194;
    $71 = (($$pre) - ($70))|0;
    $72 = ($71|0)<(4);
    $73 = (($2) - ($$0100))|0;
    $74 = ($73>>>0)<(2);
    $or$cond110 = $74 | $72;
    if ($or$cond110) {
     break L7;
    }
    $75 = ((($$194)) + 1|0);
    $76 = HEAP8[$75>>0]|0;
    $77 = ((($$194)) + 2|0);
    $78 = HEAP8[$77>>0]|0;
    $79 = ((($$194)) + 3|0);
    $80 = HEAP8[$79>>0]|0;
    switch ($21<<24>>24) {
    case -16:  {
     $$off = (($76) + 112)<<24>>24;
     $81 = ($$off&255)<(48);
     if (!($81)) {
      break L7;
     }
     break;
    }
    case -12:  {
     $82 = $76 & -16;
     $83 = ($82<<24>>24)==(-128);
     if (!($83)) {
      break L7;
     }
     break;
    }
    default: {
     $84 = $76 & -64;
     $85 = ($84<<24>>24)==(-128);
     if (!($85)) {
      break L7;
     }
    }
    }
    $86 = $78&255;
    $87 = $86 & 192;
    $88 = ($87|0)==(128);
    if (!($88)) {
     break L7;
    }
    $89 = $80&255;
    $90 = $89 & 192;
    $91 = ($90|0)==(128);
    if (!($91)) {
     break L7;
    }
    $92 = $22 << 18;
    $93 = $92 & 1835008;
    $94 = $76 & 63;
    $95 = $94&255;
    $96 = $95 << 12;
    $97 = $96 | $93;
    $98 = $86 << 6;
    $99 = $98 & 4032;
    $100 = $97 | $99;
    $101 = $89 & 63;
    $102 = $100 | $101;
    $103 = ($102>>>0)>($3>>>0);
    $104 = (($$0100) + 1)|0;
    $105 = ((($$194)) + 4|0);
    if ($103) {
     break L7;
    } else {
     $$2102 = $104;$$598 = $105;
    }
   }
  } while(0);
  $106 = (($$2102) + 1)|0;
  $$0100 = $106;$$194 = $$598;
 }
 $107 = $$194;
 $108 = $0;
 $109 = (($107) - ($108))|0;
 return ($109|0);
}
function __ZNSt3__2L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$8 = 0, $$off = 0, $$pre = 0, $$pre$phiZ2D = 0, $$sink = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$2>>2] = $0;
 HEAP32[$5>>2] = $3;
 $8 = $7 & 4;
 $9 = ($8|0)==(0);
 if ($9) {
  $$pre = $1;
  $$pre$phiZ2D = $$pre;
 } else {
  $10 = HEAP32[$2>>2]|0;
  $11 = $1;
  $12 = $10;
  $13 = (($11) - ($12))|0;
  $14 = ($13|0)>(2);
  if ($14) {
   $15 = HEAP8[$10>>0]|0;
   $16 = ($15<<24>>24)==(-17);
   if ($16) {
    $17 = ((($10)) + 1|0);
    $18 = HEAP8[$17>>0]|0;
    $19 = ($18<<24>>24)==(-69);
    if ($19) {
     $20 = ((($10)) + 2|0);
     $21 = HEAP8[$20>>0]|0;
     $22 = ($21<<24>>24)==(-65);
     if ($22) {
      $23 = ((($10)) + 3|0);
      HEAP32[$2>>2] = $23;
      $$pre$phiZ2D = $11;
     } else {
      $$pre$phiZ2D = $11;
     }
    } else {
     $$pre$phiZ2D = $11;
    }
   } else {
    $$pre$phiZ2D = $11;
   }
  } else {
   $$pre$phiZ2D = $11;
  }
 }
 $24 = $4;
 L9: while(1) {
  $25 = HEAP32[$2>>2]|0;
  $26 = ($25>>>0)<($1>>>0);
  if (!($26)) {
   $$8 = 0;
   break;
  }
  $27 = HEAP32[$5>>2]|0;
  $28 = ($27>>>0)<($4>>>0);
  if (!($28)) {
   $$8 = 1;
   break;
  }
  $29 = HEAP8[$25>>0]|0;
  $30 = $29&255;
  $31 = ($30>>>0)>($6>>>0);
  if ($31) {
   $$8 = 2;
   break;
  }
  $32 = ($29<<24>>24)>(-1);
  do {
   if ($32) {
    $33 = $29&255;
    HEAP16[$27>>1] = $33;
    $34 = ((($25)) + 1|0);
    $$sink = $34;
   } else {
    $35 = ($29&255)<(194);
    if ($35) {
     $$8 = 2;
     break L9;
    }
    $36 = ($29&255)<(224);
    if ($36) {
     $37 = $25;
     $38 = (($$pre$phiZ2D) - ($37))|0;
     $39 = ($38|0)<(2);
     if ($39) {
      $$8 = 1;
      break L9;
     }
     $40 = ((($25)) + 1|0);
     $41 = HEAP8[$40>>0]|0;
     $42 = $41&255;
     $43 = $42 & 192;
     $44 = ($43|0)==(128);
     if (!($44)) {
      $$8 = 2;
      break L9;
     }
     $45 = $30 << 6;
     $46 = $45 & 1984;
     $47 = $42 & 63;
     $48 = $47 | $46;
     $49 = ($48>>>0)>($6>>>0);
     if ($49) {
      $$8 = 2;
      break L9;
     }
     $50 = $48&65535;
     HEAP16[$27>>1] = $50;
     $51 = ((($25)) + 2|0);
     $$sink = $51;
     break;
    }
    $52 = ($29&255)<(240);
    if ($52) {
     $53 = $25;
     $54 = (($$pre$phiZ2D) - ($53))|0;
     $55 = ($54|0)<(3);
     if ($55) {
      $$8 = 1;
      break L9;
     }
     $56 = ((($25)) + 1|0);
     $57 = HEAP8[$56>>0]|0;
     $58 = ((($25)) + 2|0);
     $59 = HEAP8[$58>>0]|0;
     switch ($29<<24>>24) {
     case -32:  {
      $60 = $57 & -32;
      $61 = ($60<<24>>24)==(-96);
      if (!($61)) {
       $$8 = 2;
       break L9;
      }
      break;
     }
     case -19:  {
      $62 = $57 & -32;
      $63 = ($62<<24>>24)==(-128);
      if (!($63)) {
       $$8 = 2;
       break L9;
      }
      break;
     }
     default: {
      $64 = $57 & -64;
      $65 = ($64<<24>>24)==(-128);
      if (!($65)) {
       $$8 = 2;
       break L9;
      }
     }
     }
     $66 = $59&255;
     $67 = $66 & 192;
     $68 = ($67|0)==(128);
     if (!($68)) {
      $$8 = 2;
      break L9;
     }
     $69 = $30 << 12;
     $70 = $57 & 63;
     $71 = $70&255;
     $72 = $71 << 6;
     $73 = $72 | $69;
     $74 = $66 & 63;
     $75 = $73 | $74;
     $76 = $75 & 65535;
     $77 = ($76>>>0)>($6>>>0);
     if ($77) {
      $$8 = 2;
      break L9;
     }
     $78 = $75&65535;
     HEAP16[$27>>1] = $78;
     $79 = ((($25)) + 3|0);
     $$sink = $79;
     break;
    }
    $80 = ($29&255)<(245);
    if (!($80)) {
     $$8 = 2;
     break L9;
    }
    $81 = $25;
    $82 = (($$pre$phiZ2D) - ($81))|0;
    $83 = ($82|0)<(4);
    if ($83) {
     $$8 = 1;
     break L9;
    }
    $84 = ((($25)) + 1|0);
    $85 = HEAP8[$84>>0]|0;
    $86 = ((($25)) + 2|0);
    $87 = HEAP8[$86>>0]|0;
    $88 = ((($25)) + 3|0);
    $89 = HEAP8[$88>>0]|0;
    switch ($29<<24>>24) {
    case -16:  {
     $$off = (($85) + 112)<<24>>24;
     $90 = ($$off&255)<(48);
     if (!($90)) {
      $$8 = 2;
      break L9;
     }
     break;
    }
    case -12:  {
     $91 = $85 & -16;
     $92 = ($91<<24>>24)==(-128);
     if (!($92)) {
      $$8 = 2;
      break L9;
     }
     break;
    }
    default: {
     $93 = $85 & -64;
     $94 = ($93<<24>>24)==(-128);
     if (!($94)) {
      $$8 = 2;
      break L9;
     }
    }
    }
    $95 = $87&255;
    $96 = $95 & 192;
    $97 = ($96|0)==(128);
    if (!($97)) {
     $$8 = 2;
     break L9;
    }
    $98 = $89&255;
    $99 = $98 & 192;
    $100 = ($99|0)==(128);
    if (!($100)) {
     $$8 = 2;
     break L9;
    }
    $101 = $27;
    $102 = (($24) - ($101))|0;
    $103 = ($102|0)<(4);
    if ($103) {
     $$8 = 1;
     break L9;
    }
    $104 = $30 & 7;
    $105 = $104 << 18;
    $106 = $85&255;
    $107 = $106 << 12;
    $108 = $107 & 258048;
    $109 = $108 | $105;
    $110 = $95 << 6;
    $111 = $110 & 4032;
    $112 = $109 | $111;
    $113 = $98 & 63;
    $114 = $112 | $113;
    $115 = ($114>>>0)>($6>>>0);
    if ($115) {
     $$8 = 2;
     break L9;
    }
    $116 = $104 << 2;
    $117 = $106 >>> 4;
    $118 = $117 & 3;
    $119 = $118 | $116;
    $120 = $119 << 6;
    $121 = (($120) + 16320)|0;
    $122 = $106 << 2;
    $123 = $122 & 60;
    $124 = $95 >>> 4;
    $125 = $124 & 3;
    $126 = $123 | $125;
    $127 = $126 | $121;
    $128 = $127 | 55296;
    $129 = $128&65535;
    HEAP16[$27>>1] = $129;
    $130 = $110 & 960;
    $131 = $113 | $130;
    $132 = $131 | 56320;
    $133 = $132&65535;
    $134 = ((($27)) + 2|0);
    HEAP32[$5>>2] = $134;
    HEAP16[$134>>1] = $133;
    $135 = HEAP32[$2>>2]|0;
    $136 = ((($135)) + 4|0);
    $$sink = $136;
   }
  } while(0);
  HEAP32[$2>>2] = $$sink;
  $137 = HEAP32[$5>>2]|0;
  $138 = ((($137)) + 2|0);
  HEAP32[$5>>2] = $138;
 }
 return ($$8|0);
}
function __ZNSt3__2L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$4 = 0, $$pre = 0, $$pre80 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$2>>2] = $0;
 HEAP32[$5>>2] = $3;
 $8 = $7 & 2;
 $9 = ($8|0)==(0);
 $$pre80 = $4;
 if ($9) {
  label = 4;
 } else {
  $10 = $3;
  $11 = (($$pre80) - ($10))|0;
  $12 = ($11|0)<(3);
  if ($12) {
   $$4 = 1;
  } else {
   $13 = ((($3)) + 1|0);
   HEAP32[$5>>2] = $13;
   HEAP8[$3>>0] = -17;
   $14 = HEAP32[$5>>2]|0;
   $15 = ((($14)) + 1|0);
   HEAP32[$5>>2] = $15;
   HEAP8[$14>>0] = -69;
   $16 = HEAP32[$5>>2]|0;
   $17 = ((($16)) + 1|0);
   HEAP32[$5>>2] = $17;
   HEAP8[$16>>0] = -65;
   label = 4;
  }
 }
 L4: do {
  if ((label|0) == 4) {
   $18 = $1;
   $$pre = HEAP32[$2>>2]|0;
   $20 = $$pre;
   while(1) {
    $19 = ($20>>>0)<($1>>>0);
    if (!($19)) {
     $$4 = 0;
     break L4;
    }
    $21 = HEAP16[$20>>1]|0;
    $22 = $21&65535;
    $23 = ($22>>>0)>($6>>>0);
    if ($23) {
     $$4 = 2;
     break L4;
    }
    $24 = ($21&65535)<(128);
    do {
     if ($24) {
      $25 = HEAP32[$5>>2]|0;
      $26 = $25;
      $27 = (($$pre80) - ($26))|0;
      $28 = ($27|0)<(1);
      if ($28) {
       $$4 = 1;
       break L4;
      }
      $29 = $21&255;
      $30 = ((($25)) + 1|0);
      HEAP32[$5>>2] = $30;
      HEAP8[$25>>0] = $29;
     } else {
      $31 = ($21&65535)<(2048);
      if ($31) {
       $32 = HEAP32[$5>>2]|0;
       $33 = $32;
       $34 = (($$pre80) - ($33))|0;
       $35 = ($34|0)<(2);
       if ($35) {
        $$4 = 1;
        break L4;
       }
       $36 = $22 >>> 6;
       $37 = $36 | 192;
       $38 = $37&255;
       $39 = ((($32)) + 1|0);
       HEAP32[$5>>2] = $39;
       HEAP8[$32>>0] = $38;
       $40 = $22 & 63;
       $41 = $40 | 128;
       $42 = $41&255;
       $43 = HEAP32[$5>>2]|0;
       $44 = ((($43)) + 1|0);
       HEAP32[$5>>2] = $44;
       HEAP8[$43>>0] = $42;
       break;
      }
      $45 = ($21&65535)<(55296);
      if ($45) {
       $46 = HEAP32[$5>>2]|0;
       $47 = $46;
       $48 = (($$pre80) - ($47))|0;
       $49 = ($48|0)<(3);
       if ($49) {
        $$4 = 1;
        break L4;
       }
       $50 = $22 >>> 12;
       $51 = $50 | 224;
       $52 = $51&255;
       $53 = ((($46)) + 1|0);
       HEAP32[$5>>2] = $53;
       HEAP8[$46>>0] = $52;
       $54 = $22 >>> 6;
       $55 = $54 & 63;
       $56 = $55 | 128;
       $57 = $56&255;
       $58 = HEAP32[$5>>2]|0;
       $59 = ((($58)) + 1|0);
       HEAP32[$5>>2] = $59;
       HEAP8[$58>>0] = $57;
       $60 = $22 & 63;
       $61 = $60 | 128;
       $62 = $61&255;
       $63 = HEAP32[$5>>2]|0;
       $64 = ((($63)) + 1|0);
       HEAP32[$5>>2] = $64;
       HEAP8[$63>>0] = $62;
       break;
      }
      $65 = ($21&65535)<(56320);
      if (!($65)) {
       $116 = ($21&65535)<(57344);
       if ($116) {
        $$4 = 2;
        break L4;
       }
       $117 = HEAP32[$5>>2]|0;
       $118 = $117;
       $119 = (($$pre80) - ($118))|0;
       $120 = ($119|0)<(3);
       if ($120) {
        $$4 = 1;
        break L4;
       }
       $121 = $22 >>> 12;
       $122 = $121 | 224;
       $123 = $122&255;
       $124 = ((($117)) + 1|0);
       HEAP32[$5>>2] = $124;
       HEAP8[$117>>0] = $123;
       $125 = $22 >>> 6;
       $126 = $125 & 63;
       $127 = $126 | 128;
       $128 = $127&255;
       $129 = HEAP32[$5>>2]|0;
       $130 = ((($129)) + 1|0);
       HEAP32[$5>>2] = $130;
       HEAP8[$129>>0] = $128;
       $131 = $22 & 63;
       $132 = $131 | 128;
       $133 = $132&255;
       $134 = HEAP32[$5>>2]|0;
       $135 = ((($134)) + 1|0);
       HEAP32[$5>>2] = $135;
       HEAP8[$134>>0] = $133;
       break;
      }
      $66 = $20;
      $67 = (($18) - ($66))|0;
      $68 = ($67|0)<(4);
      if ($68) {
       $$4 = 1;
       break L4;
      }
      $69 = ((($20)) + 2|0);
      $70 = HEAP16[$69>>1]|0;
      $71 = $70&65535;
      $72 = $71 & 64512;
      $73 = ($72|0)==(56320);
      if (!($73)) {
       $$4 = 2;
       break L4;
      }
      $74 = HEAP32[$5>>2]|0;
      $75 = (($$pre80) - ($74))|0;
      $76 = ($75|0)<(4);
      if ($76) {
       $$4 = 1;
       break L4;
      }
      $77 = $22 & 960;
      $78 = $77 << 10;
      $79 = (($78) + 65536)|0;
      $80 = $22 << 10;
      $81 = $80 & 64512;
      $82 = $79 | $81;
      $83 = $71 & 1023;
      $84 = $82 | $83;
      $85 = ($84>>>0)>($6>>>0);
      if ($85) {
       $$4 = 2;
       break L4;
      }
      HEAP32[$2>>2] = $69;
      $86 = $77 >>> 6;
      $87 = (($86) + 1)|0;
      $88 = $87 >>> 2;
      $89 = $88 | 240;
      $90 = $89&255;
      $91 = HEAP32[$5>>2]|0;
      $92 = ((($91)) + 1|0);
      HEAP32[$5>>2] = $92;
      HEAP8[$91>>0] = $90;
      $93 = $87 << 4;
      $94 = $93 & 48;
      $95 = $22 >>> 2;
      $96 = $95 & 15;
      $97 = $96 | $94;
      $98 = $97 | 128;
      $99 = $98&255;
      $100 = HEAP32[$5>>2]|0;
      $101 = ((($100)) + 1|0);
      HEAP32[$5>>2] = $101;
      HEAP8[$100>>0] = $99;
      $102 = $22 << 4;
      $103 = $102 & 48;
      $104 = $71 >>> 6;
      $105 = $104 & 15;
      $106 = $103 | $105;
      $107 = $106 | 128;
      $108 = $107&255;
      $109 = HEAP32[$5>>2]|0;
      $110 = ((($109)) + 1|0);
      HEAP32[$5>>2] = $110;
      HEAP8[$109>>0] = $108;
      $111 = $71 & 63;
      $112 = $111 | 128;
      $113 = $112&255;
      $114 = HEAP32[$5>>2]|0;
      $115 = ((($114)) + 1|0);
      HEAP32[$5>>2] = $115;
      HEAP8[$114>>0] = $113;
     }
    } while(0);
    $136 = HEAP32[$2>>2]|0;
    $137 = ((($136)) + 2|0);
    HEAP32[$2>>2] = $137;
    $20 = $137;
   }
  }
 } while(0);
 return ($$4|0);
}
function __ZNSt3__26locale5__impD2Ev($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (30136);
 $1 = ((($0)) + 8|0);
 $2 = ((($0)) + 12|0);
 $$0 = 0;
 while(1) {
  $3 = HEAP32[$2>>2]|0;
  $4 = HEAP32[$1>>2]|0;
  $5 = (($3) - ($4))|0;
  $6 = $5 >> 2;
  $7 = ($$0>>>0)<($6>>>0);
  if (!($7)) {
   break;
  }
  $9 = $4;
  $10 = (($9) + ($$0<<2)|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==(0|0);
  if (!($12)) {
   $13 = ((($11)) + 4|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = (($14) + -1)|0;
   HEAP32[$13>>2] = $15;
   $16 = ($14|0)==(0);
   if ($16) {
    $17 = HEAP32[$11>>2]|0;
    $18 = ((($17)) + 8|0);
    $19 = HEAP32[$18>>2]|0;
    FUNCTION_TABLE_vi[$19 & 511]($11);
   }
  }
  $20 = (($$0) + 1)|0;
  $$0 = $20;
 }
 $8 = ((($0)) + 144|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
 __ZNSt3__213__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEED2Ev($1);
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}
function __ZNSt3__26locale5__impD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5__impD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__213__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 do {
  if (!($2)) {
   $3 = $1;
   $4 = ((($0)) + 4|0);
   HEAP32[$4>>2] = $3;
   $5 = ((($0)) + 16|0);
   $6 = ($1|0)==($5|0);
   if ($6) {
    $7 = ((($0)) + 128|0);
    HEAP8[$7>>0] = 0;
    break;
   } else {
    __ZdlPv($1);
    break;
   }
  }
 } while(0);
 return;
}
function __ZNSt3__25ctypeIcED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (30156);
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  $4 = ((($0)) + 12|0);
  $5 = HEAP8[$4>>0]|0;
  $6 = ($5<<24>>24)==(0);
  if (!($6)) {
   __ZdaPv($2);
  }
 }
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}
function __ZNSt3__25ctypeIcED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__25ctypeIcED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt3__25ctypeIcE10do_toupperEc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1<<24>>24)>(-1);
 if ($2) {
  $3 = $1&255;
  $4 = (__ZNSt3__25ctypeIcE21__classic_upper_tableEv()|0);
  $5 = (($4) + ($3<<2)|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = $6&255;
  $8 = $7;
 } else {
  $8 = $1;
 }
 return ($8|0);
}
function __ZNKSt3__25ctypeIcE10do_toupperEPcPKc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $1;
 while(1) {
  $3 = ($$0|0)==($2|0);
  if ($3) {
   break;
  }
  $4 = HEAP8[$$0>>0]|0;
  $5 = ($4<<24>>24)>(-1);
  if ($5) {
   $6 = (__ZNSt3__25ctypeIcE21__classic_upper_tableEv()|0);
   $7 = HEAP8[$$0>>0]|0;
   $8 = $7 << 24 >> 24;
   $9 = (($6) + ($8<<2)|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = $10&255;
   $12 = $11;
  } else {
   $12 = $4;
  }
  HEAP8[$$0>>0] = $12;
  $13 = ((($$0)) + 1|0);
  $$0 = $13;
 }
 return ($2|0);
}
function __ZNKSt3__25ctypeIcE10do_tolowerEc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1<<24>>24)>(-1);
 if ($2) {
  $3 = $1 << 24 >> 24;
  $4 = (__ZNSt3__25ctypeIcE21__classic_lower_tableEv()|0);
  $5 = (($4) + ($3<<2)|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = $6&255;
  $8 = $7;
 } else {
  $8 = $1;
 }
 return ($8|0);
}
function __ZNKSt3__25ctypeIcE10do_tolowerEPcPKc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $1;
 while(1) {
  $3 = ($$0|0)==($2|0);
  if ($3) {
   break;
  }
  $4 = HEAP8[$$0>>0]|0;
  $5 = ($4<<24>>24)>(-1);
  if ($5) {
   $6 = (__ZNSt3__25ctypeIcE21__classic_lower_tableEv()|0);
   $7 = HEAP8[$$0>>0]|0;
   $8 = $7 << 24 >> 24;
   $9 = (($6) + ($8<<2)|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = $10&255;
   $12 = $11;
  } else {
   $12 = $4;
  }
  HEAP8[$$0>>0] = $12;
  $13 = ((($$0)) + 1|0);
  $$0 = $13;
 }
 return ($2|0);
}
function __ZNKSt3__25ctypeIcE8do_widenEc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($1|0);
}
function __ZNKSt3__25ctypeIcE8do_widenEPKcS3_Pc($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$07 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $3;$$07 = $1;
 while(1) {
  $4 = ($$07|0)==($2|0);
  if ($4) {
   break;
  }
  $5 = HEAP8[$$07>>0]|0;
  HEAP8[$$0>>0] = $5;
  $6 = ((($$07)) + 1|0);
  $7 = ((($$0)) + 1|0);
  $$0 = $7;$$07 = $6;
 }
 return ($2|0);
}
function __ZNKSt3__25ctypeIcE9do_narrowEcc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1<<24>>24)>(-1);
 $$ = $3 ? $1 : $2;
 return ($$|0);
}
function __ZNKSt3__25ctypeIcE9do_narrowEPKcS3_cPc($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$0 = 0, $$09 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $4;$$09 = $1;
 while(1) {
  $5 = ($$09|0)==($2|0);
  if ($5) {
   break;
  }
  $6 = HEAP8[$$09>>0]|0;
  $7 = ($6<<24>>24)>(-1);
  $$ = $7 ? $6 : $3;
  HEAP8[$$0>>0] = $$;
  $8 = ((($$09)) + 1|0);
  $9 = ((($$0)) + 1|0);
  $$0 = $9;$$09 = $8;
 }
 return ($2|0);
}
function __ZNSt3__25ctypeIcE21__classic_lower_tableEv() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___ctype_tolower_loc()|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZNSt3__25ctypeIcE21__classic_upper_tableEv() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___ctype_toupper_loc()|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZNSt3__25ctypeIcE13classic_tableEv() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___ctype_b_loc()|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZNSt3__28numpunctIcED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (30208);
 $1 = ((($0)) + 12|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($1);
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}
function __ZNSt3__28numpunctIcED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__28numpunctIcED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt3__28numpunctIcE16do_decimal_pointEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = HEAP8[$1>>0]|0;
 return ($2|0);
}
function __ZNKSt3__28numpunctIcE16do_thousands_sepEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 9|0);
 $2 = HEAP8[$1>>0]|0;
 return ($2|0);
}
function __ZNKSt3__28numpunctIcE11do_groupingEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 12|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($0,$2);
 return;
}
function __ZNKSt3__28numpunctIcE11do_truenameEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $2 = (__ZNSt3__211char_traitsIcE6lengthEPKc(43726)|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($0,43726,$2);
 return;
}
function __ZNKSt3__28numpunctIcE12do_falsenameEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $2 = (__ZNSt3__211char_traitsIcE6lengthEPKc(43720)|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($0,43720,$2);
 return;
}
function __ZNSt3__28numpunctIwED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (30248);
 $1 = ((($0)) + 16|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($1);
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}
function __ZNSt3__28numpunctIwED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__28numpunctIwED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt3__28numpunctIwE16do_decimal_pointEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function __ZNKSt3__28numpunctIwE16do_thousands_sepEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function __ZNKSt3__28numpunctIwE11do_groupingEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 16|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($0,$2);
 return;
}
function __ZNKSt3__28numpunctIwE11do_truenameEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $2 = (__ZNSt3__211char_traitsIwE6lengthEPKw(30304)|0);
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwm($0,30304,$2);
 return;
}
function __ZNKSt3__28numpunctIwE12do_falsenameEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $2 = (__ZNSt3__211char_traitsIwE6lengthEPKw(30280)|0);
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwm($0,30280,$2);
 return;
}
function __ZNSt3__26locale5facetD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__25ctypeIwED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt3__25ctypeIwE5do_isEtw($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2>>>0)<(128);
 if ($3) {
  $4 = (__ZNSt3__25ctypeIcE13classic_tableEv()|0);
  $5 = (($4) + ($2<<1)|0);
  $6 = HEAP16[$5>>1]|0;
  $7 = $6 & $1;
  $8 = ($7<<16>>16)!=(0);
  $9 = $8;
 } else {
  $9 = 0;
 }
 return ($9|0);
}
function __ZNKSt3__25ctypeIwE5do_isEPKwS3_Pt($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$08 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $3;$$08 = $1;
 while(1) {
  $4 = ($$08|0)==($2|0);
  if ($4) {
   break;
  }
  $5 = HEAP32[$$08>>2]|0;
  $6 = ($5>>>0)<(128);
  if ($6) {
   $7 = (__ZNSt3__25ctypeIcE13classic_tableEv()|0);
   $8 = HEAP32[$$08>>2]|0;
   $9 = (($7) + ($8<<1)|0);
   $10 = HEAP16[$9>>1]|0;
   $11 = $10&65535;
   $13 = $11;
  } else {
   $13 = 0;
  }
  $12 = $13&65535;
  HEAP16[$$0>>1] = $12;
  $14 = ((($$08)) + 4|0);
  $15 = ((($$0)) + 2|0);
  $$0 = $15;$$08 = $14;
 }
 return ($2|0);
}
function __ZNKSt3__25ctypeIwE10do_scan_isEtPKwS3_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$0$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $2;
 while(1) {
  $4 = ($$0|0)==($3|0);
  if ($4) {
   $$0$lcssa = $3;
   break;
  }
  $5 = HEAP32[$$0>>2]|0;
  $6 = ($5>>>0)<(128);
  if ($6) {
   $7 = (__ZNSt3__25ctypeIcE13classic_tableEv()|0);
   $8 = HEAP32[$$0>>2]|0;
   $9 = (($7) + ($8<<1)|0);
   $10 = HEAP16[$9>>1]|0;
   $11 = $10 & $1;
   $12 = ($11<<16>>16)==(0);
   if (!($12)) {
    $$0$lcssa = $$0;
    break;
   }
  }
  $13 = ((($$0)) + 4|0);
  $$0 = $13;
 }
 return ($$0$lcssa|0);
}
function __ZNKSt3__25ctypeIwE11do_scan_notEtPKwS3_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$0$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $2;
 while(1) {
  $4 = ($$0|0)==($3|0);
  if ($4) {
   $$0$lcssa = $3;
   break;
  }
  $5 = HEAP32[$$0>>2]|0;
  $6 = ($5>>>0)<(128);
  if (!($6)) {
   $$0$lcssa = $$0;
   break;
  }
  $7 = (__ZNSt3__25ctypeIcE13classic_tableEv()|0);
  $8 = HEAP32[$$0>>2]|0;
  $9 = (($7) + ($8<<1)|0);
  $10 = HEAP16[$9>>1]|0;
  $11 = $10 & $1;
  $12 = ($11<<16>>16)==(0);
  if ($12) {
   $$0$lcssa = $$0;
   break;
  }
  $13 = ((($$0)) + 4|0);
  $$0 = $13;
 }
 return ($$0$lcssa|0);
}
function __ZNKSt3__25ctypeIwE10do_toupperEw($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1>>>0)<(128);
 if ($2) {
  $3 = (__ZNSt3__25ctypeIcE21__classic_upper_tableEv()|0);
  $4 = (($3) + ($1<<2)|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = $5;
 } else {
  $6 = $1;
 }
 return ($6|0);
}
function __ZNKSt3__25ctypeIwE10do_toupperEPwPKw($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $1;
 while(1) {
  $3 = ($$0|0)==($2|0);
  if ($3) {
   break;
  }
  $4 = HEAP32[$$0>>2]|0;
  $5 = ($4>>>0)<(128);
  if ($5) {
   $6 = (__ZNSt3__25ctypeIcE21__classic_upper_tableEv()|0);
   $7 = HEAP32[$$0>>2]|0;
   $8 = (($6) + ($7<<2)|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = $9;
  } else {
   $10 = $4;
  }
  HEAP32[$$0>>2] = $10;
  $11 = ((($$0)) + 4|0);
  $$0 = $11;
 }
 return ($2|0);
}
function __ZNKSt3__25ctypeIwE10do_tolowerEw($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1>>>0)<(128);
 if ($2) {
  $3 = (__ZNSt3__25ctypeIcE21__classic_lower_tableEv()|0);
  $4 = (($3) + ($1<<2)|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = $5;
 } else {
  $6 = $1;
 }
 return ($6|0);
}
function __ZNKSt3__25ctypeIwE10do_tolowerEPwPKw($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $1;
 while(1) {
  $3 = ($$0|0)==($2|0);
  if ($3) {
   break;
  }
  $4 = HEAP32[$$0>>2]|0;
  $5 = ($4>>>0)<(128);
  if ($5) {
   $6 = (__ZNSt3__25ctypeIcE21__classic_lower_tableEv()|0);
   $7 = HEAP32[$$0>>2]|0;
   $8 = (($6) + ($7<<2)|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = $9;
  } else {
   $10 = $4;
  }
  HEAP32[$$0>>2] = $10;
  $11 = ((($$0)) + 4|0);
  $$0 = $11;
 }
 return ($2|0);
}
function __ZNKSt3__25ctypeIwE8do_widenEc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1 << 24 >> 24;
 return ($2|0);
}
function __ZNKSt3__25ctypeIwE8do_widenEPKcS3_Pw($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$07 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $3;$$07 = $1;
 while(1) {
  $4 = ($$07|0)==($2|0);
  if ($4) {
   break;
  }
  $5 = HEAP8[$$07>>0]|0;
  $6 = $5 << 24 >> 24;
  HEAP32[$$0>>2] = $6;
  $7 = ((($$07)) + 1|0);
  $8 = ((($$0)) + 4|0);
  $$0 = $8;$$07 = $7;
 }
 return ($2|0);
}
function __ZNKSt3__25ctypeIwE9do_narrowEwc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1>>>0)<(128);
 $4 = $1&255;
 $$0 = $3 ? $4 : $2;
 return ($$0|0);
}
function __ZNKSt3__25ctypeIwE9do_narrowEPKwS3_cPc($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$09 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $scevgep = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = $1;
 $6 = $2;
 $7 = (($6) - ($5))|0;
 $8 = $7 >>> 2;
 $$0 = $4;$$09 = $1;
 while(1) {
  $9 = ($$09|0)==($2|0);
  if ($9) {
   break;
  }
  $10 = HEAP32[$$09>>2]|0;
  $11 = ($10>>>0)<(128);
  $12 = $10&255;
  $storemerge = $11 ? $12 : $3;
  HEAP8[$$0>>0] = $storemerge;
  $13 = ((($$09)) + 4|0);
  $14 = ((($$0)) + 1|0);
  $$0 = $14;$$09 = $13;
 }
 $scevgep = (($1) + ($8<<2)|0);
 return ($scevgep|0);
}
function __ZNSt3__27codecvtIcc11__mbstate_tED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__27codecvtIDsc11__mbstate_tED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__27codecvtIDic11__mbstate_tED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__220__time_get_c_storageIcEC2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (30564);
 return;
}
function __ZNSt3__220__time_get_c_storageIwEC2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (30600);
 return;
}
function __ZNSt3__25ctypeIcEC2EPKtbm($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = $2&1;
 $5 = (($3) + -1)|0;
 $6 = ((($0)) + 4|0);
 HEAP32[$6>>2] = $5;
 HEAP32[$0>>2] = (30156);
 $7 = ((($0)) + 8|0);
 HEAP32[$7>>2] = $1;
 $8 = ((($0)) + 12|0);
 HEAP8[$8>>0] = $4;
 $9 = ($1|0)==(0|0);
 if ($9) {
  $10 = (__ZNSt3__25ctypeIcE13classic_tableEv()|0);
  HEAP32[$7>>2] = $10;
 }
 return;
}
function __ZNSt3__26locale5__impC2Em($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$03 = 0, $$1 = 0, $$14 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (($1) + -1)|0;
 $3 = ((($0)) + 4|0);
 HEAP32[$3>>2] = $2;
 HEAP32[$0>>2] = (30136);
 $4 = ((($0)) + 8|0);
 __THREW__ = 0;
 invoke_vii(168,($4|0),28);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $119 = ___cxa_find_matching_catch_2()|0;
  $120 = (getTempRet0() | 0);
  $$1 = $120;$$14 = $119;
 } else {
  $7 = ((($0)) + 144|0);
  ;HEAP32[$7>>2]=0|0;HEAP32[$7+4>>2]=0|0;HEAP32[$7+8>>2]=0|0;
  $8 = (__ZNSt3__211char_traitsIcE6lengthEPKc(41628)|0);
  __THREW__ = 0;
  invoke_viii(30,($7|0),(41628|0),($8|0));
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  if ($10) {
   $121 = ___cxa_find_matching_catch_2()|0;
   $122 = (getTempRet0() | 0);
   $$0 = $122;$$03 = $121;
  } else {
   $11 = HEAP32[$4>>2]|0;
   $12 = ((($0)) + 12|0);
   HEAP32[$12>>2] = $11;
   __THREW__ = 0;
   invoke_v(11);
   $13 = __THREW__; __THREW__ = 0;
   $14 = $13&1;
   do {
    if (!($14)) {
     __THREW__ = 0;
     invoke_vii(169,($0|0),(48584|0));
     $15 = __THREW__; __THREW__ = 0;
     $16 = $15&1;
     if (!($16)) {
      __THREW__ = 0;
      invoke_v(12);
      $17 = __THREW__; __THREW__ = 0;
      $18 = $17&1;
      if (!($18)) {
       __THREW__ = 0;
       invoke_vii(170,($0|0),(48592|0));
       $19 = __THREW__; __THREW__ = 0;
       $20 = $19&1;
       if (!($20)) {
        __ZNSt3__212_GLOBAL__N_14makeINS_5ctypeIcEEDnbjEERT_T0_T1_T2_();
        __THREW__ = 0;
        invoke_vii(171,($0|0),(48600|0));
        $21 = __THREW__; __THREW__ = 0;
        $22 = $21&1;
        if (!($22)) {
         __THREW__ = 0;
         invoke_v(13);
         $23 = __THREW__; __THREW__ = 0;
         $24 = $23&1;
         if (!($24)) {
          __THREW__ = 0;
          invoke_vii(172,($0|0),(48616|0));
          $25 = __THREW__; __THREW__ = 0;
          $26 = $25&1;
          if (!($26)) {
           __THREW__ = 0;
           invoke_v(14);
           $27 = __THREW__; __THREW__ = 0;
           $28 = $27&1;
           if (!($28)) {
            __THREW__ = 0;
            invoke_vii(173,($0|0),(48624|0));
            $29 = __THREW__; __THREW__ = 0;
            $30 = $29&1;
            if (!($30)) {
             __THREW__ = 0;
             invoke_v(15);
             $31 = __THREW__; __THREW__ = 0;
             $32 = $31&1;
             if (!($32)) {
              __THREW__ = 0;
              invoke_vii(174,($0|0),(48632|0));
              $33 = __THREW__; __THREW__ = 0;
              $34 = $33&1;
              if (!($34)) {
               __THREW__ = 0;
               invoke_v(16);
               $35 = __THREW__; __THREW__ = 0;
               $36 = $35&1;
               if (!($36)) {
                __THREW__ = 0;
                invoke_vii(175,($0|0),(48648|0));
                $37 = __THREW__; __THREW__ = 0;
                $38 = $37&1;
                if (!($38)) {
                 __THREW__ = 0;
                 invoke_v(17);
                 $39 = __THREW__; __THREW__ = 0;
                 $40 = $39&1;
                 if (!($40)) {
                  __THREW__ = 0;
                  invoke_vii(176,($0|0),(48656|0));
                  $41 = __THREW__; __THREW__ = 0;
                  $42 = $41&1;
                  if (!($42)) {
                   __ZNSt3__212_GLOBAL__N_14makeINS_8numpunctIcEEjEERT_T0_();
                   __THREW__ = 0;
                   invoke_vii(177,($0|0),(48664|0));
                   $43 = __THREW__; __THREW__ = 0;
                   $44 = $43&1;
                   if ($44) {
                    break;
                   }
                   __ZNSt3__212_GLOBAL__N_14makeINS_8numpunctIwEEjEERT_T0_();
                   __THREW__ = 0;
                   invoke_vii(178,($0|0),(48688|0));
                   $45 = __THREW__; __THREW__ = 0;
                   $46 = $45&1;
                   if ($46) {
                    break;
                   }
                   __THREW__ = 0;
                   invoke_v(18);
                   $47 = __THREW__; __THREW__ = 0;
                   $48 = $47&1;
                   if ($48) {
                    break;
                   }
                   __THREW__ = 0;
                   invoke_vii(179,($0|0),(48720|0));
                   $49 = __THREW__; __THREW__ = 0;
                   $50 = $49&1;
                   if ($50) {
                    break;
                   }
                   __THREW__ = 0;
                   invoke_v(19);
                   $51 = __THREW__; __THREW__ = 0;
                   $52 = $51&1;
                   if ($52) {
                    break;
                   }
                   __THREW__ = 0;
                   invoke_vii(180,($0|0),(48728|0));
                   $53 = __THREW__; __THREW__ = 0;
                   $54 = $53&1;
                   if ($54) {
                    break;
                   }
                   __THREW__ = 0;
                   invoke_v(20);
                   $55 = __THREW__; __THREW__ = 0;
                   $56 = $55&1;
                   if ($56) {
                    break;
                   }
                   __THREW__ = 0;
                   invoke_vii(181,($0|0),(48736|0));
                   $57 = __THREW__; __THREW__ = 0;
                   $58 = $57&1;
                   if ($58) {
                    break;
                   }
                   __THREW__ = 0;
                   invoke_v(21);
                   $59 = __THREW__; __THREW__ = 0;
                   $60 = $59&1;
                   if ($60) {
                    break;
                   }
                   __THREW__ = 0;
                   invoke_vii(182,($0|0),(48744|0));
                   $61 = __THREW__; __THREW__ = 0;
                   $62 = $61&1;
                   if ($62) {
                    break;
                   }
                   __THREW__ = 0;
                   invoke_v(22);
                   $63 = __THREW__; __THREW__ = 0;
                   $64 = $63&1;
                   if ($64) {
                    break;
                   }
                   __THREW__ = 0;
                   invoke_vii(183,($0|0),(48752|0));
                   $65 = __THREW__; __THREW__ = 0;
                   $66 = $65&1;
                   if ($66) {
                    break;
                   }
                   __THREW__ = 0;
                   invoke_v(23);
                   $67 = __THREW__; __THREW__ = 0;
                   $68 = $67&1;
                   if ($68) {
                    break;
                   }
                   __THREW__ = 0;
                   invoke_vii(184,($0|0),(48760|0));
                   $69 = __THREW__; __THREW__ = 0;
                   $70 = $69&1;
                   if ($70) {
                    break;
                   }
                   __THREW__ = 0;
                   invoke_v(24);
                   $71 = __THREW__; __THREW__ = 0;
                   $72 = $71&1;
                   if ($72) {
                    break;
                   }
                   __THREW__ = 0;
                   invoke_vii(185,($0|0),(48768|0));
                   $73 = __THREW__; __THREW__ = 0;
                   $74 = $73&1;
                   if ($74) {
                    break;
                   }
                   __THREW__ = 0;
                   invoke_v(25);
                   $75 = __THREW__; __THREW__ = 0;
                   $76 = $75&1;
                   if ($76) {
                    break;
                   }
                   __THREW__ = 0;
                   invoke_vii(186,($0|0),(48776|0));
                   $77 = __THREW__; __THREW__ = 0;
                   $78 = $77&1;
                   if ($78) {
                    break;
                   }
                   __THREW__ = 0;
                   invoke_v(26);
                   $79 = __THREW__; __THREW__ = 0;
                   $80 = $79&1;
                   if ($80) {
                    break;
                   }
                   __THREW__ = 0;
                   invoke_vii(187,($0|0),(48784|0));
                   $81 = __THREW__; __THREW__ = 0;
                   $82 = $81&1;
                   if ($82) {
                    break;
                   }
                   __THREW__ = 0;
                   invoke_v(27);
                   $83 = __THREW__; __THREW__ = 0;
                   $84 = $83&1;
                   if ($84) {
                    break;
                   }
                   __THREW__ = 0;
                   invoke_vii(188,($0|0),(48792|0));
                   $85 = __THREW__; __THREW__ = 0;
                   $86 = $85&1;
                   if ($86) {
                    break;
                   }
                   __THREW__ = 0;
                   invoke_v(28);
                   $87 = __THREW__; __THREW__ = 0;
                   $88 = $87&1;
                   if ($88) {
                    break;
                   }
                   __THREW__ = 0;
                   invoke_vii(189,($0|0),(48800|0));
                   $89 = __THREW__; __THREW__ = 0;
                   $90 = $89&1;
                   if ($90) {
                    break;
                   }
                   __THREW__ = 0;
                   invoke_v(29);
                   $91 = __THREW__; __THREW__ = 0;
                   $92 = $91&1;
                   if ($92) {
                    break;
                   }
                   __THREW__ = 0;
                   invoke_vii(190,($0|0),(48808|0));
                   $93 = __THREW__; __THREW__ = 0;
                   $94 = $93&1;
                   if ($94) {
                    break;
                   }
                   __THREW__ = 0;
                   invoke_v(30);
                   $95 = __THREW__; __THREW__ = 0;
                   $96 = $95&1;
                   if ($96) {
                    break;
                   }
                   __THREW__ = 0;
                   invoke_vii(191,($0|0),(48816|0));
                   $97 = __THREW__; __THREW__ = 0;
                   $98 = $97&1;
                   if ($98) {
                    break;
                   }
                   __THREW__ = 0;
                   invoke_v(31);
                   $99 = __THREW__; __THREW__ = 0;
                   $100 = $99&1;
                   if ($100) {
                    break;
                   }
                   __THREW__ = 0;
                   invoke_vii(192,($0|0),(48832|0));
                   $101 = __THREW__; __THREW__ = 0;
                   $102 = $101&1;
                   if ($102) {
                    break;
                   }
                   __THREW__ = 0;
                   invoke_v(32);
                   $103 = __THREW__; __THREW__ = 0;
                   $104 = $103&1;
                   if ($104) {
                    break;
                   }
                   __THREW__ = 0;
                   invoke_vii(193,($0|0),(48848|0));
                   $105 = __THREW__; __THREW__ = 0;
                   $106 = $105&1;
                   if ($106) {
                    break;
                   }
                   __THREW__ = 0;
                   invoke_v(33);
                   $107 = __THREW__; __THREW__ = 0;
                   $108 = $107&1;
                   if ($108) {
                    break;
                   }
                   __THREW__ = 0;
                   invoke_vii(194,($0|0),(48864|0));
                   $109 = __THREW__; __THREW__ = 0;
                   $110 = $109&1;
                   if ($110) {
                    break;
                   }
                   __THREW__ = 0;
                   invoke_v(34);
                   $111 = __THREW__; __THREW__ = 0;
                   $112 = $111&1;
                   if ($112) {
                    break;
                   }
                   __THREW__ = 0;
                   invoke_vii(195,($0|0),(48880|0));
                   $113 = __THREW__; __THREW__ = 0;
                   $114 = $113&1;
                   if ($114) {
                    break;
                   }
                   __THREW__ = 0;
                   invoke_v(35);
                   $115 = __THREW__; __THREW__ = 0;
                   $116 = $115&1;
                   if ($116) {
                    break;
                   }
                   __THREW__ = 0;
                   invoke_vii(196,($0|0),(48888|0));
                   $117 = __THREW__; __THREW__ = 0;
                   $118 = $117&1;
                   if ($118) {
                    break;
                   }
                   return;
                  }
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   } while(0);
   $123 = ___cxa_find_matching_catch_2()|0;
   $124 = (getTempRet0() | 0);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7);
   $$0 = $124;$$03 = $123;
  }
  __ZNSt3__213__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEED2Ev($4);
  $$1 = $$0;$$14 = $$03;
 }
 __ZNSt3__26locale5facetD2Ev($0);
 ___resumeException($$14|0);
 // unreachable;
}
function __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEEC2Em($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = 0;
 $2 = ((($0)) + 4|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($0)) + 8|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($0)) + 128|0);
 HEAP8[$4>>0] = 0;
 $5 = ($1|0)==(0);
 do {
  if (!($5)) {
   __THREW__ = 0;
   invoke_vii(197,($0|0),($1|0));
   $6 = __THREW__; __THREW__ = 0;
   $7 = $6&1;
   if (!($7)) {
    __THREW__ = 0;
    invoke_vii(198,($0|0),($1|0));
    $8 = __THREW__; __THREW__ = 0;
    $9 = $8&1;
    if (!($9)) {
     break;
    }
   }
   $10 = ___cxa_find_matching_catch_2()|0;
   $11 = (getTempRet0() | 0);
   __ZNSt3__213__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEED2Ev($0);
   ___resumeException($10|0);
   // unreachable;
  }
 } while(0);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_7collateIcEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(48588)>>2] = 0;
 HEAP32[12146] = (27992);
 return;
}
function __ZNSt3__26locale5__imp7installINS_7collateIcEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(50724)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_7collateIwEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(48596)>>2] = 0;
 HEAP32[12148] = (28024);
 return;
}
function __ZNSt3__26locale5__imp7installINS_7collateIwEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(50732)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_5ctypeIcEEDnbjEERT_T0_T1_T2_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__25ctypeIcEC2EPKtbm(48600,0,0,1);
 return;
}
function __ZNSt3__26locale5__imp7installINS_5ctypeIcEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(50740)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_5ctypeIwEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(48620)>>2] = 0;
 HEAP32[12154] = (30352);
 return;
}
function __ZNSt3__26locale5__imp7installINS_5ctypeIwEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(50772)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIcc11__mbstate_tEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(48628)>>2] = 0;
 HEAP32[12156] = (30420);
 return;
}
function __ZNSt3__26locale5__imp7installINS_7codecvtIcc11__mbstate_tEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(51044)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIwc11__mbstate_tEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__27codecvtIwc11__mbstate_tEC2Em(48632,1);
 return;
}
function __ZNSt3__26locale5__imp7installINS_7codecvtIwc11__mbstate_tEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(51052)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIDsc11__mbstate_tEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(48652)>>2] = 0;
 HEAP32[12162] = (30468);
 return;
}
function __ZNSt3__26locale5__imp7installINS_7codecvtIDsc11__mbstate_tEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(51060)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIDic11__mbstate_tEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(48660)>>2] = 0;
 HEAP32[12164] = (30516);
 return;
}
function __ZNSt3__26locale5__imp7installINS_7codecvtIDic11__mbstate_tEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(51068)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_8numpunctIcEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__28numpunctIcEC2Em(48664,1);
 return;
}
function __ZNSt3__26locale5__imp7installINS_8numpunctIcEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(50756)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_8numpunctIwEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__28numpunctIwEC2Em(48688,1);
 return;
}
function __ZNSt3__26locale5__imp7installINS_8numpunctIwEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(50780)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(48724)>>2] = 0;
 HEAP32[12180] = (28056);
 return;
}
function __ZNSt3__26locale5__imp7installINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(50764)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(48732)>>2] = 0;
 HEAP32[12182] = (28120);
 return;
}
function __ZNSt3__26locale5__imp7installINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(50788)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(48740)>>2] = 0;
 HEAP32[12184] = (28184);
 return;
}
function __ZNSt3__26locale5__imp7installINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(50796)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(48748)>>2] = 0;
 HEAP32[12186] = (28236);
 return;
}
function __ZNSt3__26locale5__imp7installINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(50804)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIcLb0EEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(48756)>>2] = 0;
 HEAP32[12188] = (29592);
 return;
}
function __ZNSt3__26locale5__imp7installINS_10moneypunctIcLb0EEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(50964)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIcLb1EEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(48764)>>2] = 0;
 HEAP32[12190] = (29648);
 return;
}
function __ZNSt3__26locale5__imp7installINS_10moneypunctIcLb1EEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(50972)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIwLb0EEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(48772)>>2] = 0;
 HEAP32[12192] = (29704);
 return;
}
function __ZNSt3__26locale5__imp7installINS_10moneypunctIwLb0EEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(50980)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIwLb1EEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(48780)>>2] = 0;
 HEAP32[12194] = (29760);
 return;
}
function __ZNSt3__26locale5__imp7installINS_10moneypunctIwLb1EEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(50988)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(48788)>>2] = 0;
 HEAP32[12196] = (29816);
 return;
}
function __ZNSt3__26locale5__imp7installINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(50996)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(48796)>>2] = 0;
 HEAP32[12198] = (29844);
 return;
}
function __ZNSt3__26locale5__imp7installINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(51004)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(48804)>>2] = 0;
 HEAP32[12200] = (29872);
 return;
}
function __ZNSt3__26locale5__imp7installINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(51012)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(48812)>>2] = 0;
 HEAP32[12202] = (29900);
 return;
}
function __ZNSt3__26locale5__imp7installINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(51020)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(48820)>>2] = 0;
 HEAP32[12204] = (30332);
 __ZNSt3__220__time_get_c_storageIcEC2Ev((48824));
 HEAP32[12204] = (28288);
 HEAP32[(48824)>>2] = (28336);
 return;
}
function __ZNSt3__26locale5__imp7installINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(50872)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(48836)>>2] = 0;
 HEAP32[12208] = (30332);
 __ZNSt3__220__time_get_c_storageIwEC2Ev((48840));
 HEAP32[12208] = (28372);
 HEAP32[(48840)>>2] = (28420);
 return;
}
function __ZNSt3__26locale5__imp7installINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(50940)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(48852)>>2] = 0;
 HEAP32[12212] = (30332);
 __THREW__ = 0;
 $0 = (invoke_i(24)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch_2()|0;
  $4 = (getTempRet0() | 0);
  __ZNSt3__26locale5facetD2Ev(48848);
  ___resumeException($3|0);
  // unreachable;
 } else {
  HEAP32[(48856)>>2] = $0;
  HEAP32[12212] = (29544);
  return;
 }
}
function __ZNSt3__26locale5__imp7installINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(50948)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(48868)>>2] = 0;
 HEAP32[12216] = (30332);
 __THREW__ = 0;
 $0 = (invoke_i(24)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch_2()|0;
  $4 = (getTempRet0() | 0);
  __ZNSt3__26locale5facetD2Ev(48864);
  ___resumeException($3|0);
  // unreachable;
 } else {
  HEAP32[(48872)>>2] = $0;
  HEAP32[12216] = (29568);
  return;
 }
}
function __ZNSt3__26locale5__imp7installINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(50956)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_8messagesIcEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(48884)>>2] = 0;
 HEAP32[12220] = (29928);
 return;
}
function __ZNSt3__26locale5__imp7installINS_8messagesIcEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(51028)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__212_GLOBAL__N_14makeINS_8messagesIwEEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(48892)>>2] = 0;
 HEAP32[12222] = (29960);
 return;
}
function __ZNSt3__26locale5__imp7installINS_8messagesIwEEEEvPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__26locale2id5__getEv(51036)|0);
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2);
 return;
}
function __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($1)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 1)|0;
 HEAP32[$3>>2] = $5;
 $6 = ((($0)) + 8|0);
 $7 = ((($0)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[$6>>2]|0;
 $10 = (($8) - ($9))|0;
 $11 = $10 >> 2;
 $12 = ($11>>>0)>($2>>>0);
 do {
  if ($12) {
   $13 = $9;
   $$pre$phiZ2D = $6;$21 = $13;
  } else {
   $14 = (($2) + 1)|0;
   __THREW__ = 0;
   invoke_vii(199,($6|0),($14|0));
   $15 = __THREW__; __THREW__ = 0;
   $16 = $15&1;
   if (!($16)) {
    $$pre = HEAP32[$6>>2]|0;
    $$pre$phiZ2D = $6;$21 = $$pre;
    break;
   }
   $17 = ___cxa_find_matching_catch_2()|0;
   $18 = (getTempRet0() | 0);
   $19 = ($1|0)==(0|0);
   if (!($19)) {
    __ZNSt3__212_GLOBAL__N_17releaseclEPNS_6locale5facetE($1);
   }
   ___resumeException($17|0);
   // unreachable;
  }
 } while(0);
 $20 = (($21) + ($2<<2)|0);
 $22 = HEAP32[$20>>2]|0;
 $23 = ($22|0)==(0|0);
 if (!($23)) {
  $24 = ((($22)) + 4|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = (($25) + -1)|0;
  HEAP32[$24>>2] = $26;
  $27 = ($25|0)==(0);
  if ($27) {
   $28 = HEAP32[$22>>2]|0;
   $29 = ((($28)) + 8|0);
   $30 = HEAP32[$29>>2]|0;
   FUNCTION_TABLE_vi[$30 & 511]($22);
  }
 }
 $31 = HEAP32[$$pre$phiZ2D>>2]|0;
 $32 = (($31) + ($2<<2)|0);
 HEAP32[$32>>2] = $1;
 return;
}
function __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE6resizeEm($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$0>>2]|0;
 $5 = (($3) - ($4))|0;
 $6 = $5 >> 2;
 $7 = ($6>>>0)<($1>>>0);
 $8 = $4;
 if ($7) {
  $9 = (($1) - ($6))|0;
  __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE8__appendEm($0,$9);
 } else {
  $10 = ($6>>>0)>($1>>>0);
  if ($10) {
   $11 = (($8) + ($1<<2)|0);
   HEAP32[$2>>2] = $11;
  }
 }
 return;
}
function __ZNSt3__212_GLOBAL__N_17releaseclEPNS_6locale5facetE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + -1)|0;
 HEAP32[$1>>2] = $3;
 $4 = ($2|0)==(0);
 if ($4) {
  $5 = HEAP32[$0>>2]|0;
  $6 = ((($5)) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  FUNCTION_TABLE_vi[$7 & 511]($0);
 }
 return;
}
function __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE8__appendEm($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sroa$speculated$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) - ($6))|0;
 $8 = $7 >> 2;
 $9 = ($8>>>0)<($1>>>0);
 do {
  if ($9) {
   $10 = HEAP32[$0>>2]|0;
   $11 = (($6) - ($10))|0;
   $12 = $11 >> 2;
   $13 = (($12) + ($1))|0;
   $14 = (__ZNKSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE8max_sizeEv($0)|0);
   $15 = ($14>>>0)<($13>>>0);
   if ($15) {
    __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
    // unreachable;
   }
   $16 = ((($0)) + 16|0);
   $17 = HEAP32[$3>>2]|0;
   $18 = HEAP32[$0>>2]|0;
   $19 = (($17) - ($18))|0;
   $20 = $19 >> 2;
   $21 = $14 >>> 1;
   $22 = ($20>>>0)<($21>>>0);
   $23 = $19 >> 1;
   $24 = ($23>>>0)<($13>>>0);
   $$sroa$speculated$i = $24 ? $13 : $23;
   $spec$select$i = $22 ? $$sroa$speculated$i : $14;
   $25 = HEAP32[$5>>2]|0;
   $26 = (($25) - ($18))|0;
   $27 = $26 >> 2;
   __ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lm28EEEEC2EmmS6_($2,$spec$select$i,$27,$16);
   __THREW__ = 0;
   invoke_vii(200,($2|0),($1|0));
   $28 = __THREW__; __THREW__ = 0;
   $29 = $28&1;
   if (!($29)) {
    __THREW__ = 0;
    invoke_vii(201,($0|0),($2|0));
    $30 = __THREW__; __THREW__ = 0;
    $31 = $30&1;
    if (!($31)) {
     __ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lm28EEEED2Ev($2);
     break;
    }
   }
   $32 = ___cxa_find_matching_catch_2()|0;
   $33 = (getTempRet0() | 0);
   __ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lm28EEEED2Ev($2);
   ___resumeException($32|0);
   // unreachable;
  } else {
   __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE18__construct_at_endEm($0,$1);
  }
 } while(0);
 STACKTOP = sp;return;
}
function __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE18__construct_at_endEm($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$pre = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $$pre = HEAP32[$2>>2]|0;
 $$0 = $1;$3 = $$pre;
 while(1) {
  HEAP32[$3>>2] = 0;
  $4 = HEAP32[$2>>2]|0;
  $5 = ((($4)) + 4|0);
  HEAP32[$2>>2] = $5;
  $6 = (($$0) + -1)|0;
  $7 = ($6|0)==(0);
  if ($7) {
   break;
  } else {
   $$0 = $6;$3 = $5;
  }
 }
 return;
}
function __ZNKSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE8max_sizeEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1073741823;
}
function __ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lm28EEEEC2EmmS6_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 12|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($0)) + 16|0);
 HEAP32[$5>>2] = $3;
 $6 = ($1|0)==(0);
 do {
  if ($6) {
   $13 = 0;
  } else {
   $7 = ((($3)) + 112|0);
   $8 = HEAP8[$7>>0]|0;
   $9 = ($8<<24>>24)==(0);
   $10 = ($1>>>0)<(29);
   $or$cond$i$i = $10 & $9;
   if ($or$cond$i$i) {
    HEAP8[$7>>0] = 1;
    $13 = $3;
    break;
   } else {
    $11 = $1 << 2;
    $12 = (__Znwm($11)|0);
    $13 = $12;
    break;
   }
  }
 } while(0);
 HEAP32[$0>>2] = $13;
 $14 = (($13) + ($2<<2)|0);
 $15 = ((($0)) + 8|0);
 HEAP32[$15>>2] = $14;
 $16 = ((($0)) + 4|0);
 HEAP32[$16>>2] = $14;
 $17 = (($13) + ($1<<2)|0);
 HEAP32[$4>>2] = $17;
 return;
}
function __ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lm28EEEE18__construct_at_endEm($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$pre = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $$pre = HEAP32[$2>>2]|0;
 $$0 = $1;$3 = $$pre;
 while(1) {
  HEAP32[$3>>2] = 0;
  $4 = HEAP32[$2>>2]|0;
  $5 = ((($4)) + 4|0);
  HEAP32[$2>>2] = $5;
  $6 = (($$0) + -1)|0;
  $7 = ($6|0)==(0);
  if ($7) {
   break;
  } else {
   $$0 = $6;$3 = $5;
  }
 }
 return;
}
function __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1)) + 4|0);
 $6 = $2;
 $7 = (($4) - ($6))|0;
 $8 = $7 >> 2;
 $9 = HEAP32[$5>>2]|0;
 $10 = (0 - ($8))|0;
 $11 = (($9) + ($10<<2)|0);
 HEAP32[$5>>2] = $11;
 $12 = ($7|0)>(0);
 if ($12) {
  _memcpy(($11|0),($2|0),($7|0))|0;
  $$pre = HEAP32[$5>>2]|0;
  $$pre$phiZ2D = $5;$15 = $$pre;
 } else {
  $13 = $11;
  $$pre$phiZ2D = $5;$15 = $13;
 }
 $14 = HEAP32[$0>>2]|0;
 HEAP32[$0>>2] = $15;
 HEAP32[$$pre$phiZ2D>>2] = $14;
 $16 = ((($1)) + 8|0);
 $17 = HEAP32[$3>>2]|0;
 $18 = HEAP32[$16>>2]|0;
 HEAP32[$3>>2] = $18;
 HEAP32[$16>>2] = $17;
 $19 = ((($0)) + 8|0);
 $20 = ((($1)) + 12|0);
 $21 = HEAP32[$19>>2]|0;
 $22 = HEAP32[$20>>2]|0;
 HEAP32[$19>>2] = $22;
 HEAP32[$20>>2] = $21;
 $23 = HEAP32[$$pre$phiZ2D>>2]|0;
 HEAP32[$1>>2] = $23;
 return;
}
function __ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lm28EEEED2Ev($0) {
 $0 = $0|0;
 var $$pre$i$i$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 8|0);
 $$pre$i$i$i = HEAP32[$3>>2]|0;
 $5 = $$pre$i$i$i;
 while(1) {
  $4 = ($5|0)==($2|0);
  if ($4) {
   break;
  }
  $6 = ((($5)) + -4|0);
  HEAP32[$3>>2] = $6;
  $5 = $6;
 }
 $7 = HEAP32[$0>>2]|0;
 $8 = ($7|0)==(0|0);
 do {
  if (!($8)) {
   $9 = ((($0)) + 16|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($7|0)==($10|0);
   if ($11) {
    $12 = ((($10)) + 112|0);
    HEAP8[$12>>0] = 0;
    break;
   } else {
    __ZdlPv($7);
    break;
   }
  }
 } while(0);
 return;
}
function __ZNSt3__28numpunctIwEC2Em($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (($1) + -1)|0;
 $3 = ((($0)) + 4|0);
 HEAP32[$3>>2] = $2;
 HEAP32[$0>>2] = (30248);
 $4 = ((($0)) + 8|0);
 HEAP32[$4>>2] = 46;
 $5 = ((($0)) + 12|0);
 HEAP32[$5>>2] = 44;
 $6 = ((($0)) + 16|0);
 ;HEAP32[$6>>2]=0|0;HEAP32[$6+4>>2]=0|0;HEAP32[$6+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $7 = (($6) + ($$0$i$i<<2)|0);
  HEAP32[$7>>2] = 0;
  $8 = (($$0$i$i) + 1)|0;
  $$0$i$i = $8;
 }
 return;
}
function __ZNSt3__28numpunctIcEC2Em($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (($1) + -1)|0;
 $3 = ((($0)) + 4|0);
 HEAP32[$3>>2] = $2;
 HEAP32[$0>>2] = (30208);
 $4 = ((($0)) + 8|0);
 HEAP8[$4>>0] = 46;
 $5 = ((($0)) + 9|0);
 HEAP8[$5>>0] = 44;
 $6 = ((($0)) + 12|0);
 ;HEAP32[$6>>2]=0|0;HEAP32[$6+4>>2]=0|0;HEAP32[$6+8>>2]=0|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $7 = (($6) + ($$0$i$i<<2)|0);
  HEAP32[$7>>2] = 0;
  $8 = (($$0$i$i) + 1)|0;
  $$0$i$i = $8;
 }
 return;
}
function __ZNSt3__27codecvtIwc11__mbstate_tEC2Em($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (($1) + -1)|0;
 $3 = ((($0)) + 4|0);
 HEAP32[$3>>2] = $2;
 HEAP32[$0>>2] = (30088);
 __THREW__ = 0;
 $4 = (invoke_i(24)|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $8 = ___cxa_find_matching_catch_2()|0;
  $9 = (getTempRet0() | 0);
  __ZNSt3__26locale5facetD2Ev($0);
  ___resumeException($8|0);
  // unreachable;
 } else {
  $7 = ((($0)) + 8|0);
  HEAP32[$7>>2] = $4;
  return;
 }
}
function __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE8allocateEm($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i$in = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNKSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE8max_sizeEv($0)|0);
 $3 = ($2>>>0)<($1>>>0);
 if ($3) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $4 = ((($0)) + 128|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)==(0);
 $7 = ($1>>>0)<(29);
 $or$cond$i$i = $7 & $6;
 if ($or$cond$i$i) {
  $8 = ((($0)) + 16|0);
  HEAP8[$4>>0] = 1;
  $$0$i$i$in = $8;
 } else {
  $9 = $1 << 2;
  $10 = (__Znwm($9)|0);
  $$0$i$i$in = $10;
 }
 $11 = ((($0)) + 4|0);
 HEAP32[$11>>2] = $$0$i$i$in;
 HEAP32[$0>>2] = $$0$i$i$in;
 $12 = (($$0$i$i$in) + ($1<<2)|0);
 $13 = ((($0)) + 8|0);
 HEAP32[$13>>2] = $12;
 return;
}
function __ZNSt3__26locale7classicEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[48896]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire(48896)|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    __THREW__ = 0;
    (invoke_i(25)|0);
    $4 = __THREW__; __THREW__ = 0;
    $5 = $4&1;
    if ($5) {
     $7 = ___cxa_find_matching_catch_2()|0;
     $8 = (getTempRet0() | 0);
     ___resumeException($7|0);
     // unreachable;
    } else {
     HEAP32[12770] = 51076;
     break;
    }
   }
  }
 } while(0);
 $6 = HEAP32[12770]|0;
 return ($6|0);
}
function __ZNSt3__26locale5__imp12make_classicEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__212_GLOBAL__N_14makeINS_6locale5__impEjEERT_T0_();
 HEAP32[12769] = 48904;
 return (51076|0);
}
function __ZNSt3__212_GLOBAL__N_14makeINS_6locale5__impEjEERT_T0_() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26locale5__impC2Em(48904,1);
 return;
}
function __ZNSt3__26locale5__imp11make_globalEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__26locale7classicEv()|0);
 __ZNSt3__26localeC2ERKS0_(51084,$0);
 return (51084|0);
}
function __ZNSt3__26localeC2ERKS0_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 1)|0;
 HEAP32[$3>>2] = $5;
 return;
}
function __ZNSt3__26locale8__globalEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[49064]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire(49064)|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    __THREW__ = 0;
    (invoke_i(26)|0);
    $4 = __THREW__; __THREW__ = 0;
    $5 = $4&1;
    if ($5) {
     $7 = ___cxa_find_matching_catch_2()|0;
     $8 = (getTempRet0() | 0);
     ___resumeException($7|0);
     // unreachable;
    } else {
     HEAP32[12772] = 51084;
     break;
    }
   }
  }
 } while(0);
 $6 = HEAP32[12772]|0;
 return ($6|0);
}
function __ZNSt3__26localeC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 $1 = (invoke_i(27)|0);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $8 = ___cxa_find_matching_catch_3(0|0)|0;
  $9 = (getTempRet0() | 0);
  ___clang_call_terminate($8);
  // unreachable;
 } else {
  $4 = HEAP32[$1>>2]|0;
  HEAP32[$0>>2] = $4;
  $5 = ((($4)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (($6) + 1)|0;
  HEAP32[$5>>2] = $7;
  return;
 }
}
function __ZNKSt3__26locale9has_facetERNS0_2idE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = (__ZNSt3__26locale2id5__getEv($1)|0);
 $4 = (__ZNKSt3__26locale5__imp9has_facetEl($2,$3)|0);
 return ($4|0);
}
function __ZNSt3__214__shared_countD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNKSt3__219__shared_weak_count13__get_deleterERKSt9type_info($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZNSt3__219__shared_weak_count14__release_weakEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = HEAP32[$0>>2]|0;
  $5 = ((($4)) + 16|0);
  $6 = HEAP32[$5>>2]|0;
  FUNCTION_TABLE_vi[$6 & 511]($0);
 } else {
  $7 = HEAP32[$1>>2]|0;
  $8 = (($7) + -1)|0;
  HEAP32[$1>>2] = $8;
  $9 = ($7|0)==(0);
  if ($9) {
   $10 = HEAP32[$0>>2]|0;
   $11 = ((($10)) + 16|0);
   $12 = HEAP32[$11>>2]|0;
   FUNCTION_TABLE_vi[$12 & 511]($0);
  }
 }
 return;
}
function __ZNSt3__211__call_onceERVmPvPFvS2_E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 (_pthread_mutex_lock((51092|0))|0);
 while(1) {
  $3 = HEAP32[$0>>2]|0;
  $4 = ($3|0)==(1);
  if (!($4)) {
   break;
  }
  (_pthread_cond_wait((51120|0),(51092|0))|0);
 }
 $5 = HEAP32[$0>>2]|0;
 $6 = ($5|0)==(0);
 do {
  if ($6) {
   HEAP32[$0>>2] = 1;
   __THREW__ = 0;
   (invoke_ii(169,(51092|0))|0);
   $7 = __THREW__; __THREW__ = 0;
   $8 = $7&1;
   if (!($8)) {
    __THREW__ = 0;
    invoke_vi($2|0,($1|0));
    $9 = __THREW__; __THREW__ = 0;
    $10 = $9&1;
    if (!($10)) {
     __THREW__ = 0;
     (invoke_ii(170,(51092|0))|0);
     $11 = __THREW__; __THREW__ = 0;
     $12 = $11&1;
     if (!($12)) {
      HEAP32[$0>>2] = -1;
      __THREW__ = 0;
      (invoke_ii(169,(51092|0))|0);
      $13 = __THREW__; __THREW__ = 0;
      $14 = $13&1;
      if (!($14)) {
       __THREW__ = 0;
       (invoke_ii(171,(51120|0))|0);
       $15 = __THREW__; __THREW__ = 0;
       $16 = $15&1;
       if (!($16)) {
        break;
       }
      }
     }
    }
   }
   $17 = ___cxa_find_matching_catch_3(0|0)|0;
   $18 = (getTempRet0() | 0);
   (___cxa_begin_catch(($17|0))|0);
   __THREW__ = 0;
   (invoke_ii(170,(51092|0))|0);
   $19 = __THREW__; __THREW__ = 0;
   $20 = $19&1;
   if (!($20)) {
    HEAP32[$0>>2] = 0;
    __THREW__ = 0;
    (invoke_ii(169,(51092|0))|0);
    $21 = __THREW__; __THREW__ = 0;
    $22 = $21&1;
    if (!($22)) {
     __THREW__ = 0;
     (invoke_ii(171,(51120|0))|0);
     $23 = __THREW__; __THREW__ = 0;
     $24 = $23&1;
     if (!($24)) {
      __THREW__ = 0;
      invoke_v(3);
      $25 = __THREW__; __THREW__ = 0;
     }
    }
   }
   $26 = ___cxa_find_matching_catch_2()|0;
   $27 = (getTempRet0() | 0);
   __THREW__ = 0;
   invoke_v(2);
   $28 = __THREW__; __THREW__ = 0;
   $29 = $28&1;
   if ($29) {
    $30 = ___cxa_find_matching_catch_3(0|0)|0;
    $31 = (getTempRet0() | 0);
    ___clang_call_terminate($30);
    // unreachable;
   } else {
    ___resumeException($26|0);
    // unreachable;
   }
  } else {
   (_pthread_mutex_unlock((51092|0))|0);
  }
 } while(0);
 return;
}
function __ZSt17__throw_bad_allocv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___cxa_allocate_exception(4)|0);
 __ZNSt9bad_allocC2Ev($0);
 ___cxa_throw(($0|0),(24696|0),(224|0));
 // unreachable;
}
function __Znwm($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $spec$store$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0);
 $spec$store$select = $1 ? 1 : $0;
 while(1) {
  $2 = (_malloc($spec$store$select)|0);
  $3 = ($2|0)==(0|0);
  if (!($3)) {
   label = 6;
   break;
  }
  $4 = (__ZSt15get_new_handlerv()|0);
  $5 = ($4|0)==(0|0);
  if ($5) {
   label = 5;
   break;
  }
  FUNCTION_TABLE_v[$4 & 63]();
 }
 if ((label|0) == 5) {
  $6 = (___cxa_allocate_exception(4)|0);
  __ZNSt9bad_allocC2Ev($6);
  ___cxa_throw(($6|0),(24696|0),(224|0));
  // unreachable;
 }
 else if ((label|0) == 6) {
  return ($2|0);
 }
 return (0)|0;
}
function __Znam($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwm($0)|0);
 return ($1|0);
}
function __ZdlPv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($0);
 return;
}
function __ZdaPv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZNSt3__218__libcpp_refstringC2EPKc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_strlen($1)|0);
 $3 = (($2) + 13)|0;
 $4 = (__Znwm($3)|0);
 HEAP32[$4>>2] = $2;
 $5 = ((($4)) + 4|0);
 HEAP32[$5>>2] = $2;
 $6 = ((($4)) + 8|0);
 HEAP32[$6>>2] = 0;
 $7 = (__ZNSt3__215__refstring_imp12_GLOBAL__N_113data_from_repEPNS1_9_Rep_baseE($4)|0);
 $8 = (($2) + 1)|0;
 _memcpy(($7|0),($1|0),($8|0))|0;
 HEAP32[$0>>2] = $7;
 return;
}
function __ZNSt3__215__refstring_imp12_GLOBAL__N_113data_from_repEPNS1_9_Rep_baseE($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 12|0);
 return ($1|0);
}
function __ZNSt11logic_errorC2EPKc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (30760);
 $2 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vii(202,($2|0),($1|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $5 = ___cxa_find_matching_catch_2()|0;
  $6 = (getTempRet0() | 0);
  ___resumeException($5|0);
  // unreachable;
 } else {
  return;
 }
}
function __ZNKSt3__218__libcpp_refstring15__uses_refcountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNSt13runtime_errorC2ERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (30780);
 $2 = ((($0)) + 4|0);
 $3 = ((($1)) + 11|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)<(0);
 $6 = HEAP32[$1>>2]|0;
 $7 = $5 ? $6 : $1;
 __THREW__ = 0;
 invoke_vii(202,($2|0),($7|0));
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $10 = ___cxa_find_matching_catch_2()|0;
  $11 = (getTempRet0() | 0);
  ___resumeException($10|0);
  // unreachable;
 } else {
  return;
 }
}
function __ZNSt13runtime_errorC2EPKc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (30780);
 $2 = ((($0)) + 4|0);
 __THREW__ = 0;
 invoke_vii(202,($2|0),($1|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $5 = ___cxa_find_matching_catch_2()|0;
  $6 = (getTempRet0() | 0);
  ___resumeException($5|0);
  // unreachable;
 } else {
  return;
 }
}
function __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___cxa_allocate_exception(8)|0);
 __THREW__ = 0;
 invoke_vii(45,($1|0),(43828|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $4 = ___cxa_find_matching_catch_2()|0;
  $5 = (getTempRet0() | 0);
  ___cxa_free_exception(($1|0));
  ___resumeException($4|0);
  // unreachable;
 } else {
  HEAP32[$1>>2] = (30800);
  ___cxa_throw(($1|0),(24744|0),(226|0));
  // unreachable;
 }
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $2 = ((($1)) + 11|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)<(0);
 if ($4) {
  $5 = HEAP32[$1>>2]|0;
  $6 = ((($1)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($0,$5,$7);
 } else {
  ;HEAP32[$0>>2]=HEAP32[$1>>2]|0;HEAP32[$0+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$1+8>>2]|0;
 }
 return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = ($2>>>0)>(4294967279);
 if ($4) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $5 = ($2>>>0)<(11);
 if ($5) {
  $6 = $2&255;
  $7 = ((($0)) + 11|0);
  HEAP8[$7>>0] = $6;
  $$0 = $0;
 } else {
  $8 = (($2) + 16)|0;
  $9 = $8 & -16;
  $10 = (__Znwm($9)|0);
  HEAP32[$0>>2] = $10;
  $11 = $9 | -2147483648;
  $12 = ((($0)) + 8|0);
  HEAP32[$12>>2] = $11;
  $13 = ((($0)) + 4|0);
  HEAP32[$13>>2] = $2;
  $$0 = $10;
 }
 (__ZNSt3__211char_traitsIcE4copyEPcPKcm($$0,$1,$2)|0);
 $14 = (($$0) + ($2)|0);
 HEAP8[$3>>0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($14,$3);
 STACKTOP = sp;return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEmc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = ($1>>>0)>(4294967279);
 if ($4) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $5 = ($1>>>0)<(11);
 if ($5) {
  $6 = $1&255;
  $7 = ((($0)) + 11|0);
  HEAP8[$7>>0] = $6;
  $$0 = $0;
 } else {
  $8 = (($1) + 16)|0;
  $9 = $8 & -16;
  $10 = (__Znwm($9)|0);
  HEAP32[$0>>2] = $10;
  $11 = $9 | -2147483648;
  $12 = ((($0)) + 8|0);
  HEAP32[$12>>2] = $11;
  $13 = ((($0)) + 4|0);
  HEAP32[$13>>2] = $1;
  $$0 = $10;
 }
 (__ZNSt3__211char_traitsIcE6assignEPcmc($$0,$1,$2)|0);
 $14 = (($$0) + ($1)|0);
 HEAP8[$3>>0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($14,$3);
 STACKTOP = sp;return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 11|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)<(0);
 if ($3) {
  $4 = HEAP32[$0>>2]|0;
  __ZdlPv($4);
 }
 return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==($1|0);
 if (!($2)) {
  $3 = ((($1)) + 11|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = ($4<<24>>24)<(0);
  $6 = HEAP32[$1>>2]|0;
  $7 = ((($1)) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = $4&255;
  $10 = $5 ? $6 : $1;
  $11 = $5 ? $8 : $9;
  (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcm($0,$10,$11)|0);
 }
 return ($0|0);
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcm($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = ((($0)) + 11|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)<(0);
 if ($6) {
  $7 = ((($0)) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = $8 & 2147483647;
  $phitmp$i = (($9) + -1)|0;
  $11 = $phitmp$i;
 } else {
  $11 = 10;
 }
 $10 = ($11>>>0)<($2>>>0);
 do {
  if ($10) {
   if ($6) {
    $19 = ((($0)) + 4|0);
    $20 = HEAP32[$19>>2]|0;
    $23 = $20;
   } else {
    $21 = $5&255;
    $23 = $21;
   }
   $22 = (($2) - ($11))|0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEmmmmmmPKc($0,$11,$22,$23,0,$23,$2,$1);
  } else {
   if ($6) {
    $12 = HEAP32[$0>>2]|0;
    $13 = $12;
   } else {
    $13 = $0;
   }
   (__ZNSt3__211char_traitsIcE4moveEPcPKcm($13,$1,$2)|0);
   $14 = (($13) + ($2)|0);
   HEAP8[$3>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($14,$3);
   $15 = HEAP8[$4>>0]|0;
   $16 = ($15<<24>>24)<(0);
   if ($16) {
    $17 = ((($0)) + 4|0);
    HEAP32[$17>>2] = $2;
    break;
   } else {
    $18 = $2&255;
    HEAP8[$4>>0] = $18;
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return ($0|0);
}
function __ZNSt3__211char_traitsIcE4moveEPcPKcm($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 if (!($3)) {
  _memmove(($0|0),($1|0),($2|0))|0;
 }
 return ($0|0);
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEmmmmmmPKc($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$sroa$speculated = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $8 = sp;
 $9 = (-18 - ($1))|0;
 $10 = ($9>>>0)<($2>>>0);
 if ($10) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $11 = ((($0)) + 11|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = ($12<<24>>24)<(0);
 if ($13) {
  $14 = HEAP32[$0>>2]|0;
  $25 = $14;
 } else {
  $25 = $0;
 }
 $15 = ($1>>>0)<(2147483623);
 if ($15) {
  $16 = (($2) + ($1))|0;
  $17 = $1 << 1;
  $18 = ($16>>>0)<($17>>>0);
  $$sroa$speculated = $18 ? $17 : $16;
  $19 = ($$sroa$speculated>>>0)<(11);
  $20 = (($$sroa$speculated) + 16)|0;
  $21 = $20 & -16;
  $phitmp = $19 ? 11 : $21;
  $22 = $phitmp;
 } else {
  $22 = -17;
 }
 $23 = (__Znwm($22)|0);
 $24 = ($4|0)==(0);
 if (!($24)) {
  (__ZNSt3__211char_traitsIcE4copyEPcPKcm($23,$25,$4)|0);
 }
 $26 = ($6|0)==(0);
 if (!($26)) {
  $27 = (($23) + ($4)|0);
  (__ZNSt3__211char_traitsIcE4copyEPcPKcm($27,$7,$6)|0);
 }
 $28 = (($3) - ($5))|0;
 $29 = (($28) - ($4))|0;
 $30 = ($29|0)==(0);
 if (!($30)) {
  $31 = (($23) + ($4)|0);
  $32 = (($31) + ($6)|0);
  $33 = (($25) + ($4)|0);
  $34 = (($33) + ($5)|0);
  (__ZNSt3__211char_traitsIcE4copyEPcPKcm($32,$34,$29)|0);
 }
 $35 = ($1|0)==(10);
 if (!($35)) {
  __ZdlPv($25);
 }
 HEAP32[$0>>2] = $23;
 $36 = $22 | -2147483648;
 $37 = ((($0)) + 8|0);
 HEAP32[$37>>2] = $36;
 $38 = (($28) + ($6))|0;
 $39 = ((($0)) + 4|0);
 HEAP32[$39>>2] = $38;
 $40 = (($23) + ($38)|0);
 HEAP8[$8>>0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($40,$8);
 STACKTOP = sp;return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$016 = 0, $$01739 = 0, $$018$off037 = 0, $$1404753 = 0, $$141 = 0, $$pre = 0, $$pre$phi56Z2D = 0, $$pre$phiZ2D = 0, $$pre55 = 0, $$sroa$speculated = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, $phitmp$i21 = 0, $spec$select$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1>>>0)>(4294967279);
 if ($2) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $3 = ((($0)) + 11|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)<(0);
 if ($5) {
  $6 = ((($0)) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = $7 & 2147483647;
  $phitmp$i = (($8) + -1)|0;
  $9 = ((($0)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $13 = $10;$18 = $phitmp$i;
 } else {
  $11 = $4&255;
  $13 = $11;$18 = 10;
 }
 $12 = ($13>>>0)>($1>>>0);
 $$sroa$speculated = $12 ? $13 : $1;
 $14 = ($$sroa$speculated>>>0)<(11);
 $15 = (($$sroa$speculated) + 16)|0;
 $16 = $15 & -16;
 $phitmp$i21 = (($16) + -1)|0;
 $spec$select$i = $14 ? 10 : $phitmp$i21;
 $17 = ($spec$select$i|0)==($18|0);
 L8: do {
  if (!($17)) {
   do {
    if ($14) {
     $28 = HEAP32[$0>>2]|0;
     if ($5) {
      $$01739 = $28;$$018$off037 = 0;$$141 = $0;
      label = 17;
     } else {
      $29 = $4&255;
      $30 = (($29) + 1)|0;
      (__ZNSt3__211char_traitsIcE4copyEPcPKcm($0,$28,$30)|0);
      __ZdlPv($28);
      label = 20;
     }
    } else {
     $19 = ($spec$select$i>>>0)>($18>>>0);
     $20 = (($spec$select$i) + 1)|0;
     if ($19) {
      $21 = (__Znwm($20)|0);
      $$016 = $21;
     } else {
      __THREW__ = 0;
      $22 = (invoke_ii(167,($20|0))|0);
      $23 = __THREW__; __THREW__ = 0;
      $24 = $23&1;
      if ($24) {
       $25 = ___cxa_find_matching_catch_3(0|0)|0;
       $26 = (getTempRet0() | 0);
       (___cxa_begin_catch(($25|0))|0);
       ___cxa_end_catch();
       break L8;
      } else {
       $$016 = $22;
      }
     }
     if ($5) {
      $27 = HEAP32[$0>>2]|0;
      $$01739 = $27;$$018$off037 = 1;$$141 = $$016;
      label = 17;
      break;
     } else {
      $31 = $4&255;
      $32 = (($31) + 1)|0;
      (__ZNSt3__211char_traitsIcE4copyEPcPKcm($$016,$0,$32)|0);
      $$pre = ((($0)) + 4|0);
      $$1404753 = $$016;$$pre$phi56Z2D = $20;$$pre$phiZ2D = $$pre;
      label = 19;
      break;
     }
    }
   } while(0);
   if ((label|0) == 17) {
    $33 = ((($0)) + 4|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = (($34) + 1)|0;
    (__ZNSt3__211char_traitsIcE4copyEPcPKcm($$141,$$01739,$35)|0);
    __ZdlPv($$01739);
    if ($$018$off037) {
     $$pre55 = (($spec$select$i) + 1)|0;
     $$1404753 = $$141;$$pre$phi56Z2D = $$pre55;$$pre$phiZ2D = $33;
     label = 19;
    } else {
     label = 20;
    }
   }
   if ((label|0) == 19) {
    $36 = $$pre$phi56Z2D | -2147483648;
    $37 = ((($0)) + 8|0);
    HEAP32[$37>>2] = $36;
    HEAP32[$$pre$phiZ2D>>2] = $13;
    HEAP32[$0>>2] = $$1404753;
    break;
   }
   else if ((label|0) == 20) {
    $38 = $13&255;
    HEAP8[$3>>0] = $38;
    break;
   }
  }
 } while(0);
 return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__211char_traitsIcE6lengthEPKc($1)|0);
 $3 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcm($0,$1,$2)|0);
 return ($3|0);
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = ((($0)) + 11|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)<(0);
 if ($6) {
  $7 = ((($0)) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $11 = $8;
 } else {
  $9 = $5&255;
  $11 = $9;
 }
 $10 = ($11>>>0)<($1>>>0);
 do {
  if ($10) {
   $12 = (($1) - ($11))|0;
   (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEmc($0,$12,$2)|0);
  } else {
   if ($6) {
    $13 = HEAP32[$0>>2]|0;
    $14 = (($13) + ($1)|0);
    HEAP8[$3>>0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($14,$3);
    $15 = ((($0)) + 4|0);
    HEAP32[$15>>2] = $1;
    break;
   } else {
    $16 = (($0) + ($1)|0);
    HEAP8[$3>>0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($16,$3);
    $17 = $1&255;
    HEAP8[$4>>0] = $17;
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEmc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = ($1|0)==(0);
 if (!($4)) {
  $5 = ((($0)) + 11|0);
  $6 = HEAP8[$5>>0]|0;
  $7 = ($6<<24>>24)<(0);
  if ($7) {
   $8 = ((($0)) + 8|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = $9 & 2147483647;
   $phitmp$i = (($10) + -1)|0;
   $11 = ((($0)) + 4|0);
   $12 = HEAP32[$11>>2]|0;
   $15 = $phitmp$i;$16 = $12;
  } else {
   $13 = $6&255;
   $15 = 10;$16 = $13;
  }
  $14 = (($15) - ($16))|0;
  $17 = ($14>>>0)<($1>>>0);
  if ($17) {
   $18 = (($16) + ($1))|0;
   $19 = (($18) - ($15))|0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEmmmmmm($0,$15,$19,$16,$16,0,0);
   $$pre = HEAP8[$5>>0]|0;
   $21 = $$pre;
  } else {
   $21 = $6;
  }
  $20 = ($21<<24>>24)<(0);
  if ($20) {
   $22 = HEAP32[$0>>2]|0;
   $24 = $22;
  } else {
   $24 = $0;
  }
  $23 = (($24) + ($16)|0);
  (__ZNSt3__211char_traitsIcE6assignEPcmc($23,$1,$2)|0);
  $25 = (($16) + ($1))|0;
  $26 = HEAP8[$5>>0]|0;
  $27 = ($26<<24>>24)<(0);
  if ($27) {
   $28 = ((($0)) + 4|0);
   HEAP32[$28>>2] = $25;
  } else {
   $29 = $25&255;
   HEAP8[$5>>0] = $29;
  }
  $30 = (($24) + ($25)|0);
  HEAP8[$3>>0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($30,$3);
 }
 STACKTOP = sp;return ($0|0);
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEmmmmmm($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$sroa$speculated = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $7 = (-17 - ($1))|0;
 $8 = ($7>>>0)<($2>>>0);
 if ($8) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $9 = ((($0)) + 11|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = ($10<<24>>24)<(0);
 if ($11) {
  $12 = HEAP32[$0>>2]|0;
  $23 = $12;
 } else {
  $23 = $0;
 }
 $13 = ($1>>>0)<(2147483623);
 if ($13) {
  $14 = (($2) + ($1))|0;
  $15 = $1 << 1;
  $16 = ($14>>>0)<($15>>>0);
  $$sroa$speculated = $16 ? $15 : $14;
  $17 = ($$sroa$speculated>>>0)<(11);
  $18 = (($$sroa$speculated) + 16)|0;
  $19 = $18 & -16;
  $phitmp = $17 ? 11 : $19;
  $20 = $phitmp;
 } else {
  $20 = -17;
 }
 $21 = (__Znwm($20)|0);
 $22 = ($4|0)==(0);
 if (!($22)) {
  (__ZNSt3__211char_traitsIcE4copyEPcPKcm($21,$23,$4)|0);
 }
 $24 = (($3) - ($5))|0;
 $25 = (($24) - ($4))|0;
 $26 = ($25|0)==(0);
 if (!($26)) {
  $27 = (($21) + ($4)|0);
  $28 = (($27) + ($6)|0);
  $29 = (($23) + ($4)|0);
  $30 = (($29) + ($5)|0);
  (__ZNSt3__211char_traitsIcE4copyEPcPKcm($28,$30,$25)|0);
 }
 $31 = ($1|0)==(10);
 if (!($31)) {
  __ZdlPv($23);
 }
 HEAP32[$0>>2] = $21;
 $32 = $20 | -2147483648;
 $33 = ((($0)) + 8|0);
 HEAP32[$33>>2] = $32;
 return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = ((($0)) + 11|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)<(0);
 if ($6) {
  $7 = ((($0)) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = $8 & 2147483647;
  $phitmp$i = (($9) + -1)|0;
  $10 = ((($0)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $14 = $phitmp$i;$15 = $11;
 } else {
  $12 = $5&255;
  $14 = 10;$15 = $12;
 }
 $13 = (($14) - ($15))|0;
 $16 = ($13>>>0)<($2>>>0);
 if ($16) {
  $27 = (($15) + ($2))|0;
  $28 = (($27) - ($14))|0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEmmmmmmPKc($0,$14,$28,$15,$15,0,$2,$1);
 } else {
  $17 = ($2|0)==(0);
  if (!($17)) {
   if ($6) {
    $18 = HEAP32[$0>>2]|0;
    $20 = $18;
   } else {
    $20 = $0;
   }
   $19 = (($20) + ($15)|0);
   (__ZNSt3__211char_traitsIcE4copyEPcPKcm($19,$1,$2)|0);
   $21 = (($15) + ($2))|0;
   $22 = HEAP8[$4>>0]|0;
   $23 = ($22<<24>>24)<(0);
   if ($23) {
    $24 = ((($0)) + 4|0);
    HEAP32[$24>>2] = $21;
   } else {
    $25 = $21&255;
    HEAP8[$4>>0] = $25;
   }
   $26 = (($20) + ($21)|0);
   HEAP8[$3>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($26,$3);
  }
 }
 STACKTOP = sp;return ($0|0);
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__211char_traitsIcE6lengthEPKc($1)|0);
 $3 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm($0,$1,$2)|0);
 return ($3|0);
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$018 = 0, $$019 = 0, $$pn = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = sp + 1|0;
 HEAP8[$2>>0] = $1;
 $4 = ((($0)) + 11|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)<(0);
 if ($6) {
  $8 = ((($0)) + 8|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $9 & 2147483647;
  $11 = (($10) + -1)|0;
  $12 = ((($0)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $$018 = $13;$$019 = $11;
 } else {
  $7 = $5&255;
  $$018 = $7;$$019 = 10;
 }
 $14 = ($$018|0)==($$019|0);
 if ($14) {
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEmmmmmm($0,$$019,1,$$019,$$019,0,0);
  $15 = HEAP8[$4>>0]|0;
  $16 = ($15<<24>>24)<(0);
  if ($16) {
   label = 8;
  } else {
   label = 7;
  }
 } else {
  if ($6) {
   label = 8;
  } else {
   label = 7;
  }
 }
 if ((label|0) == 7) {
  $17 = (($$018) + 1)|0;
  $18 = $17&255;
  HEAP8[$4>>0] = $18;
  $$pn = $0;
 }
 else if ((label|0) == 8) {
  $19 = HEAP32[$0>>2]|0;
  $20 = (($$018) + 1)|0;
  $21 = ((($0)) + 4|0);
  HEAP32[$21>>2] = $20;
  $$pn = $19;
 }
 $$0 = (($$pn) + ($$018)|0);
 __ZNSt3__211char_traitsIcE6assignERcRKc($$0,$2);
 $22 = ((($$0)) + 1|0);
 HEAP8[$3>>0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($22,$3);
 STACKTOP = sp;return;
}
function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwm($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = ($2>>>0)>(1073741807);
 if ($4) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $5 = ($2>>>0)<(2);
 do {
  if ($5) {
   $6 = $2&255;
   $7 = ((($0)) + 8|0);
   $8 = ((($7)) + 3|0);
   HEAP8[$8>>0] = $6;
   $$0 = $0;
  } else {
   $9 = (($2) + 4)|0;
   $10 = $9 & -4;
   $11 = ($10>>>0)>(1073741823);
   if (!($11)) {
    $17 = $10 << 2;
    $18 = (__Znwm($17)|0);
    HEAP32[$0>>2] = $18;
    $19 = $10 | -2147483648;
    $20 = ((($0)) + 8|0);
    HEAP32[$20>>2] = $19;
    $21 = ((($0)) + 4|0);
    HEAP32[$21>>2] = $2;
    $$0 = $18;
    break;
   }
   $12 = (___cxa_allocate_exception(8)|0);
   __THREW__ = 0;
   invoke_vii(45,($12|0),(43841|0));
   $13 = __THREW__; __THREW__ = 0;
   $14 = $13&1;
   if ($14) {
    $15 = ___cxa_find_matching_catch_2()|0;
    $16 = (getTempRet0() | 0);
    ___cxa_free_exception(($12|0));
    ___resumeException($15|0);
    // unreachable;
   } else {
    HEAP32[$12>>2] = (30800);
    ___cxa_throw(($12|0),(24744|0),(226|0));
    // unreachable;
   }
  }
 } while(0);
 (__ZNSt3__211char_traitsIwE4copyEPwPKwm($$0,$1,$2)|0);
 $22 = (($$0) + ($2<<2)|0);
 HEAP32[$3>>2] = 0;
 __ZNSt3__211char_traitsIwE6assignERwRKw($22,$3);
 STACKTOP = sp;return;
}
function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEmw($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = ($1>>>0)>(1073741807);
 if ($4) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $5 = ($1>>>0)<(2);
 do {
  if ($5) {
   $6 = $1&255;
   $7 = ((($0)) + 8|0);
   $8 = ((($7)) + 3|0);
   HEAP8[$8>>0] = $6;
   $$0 = $0;
  } else {
   $9 = (($1) + 4)|0;
   $10 = $9 & -4;
   $11 = ($10>>>0)>(1073741823);
   if (!($11)) {
    $17 = $10 << 2;
    $18 = (__Znwm($17)|0);
    HEAP32[$0>>2] = $18;
    $19 = $10 | -2147483648;
    $20 = ((($0)) + 8|0);
    HEAP32[$20>>2] = $19;
    $21 = ((($0)) + 4|0);
    HEAP32[$21>>2] = $1;
    $$0 = $18;
    break;
   }
   $12 = (___cxa_allocate_exception(8)|0);
   __THREW__ = 0;
   invoke_vii(45,($12|0),(43841|0));
   $13 = __THREW__; __THREW__ = 0;
   $14 = $13&1;
   if ($14) {
    $15 = ___cxa_find_matching_catch_2()|0;
    $16 = (getTempRet0() | 0);
    ___cxa_free_exception(($12|0));
    ___resumeException($15|0);
    // unreachable;
   } else {
    HEAP32[$12>>2] = (30800);
    ___cxa_throw(($12|0),(24744|0),(226|0));
    // unreachable;
   }
  }
 } while(0);
 (__ZNSt3__211char_traitsIwE6assignEPwmw($$0,$1,$2)|0);
 $22 = (($$0) + ($1<<2)|0);
 HEAP32[$3>>2] = 0;
 __ZNSt3__211char_traitsIwE6assignERwRKw($22,$3);
 STACKTOP = sp;return;
}
function __ZNSt3__211char_traitsIwE6assignEPwmw($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1|0)==(0);
 if ($3) {
  $5 = $0;
 } else {
  $4 = (_wmemset($0,$2,$1)|0);
  $5 = $0;
 }
 return ($5|0);
}
function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = ((($1)) + 3|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)<(0);
 if ($4) {
  $5 = HEAP32[$0>>2]|0;
  __ZdlPv($5);
 }
 return;
}
function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwm($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = ((($0)) + 8|0);
 $5 = ((($4)) + 3|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = ($6<<24>>24)<(0);
 if ($7) {
  $8 = HEAP32[$4>>2]|0;
  $9 = $8 & 2147483647;
  $phitmp$i = (($9) + -1)|0;
  $11 = $phitmp$i;
 } else {
  $11 = 1;
 }
 $10 = ($11>>>0)<($2>>>0);
 do {
  if ($10) {
   if ($7) {
    $19 = ((($0)) + 4|0);
    $20 = HEAP32[$19>>2]|0;
    $23 = $20;
   } else {
    $21 = $6&255;
    $23 = $21;
   }
   $22 = (($2) - ($11))|0;
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEmmmmmmPKw($0,$11,$22,$23,0,$23,$2,$1);
  } else {
   if ($7) {
    $12 = HEAP32[$0>>2]|0;
    $13 = $12;
   } else {
    $13 = $0;
   }
   (__ZNSt3__211char_traitsIwE4moveEPwPKwm($13,$1,$2)|0);
   $14 = (($13) + ($2<<2)|0);
   HEAP32[$3>>2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($14,$3);
   $15 = HEAP8[$5>>0]|0;
   $16 = ($15<<24>>24)<(0);
   if ($16) {
    $17 = ((($0)) + 4|0);
    HEAP32[$17>>2] = $2;
    break;
   } else {
    $18 = $2&255;
    HEAP8[$5>>0] = $18;
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return ($0|0);
}
function __ZNSt3__211char_traitsIwE4moveEPwPKwm($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 if ($3) {
  $5 = $0;
 } else {
  $4 = (_wmemmove($0,$1,$2)|0);
  $5 = $0;
 }
 return ($5|0);
}
function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEmmmmmmPKw($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$sroa$speculated = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $8 = sp;
 $9 = (1073741806 - ($1))|0;
 $10 = ($9>>>0)<($2>>>0);
 if ($10) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $11 = ((($0)) + 8|0);
 $12 = ((($11)) + 3|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = ($13<<24>>24)<(0);
 if ($14) {
  $15 = HEAP32[$0>>2]|0;
  $34 = $15;
 } else {
  $34 = $0;
 }
 $16 = ($1>>>0)<(536870887);
 if ($16) {
  $17 = (($2) + ($1))|0;
  $18 = $1 << 1;
  $19 = ($17>>>0)<($18>>>0);
  $$sroa$speculated = $19 ? $18 : $17;
  $20 = ($$sroa$speculated>>>0)<(2);
  $21 = (($$sroa$speculated) + 4)|0;
  $22 = $21 & -4;
  $23 = $20 ? 2 : $22;
  $24 = ($23>>>0)>(1073741823);
  if ($24) {
   $25 = (___cxa_allocate_exception(8)|0);
   __THREW__ = 0;
   invoke_vii(45,($25|0),(43841|0));
   $26 = __THREW__; __THREW__ = 0;
   $27 = $26&1;
   if ($27) {
    $28 = ___cxa_find_matching_catch_2()|0;
    $29 = (getTempRet0() | 0);
    ___cxa_free_exception(($25|0));
    ___resumeException($28|0);
    // unreachable;
   } else {
    HEAP32[$25>>2] = (30800);
    ___cxa_throw(($25|0),(24744|0),(226|0));
    // unreachable;
   }
  } else {
   $31 = $23;
  }
 } else {
  $31 = 1073741807;
 }
 $30 = $31 << 2;
 $32 = (__Znwm($30)|0);
 $33 = ($4|0)==(0);
 if (!($33)) {
  (__ZNSt3__211char_traitsIwE4copyEPwPKwm($32,$34,$4)|0);
 }
 $35 = ($6|0)==(0);
 if (!($35)) {
  $36 = (($32) + ($4<<2)|0);
  (__ZNSt3__211char_traitsIwE4copyEPwPKwm($36,$7,$6)|0);
 }
 $37 = (($3) - ($5))|0;
 $38 = (($37) - ($4))|0;
 $39 = ($38|0)==(0);
 if (!($39)) {
  $40 = (($34) + ($4<<2)|0);
  $41 = (($40) + ($5<<2)|0);
  $42 = (($32) + ($4<<2)|0);
  $43 = (($42) + ($6<<2)|0);
  (__ZNSt3__211char_traitsIwE4copyEPwPKwm($43,$41,$38)|0);
 }
 $44 = ($1|0)==(1);
 if (!($44)) {
  __ZdlPv($34);
 }
 HEAP32[$0>>2] = $32;
 $45 = $31 | -2147483648;
 HEAP32[$11>>2] = $45;
 $46 = (($37) + ($6))|0;
 $47 = ((($0)) + 4|0);
 HEAP32[$47>>2] = $46;
 $48 = (($32) + ($46<<2)|0);
 HEAP32[$8>>2] = 0;
 __ZNSt3__211char_traitsIwE6assignERwRKw($48,$8);
 STACKTOP = sp;return;
}
function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEm($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$016$in = 0, $$01742 = 0, $$018$off040 = 0, $$1435056 = 0, $$144 = 0, $$pre = 0, $$pre$phi59Z2D = 0, $$pre$phiZ2D = 0, $$pre58 = 0, $$sroa$speculated = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $eh$lpad$body$indexZ2D = 0, $phitmp$i = 0, $phitmp$i22 = 0, $spec$select$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1>>>0)>(1073741807);
 if ($2) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $3 = ((($0)) + 8|0);
 $4 = ((($3)) + 3|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)<(0);
 if ($6) {
  $7 = HEAP32[$3>>2]|0;
  $8 = $7 & 2147483647;
  $phitmp$i = (($8) + -1)|0;
  $9 = ((($0)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $13 = $10;$18 = $phitmp$i;
 } else {
  $11 = $5&255;
  $13 = $11;$18 = 1;
 }
 $12 = ($13>>>0)>($1>>>0);
 $$sroa$speculated = $12 ? $13 : $1;
 $14 = ($$sroa$speculated>>>0)<(2);
 $15 = (($$sroa$speculated) + 4)|0;
 $16 = $15 & -4;
 $phitmp$i22 = (($16) + -1)|0;
 $spec$select$i = $14 ? 1 : $phitmp$i22;
 $17 = ($spec$select$i|0)==($18|0);
 L8: do {
  if (!($17)) {
   do {
    if ($14) {
     $42 = HEAP32[$0>>2]|0;
     if ($6) {
      $$01742 = $42;$$018$off040 = 0;$$144 = $0;
      label = 26;
     } else {
      $43 = $5&255;
      $44 = (($43) + 1)|0;
      (__ZNSt3__211char_traitsIwE4copyEPwPKwm($0,$42,$44)|0);
      __ZdlPv($42);
      label = 29;
     }
    } else {
     $19 = ($spec$select$i>>>0)>($18>>>0);
     $20 = (($spec$select$i) + 1)|0;
     $21 = ($20>>>0)>(1073741823);
     L14: do {
      if ($19) {
       if (!($21)) {
        $27 = $20 << 2;
        $28 = (__Znwm($27)|0);
        $$016$in = $28;
        break;
       }
       $22 = (___cxa_allocate_exception(8)|0);
       __THREW__ = 0;
       invoke_vii(45,($22|0),(43841|0));
       $23 = __THREW__; __THREW__ = 0;
       $24 = $23&1;
       if ($24) {
        $25 = ___cxa_find_matching_catch_2()|0;
        $26 = (getTempRet0() | 0);
        ___cxa_free_exception(($22|0));
        ___resumeException($25|0);
        // unreachable;
       } else {
        HEAP32[$22>>2] = (30800);
        ___cxa_throw(($22|0),(24744|0),(226|0));
        // unreachable;
       }
      } else {
       do {
        if ($21) {
         $29 = (___cxa_allocate_exception(8)|0);
         __THREW__ = 0;
         invoke_vii(45,($29|0),(43841|0));
         $30 = __THREW__; __THREW__ = 0;
         $31 = $30&1;
         if ($31) {
          $33 = ___cxa_find_matching_catch_3(0|0)|0;
          $34 = (getTempRet0() | 0);
          ___cxa_free_exception(($29|0));
          $eh$lpad$body$indexZ2D = $33;
          break;
         } else {
          HEAP32[$29>>2] = (30800);
          __THREW__ = 0;
          invoke_viii(27,($29|0),(24744|0),(226|0));
          $32 = __THREW__; __THREW__ = 0;
          label = 19;
          break;
         }
        } else {
         $35 = $20 << 2;
         __THREW__ = 0;
         $36 = (invoke_ii(167,($35|0))|0);
         $37 = __THREW__; __THREW__ = 0;
         $38 = $37&1;
         if ($38) {
          label = 19;
         } else {
          $$016$in = $36;
          break L14;
         }
        }
       } while(0);
       if ((label|0) == 19) {
        $39 = ___cxa_find_matching_catch_3(0|0)|0;
        $40 = (getTempRet0() | 0);
        $eh$lpad$body$indexZ2D = $39;
       }
       (___cxa_begin_catch(($eh$lpad$body$indexZ2D|0))|0);
       ___cxa_end_catch();
       break L8;
      }
     } while(0);
     if ($6) {
      $41 = HEAP32[$0>>2]|0;
      $$01742 = $41;$$018$off040 = 1;$$144 = $$016$in;
      label = 26;
      break;
     } else {
      $45 = $5&255;
      $46 = (($45) + 1)|0;
      (__ZNSt3__211char_traitsIwE4copyEPwPKwm($$016$in,$0,$46)|0);
      $$pre = ((($0)) + 4|0);
      $$1435056 = $$016$in;$$pre$phi59Z2D = $20;$$pre$phiZ2D = $$pre;
      label = 28;
      break;
     }
    }
   } while(0);
   if ((label|0) == 26) {
    $47 = ((($0)) + 4|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = (($48) + 1)|0;
    (__ZNSt3__211char_traitsIwE4copyEPwPKwm($$144,$$01742,$49)|0);
    __ZdlPv($$01742);
    if ($$018$off040) {
     $$pre58 = (($spec$select$i) + 1)|0;
     $$1435056 = $$144;$$pre$phi59Z2D = $$pre58;$$pre$phiZ2D = $47;
     label = 28;
    } else {
     label = 29;
    }
   }
   if ((label|0) == 28) {
    $50 = $$pre$phi59Z2D | -2147483648;
    HEAP32[$3>>2] = $50;
    HEAP32[$$pre$phiZ2D>>2] = $13;
    HEAP32[$0>>2] = $$1435056;
    break;
   }
   else if ((label|0) == 29) {
    $51 = $13&255;
    HEAP8[$4>>0] = $51;
    break;
   }
  }
 } while(0);
 return;
}
function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNSt3__211char_traitsIwE6lengthEPKw($1)|0);
 $3 = (__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwm($0,$1,$2)|0);
 return ($3|0);
}
function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEmmmmmm($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$sroa$speculated = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $7 = (1073741807 - ($1))|0;
 $8 = ($7>>>0)<($2>>>0);
 if ($8) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $9 = ((($0)) + 8|0);
 $10 = ((($9)) + 3|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = ($11<<24>>24)<(0);
 if ($12) {
  $13 = HEAP32[$0>>2]|0;
  $32 = $13;
 } else {
  $32 = $0;
 }
 $14 = ($1>>>0)<(536870887);
 if ($14) {
  $15 = (($2) + ($1))|0;
  $16 = $1 << 1;
  $17 = ($15>>>0)<($16>>>0);
  $$sroa$speculated = $17 ? $16 : $15;
  $18 = ($$sroa$speculated>>>0)<(2);
  $19 = (($$sroa$speculated) + 4)|0;
  $20 = $19 & -4;
  $21 = $18 ? 2 : $20;
  $22 = ($21>>>0)>(1073741823);
  if ($22) {
   $23 = (___cxa_allocate_exception(8)|0);
   __THREW__ = 0;
   invoke_vii(45,($23|0),(43841|0));
   $24 = __THREW__; __THREW__ = 0;
   $25 = $24&1;
   if ($25) {
    $26 = ___cxa_find_matching_catch_2()|0;
    $27 = (getTempRet0() | 0);
    ___cxa_free_exception(($23|0));
    ___resumeException($26|0);
    // unreachable;
   } else {
    HEAP32[$23>>2] = (30800);
    ___cxa_throw(($23|0),(24744|0),(226|0));
    // unreachable;
   }
  } else {
   $29 = $21;
  }
 } else {
  $29 = 1073741807;
 }
 $28 = $29 << 2;
 $30 = (__Znwm($28)|0);
 $31 = ($4|0)==(0);
 if (!($31)) {
  (__ZNSt3__211char_traitsIwE4copyEPwPKwm($30,$32,$4)|0);
 }
 $33 = (($3) - ($5))|0;
 $34 = (($33) - ($4))|0;
 $35 = ($34|0)==(0);
 if (!($35)) {
  $36 = (($32) + ($4<<2)|0);
  $37 = (($36) + ($5<<2)|0);
  $38 = (($30) + ($4<<2)|0);
  $39 = (($38) + ($6<<2)|0);
  (__ZNSt3__211char_traitsIwE4copyEPwPKwm($39,$37,$34)|0);
 }
 $40 = ($1|0)==(1);
 if (!($40)) {
  __ZdlPv($32);
 }
 HEAP32[$0>>2] = $30;
 $41 = $29 | -2147483648;
 HEAP32[$9>>2] = $41;
 return;
}
function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendEPKwm($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = ((($0)) + 8|0);
 $5 = ((($4)) + 3|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = ($6<<24>>24)<(0);
 if ($7) {
  $8 = HEAP32[$4>>2]|0;
  $9 = $8 & 2147483647;
  $phitmp$i = (($9) + -1)|0;
  $10 = ((($0)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $14 = $phitmp$i;$15 = $11;
 } else {
  $12 = $6&255;
  $14 = 1;$15 = $12;
 }
 $13 = (($14) - ($15))|0;
 $16 = ($13>>>0)<($2>>>0);
 if ($16) {
  $27 = (($15) + ($2))|0;
  $28 = (($27) - ($14))|0;
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEmmmmmmPKw($0,$14,$28,$15,$15,0,$2,$1);
 } else {
  $17 = ($2|0)==(0);
  if (!($17)) {
   if ($7) {
    $18 = HEAP32[$0>>2]|0;
    $20 = $18;
   } else {
    $20 = $0;
   }
   $19 = (($20) + ($15<<2)|0);
   (__ZNSt3__211char_traitsIwE4copyEPwPKwm($19,$1,$2)|0);
   $21 = (($15) + ($2))|0;
   $22 = HEAP8[$5>>0]|0;
   $23 = ($22<<24>>24)<(0);
   if ($23) {
    $24 = ((($0)) + 4|0);
    HEAP32[$24>>2] = $21;
   } else {
    $25 = $21&255;
    HEAP8[$5>>0] = $25;
   }
   $26 = (($20) + ($21<<2)|0);
   HEAP32[$3>>2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($26,$3);
  }
 }
 STACKTOP = sp;return ($0|0);
}
function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$018 = 0, $$019 = 0, $$pn = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = sp + 4|0;
 HEAP32[$2>>2] = $1;
 $4 = ((($0)) + 8|0);
 $5 = ((($4)) + 3|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = ($6<<24>>24)<(0);
 if ($7) {
  $9 = HEAP32[$4>>2]|0;
  $10 = $9 & 2147483647;
  $11 = (($10) + -1)|0;
  $12 = ((($0)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $$018 = $13;$$019 = $11;
 } else {
  $8 = $6&255;
  $$018 = $8;$$019 = 1;
 }
 $14 = ($$018|0)==($$019|0);
 if ($14) {
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEmmmmmm($0,$$019,1,$$019,$$019,0,0);
  $15 = HEAP8[$5>>0]|0;
  $16 = ($15<<24>>24)<(0);
  if ($16) {
   label = 8;
  } else {
   label = 7;
  }
 } else {
  if ($7) {
   label = 8;
  } else {
   label = 7;
  }
 }
 if ((label|0) == 7) {
  $17 = (($$018) + 1)|0;
  $18 = $17&255;
  HEAP8[$5>>0] = $18;
  $$pn = $0;
 }
 else if ((label|0) == 8) {
  $19 = HEAP32[$0>>2]|0;
  $20 = (($$018) + 1)|0;
  $21 = ((($0)) + 4|0);
  HEAP32[$21>>2] = $20;
  $$pn = $19;
 }
 $$0 = (($$pn) + ($$018<<2)|0);
 __ZNSt3__211char_traitsIwE6assignERwRKw($$0,$2);
 $22 = ((($$0)) + 4|0);
 HEAP32[$3>>2] = 0;
 __ZNSt3__211char_traitsIwE6assignERwRKw($22,$3);
 STACKTOP = sp;return;
}
function __ZNSt3__214error_categoryD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNKSt3__214error_category23default_error_conditionEi($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = $2;
 $3 = ((($0)) + 4|0);
 HEAP32[$3>>2] = $1;
 return;
}
function __ZNKSt3__214error_category10equivalentEiRKNS_15error_conditionE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = HEAP32[$0>>2]|0;
 $5 = ((($4)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 FUNCTION_TABLE_viii[$6 & 63]($3,$0,$1);
 $7 = ((($3)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($2)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($8|0)==($10|0);
 if ($11) {
  $12 = HEAP32[$3>>2]|0;
  $13 = HEAP32[$2>>2]|0;
  $14 = ($12|0)==($13|0);
  $15 = $14;
 } else {
  $15 = 0;
 }
 STACKTOP = sp;return ($15|0);
}
function __ZNKSt3__214error_category10equivalentERKNS_10error_codeEi($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($1)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==($0|0);
 $6 = HEAP32[$1>>2]|0;
 $7 = ($6|0)==($2|0);
 $8 = $5 & $7;
 return ($8|0);
}
function __ZNKSt3__212__do_message7messageEi($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__212_GLOBAL__N_113do_strerror_rEi($0,$2);
 return;
}
function __ZNSt3__212_GLOBAL__N_113do_strerror_rEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1040|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1040|0);
 $vararg_buffer = sp + 1024|0;
 $2 = sp;
 $3 = (___errno_location()|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (_strerror_r($1,$2,1024)|0);
 $6 = (__ZNSt3__212_GLOBAL__N_124handle_strerror_r_returnEiPc($5,$2)|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = ($7<<24>>24)==(0);
 if ($8) {
  HEAP32[$vararg_buffer>>2] = $1;
  (_snprintf($2,1024,43909,$vararg_buffer)|0);
  $$0 = $2;
 } else {
  $$0 = $6;
 }
 $9 = (___errno_location()|0);
 HEAP32[$9>>2] = $4;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $10 = (__ZNSt3__211char_traitsIcE6lengthEPKc($$0)|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($0,$$0,$10);
 STACKTOP = sp;return;
}
function __ZNSt3__212_GLOBAL__N_124handle_strerror_r_returnEiPc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 switch ($0|0) {
 case 0:  {
  $$0 = $1;
  break;
 }
 case -1:  {
  $2 = (___errno_location()|0);
  $3 = HEAP32[$2>>2]|0;
  $5 = $3;
  label = 3;
  break;
 }
 default: {
  $5 = $0;
  label = 3;
 }
 }
 if ((label|0) == 3) {
  $4 = ($5|0)==(22);
  if ($4) {
   $$0 = 51188;
  } else {
   _abort();
   // unreachable;
  }
 }
 return ($$0|0);
}
function __ZNSt3__212system_errorD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt13runtime_errorD2Ev($0);
 return;
}
function __ZNSt3__212system_errorD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__212system_errorD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt3__210error_code7messageEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 24|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$1>>2]|0;
 FUNCTION_TABLE_viii[$6 & 63]($0,$3,$7);
 return;
}
function __ZNSt3__212system_error6__initERKNS_10error_codeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = HEAP32[$1>>2]|0;
 $5 = ($4|0)==(0);
 do {
  if (!($5)) {
   $6 = ((($2)) + 11|0);
   $7 = HEAP8[$6>>0]|0;
   $8 = ($7<<24>>24)<(0);
   if ($8) {
    $9 = ((($2)) + 4|0);
    $10 = HEAP32[$9>>2]|0;
    $13 = $10;
   } else {
    $11 = $7&255;
    $13 = $11;
   }
   $12 = ($13|0)==(0);
   if (!($12)) {
    (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc($2,43997)|0);
   }
   __ZNKSt3__210error_code7messageEv($3,$1);
   $14 = ((($3)) + 11|0);
   $15 = HEAP8[$14>>0]|0;
   $16 = ($15<<24>>24)<(0);
   $17 = HEAP32[$3>>2]|0;
   $18 = ((($3)) + 4|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = $15&255;
   $21 = $16 ? $17 : $3;
   $22 = $16 ? $19 : $20;
   __THREW__ = 0;
   (invoke_iiii(44,($2|0),($21|0),($22|0))|0);
   $23 = __THREW__; __THREW__ = 0;
   $24 = $23&1;
   if ($24) {
    $25 = ___cxa_find_matching_catch_2()|0;
    $26 = (getTempRet0() | 0);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($3);
    ___resumeException($25|0);
    // unreachable;
   } else {
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($3);
    break;
   }
  }
 } while(0);
 ;HEAP32[$0>>2]=HEAP32[$2>>2]|0;HEAP32[$0+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$2+8>>2]|0;
 $$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $27 = (($2) + ($$0$i$i<<2)|0);
  HEAP32[$27>>2] = 0;
  $28 = (($$0$i$i) + 1)|0;
  $$0$i$i = $28;
 }
 STACKTOP = sp;return;
}
function __ZNSt3__212system_errorC2ENS_10error_codeEPKc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$03 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp + 12|0;
 $4 = sp;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
 $5 = (__ZNSt3__211char_traitsIcE6lengthEPKc($2)|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($4,$2,$5);
 __THREW__ = 0;
 invoke_viii(35,($3|0),($1|0),($4|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 do {
  if ($7) {
   $21 = ___cxa_find_matching_catch_2()|0;
   $22 = (getTempRet0() | 0);
   $$0 = $22;$$03 = $21;
  } else {
   __THREW__ = 0;
   invoke_vii(203,($0|0),($3|0));
   $8 = __THREW__; __THREW__ = 0;
   $9 = $8&1;
   if ($9) {
    $23 = ___cxa_find_matching_catch_2()|0;
    $24 = (getTempRet0() | 0);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($3);
    $$0 = $24;$$03 = $23;
    break;
   } else {
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($3);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($4);
    HEAP32[$0>>2] = (30636);
    $10 = ((($0)) + 8|0);
    $11 = $1;
    $12 = $11;
    $13 = HEAP32[$12>>2]|0;
    $14 = (($11) + 4)|0;
    $15 = $14;
    $16 = HEAP32[$15>>2]|0;
    $17 = $10;
    $18 = $17;
    HEAP32[$18>>2] = $13;
    $19 = (($17) + 4)|0;
    $20 = $19;
    HEAP32[$20>>2] = $16;
    STACKTOP = sp;return;
   }
  }
 } while(0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($4);
 ___resumeException($$03|0);
 // unreachable;
}
function __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___cxa_allocate_exception(8)|0);
 __THREW__ = 0;
 invoke_vii(45,($1|0),(44000|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $4 = ___cxa_find_matching_catch_2()|0;
  $5 = (getTempRet0() | 0);
  ___cxa_free_exception(($1|0));
  ___resumeException($4|0);
  // unreachable;
 } else {
  HEAP32[$1>>2] = (30800);
  ___cxa_throw(($1|0),(24744|0),(226|0));
  // unreachable;
 }
}
function __ZSt18uncaught_exceptionv() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZSt19uncaught_exceptionsv()|0);
 $1 = ($0|0)>(0);
 return ($1|0);
}
function __ZSt19uncaught_exceptionsv() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___cxa_uncaught_exception()|0);
 $1 = $0&1;
 return ($1|0);
}
function __ZL25default_terminate_handlerv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0;
 var $vararg_ptr2 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $0 = sp + 36|0;
 $1 = (___cxa_get_globals_fast()|0);
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = HEAP32[$1>>2]|0;
  $4 = ($3|0)==(0|0);
  if (!($4)) {
   $5 = ((($3)) + 80|0);
   $6 = ((($3)) + 48|0);
   $7 = $6;
   $8 = $7;
   $9 = HEAP32[$8>>2]|0;
   $10 = (($7) + 4)|0;
   $11 = $10;
   $12 = HEAP32[$11>>2]|0;
   $13 = $9 & -256;
   $14 = ($13|0)==(1126902528);
   $15 = ($12|0)==(1129074247);
   $16 = $14 & $15;
   if (!($16)) {
    HEAP32[$vararg_buffer7>>2] = 44143;
    _abort_message(44093,$vararg_buffer7);
    // unreachable;
   }
   $17 = ($9|0)==(1126902529);
   $18 = ($12|0)==(1129074247);
   $19 = $17 & $18;
   if ($19) {
    $20 = ((($3)) + 44|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = $21;
   } else {
    $22 = $5;
   }
   HEAP32[$0>>2] = $22;
   $23 = HEAP32[$3>>2]|0;
   $24 = ((($23)) + 4|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = HEAP32[6158]|0;
   $27 = ((($26)) + 16|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = (FUNCTION_TABLE_iiii[$28 & 63](24632,$23,$0)|0);
   if ($29) {
    $30 = HEAP32[$0>>2]|0;
    $31 = HEAP32[$30>>2]|0;
    $32 = ((($31)) + 8|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = (FUNCTION_TABLE_ii[$33 & 255]($30)|0);
    HEAP32[$vararg_buffer>>2] = 44143;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = $25;
    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr2>>2] = $34;
    _abort_message(44007,$vararg_buffer);
    // unreachable;
   } else {
    HEAP32[$vararg_buffer3>>2] = 44143;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = $25;
    _abort_message(44052,$vararg_buffer3);
    // unreachable;
   }
  }
 }
 _abort_message(44131,$vararg_buffer10);
 // unreachable;
}
function ___cxa_get_globals_fast() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $0 = (_pthread_once((51168|0),(36|0))|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $2 = HEAP32[12793]|0;
  $3 = (_pthread_getspecific(($2|0))|0);
  STACKTOP = sp;return ($3|0);
 } else {
  _abort_message(44282,$vararg_buffer);
  // unreachable;
 }
 return (0)|0;
}
function _abort_message($0,$varargs) {
 $0 = $0|0;
 $varargs = $varargs|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $varargs;
 $2 = HEAP32[6639]|0;
 (_vfprintf($2,$0,$1)|0);
 (_fputc(10,$2)|0);
 _abort();
 // unreachable;
}
function __ZN10__cxxabiv116__shim_type_infoD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10__cxxabiv117__class_type_infoD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $3 = sp;
 $4 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$1,0)|0);
 if ($4) {
  $$2 = 1;
 } else {
  $5 = ($1|0)==(0|0);
  if ($5) {
   $$2 = 0;
  } else {
   $6 = (___dynamic_cast($1,24656,24640,0)|0);
   $7 = ($6|0)==(0|0);
   if ($7) {
    $$2 = 0;
   } else {
    $8 = ((($3)) + 4|0);
    dest=$8; stop=dest+52|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
    HEAP32[$3>>2] = $6;
    $9 = ((($3)) + 8|0);
    HEAP32[$9>>2] = $0;
    $10 = ((($3)) + 12|0);
    HEAP32[$10>>2] = -1;
    $11 = ((($3)) + 48|0);
    HEAP32[$11>>2] = 1;
    $12 = HEAP32[$6>>2]|0;
    $13 = ((($12)) + 28|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = HEAP32[$2>>2]|0;
    FUNCTION_TABLE_viiii[$14 & 31]($6,$3,$15,1);
    $16 = ((($3)) + 24|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = ($17|0)==(1);
    if ($18) {
     $19 = ((($3)) + 16|0);
     $20 = HEAP32[$19>>2]|0;
     HEAP32[$2>>2] = $20;
     $$0 = 1;
    } else {
     $$0 = 0;
    }
    $$2 = $$0;
   }
  }
 }
 STACKTOP = sp;return ($$2|0);
}
function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ((($1)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$7,$5)|0);
 if ($8) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$1,$2,$3,$4);
 }
 return;
}
function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($1)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$6,$4)|0);
 do {
  if ($7) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0,$1,$2,$3);
  } else {
   $8 = HEAP32[$1>>2]|0;
   $9 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$8,$4)|0);
   if ($9) {
    $10 = ((($1)) + 16|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ($11|0)==($2|0);
    if (!($12)) {
     $13 = ((($1)) + 20|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = ($14|0)==($2|0);
     if (!($15)) {
      $18 = ((($1)) + 32|0);
      HEAP32[$18>>2] = $3;
      HEAP32[$13>>2] = $2;
      $19 = ((($1)) + 40|0);
      $20 = HEAP32[$19>>2]|0;
      $21 = (($20) + 1)|0;
      HEAP32[$19>>2] = $21;
      $22 = ((($1)) + 36|0);
      $23 = HEAP32[$22>>2]|0;
      $24 = ($23|0)==(1);
      if ($24) {
       $25 = ((($1)) + 24|0);
       $26 = HEAP32[$25>>2]|0;
       $27 = ($26|0)==(2);
       if ($27) {
        $28 = ((($1)) + 54|0);
        HEAP8[$28>>0] = 1;
       }
      }
      $29 = ((($1)) + 44|0);
      HEAP32[$29>>2] = 4;
      break;
     }
    }
    $16 = ($3|0)==(1);
    if ($16) {
     $17 = ((($1)) + 32|0);
     HEAP32[$17>>2] = 1;
    }
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$5,0)|0);
 if ($6) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$1,$2,$3);
 }
 return;
}
function __ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==($1|0);
 return ($3|0);
}
function __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 do {
  if ($6) {
   HEAP32[$4>>2] = $2;
   $7 = ((($1)) + 24|0);
   HEAP32[$7>>2] = $3;
   $8 = ((($1)) + 36|0);
   HEAP32[$8>>2] = 1;
  } else {
   $9 = ($5|0)==($2|0);
   if (!($9)) {
    $13 = ((($1)) + 36|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = (($14) + 1)|0;
    HEAP32[$13>>2] = $15;
    $16 = ((($1)) + 24|0);
    HEAP32[$16>>2] = 2;
    $17 = ((($1)) + 54|0);
    HEAP8[$17>>0] = 1;
    break;
   }
   $10 = ((($1)) + 24|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==(2);
   if ($12) {
    HEAP32[$10>>2] = $3;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==($2|0);
 if ($6) {
  $7 = ((($1)) + 28|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(1);
  if (!($9)) {
   HEAP32[$7>>2] = $3;
  }
 }
 return;
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond22 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($1)) + 53|0);
 HEAP8[$5>>0] = 1;
 $6 = ((($1)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==($3|0);
 do {
  if ($8) {
   $9 = ((($1)) + 52|0);
   HEAP8[$9>>0] = 1;
   $10 = ((($1)) + 16|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==(0|0);
   if ($12) {
    HEAP32[$10>>2] = $2;
    $13 = ((($1)) + 24|0);
    HEAP32[$13>>2] = $4;
    $14 = ((($1)) + 36|0);
    HEAP32[$14>>2] = 1;
    $15 = ((($1)) + 48|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ($16|0)==(1);
    $18 = ($4|0)==(1);
    $or$cond = $18 & $17;
    if (!($or$cond)) {
     break;
    }
    $19 = ((($1)) + 54|0);
    HEAP8[$19>>0] = 1;
    break;
   }
   $20 = ($11|0)==($2|0);
   if (!($20)) {
    $30 = ((($1)) + 36|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = (($31) + 1)|0;
    HEAP32[$30>>2] = $32;
    $33 = ((($1)) + 54|0);
    HEAP8[$33>>0] = 1;
    break;
   }
   $21 = ((($1)) + 24|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ($22|0)==(2);
   if ($23) {
    HEAP32[$21>>2] = $4;
    $28 = $4;
   } else {
    $28 = $22;
   }
   $24 = ((($1)) + 48|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ($25|0)==(1);
   $27 = ($28|0)==(1);
   $or$cond22 = $26 & $27;
   if ($or$cond22) {
    $29 = ((($1)) + 54|0);
    HEAP8[$29>>0] = 1;
   }
  }
 } while(0);
 return;
}
function ___dynamic_cast($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond28 = 0, $or$cond30 = 0, $or$cond32 = 0, $spec$select = 0, $spec$select33 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $4 = sp;
 $5 = HEAP32[$0>>2]|0;
 $6 = ((($5)) + -8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($0) + ($7)|0);
 $9 = ((($5)) + -4|0);
 $10 = HEAP32[$9>>2]|0;
 HEAP32[$4>>2] = $2;
 $11 = ((($4)) + 4|0);
 HEAP32[$11>>2] = $0;
 $12 = ((($4)) + 8|0);
 HEAP32[$12>>2] = $1;
 $13 = ((($4)) + 12|0);
 HEAP32[$13>>2] = $3;
 $14 = ((($4)) + 16|0);
 $15 = ((($4)) + 20|0);
 $16 = ((($4)) + 24|0);
 $17 = ((($4)) + 28|0);
 $18 = ((($4)) + 32|0);
 $19 = ((($4)) + 40|0);
 dest=$14; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));HEAP16[$14+36>>1]=0|0;HEAP8[$14+38>>0]=0|0;
 $20 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($10,$2,0)|0);
 L1: do {
  if ($20) {
   $21 = ((($4)) + 48|0);
   HEAP32[$21>>2] = 1;
   $22 = HEAP32[$10>>2]|0;
   $23 = ((($22)) + 20|0);
   $24 = HEAP32[$23>>2]|0;
   FUNCTION_TABLE_viiiiii[$24 & 15]($10,$4,$8,$8,1,0);
   $25 = HEAP32[$16>>2]|0;
   $26 = ($25|0)==(1);
   $spec$select = $26 ? $8 : 0;
   $$0 = $spec$select;
  } else {
   $27 = ((($4)) + 36|0);
   $28 = HEAP32[$10>>2]|0;
   $29 = ((($28)) + 24|0);
   $30 = HEAP32[$29>>2]|0;
   FUNCTION_TABLE_viiiii[$30 & 3]($10,$4,$8,1,0);
   $31 = HEAP32[$27>>2]|0;
   switch ($31|0) {
   case 0:  {
    $32 = HEAP32[$19>>2]|0;
    $33 = ($32|0)==(1);
    $34 = HEAP32[$17>>2]|0;
    $35 = ($34|0)==(1);
    $or$cond = $33 & $35;
    $36 = HEAP32[$18>>2]|0;
    $37 = ($36|0)==(1);
    $or$cond28 = $or$cond & $37;
    $38 = HEAP32[$15>>2]|0;
    $spec$select33 = $or$cond28 ? $38 : 0;
    $$0 = $spec$select33;
    break L1;
    break;
   }
   case 1:  {
    break;
   }
   default: {
    $$0 = 0;
    break L1;
   }
   }
   $39 = HEAP32[$16>>2]|0;
   $40 = ($39|0)==(1);
   if (!($40)) {
    $41 = HEAP32[$19>>2]|0;
    $42 = ($41|0)==(0);
    $43 = HEAP32[$17>>2]|0;
    $44 = ($43|0)==(1);
    $or$cond30 = $42 & $44;
    $45 = HEAP32[$18>>2]|0;
    $46 = ($45|0)==(1);
    $or$cond32 = $or$cond30 & $46;
    if (!($or$cond32)) {
     $$0 = 0;
     break;
    }
   }
   $47 = HEAP32[$14>>2]|0;
   $$0 = $47;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function __ZN10__cxxabiv120__si_class_type_infoD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ((($1)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$7,$5)|0);
 if ($8) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$1,$2,$3,$4);
 } else {
  $9 = ((($0)) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($11)) + 20|0);
  $13 = HEAP32[$12>>2]|0;
  FUNCTION_TABLE_viiiiii[$13 & 15]($10,$1,$2,$3,$4,$5);
 }
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$037$off038 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($1)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$6,$4)|0);
 do {
  if ($7) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0,$1,$2,$3);
  } else {
   $8 = HEAP32[$1>>2]|0;
   $9 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$8,$4)|0);
   if (!($9)) {
    $44 = ((($0)) + 8|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = HEAP32[$45>>2]|0;
    $47 = ((($46)) + 24|0);
    $48 = HEAP32[$47>>2]|0;
    FUNCTION_TABLE_viiiii[$48 & 3]($45,$1,$2,$3,$4);
    break;
   }
   $10 = ((($1)) + 16|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==($2|0);
   if (!($12)) {
    $13 = ((($1)) + 20|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ($14|0)==($2|0);
    if (!($15)) {
     $18 = ((($1)) + 32|0);
     HEAP32[$18>>2] = $3;
     $19 = ((($1)) + 44|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = ($20|0)==(4);
     if ($21) {
      break;
     }
     $22 = ((($1)) + 52|0);
     HEAP8[$22>>0] = 0;
     $23 = ((($1)) + 53|0);
     HEAP8[$23>>0] = 0;
     $24 = ((($0)) + 8|0);
     $25 = HEAP32[$24>>2]|0;
     $26 = HEAP32[$25>>2]|0;
     $27 = ((($26)) + 20|0);
     $28 = HEAP32[$27>>2]|0;
     FUNCTION_TABLE_viiiiii[$28 & 15]($25,$1,$2,$2,1,$4);
     $29 = HEAP8[$23>>0]|0;
     $30 = ($29<<24>>24)==(0);
     if ($30) {
      $$037$off038 = 0;
      label = 11;
     } else {
      $31 = HEAP8[$22>>0]|0;
      $32 = ($31<<24>>24)==(0);
      if ($32) {
       $$037$off038 = 1;
       label = 11;
      } else {
       label = 15;
      }
     }
     do {
      if ((label|0) == 11) {
       HEAP32[$13>>2] = $2;
       $33 = ((($1)) + 40|0);
       $34 = HEAP32[$33>>2]|0;
       $35 = (($34) + 1)|0;
       HEAP32[$33>>2] = $35;
       $36 = ((($1)) + 36|0);
       $37 = HEAP32[$36>>2]|0;
       $38 = ($37|0)==(1);
       if ($38) {
        $39 = ((($1)) + 24|0);
        $40 = HEAP32[$39>>2]|0;
        $41 = ($40|0)==(2);
        if ($41) {
         $42 = ((($1)) + 54|0);
         HEAP8[$42>>0] = 1;
         if ($$037$off038) {
          label = 15;
          break;
         } else {
          $43 = 4;
          break;
         }
        }
       }
       if ($$037$off038) {
        label = 15;
       } else {
        $43 = 4;
       }
      }
     } while(0);
     if ((label|0) == 15) {
      $43 = 3;
     }
     HEAP32[$19>>2] = $43;
     break;
    }
   }
   $16 = ($3|0)==(1);
   if ($16) {
    $17 = ((($1)) + 32|0);
    HEAP32[$17>>2] = 1;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$5,0)|0);
 if ($6) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$1,$2,$3);
 } else {
  $7 = ((($0)) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($9)) + 28|0);
  $11 = HEAP32[$10>>2]|0;
  FUNCTION_TABLE_viiii[$11 & 31]($8,$1,$2,$3);
 }
 return;
}
function __ZNSt9type_infoD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_110construct_Ev() {
 var $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $0 = (_pthread_key_create((51172|0),(311|0))|0);
 $1 = ($0|0)==(0);
 if ($1) {
  STACKTOP = sp;return;
 } else {
  _abort_message(44331,$vararg_buffer);
  // unreachable;
 }
}
function __ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 _free($0);
 $1 = HEAP32[12793]|0;
 $2 = (_pthread_setspecific(($1|0),(0|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  STACKTOP = sp;return;
 } else {
  _abort_message(44381,$vararg_buffer);
  // unreachable;
 }
}
function __ZSt9terminatev() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 $0 = (invoke_i(28)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $19 = ___cxa_find_matching_catch_3(0|0)|0;
  $20 = (getTempRet0() | 0);
  ___clang_call_terminate($19);
  // unreachable;
 }
 $3 = ($0|0)==(0|0);
 if (!($3)) {
  $4 = HEAP32[$0>>2]|0;
  $5 = ($4|0)==(0|0);
  if (!($5)) {
   $6 = ((($4)) + 48|0);
   $7 = $6;
   $8 = $7;
   $9 = HEAP32[$8>>2]|0;
   $10 = (($7) + 4)|0;
   $11 = $10;
   $12 = HEAP32[$11>>2]|0;
   $13 = $9 & -256;
   $14 = ($13|0)==(1126902528);
   $15 = ($12|0)==(1129074247);
   $16 = $14 & $15;
   if ($16) {
    $17 = ((($4)) + 12|0);
    $18 = HEAP32[$17>>2]|0;
    __ZSt11__terminatePFvvE($18);
    // unreachable;
   }
  }
 }
 $21 = (__ZSt13get_terminatev()|0);
 __ZSt11__terminatePFvvE($21);
 // unreachable;
}
function __ZSt11__terminatePFvvE($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 __THREW__ = 0;
 invoke_v($0|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if (!($2)) {
  __THREW__ = 0;
  invoke_vii(204,(44434|0),($vararg_buffer|0));
  $3 = __THREW__; __THREW__ = 0;
 }
 $4 = ___cxa_find_matching_catch_3(0|0)|0;
 $5 = (getTempRet0() | 0);
 (___cxa_begin_catch(($4|0))|0);
 __THREW__ = 0;
 invoke_vii(204,(44474|0),($vararg_buffer1|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = ___cxa_find_matching_catch_3(0|0)|0;
 $8 = (getTempRet0() | 0);
 __THREW__ = 0;
 invoke_v(2);
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if ($10) {
  $11 = ___cxa_find_matching_catch_3(0|0)|0;
  $12 = (getTempRet0() | 0);
  ___clang_call_terminate($11);
  // unreachable;
 } else {
  ___clang_call_terminate($7);
  // unreachable;
 }
}
function __ZSt13get_terminatev() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[7662]|0;
 $1 = (($0) + 0)|0;
 HEAP32[7662] = $1;
 $2 = $0;
 return ($2|0);
}
function __ZNSt9bad_allocD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt9bad_allocD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt9bad_allocD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt9bad_alloc4whatEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (44524|0);
}
function __ZNSt9exceptionD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt11logic_errorD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (30760);
 $1 = ((($0)) + 4|0);
 __ZNSt3__218__libcpp_refstringD2Ev($1);
 return;
}
function __ZNSt11logic_errorD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt11logic_errorD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt11logic_error4whatEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = (__ZNKSt3__218__libcpp_refstring5c_strEv($1)|0);
 return ($2|0);
}
function __ZNKSt3__218__libcpp_refstring5c_strEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZNSt3__218__libcpp_refstringD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZNKSt3__218__libcpp_refstring15__uses_refcountEv($0)|0);
 if ($1) {
  $2 = HEAP32[$0>>2]|0;
  $3 = (__ZNSt3__215__refstring_imp12_GLOBAL__N_113rep_from_dataEPKc_682($2)|0);
  $4 = ((($3)) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (($5) + -1)|0;
  HEAP32[$4>>2] = $6;
  $7 = (($5) + -1)|0;
  $8 = ($7|0)<(0);
  if ($8) {
   __ZdlPv($3);
  }
 }
 return;
}
function __ZNSt3__215__refstring_imp12_GLOBAL__N_113rep_from_dataEPKc_682($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + -12|0);
 return ($1|0);
}
function __ZNSt13runtime_errorD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (30780);
 $1 = ((($0)) + 4|0);
 __ZNSt3__218__libcpp_refstringD2Ev($1);
 return;
}
function __ZNSt13runtime_errorD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt13runtime_errorD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt13runtime_error4whatEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = (__ZNKSt3__218__libcpp_refstring5c_strEv($1)|0);
 return ($2|0);
}
function __ZNSt12length_errorD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt11logic_errorD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt8bad_castD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt8bad_castD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt8bad_castD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt8bad_cast4whatEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (44603|0);
}
function __ZN10__cxxabiv123__fundamental_type_infoD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$1,0)|0);
 return ($3|0);
}
function __ZN10__cxxabiv119__pointer_type_infoD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNK10__cxxabiv119__pointer_type_info9can_catchEPKNS_16__shim_type_infoERPv($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $3 = sp;
 $4 = HEAP32[$2>>2]|0;
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$2>>2] = $5;
 $6 = (__ZNK10__cxxabiv117__pbase_type_info9can_catchEPKNS_16__shim_type_infoERPv($0,$1,0)|0);
 if ($6) {
  $$4 = 1;
 } else {
  $7 = ($1|0)==(0|0);
  if ($7) {
   $$4 = 0;
  } else {
   $8 = (___dynamic_cast($1,24656,24792,0)|0);
   $9 = ($8|0)==(0|0);
   if ($9) {
    $$4 = 0;
   } else {
    $10 = ((($8)) + 8|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ((($0)) + 8|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = $13 ^ -1;
    $15 = $11 & $14;
    $16 = ($15|0)==(0);
    if ($16) {
     $17 = ((($0)) + 12|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = ((($8)) + 12|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($18,$20,0)|0);
     if ($21) {
      $$4 = 1;
     } else {
      $22 = HEAP32[$17>>2]|0;
      $23 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($22,24824,0)|0);
      if ($23) {
       $$4 = 1;
      } else {
       $24 = HEAP32[$17>>2]|0;
       $25 = ($24|0)==(0|0);
       if ($25) {
        $$4 = 0;
       } else {
        $26 = (___dynamic_cast($24,24656,24640,0)|0);
        $27 = ($26|0)==(0|0);
        if ($27) {
         $$4 = 0;
        } else {
         $28 = HEAP32[$19>>2]|0;
         $29 = ($28|0)==(0|0);
         if ($29) {
          $$4 = 0;
         } else {
          $30 = (___dynamic_cast($28,24656,24640,0)|0);
          $31 = ($30|0)==(0|0);
          if ($31) {
           $$4 = 0;
          } else {
           $32 = ((($3)) + 4|0);
           dest=$32; stop=dest+52|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
           HEAP32[$3>>2] = $30;
           $33 = ((($3)) + 8|0);
           HEAP32[$33>>2] = $26;
           $34 = ((($3)) + 12|0);
           HEAP32[$34>>2] = -1;
           $35 = ((($3)) + 48|0);
           HEAP32[$35>>2] = 1;
           $36 = HEAP32[$30>>2]|0;
           $37 = ((($36)) + 28|0);
           $38 = HEAP32[$37>>2]|0;
           $39 = HEAP32[$2>>2]|0;
           FUNCTION_TABLE_viiii[$38 & 31]($30,$3,$39,1);
           $40 = ((($3)) + 24|0);
           $41 = HEAP32[$40>>2]|0;
           $42 = ($41|0)==(1);
           if ($42) {
            $43 = ((($3)) + 16|0);
            $44 = HEAP32[$43>>2]|0;
            HEAP32[$2>>2] = $44;
            $$0 = 1;
           } else {
            $$0 = 0;
           }
           $$4 = $$0;
          }
         }
        }
       }
      }
     }
    } else {
     $$4 = 0;
    }
   }
  }
 }
 STACKTOP = sp;return ($$4|0);
}
function __ZNK10__cxxabiv117__pbase_type_info9can_catchEPKNS_16__shim_type_infoERPv($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$1,0)|0);
 if ($3) {
  $$0 = 1;
 } else {
  $4 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($1,24832,0)|0);
  $$0 = $4;
 }
 return ($$0|0);
}
function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ((($1)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$7,$5)|0);
 if ($8) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$1,$2,$3,$4);
 } else {
  $9 = ((($1)) + 52|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = ((($1)) + 53|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = ((($0)) + 16|0);
  $14 = ((($0)) + 12|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (((($0)) + 16|0) + ($15<<3)|0);
  HEAP8[$9>>0] = 0;
  HEAP8[$11>>0] = 0;
  __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($13,$1,$2,$3,$4,$5);
  $17 = ($15|0)>(1);
  L4: do {
   if ($17) {
    $18 = ((($0)) + 24|0);
    $19 = ((($1)) + 24|0);
    $20 = ((($0)) + 8|0);
    $21 = ((($1)) + 54|0);
    $$0 = $18;
    while(1) {
     $22 = HEAP8[$21>>0]|0;
     $23 = ($22<<24>>24)==(0);
     if (!($23)) {
      break L4;
     }
     $24 = HEAP8[$9>>0]|0;
     $25 = ($24<<24>>24)==(0);
     if ($25) {
      $31 = HEAP8[$11>>0]|0;
      $32 = ($31<<24>>24)==(0);
      if (!($32)) {
       $33 = HEAP32[$20>>2]|0;
       $34 = $33 & 1;
       $35 = ($34|0)==(0);
       if ($35) {
        break L4;
       }
      }
     } else {
      $26 = HEAP32[$19>>2]|0;
      $27 = ($26|0)==(1);
      if ($27) {
       break L4;
      }
      $28 = HEAP32[$20>>2]|0;
      $29 = $28 & 2;
      $30 = ($29|0)==(0);
      if ($30) {
       break L4;
      }
     }
     HEAP8[$9>>0] = 0;
     HEAP8[$11>>0] = 0;
     __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($$0,$1,$2,$3,$4,$5);
     $36 = ((($$0)) + 8|0);
     $37 = ($36>>>0)<($16>>>0);
     if ($37) {
      $$0 = $36;
     } else {
      break;
     }
    }
   }
  } while(0);
  HEAP8[$9>>0] = $10;
  HEAP8[$11>>0] = $12;
 }
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$081$off0 = 0, $$084 = 0, $$085$off0 = 0, $$1 = 0, $$182$off0 = 0, $$186$off0 = 0, $$2 = 0, $$283$off0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($1)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$6,$4)|0);
 L1: do {
  if ($7) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0,$1,$2,$3);
  } else {
   $8 = HEAP32[$1>>2]|0;
   $9 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$8,$4)|0);
   if (!($9)) {
    $56 = ((($0)) + 16|0);
    $57 = ((($0)) + 12|0);
    $58 = HEAP32[$57>>2]|0;
    $59 = (((($0)) + 16|0) + ($58<<3)|0);
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($56,$1,$2,$3,$4);
    $60 = ((($0)) + 24|0);
    $61 = ($58|0)>(1);
    if (!($61)) {
     break;
    }
    $62 = ((($0)) + 8|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = $63 & 2;
    $65 = ($64|0)==(0);
    if ($65) {
     $66 = ((($1)) + 36|0);
     $67 = HEAP32[$66>>2]|0;
     $68 = ($67|0)==(1);
     if (!($68)) {
      $74 = $63 & 1;
      $75 = ($74|0)==(0);
      if ($75) {
       $86 = ((($1)) + 54|0);
       $$2 = $60;
       while(1) {
        $87 = HEAP8[$86>>0]|0;
        $88 = ($87<<24>>24)==(0);
        if (!($88)) {
         break L1;
        }
        $89 = HEAP32[$66>>2]|0;
        $90 = ($89|0)==(1);
        if ($90) {
         break L1;
        }
        __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$2,$1,$2,$3,$4);
        $91 = ((($$2)) + 8|0);
        $92 = ($91>>>0)<($59>>>0);
        if ($92) {
         $$2 = $91;
        } else {
         break L1;
        }
       }
      }
      $76 = ((($1)) + 24|0);
      $77 = ((($1)) + 54|0);
      $$1 = $60;
      while(1) {
       $78 = HEAP8[$77>>0]|0;
       $79 = ($78<<24>>24)==(0);
       if (!($79)) {
        break L1;
       }
       $80 = HEAP32[$66>>2]|0;
       $81 = ($80|0)==(1);
       if ($81) {
        $82 = HEAP32[$76>>2]|0;
        $83 = ($82|0)==(1);
        if ($83) {
         break L1;
        }
       }
       __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$1,$1,$2,$3,$4);
       $84 = ((($$1)) + 8|0);
       $85 = ($84>>>0)<($59>>>0);
       if ($85) {
        $$1 = $84;
       } else {
        break L1;
       }
      }
     }
    }
    $69 = ((($1)) + 54|0);
    $$0 = $60;
    while(1) {
     $70 = HEAP8[$69>>0]|0;
     $71 = ($70<<24>>24)==(0);
     if (!($71)) {
      break L1;
     }
     __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$0,$1,$2,$3,$4);
     $72 = ((($$0)) + 8|0);
     $73 = ($72>>>0)<($59>>>0);
     if ($73) {
      $$0 = $72;
     } else {
      break L1;
     }
    }
   }
   $10 = ((($1)) + 16|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==($2|0);
   if (!($12)) {
    $13 = ((($1)) + 20|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ($14|0)==($2|0);
    if (!($15)) {
     $18 = ((($1)) + 32|0);
     HEAP32[$18>>2] = $3;
     $19 = ((($1)) + 44|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = ($20|0)==(4);
     if ($21) {
      break;
     }
     $22 = ((($0)) + 16|0);
     $23 = ((($0)) + 12|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = (((($0)) + 16|0) + ($24<<3)|0);
     $26 = ((($1)) + 52|0);
     $27 = ((($1)) + 53|0);
     $28 = ((($1)) + 54|0);
     $29 = ((($0)) + 8|0);
     $30 = ((($1)) + 24|0);
     $$081$off0 = 0;$$084 = $22;$$085$off0 = 0;
     L32: while(1) {
      $31 = ($$084>>>0)<($25>>>0);
      if (!($31)) {
       $$283$off0 = $$081$off0;
       label = 18;
       break;
      }
      HEAP8[$26>>0] = 0;
      HEAP8[$27>>0] = 0;
      __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($$084,$1,$2,$2,1,$4);
      $32 = HEAP8[$28>>0]|0;
      $33 = ($32<<24>>24)==(0);
      if (!($33)) {
       $$283$off0 = $$081$off0;
       label = 18;
       break;
      }
      $34 = HEAP8[$27>>0]|0;
      $35 = ($34<<24>>24)==(0);
      do {
       if ($35) {
        $$182$off0 = $$081$off0;$$186$off0 = $$085$off0;
       } else {
        $36 = HEAP8[$26>>0]|0;
        $37 = ($36<<24>>24)==(0);
        if ($37) {
         $43 = HEAP32[$29>>2]|0;
         $44 = $43 & 1;
         $45 = ($44|0)==(0);
         if ($45) {
          $$283$off0 = 1;
          label = 18;
          break L32;
         } else {
          $$182$off0 = 1;$$186$off0 = $$085$off0;
          break;
         }
        }
        $38 = HEAP32[$30>>2]|0;
        $39 = ($38|0)==(1);
        if ($39) {
         label = 23;
         break L32;
        }
        $40 = HEAP32[$29>>2]|0;
        $41 = $40 & 2;
        $42 = ($41|0)==(0);
        if ($42) {
         label = 23;
         break L32;
        } else {
         $$182$off0 = 1;$$186$off0 = 1;
        }
       }
      } while(0);
      $46 = ((($$084)) + 8|0);
      $$081$off0 = $$182$off0;$$084 = $46;$$085$off0 = $$186$off0;
     }
     do {
      if ((label|0) == 18) {
       if (!($$085$off0)) {
        HEAP32[$13>>2] = $2;
        $47 = ((($1)) + 40|0);
        $48 = HEAP32[$47>>2]|0;
        $49 = (($48) + 1)|0;
        HEAP32[$47>>2] = $49;
        $50 = ((($1)) + 36|0);
        $51 = HEAP32[$50>>2]|0;
        $52 = ($51|0)==(1);
        if ($52) {
         $53 = HEAP32[$30>>2]|0;
         $54 = ($53|0)==(2);
         if ($54) {
          HEAP8[$28>>0] = 1;
          if ($$283$off0) {
           label = 23;
           break;
          } else {
           $55 = 4;
           break;
          }
         }
        }
       }
       if ($$283$off0) {
        label = 23;
       } else {
        $55 = 4;
       }
      }
     } while(0);
     if ((label|0) == 23) {
      $55 = 3;
     }
     HEAP32[$19>>2] = $55;
     break;
    }
   }
   $16 = ($3|0)==(1);
   if ($16) {
    $17 = ((($1)) + 32|0);
    HEAP32[$17>>2] = 1;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$5,0)|0);
 L1: do {
  if ($6) {
   __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$1,$2,$3);
  } else {
   $7 = ((($0)) + 16|0);
   $8 = ((($0)) + 12|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = (((($0)) + 16|0) + ($9<<3)|0);
   __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($7,$1,$2,$3);
   $11 = ($9|0)>(1);
   if ($11) {
    $12 = ((($0)) + 24|0);
    $13 = ((($1)) + 54|0);
    $$0 = $12;
    while(1) {
     __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($$0,$1,$2,$3);
     $14 = HEAP8[$13>>0]|0;
     $15 = ($14<<24>>24)==(0);
     if (!($15)) {
      break L1;
     }
     $16 = ((($$0)) + 8|0);
     $17 = ($16>>>0)<($10>>>0);
     if ($17) {
      $$0 = $16;
     } else {
      break;
     }
    }
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 >> 8;
 $7 = $5 & 1;
 $8 = ($7|0)==(0);
 if ($8) {
  $$0 = $6;
 } else {
  $9 = HEAP32[$2>>2]|0;
  $10 = (($9) + ($6)|0);
  $11 = HEAP32[$10>>2]|0;
  $$0 = $11;
 }
 $12 = HEAP32[$0>>2]|0;
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($13)) + 28|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($2) + ($$0)|0);
 $17 = $5 & 2;
 $18 = ($17|0)==(0);
 $19 = $18 ? 2 : $3;
 FUNCTION_TABLE_viiii[$15 & 31]($12,$1,$16,$19);
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ((($0)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 >> 8;
 $9 = $7 & 1;
 $10 = ($9|0)==(0);
 if ($10) {
  $$0 = $8;
 } else {
  $11 = HEAP32[$3>>2]|0;
  $12 = (($11) + ($8)|0);
  $13 = HEAP32[$12>>2]|0;
  $$0 = $13;
 }
 $14 = HEAP32[$0>>2]|0;
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($15)) + 20|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($3) + ($$0)|0);
 $19 = $7 & 2;
 $20 = ($19|0)==(0);
 $21 = $20 ? 2 : $4;
 FUNCTION_TABLE_viiiiii[$17 & 15]($14,$1,$2,$18,$21,$5);
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 >> 8;
 $8 = $6 & 1;
 $9 = ($8|0)==(0);
 if ($9) {
  $$0 = $7;
 } else {
  $10 = HEAP32[$2>>2]|0;
  $11 = (($10) + ($7)|0);
  $12 = HEAP32[$11>>2]|0;
  $$0 = $12;
 }
 $13 = HEAP32[$0>>2]|0;
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($14)) + 24|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($2) + ($$0)|0);
 $18 = $6 & 2;
 $19 = ($18|0)==(0);
 $20 = $19 ? 2 : $3;
 FUNCTION_TABLE_viiiii[$16 & 3]($13,$1,$17,$20,$4);
 return;
}
function __ZNSt8bad_castC2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (30820);
 return;
}
function ___cxa_guard_acquire($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(1);
 if ($2) {
  $$0 = 0;
 } else {
  HEAP8[$0>>0] = 1;
  $$0 = 1;
 }
 return ($$0|0);
}
function ___cxa_guard_release($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function ___cxa_guard_abort($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt9bad_allocC2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (30740);
 return;
}
function __ZSt15get_new_handlerv() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[12794]|0;
 $1 = (($0) + 0)|0;
 HEAP32[12794] = $1;
 $2 = $0;
 return ($2|0);
}
function ___cxa_can_catch($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = HEAP32[$2>>2]|0;
 HEAP32[$3>>2] = $4;
 $5 = HEAP32[$0>>2]|0;
 $6 = ((($5)) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (FUNCTION_TABLE_iiii[$7 & 63]($0,$1,$3)|0);
 $9 = $8&1;
 if ($8) {
  $10 = HEAP32[$3>>2]|0;
  HEAP32[$2>>2] = $10;
 }
 STACKTOP = sp;return ($9|0);
}
function ___cxa_is_pointer_type($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $phitmp = 0, $phitmp1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $3 = 0;
 } else {
  $2 = (___dynamic_cast($0,24656,24792,0)|0);
  $phitmp = ($2|0)!=(0|0);
  $phitmp1 = $phitmp&1;
  $3 = $phitmp1;
 }
 return ($3|0);
}
function _setThrew(threw, value) {
    threw = threw|0;
    value = value|0;
    if ((__THREW__|0) == 0) {
      __THREW__ = threw;
      threwValue = value;
    }
}
function ___muldsi3($a, $b) {
    $a = $a | 0;
    $b = $b | 0;
    var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
    $1 = $a & 65535;
    $2 = $b & 65535;
    $3 = Math_imul($2, $1) | 0;
    $6 = $a >>> 16;
    $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
    $11 = $b >>> 16;
    $12 = Math_imul($11, $1) | 0;
    return (setTempRet0(((($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0) | 0), 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
    $x_sroa_0_0_extract_trunc = $a$0;
    $y_sroa_0_0_extract_trunc = $b$0;
    $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
    $1$1 = (getTempRet0() | 0);
    $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
    return (setTempRet0((((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0) | 0), 0 | $1$0 & -1) | 0;
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((setTempRet0((h) | 0),l|0)|0);
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((setTempRet0((h) | 0),l|0)|0);
}
function _llvm_cttz_i32(x) { // Note: Currently doesn't take isZeroUndef()
    x = x | 0;
    return (x ? (31 - (Math_clz32((x ^ (x - 1))) | 0) | 0) : 32) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    $rem = $rem | 0;
    var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
    $n_sroa_0_0_extract_trunc = $a$0;
    $n_sroa_1_4_extract_shift$0 = $a$1;
    $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
    $d_sroa_0_0_extract_trunc = $b$0;
    $d_sroa_1_4_extract_shift$0 = $b$1;
    $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
    if (($n_sroa_1_4_extract_trunc | 0) == 0) {
      $4 = ($rem | 0) != 0;
      if (($d_sroa_1_4_extract_trunc | 0) == 0) {
        if ($4) {
          HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
      } else {
        if (!$4) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
      }
    }
    $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
    do {
      if (($d_sroa_0_0_extract_trunc | 0) == 0) {
        if ($17) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
            HEAP32[$rem + 4 >> 2] = 0;
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        if (($n_sroa_0_0_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0;
            HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
        if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0 | $a$0 & -1;
            HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
          }
          $_0$1 = 0;
          $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($51 >>> 0 <= 30) {
          $57 = $51 + 1 | 0;
          $58 = 31 - $51 | 0;
          $sr_1_ph = $57;
          $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
      } else {
        if (!$17) {
          $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
          $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          if ($119 >>> 0 <= 31) {
            $125 = $119 + 1 | 0;
            $126 = 31 - $119 | 0;
            $130 = $119 - 31 >> 31;
            $sr_1_ph = $125;
            $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
            $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
            $q_sroa_0_1_ph = 0;
            $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
            break;
          }
          if (($rem | 0) == 0) {
            $_0$1 = 0;
            $_0$0 = 0;
            return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
          }
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$1 = 0;
          $_0$0 = 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
        if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
          $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
          $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          $89 = 64 - $88 | 0;
          $91 = 32 - $88 | 0;
          $92 = $91 >> 31;
          $95 = $88 - 32 | 0;
          $105 = $95 >> 31;
          $sr_1_ph = $88;
          $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
          $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
          $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
          $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
          break;
        }
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
          HEAP32[$rem + 4 >> 2] = 0;
        }
        if (($d_sroa_0_0_extract_trunc | 0) == 1) {
          $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$0 = 0 | $a$0 & -1;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        } else {
          $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
          $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
          $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
      }
    } while (0);
    if (($sr_1_ph | 0) == 0) {
      $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
      $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
      $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
      $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = 0;
    } else {
      $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
      $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
      $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
      $137$1 = (getTempRet0() | 0);
      $q_sroa_1_1198 = $q_sroa_1_1_ph;
      $q_sroa_0_1199 = $q_sroa_0_1_ph;
      $r_sroa_1_1200 = $r_sroa_1_1_ph;
      $r_sroa_0_1201 = $r_sroa_0_1_ph;
      $sr_1202 = $sr_1_ph;
      $carry_0203 = 0;
      while (1) {
        $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
        $149 = $carry_0203 | $q_sroa_0_1199 << 1;
        $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
        $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
        _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0;
        $150$1 = (getTempRet0() | 0);
        $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
        $152 = $151$0 & 1;
        $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0;
        $r_sroa_0_0_extract_trunc = $154$0;
        $r_sroa_1_4_extract_trunc = (getTempRet0() | 0);
        $155 = $sr_1202 - 1 | 0;
        if (($155 | 0) == 0) {
          break;
        } else {
          $q_sroa_1_1198 = $147;
          $q_sroa_0_1199 = $149;
          $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
          $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
          $sr_1202 = $155;
          $carry_0203 = $152;
        }
      }
      $q_sroa_1_1_lcssa = $147;
      $q_sroa_0_1_lcssa = $149;
      $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
      $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = $152;
    }
    $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
    $q_sroa_0_0_insert_ext75$1 = 0;
    $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
    if (($rem | 0) != 0) {
      HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
      HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
    }
    $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
    $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
    return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $1$0 = 0;
    $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
    return $1$0 | 0;
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      setTempRet0((high >>> bits) | 0);
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    setTempRet0((0) | 0);
    return (high >>> (bits - 32))|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      setTempRet0(((high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits))) | 0);
      return low << bits;
    }
    setTempRet0((low << (bits - 32)) | 0);
    return 0;
}
function _llvm_bswap_i32(x) {
    x = x|0;
    return (((x&0xff)<<24) | (((x>>8)&0xff)<<16) | (((x>>16)&0xff)<<8) | (x>>>24))|0;
}
function _llvm_round_f64(d) {
    d = +d;
    return d >= +0 ? +Math_floor(d + +0.5) : +Math_ceil(d - +0.5);
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    var aligned_dest_end = 0;
    var block_aligned_dest_end = 0;
    var dest_end = 0;
    // Test against a benchmarked cutoff limit for when HEAPU8.set() becomes faster to use.
    if ((num|0) >= 8192) {
      _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
      return dest|0;
    }

    ret = dest|0;
    dest_end = (dest + num)|0;
    if ((dest&3) == (src&3)) {
      // The initial unaligned < 4-byte front.
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      aligned_dest_end = (dest_end & -4)|0;
      block_aligned_dest_end = (aligned_dest_end - 64)|0;
      while ((dest|0) <= (block_aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        HEAP32[(((dest)+(4))>>2)]=((HEAP32[(((src)+(4))>>2)])|0);
        HEAP32[(((dest)+(8))>>2)]=((HEAP32[(((src)+(8))>>2)])|0);
        HEAP32[(((dest)+(12))>>2)]=((HEAP32[(((src)+(12))>>2)])|0);
        HEAP32[(((dest)+(16))>>2)]=((HEAP32[(((src)+(16))>>2)])|0);
        HEAP32[(((dest)+(20))>>2)]=((HEAP32[(((src)+(20))>>2)])|0);
        HEAP32[(((dest)+(24))>>2)]=((HEAP32[(((src)+(24))>>2)])|0);
        HEAP32[(((dest)+(28))>>2)]=((HEAP32[(((src)+(28))>>2)])|0);
        HEAP32[(((dest)+(32))>>2)]=((HEAP32[(((src)+(32))>>2)])|0);
        HEAP32[(((dest)+(36))>>2)]=((HEAP32[(((src)+(36))>>2)])|0);
        HEAP32[(((dest)+(40))>>2)]=((HEAP32[(((src)+(40))>>2)])|0);
        HEAP32[(((dest)+(44))>>2)]=((HEAP32[(((src)+(44))>>2)])|0);
        HEAP32[(((dest)+(48))>>2)]=((HEAP32[(((src)+(48))>>2)])|0);
        HEAP32[(((dest)+(52))>>2)]=((HEAP32[(((src)+(52))>>2)])|0);
        HEAP32[(((dest)+(56))>>2)]=((HEAP32[(((src)+(56))>>2)])|0);
        HEAP32[(((dest)+(60))>>2)]=((HEAP32[(((src)+(60))>>2)])|0);
        dest = (dest+64)|0;
        src = (src+64)|0;
      }
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    } else {
      // In the unaligned copy case, unroll a bit as well.
      aligned_dest_end = (dest_end - 4)|0;
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        HEAP8[(((dest)+(1))>>0)]=((HEAP8[(((src)+(1))>>0)])|0);
        HEAP8[(((dest)+(2))>>0)]=((HEAP8[(((src)+(2))>>0)])|0);
        HEAP8[(((dest)+(3))>>0)]=((HEAP8[(((src)+(3))>>0)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    }
    // The remaining unaligned < 4 byte tail.
    while ((dest|0) < (dest_end|0)) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
    }
    return ret|0;
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var end = 0, aligned_end = 0, block_aligned_end = 0, value4 = 0;
    end = (ptr + num)|0;

    value = value & 0xff;
    if ((num|0) >= 67 /* 64 bytes for an unrolled loop + 3 bytes for unaligned head*/) {
      while ((ptr&3) != 0) {
        HEAP8[((ptr)>>0)]=value;
        ptr = (ptr+1)|0;
      }

      aligned_end = (end & -4)|0;
      value4 = value | (value << 8) | (value << 16) | (value << 24);

      block_aligned_end = (aligned_end - 64)|0;

      while((ptr|0) <= (block_aligned_end|0)) {
        HEAP32[((ptr)>>2)]=value4;
        HEAP32[(((ptr)+(4))>>2)]=value4;
        HEAP32[(((ptr)+(8))>>2)]=value4;
        HEAP32[(((ptr)+(12))>>2)]=value4;
        HEAP32[(((ptr)+(16))>>2)]=value4;
        HEAP32[(((ptr)+(20))>>2)]=value4;
        HEAP32[(((ptr)+(24))>>2)]=value4;
        HEAP32[(((ptr)+(28))>>2)]=value4;
        HEAP32[(((ptr)+(32))>>2)]=value4;
        HEAP32[(((ptr)+(36))>>2)]=value4;
        HEAP32[(((ptr)+(40))>>2)]=value4;
        HEAP32[(((ptr)+(44))>>2)]=value4;
        HEAP32[(((ptr)+(48))>>2)]=value4;
        HEAP32[(((ptr)+(52))>>2)]=value4;
        HEAP32[(((ptr)+(56))>>2)]=value4;
        HEAP32[(((ptr)+(60))>>2)]=value4;
        ptr = (ptr + 64)|0;
      }

      while ((ptr|0) < (aligned_end|0) ) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    // The remaining bytes.
    while ((ptr|0) < (end|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (end-num)|0;
}
function _pthread_cond_broadcast(x) {
    x = x | 0;
    return 0;
}
function _pthread_mutex_lock(x) {
    x = x | 0;
    return 0;
}
function _pthread_mutex_unlock(x) {
    x = x | 0;
    return 0;
}
function _sbrk(increment) {
    increment = increment|0;
    var oldDynamicTop = 0;
    var oldDynamicTopOnChange = 0;
    var newDynamicTop = 0;
    var totalMemory = 0;
    oldDynamicTop = HEAP32[DYNAMICTOP_PTR>>2]|0;
    newDynamicTop = oldDynamicTop + increment | 0;

    if (((increment|0) > 0 & (newDynamicTop|0) < (oldDynamicTop|0)) // Detect and fail if we would wrap around signed 32-bit int.
      | (newDynamicTop|0) < 0) { // Also underflow, sbrk() should be able to be used to subtract.
      abortOnCannotGrowMemory(newDynamicTop|0)|0;
      ___setErrNo(12);
      return -1;
    }

    totalMemory = _emscripten_get_heap_size()|0;
    if ((newDynamicTop|0) <= (totalMemory|0)) {
      HEAP32[DYNAMICTOP_PTR>>2] = newDynamicTop|0;
    } else {
      if ((_emscripten_resize_heap(newDynamicTop|0)|0) == 0) {
        ___setErrNo(12);
        return -1;
      }
    }
    return oldDynamicTop|0;
}

  
function dynCall_dddd(index,a1,a2,a3) {
  index = index|0;
  a1=+a1; a2=+a2; a3=+a3;
  return +FUNCTION_TABLE_dddd[index&1](+a1,+a2,+a3);
}


function dynCall_dddddd(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=+a1; a2=+a2; a3=+a3; a4=+a4; a5=+a5;
  return +FUNCTION_TABLE_dddddd[index&3](+a1,+a2,+a3,+a4,+a5);
}


function dynCall_di(index,a1) {
  index = index|0;
  a1=a1|0;
  return +FUNCTION_TABLE_di[index&15](a1|0);
}


function dynCall_did(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=+a2;
  return +FUNCTION_TABLE_did[index&15](a1|0,+a2);
}


function dynCall_didd(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=+a2; a3=+a3;
  return +FUNCTION_TABLE_didd[index&7](a1|0,+a2,+a3);
}


function dynCall_diddd(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=+a2; a3=+a3; a4=+a4;
  return +FUNCTION_TABLE_diddd[index&7](a1|0,+a2,+a3,+a4);
}


function dynCall_diddddd(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=+a2; a3=+a3; a4=+a4; a5=+a5; a6=+a6;
  return +FUNCTION_TABLE_diddddd[index&3](a1|0,+a2,+a3,+a4,+a5,+a6);
}


function dynCall_didddddii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  index = index|0;
  a1=a1|0; a2=+a2; a3=+a3; a4=+a4; a5=+a5; a6=+a6; a7=a7|0; a8=a8|0;
  return +FUNCTION_TABLE_didddddii[index&1](a1|0,+a2,+a3,+a4,+a5,+a6,a7|0,a8|0);
}


function dynCall_didddii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=+a2; a3=+a3; a4=+a4; a5=a5|0; a6=a6|0;
  return +FUNCTION_TABLE_didddii[index&1](a1|0,+a2,+a3,+a4,a5|0,a6|0);
}


function dynCall_diddidd(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=+a2; a3=+a3; a4=a4|0; a5=+a5; a6=+a6;
  return +FUNCTION_TABLE_diddidd[index&1](a1|0,+a2,+a3,a4|0,+a5,+a6);
}


function dynCall_didi(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=+a2; a3=a3|0;
  return +FUNCTION_TABLE_didi[index&1](a1|0,+a2,a3|0);
}


function dynCall_didid(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=+a2; a3=a3|0; a4=+a4;
  return +FUNCTION_TABLE_didid[index&1](a1|0,+a2,a3|0,+a4);
}


function dynCall_dididdd(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=+a2; a3=a3|0; a4=+a4; a5=+a5; a6=+a6;
  return +FUNCTION_TABLE_dididdd[index&3](a1|0,+a2,a3|0,+a4,+a5,+a6);
}


function dynCall_dididi(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=+a2; a3=a3|0; a4=+a4; a5=a5|0;
  return +FUNCTION_TABLE_dididi[index&1](a1|0,+a2,a3|0,+a4,a5|0);
}


function dynCall_dii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return +FUNCTION_TABLE_dii[index&15](a1|0,a2|0);
}


function dynCall_diid(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=+a3;
  return +FUNCTION_TABLE_diid[index&7](a1|0,a2|0,+a3);
}


function dynCall_diidd(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=+a3; a4=+a4;
  return +FUNCTION_TABLE_diidd[index&7](a1|0,a2|0,+a3,+a4);
}


function dynCall_diiddd(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=+a3; a4=+a4; a5=+a5;
  return +FUNCTION_TABLE_diiddd[index&3](a1|0,a2|0,+a3,+a4,+a5);
}


function dynCall_diiddddd(index,a1,a2,a3,a4,a5,a6,a7) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=+a3; a4=+a4; a5=+a5; a6=+a6; a7=+a7;
  return +FUNCTION_TABLE_diiddddd[index&3](a1|0,a2|0,+a3,+a4,+a5,+a6,+a7);
}


function dynCall_diidddddii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=+a3; a4=+a4; a5=+a5; a6=+a6; a7=+a7; a8=a8|0; a9=a9|0;
  return +FUNCTION_TABLE_diidddddii[index&1](a1|0,a2|0,+a3,+a4,+a5,+a6,+a7,a8|0,a9|0);
}


function dynCall_diidddii(index,a1,a2,a3,a4,a5,a6,a7) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=+a3; a4=+a4; a5=+a5; a6=a6|0; a7=a7|0;
  return +FUNCTION_TABLE_diidddii[index&1](a1|0,a2|0,+a3,+a4,+a5,a6|0,a7|0);
}


function dynCall_diiddidd(index,a1,a2,a3,a4,a5,a6,a7) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=+a3; a4=+a4; a5=a5|0; a6=+a6; a7=+a7;
  return +FUNCTION_TABLE_diiddidd[index&1](a1|0,a2|0,+a3,+a4,a5|0,+a6,+a7);
}


function dynCall_diidi(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=+a3; a4=a4|0;
  return +FUNCTION_TABLE_diidi[index&1](a1|0,a2|0,+a3,a4|0);
}


function dynCall_diidid(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=+a3; a4=a4|0; a5=+a5;
  return +FUNCTION_TABLE_diidid[index&1](a1|0,a2|0,+a3,a4|0,+a5);
}


function dynCall_diididdd(index,a1,a2,a3,a4,a5,a6,a7) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=+a3; a4=a4|0; a5=+a5; a6=+a6; a7=+a7;
  return +FUNCTION_TABLE_diididdd[index&3](a1|0,a2|0,+a3,a4|0,+a5,+a6,+a7);
}


function dynCall_diididi(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=+a3; a4=a4|0; a5=+a5; a6=a6|0;
  return +FUNCTION_TABLE_diididi[index&1](a1|0,a2|0,+a3,a4|0,+a5,a6|0);
}


function dynCall_diii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return +FUNCTION_TABLE_diii[index&7](a1|0,a2|0,a3|0);
}


function dynCall_diiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  return +FUNCTION_TABLE_diiii[index&1](a1|0,a2|0,a3|0,a4|0);
}


function dynCall_i(index) {
  index = index|0;
  
  return FUNCTION_TABLE_i[index&31]()|0;
}


function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&255](a1|0)|0;
}


function dynCall_iid(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=+a2;
  return FUNCTION_TABLE_iid[index&3](a1|0,+a2)|0;
}


function dynCall_iii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return FUNCTION_TABLE_iii[index&127](a1|0,a2|0)|0;
}


function dynCall_iiid(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=+a3;
  return FUNCTION_TABLE_iiid[index&1](a1|0,a2|0,+a3)|0;
}


function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&63](a1|0,a2|0,a3|0)|0;
}


function dynCall_iiiid(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=+a4;
  return FUNCTION_TABLE_iiiid[index&3](a1|0,a2|0,a3|0,+a4)|0;
}


function dynCall_iiiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  return FUNCTION_TABLE_iiiii[index&31](a1|0,a2|0,a3|0,a4|0)|0;
}


function dynCall_iiiiid(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=+a5;
  return FUNCTION_TABLE_iiiiid[index&7](a1|0,a2|0,a3|0,a4|0,+a5)|0;
}


function dynCall_iiiiii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  return FUNCTION_TABLE_iiiiii[index&31](a1|0,a2|0,a3|0,a4|0,a5|0)|0;
}


function dynCall_iiiiiid(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=+a6;
  return FUNCTION_TABLE_iiiiiid[index&3](a1|0,a2|0,a3|0,a4|0,a5|0,+a6)|0;
}


function dynCall_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  return FUNCTION_TABLE_iiiiiii[index&63](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0)|0;
}


function dynCall_iiiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
  return FUNCTION_TABLE_iiiiiiii[index&15](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0)|0;
}


function dynCall_iiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
  return FUNCTION_TABLE_iiiiiiiii[index&15](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0)|0;
}


function dynCall_iiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0;
  return FUNCTION_TABLE_iiiiiiiiiii[index&3](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0)|0;
}


function dynCall_iiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0; a11=a11|0;
  return FUNCTION_TABLE_iiiiiiiiiiii[index&3](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0,a11|0)|0;
}


function dynCall_iiiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0; a11=a11|0; a12=a12|0;
  return FUNCTION_TABLE_iiiiiiiiiiiii[index&3](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0,a11|0,a12|0)|0;
}


function dynCall_v(index) {
  index = index|0;
  
  FUNCTION_TABLE_v[index&63]();
}


function dynCall_vi(index,a1) {
  index = index|0;
  a1=a1|0;
  FUNCTION_TABLE_vi[index&511](a1|0);
}


function dynCall_vid(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=+a2;
  FUNCTION_TABLE_vid[index&31](a1|0,+a2);
}


function dynCall_vidd(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=+a2; a3=+a3;
  FUNCTION_TABLE_vidd[index&1](a1|0,+a2,+a3);
}


function dynCall_viddii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=+a2; a3=+a3; a4=a4|0; a5=a5|0;
  FUNCTION_TABLE_viddii[index&1](a1|0,+a2,+a3,a4|0,a5|0);
}


function dynCall_vidid(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=+a2; a3=a3|0; a4=+a4;
  FUNCTION_TABLE_vidid[index&1](a1|0,+a2,a3|0,+a4);
}


function dynCall_vididd(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=+a2; a3=a3|0; a4=+a4; a5=+a5;
  FUNCTION_TABLE_vididd[index&1](a1|0,+a2,a3|0,+a4,+a5);
}


function dynCall_vididdd(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=+a2; a3=a3|0; a4=+a4; a5=+a5; a6=+a6;
  FUNCTION_TABLE_vididdd[index&1](a1|0,+a2,a3|0,+a4,+a5,+a6);
}


function dynCall_vii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  FUNCTION_TABLE_vii[index&255](a1|0,a2|0);
}


function dynCall_viid(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=+a3;
  FUNCTION_TABLE_viid[index&15](a1|0,a2|0,+a3);
}


function dynCall_viidd(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=+a3; a4=+a4;
  FUNCTION_TABLE_viidd[index&1](a1|0,a2|0,+a3,+a4);
}


function dynCall_viiddii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=+a3; a4=+a4; a5=a5|0; a6=a6|0;
  FUNCTION_TABLE_viiddii[index&1](a1|0,a2|0,+a3,+a4,a5|0,a6|0);
}


function dynCall_viidid(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=+a3; a4=a4|0; a5=+a5;
  FUNCTION_TABLE_viidid[index&1](a1|0,a2|0,+a3,a4|0,+a5);
}


function dynCall_viididd(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=+a3; a4=a4|0; a5=+a5; a6=+a6;
  FUNCTION_TABLE_viididd[index&1](a1|0,a2|0,+a3,a4|0,+a5,+a6);
}


function dynCall_viididdd(index,a1,a2,a3,a4,a5,a6,a7) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=+a3; a4=a4|0; a5=+a5; a6=+a6; a7=+a7;
  FUNCTION_TABLE_viididdd[index&1](a1|0,a2|0,+a3,a4|0,+a5,+a6,+a7);
}


function dynCall_viii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  FUNCTION_TABLE_viii[index&63](a1|0,a2|0,a3|0);
}


function dynCall_viiid(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=+a4;
  FUNCTION_TABLE_viiid[index&3](a1|0,a2|0,a3|0,+a4);
}


function dynCall_viiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  FUNCTION_TABLE_viiii[index&31](a1|0,a2|0,a3|0,a4|0);
}


function dynCall_viiiii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  FUNCTION_TABLE_viiiii[index&3](a1|0,a2|0,a3|0,a4|0,a5|0);
}


function dynCall_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  FUNCTION_TABLE_viiiiii[index&15](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}


function dynCall_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
  FUNCTION_TABLE_viiiiiii[index&7](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0);
}


function dynCall_viiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0;
  FUNCTION_TABLE_viiiiiiiiii[index&7](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0);
}


function dynCall_viiiiiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0; a11=a11|0; a12=a12|0; a13=a13|0; a14=a14|0; a15=a15|0;
  FUNCTION_TABLE_viiiiiiiiiiiiiii[index&3](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0,a11|0,a12|0,a13|0,a14|0,a15|0);
}

function b0(p0,p1,p2) {
 p0 = +p0;p1 = +p1;p2 = +p2; nullFunc_dddd(0);return +0;
}
function b1(p0,p1,p2,p3,p4) {
 p0 = +p0;p1 = +p1;p2 = +p2;p3 = +p3;p4 = +p4; nullFunc_dddddd(1);return +0;
}
function b2(p0) {
 p0 = p0|0; nullFunc_di(2);return +0;
}
function b3(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_did(3);return +0;
}
function b4(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_didd(4);return +0;
}
function b5(p0,p1,p2,p3) {
 p0 = p0|0;p1 = +p1;p2 = +p2;p3 = +p3; nullFunc_diddd(5);return +0;
}
function b6(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = +p2;p3 = +p3;p4 = +p4;p5 = +p5; nullFunc_diddddd(6);return +0;
}
function b7(p0,p1,p2,p3,p4,p5,p6,p7) {
 p0 = p0|0;p1 = +p1;p2 = +p2;p3 = +p3;p4 = +p4;p5 = +p5;p6 = p6|0;p7 = p7|0; nullFunc_didddddii(7);return +0;
}
function b8(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = +p2;p3 = +p3;p4 = p4|0;p5 = p5|0; nullFunc_didddii(8);return +0;
}
function b9(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = +p2;p3 = p3|0;p4 = +p4;p5 = +p5; nullFunc_diddidd(9);return +0;
}
function b10(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = p2|0; nullFunc_didi(10);return +0;
}
function b11(p0,p1,p2,p3) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = +p3; nullFunc_didid(11);return +0;
}
function b12(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = +p3;p4 = +p4;p5 = +p5; nullFunc_dididdd(12);return +0;
}
function b13(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = +p3;p4 = p4|0; nullFunc_dididi(13);return +0;
}
function b14(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_dii(14);return +0;
}
function b15(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = +p2; nullFunc_diid(15);return +0;
}
function b16(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = +p2;p3 = +p3; nullFunc_diidd(16);return +0;
}
function b17(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = +p2;p3 = +p3;p4 = +p4; nullFunc_diiddd(17);return +0;
}
function b18(p0,p1,p2,p3,p4,p5,p6) {
 p0 = p0|0;p1 = p1|0;p2 = +p2;p3 = +p3;p4 = +p4;p5 = +p5;p6 = +p6; nullFunc_diiddddd(18);return +0;
}
function b19(p0,p1,p2,p3,p4,p5,p6,p7,p8) {
 p0 = p0|0;p1 = p1|0;p2 = +p2;p3 = +p3;p4 = +p4;p5 = +p5;p6 = +p6;p7 = p7|0;p8 = p8|0; nullFunc_diidddddii(19);return +0;
}
function b20(p0,p1,p2,p3,p4,p5,p6) {
 p0 = p0|0;p1 = p1|0;p2 = +p2;p3 = +p3;p4 = +p4;p5 = p5|0;p6 = p6|0; nullFunc_diidddii(20);return +0;
}
function b21(p0,p1,p2,p3,p4,p5,p6) {
 p0 = p0|0;p1 = p1|0;p2 = +p2;p3 = +p3;p4 = p4|0;p5 = +p5;p6 = +p6; nullFunc_diiddidd(21);return +0;
}
function b22(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = +p2;p3 = p3|0; nullFunc_diidi(22);return +0;
}
function b23(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = +p2;p3 = p3|0;p4 = +p4; nullFunc_diidid(23);return +0;
}
function b24(p0,p1,p2,p3,p4,p5,p6) {
 p0 = p0|0;p1 = p1|0;p2 = +p2;p3 = p3|0;p4 = +p4;p5 = +p5;p6 = +p6; nullFunc_diididdd(24);return +0;
}
function b25(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = +p2;p3 = p3|0;p4 = +p4;p5 = p5|0; nullFunc_diididi(25);return +0;
}
function b26(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_diii(26);return +0;
}
function b27(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_diiii(27);return +0;
}
function b28() {
 ; nullFunc_i(28);return 0;
}
function b29(p0) {
 p0 = p0|0; nullFunc_ii(29);return 0;
}
function _pthread_mutex_unlock__wrapper(p0) {
 p0 = p0|0; return _pthread_mutex_unlock(p0|0)|0;
}
function _pthread_mutex_lock__wrapper(p0) {
 p0 = p0|0; return _pthread_mutex_lock(p0|0)|0;
}
function _pthread_cond_broadcast__wrapper(p0) {
 p0 = p0|0; return _pthread_cond_broadcast(p0|0)|0;
}
function b30(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_iid(30);return 0;
}
function b31(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(31);return 0;
}
function b32(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = +p2; nullFunc_iiid(32);return 0;
}
function b33(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(33);return 0;
}
function b34(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = +p3; nullFunc_iiiid(34);return 0;
}
function b35(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(35);return 0;
}
function __emval_call__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; return __emval_call(p0|0,p1|0,p2|0,p3|0)|0;
}
function b36(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = +p4; nullFunc_iiiiid(36);return 0;
}
function b37(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(37);return 0;
}
function b38(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = +p5; nullFunc_iiiiiid(38);return 0;
}
function b39(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iiiiiii(39);return 0;
}
function b40(p0,p1,p2,p3,p4,p5,p6) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; nullFunc_iiiiiiii(40);return 0;
}
function b41(p0,p1,p2,p3,p4,p5,p6,p7) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0; nullFunc_iiiiiiiii(41);return 0;
}
function b42(p0,p1,p2,p3,p4,p5,p6,p7,p8,p9) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0;p9 = p9|0; nullFunc_iiiiiiiiiii(42);return 0;
}
function b43(p0,p1,p2,p3,p4,p5,p6,p7,p8,p9,p10) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0;p9 = p9|0;p10 = p10|0; nullFunc_iiiiiiiiiiii(43);return 0;
}
function b44(p0,p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,p11) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0;p9 = p9|0;p10 = p10|0;p11 = p11|0; nullFunc_iiiiiiiiiiiii(44);return 0;
}
function b45() {
 ; nullFunc_v(45);
}
function ___cxa_end_catch__wrapper() {
 ; ___cxa_end_catch();
}
function ___cxa_rethrow__wrapper() {
 ; ___cxa_rethrow();
}
function b46(p0) {
 p0 = p0|0; nullFunc_vi(46);
}
function __emval_decref__wrapper(p0) {
 p0 = p0|0; __emval_decref(p0|0);
}
function b47(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(47);
}
function b48(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(48);
}
function b49(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = +p1;p2 = +p2;p3 = p3|0;p4 = p4|0; nullFunc_viddii(49);
}
function b50(p0,p1,p2,p3) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = +p3; nullFunc_vidid(50);
}
function b51(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = +p3;p4 = +p4; nullFunc_vididd(51);
}
function b52(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = +p3;p4 = +p4;p5 = +p5; nullFunc_vididdd(52);
}
function b53(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(53);
}
function b54(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = +p2; nullFunc_viid(54);
}
function b55(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = +p2;p3 = +p3; nullFunc_viidd(55);
}
function b56(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = +p2;p3 = +p3;p4 = p4|0;p5 = p5|0; nullFunc_viiddii(56);
}
function b57(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = +p2;p3 = p3|0;p4 = +p4; nullFunc_viidid(57);
}
function b58(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = +p2;p3 = p3|0;p4 = +p4;p5 = +p5; nullFunc_viididd(58);
}
function b59(p0,p1,p2,p3,p4,p5,p6) {
 p0 = p0|0;p1 = p1|0;p2 = +p2;p3 = p3|0;p4 = +p4;p5 = +p5;p6 = +p6; nullFunc_viididdd(59);
}
function b60(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(60);
}
function ___cxa_throw__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; ___cxa_throw(p0|0,p1|0,p2|0);
}
function b61(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = +p3; nullFunc_viiid(61);
}
function b62(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(62);
}
function b63(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(63);
}
function b64(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(64);
}
function b65(p0,p1,p2,p3,p4,p5,p6) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; nullFunc_viiiiiii(65);
}
function b66(p0,p1,p2,p3,p4,p5,p6,p7,p8,p9) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0;p9 = p9|0; nullFunc_viiiiiiiiii(66);
}
function b67(p0,p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,p11,p12,p13,p14) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0;p9 = p9|0;p10 = p10|0;p11 = p11|0;p12 = p12|0;p13 = p13|0;p14 = p14|0; nullFunc_viiiiiiiiiiiiiii(67);
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_dddd = [b0,__ZN7maxiMap5clampIdEET_S1_S1_S1_];
var FUNCTION_TABLE_dddddd = [b1,__ZN7maxiMap6linlinEddddd,__ZN7maxiMap6linexpEddddd,__ZN7maxiMap6explinEddddd];
var FUNCTION_TABLE_di = [b2,__ZN7maxiOsc5noiseEv,__ZNK12maxiEnvelope12getAmplitudeEv,__ZNK10maxiFilter9getCutoffEv,__ZNK10maxiFilter12getResonanceEv,__ZNK10maxiLagExpIdE5valueEv,__ZNK10maxiLagExpIdE8getAlphaEv,__ZNK10maxiLagExpIdE18getAlphaReciprocalEv,__ZN10maxiSample8playOnceEv,__ZN10maxiSample4playEv,__ZNK9maxiClock6getBpsEv,__ZNK9maxiClock6getBpmEv,b2,b2,b2,b2];
var FUNCTION_TABLE_did = [b3,__ZN7maxiOsc8sinewaveEd,__ZN7maxiOsc7coswaveEd,__ZN7maxiOsc6phasorEd,__ZN7maxiOsc3sawEd,__ZN7maxiOsc8triangleEd,__ZN7maxiOsc6squareEd,__ZN7maxiOsc7sinebufEd,__ZN7maxiOsc8sinebuf4Ed,__ZN7maxiOsc4sawnEd,__ZN10maxiSample8playOnceEd,__ZN10maxiSample4playEd,__ZN7maxiDyn8compressEd,__ZN14maxiDistortion8fastatanEd,b3,b3];
var FUNCTION_TABLE_didd = [b4,__ZN7maxiOsc5pulseEdd,__ZN7maxiOsc4rectEdd,__ZN10maxiFilter6lopassEdd,__ZN10maxiFilter6hipassEdd,__ZN14maxiDistortion8atanDistEdd,__ZN14maxiDistortion12fastAtanDistEdd,__ZN13maxiDCBlocker4playEdd];
var FUNCTION_TABLE_diddd = [b5,__ZN7maxiOsc6phasorEddd,__ZN10maxiFilter5loresEddd,__ZN10maxiFilter5hiresEddd,__ZN10maxiFilter8bandpassEddd,__ZN10maxiSample4playEddd,__ZN10maxiSample5play4Eddd,__ZN10emscripten8internal15FunctionInvokerIPFddddEddJddEE6invokeEPS3_ddd];
var FUNCTION_TABLE_diddddd = [b6,__ZN10emscripten8internal15FunctionInvokerIPFddddddEddJddddEE6invokeEPS3_ddddd,__ZN7maxiDyn10compressorEddddd,__ZN7maxiSVF4playEddddd];
var FUNCTION_TABLE_didddddii = [b7,__ZN7maxiEnv4adsrEdddddli];
var FUNCTION_TABLE_didddii = [b8,__ZN7maxiEnv2arEdddli];
var FUNCTION_TABLE_diddidd = [b9,__ZN7maxiDyn4gateEddldd];
var FUNCTION_TABLE_didi = [b10,__ZN7maxiEnv4adsrEdi];
var FUNCTION_TABLE_didid = [b11,__ZN13maxiDelayline2dlEdid];
var FUNCTION_TABLE_dididdd = [b12,__ZN11maxiFlanger6flangeEdjddd,__ZN10maxiChorus6chorusEdjddd,b12];
var FUNCTION_TABLE_dididi = [b13,__ZN13maxiDelayline2dlEdidi];
var FUNCTION_TABLE_dii = [b14,__ZN10emscripten8internal13MethodInvokerIM7maxiOscFdvEdPS2_JEE6invokeERKS4_S5_,__ZN10emscripten8internal12GetterPolicyIM12maxiEnvelopeKFdvEE3getIS2_EEdRKS4_RKT_,__ZN10emscripten8internal12GetterPolicyIM10maxiFilterKFdvEE3getIS2_EEdRKS4_RKT_,__ZN10emscripten8internal13MethodInvokerIM10maxiLagExpIdEKFdvEdPKS3_JEE6invokeERKS5_S7_,__ZN10emscripten8internal12GetterPolicyIM10maxiLagExpIdEKFdvEE3getIS3_EEdRKS5_RKT_,__ZN10emscripten8internal13MethodInvokerIM10maxiSampleFdvEdPS2_JEE6invokeERKS4_S5_,__ZN7convert4mtofEi,__ZN10emscripten8internal12GetterPolicyIM9maxiClockKFdvEE3getIS2_EEdRKS4_RKT_,b14,b14,b14,b14,b14,b14,b14];
var FUNCTION_TABLE_diid = [b15,__ZN10emscripten8internal13MethodInvokerIM7maxiOscFddEdPS2_JdEE6invokeERKS4_S5_d,__ZN10emscripten8internal13MethodInvokerIM10maxiSampleFddEdPS2_JdEE6invokeERKS4_S5_d,__ZN10emscripten8internal13MethodInvokerIM7maxiDynFddEdPS2_JdEE6invokeERKS4_S5_d,__ZN10emscripten8internal13MethodInvokerIM14maxiDistortionFddEdPS2_JdEE6invokeERKS4_S5_d,b15,b15,b15];
var FUNCTION_TABLE_diidd = [b16,__ZN10emscripten8internal13MethodInvokerIM7maxiOscFdddEdPS2_JddEE6invokeERKS4_S5_dd,__ZN10emscripten8internal13MethodInvokerIM10maxiFilterFdddEdPS2_JddEE6invokeERKS4_S5_dd,__ZN10emscripten8internal13MethodInvokerIM14maxiDistortionFdddEdPS2_JddEE6invokeERKS4_S5_dd,__ZN10emscripten8internal13MethodInvokerIM13maxiDCBlockerFdddEdPS2_JddEE6invokeERKS4_S5_dd,b16,b16,b16];
var FUNCTION_TABLE_diiddd = [b17,__ZN10emscripten8internal13MethodInvokerIM7maxiOscFddddEdPS2_JdddEE6invokeERKS4_S5_ddd,__ZN10emscripten8internal13MethodInvokerIM10maxiFilterFddddEdPS2_JdddEE6invokeERKS4_S5_ddd,__ZN10emscripten8internal13MethodInvokerIM10maxiSampleFddddEdPS2_JdddEE6invokeERKS4_S5_ddd];
var FUNCTION_TABLE_diiddddd = [b18,__ZN10emscripten8internal13MethodInvokerIM7maxiDynFddddddEdPS2_JdddddEE6invokeERKS4_S5_ddddd,__ZN10emscripten8internal13MethodInvokerIM7maxiSVFFddddddEdPS2_JdddddEE6invokeERKS4_S5_ddddd,b18];
var FUNCTION_TABLE_diidddddii = [b19,__ZN10emscripten8internal13MethodInvokerIM7maxiEnvFddddddliEdPS2_JdddddliEE6invokeERKS4_S5_dddddli];
var FUNCTION_TABLE_diidddii = [b20,__ZN10emscripten8internal13MethodInvokerIM7maxiEnvFddddliEdPS2_JdddliEE6invokeERKS4_S5_dddli];
var FUNCTION_TABLE_diiddidd = [b21,__ZN10emscripten8internal13MethodInvokerIM7maxiDynFdddlddEdPS2_JddlddEE6invokeERKS4_S5_ddldd];
var FUNCTION_TABLE_diidi = [b22,__ZN10emscripten8internal13MethodInvokerIM7maxiEnvFddiEdPS2_JdiEE6invokeERKS4_S5_di];
var FUNCTION_TABLE_diidid = [b23,__ZN10emscripten8internal13MethodInvokerIM13maxiDelaylineFddidEdPS2_JdidEE6invokeERKS4_S5_did];
var FUNCTION_TABLE_diididdd = [b24,__ZN10emscripten8internal13MethodInvokerIM11maxiFlangerFddjdddEdPS2_JdjdddEE6invokeERKS4_S5_djddd,__ZN10emscripten8internal13MethodInvokerIM10maxiChorusFddjdddEdPS2_JdjdddEE6invokeERKS4_S5_djddd,b24];
var FUNCTION_TABLE_diididi = [b25,__ZN10emscripten8internal13MethodInvokerIM13maxiDelaylineFddidiEdPS2_JdidiEE6invokeERKS4_S5_didi];
var FUNCTION_TABLE_diii = [b26,__ZN12maxiEnvelope4lineEiRNSt3__26vectorIdNS0_9allocatorIdEEEE,__ZN10emscripten8internal13MethodInvokerIM7convertFdiEdPS2_JiEE6invokeERKS4_S5_i,__ZNSt3__215__num_get_floatIeEET_PKcS3_Rj,__ZNSt3__215__num_get_floatIdEET_PKcS3_Rj,__ZNSt3__215__num_get_floatIfEET_PKcS3_Rj,b26,b26];
var FUNCTION_TABLE_diiii = [b27,__ZN10emscripten8internal13MethodInvokerIM12maxiEnvelopeFdiRNSt3__26vectorIdNS3_9allocatorIdEEEEEdPS2_JiS8_EE6invokeERKSA_SB_iPS7_];
var FUNCTION_TABLE_i = [b28,__ZN10emscripten8internal12operator_newI11vectorToolsJEEEPT_DpOT0_,__ZN10emscripten8internal12operator_newI12maxiSettingsJEEEPT_DpOT0_,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiOscEEE14construct_nullEv,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI12maxiEnvelopeEEE14construct_nullEv,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI13maxiDelaylineEEE14construct_nullEv,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiFilterEEE14construct_nullEv,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiMixEEE14construct_nullEv,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiLagExpIdEEEE14construct_nullEv,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiSampleEEE14construct_nullEv,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiMapEEE14construct_nullEv,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiDynEEE14construct_nullEv,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiEnvEEE14construct_nullEv,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7convertEEE14construct_nullEv,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI14maxiDistortionEEE14construct_nullEv,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI11maxiFlangerEEE14construct_nullEv,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiChorusEEE14construct_nullEv,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI13maxiDCBlockerEEE14construct_nullEv,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiSVFEEE14construct_nullEv,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI9maxiClockEEE14construct_nullEv,__ZN10emscripten8internal12operator_newINSt3__26vectorIiNS2_9allocatorIiEEEEJEEEPT_DpOT0_,__ZN10emscripten8internal12operator_newINSt3__26vectorIdNS2_9allocatorIdEEEEJEEEPT_DpOT0_,__ZN10emscripten8internal12operator_newINSt3__26vectorIcNS2_9allocatorIcEEEEJEEEPT_DpOT0_,__ZN10emscripten8internal12operator_newINSt3__26vectorIfNS2_9allocatorIfEEEEJEEEPT_DpOT0_,__ZNSt3__26__clocEv,__ZNSt3__26locale5__imp12make_classicEv,__ZNSt3__26locale5__imp11make_globalEv,__ZNSt3__26locale8__globalEv,___cxa_get_globals_fast
,b28,b28,b28];
var FUNCTION_TABLE_ii = [b29,__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE4syncEv,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9showmanycEv,__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE9underflowEv,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5uflowEv,___stdio_close,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE4syncEv,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9underflowEv,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE4syncEv,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9showmanycEv,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9underflowEv,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE5uflowEv,__ZNKSt3__219__iostream_category4nameEv,__ZNKSt13runtime_error4whatEv,__ZNSt3__211__stdoutbufIwE4syncEv,__ZNSt3__211__stdoutbufIcE4syncEv,__ZNSt3__210__stdinbufIwE9underflowEv,__ZNSt3__210__stdinbufIwE5uflowEv,__ZNSt3__210__stdinbufIcE9underflowEv,__ZNSt3__210__stdinbufIcE5uflowEv,__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv,__ZNKSt3__220__time_get_c_storageIcE7__weeksEv,__ZNKSt3__220__time_get_c_storageIcE8__monthsEv,__ZNKSt3__220__time_get_c_storageIcE7__am_pmEv,__ZNKSt3__220__time_get_c_storageIcE3__cEv,__ZNKSt3__220__time_get_c_storageIcE3__rEv,__ZNKSt3__220__time_get_c_storageIcE3__xEv,__ZNKSt3__220__time_get_c_storageIcE3__XEv,__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv
,__ZNKSt3__220__time_get_c_storageIwE7__weeksEv,__ZNKSt3__220__time_get_c_storageIwE8__monthsEv,__ZNKSt3__220__time_get_c_storageIwE7__am_pmEv,__ZNKSt3__220__time_get_c_storageIwE3__cEv,__ZNKSt3__220__time_get_c_storageIwE3__rEv,__ZNKSt3__220__time_get_c_storageIwE3__xEv,__ZNKSt3__220__time_get_c_storageIwE3__XEv,__ZNKSt3__210moneypunctIcLb0EE16do_decimal_pointEv,__ZNKSt3__210moneypunctIcLb0EE16do_thousands_sepEv,__ZNKSt3__210moneypunctIcLb0EE14do_frac_digitsEv,__ZNKSt3__210moneypunctIcLb1EE16do_decimal_pointEv,__ZNKSt3__210moneypunctIcLb1EE16do_thousands_sepEv,__ZNKSt3__210moneypunctIcLb1EE14do_frac_digitsEv,__ZNKSt3__210moneypunctIwLb0EE16do_decimal_pointEv,__ZNKSt3__210moneypunctIwLb0EE16do_thousands_sepEv,__ZNKSt3__210moneypunctIwLb0EE14do_frac_digitsEv,__ZNKSt3__210moneypunctIwLb1EE16do_decimal_pointEv,__ZNKSt3__210moneypunctIwLb1EE16do_thousands_sepEv,__ZNKSt3__210moneypunctIwLb1EE14do_frac_digitsEv,__ZNKSt3__27codecvtIDic11__mbstate_tE11do_encodingEv,__ZNKSt3__27codecvtIDic11__mbstate_tE16do_always_noconvEv,__ZNKSt3__27codecvtIDic11__mbstate_tE13do_max_lengthEv,__ZNKSt3__27codecvtIwc11__mbstate_tE11do_encodingEv,__ZNKSt3__27codecvtIwc11__mbstate_tE16do_always_noconvEv,__ZNKSt3__27codecvtIwc11__mbstate_tE13do_max_lengthEv,__ZNKSt3__28numpunctIcE16do_decimal_pointEv,__ZNKSt3__28numpunctIcE16do_thousands_sepEv,__ZNKSt3__28numpunctIwE16do_decimal_pointEv,__ZNKSt3__28numpunctIwE16do_thousands_sepEv,__ZNKSt3__27codecvtIcc11__mbstate_tE11do_encodingEv
,__ZNKSt3__27codecvtIcc11__mbstate_tE16do_always_noconvEv,__ZNKSt3__27codecvtIcc11__mbstate_tE13do_max_lengthEv,__ZNKSt3__27codecvtIDsc11__mbstate_tE11do_encodingEv,__ZNKSt3__27codecvtIDsc11__mbstate_tE16do_always_noconvEv,__ZNKSt3__27codecvtIDsc11__mbstate_tE13do_max_lengthEv,__ZNKSt9bad_alloc4whatEv,__ZNKSt11logic_error4whatEv,__ZNKSt8bad_cast4whatEv,__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5flushEv,__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE5closeEv,__ZN10emscripten8internal13getActualTypeI11vectorToolsEEPKvPT_,__ZN10emscripten8internal7InvokerIP11vectorToolsJEE6invokeEPFS3_vE,__ZN10emscripten8internal13getActualTypeI12maxiSettingsEEPKvPT_,__ZN10emscripten8internal7InvokerIP12maxiSettingsJEE6invokeEPFS3_vE,__ZNK12maxiSettings13getSampleRateEv,__ZNK12maxiSettings14getNumChannelsEv,__ZNK12maxiSettings13getBufferSizeEv,__ZN10emscripten8internal13getActualTypeI7maxiOscEEPKvPT_,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiOscEEE3getERKS4_,__ZN10emscripten8internal7InvokerINSt3__210shared_ptrI7maxiOscEEJEE6invokeEPFS5_vE,__ZN10emscripten8internal13getActualTypeI12maxiEnvelopeEEPKvPT_,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI12maxiEnvelopeEEE3getERKS4_,__ZN10emscripten8internal7InvokerINSt3__210shared_ptrI12maxiEnvelopeEEJEE6invokeEPFS5_vE,__ZNK12maxiEnvelope11getValindexEv,__ZN10emscripten8internal13getActualTypeI13maxiDelaylineEEPKvPT_,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI13maxiDelaylineEEE3getERKS4_,__ZN10emscripten8internal7InvokerINSt3__210shared_ptrI13maxiDelaylineEEJEE6invokeEPFS5_vE,__ZN10emscripten8internal13getActualTypeI10maxiFilterEEPKvPT_,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiFilterEEE3getERKS4_,__ZN10emscripten8internal7InvokerINSt3__210shared_ptrI10maxiFilterEEJEE6invokeEPFS5_vE
,__ZN10emscripten8internal13getActualTypeI7maxiMixEEPKvPT_,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiMixEEE3getERKS4_,__ZN10emscripten8internal7InvokerINSt3__210shared_ptrI7maxiMixEEJEE6invokeEPFS5_vE,__ZN10emscripten8internal13getActualTypeI10maxiLagExpIdEEEPKvPT_,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiLagExpIdEEEE3getERKS5_,__ZN10emscripten8internal7InvokerINSt3__210shared_ptrI10maxiLagExpIdEEEJEE6invokeEPFS6_vE,__ZN10emscripten8internal13getActualTypeI10maxiSampleEEPKvPT_,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiSampleEEE3getERKS4_,__ZN10emscripten8internal7InvokerINSt3__210shared_ptrI10maxiSampleEEJEE6invokeEPFS5_vE,__ZNK10maxiSample9getLengthEv,__ZN10maxiSample7isReadyEv,__ZN10maxiSample4readEv,__ZN10emscripten8internal13getActualTypeI7maxiMapEEPKvPT_,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiMapEEE3getERKS4_,__ZN10emscripten8internal7InvokerINSt3__210shared_ptrI7maxiMapEEJEE6invokeEPFS5_vE,__ZN10emscripten8internal13getActualTypeI7maxiDynEEPKvPT_,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiDynEEE3getERKS4_,__ZN10emscripten8internal7InvokerINSt3__210shared_ptrI7maxiDynEEJEE6invokeEPFS5_vE,__ZN10emscripten8internal13getActualTypeI7maxiEnvEEPKvPT_,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiEnvEEE3getERKS4_,__ZN10emscripten8internal7InvokerINSt3__210shared_ptrI7maxiEnvEEJEE6invokeEPFS5_vE,__ZNK7maxiEnv10getTriggerEv,__ZN10emscripten8internal13getActualTypeI7convertEEPKvPT_,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7convertEEE3getERKS4_,__ZN10emscripten8internal7InvokerINSt3__210shared_ptrI7convertEEJEE6invokeEPFS5_vE,__ZN10emscripten8internal13getActualTypeI14maxiDistortionEEPKvPT_,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI14maxiDistortionEEE3getERKS4_,__ZN10emscripten8internal7InvokerINSt3__210shared_ptrI14maxiDistortionEEJEE6invokeEPFS5_vE,__ZN10emscripten8internal13getActualTypeI11maxiFlangerEEPKvPT_,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI11maxiFlangerEEE3getERKS4_
,__ZN10emscripten8internal7InvokerINSt3__210shared_ptrI11maxiFlangerEEJEE6invokeEPFS5_vE,__ZN10emscripten8internal13getActualTypeI10maxiChorusEEPKvPT_,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiChorusEEE3getERKS4_,__ZN10emscripten8internal7InvokerINSt3__210shared_ptrI10maxiChorusEEJEE6invokeEPFS5_vE,__ZN10emscripten8internal13getActualTypeI13maxiDCBlockerEEPKvPT_,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI13maxiDCBlockerEEE3getERKS4_,__ZN10emscripten8internal7InvokerINSt3__210shared_ptrI13maxiDCBlockerEEJEE6invokeEPFS5_vE,__ZN10emscripten8internal13getActualTypeI7maxiSVFEEPKvPT_,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiSVFEEE3getERKS4_,__ZN10emscripten8internal7InvokerINSt3__210shared_ptrI7maxiSVFEEJEE6invokeEPFS5_vE,__ZN10emscripten8internal13getActualTypeI9maxiClockEEPKvPT_,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI9maxiClockEEE3getERKS4_,__ZN10emscripten8internal7InvokerINSt3__210shared_ptrI9maxiClockEEJEE6invokeEPFS5_vE,__ZNK9maxiClock6isTickEv,__ZNK9maxiClock15getCurrentCountEv,__ZNK9maxiClock12getLastCountEv,__ZNK9maxiClock11getPlayHeadEv,__ZNK9maxiClock7getTickEv,__ZNK9maxiClock8getTicksEv,__ZN10emscripten8internal13getActualTypeINSt3__26vectorIiNS2_9allocatorIiEEEEEEPKvPT_,__ZN10emscripten8internal7InvokerIPNSt3__26vectorIiNS2_9allocatorIiEEEEJEE6invokeEPFS7_vE,__ZNKSt3__26vectorIiNS_9allocatorIiEEE4sizeEv,__ZN10emscripten8internal13getActualTypeINSt3__26vectorIdNS2_9allocatorIdEEEEEEPKvPT_,__ZN10emscripten8internal7InvokerIPNSt3__26vectorIdNS2_9allocatorIdEEEEJEE6invokeEPFS7_vE,__ZNKSt3__26vectorIdNS_9allocatorIdEEE4sizeEv,__ZN10emscripten8internal13getActualTypeINSt3__26vectorIcNS2_9allocatorIcEEEEEEPKvPT_,__ZN10emscripten8internal7InvokerIPNSt3__26vectorIcNS2_9allocatorIcEEEEJEE6invokeEPFS7_vE,__ZNKSt3__26vectorIcNS_9allocatorIcEEE4sizeEv,__ZN10emscripten8internal13getActualTypeINSt3__26vectorIfNS2_9allocatorIfEEEEEEPKvPT_,__ZN10emscripten8internal7InvokerIPNSt3__26vectorIfNS2_9allocatorIfEEEEJEE6invokeEPFS7_vE
,__ZNKSt3__26vectorIfNS_9allocatorIfEEE4sizeEv,__ZN10emscripten8internal18GenericBindingTypeINSt3__210shared_ptrI7maxiOscEEE10toWireTypeEOS5_,__ZN10emscripten8internal18GenericBindingTypeINSt3__210shared_ptrI12maxiEnvelopeEEE10toWireTypeEOS5_,__ZN10emscripten8internal18GenericBindingTypeINSt3__210shared_ptrI13maxiDelaylineEEE10toWireTypeEOS5_,__ZN10emscripten8internal18GenericBindingTypeINSt3__210shared_ptrI10maxiFilterEEE10toWireTypeEOS5_,__ZN10emscripten8internal18GenericBindingTypeINSt3__210shared_ptrI7maxiMixEEE10toWireTypeEOS5_,__ZN10emscripten8internal18GenericBindingTypeINSt3__210shared_ptrI10maxiLagExpIdEEEE10toWireTypeEOS6_,__ZN10emscripten8internal18GenericBindingTypeINSt3__210shared_ptrI10maxiSampleEEE10toWireTypeEOS5_,__ZN10emscripten8internal18GenericBindingTypeINSt3__210shared_ptrI7maxiMapEEE10toWireTypeEOS5_,__ZN10emscripten8internal18GenericBindingTypeINSt3__210shared_ptrI7maxiDynEEE10toWireTypeEOS5_,__ZN10emscripten8internal18GenericBindingTypeINSt3__210shared_ptrI7maxiEnvEEE10toWireTypeEOS5_,__ZN10emscripten8internal18GenericBindingTypeINSt3__210shared_ptrI7convertEEE10toWireTypeEOS5_,__ZN10emscripten8internal18GenericBindingTypeINSt3__210shared_ptrI14maxiDistortionEEE10toWireTypeEOS5_,__ZN10emscripten8internal18GenericBindingTypeINSt3__210shared_ptrI11maxiFlangerEEE10toWireTypeEOS5_,__ZN10emscripten8internal18GenericBindingTypeINSt3__210shared_ptrI10maxiChorusEEE10toWireTypeEOS5_,__ZN10emscripten8internal18GenericBindingTypeINSt3__210shared_ptrI13maxiDCBlockerEEE10toWireTypeEOS5_,__ZN10emscripten8internal18GenericBindingTypeINSt3__210shared_ptrI7maxiSVFEEE10toWireTypeEOS5_,__ZN10emscripten8internal18GenericBindingTypeINSt3__210shared_ptrI9maxiClockEEE10toWireTypeEOS5_,__Znwm,__ZN10emscripten8internal11BindingTypeINS_3valEE10toWireTypeERKS2_,_pthread_mutex_unlock__wrapper,_pthread_mutex_lock__wrapper,_pthread_cond_broadcast__wrapper,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29];
var FUNCTION_TABLE_iid = [b30,__ZN7maxiSVF9setCutoffEd,__ZN7maxiSVF12setResonanceEd,b30];
var FUNCTION_TABLE_iii = [b31,__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE9pbackfailEi,__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE8overflowEi,__ZNKSt3__219__shared_weak_count13__get_deleterERKSt9type_info,__ZNKSt3__220__shared_ptr_pointerIP9maxiClockN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE13__get_deleterERKSt9type_info,__ZNKSt3__220__shared_ptr_pointerIP7maxiSVFN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE13__get_deleterERKSt9type_info,__ZNKSt3__220__shared_ptr_pointerIP13maxiDCBlockerN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE13__get_deleterERKSt9type_info,__ZNKSt3__220__shared_ptr_pointerIP10maxiChorusN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE13__get_deleterERKSt9type_info,__ZNKSt3__220__shared_ptr_pointerIP11maxiFlangerN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE13__get_deleterERKSt9type_info,__ZNKSt3__220__shared_ptr_pointerIP14maxiDistortionN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE13__get_deleterERKSt9type_info,__ZNKSt3__220__shared_ptr_pointerIP7convertN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE13__get_deleterERKSt9type_info,__ZNKSt3__220__shared_ptr_pointerIP7maxiEnvN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE13__get_deleterERKSt9type_info,__ZNKSt3__220__shared_ptr_pointerIP7maxiDynN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE13__get_deleterERKSt9type_info,__ZNKSt3__220__shared_ptr_pointerIP7maxiMapN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE13__get_deleterERKSt9type_info,__ZNKSt3__220__shared_ptr_pointerIP10maxiSampleN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE13__get_deleterERKSt9type_info,__ZNKSt3__220__shared_ptr_pointerIP10maxiLagExpIdEN10emscripten15smart_ptr_traitINS_10shared_ptrIS2_EEE11val_deleterENS_9allocatorIS2_EEE13__get_deleterERKSt9type_info,__ZNKSt3__220__shared_ptr_pointerIP7maxiMixN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE13__get_deleterERKSt9type_info,__ZNKSt3__220__shared_ptr_pointerIP10maxiFilterN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE13__get_deleterERKSt9type_info,__ZNKSt3__220__shared_ptr_pointerIP13maxiDelaylineN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE13__get_deleterERKSt9type_info,__ZNKSt3__220__shared_ptr_pointerIP12maxiEnvelopeN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE13__get_deleterERKSt9type_info,__ZNKSt3__220__shared_ptr_pointerIP7maxiOscN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE13__get_deleterERKSt9type_info,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE8overflowEi,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9pbackfailEj,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE8overflowEj,__ZNSt3__211__stdoutbufIwE8overflowEj,__ZNSt3__211__stdoutbufIcE8overflowEi,__ZNSt3__210__stdinbufIwE9pbackfailEj,__ZNSt3__210__stdinbufIcE9pbackfailEi
,__ZNKSt3__25ctypeIcE10do_toupperEc,__ZNKSt3__25ctypeIcE10do_tolowerEc,__ZNKSt3__25ctypeIcE8do_widenEc,__ZNKSt3__25ctypeIwE10do_toupperEw,__ZNKSt3__25ctypeIwE10do_tolowerEw,__ZNKSt3__25ctypeIwE8do_widenEc,__ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc,__ZNSt3__2lsIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_13basic_ostreamIT_T0_EES9_RKNS_12basic_stringIS6_S7_T1_EE,__ZNKSt3__26locale9use_facetERNS0_2idE,__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE3putEc,__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEs,__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEm,__ZNKSt3__26locale9has_facetERNS0_2idE,__ZN10emscripten8internal12GetterPolicyIM12maxiSettingsKFivEE3getIS2_EEiRKS4_RKT_,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiOscEEE5shareEPS3_PNS_8internal7_EM_VALE,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI12maxiEnvelopeEEE5shareEPS3_PNS_8internal7_EM_VALE,__ZN10emscripten8internal12GetterPolicyIM12maxiEnvelopeKFivEE3getIS2_EEiRKS4_RKT_,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI13maxiDelaylineEEE5shareEPS3_PNS_8internal7_EM_VALE,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiFilterEEE5shareEPS3_PNS_8internal7_EM_VALE,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiMixEEE5shareEPS3_PNS_8internal7_EM_VALE,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiLagExpIdEEEE5shareEPS4_PNS_8internal7_EM_VALE,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiSampleEEE5shareEPS3_PNS_8internal7_EM_VALE,__ZN10emscripten8internal13MethodInvokerIM10maxiSampleKFmvEmPKS2_JEE6invokeERKS4_S6_,__ZN10emscripten8internal13MethodInvokerIM10maxiSampleFbvEbPS2_JEE6invokeERKS4_S5_,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiMapEEE5shareEPS3_PNS_8internal7_EM_VALE,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiDynEEE5shareEPS3_PNS_8internal7_EM_VALE,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiEnvEEE5shareEPS3_PNS_8internal7_EM_VALE,__ZN10emscripten8internal12GetterPolicyIM7maxiEnvKFivEE3getIS2_EEiRKS4_RKT_,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7convertEEE5shareEPS3_PNS_8internal7_EM_VALE,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI14maxiDistortionEEE5shareEPS3_PNS_8internal7_EM_VALE
,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI11maxiFlangerEEE5shareEPS3_PNS_8internal7_EM_VALE,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiChorusEEE5shareEPS3_PNS_8internal7_EM_VALE,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI13maxiDCBlockerEEE5shareEPS3_PNS_8internal7_EM_VALE,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiSVFEEE5shareEPS3_PNS_8internal7_EM_VALE,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI9maxiClockEEE5shareEPS3_PNS_8internal7_EM_VALE,__ZN10emscripten8internal13MethodInvokerIM9maxiClockKFivEiPKS2_JEE6invokeERKS4_S6_,__ZN10emscripten8internal12GetterPolicyIM9maxiClockKFivEE3getIS2_EEiRKS4_RKT_,__ZN10emscripten8internal12GetterPolicyIM9maxiClockKFbvEE3getIS2_EEbRKS4_RKT_,__ZN10emscripten8internal13MethodInvokerIMNSt3__26vectorIiNS2_9allocatorIiEEEEKFmvEmPKS6_JEE6invokeERKS8_SA_,__ZN10emscripten8internal13MethodInvokerIMNSt3__26vectorIdNS2_9allocatorIdEEEEKFmvEmPKS6_JEE6invokeERKS8_SA_,__ZN10emscripten8internal13MethodInvokerIMNSt3__26vectorIcNS2_9allocatorIcEEEEKFmvEmPKS6_JEE6invokeERKS8_SA_,__ZN10emscripten8internal13MethodInvokerIMNSt3__26vectorIfNS2_9allocatorIfEEEEKFmvEmPKS6_JEE6invokeERKS8_SA_,__ZN10emscripten3valaSEOS0_,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31,b31
,b31,b31,b31,b31,b31,b31,b31,b31,b31];
var FUNCTION_TABLE_iiid = [b32,__ZN10emscripten8internal13MethodInvokerIM7maxiSVFFRS2_dES3_PS2_JdEE6invokeERKS5_S6_d];
var FUNCTION_TABLE_iiii = [b33,__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE6setbufEPcl,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPcl,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKcl,___stdio_write,___stdio_seek,___stdio_read,___stdout_write,_sn_write,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6setbufEPcl,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6setbufEPwl,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwl,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwl,__ZNKSt3__214error_category10equivalentEiRKNS_15error_conditionE,__ZNKSt3__214error_category10equivalentERKNS_10error_codeEi,__ZNSt3__211__stdoutbufIwE6xsputnEPKwl,__ZNSt3__211__stdoutbufIcE6xsputnEPKcl,__ZNKSt3__27collateIcE7do_hashEPKcS3_,__ZNKSt3__27collateIwE7do_hashEPKwS3_,__ZNKSt3__28messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE,__ZNKSt3__28messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE,__ZNKSt3__25ctypeIcE10do_toupperEPcPKc,__ZNKSt3__25ctypeIcE10do_tolowerEPcPKc,__ZNKSt3__25ctypeIcE9do_narrowEcc,__ZNKSt3__25ctypeIwE5do_isEtw,__ZNKSt3__25ctypeIwE10do_toupperEPwPKw,__ZNKSt3__25ctypeIwE10do_tolowerEPwPKw,__ZNKSt3__25ctypeIwE9do_narrowEwc,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv
,__ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv,__ZNK10__cxxabiv119__pointer_type_info9can_catchEPKNS_16__shim_type_infoERPv,__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE4openEPKcj,__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE4readEPcl,__ZN10maxiSample4loadENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEi,__ZN10emscripten8internal15FunctionInvokerIPFNS_3valERKNSt3__26vectorIiNS3_9allocatorIiEEEEmES2_S9_JmEE6invokeEPSB_PS7_m,__ZN10emscripten8internal12VectorAccessINSt3__26vectorIiNS2_9allocatorIiEEEEE3setERS6_mRKi,__ZN10emscripten8internal15FunctionInvokerIPFNS_3valERKNSt3__26vectorIdNS3_9allocatorIdEEEEmES2_S9_JmEE6invokeEPSB_PS7_m,__ZN10emscripten8internal12VectorAccessINSt3__26vectorIdNS2_9allocatorIdEEEEE3setERS6_mRKd,__ZN10emscripten8internal15FunctionInvokerIPFNS_3valERKNSt3__26vectorIcNS3_9allocatorIcEEEEmES2_S9_JmEE6invokeEPSB_PS7_m,__ZN10emscripten8internal12VectorAccessINSt3__26vectorIcNS2_9allocatorIcEEEEE3setERS6_mRKc,__ZN10emscripten8internal15FunctionInvokerIPFNS_3valERKNSt3__26vectorIfNS3_9allocatorIfEEEEmES2_S9_JmEE6invokeEPSB_PS7_m,__ZN10emscripten8internal12VectorAccessINSt3__26vectorIfNS2_9allocatorIfEEEEE3setERS6_mRKf,_do_read,__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE23__append_forward_unsafeIPcEERS5_T_S9_,__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm,__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE23__append_forward_unsafeIPwEERS5_T_S9_,__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendEPKwm,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33,b33
,b33,b33,b33,b33,b33];
var FUNCTION_TABLE_iiiid = [b34,__ZN10emscripten8internal15FunctionInvokerIPFbRNSt3__26vectorIdNS2_9allocatorIdEEEEmRKdEbS7_JmS9_EE6invokeEPSB_PS6_md,__ZN10emscripten8internal15FunctionInvokerIPFbRNSt3__26vectorIfNS2_9allocatorIfEEEEmRKfEbS7_JmS9_EE6invokeEPSB_PS6_mf,b34];
var FUNCTION_TABLE_iiiii = [b35,__ZNKSt3__25ctypeIcE8do_widenEPKcS3_Pc,__ZNKSt3__25ctypeIwE5do_isEPKwS3_Pt,__ZNKSt3__25ctypeIwE10do_scan_isEtPKwS3_,__ZNKSt3__25ctypeIwE11do_scan_notEtPKwS3_,__ZNKSt3__25ctypeIwE8do_widenEPKcS3_Pw,__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE5seekgExNS_8ios_base7seekdirE,__ZN10emscripten8internal13MethodInvokerIM10maxiSampleFbNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEiEbPS2_JS9_iEE6invokeERKSB_SC_PNS0_11BindingTypeIS9_EUt_Ei,__ZN10emscripten8internal15FunctionInvokerIPFbRNSt3__26vectorIiNS2_9allocatorIiEEEEmRKiEbS7_JmS9_EE6invokeEPSB_PS6_mi,__ZN10emscripten8internal15FunctionInvokerIPFbRNSt3__26vectorIcNS2_9allocatorIcEEEEmRKcEbS7_JmS9_EE6invokeEPSB_PS6_mc,__emval_call__wrapper,__ZNSt3__217__libcpp_sscanf_lEPKcP15__locale_structS1_z,__ZNSt3__227__num_get_unsigned_integralIyEET_PKcS3_Rji,__ZNSt3__227__num_get_unsigned_integralImEET_PKcS3_Rji,__ZNSt3__227__num_get_unsigned_integralIjEET_PKcS3_Rji,__ZNSt3__227__num_get_unsigned_integralItEET_PKcS3_Rji,__ZNSt3__225__num_get_signed_integralIxEET_PKcS3_Rji,__ZNSt3__225__num_get_signed_integralIlEET_PKcS3_Rji,__ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz,b35,b35,b35,b35,b35,b35,b35,b35,b35,b35
,b35,b35,b35];
var FUNCTION_TABLE_iiiiid = [b36,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe,b36,b36,b36];
var FUNCTION_TABLE_iiiiii = [b37,__ZNKSt3__27collateIcE10do_compareEPKcS3_S3_S3_,__ZNKSt3__27collateIwE10do_compareEPKwS3_S3_S3_,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv,__ZNKSt3__27codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,__ZNKSt3__27codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_m,__ZNKSt3__27codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,__ZNKSt3__27codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_m,__ZNKSt3__25ctypeIcE9do_narrowEPKcS3_cPc,__ZNKSt3__25ctypeIwE9do_narrowEPKwS3_cPc,__ZNKSt3__27codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,__ZNKSt3__27codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_m,__ZNKSt3__27codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,__ZNKSt3__27codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_m,b37,b37,b37,b37,b37,b37,b37,b37
,b37,b37,b37];
var FUNCTION_TABLE_iiiiiid = [b38,__ZNKSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce,__ZNKSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe,b38];
var FUNCTION_TABLE_iiiiiii = [b39,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy,__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm
,__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE,__ZNKSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE,__ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_,__ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39,b39
,b39,b39,b39,b39,b39];
var FUNCTION_TABLE_iiiiiiii = [b40,__ZNKSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc,__ZNKSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc,__ZNKSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe,__ZNKSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE,__ZNKSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe,__ZNKSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE,__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb,__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb,b40,b40,b40,b40,b40,b40,b40];
var FUNCTION_TABLE_iiiiiiiii = [b41,__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc,__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc,__ZNKSt3__27codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_,__ZNKSt3__27codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_,__ZNKSt3__27codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_,__ZNKSt3__27codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_,__ZNKSt3__27codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_,__ZNKSt3__27codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_,__ZNKSt3__27codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_,__ZNKSt3__27codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_,b41,b41,b41,b41,b41];
var FUNCTION_TABLE_iiiiiiiiiii = [b42,__ZNSt3__29__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKc,__ZNSt3__29__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKw,b42];
var FUNCTION_TABLE_iiiiiiiiiiii = [b43,__ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_,__ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_,b43];
var FUNCTION_TABLE_iiiiiiiiiiiii = [b44,__ZNSt3__29__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_,__ZNSt3__29__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw,b44];
var FUNCTION_TABLE_v = [b45,__ZL25default_terminate_handlerv,___cxa_end_catch__wrapper,___cxa_rethrow__wrapper,__ZSt17__throw_bad_allocv,__ZNSt3__2L10init_weeksEv,__ZNSt3__2L11init_monthsEv,__ZNSt3__2L10init_am_pmEv,__ZNSt3__2L11init_wweeksEv,__ZNSt3__2L12init_wmonthsEv,__ZNSt3__2L11init_wam_pmEv,__ZNSt3__212_GLOBAL__N_14makeINS_7collateIcEEjEERT_T0_,__ZNSt3__212_GLOBAL__N_14makeINS_7collateIwEEjEERT_T0_,__ZNSt3__212_GLOBAL__N_14makeINS_5ctypeIwEEjEERT_T0_,__ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIcc11__mbstate_tEEjEERT_T0_,__ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIwc11__mbstate_tEEjEERT_T0_,__ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIDsc11__mbstate_tEEjEERT_T0_,__ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIDic11__mbstate_tEEjEERT_T0_,__ZNSt3__212_GLOBAL__N_14makeINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_,__ZNSt3__212_GLOBAL__N_14makeINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_,__ZNSt3__212_GLOBAL__N_14makeINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_,__ZNSt3__212_GLOBAL__N_14makeINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_,__ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIcLb0EEEjEERT_T0_,__ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIcLb1EEEjEERT_T0_,__ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIwLb0EEEjEERT_T0_,__ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIwLb1EEEjEERT_T0_,__ZNSt3__212_GLOBAL__N_14makeINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_,__ZNSt3__212_GLOBAL__N_14makeINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_,__ZNSt3__212_GLOBAL__N_14makeINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_
,__ZNSt3__212_GLOBAL__N_14makeINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_,__ZNSt3__212_GLOBAL__N_14makeINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_,__ZNSt3__212_GLOBAL__N_14makeINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_,__ZNSt3__212_GLOBAL__N_14makeINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_,__ZNSt3__212_GLOBAL__N_14makeINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_,__ZNSt3__212_GLOBAL__N_14makeINS_8messagesIcEEjEERT_T0_,__ZNSt3__212_GLOBAL__N_14makeINS_8messagesIwEEjEERT_T0_,__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev,b45,b45,b45,b45,b45,b45,b45,b45,b45,b45,b45,b45,b45,b45,b45,b45,b45,b45,b45,b45,b45,b45
,b45,b45,b45,b45,b45];
var FUNCTION_TABLE_vi = [b46,__ZNSt3__214basic_ifstreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__214basic_ifstreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__214basic_ifstreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__214basic_ifstreamIcNS_11char_traitsIcEEED0Ev,__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__213basic_istreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__213basic_istreamIcNS_11char_traitsIcEEED0Ev,__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEED2Ev,__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEED0Ev,__ZNSt3__214__shared_countD2Ev,__ZNSt3__220__shared_ptr_emplaceI9maxiClockNS_9allocatorIS1_EEED0Ev,__ZNSt3__220__shared_ptr_emplaceI9maxiClockNS_9allocatorIS1_EEE16__on_zero_sharedEv,__ZNSt3__220__shared_ptr_emplaceI9maxiClockNS_9allocatorIS1_EEE21__on_zero_shared_weakEv,__ZNSt3__220__shared_ptr_pointerIP9maxiClockN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED2Ev,__ZNSt3__220__shared_ptr_pointerIP9maxiClockN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED0Ev,__ZNSt3__220__shared_ptr_pointerIP9maxiClockN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE16__on_zero_sharedEv,__ZNSt3__220__shared_ptr_pointerIP9maxiClockN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE21__on_zero_shared_weakEv,__ZNSt3__220__shared_ptr_emplaceI7maxiSVFNS_9allocatorIS1_EEED0Ev,__ZNSt3__220__shared_ptr_emplaceI7maxiSVFNS_9allocatorIS1_EEE16__on_zero_sharedEv,__ZNSt3__220__shared_ptr_emplaceI7maxiSVFNS_9allocatorIS1_EEE21__on_zero_shared_weakEv,__ZNSt3__220__shared_ptr_pointerIP7maxiSVFN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED2Ev,__ZNSt3__220__shared_ptr_pointerIP7maxiSVFN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED0Ev,__ZNSt3__220__shared_ptr_pointerIP7maxiSVFN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE16__on_zero_sharedEv,__ZNSt3__220__shared_ptr_pointerIP7maxiSVFN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE21__on_zero_shared_weakEv,__ZNSt3__220__shared_ptr_emplaceI13maxiDCBlockerNS_9allocatorIS1_EEED0Ev,__ZNSt3__220__shared_ptr_emplaceI13maxiDCBlockerNS_9allocatorIS1_EEE16__on_zero_sharedEv,__ZNSt3__220__shared_ptr_emplaceI13maxiDCBlockerNS_9allocatorIS1_EEE21__on_zero_shared_weakEv
,__ZNSt3__220__shared_ptr_pointerIP13maxiDCBlockerN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED2Ev,__ZNSt3__220__shared_ptr_pointerIP13maxiDCBlockerN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED0Ev,__ZNSt3__220__shared_ptr_pointerIP13maxiDCBlockerN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE16__on_zero_sharedEv,__ZNSt3__220__shared_ptr_pointerIP13maxiDCBlockerN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE21__on_zero_shared_weakEv,__ZNSt3__220__shared_ptr_emplaceI10maxiChorusNS_9allocatorIS1_EEED0Ev,__ZNSt3__220__shared_ptr_emplaceI10maxiChorusNS_9allocatorIS1_EEE16__on_zero_sharedEv,__ZNSt3__220__shared_ptr_emplaceI10maxiChorusNS_9allocatorIS1_EEE21__on_zero_shared_weakEv,__ZNSt3__220__shared_ptr_pointerIP10maxiChorusN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED2Ev,__ZNSt3__220__shared_ptr_pointerIP10maxiChorusN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED0Ev,__ZNSt3__220__shared_ptr_pointerIP10maxiChorusN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE16__on_zero_sharedEv,__ZNSt3__220__shared_ptr_pointerIP10maxiChorusN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE21__on_zero_shared_weakEv,__ZNSt3__220__shared_ptr_emplaceI11maxiFlangerNS_9allocatorIS1_EEED0Ev,__ZNSt3__220__shared_ptr_emplaceI11maxiFlangerNS_9allocatorIS1_EEE16__on_zero_sharedEv,__ZNSt3__220__shared_ptr_emplaceI11maxiFlangerNS_9allocatorIS1_EEE21__on_zero_shared_weakEv,__ZNSt3__220__shared_ptr_pointerIP11maxiFlangerN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED2Ev,__ZNSt3__220__shared_ptr_pointerIP11maxiFlangerN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED0Ev,__ZNSt3__220__shared_ptr_pointerIP11maxiFlangerN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE16__on_zero_sharedEv,__ZNSt3__220__shared_ptr_pointerIP11maxiFlangerN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE21__on_zero_shared_weakEv,__ZNSt3__220__shared_ptr_emplaceI14maxiDistortionNS_9allocatorIS1_EEED0Ev,__ZNSt3__220__shared_ptr_emplaceI14maxiDistortionNS_9allocatorIS1_EEE16__on_zero_sharedEv,__ZNSt3__220__shared_ptr_emplaceI14maxiDistortionNS_9allocatorIS1_EEE21__on_zero_shared_weakEv,__ZNSt3__220__shared_ptr_pointerIP14maxiDistortionN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED2Ev,__ZNSt3__220__shared_ptr_pointerIP14maxiDistortionN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED0Ev,__ZNSt3__220__shared_ptr_pointerIP14maxiDistortionN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE16__on_zero_sharedEv,__ZNSt3__220__shared_ptr_pointerIP14maxiDistortionN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE21__on_zero_shared_weakEv,__ZNSt3__220__shared_ptr_emplaceI7convertNS_9allocatorIS1_EEED0Ev,__ZNSt3__220__shared_ptr_emplaceI7convertNS_9allocatorIS1_EEE16__on_zero_sharedEv,__ZNSt3__220__shared_ptr_emplaceI7convertNS_9allocatorIS1_EEE21__on_zero_shared_weakEv,__ZNSt3__220__shared_ptr_pointerIP7convertN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED2Ev,__ZNSt3__220__shared_ptr_pointerIP7convertN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED0Ev
,__ZNSt3__220__shared_ptr_pointerIP7convertN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE16__on_zero_sharedEv,__ZNSt3__220__shared_ptr_pointerIP7convertN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE21__on_zero_shared_weakEv,__ZNSt3__220__shared_ptr_emplaceI7maxiEnvNS_9allocatorIS1_EEED0Ev,__ZNSt3__220__shared_ptr_emplaceI7maxiEnvNS_9allocatorIS1_EEE16__on_zero_sharedEv,__ZNSt3__220__shared_ptr_emplaceI7maxiEnvNS_9allocatorIS1_EEE21__on_zero_shared_weakEv,__ZNSt3__220__shared_ptr_pointerIP7maxiEnvN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED2Ev,__ZNSt3__220__shared_ptr_pointerIP7maxiEnvN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED0Ev,__ZNSt3__220__shared_ptr_pointerIP7maxiEnvN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE16__on_zero_sharedEv,__ZNSt3__220__shared_ptr_pointerIP7maxiEnvN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE21__on_zero_shared_weakEv,__ZNSt3__220__shared_ptr_emplaceI7maxiDynNS_9allocatorIS1_EEED0Ev,__ZNSt3__220__shared_ptr_emplaceI7maxiDynNS_9allocatorIS1_EEE16__on_zero_sharedEv,__ZNSt3__220__shared_ptr_emplaceI7maxiDynNS_9allocatorIS1_EEE21__on_zero_shared_weakEv,__ZNSt3__220__shared_ptr_pointerIP7maxiDynN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED2Ev,__ZNSt3__220__shared_ptr_pointerIP7maxiDynN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED0Ev,__ZNSt3__220__shared_ptr_pointerIP7maxiDynN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE16__on_zero_sharedEv,__ZNSt3__220__shared_ptr_pointerIP7maxiDynN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE21__on_zero_shared_weakEv,__ZNSt3__220__shared_ptr_emplaceI7maxiMapNS_9allocatorIS1_EEED0Ev,__ZNSt3__220__shared_ptr_emplaceI7maxiMapNS_9allocatorIS1_EEE16__on_zero_sharedEv,__ZNSt3__220__shared_ptr_emplaceI7maxiMapNS_9allocatorIS1_EEE21__on_zero_shared_weakEv,__ZNSt3__220__shared_ptr_pointerIP7maxiMapN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED2Ev,__ZNSt3__220__shared_ptr_pointerIP7maxiMapN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED0Ev,__ZNSt3__220__shared_ptr_pointerIP7maxiMapN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE16__on_zero_sharedEv,__ZNSt3__220__shared_ptr_pointerIP7maxiMapN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE21__on_zero_shared_weakEv,__ZNSt3__220__shared_ptr_emplaceI10maxiSampleNS_9allocatorIS1_EEED2Ev,__ZNSt3__220__shared_ptr_emplaceI10maxiSampleNS_9allocatorIS1_EEED0Ev,__ZNSt3__220__shared_ptr_emplaceI10maxiSampleNS_9allocatorIS1_EEE16__on_zero_sharedEv,__ZNSt3__220__shared_ptr_emplaceI10maxiSampleNS_9allocatorIS1_EEE21__on_zero_shared_weakEv,__ZNSt3__220__shared_ptr_pointerIP10maxiSampleN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED2Ev,__ZNSt3__220__shared_ptr_pointerIP10maxiSampleN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED0Ev,__ZNSt3__220__shared_ptr_pointerIP10maxiSampleN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE16__on_zero_sharedEv
,__ZNSt3__220__shared_ptr_pointerIP10maxiSampleN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE21__on_zero_shared_weakEv,__ZNSt3__220__shared_ptr_emplaceI10maxiLagExpIdENS_9allocatorIS2_EEED0Ev,__ZNSt3__220__shared_ptr_emplaceI10maxiLagExpIdENS_9allocatorIS2_EEE16__on_zero_sharedEv,__ZNSt3__220__shared_ptr_emplaceI10maxiLagExpIdENS_9allocatorIS2_EEE21__on_zero_shared_weakEv,__ZNSt3__220__shared_ptr_pointerIP10maxiLagExpIdEN10emscripten15smart_ptr_traitINS_10shared_ptrIS2_EEE11val_deleterENS_9allocatorIS2_EEED2Ev,__ZNSt3__220__shared_ptr_pointerIP10maxiLagExpIdEN10emscripten15smart_ptr_traitINS_10shared_ptrIS2_EEE11val_deleterENS_9allocatorIS2_EEED0Ev,__ZNSt3__220__shared_ptr_pointerIP10maxiLagExpIdEN10emscripten15smart_ptr_traitINS_10shared_ptrIS2_EEE11val_deleterENS_9allocatorIS2_EEE16__on_zero_sharedEv,__ZNSt3__220__shared_ptr_pointerIP10maxiLagExpIdEN10emscripten15smart_ptr_traitINS_10shared_ptrIS2_EEE11val_deleterENS_9allocatorIS2_EEE21__on_zero_shared_weakEv,__ZNSt3__220__shared_ptr_emplaceI7maxiMixNS_9allocatorIS1_EEED0Ev,__ZNSt3__220__shared_ptr_emplaceI7maxiMixNS_9allocatorIS1_EEE16__on_zero_sharedEv,__ZNSt3__220__shared_ptr_emplaceI7maxiMixNS_9allocatorIS1_EEE21__on_zero_shared_weakEv,__ZNSt3__220__shared_ptr_pointerIP7maxiMixN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED2Ev,__ZNSt3__220__shared_ptr_pointerIP7maxiMixN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED0Ev,__ZNSt3__220__shared_ptr_pointerIP7maxiMixN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE16__on_zero_sharedEv,__ZNSt3__220__shared_ptr_pointerIP7maxiMixN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE21__on_zero_shared_weakEv,__ZNSt3__220__shared_ptr_emplaceI10maxiFilterNS_9allocatorIS1_EEED0Ev,__ZNSt3__220__shared_ptr_emplaceI10maxiFilterNS_9allocatorIS1_EEE16__on_zero_sharedEv,__ZNSt3__220__shared_ptr_emplaceI10maxiFilterNS_9allocatorIS1_EEE21__on_zero_shared_weakEv,__ZNSt3__220__shared_ptr_pointerIP10maxiFilterN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED2Ev,__ZNSt3__220__shared_ptr_pointerIP10maxiFilterN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED0Ev,__ZNSt3__220__shared_ptr_pointerIP10maxiFilterN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE16__on_zero_sharedEv,__ZNSt3__220__shared_ptr_pointerIP10maxiFilterN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE21__on_zero_shared_weakEv,__ZNSt3__220__shared_ptr_emplaceI13maxiDelaylineNS_9allocatorIS1_EEED0Ev,__ZNSt3__220__shared_ptr_emplaceI13maxiDelaylineNS_9allocatorIS1_EEE16__on_zero_sharedEv,__ZNSt3__220__shared_ptr_emplaceI13maxiDelaylineNS_9allocatorIS1_EEE21__on_zero_shared_weakEv,__ZNSt3__220__shared_ptr_pointerIP13maxiDelaylineN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED2Ev,__ZNSt3__220__shared_ptr_pointerIP13maxiDelaylineN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED0Ev,__ZNSt3__220__shared_ptr_pointerIP13maxiDelaylineN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE16__on_zero_sharedEv,__ZNSt3__220__shared_ptr_pointerIP13maxiDelaylineN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE21__on_zero_shared_weakEv,__ZNSt3__220__shared_ptr_emplaceI12maxiEnvelopeNS_9allocatorIS1_EEED0Ev
,__ZNSt3__220__shared_ptr_emplaceI12maxiEnvelopeNS_9allocatorIS1_EEE16__on_zero_sharedEv,__ZNSt3__220__shared_ptr_emplaceI12maxiEnvelopeNS_9allocatorIS1_EEE21__on_zero_shared_weakEv,__ZNSt3__220__shared_ptr_pointerIP12maxiEnvelopeN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED2Ev,__ZNSt3__220__shared_ptr_pointerIP12maxiEnvelopeN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED0Ev,__ZNSt3__220__shared_ptr_pointerIP12maxiEnvelopeN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE16__on_zero_sharedEv,__ZNSt3__220__shared_ptr_pointerIP12maxiEnvelopeN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE21__on_zero_shared_weakEv,__ZNSt3__220__shared_ptr_emplaceI7maxiOscNS_9allocatorIS1_EEED0Ev,__ZNSt3__220__shared_ptr_emplaceI7maxiOscNS_9allocatorIS1_EEE16__on_zero_sharedEv,__ZNSt3__220__shared_ptr_emplaceI7maxiOscNS_9allocatorIS1_EEE21__on_zero_shared_weakEv,__ZNSt3__220__shared_ptr_pointerIP7maxiOscN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED2Ev,__ZNSt3__220__shared_ptr_pointerIP7maxiOscN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEED0Ev,__ZNSt3__220__shared_ptr_pointerIP7maxiOscN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE16__on_zero_sharedEv,__ZNSt3__220__shared_ptr_pointerIP7maxiOscN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterENS_9allocatorIS1_EEE21__on_zero_shared_weakEv,__ZNSt3__28ios_baseD2Ev,__ZNSt3__28ios_baseD0Ev,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED0Ev,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED2Ev,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED0Ev,__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED1Ev,__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED0Ev,__ZTv0_n12_NSt3__213basic_istreamIwNS_11char_traitsIwEEED1Ev,__ZTv0_n12_NSt3__213basic_istreamIwNS_11char_traitsIwEEED0Ev,__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__213basic_ostreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__213basic_ostreamIcNS_11char_traitsIcEEED0Ev,__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED1Ev,__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED0Ev,__ZTv0_n12_NSt3__213basic_ostreamIwNS_11char_traitsIwEEED1Ev
,__ZTv0_n12_NSt3__213basic_ostreamIwNS_11char_traitsIwEEED0Ev,__ZNSt3__214error_categoryD2Ev,__ZNSt3__219__iostream_categoryD0Ev,__ZNSt3__28ios_base7failureD2Ev,__ZNSt3__28ios_base7failureD0Ev,__ZNSt3__211__stdoutbufIwED0Ev,__ZNSt3__211__stdoutbufIcED0Ev,__ZNSt3__210__stdinbufIwED0Ev,__ZNSt3__210__stdinbufIcED0Ev,__ZNSt3__27collateIcED2Ev,__ZNSt3__27collateIcED0Ev,__ZNSt3__26locale5facet16__on_zero_sharedEv,__ZNSt3__27collateIwED2Ev,__ZNSt3__27collateIwED0Ev,__ZNSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev
,__ZNSt3__210moneypunctIcLb0EED2Ev,__ZNSt3__210moneypunctIcLb0EED0Ev,__ZNSt3__210moneypunctIcLb1EED2Ev,__ZNSt3__210moneypunctIcLb1EED0Ev,__ZNSt3__210moneypunctIwLb0EED2Ev,__ZNSt3__210moneypunctIwLb0EED0Ev,__ZNSt3__210moneypunctIwLb1EED2Ev,__ZNSt3__210moneypunctIwLb1EED0Ev,__ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__28messagesIcED2Ev,__ZNSt3__28messagesIcED0Ev,__ZNSt3__28messagesIwED2Ev,__ZNSt3__28messagesIwED0Ev,__ZNSt3__26locale5facetD2Ev,__ZNSt3__216__narrow_to_utf8ILm32EED0Ev,__ZNSt3__217__widen_from_utf8ILm32EED0Ev,__ZNSt3__27codecvtIwc11__mbstate_tED2Ev,__ZNSt3__27codecvtIwc11__mbstate_tED0Ev,__ZNSt3__26locale5__impD2Ev,__ZNSt3__26locale5__impD0Ev,__ZNSt3__25ctypeIcED2Ev,__ZNSt3__25ctypeIcED0Ev,__ZNSt3__28numpunctIcED2Ev
,__ZNSt3__28numpunctIcED0Ev,__ZNSt3__28numpunctIwED2Ev,__ZNSt3__28numpunctIwED0Ev,__ZNSt3__26locale5facetD0Ev,__ZNSt3__25ctypeIwED0Ev,__ZNSt3__27codecvtIcc11__mbstate_tED0Ev,__ZNSt3__27codecvtIDsc11__mbstate_tED0Ev,__ZNSt3__27codecvtIDic11__mbstate_tED0Ev,__ZNSt3__212system_errorD2Ev,__ZNSt3__212system_errorD0Ev,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv117__class_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,__ZN10__cxxabiv120__si_class_type_infoD0Ev,__ZNSt9bad_allocD2Ev,__ZNSt9bad_allocD0Ev,__ZNSt11logic_errorD2Ev,__ZNSt11logic_errorD0Ev,__ZNSt13runtime_errorD2Ev,__ZNSt13runtime_errorD0Ev,__ZNSt12length_errorD0Ev,__ZNSt8bad_castD2Ev,__ZNSt8bad_castD0Ev,__ZN10__cxxabiv123__fundamental_type_infoD0Ev,__ZN10__cxxabiv119__pointer_type_infoD0Ev,__ZN10__cxxabiv121__vmi_class_type_infoD0Ev,__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEEC2Ev,__ZNSt3__28ios_base33__set_badbit_and_consider_rethrowEv,__ZN10emscripten8internal14raw_destructorI11vectorToolsEEvPT_
,__ZN11vectorTools14clearVectorDblERNSt3__26vectorIdNS0_9allocatorIdEEEE,__ZN11vectorTools16clearVectorFloatERNSt3__26vectorIfNS0_9allocatorIfEEEE,__ZN10emscripten8internal14raw_destructorI12maxiSettingsEEvPT_,__ZN10emscripten8internal14raw_destructorI7maxiOscEEvPT_,__ZN10emscripten8internal14raw_destructorINSt3__210shared_ptrI7maxiOscEEEEvPT_,__ZNSt3__211make_sharedI7maxiOscJEEENS_9enable_ifIXntsr8is_arrayIT_EE5valueENS_10shared_ptrIS3_EEE4typeEDpOT0_,__ZN10emscripten8internal14raw_destructorI12maxiEnvelopeEEvPT_,__ZN10emscripten8internal14raw_destructorINSt3__210shared_ptrI12maxiEnvelopeEEEEvPT_,__ZNSt3__211make_sharedI12maxiEnvelopeJEEENS_9enable_ifIXntsr8is_arrayIT_EE5valueENS_10shared_ptrIS3_EEE4typeEDpOT0_,__ZN10emscripten8internal14raw_destructorI13maxiDelaylineEEvPT_,__ZN10emscripten8internal14raw_destructorINSt3__210shared_ptrI13maxiDelaylineEEEEvPT_,__ZNSt3__211make_sharedI13maxiDelaylineJEEENS_9enable_ifIXntsr8is_arrayIT_EE5valueENS_10shared_ptrIS3_EEE4typeEDpOT0_,__ZN10emscripten8internal14raw_destructorI10maxiFilterEEvPT_,__ZN10emscripten8internal14raw_destructorINSt3__210shared_ptrI10maxiFilterEEEEvPT_,__ZNSt3__211make_sharedI10maxiFilterJEEENS_9enable_ifIXntsr8is_arrayIT_EE5valueENS_10shared_ptrIS3_EEE4typeEDpOT0_,__ZN10emscripten8internal14raw_destructorI7maxiMixEEvPT_,__ZN10emscripten8internal14raw_destructorINSt3__210shared_ptrI7maxiMixEEEEvPT_,__ZNSt3__211make_sharedI7maxiMixJEEENS_9enable_ifIXntsr8is_arrayIT_EE5valueENS_10shared_ptrIS3_EEE4typeEDpOT0_,__ZN10emscripten8internal14raw_destructorI10maxiLagExpIdEEEvPT_,__ZN10emscripten8internal14raw_destructorINSt3__210shared_ptrI10maxiLagExpIdEEEEEvPT_,__ZNSt3__211make_sharedI10maxiLagExpIdEJEEENS_9enable_ifIXntsr8is_arrayIT_EE5valueENS_10shared_ptrIS4_EEE4typeEDpOT0_,__ZN10emscripten8internal14raw_destructorI10maxiSampleEEvPT_,__ZN10emscripten8internal14raw_destructorINSt3__210shared_ptrI10maxiSampleEEEEvPT_,__ZNSt3__211make_sharedI10maxiSampleJEEENS_9enable_ifIXntsr8is_arrayIT_EE5valueENS_10shared_ptrIS3_EEE4typeEDpOT0_,__ZN10maxiSample7triggerEv,__ZN10maxiSample5clearEv,__ZN10emscripten8internal14raw_destructorI7maxiMapEEvPT_,__ZN10emscripten8internal14raw_destructorINSt3__210shared_ptrI7maxiMapEEEEvPT_,__ZNSt3__211make_sharedI7maxiMapJEEENS_9enable_ifIXntsr8is_arrayIT_EE5valueENS_10shared_ptrIS3_EEE4typeEDpOT0_,__ZN10emscripten8internal14raw_destructorI7maxiDynEEvPT_
,__ZN10emscripten8internal14raw_destructorINSt3__210shared_ptrI7maxiDynEEEEvPT_,__ZNSt3__211make_sharedI7maxiDynJEEENS_9enable_ifIXntsr8is_arrayIT_EE5valueENS_10shared_ptrIS3_EEE4typeEDpOT0_,__ZN10emscripten8internal14raw_destructorI7maxiEnvEEvPT_,__ZN10emscripten8internal14raw_destructorINSt3__210shared_ptrI7maxiEnvEEEEvPT_,__ZNSt3__211make_sharedI7maxiEnvJEEENS_9enable_ifIXntsr8is_arrayIT_EE5valueENS_10shared_ptrIS3_EEE4typeEDpOT0_,__ZN10emscripten8internal14raw_destructorI7convertEEvPT_,__ZN10emscripten8internal14raw_destructorINSt3__210shared_ptrI7convertEEEEvPT_,__ZNSt3__211make_sharedI7convertJEEENS_9enable_ifIXntsr8is_arrayIT_EE5valueENS_10shared_ptrIS3_EEE4typeEDpOT0_,__ZN10emscripten8internal14raw_destructorI14maxiDistortionEEvPT_,__ZN10emscripten8internal14raw_destructorINSt3__210shared_ptrI14maxiDistortionEEEEvPT_,__ZNSt3__211make_sharedI14maxiDistortionJEEENS_9enable_ifIXntsr8is_arrayIT_EE5valueENS_10shared_ptrIS3_EEE4typeEDpOT0_,__ZN10emscripten8internal14raw_destructorI11maxiFlangerEEvPT_,__ZN10emscripten8internal14raw_destructorINSt3__210shared_ptrI11maxiFlangerEEEEvPT_,__ZNSt3__211make_sharedI11maxiFlangerJEEENS_9enable_ifIXntsr8is_arrayIT_EE5valueENS_10shared_ptrIS3_EEE4typeEDpOT0_,__ZN10emscripten8internal14raw_destructorI10maxiChorusEEvPT_,__ZN10emscripten8internal14raw_destructorINSt3__210shared_ptrI10maxiChorusEEEEvPT_,__ZNSt3__211make_sharedI10maxiChorusJEEENS_9enable_ifIXntsr8is_arrayIT_EE5valueENS_10shared_ptrIS3_EEE4typeEDpOT0_,__ZN10emscripten8internal14raw_destructorI13maxiDCBlockerEEvPT_,__ZN10emscripten8internal14raw_destructorINSt3__210shared_ptrI13maxiDCBlockerEEEEvPT_,__ZNSt3__211make_sharedI13maxiDCBlockerJEEENS_9enable_ifIXntsr8is_arrayIT_EE5valueENS_10shared_ptrIS3_EEE4typeEDpOT0_,__ZN10emscripten8internal14raw_destructorI7maxiSVFEEvPT_,__ZN10emscripten8internal14raw_destructorINSt3__210shared_ptrI7maxiSVFEEEEvPT_,__ZNSt3__211make_sharedI7maxiSVFJEEENS_9enable_ifIXntsr8is_arrayIT_EE5valueENS_10shared_ptrIS3_EEE4typeEDpOT0_,__ZN10emscripten8internal14raw_destructorI9maxiClockEEvPT_,__ZN10emscripten8internal14raw_destructorINSt3__210shared_ptrI9maxiClockEEEEvPT_,__ZNSt3__211make_sharedI9maxiClockJEEENS_9enable_ifIXntsr8is_arrayIT_EE5valueENS_10shared_ptrIS3_EEE4typeEDpOT0_,__ZN9maxiClock6tickerEv,__ZN10emscripten8internal14raw_destructorINSt3__26vectorIiNS2_9allocatorIiEEEEEEvPT_,__ZN10emscripten8internal14raw_destructorINSt3__26vectorIdNS2_9allocatorIdEEEEEEvPT_,__ZN10emscripten8internal14raw_destructorINSt3__26vectorIcNS2_9allocatorIcEEEEEEvPT_
,__ZN10emscripten8internal14raw_destructorINSt3__26vectorIfNS2_9allocatorIfEEEEEEvPT_,__ZN9maxiClockC2Ev,__emval_decref__wrapper,__ZN10maxiChorusC2Ev,__ZN11maxiFlangerC2Ev,__ZN10maxiSampleC2Ev,__ZN10maxiLagExpIdEC2Ev,__ZNSt3__26locale2id6__initEv,__ZNSt3__217__call_once_proxyINS_5tupleIJONS_12_GLOBAL__N_111__fake_bindEEEEEEvPv,__ZNSt3__212__do_nothingEPv,__ZNSt3__221__throw_runtime_errorEPKc,_free,__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46
,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46
,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46
,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46
,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46
,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46
,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46,b46
,b46,b46,b46];
var FUNCTION_TABLE_vid = [b47,__ZN7maxiOsc10phaseResetEd,__ZN12maxiEnvelope12setAmplitudeEd,__ZN10maxiFilter9setCutoffEd,__ZN10maxiFilter12setResonanceEd,__ZN10maxiLagExpIdE9addSampleEd,__ZN10maxiLagExpIdE8setAlphaEd,__ZN10maxiLagExpIdE18setAlphaReciprocalEd,__ZN10maxiLagExpIdE6setValEd,__ZN10maxiSample9normaliseEd,__ZN7maxiDyn9setAttackEd,__ZN7maxiDyn10setReleaseEd,__ZN7maxiDyn12setThresholdEd,__ZN7maxiDyn8setRatioEd,__ZN7maxiEnv9setAttackEd,__ZN7maxiEnv10setReleaseEd,__ZN7maxiEnv8setDecayEd,__ZN7maxiEnv10setSustainEd,__ZN9maxiClock8setTempoEd,b47,b47,b47,b47,b47,b47,b47,b47,b47,b47
,b47,b47,b47];
var FUNCTION_TABLE_vidd = [b48,__ZN10maxiLagExpIdE4initEdd];
var FUNCTION_TABLE_viddii = [b49,__ZN10maxiSample8autoTrimEffbb];
var FUNCTION_TABLE_vidid = [b50,__ZN7maxiMix6stereoEdRNSt3__26vectorIdNS0_9allocatorIdEEEEd];
var FUNCTION_TABLE_vididd = [b51,__ZN7maxiMix4quadEdRNSt3__26vectorIdNS0_9allocatorIdEEEEdd];
var FUNCTION_TABLE_vididdd = [b52,__ZN7maxiMix9ambisonicEdRNSt3__26vectorIdNS0_9allocatorIdEEEEddd];
var FUNCTION_TABLE_vii = [b53,__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE,__ZNSt3__211__stdoutbufIwE5imbueERKNS_6localeE,__ZNSt3__211__stdoutbufIcE5imbueERKNS_6localeE,__ZNSt3__210__stdinbufIwE5imbueERKNS_6localeE,__ZNSt3__210__stdinbufIcE5imbueERKNS_6localeE,__ZNKSt3__210moneypunctIcLb0EE11do_groupingEv,__ZNKSt3__210moneypunctIcLb0EE14do_curr_symbolEv,__ZNKSt3__210moneypunctIcLb0EE16do_positive_signEv,__ZNKSt3__210moneypunctIcLb0EE16do_negative_signEv,__ZNKSt3__210moneypunctIcLb0EE13do_pos_formatEv,__ZNKSt3__210moneypunctIcLb0EE13do_neg_formatEv,__ZNKSt3__210moneypunctIcLb1EE11do_groupingEv,__ZNKSt3__210moneypunctIcLb1EE14do_curr_symbolEv,__ZNKSt3__210moneypunctIcLb1EE16do_positive_signEv,__ZNKSt3__210moneypunctIcLb1EE16do_negative_signEv,__ZNKSt3__210moneypunctIcLb1EE13do_pos_formatEv,__ZNKSt3__210moneypunctIcLb1EE13do_neg_formatEv,__ZNKSt3__210moneypunctIwLb0EE11do_groupingEv,__ZNKSt3__210moneypunctIwLb0EE14do_curr_symbolEv,__ZNKSt3__210moneypunctIwLb0EE16do_positive_signEv,__ZNKSt3__210moneypunctIwLb0EE16do_negative_signEv,__ZNKSt3__210moneypunctIwLb0EE13do_pos_formatEv,__ZNKSt3__210moneypunctIwLb0EE13do_neg_formatEv,__ZNKSt3__210moneypunctIwLb1EE11do_groupingEv,__ZNKSt3__210moneypunctIwLb1EE14do_curr_symbolEv,__ZNKSt3__210moneypunctIwLb1EE16do_positive_signEv
,__ZNKSt3__210moneypunctIwLb1EE16do_negative_signEv,__ZNKSt3__210moneypunctIwLb1EE13do_pos_formatEv,__ZNKSt3__210moneypunctIwLb1EE13do_neg_formatEv,__ZNKSt3__28messagesIcE8do_closeEl,__ZNKSt3__28messagesIwE8do_closeEl,__ZNKSt3__28numpunctIcE11do_groupingEv,__ZNKSt3__28numpunctIcE11do_truenameEv,__ZNKSt3__28numpunctIcE12do_falsenameEv,__ZNKSt3__28numpunctIwE11do_groupingEv,__ZNKSt3__28numpunctIwE11do_truenameEv,__ZNKSt3__28numpunctIwE12do_falsenameEv,__ZNSt3__28ios_base5clearEj,__ZNSt3__26vectorIsNS_9allocatorIsEEE6resizeEm,__ZNSt3__26vectorIdNS_9allocatorIdEEE6resizeEm,__ZNSt3__26vectorIdNS_9allocatorIdEEE8allocateEm,__ZNSt3__26vectorIdNS_9allocatorIdEEE18__construct_at_endEm,__ZNSt11logic_errorC2EPKc,__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_,__ZNSt3__214__split_bufferIsRNS_9allocatorIsEEE18__construct_at_endEm,__ZNSt3__26vectorIsNS_9allocatorIsEEE26__swap_out_circular_bufferERNS_14__split_bufferIsRS2_EE,__ZNSt3__214__split_bufferIdRNS_9allocatorIdEEE18__construct_at_endEm,__ZNSt3__26vectorIdNS_9allocatorIdEEE26__swap_out_circular_bufferERNS_14__split_bufferIdRS2_EE,__ZN10emscripten8internal7InvokerIvJRNSt3__26vectorIdNS2_9allocatorIdEEEEEE6invokeEPFvS7_EPS6_,__ZN10emscripten8internal7InvokerIvJRNSt3__26vectorIfNS2_9allocatorIfEEEEEE6invokeEPFvS7_EPS6_,__ZN12maxiSettings13setSampleRateEi,__ZN12maxiSettings14setNumChannelsEi,__ZN12maxiSettings13setBufferSizeEi,__ZN12maxiEnvelope11setValindexEi,__ZN10maxiSample9setSampleERNSt3__26vectorIdNS0_9allocatorIdEEEE,__ZN10emscripten8internal13MethodInvokerIM10maxiSampleFvvEvPS2_JEE6invokeERKS4_S5_
,__ZN7maxiEnv10setTriggerEi,__ZN10emscripten8internal13MethodInvokerIM9maxiClockFvvEvPS2_JEE6invokeERKS4_S5_,__ZN9maxiClock15setTicksPerBeatEi,__ZN9maxiClock15setCurrentCountEi,__ZN9maxiClock12setLastCountEi,__ZN9maxiClock11setPlayHeadEi,__ZN9maxiClock6setBpsEi,__ZN9maxiClock6setBpmEi,__ZN9maxiClock7setTickEi,__ZN9maxiClock8setTicksEi,__ZNSt3__26vectorIiNS_9allocatorIiEEE9push_backERKi,__ZNSt3__26vectorIdNS_9allocatorIdEEE9push_backERKd,__ZNSt3__26vectorIcNS_9allocatorIcEEE9push_backERKc,__ZNSt3__26vectorIfNS_9allocatorIfEEE9push_backERKf,__ZN10emscripten3val14take_ownershipEPNS_8internal7_EM_VALE,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiOscEEE11val_deleterC2ENS_3valE,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI12maxiEnvelopeEEE11val_deleterC2ENS_3valE,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI13maxiDelaylineEEE11val_deleterC2ENS_3valE,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiFilterEEE11val_deleterC2ENS_3valE,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiMixEEE11val_deleterC2ENS_3valE,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiLagExpIdEEEE11val_deleterC2ENS_3valE,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiSampleEEE11val_deleterC2ENS_3valE,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiMapEEE11val_deleterC2ENS_3valE,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiDynEEE11val_deleterC2ENS_3valE,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiEnvEEE11val_deleterC2ENS_3valE,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7convertEEE11val_deleterC2ENS_3valE,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI14maxiDistortionEEE11val_deleterC2ENS_3valE,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI11maxiFlangerEEE11val_deleterC2ENS_3valE,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiChorusEEE11val_deleterC2ENS_3valE,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI13maxiDCBlockerEEE11val_deleterC2ENS_3valE
,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiSVFEEE11val_deleterC2ENS_3valE,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI9maxiClockEEE11val_deleterC2ENS_3valE,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI9maxiClockEEE11val_deleterC2ERKS6_,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI9maxiClockEEE11val_deleterC2EOS6_,__ZNSt3__217__compressed_pairIP9maxiClockN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEEC2EOS9_,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI9maxiClockEEE11val_deleterclEPKv,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiSVFEEE11val_deleterC2ERKS6_,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiSVFEEE11val_deleterC2EOS6_,__ZNSt3__217__compressed_pairIP7maxiSVFN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEEC2EOS9_,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiSVFEEE11val_deleterclEPKv,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI13maxiDCBlockerEEE11val_deleterC2ERKS6_,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI13maxiDCBlockerEEE11val_deleterC2EOS6_,__ZNSt3__217__compressed_pairIP13maxiDCBlockerN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEEC2EOS9_,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI13maxiDCBlockerEEE11val_deleterclEPKv,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiChorusEEE11val_deleterC2ERKS6_,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiChorusEEE11val_deleterC2EOS6_,__ZNSt3__217__compressed_pairIP10maxiChorusN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEEC2EOS9_,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiChorusEEE11val_deleterclEPKv,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI11maxiFlangerEEE11val_deleterC2ERKS6_,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI11maxiFlangerEEE11val_deleterC2EOS6_,__ZNSt3__217__compressed_pairIP11maxiFlangerN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEEC2EOS9_,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI11maxiFlangerEEE11val_deleterclEPKv,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI14maxiDistortionEEE11val_deleterC2ERKS6_,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI14maxiDistortionEEE11val_deleterC2EOS6_,__ZNSt3__217__compressed_pairIP14maxiDistortionN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEEC2EOS9_,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI14maxiDistortionEEE11val_deleterclEPKv,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7convertEEE11val_deleterC2ERKS6_,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7convertEEE11val_deleterC2EOS6_,__ZNSt3__217__compressed_pairIP7convertN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEEC2EOS9_,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7convertEEE11val_deleterclEPKv
,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiEnvEEE11val_deleterC2ERKS6_,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiEnvEEE11val_deleterC2EOS6_,__ZNSt3__217__compressed_pairIP7maxiEnvN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEEC2EOS9_,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiEnvEEE11val_deleterclEPKv,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiDynEEE11val_deleterC2ERKS6_,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiDynEEE11val_deleterC2EOS6_,__ZNSt3__217__compressed_pairIP7maxiDynN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEEC2EOS9_,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiDynEEE11val_deleterclEPKv,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiMapEEE11val_deleterC2ERKS6_,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiMapEEE11val_deleterC2EOS6_,__ZNSt3__217__compressed_pairIP7maxiMapN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEEC2EOS9_,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiMapEEE11val_deleterclEPKv,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiSampleEEE11val_deleterC2ERKS6_,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiSampleEEE11val_deleterC2EOS6_,__ZNSt3__217__compressed_pairIP10maxiSampleN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEEC2EOS9_,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiSampleEEE11val_deleterclEPKv,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiLagExpIdEEEE11val_deleterC2ERKS7_,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiLagExpIdEEEE11val_deleterC2EOS7_,__ZNSt3__217__compressed_pairIP10maxiLagExpIdEN10emscripten15smart_ptr_traitINS_10shared_ptrIS2_EEE11val_deleterEEC2EOSA_,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiLagExpIdEEEE11val_deleterclEPKv,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiMixEEE11val_deleterC2ERKS6_,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiMixEEE11val_deleterC2EOS6_,__ZNSt3__217__compressed_pairIP7maxiMixN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEEC2EOS9_,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiMixEEE11val_deleterclEPKv,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiFilterEEE11val_deleterC2ERKS6_,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiFilterEEE11val_deleterC2EOS6_,__ZNSt3__217__compressed_pairIP10maxiFilterN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEEC2EOS9_,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI10maxiFilterEEE11val_deleterclEPKv,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI13maxiDelaylineEEE11val_deleterC2ERKS6_,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI13maxiDelaylineEEE11val_deleterC2EOS6_
,__ZNSt3__217__compressed_pairIP13maxiDelaylineN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEEC2EOS9_,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI13maxiDelaylineEEE11val_deleterclEPKv,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI12maxiEnvelopeEEE11val_deleterC2ERKS6_,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI12maxiEnvelopeEEE11val_deleterC2EOS6_,__ZNSt3__217__compressed_pairIP12maxiEnvelopeN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEEC2EOS9_,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI12maxiEnvelopeEEE11val_deleterclEPKv,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiOscEEE11val_deleterC2ERKS6_,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiOscEEE11val_deleterC2EOS6_,__ZNSt3__217__compressed_pairIP7maxiOscN10emscripten15smart_ptr_traitINS_10shared_ptrIS1_EEE11val_deleterEEC2EOS9_,__ZN10emscripten15smart_ptr_traitINSt3__210shared_ptrI7maxiOscEEE11val_deleterclEPKv,__ZNSt3__26vectorIfNS_9allocatorIfEEE26__swap_out_circular_bufferERNS_14__split_bufferIfRS2_EE,__ZNSt3__26vectorIcNS_9allocatorIcEEE26__swap_out_circular_bufferERNS_14__split_bufferIcRS2_EE,__ZNSt3__26vectorIiNS_9allocatorIiEEE26__swap_out_circular_bufferERNS_14__split_bufferIiRS2_EE,__ZNSt3__28ios_base16__call_callbacksENS0_5eventE,__ZNSt13runtime_errorC2EPKc,__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc,__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm,__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw,__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEm,__ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEEC2Em,__ZNSt3__26locale5__imp7installINS_7collateIcEEEEvPT_,__ZNSt3__26locale5__imp7installINS_7collateIwEEEEvPT_,__ZNSt3__26locale5__imp7installINS_5ctypeIcEEEEvPT_,__ZNSt3__26locale5__imp7installINS_5ctypeIwEEEEvPT_,__ZNSt3__26locale5__imp7installINS_7codecvtIcc11__mbstate_tEEEEvPT_,__ZNSt3__26locale5__imp7installINS_7codecvtIwc11__mbstate_tEEEEvPT_,__ZNSt3__26locale5__imp7installINS_7codecvtIDsc11__mbstate_tEEEEvPT_,__ZNSt3__26locale5__imp7installINS_7codecvtIDic11__mbstate_tEEEEvPT_,__ZNSt3__26locale5__imp7installINS_8numpunctIcEEEEvPT_,__ZNSt3__26locale5__imp7installINS_8numpunctIwEEEEvPT_
,__ZNSt3__26locale5__imp7installINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_,__ZNSt3__26locale5__imp7installINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_,__ZNSt3__26locale5__imp7installINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_,__ZNSt3__26locale5__imp7installINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_,__ZNSt3__26locale5__imp7installINS_10moneypunctIcLb0EEEEEvPT_,__ZNSt3__26locale5__imp7installINS_10moneypunctIcLb1EEEEEvPT_,__ZNSt3__26locale5__imp7installINS_10moneypunctIwLb0EEEEEvPT_,__ZNSt3__26locale5__imp7installINS_10moneypunctIwLb1EEEEEvPT_,__ZNSt3__26locale5__imp7installINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_,__ZNSt3__26locale5__imp7installINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_,__ZNSt3__26locale5__imp7installINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_,__ZNSt3__26locale5__imp7installINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_,__ZNSt3__26locale5__imp7installINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_,__ZNSt3__26locale5__imp7installINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_,__ZNSt3__26locale5__imp7installINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_,__ZNSt3__26locale5__imp7installINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_,__ZNSt3__26locale5__imp7installINS_8messagesIcEEEEvPT_,__ZNSt3__26locale5__imp7installINS_8messagesIwEEEEvPT_,__ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE8allocateEm,__ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE18__construct_at_endEm,__ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE6resizeEm,__ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lm28EEEE18__construct_at_endEm,__ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE,__ZNSt3__218__libcpp_refstringC2EPKc,__ZNSt13runtime_errorC2ERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE,_abort_message,b53,b53,b53,b53
,b53,b53,b53,b53,b53,b53,b53,b53,b53,b53,b53,b53,b53,b53,b53,b53,b53,b53,b53,b53,b53,b53,b53,b53,b53,b53,b53,b53,b53,b53
,b53,b53,b53,b53,b53,b53,b53,b53,b53,b53,b53,b53,b53,b53,b53,b53,b53];
var FUNCTION_TABLE_viid = [b54,__ZN10emscripten8internal13MethodInvokerIM7maxiOscFvdEvPS2_JdEE6invokeERKS4_S5_d,__ZN12maxiEnvelope7triggerEid,__ZN10emscripten8internal12SetterPolicyIM12maxiEnvelopeFvdEE3setIS2_EEvRKS4_RT_d,__ZN10emscripten8internal12SetterPolicyIM10maxiFilterFvdEE3setIS2_EEvRKS4_RT_d,__ZN10emscripten8internal13MethodInvokerIM10maxiLagExpIdEFvdEvPS3_JdEE6invokeERKS5_S6_d,__ZN10emscripten8internal12SetterPolicyIM10maxiLagExpIdEFvdEE3setIS3_EEvRKS5_RT_d,__ZN10emscripten8internal13MethodInvokerIM10maxiSampleFvdEvPS2_JdEE6invokeERKS4_S5_d,__ZN10emscripten8internal13MethodInvokerIM7maxiDynFvdEvPS2_JdEE6invokeERKS4_S5_d,__ZN10emscripten8internal13MethodInvokerIM7maxiEnvFvdEvPS2_JdEE6invokeERKS4_S5_d,__ZN10emscripten8internal13MethodInvokerIM9maxiClockFvdEvPS2_JdEE6invokeERKS4_S5_d,__ZN10emscripten8internal13MethodInvokerIMNSt3__26vectorIdNS2_9allocatorIdEEEEFvRKdEvPS6_JS8_EE6invokeERKSA_SB_d,__ZN10emscripten8internal13MethodInvokerIMNSt3__26vectorIfNS2_9allocatorIfEEEEFvRKfEvPS6_JS8_EE6invokeERKSA_SB_f,b54,b54,b54];
var FUNCTION_TABLE_viidd = [b55,__ZN10emscripten8internal13MethodInvokerIM10maxiLagExpIdEFvddEvPS3_JddEE6invokeERKS5_S6_dd];
var FUNCTION_TABLE_viiddii = [b56,__ZN10emscripten8internal13MethodInvokerIM10maxiSampleFvffbbEvPS2_JffbbEE6invokeERKS4_S5_ffbb];
var FUNCTION_TABLE_viidid = [b57,__ZN10emscripten8internal13MethodInvokerIM7maxiMixFvdRNSt3__26vectorIdNS3_9allocatorIdEEEEdEvPS2_JdS8_dEE6invokeERKSA_SB_dPS7_d];
var FUNCTION_TABLE_viididd = [b58,__ZN10emscripten8internal13MethodInvokerIM7maxiMixFvdRNSt3__26vectorIdNS3_9allocatorIdEEEEddEvPS2_JdS8_ddEE6invokeERKSA_SB_dPS7_dd];
var FUNCTION_TABLE_viididdd = [b59,__ZN10emscripten8internal13MethodInvokerIM7maxiMixFvdRNSt3__26vectorIdNS3_9allocatorIdEEEEdddEvPS2_JdS8_dddEE6invokeERKSA_SB_dPS7_ddd];
var FUNCTION_TABLE_viii = [b60,__ZNKSt3__214error_category23default_error_conditionEi,__ZNKSt3__219__iostream_category7messageEi,__ZNSt3__26vectorIdNS_9allocatorIdEEE6assignIPdEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIdNS_15iterator_traitsIS7_E9referenceEEE5valueEvE4typeES7_S7_,__ZN12maxiSettings5setupEiii,__ZN10emscripten8internal12SetterPolicyIM12maxiSettingsFviEE3setIS2_EEvRKS4_RT_i,__ZN10emscripten8internal12SetterPolicyIM12maxiEnvelopeFviEE3setIS2_EEvRKS4_RT_i,__ZN10emscripten8internal13MethodInvokerIM10maxiSampleFvRNSt3__26vectorIdNS3_9allocatorIdEEEEEvPS2_JS8_EE6invokeERKSA_SB_PS7_,__ZN10maxiSample9setSampleERNSt3__26vectorIdNS0_9allocatorIdEEEEi,__ZN10emscripten8internal12SetterPolicyIM7maxiEnvFviEE3setIS2_EEvRKS4_RT_i,__ZN10emscripten8internal13MethodInvokerIM9maxiClockFviEvPS2_JiEE6invokeERKS4_S5_i,__ZN10emscripten8internal12SetterPolicyIM9maxiClockFviEE3setIS2_EEvRKS4_RT_i,__ZN10emscripten8internal13MethodInvokerIMNSt3__26vectorIiNS2_9allocatorIiEEEEFvRKiEvPS6_JS8_EE6invokeERKSA_SB_i,__ZNSt3__26vectorIiNS_9allocatorIiEEE6resizeEmRKi,__ZN10emscripten8internal12VectorAccessINSt3__26vectorIiNS2_9allocatorIiEEEEE3getERKS6_m,__ZNSt3__26vectorIdNS_9allocatorIdEEE6resizeEmRKd,__ZN10emscripten8internal12VectorAccessINSt3__26vectorIdNS2_9allocatorIdEEEEE3getERKS6_m,__ZN10emscripten8internal13MethodInvokerIMNSt3__26vectorIcNS2_9allocatorIcEEEEFvRKcEvPS6_JS8_EE6invokeERKSA_SB_c,__ZNSt3__26vectorIcNS_9allocatorIcEEE6resizeEmRKc,__ZN10emscripten8internal12VectorAccessINSt3__26vectorIcNS2_9allocatorIcEEEEE3getERKS6_m,__ZNSt3__26vectorIfNS_9allocatorIfEEE6resizeEmRKf,__ZN10emscripten8internal12VectorAccessINSt3__26vectorIfNS2_9allocatorIfEEEEE3getERKS6_m,__ZNSt3__214__split_bufferIfRNS_9allocatorIfEEE18__construct_at_endEmRKf,__ZNSt3__214__split_bufferIcRNS_9allocatorIcEEE18__construct_at_endEmRKc,__ZNSt3__214__split_bufferIdRNS_9allocatorIdEEE18__construct_at_endEmRKd,__ZNSt3__214__split_bufferIiRNS_9allocatorIiEEE18__construct_at_endEmRKi,__ZNSt3__28ios_base7failureC2EPKcRKNS_10error_codeE,___cxa_throw__wrapper,__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE6sentryC2ERS3_b
,__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc,__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm,__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwm,__ZNSt3__219__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_,__ZNSt3__219__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_,__ZNSt3__219__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_,__ZNSt3__212system_error6__initERKNS_10error_codeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,b60,b60,b60,b60,b60,b60,b60,b60,b60,b60,b60,b60,b60,b60,b60,b60,b60,b60,b60,b60,b60,b60,b60
,b60,b60,b60,b60,b60];
var FUNCTION_TABLE_viiid = [b61,__ZN10emscripten8internal13MethodInvokerIM12maxiEnvelopeFvidEvPS2_JidEE6invokeERKS4_S5_id,__ZN10emscripten8internal13MethodInvokerIMNSt3__26vectorIdNS2_9allocatorIdEEEEFvmRKdEvPS6_JmS8_EE6invokeERKSA_SB_md,__ZN10emscripten8internal13MethodInvokerIMNSt3__26vectorIfNS2_9allocatorIfEEEEFvmRKfEvPS6_JmS8_EE6invokeERKSA_SB_mf];
var FUNCTION_TABLE_viiii = [b62,__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI11__mbstate_tEEj,__ZNKSt3__27collateIcE12do_transformEPKcS3_,__ZNKSt3__27collateIwE12do_transformEPKwS3_,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZN10emscripten8internal7InvokerIvJiiiEE6invokeEPFviiiEiii,__ZN10emscripten8internal13MethodInvokerIM10maxiSampleFvRNSt3__26vectorIdNS3_9allocatorIdEEEEiEvPS2_JS8_iEE6invokeERKSA_SB_PS7_i,__ZN10emscripten8internal13MethodInvokerIMNSt3__26vectorIiNS2_9allocatorIiEEEEFvmRKiEvPS6_JmS8_EE6invokeERKSA_SB_mi,__ZN10emscripten8internal13MethodInvokerIMNSt3__26vectorIcNS2_9allocatorIcEEEEFvmRKcEvPS6_JmS8_EE6invokeERKSA_SB_mc,__ZNSt3__210shared_ptrI7maxiOscEC2IS1_N10emscripten15smart_ptr_traitIS2_E11val_deleterEEEPT_T0_NS_9enable_ifIXsr14is_convertibleIS9_PS1_EE5valueENS2_5__natEE4typeE,__ZNSt3__210shared_ptrI12maxiEnvelopeEC2IS1_N10emscripten15smart_ptr_traitIS2_E11val_deleterEEEPT_T0_NS_9enable_ifIXsr14is_convertibleIS9_PS1_EE5valueENS2_5__natEE4typeE,__ZNSt3__210shared_ptrI13maxiDelaylineEC2IS1_N10emscripten15smart_ptr_traitIS2_E11val_deleterEEEPT_T0_NS_9enable_ifIXsr14is_convertibleIS9_PS1_EE5valueENS2_5__natEE4typeE,__ZNSt3__210shared_ptrI10maxiFilterEC2IS1_N10emscripten15smart_ptr_traitIS2_E11val_deleterEEEPT_T0_NS_9enable_ifIXsr14is_convertibleIS9_PS1_EE5valueENS2_5__natEE4typeE,__ZNSt3__210shared_ptrI7maxiMixEC2IS1_N10emscripten15smart_ptr_traitIS2_E11val_deleterEEEPT_T0_NS_9enable_ifIXsr14is_convertibleIS9_PS1_EE5valueENS2_5__natEE4typeE,__ZNSt3__210shared_ptrI10maxiLagExpIdEEC2IS2_N10emscripten15smart_ptr_traitIS3_E11val_deleterEEEPT_T0_NS_9enable_ifIXsr14is_convertibleISA_PS2_EE5valueENS3_5__natEE4typeE,__ZNSt3__210shared_ptrI10maxiSampleEC2IS1_N10emscripten15smart_ptr_traitIS2_E11val_deleterEEEPT_T0_NS_9enable_ifIXsr14is_convertibleIS9_PS1_EE5valueENS2_5__natEE4typeE,__ZNSt3__210shared_ptrI7maxiMapEC2IS1_N10emscripten15smart_ptr_traitIS2_E11val_deleterEEEPT_T0_NS_9enable_ifIXsr14is_convertibleIS9_PS1_EE5valueENS2_5__natEE4typeE,__ZNSt3__210shared_ptrI7maxiDynEC2IS1_N10emscripten15smart_ptr_traitIS2_E11val_deleterEEEPT_T0_NS_9enable_ifIXsr14is_convertibleIS9_PS1_EE5valueENS2_5__natEE4typeE,__ZNSt3__210shared_ptrI7maxiEnvEC2IS1_N10emscripten15smart_ptr_traitIS2_E11val_deleterEEEPT_T0_NS_9enable_ifIXsr14is_convertibleIS9_PS1_EE5valueENS2_5__natEE4typeE,__ZNSt3__210shared_ptrI7convertEC2IS1_N10emscripten15smart_ptr_traitIS2_E11val_deleterEEEPT_T0_NS_9enable_ifIXsr14is_convertibleIS9_PS1_EE5valueENS2_5__natEE4typeE,__ZNSt3__210shared_ptrI14maxiDistortionEC2IS1_N10emscripten15smart_ptr_traitIS2_E11val_deleterEEEPT_T0_NS_9enable_ifIXsr14is_convertibleIS9_PS1_EE5valueENS2_5__natEE4typeE,__ZNSt3__210shared_ptrI11maxiFlangerEC2IS1_N10emscripten15smart_ptr_traitIS2_E11val_deleterEEEPT_T0_NS_9enable_ifIXsr14is_convertibleIS9_PS1_EE5valueENS2_5__natEE4typeE,__ZNSt3__210shared_ptrI10maxiChorusEC2IS1_N10emscripten15smart_ptr_traitIS2_E11val_deleterEEEPT_T0_NS_9enable_ifIXsr14is_convertibleIS9_PS1_EE5valueENS2_5__natEE4typeE,__ZNSt3__210shared_ptrI13maxiDCBlockerEC2IS1_N10emscripten15smart_ptr_traitIS2_E11val_deleterEEEPT_T0_NS_9enable_ifIXsr14is_convertibleIS9_PS1_EE5valueENS2_5__natEE4typeE,__ZNSt3__210shared_ptrI7maxiSVFEC2IS1_N10emscripten15smart_ptr_traitIS2_E11val_deleterEEEPT_T0_NS_9enable_ifIXsr14is_convertibleIS9_PS1_EE5valueENS2_5__natEE4typeE
,__ZNSt3__210shared_ptrI9maxiClockEC2IS1_N10emscripten15smart_ptr_traitIS2_E11val_deleterEEEPT_T0_NS_9enable_ifIXsr14is_convertibleIS9_PS1_EE5valueENS2_5__natEE4typeE,__ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj,b62];
var FUNCTION_TABLE_viiiii = [b63,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib];
var FUNCTION_TABLE_viiiiii = [b64,__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj,__ZNKSt3__28messagesIcE6do_getEliiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,__ZNKSt3__28messagesIwE6do_getEliiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b64,b64,b64,b64,b64,b64,b64];
var FUNCTION_TABLE_viiiiiii = [b65,__ZNSt3__29__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE,__ZNSt3__29__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE,__ZNSt3__29__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE,__ZNSt3__29__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE,b65,b65,b65];
var FUNCTION_TABLE_viiiiiiiiii = [b66,__ZNSt3__211__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri,__ZNSt3__211__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri,__ZNSt3__211__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri,__ZNSt3__211__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri,b66,b66,b66];
var FUNCTION_TABLE_viiiiiiiiiiiiiii = [b67,__ZNSt3__211__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i,__ZNSt3__211__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i,b67];

  return { __ZSt18uncaught_exceptionv: __ZSt18uncaught_exceptionv, ___cxa_can_catch: ___cxa_can_catch, ___cxa_is_pointer_type: ___cxa_is_pointer_type, ___errno_location: ___errno_location, ___getTypeName: ___getTypeName, ___muldi3: ___muldi3, ___udivdi3: ___udivdi3, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, _fflush: _fflush, _free: _free, _i64Add: _i64Add, _i64Subtract: _i64Subtract, _llvm_bswap_i32: _llvm_bswap_i32, _llvm_round_f64: _llvm_round_f64, _malloc: _malloc, _memcpy: _memcpy, _memmove: _memmove, _memset: _memset, _pthread_cond_broadcast: _pthread_cond_broadcast, _pthread_mutex_lock: _pthread_mutex_lock, _pthread_mutex_unlock: _pthread_mutex_unlock, _sbrk: _sbrk, _setThrew: _setThrew, dynCall_dddd: dynCall_dddd, dynCall_dddddd: dynCall_dddddd, dynCall_di: dynCall_di, dynCall_did: dynCall_did, dynCall_didd: dynCall_didd, dynCall_diddd: dynCall_diddd, dynCall_diddddd: dynCall_diddddd, dynCall_didddddii: dynCall_didddddii, dynCall_didddii: dynCall_didddii, dynCall_diddidd: dynCall_diddidd, dynCall_didi: dynCall_didi, dynCall_didid: dynCall_didid, dynCall_dididdd: dynCall_dididdd, dynCall_dididi: dynCall_dididi, dynCall_dii: dynCall_dii, dynCall_diid: dynCall_diid, dynCall_diidd: dynCall_diidd, dynCall_diiddd: dynCall_diiddd, dynCall_diiddddd: dynCall_diiddddd, dynCall_diidddddii: dynCall_diidddddii, dynCall_diidddii: dynCall_diidddii, dynCall_diiddidd: dynCall_diiddidd, dynCall_diidi: dynCall_diidi, dynCall_diidid: dynCall_diidid, dynCall_diididdd: dynCall_diididdd, dynCall_diididi: dynCall_diididi, dynCall_diii: dynCall_diii, dynCall_diiii: dynCall_diiii, dynCall_i: dynCall_i, dynCall_ii: dynCall_ii, dynCall_iid: dynCall_iid, dynCall_iii: dynCall_iii, dynCall_iiid: dynCall_iiid, dynCall_iiii: dynCall_iiii, dynCall_iiiid: dynCall_iiiid, dynCall_iiiii: dynCall_iiiii, dynCall_iiiiid: dynCall_iiiiid, dynCall_iiiiii: dynCall_iiiiii, dynCall_iiiiiid: dynCall_iiiiiid, dynCall_iiiiiii: dynCall_iiiiiii, dynCall_iiiiiiii: dynCall_iiiiiiii, dynCall_iiiiiiiii: dynCall_iiiiiiiii, dynCall_iiiiiiiiiii: dynCall_iiiiiiiiiii, dynCall_iiiiiiiiiiii: dynCall_iiiiiiiiiiii, dynCall_iiiiiiiiiiiii: dynCall_iiiiiiiiiiiii, dynCall_v: dynCall_v, dynCall_vi: dynCall_vi, dynCall_vid: dynCall_vid, dynCall_vidd: dynCall_vidd, dynCall_viddii: dynCall_viddii, dynCall_vidid: dynCall_vidid, dynCall_vididd: dynCall_vididd, dynCall_vididdd: dynCall_vididdd, dynCall_vii: dynCall_vii, dynCall_viid: dynCall_viid, dynCall_viidd: dynCall_viidd, dynCall_viiddii: dynCall_viiddii, dynCall_viidid: dynCall_viidid, dynCall_viididd: dynCall_viididd, dynCall_viididdd: dynCall_viididdd, dynCall_viii: dynCall_viii, dynCall_viiid: dynCall_viiid, dynCall_viiii: dynCall_viiii, dynCall_viiiii: dynCall_viiiii, dynCall_viiiiii: dynCall_viiiiii, dynCall_viiiiiii: dynCall_viiiiiii, dynCall_viiiiiiiiii: dynCall_viiiiiiiiii, dynCall_viiiiiiiiiiiiiii: dynCall_viiiiiiiiiiiiiii, establishStackSpace: establishStackSpace, globalCtors: globalCtors, stackAlloc: stackAlloc, stackRestore: stackRestore, stackSave: stackSave };
})
// EMSCRIPTEN_END_ASM
(asmGlobalArg, asmLibraryArg, buffer);

var real___ZSt18uncaught_exceptionv = asm["__ZSt18uncaught_exceptionv"]; asm["__ZSt18uncaught_exceptionv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZSt18uncaught_exceptionv.apply(null, arguments);
};

var real____cxa_can_catch = asm["___cxa_can_catch"]; asm["___cxa_can_catch"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxa_can_catch.apply(null, arguments);
};

var real____cxa_is_pointer_type = asm["___cxa_is_pointer_type"]; asm["___cxa_is_pointer_type"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxa_is_pointer_type.apply(null, arguments);
};

var real____errno_location = asm["___errno_location"]; asm["___errno_location"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____errno_location.apply(null, arguments);
};

var real____getTypeName = asm["___getTypeName"]; asm["___getTypeName"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____getTypeName.apply(null, arguments);
};

var real____muldi3 = asm["___muldi3"]; asm["___muldi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____muldi3.apply(null, arguments);
};

var real____udivdi3 = asm["___udivdi3"]; asm["___udivdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____udivdi3.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Lshr.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Shl.apply(null, arguments);
};

var real__fflush = asm["_fflush"]; asm["_fflush"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fflush.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__free.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Add.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Subtract.apply(null, arguments);
};

var real__llvm_bswap_i32 = asm["_llvm_bswap_i32"]; asm["_llvm_bswap_i32"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__llvm_bswap_i32.apply(null, arguments);
};

var real__llvm_round_f64 = asm["_llvm_round_f64"]; asm["_llvm_round_f64"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__llvm_round_f64.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__malloc.apply(null, arguments);
};

var real__memmove = asm["_memmove"]; asm["_memmove"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__memmove.apply(null, arguments);
};

var real__pthread_cond_broadcast = asm["_pthread_cond_broadcast"]; asm["_pthread_cond_broadcast"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__pthread_cond_broadcast.apply(null, arguments);
};

var real__pthread_mutex_lock = asm["_pthread_mutex_lock"]; asm["_pthread_mutex_lock"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__pthread_mutex_lock.apply(null, arguments);
};

var real__pthread_mutex_unlock = asm["_pthread_mutex_unlock"]; asm["_pthread_mutex_unlock"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__pthread_mutex_unlock.apply(null, arguments);
};

var real__sbrk = asm["_sbrk"]; asm["_sbrk"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__sbrk.apply(null, arguments);
};

var real__setThrew = asm["_setThrew"]; asm["_setThrew"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__setThrew.apply(null, arguments);
};

var real_establishStackSpace = asm["establishStackSpace"]; asm["establishStackSpace"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_establishStackSpace.apply(null, arguments);
};

var real_globalCtors = asm["globalCtors"]; asm["globalCtors"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_globalCtors.apply(null, arguments);
};

var real_stackAlloc = asm["stackAlloc"]; asm["stackAlloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackAlloc.apply(null, arguments);
};

var real_stackRestore = asm["stackRestore"]; asm["stackRestore"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackRestore.apply(null, arguments);
};

var real_stackSave = asm["stackSave"]; asm["stackSave"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackSave.apply(null, arguments);
};
var __ZSt18uncaught_exceptionv = Module["__ZSt18uncaught_exceptionv"] = asm["__ZSt18uncaught_exceptionv"];
var ___cxa_can_catch = Module["___cxa_can_catch"] = asm["___cxa_can_catch"];
var ___cxa_is_pointer_type = Module["___cxa_is_pointer_type"] = asm["___cxa_is_pointer_type"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var ___getTypeName = Module["___getTypeName"] = asm["___getTypeName"];
var ___muldi3 = Module["___muldi3"] = asm["___muldi3"];
var ___udivdi3 = Module["___udivdi3"] = asm["___udivdi3"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var _free = Module["_free"] = asm["_free"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _llvm_bswap_i32 = Module["_llvm_bswap_i32"] = asm["_llvm_bswap_i32"];
var _llvm_round_f64 = Module["_llvm_round_f64"] = asm["_llvm_round_f64"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _memset = Module["_memset"] = asm["_memset"];
var _pthread_cond_broadcast = Module["_pthread_cond_broadcast"] = asm["_pthread_cond_broadcast"];
var _pthread_mutex_lock = Module["_pthread_mutex_lock"] = asm["_pthread_mutex_lock"];
var _pthread_mutex_unlock = Module["_pthread_mutex_unlock"] = asm["_pthread_mutex_unlock"];
var _sbrk = Module["_sbrk"] = asm["_sbrk"];
var _setThrew = Module["_setThrew"] = asm["_setThrew"];
var establishStackSpace = Module["establishStackSpace"] = asm["establishStackSpace"];
var globalCtors = Module["globalCtors"] = asm["globalCtors"];
var stackAlloc = Module["stackAlloc"] = asm["stackAlloc"];
var stackRestore = Module["stackRestore"] = asm["stackRestore"];
var stackSave = Module["stackSave"] = asm["stackSave"];
var dynCall_dddd = Module["dynCall_dddd"] = asm["dynCall_dddd"];
var dynCall_dddddd = Module["dynCall_dddddd"] = asm["dynCall_dddddd"];
var dynCall_di = Module["dynCall_di"] = asm["dynCall_di"];
var dynCall_did = Module["dynCall_did"] = asm["dynCall_did"];
var dynCall_didd = Module["dynCall_didd"] = asm["dynCall_didd"];
var dynCall_diddd = Module["dynCall_diddd"] = asm["dynCall_diddd"];
var dynCall_diddddd = Module["dynCall_diddddd"] = asm["dynCall_diddddd"];
var dynCall_didddddii = Module["dynCall_didddddii"] = asm["dynCall_didddddii"];
var dynCall_didddii = Module["dynCall_didddii"] = asm["dynCall_didddii"];
var dynCall_diddidd = Module["dynCall_diddidd"] = asm["dynCall_diddidd"];
var dynCall_didi = Module["dynCall_didi"] = asm["dynCall_didi"];
var dynCall_didid = Module["dynCall_didid"] = asm["dynCall_didid"];
var dynCall_dididdd = Module["dynCall_dididdd"] = asm["dynCall_dididdd"];
var dynCall_dididi = Module["dynCall_dididi"] = asm["dynCall_dididi"];
var dynCall_dii = Module["dynCall_dii"] = asm["dynCall_dii"];
var dynCall_diid = Module["dynCall_diid"] = asm["dynCall_diid"];
var dynCall_diidd = Module["dynCall_diidd"] = asm["dynCall_diidd"];
var dynCall_diiddd = Module["dynCall_diiddd"] = asm["dynCall_diiddd"];
var dynCall_diiddddd = Module["dynCall_diiddddd"] = asm["dynCall_diiddddd"];
var dynCall_diidddddii = Module["dynCall_diidddddii"] = asm["dynCall_diidddddii"];
var dynCall_diidddii = Module["dynCall_diidddii"] = asm["dynCall_diidddii"];
var dynCall_diiddidd = Module["dynCall_diiddidd"] = asm["dynCall_diiddidd"];
var dynCall_diidi = Module["dynCall_diidi"] = asm["dynCall_diidi"];
var dynCall_diidid = Module["dynCall_diidid"] = asm["dynCall_diidid"];
var dynCall_diididdd = Module["dynCall_diididdd"] = asm["dynCall_diididdd"];
var dynCall_diididi = Module["dynCall_diididi"] = asm["dynCall_diididi"];
var dynCall_diii = Module["dynCall_diii"] = asm["dynCall_diii"];
var dynCall_diiii = Module["dynCall_diiii"] = asm["dynCall_diiii"];
var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_iid = Module["dynCall_iid"] = asm["dynCall_iid"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiid = Module["dynCall_iiid"] = asm["dynCall_iiid"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_iiiid = Module["dynCall_iiiid"] = asm["dynCall_iiiid"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_iiiiid = Module["dynCall_iiiiid"] = asm["dynCall_iiiiid"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
var dynCall_iiiiiid = Module["dynCall_iiiiiid"] = asm["dynCall_iiiiiid"];
var dynCall_iiiiiii = Module["dynCall_iiiiiii"] = asm["dynCall_iiiiiii"];
var dynCall_iiiiiiii = Module["dynCall_iiiiiiii"] = asm["dynCall_iiiiiiii"];
var dynCall_iiiiiiiii = Module["dynCall_iiiiiiiii"] = asm["dynCall_iiiiiiiii"];
var dynCall_iiiiiiiiiii = Module["dynCall_iiiiiiiiiii"] = asm["dynCall_iiiiiiiiiii"];
var dynCall_iiiiiiiiiiii = Module["dynCall_iiiiiiiiiiii"] = asm["dynCall_iiiiiiiiiiii"];
var dynCall_iiiiiiiiiiiii = Module["dynCall_iiiiiiiiiiiii"] = asm["dynCall_iiiiiiiiiiiii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vid = Module["dynCall_vid"] = asm["dynCall_vid"];
var dynCall_vidd = Module["dynCall_vidd"] = asm["dynCall_vidd"];
var dynCall_viddii = Module["dynCall_viddii"] = asm["dynCall_viddii"];
var dynCall_vidid = Module["dynCall_vidid"] = asm["dynCall_vidid"];
var dynCall_vididd = Module["dynCall_vididd"] = asm["dynCall_vididd"];
var dynCall_vididdd = Module["dynCall_vididdd"] = asm["dynCall_vididdd"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_viid = Module["dynCall_viid"] = asm["dynCall_viid"];
var dynCall_viidd = Module["dynCall_viidd"] = asm["dynCall_viidd"];
var dynCall_viiddii = Module["dynCall_viiddii"] = asm["dynCall_viiddii"];
var dynCall_viidid = Module["dynCall_viidid"] = asm["dynCall_viidid"];
var dynCall_viididd = Module["dynCall_viididd"] = asm["dynCall_viididd"];
var dynCall_viididdd = Module["dynCall_viididdd"] = asm["dynCall_viididdd"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_viiid = Module["dynCall_viiid"] = asm["dynCall_viiid"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
var dynCall_viiiiiii = Module["dynCall_viiiiiii"] = asm["dynCall_viiiiiii"];
var dynCall_viiiiiiiiii = Module["dynCall_viiiiiiiiii"] = asm["dynCall_viiiiiiiiii"];
var dynCall_viiiiiiiiiiiiiii = Module["dynCall_viiiiiiiiiiiiiii"] = asm["dynCall_viiiiiiiiiiiiiii"];
;



// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;

if (!Module["intArrayFromString"]) Module["intArrayFromString"] = function() { abort("'intArrayFromString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["intArrayToString"]) Module["intArrayToString"] = function() { abort("'intArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["ccall"]) Module["ccall"] = function() { abort("'ccall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["cwrap"]) Module["cwrap"] = function() { abort("'cwrap' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["setValue"]) Module["setValue"] = function() { abort("'setValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getValue"]) Module["getValue"] = function() { abort("'getValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["allocate"]) Module["allocate"] = function() { abort("'allocate' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getMemory"]) Module["getMemory"] = function() { abort("'getMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["AsciiToString"]) Module["AsciiToString"] = function() { abort("'AsciiToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToAscii"]) Module["stringToAscii"] = function() { abort("'stringToAscii' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF8ArrayToString"]) Module["UTF8ArrayToString"] = function() { abort("'UTF8ArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF8ToString"]) Module["UTF8ToString"] = function() { abort("'UTF8ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF8Array"]) Module["stringToUTF8Array"] = function() { abort("'stringToUTF8Array' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF8"]) Module["stringToUTF8"] = function() { abort("'stringToUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF8"]) Module["lengthBytesUTF8"] = function() { abort("'lengthBytesUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF16ToString"]) Module["UTF16ToString"] = function() { abort("'UTF16ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF16"]) Module["stringToUTF16"] = function() { abort("'stringToUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF16"]) Module["lengthBytesUTF16"] = function() { abort("'lengthBytesUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF32ToString"]) Module["UTF32ToString"] = function() { abort("'UTF32ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF32"]) Module["stringToUTF32"] = function() { abort("'stringToUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF32"]) Module["lengthBytesUTF32"] = function() { abort("'lengthBytesUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["allocateUTF8"]) Module["allocateUTF8"] = function() { abort("'allocateUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackTrace"]) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPreRun"]) Module["addOnPreRun"] = function() { abort("'addOnPreRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnInit"]) Module["addOnInit"] = function() { abort("'addOnInit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPreMain"]) Module["addOnPreMain"] = function() { abort("'addOnPreMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnExit"]) Module["addOnExit"] = function() { abort("'addOnExit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPostRun"]) Module["addOnPostRun"] = function() { abort("'addOnPostRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeStringToMemory"]) Module["writeStringToMemory"] = function() { abort("'writeStringToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeArrayToMemory"]) Module["writeArrayToMemory"] = function() { abort("'writeArrayToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeAsciiToMemory"]) Module["writeAsciiToMemory"] = function() { abort("'writeAsciiToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addRunDependency"]) Module["addRunDependency"] = function() { abort("'addRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["removeRunDependency"]) Module["removeRunDependency"] = function() { abort("'removeRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["ENV"]) Module["ENV"] = function() { abort("'ENV' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["FS"]) Module["FS"] = function() { abort("'FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["FS_createFolder"]) Module["FS_createFolder"] = function() { abort("'FS_createFolder' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createPath"]) Module["FS_createPath"] = function() { abort("'FS_createPath' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createDataFile"]) Module["FS_createDataFile"] = function() { abort("'FS_createDataFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createPreloadedFile"]) Module["FS_createPreloadedFile"] = function() { abort("'FS_createPreloadedFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createLazyFile"]) Module["FS_createLazyFile"] = function() { abort("'FS_createLazyFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createLink"]) Module["FS_createLink"] = function() { abort("'FS_createLink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createDevice"]) Module["FS_createDevice"] = function() { abort("'FS_createDevice' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_unlink"]) Module["FS_unlink"] = function() { abort("'FS_unlink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["GL"]) Module["GL"] = function() { abort("'GL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["dynamicAlloc"]) Module["dynamicAlloc"] = function() { abort("'dynamicAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["warnOnce"]) Module["warnOnce"] = function() { abort("'warnOnce' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["loadDynamicLibrary"]) Module["loadDynamicLibrary"] = function() { abort("'loadDynamicLibrary' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["loadWebAssemblyModule"]) Module["loadWebAssemblyModule"] = function() { abort("'loadWebAssemblyModule' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getLEB"]) Module["getLEB"] = function() { abort("'getLEB' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getFunctionTables"]) Module["getFunctionTables"] = function() { abort("'getFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["alignFunctionTables"]) Module["alignFunctionTables"] = function() { abort("'alignFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["registerFunctions"]) Module["registerFunctions"] = function() { abort("'registerFunctions' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addFunction"]) Module["addFunction"] = function() { abort("'addFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["removeFunction"]) Module["removeFunction"] = function() { abort("'removeFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getFuncWrapper"]) Module["getFuncWrapper"] = function() { abort("'getFuncWrapper' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["prettyPrint"]) Module["prettyPrint"] = function() { abort("'prettyPrint' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["makeBigInt"]) Module["makeBigInt"] = function() { abort("'makeBigInt' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["dynCall"]) Module["dynCall"] = function() { abort("'dynCall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getCompilerSetting"]) Module["getCompilerSetting"] = function() { abort("'getCompilerSetting' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackSave"]) Module["stackSave"] = function() { abort("'stackSave' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackRestore"]) Module["stackRestore"] = function() { abort("'stackRestore' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackAlloc"]) Module["stackAlloc"] = function() { abort("'stackAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["establishStackSpace"]) Module["establishStackSpace"] = function() { abort("'establishStackSpace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["print"]) Module["print"] = function() { abort("'print' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["printErr"]) Module["printErr"] = function() { abort("'printErr' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getTempRet0"]) Module["getTempRet0"] = function() { abort("'getTempRet0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["setTempRet0"]) Module["setTempRet0"] = function() { abort("'setTempRet0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["Pointer_stringify"]) Module["Pointer_stringify"] = function() { abort("'Pointer_stringify' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeStackCookie"]) Module["writeStackCookie"] = function() { abort("'writeStackCookie' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["checkStackCookie"]) Module["checkStackCookie"] = function() { abort("'checkStackCookie' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["abortStackOverflow"]) Module["abortStackOverflow"] = function() { abort("'abortStackOverflow' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["intArrayFromBase64"]) Module["intArrayFromBase64"] = function() { abort("'intArrayFromBase64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["tryParseAsDataURI"]) Module["tryParseAsDataURI"] = function() { abort("'tryParseAsDataURI' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };if (!Module["ALLOC_NORMAL"]) Object.defineProperty(Module, "ALLOC_NORMAL", { get: function() { abort("'ALLOC_NORMAL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_STACK"]) Object.defineProperty(Module, "ALLOC_STACK", { get: function() { abort("'ALLOC_STACK' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_DYNAMIC"]) Object.defineProperty(Module, "ALLOC_DYNAMIC", { get: function() { abort("'ALLOC_DYNAMIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_NONE"]) Object.defineProperty(Module, "ALLOC_NONE", { get: function() { abort("'ALLOC_NONE' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });

if (memoryInitializer) {
  if (!isDataURI(memoryInitializer)) {
    memoryInitializer = locateFile(memoryInitializer);
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, GLOBAL_BASE);
  } else {
    addRunDependency('memory initializer');
    var applyMemoryInitializer = function(data) {
      if (data.byteLength) data = new Uint8Array(data);
      for (var i = 0; i < data.length; i++) {
        assert(HEAPU8[GLOBAL_BASE + i] === 0, "area for memory initializer should not have been touched before it's loaded");
      }
      HEAPU8.set(data, GLOBAL_BASE);
      // Delete the typed array that contains the large blob of the memory initializer request response so that
      // we won't keep unnecessary memory lying around. However, keep the XHR object itself alive so that e.g.
      // its .status field can still be accessed later.
      if (Module['memoryInitializerRequest']) delete Module['memoryInitializerRequest'].response;
      removeRunDependency('memory initializer');
    }
    var doBrowserLoad = function() {
      Module['readAsync'](memoryInitializer, applyMemoryInitializer, function() {
        throw 'could not load memory initializer ' + memoryInitializer;
      });
    }
    var memoryInitializerBytes = tryParseAsDataURI(memoryInitializer);
    if (memoryInitializerBytes) {
      applyMemoryInitializer(memoryInitializerBytes.buffer);
    } else
    if (Module['memoryInitializerRequest']) {
      // a network request has already been created, just use that
      var useRequest = function() {
        var request = Module['memoryInitializerRequest'];
        var response = request.response;
        if (request.status !== 200 && request.status !== 0) {
          var data = tryParseAsDataURI(Module['memoryInitializerRequestURL']);
          if (data) {
            response = data.buffer;
          } else {
            // If you see this warning, the issue may be that you are using locateFile and defining it in JS. That
            // means that the HTML file doesn't know about it, and when it tries to create the mem init request early, does it to the wrong place.
            // Look in your browser's devtools network console to see what's going on.
            console.warn('a problem seems to have happened with Module.memoryInitializerRequest, status: ' + request.status + ', retrying ' + memoryInitializer);
            doBrowserLoad();
            return;
          }
        }
        applyMemoryInitializer(response);
      }
      if (Module['memoryInitializerRequest'].response) {
        setTimeout(useRequest, 0); // it's already here; but, apply it asynchronously
      } else {
        Module['memoryInitializerRequest'].addEventListener('load', useRequest); // wait for it
      }
    } else {
      // fetch it from the network ourselves
      doBrowserLoad();
    }
  }
}


// Modularize mode returns a function, which can be called to
// create instances. The instances provide a then() method,
// must like a Promise, that receives a callback. The callback
// is called when the module is ready to run, with the module
// as a parameter. (Like a Promise, it also returns the module
// so you can use the output of .then(..)).
Module['then'] = function(func) {
  // We may already be ready to run code at this time. if
  // so, just queue a call to the callback.
  if (Module['calledRun']) {
    func(Module);
  } else {
    // we are not ready to call then() yet. we must call it
    // at the same time we would call onRuntimeInitialized.
    var old = Module['onRuntimeInitialized'];
    Module['onRuntimeInitialized'] = function() {
      if (old) old();
      func(Module);
    };
  }
  return Module;
};

/**
 * @constructor
 * @extends {Error}
 * @this {ExitStatus}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}





/** @type {function(Array=)} */
function run(args) {
  args = args || Module['arguments'];

  if (runDependencies > 0) {
    return;
  }

  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    ensureInitRuntime();

    preMain();

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    assert(!Module['_main'], 'compiled without a main, but one is present. if you added it from JS, use Module["onRuntimeInitialized"]');

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = run;

function checkUnflushedContent() {
  // Compiler settings do not allow exiting the runtime, so flushing
  // the streams is not possible. but in ASSERTIONS mode we check
  // if there was something to flush, and if so tell the user they
  // should request that the runtime be exitable.
  // Normally we would not even include flush() at all, but in ASSERTIONS
  // builds we do so just for this check, and here we see if there is any
  // content to flush, that is, we check if there would have been
  // something a non-ASSERTIONS build would have not seen.
  // How we flush the streams depends on whether we are in FILESYSTEM=0
  // mode (which has its own special function for this; otherwise, all
  // the code is inside libc)
  var print = out;
  var printErr = err;
  var has = false;
  out = err = function(x) {
    has = true;
  }
  try { // it doesn't matter if it fails
    var flush = Module['_fflush'];
    if (flush) flush(0);
    // also flush in the JS FS layer
    var hasFS = true;
    if (hasFS) {
      ['stdout', 'stderr'].forEach(function(name) {
        var info = FS.analyzePath('/dev/' + name);
        if (!info) return;
        var stream = info.object;
        var rdev = stream.rdev;
        var tty = TTY.ttys[rdev];
        if (tty && tty.output && tty.output.length) {
          has = true;
        }
      });
    }
  } catch(e) {}
  out = print;
  err = printErr;
  if (has) {
    warnOnce('stdio streams had content in them that was not flushed. you should set EXIT_RUNTIME to 1 (see the FAQ), or make sure to emit a newline when you printf etc.');
  }
}

function exit(status, implicit) {
  checkUnflushedContent();

  // if this is just main exit-ing implicitly, and the status is 0, then we
  // don't need to do anything here and can just leave. if the status is
  // non-zero, though, then we need to report it.
  // (we may have warned about this earlier, if a situation justifies doing so)
  if (implicit && Module['noExitRuntime'] && status === 0) {
    return;
  }

  if (Module['noExitRuntime']) {
    // if exit() was called, we may warn the user if the runtime isn't actually being shut down
    if (!implicit) {
      err('exit(' + status + ') called, but EXIT_RUNTIME is not set, so halting execution but not exiting the runtime or preventing further async execution (build with EXIT_RUNTIME=1, if you want a true shutdown)');
    }
  } else {

    ABORT = true;
    EXITSTATUS = status;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  Module['quit'](status, new ExitStatus(status));
}

var abortDecorators = [];

function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  if (what !== undefined) {
    out(what);
    err(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';
  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = abort;

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}


  Module["noExitRuntime"] = true;

run();





// {{MODULE_ADDITIONS}}



/*
Copyright notice for the base64 to arraybuffer conversion algorithm.

Copyright (c) 2011, Daniel Guerrero
All rights reserved.
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL DANIEL GUERRERO BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/* global Module */

"use strict";

// console.log("maximilian: " + Date());

console.log("maximilian v2.0.1: " + Date());

// ------------------------------------------------
// maxiArray - could extend Array object?
// cheaty array method to avoid mixing vector terminology with arrays
// but have to copy everything?!
// better to use GetArrayAsVectorDbl function ???
Module.maxiArray = function maxiArray() {
    this.length = 0;
    var vec = new Module.VectorDouble();

// this.update = function(){
//     var lengthsMatch = this.length !== this.vec.size();
//     if(!lengthsMatch){
//         if(this.length < this.vec.size()){
//             for(var i = this.length; i < this.vec.size(); i++){
//                 this[i] = this.vec.get(i);
//             }
//         } else{
//             for(var i = this.length; i < this.vec.size(); i++){
//                 delete this[i];
//             }
//         }

//         // reset length var
//         this.length = this.vec.size();
//     }
// };
};

Module.maxiArray.prototype.asVector = function (arrayIn) {
    return this.vec;
};

Module.maxiArray.prototype.asJsArray = function (arrayIn) {
    var arrayOut = [];

    for (var i = 0; i < this.length; i++) {
        array.push(this.vec.get(i)); //FIXME: mz I think this must be a bug? What is "array"? arrayOut maybe?
    }

    return arrayOut;
};

Module.maxiArray.prototype.set = function (arrayIn) {
    this.clear();
    this.vec = GetArrayAsVectorDbl(arrayIn); //FIXME: mz this is part of maxiTools
    this.length = this.vec.size();
    this.SetSqBrackets(true);
};

Module.maxiArray.prototype.push = function (num) {
    this.vec.push_back(num);
    this[this.length] = num;
    this.length++;
};

// set object properties to mimic array
// this doesn't seem particularly efficient or smart
Module.maxiArray.prototype.SetSqBrackets = function (useSq) {
    for (var i = 0; i < this.length; i++) {
        if (useSq) {
            this[i] = this.vec.get(i);
        } else {
            delete this[i];
        }
    }
};

Module.maxiArray.prototype.clear = function (useSq) {
    for (var i = 0; i < this.length; i++) {
        delete this[i];
    }
    Module.vectorTools.clearVectorDbl(this.vec); //FIXME: mz this is also part of maxiTools
    this.length = 0;
};


// tools
Module.maxiTools = function () {
};

// not sure this is good
// Module.maxiTools.arrayOfObj = function(obj, num){
//     var array = [];

//     for(var i = 0; i < num; i++){
//         array.push(new obj());
//     }
//     return array;
// };

Module.maxiTools.getArrayAsVectorDbl = function (arrayIn) {
    var vecOut = new Module.VectorDouble();
    for (var i = 0; i < arrayIn.length; i++) {
        vecOut.push_back(arrayIn[i]);
    }

    return vecOut;
};

Module.maxiTools.getBase64 = function (str) {
    //check if the string is a data URI
    if (str.indexOf(';base64,') !== -1) {
        //see where the actual data begins
        var dataStart = str.indexOf(';base64,') + 8;
        //check if the data is base64-encoded, if yes, return it
        // taken from
        // http://stackoverflow.com/a/8571649
        return str.slice(dataStart).match(/^([A-Za-z0-9+\/]{4})*([A-Za-z0-9+\/]{4}|[A-Za-z0-9+\/]{3}=|[A-Za-z0-9+\/]{2}==)$/) ? str.slice(dataStart) : false;
    }
    else return false;
};

Module.maxiTools._keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";

Module.maxiTools.removePaddingFromBase64 = function (input) {
    var lkey = Module.maxiTools._keyStr.indexOf(input.charAt(input.length - 1));
    if (lkey === 64) {
        return input.substring(0, input.length - 1);
    }
    return input;
};


// ------------------------------------------------
Module.maxiAudio = function () {
    this.numChannels = 2;
    this.output = 0;

    this.context = null;
    this.source = null;
    this.analyser = null;
    this.maxiAudioProcessor = null;
    this.bufferSize = 1024;
    this.initDone = false;
};

Module.maxiAudio.play = function () {
};


Module.INPUT_TYPE = {NONE:-2, DEFAULT:-1};
Module.maxiAudio.prototype.init = function (audioIn = Module.INPUT_TYPE.NONE) {

    // Temporary patch until all browsers support unprefixed context.
    this.context = new (window.AudioContext || window.webkitAudioContext)();
    this.source = this.context.createBufferSource();
    this.maxiAudioProcessor = this.context.createScriptProcessor(this.bufferSize, this.numChannels, this.numChannels);
    let handleConnection = function(stream) {
        console.log("Connecting audio input");
        console.log(stream);
        this.audioInputSource = this.context.createMediaStreamSource(stream);
        this.audioInputSource.connect(this.maxiAudioProcessor);
    }.bind(this);
    if (audioIn == Module.INPUT_TYPE.DEFAULT) {
      navigator.mediaDevices.getUserMedia({ audio: true, video: false })
          .then(handleConnection);
    }else if(audioIn > Module.INPUT_TYPE.DEFAULT) {
      navigator.mediaDevices.enumerateDevices().then((devices) => {
        devices = devices.filter((d) => d.kind === 'audioinput');
        navigator.mediaDevices.getUserMedia({ audio: {deviceId: devices[audioIn].deviceId}, video: false })
            .then(handleConnection);
      });
    }else{
      this.source.connect(this.maxiAudioProcessor);
    }
    this.maxiAudioProcessor.onaudioprocess = function (event) {
        var numInputChannels = event.inputBuffer.numberOfChannels;
        var numChannels = event.outputBuffer.numberOfChannels;
        var outputLength = event.outputBuffer.getChannelData(0).length;
        var audioIn = new Array(numChannels);
        for (var i = 0; i < outputLength; ++i) {
            for (let channel = 0; channel < numInputChannels; channel++) {
                audioIn[channel] = event.inputBuffer.getChannelData(channel)[i];
            }
            var w = this.play(audioIn);
            // var channel = 0;
            if (w instanceof Array) {
                for (channel = 0; channel < numChannels; channel++) {
                    event.outputBuffer.getChannelData(channel)[i] = w[channel];
                }
            }
            else {
                for (channel = 0; channel < numChannels; channel++) {
                    event.outputBuffer.getChannelData(channel)[i] = w;
                }
            }
        }
    }
        .bind(this)
    ;

    // Connect the processing graph: source -> maxiAudioProcessor -> analyser -> destination
    // this.maxiAudioProcessor.connect(this.analyser);
    this.maxiAudioProcessor.connect(this.context.destination);
    this.initDone = true;
};


Module.maxiAudio.prototype.listInputDevices = function() {
  navigator.mediaDevices.enumerateDevices().then((devices) => {
    devices = devices.filter((d) => d.kind === 'audioinput');
    console.log(devices);
  });
}


Module.maxiAudio.prototype.getNumChannels = function () {
    return this.numChannels;
};

// isArray should be second param really
// set num channels and set output as an array
// use this if you want to change number of channels
Module.maxiAudio.prototype.setNumChannels = function (isArray, numChannels_) {

    this.numChannels = numChannels_;
    this.outputIsArray(isArray, numChannels_);

    this.resetAudio();
};

Module.maxiAudio.prototype.setBufferSize = function (newBufferSize) {
    this.bufferSize = newBufferSize;
    this.resetAudio();
};

// use this if you want to keep num of outputs but change
// method e.g. array or not
Module.maxiAudio.prototype.outputIsArray = function (isArray) {
    if (isArray) {
        this.output = new Array(this.numChannels);

        for (var i = 0; i < this.numChannels; i++) {
            this.output[i] = 0;
        }
    } else {
        this.output = 0;
    }
};


Module.maxiAudio.prototype.resetAudio = function () {
    if (this.initDone) {
        this.source.disconnect();
        this.maxiAudioProcessor.disconnect();
        this.analyser.disconnect();
    }

    this.init();
};

// option to load sample if a different context is used
Module.maxiAudio.prototype.loadSample = function (url, samplePlayer, contextIn) {
    var data = [];
    var context;

    if (!contextIn) {
        context = this.context;
    } else {
        context = contextIn;
    }

    samplePlayer.clear();

    //check if url is actually a base64-encoded string
    var b64 = Module.maxiTools.getBase64(url);
    if (b64) {
        //convert to arraybuffer
        //modified version of this:
        // https://github.com/danguer/blog-examples/blob/master/js/base64-binary.js
        var ab_bytes = (b64.length / 4) * 3;
        var arrayBuffer = new ArrayBuffer(ab_bytes);

        b64 = Module.maxiTools.removePaddingFromBase64(Module.maxiTools.removePaddingFromBase64(b64));

        var bytes = parseInt((b64.length / 4) * 3, 10);

        var uarray;
        var chr1, chr2, chr3;
        var enc1, enc2, enc3, enc4;
        var i = 0;
        var j = 0;

        uarray = new Uint8Array(arrayBuffer);

        b64 = b64.replace(/[^A-Za-z0-9\+\/\=]/g, "");

        for (i = 0; i < bytes; i += 3) {
            //get the 3 octects in 4 ascii chars
            enc1 = Module.maxiTools._keyStr.indexOf(b64.charAt(j++));
            enc2 = Module.maxiTools._keyStr.indexOf(b64.charAt(j++));
            enc3 = Module.maxiTools._keyStr.indexOf(b64.charAt(j++));
            enc4 = Module.maxiTools._keyStr.indexOf(b64.charAt(j++));

            chr1 = (enc1 << 2) | (enc2 >> 4);
            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
            chr3 = ((enc3 & 3) << 6) | enc4;

            uarray[i] = chr1;
            if (enc3 !== 64) uarray[i + 1] = chr2;
            if (enc4 !== 64) uarray[i + 2] = chr3;
        }

        context.decodeAudioData(
            arrayBuffer,
            function (buffer) {
                // source.buffer = buffer;
                // source.loop = true;
                // source.start(0);
                data = buffer.getChannelData(0);

                if (data) {
                    var myBufferData = new Module.VectorDouble();
                    // Module.vectorTools.clearVectorDbl(myBufferData);

                    for (var n = 0; n < data.length; n++) {
                        myBufferData.push_back(data[n]);
                    }

                    samplePlayer.setSample(myBufferData/*, context.sampleRate*/);
                }

            },

            function (buffer) {
                console.log("Error decoding source!");
            }
        );


    }
    else {
        // Load asynchronously
        var request = new XMLHttpRequest();
        request.addEventListener("load",
            function (evt) {
                console.log("The transfer is complete.");
            });
        request.open("GET", url, true);

        request.responseType = "arraybuffer";


        request.onload = function () {
            context.decodeAudioData(
                request.response,
                function (buffer) {
                    // source.buffer = buffer;
                    // source.loop = true;
                    // source.start(0);
                    data = buffer.getChannelData(0);

                    if (data) {
                        var myBufferData = new Module.VectorDouble();
                        // Module.vectorTools.clearVectorDbl(myBufferData);

                        for (var n = 0; n < data.length; n++) {
                            myBufferData.push_back(data[n]);
                        }

                        samplePlayer.setSample(myBufferData/*, context.sampleRate*/);
                    }

                },

                function (buffer) {
                    console.log("Error decoding source!");
                }
            );
        };
        request.send();
    }

};



  return maximilian;
}
);
})();
if (typeof exports === 'object' && typeof module === 'object')
      module.exports = maximilian;
    else if (typeof define === 'function' && define['amd'])
      define([], function() { return maximilian; });
    else if (typeof exports === 'object')
      exports["maximilian"] = maximilian;
    