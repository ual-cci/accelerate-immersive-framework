{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","ember-share-db/tests/app.lint-test.js","ember-share-db/tests/components/ember-ace.js","ember-share-db/tests/helpers/ember-simple-auth.js","ember-share-db/tests/integration/components/ace-editor-test.js","ember-share-db/tests/integration/components/document-list-item-test.js","ember-share-db/tests/integration/components/download-button-test.js","ember-share-db/tests/integration/components/file-upload-test.js","ember-share-db/tests/integration/components/main-navigation-test.js","ember-share-db/tests/integration/components/modal-preview-body-test.js","ember-share-db/tests/integration/components/my-ace-editor-test.js","ember-share-db/tests/integration/components/ops-player-test.js","ember-share-db/tests/integration/components/text-area-test.js","ember-share-db/tests/integration/components/token-field-test.js","ember-share-db/tests/integration/helpers/if-equal-test.js","ember-share-db/tests/integration/helpers/modulo-test.js","ember-share-db/tests/test-helper.js","ember-share-db/tests/tests.lint-test.js","ember-share-db/tests/unit/adapters/account-test.js","ember-share-db/tests/unit/adapters/code-document-test.js","ember-share-db/tests/unit/controllers/code-editor-test.js","ember-share-db/tests/unit/controllers/login-test.js","ember-share-db/tests/unit/controllers/password-reset-test.js","ember-share-db/tests/unit/initializers/websocket-test.js","ember-share-db/tests/unit/instance-initializers/session-events-test.js","ember-share-db/tests/unit/models/account-test.js","ember-share-db/tests/unit/models/asset-test.js","ember-share-db/tests/unit/models/code-document-test.js","ember-share-db/tests/unit/routes/about-test.js","ember-share-db/tests/unit/routes/code-editor-test.js","ember-share-db/tests/unit/routes/documents-test.js","ember-share-db/tests/unit/routes/index-test.js","ember-share-db/tests/unit/routes/login-test.js","ember-share-db/tests/unit/routes/password-reset-test.js","ember-share-db/tests/unit/routes/terms-test.js","ember-share-db/tests/unit/routes/text-area-test.js","ember-share-db/tests/unit/serializers/document-test.js","ember-share-db/tests/unit/services/assets-test.js","ember-share-db/tests/unit/services/code-parsing-test.js","ember-share-db/tests/unit/services/documents-test.js","ember-share-db/tests/unit/services/mimic-api-test.js","ember-share-db/tests/unit/services/ops-player-test.js","ember-share-db/tests/unit/services/password-reset-test.js","ember-share-db/tests/unit/services/session-account-test.js","vendor/ember-cli/app-config.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define('ember-share-db/tests/app.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | app');\n\n  QUnit.test('adapters/account.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'adapters/account.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('adapters/document.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'adapters/document.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('authenticators/oauth2.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'authenticators/oauth2.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/base-token.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/base-token.js should pass ESLint\\n\\n4:16 - Use import Component from \\'@ember/component\\'; instead of using Ember.Component (ember/new-module-imports)\\n16:17 - Use import { computed } from \\'@ember/object\\'; instead of using Ember.computed (ember/new-module-imports)');\n  });\n\n  QUnit.test('components/document-list-item.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/document-list-item.js should pass ESLint\\n\\n33:9 - Unexpected console statement. (no-console)');\n  });\n\n  QUnit.test('components/download-button.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/download-button.js should pass ESLint\\n\\n4:8 - \\'config\\' is defined but never used. (no-unused-vars)');\n  });\n\n  QUnit.test('components/file-upload.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/file-upload.js should pass ESLint\\n\\n18:7 - Unexpected console statement. (no-console)\\n20:9 - Unexpected console statement. (no-console)\\n24:9 - Unexpected console statement. (no-console)\\n28:9 - Unexpected console statement. (no-console)');\n  });\n\n  QUnit.test('components/main-navigation.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/main-navigation.js should pass ESLint\\n\\n13:7 - Use closure actions, unless you need bubbling (ember/closure-actions)\\n19:7 - Use closure actions, unless you need bubbling (ember/closure-actions)\\n22:7 - Unexpected console statement. (no-console)');\n  });\n\n  QUnit.test('components/modal-preview-body.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/modal-preview-body.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/ops-player.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/ops-player.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/tokenfield-input.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/tokenfield-input.js should pass ESLint\\n\\n7:10 - \\'A\\' is defined but never used. (no-unused-vars)\\n53:32 - Use import { A } from \\'@ember/array\\'; instead of using Ember.A (ember/new-module-imports)\\n60:27 - Do not use global `$` or `jQuery` (ember/no-global-jquery)\\n60:27 - \\'$\\' is not defined. (no-undef)');\n  });\n\n  QUnit.test('controllers/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/application.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/code-editor.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'controllers/code-editor.js should pass ESLint\\n\\n31:3 - Only string, number, symbol, boolean, null, undefined, and function are allowed as default properties (ember/avoid-leaking-state-in-ember-objects)\\n83:5 - Unexpected console statement. (no-console)\\n100:5 - Do not use global `$` or `jQuery` (ember/no-global-jquery)\\n100:5 - \\'$\\' is not defined. (no-undef)\\n120:9 - Unexpected console statement. (no-console)\\n146:5 - Unexpected console statement. (no-console)\\n150:9 - Unexpected console statement. (no-console)\\n162:11 - Unexpected console statement. (no-console)\\n171:11 - Unexpected console statement. (no-console)\\n180:11 - Unexpected console statement. (no-console)\\n189:11 - Unexpected console statement. (no-console)\\n194:9 - Unexpected console statement. (no-console)\\n204:5 - Unexpected console statement. (no-console)\\n213:9 - Unexpected console statement. (no-console)\\n218:9 - Unexpected console statement. (no-console)\\n224:13 - \\'session\\' is assigned a value but never used. (no-unused-vars)\\n228:9 - Unexpected console statement. (no-console)\\n240:9 - Unexpected console statement. (no-console)\\n253:64 - \\'editor\\' is not defined. (no-undef)\\n254:9 - \\'session\\' is not defined. (no-undef)\\n278:5 - Unexpected console statement. (no-console)\\n309:11 - Unexpected console statement. (no-console)\\n312:11 - Unexpected console statement. (no-console)\\n355:7 - Unexpected console statement. (no-console)\\n376:5 - Unexpected console statement. (no-console)\\n418:9 - Unexpected console statement. (no-console)\\n448:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n449:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n450:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n466:13 - \\'doc\\' is assigned a value but never used. (no-unused-vars)\\n501:15 - \\'err\\' is defined but never used. (no-unused-vars)\\n502:7 - Unexpected console statement. (no-console)\\n507:11 - \\'doc\\' is assigned a value but never used. (no-unused-vars)\\n533:7 - Unexpected console statement. (no-console)\\n542:9 - Unexpected console statement. (no-console)\\n578:5 - Unexpected console statement. (no-console)\\n581:7 - Unexpected console statement. (no-console)\\n614:7 - Unexpected console statement. (no-console)\\n620:13 - \\'doc\\' is assigned a value but never used. (no-unused-vars)\\n628:11 - Do not use global `$` or `jQuery` (ember/no-global-jquery)\\n628:11 - \\'$\\' is not defined. (no-undef)\\n634:13 - \\'doc\\' is assigned a value but never used. (no-unused-vars)\\n661:17 - \\'err\\' is defined but never used. (no-unused-vars)\\n685:11 - Unexpected console statement. (no-console)\\n699:7 - \\'$\\' is not defined. (no-undef)\\n699:7 - Do not use global `$` or `jQuery` (ember/no-global-jquery)\\n703:7 - Unexpected console statement. (no-console)\\n706:9 - Do not use global `$` or `jQuery` (ember/no-global-jquery)\\n706:9 - \\'$\\' is not defined. (no-undef)\\n707:9 - \\'$\\' is not defined. (no-undef)\\n707:9 - Do not use global `$` or `jQuery` (ember/no-global-jquery)\\n711:9 - Do not use global `$` or `jQuery` (ember/no-global-jquery)\\n711:9 - \\'$\\' is not defined. (no-undef)\\n715:7 - Unexpected console statement. (no-console)\\n716:7 - \\'$\\' is not defined. (no-undef)\\n716:7 - Do not use global `$` or `jQuery` (ember/no-global-jquery)\\n728:11 - Unexpected console statement. (no-console)\\n736:11 - Unexpected console statement. (no-console)\\n828:7 - Unexpected console statement. (no-console)\\n840:13 - Unexpected console statement. (no-console)\\n845:9 - Unexpected console statement. (no-console)\\n869:13 - \\'e\\' is defined but never used. (no-unused-vars)');\n  });\n\n  QUnit.test('controllers/documents.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'controllers/documents.js should pass ESLint\\n\\n39:5 - Unexpected console statement. (no-console)\\n54:11 - Unexpected console statement. (no-console)\\n58:11 - Unexpected console statement. (no-console)\\n77:13 - Unexpected console statement. (no-console)\\n85:15 - Unexpected console statement. (no-console)\\n90:13 - Unexpected console statement. (no-console)');\n  });\n\n  QUnit.test('controllers/login.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'controllers/login.js should pass ESLint\\n\\n31:7 - Unexpected console statement. (no-console)\\n33:9 - Unexpected console statement. (no-console)\\n42:7 - Unexpected console statement. (no-console)\\n51:11 - Unexpected console statement. (no-console)\\n54:11 - Unexpected console statement. (no-console)\\n65:9 - Unexpected console statement. (no-console)\\n68:9 - Unexpected console statement. (no-console)');\n  });\n\n  QUnit.test('controllers/password-reset.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'controllers/password-reset.js should pass ESLint\\n\\n13:5 - Unexpected console statement. (no-console)');\n  });\n\n  QUnit.test('instance-initializers/session-events.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'instance-initializers/session-events.js should pass ESLint\\n\\n5:5 - Unexpected console statement. (no-console)\\n9:5 - Unexpected console statement. (no-console)');\n  });\n\n  QUnit.test('models/account.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/account.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/asset.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/asset.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/document.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/document.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('router.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'router.js should pass ESLint\\n\\n11:37 - Use snake case in dynamic segments of routes (ember/routes-segments-snake-case)');\n  });\n\n  QUnit.test('routes/about.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/about.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/application.js should pass ESLint\\n\\n7:5 - Unexpected console statement. (no-console)\\n12:5 - Unexpected console statement. (no-console)\\n20:5 - Unexpected console statement. (no-console)');\n  });\n\n  QUnit.test('routes/code-editor.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/code-editor.js should pass ESLint\\n\\n23:5 - Unexpected console statement. (no-console)\\n28:18 - \\'transition\\' is defined but never used. (no-unused-vars)');\n  });\n\n  QUnit.test('routes/documents.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/documents.js should pass ESLint\\n\\n12:11 - \\'sort\\' is assigned a value but never used. (no-unused-vars)\\n21:5 - Unexpected console statement. (no-console)\\n25:18 - \\'transition\\' is defined but never used. (no-unused-vars)\\n26:7 - Unexpected console statement. (no-console)\\n31:13 - Unexpected console statement. (no-console)');\n  });\n\n  QUnit.test('routes/index.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/index.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/login.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/login.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/password-reset.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/password-reset.js should pass ESLint\\n\\n4:40 - \\'model\\' is defined but never used. (no-unused-vars)');\n  });\n\n  QUnit.test('routes/terms.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/terms.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('serializers/document.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/document.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('services/assets.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'services/assets.js should pass ESLint\\n\\n10:5 - Unexpected console statement. (no-console)\\n14:7 - \\'$\\' is not defined. (no-undef)\\n19:11 - Don\\'t use jQuery without Ember Run Loop (ember/jquery-ember-run)\\n19:11 - Unexpected console statement. (no-console)\\n22:11 - Unexpected console statement. (no-console)\\n28:5 - Unexpected console statement. (no-console)\\n35:9 - Unexpected console statement. (no-console)\\n43:9 - Unexpected console statement. (no-console)\\n60:7 - Unexpected console statement. (no-console)\\n68:5 - Unexpected console statement. (no-console)\\n69:39 - \\'reject\\' is defined but never used. (no-unused-vars)\\n86:5 - Unexpected console statement. (no-console)');\n  });\n\n  QUnit.test('services/code-parsing.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'services/code-parsing.js should pass ESLint\\n\\n24:9 - Unexpected console statement. (no-console)\\n189:7 - Unexpected console statement. (no-console)');\n  });\n\n  QUnit.test('services/documents.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'services/documents.js should pass ESLint\\n\\n21:24 - \\'response\\' is defined but never used. (no-unused-vars)\\n22:9 - Unexpected console statement. (no-console)\\n24:17 - \\'err\\' is defined but never used. (no-unused-vars)\\n25:9 - Unexpected console statement. (no-console)\\n39:7 - \\'$\\' is not defined. (no-undef)\\n44:18 - \\'res\\' is defined but never used. (no-unused-vars)\\n53:7 - \\'$\\' is not defined. (no-undef)\\n57:11 - Don\\'t use jQuery without Ember Run Loop (ember/jquery-ember-run)\\n57:11 - Unexpected console statement. (no-console)\\n75:11 - Unexpected console statement. (no-console)\\n76:11 - \\'$\\' is not defined. (no-undef)\\n80:22 - \\'res\\' is defined but never used. (no-unused-vars)\\n81:15 - Unexpected console statement. (no-console)\\n81:15 - Don\\'t use jQuery without Ember Run Loop (ember/jquery-ember-run)\\n86:15 - Don\\'t use jQuery without Ember Run Loop (ember/jquery-ember-run)\\n88:15 - Unexpected console statement. (no-console)\\n100:5 - Unexpected console statement. (no-console)\\n102:7 - \\'$\\' is not defined. (no-undef)\\n106:18 - \\'res\\' is defined but never used. (no-unused-vars)');\n  });\n\n  QUnit.test('services/ops-player.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'services/ops-player.js should pass ESLint\\n\\n31:7 - \\'$\\' is not defined. (no-undef)\\n35:11 - Don\\'t use jQuery without Ember Run Loop (ember/jquery-ember-run)\\n36:11 - Don\\'t use jQuery without Ember Run Loop (ember/jquery-ember-run)\\n115:13 - Unexpected console statement. (no-console)');\n  });\n\n  QUnit.test('services/password-reset.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'services/password-reset.js should pass ESLint\\n\\n8:5 - Unexpected console statement. (no-console)\\n10:7 - \\'$\\' is not defined. (no-undef)\\n15:11 - Don\\'t use jQuery without Ember Run Loop (ember/jquery-ember-run)\\n15:11 - Unexpected console statement. (no-console)\\n18:11 - Unexpected console statement. (no-console)\\n24:5 - Unexpected console statement. (no-console)\\n26:7 - \\'$\\' is not defined. (no-undef)\\n31:11 - Don\\'t use jQuery without Ember Run Loop (ember/jquery-ember-run)\\n31:11 - Unexpected console statement. (no-console)\\n34:11 - Unexpected console statement. (no-console)\\n40:5 - Unexpected console statement. (no-console)\\n42:7 - \\'$\\' is not defined. (no-undef)\\n47:11 - Unexpected console statement. (no-console)\\n47:11 - Don\\'t use jQuery without Ember Run Loop (ember/jquery-ember-run)\\n50:11 - Unexpected console statement. (no-console)');\n  });\n\n  QUnit.test('services/session-account.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'services/session-account.js should pass ESLint\\n\\n41:9 - Unexpected console statement. (no-console)');\n  });\n});","define('ember-share-db/tests/components/ember-ace', ['exports', 'ember-ace/test-support/components/ember-ace'], function (exports, _emberAce) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  Object.defineProperty(exports, 'default', {\n    enumerable: true,\n    get: function () {\n      return _emberAce.default;\n    }\n  });\n});","define('ember-share-db/tests/helpers/ember-simple-auth', ['exports', 'ember-simple-auth/authenticators/test'], function (exports, _test) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.authenticateSession = authenticateSession;\n  exports.currentSession = currentSession;\n  exports.invalidateSession = invalidateSession;\n\n\n  const TEST_CONTAINER_KEY = 'authenticator:test';\n\n  function ensureAuthenticator(app, container) {\n    const authenticator = container.lookup(TEST_CONTAINER_KEY);\n    if (!authenticator) {\n      app.register(TEST_CONTAINER_KEY, _test.default);\n    }\n  }\n\n  function authenticateSession(app, sessionData) {\n    const { __container__: container } = app;\n    const session = container.lookup('service:session');\n    ensureAuthenticator(app, container);\n    session.authenticate(TEST_CONTAINER_KEY, sessionData);\n    return app.testHelpers.wait();\n  }\n\n  function currentSession(app) {\n    return app.__container__.lookup('service:session');\n  }\n\n  function invalidateSession(app) {\n    const session = app.__container__.lookup('service:session');\n    if (session.get('isAuthenticated')) {\n      session.invalidate();\n    }\n    return app.testHelpers.wait();\n  }\n});","define('ember-share-db/tests/integration/components/ace-editor-test', ['qunit', 'ember-qunit', '@ember/test-helpers'], function (_qunit, _emberQunit, _testHelpers) {\n  'use strict';\n\n  (0, _qunit.module)('Integration | Component | ace-editor', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n\n    (0, _qunit.test)('it renders', async function (assert) {\n      // Set any properties with this.set('myProperty', 'value');\n      // Handle any actions with this.set('myAction', function(val) { ... });\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"KghNmMp1\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[20,\\\"ace-editor\\\"],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n\n      assert.equal(this.element.textContent.trim(), '');\n\n      // Template block usage:\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"JftFk8in\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"ace-editor\\\",null,null,{\\\"statements\\\":[[0,\\\"        template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n\n      assert.equal(this.element.textContent.trim(), 'template block text');\n    });\n  });\n});","define('ember-share-db/tests/integration/components/document-list-item-test', ['qunit', 'ember-qunit', '@ember/test-helpers'], function (_qunit, _emberQunit, _testHelpers) {\n  'use strict';\n\n  (0, _qunit.module)('Integration | Component | document-list-item', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n\n    (0, _qunit.test)('it renders', async function (assert) {\n      // Set any properties with this.set('myProperty', 'value');\n      // Handle any actions with this.set('myAction', function(val) { ... });\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"15rZY42B\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[20,\\\"document-list-item\\\"],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n\n      assert.equal(this.element.textContent.trim(), '');\n\n      // Template block usage:\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"XBV2kGO+\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"document-list-item\\\",null,null,{\\\"statements\\\":[[0,\\\"        template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n\n      assert.equal(this.element.textContent.trim(), 'template block text');\n    });\n  });\n});","define('ember-share-db/tests/integration/components/download-button-test', ['qunit', 'ember-qunit', '@ember/test-helpers'], function (_qunit, _emberQunit, _testHelpers) {\n  'use strict';\n\n  (0, _qunit.module)('Integration | Component | download-button', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n\n    (0, _qunit.test)('it renders', async function (assert) {\n      // Set any properties with this.set('myProperty', 'value');\n      // Handle any actions with this.set('myAction', function(val) { ... });\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"+7UDuaKY\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[20,\\\"download-button\\\"],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n\n      assert.equal(this.element.textContent.trim(), '');\n\n      // Template block usage:\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"ngHbNMl1\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"download-button\\\",null,null,{\\\"statements\\\":[[0,\\\"        template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n\n      assert.equal(this.element.textContent.trim(), 'template block text');\n    });\n  });\n});","define('ember-share-db/tests/integration/components/file-upload-test', ['qunit', 'ember-qunit', '@ember/test-helpers'], function (_qunit, _emberQunit, _testHelpers) {\n  'use strict';\n\n  (0, _qunit.module)('Integration | Component | file-upload', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n\n    (0, _qunit.test)('it renders', async function (assert) {\n      // Set any properties with this.set('myProperty', 'value');\n      // Handle any actions with this.set('myAction', function(val) { ... });\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"uwoNnWn/\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[20,\\\"file-upload\\\"],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n\n      assert.equal(this.element.textContent.trim(), '');\n\n      // Template block usage:\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"YyP7xmNI\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"file-upload\\\",null,null,{\\\"statements\\\":[[0,\\\"        template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n\n      assert.equal(this.element.textContent.trim(), 'template block text');\n    });\n  });\n});","define('ember-share-db/tests/integration/components/main-navigation-test', ['qunit', 'ember-qunit', '@ember/test-helpers'], function (_qunit, _emberQunit, _testHelpers) {\n  'use strict';\n\n  (0, _qunit.module)('Integration | Component | main-navigation', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n\n    (0, _qunit.test)('it renders', async function (assert) {\n      // Set any properties with this.set('myProperty', 'value');\n      // Handle any actions with this.set('myAction', function(val) { ... });\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"UH/9KtZ/\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[20,\\\"main-navigation\\\"],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n\n      assert.equal(this.element.textContent.trim(), '');\n\n      // Template block usage:\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"5e70IS+p\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"main-navigation\\\",null,null,{\\\"statements\\\":[[0,\\\"        template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n\n      assert.equal(this.element.textContent.trim(), 'template block text');\n    });\n  });\n});","define('ember-share-db/tests/integration/components/modal-preview-body-test', ['qunit', 'ember-qunit', '@ember/test-helpers'], function (_qunit, _emberQunit, _testHelpers) {\n  'use strict';\n\n  (0, _qunit.module)('Integration | Component | modal-preview-body', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n\n    (0, _qunit.test)('it renders', async function (assert) {\n      // Set any properties with this.set('myProperty', 'value');\n      // Handle any actions with this.set('myAction', function(val) { ... });\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"fOT6vHyA\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[20,\\\"modal-preview-body\\\"],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n\n      assert.equal(this.element.textContent.trim(), '');\n\n      // Template block usage:\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"OLBMflxn\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"modal-preview-body\\\",null,null,{\\\"statements\\\":[[0,\\\"        template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n\n      assert.equal(this.element.textContent.trim(), 'template block text');\n    });\n  });\n});","define('ember-share-db/tests/integration/components/my-ace-editor-test', ['qunit', 'ember-qunit', '@ember/test-helpers'], function (_qunit, _emberQunit, _testHelpers) {\n  'use strict';\n\n  (0, _qunit.module)('Integration | Component | my-ace-editor', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n\n    (0, _qunit.test)('it renders', async function (assert) {\n      // Set any properties with this.set('myProperty', 'value');\n      // Handle any actions with this.set('myAction', function(val) { ... });\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"VRqOVdOc\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[20,\\\"my-ace-editor\\\"],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n\n      assert.equal(this.element.textContent.trim(), '');\n\n      // Template block usage:\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"etYFShzI\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"my-ace-editor\\\",null,null,{\\\"statements\\\":[[0,\\\"        template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n\n      assert.equal(this.element.textContent.trim(), 'template block text');\n    });\n  });\n});","define('ember-share-db/tests/integration/components/ops-player-test', ['qunit', 'ember-qunit', '@ember/test-helpers'], function (_qunit, _emberQunit, _testHelpers) {\n  'use strict';\n\n  (0, _qunit.module)('Integration | Component | ops-player', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n\n    (0, _qunit.test)('it renders', async function (assert) {\n      // Set any properties with this.set('myProperty', 'value');\n      // Handle any actions with this.set('myAction', function(val) { ... });\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"VJVzsMH9\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[20,\\\"ops-player\\\"],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n\n      assert.equal(this.element.textContent.trim(), '');\n\n      // Template block usage:\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"YfA1uEVs\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"ops-player\\\",null,null,{\\\"statements\\\":[[0,\\\"        template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n\n      assert.equal(this.element.textContent.trim(), 'template block text');\n    });\n  });\n});","define('ember-share-db/tests/integration/components/text-area-test', ['qunit', 'ember-qunit', '@ember/test-helpers'], function (_qunit, _emberQunit, _testHelpers) {\n  'use strict';\n\n  (0, _qunit.module)('Integration | Component | text-area', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n\n    (0, _qunit.test)('it renders', async function (assert) {\n      // Set any properties with this.set('myProperty', 'value');\n      // Handle any actions with this.set('myAction', function(val) { ... });\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"YEcotdI3\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[20,\\\"text-area\\\"],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n\n      assert.equal(this.element.textContent.trim(), '');\n\n      // Template block usage:\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"lJvXUE66\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"text-area\\\",null,null,{\\\"statements\\\":[[0,\\\"        template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n\n      assert.equal(this.element.textContent.trim(), 'template block text');\n    });\n  });\n});","define('ember-share-db/tests/integration/components/token-field-test', ['qunit', 'ember-qunit', '@ember/test-helpers'], function (_qunit, _emberQunit, _testHelpers) {\n  'use strict';\n\n  (0, _qunit.module)('Integration | Component | token-field', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n\n    (0, _qunit.test)('it renders', async function (assert) {\n      // Set any properties with this.set('myProperty', 'value');\n      // Handle any actions with this.set('myAction', function(val) { ... });\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"7J4ueq9l\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[20,\\\"token-field\\\"],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n\n      assert.equal(this.element.textContent.trim(), '');\n\n      // Template block usage:\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"jDFZIOJC\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"token-field\\\",null,null,{\\\"statements\\\":[[0,\\\"        template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n\n      assert.equal(this.element.textContent.trim(), 'template block text');\n    });\n  });\n});","define('ember-share-db/tests/integration/helpers/if-equal-test', ['qunit', 'ember-qunit', '@ember/test-helpers'], function (_qunit, _emberQunit, _testHelpers) {\n  'use strict';\n\n  (0, _qunit.module)('Integration | Helper | if-equal', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it renders', async function (assert) {\n      this.set('inputValue', '1234');\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"ELYxakBl\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"if-equal\\\",[[22,[\\\"inputValue\\\"]]],null],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n\n      assert.equal(this.element.textContent.trim(), '1234');\n    });\n  });\n});","define('ember-share-db/tests/integration/helpers/modulo-test', ['qunit', 'ember-qunit', '@ember/test-helpers'], function (_qunit, _emberQunit, _testHelpers) {\n  'use strict';\n\n  (0, _qunit.module)('Integration | Helper | modulo', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it renders', async function (assert) {\n      this.set('inputValue', '1234');\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"U1/eTaph\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"modulo\\\",[[22,[\\\"inputValue\\\"]]],null],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n\n      assert.equal(this.element.textContent.trim(), '1234');\n    });\n  });\n});","define('ember-share-db/tests/test-helper', ['ember-share-db/app', 'ember-share-db/config/environment', '@ember/test-helpers', 'ember-qunit'], function (_app, _environment, _testHelpers, _emberQunit) {\n  'use strict';\n\n  (0, _testHelpers.setApplication)(_app.default.create(_environment.default.APP));\n\n  (0, _emberQunit.start)();\n});","define('ember-share-db/tests/tests.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | tests');\n\n  QUnit.test('integration/components/ace-editor-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/ace-editor-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/document-list-item-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/document-list-item-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/download-button-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/download-button-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/file-upload-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/file-upload-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/main-navigation-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/main-navigation-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/modal-preview-body-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/modal-preview-body-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/my-ace-editor-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/my-ace-editor-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/ops-player-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/ops-player-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/text-area-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/text-area-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/token-field-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/token-field-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/helpers/if-equal-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/helpers/if-equal-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/helpers/modulo-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/helpers/modulo-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('test-helper.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/adapters/account-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/adapters/account-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/adapters/code-document-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/adapters/code-document-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/code-editor-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/code-editor-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/login-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/login-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/password-reset-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/password-reset-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/initializers/websocket-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/initializers/websocket-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/instance-initializers/session-events-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/instance-initializers/session-events-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/models/account-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/account-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/models/asset-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/asset-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/models/code-document-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/code-document-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/about-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/about-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/code-editor-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/code-editor-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/documents-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/documents-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/index-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/index-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/login-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/login-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/password-reset-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/password-reset-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/terms-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/terms-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/text-area-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/text-area-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/serializers/document-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/serializers/document-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/services/assets-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/assets-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/services/code-parsing-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/code-parsing-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/services/documents-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/documents-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/services/mimic-api-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/mimic-api-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/services/ops-player-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/ops-player-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/services/password-reset-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/password-reset-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/services/session-account-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/session-account-test.js should pass ESLint\\n\\n');\n  });\n});","define('ember-share-db/tests/unit/adapters/account-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Adapter | account', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      let adapter = this.owner.lookup('adapter:account');\n      assert.ok(adapter);\n    });\n  });\n});","define('ember-share-db/tests/unit/adapters/code-document-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Adapter | code document', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      let adapter = this.owner.lookup('adapter:document');\n      assert.ok(adapter);\n    });\n  });\n});","define('ember-share-db/tests/unit/controllers/code-editor-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Controller | code-editor', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      let controller = this.owner.lookup('controller:code-editor');\n      assert.ok(controller);\n    });\n  });\n});","define('ember-share-db/tests/unit/controllers/login-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Controller | login', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      let controller = this.owner.lookup('controller:login');\n      assert.ok(controller);\n    });\n  });\n});","define('ember-share-db/tests/unit/controllers/password-reset-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Controller | password-reset', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      let controller = this.owner.lookup('controller:password-reset');\n      assert.ok(controller);\n    });\n  });\n});","define('ember-share-db/tests/unit/initializers/websocket-test', ['ember-share-db/initializers/websocket', 'qunit', 'ember-qunit'], function (_websocket, _qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Initializer | websocket', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    hooks.beforeEach(function () {\n      this.TestApplication = Ember.Application.extend();\n      this.TestApplication.initializer({\n        name: 'initializer under test',\n        initialize: _websocket.initialize\n      });\n\n      this.application = this.TestApplication.create({ autoboot: false });\n    });\n\n    hooks.afterEach(function () {\n      Ember.run(this.application, 'destroy');\n    });\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it works', async function (assert) {\n      await this.application.boot();\n\n      assert.ok(true);\n    });\n  });\n});","define('ember-share-db/tests/unit/instance-initializers/session-events-test', ['ember-share-db/instance-initializers/session-events', 'qunit', 'ember-qunit'], function (_sessionEvents, _qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Instance Initializer | session-events', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    hooks.beforeEach(function () {\n      this.TestApplication = Ember.Application.extend();\n      this.TestApplication.instanceInitializer({\n        name: 'initializer under test',\n        initialize: _sessionEvents.initialize\n      });\n      this.application = this.TestApplication.create({ autoboot: false });\n      this.instance = this.application.buildInstance();\n    });\n    hooks.afterEach(function () {\n      Ember.run(this.application, 'destroy');\n      Ember.run(this.instance, 'destroy');\n    });\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it works', async function (assert) {\n      await this.instance.boot();\n\n      assert.ok(true);\n    });\n  });\n});","define('ember-share-db/tests/unit/models/account-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Model | account', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      let store = this.owner.lookup('service:store');\n      let model = Ember.run(() => store.createRecord('account', {}));\n      assert.ok(model);\n    });\n  });\n});","define('ember-share-db/tests/unit/models/asset-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Model | asset', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      let store = this.owner.lookup('service:store');\n      let model = Ember.run(() => store.createRecord('asset', {}));\n      assert.ok(model);\n    });\n  });\n});","define('ember-share-db/tests/unit/models/code-document-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Model | code document', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      let store = this.owner.lookup('service:store');\n      let model = Ember.run(() => store.createRecord('document', {}));\n      assert.ok(model);\n    });\n  });\n});","define('ember-share-db/tests/unit/routes/about-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Route | about', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:about');\n      assert.ok(route);\n    });\n  });\n});","define('ember-share-db/tests/unit/routes/code-editor-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Route | code-editor', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:code-editor');\n      assert.ok(route);\n    });\n  });\n});","define('ember-share-db/tests/unit/routes/documents-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Route | documents', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:documents');\n      assert.ok(route);\n    });\n  });\n});","define('ember-share-db/tests/unit/routes/index-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Route | index', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:index');\n      assert.ok(route);\n    });\n  });\n});","define('ember-share-db/tests/unit/routes/login-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Route | login', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:login');\n      assert.ok(route);\n    });\n  });\n});","define('ember-share-db/tests/unit/routes/password-reset-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Route | password-reset', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:password-reset');\n      assert.ok(route);\n    });\n  });\n});","define('ember-share-db/tests/unit/routes/terms-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Route | terms', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:terms');\n      assert.ok(route);\n    });\n  });\n});","define('ember-share-db/tests/unit/routes/text-area-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Route | textArea', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:text-area');\n      assert.ok(route);\n    });\n  });\n});","define('ember-share-db/tests/unit/serializers/document-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Serializer | document', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      let store = this.owner.lookup('service:store');\n      let serializer = store.serializerFor('document');\n\n      assert.ok(serializer);\n    });\n\n    (0, _qunit.test)('it serializes records', function (assert) {\n      let store = this.owner.lookup('service:store');\n      let record = Ember.run(() => store.createRecord('document', {}));\n\n      let serializedRecord = record.serialize();\n\n      assert.ok(serializedRecord);\n    });\n  });\n});","define('ember-share-db/tests/unit/services/assets-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Service | assets', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      let service = this.owner.lookup('service:assets');\n      assert.ok(service);\n    });\n  });\n});","define('ember-share-db/tests/unit/services/code-parsing-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Service | code-parsing', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      let service = this.owner.lookup('service:code-parsing');\n      assert.ok(service);\n    });\n  });\n});","define('ember-share-db/tests/unit/services/documents-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Service | documents', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      let service = this.owner.lookup('service:documents');\n      assert.ok(service);\n    });\n  });\n});","define('ember-share-db/tests/unit/services/mimic-api-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Service | mimic-api', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      let service = this.owner.lookup('service:mimic-api');\n      assert.ok(service);\n    });\n  });\n});","define('ember-share-db/tests/unit/services/ops-player-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Service | ops-player', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      let service = this.owner.lookup('service:ops-player');\n      assert.ok(service);\n    });\n  });\n});","define('ember-share-db/tests/unit/services/password-reset-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Service | password-reset', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      let service = this.owner.lookup('service:password-reset');\n      assert.ok(service);\n    });\n  });\n});","define('ember-share-db/tests/unit/services/session-account-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Service | sessionAccount', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      let service = this.owner.lookup('service:sessionAccount');\n      assert.ok(service);\n    });\n  });\n});","define('ember-share-db/config/environment', [], function() {\n  var prefix = 'ember-share-db';\ntry {\n  var metaName = prefix + '/config/environment';\n  var rawConfig = document.querySelector('meta[name=\"' + metaName + '\"]').getAttribute('content');\n  var config = JSON.parse(unescape(rawConfig));\n\n  var exports = { 'default': config };\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  return exports;\n}\ncatch(err) {\n  throw new Error('Could not read config from meta tag with name \"' + metaName + '\".');\n}\n\n});\n","require('ember-share-db/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappingsjMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtlBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtjBA;AACA;","file":"tests.js"}