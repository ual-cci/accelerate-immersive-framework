<p class = "tutorial-text">
  Maximilian.js is a javascript library for sound analysis and synthesis. This document is a reference to the Maxmilian.js API, illustrated with examples.
</p>

<p class = "tutorial-heading-big">
Quick Start
</p>


<p class = "tutorial-text">
Fork the seed project below to get started with Maximilian.js
</p>

{{embedded-project docId = "f8452701-1d77-4f42-df1e-75f59cb2c744" width="250px" height="600px"}}

<p class = "tutorial-heading-big">The Audio Processing Loop</p>
<p class = "tutorial-text">
The Maximilian audio engine collects audio through a callback function, which is called once per audio sample.  Browsers usually require that this function is initiated by the user (e.g. from a button press)
</p>
<div class='snippet'>
   <pre>
      <code class="javascript">
        var osc1 = new Maximilian.maxiOsc();
        function play() {
          return (osc1.saw(100)) * 0.5;
        }
      </code>
    </pre>
</div>

<p class = "tutorial-text">
Return an array of values to have multi-channel sound (as many channels as are available on your setup)
</p>
<div class='snippet'>
   <pre>
      <code class="javascript">
        var osc1 = new Maximilian.maxiOsc();
        var osc2 = new Maximilian.maxiOsc();
        function play() {
          return [osc1.saw(100),osc1.saw(200)];
        }
      </code>
    </pre>
</div>

<p class = "tutorial-heading-big">
Maximilian.js and AudioWorklets
</p>

<p class = "tutorial-text">
As of September 2021, Maximilian.js has undergone quite a large change in order to keep up with the ever changing face of signal processing audio on the web.
</p>

<p class = "tutorial-text">
Our previous approach of using the <a href = "https://developer.mozilla.org/en-US/docs/Web/API/ScriptProcessorNode">ScripProcessorNode</a> has broadly been deprecated so the existing library was unusable without some major updating.
</p>

<p class = "tutorial-text">
So now, we have the all singing, all dancing <strong>Audio Worklets</strong> version of Maximilian.js. Largely the same functionality and API, with a few additions in the way you set up your projects. This has the <strong>massive advantage</strong> of running on a dedicated audio thread, greatly reducing interference when you're making your internet-based-interactive-audio-spectaculars.
</p>

<p class = "tutorial-heading">
Separating Out the Audio Code
</p>

<p class = "tutorial-text">
If you look at the example above (hit the <code>Show Code</code> button in the bottom right), you will see there are <strong>two script elements</strong> in the project.
</p>

<p class = "tutorial-text">
The top one (with the id <code>myAudioScript</code>) holds the Maximilian code. This will look super familiar if you've used Maximilian before. It exists in its separate script tag because it needs to be passed through to the separate audio processing thread.
</p>

<p class = "tutorial-heading">
Setting up the Main Javascript
</p>

<p class = "tutorial-text">
There are only two things we need to do initially in the script tags that hold our <strong>non-Maximilian</strong> related Javascript code.
<ol>
  <li>Import the <code>maxi</code> Module</li>
  <li>Tell <code>maxi</code> where to get the audio code from</li>
</ol>
<div class='snippet'>
   <pre>
      <code class="javascript">
        import {
              maxi
        } from "https://mimicproject.com/libs/maximilian.v.0.1.mjs"

        //Get audio code from script element
        maxi.setAudioCode("myAudioScript")
      </code>
    </pre>
</div>
</p>

<p class = "tutorial-text">
  <strong>Pro Tip</strong>: You can also pass in a <strong>URL</strong> that returns some audio code, or just pass in a <code>literal String</code> of the audio code you want to run.
</p>

<p class = "tutorial-heading">
  Communicating between Threads
</p>

<p class = "tutorial-text">
  One downside of this new implementation is that its slightly more complex to communicate between your audio <code>Maximilian.js</code> code on the audio thread, and your other Javascript code. Luckily, we have some pretty simple additions to make this as smooth as possible
</p>
<p class = "tutorial-text">
  Here we have updated the example above so that the <strong>frequency of the oscillators</strong> is controlled by the <strong>Mouse X coordinate</strong>.
</p>

{{embedded-project docId = "efd811e7-3880-fe1e-55e3-a9a36c51fe5a" width="250px" height="600px"}}

<p class = "tutorial-text">
  On the main Javascript side, we collect the data (in this case the mouse position), and use <code>maxi.send()</code> to send it to the audio thread. We do this by specifying an
  <ol>
    <li>ID (so we can pick it up on the other side)</li>
    <li>An array of floats (the values we want to send)</li>
  </ol>
</p>

<div class='snippet'>
   <pre>
      <code class="javascript">
        var onMouseMove = (e) => {
          const x = e.pageX/window.innerWidth;
          //Send data to audio worklet
          maxi.send("fromMain", [x*2000]);
        }
        document.addEventListener( 'mousemove', onMouseMove, true )
      </code>
    </pre>
</div>

<p class = "tutorial-text">
  On the audio side, we make an <code>Input</code> object, telling it the ID of the values we want to recieve. Then, in the <code>audio processing loop</code> we can call <code>input.getValue()</code> to retrieve any new values that have been sent through.
</p>

<div class='snippet'>
   <pre>
      <code class="javascript">
        var input = new Input('fromMain');
        var osc1 = new Maximilian.maxiOsc();
        var osc2= new Maximilian.maxiOsc();
        function play() {
          //Get data from main thread
          var mousex = input.getValue();
          return (osc1.saw(mousex) + osc2.saw(mousex+0.5)) * 0.5;
        }
      </code>
    </pre>
</div>



<h1>Reference</h1>

<h2>maxi</h2>

<h3>methods</h3>

<p class = "tutorial-text">
  <span style="font-family:monospace">setAudioCode(scriptTag | url | stringLiteral)</span>

  <br>Supply the Maximilian.js audio code
  <div style="margin-left:100px">
  <br><span style="font-family:monospace"></span>You can specify <strong>1</strong> of the following:
  <ul>
  <li>The id of a script tag containing the code OR  </li>
  <li>The URL of a text document containing the code (or the name of a MIMIC tab) OR</li>
  <li>The literal code as a string</li>
</ul>
  </div>
</p>
<p class = "tutorial-text">
  <span style="font-family:monospace">addSample(name, url)</span>
  <br>Provide name and sample to load
  <div style="margin-left:100px">
  <br><span style="font-family:monospace">name</span>: name of the sample (use for reference when playing on in audio code)
  <br><span style="font-family:monospace">url</span>: URL to .wav file, or base64 encoded version. Can just use filename of asset uploaded to Mimic document.
  <br><span style="font-family:monospace">Returns Promise on completion.</span> Samples should be loaded before audio code is run so can be used with <code>await</code>. See example below
  <br>
  <pre>
     <code class="javascript">
       await maxi.addSample("drumBreak","drill.wav")
       //Get audio code from script element
       maxi.setAudioCode("myAudioScript");
     </code>
   </pre>
  </div>

</p>

<p class = "tutorial-text">
{{embedded-project docId = "64b9a233-f617-8f64-b843-2c323e6336bc" width="250px" height="600px"}}
</p>

<p class = "tutorial-text">
  <span style="font-family:monospace">send(name, values)</span>
  <br>Send data to the audio thread
  <div style="margin-left:100px">
  <br><span style="font-family:monospace">name</span>: Tag the values with a name (for use with <code>Input()</code> on the audio thread)
  <br><span style="font-family:monospace">values</span>: An array of floating point numbers to send
  </div>

</p>



<p class = "tutorial-text">
  <span style="font-family:monospace">connectMediaStream()</span>
  <div style="margin-left:100px">
  <br>Asks permission to use microphone input in browser
  <br>Inputs is supplied as an argument to the play() function
  <br>
  <pre>
     <code class="javascript">
       function play(inputs) {
         return inputs * osc.sinewave(200)
       }
     </code>
   </pre>
 </div>
</p>
<p class = "tutorial-text">
{{embedded-project docId = "254115a6-8ddf-ad16-76a3-01d68c77f9cd" width="250px" height="600px"}}
</p>

<p class = "tutorial-text">
  <span style="font-family:monospace">play()</span>
  <div style="margin-left:100px">
  <br>Toggles play / pause of audio (suspends / resumes audio node)
 </div>
</p>

<p class = "tutorial-text">
  <span style="font-family:monospace">hush()</span>
  <div style="margin-left:100px">
  <br>Stops playback (suspends audio node)
 </div>
</p>

<h3>properties</h3>

<p class = "tutorial-text">
  <span style="font-family:monospace">audioWorkletNode.context</span>
  <br>This is the webaudio context used by the maximilian.js audio engine
</p>
<p class = "tutorial-text">
  <span style="font-family:monospace">audioWorkletNode</span>
  <br>This is the webaudio node that carries out audio processing in maximilian.js.  You can connect this to other webaudio nodes (for a example a spectral analyser)
</p>





<h2>maxiOsc</h2>

<p class = "tutorial-text">
An oscillator with methods for a number of waveforms
</p>

<h3>methods</h3>

<p class = "tutorial-text">
  <span style="font-family:monospace">sinewave(frequency)</span>
  <br>outputs a sine wave at the given frequency between -1.0 & 1.0
</p>

<p class = "tutorial-text">
{{embedded-project docId = "ba8a4b5b-881c-d01b-6dac-dda27a01147b" width="250px" height="600px"}}
</p>


<p class = "tutorial-text">
  <span style="font-family:monospace">coswave(frequency)</span>
  <br>outputs a cosine wave at the given frequency between -1.0 & 1.0
</p>
<p class = "tutorial-text">
  <span style="font-family:monospace">triangle(frequency)</span>
  <br>outputs a triangle wave at the given frequency between -1.0 & 1.0
</p>
<p class = "tutorial-text">
  <span style="font-family:monospace">saw(frequency)</span>
  <br>outputs a saw wave at the given frequency between -1.0 & 1.0
</p>
<p class = "tutorial-text">
  <span style="font-family:monospace">sawn(frequency)</span>
  <br>outputs a bandlimited saw wave at the given frequency between -1.0 & 1.0
</p>
<p class = "tutorial-text">
  <span style="font-family:monospace">square(frequency, pulsewidth)</span>
  <br>outputs a square wave at the given frequency and pulsewidth between -1.0 & 1.0
  <div style="margin-left:100px">
  <br><span style="font-family:monospace">pulsewidth</span>: in the range 0 to 1
  </div>
</p>
<p class = "tutorial-text">
  <span style="font-family:monospace">phasor(frequency)</span>
  <br>outputs a linear ramp at the given frequency between 0.0 & 1.0
</p>
<p class = "tutorial-text">
  <span style="font-family:monospace">phasor(frequency, startPhase, endPhase)</span>
  <br>outputs a linear ramp at the given frequency between 0.0 & 1.0
  <div style="margin-left:100px">
    <br><span style="font-family:monospace">startPhase</span>: the start value of the ramp, in the range 0 to 1
    <br><span style="font-family:monospace">endPhase</span>: the end value of the ramp, in the range 0 to 1
  </div>
</p>
<p class = "tutorial-text">
  <span style="font-family:monospace">noise()</span>
  <br>outputs white noise between -1.0 & 1.0
</p>
<p class = "tutorial-text">
  <span style="font-family:monospace">phaseReset(phase)</span>
  <br>reset the phase to a specific value
  <div style="margin-left:100px">
    <br><span style="font-family:monospace">phase</span>: between 0 and 1
  </div>
</p>
<!--
<p class = "tutorial-text">
{{embedded-project docId = "ba8a4b5b-881c-d01b-6dac-dda27a01147b" width="250px" height="600px"}}
</p> -->




<h2>maxiSample</h2>

<p class = "tutorial-text">
Play and manipulate sound samples.  Load sample data from a url, using <code>addSample()</code> (see above).
</p>

<h3>methods</h3>

<p class = "tutorial-text">
  <span style="font-family:monospace">setSample(bufferData)</span>
  <br>Set sample using <code>getSampleBuffer(name)</code> function name
  <div style="margin-left:100px">

  <pre>
     <code class="javascript">
       var sample = new Maximilian.maxiSample();
       sample.setSample(this.getSampleBuffer('kick123'))
     </code>
   </pre>
 </div>
</p>

<p class = "tutorial-text">
  <span style="font-family:monospace">playOnZXAtSpeed(trigger, rate)</span>
  <br>Play sample at a given playback rate, retriggering back to start on zero crossing
  <div style="margin-left:100px">
  <br><span style="font-family:monospace">trigger</span>: Trigger signal. Use 1 to just play once, or oscillator to retrigger over time (e.g. for looping). See <code>addSample()</code> example above.
  <br><span style="font-family:monospace">rate</span>:Playback rate as proportion of original (e.g 1 is normal, 2 is double)
  </div>
</p>

<p class = "tutorial-text">
  <span style="font-family:monospace">playOnZXAtSpeedFromOffset(trigger, rate, offset)</span>
  <br>Play sample at a given playback rate and given offset, retriggering back to start on zero crossing
  <div style="margin-left:100px">
  <br><span style="font-family:monospace">trigger</span>: Trigger signal. Use 1 to just play once, or oscillator to retrigger over time (e.g. for looping). See <code>addSample()</code> example above.
  <br><span style="font-family:monospace">rate</span>:Playback rate as proportion of original (e.g 1 is normal, 2 is double)
  <br><span style="font-family:monospace">rate</span>:Offset of start position proportion of original (e.g between 0 (beginning) and 1 (end))
  </div>
</p>

<p class = "tutorial-text">
  <span style="font-family:monospace">isReady()</span>
  <br>returns true if sample is loaded
</p>
<p class = "tutorial-text">
  <span style="font-family:monospace">getLength()</span>
  <br>returns the length of the sample in samples
</p>


<h2>maxiFilter</h2>

<p class = "tutorial-text">
Various filters
</p>

<h3>methods</h3>

<p class = "tutorial-text">
  <span style="font-family:monospace">lores(input, cutoff, resonance) </span>
  <br>A lowpass resonant filter
  <div style="margin-left:100px">
    <br><span style="font-family:monospace">input</span>: a signal
    <br><span style="font-family:monospace">cutoff</span>: the cutoff frequency (Hz)
    <br><span style="font-family:monospace">resonance</span>: from 0 (low resonance) upwards
  </div>
</p>
<p class = "tutorial-text">
{{embedded-project docId = "42c8411a-f380-1a62-6ee5-ffe010548a03" width="250px" height="370px"}}
</p>
<p class = "tutorial-text">
  <span style="font-family:monospace">hires(input, cutoff, resonance) </span>
  <br>A highpass resonant filter
  <div style="margin-left:100px">
    <br><span style="font-family:monospace">input</span>: a signal
    <br><span style="font-family:monospace">cutoff</span>: the cutoff frequency (Hz)
    <br><span style="font-family:monospace">resonance</span>: from 0 (low resonance) upwards
  </div>
</p>
<p class = "tutorial-text">
{{embedded-project docId = "97c4239d-0a15-9304-0988-96f5c1f1748f" width="250px" height="370px"}}
</p>
<p class = "tutorial-text">
  <span style="font-family:monospace">lopass(input, cutoff) </span>
  <br>A onepole lowpass filter
  <div style="margin-left:100px">
    <br><span style="font-family:monospace">input</span>: a signal
    <br><span style="font-family:monospace">cutoff</span>: between 0 and 1
  </div>
</p>
<p class = "tutorial-text">
  <span style="font-family:monospace">hipass(input, cutoff) </span>
  <br>A onepole highpass filter
  <div style="margin-left:100px">
    <br><span style="font-family:monospace">input</span>: a signal
    <br><span style="font-family:monospace">cutoff</span>: between 0 and 1
  </div>
</p>



<h2>maxiSVF</h2>

<p class = "tutorial-text">
A state variable filter
</p>

<h3>methods</h3>

<p class = "tutorial-text">
  <span style="font-family:monospace">play(input, lowPassMix, highPassMix, bandPassMix, notchMix)</span>
  <br>Process a signal with the filter
  <div style="margin-left:100px">
    <br><span style="font-family:monospace">input</span>: a signal
    <br><span style="font-family:monospace">lowPassMix</span>: the amount of low pass filtering, between 0 and 1
    <br><span style="font-family:monospace">highPassMix</span>: the amount of high pass filtering, between 0 and 1
    <br><span style="font-family:monospace">bandPassMix</span>: the amount of band pass filtering, between 0 and 1
    <br><span style="font-family:monospace">notchMix</span>: the amount of notch filtering, between 0 and 1
  </div>
</p>
<p class = "tutorial-text">
  <span style="font-family:monospace">setCutoff(frequency)</span>
  <br>The cutoff frequence
  <div style="margin-left:100px">
    <br><span style="font-family:monospace">frequency</span>: frequency between 20 and 20000, although this filter sounds best below 5000
  </div>
</p>
<p class = "tutorial-text">
  <span style="font-family:monospace">setResonance(amount)</span>
  <br>The amount of resonance
  <div style="margin-left:100px">
    <br><span style="font-family:monospace">amount</span>: from 0 upwards, starts to ring from 2-3ish, cracks a bit around 10
  </div>
</p>
<p class = "tutorial-text">
{{embedded-project docId = "a06b6415-aceb-3ff3-00f7-094fc0e53c3c" width="250px" height="370px"}}
</p>




<h2>maxiEnv</h2>

<p class = "tutorial-text">
An ADSR envelope
</p>

<h3>methods</h3>

<p class = "tutorial-text">
  <span style="font-family:monospace">setAttack(time)</span>
  <br>The envelope's attack time
  <div style="margin-left:100px">
    <br><span style="font-family:monospace">time</span>: in milliseconds
  </div>
</p>
<p class = "tutorial-text">
  <span style="font-family:monospace">setDecay(time)</span>
  <br>The envelope's decay time
  <div style="margin-left:100px">
    <br><span style="font-family:monospace">time</span>: in milliseconds
  </div>
</p>
<p class = "tutorial-text">
  <span style="font-family:monospace">setSustain(level)</span>
  <br>The envelope's sustain level
  <div style="margin-left:100px">
    <br><span style="font-family:monospace">level</span>: between 0 and 1
  </div>
</p>
<p class = "tutorial-text">
  <span style="font-family:monospace">setRelease(time)</span>
  <br>The envelope's release time
  <div style="margin-left:100px">
    <br><span style="font-family:monospace">time</span>: in milliseconds
  </div>
</p>
<p class = "tutorial-text">
  <span style="font-family:monospace">adsr(level, trigger)</span>
  <br>Get the next value from the envelope
  <div style="margin-left:100px">
    <br><span style="font-family:monospace">level</span>: the overall level of the envelope; everything will be scaled by this value
    <br><span style="font-family:monospace">trigger</span>: the envelope will begin attack when set to 1.0 and release when set to 0.0
  </div>
</p>
<p class = "tutorial-text">
{{embedded-project docId = "0f5d2ad4-132c-d472-6b80-1e76b7d87099" width="250px" height="370px"}}
</p>







<h2>Further information</h2>

maximilian.js is transpiled from C++ code, so it runs with very high efficiency. You can find the source code on github at <a href="https://github.com/mimic-sussex/Maximilian/tree/Maximilian2">https://github.com/mimic-sussex/Maximilian/tree/Maximilian2</a>
