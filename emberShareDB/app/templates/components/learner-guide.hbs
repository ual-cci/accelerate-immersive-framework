<h2>Learner.js</h2>

<p class = "tutorial-text">
This is a quick walkthrough of how to use Learner.js on the MIMIC platform to quickly build your own simple machine learning tools.
</p>
<p class = "tutorial-text">
</p>
<p class = "tutorial-text">
If you would like to check out the JSDoc API documentation, or the look at the source code, see the links below.
</p>
<p class = "tutorial-text">
  <ul>
    <li>
      <a href = "https://www.doc.gold.ac.uk/~lmcca002/Learner.html">Documentation</a>
    </li>
    <li>
      <a href = "https://github.com/Louismac/learnerjs">Github</a>
    </li>
  </ul>

</p>

<p class = "tutorial-text">
Learner.js provides an interface that allows you to easily record in examples of input and output pairings into a dataset that is saved locally in your browser. You can then train a model to respond with new outputs when you provide new inputs. Building from the smarts of <a href = "https://www.doc.gold.ac.uk/eavi/rapidmixapi.com/index.php/documentation/javascript-documentation/">RapidLib</a>, we take care of all the storage, threading and GUI needs and all you have to do is pick what you want to control with what!
</p>

<p class = "tutorial-text">
If you want to learn abit more about the basics of <strong>supervised learning</strong>, you can check out this <a href = {{concat guideUrl "supervised-ml"}}>guide.</a>
</p>

<p class = "tutorial-heading">
A Simple Example
</p>

<p class = "tutorial-text">
Before we look at any code, we can first look at a simple example of a project that uses <strong>Learner.js</strong> to classify clicks from your mouse (x and y coordinates) into one of two possible groups. I know, exciting right?
</p>

<p class = "tutorial-text">
<ol>
  <li>First, we're going to provide the dataset. Select <strong>Record</strong>.</li>
  <li>Now, click a few times in the <strong>bottom left hand corner</strong> of the blue rectangle. You should see the number of saved examples going up.</li>
  <li>Now we want to add in some example of the second class. To do this, change the <strong>Class drop down</strong> to 1.</li>
  <li>Click a few times in the <strong>top right hand corner</strong> of the blue rectangle. Again, you should see the number of saved examples going up.</li>
  <li>Stop <strong>Recording</strong> and click <strong>Train</strong>. When the model is build, it will automatically start running the trained model. This means you can click anywhere in the blue rectangle, and it will tell you which class you are in. You've made a binary decision maker, with no coding!</li>
</ol>
</p>

{{embedded-project docId = "3738a892-330f-15ae-673e-5cb38f25a8e8" height = "700px" manualLoad = false}}

<p class = "tutorial-heading">
Learning the Library
</p>

<p class = "tutorial-text">
  If you hit the <strong>Show Code</strong> button in the bottom right on the project above, you can see how its made. Its not a lot of code! The rest of this document will go through this code from the Learner.js library step by step and have you making amazing projects in no time.
</p>

<p class = "tutorial-text">
You can follow along looking at the code above, or select <strong>Go To Project</strong> (the big green button) to check out the project in a separate tab. Otherwise, you can make a new project from scratch and follow along that way.
</p>

<p class = "tutorial-text">
You can also follow along to more complex examples if you would like, for example, using body tracking or audio analysis! If you want to take on this challenge, you can find <a href = "https://mimicproject.com/inputs">a bunch of fun inputs</a> here.
</p>

<p class = "tutorial-heading">
1. Set up
</p>
<p class = "tutorial-text">
The learner.js library lives on the Mimic website and the first thing we have to do is include the library in our document. You can add the following code to the HTML at the top of your project.
</p>
<pre>
<code>
&lt;script src = "https://mimicproject.com/libs/learner.v.0.2.js"&gt;&lt;/script&gt;
</code>
</pre>
<p class = "tutorial-text">
Now some Javascript! First thing we need to do is make an instance of the main Learner object and save it in a variable to refer to later.
</p>
<pre>
<code>
const learner = new Learner();
</code>
</pre>
<p class = "tutorial-heading">
2.  Add GUI
</p>
<p class = "tutorial-text">
In order to get all the useful interfaces in our project, we need to tell Learner.js to make it, and attach it to an <strong>existing HTML element in our project</strong>.
<p class = "tutorial-text">
  Here we attach the Learner.js interface to a <code>div</code> element called "dataset" that we have included in our project.
</p>

</p>
<pre>
<code>
learner.addGUI(document.getElementById("dataset"));
</code>
</pre>

<p class = "tutorial-heading">
3. Add Model
</p>
<p class = "tutorial-text">
You can now specify a model to use. Each Learner object can only have <strong>one type of model</strong>, so if you want to have <strong>multiple models</strong>, you need to make <strong>multiple Learner objects</strong>!
</p>
<p class = "tutorial-text">
The model we used in the example of is a <strong>Classifier</strong>, in that it applies <strong>discrete labels</strong> to the inputs. Use the code below, specifying the number of classes you wish to discriminate between.
</p>
<pre>
<code>
learner.addClassification(4)
</code>
</pre>
<p class = "tutorial-text">
For regression (continuous values), use the code below, specifying the number of outputs you want to control.
</p>
<pre>
<code>
learner.addRegression(3)
</code>
</pre>
<p class = "tutorial-heading">
Tweaking your models
</p>
<p class = "tutorial-text">
You can also adjust a few parameters of your models by passing an options object. For Regression models, RapidLib uses a Neural Network and the three available parameters to this are below. If you don't know what these mean, don't worry, the defaults will do you fine.
</p>
<pre>
<code>
learner.setModelOptions({
  numEpochs:1000, //defaults to 500
  numHiddenLayers:1, //defaults to 1
  numHiddenNodes:16 //defaults to 1
})
</code>
</pre>
<p class = "tutorial-text">
For Classification, RapidLib uses a K Nearest Neighbour Model and the only parameter is the eponymous K.
</p>
<pre>
<code>
learner.setModelOptions({
  k:5 //defaults to 1
})
</code>
</pre>

<p class = "tutorial-heading">
4. Add data
</p>
<p class = "tutorial-text">
The learner expects to receive examples that are paired input and output mappings. For example, you could add the x and y position of the mouse every time it is moved (the input), paired with the current colour of canvas object (the output).
</p>
<p class = "tutorial-text">
It is important to note that one piece of code (below) serves two purposes.
<ul>
  <li>If you are <strong>recording</strong>, every time you add a new example the pairing is stored in the dataset. To use the values of the Learner.js GUI (the regression sliders or classification dropdown) as output labels, you can call "learner.y"</li>
  <li>If you are <strong>running</strong>, just the input is used and given to the model, which then provides a new output based on the data it has seen.</li>
</ul>
</p>
<p class = "tutorial-text">
Use the code below to add and array of inputs and an array of outputs.
</p>
<pre>
<code>
const whenYouReceiveNewInputs = (newInputs)=> {
  //Match inputs with output labels you have collected
  learner.newExample(newInputs, outputs);
}

//OR//

const whenYouReceiveNewInputs = (newInputs)=> {
  //Use the current values of the GUI as output labels
  learner.newExample(newInputs, learner.y);
}
</code>
</pre>
<p class = "tutorial-heading">
Where does my data get saved?
</p>
<p class = "tutorial-text">
Each dataset is specific to a MIMIC documents, and your dataset will be saved in the browser's IndexedDB. This means that will persist beyond reruns of the project, refreshes of the page and closing of the browser window (in public mode). You will <strong>lose</strong> the data if you clear your cache, or if you close the window and you are in private / incognito mode.
</p>
<p class = "tutorial-heading">
Downloading and Loading Datasets
</p>
<p class = "tutorial-text">
You may wish to save your dataset to your local machine, or upload your current dataset to our servers, so that anyone who runs your project can train a model using your dataset. Luckily, you can do that.
</p>
<p class = "tutorial-text">
First you have to download the data. Just hit the "Download Data" button on the GUI and you will get a .json file with all your lovely data.
</p>
<p class = "tutorial-text">
You can then upload this file as an asset to your project and load in the data when your project is run. As the set up of the learner object is aynchronous, you can use the onLoad() callback to load your data. See below how you pass the function to the Learner constructor, in which you load the data, then when that is done, train().
</p>
<pre>
<code>
const learner = new Learner({onLoad:()=>{
  learner.loadTrainingData("myLearnerData.json").then(()=> {
    learner.train()
  })
}})
</code>
</pre>
<p class = "tutorial-heading">
Pro Tip for Timing Recordings
</p>
<p class = "tutorial-text">
You can also use the following functions to provide a count in to recording, this will delay the start of recording the given number of seconds after the "record" button has been pressed. You can also choose to limit recording time, again specifying a given number of seconds beforehand you want to record for before it is automatically shut off. Both default to 0.
<pre>
<code>
learner.setCountIn(5)
learner.setRecordLimit(5)
</code>
</pre>
</p>
<p class = "tutorial-heading">
5. Respond to outputs
</p>
<p class = "tutorial-text">
Finally, you should specify a function the is called when an a new output value is available. Again this function serves two purposes with one piece of code.
<ul>
  <li>When you are  <strong>not running</strong>, this will be in response to the GUI (the dropdown or the sliders) changing. You can save these in a variable to use later, or if you need to access them they are saved in the learner.y variable.</li>
  <li>If you are  <strong>running</strong>, this will be the models response to an input. </li>
</ul>
The function returns an array of output values. Obviously, you can do something more fun.
</p>
<pre>
<code>
learner.onOutput = (data)=> {
  y = data;
});
</code>
</pre>
<p class = "tutorial-heading">
Web Audio Outputs (MaxiInstruments)
</p>
<p class = "tutorial-text">
We have a complimentry set of synthesisers and samplers, backed by AudioWorklets to reduce interference between the machine learning and the audio. They are designed to easily combine with Learner.js and <a href = "https://mimicproject.com/guides/maxi-instrument">you can learn about them</a>
</p>
<p class = "tutorial-heading">
External Outputs
</p>
<p class = "tutorial-text">
  You can use the examples below to output with MIDI control message or OSC messages to control music or visual programs locally (Max/MSP, Supercollider, openFrameworks, Processing, PD etc....)
<ul>
<li><a href = "https://mimicproject.com/code/034ea170-483e-229a-f0e2-837d76c721c0">MIDI example sketch </a></li>This uses WebMidi to send the output values as control changes. Note WebMidi is curently only supported in Chrome. You can send to external devices or connect to your internal MIDI bus, <a href = "https://help.ableton.com/hc/en-us/articles/209774225-How-to-setup-a-virtual-MIDI-bus">this is a good resource for how to do that</a>. First refresh devices, then select your output source and channel from the dropdown.
<li><a href = "https://mimicproject.com/code/247e4538-0366-b735-9052-0e875a96a140">OSC example sketch </a></li> As you cannot OSC directly form a browser, this connects to a local Node.js program via webosckets then forwards the data out via OSC, where you can do with it what you will.
<ol>
  <li>First, <a href = "https://github.com/Louismac/osc-repeater">download the node program</a>. </li>
  <li>Install <a href = "http://(https//nodejs.org/en/download/)">node </a> if you dont have it on your laptop</li>
  <li>In the terminal (OSX) or command-prompt (windows), navigate (cd) to the folder you unzipped to code to and run
  <pre>
  <code>
    npm install & node osc-repeater.js
  </code>
  </pre>
  </li>
  <li>This should now forward the outputs from MIMIC to the port you have specfied in the code (defaults to 57120).</li>
</ol>
</ul>
</p>
<p class = "tutorial-heading">
6. Now be free and make amazing projects!
</p>
<p class = "tutorial-text">You can find <a href = "https://mimicproject.com/inputs">a bunch of fun inputs</a>
</p>
<p class = "tutorial-text">
You can also see the source and instructions for running the library locally or in your own projects away from the MIMIC platform in <a href = "https://github.com/Louismac/learnerjs">this repository</a>. There are also <a href = "https://www.doc.gold.ac.uk/~lmcca002/Learner.html">full API docs</a>.
</p>
