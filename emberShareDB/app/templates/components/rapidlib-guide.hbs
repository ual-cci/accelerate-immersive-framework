<p class = "tutorial-text">
  This page provides a minimal guide on how to use the RapidLib. It shows how to build and use simple machine
  learning objects, in just a few steps.
</p>

<h2>1. Add RapidLib to your HTML page </h2>

<p class = "tutorial-text">First, to install RapidLib you need to include it in your HTML page using the HTML <span style="font-family: 'Courier New', Courier, monospace;">&lt;script&gt;</span> tag.</p>

<div class='snippet'>
  <pre>
    <code class="javascript">
        // Just include this script tag in your HTML page
        &lt;script src="RapidLib.js"&gt;&lt;&#47;script&gt;
    </code>
  </pre>
</div>

<p class = "tutorial-text">Now you have the RapidLib module available on the Javascript global scope.</p>

<h2>2. Load RapidLib to create a Machine Learning object</h2>

<p class = "tutorial-text">Use <span style="font-family: 'Courier New', Courier, monospace;">RapidLib()</span> to load the RapidLib module into a variable. That variable will give you access to the Machine Learning objects that RapidLib provides.</p>

<div class='snippet'>
  <pre>
      <code class="javascript">
        var rapidLib = RapidLib();

        var myRegression            = new rapidLib.Regression();

        var myClassification        = new rapidLib.Classification();

        var mySeriesClassification  = new rapidLib.SeriesClassification();
      </code>
    </pre>
</div>

<p class = "tutorial-text">RapidLib provides constructors to three main objects: <span style="font-family: 'Courier New', Courier, monospace;">Regression</span>, <span style="font-family: 'Courier New', Courier, monospace;">Classification</span> and <span style="font-family: 'Courier New', Courier, monospace;">SeriesClassification</span>.</p>

<p class = "tutorial-text">You can use each one of these objects to apply a specific Machine Learning task.</p>

<h2>3. Create a data set </h2>

<p class = "tutorial-text">To apply a Machine Learning task such as training a <strong>regression</strong> model, you need data and a data
  structure that holds it&mdash;this is usually called a <strong>data set</strong>.</p>

<p class = "tutorial-text">The <span style="font-family: 'Courier New', Courier, monospace;">Regression</span> and <span style="font-family: 'Courier New', Courier, monospace;">Classification</span> objects expect a
  certain structure from a <strong>data set</strong> object, as you can see in the example below.
</p>

<div class='snippet'>
  <pre>
      <code class="javascript">
        var myData = [
          {
            input: [48],
            output: [130.81]
          },
          {
            input: [54],
            output: [185.00]
          },
          {
            input: [60],
            output: [261.63]
          },
          {
            input: [66],
            output: [369.994]
          },
          {
            input: [72],
            output: [523.25]
          }
        ];
      </code>
    </pre>
</div>

<p class = "tutorial-text"><span style="font-family: 'Courier New', Courier, monospace;">myData</span> is a <strong>data set</strong> that contains a list of objects. Each of these
objects is an <strong>example</strong> that contains a list of <strong>inputs</strong> matched to a list of desired
<strong>outputs</strong>.</p>

<div class='note'>
  <h3><strong>Note:</strong></h3>
  <ul>
  <li><p class = "tutorial-text"><span style="font-family: 'Courier New', Courier, monospace;">myData</span> is implemented as a Javascript Array containing <strong>examples</strong>
    that are implemented as Javascript objects.</p></li>
  <li><p class = "tutorial-text">Both <span style="font-family: 'Courier New', Courier, monospace;">input</span> and <span style="font-family: 'Courier New', Courier, monospace;">output</span> are
    implemented as Javascript Arrays, although the examples in <span style="font-family: 'Courier New', Courier, monospace;">myData</span> match one input
    to one output.</p></li>
  <li><p class = "tutorial-text">You need to make sure that the number of inputs and outputs <strong>remain constant</strong> for the data sets of
    a specific Machine Learning object.</p></li>
  </ul>
</div>

<h2>4. Train a Machine Learning object with a data set </h2>

<p class = "tutorial-text">To train a Machine Learning object, for instance a <strong>regression</strong> object called <span style="font-family: 'Courier New', Courier, monospace;">myRegression</span>, you can use the <span style="font-family: 'Courier New', Courier, monospace;">train()</span> method that accepts a
<strong>data set</strong> object.</p>

<div class='snippet'>
  <pre>
    <code class="javascript">
      myRegression.train(myData);
    </code>
  </pre>
</div>

<p class = "tutorial-text">Note that the <span style="font-family: 'Courier New', Courier, monospace;">train()</span> method is synchronous and that, to complete, it takes a
 proportional amount of time to the size of your training data set.</p>

<h2>5. Run a trained Machine Learning object on new data</h2>

<p class = "tutorial-text">Once your <strong>regression</strong> object is trained, you can run it on new data and get the results of the
 learned model. </p>

<div class='snippet'>
   <pre>
      <code class="javascript">
        var newInput = [64];

        var freqHz = myRegression.run(newInput);
      </code>
    </pre>
</div>

<p class = "tutorial-text">You can either re-train your <strong>regression</strong> object to refine it or terminate the process.</p>

<hr>

<h2>Hello World!</h2>

<p class = "tutorial-text">The next code snippet shows a simple but complete example of applying the RapidLib for a machine learning task.</p>

<div class='snippet'>
   <pre>
     <code class="javascript">
      &lt;!DOCTYPE html&gt;
      &lt;html&gt;
      &lt;head&gt; &lt;/head&gt;
      &lt;body&gt; &lt;/body&gt;
      &lt;script src="RapidLib.js"&gt; &lt;&#47;script&gt;

      &lt;script&gt;
        var rapidLib = RapidLib();

        //Create a machine learning object for regression
        var midiToFrequencyRegression = new rapidLib.Regression();

        //Create a Javascript object to hold your training data
        var myData = [
          {
            input: [48],
            output: [130.81]
          },
          {
            input: [54],
            output: [185.00]
          },
          {
            input: [60],
            output: [261.63]
          },
          {
            input: [66],
            output: [369.994]
          },
          {
            input: [72],
            output: [523.25]
          }
        ];


        //Train a machine learning model with the data
        midiToFrequencyRegression.train(myData);

        //Run the trained model with a new input
        var newInput = [64];
        var freqHz = midiToFrequencyRegression.run(newInput);

        console.log(freqHz); // 333.713

      &lt;&#47;script&gt;
      &lt;/html&gt;
      </code>
    </pre>
 </div>


<p class = "tutorial-text">Note that, in this example, the variable keeping the <strong>regression</strong> object here is named <span style="font-family: 'Courier New', Courier, monospace;">midiToFrequencyRegression</span>.</p>

<p class = "tutorial-text">The model trained with the <span style="font-family: 'Courier New', Courier, monospace;">myData</span> data set converts MIDI values
  to Frequency values.</p>

<h2>If you want MOAR...</h2>
<p class = "tutorial-text">If you'd like to have a deeper exploration and get your hands on more applied examples of RapidLib, check out the
 ``Machine Learning for Musicians and Artists`` guide.</p>
